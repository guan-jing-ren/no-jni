#ifndef java_beans_PropertyChangeListenerProxy_HPP
#define java_beans_PropertyChangeListenerProxy_HPP

#include "../../jfwd_decl.hpp"

class ::java::beans::PropertyChangeListenerProxy : public jObject<::java::beans::PropertyChangeListenerProxy, ::java::util::EventListenerProxy> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_beans / "PropertyChangeListenerProxy";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::java::beans::PropertyChangeListener)>(), //
		jMethod<::java::lang::String()>("getPropertyName"), //
		jMethod<::jvoid(::java::beans::PropertyChangeEvent)>("propertyChange"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getPropertyName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPropertyName")] != -1);
		return call<R>("getPropertyName", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto propertyChange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("propertyChange")] != -1);
		return call<R>("propertyChange", forward<Args>(args)...);
	}

};

#endif
