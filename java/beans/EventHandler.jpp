#ifndef java_beans_EventHandler_HPP
#define java_beans_EventHandler_HPP

#include "../../jfwd_decl.hpp"

class ::java::beans::EventHandler : public jObject<::java::beans::EventHandler, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_beans / "EventHandler";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::Object, ::java::lang::String, ::java::lang::String, ::java::lang::String)>(), //
		jMethod<::java::lang::Object(::java::lang::Class, ::java::lang::Object, ::java::lang::String)>("create"), //
		jMethod<::java::lang::Object(::java::lang::Class, ::java::lang::Object, ::java::lang::String, ::java::lang::String)>("create"), //
		jMethod<::java::lang::Object(::java::lang::Class, ::java::lang::Object, ::java::lang::String, ::java::lang::String, ::java::lang::String)>("create"), //
		jMethod<::java::lang::String()>("getAction"), //
		jMethod<::java::lang::String()>("getEventPropertyName"), //
		jMethod<::java::lang::String()>("getListenerMethodName"), //
		jMethod<::java::lang::Object()>("getTarget"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::reflect::Method, ::java::lang::Object *)>("invoke"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	static auto create(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("create")] != -1);
		return scall<R>("create", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAction")] != -1);
		return call<R>("getAction", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getEventPropertyName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getEventPropertyName")] != -1);
		return call<R>("getEventPropertyName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getListenerMethodName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getListenerMethodName")] != -1);
		return call<R>("getListenerMethodName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTarget")] != -1);
		return call<R>("getTarget", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto invoke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("invoke")] != -1);
		return call<R>("invoke", forward<Args>(args)...);
	}

};

#endif
