#ifndef java_beans_Visibility_HPP
#define java_beans_Visibility_HPP

#include "../../jfwd_decl.hpp"

class ::java::beans::Visibility : public jObject<::java::beans::Visibility, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_beans / "Visibility";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean()>("avoidingGui"), //
		jMethod<::jvoid()>("dontUseGui"), //
		jMethod<::jboolean()>("needsGui"), //
		jMethod<::jvoid()>("okToUseGui"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto avoidingGui(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("avoidingGui")] != -1);
		return call<R>("avoidingGui", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dontUseGui(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("dontUseGui")] != -1);
		return call<R>("dontUseGui", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto needsGui(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("needsGui")] != -1);
		return call<R>("needsGui", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto okToUseGui(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("okToUseGui")] != -1);
		return call<R>("okToUseGui", forward<Args>(args)...);
	}

};

#endif
