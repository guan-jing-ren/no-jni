#ifndef java_beans_BeanDescriptor_HPP
#define java_beans_BeanDescriptor_HPP

#include "../../jfwd_decl.hpp"

class ::java::beans::BeanDescriptor : public jObject<::java::beans::BeanDescriptor, ::java::beans::FeatureDescriptor> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_beans / "BeanDescriptor";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::Class)>(), //
		jConstructor<::jvoid(::java::lang::Class, ::java::lang::Class)>(), //
		jMethod<::java::lang::Class()>("getBeanClass"), //
		jMethod<::java::lang::Class()>("getCustomizerClass"), //
	};

	template<typename R = ::java::lang::Class, typename... Args>
	auto getBeanClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBeanClass")] != -1);
		return call<R>("getBeanClass", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto getCustomizerClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCustomizerClass")] != -1);
		return call<R>("getCustomizerClass", forward<Args>(args)...);
	}

};

#endif
