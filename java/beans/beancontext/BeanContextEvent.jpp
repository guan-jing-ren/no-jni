#ifndef java_beans_beancontext_BeanContextEvent_HPP
#define java_beans_beancontext_BeanContextEvent_HPP

#include "../../../jfwd_decl.hpp"

class ::java::beans::beancontext::BeanContextEvent : public jObject<::java::beans::beancontext::BeanContextEvent, ::java::util::EventObject> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_beans_beancontext / "BeanContextEvent";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::beans::beancontext::BeanContext()>("getBeanContext"), //
		jMethod<::java::beans::beancontext::BeanContext()>("getPropagatedFrom"), //
		jMethod<::jboolean()>("isPropagated"), //
		jMethod<::jvoid(::java::beans::beancontext::BeanContext)>("setPropagatedFrom"), //
	};

	template<typename R = ::java::beans::beancontext::BeanContext, typename... Args>
	auto getBeanContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBeanContext")] != -1);
		return call<R>("getBeanContext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::beans::beancontext::BeanContext, typename... Args>
	auto getPropagatedFrom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPropagatedFrom")] != -1);
		return call<R>("getPropagatedFrom", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPropagated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPropagated")] != -1);
		return call<R>("isPropagated", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPropagatedFrom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPropagatedFrom")] != -1);
		return call<R>("setPropagatedFrom", std::forward<Args>(args)...);
	}

};

#endif
