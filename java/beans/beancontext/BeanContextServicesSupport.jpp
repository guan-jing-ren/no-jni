#ifndef java_beans_beancontext_BeanContextServicesSupport_HPP
#define java_beans_beancontext_BeanContextServicesSupport_HPP

#include "../../../jfwd_decl.hpp"

class ::java::beans::beancontext::BeanContextServicesSupport : public jObject<::java::beans::beancontext::BeanContextServicesSupport, ::java::beans::beancontext::BeanContextSupport> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_beans_beancontext / "BeanContextServicesSupport";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::beans::beancontext::BeanContextServices)>(), //
		jConstructor<::jvoid(::java::beans::beancontext::BeanContextServices, ::java::util::Locale)>(), //
		jConstructor<::jvoid(::java::beans::beancontext::BeanContextServices, ::java::util::Locale, ::jboolean)>(), //
		jConstructor<::jvoid(::java::beans::beancontext::BeanContextServices, ::java::util::Locale, ::jboolean, ::jboolean)>(), //
		jMethod<::jvoid(::java::beans::beancontext::BeanContextServicesListener)>("addBeanContextServicesListener"), //
		jMethod<::jboolean(::java::lang::Class, ::java::beans::beancontext::BeanContextServiceProvider)>("addService"), //
		jMethod<::java::beans::beancontext::BeanContextServices()>("getBeanContextServicesPeer"), //
		jMethod<::java::util::Iterator()>("getCurrentServiceClasses"), //
		jMethod<::java::util::Iterator(::java::lang::Class)>("getCurrentServiceSelectors"), //
		jMethod<::java::lang::Object(::java::beans::beancontext::BeanContextChild, ::java::lang::Object, ::java::lang::Class, ::java::lang::Object, ::java::beans::beancontext::BeanContextServiceRevokedListener)>("getService"), //
		jMethod<::jboolean(::java::lang::Class)>("hasService"), //
		jMethod<::jvoid()>("initialize"), //
		jMethod<::jvoid(::java::beans::beancontext::BeanContextChild, ::java::lang::Object, ::java::lang::Object)>("releaseService"), //
		jMethod<::jvoid(::java::beans::beancontext::BeanContextServicesListener)>("removeBeanContextServicesListener"), //
		jMethod<::jvoid(::java::lang::Class, ::java::beans::beancontext::BeanContextServiceProvider, ::jboolean)>("revokeService"), //
		jMethod<::jvoid(::java::beans::beancontext::BeanContextServiceAvailableEvent)>("serviceAvailable"), //
		jMethod<::jvoid(::java::beans::beancontext::BeanContextServiceRevokedEvent)>("serviceRevoked"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addBeanContextServicesListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addBeanContextServicesListener")] != -1);
		return call<R>("addBeanContextServicesListener", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto addService(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addService")] != -1);
		return call<R>("addService", forward<Args>(args)...);
	}

	template<typename R = ::java::beans::beancontext::BeanContextServices, typename... Args>
	auto getBeanContextServicesPeer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBeanContextServicesPeer")] != -1);
		return call<R>("getBeanContextServicesPeer", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto getCurrentServiceClasses(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCurrentServiceClasses")] != -1);
		return call<R>("getCurrentServiceClasses", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto getCurrentServiceSelectors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCurrentServiceSelectors")] != -1);
		return call<R>("getCurrentServiceSelectors", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getService(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getService")] != -1);
		return call<R>("getService", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasService(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hasService")] != -1);
		return call<R>("hasService", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto initialize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("initialize")] != -1);
		return call<R>("initialize", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto releaseService(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("releaseService")] != -1);
		return call<R>("releaseService", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeBeanContextServicesListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeBeanContextServicesListener")] != -1);
		return call<R>("removeBeanContextServicesListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto revokeService(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("revokeService")] != -1);
		return call<R>("revokeService", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto serviceAvailable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("serviceAvailable")] != -1);
		return call<R>("serviceAvailable", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto serviceRevoked(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("serviceRevoked")] != -1);
		return call<R>("serviceRevoked", forward<Args>(args)...);
	}

};

#endif
