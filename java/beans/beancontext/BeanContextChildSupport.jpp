#ifndef java_beans_beancontext_BeanContextChildSupport_HPP
#define java_beans_beancontext_BeanContextChildSupport_HPP

#include "../../../jfwd_decl.hpp"

class ::java::beans::beancontext::BeanContextChildSupport : public jObject<::java::beans::beancontext::BeanContextChildSupport, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_beans_beancontext / "BeanContextChildSupport";

	constexpr static Enume field_signatures{
		jField<::java::beans::beancontext::BeanContextChild>("beanContextChildPeer"), //
	};

	template<typename F = ::java::beans::beancontext::BeanContextChild>
	auto beanContextChildPeer() const {
		static_assert(field_signatures[jField<F>("beanContextChildPeer")] != -1);
		return at<F>("beanContextChildPeer");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::beans::beancontext::BeanContextChild)>(), //
		jMethod<::jvoid(::java::lang::String, ::java::beans::PropertyChangeListener)>("addPropertyChangeListener"), //
		jMethod<::jvoid(::java::lang::String, ::java::beans::VetoableChangeListener)>("addVetoableChangeListener"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object, ::java::lang::Object)>("firePropertyChange"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object, ::java::lang::Object)>("fireVetoableChange"), //
		jMethod<::java::beans::beancontext::BeanContext()>("getBeanContext"), //
		jMethod<::java::beans::beancontext::BeanContextChild()>("getBeanContextChildPeer"), //
		jMethod<::jboolean()>("isDelegated"), //
		jMethod<::jvoid(::java::lang::String, ::java::beans::PropertyChangeListener)>("removePropertyChangeListener"), //
		jMethod<::jvoid(::java::lang::String, ::java::beans::VetoableChangeListener)>("removeVetoableChangeListener"), //
		jMethod<::jvoid(::java::beans::beancontext::BeanContextServiceAvailableEvent)>("serviceAvailable"), //
		jMethod<::jvoid(::java::beans::beancontext::BeanContextServiceRevokedEvent)>("serviceRevoked"), //
		jMethod<::jvoid(::java::beans::beancontext::BeanContext)>("setBeanContext"), //
		jMethod<::jboolean(::java::beans::beancontext::BeanContext)>("validatePendingSetBeanContext"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addPropertyChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addPropertyChangeListener")] != -1);
		return call<R>("addPropertyChangeListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addVetoableChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addVetoableChangeListener")] != -1);
		return call<R>("addVetoableChangeListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto firePropertyChange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("firePropertyChange")] != -1);
		return call<R>("firePropertyChange", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fireVetoableChange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("fireVetoableChange")] != -1);
		return call<R>("fireVetoableChange", forward<Args>(args)...);
	}

	template<typename R = ::java::beans::beancontext::BeanContext, typename... Args>
	auto getBeanContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBeanContext")] != -1);
		return call<R>("getBeanContext", forward<Args>(args)...);
	}

	template<typename R = ::java::beans::beancontext::BeanContextChild, typename... Args>
	auto getBeanContextChildPeer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBeanContextChildPeer")] != -1);
		return call<R>("getBeanContextChildPeer", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDelegated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isDelegated")] != -1);
		return call<R>("isDelegated", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removePropertyChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removePropertyChangeListener")] != -1);
		return call<R>("removePropertyChangeListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeVetoableChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeVetoableChangeListener")] != -1);
		return call<R>("removeVetoableChangeListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto serviceAvailable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("serviceAvailable")] != -1);
		return call<R>("serviceAvailable", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto serviceRevoked(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("serviceRevoked")] != -1);
		return call<R>("serviceRevoked", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBeanContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBeanContext")] != -1);
		return call<R>("setBeanContext", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto validatePendingSetBeanContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("validatePendingSetBeanContext")] != -1);
		return call<R>("validatePendingSetBeanContext", forward<Args>(args)...);
	}

};

#endif
