#ifndef java_beans_beancontext_BeanContextServiceRevokedEvent_HPP
#define java_beans_beancontext_BeanContextServiceRevokedEvent_HPP

#include "../../../jfwd_decl.hpp"

class ::java::beans::beancontext::BeanContextServiceRevokedEvent : public jObject<::java::beans::beancontext::BeanContextServiceRevokedEvent, ::java::beans::beancontext::BeanContextEvent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_beans_beancontext / "BeanContextServiceRevokedEvent";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::beans::beancontext::BeanContextServices, ::java::lang::Class, ::jboolean)>(), //
		jMethod<::java::lang::Class()>("getServiceClass"), //
		jMethod<::java::beans::beancontext::BeanContextServices()>("getSourceAsBeanContextServices"), //
		jMethod<::jboolean()>("isCurrentServiceInvalidNow"), //
		jMethod<::jboolean(::java::lang::Class)>("isServiceClass"), //
	};

	template<typename R = ::java::lang::Class, typename... Args>
	auto getServiceClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServiceClass")] != -1);
		return call<R>("getServiceClass", std::forward<Args>(args)...);
	}

	template<typename R = ::java::beans::beancontext::BeanContextServices, typename... Args>
	auto getSourceAsBeanContextServices(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSourceAsBeanContextServices")] != -1);
		return call<R>("getSourceAsBeanContextServices", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCurrentServiceInvalidNow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCurrentServiceInvalidNow")] != -1);
		return call<R>("isCurrentServiceInvalidNow", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isServiceClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isServiceClass")] != -1);
		return call<R>("isServiceClass", std::forward<Args>(args)...);
	}

};

#endif
