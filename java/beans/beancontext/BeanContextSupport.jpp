#ifndef java_beans_beancontext_BeanContextSupport_HPP
#define java_beans_beancontext_BeanContextSupport_HPP

#include "../../../jfwd_decl.hpp"

class ::java::beans::beancontext::BeanContextSupport : public jObject<::java::beans::beancontext::BeanContextSupport, ::java::beans::beancontext::BeanContextChildSupport> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_beans_beancontext / "BeanContextSupport";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::beans::beancontext::BeanContext)>(), //
		jConstructor<::jvoid(::java::beans::beancontext::BeanContext, ::java::util::Locale)>(), //
		jConstructor<::jvoid(::java::beans::beancontext::BeanContext, ::java::util::Locale, ::jboolean)>(), //
		jConstructor<::jvoid(::java::beans::beancontext::BeanContext, ::java::util::Locale, ::jboolean, ::jboolean)>(), //
		jMethod<::jboolean(::java::lang::Object)>("add"), //
		jMethod<::jboolean(::java::util::Collection)>("addAll"), //
		jMethod<::jvoid(::java::beans::beancontext::BeanContextMembershipListener)>("addBeanContextMembershipListener"), //
		jMethod<::jboolean()>("avoidingGui"), //
		jMethod<::jvoid()>("clear"), //
		jMethod<::jboolean(::java::lang::Object)>("contains"), //
		jMethod<::jboolean(::java::util::Collection)>("containsAll"), //
		jMethod<::jboolean(::java::lang::Object)>("containsKey"), //
		jMethod<::jvoid()>("dontUseGui"), //
		jMethod<::java::beans::beancontext::BeanContext()>("getBeanContextPeer"), //
		jMethod<::java::util::Locale()>("getLocale"), //
		jMethod<::java::net::URL(::java::lang::String, ::java::beans::beancontext::BeanContextChild)>("getResource"), //
		jMethod<::java::io::InputStream(::java::lang::String, ::java::beans::beancontext::BeanContextChild)>("getResourceAsStream"), //
		jMethod<::java::lang::Object(::java::lang::String)>("instantiateChild"), //
		jMethod<::jboolean()>("isDesignTime"), //
		jMethod<::jboolean()>("isEmpty"), //
		jMethod<::jboolean()>("isSerializing"), //
		jMethod<::java::util::Iterator()>("iterator"), //
		jMethod<::jboolean()>("needsGui"), //
		jMethod<::jvoid()>("okToUseGui"), //
		jMethod<::jvoid(::java::beans::PropertyChangeEvent)>("propertyChange"), //
		jMethod<::jvoid(::java::io::ObjectInputStream)>("readChildren"), //
		jMethod<::jboolean(::java::lang::Object)>("remove"), //
		jMethod<::jboolean(::java::util::Collection)>("removeAll"), //
		jMethod<::jvoid(::java::beans::beancontext::BeanContextMembershipListener)>("removeBeanContextMembershipListener"), //
		jMethod<::jboolean(::java::util::Collection)>("retainAll"), //
		jMethod<::jvoid(::jboolean)>("setDesignTime"), //
		jMethod<::jvoid(::java::util::Locale)>("setLocale"), //
		jMethod<::jint()>("size"), //
		jMethod<::java::lang::Object *()>("toArray"), //
		jMethod<::java::lang::Object *(::java::lang::Object *)>("toArray"), //
		jMethod<::jvoid(::java::beans::PropertyChangeEvent)>("vetoableChange"), //
		jMethod<::jvoid(::java::io::ObjectOutputStream)>("writeChildren"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("add")] != -1);
		return call<R>("add", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto addAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addAll")] != -1);
		return call<R>("addAll", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addBeanContextMembershipListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addBeanContextMembershipListener")] != -1);
		return call<R>("addBeanContextMembershipListener", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto avoidingGui(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("avoidingGui")] != -1);
		return call<R>("avoidingGui", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto contains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("contains")] != -1);
		return call<R>("contains", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto containsAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("containsAll")] != -1);
		return call<R>("containsAll", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto containsKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("containsKey")] != -1);
		return call<R>("containsKey", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dontUseGui(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("dontUseGui")] != -1);
		return call<R>("dontUseGui", forward<Args>(args)...);
	}

	template<typename R = ::java::beans::beancontext::BeanContext, typename... Args>
	auto getBeanContextPeer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBeanContextPeer")] != -1);
		return call<R>("getBeanContextPeer", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale, typename... Args>
	auto getLocale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLocale")] != -1);
		return call<R>("getLocale", forward<Args>(args)...);
	}

	template<typename R = ::java::net::URL, typename... Args>
	auto getResource(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getResource")] != -1);
		return call<R>("getResource", forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	auto getResourceAsStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getResourceAsStream")] != -1);
		return call<R>("getResourceAsStream", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto instantiateChild(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("instantiateChild")] != -1);
		return call<R>("instantiateChild", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDesignTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isDesignTime")] != -1);
		return call<R>("isDesignTime", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isEmpty")] != -1);
		return call<R>("isEmpty", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSerializing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isSerializing")] != -1);
		return call<R>("isSerializing", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto iterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("iterator")] != -1);
		return call<R>("iterator", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto needsGui(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("needsGui")] != -1);
		return call<R>("needsGui", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto okToUseGui(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("okToUseGui")] != -1);
		return call<R>("okToUseGui", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto propertyChange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("propertyChange")] != -1);
		return call<R>("propertyChange", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto readChildren(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("readChildren")] != -1);
		return call<R>("readChildren", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto removeAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeAll")] != -1);
		return call<R>("removeAll", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeBeanContextMembershipListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeBeanContextMembershipListener")] != -1);
		return call<R>("removeBeanContextMembershipListener", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto retainAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("retainAll")] != -1);
		return call<R>("retainAll", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDesignTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDesignTime")] != -1);
		return call<R>("setDesignTime", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLocale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLocale")] != -1);
		return call<R>("setLocale", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto size(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("size")] != -1);
		return call<R>("size", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object *, typename... Args>
	auto toArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toArray")] != -1);
		return call<R>("toArray", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto vetoableChange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("vetoableChange")] != -1);
		return call<R>("vetoableChange", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeChildren(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeChildren")] != -1);
		return call<R>("writeChildren", forward<Args>(args)...);
	}

};

#endif
