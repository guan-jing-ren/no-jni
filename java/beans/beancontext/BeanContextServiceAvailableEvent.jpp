#ifndef java_beans_beancontext_BeanContextServiceAvailableEvent_HPP
#define java_beans_beancontext_BeanContextServiceAvailableEvent_HPP

#include "../../../jfwd_decl.hpp"

class ::java::beans::beancontext::BeanContextServiceAvailableEvent : public jObject<::java::beans::beancontext::BeanContextServiceAvailableEvent, ::java::beans::beancontext::BeanContextEvent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_beans_beancontext / "BeanContextServiceAvailableEvent";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::beans::beancontext::BeanContextServices, ::java::lang::Class)>(), //
		jMethod<::java::util::Iterator()>("getCurrentServiceSelectors"), //
		jMethod<::java::lang::Class()>("getServiceClass"), //
		jMethod<::java::beans::beancontext::BeanContextServices()>("getSourceAsBeanContextServices"), //
	};

	template<typename R = ::java::util::Iterator, typename... Args>
	auto getCurrentServiceSelectors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCurrentServiceSelectors")] != -1);
		return call<R>("getCurrentServiceSelectors", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto getServiceClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServiceClass")] != -1);
		return call<R>("getServiceClass", std::forward<Args>(args)...);
	}

	template<typename R = ::java::beans::beancontext::BeanContextServices, typename... Args>
	auto getSourceAsBeanContextServices(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSourceAsBeanContextServices")] != -1);
		return call<R>("getSourceAsBeanContextServices", std::forward<Args>(args)...);
	}

};

#endif
