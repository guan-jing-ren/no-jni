#ifndef java_beans_FeatureDescriptor_HPP
#define java_beans_FeatureDescriptor_HPP

#include "../../jfwd_decl.hpp"

class ::java::beans::FeatureDescriptor : public jObject<::java::beans::FeatureDescriptor, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_beans / "FeatureDescriptor";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::util::Enumeration()>("attributeNames"), //
		jMethod<::java::lang::String()>("getDisplayName"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::lang::String()>("getShortDescription"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getValue"), //
		jMethod<::jboolean()>("isExpert"), //
		jMethod<::jboolean()>("isHidden"), //
		jMethod<::jboolean()>("isPreferred"), //
		jMethod<::jvoid(::java::lang::String)>("setDisplayName"), //
		jMethod<::jvoid(::jboolean)>("setExpert"), //
		jMethod<::jvoid(::jboolean)>("setHidden"), //
		jMethod<::jvoid(::java::lang::String)>("setName"), //
		jMethod<::jvoid(::jboolean)>("setPreferred"), //
		jMethod<::jvoid(::java::lang::String)>("setShortDescription"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object)>("setValue"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto attributeNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("attributeNames")] != -1);
		return call<R>("attributeNames", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDisplayName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisplayName")] != -1);
		return call<R>("getDisplayName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getShortDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getShortDescription")] != -1);
		return call<R>("getShortDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isExpert(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isExpert")] != -1);
		return call<R>("isExpert", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isHidden(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isHidden")] != -1);
		return call<R>("isHidden", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPreferred(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPreferred")] != -1);
		return call<R>("isPreferred", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDisplayName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDisplayName")] != -1);
		return call<R>("setDisplayName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setExpert(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setExpert")] != -1);
		return call<R>("setExpert", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHidden(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHidden")] != -1);
		return call<R>("setHidden", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setName")] != -1);
		return call<R>("setName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPreferred(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPreferred")] != -1);
		return call<R>("setPreferred", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setShortDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setShortDescription")] != -1);
		return call<R>("setShortDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setValue")] != -1);
		return call<R>("setValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
