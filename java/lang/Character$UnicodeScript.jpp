#ifndef java_lang_Character$UnicodeScript_HPP
#define java_lang_Character$UnicodeScript_HPP

#include "../../jfwd_decl.hpp"

class ::java::lang::Character$UnicodeScript : public jObject<::java::lang::Character$UnicodeScript, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_lang / "Character$UnicodeScript";

	constexpr static Enume field_signatures{
		jField<::java::lang::Character$UnicodeScript>("ARABIC"), //
		jField<::java::lang::Character$UnicodeScript>("ARMENIAN"), //
		jField<::java::lang::Character$UnicodeScript>("AVESTAN"), //
		jField<::java::lang::Character$UnicodeScript>("BALINESE"), //
		jField<::java::lang::Character$UnicodeScript>("BAMUM"), //
		jField<::java::lang::Character$UnicodeScript>("BATAK"), //
		jField<::java::lang::Character$UnicodeScript>("BENGALI"), //
		jField<::java::lang::Character$UnicodeScript>("BOPOMOFO"), //
		jField<::java::lang::Character$UnicodeScript>("BRAHMI"), //
		jField<::java::lang::Character$UnicodeScript>("BRAILLE"), //
		jField<::java::lang::Character$UnicodeScript>("BUGINESE"), //
		jField<::java::lang::Character$UnicodeScript>("BUHID"), //
		jField<::java::lang::Character$UnicodeScript>("CANADIAN_ABORIGINAL"), //
		jField<::java::lang::Character$UnicodeScript>("CARIAN"), //
		jField<::java::lang::Character$UnicodeScript>("CHAKMA"), //
		jField<::java::lang::Character$UnicodeScript>("CHAM"), //
		jField<::java::lang::Character$UnicodeScript>("CHEROKEE"), //
		jField<::java::lang::Character$UnicodeScript>("COMMON"), //
		jField<::java::lang::Character$UnicodeScript>("COPTIC"), //
		jField<::java::lang::Character$UnicodeScript>("CUNEIFORM"), //
		jField<::java::lang::Character$UnicodeScript>("CYPRIOT"), //
		jField<::java::lang::Character$UnicodeScript>("CYRILLIC"), //
		jField<::java::lang::Character$UnicodeScript>("DESERET"), //
		jField<::java::lang::Character$UnicodeScript>("DEVANAGARI"), //
		jField<::java::lang::Character$UnicodeScript>("EGYPTIAN_HIEROGLYPHS"), //
		jField<::java::lang::Character$UnicodeScript>("ETHIOPIC"), //
		jField<::java::lang::Character$UnicodeScript>("GEORGIAN"), //
		jField<::java::lang::Character$UnicodeScript>("GLAGOLITIC"), //
		jField<::java::lang::Character$UnicodeScript>("GOTHIC"), //
		jField<::java::lang::Character$UnicodeScript>("GREEK"), //
		jField<::java::lang::Character$UnicodeScript>("GUJARATI"), //
		jField<::java::lang::Character$UnicodeScript>("GURMUKHI"), //
		jField<::java::lang::Character$UnicodeScript>("HAN"), //
		jField<::java::lang::Character$UnicodeScript>("HANGUL"), //
		jField<::java::lang::Character$UnicodeScript>("HANUNOO"), //
		jField<::java::lang::Character$UnicodeScript>("HEBREW"), //
		jField<::java::lang::Character$UnicodeScript>("HIRAGANA"), //
		jField<::java::lang::Character$UnicodeScript>("IMPERIAL_ARAMAIC"), //
		jField<::java::lang::Character$UnicodeScript>("INHERITED"), //
		jField<::java::lang::Character$UnicodeScript>("INSCRIPTIONAL_PAHLAVI"), //
		jField<::java::lang::Character$UnicodeScript>("INSCRIPTIONAL_PARTHIAN"), //
		jField<::java::lang::Character$UnicodeScript>("JAVANESE"), //
		jField<::java::lang::Character$UnicodeScript>("KAITHI"), //
		jField<::java::lang::Character$UnicodeScript>("KANNADA"), //
		jField<::java::lang::Character$UnicodeScript>("KATAKANA"), //
		jField<::java::lang::Character$UnicodeScript>("KAYAH_LI"), //
		jField<::java::lang::Character$UnicodeScript>("KHAROSHTHI"), //
		jField<::java::lang::Character$UnicodeScript>("KHMER"), //
		jField<::java::lang::Character$UnicodeScript>("LAO"), //
		jField<::java::lang::Character$UnicodeScript>("LATIN"), //
		jField<::java::lang::Character$UnicodeScript>("LEPCHA"), //
		jField<::java::lang::Character$UnicodeScript>("LIMBU"), //
		jField<::java::lang::Character$UnicodeScript>("LINEAR_B"), //
		jField<::java::lang::Character$UnicodeScript>("LISU"), //
		jField<::java::lang::Character$UnicodeScript>("LYCIAN"), //
		jField<::java::lang::Character$UnicodeScript>("LYDIAN"), //
		jField<::java::lang::Character$UnicodeScript>("MALAYALAM"), //
		jField<::java::lang::Character$UnicodeScript>("MANDAIC"), //
		jField<::java::lang::Character$UnicodeScript>("MEETEI_MAYEK"), //
		jField<::java::lang::Character$UnicodeScript>("MEROITIC_CURSIVE"), //
		jField<::java::lang::Character$UnicodeScript>("MEROITIC_HIEROGLYPHS"), //
		jField<::java::lang::Character$UnicodeScript>("MIAO"), //
		jField<::java::lang::Character$UnicodeScript>("MONGOLIAN"), //
		jField<::java::lang::Character$UnicodeScript>("MYANMAR"), //
		jField<::java::lang::Character$UnicodeScript>("NEW_TAI_LUE"), //
		jField<::java::lang::Character$UnicodeScript>("NKO"), //
		jField<::java::lang::Character$UnicodeScript>("OGHAM"), //
		jField<::java::lang::Character$UnicodeScript>("OLD_ITALIC"), //
		jField<::java::lang::Character$UnicodeScript>("OLD_PERSIAN"), //
		jField<::java::lang::Character$UnicodeScript>("OLD_SOUTH_ARABIAN"), //
		jField<::java::lang::Character$UnicodeScript>("OLD_TURKIC"), //
		jField<::java::lang::Character$UnicodeScript>("OL_CHIKI"), //
		jField<::java::lang::Character$UnicodeScript>("ORIYA"), //
		jField<::java::lang::Character$UnicodeScript>("OSMANYA"), //
		jField<::java::lang::Character$UnicodeScript>("PHAGS_PA"), //
		jField<::java::lang::Character$UnicodeScript>("PHOENICIAN"), //
		jField<::java::lang::Character$UnicodeScript>("REJANG"), //
		jField<::java::lang::Character$UnicodeScript>("RUNIC"), //
		jField<::java::lang::Character$UnicodeScript>("SAMARITAN"), //
		jField<::java::lang::Character$UnicodeScript>("SAURASHTRA"), //
		jField<::java::lang::Character$UnicodeScript>("SHARADA"), //
		jField<::java::lang::Character$UnicodeScript>("SHAVIAN"), //
		jField<::java::lang::Character$UnicodeScript>("SINHALA"), //
		jField<::java::lang::Character$UnicodeScript>("SORA_SOMPENG"), //
		jField<::java::lang::Character$UnicodeScript>("SUNDANESE"), //
		jField<::java::lang::Character$UnicodeScript>("SYLOTI_NAGRI"), //
		jField<::java::lang::Character$UnicodeScript>("SYRIAC"), //
		jField<::java::lang::Character$UnicodeScript>("TAGALOG"), //
		jField<::java::lang::Character$UnicodeScript>("TAGBANWA"), //
		jField<::java::lang::Character$UnicodeScript>("TAI_LE"), //
		jField<::java::lang::Character$UnicodeScript>("TAI_THAM"), //
		jField<::java::lang::Character$UnicodeScript>("TAI_VIET"), //
		jField<::java::lang::Character$UnicodeScript>("TAKRI"), //
		jField<::java::lang::Character$UnicodeScript>("TAMIL"), //
		jField<::java::lang::Character$UnicodeScript>("TELUGU"), //
		jField<::java::lang::Character$UnicodeScript>("THAANA"), //
		jField<::java::lang::Character$UnicodeScript>("THAI"), //
		jField<::java::lang::Character$UnicodeScript>("TIBETAN"), //
		jField<::java::lang::Character$UnicodeScript>("TIFINAGH"), //
		jField<::java::lang::Character$UnicodeScript>("UGARITIC"), //
		jField<::java::lang::Character$UnicodeScript>("UNKNOWN"), //
		jField<::java::lang::Character$UnicodeScript>("VAI"), //
		jField<::java::lang::Character$UnicodeScript>("YI"), //
	};

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto ARABIC() {
		static_assert(field_signatures[jField<F>("ARABIC")] != -1);
		return sat<F>("ARABIC");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto ARMENIAN() {
		static_assert(field_signatures[jField<F>("ARMENIAN")] != -1);
		return sat<F>("ARMENIAN");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto AVESTAN() {
		static_assert(field_signatures[jField<F>("AVESTAN")] != -1);
		return sat<F>("AVESTAN");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto BALINESE() {
		static_assert(field_signatures[jField<F>("BALINESE")] != -1);
		return sat<F>("BALINESE");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto BAMUM() {
		static_assert(field_signatures[jField<F>("BAMUM")] != -1);
		return sat<F>("BAMUM");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto BATAK() {
		static_assert(field_signatures[jField<F>("BATAK")] != -1);
		return sat<F>("BATAK");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto BENGALI() {
		static_assert(field_signatures[jField<F>("BENGALI")] != -1);
		return sat<F>("BENGALI");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto BOPOMOFO() {
		static_assert(field_signatures[jField<F>("BOPOMOFO")] != -1);
		return sat<F>("BOPOMOFO");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto BRAHMI() {
		static_assert(field_signatures[jField<F>("BRAHMI")] != -1);
		return sat<F>("BRAHMI");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto BRAILLE() {
		static_assert(field_signatures[jField<F>("BRAILLE")] != -1);
		return sat<F>("BRAILLE");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto BUGINESE() {
		static_assert(field_signatures[jField<F>("BUGINESE")] != -1);
		return sat<F>("BUGINESE");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto BUHID() {
		static_assert(field_signatures[jField<F>("BUHID")] != -1);
		return sat<F>("BUHID");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto CANADIAN_ABORIGINAL() {
		static_assert(field_signatures[jField<F>("CANADIAN_ABORIGINAL")] != -1);
		return sat<F>("CANADIAN_ABORIGINAL");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto CARIAN() {
		static_assert(field_signatures[jField<F>("CARIAN")] != -1);
		return sat<F>("CARIAN");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto CHAKMA() {
		static_assert(field_signatures[jField<F>("CHAKMA")] != -1);
		return sat<F>("CHAKMA");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto CHAM() {
		static_assert(field_signatures[jField<F>("CHAM")] != -1);
		return sat<F>("CHAM");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto CHEROKEE() {
		static_assert(field_signatures[jField<F>("CHEROKEE")] != -1);
		return sat<F>("CHEROKEE");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto COMMON() {
		static_assert(field_signatures[jField<F>("COMMON")] != -1);
		return sat<F>("COMMON");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto COPTIC() {
		static_assert(field_signatures[jField<F>("COPTIC")] != -1);
		return sat<F>("COPTIC");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto CUNEIFORM() {
		static_assert(field_signatures[jField<F>("CUNEIFORM")] != -1);
		return sat<F>("CUNEIFORM");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto CYPRIOT() {
		static_assert(field_signatures[jField<F>("CYPRIOT")] != -1);
		return sat<F>("CYPRIOT");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto CYRILLIC() {
		static_assert(field_signatures[jField<F>("CYRILLIC")] != -1);
		return sat<F>("CYRILLIC");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto DESERET() {
		static_assert(field_signatures[jField<F>("DESERET")] != -1);
		return sat<F>("DESERET");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto DEVANAGARI() {
		static_assert(field_signatures[jField<F>("DEVANAGARI")] != -1);
		return sat<F>("DEVANAGARI");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto EGYPTIAN_HIEROGLYPHS() {
		static_assert(field_signatures[jField<F>("EGYPTIAN_HIEROGLYPHS")] != -1);
		return sat<F>("EGYPTIAN_HIEROGLYPHS");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto ETHIOPIC() {
		static_assert(field_signatures[jField<F>("ETHIOPIC")] != -1);
		return sat<F>("ETHIOPIC");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto GEORGIAN() {
		static_assert(field_signatures[jField<F>("GEORGIAN")] != -1);
		return sat<F>("GEORGIAN");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto GLAGOLITIC() {
		static_assert(field_signatures[jField<F>("GLAGOLITIC")] != -1);
		return sat<F>("GLAGOLITIC");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto GOTHIC() {
		static_assert(field_signatures[jField<F>("GOTHIC")] != -1);
		return sat<F>("GOTHIC");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto GREEK() {
		static_assert(field_signatures[jField<F>("GREEK")] != -1);
		return sat<F>("GREEK");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto GUJARATI() {
		static_assert(field_signatures[jField<F>("GUJARATI")] != -1);
		return sat<F>("GUJARATI");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto GURMUKHI() {
		static_assert(field_signatures[jField<F>("GURMUKHI")] != -1);
		return sat<F>("GURMUKHI");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto HAN() {
		static_assert(field_signatures[jField<F>("HAN")] != -1);
		return sat<F>("HAN");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto HANGUL() {
		static_assert(field_signatures[jField<F>("HANGUL")] != -1);
		return sat<F>("HANGUL");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto HANUNOO() {
		static_assert(field_signatures[jField<F>("HANUNOO")] != -1);
		return sat<F>("HANUNOO");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto HEBREW() {
		static_assert(field_signatures[jField<F>("HEBREW")] != -1);
		return sat<F>("HEBREW");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto HIRAGANA() {
		static_assert(field_signatures[jField<F>("HIRAGANA")] != -1);
		return sat<F>("HIRAGANA");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto IMPERIAL_ARAMAIC() {
		static_assert(field_signatures[jField<F>("IMPERIAL_ARAMAIC")] != -1);
		return sat<F>("IMPERIAL_ARAMAIC");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto INHERITED() {
		static_assert(field_signatures[jField<F>("INHERITED")] != -1);
		return sat<F>("INHERITED");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto INSCRIPTIONAL_PAHLAVI() {
		static_assert(field_signatures[jField<F>("INSCRIPTIONAL_PAHLAVI")] != -1);
		return sat<F>("INSCRIPTIONAL_PAHLAVI");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto INSCRIPTIONAL_PARTHIAN() {
		static_assert(field_signatures[jField<F>("INSCRIPTIONAL_PARTHIAN")] != -1);
		return sat<F>("INSCRIPTIONAL_PARTHIAN");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto JAVANESE() {
		static_assert(field_signatures[jField<F>("JAVANESE")] != -1);
		return sat<F>("JAVANESE");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto KAITHI() {
		static_assert(field_signatures[jField<F>("KAITHI")] != -1);
		return sat<F>("KAITHI");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto KANNADA() {
		static_assert(field_signatures[jField<F>("KANNADA")] != -1);
		return sat<F>("KANNADA");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto KATAKANA() {
		static_assert(field_signatures[jField<F>("KATAKANA")] != -1);
		return sat<F>("KATAKANA");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto KAYAH_LI() {
		static_assert(field_signatures[jField<F>("KAYAH_LI")] != -1);
		return sat<F>("KAYAH_LI");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto KHAROSHTHI() {
		static_assert(field_signatures[jField<F>("KHAROSHTHI")] != -1);
		return sat<F>("KHAROSHTHI");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto KHMER() {
		static_assert(field_signatures[jField<F>("KHMER")] != -1);
		return sat<F>("KHMER");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto LAO() {
		static_assert(field_signatures[jField<F>("LAO")] != -1);
		return sat<F>("LAO");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto LATIN() {
		static_assert(field_signatures[jField<F>("LATIN")] != -1);
		return sat<F>("LATIN");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto LEPCHA() {
		static_assert(field_signatures[jField<F>("LEPCHA")] != -1);
		return sat<F>("LEPCHA");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto LIMBU() {
		static_assert(field_signatures[jField<F>("LIMBU")] != -1);
		return sat<F>("LIMBU");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto LINEAR_B() {
		static_assert(field_signatures[jField<F>("LINEAR_B")] != -1);
		return sat<F>("LINEAR_B");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto LISU() {
		static_assert(field_signatures[jField<F>("LISU")] != -1);
		return sat<F>("LISU");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto LYCIAN() {
		static_assert(field_signatures[jField<F>("LYCIAN")] != -1);
		return sat<F>("LYCIAN");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto LYDIAN() {
		static_assert(field_signatures[jField<F>("LYDIAN")] != -1);
		return sat<F>("LYDIAN");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto MALAYALAM() {
		static_assert(field_signatures[jField<F>("MALAYALAM")] != -1);
		return sat<F>("MALAYALAM");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto MANDAIC() {
		static_assert(field_signatures[jField<F>("MANDAIC")] != -1);
		return sat<F>("MANDAIC");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto MEETEI_MAYEK() {
		static_assert(field_signatures[jField<F>("MEETEI_MAYEK")] != -1);
		return sat<F>("MEETEI_MAYEK");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto MEROITIC_CURSIVE() {
		static_assert(field_signatures[jField<F>("MEROITIC_CURSIVE")] != -1);
		return sat<F>("MEROITIC_CURSIVE");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto MEROITIC_HIEROGLYPHS() {
		static_assert(field_signatures[jField<F>("MEROITIC_HIEROGLYPHS")] != -1);
		return sat<F>("MEROITIC_HIEROGLYPHS");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto MIAO() {
		static_assert(field_signatures[jField<F>("MIAO")] != -1);
		return sat<F>("MIAO");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto MONGOLIAN() {
		static_assert(field_signatures[jField<F>("MONGOLIAN")] != -1);
		return sat<F>("MONGOLIAN");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto MYANMAR() {
		static_assert(field_signatures[jField<F>("MYANMAR")] != -1);
		return sat<F>("MYANMAR");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto NEW_TAI_LUE() {
		static_assert(field_signatures[jField<F>("NEW_TAI_LUE")] != -1);
		return sat<F>("NEW_TAI_LUE");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto NKO() {
		static_assert(field_signatures[jField<F>("NKO")] != -1);
		return sat<F>("NKO");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto OGHAM() {
		static_assert(field_signatures[jField<F>("OGHAM")] != -1);
		return sat<F>("OGHAM");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto OLD_ITALIC() {
		static_assert(field_signatures[jField<F>("OLD_ITALIC")] != -1);
		return sat<F>("OLD_ITALIC");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto OLD_PERSIAN() {
		static_assert(field_signatures[jField<F>("OLD_PERSIAN")] != -1);
		return sat<F>("OLD_PERSIAN");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto OLD_SOUTH_ARABIAN() {
		static_assert(field_signatures[jField<F>("OLD_SOUTH_ARABIAN")] != -1);
		return sat<F>("OLD_SOUTH_ARABIAN");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto OLD_TURKIC() {
		static_assert(field_signatures[jField<F>("OLD_TURKIC")] != -1);
		return sat<F>("OLD_TURKIC");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto OL_CHIKI() {
		static_assert(field_signatures[jField<F>("OL_CHIKI")] != -1);
		return sat<F>("OL_CHIKI");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto ORIYA() {
		static_assert(field_signatures[jField<F>("ORIYA")] != -1);
		return sat<F>("ORIYA");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto OSMANYA() {
		static_assert(field_signatures[jField<F>("OSMANYA")] != -1);
		return sat<F>("OSMANYA");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto PHAGS_PA() {
		static_assert(field_signatures[jField<F>("PHAGS_PA")] != -1);
		return sat<F>("PHAGS_PA");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto PHOENICIAN() {
		static_assert(field_signatures[jField<F>("PHOENICIAN")] != -1);
		return sat<F>("PHOENICIAN");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto REJANG() {
		static_assert(field_signatures[jField<F>("REJANG")] != -1);
		return sat<F>("REJANG");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto RUNIC() {
		static_assert(field_signatures[jField<F>("RUNIC")] != -1);
		return sat<F>("RUNIC");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto SAMARITAN() {
		static_assert(field_signatures[jField<F>("SAMARITAN")] != -1);
		return sat<F>("SAMARITAN");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto SAURASHTRA() {
		static_assert(field_signatures[jField<F>("SAURASHTRA")] != -1);
		return sat<F>("SAURASHTRA");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto SHARADA() {
		static_assert(field_signatures[jField<F>("SHARADA")] != -1);
		return sat<F>("SHARADA");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto SHAVIAN() {
		static_assert(field_signatures[jField<F>("SHAVIAN")] != -1);
		return sat<F>("SHAVIAN");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto SINHALA() {
		static_assert(field_signatures[jField<F>("SINHALA")] != -1);
		return sat<F>("SINHALA");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto SORA_SOMPENG() {
		static_assert(field_signatures[jField<F>("SORA_SOMPENG")] != -1);
		return sat<F>("SORA_SOMPENG");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto SUNDANESE() {
		static_assert(field_signatures[jField<F>("SUNDANESE")] != -1);
		return sat<F>("SUNDANESE");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto SYLOTI_NAGRI() {
		static_assert(field_signatures[jField<F>("SYLOTI_NAGRI")] != -1);
		return sat<F>("SYLOTI_NAGRI");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto SYRIAC() {
		static_assert(field_signatures[jField<F>("SYRIAC")] != -1);
		return sat<F>("SYRIAC");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto TAGALOG() {
		static_assert(field_signatures[jField<F>("TAGALOG")] != -1);
		return sat<F>("TAGALOG");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto TAGBANWA() {
		static_assert(field_signatures[jField<F>("TAGBANWA")] != -1);
		return sat<F>("TAGBANWA");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto TAI_LE() {
		static_assert(field_signatures[jField<F>("TAI_LE")] != -1);
		return sat<F>("TAI_LE");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto TAI_THAM() {
		static_assert(field_signatures[jField<F>("TAI_THAM")] != -1);
		return sat<F>("TAI_THAM");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto TAI_VIET() {
		static_assert(field_signatures[jField<F>("TAI_VIET")] != -1);
		return sat<F>("TAI_VIET");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto TAKRI() {
		static_assert(field_signatures[jField<F>("TAKRI")] != -1);
		return sat<F>("TAKRI");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto TAMIL() {
		static_assert(field_signatures[jField<F>("TAMIL")] != -1);
		return sat<F>("TAMIL");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto TELUGU() {
		static_assert(field_signatures[jField<F>("TELUGU")] != -1);
		return sat<F>("TELUGU");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto THAANA() {
		static_assert(field_signatures[jField<F>("THAANA")] != -1);
		return sat<F>("THAANA");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto THAI() {
		static_assert(field_signatures[jField<F>("THAI")] != -1);
		return sat<F>("THAI");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto TIBETAN() {
		static_assert(field_signatures[jField<F>("TIBETAN")] != -1);
		return sat<F>("TIBETAN");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto TIFINAGH() {
		static_assert(field_signatures[jField<F>("TIFINAGH")] != -1);
		return sat<F>("TIFINAGH");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto UGARITIC() {
		static_assert(field_signatures[jField<F>("UGARITIC")] != -1);
		return sat<F>("UGARITIC");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto UNKNOWN() {
		static_assert(field_signatures[jField<F>("UNKNOWN")] != -1);
		return sat<F>("UNKNOWN");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto VAI() {
		static_assert(field_signatures[jField<F>("VAI")] != -1);
		return sat<F>("VAI");
	}

	template<typename F = ::java::lang::Character$UnicodeScript>
	static auto YI() {
		static_assert(field_signatures[jField<F>("YI")] != -1);
		return sat<F>("YI");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Character$UnicodeScript(::java::lang::String)>("forName"), //
		jMethod<::java::lang::Character$UnicodeScript(::jint)>("of"), //
		jMethod<::java::lang::Character$UnicodeScript(::java::lang::String)>("valueOf"), //
		jMethod<::java::lang::Character$UnicodeScript *()>("values"), //
	};

	template<typename R = ::java::lang::Character$UnicodeScript, typename... Args>
	static auto forName(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("forName")] != -1);
		return scall<R>("forName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Character$UnicodeScript, typename... Args>
	static auto of(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("of")] != -1);
		return scall<R>("of", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Character$UnicodeScript, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Character$UnicodeScript *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
