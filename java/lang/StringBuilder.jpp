#ifndef java_lang_StringBuilder_HPP
#define java_lang_StringBuilder_HPP

#include "../../jfwd_decl.hpp"

class ::java::lang::StringBuilder : public jObject<::java::lang::StringBuilder, ::java::lang::AbstractStringBuilder> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_lang / "StringBuilder";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint)>(), //
		jConstructor<::jvoid(::java::lang::CharSequence)>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jMethod<::java::lang::AbstractStringBuilder(::jchar)>("append"), //
		jMethod<::java::lang::Appendable(::jchar)>("append"), //
		jMethod<::java::lang::StringBuilder(::jchar)>("append"), //
		jMethod<::java::lang::AbstractStringBuilder(::jdouble)>("append"), //
		jMethod<::java::lang::StringBuilder(::jdouble)>("append"), //
		jMethod<::java::lang::AbstractStringBuilder(::jfloat)>("append"), //
		jMethod<::java::lang::StringBuilder(::jfloat)>("append"), //
		jMethod<::java::lang::AbstractStringBuilder(::jint)>("append"), //
		jMethod<::java::lang::StringBuilder(::jint)>("append"), //
		jMethod<::java::lang::AbstractStringBuilder(::jlong)>("append"), //
		jMethod<::java::lang::StringBuilder(::jlong)>("append"), //
		jMethod<::java::lang::AbstractStringBuilder(::java::lang::CharSequence)>("append"), //
		jMethod<::java::lang::Appendable(::java::lang::CharSequence)>("append"), //
		jMethod<::java::lang::StringBuilder(::java::lang::CharSequence)>("append"), //
		jMethod<::java::lang::AbstractStringBuilder(::java::lang::CharSequence, ::jint, ::jint)>("append"), //
		jMethod<::java::lang::Appendable(::java::lang::CharSequence, ::jint, ::jint)>("append"), //
		jMethod<::java::lang::StringBuilder(::java::lang::CharSequence, ::jint, ::jint)>("append"), //
		jMethod<::java::lang::AbstractStringBuilder(::java::lang::Object)>("append"), //
		jMethod<::java::lang::StringBuilder(::java::lang::Object)>("append"), //
		jMethod<::java::lang::AbstractStringBuilder(::java::lang::String)>("append"), //
		jMethod<::java::lang::StringBuilder(::java::lang::String)>("append"), //
		jMethod<::java::lang::AbstractStringBuilder(::java::lang::StringBuffer)>("append"), //
		jMethod<::java::lang::StringBuilder(::java::lang::StringBuffer)>("append"), //
		jMethod<::java::lang::AbstractStringBuilder(::jboolean)>("append"), //
		jMethod<::java::lang::StringBuilder(::jboolean)>("append"), //
		jMethod<::java::lang::AbstractStringBuilder(::jchar *)>("append"), //
		jMethod<::java::lang::StringBuilder(::jchar *)>("append"), //
		jMethod<::java::lang::AbstractStringBuilder(::jchar *, ::jint, ::jint)>("append"), //
		jMethod<::java::lang::StringBuilder(::jchar *, ::jint, ::jint)>("append"), //
		jMethod<::java::lang::AbstractStringBuilder(::jint)>("appendCodePoint"), //
		jMethod<::java::lang::StringBuilder(::jint)>("appendCodePoint"), //
		jMethod<::jint()>("capacity"), //
		jMethod<::jchar(::jint)>("charAt"), //
		jMethod<::jint(::jint)>("codePointAt"), //
		jMethod<::jint(::jint)>("codePointBefore"), //
		jMethod<::jint(::jint, ::jint)>("codePointCount"), //
		jMethod<::java::lang::AbstractStringBuilder(::jint, ::jint)>("delete"), //
		jMethod<::java::lang::StringBuilder(::jint, ::jint)>("delete"), //
		jMethod<::java::lang::AbstractStringBuilder(::jint)>("deleteCharAt"), //
		jMethod<::java::lang::StringBuilder(::jint)>("deleteCharAt"), //
		jMethod<::jvoid(::jint)>("ensureCapacity"), //
		jMethod<::jvoid(::jint, ::jint, ::jchar *, ::jint)>("getChars"), //
		jMethod<::jint(::java::lang::String)>("indexOf"), //
		jMethod<::jint(::java::lang::String, ::jint)>("indexOf"), //
		jMethod<::java::lang::AbstractStringBuilder(::jint, ::jchar)>("insert"), //
		jMethod<::java::lang::StringBuilder(::jint, ::jchar)>("insert"), //
		jMethod<::java::lang::AbstractStringBuilder(::jint, ::jdouble)>("insert"), //
		jMethod<::java::lang::StringBuilder(::jint, ::jdouble)>("insert"), //
		jMethod<::java::lang::AbstractStringBuilder(::jint, ::jfloat)>("insert"), //
		jMethod<::java::lang::StringBuilder(::jint, ::jfloat)>("insert"), //
		jMethod<::java::lang::AbstractStringBuilder(::jint, ::jint)>("insert"), //
		jMethod<::java::lang::StringBuilder(::jint, ::jint)>("insert"), //
		jMethod<::java::lang::AbstractStringBuilder(::jint, ::jlong)>("insert"), //
		jMethod<::java::lang::StringBuilder(::jint, ::jlong)>("insert"), //
		jMethod<::java::lang::AbstractStringBuilder(::jint, ::java::lang::CharSequence)>("insert"), //
		jMethod<::java::lang::StringBuilder(::jint, ::java::lang::CharSequence)>("insert"), //
		jMethod<::java::lang::AbstractStringBuilder(::jint, ::java::lang::CharSequence, ::jint, ::jint)>("insert"), //
		jMethod<::java::lang::StringBuilder(::jint, ::java::lang::CharSequence, ::jint, ::jint)>("insert"), //
		jMethod<::java::lang::AbstractStringBuilder(::jint, ::java::lang::Object)>("insert"), //
		jMethod<::java::lang::StringBuilder(::jint, ::java::lang::Object)>("insert"), //
		jMethod<::java::lang::AbstractStringBuilder(::jint, ::java::lang::String)>("insert"), //
		jMethod<::java::lang::StringBuilder(::jint, ::java::lang::String)>("insert"), //
		jMethod<::java::lang::AbstractStringBuilder(::jint, ::jboolean)>("insert"), //
		jMethod<::java::lang::StringBuilder(::jint, ::jboolean)>("insert"), //
		jMethod<::java::lang::AbstractStringBuilder(::jint, ::jchar *)>("insert"), //
		jMethod<::java::lang::StringBuilder(::jint, ::jchar *)>("insert"), //
		jMethod<::java::lang::AbstractStringBuilder(::jint, ::jchar *, ::jint, ::jint)>("insert"), //
		jMethod<::java::lang::StringBuilder(::jint, ::jchar *, ::jint, ::jint)>("insert"), //
		jMethod<::jint(::java::lang::String)>("lastIndexOf"), //
		jMethod<::jint(::java::lang::String, ::jint)>("lastIndexOf"), //
		jMethod<::jint()>("length"), //
		jMethod<::jint(::jint, ::jint)>("offsetByCodePoints"), //
		jMethod<::java::lang::AbstractStringBuilder(::jint, ::jint, ::java::lang::String)>("replace"), //
		jMethod<::java::lang::StringBuilder(::jint, ::jint, ::java::lang::String)>("replace"), //
		jMethod<::java::lang::AbstractStringBuilder()>("reverse"), //
		jMethod<::java::lang::StringBuilder()>("reverse"), //
		jMethod<::jvoid(::jint, ::jchar)>("setCharAt"), //
		jMethod<::jvoid(::jint)>("setLength"), //
		jMethod<::java::lang::CharSequence(::jint, ::jint)>("subSequence"), //
		jMethod<::java::lang::String(::jint)>("substring"), //
		jMethod<::java::lang::String(::jint, ::jint)>("substring"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid()>("trimToSize"), //
	};

	template<typename R = ::java::lang::AbstractStringBuilder, typename... Args>
	auto append(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("append")] != -1);
		return call<R>("append", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::AbstractStringBuilder, typename... Args>
	auto appendCodePoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("appendCodePoint")] != -1);
		return call<R>("appendCodePoint", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto capacity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("capacity")] != -1);
		return call<R>("capacity", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto charAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("charAt")] != -1);
		return call<R>("charAt", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto codePointAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("codePointAt")] != -1);
		return call<R>("codePointAt", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto codePointBefore(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("codePointBefore")] != -1);
		return call<R>("codePointBefore", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto codePointCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("codePointCount")] != -1);
		return call<R>("codePointCount", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::AbstractStringBuilder, typename... Args>
	auto delete_(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("delete")] != -1);
		return call<R>("delete", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::AbstractStringBuilder, typename... Args>
	auto deleteCharAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deleteCharAt")] != -1);
		return call<R>("deleteCharAt", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto ensureCapacity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ensureCapacity")] != -1);
		return call<R>("ensureCapacity", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getChars(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChars")] != -1);
		return call<R>("getChars", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto indexOf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("indexOf")] != -1);
		return call<R>("indexOf", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::AbstractStringBuilder, typename... Args>
	auto insert(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insert")] != -1);
		return call<R>("insert", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto lastIndexOf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lastIndexOf")] != -1);
		return call<R>("lastIndexOf", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto length(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("length")] != -1);
		return call<R>("length", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto offsetByCodePoints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("offsetByCodePoints")] != -1);
		return call<R>("offsetByCodePoints", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::AbstractStringBuilder, typename... Args>
	auto replace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("replace")] != -1);
		return call<R>("replace", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::AbstractStringBuilder, typename... Args>
	auto reverse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reverse")] != -1);
		return call<R>("reverse", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCharAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCharAt")] != -1);
		return call<R>("setCharAt", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLength")] != -1);
		return call<R>("setLength", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::CharSequence, typename... Args>
	auto subSequence(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("subSequence")] != -1);
		return call<R>("subSequence", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto substring(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("substring")] != -1);
		return call<R>("substring", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto trimToSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("trimToSize")] != -1);
		return call<R>("trimToSize", std::forward<Args>(args)...);
	}

};

#endif
