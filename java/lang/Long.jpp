#ifndef java_lang_Long_HPP
#define java_lang_Long_HPP

#include "../../jfwd_decl.hpp"

class ::java::lang::Long : public jObject<::java::lang::Long, ::java::lang::Number> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_lang / "Long";

	constexpr static Enume field_signatures{
		jField<::jint>("BYTES"), //
		jField<::jlong>("MAX_VALUE"), //
		jField<::jlong>("MIN_VALUE"), //
		jField<::jint>("SIZE"), //
		jField<::java::lang::Class>("TYPE"), //
	};

	template<typename F = ::jint>
	static auto BYTES() {
		static_assert(field_signatures[jField<F>("BYTES")] != -1);
		return sat<F>("BYTES");
	}

	template<typename F = ::jlong>
	static auto MAX_VALUE() {
		static_assert(field_signatures[jField<F>("MAX_VALUE")] != -1);
		return sat<F>("MAX_VALUE");
	}

	template<typename F = ::jlong>
	static auto MIN_VALUE() {
		static_assert(field_signatures[jField<F>("MIN_VALUE")] != -1);
		return sat<F>("MIN_VALUE");
	}

	template<typename F = ::jint>
	static auto SIZE() {
		static_assert(field_signatures[jField<F>("SIZE")] != -1);
		return sat<F>("SIZE");
	}

	template<typename F = ::java::lang::Class>
	static auto TYPE() {
		static_assert(field_signatures[jField<F>("TYPE")] != -1);
		return sat<F>("TYPE");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jlong)>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jMethod<::jint(::jlong)>("bitCount"), //
		jMethod<::jbyte()>("byteValue"), //
		jMethod<::jint(::jlong, ::jlong)>("compare"), //
		jMethod<::jint(::java::lang::Long)>("compareTo"), //
		jMethod<::jint(::java::lang::Object)>("compareTo"), //
		jMethod<::jint(::jlong, ::jlong)>("compareUnsigned"), //
		jMethod<::java::lang::Long(::java::lang::String)>("decode"), //
		jMethod<::jlong(::jlong, ::jlong)>("divideUnsigned"), //
		jMethod<::jdouble()>("doubleValue"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jfloat()>("floatValue"), //
		jMethod<::java::lang::Long(::java::lang::String)>("getLong"), //
		jMethod<::java::lang::Long(::java::lang::String, ::jlong)>("getLong"), //
		jMethod<::java::lang::Long(::java::lang::String, ::java::lang::Long)>("getLong"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jint(::jlong)>("hashCode"), //
		jMethod<::jlong(::jlong)>("highestOneBit"), //
		jMethod<::jint()>("intValue"), //
		jMethod<::jlong()>("longValue"), //
		jMethod<::jlong(::jlong)>("lowestOneBit"), //
		jMethod<::jlong(::jlong, ::jlong)>("max"), //
		jMethod<::jlong(::jlong, ::jlong)>("min"), //
		jMethod<::jint(::jlong)>("numberOfLeadingZeros"), //
		jMethod<::jint(::jlong)>("numberOfTrailingZeros"), //
		jMethod<::jlong(::java::lang::String)>("parseLong"), //
		jMethod<::jlong(::java::lang::String, ::jint)>("parseLong"), //
		jMethod<::jlong(::java::lang::String)>("parseUnsignedLong"), //
		jMethod<::jlong(::java::lang::String, ::jint)>("parseUnsignedLong"), //
		jMethod<::jlong(::jlong, ::jlong)>("remainderUnsigned"), //
		jMethod<::jlong(::jlong)>("reverse"), //
		jMethod<::jlong(::jlong)>("reverseBytes"), //
		jMethod<::jlong(::jlong, ::jint)>("rotateLeft"), //
		jMethod<::jlong(::jlong, ::jint)>("rotateRight"), //
		jMethod<::jshort()>("shortValue"), //
		jMethod<::jint(::jlong)>("signum"), //
		jMethod<::jlong(::jlong, ::jlong)>("sum"), //
		jMethod<::java::lang::String(::jlong)>("toBinaryString"), //
		jMethod<::java::lang::String(::jlong)>("toHexString"), //
		jMethod<::java::lang::String(::jlong)>("toOctalString"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::lang::String(::jlong)>("toString"), //
		jMethod<::java::lang::String(::jlong, ::jint)>("toString"), //
		jMethod<::java::lang::String(::jlong)>("toUnsignedString"), //
		jMethod<::java::lang::String(::jlong, ::jint)>("toUnsignedString"), //
		jMethod<::java::lang::Long(::jlong)>("valueOf"), //
		jMethod<::java::lang::Long(::java::lang::String)>("valueOf"), //
		jMethod<::java::lang::Long(::java::lang::String, ::jint)>("valueOf"), //
	};

	template<typename R = ::jint, typename... Args>
	static auto bitCount(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("bitCount")] != -1);
		return scall<R>("bitCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto byteValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("byteValue")] != -1);
		return call<R>("byteValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto compare(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compare")] != -1);
		return scall<R>("compare", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto compareTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compareTo")] != -1);
		return call<R>("compareTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto compareUnsigned(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compareUnsigned")] != -1);
		return scall<R>("compareUnsigned", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Long, typename... Args>
	static auto decode(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("decode")] != -1);
		return scall<R>("decode", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	static auto divideUnsigned(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("divideUnsigned")] != -1);
		return scall<R>("divideUnsigned", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto doubleValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("doubleValue")] != -1);
		return call<R>("doubleValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto floatValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("floatValue")] != -1);
		return call<R>("floatValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Long, typename... Args>
	static auto getLong(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLong")] != -1);
		return scall<R>("getLong", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	static auto highestOneBit(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("highestOneBit")] != -1);
		return scall<R>("highestOneBit", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto intValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("intValue")] != -1);
		return call<R>("intValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto longValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("longValue")] != -1);
		return call<R>("longValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	static auto lowestOneBit(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lowestOneBit")] != -1);
		return scall<R>("lowestOneBit", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	static auto max(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("max")] != -1);
		return scall<R>("max", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	static auto min(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("min")] != -1);
		return scall<R>("min", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto numberOfLeadingZeros(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("numberOfLeadingZeros")] != -1);
		return scall<R>("numberOfLeadingZeros", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto numberOfTrailingZeros(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("numberOfTrailingZeros")] != -1);
		return scall<R>("numberOfTrailingZeros", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	static auto parseLong(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseLong")] != -1);
		return scall<R>("parseLong", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	static auto parseUnsignedLong(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseUnsignedLong")] != -1);
		return scall<R>("parseUnsignedLong", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	static auto remainderUnsigned(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remainderUnsigned")] != -1);
		return scall<R>("remainderUnsigned", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	static auto reverse(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reverse")] != -1);
		return scall<R>("reverse", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	static auto reverseBytes(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reverseBytes")] != -1);
		return scall<R>("reverseBytes", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	static auto rotateLeft(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rotateLeft")] != -1);
		return scall<R>("rotateLeft", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	static auto rotateRight(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rotateRight")] != -1);
		return scall<R>("rotateRight", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto shortValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shortValue")] != -1);
		return call<R>("shortValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto signum(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("signum")] != -1);
		return scall<R>("signum", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	static auto sum(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sum")] != -1);
		return scall<R>("sum", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto toBinaryString(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toBinaryString")] != -1);
		return scall<R>("toBinaryString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto toHexString(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toHexString")] != -1);
		return scall<R>("toHexString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto toOctalString(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toOctalString")] != -1);
		return scall<R>("toOctalString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto toUnsignedString(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toUnsignedString")] != -1);
		return scall<R>("toUnsignedString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Long, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

};

#endif
