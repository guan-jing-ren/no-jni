#ifndef java_lang_JPP
#define java_lang_JPP

namespace java::lang { class Class; }
template<> constexpr auto signature<::java::lang::Class> = ::java_lang / "Class";
namespace java::lang { class Object; }
template<> constexpr auto signature<::java::lang::Object> = ::java_lang / "Object";
namespace java::lang { class String; }
template<> constexpr auto signature<::java::lang::String> = ::java_lang / "String";
namespace java::lang { class AbstractMethodError; }
template<> constexpr auto signature<::java::lang::AbstractMethodError> = ::java_lang / "AbstractMethodError";
namespace java::lang { class AbstractStringBuilder; }
template<> constexpr auto signature<::java::lang::AbstractStringBuilder> = ::java_lang / "AbstractStringBuilder";
namespace java::lang { class Appendable; }
template<> constexpr auto signature<::java::lang::Appendable> = ::java_lang / "Appendable";
namespace java::lang { class ApplicationShutdownHooks; }
template<> constexpr auto signature<::java::lang::ApplicationShutdownHooks> = ::java_lang / "ApplicationShutdownHooks";
namespace java::lang { class ApplicationShutdownHooks$1; }
template<> constexpr auto signature<::java::lang::ApplicationShutdownHooks$1> = ::java_lang / "ApplicationShutdownHooks$1";
namespace java::lang { class ArithmeticException; }
template<> constexpr auto signature<::java::lang::ArithmeticException> = ::java_lang / "ArithmeticException";
namespace java::lang { class ArrayIndexOutOfBoundsException; }
template<> constexpr auto signature<::java::lang::ArrayIndexOutOfBoundsException> = ::java_lang / "ArrayIndexOutOfBoundsException";
namespace java::lang { class ArrayStoreException; }
template<> constexpr auto signature<::java::lang::ArrayStoreException> = ::java_lang / "ArrayStoreException";
namespace java::lang { class AssertionError; }
template<> constexpr auto signature<::java::lang::AssertionError> = ::java_lang / "AssertionError";
namespace java::lang { class AssertionStatusDirectives; }
template<> constexpr auto signature<::java::lang::AssertionStatusDirectives> = ::java_lang / "AssertionStatusDirectives";
namespace java::lang { class AutoCloseable; }
template<> constexpr auto signature<::java::lang::AutoCloseable> = ::java_lang / "AutoCloseable";
namespace java::lang { class Boolean; }
template<> constexpr auto signature<::java::lang::Boolean> = ::java_lang / "Boolean";
namespace java::lang { class BootstrapMethodError; }
template<> constexpr auto signature<::java::lang::BootstrapMethodError> = ::java_lang / "BootstrapMethodError";
namespace java::lang { class Byte; }
template<> constexpr auto signature<::java::lang::Byte> = ::java_lang / "Byte";
namespace java::lang { class Byte$ByteCache; }
template<> constexpr auto signature<::java::lang::Byte$ByteCache> = ::java_lang / "Byte$ByteCache";
namespace java::lang { class CharSequence; }
template<> constexpr auto signature<::java::lang::CharSequence> = ::java_lang / "CharSequence";
namespace java::lang { class CharSequence$1CharIterator; }
template<> constexpr auto signature<::java::lang::CharSequence$1CharIterator> = ::java_lang / "CharSequence$1CharIterator";
namespace java::lang { class CharSequence$1CodePointIterator; }
template<> constexpr auto signature<::java::lang::CharSequence$1CodePointIterator> = ::java_lang / "CharSequence$1CodePointIterator";
namespace java::lang { class Character; }
template<> constexpr auto signature<::java::lang::Character> = ::java_lang / "Character";
namespace java::lang { class Character$CharacterCache; }
template<> constexpr auto signature<::java::lang::Character$CharacterCache> = ::java_lang / "Character$CharacterCache";
namespace java::lang { class Character$Subset; }
template<> constexpr auto signature<::java::lang::Character$Subset> = ::java_lang / "Character$Subset";
namespace java::lang { class Character$UnicodeBlock; }
template<> constexpr auto signature<::java::lang::Character$UnicodeBlock> = ::java_lang / "Character$UnicodeBlock";
namespace java::lang { class Character$UnicodeScript; }
template<> constexpr auto signature<::java::lang::Character$UnicodeScript> = ::java_lang / "Character$UnicodeScript";
namespace java::lang { class CharacterData; }
template<> constexpr auto signature<::java::lang::CharacterData> = ::java_lang / "CharacterData";
namespace java::lang { class CharacterData00; }
template<> constexpr auto signature<::java::lang::CharacterData00> = ::java_lang / "CharacterData00";
namespace java::lang { class CharacterData01; }
template<> constexpr auto signature<::java::lang::CharacterData01> = ::java_lang / "CharacterData01";
namespace java::lang { class CharacterData02; }
template<> constexpr auto signature<::java::lang::CharacterData02> = ::java_lang / "CharacterData02";
namespace java::lang { class CharacterData0E; }
template<> constexpr auto signature<::java::lang::CharacterData0E> = ::java_lang / "CharacterData0E";
namespace java::lang { class CharacterDataLatin1; }
template<> constexpr auto signature<::java::lang::CharacterDataLatin1> = ::java_lang / "CharacterDataLatin1";
namespace java::lang { class CharacterDataPrivateUse; }
template<> constexpr auto signature<::java::lang::CharacterDataPrivateUse> = ::java_lang / "CharacterDataPrivateUse";
namespace java::lang { class CharacterDataUndefined; }
template<> constexpr auto signature<::java::lang::CharacterDataUndefined> = ::java_lang / "CharacterDataUndefined";
namespace java::lang { class CharacterName; }
template<> constexpr auto signature<::java::lang::CharacterName> = ::java_lang / "CharacterName";
namespace java::lang { class CharacterName$1; }
template<> constexpr auto signature<::java::lang::CharacterName$1> = ::java_lang / "CharacterName$1";
namespace java::lang { class Class$1; }
template<> constexpr auto signature<::java::lang::Class$1> = ::java_lang / "Class$1";
namespace java::lang { class Class$2; }
template<> constexpr auto signature<::java::lang::Class$2> = ::java_lang / "Class$2";
namespace java::lang { class Class$3; }
template<> constexpr auto signature<::java::lang::Class$3> = ::java_lang / "Class$3";
namespace java::lang { class Class$4; }
template<> constexpr auto signature<::java::lang::Class$4> = ::java_lang / "Class$4";
namespace java::lang { class Class$AnnotationData; }
template<> constexpr auto signature<::java::lang::Class$AnnotationData> = ::java_lang / "Class$AnnotationData";
namespace java::lang { class Class$Atomic; }
template<> constexpr auto signature<::java::lang::Class$Atomic> = ::java_lang / "Class$Atomic";
namespace java::lang { class Class$EnclosingMethodInfo; }
template<> constexpr auto signature<::java::lang::Class$EnclosingMethodInfo> = ::java_lang / "Class$EnclosingMethodInfo";
namespace java::lang { class Class$MethodArray; }
template<> constexpr auto signature<::java::lang::Class$MethodArray> = ::java_lang / "Class$MethodArray";
namespace java::lang { class Class$ReflectionData; }
template<> constexpr auto signature<::java::lang::Class$ReflectionData> = ::java_lang / "Class$ReflectionData";
namespace java::lang { class ClassCastException; }
template<> constexpr auto signature<::java::lang::ClassCastException> = ::java_lang / "ClassCastException";
namespace java::lang { class ClassCircularityError; }
template<> constexpr auto signature<::java::lang::ClassCircularityError> = ::java_lang / "ClassCircularityError";
namespace java::lang { class ClassFormatError; }
template<> constexpr auto signature<::java::lang::ClassFormatError> = ::java_lang / "ClassFormatError";
namespace java::lang { class ClassLoader; }
template<> constexpr auto signature<::java::lang::ClassLoader> = ::java_lang / "ClassLoader";
namespace java::lang { class ClassLoader$1; }
template<> constexpr auto signature<::java::lang::ClassLoader$1> = ::java_lang / "ClassLoader$1";
namespace java::lang { class ClassLoader$2; }
template<> constexpr auto signature<::java::lang::ClassLoader$2> = ::java_lang / "ClassLoader$2";
namespace java::lang { class ClassLoader$3; }
template<> constexpr auto signature<::java::lang::ClassLoader$3> = ::java_lang / "ClassLoader$3";
namespace java::lang { class ClassLoader$NativeLibrary; }
template<> constexpr auto signature<::java::lang::ClassLoader$NativeLibrary> = ::java_lang / "ClassLoader$NativeLibrary";
namespace java::lang { class ClassLoader$ParallelLoaders; }
template<> constexpr auto signature<::java::lang::ClassLoader$ParallelLoaders> = ::java_lang / "ClassLoader$ParallelLoaders";
namespace java::lang { class ClassLoaderHelper; }
template<> constexpr auto signature<::java::lang::ClassLoaderHelper> = ::java_lang / "ClassLoaderHelper";
namespace java::lang { class ClassNotFoundException; }
template<> constexpr auto signature<::java::lang::ClassNotFoundException> = ::java_lang / "ClassNotFoundException";
namespace java::lang { class ClassValue; }
template<> constexpr auto signature<::java::lang::ClassValue> = ::java_lang / "ClassValue";
namespace java::lang { class ClassValue$ClassValueMap; }
template<> constexpr auto signature<::java::lang::ClassValue$ClassValueMap> = ::java_lang / "ClassValue$ClassValueMap";
namespace java::lang { class ClassValue$Entry; }
template<> constexpr auto signature<::java::lang::ClassValue$Entry> = ::java_lang / "ClassValue$Entry";
namespace java::lang { class ClassValue$Identity; }
template<> constexpr auto signature<::java::lang::ClassValue$Identity> = ::java_lang / "ClassValue$Identity";
namespace java::lang { class ClassValue$Version; }
template<> constexpr auto signature<::java::lang::ClassValue$Version> = ::java_lang / "ClassValue$Version";
namespace java::lang { class CloneNotSupportedException; }
template<> constexpr auto signature<::java::lang::CloneNotSupportedException> = ::java_lang / "CloneNotSupportedException";
namespace java::lang { class Cloneable; }
template<> constexpr auto signature<::java::lang::Cloneable> = ::java_lang / "Cloneable";
namespace java::lang { class Comparable; }
template<> constexpr auto signature<::java::lang::Comparable> = ::java_lang / "Comparable";
namespace java::lang { class Compiler; }
template<> constexpr auto signature<::java::lang::Compiler> = ::java_lang / "Compiler";
namespace java::lang { class Compiler$1; }
template<> constexpr auto signature<::java::lang::Compiler$1> = ::java_lang / "Compiler$1";
namespace java::lang { class ConditionalSpecialCasing; }
template<> constexpr auto signature<::java::lang::ConditionalSpecialCasing> = ::java_lang / "ConditionalSpecialCasing";
namespace java::lang { class ConditionalSpecialCasing$Entry; }
template<> constexpr auto signature<::java::lang::ConditionalSpecialCasing$Entry> = ::java_lang / "ConditionalSpecialCasing$Entry";
namespace java::lang { class Deprecated; }
template<> constexpr auto signature<::java::lang::Deprecated> = ::java_lang / "Deprecated";
namespace java::lang { class Double; }
template<> constexpr auto signature<::java::lang::Double> = ::java_lang / "Double";
namespace java::lang { class Enum; }
template<> constexpr auto signature<::java::lang::Enum> = ::java_lang / "Enum";
namespace java::lang { class EnumConstantNotPresentException; }
template<> constexpr auto signature<::java::lang::EnumConstantNotPresentException> = ::java_lang / "EnumConstantNotPresentException";
namespace java::lang { class Error; }
template<> constexpr auto signature<::java::lang::Error> = ::java_lang / "Error";
namespace java::lang { class Exception; }
template<> constexpr auto signature<::java::lang::Exception> = ::java_lang / "Exception";
namespace java::lang { class ExceptionInInitializerError; }
template<> constexpr auto signature<::java::lang::ExceptionInInitializerError> = ::java_lang / "ExceptionInInitializerError";
namespace java::lang { class Float; }
template<> constexpr auto signature<::java::lang::Float> = ::java_lang / "Float";
namespace java::lang { class FunctionalInterface; }
template<> constexpr auto signature<::java::lang::FunctionalInterface> = ::java_lang / "FunctionalInterface";
namespace java::lang { class IllegalAccessError; }
template<> constexpr auto signature<::java::lang::IllegalAccessError> = ::java_lang / "IllegalAccessError";
namespace java::lang { class IllegalAccessException; }
template<> constexpr auto signature<::java::lang::IllegalAccessException> = ::java_lang / "IllegalAccessException";
namespace java::lang { class IllegalArgumentException; }
template<> constexpr auto signature<::java::lang::IllegalArgumentException> = ::java_lang / "IllegalArgumentException";
namespace java::lang { class IllegalMonitorStateException; }
template<> constexpr auto signature<::java::lang::IllegalMonitorStateException> = ::java_lang / "IllegalMonitorStateException";
namespace java::lang { class IllegalStateException; }
template<> constexpr auto signature<::java::lang::IllegalStateException> = ::java_lang / "IllegalStateException";
namespace java::lang { class IllegalThreadStateException; }
template<> constexpr auto signature<::java::lang::IllegalThreadStateException> = ::java_lang / "IllegalThreadStateException";
namespace java::lang { class IncompatibleClassChangeError; }
template<> constexpr auto signature<::java::lang::IncompatibleClassChangeError> = ::java_lang / "IncompatibleClassChangeError";
namespace java::lang { class IndexOutOfBoundsException; }
template<> constexpr auto signature<::java::lang::IndexOutOfBoundsException> = ::java_lang / "IndexOutOfBoundsException";
namespace java::lang { class InheritableThreadLocal; }
template<> constexpr auto signature<::java::lang::InheritableThreadLocal> = ::java_lang / "InheritableThreadLocal";
namespace java::lang { class InstantiationError; }
template<> constexpr auto signature<::java::lang::InstantiationError> = ::java_lang / "InstantiationError";
namespace java::lang { class InstantiationException; }
template<> constexpr auto signature<::java::lang::InstantiationException> = ::java_lang / "InstantiationException";
namespace java::lang { class Integer; }
template<> constexpr auto signature<::java::lang::Integer> = ::java_lang / "Integer";
namespace java::lang { class Integer$IntegerCache; }
template<> constexpr auto signature<::java::lang::Integer$IntegerCache> = ::java_lang / "Integer$IntegerCache";
namespace java::lang { class InternalError; }
template<> constexpr auto signature<::java::lang::InternalError> = ::java_lang / "InternalError";
namespace java::lang { class InterruptedException; }
template<> constexpr auto signature<::java::lang::InterruptedException> = ::java_lang / "InterruptedException";
namespace java::lang { class Iterable; }
template<> constexpr auto signature<::java::lang::Iterable> = ::java_lang / "Iterable";
namespace java::lang { class LinkageError; }
template<> constexpr auto signature<::java::lang::LinkageError> = ::java_lang / "LinkageError";
namespace java::lang { class Long; }
template<> constexpr auto signature<::java::lang::Long> = ::java_lang / "Long";
namespace java::lang { class Long$LongCache; }
template<> constexpr auto signature<::java::lang::Long$LongCache> = ::java_lang / "Long$LongCache";
namespace java::lang { class Math; }
template<> constexpr auto signature<::java::lang::Math> = ::java_lang / "Math";
namespace java::lang { class Math$RandomNumberGeneratorHolder; }
template<> constexpr auto signature<::java::lang::Math$RandomNumberGeneratorHolder> = ::java_lang / "Math$RandomNumberGeneratorHolder";
namespace java::lang { class NegativeArraySizeException; }
template<> constexpr auto signature<::java::lang::NegativeArraySizeException> = ::java_lang / "NegativeArraySizeException";
namespace java::lang { class NoClassDefFoundError; }
template<> constexpr auto signature<::java::lang::NoClassDefFoundError> = ::java_lang / "NoClassDefFoundError";
namespace java::lang { class NoSuchFieldError; }
template<> constexpr auto signature<::java::lang::NoSuchFieldError> = ::java_lang / "NoSuchFieldError";
namespace java::lang { class NoSuchFieldException; }
template<> constexpr auto signature<::java::lang::NoSuchFieldException> = ::java_lang / "NoSuchFieldException";
namespace java::lang { class NoSuchMethodError; }
template<> constexpr auto signature<::java::lang::NoSuchMethodError> = ::java_lang / "NoSuchMethodError";
namespace java::lang { class NoSuchMethodException; }
template<> constexpr auto signature<::java::lang::NoSuchMethodException> = ::java_lang / "NoSuchMethodException";
namespace java::lang { class NullPointerException; }
template<> constexpr auto signature<::java::lang::NullPointerException> = ::java_lang / "NullPointerException";
namespace java::lang { class Number; }
template<> constexpr auto signature<::java::lang::Number> = ::java_lang / "Number";
namespace java::lang { class NumberFormatException; }
template<> constexpr auto signature<::java::lang::NumberFormatException> = ::java_lang / "NumberFormatException";
namespace java::lang { class OutOfMemoryError; }
template<> constexpr auto signature<::java::lang::OutOfMemoryError> = ::java_lang / "OutOfMemoryError";
namespace java::lang { class Override; }
template<> constexpr auto signature<::java::lang::Override> = ::java_lang / "Override";
namespace java::lang { class Package; }
template<> constexpr auto signature<::java::lang::Package> = ::java_lang / "Package";
namespace java::lang { class Package$1; }
template<> constexpr auto signature<::java::lang::Package$1> = ::java_lang / "Package$1";
namespace java::lang { class Package$1PackageInfoProxy; }
template<> constexpr auto signature<::java::lang::Package$1PackageInfoProxy> = ::java_lang / "Package$1PackageInfoProxy";
namespace java::lang { class Process; }
template<> constexpr auto signature<::java::lang::Process> = ::java_lang / "Process";
namespace java::lang { class ProcessBuilder; }
template<> constexpr auto signature<::java::lang::ProcessBuilder> = ::java_lang / "ProcessBuilder";
namespace java::lang { class ProcessBuilder$1; }
template<> constexpr auto signature<::java::lang::ProcessBuilder$1> = ::java_lang / "ProcessBuilder$1";
namespace java::lang { class ProcessBuilder$NullInputStream; }
template<> constexpr auto signature<::java::lang::ProcessBuilder$NullInputStream> = ::java_lang / "ProcessBuilder$NullInputStream";
namespace java::lang { class ProcessBuilder$NullOutputStream; }
template<> constexpr auto signature<::java::lang::ProcessBuilder$NullOutputStream> = ::java_lang / "ProcessBuilder$NullOutputStream";
namespace java::lang { class ProcessBuilder$Redirect; }
template<> constexpr auto signature<::java::lang::ProcessBuilder$Redirect> = ::java_lang / "ProcessBuilder$Redirect";
namespace java::lang { class ProcessBuilder$Redirect$1; }
template<> constexpr auto signature<::java::lang::ProcessBuilder$Redirect$1> = ::java_lang / "ProcessBuilder$Redirect$1";
namespace java::lang { class ProcessBuilder$Redirect$2; }
template<> constexpr auto signature<::java::lang::ProcessBuilder$Redirect$2> = ::java_lang / "ProcessBuilder$Redirect$2";
namespace java::lang { class ProcessBuilder$Redirect$3; }
template<> constexpr auto signature<::java::lang::ProcessBuilder$Redirect$3> = ::java_lang / "ProcessBuilder$Redirect$3";
namespace java::lang { class ProcessBuilder$Redirect$4; }
template<> constexpr auto signature<::java::lang::ProcessBuilder$Redirect$4> = ::java_lang / "ProcessBuilder$Redirect$4";
namespace java::lang { class ProcessBuilder$Redirect$5; }
template<> constexpr auto signature<::java::lang::ProcessBuilder$Redirect$5> = ::java_lang / "ProcessBuilder$Redirect$5";
namespace java::lang { class ProcessBuilder$Redirect$Type; }
template<> constexpr auto signature<::java::lang::ProcessBuilder$Redirect$Type> = ::java_lang / "ProcessBuilder$Redirect$Type";
namespace java::lang { class ProcessEnvironment; }
template<> constexpr auto signature<::java::lang::ProcessEnvironment> = ::java_lang / "ProcessEnvironment";
namespace java::lang { class ProcessEnvironment$ExternalData; }
template<> constexpr auto signature<::java::lang::ProcessEnvironment$ExternalData> = ::java_lang / "ProcessEnvironment$ExternalData";
namespace java::lang { class ProcessEnvironment$StringEntry; }
template<> constexpr auto signature<::java::lang::ProcessEnvironment$StringEntry> = ::java_lang / "ProcessEnvironment$StringEntry";
namespace java::lang { class ProcessEnvironment$StringEntrySet; }
template<> constexpr auto signature<::java::lang::ProcessEnvironment$StringEntrySet> = ::java_lang / "ProcessEnvironment$StringEntrySet";
namespace java::lang { class ProcessEnvironment$StringEntrySet$1; }
template<> constexpr auto signature<::java::lang::ProcessEnvironment$StringEntrySet$1> = ::java_lang / "ProcessEnvironment$StringEntrySet$1";
namespace java::lang { class ProcessEnvironment$StringEntrySet$2; }
template<> constexpr auto signature<::java::lang::ProcessEnvironment$StringEntrySet$2> = ::java_lang / "ProcessEnvironment$StringEntrySet$2";
namespace java::lang { class ProcessEnvironment$StringEnvironment; }
template<> constexpr auto signature<::java::lang::ProcessEnvironment$StringEnvironment> = ::java_lang / "ProcessEnvironment$StringEnvironment";
namespace java::lang { class ProcessEnvironment$StringKeySet; }
template<> constexpr auto signature<::java::lang::ProcessEnvironment$StringKeySet> = ::java_lang / "ProcessEnvironment$StringKeySet";
namespace java::lang { class ProcessEnvironment$StringKeySet$1; }
template<> constexpr auto signature<::java::lang::ProcessEnvironment$StringKeySet$1> = ::java_lang / "ProcessEnvironment$StringKeySet$1";
namespace java::lang { class ProcessEnvironment$StringValues; }
template<> constexpr auto signature<::java::lang::ProcessEnvironment$StringValues> = ::java_lang / "ProcessEnvironment$StringValues";
namespace java::lang { class ProcessEnvironment$StringValues$1; }
template<> constexpr auto signature<::java::lang::ProcessEnvironment$StringValues$1> = ::java_lang / "ProcessEnvironment$StringValues$1";
namespace java::lang { class ProcessEnvironment$Value; }
template<> constexpr auto signature<::java::lang::ProcessEnvironment$Value> = ::java_lang / "ProcessEnvironment$Value";
namespace java::lang { class ProcessEnvironment$Variable; }
template<> constexpr auto signature<::java::lang::ProcessEnvironment$Variable> = ::java_lang / "ProcessEnvironment$Variable";
namespace java::lang { class ProcessImpl; }
template<> constexpr auto signature<::java::lang::ProcessImpl> = ::java_lang / "ProcessImpl";
namespace java::lang { class Readable; }
template<> constexpr auto signature<::java::lang::Readable> = ::java_lang / "Readable";
namespace java::lang { class ReflectiveOperationException; }
template<> constexpr auto signature<::java::lang::ReflectiveOperationException> = ::java_lang / "ReflectiveOperationException";
namespace java::lang { class Runnable; }
template<> constexpr auto signature<::java::lang::Runnable> = ::java_lang / "Runnable";
namespace java::lang { class Runtime; }
template<> constexpr auto signature<::java::lang::Runtime> = ::java_lang / "Runtime";
namespace java::lang { class RuntimeException; }
template<> constexpr auto signature<::java::lang::RuntimeException> = ::java_lang / "RuntimeException";
namespace java::lang { class RuntimePermission; }
template<> constexpr auto signature<::java::lang::RuntimePermission> = ::java_lang / "RuntimePermission";
namespace java::lang { class SafeVarargs; }
template<> constexpr auto signature<::java::lang::SafeVarargs> = ::java_lang / "SafeVarargs";
namespace java::lang { class SecurityException; }
template<> constexpr auto signature<::java::lang::SecurityException> = ::java_lang / "SecurityException";
namespace java::lang { class SecurityManager; }
template<> constexpr auto signature<::java::lang::SecurityManager> = ::java_lang / "SecurityManager";
namespace java::lang { class SecurityManager$1; }
template<> constexpr auto signature<::java::lang::SecurityManager$1> = ::java_lang / "SecurityManager$1";
namespace java::lang { class SecurityManager$2; }
template<> constexpr auto signature<::java::lang::SecurityManager$2> = ::java_lang / "SecurityManager$2";
namespace java::lang { class Short; }
template<> constexpr auto signature<::java::lang::Short> = ::java_lang / "Short";
namespace java::lang { class Short$ShortCache; }
template<> constexpr auto signature<::java::lang::Short$ShortCache> = ::java_lang / "Short$ShortCache";
namespace java::lang { class Shutdown; }
template<> constexpr auto signature<::java::lang::Shutdown> = ::java_lang / "Shutdown";
namespace java::lang { class Shutdown$1; }
template<> constexpr auto signature<::java::lang::Shutdown$1> = ::java_lang / "Shutdown$1";
namespace java::lang { class Shutdown$Lock; }
template<> constexpr auto signature<::java::lang::Shutdown$Lock> = ::java_lang / "Shutdown$Lock";
namespace java::lang { class StackOverflowError; }
template<> constexpr auto signature<::java::lang::StackOverflowError> = ::java_lang / "StackOverflowError";
namespace java::lang { class StackTraceElement; }
template<> constexpr auto signature<::java::lang::StackTraceElement> = ::java_lang / "StackTraceElement";
namespace java::lang { class StrictMath; }
template<> constexpr auto signature<::java::lang::StrictMath> = ::java_lang / "StrictMath";
namespace java::lang { class StrictMath$RandomNumberGeneratorHolder; }
template<> constexpr auto signature<::java::lang::StrictMath$RandomNumberGeneratorHolder> = ::java_lang / "StrictMath$RandomNumberGeneratorHolder";
namespace java::lang { class String$1; }
template<> constexpr auto signature<::java::lang::String$1> = ::java_lang / "String$1";
namespace java::lang { class String$CaseInsensitiveComparator; }
template<> constexpr auto signature<::java::lang::String$CaseInsensitiveComparator> = ::java_lang / "String$CaseInsensitiveComparator";
namespace java::lang { class StringBuffer; }
template<> constexpr auto signature<::java::lang::StringBuffer> = ::java_lang / "StringBuffer";
namespace java::lang { class StringBuilder; }
template<> constexpr auto signature<::java::lang::StringBuilder> = ::java_lang / "StringBuilder";
namespace java::lang { class StringCoding; }
template<> constexpr auto signature<::java::lang::StringCoding> = ::java_lang / "StringCoding";
namespace java::lang { class StringCoding$1; }
template<> constexpr auto signature<::java::lang::StringCoding$1> = ::java_lang / "StringCoding$1";
namespace java::lang { class StringCoding$StringDecoder; }
template<> constexpr auto signature<::java::lang::StringCoding$StringDecoder> = ::java_lang / "StringCoding$StringDecoder";
namespace java::lang { class StringCoding$StringEncoder; }
template<> constexpr auto signature<::java::lang::StringCoding$StringEncoder> = ::java_lang / "StringCoding$StringEncoder";
namespace java::lang { class StringIndexOutOfBoundsException; }
template<> constexpr auto signature<::java::lang::StringIndexOutOfBoundsException> = ::java_lang / "StringIndexOutOfBoundsException";
namespace java::lang { class SuppressWarnings; }
template<> constexpr auto signature<::java::lang::SuppressWarnings> = ::java_lang / "SuppressWarnings";
namespace java::lang { class System; }
template<> constexpr auto signature<::java::lang::System> = ::java_lang / "System";
namespace java::lang { class System$1; }
template<> constexpr auto signature<::java::lang::System$1> = ::java_lang / "System$1";
namespace java::lang { class System$2; }
template<> constexpr auto signature<::java::lang::System$2> = ::java_lang / "System$2";
namespace java::lang { class SystemClassLoaderAction; }
template<> constexpr auto signature<::java::lang::SystemClassLoaderAction> = ::java_lang / "SystemClassLoaderAction";
namespace java::lang { class Terminator; }
template<> constexpr auto signature<::java::lang::Terminator> = ::java_lang / "Terminator";
namespace java::lang { class Terminator$1; }
template<> constexpr auto signature<::java::lang::Terminator$1> = ::java_lang / "Terminator$1";
namespace java::lang { class Thread; }
template<> constexpr auto signature<::java::lang::Thread> = ::java_lang / "Thread";
namespace java::lang { class Thread$1; }
template<> constexpr auto signature<::java::lang::Thread$1> = ::java_lang / "Thread$1";
namespace java::lang { class Thread$Caches; }
template<> constexpr auto signature<::java::lang::Thread$Caches> = ::java_lang / "Thread$Caches";
namespace java::lang { class Thread$State; }
template<> constexpr auto signature<::java::lang::Thread$State> = ::java_lang / "Thread$State";
namespace java::lang { class Thread$UncaughtExceptionHandler; }
template<> constexpr auto signature<::java::lang::Thread$UncaughtExceptionHandler> = ::java_lang / "Thread$UncaughtExceptionHandler";
namespace java::lang { class Thread$WeakClassKey; }
template<> constexpr auto signature<::java::lang::Thread$WeakClassKey> = ::java_lang / "Thread$WeakClassKey";
namespace java::lang { class ThreadDeath; }
template<> constexpr auto signature<::java::lang::ThreadDeath> = ::java_lang / "ThreadDeath";
namespace java::lang { class ThreadGroup; }
template<> constexpr auto signature<::java::lang::ThreadGroup> = ::java_lang / "ThreadGroup";
namespace java::lang { class ThreadLocal; }
template<> constexpr auto signature<::java::lang::ThreadLocal> = ::java_lang / "ThreadLocal";
namespace java::lang { class ThreadLocal$1; }
template<> constexpr auto signature<::java::lang::ThreadLocal$1> = ::java_lang / "ThreadLocal$1";
namespace java::lang { class ThreadLocal$SuppliedThreadLocal; }
template<> constexpr auto signature<::java::lang::ThreadLocal$SuppliedThreadLocal> = ::java_lang / "ThreadLocal$SuppliedThreadLocal";
namespace java::lang { class ThreadLocal$ThreadLocalMap; }
template<> constexpr auto signature<::java::lang::ThreadLocal$ThreadLocalMap> = ::java_lang / "ThreadLocal$ThreadLocalMap";
namespace java::lang { class ThreadLocal$ThreadLocalMap$Entry; }
template<> constexpr auto signature<::java::lang::ThreadLocal$ThreadLocalMap$Entry> = ::java_lang / "ThreadLocal$ThreadLocalMap$Entry";
namespace java::lang { class Throwable; }
template<> constexpr auto signature<::java::lang::Throwable> = ::java_lang / "Throwable";
namespace java::lang { class Throwable$1; }
template<> constexpr auto signature<::java::lang::Throwable$1> = ::java_lang / "Throwable$1";
namespace java::lang { class Throwable$PrintStreamOrWriter; }
template<> constexpr auto signature<::java::lang::Throwable$PrintStreamOrWriter> = ::java_lang / "Throwable$PrintStreamOrWriter";
namespace java::lang { class Throwable$SentinelHolder; }
template<> constexpr auto signature<::java::lang::Throwable$SentinelHolder> = ::java_lang / "Throwable$SentinelHolder";
namespace java::lang { class Throwable$WrappedPrintStream; }
template<> constexpr auto signature<::java::lang::Throwable$WrappedPrintStream> = ::java_lang / "Throwable$WrappedPrintStream";
namespace java::lang { class Throwable$WrappedPrintWriter; }
template<> constexpr auto signature<::java::lang::Throwable$WrappedPrintWriter> = ::java_lang / "Throwable$WrappedPrintWriter";
namespace java::lang { class TypeNotPresentException; }
template<> constexpr auto signature<::java::lang::TypeNotPresentException> = ::java_lang / "TypeNotPresentException";
namespace java::lang { class UNIXProcess; }
template<> constexpr auto signature<::java::lang::UNIXProcess> = ::java_lang / "UNIXProcess";
namespace java::lang { class UNIXProcess$1; }
template<> constexpr auto signature<::java::lang::UNIXProcess$1> = ::java_lang / "UNIXProcess$1";
namespace java::lang { class UNIXProcess$DeferredCloseInputStream; }
template<> constexpr auto signature<::java::lang::UNIXProcess$DeferredCloseInputStream> = ::java_lang / "UNIXProcess$DeferredCloseInputStream";
namespace java::lang { class UNIXProcess$DeferredCloseProcessPipeInputStream; }
template<> constexpr auto signature<::java::lang::UNIXProcess$DeferredCloseProcessPipeInputStream> = ::java_lang / "UNIXProcess$DeferredCloseProcessPipeInputStream";
namespace java::lang { class UNIXProcess$LaunchMechanism; }
template<> constexpr auto signature<::java::lang::UNIXProcess$LaunchMechanism> = ::java_lang / "UNIXProcess$LaunchMechanism";
namespace java::lang { class UNIXProcess$Platform; }
template<> constexpr auto signature<::java::lang::UNIXProcess$Platform> = ::java_lang / "UNIXProcess$Platform";
namespace java::lang { class UNIXProcess$ProcessPipeInputStream; }
template<> constexpr auto signature<::java::lang::UNIXProcess$ProcessPipeInputStream> = ::java_lang / "UNIXProcess$ProcessPipeInputStream";
namespace java::lang { class UNIXProcess$ProcessPipeOutputStream; }
template<> constexpr auto signature<::java::lang::UNIXProcess$ProcessPipeOutputStream> = ::java_lang / "UNIXProcess$ProcessPipeOutputStream";
namespace java::lang { class UnknownError; }
template<> constexpr auto signature<::java::lang::UnknownError> = ::java_lang / "UnknownError";
namespace java::lang { class UnsatisfiedLinkError; }
template<> constexpr auto signature<::java::lang::UnsatisfiedLinkError> = ::java_lang / "UnsatisfiedLinkError";
namespace java::lang { class UnsupportedClassVersionError; }
template<> constexpr auto signature<::java::lang::UnsupportedClassVersionError> = ::java_lang / "UnsupportedClassVersionError";
namespace java::lang { class UnsupportedOperationException; }
template<> constexpr auto signature<::java::lang::UnsupportedOperationException> = ::java_lang / "UnsupportedOperationException";
namespace java::lang { class VerifyError; }
template<> constexpr auto signature<::java::lang::VerifyError> = ::java_lang / "VerifyError";
namespace java::lang { class VirtualMachineError; }
template<> constexpr auto signature<::java::lang::VirtualMachineError> = ::java_lang / "VirtualMachineError";
namespace java::lang { class Void; }
template<> constexpr auto signature<::java::lang::Void> = ::java_lang / "Void";

#endif
