#ifndef java_lang_invoke_MethodHandles$Lookup_HPP
#define java_lang_invoke_MethodHandles$Lookup_HPP

#include "../../../jfwd_decl.hpp"

class ::java::lang::invoke::MethodHandles$Lookup : public jObject<::java::lang::invoke::MethodHandles$Lookup, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_lang_invoke / "MethodHandles$Lookup";

	constexpr static Enume field_signatures{
		jField<::jint>("PACKAGE"), //
		jField<::jint>("PRIVATE"), //
		jField<::jint>("PROTECTED"), //
		jField<::jint>("PUBLIC"), //
	};

	template<typename F = ::jint>
	static auto PACKAGE() {
		static_assert(field_signatures[jField<F>("PACKAGE")] != -1);
		return sat<F>("PACKAGE");
	}

	template<typename F = ::jint>
	static auto PRIVATE() {
		static_assert(field_signatures[jField<F>("PRIVATE")] != -1);
		return sat<F>("PRIVATE");
	}

	template<typename F = ::jint>
	static auto PROTECTED() {
		static_assert(field_signatures[jField<F>("PROTECTED")] != -1);
		return sat<F>("PROTECTED");
	}

	template<typename F = ::jint>
	static auto PUBLIC() {
		static_assert(field_signatures[jField<F>("PUBLIC")] != -1);
		return sat<F>("PUBLIC");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::invoke::MethodHandle(::java::lang::Object, ::java::lang::String, ::java::lang::invoke::MethodType)>("bind"), //
		jMethod<::java::lang::invoke::MethodHandle(::java::lang::Class, ::java::lang::invoke::MethodType)>("findConstructor"), //
		jMethod<::java::lang::invoke::MethodHandle(::java::lang::Class, ::java::lang::String, ::java::lang::Class)>("findGetter"), //
		jMethod<::java::lang::invoke::MethodHandle(::java::lang::Class, ::java::lang::String, ::java::lang::Class)>("findSetter"), //
		jMethod<::java::lang::invoke::MethodHandle(::java::lang::Class, ::java::lang::String, ::java::lang::invoke::MethodType, ::java::lang::Class)>("findSpecial"), //
		jMethod<::java::lang::invoke::MethodHandle(::java::lang::Class, ::java::lang::String, ::java::lang::invoke::MethodType)>("findStatic"), //
		jMethod<::java::lang::invoke::MethodHandle(::java::lang::Class, ::java::lang::String, ::java::lang::Class)>("findStaticGetter"), //
		jMethod<::java::lang::invoke::MethodHandle(::java::lang::Class, ::java::lang::String, ::java::lang::Class)>("findStaticSetter"), //
		jMethod<::java::lang::invoke::MethodHandle(::java::lang::Class, ::java::lang::String, ::java::lang::invoke::MethodType)>("findVirtual"), //
		jMethod<::java::lang::invoke::MethodHandles$Lookup(::java::lang::Class)>("in"), //
		jMethod<::java::lang::Class()>("lookupClass"), //
		jMethod<::jint()>("lookupModes"), //
		jMethod<::java::lang::invoke::MethodHandleInfo(::java::lang::invoke::MethodHandle)>("revealDirect"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::lang::invoke::MethodHandle(::java::lang::reflect::Method)>("unreflect"), //
		jMethod<::java::lang::invoke::MethodHandle(::java::lang::reflect::Constructor)>("unreflectConstructor"), //
		jMethod<::java::lang::invoke::MethodHandle(::java::lang::reflect::Field)>("unreflectGetter"), //
		jMethod<::java::lang::invoke::MethodHandle(::java::lang::reflect::Field)>("unreflectSetter"), //
		jMethod<::java::lang::invoke::MethodHandle(::java::lang::reflect::Method, ::java::lang::Class)>("unreflectSpecial"), //
	};

	template<typename R = ::java::lang::invoke::MethodHandle, typename... Args>
	auto bind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("bind")] != -1);
		return call<R>("bind", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodHandle, typename... Args>
	auto findConstructor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("findConstructor")] != -1);
		return call<R>("findConstructor", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodHandle, typename... Args>
	auto findGetter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("findGetter")] != -1);
		return call<R>("findGetter", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodHandle, typename... Args>
	auto findSetter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("findSetter")] != -1);
		return call<R>("findSetter", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodHandle, typename... Args>
	auto findSpecial(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("findSpecial")] != -1);
		return call<R>("findSpecial", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodHandle, typename... Args>
	auto findStatic(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("findStatic")] != -1);
		return call<R>("findStatic", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodHandle, typename... Args>
	auto findStaticGetter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("findStaticGetter")] != -1);
		return call<R>("findStaticGetter", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodHandle, typename... Args>
	auto findStaticSetter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("findStaticSetter")] != -1);
		return call<R>("findStaticSetter", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodHandle, typename... Args>
	auto findVirtual(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("findVirtual")] != -1);
		return call<R>("findVirtual", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodHandles$Lookup, typename... Args>
	auto in(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("in")] != -1);
		return call<R>("in", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto lookupClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("lookupClass")] != -1);
		return call<R>("lookupClass", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto lookupModes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("lookupModes")] != -1);
		return call<R>("lookupModes", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodHandleInfo, typename... Args>
	auto revealDirect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("revealDirect")] != -1);
		return call<R>("revealDirect", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodHandle, typename... Args>
	auto unreflect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("unreflect")] != -1);
		return call<R>("unreflect", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodHandle, typename... Args>
	auto unreflectConstructor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("unreflectConstructor")] != -1);
		return call<R>("unreflectConstructor", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodHandle, typename... Args>
	auto unreflectGetter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("unreflectGetter")] != -1);
		return call<R>("unreflectGetter", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodHandle, typename... Args>
	auto unreflectSetter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("unreflectSetter")] != -1);
		return call<R>("unreflectSetter", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodHandle, typename... Args>
	auto unreflectSpecial(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("unreflectSpecial")] != -1);
		return call<R>("unreflectSpecial", forward<Args>(args)...);
	}

};

#endif
