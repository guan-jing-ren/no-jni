#ifndef java_lang_invoke_CallSite_HPP
#define java_lang_invoke_CallSite_HPP

#include "../../../jfwd_decl.hpp"

class ::java::lang::invoke::CallSite : public jObject<::java::lang::invoke::CallSite, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_lang_invoke / "CallSite";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::invoke::MethodHandle()>("dynamicInvoker"), //
		jMethod<::java::lang::invoke::MethodHandle()>("getTarget"), //
		jMethod<::jvoid(::java::lang::invoke::MethodHandle)>("setTarget"), //
		jMethod<::java::lang::invoke::MethodType()>("type"), //
	};

	template<typename R = ::java::lang::invoke::MethodHandle, typename... Args>
	auto dynamicInvoker(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dynamicInvoker")] != -1);
		return call<R>("dynamicInvoker", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodHandle, typename... Args>
	auto getTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTarget")] != -1);
		return call<R>("getTarget", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTarget")] != -1);
		return call<R>("setTarget", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodType, typename... Args>
	auto type(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("type")] != -1);
		return call<R>("type", std::forward<Args>(args)...);
	}

};

#endif
