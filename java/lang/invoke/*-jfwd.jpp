#ifndef java_lang_invoke_JPP
#define java_lang_invoke_JPP

namespace java::lang::invoke { class AbstractValidatingLambdaMetafactory; }
template<> constexpr auto signature<::java::lang::invoke::AbstractValidatingLambdaMetafactory> = ::java_lang_invoke / "AbstractValidatingLambdaMetafactory";
namespace java::lang::invoke { class BoundMethodHandle; }
template<> constexpr auto signature<::java::lang::invoke::BoundMethodHandle> = ::java_lang_invoke / "BoundMethodHandle";
namespace java::lang::invoke { class BoundMethodHandle$1; }
template<> constexpr auto signature<::java::lang::invoke::BoundMethodHandle$1> = ::java_lang_invoke / "BoundMethodHandle$1";
namespace java::lang::invoke { class BoundMethodHandle$Factory; }
template<> constexpr auto signature<::java::lang::invoke::BoundMethodHandle$Factory> = ::java_lang_invoke / "BoundMethodHandle$Factory";
namespace java::lang::invoke { class BoundMethodHandle$Factory$1; }
template<> constexpr auto signature<::java::lang::invoke::BoundMethodHandle$Factory$1> = ::java_lang_invoke / "BoundMethodHandle$Factory$1";
namespace java::lang::invoke { class BoundMethodHandle$SpeciesData; }
template<> constexpr auto signature<::java::lang::invoke::BoundMethodHandle$SpeciesData> = ::java_lang_invoke / "BoundMethodHandle$SpeciesData";
namespace java::lang::invoke { class BoundMethodHandle$SpeciesData$1; }
template<> constexpr auto signature<::java::lang::invoke::BoundMethodHandle$SpeciesData$1> = ::java_lang_invoke / "BoundMethodHandle$SpeciesData$1";
namespace java::lang::invoke { class BoundMethodHandle$Species_L; }
template<> constexpr auto signature<::java::lang::invoke::BoundMethodHandle$Species_L> = ::java_lang_invoke / "BoundMethodHandle$Species_L";
namespace java::lang::invoke { class CallSite; }
template<> constexpr auto signature<::java::lang::invoke::CallSite> = ::java_lang_invoke / "CallSite";
namespace java::lang::invoke { class ConstantCallSite; }
template<> constexpr auto signature<::java::lang::invoke::ConstantCallSite> = ::java_lang_invoke / "ConstantCallSite";
namespace java::lang::invoke { class DelegatingMethodHandle; }
template<> constexpr auto signature<::java::lang::invoke::DelegatingMethodHandle> = ::java_lang_invoke / "DelegatingMethodHandle";
namespace java::lang::invoke { class DirectMethodHandle; }
template<> constexpr auto signature<::java::lang::invoke::DirectMethodHandle> = ::java_lang_invoke / "DirectMethodHandle";
namespace java::lang::invoke { class DirectMethodHandle$1; }
template<> constexpr auto signature<::java::lang::invoke::DirectMethodHandle$1> = ::java_lang_invoke / "DirectMethodHandle$1";
namespace java::lang::invoke { class DirectMethodHandle$Accessor; }
template<> constexpr auto signature<::java::lang::invoke::DirectMethodHandle$Accessor> = ::java_lang_invoke / "DirectMethodHandle$Accessor";
namespace java::lang::invoke { class DirectMethodHandle$Constructor; }
template<> constexpr auto signature<::java::lang::invoke::DirectMethodHandle$Constructor> = ::java_lang_invoke / "DirectMethodHandle$Constructor";
namespace java::lang::invoke { class DirectMethodHandle$EnsureInitialized; }
template<> constexpr auto signature<::java::lang::invoke::DirectMethodHandle$EnsureInitialized> = ::java_lang_invoke / "DirectMethodHandle$EnsureInitialized";
namespace java::lang::invoke { class DirectMethodHandle$Lazy; }
template<> constexpr auto signature<::java::lang::invoke::DirectMethodHandle$Lazy> = ::java_lang_invoke / "DirectMethodHandle$Lazy";
namespace java::lang::invoke { class DirectMethodHandle$Special; }
template<> constexpr auto signature<::java::lang::invoke::DirectMethodHandle$Special> = ::java_lang_invoke / "DirectMethodHandle$Special";
namespace java::lang::invoke { class DirectMethodHandle$StaticAccessor; }
template<> constexpr auto signature<::java::lang::invoke::DirectMethodHandle$StaticAccessor> = ::java_lang_invoke / "DirectMethodHandle$StaticAccessor";
namespace java::lang::invoke { class DontInline; }
template<> constexpr auto signature<::java::lang::invoke::DontInline> = ::java_lang_invoke / "DontInline";
namespace java::lang::invoke { class ForceInline; }
template<> constexpr auto signature<::java::lang::invoke::ForceInline> = ::java_lang_invoke / "ForceInline";
namespace java::lang::invoke { class InfoFromMemberName; }
template<> constexpr auto signature<::java::lang::invoke::InfoFromMemberName> = ::java_lang_invoke / "InfoFromMemberName";
namespace java::lang::invoke { class InfoFromMemberName$1; }
template<> constexpr auto signature<::java::lang::invoke::InfoFromMemberName$1> = ::java_lang_invoke / "InfoFromMemberName$1";
namespace java::lang::invoke { class InjectedProfile; }
template<> constexpr auto signature<::java::lang::invoke::InjectedProfile> = ::java_lang_invoke / "InjectedProfile";
namespace java::lang::invoke { class InnerClassLambdaMetafactory; }
template<> constexpr auto signature<::java::lang::invoke::InnerClassLambdaMetafactory> = ::java_lang_invoke / "InnerClassLambdaMetafactory";
namespace java::lang::invoke { class InnerClassLambdaMetafactory$1; }
template<> constexpr auto signature<::java::lang::invoke::InnerClassLambdaMetafactory$1> = ::java_lang_invoke / "InnerClassLambdaMetafactory$1";
namespace java::lang::invoke { class InnerClassLambdaMetafactory$2; }
template<> constexpr auto signature<::java::lang::invoke::InnerClassLambdaMetafactory$2> = ::java_lang_invoke / "InnerClassLambdaMetafactory$2";
namespace java::lang::invoke { class InnerClassLambdaMetafactory$ForwardingMethodGenerator; }
template<> constexpr auto signature<::java::lang::invoke::InnerClassLambdaMetafactory$ForwardingMethodGenerator> = ::java_lang_invoke / "InnerClassLambdaMetafactory$ForwardingMethodGenerator";
namespace java::lang::invoke { class InvokeDynamic; }
template<> constexpr auto signature<::java::lang::invoke::InvokeDynamic> = ::java_lang_invoke / "InvokeDynamic";
namespace java::lang::invoke { class InvokerBytecodeGenerator; }
template<> constexpr auto signature<::java::lang::invoke::InvokerBytecodeGenerator> = ::java_lang_invoke / "InvokerBytecodeGenerator";
namespace java::lang::invoke { class InvokerBytecodeGenerator$1; }
template<> constexpr auto signature<::java::lang::invoke::InvokerBytecodeGenerator$1> = ::java_lang_invoke / "InvokerBytecodeGenerator$1";
namespace java::lang::invoke { class InvokerBytecodeGenerator$2; }
template<> constexpr auto signature<::java::lang::invoke::InvokerBytecodeGenerator$2> = ::java_lang_invoke / "InvokerBytecodeGenerator$2";
namespace java::lang::invoke { class InvokerBytecodeGenerator$CpPatch; }
template<> constexpr auto signature<::java::lang::invoke::InvokerBytecodeGenerator$CpPatch> = ::java_lang_invoke / "InvokerBytecodeGenerator$CpPatch";
namespace java::lang::invoke { class Invokers; }
template<> constexpr auto signature<::java::lang::invoke::Invokers> = ::java_lang_invoke / "Invokers";
namespace java::lang::invoke { class Invokers$Lazy; }
template<> constexpr auto signature<::java::lang::invoke::Invokers$Lazy> = ::java_lang_invoke / "Invokers$Lazy";
namespace java::lang::invoke { class LambdaConversionException; }
template<> constexpr auto signature<::java::lang::invoke::LambdaConversionException> = ::java_lang_invoke / "LambdaConversionException";
namespace java::lang::invoke { class LambdaForm; }
template<> constexpr auto signature<::java::lang::invoke::LambdaForm> = ::java_lang_invoke / "LambdaForm";
namespace java::lang::invoke { class LambdaForm$1; }
template<> constexpr auto signature<::java::lang::invoke::LambdaForm$1> = ::java_lang_invoke / "LambdaForm$1";
namespace java::lang::invoke { class LambdaForm$BasicType; }
template<> constexpr auto signature<::java::lang::invoke::LambdaForm$BasicType> = ::java_lang_invoke / "LambdaForm$BasicType";
namespace java::lang::invoke { class LambdaForm$Compiled; }
template<> constexpr auto signature<::java::lang::invoke::LambdaForm$Compiled> = ::java_lang_invoke / "LambdaForm$Compiled";
namespace java::lang::invoke { class LambdaForm$Hidden; }
template<> constexpr auto signature<::java::lang::invoke::LambdaForm$Hidden> = ::java_lang_invoke / "LambdaForm$Hidden";
namespace java::lang::invoke { class LambdaForm$Name; }
template<> constexpr auto signature<::java::lang::invoke::LambdaForm$Name> = ::java_lang_invoke / "LambdaForm$Name";
namespace java::lang::invoke { class LambdaForm$NamedFunction; }
template<> constexpr auto signature<::java::lang::invoke::LambdaForm$NamedFunction> = ::java_lang_invoke / "LambdaForm$NamedFunction";
namespace java::lang::invoke { class LambdaFormBuffer; }
template<> constexpr auto signature<::java::lang::invoke::LambdaFormBuffer> = ::java_lang_invoke / "LambdaFormBuffer";
namespace java::lang::invoke { class LambdaFormEditor; }
template<> constexpr auto signature<::java::lang::invoke::LambdaFormEditor> = ::java_lang_invoke / "LambdaFormEditor";
namespace java::lang::invoke { class LambdaFormEditor$Transform; }
template<> constexpr auto signature<::java::lang::invoke::LambdaFormEditor$Transform> = ::java_lang_invoke / "LambdaFormEditor$Transform";
namespace java::lang::invoke { class LambdaFormEditor$Transform$Kind; }
template<> constexpr auto signature<::java::lang::invoke::LambdaFormEditor$Transform$Kind> = ::java_lang_invoke / "LambdaFormEditor$Transform$Kind";
namespace java::lang::invoke { class LambdaMetafactory; }
template<> constexpr auto signature<::java::lang::invoke::LambdaMetafactory> = ::java_lang_invoke / "LambdaMetafactory";
namespace java::lang::invoke { class MemberName; }
template<> constexpr auto signature<::java::lang::invoke::MemberName> = ::java_lang_invoke / "MemberName";
namespace java::lang::invoke { class MemberName$Factory; }
template<> constexpr auto signature<::java::lang::invoke::MemberName$Factory> = ::java_lang_invoke / "MemberName$Factory";
namespace java::lang::invoke { class MethodHandle; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandle> = ::java_lang_invoke / "MethodHandle";
namespace java::lang::invoke { class MethodHandle$PolymorphicSignature; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandle$PolymorphicSignature> = ::java_lang_invoke / "MethodHandle$PolymorphicSignature";
namespace java::lang::invoke { class MethodHandleImpl; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleImpl> = ::java_lang_invoke / "MethodHandleImpl";
namespace java::lang::invoke { class MethodHandleImpl$1; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleImpl$1> = ::java_lang_invoke / "MethodHandleImpl$1";
namespace java::lang::invoke { class MethodHandleImpl$2; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleImpl$2> = ::java_lang_invoke / "MethodHandleImpl$2";
namespace java::lang::invoke { class MethodHandleImpl$3; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleImpl$3> = ::java_lang_invoke / "MethodHandleImpl$3";
namespace java::lang::invoke { class MethodHandleImpl$4; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleImpl$4> = ::java_lang_invoke / "MethodHandleImpl$4";
namespace java::lang::invoke { class MethodHandleImpl$ArrayAccessor; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleImpl$ArrayAccessor> = ::java_lang_invoke / "MethodHandleImpl$ArrayAccessor";
namespace java::lang::invoke { class MethodHandleImpl$ArrayAccessor$1; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleImpl$ArrayAccessor$1> = ::java_lang_invoke / "MethodHandleImpl$ArrayAccessor$1";
namespace java::lang::invoke { class MethodHandleImpl$AsVarargsCollector; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleImpl$AsVarargsCollector> = ::java_lang_invoke / "MethodHandleImpl$AsVarargsCollector";
namespace java::lang::invoke { class MethodHandleImpl$BindCaller; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleImpl$BindCaller> = ::java_lang_invoke / "MethodHandleImpl$BindCaller";
namespace java::lang::invoke { class MethodHandleImpl$BindCaller$1; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleImpl$BindCaller$1> = ::java_lang_invoke / "MethodHandleImpl$BindCaller$1";
namespace java::lang::invoke { class MethodHandleImpl$BindCaller$2; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleImpl$BindCaller$2> = ::java_lang_invoke / "MethodHandleImpl$BindCaller$2";
namespace java::lang::invoke { class MethodHandleImpl$BindCaller$T; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleImpl$BindCaller$T> = ::java_lang_invoke / "MethodHandleImpl$BindCaller$T";
namespace java::lang::invoke { class MethodHandleImpl$CountingWrapper; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleImpl$CountingWrapper> = ::java_lang_invoke / "MethodHandleImpl$CountingWrapper";
namespace java::lang::invoke { class MethodHandleImpl$Intrinsic; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleImpl$Intrinsic> = ::java_lang_invoke / "MethodHandleImpl$Intrinsic";
namespace java::lang::invoke { class MethodHandleImpl$IntrinsicMethodHandle; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleImpl$IntrinsicMethodHandle> = ::java_lang_invoke / "MethodHandleImpl$IntrinsicMethodHandle";
namespace java::lang::invoke { class MethodHandleImpl$Lazy; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleImpl$Lazy> = ::java_lang_invoke / "MethodHandleImpl$Lazy";
namespace java::lang::invoke { class MethodHandleImpl$WrappedMember; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleImpl$WrappedMember> = ::java_lang_invoke / "MethodHandleImpl$WrappedMember";
namespace java::lang::invoke { class MethodHandleInfo; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleInfo> = ::java_lang_invoke / "MethodHandleInfo";
namespace java::lang::invoke { class MethodHandleNatives; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleNatives> = ::java_lang_invoke / "MethodHandleNatives";
namespace java::lang::invoke { class MethodHandleNatives$Constants; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleNatives$Constants> = ::java_lang_invoke / "MethodHandleNatives$Constants";
namespace java::lang::invoke { class MethodHandleProxies; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleProxies> = ::java_lang_invoke / "MethodHandleProxies";
namespace java::lang::invoke { class MethodHandleProxies$1; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleProxies$1> = ::java_lang_invoke / "MethodHandleProxies$1";
namespace java::lang::invoke { class MethodHandleProxies$2; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleProxies$2> = ::java_lang_invoke / "MethodHandleProxies$2";
namespace java::lang::invoke { class MethodHandleStatics; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleStatics> = ::java_lang_invoke / "MethodHandleStatics";
namespace java::lang::invoke { class MethodHandleStatics$1; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleStatics$1> = ::java_lang_invoke / "MethodHandleStatics$1";
namespace java::lang::invoke { class MethodHandles; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandles> = ::java_lang_invoke / "MethodHandles";
namespace java::lang::invoke { class MethodHandles$1; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandles$1> = ::java_lang_invoke / "MethodHandles$1";
namespace java::lang::invoke { class MethodHandles$Lookup; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandles$Lookup> = ::java_lang_invoke / "MethodHandles$Lookup";
namespace java::lang::invoke { class MethodType; }
template<> constexpr auto signature<::java::lang::invoke::MethodType> = ::java_lang_invoke / "MethodType";
namespace java::lang::invoke { class MethodType$ConcurrentWeakInternSet; }
template<> constexpr auto signature<::java::lang::invoke::MethodType$ConcurrentWeakInternSet> = ::java_lang_invoke / "MethodType$ConcurrentWeakInternSet";
namespace java::lang::invoke { class MethodType$ConcurrentWeakInternSet$WeakEntry; }
template<> constexpr auto signature<::java::lang::invoke::MethodType$ConcurrentWeakInternSet$WeakEntry> = ::java_lang_invoke / "MethodType$ConcurrentWeakInternSet$WeakEntry";
namespace java::lang::invoke { class MethodTypeForm; }
template<> constexpr auto signature<::java::lang::invoke::MethodTypeForm> = ::java_lang_invoke / "MethodTypeForm";
namespace java::lang::invoke { class MutableCallSite; }
template<> constexpr auto signature<::java::lang::invoke::MutableCallSite> = ::java_lang_invoke / "MutableCallSite";
namespace java::lang::invoke { class ProxyClassesDumper; }
template<> constexpr auto signature<::java::lang::invoke::ProxyClassesDumper> = ::java_lang_invoke / "ProxyClassesDumper";
namespace java::lang::invoke { class ProxyClassesDumper$1; }
template<> constexpr auto signature<::java::lang::invoke::ProxyClassesDumper$1> = ::java_lang_invoke / "ProxyClassesDumper$1";
namespace java::lang::invoke { class SerializedLambda; }
template<> constexpr auto signature<::java::lang::invoke::SerializedLambda> = ::java_lang_invoke / "SerializedLambda";
namespace java::lang::invoke { class SerializedLambda$1; }
template<> constexpr auto signature<::java::lang::invoke::SerializedLambda$1> = ::java_lang_invoke / "SerializedLambda$1";
namespace java::lang::invoke { class SimpleMethodHandle; }
template<> constexpr auto signature<::java::lang::invoke::SimpleMethodHandle> = ::java_lang_invoke / "SimpleMethodHandle";
namespace java::lang::invoke { class Stable; }
template<> constexpr auto signature<::java::lang::invoke::Stable> = ::java_lang_invoke / "Stable";
namespace java::lang::invoke { class SwitchPoint; }
template<> constexpr auto signature<::java::lang::invoke::SwitchPoint> = ::java_lang_invoke / "SwitchPoint";
namespace java::lang::invoke { class TypeConvertingMethodAdapter; }
template<> constexpr auto signature<::java::lang::invoke::TypeConvertingMethodAdapter> = ::java_lang_invoke / "TypeConvertingMethodAdapter";
namespace java::lang::invoke { class VolatileCallSite; }
template<> constexpr auto signature<::java::lang::invoke::VolatileCallSite> = ::java_lang_invoke / "VolatileCallSite";
namespace java::lang::invoke { class WrongMethodTypeException; }
template<> constexpr auto signature<::java::lang::invoke::WrongMethodTypeException> = ::java_lang_invoke / "WrongMethodTypeException";

#endif
