#ifndef java_lang_invoke_LambdaMetafactory_HPP
#define java_lang_invoke_LambdaMetafactory_HPP

#include "../../../jfwd_decl.hpp"

class ::java::lang::invoke::LambdaMetafactory : public jObject<::java::lang::invoke::LambdaMetafactory, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_lang_invoke / "LambdaMetafactory";

	constexpr static Enume field_signatures{
		jField<::jint>("FLAG_BRIDGES"), //
		jField<::jint>("FLAG_MARKERS"), //
		jField<::jint>("FLAG_SERIALIZABLE"), //
	};

	template<typename F = ::jint>
	static auto FLAG_BRIDGES() {
		static_assert(field_signatures[jField<F>("FLAG_BRIDGES")] != -1);
		return sat<F>("FLAG_BRIDGES");
	}

	template<typename F = ::jint>
	static auto FLAG_MARKERS() {
		static_assert(field_signatures[jField<F>("FLAG_MARKERS")] != -1);
		return sat<F>("FLAG_MARKERS");
	}

	template<typename F = ::jint>
	static auto FLAG_SERIALIZABLE() {
		static_assert(field_signatures[jField<F>("FLAG_SERIALIZABLE")] != -1);
		return sat<F>("FLAG_SERIALIZABLE");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::invoke::CallSite(::java::lang::invoke::MethodHandles$Lookup, ::java::lang::String, ::java::lang::invoke::MethodType, ::java::lang::Object *)>("altMetafactory"), //
		jMethod<::java::lang::invoke::CallSite(::java::lang::invoke::MethodHandles$Lookup, ::java::lang::String, ::java::lang::invoke::MethodType, ::java::lang::invoke::MethodType, ::java::lang::invoke::MethodHandle, ::java::lang::invoke::MethodType)>("metafactory"), //
	};

	template<typename R = ::java::lang::invoke::CallSite, typename... Args>
	static auto altMetafactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("altMetafactory")] != -1);
		return scall<R>("altMetafactory", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::CallSite, typename... Args>
	static auto metafactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("metafactory")] != -1);
		return scall<R>("metafactory", forward<Args>(args)...);
	}

};

#endif
