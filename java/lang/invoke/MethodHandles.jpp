#ifndef java_lang_invoke_MethodHandles_HPP
#define java_lang_invoke_MethodHandles_HPP

#include "../../../jfwd_decl.hpp"

class ::java::lang::invoke::MethodHandles : public jObject<::java::lang::invoke::MethodHandles, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_lang_invoke / "MethodHandles";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::invoke::MethodHandle(::java::lang::Class)>("arrayElementGetter"), //
		jMethod<::java::lang::invoke::MethodHandle(::java::lang::Class)>("arrayElementSetter"), //
		jMethod<::java::lang::invoke::MethodHandle(::java::lang::invoke::MethodHandle, ::java::lang::Class, ::java::lang::invoke::MethodHandle)>("catchException"), //
		jMethod<::java::lang::invoke::MethodHandle(::java::lang::invoke::MethodHandle, ::jint, ::java::lang::invoke::MethodHandle)>("collectArguments"), //
		jMethod<::java::lang::invoke::MethodHandle(::java::lang::Class, ::java::lang::Object)>("constant"), //
		jMethod<::java::lang::invoke::MethodHandle(::java::lang::invoke::MethodHandle, ::jint, ::java::util::List)>("dropArguments"), //
		jMethod<::java::lang::invoke::MethodHandle(::java::lang::invoke::MethodHandle, ::jint, ::java::lang::Class *)>("dropArguments"), //
		jMethod<::java::lang::invoke::MethodHandle(::java::lang::invoke::MethodType)>("exactInvoker"), //
		jMethod<::java::lang::invoke::MethodHandle(::java::lang::invoke::MethodHandle, ::java::lang::invoke::MethodType)>("explicitCastArguments"), //
		jMethod<::java::lang::invoke::MethodHandle(::java::lang::invoke::MethodHandle, ::jint, ::java::lang::invoke::MethodHandle *)>("filterArguments"), //
		jMethod<::java::lang::invoke::MethodHandle(::java::lang::invoke::MethodHandle, ::java::lang::invoke::MethodHandle)>("filterReturnValue"), //
		jMethod<::java::lang::invoke::MethodHandle(::java::lang::invoke::MethodHandle, ::java::lang::invoke::MethodHandle)>("foldArguments"), //
		jMethod<::java::lang::invoke::MethodHandle(::java::lang::invoke::MethodHandle, ::java::lang::invoke::MethodHandle, ::java::lang::invoke::MethodHandle)>("guardWithTest"), //
		jMethod<::java::lang::invoke::MethodHandle(::java::lang::Class)>("identity"), //
		jMethod<::java::lang::invoke::MethodHandle(::java::lang::invoke::MethodHandle, ::jint, ::java::lang::Object *)>("insertArguments"), //
		jMethod<::java::lang::invoke::MethodHandle(::java::lang::invoke::MethodType)>("invoker"), //
		jMethod<::java::lang::invoke::MethodHandles$Lookup()>("lookup"), //
		jMethod<::java::lang::invoke::MethodHandle(::java::lang::invoke::MethodHandle, ::java::lang::invoke::MethodType, ::jint *)>("permuteArguments"), //
		jMethod<::java::lang::invoke::MethodHandles$Lookup()>("publicLookup"), //
		jMethod<::java::lang::reflect::Member(::java::lang::Class, ::java::lang::invoke::MethodHandle)>("reflectAs"), //
		jMethod<::java::lang::invoke::MethodHandle(::java::lang::invoke::MethodType, ::jint)>("spreadInvoker"), //
		jMethod<::java::lang::invoke::MethodHandle(::java::lang::Class, ::java::lang::Class)>("throwException"), //
	};

	template<typename R = ::java::lang::invoke::MethodHandle, typename... Args>
	static auto arrayElementGetter(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("arrayElementGetter")] != -1);
		return scall<R>("arrayElementGetter", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodHandle, typename... Args>
	static auto arrayElementSetter(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("arrayElementSetter")] != -1);
		return scall<R>("arrayElementSetter", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodHandle, typename... Args>
	static auto catchException(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("catchException")] != -1);
		return scall<R>("catchException", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodHandle, typename... Args>
	static auto collectArguments(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("collectArguments")] != -1);
		return scall<R>("collectArguments", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodHandle, typename... Args>
	static auto constant(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("constant")] != -1);
		return scall<R>("constant", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodHandle, typename... Args>
	static auto dropArguments(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("dropArguments")] != -1);
		return scall<R>("dropArguments", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodHandle, typename... Args>
	static auto exactInvoker(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("exactInvoker")] != -1);
		return scall<R>("exactInvoker", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodHandle, typename... Args>
	static auto explicitCastArguments(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("explicitCastArguments")] != -1);
		return scall<R>("explicitCastArguments", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodHandle, typename... Args>
	static auto filterArguments(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("filterArguments")] != -1);
		return scall<R>("filterArguments", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodHandle, typename... Args>
	static auto filterReturnValue(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("filterReturnValue")] != -1);
		return scall<R>("filterReturnValue", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodHandle, typename... Args>
	static auto foldArguments(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("foldArguments")] != -1);
		return scall<R>("foldArguments", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodHandle, typename... Args>
	static auto guardWithTest(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("guardWithTest")] != -1);
		return scall<R>("guardWithTest", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodHandle, typename... Args>
	static auto identity(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("identity")] != -1);
		return scall<R>("identity", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodHandle, typename... Args>
	static auto insertArguments(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("insertArguments")] != -1);
		return scall<R>("insertArguments", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodHandle, typename... Args>
	static auto invoker(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("invoker")] != -1);
		return scall<R>("invoker", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodHandles$Lookup, typename... Args>
	static auto lookup(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("lookup")] != -1);
		return scall<R>("lookup", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodHandle, typename... Args>
	static auto permuteArguments(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("permuteArguments")] != -1);
		return scall<R>("permuteArguments", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodHandles$Lookup, typename... Args>
	static auto publicLookup(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("publicLookup")] != -1);
		return scall<R>("publicLookup", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::Member, typename... Args>
	static auto reflectAs(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reflectAs")] != -1);
		return scall<R>("reflectAs", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodHandle, typename... Args>
	static auto spreadInvoker(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("spreadInvoker")] != -1);
		return scall<R>("spreadInvoker", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodHandle, typename... Args>
	static auto throwException(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("throwException")] != -1);
		return scall<R>("throwException", forward<Args>(args)...);
	}

};

#endif
