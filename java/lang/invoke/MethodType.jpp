#ifndef java_lang_invoke_MethodType_HPP
#define java_lang_invoke_MethodType_HPP

#include "../../../jfwd_decl.hpp"

class ::java::lang::invoke::MethodType : public jObject<::java::lang::invoke::MethodType, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_lang_invoke / "MethodType";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::invoke::MethodType(::java::util::List)>("appendParameterTypes"), //
		jMethod<::java::lang::invoke::MethodType(::java::lang::Class *)>("appendParameterTypes"), //
		jMethod<::java::lang::invoke::MethodType(::jint, ::java::lang::Class)>("changeParameterType"), //
		jMethod<::java::lang::invoke::MethodType(::java::lang::Class)>("changeReturnType"), //
		jMethod<::java::lang::invoke::MethodType(::jint, ::jint)>("dropParameterTypes"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::invoke::MethodType()>("erase"), //
		jMethod<::java::lang::invoke::MethodType(::java::lang::String, ::java::lang::ClassLoader)>("fromMethodDescriptorString"), //
		jMethod<::java::lang::invoke::MethodType()>("generic"), //
		jMethod<::java::lang::invoke::MethodType(::jint)>("genericMethodType"), //
		jMethod<::java::lang::invoke::MethodType(::jint, ::jboolean)>("genericMethodType"), //
		jMethod<::jboolean()>("hasPrimitives"), //
		jMethod<::jboolean()>("hasWrappers"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::invoke::MethodType(::jint, ::java::util::List)>("insertParameterTypes"), //
		jMethod<::java::lang::invoke::MethodType(::jint, ::java::lang::Class *)>("insertParameterTypes"), //
		jMethod<::java::lang::invoke::MethodType(::java::lang::Class)>("methodType"), //
		jMethod<::java::lang::invoke::MethodType(::java::lang::Class, ::java::lang::Class)>("methodType"), //
		jMethod<::java::lang::invoke::MethodType(::java::lang::Class, ::java::lang::Class, ::java::lang::Class *)>("methodType"), //
		jMethod<::java::lang::invoke::MethodType(::java::lang::Class, ::java::lang::invoke::MethodType)>("methodType"), //
		jMethod<::java::lang::invoke::MethodType(::java::lang::Class, ::java::util::List)>("methodType"), //
		jMethod<::java::lang::invoke::MethodType(::java::lang::Class, ::java::lang::Class *)>("methodType"), //
		jMethod<::java::lang::Class *()>("parameterArray"), //
		jMethod<::jint()>("parameterCount"), //
		jMethod<::java::util::List()>("parameterList"), //
		jMethod<::java::lang::Class(::jint)>("parameterType"), //
		jMethod<::java::lang::Class()>("returnType"), //
		jMethod<::java::lang::String()>("toMethodDescriptorString"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::lang::invoke::MethodType()>("unwrap"), //
		jMethod<::java::lang::invoke::MethodType()>("wrap"), //
	};

	template<typename R = ::java::lang::invoke::MethodType, typename... Args>
	auto appendParameterTypes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("appendParameterTypes")] != -1);
		return call<R>("appendParameterTypes", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodType, typename... Args>
	auto changeParameterType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("changeParameterType")] != -1);
		return call<R>("changeParameterType", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodType, typename... Args>
	auto changeReturnType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("changeReturnType")] != -1);
		return call<R>("changeReturnType", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodType, typename... Args>
	auto dropParameterTypes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("dropParameterTypes")] != -1);
		return call<R>("dropParameterTypes", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodType, typename... Args>
	auto erase(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("erase")] != -1);
		return call<R>("erase", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodType, typename... Args>
	static auto fromMethodDescriptorString(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("fromMethodDescriptorString")] != -1);
		return scall<R>("fromMethodDescriptorString", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodType, typename... Args>
	auto generic(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("generic")] != -1);
		return call<R>("generic", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodType, typename... Args>
	static auto genericMethodType(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("genericMethodType")] != -1);
		return scall<R>("genericMethodType", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasPrimitives(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hasPrimitives")] != -1);
		return call<R>("hasPrimitives", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasWrappers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hasWrappers")] != -1);
		return call<R>("hasWrappers", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodType, typename... Args>
	auto insertParameterTypes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("insertParameterTypes")] != -1);
		return call<R>("insertParameterTypes", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodType, typename... Args>
	static auto methodType(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("methodType")] != -1);
		return scall<R>("methodType", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class *, typename... Args>
	auto parameterArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("parameterArray")] != -1);
		return call<R>("parameterArray", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto parameterCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("parameterCount")] != -1);
		return call<R>("parameterCount", forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto parameterList(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("parameterList")] != -1);
		return call<R>("parameterList", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto parameterType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("parameterType")] != -1);
		return call<R>("parameterType", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto returnType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("returnType")] != -1);
		return call<R>("returnType", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toMethodDescriptorString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toMethodDescriptorString")] != -1);
		return call<R>("toMethodDescriptorString", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodType, typename... Args>
	auto unwrap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("unwrap")] != -1);
		return call<R>("unwrap", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::invoke::MethodType, typename... Args>
	auto wrap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("wrap")] != -1);
		return call<R>("wrap", forward<Args>(args)...);
	}

};

#endif
