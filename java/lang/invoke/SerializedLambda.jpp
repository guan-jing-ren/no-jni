#ifndef java_lang_invoke_SerializedLambda_HPP
#define java_lang_invoke_SerializedLambda_HPP

#include "../../../jfwd_decl.hpp"

class ::java::lang::invoke::SerializedLambda : public jObject<::java::lang::invoke::SerializedLambda, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_lang_invoke / "SerializedLambda";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::Class, ::java::lang::String, ::java::lang::String, ::java::lang::String, ::jint, ::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::lang::Object *)>(), //
		jMethod<::java::lang::Object(::jint)>("getCapturedArg"), //
		jMethod<::jint()>("getCapturedArgCount"), //
		jMethod<::java::lang::String()>("getCapturingClass"), //
		jMethod<::java::lang::String()>("getFunctionalInterfaceClass"), //
		jMethod<::java::lang::String()>("getFunctionalInterfaceMethodName"), //
		jMethod<::java::lang::String()>("getFunctionalInterfaceMethodSignature"), //
		jMethod<::java::lang::String()>("getImplClass"), //
		jMethod<::jint()>("getImplMethodKind"), //
		jMethod<::java::lang::String()>("getImplMethodName"), //
		jMethod<::java::lang::String()>("getImplMethodSignature"), //
		jMethod<::java::lang::String()>("getInstantiatedMethodType"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto getCapturedArg(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCapturedArg")] != -1);
		return call<R>("getCapturedArg", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCapturedArgCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCapturedArgCount")] != -1);
		return call<R>("getCapturedArgCount", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCapturingClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCapturingClass")] != -1);
		return call<R>("getCapturingClass", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFunctionalInterfaceClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFunctionalInterfaceClass")] != -1);
		return call<R>("getFunctionalInterfaceClass", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFunctionalInterfaceMethodName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFunctionalInterfaceMethodName")] != -1);
		return call<R>("getFunctionalInterfaceMethodName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFunctionalInterfaceMethodSignature(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFunctionalInterfaceMethodSignature")] != -1);
		return call<R>("getFunctionalInterfaceMethodSignature", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getImplClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getImplClass")] != -1);
		return call<R>("getImplClass", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getImplMethodKind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getImplMethodKind")] != -1);
		return call<R>("getImplMethodKind", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getImplMethodName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getImplMethodName")] != -1);
		return call<R>("getImplMethodName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getImplMethodSignature(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getImplMethodSignature")] != -1);
		return call<R>("getImplMethodSignature", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getInstantiatedMethodType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInstantiatedMethodType")] != -1);
		return call<R>("getInstantiatedMethodType", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
