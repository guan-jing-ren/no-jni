#ifndef java_lang_ProcessBuilder$Redirect$Type_HPP
#define java_lang_ProcessBuilder$Redirect$Type_HPP

#include "../../jfwd_decl.hpp"

class ::java::lang::ProcessBuilder$Redirect$Type : public jObject<::java::lang::ProcessBuilder$Redirect$Type, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_lang / "ProcessBuilder$Redirect$Type";

	constexpr static Enume field_signatures{
		jField<::java::lang::ProcessBuilder$Redirect$Type>("APPEND"), //
		jField<::java::lang::ProcessBuilder$Redirect$Type>("INHERIT"), //
		jField<::java::lang::ProcessBuilder$Redirect$Type>("PIPE"), //
		jField<::java::lang::ProcessBuilder$Redirect$Type>("READ"), //
		jField<::java::lang::ProcessBuilder$Redirect$Type>("WRITE"), //
	};

	template<typename F = ::java::lang::ProcessBuilder$Redirect$Type>
	static auto APPEND() {
		static_assert(field_signatures[jField<F>("APPEND")] != -1);
		return sat<F>("APPEND");
	}

	template<typename F = ::java::lang::ProcessBuilder$Redirect$Type>
	static auto INHERIT() {
		static_assert(field_signatures[jField<F>("INHERIT")] != -1);
		return sat<F>("INHERIT");
	}

	template<typename F = ::java::lang::ProcessBuilder$Redirect$Type>
	static auto PIPE() {
		static_assert(field_signatures[jField<F>("PIPE")] != -1);
		return sat<F>("PIPE");
	}

	template<typename F = ::java::lang::ProcessBuilder$Redirect$Type>
	static auto READ() {
		static_assert(field_signatures[jField<F>("READ")] != -1);
		return sat<F>("READ");
	}

	template<typename F = ::java::lang::ProcessBuilder$Redirect$Type>
	static auto WRITE() {
		static_assert(field_signatures[jField<F>("WRITE")] != -1);
		return sat<F>("WRITE");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::ProcessBuilder$Redirect$Type(::java::lang::String)>("valueOf"), //
		jMethod<::java::lang::ProcessBuilder$Redirect$Type *()>("values"), //
	};

	template<typename R = ::java::lang::ProcessBuilder$Redirect$Type, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::ProcessBuilder$Redirect$Type *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
