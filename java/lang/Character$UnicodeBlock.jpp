#ifndef java_lang_Character$UnicodeBlock_HPP
#define java_lang_Character$UnicodeBlock_HPP

#include "../../jfwd_decl.hpp"

class ::java::lang::Character$UnicodeBlock : public jObject<::java::lang::Character$UnicodeBlock, ::java::lang::Character$Subset> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_lang / "Character$UnicodeBlock";

	constexpr static Enume field_signatures{
		jField<::java::lang::Character$UnicodeBlock>("AEGEAN_NUMBERS"), //
		jField<::java::lang::Character$UnicodeBlock>("ALCHEMICAL_SYMBOLS"), //
		jField<::java::lang::Character$UnicodeBlock>("ALPHABETIC_PRESENTATION_FORMS"), //
		jField<::java::lang::Character$UnicodeBlock>("ANCIENT_GREEK_MUSICAL_NOTATION"), //
		jField<::java::lang::Character$UnicodeBlock>("ANCIENT_GREEK_NUMBERS"), //
		jField<::java::lang::Character$UnicodeBlock>("ANCIENT_SYMBOLS"), //
		jField<::java::lang::Character$UnicodeBlock>("ARABIC"), //
		jField<::java::lang::Character$UnicodeBlock>("ARABIC_EXTENDED_A"), //
		jField<::java::lang::Character$UnicodeBlock>("ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS"), //
		jField<::java::lang::Character$UnicodeBlock>("ARABIC_PRESENTATION_FORMS_A"), //
		jField<::java::lang::Character$UnicodeBlock>("ARABIC_PRESENTATION_FORMS_B"), //
		jField<::java::lang::Character$UnicodeBlock>("ARABIC_SUPPLEMENT"), //
		jField<::java::lang::Character$UnicodeBlock>("ARMENIAN"), //
		jField<::java::lang::Character$UnicodeBlock>("ARROWS"), //
		jField<::java::lang::Character$UnicodeBlock>("AVESTAN"), //
		jField<::java::lang::Character$UnicodeBlock>("BALINESE"), //
		jField<::java::lang::Character$UnicodeBlock>("BAMUM"), //
		jField<::java::lang::Character$UnicodeBlock>("BAMUM_SUPPLEMENT"), //
		jField<::java::lang::Character$UnicodeBlock>("BASIC_LATIN"), //
		jField<::java::lang::Character$UnicodeBlock>("BATAK"), //
		jField<::java::lang::Character$UnicodeBlock>("BENGALI"), //
		jField<::java::lang::Character$UnicodeBlock>("BLOCK_ELEMENTS"), //
		jField<::java::lang::Character$UnicodeBlock>("BOPOMOFO"), //
		jField<::java::lang::Character$UnicodeBlock>("BOPOMOFO_EXTENDED"), //
		jField<::java::lang::Character$UnicodeBlock>("BOX_DRAWING"), //
		jField<::java::lang::Character$UnicodeBlock>("BRAHMI"), //
		jField<::java::lang::Character$UnicodeBlock>("BRAILLE_PATTERNS"), //
		jField<::java::lang::Character$UnicodeBlock>("BUGINESE"), //
		jField<::java::lang::Character$UnicodeBlock>("BUHID"), //
		jField<::java::lang::Character$UnicodeBlock>("BYZANTINE_MUSICAL_SYMBOLS"), //
		jField<::java::lang::Character$UnicodeBlock>("CARIAN"), //
		jField<::java::lang::Character$UnicodeBlock>("CHAKMA"), //
		jField<::java::lang::Character$UnicodeBlock>("CHAM"), //
		jField<::java::lang::Character$UnicodeBlock>("CHEROKEE"), //
		jField<::java::lang::Character$UnicodeBlock>("CJK_COMPATIBILITY"), //
		jField<::java::lang::Character$UnicodeBlock>("CJK_COMPATIBILITY_FORMS"), //
		jField<::java::lang::Character$UnicodeBlock>("CJK_COMPATIBILITY_IDEOGRAPHS"), //
		jField<::java::lang::Character$UnicodeBlock>("CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT"), //
		jField<::java::lang::Character$UnicodeBlock>("CJK_RADICALS_SUPPLEMENT"), //
		jField<::java::lang::Character$UnicodeBlock>("CJK_STROKES"), //
		jField<::java::lang::Character$UnicodeBlock>("CJK_SYMBOLS_AND_PUNCTUATION"), //
		jField<::java::lang::Character$UnicodeBlock>("CJK_UNIFIED_IDEOGRAPHS"), //
		jField<::java::lang::Character$UnicodeBlock>("CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A"), //
		jField<::java::lang::Character$UnicodeBlock>("CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B"), //
		jField<::java::lang::Character$UnicodeBlock>("CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C"), //
		jField<::java::lang::Character$UnicodeBlock>("CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D"), //
		jField<::java::lang::Character$UnicodeBlock>("COMBINING_DIACRITICAL_MARKS"), //
		jField<::java::lang::Character$UnicodeBlock>("COMBINING_DIACRITICAL_MARKS_SUPPLEMENT"), //
		jField<::java::lang::Character$UnicodeBlock>("COMBINING_HALF_MARKS"), //
		jField<::java::lang::Character$UnicodeBlock>("COMBINING_MARKS_FOR_SYMBOLS"), //
		jField<::java::lang::Character$UnicodeBlock>("COMMON_INDIC_NUMBER_FORMS"), //
		jField<::java::lang::Character$UnicodeBlock>("CONTROL_PICTURES"), //
		jField<::java::lang::Character$UnicodeBlock>("COPTIC"), //
		jField<::java::lang::Character$UnicodeBlock>("COUNTING_ROD_NUMERALS"), //
		jField<::java::lang::Character$UnicodeBlock>("CUNEIFORM"), //
		jField<::java::lang::Character$UnicodeBlock>("CUNEIFORM_NUMBERS_AND_PUNCTUATION"), //
		jField<::java::lang::Character$UnicodeBlock>("CURRENCY_SYMBOLS"), //
		jField<::java::lang::Character$UnicodeBlock>("CYPRIOT_SYLLABARY"), //
		jField<::java::lang::Character$UnicodeBlock>("CYRILLIC"), //
		jField<::java::lang::Character$UnicodeBlock>("CYRILLIC_EXTENDED_A"), //
		jField<::java::lang::Character$UnicodeBlock>("CYRILLIC_EXTENDED_B"), //
		jField<::java::lang::Character$UnicodeBlock>("CYRILLIC_SUPPLEMENTARY"), //
		jField<::java::lang::Character$UnicodeBlock>("DESERET"), //
		jField<::java::lang::Character$UnicodeBlock>("DEVANAGARI"), //
		jField<::java::lang::Character$UnicodeBlock>("DEVANAGARI_EXTENDED"), //
		jField<::java::lang::Character$UnicodeBlock>("DINGBATS"), //
		jField<::java::lang::Character$UnicodeBlock>("DOMINO_TILES"), //
		jField<::java::lang::Character$UnicodeBlock>("EGYPTIAN_HIEROGLYPHS"), //
		jField<::java::lang::Character$UnicodeBlock>("EMOTICONS"), //
		jField<::java::lang::Character$UnicodeBlock>("ENCLOSED_ALPHANUMERICS"), //
		jField<::java::lang::Character$UnicodeBlock>("ENCLOSED_ALPHANUMERIC_SUPPLEMENT"), //
		jField<::java::lang::Character$UnicodeBlock>("ENCLOSED_CJK_LETTERS_AND_MONTHS"), //
		jField<::java::lang::Character$UnicodeBlock>("ENCLOSED_IDEOGRAPHIC_SUPPLEMENT"), //
		jField<::java::lang::Character$UnicodeBlock>("ETHIOPIC"), //
		jField<::java::lang::Character$UnicodeBlock>("ETHIOPIC_EXTENDED"), //
		jField<::java::lang::Character$UnicodeBlock>("ETHIOPIC_EXTENDED_A"), //
		jField<::java::lang::Character$UnicodeBlock>("ETHIOPIC_SUPPLEMENT"), //
		jField<::java::lang::Character$UnicodeBlock>("GENERAL_PUNCTUATION"), //
		jField<::java::lang::Character$UnicodeBlock>("GEOMETRIC_SHAPES"), //
		jField<::java::lang::Character$UnicodeBlock>("GEORGIAN"), //
		jField<::java::lang::Character$UnicodeBlock>("GEORGIAN_SUPPLEMENT"), //
		jField<::java::lang::Character$UnicodeBlock>("GLAGOLITIC"), //
		jField<::java::lang::Character$UnicodeBlock>("GOTHIC"), //
		jField<::java::lang::Character$UnicodeBlock>("GREEK"), //
		jField<::java::lang::Character$UnicodeBlock>("GREEK_EXTENDED"), //
		jField<::java::lang::Character$UnicodeBlock>("GUJARATI"), //
		jField<::java::lang::Character$UnicodeBlock>("GURMUKHI"), //
		jField<::java::lang::Character$UnicodeBlock>("HALFWIDTH_AND_FULLWIDTH_FORMS"), //
		jField<::java::lang::Character$UnicodeBlock>("HANGUL_COMPATIBILITY_JAMO"), //
		jField<::java::lang::Character$UnicodeBlock>("HANGUL_JAMO"), //
		jField<::java::lang::Character$UnicodeBlock>("HANGUL_JAMO_EXTENDED_A"), //
		jField<::java::lang::Character$UnicodeBlock>("HANGUL_JAMO_EXTENDED_B"), //
		jField<::java::lang::Character$UnicodeBlock>("HANGUL_SYLLABLES"), //
		jField<::java::lang::Character$UnicodeBlock>("HANUNOO"), //
		jField<::java::lang::Character$UnicodeBlock>("HEBREW"), //
		jField<::java::lang::Character$UnicodeBlock>("HIGH_PRIVATE_USE_SURROGATES"), //
		jField<::java::lang::Character$UnicodeBlock>("HIGH_SURROGATES"), //
		jField<::java::lang::Character$UnicodeBlock>("HIRAGANA"), //
		jField<::java::lang::Character$UnicodeBlock>("IDEOGRAPHIC_DESCRIPTION_CHARACTERS"), //
		jField<::java::lang::Character$UnicodeBlock>("IMPERIAL_ARAMAIC"), //
		jField<::java::lang::Character$UnicodeBlock>("INSCRIPTIONAL_PAHLAVI"), //
		jField<::java::lang::Character$UnicodeBlock>("INSCRIPTIONAL_PARTHIAN"), //
		jField<::java::lang::Character$UnicodeBlock>("IPA_EXTENSIONS"), //
		jField<::java::lang::Character$UnicodeBlock>("JAVANESE"), //
		jField<::java::lang::Character$UnicodeBlock>("KAITHI"), //
		jField<::java::lang::Character$UnicodeBlock>("KANA_SUPPLEMENT"), //
		jField<::java::lang::Character$UnicodeBlock>("KANBUN"), //
		jField<::java::lang::Character$UnicodeBlock>("KANGXI_RADICALS"), //
		jField<::java::lang::Character$UnicodeBlock>("KANNADA"), //
		jField<::java::lang::Character$UnicodeBlock>("KATAKANA"), //
		jField<::java::lang::Character$UnicodeBlock>("KATAKANA_PHONETIC_EXTENSIONS"), //
		jField<::java::lang::Character$UnicodeBlock>("KAYAH_LI"), //
		jField<::java::lang::Character$UnicodeBlock>("KHAROSHTHI"), //
		jField<::java::lang::Character$UnicodeBlock>("KHMER"), //
		jField<::java::lang::Character$UnicodeBlock>("KHMER_SYMBOLS"), //
		jField<::java::lang::Character$UnicodeBlock>("LAO"), //
		jField<::java::lang::Character$UnicodeBlock>("LATIN_1_SUPPLEMENT"), //
		jField<::java::lang::Character$UnicodeBlock>("LATIN_EXTENDED_A"), //
		jField<::java::lang::Character$UnicodeBlock>("LATIN_EXTENDED_ADDITIONAL"), //
		jField<::java::lang::Character$UnicodeBlock>("LATIN_EXTENDED_B"), //
		jField<::java::lang::Character$UnicodeBlock>("LATIN_EXTENDED_C"), //
		jField<::java::lang::Character$UnicodeBlock>("LATIN_EXTENDED_D"), //
		jField<::java::lang::Character$UnicodeBlock>("LEPCHA"), //
		jField<::java::lang::Character$UnicodeBlock>("LETTERLIKE_SYMBOLS"), //
		jField<::java::lang::Character$UnicodeBlock>("LIMBU"), //
		jField<::java::lang::Character$UnicodeBlock>("LINEAR_B_IDEOGRAMS"), //
		jField<::java::lang::Character$UnicodeBlock>("LINEAR_B_SYLLABARY"), //
		jField<::java::lang::Character$UnicodeBlock>("LISU"), //
		jField<::java::lang::Character$UnicodeBlock>("LOW_SURROGATES"), //
		jField<::java::lang::Character$UnicodeBlock>("LYCIAN"), //
		jField<::java::lang::Character$UnicodeBlock>("LYDIAN"), //
		jField<::java::lang::Character$UnicodeBlock>("MAHJONG_TILES"), //
		jField<::java::lang::Character$UnicodeBlock>("MALAYALAM"), //
		jField<::java::lang::Character$UnicodeBlock>("MANDAIC"), //
		jField<::java::lang::Character$UnicodeBlock>("MATHEMATICAL_ALPHANUMERIC_SYMBOLS"), //
		jField<::java::lang::Character$UnicodeBlock>("MATHEMATICAL_OPERATORS"), //
		jField<::java::lang::Character$UnicodeBlock>("MEETEI_MAYEK"), //
		jField<::java::lang::Character$UnicodeBlock>("MEETEI_MAYEK_EXTENSIONS"), //
		jField<::java::lang::Character$UnicodeBlock>("MEROITIC_CURSIVE"), //
		jField<::java::lang::Character$UnicodeBlock>("MEROITIC_HIEROGLYPHS"), //
		jField<::java::lang::Character$UnicodeBlock>("MIAO"), //
		jField<::java::lang::Character$UnicodeBlock>("MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A"), //
		jField<::java::lang::Character$UnicodeBlock>("MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B"), //
		jField<::java::lang::Character$UnicodeBlock>("MISCELLANEOUS_SYMBOLS"), //
		jField<::java::lang::Character$UnicodeBlock>("MISCELLANEOUS_SYMBOLS_AND_ARROWS"), //
		jField<::java::lang::Character$UnicodeBlock>("MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS"), //
		jField<::java::lang::Character$UnicodeBlock>("MISCELLANEOUS_TECHNICAL"), //
		jField<::java::lang::Character$UnicodeBlock>("MODIFIER_TONE_LETTERS"), //
		jField<::java::lang::Character$UnicodeBlock>("MONGOLIAN"), //
		jField<::java::lang::Character$UnicodeBlock>("MUSICAL_SYMBOLS"), //
		jField<::java::lang::Character$UnicodeBlock>("MYANMAR"), //
		jField<::java::lang::Character$UnicodeBlock>("MYANMAR_EXTENDED_A"), //
		jField<::java::lang::Character$UnicodeBlock>("NEW_TAI_LUE"), //
		jField<::java::lang::Character$UnicodeBlock>("NKO"), //
		jField<::java::lang::Character$UnicodeBlock>("NUMBER_FORMS"), //
		jField<::java::lang::Character$UnicodeBlock>("OGHAM"), //
		jField<::java::lang::Character$UnicodeBlock>("OLD_ITALIC"), //
		jField<::java::lang::Character$UnicodeBlock>("OLD_PERSIAN"), //
		jField<::java::lang::Character$UnicodeBlock>("OLD_SOUTH_ARABIAN"), //
		jField<::java::lang::Character$UnicodeBlock>("OLD_TURKIC"), //
		jField<::java::lang::Character$UnicodeBlock>("OL_CHIKI"), //
		jField<::java::lang::Character$UnicodeBlock>("OPTICAL_CHARACTER_RECOGNITION"), //
		jField<::java::lang::Character$UnicodeBlock>("ORIYA"), //
		jField<::java::lang::Character$UnicodeBlock>("OSMANYA"), //
		jField<::java::lang::Character$UnicodeBlock>("PHAGS_PA"), //
		jField<::java::lang::Character$UnicodeBlock>("PHAISTOS_DISC"), //
		jField<::java::lang::Character$UnicodeBlock>("PHOENICIAN"), //
		jField<::java::lang::Character$UnicodeBlock>("PHONETIC_EXTENSIONS"), //
		jField<::java::lang::Character$UnicodeBlock>("PHONETIC_EXTENSIONS_SUPPLEMENT"), //
		jField<::java::lang::Character$UnicodeBlock>("PLAYING_CARDS"), //
		jField<::java::lang::Character$UnicodeBlock>("PRIVATE_USE_AREA"), //
		jField<::java::lang::Character$UnicodeBlock>("REJANG"), //
		jField<::java::lang::Character$UnicodeBlock>("RUMI_NUMERAL_SYMBOLS"), //
		jField<::java::lang::Character$UnicodeBlock>("RUNIC"), //
		jField<::java::lang::Character$UnicodeBlock>("SAMARITAN"), //
		jField<::java::lang::Character$UnicodeBlock>("SAURASHTRA"), //
		jField<::java::lang::Character$UnicodeBlock>("SHARADA"), //
		jField<::java::lang::Character$UnicodeBlock>("SHAVIAN"), //
		jField<::java::lang::Character$UnicodeBlock>("SINHALA"), //
		jField<::java::lang::Character$UnicodeBlock>("SMALL_FORM_VARIANTS"), //
		jField<::java::lang::Character$UnicodeBlock>("SORA_SOMPENG"), //
		jField<::java::lang::Character$UnicodeBlock>("SPACING_MODIFIER_LETTERS"), //
		jField<::java::lang::Character$UnicodeBlock>("SPECIALS"), //
		jField<::java::lang::Character$UnicodeBlock>("SUNDANESE"), //
		jField<::java::lang::Character$UnicodeBlock>("SUNDANESE_SUPPLEMENT"), //
		jField<::java::lang::Character$UnicodeBlock>("SUPERSCRIPTS_AND_SUBSCRIPTS"), //
		jField<::java::lang::Character$UnicodeBlock>("SUPPLEMENTAL_ARROWS_A"), //
		jField<::java::lang::Character$UnicodeBlock>("SUPPLEMENTAL_ARROWS_B"), //
		jField<::java::lang::Character$UnicodeBlock>("SUPPLEMENTAL_MATHEMATICAL_OPERATORS"), //
		jField<::java::lang::Character$UnicodeBlock>("SUPPLEMENTAL_PUNCTUATION"), //
		jField<::java::lang::Character$UnicodeBlock>("SUPPLEMENTARY_PRIVATE_USE_AREA_A"), //
		jField<::java::lang::Character$UnicodeBlock>("SUPPLEMENTARY_PRIVATE_USE_AREA_B"), //
		jField<::java::lang::Character$UnicodeBlock>("SYLOTI_NAGRI"), //
		jField<::java::lang::Character$UnicodeBlock>("SYRIAC"), //
		jField<::java::lang::Character$UnicodeBlock>("TAGALOG"), //
		jField<::java::lang::Character$UnicodeBlock>("TAGBANWA"), //
		jField<::java::lang::Character$UnicodeBlock>("TAGS"), //
		jField<::java::lang::Character$UnicodeBlock>("TAI_LE"), //
		jField<::java::lang::Character$UnicodeBlock>("TAI_THAM"), //
		jField<::java::lang::Character$UnicodeBlock>("TAI_VIET"), //
		jField<::java::lang::Character$UnicodeBlock>("TAI_XUAN_JING_SYMBOLS"), //
		jField<::java::lang::Character$UnicodeBlock>("TAKRI"), //
		jField<::java::lang::Character$UnicodeBlock>("TAMIL"), //
		jField<::java::lang::Character$UnicodeBlock>("TELUGU"), //
		jField<::java::lang::Character$UnicodeBlock>("THAANA"), //
		jField<::java::lang::Character$UnicodeBlock>("THAI"), //
		jField<::java::lang::Character$UnicodeBlock>("TIBETAN"), //
		jField<::java::lang::Character$UnicodeBlock>("TIFINAGH"), //
		jField<::java::lang::Character$UnicodeBlock>("TRANSPORT_AND_MAP_SYMBOLS"), //
		jField<::java::lang::Character$UnicodeBlock>("UGARITIC"), //
		jField<::java::lang::Character$UnicodeBlock>("UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS"), //
		jField<::java::lang::Character$UnicodeBlock>("UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED"), //
		jField<::java::lang::Character$UnicodeBlock>("VAI"), //
		jField<::java::lang::Character$UnicodeBlock>("VARIATION_SELECTORS"), //
		jField<::java::lang::Character$UnicodeBlock>("VARIATION_SELECTORS_SUPPLEMENT"), //
		jField<::java::lang::Character$UnicodeBlock>("VEDIC_EXTENSIONS"), //
		jField<::java::lang::Character$UnicodeBlock>("VERTICAL_FORMS"), //
		jField<::java::lang::Character$UnicodeBlock>("YIJING_HEXAGRAM_SYMBOLS"), //
		jField<::java::lang::Character$UnicodeBlock>("YI_RADICALS"), //
		jField<::java::lang::Character$UnicodeBlock>("YI_SYLLABLES"), //
	};

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto AEGEAN_NUMBERS() {
		static_assert(field_signatures[jField<F>("AEGEAN_NUMBERS")] != -1);
		return sat<F>("AEGEAN_NUMBERS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto ALCHEMICAL_SYMBOLS() {
		static_assert(field_signatures[jField<F>("ALCHEMICAL_SYMBOLS")] != -1);
		return sat<F>("ALCHEMICAL_SYMBOLS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto ALPHABETIC_PRESENTATION_FORMS() {
		static_assert(field_signatures[jField<F>("ALPHABETIC_PRESENTATION_FORMS")] != -1);
		return sat<F>("ALPHABETIC_PRESENTATION_FORMS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto ANCIENT_GREEK_MUSICAL_NOTATION() {
		static_assert(field_signatures[jField<F>("ANCIENT_GREEK_MUSICAL_NOTATION")] != -1);
		return sat<F>("ANCIENT_GREEK_MUSICAL_NOTATION");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto ANCIENT_GREEK_NUMBERS() {
		static_assert(field_signatures[jField<F>("ANCIENT_GREEK_NUMBERS")] != -1);
		return sat<F>("ANCIENT_GREEK_NUMBERS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto ANCIENT_SYMBOLS() {
		static_assert(field_signatures[jField<F>("ANCIENT_SYMBOLS")] != -1);
		return sat<F>("ANCIENT_SYMBOLS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto ARABIC() {
		static_assert(field_signatures[jField<F>("ARABIC")] != -1);
		return sat<F>("ARABIC");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto ARABIC_EXTENDED_A() {
		static_assert(field_signatures[jField<F>("ARABIC_EXTENDED_A")] != -1);
		return sat<F>("ARABIC_EXTENDED_A");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS() {
		static_assert(field_signatures[jField<F>("ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS")] != -1);
		return sat<F>("ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto ARABIC_PRESENTATION_FORMS_A() {
		static_assert(field_signatures[jField<F>("ARABIC_PRESENTATION_FORMS_A")] != -1);
		return sat<F>("ARABIC_PRESENTATION_FORMS_A");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto ARABIC_PRESENTATION_FORMS_B() {
		static_assert(field_signatures[jField<F>("ARABIC_PRESENTATION_FORMS_B")] != -1);
		return sat<F>("ARABIC_PRESENTATION_FORMS_B");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto ARABIC_SUPPLEMENT() {
		static_assert(field_signatures[jField<F>("ARABIC_SUPPLEMENT")] != -1);
		return sat<F>("ARABIC_SUPPLEMENT");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto ARMENIAN() {
		static_assert(field_signatures[jField<F>("ARMENIAN")] != -1);
		return sat<F>("ARMENIAN");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto ARROWS() {
		static_assert(field_signatures[jField<F>("ARROWS")] != -1);
		return sat<F>("ARROWS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto AVESTAN() {
		static_assert(field_signatures[jField<F>("AVESTAN")] != -1);
		return sat<F>("AVESTAN");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto BALINESE() {
		static_assert(field_signatures[jField<F>("BALINESE")] != -1);
		return sat<F>("BALINESE");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto BAMUM() {
		static_assert(field_signatures[jField<F>("BAMUM")] != -1);
		return sat<F>("BAMUM");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto BAMUM_SUPPLEMENT() {
		static_assert(field_signatures[jField<F>("BAMUM_SUPPLEMENT")] != -1);
		return sat<F>("BAMUM_SUPPLEMENT");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto BASIC_LATIN() {
		static_assert(field_signatures[jField<F>("BASIC_LATIN")] != -1);
		return sat<F>("BASIC_LATIN");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto BATAK() {
		static_assert(field_signatures[jField<F>("BATAK")] != -1);
		return sat<F>("BATAK");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto BENGALI() {
		static_assert(field_signatures[jField<F>("BENGALI")] != -1);
		return sat<F>("BENGALI");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto BLOCK_ELEMENTS() {
		static_assert(field_signatures[jField<F>("BLOCK_ELEMENTS")] != -1);
		return sat<F>("BLOCK_ELEMENTS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto BOPOMOFO() {
		static_assert(field_signatures[jField<F>("BOPOMOFO")] != -1);
		return sat<F>("BOPOMOFO");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto BOPOMOFO_EXTENDED() {
		static_assert(field_signatures[jField<F>("BOPOMOFO_EXTENDED")] != -1);
		return sat<F>("BOPOMOFO_EXTENDED");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto BOX_DRAWING() {
		static_assert(field_signatures[jField<F>("BOX_DRAWING")] != -1);
		return sat<F>("BOX_DRAWING");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto BRAHMI() {
		static_assert(field_signatures[jField<F>("BRAHMI")] != -1);
		return sat<F>("BRAHMI");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto BRAILLE_PATTERNS() {
		static_assert(field_signatures[jField<F>("BRAILLE_PATTERNS")] != -1);
		return sat<F>("BRAILLE_PATTERNS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto BUGINESE() {
		static_assert(field_signatures[jField<F>("BUGINESE")] != -1);
		return sat<F>("BUGINESE");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto BUHID() {
		static_assert(field_signatures[jField<F>("BUHID")] != -1);
		return sat<F>("BUHID");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto BYZANTINE_MUSICAL_SYMBOLS() {
		static_assert(field_signatures[jField<F>("BYZANTINE_MUSICAL_SYMBOLS")] != -1);
		return sat<F>("BYZANTINE_MUSICAL_SYMBOLS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto CARIAN() {
		static_assert(field_signatures[jField<F>("CARIAN")] != -1);
		return sat<F>("CARIAN");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto CHAKMA() {
		static_assert(field_signatures[jField<F>("CHAKMA")] != -1);
		return sat<F>("CHAKMA");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto CHAM() {
		static_assert(field_signatures[jField<F>("CHAM")] != -1);
		return sat<F>("CHAM");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto CHEROKEE() {
		static_assert(field_signatures[jField<F>("CHEROKEE")] != -1);
		return sat<F>("CHEROKEE");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto CJK_COMPATIBILITY() {
		static_assert(field_signatures[jField<F>("CJK_COMPATIBILITY")] != -1);
		return sat<F>("CJK_COMPATIBILITY");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto CJK_COMPATIBILITY_FORMS() {
		static_assert(field_signatures[jField<F>("CJK_COMPATIBILITY_FORMS")] != -1);
		return sat<F>("CJK_COMPATIBILITY_FORMS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto CJK_COMPATIBILITY_IDEOGRAPHS() {
		static_assert(field_signatures[jField<F>("CJK_COMPATIBILITY_IDEOGRAPHS")] != -1);
		return sat<F>("CJK_COMPATIBILITY_IDEOGRAPHS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT() {
		static_assert(field_signatures[jField<F>("CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT")] != -1);
		return sat<F>("CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto CJK_RADICALS_SUPPLEMENT() {
		static_assert(field_signatures[jField<F>("CJK_RADICALS_SUPPLEMENT")] != -1);
		return sat<F>("CJK_RADICALS_SUPPLEMENT");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto CJK_STROKES() {
		static_assert(field_signatures[jField<F>("CJK_STROKES")] != -1);
		return sat<F>("CJK_STROKES");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto CJK_SYMBOLS_AND_PUNCTUATION() {
		static_assert(field_signatures[jField<F>("CJK_SYMBOLS_AND_PUNCTUATION")] != -1);
		return sat<F>("CJK_SYMBOLS_AND_PUNCTUATION");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto CJK_UNIFIED_IDEOGRAPHS() {
		static_assert(field_signatures[jField<F>("CJK_UNIFIED_IDEOGRAPHS")] != -1);
		return sat<F>("CJK_UNIFIED_IDEOGRAPHS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A() {
		static_assert(field_signatures[jField<F>("CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A")] != -1);
		return sat<F>("CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B() {
		static_assert(field_signatures[jField<F>("CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B")] != -1);
		return sat<F>("CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C() {
		static_assert(field_signatures[jField<F>("CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C")] != -1);
		return sat<F>("CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D() {
		static_assert(field_signatures[jField<F>("CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D")] != -1);
		return sat<F>("CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto COMBINING_DIACRITICAL_MARKS() {
		static_assert(field_signatures[jField<F>("COMBINING_DIACRITICAL_MARKS")] != -1);
		return sat<F>("COMBINING_DIACRITICAL_MARKS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto COMBINING_DIACRITICAL_MARKS_SUPPLEMENT() {
		static_assert(field_signatures[jField<F>("COMBINING_DIACRITICAL_MARKS_SUPPLEMENT")] != -1);
		return sat<F>("COMBINING_DIACRITICAL_MARKS_SUPPLEMENT");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto COMBINING_HALF_MARKS() {
		static_assert(field_signatures[jField<F>("COMBINING_HALF_MARKS")] != -1);
		return sat<F>("COMBINING_HALF_MARKS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto COMBINING_MARKS_FOR_SYMBOLS() {
		static_assert(field_signatures[jField<F>("COMBINING_MARKS_FOR_SYMBOLS")] != -1);
		return sat<F>("COMBINING_MARKS_FOR_SYMBOLS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto COMMON_INDIC_NUMBER_FORMS() {
		static_assert(field_signatures[jField<F>("COMMON_INDIC_NUMBER_FORMS")] != -1);
		return sat<F>("COMMON_INDIC_NUMBER_FORMS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto CONTROL_PICTURES() {
		static_assert(field_signatures[jField<F>("CONTROL_PICTURES")] != -1);
		return sat<F>("CONTROL_PICTURES");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto COPTIC() {
		static_assert(field_signatures[jField<F>("COPTIC")] != -1);
		return sat<F>("COPTIC");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto COUNTING_ROD_NUMERALS() {
		static_assert(field_signatures[jField<F>("COUNTING_ROD_NUMERALS")] != -1);
		return sat<F>("COUNTING_ROD_NUMERALS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto CUNEIFORM() {
		static_assert(field_signatures[jField<F>("CUNEIFORM")] != -1);
		return sat<F>("CUNEIFORM");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto CUNEIFORM_NUMBERS_AND_PUNCTUATION() {
		static_assert(field_signatures[jField<F>("CUNEIFORM_NUMBERS_AND_PUNCTUATION")] != -1);
		return sat<F>("CUNEIFORM_NUMBERS_AND_PUNCTUATION");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto CURRENCY_SYMBOLS() {
		static_assert(field_signatures[jField<F>("CURRENCY_SYMBOLS")] != -1);
		return sat<F>("CURRENCY_SYMBOLS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto CYPRIOT_SYLLABARY() {
		static_assert(field_signatures[jField<F>("CYPRIOT_SYLLABARY")] != -1);
		return sat<F>("CYPRIOT_SYLLABARY");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto CYRILLIC() {
		static_assert(field_signatures[jField<F>("CYRILLIC")] != -1);
		return sat<F>("CYRILLIC");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto CYRILLIC_EXTENDED_A() {
		static_assert(field_signatures[jField<F>("CYRILLIC_EXTENDED_A")] != -1);
		return sat<F>("CYRILLIC_EXTENDED_A");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto CYRILLIC_EXTENDED_B() {
		static_assert(field_signatures[jField<F>("CYRILLIC_EXTENDED_B")] != -1);
		return sat<F>("CYRILLIC_EXTENDED_B");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto CYRILLIC_SUPPLEMENTARY() {
		static_assert(field_signatures[jField<F>("CYRILLIC_SUPPLEMENTARY")] != -1);
		return sat<F>("CYRILLIC_SUPPLEMENTARY");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto DESERET() {
		static_assert(field_signatures[jField<F>("DESERET")] != -1);
		return sat<F>("DESERET");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto DEVANAGARI() {
		static_assert(field_signatures[jField<F>("DEVANAGARI")] != -1);
		return sat<F>("DEVANAGARI");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto DEVANAGARI_EXTENDED() {
		static_assert(field_signatures[jField<F>("DEVANAGARI_EXTENDED")] != -1);
		return sat<F>("DEVANAGARI_EXTENDED");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto DINGBATS() {
		static_assert(field_signatures[jField<F>("DINGBATS")] != -1);
		return sat<F>("DINGBATS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto DOMINO_TILES() {
		static_assert(field_signatures[jField<F>("DOMINO_TILES")] != -1);
		return sat<F>("DOMINO_TILES");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto EGYPTIAN_HIEROGLYPHS() {
		static_assert(field_signatures[jField<F>("EGYPTIAN_HIEROGLYPHS")] != -1);
		return sat<F>("EGYPTIAN_HIEROGLYPHS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto EMOTICONS() {
		static_assert(field_signatures[jField<F>("EMOTICONS")] != -1);
		return sat<F>("EMOTICONS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto ENCLOSED_ALPHANUMERICS() {
		static_assert(field_signatures[jField<F>("ENCLOSED_ALPHANUMERICS")] != -1);
		return sat<F>("ENCLOSED_ALPHANUMERICS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto ENCLOSED_ALPHANUMERIC_SUPPLEMENT() {
		static_assert(field_signatures[jField<F>("ENCLOSED_ALPHANUMERIC_SUPPLEMENT")] != -1);
		return sat<F>("ENCLOSED_ALPHANUMERIC_SUPPLEMENT");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto ENCLOSED_CJK_LETTERS_AND_MONTHS() {
		static_assert(field_signatures[jField<F>("ENCLOSED_CJK_LETTERS_AND_MONTHS")] != -1);
		return sat<F>("ENCLOSED_CJK_LETTERS_AND_MONTHS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto ENCLOSED_IDEOGRAPHIC_SUPPLEMENT() {
		static_assert(field_signatures[jField<F>("ENCLOSED_IDEOGRAPHIC_SUPPLEMENT")] != -1);
		return sat<F>("ENCLOSED_IDEOGRAPHIC_SUPPLEMENT");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto ETHIOPIC() {
		static_assert(field_signatures[jField<F>("ETHIOPIC")] != -1);
		return sat<F>("ETHIOPIC");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto ETHIOPIC_EXTENDED() {
		static_assert(field_signatures[jField<F>("ETHIOPIC_EXTENDED")] != -1);
		return sat<F>("ETHIOPIC_EXTENDED");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto ETHIOPIC_EXTENDED_A() {
		static_assert(field_signatures[jField<F>("ETHIOPIC_EXTENDED_A")] != -1);
		return sat<F>("ETHIOPIC_EXTENDED_A");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto ETHIOPIC_SUPPLEMENT() {
		static_assert(field_signatures[jField<F>("ETHIOPIC_SUPPLEMENT")] != -1);
		return sat<F>("ETHIOPIC_SUPPLEMENT");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto GENERAL_PUNCTUATION() {
		static_assert(field_signatures[jField<F>("GENERAL_PUNCTUATION")] != -1);
		return sat<F>("GENERAL_PUNCTUATION");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto GEOMETRIC_SHAPES() {
		static_assert(field_signatures[jField<F>("GEOMETRIC_SHAPES")] != -1);
		return sat<F>("GEOMETRIC_SHAPES");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto GEORGIAN() {
		static_assert(field_signatures[jField<F>("GEORGIAN")] != -1);
		return sat<F>("GEORGIAN");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto GEORGIAN_SUPPLEMENT() {
		static_assert(field_signatures[jField<F>("GEORGIAN_SUPPLEMENT")] != -1);
		return sat<F>("GEORGIAN_SUPPLEMENT");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto GLAGOLITIC() {
		static_assert(field_signatures[jField<F>("GLAGOLITIC")] != -1);
		return sat<F>("GLAGOLITIC");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto GOTHIC() {
		static_assert(field_signatures[jField<F>("GOTHIC")] != -1);
		return sat<F>("GOTHIC");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto GREEK() {
		static_assert(field_signatures[jField<F>("GREEK")] != -1);
		return sat<F>("GREEK");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto GREEK_EXTENDED() {
		static_assert(field_signatures[jField<F>("GREEK_EXTENDED")] != -1);
		return sat<F>("GREEK_EXTENDED");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto GUJARATI() {
		static_assert(field_signatures[jField<F>("GUJARATI")] != -1);
		return sat<F>("GUJARATI");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto GURMUKHI() {
		static_assert(field_signatures[jField<F>("GURMUKHI")] != -1);
		return sat<F>("GURMUKHI");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto HALFWIDTH_AND_FULLWIDTH_FORMS() {
		static_assert(field_signatures[jField<F>("HALFWIDTH_AND_FULLWIDTH_FORMS")] != -1);
		return sat<F>("HALFWIDTH_AND_FULLWIDTH_FORMS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto HANGUL_COMPATIBILITY_JAMO() {
		static_assert(field_signatures[jField<F>("HANGUL_COMPATIBILITY_JAMO")] != -1);
		return sat<F>("HANGUL_COMPATIBILITY_JAMO");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto HANGUL_JAMO() {
		static_assert(field_signatures[jField<F>("HANGUL_JAMO")] != -1);
		return sat<F>("HANGUL_JAMO");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto HANGUL_JAMO_EXTENDED_A() {
		static_assert(field_signatures[jField<F>("HANGUL_JAMO_EXTENDED_A")] != -1);
		return sat<F>("HANGUL_JAMO_EXTENDED_A");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto HANGUL_JAMO_EXTENDED_B() {
		static_assert(field_signatures[jField<F>("HANGUL_JAMO_EXTENDED_B")] != -1);
		return sat<F>("HANGUL_JAMO_EXTENDED_B");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto HANGUL_SYLLABLES() {
		static_assert(field_signatures[jField<F>("HANGUL_SYLLABLES")] != -1);
		return sat<F>("HANGUL_SYLLABLES");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto HANUNOO() {
		static_assert(field_signatures[jField<F>("HANUNOO")] != -1);
		return sat<F>("HANUNOO");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto HEBREW() {
		static_assert(field_signatures[jField<F>("HEBREW")] != -1);
		return sat<F>("HEBREW");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto HIGH_PRIVATE_USE_SURROGATES() {
		static_assert(field_signatures[jField<F>("HIGH_PRIVATE_USE_SURROGATES")] != -1);
		return sat<F>("HIGH_PRIVATE_USE_SURROGATES");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto HIGH_SURROGATES() {
		static_assert(field_signatures[jField<F>("HIGH_SURROGATES")] != -1);
		return sat<F>("HIGH_SURROGATES");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto HIRAGANA() {
		static_assert(field_signatures[jField<F>("HIRAGANA")] != -1);
		return sat<F>("HIRAGANA");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto IDEOGRAPHIC_DESCRIPTION_CHARACTERS() {
		static_assert(field_signatures[jField<F>("IDEOGRAPHIC_DESCRIPTION_CHARACTERS")] != -1);
		return sat<F>("IDEOGRAPHIC_DESCRIPTION_CHARACTERS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto IMPERIAL_ARAMAIC() {
		static_assert(field_signatures[jField<F>("IMPERIAL_ARAMAIC")] != -1);
		return sat<F>("IMPERIAL_ARAMAIC");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto INSCRIPTIONAL_PAHLAVI() {
		static_assert(field_signatures[jField<F>("INSCRIPTIONAL_PAHLAVI")] != -1);
		return sat<F>("INSCRIPTIONAL_PAHLAVI");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto INSCRIPTIONAL_PARTHIAN() {
		static_assert(field_signatures[jField<F>("INSCRIPTIONAL_PARTHIAN")] != -1);
		return sat<F>("INSCRIPTIONAL_PARTHIAN");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto IPA_EXTENSIONS() {
		static_assert(field_signatures[jField<F>("IPA_EXTENSIONS")] != -1);
		return sat<F>("IPA_EXTENSIONS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto JAVANESE() {
		static_assert(field_signatures[jField<F>("JAVANESE")] != -1);
		return sat<F>("JAVANESE");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto KAITHI() {
		static_assert(field_signatures[jField<F>("KAITHI")] != -1);
		return sat<F>("KAITHI");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto KANA_SUPPLEMENT() {
		static_assert(field_signatures[jField<F>("KANA_SUPPLEMENT")] != -1);
		return sat<F>("KANA_SUPPLEMENT");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto KANBUN() {
		static_assert(field_signatures[jField<F>("KANBUN")] != -1);
		return sat<F>("KANBUN");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto KANGXI_RADICALS() {
		static_assert(field_signatures[jField<F>("KANGXI_RADICALS")] != -1);
		return sat<F>("KANGXI_RADICALS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto KANNADA() {
		static_assert(field_signatures[jField<F>("KANNADA")] != -1);
		return sat<F>("KANNADA");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto KATAKANA() {
		static_assert(field_signatures[jField<F>("KATAKANA")] != -1);
		return sat<F>("KATAKANA");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto KATAKANA_PHONETIC_EXTENSIONS() {
		static_assert(field_signatures[jField<F>("KATAKANA_PHONETIC_EXTENSIONS")] != -1);
		return sat<F>("KATAKANA_PHONETIC_EXTENSIONS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto KAYAH_LI() {
		static_assert(field_signatures[jField<F>("KAYAH_LI")] != -1);
		return sat<F>("KAYAH_LI");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto KHAROSHTHI() {
		static_assert(field_signatures[jField<F>("KHAROSHTHI")] != -1);
		return sat<F>("KHAROSHTHI");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto KHMER() {
		static_assert(field_signatures[jField<F>("KHMER")] != -1);
		return sat<F>("KHMER");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto KHMER_SYMBOLS() {
		static_assert(field_signatures[jField<F>("KHMER_SYMBOLS")] != -1);
		return sat<F>("KHMER_SYMBOLS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto LAO() {
		static_assert(field_signatures[jField<F>("LAO")] != -1);
		return sat<F>("LAO");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto LATIN_1_SUPPLEMENT() {
		static_assert(field_signatures[jField<F>("LATIN_1_SUPPLEMENT")] != -1);
		return sat<F>("LATIN_1_SUPPLEMENT");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto LATIN_EXTENDED_A() {
		static_assert(field_signatures[jField<F>("LATIN_EXTENDED_A")] != -1);
		return sat<F>("LATIN_EXTENDED_A");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto LATIN_EXTENDED_ADDITIONAL() {
		static_assert(field_signatures[jField<F>("LATIN_EXTENDED_ADDITIONAL")] != -1);
		return sat<F>("LATIN_EXTENDED_ADDITIONAL");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto LATIN_EXTENDED_B() {
		static_assert(field_signatures[jField<F>("LATIN_EXTENDED_B")] != -1);
		return sat<F>("LATIN_EXTENDED_B");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto LATIN_EXTENDED_C() {
		static_assert(field_signatures[jField<F>("LATIN_EXTENDED_C")] != -1);
		return sat<F>("LATIN_EXTENDED_C");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto LATIN_EXTENDED_D() {
		static_assert(field_signatures[jField<F>("LATIN_EXTENDED_D")] != -1);
		return sat<F>("LATIN_EXTENDED_D");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto LEPCHA() {
		static_assert(field_signatures[jField<F>("LEPCHA")] != -1);
		return sat<F>("LEPCHA");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto LETTERLIKE_SYMBOLS() {
		static_assert(field_signatures[jField<F>("LETTERLIKE_SYMBOLS")] != -1);
		return sat<F>("LETTERLIKE_SYMBOLS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto LIMBU() {
		static_assert(field_signatures[jField<F>("LIMBU")] != -1);
		return sat<F>("LIMBU");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto LINEAR_B_IDEOGRAMS() {
		static_assert(field_signatures[jField<F>("LINEAR_B_IDEOGRAMS")] != -1);
		return sat<F>("LINEAR_B_IDEOGRAMS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto LINEAR_B_SYLLABARY() {
		static_assert(field_signatures[jField<F>("LINEAR_B_SYLLABARY")] != -1);
		return sat<F>("LINEAR_B_SYLLABARY");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto LISU() {
		static_assert(field_signatures[jField<F>("LISU")] != -1);
		return sat<F>("LISU");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto LOW_SURROGATES() {
		static_assert(field_signatures[jField<F>("LOW_SURROGATES")] != -1);
		return sat<F>("LOW_SURROGATES");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto LYCIAN() {
		static_assert(field_signatures[jField<F>("LYCIAN")] != -1);
		return sat<F>("LYCIAN");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto LYDIAN() {
		static_assert(field_signatures[jField<F>("LYDIAN")] != -1);
		return sat<F>("LYDIAN");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto MAHJONG_TILES() {
		static_assert(field_signatures[jField<F>("MAHJONG_TILES")] != -1);
		return sat<F>("MAHJONG_TILES");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto MALAYALAM() {
		static_assert(field_signatures[jField<F>("MALAYALAM")] != -1);
		return sat<F>("MALAYALAM");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto MANDAIC() {
		static_assert(field_signatures[jField<F>("MANDAIC")] != -1);
		return sat<F>("MANDAIC");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto MATHEMATICAL_ALPHANUMERIC_SYMBOLS() {
		static_assert(field_signatures[jField<F>("MATHEMATICAL_ALPHANUMERIC_SYMBOLS")] != -1);
		return sat<F>("MATHEMATICAL_ALPHANUMERIC_SYMBOLS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto MATHEMATICAL_OPERATORS() {
		static_assert(field_signatures[jField<F>("MATHEMATICAL_OPERATORS")] != -1);
		return sat<F>("MATHEMATICAL_OPERATORS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto MEETEI_MAYEK() {
		static_assert(field_signatures[jField<F>("MEETEI_MAYEK")] != -1);
		return sat<F>("MEETEI_MAYEK");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto MEETEI_MAYEK_EXTENSIONS() {
		static_assert(field_signatures[jField<F>("MEETEI_MAYEK_EXTENSIONS")] != -1);
		return sat<F>("MEETEI_MAYEK_EXTENSIONS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto MEROITIC_CURSIVE() {
		static_assert(field_signatures[jField<F>("MEROITIC_CURSIVE")] != -1);
		return sat<F>("MEROITIC_CURSIVE");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto MEROITIC_HIEROGLYPHS() {
		static_assert(field_signatures[jField<F>("MEROITIC_HIEROGLYPHS")] != -1);
		return sat<F>("MEROITIC_HIEROGLYPHS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto MIAO() {
		static_assert(field_signatures[jField<F>("MIAO")] != -1);
		return sat<F>("MIAO");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A() {
		static_assert(field_signatures[jField<F>("MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A")] != -1);
		return sat<F>("MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B() {
		static_assert(field_signatures[jField<F>("MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B")] != -1);
		return sat<F>("MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto MISCELLANEOUS_SYMBOLS() {
		static_assert(field_signatures[jField<F>("MISCELLANEOUS_SYMBOLS")] != -1);
		return sat<F>("MISCELLANEOUS_SYMBOLS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto MISCELLANEOUS_SYMBOLS_AND_ARROWS() {
		static_assert(field_signatures[jField<F>("MISCELLANEOUS_SYMBOLS_AND_ARROWS")] != -1);
		return sat<F>("MISCELLANEOUS_SYMBOLS_AND_ARROWS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS() {
		static_assert(field_signatures[jField<F>("MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS")] != -1);
		return sat<F>("MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto MISCELLANEOUS_TECHNICAL() {
		static_assert(field_signatures[jField<F>("MISCELLANEOUS_TECHNICAL")] != -1);
		return sat<F>("MISCELLANEOUS_TECHNICAL");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto MODIFIER_TONE_LETTERS() {
		static_assert(field_signatures[jField<F>("MODIFIER_TONE_LETTERS")] != -1);
		return sat<F>("MODIFIER_TONE_LETTERS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto MONGOLIAN() {
		static_assert(field_signatures[jField<F>("MONGOLIAN")] != -1);
		return sat<F>("MONGOLIAN");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto MUSICAL_SYMBOLS() {
		static_assert(field_signatures[jField<F>("MUSICAL_SYMBOLS")] != -1);
		return sat<F>("MUSICAL_SYMBOLS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto MYANMAR() {
		static_assert(field_signatures[jField<F>("MYANMAR")] != -1);
		return sat<F>("MYANMAR");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto MYANMAR_EXTENDED_A() {
		static_assert(field_signatures[jField<F>("MYANMAR_EXTENDED_A")] != -1);
		return sat<F>("MYANMAR_EXTENDED_A");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto NEW_TAI_LUE() {
		static_assert(field_signatures[jField<F>("NEW_TAI_LUE")] != -1);
		return sat<F>("NEW_TAI_LUE");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto NKO() {
		static_assert(field_signatures[jField<F>("NKO")] != -1);
		return sat<F>("NKO");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto NUMBER_FORMS() {
		static_assert(field_signatures[jField<F>("NUMBER_FORMS")] != -1);
		return sat<F>("NUMBER_FORMS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto OGHAM() {
		static_assert(field_signatures[jField<F>("OGHAM")] != -1);
		return sat<F>("OGHAM");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto OLD_ITALIC() {
		static_assert(field_signatures[jField<F>("OLD_ITALIC")] != -1);
		return sat<F>("OLD_ITALIC");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto OLD_PERSIAN() {
		static_assert(field_signatures[jField<F>("OLD_PERSIAN")] != -1);
		return sat<F>("OLD_PERSIAN");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto OLD_SOUTH_ARABIAN() {
		static_assert(field_signatures[jField<F>("OLD_SOUTH_ARABIAN")] != -1);
		return sat<F>("OLD_SOUTH_ARABIAN");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto OLD_TURKIC() {
		static_assert(field_signatures[jField<F>("OLD_TURKIC")] != -1);
		return sat<F>("OLD_TURKIC");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto OL_CHIKI() {
		static_assert(field_signatures[jField<F>("OL_CHIKI")] != -1);
		return sat<F>("OL_CHIKI");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto OPTICAL_CHARACTER_RECOGNITION() {
		static_assert(field_signatures[jField<F>("OPTICAL_CHARACTER_RECOGNITION")] != -1);
		return sat<F>("OPTICAL_CHARACTER_RECOGNITION");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto ORIYA() {
		static_assert(field_signatures[jField<F>("ORIYA")] != -1);
		return sat<F>("ORIYA");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto OSMANYA() {
		static_assert(field_signatures[jField<F>("OSMANYA")] != -1);
		return sat<F>("OSMANYA");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto PHAGS_PA() {
		static_assert(field_signatures[jField<F>("PHAGS_PA")] != -1);
		return sat<F>("PHAGS_PA");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto PHAISTOS_DISC() {
		static_assert(field_signatures[jField<F>("PHAISTOS_DISC")] != -1);
		return sat<F>("PHAISTOS_DISC");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto PHOENICIAN() {
		static_assert(field_signatures[jField<F>("PHOENICIAN")] != -1);
		return sat<F>("PHOENICIAN");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto PHONETIC_EXTENSIONS() {
		static_assert(field_signatures[jField<F>("PHONETIC_EXTENSIONS")] != -1);
		return sat<F>("PHONETIC_EXTENSIONS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto PHONETIC_EXTENSIONS_SUPPLEMENT() {
		static_assert(field_signatures[jField<F>("PHONETIC_EXTENSIONS_SUPPLEMENT")] != -1);
		return sat<F>("PHONETIC_EXTENSIONS_SUPPLEMENT");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto PLAYING_CARDS() {
		static_assert(field_signatures[jField<F>("PLAYING_CARDS")] != -1);
		return sat<F>("PLAYING_CARDS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto PRIVATE_USE_AREA() {
		static_assert(field_signatures[jField<F>("PRIVATE_USE_AREA")] != -1);
		return sat<F>("PRIVATE_USE_AREA");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto REJANG() {
		static_assert(field_signatures[jField<F>("REJANG")] != -1);
		return sat<F>("REJANG");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto RUMI_NUMERAL_SYMBOLS() {
		static_assert(field_signatures[jField<F>("RUMI_NUMERAL_SYMBOLS")] != -1);
		return sat<F>("RUMI_NUMERAL_SYMBOLS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto RUNIC() {
		static_assert(field_signatures[jField<F>("RUNIC")] != -1);
		return sat<F>("RUNIC");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto SAMARITAN() {
		static_assert(field_signatures[jField<F>("SAMARITAN")] != -1);
		return sat<F>("SAMARITAN");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto SAURASHTRA() {
		static_assert(field_signatures[jField<F>("SAURASHTRA")] != -1);
		return sat<F>("SAURASHTRA");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto SHARADA() {
		static_assert(field_signatures[jField<F>("SHARADA")] != -1);
		return sat<F>("SHARADA");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto SHAVIAN() {
		static_assert(field_signatures[jField<F>("SHAVIAN")] != -1);
		return sat<F>("SHAVIAN");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto SINHALA() {
		static_assert(field_signatures[jField<F>("SINHALA")] != -1);
		return sat<F>("SINHALA");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto SMALL_FORM_VARIANTS() {
		static_assert(field_signatures[jField<F>("SMALL_FORM_VARIANTS")] != -1);
		return sat<F>("SMALL_FORM_VARIANTS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto SORA_SOMPENG() {
		static_assert(field_signatures[jField<F>("SORA_SOMPENG")] != -1);
		return sat<F>("SORA_SOMPENG");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto SPACING_MODIFIER_LETTERS() {
		static_assert(field_signatures[jField<F>("SPACING_MODIFIER_LETTERS")] != -1);
		return sat<F>("SPACING_MODIFIER_LETTERS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto SPECIALS() {
		static_assert(field_signatures[jField<F>("SPECIALS")] != -1);
		return sat<F>("SPECIALS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto SUNDANESE() {
		static_assert(field_signatures[jField<F>("SUNDANESE")] != -1);
		return sat<F>("SUNDANESE");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto SUNDANESE_SUPPLEMENT() {
		static_assert(field_signatures[jField<F>("SUNDANESE_SUPPLEMENT")] != -1);
		return sat<F>("SUNDANESE_SUPPLEMENT");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto SUPERSCRIPTS_AND_SUBSCRIPTS() {
		static_assert(field_signatures[jField<F>("SUPERSCRIPTS_AND_SUBSCRIPTS")] != -1);
		return sat<F>("SUPERSCRIPTS_AND_SUBSCRIPTS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto SUPPLEMENTAL_ARROWS_A() {
		static_assert(field_signatures[jField<F>("SUPPLEMENTAL_ARROWS_A")] != -1);
		return sat<F>("SUPPLEMENTAL_ARROWS_A");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto SUPPLEMENTAL_ARROWS_B() {
		static_assert(field_signatures[jField<F>("SUPPLEMENTAL_ARROWS_B")] != -1);
		return sat<F>("SUPPLEMENTAL_ARROWS_B");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto SUPPLEMENTAL_MATHEMATICAL_OPERATORS() {
		static_assert(field_signatures[jField<F>("SUPPLEMENTAL_MATHEMATICAL_OPERATORS")] != -1);
		return sat<F>("SUPPLEMENTAL_MATHEMATICAL_OPERATORS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto SUPPLEMENTAL_PUNCTUATION() {
		static_assert(field_signatures[jField<F>("SUPPLEMENTAL_PUNCTUATION")] != -1);
		return sat<F>("SUPPLEMENTAL_PUNCTUATION");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto SUPPLEMENTARY_PRIVATE_USE_AREA_A() {
		static_assert(field_signatures[jField<F>("SUPPLEMENTARY_PRIVATE_USE_AREA_A")] != -1);
		return sat<F>("SUPPLEMENTARY_PRIVATE_USE_AREA_A");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto SUPPLEMENTARY_PRIVATE_USE_AREA_B() {
		static_assert(field_signatures[jField<F>("SUPPLEMENTARY_PRIVATE_USE_AREA_B")] != -1);
		return sat<F>("SUPPLEMENTARY_PRIVATE_USE_AREA_B");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto SYLOTI_NAGRI() {
		static_assert(field_signatures[jField<F>("SYLOTI_NAGRI")] != -1);
		return sat<F>("SYLOTI_NAGRI");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto SYRIAC() {
		static_assert(field_signatures[jField<F>("SYRIAC")] != -1);
		return sat<F>("SYRIAC");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto TAGALOG() {
		static_assert(field_signatures[jField<F>("TAGALOG")] != -1);
		return sat<F>("TAGALOG");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto TAGBANWA() {
		static_assert(field_signatures[jField<F>("TAGBANWA")] != -1);
		return sat<F>("TAGBANWA");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto TAGS() {
		static_assert(field_signatures[jField<F>("TAGS")] != -1);
		return sat<F>("TAGS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto TAI_LE() {
		static_assert(field_signatures[jField<F>("TAI_LE")] != -1);
		return sat<F>("TAI_LE");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto TAI_THAM() {
		static_assert(field_signatures[jField<F>("TAI_THAM")] != -1);
		return sat<F>("TAI_THAM");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto TAI_VIET() {
		static_assert(field_signatures[jField<F>("TAI_VIET")] != -1);
		return sat<F>("TAI_VIET");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto TAI_XUAN_JING_SYMBOLS() {
		static_assert(field_signatures[jField<F>("TAI_XUAN_JING_SYMBOLS")] != -1);
		return sat<F>("TAI_XUAN_JING_SYMBOLS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto TAKRI() {
		static_assert(field_signatures[jField<F>("TAKRI")] != -1);
		return sat<F>("TAKRI");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto TAMIL() {
		static_assert(field_signatures[jField<F>("TAMIL")] != -1);
		return sat<F>("TAMIL");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto TELUGU() {
		static_assert(field_signatures[jField<F>("TELUGU")] != -1);
		return sat<F>("TELUGU");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto THAANA() {
		static_assert(field_signatures[jField<F>("THAANA")] != -1);
		return sat<F>("THAANA");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto THAI() {
		static_assert(field_signatures[jField<F>("THAI")] != -1);
		return sat<F>("THAI");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto TIBETAN() {
		static_assert(field_signatures[jField<F>("TIBETAN")] != -1);
		return sat<F>("TIBETAN");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto TIFINAGH() {
		static_assert(field_signatures[jField<F>("TIFINAGH")] != -1);
		return sat<F>("TIFINAGH");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto TRANSPORT_AND_MAP_SYMBOLS() {
		static_assert(field_signatures[jField<F>("TRANSPORT_AND_MAP_SYMBOLS")] != -1);
		return sat<F>("TRANSPORT_AND_MAP_SYMBOLS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto UGARITIC() {
		static_assert(field_signatures[jField<F>("UGARITIC")] != -1);
		return sat<F>("UGARITIC");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS() {
		static_assert(field_signatures[jField<F>("UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS")] != -1);
		return sat<F>("UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED() {
		static_assert(field_signatures[jField<F>("UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED")] != -1);
		return sat<F>("UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto VAI() {
		static_assert(field_signatures[jField<F>("VAI")] != -1);
		return sat<F>("VAI");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto VARIATION_SELECTORS() {
		static_assert(field_signatures[jField<F>("VARIATION_SELECTORS")] != -1);
		return sat<F>("VARIATION_SELECTORS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto VARIATION_SELECTORS_SUPPLEMENT() {
		static_assert(field_signatures[jField<F>("VARIATION_SELECTORS_SUPPLEMENT")] != -1);
		return sat<F>("VARIATION_SELECTORS_SUPPLEMENT");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto VEDIC_EXTENSIONS() {
		static_assert(field_signatures[jField<F>("VEDIC_EXTENSIONS")] != -1);
		return sat<F>("VEDIC_EXTENSIONS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto VERTICAL_FORMS() {
		static_assert(field_signatures[jField<F>("VERTICAL_FORMS")] != -1);
		return sat<F>("VERTICAL_FORMS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto YIJING_HEXAGRAM_SYMBOLS() {
		static_assert(field_signatures[jField<F>("YIJING_HEXAGRAM_SYMBOLS")] != -1);
		return sat<F>("YIJING_HEXAGRAM_SYMBOLS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto YI_RADICALS() {
		static_assert(field_signatures[jField<F>("YI_RADICALS")] != -1);
		return sat<F>("YI_RADICALS");
	}

	template<typename F = ::java::lang::Character$UnicodeBlock>
	static auto YI_SYLLABLES() {
		static_assert(field_signatures[jField<F>("YI_SYLLABLES")] != -1);
		return sat<F>("YI_SYLLABLES");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Character$UnicodeBlock(::java::lang::String)>("forName"), //
		jMethod<::java::lang::Character$UnicodeBlock(::jchar)>("of"), //
		jMethod<::java::lang::Character$UnicodeBlock(::jint)>("of"), //
	};

	template<typename R = ::java::lang::Character$UnicodeBlock, typename... Args>
	static auto forName(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("forName")] != -1);
		return scall<R>("forName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Character$UnicodeBlock, typename... Args>
	static auto of(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("of")] != -1);
		return scall<R>("of", std::forward<Args>(args)...);
	}

};

#endif
