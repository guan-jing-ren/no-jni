#ifndef java_lang_StackTraceElement_HPP
#define java_lang_StackTraceElement_HPP

#include "../../jfwd_decl.hpp"

class ::java::lang::StackTraceElement : public jObject<::java::lang::StackTraceElement, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_lang / "StackTraceElement";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String, ::jint)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::String()>("getClassName"), //
		jMethod<::java::lang::String()>("getFileName"), //
		jMethod<::jint()>("getLineNumber"), //
		jMethod<::java::lang::String()>("getMethodName"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isNativeMethod"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getClassName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getClassName")] != -1);
		return call<R>("getClassName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFileName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFileName")] != -1);
		return call<R>("getFileName", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLineNumber(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLineNumber")] != -1);
		return call<R>("getLineNumber", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMethodName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMethodName")] != -1);
		return call<R>("getMethodName", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isNativeMethod(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isNativeMethod")] != -1);
		return call<R>("isNativeMethod", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
