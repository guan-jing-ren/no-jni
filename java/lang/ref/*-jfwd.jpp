#ifndef java_lang_ref_JPP
#define java_lang_ref_JPP

namespace java::lang::ref { class FinalReference; }
template<> constexpr auto signature<::java::lang::ref::FinalReference> = ::java_lang_ref / "FinalReference";
namespace java::lang::ref { class Finalizer; }
template<> constexpr auto signature<::java::lang::ref::Finalizer> = ::java_lang_ref / "Finalizer";
namespace java::lang::ref { class Finalizer$1; }
template<> constexpr auto signature<::java::lang::ref::Finalizer$1> = ::java_lang_ref / "Finalizer$1";
namespace java::lang::ref { class Finalizer$2; }
template<> constexpr auto signature<::java::lang::ref::Finalizer$2> = ::java_lang_ref / "Finalizer$2";
namespace java::lang::ref { class Finalizer$3; }
template<> constexpr auto signature<::java::lang::ref::Finalizer$3> = ::java_lang_ref / "Finalizer$3";
namespace java::lang::ref { class Finalizer$FinalizerThread; }
template<> constexpr auto signature<::java::lang::ref::Finalizer$FinalizerThread> = ::java_lang_ref / "Finalizer$FinalizerThread";
namespace java::lang::ref { class PhantomReference; }
template<> constexpr auto signature<::java::lang::ref::PhantomReference> = ::java_lang_ref / "PhantomReference";
namespace java::lang::ref { class Reference; }
template<> constexpr auto signature<::java::lang::ref::Reference> = ::java_lang_ref / "Reference";
namespace java::lang::ref { class Reference$1; }
template<> constexpr auto signature<::java::lang::ref::Reference$1> = ::java_lang_ref / "Reference$1";
namespace java::lang::ref { class Reference$Lock; }
template<> constexpr auto signature<::java::lang::ref::Reference$Lock> = ::java_lang_ref / "Reference$Lock";
namespace java::lang::ref { class Reference$ReferenceHandler; }
template<> constexpr auto signature<::java::lang::ref::Reference$ReferenceHandler> = ::java_lang_ref / "Reference$ReferenceHandler";
namespace java::lang::ref { class ReferenceQueue; }
template<> constexpr auto signature<::java::lang::ref::ReferenceQueue> = ::java_lang_ref / "ReferenceQueue";
namespace java::lang::ref { class ReferenceQueue$1; }
template<> constexpr auto signature<::java::lang::ref::ReferenceQueue$1> = ::java_lang_ref / "ReferenceQueue$1";
namespace java::lang::ref { class ReferenceQueue$Lock; }
template<> constexpr auto signature<::java::lang::ref::ReferenceQueue$Lock> = ::java_lang_ref / "ReferenceQueue$Lock";
namespace java::lang::ref { class ReferenceQueue$Null; }
template<> constexpr auto signature<::java::lang::ref::ReferenceQueue$Null> = ::java_lang_ref / "ReferenceQueue$Null";
namespace java::lang::ref { class SoftReference; }
template<> constexpr auto signature<::java::lang::ref::SoftReference> = ::java_lang_ref / "SoftReference";
namespace java::lang::ref { class WeakReference; }
template<> constexpr auto signature<::java::lang::ref::WeakReference> = ::java_lang_ref / "WeakReference";

#endif
