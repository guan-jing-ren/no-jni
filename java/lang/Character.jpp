#ifndef java_lang_Character_HPP
#define java_lang_Character_HPP

#include "../../jfwd_decl.hpp"

class ::java::lang::Character : public jObject<::java::lang::Character, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_lang / "Character";

	constexpr static Enume field_signatures{
		jField<::jint>("BYTES"), //
		jField<::jbyte>("COMBINING_SPACING_MARK"), //
		jField<::jbyte>("CONNECTOR_PUNCTUATION"), //
		jField<::jbyte>("CONTROL"), //
		jField<::jbyte>("CURRENCY_SYMBOL"), //
		jField<::jbyte>("DASH_PUNCTUATION"), //
		jField<::jbyte>("DECIMAL_DIGIT_NUMBER"), //
		jField<::jbyte>("DIRECTIONALITY_ARABIC_NUMBER"), //
		jField<::jbyte>("DIRECTIONALITY_BOUNDARY_NEUTRAL"), //
		jField<::jbyte>("DIRECTIONALITY_COMMON_NUMBER_SEPARATOR"), //
		jField<::jbyte>("DIRECTIONALITY_EUROPEAN_NUMBER"), //
		jField<::jbyte>("DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR"), //
		jField<::jbyte>("DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR"), //
		jField<::jbyte>("DIRECTIONALITY_LEFT_TO_RIGHT"), //
		jField<::jbyte>("DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING"), //
		jField<::jbyte>("DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE"), //
		jField<::jbyte>("DIRECTIONALITY_NONSPACING_MARK"), //
		jField<::jbyte>("DIRECTIONALITY_OTHER_NEUTRALS"), //
		jField<::jbyte>("DIRECTIONALITY_PARAGRAPH_SEPARATOR"), //
		jField<::jbyte>("DIRECTIONALITY_POP_DIRECTIONAL_FORMAT"), //
		jField<::jbyte>("DIRECTIONALITY_RIGHT_TO_LEFT"), //
		jField<::jbyte>("DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC"), //
		jField<::jbyte>("DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING"), //
		jField<::jbyte>("DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE"), //
		jField<::jbyte>("DIRECTIONALITY_SEGMENT_SEPARATOR"), //
		jField<::jbyte>("DIRECTIONALITY_UNDEFINED"), //
		jField<::jbyte>("DIRECTIONALITY_WHITESPACE"), //
		jField<::jbyte>("ENCLOSING_MARK"), //
		jField<::jbyte>("END_PUNCTUATION"), //
		jField<::jbyte>("FINAL_QUOTE_PUNCTUATION"), //
		jField<::jbyte>("FORMAT"), //
		jField<::jbyte>("INITIAL_QUOTE_PUNCTUATION"), //
		jField<::jbyte>("LETTER_NUMBER"), //
		jField<::jbyte>("LINE_SEPARATOR"), //
		jField<::jbyte>("LOWERCASE_LETTER"), //
		jField<::jbyte>("MATH_SYMBOL"), //
		jField<::jint>("MAX_CODE_POINT"), //
		jField<::jchar>("MAX_HIGH_SURROGATE"), //
		jField<::jchar>("MAX_LOW_SURROGATE"), //
		jField<::jint>("MAX_RADIX"), //
		jField<::jchar>("MAX_SURROGATE"), //
		jField<::jchar>("MAX_VALUE"), //
		jField<::jint>("MIN_CODE_POINT"), //
		jField<::jchar>("MIN_HIGH_SURROGATE"), //
		jField<::jchar>("MIN_LOW_SURROGATE"), //
		jField<::jint>("MIN_RADIX"), //
		jField<::jint>("MIN_SUPPLEMENTARY_CODE_POINT"), //
		jField<::jchar>("MIN_SURROGATE"), //
		jField<::jchar>("MIN_VALUE"), //
		jField<::jbyte>("MODIFIER_LETTER"), //
		jField<::jbyte>("MODIFIER_SYMBOL"), //
		jField<::jbyte>("NON_SPACING_MARK"), //
		jField<::jbyte>("OTHER_LETTER"), //
		jField<::jbyte>("OTHER_NUMBER"), //
		jField<::jbyte>("OTHER_PUNCTUATION"), //
		jField<::jbyte>("OTHER_SYMBOL"), //
		jField<::jbyte>("PARAGRAPH_SEPARATOR"), //
		jField<::jbyte>("PRIVATE_USE"), //
		jField<::jint>("SIZE"), //
		jField<::jbyte>("SPACE_SEPARATOR"), //
		jField<::jbyte>("START_PUNCTUATION"), //
		jField<::jbyte>("SURROGATE"), //
		jField<::jbyte>("TITLECASE_LETTER"), //
		jField<::java::lang::Class>("TYPE"), //
		jField<::jbyte>("UNASSIGNED"), //
		jField<::jbyte>("UPPERCASE_LETTER"), //
	};

	template<typename F = ::jint>
	static auto BYTES() {
		static_assert(field_signatures[jField<F>("BYTES")] != -1);
		return sat<F>("BYTES");
	}

	template<typename F = ::jbyte>
	static auto COMBINING_SPACING_MARK() {
		static_assert(field_signatures[jField<F>("COMBINING_SPACING_MARK")] != -1);
		return sat<F>("COMBINING_SPACING_MARK");
	}

	template<typename F = ::jbyte>
	static auto CONNECTOR_PUNCTUATION() {
		static_assert(field_signatures[jField<F>("CONNECTOR_PUNCTUATION")] != -1);
		return sat<F>("CONNECTOR_PUNCTUATION");
	}

	template<typename F = ::jbyte>
	static auto CONTROL() {
		static_assert(field_signatures[jField<F>("CONTROL")] != -1);
		return sat<F>("CONTROL");
	}

	template<typename F = ::jbyte>
	static auto CURRENCY_SYMBOL() {
		static_assert(field_signatures[jField<F>("CURRENCY_SYMBOL")] != -1);
		return sat<F>("CURRENCY_SYMBOL");
	}

	template<typename F = ::jbyte>
	static auto DASH_PUNCTUATION() {
		static_assert(field_signatures[jField<F>("DASH_PUNCTUATION")] != -1);
		return sat<F>("DASH_PUNCTUATION");
	}

	template<typename F = ::jbyte>
	static auto DECIMAL_DIGIT_NUMBER() {
		static_assert(field_signatures[jField<F>("DECIMAL_DIGIT_NUMBER")] != -1);
		return sat<F>("DECIMAL_DIGIT_NUMBER");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_ARABIC_NUMBER() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_ARABIC_NUMBER")] != -1);
		return sat<F>("DIRECTIONALITY_ARABIC_NUMBER");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_BOUNDARY_NEUTRAL() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_BOUNDARY_NEUTRAL")] != -1);
		return sat<F>("DIRECTIONALITY_BOUNDARY_NEUTRAL");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_COMMON_NUMBER_SEPARATOR() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_COMMON_NUMBER_SEPARATOR")] != -1);
		return sat<F>("DIRECTIONALITY_COMMON_NUMBER_SEPARATOR");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_EUROPEAN_NUMBER() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_EUROPEAN_NUMBER")] != -1);
		return sat<F>("DIRECTIONALITY_EUROPEAN_NUMBER");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR")] != -1);
		return sat<F>("DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR")] != -1);
		return sat<F>("DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_LEFT_TO_RIGHT() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_LEFT_TO_RIGHT")] != -1);
		return sat<F>("DIRECTIONALITY_LEFT_TO_RIGHT");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING")] != -1);
		return sat<F>("DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE")] != -1);
		return sat<F>("DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_NONSPACING_MARK() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_NONSPACING_MARK")] != -1);
		return sat<F>("DIRECTIONALITY_NONSPACING_MARK");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_OTHER_NEUTRALS() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_OTHER_NEUTRALS")] != -1);
		return sat<F>("DIRECTIONALITY_OTHER_NEUTRALS");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_PARAGRAPH_SEPARATOR() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_PARAGRAPH_SEPARATOR")] != -1);
		return sat<F>("DIRECTIONALITY_PARAGRAPH_SEPARATOR");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_POP_DIRECTIONAL_FORMAT() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_POP_DIRECTIONAL_FORMAT")] != -1);
		return sat<F>("DIRECTIONALITY_POP_DIRECTIONAL_FORMAT");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_RIGHT_TO_LEFT() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_RIGHT_TO_LEFT")] != -1);
		return sat<F>("DIRECTIONALITY_RIGHT_TO_LEFT");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC")] != -1);
		return sat<F>("DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING")] != -1);
		return sat<F>("DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE")] != -1);
		return sat<F>("DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_SEGMENT_SEPARATOR() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_SEGMENT_SEPARATOR")] != -1);
		return sat<F>("DIRECTIONALITY_SEGMENT_SEPARATOR");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_UNDEFINED() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_UNDEFINED")] != -1);
		return sat<F>("DIRECTIONALITY_UNDEFINED");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_WHITESPACE() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_WHITESPACE")] != -1);
		return sat<F>("DIRECTIONALITY_WHITESPACE");
	}

	template<typename F = ::jbyte>
	static auto ENCLOSING_MARK() {
		static_assert(field_signatures[jField<F>("ENCLOSING_MARK")] != -1);
		return sat<F>("ENCLOSING_MARK");
	}

	template<typename F = ::jbyte>
	static auto END_PUNCTUATION() {
		static_assert(field_signatures[jField<F>("END_PUNCTUATION")] != -1);
		return sat<F>("END_PUNCTUATION");
	}

	template<typename F = ::jbyte>
	static auto FINAL_QUOTE_PUNCTUATION() {
		static_assert(field_signatures[jField<F>("FINAL_QUOTE_PUNCTUATION")] != -1);
		return sat<F>("FINAL_QUOTE_PUNCTUATION");
	}

	template<typename F = ::jbyte>
	static auto FORMAT() {
		static_assert(field_signatures[jField<F>("FORMAT")] != -1);
		return sat<F>("FORMAT");
	}

	template<typename F = ::jbyte>
	static auto INITIAL_QUOTE_PUNCTUATION() {
		static_assert(field_signatures[jField<F>("INITIAL_QUOTE_PUNCTUATION")] != -1);
		return sat<F>("INITIAL_QUOTE_PUNCTUATION");
	}

	template<typename F = ::jbyte>
	static auto LETTER_NUMBER() {
		static_assert(field_signatures[jField<F>("LETTER_NUMBER")] != -1);
		return sat<F>("LETTER_NUMBER");
	}

	template<typename F = ::jbyte>
	static auto LINE_SEPARATOR() {
		static_assert(field_signatures[jField<F>("LINE_SEPARATOR")] != -1);
		return sat<F>("LINE_SEPARATOR");
	}

	template<typename F = ::jbyte>
	static auto LOWERCASE_LETTER() {
		static_assert(field_signatures[jField<F>("LOWERCASE_LETTER")] != -1);
		return sat<F>("LOWERCASE_LETTER");
	}

	template<typename F = ::jbyte>
	static auto MATH_SYMBOL() {
		static_assert(field_signatures[jField<F>("MATH_SYMBOL")] != -1);
		return sat<F>("MATH_SYMBOL");
	}

	template<typename F = ::jint>
	static auto MAX_CODE_POINT() {
		static_assert(field_signatures[jField<F>("MAX_CODE_POINT")] != -1);
		return sat<F>("MAX_CODE_POINT");
	}

	template<typename F = ::jchar>
	static auto MAX_HIGH_SURROGATE() {
		static_assert(field_signatures[jField<F>("MAX_HIGH_SURROGATE")] != -1);
		return sat<F>("MAX_HIGH_SURROGATE");
	}

	template<typename F = ::jchar>
	static auto MAX_LOW_SURROGATE() {
		static_assert(field_signatures[jField<F>("MAX_LOW_SURROGATE")] != -1);
		return sat<F>("MAX_LOW_SURROGATE");
	}

	template<typename F = ::jint>
	static auto MAX_RADIX() {
		static_assert(field_signatures[jField<F>("MAX_RADIX")] != -1);
		return sat<F>("MAX_RADIX");
	}

	template<typename F = ::jchar>
	static auto MAX_SURROGATE() {
		static_assert(field_signatures[jField<F>("MAX_SURROGATE")] != -1);
		return sat<F>("MAX_SURROGATE");
	}

	template<typename F = ::jchar>
	static auto MAX_VALUE() {
		static_assert(field_signatures[jField<F>("MAX_VALUE")] != -1);
		return sat<F>("MAX_VALUE");
	}

	template<typename F = ::jint>
	static auto MIN_CODE_POINT() {
		static_assert(field_signatures[jField<F>("MIN_CODE_POINT")] != -1);
		return sat<F>("MIN_CODE_POINT");
	}

	template<typename F = ::jchar>
	static auto MIN_HIGH_SURROGATE() {
		static_assert(field_signatures[jField<F>("MIN_HIGH_SURROGATE")] != -1);
		return sat<F>("MIN_HIGH_SURROGATE");
	}

	template<typename F = ::jchar>
	static auto MIN_LOW_SURROGATE() {
		static_assert(field_signatures[jField<F>("MIN_LOW_SURROGATE")] != -1);
		return sat<F>("MIN_LOW_SURROGATE");
	}

	template<typename F = ::jint>
	static auto MIN_RADIX() {
		static_assert(field_signatures[jField<F>("MIN_RADIX")] != -1);
		return sat<F>("MIN_RADIX");
	}

	template<typename F = ::jint>
	static auto MIN_SUPPLEMENTARY_CODE_POINT() {
		static_assert(field_signatures[jField<F>("MIN_SUPPLEMENTARY_CODE_POINT")] != -1);
		return sat<F>("MIN_SUPPLEMENTARY_CODE_POINT");
	}

	template<typename F = ::jchar>
	static auto MIN_SURROGATE() {
		static_assert(field_signatures[jField<F>("MIN_SURROGATE")] != -1);
		return sat<F>("MIN_SURROGATE");
	}

	template<typename F = ::jchar>
	static auto MIN_VALUE() {
		static_assert(field_signatures[jField<F>("MIN_VALUE")] != -1);
		return sat<F>("MIN_VALUE");
	}

	template<typename F = ::jbyte>
	static auto MODIFIER_LETTER() {
		static_assert(field_signatures[jField<F>("MODIFIER_LETTER")] != -1);
		return sat<F>("MODIFIER_LETTER");
	}

	template<typename F = ::jbyte>
	static auto MODIFIER_SYMBOL() {
		static_assert(field_signatures[jField<F>("MODIFIER_SYMBOL")] != -1);
		return sat<F>("MODIFIER_SYMBOL");
	}

	template<typename F = ::jbyte>
	static auto NON_SPACING_MARK() {
		static_assert(field_signatures[jField<F>("NON_SPACING_MARK")] != -1);
		return sat<F>("NON_SPACING_MARK");
	}

	template<typename F = ::jbyte>
	static auto OTHER_LETTER() {
		static_assert(field_signatures[jField<F>("OTHER_LETTER")] != -1);
		return sat<F>("OTHER_LETTER");
	}

	template<typename F = ::jbyte>
	static auto OTHER_NUMBER() {
		static_assert(field_signatures[jField<F>("OTHER_NUMBER")] != -1);
		return sat<F>("OTHER_NUMBER");
	}

	template<typename F = ::jbyte>
	static auto OTHER_PUNCTUATION() {
		static_assert(field_signatures[jField<F>("OTHER_PUNCTUATION")] != -1);
		return sat<F>("OTHER_PUNCTUATION");
	}

	template<typename F = ::jbyte>
	static auto OTHER_SYMBOL() {
		static_assert(field_signatures[jField<F>("OTHER_SYMBOL")] != -1);
		return sat<F>("OTHER_SYMBOL");
	}

	template<typename F = ::jbyte>
	static auto PARAGRAPH_SEPARATOR() {
		static_assert(field_signatures[jField<F>("PARAGRAPH_SEPARATOR")] != -1);
		return sat<F>("PARAGRAPH_SEPARATOR");
	}

	template<typename F = ::jbyte>
	static auto PRIVATE_USE() {
		static_assert(field_signatures[jField<F>("PRIVATE_USE")] != -1);
		return sat<F>("PRIVATE_USE");
	}

	template<typename F = ::jint>
	static auto SIZE() {
		static_assert(field_signatures[jField<F>("SIZE")] != -1);
		return sat<F>("SIZE");
	}

	template<typename F = ::jbyte>
	static auto SPACE_SEPARATOR() {
		static_assert(field_signatures[jField<F>("SPACE_SEPARATOR")] != -1);
		return sat<F>("SPACE_SEPARATOR");
	}

	template<typename F = ::jbyte>
	static auto START_PUNCTUATION() {
		static_assert(field_signatures[jField<F>("START_PUNCTUATION")] != -1);
		return sat<F>("START_PUNCTUATION");
	}

	template<typename F = ::jbyte>
	static auto SURROGATE() {
		static_assert(field_signatures[jField<F>("SURROGATE")] != -1);
		return sat<F>("SURROGATE");
	}

	template<typename F = ::jbyte>
	static auto TITLECASE_LETTER() {
		static_assert(field_signatures[jField<F>("TITLECASE_LETTER")] != -1);
		return sat<F>("TITLECASE_LETTER");
	}

	template<typename F = ::java::lang::Class>
	static auto TYPE() {
		static_assert(field_signatures[jField<F>("TYPE")] != -1);
		return sat<F>("TYPE");
	}

	template<typename F = ::jbyte>
	static auto UNASSIGNED() {
		static_assert(field_signatures[jField<F>("UNASSIGNED")] != -1);
		return sat<F>("UNASSIGNED");
	}

	template<typename F = ::jbyte>
	static auto UPPERCASE_LETTER() {
		static_assert(field_signatures[jField<F>("UPPERCASE_LETTER")] != -1);
		return sat<F>("UPPERCASE_LETTER");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jchar)>(), //
		jMethod<::jint(::jint)>("charCount"), //
		jMethod<::jchar()>("charValue"), //
		jMethod<::jint(::java::lang::CharSequence, ::jint)>("codePointAt"), //
		jMethod<::jint(::jchar *, ::jint)>("codePointAt"), //
		jMethod<::jint(::jchar *, ::jint, ::jint)>("codePointAt"), //
		jMethod<::jint(::java::lang::CharSequence, ::jint)>("codePointBefore"), //
		jMethod<::jint(::jchar *, ::jint)>("codePointBefore"), //
		jMethod<::jint(::jchar *, ::jint, ::jint)>("codePointBefore"), //
		jMethod<::jint(::java::lang::CharSequence, ::jint, ::jint)>("codePointCount"), //
		jMethod<::jint(::jchar *, ::jint, ::jint)>("codePointCount"), //
		jMethod<::jint(::jchar, ::jchar)>("compare"), //
		jMethod<::jint(::java::lang::Character)>("compareTo"), //
		jMethod<::jint(::java::lang::Object)>("compareTo"), //
		jMethod<::jint(::jchar, ::jint)>("digit"), //
		jMethod<::jint(::jint, ::jint)>("digit"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jchar(::jint, ::jint)>("forDigit"), //
		jMethod<::jbyte(::jchar)>("getDirectionality"), //
		jMethod<::jbyte(::jint)>("getDirectionality"), //
		jMethod<::java::lang::String(::jint)>("getName"), //
		jMethod<::jint(::jchar)>("getNumericValue"), //
		jMethod<::jint(::jint)>("getNumericValue"), //
		jMethod<::jint(::jchar)>("getType"), //
		jMethod<::jint(::jint)>("getType"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jint(::jchar)>("hashCode"), //
		jMethod<::jchar(::jint)>("highSurrogate"), //
		jMethod<::jboolean(::jint)>("isAlphabetic"), //
		jMethod<::jboolean(::jint)>("isBmpCodePoint"), //
		jMethod<::jboolean(::jchar)>("isDefined"), //
		jMethod<::jboolean(::jint)>("isDefined"), //
		jMethod<::jboolean(::jchar)>("isDigit"), //
		jMethod<::jboolean(::jint)>("isDigit"), //
		jMethod<::jboolean(::jchar)>("isHighSurrogate"), //
		jMethod<::jboolean(::jchar)>("isISOControl"), //
		jMethod<::jboolean(::jint)>("isISOControl"), //
		jMethod<::jboolean(::jchar)>("isIdentifierIgnorable"), //
		jMethod<::jboolean(::jint)>("isIdentifierIgnorable"), //
		jMethod<::jboolean(::jint)>("isIdeographic"), //
		jMethod<::jboolean(::jchar)>("isJavaIdentifierPart"), //
		jMethod<::jboolean(::jint)>("isJavaIdentifierPart"), //
		jMethod<::jboolean(::jchar)>("isJavaIdentifierStart"), //
		jMethod<::jboolean(::jint)>("isJavaIdentifierStart"), //
		jMethod<::jboolean(::jchar)>("isJavaLetter"), //
		jMethod<::jboolean(::jchar)>("isJavaLetterOrDigit"), //
		jMethod<::jboolean(::jchar)>("isLetter"), //
		jMethod<::jboolean(::jint)>("isLetter"), //
		jMethod<::jboolean(::jchar)>("isLetterOrDigit"), //
		jMethod<::jboolean(::jint)>("isLetterOrDigit"), //
		jMethod<::jboolean(::jchar)>("isLowSurrogate"), //
		jMethod<::jboolean(::jchar)>("isLowerCase"), //
		jMethod<::jboolean(::jint)>("isLowerCase"), //
		jMethod<::jboolean(::jchar)>("isMirrored"), //
		jMethod<::jboolean(::jint)>("isMirrored"), //
		jMethod<::jboolean(::jchar)>("isSpace"), //
		jMethod<::jboolean(::jchar)>("isSpaceChar"), //
		jMethod<::jboolean(::jint)>("isSpaceChar"), //
		jMethod<::jboolean(::jint)>("isSupplementaryCodePoint"), //
		jMethod<::jboolean(::jchar)>("isSurrogate"), //
		jMethod<::jboolean(::jchar, ::jchar)>("isSurrogatePair"), //
		jMethod<::jboolean(::jchar)>("isTitleCase"), //
		jMethod<::jboolean(::jint)>("isTitleCase"), //
		jMethod<::jboolean(::jchar)>("isUnicodeIdentifierPart"), //
		jMethod<::jboolean(::jint)>("isUnicodeIdentifierPart"), //
		jMethod<::jboolean(::jchar)>("isUnicodeIdentifierStart"), //
		jMethod<::jboolean(::jint)>("isUnicodeIdentifierStart"), //
		jMethod<::jboolean(::jchar)>("isUpperCase"), //
		jMethod<::jboolean(::jint)>("isUpperCase"), //
		jMethod<::jboolean(::jint)>("isValidCodePoint"), //
		jMethod<::jboolean(::jchar)>("isWhitespace"), //
		jMethod<::jboolean(::jint)>("isWhitespace"), //
		jMethod<::jchar(::jint)>("lowSurrogate"), //
		jMethod<::jint(::java::lang::CharSequence, ::jint, ::jint)>("offsetByCodePoints"), //
		jMethod<::jint(::jchar *, ::jint, ::jint, ::jint, ::jint)>("offsetByCodePoints"), //
		jMethod<::jchar(::jchar)>("reverseBytes"), //
		jMethod<::jchar *(::jint)>("toChars"), //
		jMethod<::jint(::jint, ::jchar *, ::jint)>("toChars"), //
		jMethod<::jint(::jchar, ::jchar)>("toCodePoint"), //
		jMethod<::jchar(::jchar)>("toLowerCase"), //
		jMethod<::jint(::jint)>("toLowerCase"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::lang::String(::jchar)>("toString"), //
		jMethod<::jchar(::jchar)>("toTitleCase"), //
		jMethod<::jint(::jint)>("toTitleCase"), //
		jMethod<::jchar(::jchar)>("toUpperCase"), //
		jMethod<::jint(::jint)>("toUpperCase"), //
		jMethod<::java::lang::Character(::jchar)>("valueOf"), //
	};

	template<typename R = ::jint, typename... Args>
	static auto charCount(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("charCount")] != -1);
		return scall<R>("charCount", forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto charValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("charValue")] != -1);
		return call<R>("charValue", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto codePointAt(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("codePointAt")] != -1);
		return scall<R>("codePointAt", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto codePointBefore(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("codePointBefore")] != -1);
		return scall<R>("codePointBefore", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto codePointCount(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("codePointCount")] != -1);
		return scall<R>("codePointCount", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto compare(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("compare")] != -1);
		return scall<R>("compare", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto compareTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("compareTo")] != -1);
		return call<R>("compareTo", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto digit(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("digit")] != -1);
		return scall<R>("digit", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	static auto forDigit(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("forDigit")] != -1);
		return scall<R>("forDigit", forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	static auto getDirectionality(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDirectionality")] != -1);
		return scall<R>("getDirectionality", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getName(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getName")] != -1);
		return scall<R>("getName", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getNumericValue(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNumericValue")] != -1);
		return scall<R>("getNumericValue", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getType(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getType")] != -1);
		return scall<R>("getType", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	static auto highSurrogate(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("highSurrogate")] != -1);
		return scall<R>("highSurrogate", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isAlphabetic(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isAlphabetic")] != -1);
		return scall<R>("isAlphabetic", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isBmpCodePoint(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isBmpCodePoint")] != -1);
		return scall<R>("isBmpCodePoint", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isDefined(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isDefined")] != -1);
		return scall<R>("isDefined", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isDigit(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isDigit")] != -1);
		return scall<R>("isDigit", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isHighSurrogate(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isHighSurrogate")] != -1);
		return scall<R>("isHighSurrogate", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isISOControl(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isISOControl")] != -1);
		return scall<R>("isISOControl", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isIdentifierIgnorable(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isIdentifierIgnorable")] != -1);
		return scall<R>("isIdentifierIgnorable", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isIdeographic(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isIdeographic")] != -1);
		return scall<R>("isIdeographic", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isJavaIdentifierPart(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isJavaIdentifierPart")] != -1);
		return scall<R>("isJavaIdentifierPart", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isJavaIdentifierStart(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isJavaIdentifierStart")] != -1);
		return scall<R>("isJavaIdentifierStart", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isJavaLetter(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isJavaLetter")] != -1);
		return scall<R>("isJavaLetter", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isJavaLetterOrDigit(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isJavaLetterOrDigit")] != -1);
		return scall<R>("isJavaLetterOrDigit", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isLetter(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isLetter")] != -1);
		return scall<R>("isLetter", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isLetterOrDigit(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isLetterOrDigit")] != -1);
		return scall<R>("isLetterOrDigit", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isLowSurrogate(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isLowSurrogate")] != -1);
		return scall<R>("isLowSurrogate", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isLowerCase(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isLowerCase")] != -1);
		return scall<R>("isLowerCase", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isMirrored(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isMirrored")] != -1);
		return scall<R>("isMirrored", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isSpace(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isSpace")] != -1);
		return scall<R>("isSpace", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isSpaceChar(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isSpaceChar")] != -1);
		return scall<R>("isSpaceChar", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isSupplementaryCodePoint(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isSupplementaryCodePoint")] != -1);
		return scall<R>("isSupplementaryCodePoint", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isSurrogate(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isSurrogate")] != -1);
		return scall<R>("isSurrogate", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isSurrogatePair(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isSurrogatePair")] != -1);
		return scall<R>("isSurrogatePair", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isTitleCase(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isTitleCase")] != -1);
		return scall<R>("isTitleCase", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isUnicodeIdentifierPart(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isUnicodeIdentifierPart")] != -1);
		return scall<R>("isUnicodeIdentifierPart", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isUnicodeIdentifierStart(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isUnicodeIdentifierStart")] != -1);
		return scall<R>("isUnicodeIdentifierStart", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isUpperCase(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isUpperCase")] != -1);
		return scall<R>("isUpperCase", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isValidCodePoint(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isValidCodePoint")] != -1);
		return scall<R>("isValidCodePoint", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isWhitespace(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isWhitespace")] != -1);
		return scall<R>("isWhitespace", forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	static auto lowSurrogate(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("lowSurrogate")] != -1);
		return scall<R>("lowSurrogate", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto offsetByCodePoints(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("offsetByCodePoints")] != -1);
		return scall<R>("offsetByCodePoints", forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	static auto reverseBytes(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reverseBytes")] != -1);
		return scall<R>("reverseBytes", forward<Args>(args)...);
	}

	template<typename R = ::jchar *, typename... Args>
	static auto toChars(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toChars")] != -1);
		return scall<R>("toChars", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto toCodePoint(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toCodePoint")] != -1);
		return scall<R>("toCodePoint", forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	static auto toLowerCase(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toLowerCase")] != -1);
		return scall<R>("toLowerCase", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	static auto toTitleCase(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toTitleCase")] != -1);
		return scall<R>("toTitleCase", forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	static auto toUpperCase(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toUpperCase")] != -1);
		return scall<R>("toUpperCase", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Character, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", forward<Args>(args)...);
	}

};

#endif
