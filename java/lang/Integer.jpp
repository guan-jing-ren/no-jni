#ifndef java_lang_Integer_HPP
#define java_lang_Integer_HPP

#include "../../jfwd_decl.hpp"

class ::java::lang::Integer : public jObject<::java::lang::Integer, ::java::lang::Number> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_lang / "Integer";

	constexpr static Enume field_signatures{
		jField<::jint>("BYTES"), //
		jField<::jint>("MAX_VALUE"), //
		jField<::jint>("MIN_VALUE"), //
		jField<::jint>("SIZE"), //
		jField<::java::lang::Class>("TYPE"), //
	};

	template<typename F = ::jint>
	static auto BYTES() {
		static_assert(field_signatures[jField<F>("BYTES")] != -1);
		return sat<F>("BYTES");
	}

	template<typename F = ::jint>
	static auto MAX_VALUE() {
		static_assert(field_signatures[jField<F>("MAX_VALUE")] != -1);
		return sat<F>("MAX_VALUE");
	}

	template<typename F = ::jint>
	static auto MIN_VALUE() {
		static_assert(field_signatures[jField<F>("MIN_VALUE")] != -1);
		return sat<F>("MIN_VALUE");
	}

	template<typename F = ::jint>
	static auto SIZE() {
		static_assert(field_signatures[jField<F>("SIZE")] != -1);
		return sat<F>("SIZE");
	}

	template<typename F = ::java::lang::Class>
	static auto TYPE() {
		static_assert(field_signatures[jField<F>("TYPE")] != -1);
		return sat<F>("TYPE");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint)>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jMethod<::jint(::jint)>("bitCount"), //
		jMethod<::jbyte()>("byteValue"), //
		jMethod<::jint(::jint, ::jint)>("compare"), //
		jMethod<::jint(::java::lang::Integer)>("compareTo"), //
		jMethod<::jint(::java::lang::Object)>("compareTo"), //
		jMethod<::jint(::jint, ::jint)>("compareUnsigned"), //
		jMethod<::java::lang::Integer(::java::lang::String)>("decode"), //
		jMethod<::jint(::jint, ::jint)>("divideUnsigned"), //
		jMethod<::jdouble()>("doubleValue"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jfloat()>("floatValue"), //
		jMethod<::java::lang::Integer(::java::lang::String)>("getInteger"), //
		jMethod<::java::lang::Integer(::java::lang::String, ::jint)>("getInteger"), //
		jMethod<::java::lang::Integer(::java::lang::String, ::java::lang::Integer)>("getInteger"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jint(::jint)>("hashCode"), //
		jMethod<::jint(::jint)>("highestOneBit"), //
		jMethod<::jint()>("intValue"), //
		jMethod<::jlong()>("longValue"), //
		jMethod<::jint(::jint)>("lowestOneBit"), //
		jMethod<::jint(::jint, ::jint)>("max"), //
		jMethod<::jint(::jint, ::jint)>("min"), //
		jMethod<::jint(::jint)>("numberOfLeadingZeros"), //
		jMethod<::jint(::jint)>("numberOfTrailingZeros"), //
		jMethod<::jint(::java::lang::String)>("parseInt"), //
		jMethod<::jint(::java::lang::String, ::jint)>("parseInt"), //
		jMethod<::jint(::java::lang::String)>("parseUnsignedInt"), //
		jMethod<::jint(::java::lang::String, ::jint)>("parseUnsignedInt"), //
		jMethod<::jint(::jint, ::jint)>("remainderUnsigned"), //
		jMethod<::jint(::jint)>("reverse"), //
		jMethod<::jint(::jint)>("reverseBytes"), //
		jMethod<::jint(::jint, ::jint)>("rotateLeft"), //
		jMethod<::jint(::jint, ::jint)>("rotateRight"), //
		jMethod<::jshort()>("shortValue"), //
		jMethod<::jint(::jint)>("signum"), //
		jMethod<::jint(::jint, ::jint)>("sum"), //
		jMethod<::java::lang::String(::jint)>("toBinaryString"), //
		jMethod<::java::lang::String(::jint)>("toHexString"), //
		jMethod<::java::lang::String(::jint)>("toOctalString"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::lang::String(::jint)>("toString"), //
		jMethod<::java::lang::String(::jint, ::jint)>("toString"), //
		jMethod<::jlong(::jint)>("toUnsignedLong"), //
		jMethod<::java::lang::String(::jint)>("toUnsignedString"), //
		jMethod<::java::lang::String(::jint, ::jint)>("toUnsignedString"), //
		jMethod<::java::lang::Integer(::jint)>("valueOf"), //
		jMethod<::java::lang::Integer(::java::lang::String)>("valueOf"), //
		jMethod<::java::lang::Integer(::java::lang::String, ::jint)>("valueOf"), //
	};

	template<typename R = ::jint, typename... Args>
	static auto bitCount(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("bitCount")] != -1);
		return scall<R>("bitCount", forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto byteValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("byteValue")] != -1);
		return call<R>("byteValue", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto compare(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("compare")] != -1);
		return scall<R>("compare", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto compareTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("compareTo")] != -1);
		return call<R>("compareTo", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto compareUnsigned(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("compareUnsigned")] != -1);
		return scall<R>("compareUnsigned", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Integer, typename... Args>
	static auto decode(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("decode")] != -1);
		return scall<R>("decode", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto divideUnsigned(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("divideUnsigned")] != -1);
		return scall<R>("divideUnsigned", forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto doubleValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("doubleValue")] != -1);
		return call<R>("doubleValue", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto floatValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("floatValue")] != -1);
		return call<R>("floatValue", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Integer, typename... Args>
	static auto getInteger(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInteger")] != -1);
		return scall<R>("getInteger", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto highestOneBit(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("highestOneBit")] != -1);
		return scall<R>("highestOneBit", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto intValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("intValue")] != -1);
		return call<R>("intValue", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto longValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("longValue")] != -1);
		return call<R>("longValue", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto lowestOneBit(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("lowestOneBit")] != -1);
		return scall<R>("lowestOneBit", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto max(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("max")] != -1);
		return scall<R>("max", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto min(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("min")] != -1);
		return scall<R>("min", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto numberOfLeadingZeros(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("numberOfLeadingZeros")] != -1);
		return scall<R>("numberOfLeadingZeros", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto numberOfTrailingZeros(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("numberOfTrailingZeros")] != -1);
		return scall<R>("numberOfTrailingZeros", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto parseInt(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("parseInt")] != -1);
		return scall<R>("parseInt", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto parseUnsignedInt(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("parseUnsignedInt")] != -1);
		return scall<R>("parseUnsignedInt", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto remainderUnsigned(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("remainderUnsigned")] != -1);
		return scall<R>("remainderUnsigned", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto reverse(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reverse")] != -1);
		return scall<R>("reverse", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto reverseBytes(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reverseBytes")] != -1);
		return scall<R>("reverseBytes", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto rotateLeft(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("rotateLeft")] != -1);
		return scall<R>("rotateLeft", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto rotateRight(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("rotateRight")] != -1);
		return scall<R>("rotateRight", forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto shortValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("shortValue")] != -1);
		return call<R>("shortValue", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto signum(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("signum")] != -1);
		return scall<R>("signum", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto sum(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("sum")] != -1);
		return scall<R>("sum", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto toBinaryString(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toBinaryString")] != -1);
		return scall<R>("toBinaryString", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto toHexString(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toHexString")] != -1);
		return scall<R>("toHexString", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto toOctalString(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toOctalString")] != -1);
		return scall<R>("toOctalString", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	static auto toUnsignedLong(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toUnsignedLong")] != -1);
		return scall<R>("toUnsignedLong", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto toUnsignedString(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toUnsignedString")] != -1);
		return scall<R>("toUnsignedString", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Integer, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", forward<Args>(args)...);
	}

};

#endif
