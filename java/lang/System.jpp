#ifndef java_lang_System_HPP
#define java_lang_System_HPP

#include "../../jfwd_decl.hpp"

class ::java::lang::System : public jObject<::java::lang::System, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_lang / "System";

	constexpr static Enume field_signatures{
		jField<::java::io::PrintStream>("err"), //
		jField<::java::io::InputStream>("in"), //
		jField<::java::io::PrintStream>("out"), //
	};

	template<typename F = ::java::io::PrintStream>
	static auto err() {
		static_assert(field_signatures[jField<F>("err")] != -1);
		return sat<F>("err");
	}

	template<typename F = ::java::io::InputStream>
	static auto in() {
		static_assert(field_signatures[jField<F>("in")] != -1);
		return sat<F>("in");
	}

	template<typename F = ::java::io::PrintStream>
	static auto out() {
		static_assert(field_signatures[jField<F>("out")] != -1);
		return sat<F>("out");
	}

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::lang::Object, ::jint, ::java::lang::Object, ::jint, ::jint)>("arraycopy"), //
		jMethod<::java::lang::String(::java::lang::String)>("clearProperty"), //
		jMethod<::java::io::Console()>("console"), //
		jMethod<::jlong()>("currentTimeMillis"), //
		jMethod<::jvoid(::jint)>("exit"), //
		jMethod<::jvoid()>("gc"), //
		jMethod<::java::util::Properties()>("getProperties"), //
		jMethod<::java::lang::String(::java::lang::String)>("getProperty"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::lang::String)>("getProperty"), //
		jMethod<::java::lang::SecurityManager()>("getSecurityManager"), //
		jMethod<::java::util::Map()>("getenv"), //
		jMethod<::java::lang::String(::java::lang::String)>("getenv"), //
		jMethod<::jint(::java::lang::Object)>("identityHashCode"), //
		jMethod<::java::nio::channels::Channel()>("inheritedChannel"), //
		jMethod<::java::lang::String()>("lineSeparator"), //
		jMethod<::jvoid(::java::lang::String)>("load"), //
		jMethod<::jvoid(::java::lang::String)>("loadLibrary"), //
		jMethod<::java::lang::String(::java::lang::String)>("mapLibraryName"), //
		jMethod<::jlong()>("nanoTime"), //
		jMethod<::jvoid()>("runFinalization"), //
		jMethod<::jvoid(::jboolean)>("runFinalizersOnExit"), //
		jMethod<::jvoid(::java::io::PrintStream)>("setErr"), //
		jMethod<::jvoid(::java::io::InputStream)>("setIn"), //
		jMethod<::jvoid(::java::io::PrintStream)>("setOut"), //
		jMethod<::jvoid(::java::util::Properties)>("setProperties"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::lang::String)>("setProperty"), //
		jMethod<::jvoid(::java::lang::SecurityManager)>("setSecurityManager"), //
	};

	template<typename R = ::jvoid, typename... Args>
	static auto arraycopy(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("arraycopy")] != -1);
		return scall<R>("arraycopy", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto clearProperty(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clearProperty")] != -1);
		return scall<R>("clearProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::Console, typename... Args>
	static auto console(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("console")] != -1);
		return scall<R>("console", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	static auto currentTimeMillis(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("currentTimeMillis")] != -1);
		return scall<R>("currentTimeMillis", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto exit(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("exit")] != -1);
		return scall<R>("exit", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto gc(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("gc")] != -1);
		return scall<R>("gc", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Properties, typename... Args>
	static auto getProperties(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProperties")] != -1);
		return scall<R>("getProperties", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getProperty(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProperty")] != -1);
		return scall<R>("getProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::SecurityManager, typename... Args>
	static auto getSecurityManager(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSecurityManager")] != -1);
		return scall<R>("getSecurityManager", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	static auto getenv(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getenv")] != -1);
		return scall<R>("getenv", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto identityHashCode(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("identityHashCode")] != -1);
		return scall<R>("identityHashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::Channel, typename... Args>
	static auto inheritedChannel(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("inheritedChannel")] != -1);
		return scall<R>("inheritedChannel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto lineSeparator(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lineSeparator")] != -1);
		return scall<R>("lineSeparator", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto load(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("load")] != -1);
		return scall<R>("load", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto loadLibrary(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("loadLibrary")] != -1);
		return scall<R>("loadLibrary", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto mapLibraryName(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mapLibraryName")] != -1);
		return scall<R>("mapLibraryName", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	static auto nanoTime(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nanoTime")] != -1);
		return scall<R>("nanoTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto runFinalization(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("runFinalization")] != -1);
		return scall<R>("runFinalization", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto runFinalizersOnExit(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("runFinalizersOnExit")] != -1);
		return scall<R>("runFinalizersOnExit", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setErr(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setErr")] != -1);
		return scall<R>("setErr", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setIn(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIn")] != -1);
		return scall<R>("setIn", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setOut(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOut")] != -1);
		return scall<R>("setOut", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setProperties(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setProperties")] != -1);
		return scall<R>("setProperties", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto setProperty(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setProperty")] != -1);
		return scall<R>("setProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setSecurityManager(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSecurityManager")] != -1);
		return scall<R>("setSecurityManager", std::forward<Args>(args)...);
	}

};

#endif
