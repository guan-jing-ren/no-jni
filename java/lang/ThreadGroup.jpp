#ifndef java_lang_ThreadGroup_HPP
#define java_lang_ThreadGroup_HPP

#include "../../jfwd_decl.hpp"

class ::java::lang::ThreadGroup : public jObject<::java::lang::ThreadGroup, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_lang / "ThreadGroup";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::ThreadGroup, ::java::lang::String)>(), //
		jMethod<::jint()>("activeCount"), //
		jMethod<::jint()>("activeGroupCount"), //
		jMethod<::jvoid()>("checkAccess"), //
		jMethod<::jvoid()>("destroy"), //
		jMethod<::jint(::java::lang::Thread *)>("enumerate"), //
		jMethod<::jint(::java::lang::Thread *, ::jboolean)>("enumerate"), //
		jMethod<::jint(::java::lang::ThreadGroup *)>("enumerate"), //
		jMethod<::jint(::java::lang::ThreadGroup *, ::jboolean)>("enumerate"), //
		jMethod<::jint()>("getMaxPriority"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::lang::ThreadGroup()>("getParent"), //
		jMethod<::jvoid()>("interrupt"), //
		jMethod<::jboolean()>("isDaemon"), //
		jMethod<::jboolean()>("isDestroyed"), //
		jMethod<::jvoid()>("list"), //
		jMethod<::jboolean(::java::lang::ThreadGroup)>("parentOf"), //
		jMethod<::jvoid(::jboolean)>("setDaemon"), //
		jMethod<::jvoid(::jint)>("setMaxPriority"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid(::java::lang::Thread, ::java::lang::Throwable)>("uncaughtException"), //
	};

	template<typename R = ::jint, typename... Args>
	auto activeCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("activeCount")] != -1);
		return call<R>("activeCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto activeGroupCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("activeGroupCount")] != -1);
		return call<R>("activeGroupCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto checkAccess(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkAccess")] != -1);
		return call<R>("checkAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto destroy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("destroy")] != -1);
		return call<R>("destroy", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto enumerate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("enumerate")] != -1);
		return call<R>("enumerate", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxPriority(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaxPriority")] != -1);
		return call<R>("getMaxPriority", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::ThreadGroup, typename... Args>
	auto getParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParent")] != -1);
		return call<R>("getParent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto interrupt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("interrupt")] != -1);
		return call<R>("interrupt", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDaemon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDaemon")] != -1);
		return call<R>("isDaemon", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDestroyed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDestroyed")] != -1);
		return call<R>("isDestroyed", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto list(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("list")] != -1);
		return call<R>("list", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto parentOf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parentOf")] != -1);
		return call<R>("parentOf", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDaemon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDaemon")] != -1);
		return call<R>("setDaemon", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaxPriority(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMaxPriority")] != -1);
		return call<R>("setMaxPriority", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto uncaughtException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("uncaughtException")] != -1);
		return call<R>("uncaughtException", std::forward<Args>(args)...);
	}

};

#endif
