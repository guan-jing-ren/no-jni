#ifndef java_lang_management_MemoryPoolMXBean_HPP
#define java_lang_management_MemoryPoolMXBean_HPP

#include "../../../jfwd_decl.hpp"

class ::java::lang::management::MemoryPoolMXBean : public jObject<::java::lang::management::MemoryPoolMXBean, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_lang_management / "MemoryPoolMXBean";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::management::MemoryUsage()>("getCollectionUsage"), //
		jMethod<::jlong()>("getCollectionUsageThreshold"), //
		jMethod<::jlong()>("getCollectionUsageThresholdCount"), //
		jMethod<::java::lang::String *()>("getMemoryManagerNames"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::javax::management::ObjectName()>("getObjectName"), //
		jMethod<::java::lang::management::MemoryUsage()>("getPeakUsage"), //
		jMethod<::java::lang::management::MemoryType()>("getType"), //
		jMethod<::java::lang::management::MemoryUsage()>("getUsage"), //
		jMethod<::jlong()>("getUsageThreshold"), //
		jMethod<::jlong()>("getUsageThresholdCount"), //
		jMethod<::jboolean()>("isCollectionUsageThresholdExceeded"), //
		jMethod<::jboolean()>("isCollectionUsageThresholdSupported"), //
		jMethod<::jboolean()>("isUsageThresholdExceeded"), //
		jMethod<::jboolean()>("isUsageThresholdSupported"), //
		jMethod<::jboolean()>("isValid"), //
		jMethod<::jvoid()>("resetPeakUsage"), //
		jMethod<::jvoid(::jlong)>("setCollectionUsageThreshold"), //
		jMethod<::jvoid(::jlong)>("setUsageThreshold"), //
	};

	template<typename R = ::java::lang::management::MemoryUsage, typename... Args>
	auto getCollectionUsage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCollectionUsage")] != -1);
		return call<R>("getCollectionUsage", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getCollectionUsageThreshold(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCollectionUsageThreshold")] != -1);
		return call<R>("getCollectionUsageThreshold", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getCollectionUsageThresholdCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCollectionUsageThresholdCount")] != -1);
		return call<R>("getCollectionUsageThresholdCount", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getMemoryManagerNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMemoryManagerNames")] != -1);
		return call<R>("getMemoryManagerNames", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ObjectName, typename... Args>
	auto getObjectName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectName")] != -1);
		return call<R>("getObjectName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::management::MemoryUsage, typename... Args>
	auto getPeakUsage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPeakUsage")] != -1);
		return call<R>("getPeakUsage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::management::MemoryType, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::management::MemoryUsage, typename... Args>
	auto getUsage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUsage")] != -1);
		return call<R>("getUsage", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getUsageThreshold(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUsageThreshold")] != -1);
		return call<R>("getUsageThreshold", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getUsageThresholdCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUsageThresholdCount")] != -1);
		return call<R>("getUsageThresholdCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCollectionUsageThresholdExceeded(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCollectionUsageThresholdExceeded")] != -1);
		return call<R>("isCollectionUsageThresholdExceeded", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCollectionUsageThresholdSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCollectionUsageThresholdSupported")] != -1);
		return call<R>("isCollectionUsageThresholdSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isUsageThresholdExceeded(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isUsageThresholdExceeded")] != -1);
		return call<R>("isUsageThresholdExceeded", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isUsageThresholdSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isUsageThresholdSupported")] != -1);
		return call<R>("isUsageThresholdSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isValid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isValid")] != -1);
		return call<R>("isValid", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto resetPeakUsage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("resetPeakUsage")] != -1);
		return call<R>("resetPeakUsage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCollectionUsageThreshold(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCollectionUsageThreshold")] != -1);
		return call<R>("setCollectionUsageThreshold", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUsageThreshold(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUsageThreshold")] != -1);
		return call<R>("setUsageThreshold", std::forward<Args>(args)...);
	}

};

#endif
