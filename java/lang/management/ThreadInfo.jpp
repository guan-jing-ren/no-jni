#ifndef java_lang_management_ThreadInfo_HPP
#define java_lang_management_ThreadInfo_HPP

#include "../../../jfwd_decl.hpp"

class ::java::lang::management::ThreadInfo : public jObject<::java::lang::management::ThreadInfo, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_lang_management / "ThreadInfo";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::management::ThreadInfo(::javax::management::openmbean::CompositeData)>("from"), //
		jMethod<::jlong()>("getBlockedCount"), //
		jMethod<::jlong()>("getBlockedTime"), //
		jMethod<::java::lang::management::LockInfo()>("getLockInfo"), //
		jMethod<::java::lang::String()>("getLockName"), //
		jMethod<::jlong()>("getLockOwnerId"), //
		jMethod<::java::lang::String()>("getLockOwnerName"), //
		jMethod<::java::lang::management::MonitorInfo *()>("getLockedMonitors"), //
		jMethod<::java::lang::management::LockInfo *()>("getLockedSynchronizers"), //
		jMethod<::java::lang::StackTraceElement *()>("getStackTrace"), //
		jMethod<::jlong()>("getThreadId"), //
		jMethod<::java::lang::String()>("getThreadName"), //
		jMethod<::java::lang::Thread$State()>("getThreadState"), //
		jMethod<::jlong()>("getWaitedCount"), //
		jMethod<::jlong()>("getWaitedTime"), //
		jMethod<::jboolean()>("isInNative"), //
		jMethod<::jboolean()>("isSuspended"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::management::ThreadInfo, typename... Args>
	static auto from(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("from")] != -1);
		return scall<R>("from", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getBlockedCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBlockedCount")] != -1);
		return call<R>("getBlockedCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getBlockedTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBlockedTime")] != -1);
		return call<R>("getBlockedTime", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::management::LockInfo, typename... Args>
	auto getLockInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLockInfo")] != -1);
		return call<R>("getLockInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLockName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLockName")] != -1);
		return call<R>("getLockName", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLockOwnerId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLockOwnerId")] != -1);
		return call<R>("getLockOwnerId", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLockOwnerName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLockOwnerName")] != -1);
		return call<R>("getLockOwnerName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::management::MonitorInfo *, typename... Args>
	auto getLockedMonitors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLockedMonitors")] != -1);
		return call<R>("getLockedMonitors", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::management::LockInfo *, typename... Args>
	auto getLockedSynchronizers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLockedSynchronizers")] != -1);
		return call<R>("getLockedSynchronizers", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::StackTraceElement *, typename... Args>
	auto getStackTrace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStackTrace")] != -1);
		return call<R>("getStackTrace", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getThreadId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getThreadId")] != -1);
		return call<R>("getThreadId", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getThreadName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getThreadName")] != -1);
		return call<R>("getThreadName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Thread$State, typename... Args>
	auto getThreadState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getThreadState")] != -1);
		return call<R>("getThreadState", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getWaitedCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWaitedCount")] != -1);
		return call<R>("getWaitedCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getWaitedTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWaitedTime")] != -1);
		return call<R>("getWaitedTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isInNative(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isInNative")] != -1);
		return call<R>("isInNative", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSuspended(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSuspended")] != -1);
		return call<R>("isSuspended", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
