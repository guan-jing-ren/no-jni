#ifndef java_lang_management_OperatingSystemMXBean_HPP
#define java_lang_management_OperatingSystemMXBean_HPP

#include "../../../jfwd_decl.hpp"

class ::java::lang::management::OperatingSystemMXBean : public jObject<::java::lang::management::OperatingSystemMXBean, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_lang_management / "OperatingSystemMXBean";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getArch"), //
		jMethod<::jint()>("getAvailableProcessors"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::javax::management::ObjectName()>("getObjectName"), //
		jMethod<::jdouble()>("getSystemLoadAverage"), //
		jMethod<::java::lang::String()>("getVersion"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getArch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getArch")] != -1);
		return call<R>("getArch", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAvailableProcessors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAvailableProcessors")] != -1);
		return call<R>("getAvailableProcessors", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ObjectName, typename... Args>
	auto getObjectName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectName")] != -1);
		return call<R>("getObjectName", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getSystemLoadAverage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSystemLoadAverage")] != -1);
		return call<R>("getSystemLoadAverage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVersion")] != -1);
		return call<R>("getVersion", std::forward<Args>(args)...);
	}

};

#endif
