#ifndef java_lang_management_ManagementFactory_HPP
#define java_lang_management_ManagementFactory_HPP

#include "../../../jfwd_decl.hpp"

class ::java::lang::management::ManagementFactory : public jObject<::java::lang::management::ManagementFactory, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_lang_management / "ManagementFactory";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("CLASS_LOADING_MXBEAN_NAME"), //
		jField<::java::lang::String>("COMPILATION_MXBEAN_NAME"), //
		jField<::java::lang::String>("GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPE"), //
		jField<::java::lang::String>("MEMORY_MANAGER_MXBEAN_DOMAIN_TYPE"), //
		jField<::java::lang::String>("MEMORY_MXBEAN_NAME"), //
		jField<::java::lang::String>("MEMORY_POOL_MXBEAN_DOMAIN_TYPE"), //
		jField<::java::lang::String>("OPERATING_SYSTEM_MXBEAN_NAME"), //
		jField<::java::lang::String>("RUNTIME_MXBEAN_NAME"), //
		jField<::java::lang::String>("THREAD_MXBEAN_NAME"), //
	};

	template<typename F = ::java::lang::String>
	static auto CLASS_LOADING_MXBEAN_NAME() {
		static_assert(field_signatures[jField<F>("CLASS_LOADING_MXBEAN_NAME")] != -1);
		return sat<F>("CLASS_LOADING_MXBEAN_NAME");
	}

	template<typename F = ::java::lang::String>
	static auto COMPILATION_MXBEAN_NAME() {
		static_assert(field_signatures[jField<F>("COMPILATION_MXBEAN_NAME")] != -1);
		return sat<F>("COMPILATION_MXBEAN_NAME");
	}

	template<typename F = ::java::lang::String>
	static auto GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPE() {
		static_assert(field_signatures[jField<F>("GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPE")] != -1);
		return sat<F>("GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPE");
	}

	template<typename F = ::java::lang::String>
	static auto MEMORY_MANAGER_MXBEAN_DOMAIN_TYPE() {
		static_assert(field_signatures[jField<F>("MEMORY_MANAGER_MXBEAN_DOMAIN_TYPE")] != -1);
		return sat<F>("MEMORY_MANAGER_MXBEAN_DOMAIN_TYPE");
	}

	template<typename F = ::java::lang::String>
	static auto MEMORY_MXBEAN_NAME() {
		static_assert(field_signatures[jField<F>("MEMORY_MXBEAN_NAME")] != -1);
		return sat<F>("MEMORY_MXBEAN_NAME");
	}

	template<typename F = ::java::lang::String>
	static auto MEMORY_POOL_MXBEAN_DOMAIN_TYPE() {
		static_assert(field_signatures[jField<F>("MEMORY_POOL_MXBEAN_DOMAIN_TYPE")] != -1);
		return sat<F>("MEMORY_POOL_MXBEAN_DOMAIN_TYPE");
	}

	template<typename F = ::java::lang::String>
	static auto OPERATING_SYSTEM_MXBEAN_NAME() {
		static_assert(field_signatures[jField<F>("OPERATING_SYSTEM_MXBEAN_NAME")] != -1);
		return sat<F>("OPERATING_SYSTEM_MXBEAN_NAME");
	}

	template<typename F = ::java::lang::String>
	static auto RUNTIME_MXBEAN_NAME() {
		static_assert(field_signatures[jField<F>("RUNTIME_MXBEAN_NAME")] != -1);
		return sat<F>("RUNTIME_MXBEAN_NAME");
	}

	template<typename F = ::java::lang::String>
	static auto THREAD_MXBEAN_NAME() {
		static_assert(field_signatures[jField<F>("THREAD_MXBEAN_NAME")] != -1);
		return sat<F>("THREAD_MXBEAN_NAME");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::management::ClassLoadingMXBean()>("getClassLoadingMXBean"), //
		jMethod<::java::lang::management::CompilationMXBean()>("getCompilationMXBean"), //
		jMethod<::java::util::List()>("getGarbageCollectorMXBeans"), //
		jMethod<::java::lang::management::MemoryMXBean()>("getMemoryMXBean"), //
		jMethod<::java::util::List()>("getMemoryManagerMXBeans"), //
		jMethod<::java::util::List()>("getMemoryPoolMXBeans"), //
		jMethod<::java::lang::management::OperatingSystemMXBean()>("getOperatingSystemMXBean"), //
		jMethod<::javax::management::MBeanServer()>("getPlatformMBeanServer"), //
		jMethod<::java::lang::management::PlatformManagedObject(::java::lang::Class)>("getPlatformMXBean"), //
		jMethod<::java::lang::management::PlatformManagedObject(::javax::management::MBeanServerConnection, ::java::lang::Class)>("getPlatformMXBean"), //
		jMethod<::java::util::List(::java::lang::Class)>("getPlatformMXBeans"), //
		jMethod<::java::util::List(::javax::management::MBeanServerConnection, ::java::lang::Class)>("getPlatformMXBeans"), //
		jMethod<::java::util::Set()>("getPlatformManagementInterfaces"), //
		jMethod<::java::lang::management::RuntimeMXBean()>("getRuntimeMXBean"), //
		jMethod<::java::lang::management::ThreadMXBean()>("getThreadMXBean"), //
		jMethod<::java::lang::Object(::javax::management::MBeanServerConnection, ::java::lang::String, ::java::lang::Class)>("newPlatformMXBeanProxy"), //
	};

	template<typename R = ::java::lang::management::ClassLoadingMXBean, typename... Args>
	static auto getClassLoadingMXBean(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClassLoadingMXBean")] != -1);
		return scall<R>("getClassLoadingMXBean", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::management::CompilationMXBean, typename... Args>
	static auto getCompilationMXBean(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCompilationMXBean")] != -1);
		return scall<R>("getCompilationMXBean", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	static auto getGarbageCollectorMXBeans(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGarbageCollectorMXBeans")] != -1);
		return scall<R>("getGarbageCollectorMXBeans", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::management::MemoryMXBean, typename... Args>
	static auto getMemoryMXBean(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMemoryMXBean")] != -1);
		return scall<R>("getMemoryMXBean", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	static auto getMemoryManagerMXBeans(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMemoryManagerMXBeans")] != -1);
		return scall<R>("getMemoryManagerMXBeans", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	static auto getMemoryPoolMXBeans(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMemoryPoolMXBeans")] != -1);
		return scall<R>("getMemoryPoolMXBeans", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::management::OperatingSystemMXBean, typename... Args>
	static auto getOperatingSystemMXBean(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOperatingSystemMXBean")] != -1);
		return scall<R>("getOperatingSystemMXBean", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::MBeanServer, typename... Args>
	static auto getPlatformMBeanServer(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPlatformMBeanServer")] != -1);
		return scall<R>("getPlatformMBeanServer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::management::PlatformManagedObject, typename... Args>
	static auto getPlatformMXBean(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPlatformMXBean")] != -1);
		return scall<R>("getPlatformMXBean", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	static auto getPlatformMXBeans(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPlatformMXBeans")] != -1);
		return scall<R>("getPlatformMXBeans", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	static auto getPlatformManagementInterfaces(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPlatformManagementInterfaces")] != -1);
		return scall<R>("getPlatformManagementInterfaces", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::management::RuntimeMXBean, typename... Args>
	static auto getRuntimeMXBean(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRuntimeMXBean")] != -1);
		return scall<R>("getRuntimeMXBean", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::management::ThreadMXBean, typename... Args>
	static auto getThreadMXBean(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getThreadMXBean")] != -1);
		return scall<R>("getThreadMXBean", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	static auto newPlatformMXBeanProxy(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newPlatformMXBeanProxy")] != -1);
		return scall<R>("newPlatformMXBeanProxy", std::forward<Args>(args)...);
	}

};

#endif
