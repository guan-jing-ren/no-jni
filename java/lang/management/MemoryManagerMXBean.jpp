#ifndef java_lang_management_MemoryManagerMXBean_HPP
#define java_lang_management_MemoryManagerMXBean_HPP

#include "../../../jfwd_decl.hpp"

class ::java::lang::management::MemoryManagerMXBean : public jObject<::java::lang::management::MemoryManagerMXBean, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_lang_management / "MemoryManagerMXBean";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String *()>("getMemoryPoolNames"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jboolean()>("isValid"), //
	};

	template<typename R = ::java::lang::String *, typename... Args>
	auto getMemoryPoolNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMemoryPoolNames")] != -1);
		return call<R>("getMemoryPoolNames", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isValid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isValid")] != -1);
		return call<R>("isValid", forward<Args>(args)...);
	}

};

#endif
