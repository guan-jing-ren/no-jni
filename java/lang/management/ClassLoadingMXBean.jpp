#ifndef java_lang_management_ClassLoadingMXBean_HPP
#define java_lang_management_ClassLoadingMXBean_HPP

#include "../../../jfwd_decl.hpp"

class ::java::lang::management::ClassLoadingMXBean : public jObject<::java::lang::management::ClassLoadingMXBean, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_lang_management / "ClassLoadingMXBean";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint()>("getLoadedClassCount"), //
		jMethod<::javax::management::ObjectName()>("getObjectName"), //
		jMethod<::jlong()>("getTotalLoadedClassCount"), //
		jMethod<::jlong()>("getUnloadedClassCount"), //
		jMethod<::jboolean()>("isVerbose"), //
		jMethod<::jvoid(::jboolean)>("setVerbose"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getLoadedClassCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLoadedClassCount")] != -1);
		return call<R>("getLoadedClassCount", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ObjectName, typename... Args>
	auto getObjectName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectName")] != -1);
		return call<R>("getObjectName", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getTotalLoadedClassCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTotalLoadedClassCount")] != -1);
		return call<R>("getTotalLoadedClassCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getUnloadedClassCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUnloadedClassCount")] != -1);
		return call<R>("getUnloadedClassCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isVerbose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isVerbose")] != -1);
		return call<R>("isVerbose", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVerbose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVerbose")] != -1);
		return call<R>("setVerbose", std::forward<Args>(args)...);
	}

};

#endif
