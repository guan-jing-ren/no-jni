#ifndef java_lang_management_RuntimeMXBean_HPP
#define java_lang_management_RuntimeMXBean_HPP

#include "../../../jfwd_decl.hpp"

class ::java::lang::management::RuntimeMXBean : public jObject<::java::lang::management::RuntimeMXBean, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_lang_management / "RuntimeMXBean";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getBootClassPath"), //
		jMethod<::java::lang::String()>("getClassPath"), //
		jMethod<::java::util::List()>("getInputArguments"), //
		jMethod<::java::lang::String()>("getLibraryPath"), //
		jMethod<::java::lang::String()>("getManagementSpecVersion"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::javax::management::ObjectName()>("getObjectName"), //
		jMethod<::java::lang::String()>("getSpecName"), //
		jMethod<::java::lang::String()>("getSpecVendor"), //
		jMethod<::java::lang::String()>("getSpecVersion"), //
		jMethod<::jlong()>("getStartTime"), //
		jMethod<::java::util::Map()>("getSystemProperties"), //
		jMethod<::jlong()>("getUptime"), //
		jMethod<::java::lang::String()>("getVmName"), //
		jMethod<::java::lang::String()>("getVmVendor"), //
		jMethod<::java::lang::String()>("getVmVersion"), //
		jMethod<::jboolean()>("isBootClassPathSupported"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getBootClassPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBootClassPath")] != -1);
		return call<R>("getBootClassPath", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getClassPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClassPath")] != -1);
		return call<R>("getClassPath", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getInputArguments(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInputArguments")] != -1);
		return call<R>("getInputArguments", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLibraryPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLibraryPath")] != -1);
		return call<R>("getLibraryPath", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getManagementSpecVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getManagementSpecVersion")] != -1);
		return call<R>("getManagementSpecVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ObjectName, typename... Args>
	auto getObjectName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectName")] != -1);
		return call<R>("getObjectName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSpecName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSpecName")] != -1);
		return call<R>("getSpecName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSpecVendor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSpecVendor")] != -1);
		return call<R>("getSpecVendor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSpecVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSpecVersion")] != -1);
		return call<R>("getSpecVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getStartTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStartTime")] != -1);
		return call<R>("getStartTime", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getSystemProperties(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSystemProperties")] != -1);
		return call<R>("getSystemProperties", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getUptime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUptime")] != -1);
		return call<R>("getUptime", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getVmName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVmName")] != -1);
		return call<R>("getVmName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getVmVendor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVmVendor")] != -1);
		return call<R>("getVmVendor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getVmVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVmVersion")] != -1);
		return call<R>("getVmVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isBootClassPathSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isBootClassPathSupported")] != -1);
		return call<R>("isBootClassPathSupported", std::forward<Args>(args)...);
	}

};

#endif
