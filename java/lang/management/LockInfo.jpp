#ifndef java_lang_management_LockInfo_HPP
#define java_lang_management_LockInfo_HPP

#include "../../../jfwd_decl.hpp"

class ::java::lang::management::LockInfo : public jObject<::java::lang::management::LockInfo, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_lang_management / "LockInfo";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::jint)>(), //
		jMethod<::java::lang::management::LockInfo(::javax::management::openmbean::CompositeData)>("from"), //
		jMethod<::java::lang::String()>("getClassName"), //
		jMethod<::jint()>("getIdentityHashCode"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::management::LockInfo, typename... Args>
	static auto from(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("from")] != -1);
		return scall<R>("from", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getClassName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClassName")] != -1);
		return call<R>("getClassName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getIdentityHashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIdentityHashCode")] != -1);
		return call<R>("getIdentityHashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
