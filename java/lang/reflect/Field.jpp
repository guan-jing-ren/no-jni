#ifndef java_lang_reflect_Field_HPP
#define java_lang_reflect_Field_HPP

#include "../../../jfwd_decl.hpp"

class ::java::lang::reflect::Field : public jObject<::java::lang::reflect::Field, ::java::lang::reflect::AccessibleObject> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_lang_reflect / "Field";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("get"), //
		jMethod<::java::lang::reflect::AnnotatedType()>("getAnnotatedType"), //
		jMethod<::java::lang::annotation::Annotation(::java::lang::Class)>("getAnnotation"), //
		jMethod<::java::lang::annotation::Annotation *(::java::lang::Class)>("getAnnotationsByType"), //
		jMethod<::jboolean(::java::lang::Object)>("getBoolean"), //
		jMethod<::jbyte(::java::lang::Object)>("getByte"), //
		jMethod<::jchar(::java::lang::Object)>("getChar"), //
		jMethod<::java::lang::annotation::Annotation *()>("getDeclaredAnnotations"), //
		jMethod<::java::lang::Class()>("getDeclaringClass"), //
		jMethod<::jdouble(::java::lang::Object)>("getDouble"), //
		jMethod<::jfloat(::java::lang::Object)>("getFloat"), //
		jMethod<::java::lang::reflect::Type()>("getGenericType"), //
		jMethod<::jint(::java::lang::Object)>("getInt"), //
		jMethod<::jlong(::java::lang::Object)>("getLong"), //
		jMethod<::jint()>("getModifiers"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jshort(::java::lang::Object)>("getShort"), //
		jMethod<::java::lang::Class()>("getType"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isEnumConstant"), //
		jMethod<::jboolean()>("isSynthetic"), //
		jMethod<::jvoid(::java::lang::Object, ::java::lang::Object)>("set"), //
		jMethod<::jvoid(::java::lang::Object, ::jboolean)>("setBoolean"), //
		jMethod<::jvoid(::java::lang::Object, ::jbyte)>("setByte"), //
		jMethod<::jvoid(::java::lang::Object, ::jchar)>("setChar"), //
		jMethod<::jvoid(::java::lang::Object, ::jdouble)>("setDouble"), //
		jMethod<::jvoid(::java::lang::Object, ::jfloat)>("setFloat"), //
		jMethod<::jvoid(::java::lang::Object, ::jint)>("setInt"), //
		jMethod<::jvoid(::java::lang::Object, ::jlong)>("setLong"), //
		jMethod<::jvoid(::java::lang::Object, ::jshort)>("setShort"), //
		jMethod<::java::lang::String()>("toGenericString"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("get")] != -1);
		return call<R>("get", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::AnnotatedType, typename... Args>
	auto getAnnotatedType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAnnotatedType")] != -1);
		return call<R>("getAnnotatedType", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::annotation::Annotation, typename... Args>
	auto getAnnotation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAnnotation")] != -1);
		return call<R>("getAnnotation", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::annotation::Annotation *, typename... Args>
	auto getAnnotationsByType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAnnotationsByType")] != -1);
		return call<R>("getAnnotationsByType", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getBoolean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBoolean")] != -1);
		return call<R>("getBoolean", forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto getByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getByte")] != -1);
		return call<R>("getByte", forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto getChar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getChar")] != -1);
		return call<R>("getChar", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::annotation::Annotation *, typename... Args>
	auto getDeclaredAnnotations(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDeclaredAnnotations")] != -1);
		return call<R>("getDeclaredAnnotations", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto getDeclaringClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDeclaringClass")] != -1);
		return call<R>("getDeclaringClass", forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDouble")] != -1);
		return call<R>("getDouble", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getFloat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFloat")] != -1);
		return call<R>("getFloat", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::Type, typename... Args>
	auto getGenericType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getGenericType")] != -1);
		return call<R>("getGenericType", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInt")] != -1);
		return call<R>("getInt", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLong")] != -1);
		return call<R>("getLong", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getModifiers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getModifiers")] != -1);
		return call<R>("getModifiers", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto getShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getShort")] != -1);
		return call<R>("getShort", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEnumConstant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isEnumConstant")] != -1);
		return call<R>("isEnumConstant", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSynthetic(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isSynthetic")] != -1);
		return call<R>("isSynthetic", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("set")] != -1);
		return call<R>("set", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBoolean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBoolean")] != -1);
		return call<R>("setBoolean", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setByte")] != -1);
		return call<R>("setByte", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setChar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setChar")] != -1);
		return call<R>("setChar", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDouble")] != -1);
		return call<R>("setDouble", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFloat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFloat")] != -1);
		return call<R>("setFloat", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setInt")] != -1);
		return call<R>("setInt", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLong")] != -1);
		return call<R>("setLong", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setShort")] != -1);
		return call<R>("setShort", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toGenericString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toGenericString")] != -1);
		return call<R>("toGenericString", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
