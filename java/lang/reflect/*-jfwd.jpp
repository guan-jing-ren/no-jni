#ifndef java_lang_reflect_JPP
#define java_lang_reflect_JPP

namespace java::lang::reflect { class AccessibleObject; }
template<> constexpr auto signature<::java::lang::reflect::AccessibleObject> = ::java_lang_reflect / "AccessibleObject";
namespace java::lang::reflect { class AnnotatedArrayType; }
template<> constexpr auto signature<::java::lang::reflect::AnnotatedArrayType> = ::java_lang_reflect / "AnnotatedArrayType";
namespace java::lang::reflect { class AnnotatedElement; }
template<> constexpr auto signature<::java::lang::reflect::AnnotatedElement> = ::java_lang_reflect / "AnnotatedElement";
namespace java::lang::reflect { class AnnotatedParameterizedType; }
template<> constexpr auto signature<::java::lang::reflect::AnnotatedParameterizedType> = ::java_lang_reflect / "AnnotatedParameterizedType";
namespace java::lang::reflect { class AnnotatedType; }
template<> constexpr auto signature<::java::lang::reflect::AnnotatedType> = ::java_lang_reflect / "AnnotatedType";
namespace java::lang::reflect { class AnnotatedTypeVariable; }
template<> constexpr auto signature<::java::lang::reflect::AnnotatedTypeVariable> = ::java_lang_reflect / "AnnotatedTypeVariable";
namespace java::lang::reflect { class AnnotatedWildcardType; }
template<> constexpr auto signature<::java::lang::reflect::AnnotatedWildcardType> = ::java_lang_reflect / "AnnotatedWildcardType";
namespace java::lang::reflect { class Array; }
template<> constexpr auto signature<::java::lang::reflect::Array> = ::java_lang_reflect / "Array";
namespace java::lang::reflect { class Constructor; }
template<> constexpr auto signature<::java::lang::reflect::Constructor> = ::java_lang_reflect / "Constructor";
namespace java::lang::reflect { class Executable; }
template<> constexpr auto signature<::java::lang::reflect::Executable> = ::java_lang_reflect / "Executable";
namespace java::lang::reflect { class Field; }
template<> constexpr auto signature<::java::lang::reflect::Field> = ::java_lang_reflect / "Field";
namespace java::lang::reflect { class GenericArrayType; }
template<> constexpr auto signature<::java::lang::reflect::GenericArrayType> = ::java_lang_reflect / "GenericArrayType";
namespace java::lang::reflect { class GenericDeclaration; }
template<> constexpr auto signature<::java::lang::reflect::GenericDeclaration> = ::java_lang_reflect / "GenericDeclaration";
namespace java::lang::reflect { class GenericSignatureFormatError; }
template<> constexpr auto signature<::java::lang::reflect::GenericSignatureFormatError> = ::java_lang_reflect / "GenericSignatureFormatError";
namespace java::lang::reflect { class InvocationHandler; }
template<> constexpr auto signature<::java::lang::reflect::InvocationHandler> = ::java_lang_reflect / "InvocationHandler";
namespace java::lang::reflect { class InvocationTargetException; }
template<> constexpr auto signature<::java::lang::reflect::InvocationTargetException> = ::java_lang_reflect / "InvocationTargetException";
namespace java::lang::reflect { class MalformedParameterizedTypeException; }
template<> constexpr auto signature<::java::lang::reflect::MalformedParameterizedTypeException> = ::java_lang_reflect / "MalformedParameterizedTypeException";
namespace java::lang::reflect { class MalformedParametersException; }
template<> constexpr auto signature<::java::lang::reflect::MalformedParametersException> = ::java_lang_reflect / "MalformedParametersException";
namespace java::lang::reflect { class Member; }
template<> constexpr auto signature<::java::lang::reflect::Member> = ::java_lang_reflect / "Member";
namespace java::lang::reflect { class Method; }
template<> constexpr auto signature<::java::lang::reflect::Method> = ::java_lang_reflect / "Method";
namespace java::lang::reflect { class Modifier; }
template<> constexpr auto signature<::java::lang::reflect::Modifier> = ::java_lang_reflect / "Modifier";
namespace java::lang::reflect { class Parameter; }
template<> constexpr auto signature<::java::lang::reflect::Parameter> = ::java_lang_reflect / "Parameter";
namespace java::lang::reflect { class ParameterizedType; }
template<> constexpr auto signature<::java::lang::reflect::ParameterizedType> = ::java_lang_reflect / "ParameterizedType";
namespace java::lang::reflect { class Proxy; }
template<> constexpr auto signature<::java::lang::reflect::Proxy> = ::java_lang_reflect / "Proxy";
namespace java::lang::reflect { class Proxy$1; }
template<> constexpr auto signature<::java::lang::reflect::Proxy$1> = ::java_lang_reflect / "Proxy$1";
namespace java::lang::reflect { class Proxy$Key1; }
template<> constexpr auto signature<::java::lang::reflect::Proxy$Key1> = ::java_lang_reflect / "Proxy$Key1";
namespace java::lang::reflect { class Proxy$Key2; }
template<> constexpr auto signature<::java::lang::reflect::Proxy$Key2> = ::java_lang_reflect / "Proxy$Key2";
namespace java::lang::reflect { class Proxy$KeyFactory; }
template<> constexpr auto signature<::java::lang::reflect::Proxy$KeyFactory> = ::java_lang_reflect / "Proxy$KeyFactory";
namespace java::lang::reflect { class Proxy$KeyX; }
template<> constexpr auto signature<::java::lang::reflect::Proxy$KeyX> = ::java_lang_reflect / "Proxy$KeyX";
namespace java::lang::reflect { class Proxy$ProxyClassFactory; }
template<> constexpr auto signature<::java::lang::reflect::Proxy$ProxyClassFactory> = ::java_lang_reflect / "Proxy$ProxyClassFactory";
namespace java::lang::reflect { class ReflectAccess; }
template<> constexpr auto signature<::java::lang::reflect::ReflectAccess> = ::java_lang_reflect / "ReflectAccess";
namespace java::lang::reflect { class ReflectPermission; }
template<> constexpr auto signature<::java::lang::reflect::ReflectPermission> = ::java_lang_reflect / "ReflectPermission";
namespace java::lang::reflect { class Type; }
template<> constexpr auto signature<::java::lang::reflect::Type> = ::java_lang_reflect / "Type";
namespace java::lang::reflect { class TypeVariable; }
template<> constexpr auto signature<::java::lang::reflect::TypeVariable> = ::java_lang_reflect / "TypeVariable";
namespace java::lang::reflect { class UndeclaredThrowableException; }
template<> constexpr auto signature<::java::lang::reflect::UndeclaredThrowableException> = ::java_lang_reflect / "UndeclaredThrowableException";
namespace java::lang::reflect { class WeakCache; }
template<> constexpr auto signature<::java::lang::reflect::WeakCache> = ::java_lang_reflect / "WeakCache";
namespace java::lang::reflect { class WeakCache$CacheKey; }
template<> constexpr auto signature<::java::lang::reflect::WeakCache$CacheKey> = ::java_lang_reflect / "WeakCache$CacheKey";
namespace java::lang::reflect { class WeakCache$CacheValue; }
template<> constexpr auto signature<::java::lang::reflect::WeakCache$CacheValue> = ::java_lang_reflect / "WeakCache$CacheValue";
namespace java::lang::reflect { class WeakCache$Factory; }
template<> constexpr auto signature<::java::lang::reflect::WeakCache$Factory> = ::java_lang_reflect / "WeakCache$Factory";
namespace java::lang::reflect { class WeakCache$LookupValue; }
template<> constexpr auto signature<::java::lang::reflect::WeakCache$LookupValue> = ::java_lang_reflect / "WeakCache$LookupValue";
namespace java::lang::reflect { class WeakCache$Value; }
template<> constexpr auto signature<::java::lang::reflect::WeakCache$Value> = ::java_lang_reflect / "WeakCache$Value";
namespace java::lang::reflect { class WildcardType; }
template<> constexpr auto signature<::java::lang::reflect::WildcardType> = ::java_lang_reflect / "WildcardType";

#endif
