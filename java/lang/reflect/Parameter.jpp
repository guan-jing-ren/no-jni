#ifndef java_lang_reflect_Parameter_HPP
#define java_lang_reflect_Parameter_HPP

#include "../../../jfwd_decl.hpp"

class ::java::lang::reflect::Parameter : public jObject<::java::lang::reflect::Parameter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_lang_reflect / "Parameter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::reflect::AnnotatedType()>("getAnnotatedType"), //
		jMethod<::java::lang::annotation::Annotation(::java::lang::Class)>("getAnnotation"), //
		jMethod<::java::lang::annotation::Annotation *()>("getAnnotations"), //
		jMethod<::java::lang::annotation::Annotation *(::java::lang::Class)>("getAnnotationsByType"), //
		jMethod<::java::lang::annotation::Annotation(::java::lang::Class)>("getDeclaredAnnotation"), //
		jMethod<::java::lang::annotation::Annotation *()>("getDeclaredAnnotations"), //
		jMethod<::java::lang::annotation::Annotation *(::java::lang::Class)>("getDeclaredAnnotationsByType"), //
		jMethod<::java::lang::reflect::Executable()>("getDeclaringExecutable"), //
		jMethod<::jint()>("getModifiers"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::lang::reflect::Type()>("getParameterizedType"), //
		jMethod<::java::lang::Class()>("getType"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean(::java::lang::Class)>("isAnnotationPresent"), //
		jMethod<::jboolean()>("isImplicit"), //
		jMethod<::jboolean()>("isNamePresent"), //
		jMethod<::jboolean()>("isSynthetic"), //
		jMethod<::jboolean()>("isVarArgs"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::AnnotatedType, typename... Args>
	auto getAnnotatedType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAnnotatedType")] != -1);
		return call<R>("getAnnotatedType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::annotation::Annotation, typename... Args>
	auto getAnnotation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAnnotation")] != -1);
		return call<R>("getAnnotation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::annotation::Annotation *, typename... Args>
	auto getAnnotations(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAnnotations")] != -1);
		return call<R>("getAnnotations", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::annotation::Annotation *, typename... Args>
	auto getAnnotationsByType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAnnotationsByType")] != -1);
		return call<R>("getAnnotationsByType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::annotation::Annotation, typename... Args>
	auto getDeclaredAnnotation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDeclaredAnnotation")] != -1);
		return call<R>("getDeclaredAnnotation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::annotation::Annotation *, typename... Args>
	auto getDeclaredAnnotations(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDeclaredAnnotations")] != -1);
		return call<R>("getDeclaredAnnotations", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::annotation::Annotation *, typename... Args>
	auto getDeclaredAnnotationsByType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDeclaredAnnotationsByType")] != -1);
		return call<R>("getDeclaredAnnotationsByType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::Executable, typename... Args>
	auto getDeclaringExecutable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDeclaringExecutable")] != -1);
		return call<R>("getDeclaringExecutable", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getModifiers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getModifiers")] != -1);
		return call<R>("getModifiers", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::Type, typename... Args>
	auto getParameterizedType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParameterizedType")] != -1);
		return call<R>("getParameterizedType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAnnotationPresent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAnnotationPresent")] != -1);
		return call<R>("isAnnotationPresent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isImplicit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isImplicit")] != -1);
		return call<R>("isImplicit", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isNamePresent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isNamePresent")] != -1);
		return call<R>("isNamePresent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSynthetic(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSynthetic")] != -1);
		return call<R>("isSynthetic", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isVarArgs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isVarArgs")] != -1);
		return call<R>("isVarArgs", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
