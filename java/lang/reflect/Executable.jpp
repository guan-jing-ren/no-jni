#ifndef java_lang_reflect_Executable_HPP
#define java_lang_reflect_Executable_HPP

#include "../../../jfwd_decl.hpp"

class ::java::lang::reflect::Executable : public jObject<::java::lang::reflect::Executable, ::java::lang::reflect::AccessibleObject> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_lang_reflect / "Executable";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::reflect::AnnotatedType *()>("getAnnotatedExceptionTypes"), //
		jMethod<::java::lang::reflect::AnnotatedType *()>("getAnnotatedParameterTypes"), //
		jMethod<::java::lang::reflect::AnnotatedType()>("getAnnotatedReceiverType"), //
		jMethod<::java::lang::reflect::AnnotatedType()>("getAnnotatedReturnType"), //
		jMethod<::java::lang::annotation::Annotation(::java::lang::Class)>("getAnnotation"), //
		jMethod<::java::lang::annotation::Annotation *()>("getAnnotations"), //
		jMethod<::java::lang::annotation::Annotation *(::java::lang::Class)>("getAnnotationsByType"), //
		jMethod<::java::lang::annotation::Annotation *()>("getDeclaredAnnotations"), //
		jMethod<::java::lang::Class()>("getDeclaringClass"), //
		jMethod<::java::lang::Class *()>("getExceptionTypes"), //
		jMethod<::java::lang::reflect::Type *()>("getGenericExceptionTypes"), //
		jMethod<::java::lang::reflect::Type *()>("getGenericParameterTypes"), //
		jMethod<::jint()>("getModifiers"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::lang::annotation::Annotation **()>("getParameterAnnotations"), //
		jMethod<::jint()>("getParameterCount"), //
		jMethod<::java::lang::Class *()>("getParameterTypes"), //
		jMethod<::java::lang::reflect::Parameter *()>("getParameters"), //
		jMethod<::java::lang::reflect::TypeVariable *()>("getTypeParameters"), //
		jMethod<::jboolean()>("isSynthetic"), //
		jMethod<::jboolean()>("isVarArgs"), //
		jMethod<::java::lang::String()>("toGenericString"), //
	};

	template<typename R = ::java::lang::reflect::AnnotatedType *, typename... Args>
	auto getAnnotatedExceptionTypes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAnnotatedExceptionTypes")] != -1);
		return call<R>("getAnnotatedExceptionTypes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::AnnotatedType *, typename... Args>
	auto getAnnotatedParameterTypes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAnnotatedParameterTypes")] != -1);
		return call<R>("getAnnotatedParameterTypes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::AnnotatedType, typename... Args>
	auto getAnnotatedReceiverType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAnnotatedReceiverType")] != -1);
		return call<R>("getAnnotatedReceiverType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::AnnotatedType, typename... Args>
	auto getAnnotatedReturnType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAnnotatedReturnType")] != -1);
		return call<R>("getAnnotatedReturnType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::annotation::Annotation, typename... Args>
	auto getAnnotation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAnnotation")] != -1);
		return call<R>("getAnnotation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::annotation::Annotation *, typename... Args>
	auto getAnnotations(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAnnotations")] != -1);
		return call<R>("getAnnotations", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::annotation::Annotation *, typename... Args>
	auto getAnnotationsByType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAnnotationsByType")] != -1);
		return call<R>("getAnnotationsByType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::annotation::Annotation *, typename... Args>
	auto getDeclaredAnnotations(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDeclaredAnnotations")] != -1);
		return call<R>("getDeclaredAnnotations", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto getDeclaringClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDeclaringClass")] != -1);
		return call<R>("getDeclaringClass", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class *, typename... Args>
	auto getExceptionTypes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExceptionTypes")] != -1);
		return call<R>("getExceptionTypes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::Type *, typename... Args>
	auto getGenericExceptionTypes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGenericExceptionTypes")] != -1);
		return call<R>("getGenericExceptionTypes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::Type *, typename... Args>
	auto getGenericParameterTypes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGenericParameterTypes")] != -1);
		return call<R>("getGenericParameterTypes", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getModifiers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getModifiers")] != -1);
		return call<R>("getModifiers", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::annotation::Annotation **, typename... Args>
	auto getParameterAnnotations(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParameterAnnotations")] != -1);
		return call<R>("getParameterAnnotations", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getParameterCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParameterCount")] != -1);
		return call<R>("getParameterCount", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class *, typename... Args>
	auto getParameterTypes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParameterTypes")] != -1);
		return call<R>("getParameterTypes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::Parameter *, typename... Args>
	auto getParameters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParameters")] != -1);
		return call<R>("getParameters", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::TypeVariable *, typename... Args>
	auto getTypeParameters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTypeParameters")] != -1);
		return call<R>("getTypeParameters", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSynthetic(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSynthetic")] != -1);
		return call<R>("isSynthetic", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isVarArgs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isVarArgs")] != -1);
		return call<R>("isVarArgs", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toGenericString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toGenericString")] != -1);
		return call<R>("toGenericString", std::forward<Args>(args)...);
	}

};

#endif
