#ifndef java_lang_reflect_Member_HPP
#define java_lang_reflect_Member_HPP

#include "../../../jfwd_decl.hpp"

class ::java::lang::reflect::Member : public jObject<::java::lang::reflect::Member, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_lang_reflect / "Member";

	constexpr static Enume field_signatures{
		jField<::jint>("DECLARED"), //
		jField<::jint>("PUBLIC"), //
	};

	template<typename F = ::jint>
	static auto DECLARED() {
		static_assert(field_signatures[jField<F>("DECLARED")] != -1);
		return sat<F>("DECLARED");
	}

	template<typename F = ::jint>
	static auto PUBLIC() {
		static_assert(field_signatures[jField<F>("PUBLIC")] != -1);
		return sat<F>("PUBLIC");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Class()>("getDeclaringClass"), //
		jMethod<::jint()>("getModifiers"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jboolean()>("isSynthetic"), //
	};

	template<typename R = ::java::lang::Class, typename... Args>
	auto getDeclaringClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDeclaringClass")] != -1);
		return call<R>("getDeclaringClass", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getModifiers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getModifiers")] != -1);
		return call<R>("getModifiers", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSynthetic(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSynthetic")] != -1);
		return call<R>("isSynthetic", std::forward<Args>(args)...);
	}

};

#endif
