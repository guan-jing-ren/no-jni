#ifndef java_lang_reflect_Array_HPP
#define java_lang_reflect_Array_HPP

#include "../../../jfwd_decl.hpp"

class ::java::lang::reflect::Array : public jObject<::java::lang::reflect::Array, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_lang_reflect / "Array";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Object(::java::lang::Object, ::jint)>("get"), //
		jMethod<::jboolean(::java::lang::Object, ::jint)>("getBoolean"), //
		jMethod<::jbyte(::java::lang::Object, ::jint)>("getByte"), //
		jMethod<::jchar(::java::lang::Object, ::jint)>("getChar"), //
		jMethod<::jdouble(::java::lang::Object, ::jint)>("getDouble"), //
		jMethod<::jfloat(::java::lang::Object, ::jint)>("getFloat"), //
		jMethod<::jint(::java::lang::Object, ::jint)>("getInt"), //
		jMethod<::jint(::java::lang::Object)>("getLength"), //
		jMethod<::jlong(::java::lang::Object, ::jint)>("getLong"), //
		jMethod<::jshort(::java::lang::Object, ::jint)>("getShort"), //
		jMethod<::java::lang::Object(::java::lang::Class, ::jint)>("newInstance"), //
		jMethod<::java::lang::Object(::java::lang::Class, ::jint *)>("newInstance"), //
		jMethod<::jvoid(::java::lang::Object, ::jint, ::java::lang::Object)>("set"), //
		jMethod<::jvoid(::java::lang::Object, ::jint, ::jboolean)>("setBoolean"), //
		jMethod<::jvoid(::java::lang::Object, ::jint, ::jbyte)>("setByte"), //
		jMethod<::jvoid(::java::lang::Object, ::jint, ::jchar)>("setChar"), //
		jMethod<::jvoid(::java::lang::Object, ::jint, ::jdouble)>("setDouble"), //
		jMethod<::jvoid(::java::lang::Object, ::jint, ::jfloat)>("setFloat"), //
		jMethod<::jvoid(::java::lang::Object, ::jint, ::jint)>("setInt"), //
		jMethod<::jvoid(::java::lang::Object, ::jint, ::jlong)>("setLong"), //
		jMethod<::jvoid(::java::lang::Object, ::jint, ::jshort)>("setShort"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	static auto get(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("get")] != -1);
		return scall<R>("get", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto getBoolean(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBoolean")] != -1);
		return scall<R>("getBoolean", forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	static auto getByte(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getByte")] != -1);
		return scall<R>("getByte", forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	static auto getChar(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getChar")] != -1);
		return scall<R>("getChar", forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	static auto getDouble(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDouble")] != -1);
		return scall<R>("getDouble", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	static auto getFloat(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFloat")] != -1);
		return scall<R>("getFloat", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getInt(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInt")] != -1);
		return scall<R>("getInt", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getLength(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLength")] != -1);
		return scall<R>("getLength", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	static auto getLong(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLong")] != -1);
		return scall<R>("getLong", forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	static auto getShort(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getShort")] != -1);
		return scall<R>("getShort", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	static auto newInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("newInstance")] != -1);
		return scall<R>("newInstance", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto set(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("set")] != -1);
		return scall<R>("set", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setBoolean(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBoolean")] != -1);
		return scall<R>("setBoolean", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setByte(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setByte")] != -1);
		return scall<R>("setByte", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setChar(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setChar")] != -1);
		return scall<R>("setChar", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setDouble(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDouble")] != -1);
		return scall<R>("setDouble", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setFloat(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFloat")] != -1);
		return scall<R>("setFloat", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setInt(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setInt")] != -1);
		return scall<R>("setInt", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setLong(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLong")] != -1);
		return scall<R>("setLong", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setShort(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setShort")] != -1);
		return scall<R>("setShort", forward<Args>(args)...);
	}

};

#endif
