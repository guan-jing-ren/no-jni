#ifndef java_lang_reflect_Modifier_HPP
#define java_lang_reflect_Modifier_HPP

#include "../../../jfwd_decl.hpp"

class ::java::lang::reflect::Modifier : public jObject<::java::lang::reflect::Modifier, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_lang_reflect / "Modifier";

	constexpr static Enume field_signatures{
		jField<::jint>("ABSTRACT"), //
		jField<::jint>("FINAL"), //
		jField<::jint>("INTERFACE"), //
		jField<::jint>("NATIVE"), //
		jField<::jint>("PRIVATE"), //
		jField<::jint>("PROTECTED"), //
		jField<::jint>("PUBLIC"), //
		jField<::jint>("STATIC"), //
		jField<::jint>("STRICT"), //
		jField<::jint>("SYNCHRONIZED"), //
		jField<::jint>("TRANSIENT"), //
		jField<::jint>("VOLATILE"), //
	};

	template<typename F = ::jint>
	static auto ABSTRACT() {
		static_assert(field_signatures[jField<F>("ABSTRACT")] != -1);
		return sat<F>("ABSTRACT");
	}

	template<typename F = ::jint>
	static auto FINAL() {
		static_assert(field_signatures[jField<F>("FINAL")] != -1);
		return sat<F>("FINAL");
	}

	template<typename F = ::jint>
	static auto INTERFACE() {
		static_assert(field_signatures[jField<F>("INTERFACE")] != -1);
		return sat<F>("INTERFACE");
	}

	template<typename F = ::jint>
	static auto NATIVE() {
		static_assert(field_signatures[jField<F>("NATIVE")] != -1);
		return sat<F>("NATIVE");
	}

	template<typename F = ::jint>
	static auto PRIVATE() {
		static_assert(field_signatures[jField<F>("PRIVATE")] != -1);
		return sat<F>("PRIVATE");
	}

	template<typename F = ::jint>
	static auto PROTECTED() {
		static_assert(field_signatures[jField<F>("PROTECTED")] != -1);
		return sat<F>("PROTECTED");
	}

	template<typename F = ::jint>
	static auto PUBLIC() {
		static_assert(field_signatures[jField<F>("PUBLIC")] != -1);
		return sat<F>("PUBLIC");
	}

	template<typename F = ::jint>
	static auto STATIC() {
		static_assert(field_signatures[jField<F>("STATIC")] != -1);
		return sat<F>("STATIC");
	}

	template<typename F = ::jint>
	static auto STRICT() {
		static_assert(field_signatures[jField<F>("STRICT")] != -1);
		return sat<F>("STRICT");
	}

	template<typename F = ::jint>
	static auto SYNCHRONIZED() {
		static_assert(field_signatures[jField<F>("SYNCHRONIZED")] != -1);
		return sat<F>("SYNCHRONIZED");
	}

	template<typename F = ::jint>
	static auto TRANSIENT() {
		static_assert(field_signatures[jField<F>("TRANSIENT")] != -1);
		return sat<F>("TRANSIENT");
	}

	template<typename F = ::jint>
	static auto VOLATILE() {
		static_assert(field_signatures[jField<F>("VOLATILE")] != -1);
		return sat<F>("VOLATILE");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jint()>("classModifiers"), //
		jMethod<::jint()>("constructorModifiers"), //
		jMethod<::jint()>("fieldModifiers"), //
		jMethod<::jint()>("interfaceModifiers"), //
		jMethod<::jboolean(::jint)>("isAbstract"), //
		jMethod<::jboolean(::jint)>("isFinal"), //
		jMethod<::jboolean(::jint)>("isInterface"), //
		jMethod<::jboolean(::jint)>("isNative"), //
		jMethod<::jboolean(::jint)>("isPrivate"), //
		jMethod<::jboolean(::jint)>("isProtected"), //
		jMethod<::jboolean(::jint)>("isPublic"), //
		jMethod<::jboolean(::jint)>("isStatic"), //
		jMethod<::jboolean(::jint)>("isStrict"), //
		jMethod<::jboolean(::jint)>("isSynchronized"), //
		jMethod<::jboolean(::jint)>("isTransient"), //
		jMethod<::jboolean(::jint)>("isVolatile"), //
		jMethod<::jint()>("methodModifiers"), //
		jMethod<::jint()>("parameterModifiers"), //
		jMethod<::java::lang::String(::jint)>("toString"), //
	};

	template<typename R = ::jint, typename... Args>
	static auto classModifiers(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("classModifiers")] != -1);
		return scall<R>("classModifiers", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto constructorModifiers(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("constructorModifiers")] != -1);
		return scall<R>("constructorModifiers", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto fieldModifiers(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("fieldModifiers")] != -1);
		return scall<R>("fieldModifiers", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto interfaceModifiers(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("interfaceModifiers")] != -1);
		return scall<R>("interfaceModifiers", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isAbstract(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isAbstract")] != -1);
		return scall<R>("isAbstract", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isFinal(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isFinal")] != -1);
		return scall<R>("isFinal", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isInterface(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isInterface")] != -1);
		return scall<R>("isInterface", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isNative(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isNative")] != -1);
		return scall<R>("isNative", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isPrivate(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isPrivate")] != -1);
		return scall<R>("isPrivate", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isProtected(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isProtected")] != -1);
		return scall<R>("isProtected", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isPublic(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isPublic")] != -1);
		return scall<R>("isPublic", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isStatic(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isStatic")] != -1);
		return scall<R>("isStatic", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isStrict(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isStrict")] != -1);
		return scall<R>("isStrict", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isSynchronized(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isSynchronized")] != -1);
		return scall<R>("isSynchronized", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isTransient(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isTransient")] != -1);
		return scall<R>("isTransient", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isVolatile(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isVolatile")] != -1);
		return scall<R>("isVolatile", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto methodModifiers(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("methodModifiers")] != -1);
		return scall<R>("methodModifiers", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto parameterModifiers(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("parameterModifiers")] != -1);
		return scall<R>("parameterModifiers", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto toString(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return scall<R>("toString", forward<Args>(args)...);
	}

};

#endif
