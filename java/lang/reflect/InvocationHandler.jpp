#ifndef java_lang_reflect_InvocationHandler_HPP
#define java_lang_reflect_InvocationHandler_HPP

#include "../../../jfwd_decl.hpp"

class ::java::lang::reflect::InvocationHandler : public jObject<::java::lang::reflect::InvocationHandler, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_lang_reflect / "InvocationHandler";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::reflect::Method, ::java::lang::Object *)>("invoke"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto invoke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("invoke")] != -1);
		return call<R>("invoke", forward<Args>(args)...);
	}

};

#endif
