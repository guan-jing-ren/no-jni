#ifndef java_lang_Thread$UncaughtExceptionHandler_HPP
#define java_lang_Thread$UncaughtExceptionHandler_HPP

#include "../../jfwd_decl.hpp"

class ::java::lang::Thread$UncaughtExceptionHandler : public jObject<::java::lang::Thread$UncaughtExceptionHandler, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_lang / "Thread$UncaughtExceptionHandler";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::lang::Thread, ::java::lang::Throwable)>("uncaughtException"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto uncaughtException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("uncaughtException")] != -1);
		return call<R>("uncaughtException", forward<Args>(args)...);
	}

};

#endif
