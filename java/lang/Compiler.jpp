#ifndef java_lang_Compiler_HPP
#define java_lang_Compiler_HPP

#include "../../jfwd_decl.hpp"

class ::java::lang::Compiler : public jObject<::java::lang::Compiler, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_lang / "Compiler";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Object(::java::lang::Object)>("command"), //
		jMethod<::jboolean(::java::lang::Class)>("compileClass"), //
		jMethod<::jboolean(::java::lang::String)>("compileClasses"), //
		jMethod<::jvoid()>("disable"), //
		jMethod<::jvoid()>("enable"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	static auto command(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("command")] != -1);
		return scall<R>("command", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto compileClass(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compileClass")] != -1);
		return scall<R>("compileClass", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto compileClasses(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compileClasses")] != -1);
		return scall<R>("compileClasses", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto disable(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("disable")] != -1);
		return scall<R>("disable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto enable(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("enable")] != -1);
		return scall<R>("enable", std::forward<Args>(args)...);
	}

};

#endif
