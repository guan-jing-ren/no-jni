#ifndef java_lang_SecurityManager_HPP
#define java_lang_SecurityManager_HPP

#include "../../jfwd_decl.hpp"

class ::java::lang::SecurityManager : public jObject<::java::lang::SecurityManager, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_lang / "SecurityManager";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::lang::String, ::jint)>("checkAccept"), //
		jMethod<::jvoid(::java::lang::Thread)>("checkAccess"), //
		jMethod<::jvoid(::java::lang::ThreadGroup)>("checkAccess"), //
		jMethod<::jvoid()>("checkAwtEventQueueAccess"), //
		jMethod<::jvoid(::java::lang::String, ::jint)>("checkConnect"), //
		jMethod<::jvoid(::java::lang::String, ::jint, ::java::lang::Object)>("checkConnect"), //
		jMethod<::jvoid()>("checkCreateClassLoader"), //
		jMethod<::jvoid(::java::lang::String)>("checkDelete"), //
		jMethod<::jvoid(::java::lang::String)>("checkExec"), //
		jMethod<::jvoid(::jint)>("checkExit"), //
		jMethod<::jvoid(::java::lang::String)>("checkLink"), //
		jMethod<::jvoid(::jint)>("checkListen"), //
		jMethod<::jvoid(::java::lang::Class, ::jint)>("checkMemberAccess"), //
		jMethod<::jvoid(::java::net::InetAddress)>("checkMulticast"), //
		jMethod<::jvoid(::java::net::InetAddress, ::jbyte)>("checkMulticast"), //
		jMethod<::jvoid(::java::lang::String)>("checkPackageAccess"), //
		jMethod<::jvoid(::java::lang::String)>("checkPackageDefinition"), //
		jMethod<::jvoid(::java::security::Permission)>("checkPermission"), //
		jMethod<::jvoid(::java::security::Permission, ::java::lang::Object)>("checkPermission"), //
		jMethod<::jvoid()>("checkPrintJobAccess"), //
		jMethod<::jvoid()>("checkPropertiesAccess"), //
		jMethod<::jvoid(::java::lang::String)>("checkPropertyAccess"), //
		jMethod<::jvoid(::java::io::FileDescriptor)>("checkRead"), //
		jMethod<::jvoid(::java::lang::String)>("checkRead"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object)>("checkRead"), //
		jMethod<::jvoid(::java::lang::String)>("checkSecurityAccess"), //
		jMethod<::jvoid()>("checkSetFactory"), //
		jMethod<::jvoid()>("checkSystemClipboardAccess"), //
		jMethod<::jboolean(::java::lang::Object)>("checkTopLevelWindow"), //
		jMethod<::jvoid(::java::io::FileDescriptor)>("checkWrite"), //
		jMethod<::jvoid(::java::lang::String)>("checkWrite"), //
		jMethod<::jboolean()>("getInCheck"), //
		jMethod<::java::lang::Object()>("getSecurityContext"), //
		jMethod<::java::lang::ThreadGroup()>("getThreadGroup"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto checkAccept(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkAccept")] != -1);
		return call<R>("checkAccept", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto checkAccess(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkAccess")] != -1);
		return call<R>("checkAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto checkAwtEventQueueAccess(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkAwtEventQueueAccess")] != -1);
		return call<R>("checkAwtEventQueueAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto checkConnect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkConnect")] != -1);
		return call<R>("checkConnect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto checkCreateClassLoader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkCreateClassLoader")] != -1);
		return call<R>("checkCreateClassLoader", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto checkDelete(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkDelete")] != -1);
		return call<R>("checkDelete", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto checkExec(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkExec")] != -1);
		return call<R>("checkExec", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto checkExit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkExit")] != -1);
		return call<R>("checkExit", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto checkLink(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkLink")] != -1);
		return call<R>("checkLink", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto checkListen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkListen")] != -1);
		return call<R>("checkListen", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto checkMemberAccess(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkMemberAccess")] != -1);
		return call<R>("checkMemberAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto checkMulticast(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkMulticast")] != -1);
		return call<R>("checkMulticast", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto checkPackageAccess(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkPackageAccess")] != -1);
		return call<R>("checkPackageAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto checkPackageDefinition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkPackageDefinition")] != -1);
		return call<R>("checkPackageDefinition", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto checkPermission(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkPermission")] != -1);
		return call<R>("checkPermission", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto checkPrintJobAccess(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkPrintJobAccess")] != -1);
		return call<R>("checkPrintJobAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto checkPropertiesAccess(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkPropertiesAccess")] != -1);
		return call<R>("checkPropertiesAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto checkPropertyAccess(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkPropertyAccess")] != -1);
		return call<R>("checkPropertyAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto checkRead(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkRead")] != -1);
		return call<R>("checkRead", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto checkSecurityAccess(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkSecurityAccess")] != -1);
		return call<R>("checkSecurityAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto checkSetFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkSetFactory")] != -1);
		return call<R>("checkSetFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto checkSystemClipboardAccess(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkSystemClipboardAccess")] != -1);
		return call<R>("checkSystemClipboardAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto checkTopLevelWindow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkTopLevelWindow")] != -1);
		return call<R>("checkTopLevelWindow", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto checkWrite(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkWrite")] != -1);
		return call<R>("checkWrite", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getInCheck(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInCheck")] != -1);
		return call<R>("getInCheck", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getSecurityContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSecurityContext")] != -1);
		return call<R>("getSecurityContext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::ThreadGroup, typename... Args>
	auto getThreadGroup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getThreadGroup")] != -1);
		return call<R>("getThreadGroup", std::forward<Args>(args)...);
	}

};

#endif
