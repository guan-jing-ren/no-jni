#ifndef java_lang_Package_HPP
#define java_lang_Package_HPP

#include "../../jfwd_decl.hpp"

class ::java::lang::Package : public jObject<::java::lang::Package, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_lang / "Package";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::annotation::Annotation(::java::lang::Class)>("getAnnotation"), //
		jMethod<::java::lang::annotation::Annotation *()>("getAnnotations"), //
		jMethod<::java::lang::annotation::Annotation *(::java::lang::Class)>("getAnnotationsByType"), //
		jMethod<::java::lang::annotation::Annotation(::java::lang::Class)>("getDeclaredAnnotation"), //
		jMethod<::java::lang::annotation::Annotation *()>("getDeclaredAnnotations"), //
		jMethod<::java::lang::annotation::Annotation *(::java::lang::Class)>("getDeclaredAnnotationsByType"), //
		jMethod<::java::lang::String()>("getImplementationTitle"), //
		jMethod<::java::lang::String()>("getImplementationVendor"), //
		jMethod<::java::lang::String()>("getImplementationVersion"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::lang::Package(::java::lang::String)>("getPackage"), //
		jMethod<::java::lang::Package *()>("getPackages"), //
		jMethod<::java::lang::String()>("getSpecificationTitle"), //
		jMethod<::java::lang::String()>("getSpecificationVendor"), //
		jMethod<::java::lang::String()>("getSpecificationVersion"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean(::java::lang::Class)>("isAnnotationPresent"), //
		jMethod<::jboolean(::java::lang::String)>("isCompatibleWith"), //
		jMethod<::jboolean()>("isSealed"), //
		jMethod<::jboolean(::java::net::URL)>("isSealed"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::annotation::Annotation, typename... Args>
	auto getAnnotation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAnnotation")] != -1);
		return call<R>("getAnnotation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::annotation::Annotation *, typename... Args>
	auto getAnnotations(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAnnotations")] != -1);
		return call<R>("getAnnotations", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::annotation::Annotation *, typename... Args>
	auto getAnnotationsByType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAnnotationsByType")] != -1);
		return call<R>("getAnnotationsByType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::annotation::Annotation, typename... Args>
	auto getDeclaredAnnotation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDeclaredAnnotation")] != -1);
		return call<R>("getDeclaredAnnotation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::annotation::Annotation *, typename... Args>
	auto getDeclaredAnnotations(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDeclaredAnnotations")] != -1);
		return call<R>("getDeclaredAnnotations", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::annotation::Annotation *, typename... Args>
	auto getDeclaredAnnotationsByType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDeclaredAnnotationsByType")] != -1);
		return call<R>("getDeclaredAnnotationsByType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getImplementationTitle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getImplementationTitle")] != -1);
		return call<R>("getImplementationTitle", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getImplementationVendor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getImplementationVendor")] != -1);
		return call<R>("getImplementationVendor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getImplementationVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getImplementationVersion")] != -1);
		return call<R>("getImplementationVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Package, typename... Args>
	static auto getPackage(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPackage")] != -1);
		return scall<R>("getPackage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Package *, typename... Args>
	static auto getPackages(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPackages")] != -1);
		return scall<R>("getPackages", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSpecificationTitle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSpecificationTitle")] != -1);
		return call<R>("getSpecificationTitle", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSpecificationVendor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSpecificationVendor")] != -1);
		return call<R>("getSpecificationVendor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSpecificationVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSpecificationVersion")] != -1);
		return call<R>("getSpecificationVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAnnotationPresent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAnnotationPresent")] != -1);
		return call<R>("isAnnotationPresent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCompatibleWith(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCompatibleWith")] != -1);
		return call<R>("isCompatibleWith", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSealed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSealed")] != -1);
		return call<R>("isSealed", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
