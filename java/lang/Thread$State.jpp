#ifndef java_lang_Thread$State_HPP
#define java_lang_Thread$State_HPP

#include "../../jfwd_decl.hpp"

class ::java::lang::Thread$State : public jObject<::java::lang::Thread$State, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_lang / "Thread$State";

	constexpr static Enume field_signatures{
		jField<::java::lang::Thread$State>("BLOCKED"), //
		jField<::java::lang::Thread$State>("NEW"), //
		jField<::java::lang::Thread$State>("RUNNABLE"), //
		jField<::java::lang::Thread$State>("TERMINATED"), //
		jField<::java::lang::Thread$State>("TIMED_WAITING"), //
		jField<::java::lang::Thread$State>("WAITING"), //
	};

	template<typename F = ::java::lang::Thread$State>
	static auto BLOCKED() {
		static_assert(field_signatures[jField<F>("BLOCKED")] != -1);
		return sat<F>("BLOCKED");
	}

	template<typename F = ::java::lang::Thread$State>
	static auto NEW() {
		static_assert(field_signatures[jField<F>("NEW")] != -1);
		return sat<F>("NEW");
	}

	template<typename F = ::java::lang::Thread$State>
	static auto RUNNABLE() {
		static_assert(field_signatures[jField<F>("RUNNABLE")] != -1);
		return sat<F>("RUNNABLE");
	}

	template<typename F = ::java::lang::Thread$State>
	static auto TERMINATED() {
		static_assert(field_signatures[jField<F>("TERMINATED")] != -1);
		return sat<F>("TERMINATED");
	}

	template<typename F = ::java::lang::Thread$State>
	static auto TIMED_WAITING() {
		static_assert(field_signatures[jField<F>("TIMED_WAITING")] != -1);
		return sat<F>("TIMED_WAITING");
	}

	template<typename F = ::java::lang::Thread$State>
	static auto WAITING() {
		static_assert(field_signatures[jField<F>("WAITING")] != -1);
		return sat<F>("WAITING");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Thread$State(::java::lang::String)>("valueOf"), //
		jMethod<::java::lang::Thread$State *()>("values"), //
	};

	template<typename R = ::java::lang::Thread$State, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Thread$State *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
