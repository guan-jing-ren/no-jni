#ifndef java_math_JPP
#define java_math_JPP

namespace java::math { class BigDecimal; }
template<> constexpr auto signature<::java::math::BigDecimal> = ::java_math / "BigDecimal";
namespace java::math { class BigDecimal$1; }
template<> constexpr auto signature<::java::math::BigDecimal$1> = ::java_math / "BigDecimal$1";
namespace java::math { class BigDecimal$LongOverflow; }
template<> constexpr auto signature<::java::math::BigDecimal$LongOverflow> = ::java_math / "BigDecimal$LongOverflow";
namespace java::math { class BigDecimal$StringBuilderHelper; }
template<> constexpr auto signature<::java::math::BigDecimal$StringBuilderHelper> = ::java_math / "BigDecimal$StringBuilderHelper";
namespace java::math { class BigDecimal$UnsafeHolder; }
template<> constexpr auto signature<::java::math::BigDecimal$UnsafeHolder> = ::java_math / "BigDecimal$UnsafeHolder";
namespace java::math { class BigInteger; }
template<> constexpr auto signature<::java::math::BigInteger> = ::java_math / "BigInteger";
namespace java::math { class BigInteger$UnsafeHolder; }
template<> constexpr auto signature<::java::math::BigInteger$UnsafeHolder> = ::java_math / "BigInteger$UnsafeHolder";
namespace java::math { class BitSieve; }
template<> constexpr auto signature<::java::math::BitSieve> = ::java_math / "BitSieve";
namespace java::math { class MathContext; }
template<> constexpr auto signature<::java::math::MathContext> = ::java_math / "MathContext";
namespace java::math { class MutableBigInteger; }
template<> constexpr auto signature<::java::math::MutableBigInteger> = ::java_math / "MutableBigInteger";
namespace java::math { class RoundingMode; }
template<> constexpr auto signature<::java::math::RoundingMode> = ::java_math / "RoundingMode";
namespace java::math { class SignedMutableBigInteger; }
template<> constexpr auto signature<::java::math::SignedMutableBigInteger> = ::java_math / "SignedMutableBigInteger";

#endif
