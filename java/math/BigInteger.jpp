#ifndef java_math_BigInteger_HPP
#define java_math_BigInteger_HPP

#include "../../jfwd_decl.hpp"

class ::java::math::BigInteger : public jObject<::java::math::BigInteger, ::java::lang::Number> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_math / "BigInteger";

	constexpr static Enume field_signatures{
		jField<::java::math::BigInteger>("ONE"), //
		jField<::java::math::BigInteger>("TEN"), //
		jField<::java::math::BigInteger>("ZERO"), //
	};

	template<typename F = ::java::math::BigInteger>
	static auto ONE() {
		static_assert(field_signatures[jField<F>("ONE")] != -1);
		return sat<F>("ONE");
	}

	template<typename F = ::java::math::BigInteger>
	static auto TEN() {
		static_assert(field_signatures[jField<F>("TEN")] != -1);
		return sat<F>("TEN");
	}

	template<typename F = ::java::math::BigInteger>
	static auto ZERO() {
		static_assert(field_signatures[jField<F>("ZERO")] != -1);
		return sat<F>("ZERO");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint, ::jint, ::java::util::Random)>(), //
		jConstructor<::jvoid(::jint, ::java::util::Random)>(), //
		jConstructor<::jvoid(::jint, ::jbyte *)>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::jint)>(), //
		jConstructor<::jvoid(::jbyte *)>(), //
		jMethod<::java::math::BigInteger()>("abs"), //
		jMethod<::java::math::BigInteger(::java::math::BigInteger)>("add"), //
		jMethod<::java::math::BigInteger(::java::math::BigInteger)>("and"), //
		jMethod<::java::math::BigInteger(::java::math::BigInteger)>("andNot"), //
		jMethod<::jint()>("bitCount"), //
		jMethod<::jint()>("bitLength"), //
		jMethod<::jbyte()>("byteValueExact"), //
		jMethod<::java::math::BigInteger(::jint)>("clearBit"), //
		jMethod<::jint(::java::lang::Object)>("compareTo"), //
		jMethod<::jint(::java::math::BigInteger)>("compareTo"), //
		jMethod<::java::math::BigInteger(::java::math::BigInteger)>("divide"), //
		jMethod<::java::math::BigInteger *(::java::math::BigInteger)>("divideAndRemainder"), //
		jMethod<::jdouble()>("doubleValue"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::math::BigInteger(::jint)>("flipBit"), //
		jMethod<::jfloat()>("floatValue"), //
		jMethod<::java::math::BigInteger(::java::math::BigInteger)>("gcd"), //
		jMethod<::jint()>("getLowestSetBit"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jint()>("intValue"), //
		jMethod<::jint()>("intValueExact"), //
		jMethod<::jboolean(::jint)>("isProbablePrime"), //
		jMethod<::jlong()>("longValue"), //
		jMethod<::jlong()>("longValueExact"), //
		jMethod<::java::math::BigInteger(::java::math::BigInteger)>("max"), //
		jMethod<::java::math::BigInteger(::java::math::BigInteger)>("min"), //
		jMethod<::java::math::BigInteger(::java::math::BigInteger)>("mod"), //
		jMethod<::java::math::BigInteger(::java::math::BigInteger)>("modInverse"), //
		jMethod<::java::math::BigInteger(::java::math::BigInteger, ::java::math::BigInteger)>("modPow"), //
		jMethod<::java::math::BigInteger(::java::math::BigInteger)>("multiply"), //
		jMethod<::java::math::BigInteger()>("negate"), //
		jMethod<::java::math::BigInteger()>("nextProbablePrime"), //
		jMethod<::java::math::BigInteger()>("not"), //
		jMethod<::java::math::BigInteger(::java::math::BigInteger)>("or"), //
		jMethod<::java::math::BigInteger(::jint)>("pow"), //
		jMethod<::java::math::BigInteger(::jint, ::java::util::Random)>("probablePrime"), //
		jMethod<::java::math::BigInteger(::java::math::BigInteger)>("remainder"), //
		jMethod<::java::math::BigInteger(::jint)>("setBit"), //
		jMethod<::java::math::BigInteger(::jint)>("shiftLeft"), //
		jMethod<::java::math::BigInteger(::jint)>("shiftRight"), //
		jMethod<::jshort()>("shortValueExact"), //
		jMethod<::jint()>("signum"), //
		jMethod<::java::math::BigInteger(::java::math::BigInteger)>("subtract"), //
		jMethod<::jboolean(::jint)>("testBit"), //
		jMethod<::jbyte *()>("toByteArray"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::lang::String(::jint)>("toString"), //
		jMethod<::java::math::BigInteger(::jlong)>("valueOf"), //
		jMethod<::java::math::BigInteger(::java::math::BigInteger)>("xor"), //
	};

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto abs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("abs")] != -1);
		return call<R>("abs", forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("add")] != -1);
		return call<R>("add", forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto and_(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("and")] != -1);
		return call<R>("and", forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto andNot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("andNot")] != -1);
		return call<R>("andNot", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto bitCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("bitCount")] != -1);
		return call<R>("bitCount", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto bitLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("bitLength")] != -1);
		return call<R>("bitLength", forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto byteValueExact(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("byteValueExact")] != -1);
		return call<R>("byteValueExact", forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto clearBit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clearBit")] != -1);
		return call<R>("clearBit", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto compareTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("compareTo")] != -1);
		return call<R>("compareTo", forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto divide(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("divide")] != -1);
		return call<R>("divide", forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger *, typename... Args>
	auto divideAndRemainder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("divideAndRemainder")] != -1);
		return call<R>("divideAndRemainder", forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto doubleValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("doubleValue")] != -1);
		return call<R>("doubleValue", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto flipBit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("flipBit")] != -1);
		return call<R>("flipBit", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto floatValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("floatValue")] != -1);
		return call<R>("floatValue", forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto gcd(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("gcd")] != -1);
		return call<R>("gcd", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLowestSetBit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLowestSetBit")] != -1);
		return call<R>("getLowestSetBit", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto intValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("intValue")] != -1);
		return call<R>("intValue", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto intValueExact(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("intValueExact")] != -1);
		return call<R>("intValueExact", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isProbablePrime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isProbablePrime")] != -1);
		return call<R>("isProbablePrime", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto longValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("longValue")] != -1);
		return call<R>("longValue", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto longValueExact(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("longValueExact")] != -1);
		return call<R>("longValueExact", forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto max(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("max")] != -1);
		return call<R>("max", forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto min(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("min")] != -1);
		return call<R>("min", forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto mod(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("mod")] != -1);
		return call<R>("mod", forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto modInverse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("modInverse")] != -1);
		return call<R>("modInverse", forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto modPow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("modPow")] != -1);
		return call<R>("modPow", forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto multiply(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("multiply")] != -1);
		return call<R>("multiply", forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto negate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("negate")] != -1);
		return call<R>("negate", forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto nextProbablePrime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("nextProbablePrime")] != -1);
		return call<R>("nextProbablePrime", forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto not_(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("not")] != -1);
		return call<R>("not", forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto or_(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("or")] != -1);
		return call<R>("or", forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto pow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("pow")] != -1);
		return call<R>("pow", forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	static auto probablePrime(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("probablePrime")] != -1);
		return scall<R>("probablePrime", forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto remainder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("remainder")] != -1);
		return call<R>("remainder", forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto setBit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBit")] != -1);
		return call<R>("setBit", forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto shiftLeft(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("shiftLeft")] != -1);
		return call<R>("shiftLeft", forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto shiftRight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("shiftRight")] != -1);
		return call<R>("shiftRight", forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto shortValueExact(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("shortValueExact")] != -1);
		return call<R>("shortValueExact", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto signum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("signum")] != -1);
		return call<R>("signum", forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto subtract(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("subtract")] != -1);
		return call<R>("subtract", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto testBit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("testBit")] != -1);
		return call<R>("testBit", forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto toByteArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toByteArray")] != -1);
		return call<R>("toByteArray", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto xor_(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("xor")] != -1);
		return call<R>("xor", forward<Args>(args)...);
	}

};

#endif
