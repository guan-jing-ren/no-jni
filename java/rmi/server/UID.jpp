#ifndef java_rmi_server_UID_HPP
#define java_rmi_server_UID_HPP

#include "../../../jfwd_decl.hpp"

class ::java::rmi::server::UID : public jObject<::java::rmi::server::UID, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_rmi_server / "UID";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jshort)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::rmi::server::UID(::java::io::DataInput)>("read"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid(::java::io::DataOutput)>("write"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::rmi::server::UID, typename... Args>
	static auto read(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("read")] != -1);
		return scall<R>("read", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write")] != -1);
		return call<R>("write", std::forward<Args>(args)...);
	}

};

#endif
