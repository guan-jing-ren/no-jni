#ifndef java_rmi_server_ServerRef_HPP
#define java_rmi_server_ServerRef_HPP

#include "../../../jfwd_decl.hpp"

class ::java::rmi::server::ServerRef : public jObject<::java::rmi::server::ServerRef, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_rmi_server / "ServerRef";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("packagePrefix"), //
		jField<::jlong>("serialVersionUID"), //
	};

	template<typename F = ::java::lang::String>
	static auto packagePrefix() {
		static_assert(field_signatures[jField<F>("packagePrefix")] != -1);
		return sat<F>("packagePrefix");
	}

	template<typename F = ::jlong>
	static auto serialVersionUID() {
		static_assert(field_signatures[jField<F>("serialVersionUID")] != -1);
		return sat<F>("serialVersionUID");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::rmi::server::RemoteStub(::java::rmi::Remote, ::java::lang::Object)>("exportObject"), //
		jMethod<::java::lang::String()>("getClientHost"), //
		jMethod<::java::lang::String(::java::io::ObjectOutput)>("getRefClass"), //
		jMethod<::java::lang::Object(::java::rmi::Remote, ::java::lang::reflect::Method, ::java::lang::Object *, ::jlong)>("invoke"), //
		jMethod<::jboolean(::java::rmi::server::RemoteRef)>("remoteEquals"), //
		jMethod<::jint()>("remoteHashCode"), //
		jMethod<::java::lang::String()>("remoteToString"), //
	};

	template<typename R = ::java::rmi::server::RemoteStub, typename... Args>
	auto exportObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("exportObject")] != -1);
		return call<R>("exportObject", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getClientHost(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClientHost")] != -1);
		return call<R>("getClientHost", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRefClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRefClass")] != -1);
		return call<R>("getRefClass", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto invoke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invoke")] != -1);
		return call<R>("invoke", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto remoteEquals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remoteEquals")] != -1);
		return call<R>("remoteEquals", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto remoteHashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remoteHashCode")] != -1);
		return call<R>("remoteHashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto remoteToString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remoteToString")] != -1);
		return call<R>("remoteToString", std::forward<Args>(args)...);
	}

};

#endif
