#ifndef java_rmi_registry_LocateRegistry_HPP
#define java_rmi_registry_LocateRegistry_HPP

#include "../../../jfwd_decl.hpp"

class ::java::rmi::registry::LocateRegistry : public jObject<::java::rmi::registry::LocateRegistry, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_rmi_registry / "LocateRegistry";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::rmi::registry::Registry(::jint)>("createRegistry"), //
		jMethod<::java::rmi::registry::Registry(::jint, ::java::rmi::server::RMIClientSocketFactory, ::java::rmi::server::RMIServerSocketFactory)>("createRegistry"), //
		jMethod<::java::rmi::registry::Registry()>("getRegistry"), //
		jMethod<::java::rmi::registry::Registry(::jint)>("getRegistry"), //
		jMethod<::java::rmi::registry::Registry(::java::lang::String)>("getRegistry"), //
		jMethod<::java::rmi::registry::Registry(::java::lang::String, ::jint)>("getRegistry"), //
		jMethod<::java::rmi::registry::Registry(::java::lang::String, ::jint, ::java::rmi::server::RMIClientSocketFactory)>("getRegistry"), //
	};

	template<typename R = ::java::rmi::registry::Registry, typename... Args>
	static auto createRegistry(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createRegistry")] != -1);
		return scall<R>("createRegistry", forward<Args>(args)...);
	}

	template<typename R = ::java::rmi::registry::Registry, typename... Args>
	static auto getRegistry(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRegistry")] != -1);
		return scall<R>("getRegistry", forward<Args>(args)...);
	}

};

#endif
