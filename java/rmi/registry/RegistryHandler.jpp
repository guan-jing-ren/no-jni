#ifndef java_rmi_registry_RegistryHandler_HPP
#define java_rmi_registry_RegistryHandler_HPP

#include "../../../jfwd_decl.hpp"

class ::java::rmi::registry::RegistryHandler : public jObject<::java::rmi::registry::RegistryHandler, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_rmi_registry / "RegistryHandler";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::rmi::registry::Registry(::jint)>("registryImpl"), //
		jMethod<::java::rmi::registry::Registry(::java::lang::String, ::jint)>("registryStub"), //
	};

	template<typename R = ::java::rmi::registry::Registry, typename... Args>
	auto registryImpl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("registryImpl")] != -1);
		return call<R>("registryImpl", std::forward<Args>(args)...);
	}

	template<typename R = ::java::rmi::registry::Registry, typename... Args>
	auto registryStub(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("registryStub")] != -1);
		return call<R>("registryStub", std::forward<Args>(args)...);
	}

};

#endif
