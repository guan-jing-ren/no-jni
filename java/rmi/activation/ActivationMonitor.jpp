#ifndef java_rmi_activation_ActivationMonitor_HPP
#define java_rmi_activation_ActivationMonitor_HPP

#include "../../../jfwd_decl.hpp"

class ::java::rmi::activation::ActivationMonitor : public jObject<::java::rmi::activation::ActivationMonitor, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_rmi_activation / "ActivationMonitor";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::rmi::activation::ActivationID, ::java::rmi::MarshalledObject)>("activeObject"), //
		jMethod<::jvoid(::java::rmi::activation::ActivationGroupID, ::jlong)>("inactiveGroup"), //
		jMethod<::jvoid(::java::rmi::activation::ActivationID)>("inactiveObject"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto activeObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("activeObject")] != -1);
		return call<R>("activeObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto inactiveGroup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("inactiveGroup")] != -1);
		return call<R>("inactiveGroup", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto inactiveObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("inactiveObject")] != -1);
		return call<R>("inactiveObject", std::forward<Args>(args)...);
	}

};

#endif
