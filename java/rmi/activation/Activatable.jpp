#ifndef java_rmi_activation_Activatable_HPP
#define java_rmi_activation_Activatable_HPP

#include "../../../jfwd_decl.hpp"

class ::java::rmi::activation::Activatable : public jObject<::java::rmi::activation::Activatable, ::java::rmi::server::RemoteServer> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_rmi_activation / "Activatable";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::rmi::activation::ActivationID(::java::rmi::Remote, ::java::lang::String, ::java::rmi::MarshalledObject, ::jboolean, ::jint)>("exportObject"), //
		jMethod<::java::rmi::activation::ActivationID(::java::rmi::Remote, ::java::lang::String, ::java::rmi::MarshalledObject, ::jboolean, ::jint, ::java::rmi::server::RMIClientSocketFactory, ::java::rmi::server::RMIServerSocketFactory)>("exportObject"), //
		jMethod<::java::rmi::Remote(::java::rmi::Remote, ::java::rmi::activation::ActivationID, ::jint)>("exportObject"), //
		jMethod<::java::rmi::Remote(::java::rmi::Remote, ::java::rmi::activation::ActivationID, ::jint, ::java::rmi::server::RMIClientSocketFactory, ::java::rmi::server::RMIServerSocketFactory)>("exportObject"), //
		jMethod<::jboolean(::java::rmi::activation::ActivationID)>("inactive"), //
		jMethod<::java::rmi::Remote(::java::rmi::activation::ActivationDesc)>("register"), //
		jMethod<::jboolean(::java::rmi::Remote, ::jboolean)>("unexportObject"), //
		jMethod<::jvoid(::java::rmi::activation::ActivationID)>("unregister"), //
	};

	template<typename R = ::java::rmi::activation::ActivationID, typename... Args>
	static auto exportObject(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("exportObject")] != -1);
		return scall<R>("exportObject", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto inactive(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("inactive")] != -1);
		return scall<R>("inactive", forward<Args>(args)...);
	}

	template<typename R = ::java::rmi::Remote, typename... Args>
	static auto register_(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("register")] != -1);
		return scall<R>("register", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto unexportObject(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("unexportObject")] != -1);
		return scall<R>("unexportObject", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto unregister(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("unregister")] != -1);
		return scall<R>("unregister", forward<Args>(args)...);
	}

};

#endif
