#ifndef java_rmi_dgc_Lease_HPP
#define java_rmi_dgc_Lease_HPP

#include "../../../jfwd_decl.hpp"

class ::java::rmi::dgc::Lease : public jObject<::java::rmi::dgc::Lease, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_rmi_dgc / "Lease";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::rmi::dgc::VMID, ::jlong)>(), //
		jMethod<::java::rmi::dgc::VMID()>("getVMID"), //
		jMethod<::jlong()>("getValue"), //
	};

	template<typename R = ::java::rmi::dgc::VMID, typename... Args>
	auto getVMID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVMID")] != -1);
		return call<R>("getVMID", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", std::forward<Args>(args)...);
	}

};

#endif
