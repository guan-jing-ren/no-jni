#ifndef java_util_Spliterators$AbstractSpliterator_HPP
#define java_util_Spliterators$AbstractSpliterator_HPP

#include "../../jfwd_decl.hpp"

class ::java::util::Spliterators$AbstractSpliterator : public jObject<::java::util::Spliterators$AbstractSpliterator, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util / "Spliterators$AbstractSpliterator";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint()>("characteristics"), //
		jMethod<::jlong()>("estimateSize"), //
		jMethod<::jboolean(::java::util::function::Consumer)>("tryAdvance"), //
		jMethod<::java::util::Spliterator()>("trySplit"), //
	};

	template<typename R = ::jint, typename... Args>
	auto characteristics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("characteristics")] != -1);
		return call<R>("characteristics", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto estimateSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("estimateSize")] != -1);
		return call<R>("estimateSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto tryAdvance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("tryAdvance")] != -1);
		return call<R>("tryAdvance", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Spliterator, typename... Args>
	auto trySplit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("trySplit")] != -1);
		return call<R>("trySplit", std::forward<Args>(args)...);
	}

};

#endif
