#ifndef java_util_LinkedHashMap_HPP
#define java_util_LinkedHashMap_HPP

#include "../../jfwd_decl.hpp"

class ::java::util::LinkedHashMap : public jObject<::java::util::LinkedHashMap, ::java::util::HashMap> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util / "LinkedHashMap";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint)>(), //
		jConstructor<::jvoid(::jint, ::jfloat)>(), //
		jConstructor<::jvoid(::jint, ::jfloat, ::jboolean)>(), //
		jConstructor<::jvoid(::java::util::Map)>(), //
		jMethod<::jvoid()>("clear"), //
		jMethod<::jboolean(::java::lang::Object)>("containsValue"), //
		jMethod<::java::util::Set()>("entrySet"), //
		jMethod<::jvoid(::java::util::function::BiConsumer)>("forEach"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("get"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Object)>("getOrDefault"), //
		jMethod<::java::util::Set()>("keySet"), //
		jMethod<::jvoid(::java::util::function::BiFunction)>("replaceAll"), //
		jMethod<::java::util::Collection()>("values"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto containsValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("containsValue")] != -1);
		return call<R>("containsValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto entrySet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("entrySet")] != -1);
		return call<R>("entrySet", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto forEach(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("forEach")] != -1);
		return call<R>("forEach", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getOrDefault(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOrDefault")] != -1);
		return call<R>("getOrDefault", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto keySet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("keySet")] != -1);
		return call<R>("keySet", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto replaceAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("replaceAll")] != -1);
		return call<R>("replaceAll", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Collection, typename... Args>
	auto values(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return call<R>("values", std::forward<Args>(args)...);
	}

};

#endif
