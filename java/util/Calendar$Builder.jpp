#ifndef java_util_Calendar$Builder_HPP
#define java_util_Calendar$Builder_HPP

#include "../../jfwd_decl.hpp"

class ::java::util::Calendar$Builder : public jObject<::java::util::Calendar$Builder, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util / "Calendar$Builder";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::util::Calendar()>("build"), //
		jMethod<::java::util::Calendar$Builder(::jint, ::jint)>("set"), //
		jMethod<::java::util::Calendar$Builder(::java::lang::String)>("setCalendarType"), //
		jMethod<::java::util::Calendar$Builder(::jint, ::jint, ::jint)>("setDate"), //
		jMethod<::java::util::Calendar$Builder(::jint *)>("setFields"), //
		jMethod<::java::util::Calendar$Builder(::jlong)>("setInstant"), //
		jMethod<::java::util::Calendar$Builder(::java::util::Date)>("setInstant"), //
		jMethod<::java::util::Calendar$Builder(::jboolean)>("setLenient"), //
		jMethod<::java::util::Calendar$Builder(::java::util::Locale)>("setLocale"), //
		jMethod<::java::util::Calendar$Builder(::jint, ::jint, ::jint)>("setTimeOfDay"), //
		jMethod<::java::util::Calendar$Builder(::jint, ::jint, ::jint, ::jint)>("setTimeOfDay"), //
		jMethod<::java::util::Calendar$Builder(::java::util::TimeZone)>("setTimeZone"), //
		jMethod<::java::util::Calendar$Builder(::jint, ::jint, ::jint)>("setWeekDate"), //
		jMethod<::java::util::Calendar$Builder(::jint, ::jint)>("setWeekDefinition"), //
	};

	template<typename R = ::java::util::Calendar, typename... Args>
	auto build(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("build")] != -1);
		return call<R>("build", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Calendar$Builder, typename... Args>
	auto set(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("set")] != -1);
		return call<R>("set", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Calendar$Builder, typename... Args>
	auto setCalendarType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCalendarType")] != -1);
		return call<R>("setCalendarType", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Calendar$Builder, typename... Args>
	auto setDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDate")] != -1);
		return call<R>("setDate", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Calendar$Builder, typename... Args>
	auto setFields(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFields")] != -1);
		return call<R>("setFields", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Calendar$Builder, typename... Args>
	auto setInstant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setInstant")] != -1);
		return call<R>("setInstant", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Calendar$Builder, typename... Args>
	auto setLenient(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLenient")] != -1);
		return call<R>("setLenient", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Calendar$Builder, typename... Args>
	auto setLocale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLocale")] != -1);
		return call<R>("setLocale", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Calendar$Builder, typename... Args>
	auto setTimeOfDay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setTimeOfDay")] != -1);
		return call<R>("setTimeOfDay", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Calendar$Builder, typename... Args>
	auto setTimeZone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setTimeZone")] != -1);
		return call<R>("setTimeZone", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Calendar$Builder, typename... Args>
	auto setWeekDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setWeekDate")] != -1);
		return call<R>("setWeekDate", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Calendar$Builder, typename... Args>
	auto setWeekDefinition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setWeekDefinition")] != -1);
		return call<R>("setWeekDefinition", forward<Args>(args)...);
	}

};

#endif
