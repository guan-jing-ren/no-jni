#ifndef java_util_TreeSet_HPP
#define java_util_TreeSet_HPP

#include "../../jfwd_decl.hpp"

class ::java::util::TreeSet : public jObject<::java::util::TreeSet, ::java::util::AbstractSet> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util / "TreeSet";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::util::Collection)>(), //
		jConstructor<::jvoid(::java::util::Comparator)>(), //
		jConstructor<::jvoid(::java::util::SortedSet)>(), //
		jMethod<::jboolean(::java::lang::Object)>("add"), //
		jMethod<::jboolean(::java::util::Collection)>("addAll"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("ceiling"), //
		jMethod<::jvoid()>("clear"), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::java::util::Comparator()>("comparator"), //
		jMethod<::jboolean(::java::lang::Object)>("contains"), //
		jMethod<::java::util::Iterator()>("descendingIterator"), //
		jMethod<::java::util::NavigableSet()>("descendingSet"), //
		jMethod<::java::lang::Object()>("first"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("floor"), //
		jMethod<::java::util::SortedSet(::java::lang::Object)>("headSet"), //
		jMethod<::java::util::NavigableSet(::java::lang::Object, ::jboolean)>("headSet"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("higher"), //
		jMethod<::jboolean()>("isEmpty"), //
		jMethod<::java::util::Iterator()>("iterator"), //
		jMethod<::java::lang::Object()>("last"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("lower"), //
		jMethod<::java::lang::Object()>("pollFirst"), //
		jMethod<::java::lang::Object()>("pollLast"), //
		jMethod<::jboolean(::java::lang::Object)>("remove"), //
		jMethod<::jint()>("size"), //
		jMethod<::java::util::Spliterator()>("spliterator"), //
		jMethod<::java::util::SortedSet(::java::lang::Object, ::java::lang::Object)>("subSet"), //
		jMethod<::java::util::NavigableSet(::java::lang::Object, ::jboolean, ::java::lang::Object, ::jboolean)>("subSet"), //
		jMethod<::java::util::SortedSet(::java::lang::Object)>("tailSet"), //
		jMethod<::java::util::NavigableSet(::java::lang::Object, ::jboolean)>("tailSet"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("add")] != -1);
		return call<R>("add", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto addAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addAll")] != -1);
		return call<R>("addAll", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto ceiling(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("ceiling")] != -1);
		return call<R>("ceiling", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Comparator, typename... Args>
	auto comparator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("comparator")] != -1);
		return call<R>("comparator", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto contains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("contains")] != -1);
		return call<R>("contains", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto descendingIterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("descendingIterator")] != -1);
		return call<R>("descendingIterator", forward<Args>(args)...);
	}

	template<typename R = ::java::util::NavigableSet, typename... Args>
	auto descendingSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("descendingSet")] != -1);
		return call<R>("descendingSet", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto first(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("first")] != -1);
		return call<R>("first", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto floor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("floor")] != -1);
		return call<R>("floor", forward<Args>(args)...);
	}

	template<typename R = ::java::util::SortedSet, typename... Args>
	auto headSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("headSet")] != -1);
		return call<R>("headSet", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto higher(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("higher")] != -1);
		return call<R>("higher", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isEmpty")] != -1);
		return call<R>("isEmpty", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto iterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("iterator")] != -1);
		return call<R>("iterator", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto last(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("last")] != -1);
		return call<R>("last", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto lower(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("lower")] != -1);
		return call<R>("lower", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto pollFirst(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("pollFirst")] != -1);
		return call<R>("pollFirst", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto pollLast(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("pollLast")] != -1);
		return call<R>("pollLast", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto size(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("size")] != -1);
		return call<R>("size", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Spliterator, typename... Args>
	auto spliterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("spliterator")] != -1);
		return call<R>("spliterator", forward<Args>(args)...);
	}

	template<typename R = ::java::util::SortedSet, typename... Args>
	auto subSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("subSet")] != -1);
		return call<R>("subSet", forward<Args>(args)...);
	}

	template<typename R = ::java::util::SortedSet, typename... Args>
	auto tailSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("tailSet")] != -1);
		return call<R>("tailSet", forward<Args>(args)...);
	}

};

#endif
