#ifndef java_util_SortedMap_HPP
#define java_util_SortedMap_HPP

#include "../../jfwd_decl.hpp"

class ::java::util::SortedMap : public jObject<::java::util::SortedMap, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util / "SortedMap";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("clear"), //
		jMethod<::java::util::Comparator()>("comparator"), //
		jMethod<::jboolean(::java::lang::Object)>("containsKey"), //
		jMethod<::jboolean(::java::lang::Object)>("containsValue"), //
		jMethod<::java::util::Set()>("entrySet"), //
		jMethod<::java::lang::Object()>("firstKey"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("get"), //
		jMethod<::java::util::SortedMap(::java::lang::Object)>("headMap"), //
		jMethod<::jboolean()>("isEmpty"), //
		jMethod<::java::util::Set()>("keySet"), //
		jMethod<::java::lang::Object()>("lastKey"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Object)>("put"), //
		jMethod<::jvoid(::java::util::Map)>("putAll"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("remove"), //
		jMethod<::jint()>("size"), //
		jMethod<::java::util::SortedMap(::java::lang::Object, ::java::lang::Object)>("subMap"), //
		jMethod<::java::util::SortedMap(::java::lang::Object)>("tailMap"), //
		jMethod<::java::util::Collection()>("values"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Comparator, typename... Args>
	auto comparator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("comparator")] != -1);
		return call<R>("comparator", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto containsKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("containsKey")] != -1);
		return call<R>("containsKey", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto containsValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("containsValue")] != -1);
		return call<R>("containsValue", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto entrySet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("entrySet")] != -1);
		return call<R>("entrySet", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto firstKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("firstKey")] != -1);
		return call<R>("firstKey", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("get")] != -1);
		return call<R>("get", forward<Args>(args)...);
	}

	template<typename R = ::java::util::SortedMap, typename... Args>
	auto headMap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("headMap")] != -1);
		return call<R>("headMap", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isEmpty")] != -1);
		return call<R>("isEmpty", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto keySet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("keySet")] != -1);
		return call<R>("keySet", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto lastKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("lastKey")] != -1);
		return call<R>("lastKey", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto put(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("put")] != -1);
		return call<R>("put", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("putAll")] != -1);
		return call<R>("putAll", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto size(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("size")] != -1);
		return call<R>("size", forward<Args>(args)...);
	}

	template<typename R = ::java::util::SortedMap, typename... Args>
	auto subMap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("subMap")] != -1);
		return call<R>("subMap", forward<Args>(args)...);
	}

	template<typename R = ::java::util::SortedMap, typename... Args>
	auto tailMap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("tailMap")] != -1);
		return call<R>("tailMap", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Collection, typename... Args>
	auto values(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("values")] != -1);
		return call<R>("values", forward<Args>(args)...);
	}

};

#endif
