#ifndef java_util_FormatFlagsConversionMismatchException_HPP
#define java_util_FormatFlagsConversionMismatchException_HPP

#include "../../jfwd_decl.hpp"

class ::java::util::FormatFlagsConversionMismatchException : public jObject<::java::util::FormatFlagsConversionMismatchException, ::java::util::IllegalFormatException> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util / "FormatFlagsConversionMismatchException";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::jchar)>(), //
		jMethod<::jchar()>("getConversion"), //
		jMethod<::java::lang::String()>("getFlags"), //
		jMethod<::java::lang::String()>("getMessage"), //
	};

	template<typename R = ::jchar, typename... Args>
	auto getConversion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getConversion")] != -1);
		return call<R>("getConversion", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFlags(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFlags")] != -1);
		return call<R>("getFlags", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMessage")] != -1);
		return call<R>("getMessage", forward<Args>(args)...);
	}

};

#endif
