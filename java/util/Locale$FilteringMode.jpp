#ifndef java_util_Locale$FilteringMode_HPP
#define java_util_Locale$FilteringMode_HPP

#include "../../jfwd_decl.hpp"

class ::java::util::Locale$FilteringMode : public jObject<::java::util::Locale$FilteringMode, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util / "Locale$FilteringMode";

	constexpr static Enume field_signatures{
		jField<::java::util::Locale$FilteringMode>("AUTOSELECT_FILTERING"), //
		jField<::java::util::Locale$FilteringMode>("EXTENDED_FILTERING"), //
		jField<::java::util::Locale$FilteringMode>("IGNORE_EXTENDED_RANGES"), //
		jField<::java::util::Locale$FilteringMode>("MAP_EXTENDED_RANGES"), //
		jField<::java::util::Locale$FilteringMode>("REJECT_EXTENDED_RANGES"), //
	};

	template<typename F = ::java::util::Locale$FilteringMode>
	static auto AUTOSELECT_FILTERING() {
		static_assert(field_signatures[jField<F>("AUTOSELECT_FILTERING")] != -1);
		return sat<F>("AUTOSELECT_FILTERING");
	}

	template<typename F = ::java::util::Locale$FilteringMode>
	static auto EXTENDED_FILTERING() {
		static_assert(field_signatures[jField<F>("EXTENDED_FILTERING")] != -1);
		return sat<F>("EXTENDED_FILTERING");
	}

	template<typename F = ::java::util::Locale$FilteringMode>
	static auto IGNORE_EXTENDED_RANGES() {
		static_assert(field_signatures[jField<F>("IGNORE_EXTENDED_RANGES")] != -1);
		return sat<F>("IGNORE_EXTENDED_RANGES");
	}

	template<typename F = ::java::util::Locale$FilteringMode>
	static auto MAP_EXTENDED_RANGES() {
		static_assert(field_signatures[jField<F>("MAP_EXTENDED_RANGES")] != -1);
		return sat<F>("MAP_EXTENDED_RANGES");
	}

	template<typename F = ::java::util::Locale$FilteringMode>
	static auto REJECT_EXTENDED_RANGES() {
		static_assert(field_signatures[jField<F>("REJECT_EXTENDED_RANGES")] != -1);
		return sat<F>("REJECT_EXTENDED_RANGES");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::util::Locale$FilteringMode(::java::lang::String)>("valueOf"), //
		jMethod<::java::util::Locale$FilteringMode *()>("values"), //
	};

	template<typename R = ::java::util::Locale$FilteringMode, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale$FilteringMode *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
