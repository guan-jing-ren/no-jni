#ifndef java_util_concurrent_ForkJoinWorkerThread_HPP
#define java_util_concurrent_ForkJoinWorkerThread_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::concurrent::ForkJoinWorkerThread : public jObject<::java::util::concurrent::ForkJoinWorkerThread, ::java::lang::Thread> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_concurrent / "ForkJoinWorkerThread";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::util::concurrent::ForkJoinPool()>("getPool"), //
		jMethod<::jint()>("getPoolIndex"), //
		jMethod<::jvoid()>("run"), //
	};

	template<typename R = ::java::util::concurrent::ForkJoinPool, typename... Args>
	auto getPool(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPool")] != -1);
		return call<R>("getPool", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPoolIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPoolIndex")] != -1);
		return call<R>("getPoolIndex", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto run(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("run")] != -1);
		return call<R>("run", forward<Args>(args)...);
	}

};

#endif
