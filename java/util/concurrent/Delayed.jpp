#ifndef java_util_concurrent_Delayed_HPP
#define java_util_concurrent_Delayed_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::concurrent::Delayed : public jObject<::java::util::concurrent::Delayed, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_concurrent / "Delayed";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jlong(::java::util::concurrent::TimeUnit)>("getDelay"), //
	};

	template<typename R = ::jlong, typename... Args>
	auto getDelay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDelay")] != -1);
		return call<R>("getDelay", forward<Args>(args)...);
	}

};

#endif
