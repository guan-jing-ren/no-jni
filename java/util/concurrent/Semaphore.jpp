#ifndef java_util_concurrent_Semaphore_HPP
#define java_util_concurrent_Semaphore_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::concurrent::Semaphore : public jObject<::java::util::concurrent::Semaphore, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_concurrent / "Semaphore";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint)>(), //
		jConstructor<::jvoid(::jint, ::jboolean)>(), //
		jMethod<::jvoid()>("acquire"), //
		jMethod<::jvoid(::jint)>("acquire"), //
		jMethod<::jvoid()>("acquireUninterruptibly"), //
		jMethod<::jvoid(::jint)>("acquireUninterruptibly"), //
		jMethod<::jint()>("availablePermits"), //
		jMethod<::jint()>("drainPermits"), //
		jMethod<::jint()>("getQueueLength"), //
		jMethod<::jboolean()>("hasQueuedThreads"), //
		jMethod<::jboolean()>("isFair"), //
		jMethod<::jvoid()>("release"), //
		jMethod<::jvoid(::jint)>("release"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jboolean()>("tryAcquire"), //
		jMethod<::jboolean(::jint)>("tryAcquire"), //
		jMethod<::jboolean(::jint, ::jlong, ::java::util::concurrent::TimeUnit)>("tryAcquire"), //
		jMethod<::jboolean(::jlong, ::java::util::concurrent::TimeUnit)>("tryAcquire"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto acquire(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("acquire")] != -1);
		return call<R>("acquire", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto acquireUninterruptibly(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("acquireUninterruptibly")] != -1);
		return call<R>("acquireUninterruptibly", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto availablePermits(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("availablePermits")] != -1);
		return call<R>("availablePermits", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto drainPermits(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("drainPermits")] != -1);
		return call<R>("drainPermits", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getQueueLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getQueueLength")] != -1);
		return call<R>("getQueueLength", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasQueuedThreads(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hasQueuedThreads")] != -1);
		return call<R>("hasQueuedThreads", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFair(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isFair")] != -1);
		return call<R>("isFair", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto release(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("release")] != -1);
		return call<R>("release", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto tryAcquire(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("tryAcquire")] != -1);
		return call<R>("tryAcquire", forward<Args>(args)...);
	}

};

#endif
