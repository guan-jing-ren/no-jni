#ifndef java_util_concurrent_ForkJoinTask_HPP
#define java_util_concurrent_ForkJoinTask_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::concurrent::ForkJoinTask : public jObject<::java::util::concurrent::ForkJoinTask, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_concurrent / "ForkJoinTask";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::util::concurrent::ForkJoinTask(::java::lang::Runnable)>("adapt"), //
		jMethod<::java::util::concurrent::ForkJoinTask(::java::lang::Runnable, ::java::lang::Object)>("adapt"), //
		jMethod<::java::util::concurrent::ForkJoinTask(::java::util::concurrent::Callable)>("adapt"), //
		jMethod<::jboolean(::jboolean)>("cancel"), //
		jMethod<::jboolean(::jshort, ::jshort)>("compareAndSetForkJoinTaskTag"), //
		jMethod<::jvoid(::java::lang::Object)>("complete"), //
		jMethod<::jvoid(::java::lang::Throwable)>("completeExceptionally"), //
		jMethod<::java::util::concurrent::ForkJoinTask()>("fork"), //
		jMethod<::java::lang::Object()>("get"), //
		jMethod<::java::lang::Object(::jlong, ::java::util::concurrent::TimeUnit)>("get"), //
		jMethod<::java::lang::Throwable()>("getException"), //
		jMethod<::jshort()>("getForkJoinTaskTag"), //
		jMethod<::java::util::concurrent::ForkJoinPool()>("getPool"), //
		jMethod<::jint()>("getQueuedTaskCount"), //
		jMethod<::java::lang::Object()>("getRawResult"), //
		jMethod<::jint()>("getSurplusQueuedTaskCount"), //
		jMethod<::jvoid()>("helpQuiesce"), //
		jMethod<::jboolean()>("inForkJoinPool"), //
		jMethod<::java::lang::Object()>("invoke"), //
		jMethod<::java::util::Collection(::java::util::Collection)>("invokeAll"), //
		jMethod<::jvoid(::java::util::concurrent::ForkJoinTask, ::java::util::concurrent::ForkJoinTask)>("invokeAll"), //
		jMethod<::jvoid(::java::util::concurrent::ForkJoinTask *)>("invokeAll"), //
		jMethod<::jboolean()>("isCancelled"), //
		jMethod<::jboolean()>("isCompletedAbnormally"), //
		jMethod<::jboolean()>("isCompletedNormally"), //
		jMethod<::jboolean()>("isDone"), //
		jMethod<::java::lang::Object()>("join"), //
		jMethod<::jvoid()>("quietlyComplete"), //
		jMethod<::jvoid()>("quietlyInvoke"), //
		jMethod<::jvoid()>("quietlyJoin"), //
		jMethod<::jvoid()>("reinitialize"), //
		jMethod<::jshort(::jshort)>("setForkJoinTaskTag"), //
		jMethod<::jboolean()>("tryUnfork"), //
	};

	template<typename R = ::java::util::concurrent::ForkJoinTask, typename... Args>
	static auto adapt(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("adapt")] != -1);
		return scall<R>("adapt", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto cancel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cancel")] != -1);
		return call<R>("cancel", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto compareAndSetForkJoinTaskTag(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compareAndSetForkJoinTaskTag")] != -1);
		return call<R>("compareAndSetForkJoinTaskTag", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto complete(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("complete")] != -1);
		return call<R>("complete", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto completeExceptionally(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("completeExceptionally")] != -1);
		return call<R>("completeExceptionally", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::concurrent::ForkJoinTask, typename... Args>
	auto fork(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fork")] != -1);
		return call<R>("fork", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Throwable, typename... Args>
	auto getException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getException")] != -1);
		return call<R>("getException", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto getForkJoinTaskTag(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getForkJoinTaskTag")] != -1);
		return call<R>("getForkJoinTaskTag", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::concurrent::ForkJoinPool, typename... Args>
	static auto getPool(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPool")] != -1);
		return scall<R>("getPool", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getQueuedTaskCount(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getQueuedTaskCount")] != -1);
		return scall<R>("getQueuedTaskCount", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getRawResult(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRawResult")] != -1);
		return call<R>("getRawResult", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getSurplusQueuedTaskCount(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSurplusQueuedTaskCount")] != -1);
		return scall<R>("getSurplusQueuedTaskCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto helpQuiesce(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("helpQuiesce")] != -1);
		return scall<R>("helpQuiesce", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto inForkJoinPool(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("inForkJoinPool")] != -1);
		return scall<R>("inForkJoinPool", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto invoke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invoke")] != -1);
		return call<R>("invoke", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Collection, typename... Args>
	static auto invokeAll(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invokeAll")] != -1);
		return scall<R>("invokeAll", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCancelled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCancelled")] != -1);
		return call<R>("isCancelled", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCompletedAbnormally(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCompletedAbnormally")] != -1);
		return call<R>("isCompletedAbnormally", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCompletedNormally(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCompletedNormally")] != -1);
		return call<R>("isCompletedNormally", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDone")] != -1);
		return call<R>("isDone", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto join(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("join")] != -1);
		return call<R>("join", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto quietlyComplete(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("quietlyComplete")] != -1);
		return call<R>("quietlyComplete", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto quietlyInvoke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("quietlyInvoke")] != -1);
		return call<R>("quietlyInvoke", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto quietlyJoin(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("quietlyJoin")] != -1);
		return call<R>("quietlyJoin", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reinitialize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reinitialize")] != -1);
		return call<R>("reinitialize", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto setForkJoinTaskTag(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setForkJoinTaskTag")] != -1);
		return call<R>("setForkJoinTaskTag", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto tryUnfork(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("tryUnfork")] != -1);
		return call<R>("tryUnfork", std::forward<Args>(args)...);
	}

};

#endif
