#ifndef java_util_concurrent_ConcurrentHashMap_HPP
#define java_util_concurrent_ConcurrentHashMap_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::concurrent::ConcurrentHashMap : public jObject<::java::util::concurrent::ConcurrentHashMap, ::java::util::AbstractMap> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_concurrent / "ConcurrentHashMap";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint)>(), //
		jConstructor<::jvoid(::jint, ::jfloat)>(), //
		jConstructor<::jvoid(::jint, ::jfloat, ::jint)>(), //
		jConstructor<::jvoid(::java::util::Map)>(), //
		jMethod<::jvoid()>("clear"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::util::function::BiFunction)>("compute"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::util::function::Function)>("computeIfAbsent"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::util::function::BiFunction)>("computeIfPresent"), //
		jMethod<::jboolean(::java::lang::Object)>("contains"), //
		jMethod<::jboolean(::java::lang::Object)>("containsKey"), //
		jMethod<::jboolean(::java::lang::Object)>("containsValue"), //
		jMethod<::java::util::Enumeration()>("elements"), //
		jMethod<::java::util::Set()>("entrySet"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jvoid(::jlong, ::java::util::function::BiConsumer)>("forEach"), //
		jMethod<::jvoid(::jlong, ::java::util::function::BiFunction, ::java::util::function::Consumer)>("forEach"), //
		jMethod<::jvoid(::java::util::function::BiConsumer)>("forEach"), //
		jMethod<::jvoid(::jlong, ::java::util::function::Consumer)>("forEachEntry"), //
		jMethod<::jvoid(::jlong, ::java::util::function::Function, ::java::util::function::Consumer)>("forEachEntry"), //
		jMethod<::jvoid(::jlong, ::java::util::function::Consumer)>("forEachKey"), //
		jMethod<::jvoid(::jlong, ::java::util::function::Function, ::java::util::function::Consumer)>("forEachKey"), //
		jMethod<::jvoid(::jlong, ::java::util::function::Consumer)>("forEachValue"), //
		jMethod<::jvoid(::jlong, ::java::util::function::Function, ::java::util::function::Consumer)>("forEachValue"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("get"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Object)>("getOrDefault"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isEmpty"), //
		jMethod<::java::util::Set()>("keySet"), //
		jMethod<::java::util::concurrent::ConcurrentHashMap$KeySetView()>("keySet"), //
		jMethod<::java::util::concurrent::ConcurrentHashMap$KeySetView(::java::lang::Object)>("keySet"), //
		jMethod<::java::util::Enumeration()>("keys"), //
		jMethod<::jlong()>("mappingCount"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Object, ::java::util::function::BiFunction)>("merge"), //
		jMethod<::java::util::concurrent::ConcurrentHashMap$KeySetView()>("newKeySet"), //
		jMethod<::java::util::concurrent::ConcurrentHashMap$KeySetView(::jint)>("newKeySet"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Object)>("put"), //
		jMethod<::jvoid(::java::util::Map)>("putAll"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Object)>("putIfAbsent"), //
		jMethod<::java::lang::Object(::jlong, ::java::util::function::BiFunction, ::java::util::function::BiFunction)>("reduce"), //
		jMethod<::java::util::Map$Entry(::jlong, ::java::util::function::BiFunction)>("reduceEntries"), //
		jMethod<::java::lang::Object(::jlong, ::java::util::function::Function, ::java::util::function::BiFunction)>("reduceEntries"), //
		jMethod<::jdouble(::jlong, ::java::util::function::ToDoubleFunction, ::jdouble, ::java::util::function::DoubleBinaryOperator)>("reduceEntriesToDouble"), //
		jMethod<::jint(::jlong, ::java::util::function::ToIntFunction, ::jint, ::java::util::function::IntBinaryOperator)>("reduceEntriesToInt"), //
		jMethod<::jlong(::jlong, ::java::util::function::ToLongFunction, ::jlong, ::java::util::function::LongBinaryOperator)>("reduceEntriesToLong"), //
		jMethod<::java::lang::Object(::jlong, ::java::util::function::BiFunction)>("reduceKeys"), //
		jMethod<::java::lang::Object(::jlong, ::java::util::function::Function, ::java::util::function::BiFunction)>("reduceKeys"), //
		jMethod<::jdouble(::jlong, ::java::util::function::ToDoubleFunction, ::jdouble, ::java::util::function::DoubleBinaryOperator)>("reduceKeysToDouble"), //
		jMethod<::jint(::jlong, ::java::util::function::ToIntFunction, ::jint, ::java::util::function::IntBinaryOperator)>("reduceKeysToInt"), //
		jMethod<::jlong(::jlong, ::java::util::function::ToLongFunction, ::jlong, ::java::util::function::LongBinaryOperator)>("reduceKeysToLong"), //
		jMethod<::jdouble(::jlong, ::java::util::function::ToDoubleBiFunction, ::jdouble, ::java::util::function::DoubleBinaryOperator)>("reduceToDouble"), //
		jMethod<::jint(::jlong, ::java::util::function::ToIntBiFunction, ::jint, ::java::util::function::IntBinaryOperator)>("reduceToInt"), //
		jMethod<::jlong(::jlong, ::java::util::function::ToLongBiFunction, ::jlong, ::java::util::function::LongBinaryOperator)>("reduceToLong"), //
		jMethod<::java::lang::Object(::jlong, ::java::util::function::BiFunction)>("reduceValues"), //
		jMethod<::java::lang::Object(::jlong, ::java::util::function::Function, ::java::util::function::BiFunction)>("reduceValues"), //
		jMethod<::jdouble(::jlong, ::java::util::function::ToDoubleFunction, ::jdouble, ::java::util::function::DoubleBinaryOperator)>("reduceValuesToDouble"), //
		jMethod<::jint(::jlong, ::java::util::function::ToIntFunction, ::jint, ::java::util::function::IntBinaryOperator)>("reduceValuesToInt"), //
		jMethod<::jlong(::jlong, ::java::util::function::ToLongFunction, ::jlong, ::java::util::function::LongBinaryOperator)>("reduceValuesToLong"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("remove"), //
		jMethod<::jboolean(::java::lang::Object, ::java::lang::Object)>("remove"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Object)>("replace"), //
		jMethod<::jboolean(::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("replace"), //
		jMethod<::jvoid(::java::util::function::BiFunction)>("replaceAll"), //
		jMethod<::java::lang::Object(::jlong, ::java::util::function::BiFunction)>("search"), //
		jMethod<::java::lang::Object(::jlong, ::java::util::function::Function)>("searchEntries"), //
		jMethod<::java::lang::Object(::jlong, ::java::util::function::Function)>("searchKeys"), //
		jMethod<::java::lang::Object(::jlong, ::java::util::function::Function)>("searchValues"), //
		jMethod<::jint()>("size"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::util::Collection()>("values"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto compute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("compute")] != -1);
		return call<R>("compute", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto computeIfAbsent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("computeIfAbsent")] != -1);
		return call<R>("computeIfAbsent", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto computeIfPresent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("computeIfPresent")] != -1);
		return call<R>("computeIfPresent", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto contains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("contains")] != -1);
		return call<R>("contains", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto containsKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("containsKey")] != -1);
		return call<R>("containsKey", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto containsValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("containsValue")] != -1);
		return call<R>("containsValue", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto elements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("elements")] != -1);
		return call<R>("elements", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto entrySet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("entrySet")] != -1);
		return call<R>("entrySet", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto forEach(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("forEach")] != -1);
		return call<R>("forEach", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto forEachEntry(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("forEachEntry")] != -1);
		return call<R>("forEachEntry", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto forEachKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("forEachKey")] != -1);
		return call<R>("forEachKey", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto forEachValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("forEachValue")] != -1);
		return call<R>("forEachValue", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("get")] != -1);
		return call<R>("get", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getOrDefault(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getOrDefault")] != -1);
		return call<R>("getOrDefault", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isEmpty")] != -1);
		return call<R>("isEmpty", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto keySet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("keySet")] != -1);
		return call<R>("keySet", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto keys(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("keys")] != -1);
		return call<R>("keys", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto mappingCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("mappingCount")] != -1);
		return call<R>("mappingCount", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto merge(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("merge")] != -1);
		return call<R>("merge", forward<Args>(args)...);
	}

	template<typename R = ::java::util::concurrent::ConcurrentHashMap$KeySetView, typename... Args>
	static auto newKeySet(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("newKeySet")] != -1);
		return scall<R>("newKeySet", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto put(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("put")] != -1);
		return call<R>("put", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("putAll")] != -1);
		return call<R>("putAll", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto putIfAbsent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("putIfAbsent")] != -1);
		return call<R>("putIfAbsent", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto reduce(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reduce")] != -1);
		return call<R>("reduce", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map$Entry, typename... Args>
	auto reduceEntries(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reduceEntries")] != -1);
		return call<R>("reduceEntries", forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto reduceEntriesToDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reduceEntriesToDouble")] != -1);
		return call<R>("reduceEntriesToDouble", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto reduceEntriesToInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reduceEntriesToInt")] != -1);
		return call<R>("reduceEntriesToInt", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto reduceEntriesToLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reduceEntriesToLong")] != -1);
		return call<R>("reduceEntriesToLong", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto reduceKeys(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reduceKeys")] != -1);
		return call<R>("reduceKeys", forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto reduceKeysToDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reduceKeysToDouble")] != -1);
		return call<R>("reduceKeysToDouble", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto reduceKeysToInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reduceKeysToInt")] != -1);
		return call<R>("reduceKeysToInt", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto reduceKeysToLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reduceKeysToLong")] != -1);
		return call<R>("reduceKeysToLong", forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto reduceToDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reduceToDouble")] != -1);
		return call<R>("reduceToDouble", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto reduceToInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reduceToInt")] != -1);
		return call<R>("reduceToInt", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto reduceToLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reduceToLong")] != -1);
		return call<R>("reduceToLong", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto reduceValues(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reduceValues")] != -1);
		return call<R>("reduceValues", forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto reduceValuesToDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reduceValuesToDouble")] != -1);
		return call<R>("reduceValuesToDouble", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto reduceValuesToInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reduceValuesToInt")] != -1);
		return call<R>("reduceValuesToInt", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto reduceValuesToLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reduceValuesToLong")] != -1);
		return call<R>("reduceValuesToLong", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto replace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("replace")] != -1);
		return call<R>("replace", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto replaceAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("replaceAll")] != -1);
		return call<R>("replaceAll", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto search(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("search")] != -1);
		return call<R>("search", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto searchEntries(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("searchEntries")] != -1);
		return call<R>("searchEntries", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto searchKeys(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("searchKeys")] != -1);
		return call<R>("searchKeys", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto searchValues(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("searchValues")] != -1);
		return call<R>("searchValues", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto size(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("size")] != -1);
		return call<R>("size", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Collection, typename... Args>
	auto values(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("values")] != -1);
		return call<R>("values", forward<Args>(args)...);
	}

};

#endif
