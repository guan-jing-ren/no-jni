#ifndef java_util_concurrent_JPP
#define java_util_concurrent_JPP

namespace java::util::concurrent { class AbstractExecutorService; }
template<> constexpr auto signature<::java::util::concurrent::AbstractExecutorService> = ::java_util_concurrent / "AbstractExecutorService";
namespace java::util::concurrent { class ArrayBlockingQueue; }
template<> constexpr auto signature<::java::util::concurrent::ArrayBlockingQueue> = ::java_util_concurrent / "ArrayBlockingQueue";
namespace java::util::concurrent { class ArrayBlockingQueue$Itr; }
template<> constexpr auto signature<::java::util::concurrent::ArrayBlockingQueue$Itr> = ::java_util_concurrent / "ArrayBlockingQueue$Itr";
namespace java::util::concurrent { class ArrayBlockingQueue$Itrs; }
template<> constexpr auto signature<::java::util::concurrent::ArrayBlockingQueue$Itrs> = ::java_util_concurrent / "ArrayBlockingQueue$Itrs";
namespace java::util::concurrent { class ArrayBlockingQueue$Itrs$Node; }
template<> constexpr auto signature<::java::util::concurrent::ArrayBlockingQueue$Itrs$Node> = ::java_util_concurrent / "ArrayBlockingQueue$Itrs$Node";
namespace java::util::concurrent { class BlockingDeque; }
template<> constexpr auto signature<::java::util::concurrent::BlockingDeque> = ::java_util_concurrent / "BlockingDeque";
namespace java::util::concurrent { class BlockingQueue; }
template<> constexpr auto signature<::java::util::concurrent::BlockingQueue> = ::java_util_concurrent / "BlockingQueue";
namespace java::util::concurrent { class BrokenBarrierException; }
template<> constexpr auto signature<::java::util::concurrent::BrokenBarrierException> = ::java_util_concurrent / "BrokenBarrierException";
namespace java::util::concurrent { class Callable; }
template<> constexpr auto signature<::java::util::concurrent::Callable> = ::java_util_concurrent / "Callable";
namespace java::util::concurrent { class CancellationException; }
template<> constexpr auto signature<::java::util::concurrent::CancellationException> = ::java_util_concurrent / "CancellationException";
namespace java::util::concurrent { class CompletableFuture; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture> = ::java_util_concurrent / "CompletableFuture";
namespace java::util::concurrent { class CompletableFuture$AltResult; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$AltResult> = ::java_util_concurrent / "CompletableFuture$AltResult";
namespace java::util::concurrent { class CompletableFuture$AsyncRun; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$AsyncRun> = ::java_util_concurrent / "CompletableFuture$AsyncRun";
namespace java::util::concurrent { class CompletableFuture$AsyncSupply; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$AsyncSupply> = ::java_util_concurrent / "CompletableFuture$AsyncSupply";
namespace java::util::concurrent { class CompletableFuture$AsynchronousCompletionTask; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$AsynchronousCompletionTask> = ::java_util_concurrent / "CompletableFuture$AsynchronousCompletionTask";
namespace java::util::concurrent { class CompletableFuture$BiAccept; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$BiAccept> = ::java_util_concurrent / "CompletableFuture$BiAccept";
namespace java::util::concurrent { class CompletableFuture$BiApply; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$BiApply> = ::java_util_concurrent / "CompletableFuture$BiApply";
namespace java::util::concurrent { class CompletableFuture$BiCompletion; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$BiCompletion> = ::java_util_concurrent / "CompletableFuture$BiCompletion";
namespace java::util::concurrent { class CompletableFuture$BiRelay; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$BiRelay> = ::java_util_concurrent / "CompletableFuture$BiRelay";
namespace java::util::concurrent { class CompletableFuture$BiRun; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$BiRun> = ::java_util_concurrent / "CompletableFuture$BiRun";
namespace java::util::concurrent { class CompletableFuture$CoCompletion; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$CoCompletion> = ::java_util_concurrent / "CompletableFuture$CoCompletion";
namespace java::util::concurrent { class CompletableFuture$Completion; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$Completion> = ::java_util_concurrent / "CompletableFuture$Completion";
namespace java::util::concurrent { class CompletableFuture$OrAccept; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$OrAccept> = ::java_util_concurrent / "CompletableFuture$OrAccept";
namespace java::util::concurrent { class CompletableFuture$OrApply; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$OrApply> = ::java_util_concurrent / "CompletableFuture$OrApply";
namespace java::util::concurrent { class CompletableFuture$OrRelay; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$OrRelay> = ::java_util_concurrent / "CompletableFuture$OrRelay";
namespace java::util::concurrent { class CompletableFuture$OrRun; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$OrRun> = ::java_util_concurrent / "CompletableFuture$OrRun";
namespace java::util::concurrent { class CompletableFuture$Signaller; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$Signaller> = ::java_util_concurrent / "CompletableFuture$Signaller";
namespace java::util::concurrent { class CompletableFuture$ThreadPerTaskExecutor; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$ThreadPerTaskExecutor> = ::java_util_concurrent / "CompletableFuture$ThreadPerTaskExecutor";
namespace java::util::concurrent { class CompletableFuture$UniAccept; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$UniAccept> = ::java_util_concurrent / "CompletableFuture$UniAccept";
namespace java::util::concurrent { class CompletableFuture$UniApply; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$UniApply> = ::java_util_concurrent / "CompletableFuture$UniApply";
namespace java::util::concurrent { class CompletableFuture$UniCompletion; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$UniCompletion> = ::java_util_concurrent / "CompletableFuture$UniCompletion";
namespace java::util::concurrent { class CompletableFuture$UniCompose; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$UniCompose> = ::java_util_concurrent / "CompletableFuture$UniCompose";
namespace java::util::concurrent { class CompletableFuture$UniExceptionally; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$UniExceptionally> = ::java_util_concurrent / "CompletableFuture$UniExceptionally";
namespace java::util::concurrent { class CompletableFuture$UniHandle; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$UniHandle> = ::java_util_concurrent / "CompletableFuture$UniHandle";
namespace java::util::concurrent { class CompletableFuture$UniRelay; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$UniRelay> = ::java_util_concurrent / "CompletableFuture$UniRelay";
namespace java::util::concurrent { class CompletableFuture$UniRun; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$UniRun> = ::java_util_concurrent / "CompletableFuture$UniRun";
namespace java::util::concurrent { class CompletableFuture$UniWhenComplete; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$UniWhenComplete> = ::java_util_concurrent / "CompletableFuture$UniWhenComplete";
namespace java::util::concurrent { class CompletionException; }
template<> constexpr auto signature<::java::util::concurrent::CompletionException> = ::java_util_concurrent / "CompletionException";
namespace java::util::concurrent { class CompletionService; }
template<> constexpr auto signature<::java::util::concurrent::CompletionService> = ::java_util_concurrent / "CompletionService";
namespace java::util::concurrent { class CompletionStage; }
template<> constexpr auto signature<::java::util::concurrent::CompletionStage> = ::java_util_concurrent / "CompletionStage";
namespace java::util::concurrent { class ConcurrentHashMap; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap> = ::java_util_concurrent / "ConcurrentHashMap";
namespace java::util::concurrent { class ConcurrentHashMap$BaseIterator; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$BaseIterator> = ::java_util_concurrent / "ConcurrentHashMap$BaseIterator";
namespace java::util::concurrent { class ConcurrentHashMap$BulkTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$BulkTask> = ::java_util_concurrent / "ConcurrentHashMap$BulkTask";
namespace java::util::concurrent { class ConcurrentHashMap$CollectionView; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$CollectionView> = ::java_util_concurrent / "ConcurrentHashMap$CollectionView";
namespace java::util::concurrent { class ConcurrentHashMap$CounterCell; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$CounterCell> = ::java_util_concurrent / "ConcurrentHashMap$CounterCell";
namespace java::util::concurrent { class ConcurrentHashMap$EntryIterator; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$EntryIterator> = ::java_util_concurrent / "ConcurrentHashMap$EntryIterator";
namespace java::util::concurrent { class ConcurrentHashMap$EntrySetView; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$EntrySetView> = ::java_util_concurrent / "ConcurrentHashMap$EntrySetView";
namespace java::util::concurrent { class ConcurrentHashMap$EntrySpliterator; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$EntrySpliterator> = ::java_util_concurrent / "ConcurrentHashMap$EntrySpliterator";
namespace java::util::concurrent { class ConcurrentHashMap$ForEachEntryTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$ForEachEntryTask> = ::java_util_concurrent / "ConcurrentHashMap$ForEachEntryTask";
namespace java::util::concurrent { class ConcurrentHashMap$ForEachKeyTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$ForEachKeyTask> = ::java_util_concurrent / "ConcurrentHashMap$ForEachKeyTask";
namespace java::util::concurrent { class ConcurrentHashMap$ForEachMappingTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$ForEachMappingTask> = ::java_util_concurrent / "ConcurrentHashMap$ForEachMappingTask";
namespace java::util::concurrent { class ConcurrentHashMap$ForEachTransformedEntryTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$ForEachTransformedEntryTask> = ::java_util_concurrent / "ConcurrentHashMap$ForEachTransformedEntryTask";
namespace java::util::concurrent { class ConcurrentHashMap$ForEachTransformedKeyTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$ForEachTransformedKeyTask> = ::java_util_concurrent / "ConcurrentHashMap$ForEachTransformedKeyTask";
namespace java::util::concurrent { class ConcurrentHashMap$ForEachTransformedMappingTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$ForEachTransformedMappingTask> = ::java_util_concurrent / "ConcurrentHashMap$ForEachTransformedMappingTask";
namespace java::util::concurrent { class ConcurrentHashMap$ForEachTransformedValueTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$ForEachTransformedValueTask> = ::java_util_concurrent / "ConcurrentHashMap$ForEachTransformedValueTask";
namespace java::util::concurrent { class ConcurrentHashMap$ForEachValueTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$ForEachValueTask> = ::java_util_concurrent / "ConcurrentHashMap$ForEachValueTask";
namespace java::util::concurrent { class ConcurrentHashMap$ForwardingNode; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$ForwardingNode> = ::java_util_concurrent / "ConcurrentHashMap$ForwardingNode";
namespace java::util::concurrent { class ConcurrentHashMap$KeyIterator; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$KeyIterator> = ::java_util_concurrent / "ConcurrentHashMap$KeyIterator";
namespace java::util::concurrent { class ConcurrentHashMap$KeySetView; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$KeySetView> = ::java_util_concurrent / "ConcurrentHashMap$KeySetView";
namespace java::util::concurrent { class ConcurrentHashMap$KeySpliterator; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$KeySpliterator> = ::java_util_concurrent / "ConcurrentHashMap$KeySpliterator";
namespace java::util::concurrent { class ConcurrentHashMap$MapEntry; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$MapEntry> = ::java_util_concurrent / "ConcurrentHashMap$MapEntry";
namespace java::util::concurrent { class ConcurrentHashMap$MapReduceEntriesTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$MapReduceEntriesTask> = ::java_util_concurrent / "ConcurrentHashMap$MapReduceEntriesTask";
namespace java::util::concurrent { class ConcurrentHashMap$MapReduceEntriesToDoubleTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$MapReduceEntriesToDoubleTask> = ::java_util_concurrent / "ConcurrentHashMap$MapReduceEntriesToDoubleTask";
namespace java::util::concurrent { class ConcurrentHashMap$MapReduceEntriesToIntTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$MapReduceEntriesToIntTask> = ::java_util_concurrent / "ConcurrentHashMap$MapReduceEntriesToIntTask";
namespace java::util::concurrent { class ConcurrentHashMap$MapReduceEntriesToLongTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$MapReduceEntriesToLongTask> = ::java_util_concurrent / "ConcurrentHashMap$MapReduceEntriesToLongTask";
namespace java::util::concurrent { class ConcurrentHashMap$MapReduceKeysTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$MapReduceKeysTask> = ::java_util_concurrent / "ConcurrentHashMap$MapReduceKeysTask";
namespace java::util::concurrent { class ConcurrentHashMap$MapReduceKeysToDoubleTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$MapReduceKeysToDoubleTask> = ::java_util_concurrent / "ConcurrentHashMap$MapReduceKeysToDoubleTask";
namespace java::util::concurrent { class ConcurrentHashMap$MapReduceKeysToIntTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$MapReduceKeysToIntTask> = ::java_util_concurrent / "ConcurrentHashMap$MapReduceKeysToIntTask";
namespace java::util::concurrent { class ConcurrentHashMap$MapReduceKeysToLongTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$MapReduceKeysToLongTask> = ::java_util_concurrent / "ConcurrentHashMap$MapReduceKeysToLongTask";
namespace java::util::concurrent { class ConcurrentHashMap$MapReduceMappingsTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$MapReduceMappingsTask> = ::java_util_concurrent / "ConcurrentHashMap$MapReduceMappingsTask";
namespace java::util::concurrent { class ConcurrentHashMap$MapReduceMappingsToDoubleTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$MapReduceMappingsToDoubleTask> = ::java_util_concurrent / "ConcurrentHashMap$MapReduceMappingsToDoubleTask";
namespace java::util::concurrent { class ConcurrentHashMap$MapReduceMappingsToIntTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$MapReduceMappingsToIntTask> = ::java_util_concurrent / "ConcurrentHashMap$MapReduceMappingsToIntTask";
namespace java::util::concurrent { class ConcurrentHashMap$MapReduceMappingsToLongTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$MapReduceMappingsToLongTask> = ::java_util_concurrent / "ConcurrentHashMap$MapReduceMappingsToLongTask";
namespace java::util::concurrent { class ConcurrentHashMap$MapReduceValuesTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$MapReduceValuesTask> = ::java_util_concurrent / "ConcurrentHashMap$MapReduceValuesTask";
namespace java::util::concurrent { class ConcurrentHashMap$MapReduceValuesToDoubleTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$MapReduceValuesToDoubleTask> = ::java_util_concurrent / "ConcurrentHashMap$MapReduceValuesToDoubleTask";
namespace java::util::concurrent { class ConcurrentHashMap$MapReduceValuesToIntTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$MapReduceValuesToIntTask> = ::java_util_concurrent / "ConcurrentHashMap$MapReduceValuesToIntTask";
namespace java::util::concurrent { class ConcurrentHashMap$MapReduceValuesToLongTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$MapReduceValuesToLongTask> = ::java_util_concurrent / "ConcurrentHashMap$MapReduceValuesToLongTask";
namespace java::util::concurrent { class ConcurrentHashMap$Node; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$Node> = ::java_util_concurrent / "ConcurrentHashMap$Node";
namespace java::util::concurrent { class ConcurrentHashMap$ReduceEntriesTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$ReduceEntriesTask> = ::java_util_concurrent / "ConcurrentHashMap$ReduceEntriesTask";
namespace java::util::concurrent { class ConcurrentHashMap$ReduceKeysTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$ReduceKeysTask> = ::java_util_concurrent / "ConcurrentHashMap$ReduceKeysTask";
namespace java::util::concurrent { class ConcurrentHashMap$ReduceValuesTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$ReduceValuesTask> = ::java_util_concurrent / "ConcurrentHashMap$ReduceValuesTask";
namespace java::util::concurrent { class ConcurrentHashMap$ReservationNode; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$ReservationNode> = ::java_util_concurrent / "ConcurrentHashMap$ReservationNode";
namespace java::util::concurrent { class ConcurrentHashMap$SearchEntriesTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$SearchEntriesTask> = ::java_util_concurrent / "ConcurrentHashMap$SearchEntriesTask";
namespace java::util::concurrent { class ConcurrentHashMap$SearchKeysTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$SearchKeysTask> = ::java_util_concurrent / "ConcurrentHashMap$SearchKeysTask";
namespace java::util::concurrent { class ConcurrentHashMap$SearchMappingsTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$SearchMappingsTask> = ::java_util_concurrent / "ConcurrentHashMap$SearchMappingsTask";
namespace java::util::concurrent { class ConcurrentHashMap$SearchValuesTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$SearchValuesTask> = ::java_util_concurrent / "ConcurrentHashMap$SearchValuesTask";
namespace java::util::concurrent { class ConcurrentHashMap$Segment; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$Segment> = ::java_util_concurrent / "ConcurrentHashMap$Segment";
namespace java::util::concurrent { class ConcurrentHashMap$TableStack; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$TableStack> = ::java_util_concurrent / "ConcurrentHashMap$TableStack";
namespace java::util::concurrent { class ConcurrentHashMap$Traverser; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$Traverser> = ::java_util_concurrent / "ConcurrentHashMap$Traverser";
namespace java::util::concurrent { class ConcurrentHashMap$TreeBin; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$TreeBin> = ::java_util_concurrent / "ConcurrentHashMap$TreeBin";
namespace java::util::concurrent { class ConcurrentHashMap$TreeNode; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$TreeNode> = ::java_util_concurrent / "ConcurrentHashMap$TreeNode";
namespace java::util::concurrent { class ConcurrentHashMap$ValueIterator; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$ValueIterator> = ::java_util_concurrent / "ConcurrentHashMap$ValueIterator";
namespace java::util::concurrent { class ConcurrentHashMap$ValueSpliterator; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$ValueSpliterator> = ::java_util_concurrent / "ConcurrentHashMap$ValueSpliterator";
namespace java::util::concurrent { class ConcurrentHashMap$ValuesView; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$ValuesView> = ::java_util_concurrent / "ConcurrentHashMap$ValuesView";
namespace java::util::concurrent { class ConcurrentLinkedDeque; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentLinkedDeque> = ::java_util_concurrent / "ConcurrentLinkedDeque";
namespace java::util::concurrent { class ConcurrentLinkedDeque$1; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentLinkedDeque$1> = ::java_util_concurrent / "ConcurrentLinkedDeque$1";
namespace java::util::concurrent { class ConcurrentLinkedDeque$AbstractItr; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentLinkedDeque$AbstractItr> = ::java_util_concurrent / "ConcurrentLinkedDeque$AbstractItr";
namespace java::util::concurrent { class ConcurrentLinkedDeque$CLDSpliterator; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentLinkedDeque$CLDSpliterator> = ::java_util_concurrent / "ConcurrentLinkedDeque$CLDSpliterator";
namespace java::util::concurrent { class ConcurrentLinkedDeque$DescendingItr; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentLinkedDeque$DescendingItr> = ::java_util_concurrent / "ConcurrentLinkedDeque$DescendingItr";
namespace java::util::concurrent { class ConcurrentLinkedDeque$Itr; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentLinkedDeque$Itr> = ::java_util_concurrent / "ConcurrentLinkedDeque$Itr";
namespace java::util::concurrent { class ConcurrentLinkedDeque$Node; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentLinkedDeque$Node> = ::java_util_concurrent / "ConcurrentLinkedDeque$Node";
namespace java::util::concurrent { class ConcurrentLinkedQueue; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentLinkedQueue> = ::java_util_concurrent / "ConcurrentLinkedQueue";
namespace java::util::concurrent { class ConcurrentLinkedQueue$CLQSpliterator; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentLinkedQueue$CLQSpliterator> = ::java_util_concurrent / "ConcurrentLinkedQueue$CLQSpliterator";
namespace java::util::concurrent { class ConcurrentLinkedQueue$Itr; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentLinkedQueue$Itr> = ::java_util_concurrent / "ConcurrentLinkedQueue$Itr";
namespace java::util::concurrent { class ConcurrentLinkedQueue$Node; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentLinkedQueue$Node> = ::java_util_concurrent / "ConcurrentLinkedQueue$Node";
namespace java::util::concurrent { class ConcurrentMap; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentMap> = ::java_util_concurrent / "ConcurrentMap";
namespace java::util::concurrent { class ConcurrentNavigableMap; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentNavigableMap> = ::java_util_concurrent / "ConcurrentNavigableMap";
namespace java::util::concurrent { class ConcurrentSkipListMap; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap> = ::java_util_concurrent / "ConcurrentSkipListMap";
namespace java::util::concurrent { class ConcurrentSkipListMap$CSLMSpliterator; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap$CSLMSpliterator> = ::java_util_concurrent / "ConcurrentSkipListMap$CSLMSpliterator";
namespace java::util::concurrent { class ConcurrentSkipListMap$EntryIterator; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap$EntryIterator> = ::java_util_concurrent / "ConcurrentSkipListMap$EntryIterator";
namespace java::util::concurrent { class ConcurrentSkipListMap$EntrySet; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap$EntrySet> = ::java_util_concurrent / "ConcurrentSkipListMap$EntrySet";
namespace java::util::concurrent { class ConcurrentSkipListMap$EntrySpliterator; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap$EntrySpliterator> = ::java_util_concurrent / "ConcurrentSkipListMap$EntrySpliterator";
namespace java::util::concurrent { class ConcurrentSkipListMap$HeadIndex; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap$HeadIndex> = ::java_util_concurrent / "ConcurrentSkipListMap$HeadIndex";
namespace java::util::concurrent { class ConcurrentSkipListMap$Index; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap$Index> = ::java_util_concurrent / "ConcurrentSkipListMap$Index";
namespace java::util::concurrent { class ConcurrentSkipListMap$Iter; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap$Iter> = ::java_util_concurrent / "ConcurrentSkipListMap$Iter";
namespace java::util::concurrent { class ConcurrentSkipListMap$KeyIterator; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap$KeyIterator> = ::java_util_concurrent / "ConcurrentSkipListMap$KeyIterator";
namespace java::util::concurrent { class ConcurrentSkipListMap$KeySet; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap$KeySet> = ::java_util_concurrent / "ConcurrentSkipListMap$KeySet";
namespace java::util::concurrent { class ConcurrentSkipListMap$KeySpliterator; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap$KeySpliterator> = ::java_util_concurrent / "ConcurrentSkipListMap$KeySpliterator";
namespace java::util::concurrent { class ConcurrentSkipListMap$Node; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap$Node> = ::java_util_concurrent / "ConcurrentSkipListMap$Node";
namespace java::util::concurrent { class ConcurrentSkipListMap$SubMap; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap$SubMap> = ::java_util_concurrent / "ConcurrentSkipListMap$SubMap";
namespace java::util::concurrent { class ConcurrentSkipListMap$SubMap$SubMapEntryIterator; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap$SubMap$SubMapEntryIterator> = ::java_util_concurrent / "ConcurrentSkipListMap$SubMap$SubMapEntryIterator";
namespace java::util::concurrent { class ConcurrentSkipListMap$SubMap$SubMapIter; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap$SubMap$SubMapIter> = ::java_util_concurrent / "ConcurrentSkipListMap$SubMap$SubMapIter";
namespace java::util::concurrent { class ConcurrentSkipListMap$SubMap$SubMapKeyIterator; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap$SubMap$SubMapKeyIterator> = ::java_util_concurrent / "ConcurrentSkipListMap$SubMap$SubMapKeyIterator";
namespace java::util::concurrent { class ConcurrentSkipListMap$SubMap$SubMapValueIterator; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap$SubMap$SubMapValueIterator> = ::java_util_concurrent / "ConcurrentSkipListMap$SubMap$SubMapValueIterator";
namespace java::util::concurrent { class ConcurrentSkipListMap$ValueIterator; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap$ValueIterator> = ::java_util_concurrent / "ConcurrentSkipListMap$ValueIterator";
namespace java::util::concurrent { class ConcurrentSkipListMap$ValueSpliterator; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap$ValueSpliterator> = ::java_util_concurrent / "ConcurrentSkipListMap$ValueSpliterator";
namespace java::util::concurrent { class ConcurrentSkipListMap$Values; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap$Values> = ::java_util_concurrent / "ConcurrentSkipListMap$Values";
namespace java::util::concurrent { class ConcurrentSkipListSet; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListSet> = ::java_util_concurrent / "ConcurrentSkipListSet";
namespace java::util::concurrent { class CopyOnWriteArrayList; }
template<> constexpr auto signature<::java::util::concurrent::CopyOnWriteArrayList> = ::java_util_concurrent / "CopyOnWriteArrayList";
namespace java::util::concurrent { class CopyOnWriteArrayList$1; }
template<> constexpr auto signature<::java::util::concurrent::CopyOnWriteArrayList$1> = ::java_util_concurrent / "CopyOnWriteArrayList$1";
namespace java::util::concurrent { class CopyOnWriteArrayList$COWIterator; }
template<> constexpr auto signature<::java::util::concurrent::CopyOnWriteArrayList$COWIterator> = ::java_util_concurrent / "CopyOnWriteArrayList$COWIterator";
namespace java::util::concurrent { class CopyOnWriteArrayList$COWSubList; }
template<> constexpr auto signature<::java::util::concurrent::CopyOnWriteArrayList$COWSubList> = ::java_util_concurrent / "CopyOnWriteArrayList$COWSubList";
namespace java::util::concurrent { class CopyOnWriteArrayList$COWSubListIterator; }
template<> constexpr auto signature<::java::util::concurrent::CopyOnWriteArrayList$COWSubListIterator> = ::java_util_concurrent / "CopyOnWriteArrayList$COWSubListIterator";
namespace java::util::concurrent { class CopyOnWriteArraySet; }
template<> constexpr auto signature<::java::util::concurrent::CopyOnWriteArraySet> = ::java_util_concurrent / "CopyOnWriteArraySet";
namespace java::util::concurrent { class CountDownLatch; }
template<> constexpr auto signature<::java::util::concurrent::CountDownLatch> = ::java_util_concurrent / "CountDownLatch";
namespace java::util::concurrent { class CountDownLatch$Sync; }
template<> constexpr auto signature<::java::util::concurrent::CountDownLatch$Sync> = ::java_util_concurrent / "CountDownLatch$Sync";
namespace java::util::concurrent { class CountedCompleter; }
template<> constexpr auto signature<::java::util::concurrent::CountedCompleter> = ::java_util_concurrent / "CountedCompleter";
namespace java::util::concurrent { class CyclicBarrier; }
template<> constexpr auto signature<::java::util::concurrent::CyclicBarrier> = ::java_util_concurrent / "CyclicBarrier";
namespace java::util::concurrent { class CyclicBarrier$1; }
template<> constexpr auto signature<::java::util::concurrent::CyclicBarrier$1> = ::java_util_concurrent / "CyclicBarrier$1";
namespace java::util::concurrent { class CyclicBarrier$Generation; }
template<> constexpr auto signature<::java::util::concurrent::CyclicBarrier$Generation> = ::java_util_concurrent / "CyclicBarrier$Generation";
namespace java::util::concurrent { class DelayQueue; }
template<> constexpr auto signature<::java::util::concurrent::DelayQueue> = ::java_util_concurrent / "DelayQueue";
namespace java::util::concurrent { class DelayQueue$Itr; }
template<> constexpr auto signature<::java::util::concurrent::DelayQueue$Itr> = ::java_util_concurrent / "DelayQueue$Itr";
namespace java::util::concurrent { class Delayed; }
template<> constexpr auto signature<::java::util::concurrent::Delayed> = ::java_util_concurrent / "Delayed";
namespace java::util::concurrent { class Exchanger; }
template<> constexpr auto signature<::java::util::concurrent::Exchanger> = ::java_util_concurrent / "Exchanger";
namespace java::util::concurrent { class Exchanger$Node; }
template<> constexpr auto signature<::java::util::concurrent::Exchanger$Node> = ::java_util_concurrent / "Exchanger$Node";
namespace java::util::concurrent { class Exchanger$Participant; }
template<> constexpr auto signature<::java::util::concurrent::Exchanger$Participant> = ::java_util_concurrent / "Exchanger$Participant";
namespace java::util::concurrent { class ExecutionException; }
template<> constexpr auto signature<::java::util::concurrent::ExecutionException> = ::java_util_concurrent / "ExecutionException";
namespace java::util::concurrent { class Executor; }
template<> constexpr auto signature<::java::util::concurrent::Executor> = ::java_util_concurrent / "Executor";
namespace java::util::concurrent { class ExecutorCompletionService; }
template<> constexpr auto signature<::java::util::concurrent::ExecutorCompletionService> = ::java_util_concurrent / "ExecutorCompletionService";
namespace java::util::concurrent { class ExecutorCompletionService$QueueingFuture; }
template<> constexpr auto signature<::java::util::concurrent::ExecutorCompletionService$QueueingFuture> = ::java_util_concurrent / "ExecutorCompletionService$QueueingFuture";
namespace java::util::concurrent { class ExecutorService; }
template<> constexpr auto signature<::java::util::concurrent::ExecutorService> = ::java_util_concurrent / "ExecutorService";
namespace java::util::concurrent { class Executors; }
template<> constexpr auto signature<::java::util::concurrent::Executors> = ::java_util_concurrent / "Executors";
namespace java::util::concurrent { class Executors$1; }
template<> constexpr auto signature<::java::util::concurrent::Executors$1> = ::java_util_concurrent / "Executors$1";
namespace java::util::concurrent { class Executors$2; }
template<> constexpr auto signature<::java::util::concurrent::Executors$2> = ::java_util_concurrent / "Executors$2";
namespace java::util::concurrent { class Executors$DefaultThreadFactory; }
template<> constexpr auto signature<::java::util::concurrent::Executors$DefaultThreadFactory> = ::java_util_concurrent / "Executors$DefaultThreadFactory";
namespace java::util::concurrent { class Executors$DelegatedExecutorService; }
template<> constexpr auto signature<::java::util::concurrent::Executors$DelegatedExecutorService> = ::java_util_concurrent / "Executors$DelegatedExecutorService";
namespace java::util::concurrent { class Executors$DelegatedScheduledExecutorService; }
template<> constexpr auto signature<::java::util::concurrent::Executors$DelegatedScheduledExecutorService> = ::java_util_concurrent / "Executors$DelegatedScheduledExecutorService";
namespace java::util::concurrent { class Executors$FinalizableDelegatedExecutorService; }
template<> constexpr auto signature<::java::util::concurrent::Executors$FinalizableDelegatedExecutorService> = ::java_util_concurrent / "Executors$FinalizableDelegatedExecutorService";
namespace java::util::concurrent { class Executors$PrivilegedCallable; }
template<> constexpr auto signature<::java::util::concurrent::Executors$PrivilegedCallable> = ::java_util_concurrent / "Executors$PrivilegedCallable";
namespace java::util::concurrent { class Executors$PrivilegedCallable$1; }
template<> constexpr auto signature<::java::util::concurrent::Executors$PrivilegedCallable$1> = ::java_util_concurrent / "Executors$PrivilegedCallable$1";
namespace java::util::concurrent { class Executors$PrivilegedCallableUsingCurrentClassLoader; }
template<> constexpr auto signature<::java::util::concurrent::Executors$PrivilegedCallableUsingCurrentClassLoader> = ::java_util_concurrent / "Executors$PrivilegedCallableUsingCurrentClassLoader";
namespace java::util::concurrent { class Executors$PrivilegedCallableUsingCurrentClassLoader$1; }
template<> constexpr auto signature<::java::util::concurrent::Executors$PrivilegedCallableUsingCurrentClassLoader$1> = ::java_util_concurrent / "Executors$PrivilegedCallableUsingCurrentClassLoader$1";
namespace java::util::concurrent { class Executors$PrivilegedThreadFactory; }
template<> constexpr auto signature<::java::util::concurrent::Executors$PrivilegedThreadFactory> = ::java_util_concurrent / "Executors$PrivilegedThreadFactory";
namespace java::util::concurrent { class Executors$PrivilegedThreadFactory$1; }
template<> constexpr auto signature<::java::util::concurrent::Executors$PrivilegedThreadFactory$1> = ::java_util_concurrent / "Executors$PrivilegedThreadFactory$1";
namespace java::util::concurrent { class Executors$PrivilegedThreadFactory$1$1; }
template<> constexpr auto signature<::java::util::concurrent::Executors$PrivilegedThreadFactory$1$1> = ::java_util_concurrent / "Executors$PrivilegedThreadFactory$1$1";
namespace java::util::concurrent { class Executors$RunnableAdapter; }
template<> constexpr auto signature<::java::util::concurrent::Executors$RunnableAdapter> = ::java_util_concurrent / "Executors$RunnableAdapter";
namespace java::util::concurrent { class ForkJoinPool; }
template<> constexpr auto signature<::java::util::concurrent::ForkJoinPool> = ::java_util_concurrent / "ForkJoinPool";
namespace java::util::concurrent { class ForkJoinPool$1; }
template<> constexpr auto signature<::java::util::concurrent::ForkJoinPool$1> = ::java_util_concurrent / "ForkJoinPool$1";
namespace java::util::concurrent { class ForkJoinPool$DefaultForkJoinWorkerThreadFactory; }
template<> constexpr auto signature<::java::util::concurrent::ForkJoinPool$DefaultForkJoinWorkerThreadFactory> = ::java_util_concurrent / "ForkJoinPool$DefaultForkJoinWorkerThreadFactory";
namespace java::util::concurrent { class ForkJoinPool$EmptyTask; }
template<> constexpr auto signature<::java::util::concurrent::ForkJoinPool$EmptyTask> = ::java_util_concurrent / "ForkJoinPool$EmptyTask";
namespace java::util::concurrent { class ForkJoinPool$ForkJoinWorkerThreadFactory; }
template<> constexpr auto signature<::java::util::concurrent::ForkJoinPool$ForkJoinWorkerThreadFactory> = ::java_util_concurrent / "ForkJoinPool$ForkJoinWorkerThreadFactory";
namespace java::util::concurrent { class ForkJoinPool$InnocuousForkJoinWorkerThreadFactory; }
template<> constexpr auto signature<::java::util::concurrent::ForkJoinPool$InnocuousForkJoinWorkerThreadFactory> = ::java_util_concurrent / "ForkJoinPool$InnocuousForkJoinWorkerThreadFactory";
namespace java::util::concurrent { class ForkJoinPool$InnocuousForkJoinWorkerThreadFactory$1; }
template<> constexpr auto signature<::java::util::concurrent::ForkJoinPool$InnocuousForkJoinWorkerThreadFactory$1> = ::java_util_concurrent / "ForkJoinPool$InnocuousForkJoinWorkerThreadFactory$1";
namespace java::util::concurrent { class ForkJoinPool$ManagedBlocker; }
template<> constexpr auto signature<::java::util::concurrent::ForkJoinPool$ManagedBlocker> = ::java_util_concurrent / "ForkJoinPool$ManagedBlocker";
namespace java::util::concurrent { class ForkJoinPool$WorkQueue; }
template<> constexpr auto signature<::java::util::concurrent::ForkJoinPool$WorkQueue> = ::java_util_concurrent / "ForkJoinPool$WorkQueue";
namespace java::util::concurrent { class ForkJoinTask; }
template<> constexpr auto signature<::java::util::concurrent::ForkJoinTask> = ::java_util_concurrent / "ForkJoinTask";
namespace java::util::concurrent { class ForkJoinTask$AdaptedCallable; }
template<> constexpr auto signature<::java::util::concurrent::ForkJoinTask$AdaptedCallable> = ::java_util_concurrent / "ForkJoinTask$AdaptedCallable";
namespace java::util::concurrent { class ForkJoinTask$AdaptedRunnable; }
template<> constexpr auto signature<::java::util::concurrent::ForkJoinTask$AdaptedRunnable> = ::java_util_concurrent / "ForkJoinTask$AdaptedRunnable";
namespace java::util::concurrent { class ForkJoinTask$AdaptedRunnableAction; }
template<> constexpr auto signature<::java::util::concurrent::ForkJoinTask$AdaptedRunnableAction> = ::java_util_concurrent / "ForkJoinTask$AdaptedRunnableAction";
namespace java::util::concurrent { class ForkJoinTask$ExceptionNode; }
template<> constexpr auto signature<::java::util::concurrent::ForkJoinTask$ExceptionNode> = ::java_util_concurrent / "ForkJoinTask$ExceptionNode";
namespace java::util::concurrent { class ForkJoinTask$RunnableExecuteAction; }
template<> constexpr auto signature<::java::util::concurrent::ForkJoinTask$RunnableExecuteAction> = ::java_util_concurrent / "ForkJoinTask$RunnableExecuteAction";
namespace java::util::concurrent { class ForkJoinWorkerThread; }
template<> constexpr auto signature<::java::util::concurrent::ForkJoinWorkerThread> = ::java_util_concurrent / "ForkJoinWorkerThread";
namespace java::util::concurrent { class ForkJoinWorkerThread$InnocuousForkJoinWorkerThread; }
template<> constexpr auto signature<::java::util::concurrent::ForkJoinWorkerThread$InnocuousForkJoinWorkerThread> = ::java_util_concurrent / "ForkJoinWorkerThread$InnocuousForkJoinWorkerThread";
namespace java::util::concurrent { class Future; }
template<> constexpr auto signature<::java::util::concurrent::Future> = ::java_util_concurrent / "Future";
namespace java::util::concurrent { class FutureTask; }
template<> constexpr auto signature<::java::util::concurrent::FutureTask> = ::java_util_concurrent / "FutureTask";
namespace java::util::concurrent { class FutureTask$WaitNode; }
template<> constexpr auto signature<::java::util::concurrent::FutureTask$WaitNode> = ::java_util_concurrent / "FutureTask$WaitNode";
namespace java::util::concurrent { class LinkedBlockingDeque; }
template<> constexpr auto signature<::java::util::concurrent::LinkedBlockingDeque> = ::java_util_concurrent / "LinkedBlockingDeque";
namespace java::util::concurrent { class LinkedBlockingDeque$1; }
template<> constexpr auto signature<::java::util::concurrent::LinkedBlockingDeque$1> = ::java_util_concurrent / "LinkedBlockingDeque$1";
namespace java::util::concurrent { class LinkedBlockingDeque$AbstractItr; }
template<> constexpr auto signature<::java::util::concurrent::LinkedBlockingDeque$AbstractItr> = ::java_util_concurrent / "LinkedBlockingDeque$AbstractItr";
namespace java::util::concurrent { class LinkedBlockingDeque$DescendingItr; }
template<> constexpr auto signature<::java::util::concurrent::LinkedBlockingDeque$DescendingItr> = ::java_util_concurrent / "LinkedBlockingDeque$DescendingItr";
namespace java::util::concurrent { class LinkedBlockingDeque$Itr; }
template<> constexpr auto signature<::java::util::concurrent::LinkedBlockingDeque$Itr> = ::java_util_concurrent / "LinkedBlockingDeque$Itr";
namespace java::util::concurrent { class LinkedBlockingDeque$LBDSpliterator; }
template<> constexpr auto signature<::java::util::concurrent::LinkedBlockingDeque$LBDSpliterator> = ::java_util_concurrent / "LinkedBlockingDeque$LBDSpliterator";
namespace java::util::concurrent { class LinkedBlockingDeque$Node; }
template<> constexpr auto signature<::java::util::concurrent::LinkedBlockingDeque$Node> = ::java_util_concurrent / "LinkedBlockingDeque$Node";
namespace java::util::concurrent { class LinkedBlockingQueue; }
template<> constexpr auto signature<::java::util::concurrent::LinkedBlockingQueue> = ::java_util_concurrent / "LinkedBlockingQueue";
namespace java::util::concurrent { class LinkedBlockingQueue$Itr; }
template<> constexpr auto signature<::java::util::concurrent::LinkedBlockingQueue$Itr> = ::java_util_concurrent / "LinkedBlockingQueue$Itr";
namespace java::util::concurrent { class LinkedBlockingQueue$LBQSpliterator; }
template<> constexpr auto signature<::java::util::concurrent::LinkedBlockingQueue$LBQSpliterator> = ::java_util_concurrent / "LinkedBlockingQueue$LBQSpliterator";
namespace java::util::concurrent { class LinkedBlockingQueue$Node; }
template<> constexpr auto signature<::java::util::concurrent::LinkedBlockingQueue$Node> = ::java_util_concurrent / "LinkedBlockingQueue$Node";
namespace java::util::concurrent { class LinkedTransferQueue; }
template<> constexpr auto signature<::java::util::concurrent::LinkedTransferQueue> = ::java_util_concurrent / "LinkedTransferQueue";
namespace java::util::concurrent { class LinkedTransferQueue$Itr; }
template<> constexpr auto signature<::java::util::concurrent::LinkedTransferQueue$Itr> = ::java_util_concurrent / "LinkedTransferQueue$Itr";
namespace java::util::concurrent { class LinkedTransferQueue$LTQSpliterator; }
template<> constexpr auto signature<::java::util::concurrent::LinkedTransferQueue$LTQSpliterator> = ::java_util_concurrent / "LinkedTransferQueue$LTQSpliterator";
namespace java::util::concurrent { class LinkedTransferQueue$Node; }
template<> constexpr auto signature<::java::util::concurrent::LinkedTransferQueue$Node> = ::java_util_concurrent / "LinkedTransferQueue$Node";
namespace java::util::concurrent { class Phaser; }
template<> constexpr auto signature<::java::util::concurrent::Phaser> = ::java_util_concurrent / "Phaser";
namespace java::util::concurrent { class Phaser$QNode; }
template<> constexpr auto signature<::java::util::concurrent::Phaser$QNode> = ::java_util_concurrent / "Phaser$QNode";
namespace java::util::concurrent { class PriorityBlockingQueue; }
template<> constexpr auto signature<::java::util::concurrent::PriorityBlockingQueue> = ::java_util_concurrent / "PriorityBlockingQueue";
namespace java::util::concurrent { class PriorityBlockingQueue$Itr; }
template<> constexpr auto signature<::java::util::concurrent::PriorityBlockingQueue$Itr> = ::java_util_concurrent / "PriorityBlockingQueue$Itr";
namespace java::util::concurrent { class PriorityBlockingQueue$PBQSpliterator; }
template<> constexpr auto signature<::java::util::concurrent::PriorityBlockingQueue$PBQSpliterator> = ::java_util_concurrent / "PriorityBlockingQueue$PBQSpliterator";
namespace java::util::concurrent { class RecursiveAction; }
template<> constexpr auto signature<::java::util::concurrent::RecursiveAction> = ::java_util_concurrent / "RecursiveAction";
namespace java::util::concurrent { class RecursiveTask; }
template<> constexpr auto signature<::java::util::concurrent::RecursiveTask> = ::java_util_concurrent / "RecursiveTask";
namespace java::util::concurrent { class RejectedExecutionException; }
template<> constexpr auto signature<::java::util::concurrent::RejectedExecutionException> = ::java_util_concurrent / "RejectedExecutionException";
namespace java::util::concurrent { class RejectedExecutionHandler; }
template<> constexpr auto signature<::java::util::concurrent::RejectedExecutionHandler> = ::java_util_concurrent / "RejectedExecutionHandler";
namespace java::util::concurrent { class RunnableFuture; }
template<> constexpr auto signature<::java::util::concurrent::RunnableFuture> = ::java_util_concurrent / "RunnableFuture";
namespace java::util::concurrent { class RunnableScheduledFuture; }
template<> constexpr auto signature<::java::util::concurrent::RunnableScheduledFuture> = ::java_util_concurrent / "RunnableScheduledFuture";
namespace java::util::concurrent { class ScheduledExecutorService; }
template<> constexpr auto signature<::java::util::concurrent::ScheduledExecutorService> = ::java_util_concurrent / "ScheduledExecutorService";
namespace java::util::concurrent { class ScheduledFuture; }
template<> constexpr auto signature<::java::util::concurrent::ScheduledFuture> = ::java_util_concurrent / "ScheduledFuture";
namespace java::util::concurrent { class ScheduledThreadPoolExecutor; }
template<> constexpr auto signature<::java::util::concurrent::ScheduledThreadPoolExecutor> = ::java_util_concurrent / "ScheduledThreadPoolExecutor";
namespace java::util::concurrent { class ScheduledThreadPoolExecutor$DelayedWorkQueue; }
template<> constexpr auto signature<::java::util::concurrent::ScheduledThreadPoolExecutor$DelayedWorkQueue> = ::java_util_concurrent / "ScheduledThreadPoolExecutor$DelayedWorkQueue";
namespace java::util::concurrent { class ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr; }
template<> constexpr auto signature<::java::util::concurrent::ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr> = ::java_util_concurrent / "ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr";
namespace java::util::concurrent { class ScheduledThreadPoolExecutor$ScheduledFutureTask; }
template<> constexpr auto signature<::java::util::concurrent::ScheduledThreadPoolExecutor$ScheduledFutureTask> = ::java_util_concurrent / "ScheduledThreadPoolExecutor$ScheduledFutureTask";
namespace java::util::concurrent { class Semaphore; }
template<> constexpr auto signature<::java::util::concurrent::Semaphore> = ::java_util_concurrent / "Semaphore";
namespace java::util::concurrent { class Semaphore$FairSync; }
template<> constexpr auto signature<::java::util::concurrent::Semaphore$FairSync> = ::java_util_concurrent / "Semaphore$FairSync";
namespace java::util::concurrent { class Semaphore$NonfairSync; }
template<> constexpr auto signature<::java::util::concurrent::Semaphore$NonfairSync> = ::java_util_concurrent / "Semaphore$NonfairSync";
namespace java::util::concurrent { class Semaphore$Sync; }
template<> constexpr auto signature<::java::util::concurrent::Semaphore$Sync> = ::java_util_concurrent / "Semaphore$Sync";
namespace java::util::concurrent { class SynchronousQueue; }
template<> constexpr auto signature<::java::util::concurrent::SynchronousQueue> = ::java_util_concurrent / "SynchronousQueue";
namespace java::util::concurrent { class SynchronousQueue$FifoWaitQueue; }
template<> constexpr auto signature<::java::util::concurrent::SynchronousQueue$FifoWaitQueue> = ::java_util_concurrent / "SynchronousQueue$FifoWaitQueue";
namespace java::util::concurrent { class SynchronousQueue$LifoWaitQueue; }
template<> constexpr auto signature<::java::util::concurrent::SynchronousQueue$LifoWaitQueue> = ::java_util_concurrent / "SynchronousQueue$LifoWaitQueue";
namespace java::util::concurrent { class SynchronousQueue$TransferQueue; }
template<> constexpr auto signature<::java::util::concurrent::SynchronousQueue$TransferQueue> = ::java_util_concurrent / "SynchronousQueue$TransferQueue";
namespace java::util::concurrent { class SynchronousQueue$TransferQueue$QNode; }
template<> constexpr auto signature<::java::util::concurrent::SynchronousQueue$TransferQueue$QNode> = ::java_util_concurrent / "SynchronousQueue$TransferQueue$QNode";
namespace java::util::concurrent { class SynchronousQueue$TransferStack; }
template<> constexpr auto signature<::java::util::concurrent::SynchronousQueue$TransferStack> = ::java_util_concurrent / "SynchronousQueue$TransferStack";
namespace java::util::concurrent { class SynchronousQueue$TransferStack$SNode; }
template<> constexpr auto signature<::java::util::concurrent::SynchronousQueue$TransferStack$SNode> = ::java_util_concurrent / "SynchronousQueue$TransferStack$SNode";
namespace java::util::concurrent { class SynchronousQueue$Transferer; }
template<> constexpr auto signature<::java::util::concurrent::SynchronousQueue$Transferer> = ::java_util_concurrent / "SynchronousQueue$Transferer";
namespace java::util::concurrent { class SynchronousQueue$WaitQueue; }
template<> constexpr auto signature<::java::util::concurrent::SynchronousQueue$WaitQueue> = ::java_util_concurrent / "SynchronousQueue$WaitQueue";
namespace java::util::concurrent { class ThreadFactory; }
template<> constexpr auto signature<::java::util::concurrent::ThreadFactory> = ::java_util_concurrent / "ThreadFactory";
namespace java::util::concurrent { class ThreadLocalRandom; }
template<> constexpr auto signature<::java::util::concurrent::ThreadLocalRandom> = ::java_util_concurrent / "ThreadLocalRandom";
namespace java::util::concurrent { class ThreadLocalRandom$RandomDoublesSpliterator; }
template<> constexpr auto signature<::java::util::concurrent::ThreadLocalRandom$RandomDoublesSpliterator> = ::java_util_concurrent / "ThreadLocalRandom$RandomDoublesSpliterator";
namespace java::util::concurrent { class ThreadLocalRandom$RandomIntsSpliterator; }
template<> constexpr auto signature<::java::util::concurrent::ThreadLocalRandom$RandomIntsSpliterator> = ::java_util_concurrent / "ThreadLocalRandom$RandomIntsSpliterator";
namespace java::util::concurrent { class ThreadLocalRandom$RandomLongsSpliterator; }
template<> constexpr auto signature<::java::util::concurrent::ThreadLocalRandom$RandomLongsSpliterator> = ::java_util_concurrent / "ThreadLocalRandom$RandomLongsSpliterator";
namespace java::util::concurrent { class ThreadPoolExecutor; }
template<> constexpr auto signature<::java::util::concurrent::ThreadPoolExecutor> = ::java_util_concurrent / "ThreadPoolExecutor";
namespace java::util::concurrent { class ThreadPoolExecutor$AbortPolicy; }
template<> constexpr auto signature<::java::util::concurrent::ThreadPoolExecutor$AbortPolicy> = ::java_util_concurrent / "ThreadPoolExecutor$AbortPolicy";
namespace java::util::concurrent { class ThreadPoolExecutor$CallerRunsPolicy; }
template<> constexpr auto signature<::java::util::concurrent::ThreadPoolExecutor$CallerRunsPolicy> = ::java_util_concurrent / "ThreadPoolExecutor$CallerRunsPolicy";
namespace java::util::concurrent { class ThreadPoolExecutor$DiscardOldestPolicy; }
template<> constexpr auto signature<::java::util::concurrent::ThreadPoolExecutor$DiscardOldestPolicy> = ::java_util_concurrent / "ThreadPoolExecutor$DiscardOldestPolicy";
namespace java::util::concurrent { class ThreadPoolExecutor$DiscardPolicy; }
template<> constexpr auto signature<::java::util::concurrent::ThreadPoolExecutor$DiscardPolicy> = ::java_util_concurrent / "ThreadPoolExecutor$DiscardPolicy";
namespace java::util::concurrent { class ThreadPoolExecutor$Worker; }
template<> constexpr auto signature<::java::util::concurrent::ThreadPoolExecutor$Worker> = ::java_util_concurrent / "ThreadPoolExecutor$Worker";
namespace java::util::concurrent { class TimeUnit; }
template<> constexpr auto signature<::java::util::concurrent::TimeUnit> = ::java_util_concurrent / "TimeUnit";
namespace java::util::concurrent { class TimeUnit$1; }
template<> constexpr auto signature<::java::util::concurrent::TimeUnit$1> = ::java_util_concurrent / "TimeUnit$1";
namespace java::util::concurrent { class TimeUnit$2; }
template<> constexpr auto signature<::java::util::concurrent::TimeUnit$2> = ::java_util_concurrent / "TimeUnit$2";
namespace java::util::concurrent { class TimeUnit$3; }
template<> constexpr auto signature<::java::util::concurrent::TimeUnit$3> = ::java_util_concurrent / "TimeUnit$3";
namespace java::util::concurrent { class TimeUnit$4; }
template<> constexpr auto signature<::java::util::concurrent::TimeUnit$4> = ::java_util_concurrent / "TimeUnit$4";
namespace java::util::concurrent { class TimeUnit$5; }
template<> constexpr auto signature<::java::util::concurrent::TimeUnit$5> = ::java_util_concurrent / "TimeUnit$5";
namespace java::util::concurrent { class TimeUnit$6; }
template<> constexpr auto signature<::java::util::concurrent::TimeUnit$6> = ::java_util_concurrent / "TimeUnit$6";
namespace java::util::concurrent { class TimeUnit$7; }
template<> constexpr auto signature<::java::util::concurrent::TimeUnit$7> = ::java_util_concurrent / "TimeUnit$7";
namespace java::util::concurrent { class TimeoutException; }
template<> constexpr auto signature<::java::util::concurrent::TimeoutException> = ::java_util_concurrent / "TimeoutException";
namespace java::util::concurrent { class TransferQueue; }
template<> constexpr auto signature<::java::util::concurrent::TransferQueue> = ::java_util_concurrent / "TransferQueue";

#endif
