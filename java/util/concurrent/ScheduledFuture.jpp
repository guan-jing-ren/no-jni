#ifndef java_util_concurrent_ScheduledFuture_HPP
#define java_util_concurrent_ScheduledFuture_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::concurrent::ScheduledFuture : public jObject<::java::util::concurrent::ScheduledFuture, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_concurrent / "ScheduledFuture";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::jboolean)>("cancel"), //
		jMethod<::java::lang::Object()>("get"), //
		jMethod<::java::lang::Object(::jlong, ::java::util::concurrent::TimeUnit)>("get"), //
		jMethod<::jlong(::java::util::concurrent::TimeUnit)>("getDelay"), //
		jMethod<::jboolean()>("isCancelled"), //
		jMethod<::jboolean()>("isDone"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto cancel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cancel")] != -1);
		return call<R>("cancel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getDelay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDelay")] != -1);
		return call<R>("getDelay", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCancelled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCancelled")] != -1);
		return call<R>("isCancelled", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDone")] != -1);
		return call<R>("isDone", std::forward<Args>(args)...);
	}

};

#endif
