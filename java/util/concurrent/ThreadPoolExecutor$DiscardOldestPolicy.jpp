#ifndef java_util_concurrent_ThreadPoolExecutor$DiscardOldestPolicy_HPP
#define java_util_concurrent_ThreadPoolExecutor$DiscardOldestPolicy_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::concurrent::ThreadPoolExecutor$DiscardOldestPolicy : public jObject<::java::util::concurrent::ThreadPoolExecutor$DiscardOldestPolicy, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_concurrent / "ThreadPoolExecutor$DiscardOldestPolicy";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::lang::Runnable, ::java::util::concurrent::ThreadPoolExecutor)>("rejectedExecution"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto rejectedExecution(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rejectedExecution")] != -1);
		return call<R>("rejectedExecution", std::forward<Args>(args)...);
	}

};

#endif
