#ifndef java_util_concurrent_ForkJoinPool_HPP
#define java_util_concurrent_ForkJoinPool_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::concurrent::ForkJoinPool : public jObject<::java::util::concurrent::ForkJoinPool, ::java::util::concurrent::AbstractExecutorService> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_concurrent / "ForkJoinPool";

	constexpr static Enume field_signatures{
		jField<::java::util::concurrent::ForkJoinPool$ForkJoinWorkerThreadFactory>("defaultForkJoinWorkerThreadFactory"), //
	};

	template<typename F = ::java::util::concurrent::ForkJoinPool$ForkJoinWorkerThreadFactory>
	static auto defaultForkJoinWorkerThreadFactory() {
		static_assert(field_signatures[jField<F>("defaultForkJoinWorkerThreadFactory")] != -1);
		return sat<F>("defaultForkJoinWorkerThreadFactory");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint)>(), //
		jConstructor<::jvoid(::jint, ::java::util::concurrent::ForkJoinPool$ForkJoinWorkerThreadFactory, ::java::lang::Thread$UncaughtExceptionHandler, ::jboolean)>(), //
		jMethod<::jboolean(::jlong, ::java::util::concurrent::TimeUnit)>("awaitQuiescence"), //
		jMethod<::jboolean(::jlong, ::java::util::concurrent::TimeUnit)>("awaitTermination"), //
		jMethod<::java::util::concurrent::ForkJoinPool()>("commonPool"), //
		jMethod<::jvoid(::java::lang::Runnable)>("execute"), //
		jMethod<::jvoid(::java::util::concurrent::ForkJoinTask)>("execute"), //
		jMethod<::jint()>("getActiveThreadCount"), //
		jMethod<::jboolean()>("getAsyncMode"), //
		jMethod<::jint()>("getCommonPoolParallelism"), //
		jMethod<::java::util::concurrent::ForkJoinPool$ForkJoinWorkerThreadFactory()>("getFactory"), //
		jMethod<::jint()>("getParallelism"), //
		jMethod<::jint()>("getPoolSize"), //
		jMethod<::jint()>("getQueuedSubmissionCount"), //
		jMethod<::jlong()>("getQueuedTaskCount"), //
		jMethod<::jint()>("getRunningThreadCount"), //
		jMethod<::jlong()>("getStealCount"), //
		jMethod<::java::lang::Thread$UncaughtExceptionHandler()>("getUncaughtExceptionHandler"), //
		jMethod<::jboolean()>("hasQueuedSubmissions"), //
		jMethod<::java::lang::Object(::java::util::concurrent::ForkJoinTask)>("invoke"), //
		jMethod<::java::util::List(::java::util::Collection)>("invokeAll"), //
		jMethod<::jboolean()>("isQuiescent"), //
		jMethod<::jboolean()>("isShutdown"), //
		jMethod<::jboolean()>("isTerminated"), //
		jMethod<::jboolean()>("isTerminating"), //
		jMethod<::jvoid(::java::util::concurrent::ForkJoinPool$ManagedBlocker)>("managedBlock"), //
		jMethod<::jvoid()>("shutdown"), //
		jMethod<::java::util::List()>("shutdownNow"), //
		jMethod<::java::util::concurrent::ForkJoinTask(::java::lang::Runnable)>("submit"), //
		jMethod<::java::util::concurrent::Future(::java::lang::Runnable)>("submit"), //
		jMethod<::java::util::concurrent::ForkJoinTask(::java::lang::Runnable, ::java::lang::Object)>("submit"), //
		jMethod<::java::util::concurrent::Future(::java::lang::Runnable, ::java::lang::Object)>("submit"), //
		jMethod<::java::util::concurrent::ForkJoinTask(::java::util::concurrent::Callable)>("submit"), //
		jMethod<::java::util::concurrent::Future(::java::util::concurrent::Callable)>("submit"), //
		jMethod<::java::util::concurrent::ForkJoinTask(::java::util::concurrent::ForkJoinTask)>("submit"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto awaitQuiescence(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("awaitQuiescence")] != -1);
		return call<R>("awaitQuiescence", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto awaitTermination(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("awaitTermination")] != -1);
		return call<R>("awaitTermination", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::concurrent::ForkJoinPool, typename... Args>
	static auto commonPool(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("commonPool")] != -1);
		return scall<R>("commonPool", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto execute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("execute")] != -1);
		return call<R>("execute", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getActiveThreadCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getActiveThreadCount")] != -1);
		return call<R>("getActiveThreadCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getAsyncMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAsyncMode")] != -1);
		return call<R>("getAsyncMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getCommonPoolParallelism(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCommonPoolParallelism")] != -1);
		return scall<R>("getCommonPoolParallelism", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::concurrent::ForkJoinPool$ForkJoinWorkerThreadFactory, typename... Args>
	auto getFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFactory")] != -1);
		return call<R>("getFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getParallelism(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParallelism")] != -1);
		return call<R>("getParallelism", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPoolSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPoolSize")] != -1);
		return call<R>("getPoolSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getQueuedSubmissionCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getQueuedSubmissionCount")] != -1);
		return call<R>("getQueuedSubmissionCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getQueuedTaskCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getQueuedTaskCount")] != -1);
		return call<R>("getQueuedTaskCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRunningThreadCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRunningThreadCount")] != -1);
		return call<R>("getRunningThreadCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getStealCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStealCount")] != -1);
		return call<R>("getStealCount", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Thread$UncaughtExceptionHandler, typename... Args>
	auto getUncaughtExceptionHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUncaughtExceptionHandler")] != -1);
		return call<R>("getUncaughtExceptionHandler", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasQueuedSubmissions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasQueuedSubmissions")] != -1);
		return call<R>("hasQueuedSubmissions", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto invoke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invoke")] != -1);
		return call<R>("invoke", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto invokeAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invokeAll")] != -1);
		return call<R>("invokeAll", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isQuiescent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isQuiescent")] != -1);
		return call<R>("isQuiescent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isShutdown(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isShutdown")] != -1);
		return call<R>("isShutdown", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isTerminated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isTerminated")] != -1);
		return call<R>("isTerminated", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isTerminating(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isTerminating")] != -1);
		return call<R>("isTerminating", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto managedBlock(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("managedBlock")] != -1);
		return scall<R>("managedBlock", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto shutdown(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shutdown")] != -1);
		return call<R>("shutdown", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto shutdownNow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shutdownNow")] != -1);
		return call<R>("shutdownNow", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::concurrent::ForkJoinTask, typename... Args>
	auto submit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("submit")] != -1);
		return call<R>("submit", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
