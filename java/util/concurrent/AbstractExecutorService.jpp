#ifndef java_util_concurrent_AbstractExecutorService_HPP
#define java_util_concurrent_AbstractExecutorService_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::concurrent::AbstractExecutorService : public jObject<::java::util::concurrent::AbstractExecutorService, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_concurrent / "AbstractExecutorService";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::util::List(::java::util::Collection)>("invokeAll"), //
		jMethod<::java::util::List(::java::util::Collection, ::jlong, ::java::util::concurrent::TimeUnit)>("invokeAll"), //
		jMethod<::java::lang::Object(::java::util::Collection)>("invokeAny"), //
		jMethod<::java::lang::Object(::java::util::Collection, ::jlong, ::java::util::concurrent::TimeUnit)>("invokeAny"), //
		jMethod<::java::util::concurrent::Future(::java::lang::Runnable)>("submit"), //
		jMethod<::java::util::concurrent::Future(::java::lang::Runnable, ::java::lang::Object)>("submit"), //
		jMethod<::java::util::concurrent::Future(::java::util::concurrent::Callable)>("submit"), //
	};

	template<typename R = ::java::util::List, typename... Args>
	auto invokeAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("invokeAll")] != -1);
		return call<R>("invokeAll", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto invokeAny(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("invokeAny")] != -1);
		return call<R>("invokeAny", forward<Args>(args)...);
	}

	template<typename R = ::java::util::concurrent::Future, typename... Args>
	auto submit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("submit")] != -1);
		return call<R>("submit", forward<Args>(args)...);
	}

};

#endif
