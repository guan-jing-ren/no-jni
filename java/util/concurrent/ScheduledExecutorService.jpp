#ifndef java_util_concurrent_ScheduledExecutorService_HPP
#define java_util_concurrent_ScheduledExecutorService_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::concurrent::ScheduledExecutorService : public jObject<::java::util::concurrent::ScheduledExecutorService, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_concurrent / "ScheduledExecutorService";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::jlong, ::java::util::concurrent::TimeUnit)>("awaitTermination"), //
		jMethod<::java::util::List(::java::util::Collection)>("invokeAll"), //
		jMethod<::java::util::List(::java::util::Collection, ::jlong, ::java::util::concurrent::TimeUnit)>("invokeAll"), //
		jMethod<::java::lang::Object(::java::util::Collection)>("invokeAny"), //
		jMethod<::java::lang::Object(::java::util::Collection, ::jlong, ::java::util::concurrent::TimeUnit)>("invokeAny"), //
		jMethod<::jboolean()>("isShutdown"), //
		jMethod<::jboolean()>("isTerminated"), //
		jMethod<::java::util::concurrent::ScheduledFuture(::java::lang::Runnable, ::jlong, ::java::util::concurrent::TimeUnit)>("schedule"), //
		jMethod<::java::util::concurrent::ScheduledFuture(::java::util::concurrent::Callable, ::jlong, ::java::util::concurrent::TimeUnit)>("schedule"), //
		jMethod<::java::util::concurrent::ScheduledFuture(::java::lang::Runnable, ::jlong, ::jlong, ::java::util::concurrent::TimeUnit)>("scheduleAtFixedRate"), //
		jMethod<::java::util::concurrent::ScheduledFuture(::java::lang::Runnable, ::jlong, ::jlong, ::java::util::concurrent::TimeUnit)>("scheduleWithFixedDelay"), //
		jMethod<::jvoid()>("shutdown"), //
		jMethod<::java::util::List()>("shutdownNow"), //
		jMethod<::java::util::concurrent::Future(::java::lang::Runnable)>("submit"), //
		jMethod<::java::util::concurrent::Future(::java::lang::Runnable, ::java::lang::Object)>("submit"), //
		jMethod<::java::util::concurrent::Future(::java::util::concurrent::Callable)>("submit"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto awaitTermination(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("awaitTermination")] != -1);
		return call<R>("awaitTermination", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto invokeAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invokeAll")] != -1);
		return call<R>("invokeAll", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto invokeAny(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invokeAny")] != -1);
		return call<R>("invokeAny", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isShutdown(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isShutdown")] != -1);
		return call<R>("isShutdown", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isTerminated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isTerminated")] != -1);
		return call<R>("isTerminated", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::concurrent::ScheduledFuture, typename... Args>
	auto schedule(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("schedule")] != -1);
		return call<R>("schedule", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::concurrent::ScheduledFuture, typename... Args>
	auto scheduleAtFixedRate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("scheduleAtFixedRate")] != -1);
		return call<R>("scheduleAtFixedRate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::concurrent::ScheduledFuture, typename... Args>
	auto scheduleWithFixedDelay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("scheduleWithFixedDelay")] != -1);
		return call<R>("scheduleWithFixedDelay", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto shutdown(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shutdown")] != -1);
		return call<R>("shutdown", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto shutdownNow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shutdownNow")] != -1);
		return call<R>("shutdownNow", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::concurrent::Future, typename... Args>
	auto submit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("submit")] != -1);
		return call<R>("submit", std::forward<Args>(args)...);
	}

};

#endif
