#ifndef java_util_concurrent_Executors_HPP
#define java_util_concurrent_Executors_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::concurrent::Executors : public jObject<::java::util::concurrent::Executors, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_concurrent / "Executors";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::util::concurrent::Callable(::java::lang::Runnable)>("callable"), //
		jMethod<::java::util::concurrent::Callable(::java::lang::Runnable, ::java::lang::Object)>("callable"), //
		jMethod<::java::util::concurrent::Callable(::java::security::PrivilegedAction)>("callable"), //
		jMethod<::java::util::concurrent::Callable(::java::security::PrivilegedExceptionAction)>("callable"), //
		jMethod<::java::util::concurrent::ThreadFactory()>("defaultThreadFactory"), //
		jMethod<::java::util::concurrent::ExecutorService()>("newCachedThreadPool"), //
		jMethod<::java::util::concurrent::ExecutorService(::java::util::concurrent::ThreadFactory)>("newCachedThreadPool"), //
		jMethod<::java::util::concurrent::ExecutorService(::jint)>("newFixedThreadPool"), //
		jMethod<::java::util::concurrent::ExecutorService(::jint, ::java::util::concurrent::ThreadFactory)>("newFixedThreadPool"), //
		jMethod<::java::util::concurrent::ScheduledExecutorService(::jint)>("newScheduledThreadPool"), //
		jMethod<::java::util::concurrent::ScheduledExecutorService(::jint, ::java::util::concurrent::ThreadFactory)>("newScheduledThreadPool"), //
		jMethod<::java::util::concurrent::ExecutorService()>("newSingleThreadExecutor"), //
		jMethod<::java::util::concurrent::ExecutorService(::java::util::concurrent::ThreadFactory)>("newSingleThreadExecutor"), //
		jMethod<::java::util::concurrent::ScheduledExecutorService()>("newSingleThreadScheduledExecutor"), //
		jMethod<::java::util::concurrent::ScheduledExecutorService(::java::util::concurrent::ThreadFactory)>("newSingleThreadScheduledExecutor"), //
		jMethod<::java::util::concurrent::ExecutorService()>("newWorkStealingPool"), //
		jMethod<::java::util::concurrent::ExecutorService(::jint)>("newWorkStealingPool"), //
		jMethod<::java::util::concurrent::Callable(::java::util::concurrent::Callable)>("privilegedCallable"), //
		jMethod<::java::util::concurrent::Callable(::java::util::concurrent::Callable)>("privilegedCallableUsingCurrentClassLoader"), //
		jMethod<::java::util::concurrent::ThreadFactory()>("privilegedThreadFactory"), //
		jMethod<::java::util::concurrent::ExecutorService(::java::util::concurrent::ExecutorService)>("unconfigurableExecutorService"), //
		jMethod<::java::util::concurrent::ScheduledExecutorService(::java::util::concurrent::ScheduledExecutorService)>("unconfigurableScheduledExecutorService"), //
	};

	template<typename R = ::java::util::concurrent::Callable, typename... Args>
	static auto callable(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("callable")] != -1);
		return scall<R>("callable", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::concurrent::ThreadFactory, typename... Args>
	static auto defaultThreadFactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("defaultThreadFactory")] != -1);
		return scall<R>("defaultThreadFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::concurrent::ExecutorService, typename... Args>
	static auto newCachedThreadPool(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newCachedThreadPool")] != -1);
		return scall<R>("newCachedThreadPool", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::concurrent::ExecutorService, typename... Args>
	static auto newFixedThreadPool(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newFixedThreadPool")] != -1);
		return scall<R>("newFixedThreadPool", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::concurrent::ScheduledExecutorService, typename... Args>
	static auto newScheduledThreadPool(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newScheduledThreadPool")] != -1);
		return scall<R>("newScheduledThreadPool", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::concurrent::ExecutorService, typename... Args>
	static auto newSingleThreadExecutor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newSingleThreadExecutor")] != -1);
		return scall<R>("newSingleThreadExecutor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::concurrent::ScheduledExecutorService, typename... Args>
	static auto newSingleThreadScheduledExecutor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newSingleThreadScheduledExecutor")] != -1);
		return scall<R>("newSingleThreadScheduledExecutor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::concurrent::ExecutorService, typename... Args>
	static auto newWorkStealingPool(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newWorkStealingPool")] != -1);
		return scall<R>("newWorkStealingPool", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::concurrent::Callable, typename... Args>
	static auto privilegedCallable(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("privilegedCallable")] != -1);
		return scall<R>("privilegedCallable", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::concurrent::Callable, typename... Args>
	static auto privilegedCallableUsingCurrentClassLoader(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("privilegedCallableUsingCurrentClassLoader")] != -1);
		return scall<R>("privilegedCallableUsingCurrentClassLoader", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::concurrent::ThreadFactory, typename... Args>
	static auto privilegedThreadFactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("privilegedThreadFactory")] != -1);
		return scall<R>("privilegedThreadFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::concurrent::ExecutorService, typename... Args>
	static auto unconfigurableExecutorService(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unconfigurableExecutorService")] != -1);
		return scall<R>("unconfigurableExecutorService", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::concurrent::ScheduledExecutorService, typename... Args>
	static auto unconfigurableScheduledExecutorService(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unconfigurableScheduledExecutorService")] != -1);
		return scall<R>("unconfigurableScheduledExecutorService", std::forward<Args>(args)...);
	}

};

#endif
