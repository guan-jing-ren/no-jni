#ifndef java_util_concurrent_ConcurrentMap_HPP
#define java_util_concurrent_ConcurrentMap_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::concurrent::ConcurrentMap : public jObject<::java::util::concurrent::ConcurrentMap, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_concurrent / "ConcurrentMap";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("clear"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::util::function::BiFunction)>("compute"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::util::function::Function)>("computeIfAbsent"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::util::function::BiFunction)>("computeIfPresent"), //
		jMethod<::jboolean(::java::lang::Object)>("containsKey"), //
		jMethod<::jboolean(::java::lang::Object)>("containsValue"), //
		jMethod<::java::util::Set()>("entrySet"), //
		jMethod<::jvoid(::java::util::function::BiConsumer)>("forEach"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("get"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Object)>("getOrDefault"), //
		jMethod<::jboolean()>("isEmpty"), //
		jMethod<::java::util::Set()>("keySet"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Object, ::java::util::function::BiFunction)>("merge"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Object)>("put"), //
		jMethod<::jvoid(::java::util::Map)>("putAll"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Object)>("putIfAbsent"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("remove"), //
		jMethod<::jboolean(::java::lang::Object, ::java::lang::Object)>("remove"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Object)>("replace"), //
		jMethod<::jboolean(::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("replace"), //
		jMethod<::jvoid(::java::util::function::BiFunction)>("replaceAll"), //
		jMethod<::jint()>("size"), //
		jMethod<::java::util::Collection()>("values"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto compute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("compute")] != -1);
		return call<R>("compute", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto computeIfAbsent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("computeIfAbsent")] != -1);
		return call<R>("computeIfAbsent", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto computeIfPresent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("computeIfPresent")] != -1);
		return call<R>("computeIfPresent", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto containsKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("containsKey")] != -1);
		return call<R>("containsKey", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto containsValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("containsValue")] != -1);
		return call<R>("containsValue", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto entrySet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("entrySet")] != -1);
		return call<R>("entrySet", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto forEach(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("forEach")] != -1);
		return call<R>("forEach", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("get")] != -1);
		return call<R>("get", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getOrDefault(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getOrDefault")] != -1);
		return call<R>("getOrDefault", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isEmpty")] != -1);
		return call<R>("isEmpty", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto keySet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("keySet")] != -1);
		return call<R>("keySet", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto merge(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("merge")] != -1);
		return call<R>("merge", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto put(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("put")] != -1);
		return call<R>("put", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("putAll")] != -1);
		return call<R>("putAll", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto putIfAbsent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("putIfAbsent")] != -1);
		return call<R>("putIfAbsent", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto replace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("replace")] != -1);
		return call<R>("replace", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto replaceAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("replaceAll")] != -1);
		return call<R>("replaceAll", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto size(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("size")] != -1);
		return call<R>("size", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Collection, typename... Args>
	auto values(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("values")] != -1);
		return call<R>("values", forward<Args>(args)...);
	}

};

#endif
