#ifndef java_util_concurrent_atomic_JPP
#define java_util_concurrent_atomic_JPP

namespace java::util::concurrent::atomic { class AtomicBoolean; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicBoolean> = ::java_util_concurrent_atomic / "AtomicBoolean";
namespace java::util::concurrent::atomic { class AtomicInteger; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicInteger> = ::java_util_concurrent_atomic / "AtomicInteger";
namespace java::util::concurrent::atomic { class AtomicIntegerArray; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicIntegerArray> = ::java_util_concurrent_atomic / "AtomicIntegerArray";
namespace java::util::concurrent::atomic { class AtomicIntegerFieldUpdater; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicIntegerFieldUpdater> = ::java_util_concurrent_atomic / "AtomicIntegerFieldUpdater";
namespace java::util::concurrent::atomic { class AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl> = ::java_util_concurrent_atomic / "AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl";
namespace java::util::concurrent::atomic { class AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl$1; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl$1> = ::java_util_concurrent_atomic / "AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl$1";
namespace java::util::concurrent::atomic { class AtomicLong; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicLong> = ::java_util_concurrent_atomic / "AtomicLong";
namespace java::util::concurrent::atomic { class AtomicLongArray; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicLongArray> = ::java_util_concurrent_atomic / "AtomicLongArray";
namespace java::util::concurrent::atomic { class AtomicLongFieldUpdater; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicLongFieldUpdater> = ::java_util_concurrent_atomic / "AtomicLongFieldUpdater";
namespace java::util::concurrent::atomic { class AtomicLongFieldUpdater$CASUpdater; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicLongFieldUpdater$CASUpdater> = ::java_util_concurrent_atomic / "AtomicLongFieldUpdater$CASUpdater";
namespace java::util::concurrent::atomic { class AtomicLongFieldUpdater$CASUpdater$1; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicLongFieldUpdater$CASUpdater$1> = ::java_util_concurrent_atomic / "AtomicLongFieldUpdater$CASUpdater$1";
namespace java::util::concurrent::atomic { class AtomicLongFieldUpdater$LockedUpdater; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicLongFieldUpdater$LockedUpdater> = ::java_util_concurrent_atomic / "AtomicLongFieldUpdater$LockedUpdater";
namespace java::util::concurrent::atomic { class AtomicLongFieldUpdater$LockedUpdater$1; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicLongFieldUpdater$LockedUpdater$1> = ::java_util_concurrent_atomic / "AtomicLongFieldUpdater$LockedUpdater$1";
namespace java::util::concurrent::atomic { class AtomicMarkableReference; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicMarkableReference> = ::java_util_concurrent_atomic / "AtomicMarkableReference";
namespace java::util::concurrent::atomic { class AtomicMarkableReference$Pair; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicMarkableReference$Pair> = ::java_util_concurrent_atomic / "AtomicMarkableReference$Pair";
namespace java::util::concurrent::atomic { class AtomicReference; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicReference> = ::java_util_concurrent_atomic / "AtomicReference";
namespace java::util::concurrent::atomic { class AtomicReferenceArray; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicReferenceArray> = ::java_util_concurrent_atomic / "AtomicReferenceArray";
namespace java::util::concurrent::atomic { class AtomicReferenceFieldUpdater; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicReferenceFieldUpdater> = ::java_util_concurrent_atomic / "AtomicReferenceFieldUpdater";
namespace java::util::concurrent::atomic { class AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl> = ::java_util_concurrent_atomic / "AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl";
namespace java::util::concurrent::atomic { class AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl$1; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl$1> = ::java_util_concurrent_atomic / "AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl$1";
namespace java::util::concurrent::atomic { class AtomicStampedReference; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicStampedReference> = ::java_util_concurrent_atomic / "AtomicStampedReference";
namespace java::util::concurrent::atomic { class AtomicStampedReference$Pair; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicStampedReference$Pair> = ::java_util_concurrent_atomic / "AtomicStampedReference$Pair";
namespace java::util::concurrent::atomic { class DoubleAccumulator; }
template<> constexpr auto signature<::java::util::concurrent::atomic::DoubleAccumulator> = ::java_util_concurrent_atomic / "DoubleAccumulator";
namespace java::util::concurrent::atomic { class DoubleAccumulator$SerializationProxy; }
template<> constexpr auto signature<::java::util::concurrent::atomic::DoubleAccumulator$SerializationProxy> = ::java_util_concurrent_atomic / "DoubleAccumulator$SerializationProxy";
namespace java::util::concurrent::atomic { class DoubleAdder; }
template<> constexpr auto signature<::java::util::concurrent::atomic::DoubleAdder> = ::java_util_concurrent_atomic / "DoubleAdder";
namespace java::util::concurrent::atomic { class DoubleAdder$SerializationProxy; }
template<> constexpr auto signature<::java::util::concurrent::atomic::DoubleAdder$SerializationProxy> = ::java_util_concurrent_atomic / "DoubleAdder$SerializationProxy";
namespace java::util::concurrent::atomic { class LongAccumulator; }
template<> constexpr auto signature<::java::util::concurrent::atomic::LongAccumulator> = ::java_util_concurrent_atomic / "LongAccumulator";
namespace java::util::concurrent::atomic { class LongAccumulator$SerializationProxy; }
template<> constexpr auto signature<::java::util::concurrent::atomic::LongAccumulator$SerializationProxy> = ::java_util_concurrent_atomic / "LongAccumulator$SerializationProxy";
namespace java::util::concurrent::atomic { class LongAdder; }
template<> constexpr auto signature<::java::util::concurrent::atomic::LongAdder> = ::java_util_concurrent_atomic / "LongAdder";
namespace java::util::concurrent::atomic { class LongAdder$SerializationProxy; }
template<> constexpr auto signature<::java::util::concurrent::atomic::LongAdder$SerializationProxy> = ::java_util_concurrent_atomic / "LongAdder$SerializationProxy";
namespace java::util::concurrent::atomic { class Striped64; }
template<> constexpr auto signature<::java::util::concurrent::atomic::Striped64> = ::java_util_concurrent_atomic / "Striped64";
namespace java::util::concurrent::atomic { class Striped64$Cell; }
template<> constexpr auto signature<::java::util::concurrent::atomic::Striped64$Cell> = ::java_util_concurrent_atomic / "Striped64$Cell";

#endif
