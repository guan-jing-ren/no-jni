#ifndef java_util_concurrent_atomic_AtomicMarkableReference_HPP
#define java_util_concurrent_atomic_AtomicMarkableReference_HPP

#include "../../../../jfwd_decl.hpp"

class ::java::util::concurrent::atomic::AtomicMarkableReference : public jObject<::java::util::concurrent::atomic::AtomicMarkableReference, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_concurrent_atomic / "AtomicMarkableReference";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::Object, ::jboolean)>(), //
		jMethod<::jboolean(::java::lang::Object, ::jboolean)>("attemptMark"), //
		jMethod<::jboolean(::java::lang::Object, ::java::lang::Object, ::jboolean, ::jboolean)>("compareAndSet"), //
		jMethod<::java::lang::Object(::jboolean *)>("get"), //
		jMethod<::java::lang::Object()>("getReference"), //
		jMethod<::jboolean()>("isMarked"), //
		jMethod<::jvoid(::java::lang::Object, ::jboolean)>("set"), //
		jMethod<::jboolean(::java::lang::Object, ::java::lang::Object, ::jboolean, ::jboolean)>("weakCompareAndSet"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto attemptMark(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("attemptMark")] != -1);
		return call<R>("attemptMark", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto compareAndSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("compareAndSet")] != -1);
		return call<R>("compareAndSet", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("get")] != -1);
		return call<R>("get", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getReference(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getReference")] != -1);
		return call<R>("getReference", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isMarked(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isMarked")] != -1);
		return call<R>("isMarked", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("set")] != -1);
		return call<R>("set", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto weakCompareAndSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("weakCompareAndSet")] != -1);
		return call<R>("weakCompareAndSet", forward<Args>(args)...);
	}

};

#endif
