#ifndef java_util_concurrent_atomic_AtomicStampedReference_HPP
#define java_util_concurrent_atomic_AtomicStampedReference_HPP

#include "../../../../jfwd_decl.hpp"

class ::java::util::concurrent::atomic::AtomicStampedReference : public jObject<::java::util::concurrent::atomic::AtomicStampedReference, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_concurrent_atomic / "AtomicStampedReference";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::Object, ::jint)>(), //
		jMethod<::jboolean(::java::lang::Object, ::jint)>("attemptStamp"), //
		jMethod<::jboolean(::java::lang::Object, ::java::lang::Object, ::jint, ::jint)>("compareAndSet"), //
		jMethod<::java::lang::Object(::jint *)>("get"), //
		jMethod<::java::lang::Object()>("getReference"), //
		jMethod<::jint()>("getStamp"), //
		jMethod<::jvoid(::java::lang::Object, ::jint)>("set"), //
		jMethod<::jboolean(::java::lang::Object, ::java::lang::Object, ::jint, ::jint)>("weakCompareAndSet"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto attemptStamp(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("attemptStamp")] != -1);
		return call<R>("attemptStamp", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto compareAndSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compareAndSet")] != -1);
		return call<R>("compareAndSet", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getReference(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReference")] != -1);
		return call<R>("getReference", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getStamp(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStamp")] != -1);
		return call<R>("getStamp", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set")] != -1);
		return call<R>("set", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto weakCompareAndSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("weakCompareAndSet")] != -1);
		return call<R>("weakCompareAndSet", std::forward<Args>(args)...);
	}

};

#endif
