#ifndef java_util_concurrent_atomic_AtomicReferenceArray_HPP
#define java_util_concurrent_atomic_AtomicReferenceArray_HPP

#include "../../../../jfwd_decl.hpp"

class ::java::util::concurrent::atomic::AtomicReferenceArray : public jObject<::java::util::concurrent::atomic::AtomicReferenceArray, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_concurrent_atomic / "AtomicReferenceArray";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint)>(), //
		jConstructor<::jvoid(::java::lang::Object *)>(), //
		jMethod<::java::lang::Object(::jint, ::java::lang::Object, ::java::util::function::BinaryOperator)>("accumulateAndGet"), //
		jMethod<::jboolean(::jint, ::java::lang::Object, ::java::lang::Object)>("compareAndSet"), //
		jMethod<::java::lang::Object(::jint)>("get"), //
		jMethod<::java::lang::Object(::jint, ::java::lang::Object, ::java::util::function::BinaryOperator)>("getAndAccumulate"), //
		jMethod<::java::lang::Object(::jint, ::java::lang::Object)>("getAndSet"), //
		jMethod<::java::lang::Object(::jint, ::java::util::function::UnaryOperator)>("getAndUpdate"), //
		jMethod<::jvoid(::jint, ::java::lang::Object)>("lazySet"), //
		jMethod<::jint()>("length"), //
		jMethod<::jvoid(::jint, ::java::lang::Object)>("set"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::lang::Object(::jint, ::java::util::function::UnaryOperator)>("updateAndGet"), //
		jMethod<::jboolean(::jint, ::java::lang::Object, ::java::lang::Object)>("weakCompareAndSet"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto accumulateAndGet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("accumulateAndGet")] != -1);
		return call<R>("accumulateAndGet", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto compareAndSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("compareAndSet")] != -1);
		return call<R>("compareAndSet", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("get")] != -1);
		return call<R>("get", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getAndAccumulate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAndAccumulate")] != -1);
		return call<R>("getAndAccumulate", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getAndSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAndSet")] != -1);
		return call<R>("getAndSet", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getAndUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAndUpdate")] != -1);
		return call<R>("getAndUpdate", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto lazySet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("lazySet")] != -1);
		return call<R>("lazySet", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto length(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("length")] != -1);
		return call<R>("length", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("set")] != -1);
		return call<R>("set", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto updateAndGet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("updateAndGet")] != -1);
		return call<R>("updateAndGet", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto weakCompareAndSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("weakCompareAndSet")] != -1);
		return call<R>("weakCompareAndSet", forward<Args>(args)...);
	}

};

#endif
