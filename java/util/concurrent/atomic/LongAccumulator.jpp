#ifndef java_util_concurrent_atomic_LongAccumulator_HPP
#define java_util_concurrent_atomic_LongAccumulator_HPP

#include "../../../../jfwd_decl.hpp"

class ::java::util::concurrent::atomic::LongAccumulator : public jObject<::java::util::concurrent::atomic::LongAccumulator, ::java::util::concurrent::atomic::Striped64> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_concurrent_atomic / "LongAccumulator";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::util::function::LongBinaryOperator, ::jlong)>(), //
		jMethod<::jvoid(::jlong)>("accumulate"), //
		jMethod<::jdouble()>("doubleValue"), //
		jMethod<::jfloat()>("floatValue"), //
		jMethod<::jlong()>("get"), //
		jMethod<::jlong()>("getThenReset"), //
		jMethod<::jint()>("intValue"), //
		jMethod<::jlong()>("longValue"), //
		jMethod<::jvoid()>("reset"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto accumulate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("accumulate")] != -1);
		return call<R>("accumulate", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto doubleValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("doubleValue")] != -1);
		return call<R>("doubleValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto floatValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("floatValue")] != -1);
		return call<R>("floatValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getThenReset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getThenReset")] != -1);
		return call<R>("getThenReset", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto intValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("intValue")] != -1);
		return call<R>("intValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto longValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("longValue")] != -1);
		return call<R>("longValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
