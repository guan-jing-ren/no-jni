#ifndef java_util_concurrent_atomic_AtomicIntegerFieldUpdater_HPP
#define java_util_concurrent_atomic_AtomicIntegerFieldUpdater_HPP

#include "../../../../jfwd_decl.hpp"

class ::java::util::concurrent::atomic::AtomicIntegerFieldUpdater : public jObject<::java::util::concurrent::atomic::AtomicIntegerFieldUpdater, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_concurrent_atomic / "AtomicIntegerFieldUpdater";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint(::java::lang::Object, ::jint, ::java::util::function::IntBinaryOperator)>("accumulateAndGet"), //
		jMethod<::jint(::java::lang::Object, ::jint)>("addAndGet"), //
		jMethod<::jboolean(::java::lang::Object, ::jint, ::jint)>("compareAndSet"), //
		jMethod<::jint(::java::lang::Object)>("decrementAndGet"), //
		jMethod<::jint(::java::lang::Object)>("get"), //
		jMethod<::jint(::java::lang::Object, ::jint, ::java::util::function::IntBinaryOperator)>("getAndAccumulate"), //
		jMethod<::jint(::java::lang::Object, ::jint)>("getAndAdd"), //
		jMethod<::jint(::java::lang::Object)>("getAndDecrement"), //
		jMethod<::jint(::java::lang::Object)>("getAndIncrement"), //
		jMethod<::jint(::java::lang::Object, ::jint)>("getAndSet"), //
		jMethod<::jint(::java::lang::Object, ::java::util::function::IntUnaryOperator)>("getAndUpdate"), //
		jMethod<::jint(::java::lang::Object)>("incrementAndGet"), //
		jMethod<::jvoid(::java::lang::Object, ::jint)>("lazySet"), //
		jMethod<::java::util::concurrent::atomic::AtomicIntegerFieldUpdater(::java::lang::Class, ::java::lang::String)>("newUpdater"), //
		jMethod<::jvoid(::java::lang::Object, ::jint)>("set"), //
		jMethod<::jint(::java::lang::Object, ::java::util::function::IntUnaryOperator)>("updateAndGet"), //
		jMethod<::jboolean(::java::lang::Object, ::jint, ::jint)>("weakCompareAndSet"), //
	};

	template<typename R = ::jint, typename... Args>
	auto accumulateAndGet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("accumulateAndGet")] != -1);
		return call<R>("accumulateAndGet", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto addAndGet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addAndGet")] != -1);
		return call<R>("addAndGet", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto compareAndSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compareAndSet")] != -1);
		return call<R>("compareAndSet", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto decrementAndGet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("decrementAndGet")] != -1);
		return call<R>("decrementAndGet", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAndAccumulate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAndAccumulate")] != -1);
		return call<R>("getAndAccumulate", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAndAdd(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAndAdd")] != -1);
		return call<R>("getAndAdd", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAndDecrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAndDecrement")] != -1);
		return call<R>("getAndDecrement", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAndIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAndIncrement")] != -1);
		return call<R>("getAndIncrement", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAndSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAndSet")] != -1);
		return call<R>("getAndSet", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAndUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAndUpdate")] != -1);
		return call<R>("getAndUpdate", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto incrementAndGet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("incrementAndGet")] != -1);
		return call<R>("incrementAndGet", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto lazySet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lazySet")] != -1);
		return call<R>("lazySet", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::concurrent::atomic::AtomicIntegerFieldUpdater, typename... Args>
	static auto newUpdater(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newUpdater")] != -1);
		return scall<R>("newUpdater", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set")] != -1);
		return call<R>("set", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto updateAndGet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateAndGet")] != -1);
		return call<R>("updateAndGet", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto weakCompareAndSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("weakCompareAndSet")] != -1);
		return call<R>("weakCompareAndSet", std::forward<Args>(args)...);
	}

};

#endif
