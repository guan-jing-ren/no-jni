#ifndef java_util_concurrent_locks_JPP
#define java_util_concurrent_locks_JPP

namespace java::util::concurrent::locks { class AbstractOwnableSynchronizer; }
template<> constexpr auto signature<::java::util::concurrent::locks::AbstractOwnableSynchronizer> = ::java_util_concurrent_locks / "AbstractOwnableSynchronizer";
namespace java::util::concurrent::locks { class AbstractQueuedLongSynchronizer; }
template<> constexpr auto signature<::java::util::concurrent::locks::AbstractQueuedLongSynchronizer> = ::java_util_concurrent_locks / "AbstractQueuedLongSynchronizer";
namespace java::util::concurrent::locks { class AbstractQueuedLongSynchronizer$ConditionObject; }
template<> constexpr auto signature<::java::util::concurrent::locks::AbstractQueuedLongSynchronizer$ConditionObject> = ::java_util_concurrent_locks / "AbstractQueuedLongSynchronizer$ConditionObject";
namespace java::util::concurrent::locks { class AbstractQueuedLongSynchronizer$Node; }
template<> constexpr auto signature<::java::util::concurrent::locks::AbstractQueuedLongSynchronizer$Node> = ::java_util_concurrent_locks / "AbstractQueuedLongSynchronizer$Node";
namespace java::util::concurrent::locks { class AbstractQueuedSynchronizer; }
template<> constexpr auto signature<::java::util::concurrent::locks::AbstractQueuedSynchronizer> = ::java_util_concurrent_locks / "AbstractQueuedSynchronizer";
namespace java::util::concurrent::locks { class AbstractQueuedSynchronizer$ConditionObject; }
template<> constexpr auto signature<::java::util::concurrent::locks::AbstractQueuedSynchronizer$ConditionObject> = ::java_util_concurrent_locks / "AbstractQueuedSynchronizer$ConditionObject";
namespace java::util::concurrent::locks { class AbstractQueuedSynchronizer$Node; }
template<> constexpr auto signature<::java::util::concurrent::locks::AbstractQueuedSynchronizer$Node> = ::java_util_concurrent_locks / "AbstractQueuedSynchronizer$Node";
namespace java::util::concurrent::locks { class Condition; }
template<> constexpr auto signature<::java::util::concurrent::locks::Condition> = ::java_util_concurrent_locks / "Condition";
namespace java::util::concurrent::locks { class Lock; }
template<> constexpr auto signature<::java::util::concurrent::locks::Lock> = ::java_util_concurrent_locks / "Lock";
namespace java::util::concurrent::locks { class LockSupport; }
template<> constexpr auto signature<::java::util::concurrent::locks::LockSupport> = ::java_util_concurrent_locks / "LockSupport";
namespace java::util::concurrent::locks { class ReadWriteLock; }
template<> constexpr auto signature<::java::util::concurrent::locks::ReadWriteLock> = ::java_util_concurrent_locks / "ReadWriteLock";
namespace java::util::concurrent::locks { class ReentrantLock; }
template<> constexpr auto signature<::java::util::concurrent::locks::ReentrantLock> = ::java_util_concurrent_locks / "ReentrantLock";
namespace java::util::concurrent::locks { class ReentrantLock$FairSync; }
template<> constexpr auto signature<::java::util::concurrent::locks::ReentrantLock$FairSync> = ::java_util_concurrent_locks / "ReentrantLock$FairSync";
namespace java::util::concurrent::locks { class ReentrantLock$NonfairSync; }
template<> constexpr auto signature<::java::util::concurrent::locks::ReentrantLock$NonfairSync> = ::java_util_concurrent_locks / "ReentrantLock$NonfairSync";
namespace java::util::concurrent::locks { class ReentrantLock$Sync; }
template<> constexpr auto signature<::java::util::concurrent::locks::ReentrantLock$Sync> = ::java_util_concurrent_locks / "ReentrantLock$Sync";
namespace java::util::concurrent::locks { class ReentrantReadWriteLock; }
template<> constexpr auto signature<::java::util::concurrent::locks::ReentrantReadWriteLock> = ::java_util_concurrent_locks / "ReentrantReadWriteLock";
namespace java::util::concurrent::locks { class ReentrantReadWriteLock$FairSync; }
template<> constexpr auto signature<::java::util::concurrent::locks::ReentrantReadWriteLock$FairSync> = ::java_util_concurrent_locks / "ReentrantReadWriteLock$FairSync";
namespace java::util::concurrent::locks { class ReentrantReadWriteLock$NonfairSync; }
template<> constexpr auto signature<::java::util::concurrent::locks::ReentrantReadWriteLock$NonfairSync> = ::java_util_concurrent_locks / "ReentrantReadWriteLock$NonfairSync";
namespace java::util::concurrent::locks { class ReentrantReadWriteLock$ReadLock; }
template<> constexpr auto signature<::java::util::concurrent::locks::ReentrantReadWriteLock$ReadLock> = ::java_util_concurrent_locks / "ReentrantReadWriteLock$ReadLock";
namespace java::util::concurrent::locks { class ReentrantReadWriteLock$Sync; }
template<> constexpr auto signature<::java::util::concurrent::locks::ReentrantReadWriteLock$Sync> = ::java_util_concurrent_locks / "ReentrantReadWriteLock$Sync";
namespace java::util::concurrent::locks { class ReentrantReadWriteLock$Sync$HoldCounter; }
template<> constexpr auto signature<::java::util::concurrent::locks::ReentrantReadWriteLock$Sync$HoldCounter> = ::java_util_concurrent_locks / "ReentrantReadWriteLock$Sync$HoldCounter";
namespace java::util::concurrent::locks { class ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter; }
template<> constexpr auto signature<::java::util::concurrent::locks::ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter> = ::java_util_concurrent_locks / "ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter";
namespace java::util::concurrent::locks { class ReentrantReadWriteLock$WriteLock; }
template<> constexpr auto signature<::java::util::concurrent::locks::ReentrantReadWriteLock$WriteLock> = ::java_util_concurrent_locks / "ReentrantReadWriteLock$WriteLock";
namespace java::util::concurrent::locks { class StampedLock; }
template<> constexpr auto signature<::java::util::concurrent::locks::StampedLock> = ::java_util_concurrent_locks / "StampedLock";
namespace java::util::concurrent::locks { class StampedLock$ReadLockView; }
template<> constexpr auto signature<::java::util::concurrent::locks::StampedLock$ReadLockView> = ::java_util_concurrent_locks / "StampedLock$ReadLockView";
namespace java::util::concurrent::locks { class StampedLock$ReadWriteLockView; }
template<> constexpr auto signature<::java::util::concurrent::locks::StampedLock$ReadWriteLockView> = ::java_util_concurrent_locks / "StampedLock$ReadWriteLockView";
namespace java::util::concurrent::locks { class StampedLock$WNode; }
template<> constexpr auto signature<::java::util::concurrent::locks::StampedLock$WNode> = ::java_util_concurrent_locks / "StampedLock$WNode";
namespace java::util::concurrent::locks { class StampedLock$WriteLockView; }
template<> constexpr auto signature<::java::util::concurrent::locks::StampedLock$WriteLockView> = ::java_util_concurrent_locks / "StampedLock$WriteLockView";

#endif
