#ifndef java_util_concurrent_locks_ReentrantReadWriteLock_HPP
#define java_util_concurrent_locks_ReentrantReadWriteLock_HPP

#include "../../../../jfwd_decl.hpp"

class ::java::util::concurrent::locks::ReentrantReadWriteLock : public jObject<::java::util::concurrent::locks::ReentrantReadWriteLock, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_concurrent_locks / "ReentrantReadWriteLock";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jboolean)>(), //
		jMethod<::jint()>("getQueueLength"), //
		jMethod<::jint()>("getReadHoldCount"), //
		jMethod<::jint()>("getReadLockCount"), //
		jMethod<::jint(::java::util::concurrent::locks::Condition)>("getWaitQueueLength"), //
		jMethod<::jint()>("getWriteHoldCount"), //
		jMethod<::jboolean(::java::lang::Thread)>("hasQueuedThread"), //
		jMethod<::jboolean()>("hasQueuedThreads"), //
		jMethod<::jboolean(::java::util::concurrent::locks::Condition)>("hasWaiters"), //
		jMethod<::jboolean()>("isFair"), //
		jMethod<::jboolean()>("isWriteLocked"), //
		jMethod<::jboolean()>("isWriteLockedByCurrentThread"), //
		jMethod<::java::util::concurrent::locks::Lock()>("readLock"), //
		jMethod<::java::util::concurrent::locks::ReentrantReadWriteLock$ReadLock()>("readLock"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::util::concurrent::locks::Lock()>("writeLock"), //
		jMethod<::java::util::concurrent::locks::ReentrantReadWriteLock$WriteLock()>("writeLock"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getQueueLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getQueueLength")] != -1);
		return call<R>("getQueueLength", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getReadHoldCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReadHoldCount")] != -1);
		return call<R>("getReadHoldCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getReadLockCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReadLockCount")] != -1);
		return call<R>("getReadLockCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWaitQueueLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWaitQueueLength")] != -1);
		return call<R>("getWaitQueueLength", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWriteHoldCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWriteHoldCount")] != -1);
		return call<R>("getWriteHoldCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasQueuedThread(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasQueuedThread")] != -1);
		return call<R>("hasQueuedThread", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasQueuedThreads(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasQueuedThreads")] != -1);
		return call<R>("hasQueuedThreads", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasWaiters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasWaiters")] != -1);
		return call<R>("hasWaiters", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFair(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFair")] != -1);
		return call<R>("isFair", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isWriteLocked(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isWriteLocked")] != -1);
		return call<R>("isWriteLocked", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isWriteLockedByCurrentThread(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isWriteLockedByCurrentThread")] != -1);
		return call<R>("isWriteLockedByCurrentThread", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::concurrent::locks::Lock, typename... Args>
	auto readLock(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readLock")] != -1);
		return call<R>("readLock", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::concurrent::locks::Lock, typename... Args>
	auto writeLock(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeLock")] != -1);
		return call<R>("writeLock", std::forward<Args>(args)...);
	}

};

#endif
