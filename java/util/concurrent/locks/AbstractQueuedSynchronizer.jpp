#ifndef java_util_concurrent_locks_AbstractQueuedSynchronizer_HPP
#define java_util_concurrent_locks_AbstractQueuedSynchronizer_HPP

#include "../../../../jfwd_decl.hpp"

class ::java::util::concurrent::locks::AbstractQueuedSynchronizer : public jObject<::java::util::concurrent::locks::AbstractQueuedSynchronizer, ::java::util::concurrent::locks::AbstractOwnableSynchronizer> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_concurrent_locks / "AbstractQueuedSynchronizer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::jint)>("acquire"), //
		jMethod<::jvoid(::jint)>("acquireInterruptibly"), //
		jMethod<::jvoid(::jint)>("acquireShared"), //
		jMethod<::jvoid(::jint)>("acquireSharedInterruptibly"), //
		jMethod<::java::util::Collection()>("getExclusiveQueuedThreads"), //
		jMethod<::java::lang::Thread()>("getFirstQueuedThread"), //
		jMethod<::jint()>("getQueueLength"), //
		jMethod<::java::util::Collection()>("getQueuedThreads"), //
		jMethod<::java::util::Collection()>("getSharedQueuedThreads"), //
		jMethod<::jint(::java::util::concurrent::locks::AbstractQueuedSynchronizer$ConditionObject)>("getWaitQueueLength"), //
		jMethod<::java::util::Collection(::java::util::concurrent::locks::AbstractQueuedSynchronizer$ConditionObject)>("getWaitingThreads"), //
		jMethod<::jboolean()>("hasContended"), //
		jMethod<::jboolean()>("hasQueuedPredecessors"), //
		jMethod<::jboolean()>("hasQueuedThreads"), //
		jMethod<::jboolean(::java::util::concurrent::locks::AbstractQueuedSynchronizer$ConditionObject)>("hasWaiters"), //
		jMethod<::jboolean(::java::lang::Thread)>("isQueued"), //
		jMethod<::jboolean(::java::util::concurrent::locks::AbstractQueuedSynchronizer$ConditionObject)>("owns"), //
		jMethod<::jboolean(::jint)>("release"), //
		jMethod<::jboolean(::jint)>("releaseShared"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jboolean(::jint, ::jlong)>("tryAcquireNanos"), //
		jMethod<::jboolean(::jint, ::jlong)>("tryAcquireSharedNanos"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto acquire(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("acquire")] != -1);
		return call<R>("acquire", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto acquireInterruptibly(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("acquireInterruptibly")] != -1);
		return call<R>("acquireInterruptibly", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto acquireShared(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("acquireShared")] != -1);
		return call<R>("acquireShared", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto acquireSharedInterruptibly(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("acquireSharedInterruptibly")] != -1);
		return call<R>("acquireSharedInterruptibly", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Collection, typename... Args>
	auto getExclusiveQueuedThreads(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExclusiveQueuedThreads")] != -1);
		return call<R>("getExclusiveQueuedThreads", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Thread, typename... Args>
	auto getFirstQueuedThread(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFirstQueuedThread")] != -1);
		return call<R>("getFirstQueuedThread", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getQueueLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getQueueLength")] != -1);
		return call<R>("getQueueLength", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Collection, typename... Args>
	auto getQueuedThreads(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getQueuedThreads")] != -1);
		return call<R>("getQueuedThreads", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Collection, typename... Args>
	auto getSharedQueuedThreads(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSharedQueuedThreads")] != -1);
		return call<R>("getSharedQueuedThreads", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWaitQueueLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWaitQueueLength")] != -1);
		return call<R>("getWaitQueueLength", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Collection, typename... Args>
	auto getWaitingThreads(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWaitingThreads")] != -1);
		return call<R>("getWaitingThreads", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasContended(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasContended")] != -1);
		return call<R>("hasContended", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasQueuedPredecessors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasQueuedPredecessors")] != -1);
		return call<R>("hasQueuedPredecessors", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasQueuedThreads(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasQueuedThreads")] != -1);
		return call<R>("hasQueuedThreads", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasWaiters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasWaiters")] != -1);
		return call<R>("hasWaiters", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isQueued(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isQueued")] != -1);
		return call<R>("isQueued", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto owns(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("owns")] != -1);
		return call<R>("owns", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto release(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("release")] != -1);
		return call<R>("release", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto releaseShared(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("releaseShared")] != -1);
		return call<R>("releaseShared", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto tryAcquireNanos(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("tryAcquireNanos")] != -1);
		return call<R>("tryAcquireNanos", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto tryAcquireSharedNanos(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("tryAcquireSharedNanos")] != -1);
		return call<R>("tryAcquireSharedNanos", std::forward<Args>(args)...);
	}

};

#endif
