#ifndef java_util_concurrent_locks_ReentrantLock_HPP
#define java_util_concurrent_locks_ReentrantLock_HPP

#include "../../../../jfwd_decl.hpp"

class ::java::util::concurrent::locks::ReentrantLock : public jObject<::java::util::concurrent::locks::ReentrantLock, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_concurrent_locks / "ReentrantLock";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jboolean)>(), //
		jMethod<::jint()>("getHoldCount"), //
		jMethod<::jint()>("getQueueLength"), //
		jMethod<::jint(::java::util::concurrent::locks::Condition)>("getWaitQueueLength"), //
		jMethod<::jboolean(::java::lang::Thread)>("hasQueuedThread"), //
		jMethod<::jboolean()>("hasQueuedThreads"), //
		jMethod<::jboolean(::java::util::concurrent::locks::Condition)>("hasWaiters"), //
		jMethod<::jboolean()>("isFair"), //
		jMethod<::jboolean()>("isHeldByCurrentThread"), //
		jMethod<::jboolean()>("isLocked"), //
		jMethod<::jvoid()>("lock"), //
		jMethod<::jvoid()>("lockInterruptibly"), //
		jMethod<::java::util::concurrent::locks::Condition()>("newCondition"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jboolean()>("tryLock"), //
		jMethod<::jboolean(::jlong, ::java::util::concurrent::TimeUnit)>("tryLock"), //
		jMethod<::jvoid()>("unlock"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getHoldCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHoldCount")] != -1);
		return call<R>("getHoldCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getQueueLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getQueueLength")] != -1);
		return call<R>("getQueueLength", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWaitQueueLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWaitQueueLength")] != -1);
		return call<R>("getWaitQueueLength", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasQueuedThread(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasQueuedThread")] != -1);
		return call<R>("hasQueuedThread", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasQueuedThreads(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasQueuedThreads")] != -1);
		return call<R>("hasQueuedThreads", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasWaiters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasWaiters")] != -1);
		return call<R>("hasWaiters", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFair(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFair")] != -1);
		return call<R>("isFair", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isHeldByCurrentThread(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isHeldByCurrentThread")] != -1);
		return call<R>("isHeldByCurrentThread", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLocked(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLocked")] != -1);
		return call<R>("isLocked", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto lock(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lock")] != -1);
		return call<R>("lock", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto lockInterruptibly(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lockInterruptibly")] != -1);
		return call<R>("lockInterruptibly", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::concurrent::locks::Condition, typename... Args>
	auto newCondition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newCondition")] != -1);
		return call<R>("newCondition", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto tryLock(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("tryLock")] != -1);
		return call<R>("tryLock", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unlock(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unlock")] != -1);
		return call<R>("unlock", std::forward<Args>(args)...);
	}

};

#endif
