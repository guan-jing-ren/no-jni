#ifndef java_util_concurrent_TimeUnit_HPP
#define java_util_concurrent_TimeUnit_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::concurrent::TimeUnit : public jObject<::java::util::concurrent::TimeUnit, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_concurrent / "TimeUnit";

	constexpr static Enume field_signatures{
		jField<::java::util::concurrent::TimeUnit>("DAYS"), //
		jField<::java::util::concurrent::TimeUnit>("HOURS"), //
		jField<::java::util::concurrent::TimeUnit>("MICROSECONDS"), //
		jField<::java::util::concurrent::TimeUnit>("MILLISECONDS"), //
		jField<::java::util::concurrent::TimeUnit>("MINUTES"), //
		jField<::java::util::concurrent::TimeUnit>("NANOSECONDS"), //
		jField<::java::util::concurrent::TimeUnit>("SECONDS"), //
	};

	template<typename F = ::java::util::concurrent::TimeUnit>
	static auto DAYS() {
		static_assert(field_signatures[jField<F>("DAYS")] != -1);
		return sat<F>("DAYS");
	}

	template<typename F = ::java::util::concurrent::TimeUnit>
	static auto HOURS() {
		static_assert(field_signatures[jField<F>("HOURS")] != -1);
		return sat<F>("HOURS");
	}

	template<typename F = ::java::util::concurrent::TimeUnit>
	static auto MICROSECONDS() {
		static_assert(field_signatures[jField<F>("MICROSECONDS")] != -1);
		return sat<F>("MICROSECONDS");
	}

	template<typename F = ::java::util::concurrent::TimeUnit>
	static auto MILLISECONDS() {
		static_assert(field_signatures[jField<F>("MILLISECONDS")] != -1);
		return sat<F>("MILLISECONDS");
	}

	template<typename F = ::java::util::concurrent::TimeUnit>
	static auto MINUTES() {
		static_assert(field_signatures[jField<F>("MINUTES")] != -1);
		return sat<F>("MINUTES");
	}

	template<typename F = ::java::util::concurrent::TimeUnit>
	static auto NANOSECONDS() {
		static_assert(field_signatures[jField<F>("NANOSECONDS")] != -1);
		return sat<F>("NANOSECONDS");
	}

	template<typename F = ::java::util::concurrent::TimeUnit>
	static auto SECONDS() {
		static_assert(field_signatures[jField<F>("SECONDS")] != -1);
		return sat<F>("SECONDS");
	}

	constexpr static Enume method_signatures{
		jMethod<::jlong(::jlong, ::java::util::concurrent::TimeUnit)>("convert"), //
		jMethod<::jvoid(::jlong)>("sleep"), //
		jMethod<::jvoid(::java::lang::Thread, ::jlong)>("timedJoin"), //
		jMethod<::jvoid(::java::lang::Object, ::jlong)>("timedWait"), //
		jMethod<::jlong(::jlong)>("toDays"), //
		jMethod<::jlong(::jlong)>("toHours"), //
		jMethod<::jlong(::jlong)>("toMicros"), //
		jMethod<::jlong(::jlong)>("toMillis"), //
		jMethod<::jlong(::jlong)>("toMinutes"), //
		jMethod<::jlong(::jlong)>("toNanos"), //
		jMethod<::jlong(::jlong)>("toSeconds"), //
		jMethod<::java::util::concurrent::TimeUnit(::java::lang::String)>("valueOf"), //
		jMethod<::java::util::concurrent::TimeUnit *()>("values"), //
	};

	template<typename R = ::jlong, typename... Args>
	auto convert(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("convert")] != -1);
		return call<R>("convert", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto sleep(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("sleep")] != -1);
		return call<R>("sleep", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto timedJoin(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("timedJoin")] != -1);
		return call<R>("timedJoin", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto timedWait(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("timedWait")] != -1);
		return call<R>("timedWait", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto toDays(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toDays")] != -1);
		return call<R>("toDays", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto toHours(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toHours")] != -1);
		return call<R>("toHours", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto toMicros(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toMicros")] != -1);
		return call<R>("toMicros", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto toMillis(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toMillis")] != -1);
		return call<R>("toMillis", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto toMinutes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toMinutes")] != -1);
		return call<R>("toMinutes", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto toNanos(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toNanos")] != -1);
		return call<R>("toNanos", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto toSeconds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toSeconds")] != -1);
		return call<R>("toSeconds", forward<Args>(args)...);
	}

	template<typename R = ::java::util::concurrent::TimeUnit, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", forward<Args>(args)...);
	}

	template<typename R = ::java::util::concurrent::TimeUnit *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", forward<Args>(args)...);
	}

};

#endif
