#ifndef java_util_concurrent_FutureTask_HPP
#define java_util_concurrent_FutureTask_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::concurrent::FutureTask : public jObject<::java::util::concurrent::FutureTask, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_concurrent / "FutureTask";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::Runnable, ::java::lang::Object)>(), //
		jConstructor<::jvoid(::java::util::concurrent::Callable)>(), //
		jMethod<::jboolean(::jboolean)>("cancel"), //
		jMethod<::java::lang::Object()>("get"), //
		jMethod<::java::lang::Object(::jlong, ::java::util::concurrent::TimeUnit)>("get"), //
		jMethod<::jboolean()>("isCancelled"), //
		jMethod<::jboolean()>("isDone"), //
		jMethod<::jvoid()>("run"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto cancel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cancel")] != -1);
		return call<R>("cancel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCancelled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCancelled")] != -1);
		return call<R>("isCancelled", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDone")] != -1);
		return call<R>("isDone", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto run(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("run")] != -1);
		return call<R>("run", std::forward<Args>(args)...);
	}

};

#endif
