#ifndef java_util_concurrent_LinkedTransferQueue_HPP
#define java_util_concurrent_LinkedTransferQueue_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::concurrent::LinkedTransferQueue : public jObject<::java::util::concurrent::LinkedTransferQueue, ::java::util::AbstractQueue> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_concurrent / "LinkedTransferQueue";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::util::Collection)>(), //
		jMethod<::jboolean(::java::lang::Object)>("add"), //
		jMethod<::jboolean(::java::lang::Object)>("contains"), //
		jMethod<::jint(::java::util::Collection)>("drainTo"), //
		jMethod<::jint(::java::util::Collection, ::jint)>("drainTo"), //
		jMethod<::jint()>("getWaitingConsumerCount"), //
		jMethod<::jboolean()>("hasWaitingConsumer"), //
		jMethod<::jboolean()>("isEmpty"), //
		jMethod<::java::util::Iterator()>("iterator"), //
		jMethod<::jboolean(::java::lang::Object)>("offer"), //
		jMethod<::jboolean(::java::lang::Object, ::jlong, ::java::util::concurrent::TimeUnit)>("offer"), //
		jMethod<::java::lang::Object()>("peek"), //
		jMethod<::java::lang::Object()>("poll"), //
		jMethod<::java::lang::Object(::jlong, ::java::util::concurrent::TimeUnit)>("poll"), //
		jMethod<::jvoid(::java::lang::Object)>("put"), //
		jMethod<::jint()>("remainingCapacity"), //
		jMethod<::jboolean(::java::lang::Object)>("remove"), //
		jMethod<::jint()>("size"), //
		jMethod<::java::util::Spliterator()>("spliterator"), //
		jMethod<::java::lang::Object()>("take"), //
		jMethod<::jvoid(::java::lang::Object)>("transfer"), //
		jMethod<::jboolean(::java::lang::Object)>("tryTransfer"), //
		jMethod<::jboolean(::java::lang::Object, ::jlong, ::java::util::concurrent::TimeUnit)>("tryTransfer"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto contains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("contains")] != -1);
		return call<R>("contains", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto drainTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drainTo")] != -1);
		return call<R>("drainTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWaitingConsumerCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWaitingConsumerCount")] != -1);
		return call<R>("getWaitingConsumerCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasWaitingConsumer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasWaitingConsumer")] != -1);
		return call<R>("hasWaitingConsumer", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEmpty")] != -1);
		return call<R>("isEmpty", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto iterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("iterator")] != -1);
		return call<R>("iterator", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto offer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("offer")] != -1);
		return call<R>("offer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto peek(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("peek")] != -1);
		return call<R>("peek", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto poll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("poll")] != -1);
		return call<R>("poll", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto put(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("put")] != -1);
		return call<R>("put", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto remainingCapacity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remainingCapacity")] != -1);
		return call<R>("remainingCapacity", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto size(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("size")] != -1);
		return call<R>("size", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Spliterator, typename... Args>
	auto spliterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("spliterator")] != -1);
		return call<R>("spliterator", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto take(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("take")] != -1);
		return call<R>("take", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto transfer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("transfer")] != -1);
		return call<R>("transfer", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto tryTransfer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("tryTransfer")] != -1);
		return call<R>("tryTransfer", std::forward<Args>(args)...);
	}

};

#endif
