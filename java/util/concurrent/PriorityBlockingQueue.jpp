#ifndef java_util_concurrent_PriorityBlockingQueue_HPP
#define java_util_concurrent_PriorityBlockingQueue_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::concurrent::PriorityBlockingQueue : public jObject<::java::util::concurrent::PriorityBlockingQueue, ::java::util::AbstractQueue> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_concurrent / "PriorityBlockingQueue";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint)>(), //
		jConstructor<::jvoid(::jint, ::java::util::Comparator)>(), //
		jConstructor<::jvoid(::java::util::Collection)>(), //
		jMethod<::jboolean(::java::lang::Object)>("add"), //
		jMethod<::jvoid()>("clear"), //
		jMethod<::java::util::Comparator()>("comparator"), //
		jMethod<::jboolean(::java::lang::Object)>("contains"), //
		jMethod<::jint(::java::util::Collection)>("drainTo"), //
		jMethod<::jint(::java::util::Collection, ::jint)>("drainTo"), //
		jMethod<::java::util::Iterator()>("iterator"), //
		jMethod<::jboolean(::java::lang::Object)>("offer"), //
		jMethod<::jboolean(::java::lang::Object, ::jlong, ::java::util::concurrent::TimeUnit)>("offer"), //
		jMethod<::java::lang::Object()>("peek"), //
		jMethod<::java::lang::Object()>("poll"), //
		jMethod<::java::lang::Object(::jlong, ::java::util::concurrent::TimeUnit)>("poll"), //
		jMethod<::jvoid(::java::lang::Object)>("put"), //
		jMethod<::jint()>("remainingCapacity"), //
		jMethod<::jboolean(::java::lang::Object)>("remove"), //
		jMethod<::jint()>("size"), //
		jMethod<::java::util::Spliterator()>("spliterator"), //
		jMethod<::java::lang::Object()>("take"), //
		jMethod<::java::lang::Object *()>("toArray"), //
		jMethod<::java::lang::Object *(::java::lang::Object *)>("toArray"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("add")] != -1);
		return call<R>("add", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Comparator, typename... Args>
	auto comparator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("comparator")] != -1);
		return call<R>("comparator", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto contains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("contains")] != -1);
		return call<R>("contains", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto drainTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("drainTo")] != -1);
		return call<R>("drainTo", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto iterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("iterator")] != -1);
		return call<R>("iterator", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto offer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("offer")] != -1);
		return call<R>("offer", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto peek(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("peek")] != -1);
		return call<R>("peek", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto poll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("poll")] != -1);
		return call<R>("poll", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto put(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("put")] != -1);
		return call<R>("put", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto remainingCapacity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("remainingCapacity")] != -1);
		return call<R>("remainingCapacity", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto size(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("size")] != -1);
		return call<R>("size", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Spliterator, typename... Args>
	auto spliterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("spliterator")] != -1);
		return call<R>("spliterator", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto take(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("take")] != -1);
		return call<R>("take", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object *, typename... Args>
	auto toArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toArray")] != -1);
		return call<R>("toArray", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
