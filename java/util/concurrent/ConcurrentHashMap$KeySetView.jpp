#ifndef java_util_concurrent_ConcurrentHashMap$KeySetView_HPP
#define java_util_concurrent_ConcurrentHashMap$KeySetView_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::concurrent::ConcurrentHashMap$KeySetView : public jObject<::java::util::concurrent::ConcurrentHashMap$KeySetView, ::java::util::concurrent::ConcurrentHashMap$CollectionView> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_concurrent / "ConcurrentHashMap$KeySetView";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::Object)>("add"), //
		jMethod<::jboolean(::java::util::Collection)>("addAll"), //
		jMethod<::jboolean(::java::lang::Object)>("contains"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jvoid(::java::util::function::Consumer)>("forEach"), //
		jMethod<::java::util::concurrent::ConcurrentHashMap()>("getMap"), //
		jMethod<::java::lang::Object()>("getMappedValue"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::util::Iterator()>("iterator"), //
		jMethod<::jboolean(::java::lang::Object)>("remove"), //
		jMethod<::java::util::Spliterator()>("spliterator"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("add")] != -1);
		return call<R>("add", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto addAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addAll")] != -1);
		return call<R>("addAll", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto contains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("contains")] != -1);
		return call<R>("contains", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto forEach(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("forEach")] != -1);
		return call<R>("forEach", forward<Args>(args)...);
	}

	template<typename R = ::java::util::concurrent::ConcurrentHashMap, typename... Args>
	auto getMap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMap")] != -1);
		return call<R>("getMap", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getMappedValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMappedValue")] != -1);
		return call<R>("getMappedValue", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto iterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("iterator")] != -1);
		return call<R>("iterator", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Spliterator, typename... Args>
	auto spliterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("spliterator")] != -1);
		return call<R>("spliterator", forward<Args>(args)...);
	}

};

#endif
