#ifndef java_util_concurrent_ScheduledThreadPoolExecutor_HPP
#define java_util_concurrent_ScheduledThreadPoolExecutor_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::concurrent::ScheduledThreadPoolExecutor : public jObject<::java::util::concurrent::ScheduledThreadPoolExecutor, ::java::util::concurrent::ThreadPoolExecutor> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_concurrent / "ScheduledThreadPoolExecutor";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint)>(), //
		jConstructor<::jvoid(::jint, ::java::util::concurrent::RejectedExecutionHandler)>(), //
		jConstructor<::jvoid(::jint, ::java::util::concurrent::ThreadFactory)>(), //
		jConstructor<::jvoid(::jint, ::java::util::concurrent::ThreadFactory, ::java::util::concurrent::RejectedExecutionHandler)>(), //
		jMethod<::jvoid(::java::lang::Runnable)>("execute"), //
		jMethod<::jboolean()>("getContinueExistingPeriodicTasksAfterShutdownPolicy"), //
		jMethod<::jboolean()>("getExecuteExistingDelayedTasksAfterShutdownPolicy"), //
		jMethod<::java::util::concurrent::BlockingQueue()>("getQueue"), //
		jMethod<::jboolean()>("getRemoveOnCancelPolicy"), //
		jMethod<::java::util::concurrent::ScheduledFuture(::java::lang::Runnable, ::jlong, ::java::util::concurrent::TimeUnit)>("schedule"), //
		jMethod<::java::util::concurrent::ScheduledFuture(::java::util::concurrent::Callable, ::jlong, ::java::util::concurrent::TimeUnit)>("schedule"), //
		jMethod<::java::util::concurrent::ScheduledFuture(::java::lang::Runnable, ::jlong, ::jlong, ::java::util::concurrent::TimeUnit)>("scheduleAtFixedRate"), //
		jMethod<::java::util::concurrent::ScheduledFuture(::java::lang::Runnable, ::jlong, ::jlong, ::java::util::concurrent::TimeUnit)>("scheduleWithFixedDelay"), //
		jMethod<::jvoid(::jboolean)>("setContinueExistingPeriodicTasksAfterShutdownPolicy"), //
		jMethod<::jvoid(::jboolean)>("setExecuteExistingDelayedTasksAfterShutdownPolicy"), //
		jMethod<::jvoid(::jboolean)>("setRemoveOnCancelPolicy"), //
		jMethod<::jvoid()>("shutdown"), //
		jMethod<::java::util::List()>("shutdownNow"), //
		jMethod<::java::util::concurrent::Future(::java::lang::Runnable)>("submit"), //
		jMethod<::java::util::concurrent::Future(::java::lang::Runnable, ::java::lang::Object)>("submit"), //
		jMethod<::java::util::concurrent::Future(::java::util::concurrent::Callable)>("submit"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto execute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("execute")] != -1);
		return call<R>("execute", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getContinueExistingPeriodicTasksAfterShutdownPolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContinueExistingPeriodicTasksAfterShutdownPolicy")] != -1);
		return call<R>("getContinueExistingPeriodicTasksAfterShutdownPolicy", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getExecuteExistingDelayedTasksAfterShutdownPolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExecuteExistingDelayedTasksAfterShutdownPolicy")] != -1);
		return call<R>("getExecuteExistingDelayedTasksAfterShutdownPolicy", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::concurrent::BlockingQueue, typename... Args>
	auto getQueue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getQueue")] != -1);
		return call<R>("getQueue", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getRemoveOnCancelPolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRemoveOnCancelPolicy")] != -1);
		return call<R>("getRemoveOnCancelPolicy", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::concurrent::ScheduledFuture, typename... Args>
	auto schedule(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("schedule")] != -1);
		return call<R>("schedule", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::concurrent::ScheduledFuture, typename... Args>
	auto scheduleAtFixedRate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("scheduleAtFixedRate")] != -1);
		return call<R>("scheduleAtFixedRate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::concurrent::ScheduledFuture, typename... Args>
	auto scheduleWithFixedDelay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("scheduleWithFixedDelay")] != -1);
		return call<R>("scheduleWithFixedDelay", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setContinueExistingPeriodicTasksAfterShutdownPolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setContinueExistingPeriodicTasksAfterShutdownPolicy")] != -1);
		return call<R>("setContinueExistingPeriodicTasksAfterShutdownPolicy", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setExecuteExistingDelayedTasksAfterShutdownPolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setExecuteExistingDelayedTasksAfterShutdownPolicy")] != -1);
		return call<R>("setExecuteExistingDelayedTasksAfterShutdownPolicy", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRemoveOnCancelPolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRemoveOnCancelPolicy")] != -1);
		return call<R>("setRemoveOnCancelPolicy", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto shutdown(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shutdown")] != -1);
		return call<R>("shutdown", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto shutdownNow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shutdownNow")] != -1);
		return call<R>("shutdownNow", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::concurrent::Future, typename... Args>
	auto submit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("submit")] != -1);
		return call<R>("submit", std::forward<Args>(args)...);
	}

};

#endif
