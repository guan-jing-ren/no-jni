#ifndef java_util_Stack_HPP
#define java_util_Stack_HPP

#include "../../jfwd_decl.hpp"

class ::java::util::Stack : public jObject<::java::util::Stack, ::java::util::Vector> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util / "Stack";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jboolean()>("empty"), //
		jMethod<::java::lang::Object()>("peek"), //
		jMethod<::java::lang::Object()>("pop"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("push"), //
		jMethod<::jint(::java::lang::Object)>("search"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto empty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("empty")] != -1);
		return call<R>("empty", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto peek(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("peek")] != -1);
		return call<R>("peek", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto pop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("pop")] != -1);
		return call<R>("pop", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto push(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("push")] != -1);
		return call<R>("push", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto search(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("search")] != -1);
		return call<R>("search", std::forward<Args>(args)...);
	}

};

#endif
