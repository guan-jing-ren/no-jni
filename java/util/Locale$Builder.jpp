#ifndef java_util_Locale$Builder_HPP
#define java_util_Locale$Builder_HPP

#include "../../jfwd_decl.hpp"

class ::java::util::Locale$Builder : public jObject<::java::util::Locale$Builder, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util / "Locale$Builder";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::util::Locale$Builder(::java::lang::String)>("addUnicodeLocaleAttribute"), //
		jMethod<::java::util::Locale()>("build"), //
		jMethod<::java::util::Locale$Builder()>("clear"), //
		jMethod<::java::util::Locale$Builder()>("clearExtensions"), //
		jMethod<::java::util::Locale$Builder(::java::lang::String)>("removeUnicodeLocaleAttribute"), //
		jMethod<::java::util::Locale$Builder(::jchar, ::java::lang::String)>("setExtension"), //
		jMethod<::java::util::Locale$Builder(::java::lang::String)>("setLanguage"), //
		jMethod<::java::util::Locale$Builder(::java::lang::String)>("setLanguageTag"), //
		jMethod<::java::util::Locale$Builder(::java::util::Locale)>("setLocale"), //
		jMethod<::java::util::Locale$Builder(::java::lang::String)>("setRegion"), //
		jMethod<::java::util::Locale$Builder(::java::lang::String)>("setScript"), //
		jMethod<::java::util::Locale$Builder(::java::lang::String, ::java::lang::String)>("setUnicodeLocaleKeyword"), //
		jMethod<::java::util::Locale$Builder(::java::lang::String)>("setVariant"), //
	};

	template<typename R = ::java::util::Locale$Builder, typename... Args>
	auto addUnicodeLocaleAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addUnicodeLocaleAttribute")] != -1);
		return call<R>("addUnicodeLocaleAttribute", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale, typename... Args>
	auto build(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("build")] != -1);
		return call<R>("build", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale$Builder, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale$Builder, typename... Args>
	auto clearExtensions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clearExtensions")] != -1);
		return call<R>("clearExtensions", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale$Builder, typename... Args>
	auto removeUnicodeLocaleAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeUnicodeLocaleAttribute")] != -1);
		return call<R>("removeUnicodeLocaleAttribute", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale$Builder, typename... Args>
	auto setExtension(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setExtension")] != -1);
		return call<R>("setExtension", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale$Builder, typename... Args>
	auto setLanguage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLanguage")] != -1);
		return call<R>("setLanguage", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale$Builder, typename... Args>
	auto setLanguageTag(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLanguageTag")] != -1);
		return call<R>("setLanguageTag", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale$Builder, typename... Args>
	auto setLocale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLocale")] != -1);
		return call<R>("setLocale", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale$Builder, typename... Args>
	auto setRegion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setRegion")] != -1);
		return call<R>("setRegion", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale$Builder, typename... Args>
	auto setScript(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setScript")] != -1);
		return call<R>("setScript", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale$Builder, typename... Args>
	auto setUnicodeLocaleKeyword(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setUnicodeLocaleKeyword")] != -1);
		return call<R>("setUnicodeLocaleKeyword", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale$Builder, typename... Args>
	auto setVariant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setVariant")] != -1);
		return call<R>("setVariant", forward<Args>(args)...);
	}

};

#endif
