#ifndef java_util_Calendar_HPP
#define java_util_Calendar_HPP

#include "../../jfwd_decl.hpp"

class ::java::util::Calendar : public jObject<::java::util::Calendar, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util / "Calendar";

	constexpr static Enume field_signatures{
		jField<::jint>("ALL_STYLES"), //
		jField<::jint>("AM"), //
		jField<::jint>("AM_PM"), //
		jField<::jint>("APRIL"), //
		jField<::jint>("AUGUST"), //
		jField<::jint>("DATE"), //
		jField<::jint>("DAY_OF_MONTH"), //
		jField<::jint>("DAY_OF_WEEK"), //
		jField<::jint>("DAY_OF_WEEK_IN_MONTH"), //
		jField<::jint>("DAY_OF_YEAR"), //
		jField<::jint>("DECEMBER"), //
		jField<::jint>("DST_OFFSET"), //
		jField<::jint>("ERA"), //
		jField<::jint>("FEBRUARY"), //
		jField<::jint>("FIELD_COUNT"), //
		jField<::jint>("FRIDAY"), //
		jField<::jint>("HOUR"), //
		jField<::jint>("HOUR_OF_DAY"), //
		jField<::jint>("JANUARY"), //
		jField<::jint>("JULY"), //
		jField<::jint>("JUNE"), //
		jField<::jint>("LONG"), //
		jField<::jint>("LONG_FORMAT"), //
		jField<::jint>("LONG_STANDALONE"), //
		jField<::jint>("MARCH"), //
		jField<::jint>("MAY"), //
		jField<::jint>("MILLISECOND"), //
		jField<::jint>("MINUTE"), //
		jField<::jint>("MONDAY"), //
		jField<::jint>("MONTH"), //
		jField<::jint>("NARROW_FORMAT"), //
		jField<::jint>("NARROW_STANDALONE"), //
		jField<::jint>("NOVEMBER"), //
		jField<::jint>("OCTOBER"), //
		jField<::jint>("PM"), //
		jField<::jint>("SATURDAY"), //
		jField<::jint>("SECOND"), //
		jField<::jint>("SEPTEMBER"), //
		jField<::jint>("SHORT"), //
		jField<::jint>("SHORT_FORMAT"), //
		jField<::jint>("SHORT_STANDALONE"), //
		jField<::jint>("SUNDAY"), //
		jField<::jint>("THURSDAY"), //
		jField<::jint>("TUESDAY"), //
		jField<::jint>("UNDECIMBER"), //
		jField<::jint>("WEDNESDAY"), //
		jField<::jint>("WEEK_OF_MONTH"), //
		jField<::jint>("WEEK_OF_YEAR"), //
		jField<::jint>("YEAR"), //
		jField<::jint>("ZONE_OFFSET"), //
	};

	template<typename F = ::jint>
	static auto ALL_STYLES() {
		static_assert(field_signatures[jField<F>("ALL_STYLES")] != -1);
		return sat<F>("ALL_STYLES");
	}

	template<typename F = ::jint>
	static auto AM() {
		static_assert(field_signatures[jField<F>("AM")] != -1);
		return sat<F>("AM");
	}

	template<typename F = ::jint>
	static auto AM_PM() {
		static_assert(field_signatures[jField<F>("AM_PM")] != -1);
		return sat<F>("AM_PM");
	}

	template<typename F = ::jint>
	static auto APRIL() {
		static_assert(field_signatures[jField<F>("APRIL")] != -1);
		return sat<F>("APRIL");
	}

	template<typename F = ::jint>
	static auto AUGUST() {
		static_assert(field_signatures[jField<F>("AUGUST")] != -1);
		return sat<F>("AUGUST");
	}

	template<typename F = ::jint>
	static auto DATE() {
		static_assert(field_signatures[jField<F>("DATE")] != -1);
		return sat<F>("DATE");
	}

	template<typename F = ::jint>
	static auto DAY_OF_MONTH() {
		static_assert(field_signatures[jField<F>("DAY_OF_MONTH")] != -1);
		return sat<F>("DAY_OF_MONTH");
	}

	template<typename F = ::jint>
	static auto DAY_OF_WEEK() {
		static_assert(field_signatures[jField<F>("DAY_OF_WEEK")] != -1);
		return sat<F>("DAY_OF_WEEK");
	}

	template<typename F = ::jint>
	static auto DAY_OF_WEEK_IN_MONTH() {
		static_assert(field_signatures[jField<F>("DAY_OF_WEEK_IN_MONTH")] != -1);
		return sat<F>("DAY_OF_WEEK_IN_MONTH");
	}

	template<typename F = ::jint>
	static auto DAY_OF_YEAR() {
		static_assert(field_signatures[jField<F>("DAY_OF_YEAR")] != -1);
		return sat<F>("DAY_OF_YEAR");
	}

	template<typename F = ::jint>
	static auto DECEMBER() {
		static_assert(field_signatures[jField<F>("DECEMBER")] != -1);
		return sat<F>("DECEMBER");
	}

	template<typename F = ::jint>
	static auto DST_OFFSET() {
		static_assert(field_signatures[jField<F>("DST_OFFSET")] != -1);
		return sat<F>("DST_OFFSET");
	}

	template<typename F = ::jint>
	static auto ERA() {
		static_assert(field_signatures[jField<F>("ERA")] != -1);
		return sat<F>("ERA");
	}

	template<typename F = ::jint>
	static auto FEBRUARY() {
		static_assert(field_signatures[jField<F>("FEBRUARY")] != -1);
		return sat<F>("FEBRUARY");
	}

	template<typename F = ::jint>
	static auto FIELD_COUNT() {
		static_assert(field_signatures[jField<F>("FIELD_COUNT")] != -1);
		return sat<F>("FIELD_COUNT");
	}

	template<typename F = ::jint>
	static auto FRIDAY() {
		static_assert(field_signatures[jField<F>("FRIDAY")] != -1);
		return sat<F>("FRIDAY");
	}

	template<typename F = ::jint>
	static auto HOUR() {
		static_assert(field_signatures[jField<F>("HOUR")] != -1);
		return sat<F>("HOUR");
	}

	template<typename F = ::jint>
	static auto HOUR_OF_DAY() {
		static_assert(field_signatures[jField<F>("HOUR_OF_DAY")] != -1);
		return sat<F>("HOUR_OF_DAY");
	}

	template<typename F = ::jint>
	static auto JANUARY() {
		static_assert(field_signatures[jField<F>("JANUARY")] != -1);
		return sat<F>("JANUARY");
	}

	template<typename F = ::jint>
	static auto JULY() {
		static_assert(field_signatures[jField<F>("JULY")] != -1);
		return sat<F>("JULY");
	}

	template<typename F = ::jint>
	static auto JUNE() {
		static_assert(field_signatures[jField<F>("JUNE")] != -1);
		return sat<F>("JUNE");
	}

	template<typename F = ::jint>
	static auto LONG() {
		static_assert(field_signatures[jField<F>("LONG")] != -1);
		return sat<F>("LONG");
	}

	template<typename F = ::jint>
	static auto LONG_FORMAT() {
		static_assert(field_signatures[jField<F>("LONG_FORMAT")] != -1);
		return sat<F>("LONG_FORMAT");
	}

	template<typename F = ::jint>
	static auto LONG_STANDALONE() {
		static_assert(field_signatures[jField<F>("LONG_STANDALONE")] != -1);
		return sat<F>("LONG_STANDALONE");
	}

	template<typename F = ::jint>
	static auto MARCH() {
		static_assert(field_signatures[jField<F>("MARCH")] != -1);
		return sat<F>("MARCH");
	}

	template<typename F = ::jint>
	static auto MAY() {
		static_assert(field_signatures[jField<F>("MAY")] != -1);
		return sat<F>("MAY");
	}

	template<typename F = ::jint>
	static auto MILLISECOND() {
		static_assert(field_signatures[jField<F>("MILLISECOND")] != -1);
		return sat<F>("MILLISECOND");
	}

	template<typename F = ::jint>
	static auto MINUTE() {
		static_assert(field_signatures[jField<F>("MINUTE")] != -1);
		return sat<F>("MINUTE");
	}

	template<typename F = ::jint>
	static auto MONDAY() {
		static_assert(field_signatures[jField<F>("MONDAY")] != -1);
		return sat<F>("MONDAY");
	}

	template<typename F = ::jint>
	static auto MONTH() {
		static_assert(field_signatures[jField<F>("MONTH")] != -1);
		return sat<F>("MONTH");
	}

	template<typename F = ::jint>
	static auto NARROW_FORMAT() {
		static_assert(field_signatures[jField<F>("NARROW_FORMAT")] != -1);
		return sat<F>("NARROW_FORMAT");
	}

	template<typename F = ::jint>
	static auto NARROW_STANDALONE() {
		static_assert(field_signatures[jField<F>("NARROW_STANDALONE")] != -1);
		return sat<F>("NARROW_STANDALONE");
	}

	template<typename F = ::jint>
	static auto NOVEMBER() {
		static_assert(field_signatures[jField<F>("NOVEMBER")] != -1);
		return sat<F>("NOVEMBER");
	}

	template<typename F = ::jint>
	static auto OCTOBER() {
		static_assert(field_signatures[jField<F>("OCTOBER")] != -1);
		return sat<F>("OCTOBER");
	}

	template<typename F = ::jint>
	static auto PM() {
		static_assert(field_signatures[jField<F>("PM")] != -1);
		return sat<F>("PM");
	}

	template<typename F = ::jint>
	static auto SATURDAY() {
		static_assert(field_signatures[jField<F>("SATURDAY")] != -1);
		return sat<F>("SATURDAY");
	}

	template<typename F = ::jint>
	static auto SECOND() {
		static_assert(field_signatures[jField<F>("SECOND")] != -1);
		return sat<F>("SECOND");
	}

	template<typename F = ::jint>
	static auto SEPTEMBER() {
		static_assert(field_signatures[jField<F>("SEPTEMBER")] != -1);
		return sat<F>("SEPTEMBER");
	}

	template<typename F = ::jint>
	static auto SHORT() {
		static_assert(field_signatures[jField<F>("SHORT")] != -1);
		return sat<F>("SHORT");
	}

	template<typename F = ::jint>
	static auto SHORT_FORMAT() {
		static_assert(field_signatures[jField<F>("SHORT_FORMAT")] != -1);
		return sat<F>("SHORT_FORMAT");
	}

	template<typename F = ::jint>
	static auto SHORT_STANDALONE() {
		static_assert(field_signatures[jField<F>("SHORT_STANDALONE")] != -1);
		return sat<F>("SHORT_STANDALONE");
	}

	template<typename F = ::jint>
	static auto SUNDAY() {
		static_assert(field_signatures[jField<F>("SUNDAY")] != -1);
		return sat<F>("SUNDAY");
	}

	template<typename F = ::jint>
	static auto THURSDAY() {
		static_assert(field_signatures[jField<F>("THURSDAY")] != -1);
		return sat<F>("THURSDAY");
	}

	template<typename F = ::jint>
	static auto TUESDAY() {
		static_assert(field_signatures[jField<F>("TUESDAY")] != -1);
		return sat<F>("TUESDAY");
	}

	template<typename F = ::jint>
	static auto UNDECIMBER() {
		static_assert(field_signatures[jField<F>("UNDECIMBER")] != -1);
		return sat<F>("UNDECIMBER");
	}

	template<typename F = ::jint>
	static auto WEDNESDAY() {
		static_assert(field_signatures[jField<F>("WEDNESDAY")] != -1);
		return sat<F>("WEDNESDAY");
	}

	template<typename F = ::jint>
	static auto WEEK_OF_MONTH() {
		static_assert(field_signatures[jField<F>("WEEK_OF_MONTH")] != -1);
		return sat<F>("WEEK_OF_MONTH");
	}

	template<typename F = ::jint>
	static auto WEEK_OF_YEAR() {
		static_assert(field_signatures[jField<F>("WEEK_OF_YEAR")] != -1);
		return sat<F>("WEEK_OF_YEAR");
	}

	template<typename F = ::jint>
	static auto YEAR() {
		static_assert(field_signatures[jField<F>("YEAR")] != -1);
		return sat<F>("YEAR");
	}

	template<typename F = ::jint>
	static auto ZONE_OFFSET() {
		static_assert(field_signatures[jField<F>("ZONE_OFFSET")] != -1);
		return sat<F>("ZONE_OFFSET");
	}

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::jint, ::jint)>("add"), //
		jMethod<::jboolean(::java::lang::Object)>("after"), //
		jMethod<::jboolean(::java::lang::Object)>("before"), //
		jMethod<::jvoid()>("clear"), //
		jMethod<::jvoid(::jint)>("clear"), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jint(::java::lang::Object)>("compareTo"), //
		jMethod<::jint(::java::util::Calendar)>("compareTo"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint(::jint)>("get"), //
		jMethod<::jint(::jint)>("getActualMaximum"), //
		jMethod<::jint(::jint)>("getActualMinimum"), //
		jMethod<::java::util::Set()>("getAvailableCalendarTypes"), //
		jMethod<::java::util::Locale *()>("getAvailableLocales"), //
		jMethod<::java::lang::String()>("getCalendarType"), //
		jMethod<::java::lang::String(::jint, ::jint, ::java::util::Locale)>("getDisplayName"), //
		jMethod<::java::util::Map(::jint, ::jint, ::java::util::Locale)>("getDisplayNames"), //
		jMethod<::jint()>("getFirstDayOfWeek"), //
		jMethod<::jint(::jint)>("getGreatestMinimum"), //
		jMethod<::java::util::Calendar()>("getInstance"), //
		jMethod<::java::util::Calendar(::java::util::Locale)>("getInstance"), //
		jMethod<::java::util::Calendar(::java::util::TimeZone)>("getInstance"), //
		jMethod<::java::util::Calendar(::java::util::TimeZone, ::java::util::Locale)>("getInstance"), //
		jMethod<::jint(::jint)>("getLeastMaximum"), //
		jMethod<::jint(::jint)>("getMaximum"), //
		jMethod<::jint()>("getMinimalDaysInFirstWeek"), //
		jMethod<::jint(::jint)>("getMinimum"), //
		jMethod<::java::util::Date()>("getTime"), //
		jMethod<::jlong()>("getTimeInMillis"), //
		jMethod<::java::util::TimeZone()>("getTimeZone"), //
		jMethod<::jint()>("getWeekYear"), //
		jMethod<::jint()>("getWeeksInWeekYear"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isLenient"), //
		jMethod<::jboolean(::jint)>("isSet"), //
		jMethod<::jboolean()>("isWeekDateSupported"), //
		jMethod<::jvoid(::jint, ::jint)>("roll"), //
		jMethod<::jvoid(::jint, ::jboolean)>("roll"), //
		jMethod<::jvoid(::jint, ::jint)>("set"), //
		jMethod<::jvoid(::jint, ::jint, ::jint)>("set"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint)>("set"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("set"), //
		jMethod<::jvoid(::jint)>("setFirstDayOfWeek"), //
		jMethod<::jvoid(::jboolean)>("setLenient"), //
		jMethod<::jvoid(::jint)>("setMinimalDaysInFirstWeek"), //
		jMethod<::jvoid(::java::util::Date)>("setTime"), //
		jMethod<::jvoid(::jlong)>("setTimeInMillis"), //
		jMethod<::jvoid(::java::util::TimeZone)>("setTimeZone"), //
		jMethod<::jvoid(::jint, ::jint, ::jint)>("setWeekDate"), //
		jMethod<::java::time::Instant()>("toInstant"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("add")] != -1);
		return call<R>("add", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto after(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("after")] != -1);
		return call<R>("after", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto before(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("before")] != -1);
		return call<R>("before", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto compareTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("compareTo")] != -1);
		return call<R>("compareTo", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("get")] != -1);
		return call<R>("get", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getActualMaximum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getActualMaximum")] != -1);
		return call<R>("getActualMaximum", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getActualMinimum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getActualMinimum")] != -1);
		return call<R>("getActualMinimum", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	static auto getAvailableCalendarTypes(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAvailableCalendarTypes")] != -1);
		return scall<R>("getAvailableCalendarTypes", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale *, typename... Args>
	static auto getAvailableLocales(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAvailableLocales")] != -1);
		return scall<R>("getAvailableLocales", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCalendarType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCalendarType")] != -1);
		return call<R>("getCalendarType", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDisplayName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDisplayName")] != -1);
		return call<R>("getDisplayName", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getDisplayNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDisplayNames")] != -1);
		return call<R>("getDisplayNames", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getFirstDayOfWeek(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFirstDayOfWeek")] != -1);
		return call<R>("getFirstDayOfWeek", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getGreatestMinimum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getGreatestMinimum")] != -1);
		return call<R>("getGreatestMinimum", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Calendar, typename... Args>
	static auto getInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInstance")] != -1);
		return scall<R>("getInstance", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLeastMaximum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLeastMaximum")] != -1);
		return call<R>("getLeastMaximum", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaximum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaximum")] != -1);
		return call<R>("getMaximum", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinimalDaysInFirstWeek(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinimalDaysInFirstWeek")] != -1);
		return call<R>("getMinimalDaysInFirstWeek", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinimum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinimum")] != -1);
		return call<R>("getMinimum", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Date, typename... Args>
	auto getTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTime")] != -1);
		return call<R>("getTime", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getTimeInMillis(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTimeInMillis")] != -1);
		return call<R>("getTimeInMillis", forward<Args>(args)...);
	}

	template<typename R = ::java::util::TimeZone, typename... Args>
	auto getTimeZone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTimeZone")] != -1);
		return call<R>("getTimeZone", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWeekYear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getWeekYear")] != -1);
		return call<R>("getWeekYear", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWeeksInWeekYear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getWeeksInWeekYear")] != -1);
		return call<R>("getWeeksInWeekYear", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLenient(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isLenient")] != -1);
		return call<R>("isLenient", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isSet")] != -1);
		return call<R>("isSet", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isWeekDateSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isWeekDateSupported")] != -1);
		return call<R>("isWeekDateSupported", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto roll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("roll")] != -1);
		return call<R>("roll", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("set")] != -1);
		return call<R>("set", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFirstDayOfWeek(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFirstDayOfWeek")] != -1);
		return call<R>("setFirstDayOfWeek", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLenient(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLenient")] != -1);
		return call<R>("setLenient", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMinimalDaysInFirstWeek(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMinimalDaysInFirstWeek")] != -1);
		return call<R>("setMinimalDaysInFirstWeek", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setTime")] != -1);
		return call<R>("setTime", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTimeInMillis(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setTimeInMillis")] != -1);
		return call<R>("setTimeInMillis", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTimeZone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setTimeZone")] != -1);
		return call<R>("setTimeZone", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWeekDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setWeekDate")] != -1);
		return call<R>("setWeekDate", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Instant, typename... Args>
	auto toInstant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toInstant")] != -1);
		return call<R>("toInstant", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
