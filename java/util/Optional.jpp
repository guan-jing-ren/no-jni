#ifndef java_util_Optional_HPP
#define java_util_Optional_HPP

#include "../../jfwd_decl.hpp"

class ::java::util::Optional : public jObject<::java::util::Optional, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util / "Optional";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::util::Optional()>("empty"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::util::Optional(::java::util::function::Predicate)>("filter"), //
		jMethod<::java::util::Optional(::java::util::function::Function)>("flatMap"), //
		jMethod<::java::lang::Object()>("get"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jvoid(::java::util::function::Consumer)>("ifPresent"), //
		jMethod<::jboolean()>("isPresent"), //
		jMethod<::java::util::Optional(::java::util::function::Function)>("map"), //
		jMethod<::java::util::Optional(::java::lang::Object)>("of"), //
		jMethod<::java::util::Optional(::java::lang::Object)>("ofNullable"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("orElse"), //
		jMethod<::java::lang::Object(::java::util::function::Supplier)>("orElseGet"), //
		jMethod<::java::lang::Object(::java::util::function::Supplier)>("orElseThrow"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::util::Optional, typename... Args>
	static auto empty(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("empty")] != -1);
		return scall<R>("empty", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Optional, typename... Args>
	auto filter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("filter")] != -1);
		return call<R>("filter", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Optional, typename... Args>
	auto flatMap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("flatMap")] != -1);
		return call<R>("flatMap", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("get")] != -1);
		return call<R>("get", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto ifPresent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("ifPresent")] != -1);
		return call<R>("ifPresent", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPresent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isPresent")] != -1);
		return call<R>("isPresent", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Optional, typename... Args>
	auto map(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("map")] != -1);
		return call<R>("map", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Optional, typename... Args>
	static auto of(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("of")] != -1);
		return scall<R>("of", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Optional, typename... Args>
	static auto ofNullable(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("ofNullable")] != -1);
		return scall<R>("ofNullable", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto orElse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("orElse")] != -1);
		return call<R>("orElse", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto orElseGet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("orElseGet")] != -1);
		return call<R>("orElseGet", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto orElseThrow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("orElseThrow")] != -1);
		return call<R>("orElseThrow", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
