#ifndef java_util_jar_Pack200$Packer_HPP
#define java_util_jar_Pack200$Packer_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::jar::Pack200$Packer : public jObject<::java::util::jar::Pack200$Packer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_jar / "Pack200$Packer";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("CLASS_ATTRIBUTE_PFX"), //
		jField<::java::lang::String>("CODE_ATTRIBUTE_PFX"), //
		jField<::java::lang::String>("DEFLATE_HINT"), //
		jField<::java::lang::String>("EFFORT"), //
		jField<::java::lang::String>("ERROR"), //
		jField<::java::lang::String>("FALSE"), //
		jField<::java::lang::String>("FIELD_ATTRIBUTE_PFX"), //
		jField<::java::lang::String>("KEEP"), //
		jField<::java::lang::String>("KEEP_FILE_ORDER"), //
		jField<::java::lang::String>("LATEST"), //
		jField<::java::lang::String>("METHOD_ATTRIBUTE_PFX"), //
		jField<::java::lang::String>("MODIFICATION_TIME"), //
		jField<::java::lang::String>("PASS"), //
		jField<::java::lang::String>("PASS_FILE_PFX"), //
		jField<::java::lang::String>("PROGRESS"), //
		jField<::java::lang::String>("SEGMENT_LIMIT"), //
		jField<::java::lang::String>("STRIP"), //
		jField<::java::lang::String>("TRUE"), //
		jField<::java::lang::String>("UNKNOWN_ATTRIBUTE"), //
	};

	template<typename F = ::java::lang::String>
	static auto CLASS_ATTRIBUTE_PFX() {
		static_assert(field_signatures[jField<F>("CLASS_ATTRIBUTE_PFX")] != -1);
		return sat<F>("CLASS_ATTRIBUTE_PFX");
	}

	template<typename F = ::java::lang::String>
	static auto CODE_ATTRIBUTE_PFX() {
		static_assert(field_signatures[jField<F>("CODE_ATTRIBUTE_PFX")] != -1);
		return sat<F>("CODE_ATTRIBUTE_PFX");
	}

	template<typename F = ::java::lang::String>
	static auto DEFLATE_HINT() {
		static_assert(field_signatures[jField<F>("DEFLATE_HINT")] != -1);
		return sat<F>("DEFLATE_HINT");
	}

	template<typename F = ::java::lang::String>
	static auto EFFORT() {
		static_assert(field_signatures[jField<F>("EFFORT")] != -1);
		return sat<F>("EFFORT");
	}

	template<typename F = ::java::lang::String>
	static auto ERROR() {
		static_assert(field_signatures[jField<F>("ERROR")] != -1);
		return sat<F>("ERROR");
	}

	template<typename F = ::java::lang::String>
	static auto FALSE() {
		static_assert(field_signatures[jField<F>("FALSE")] != -1);
		return sat<F>("FALSE");
	}

	template<typename F = ::java::lang::String>
	static auto FIELD_ATTRIBUTE_PFX() {
		static_assert(field_signatures[jField<F>("FIELD_ATTRIBUTE_PFX")] != -1);
		return sat<F>("FIELD_ATTRIBUTE_PFX");
	}

	template<typename F = ::java::lang::String>
	static auto KEEP() {
		static_assert(field_signatures[jField<F>("KEEP")] != -1);
		return sat<F>("KEEP");
	}

	template<typename F = ::java::lang::String>
	static auto KEEP_FILE_ORDER() {
		static_assert(field_signatures[jField<F>("KEEP_FILE_ORDER")] != -1);
		return sat<F>("KEEP_FILE_ORDER");
	}

	template<typename F = ::java::lang::String>
	static auto LATEST() {
		static_assert(field_signatures[jField<F>("LATEST")] != -1);
		return sat<F>("LATEST");
	}

	template<typename F = ::java::lang::String>
	static auto METHOD_ATTRIBUTE_PFX() {
		static_assert(field_signatures[jField<F>("METHOD_ATTRIBUTE_PFX")] != -1);
		return sat<F>("METHOD_ATTRIBUTE_PFX");
	}

	template<typename F = ::java::lang::String>
	static auto MODIFICATION_TIME() {
		static_assert(field_signatures[jField<F>("MODIFICATION_TIME")] != -1);
		return sat<F>("MODIFICATION_TIME");
	}

	template<typename F = ::java::lang::String>
	static auto PASS() {
		static_assert(field_signatures[jField<F>("PASS")] != -1);
		return sat<F>("PASS");
	}

	template<typename F = ::java::lang::String>
	static auto PASS_FILE_PFX() {
		static_assert(field_signatures[jField<F>("PASS_FILE_PFX")] != -1);
		return sat<F>("PASS_FILE_PFX");
	}

	template<typename F = ::java::lang::String>
	static auto PROGRESS() {
		static_assert(field_signatures[jField<F>("PROGRESS")] != -1);
		return sat<F>("PROGRESS");
	}

	template<typename F = ::java::lang::String>
	static auto SEGMENT_LIMIT() {
		static_assert(field_signatures[jField<F>("SEGMENT_LIMIT")] != -1);
		return sat<F>("SEGMENT_LIMIT");
	}

	template<typename F = ::java::lang::String>
	static auto STRIP() {
		static_assert(field_signatures[jField<F>("STRIP")] != -1);
		return sat<F>("STRIP");
	}

	template<typename F = ::java::lang::String>
	static auto TRUE() {
		static_assert(field_signatures[jField<F>("TRUE")] != -1);
		return sat<F>("TRUE");
	}

	template<typename F = ::java::lang::String>
	static auto UNKNOWN_ATTRIBUTE() {
		static_assert(field_signatures[jField<F>("UNKNOWN_ATTRIBUTE")] != -1);
		return sat<F>("UNKNOWN_ATTRIBUTE");
	}

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::beans::PropertyChangeListener)>("addPropertyChangeListener"), //
		jMethod<::jvoid(::java::util::jar::JarFile, ::java::io::OutputStream)>("pack"), //
		jMethod<::jvoid(::java::util::jar::JarInputStream, ::java::io::OutputStream)>("pack"), //
		jMethod<::java::util::SortedMap()>("properties"), //
		jMethod<::jvoid(::java::beans::PropertyChangeListener)>("removePropertyChangeListener"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addPropertyChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addPropertyChangeListener")] != -1);
		return call<R>("addPropertyChangeListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto pack(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("pack")] != -1);
		return call<R>("pack", forward<Args>(args)...);
	}

	template<typename R = ::java::util::SortedMap, typename... Args>
	auto properties(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("properties")] != -1);
		return call<R>("properties", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removePropertyChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removePropertyChangeListener")] != -1);
		return call<R>("removePropertyChangeListener", forward<Args>(args)...);
	}

};

#endif
