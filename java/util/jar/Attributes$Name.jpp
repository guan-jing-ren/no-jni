#ifndef java_util_jar_Attributes$Name_HPP
#define java_util_jar_Attributes$Name_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::jar::Attributes$Name : public jObject<::java::util::jar::Attributes$Name, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_jar / "Attributes$Name";

	constexpr static Enume field_signatures{
		jField<::java::util::jar::Attributes$Name>("CLASS_PATH"), //
		jField<::java::util::jar::Attributes$Name>("CONTENT_TYPE"), //
		jField<::java::util::jar::Attributes$Name>("EXTENSION_LIST"), //
		jField<::java::util::jar::Attributes$Name>("EXTENSION_NAME"), //
		jField<::java::util::jar::Attributes$Name>("IMPLEMENTATION_TITLE"), //
		jField<::java::util::jar::Attributes$Name>("IMPLEMENTATION_VENDOR"), //
		jField<::java::util::jar::Attributes$Name>("IMPLEMENTATION_VERSION"), //
		jField<::java::util::jar::Attributes$Name>("MAIN_CLASS"), //
		jField<::java::util::jar::Attributes$Name>("MANIFEST_VERSION"), //
		jField<::java::util::jar::Attributes$Name>("SEALED"), //
		jField<::java::util::jar::Attributes$Name>("SIGNATURE_VERSION"), //
		jField<::java::util::jar::Attributes$Name>("SPECIFICATION_TITLE"), //
		jField<::java::util::jar::Attributes$Name>("SPECIFICATION_VENDOR"), //
		jField<::java::util::jar::Attributes$Name>("SPECIFICATION_VERSION"), //
	};

	template<typename F = ::java::util::jar::Attributes$Name>
	static auto CLASS_PATH() {
		static_assert(field_signatures[jField<F>("CLASS_PATH")] != -1);
		return sat<F>("CLASS_PATH");
	}

	template<typename F = ::java::util::jar::Attributes$Name>
	static auto CONTENT_TYPE() {
		static_assert(field_signatures[jField<F>("CONTENT_TYPE")] != -1);
		return sat<F>("CONTENT_TYPE");
	}

	template<typename F = ::java::util::jar::Attributes$Name>
	static auto EXTENSION_LIST() {
		static_assert(field_signatures[jField<F>("EXTENSION_LIST")] != -1);
		return sat<F>("EXTENSION_LIST");
	}

	template<typename F = ::java::util::jar::Attributes$Name>
	static auto EXTENSION_NAME() {
		static_assert(field_signatures[jField<F>("EXTENSION_NAME")] != -1);
		return sat<F>("EXTENSION_NAME");
	}

	template<typename F = ::java::util::jar::Attributes$Name>
	static auto IMPLEMENTATION_TITLE() {
		static_assert(field_signatures[jField<F>("IMPLEMENTATION_TITLE")] != -1);
		return sat<F>("IMPLEMENTATION_TITLE");
	}

	template<typename F = ::java::util::jar::Attributes$Name>
	static auto IMPLEMENTATION_VENDOR() {
		static_assert(field_signatures[jField<F>("IMPLEMENTATION_VENDOR")] != -1);
		return sat<F>("IMPLEMENTATION_VENDOR");
	}

	template<typename F = ::java::util::jar::Attributes$Name>
	static auto IMPLEMENTATION_VERSION() {
		static_assert(field_signatures[jField<F>("IMPLEMENTATION_VERSION")] != -1);
		return sat<F>("IMPLEMENTATION_VERSION");
	}

	template<typename F = ::java::util::jar::Attributes$Name>
	static auto MAIN_CLASS() {
		static_assert(field_signatures[jField<F>("MAIN_CLASS")] != -1);
		return sat<F>("MAIN_CLASS");
	}

	template<typename F = ::java::util::jar::Attributes$Name>
	static auto MANIFEST_VERSION() {
		static_assert(field_signatures[jField<F>("MANIFEST_VERSION")] != -1);
		return sat<F>("MANIFEST_VERSION");
	}

	template<typename F = ::java::util::jar::Attributes$Name>
	static auto SEALED() {
		static_assert(field_signatures[jField<F>("SEALED")] != -1);
		return sat<F>("SEALED");
	}

	template<typename F = ::java::util::jar::Attributes$Name>
	static auto SIGNATURE_VERSION() {
		static_assert(field_signatures[jField<F>("SIGNATURE_VERSION")] != -1);
		return sat<F>("SIGNATURE_VERSION");
	}

	template<typename F = ::java::util::jar::Attributes$Name>
	static auto SPECIFICATION_TITLE() {
		static_assert(field_signatures[jField<F>("SPECIFICATION_TITLE")] != -1);
		return sat<F>("SPECIFICATION_TITLE");
	}

	template<typename F = ::java::util::jar::Attributes$Name>
	static auto SPECIFICATION_VENDOR() {
		static_assert(field_signatures[jField<F>("SPECIFICATION_VENDOR")] != -1);
		return sat<F>("SPECIFICATION_VENDOR");
	}

	template<typename F = ::java::util::jar::Attributes$Name>
	static auto SPECIFICATION_VERSION() {
		static_assert(field_signatures[jField<F>("SPECIFICATION_VERSION")] != -1);
		return sat<F>("SPECIFICATION_VERSION");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
