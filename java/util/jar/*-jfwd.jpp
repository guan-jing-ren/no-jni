#ifndef java_util_jar_JPP
#define java_util_jar_JPP

namespace java::util::jar { class Attributes; }
template<> constexpr auto signature<::java::util::jar::Attributes> = ::java_util_jar / "Attributes";
namespace java::util::jar { class Attributes$Name; }
template<> constexpr auto signature<::java::util::jar::Attributes$Name> = ::java_util_jar / "Attributes$Name";
namespace java::util::jar { class JarEntry; }
template<> constexpr auto signature<::java::util::jar::JarEntry> = ::java_util_jar / "JarEntry";
namespace java::util::jar { class JarException; }
template<> constexpr auto signature<::java::util::jar::JarException> = ::java_util_jar / "JarException";
namespace java::util::jar { class JarFile; }
template<> constexpr auto signature<::java::util::jar::JarFile> = ::java_util_jar / "JarFile";
namespace java::util::jar { class JarFile$1; }
template<> constexpr auto signature<::java::util::jar::JarFile$1> = ::java_util_jar / "JarFile$1";
namespace java::util::jar { class JarFile$2; }
template<> constexpr auto signature<::java::util::jar::JarFile$2> = ::java_util_jar / "JarFile$2";
namespace java::util::jar { class JarFile$3; }
template<> constexpr auto signature<::java::util::jar::JarFile$3> = ::java_util_jar / "JarFile$3";
namespace java::util::jar { class JarFile$JarEntryIterator; }
template<> constexpr auto signature<::java::util::jar::JarFile$JarEntryIterator> = ::java_util_jar / "JarFile$JarEntryIterator";
namespace java::util::jar { class JarFile$JarFileEntry; }
template<> constexpr auto signature<::java::util::jar::JarFile$JarFileEntry> = ::java_util_jar / "JarFile$JarFileEntry";
namespace java::util::jar { class JarInputStream; }
template<> constexpr auto signature<::java::util::jar::JarInputStream> = ::java_util_jar / "JarInputStream";
namespace java::util::jar { class JarOutputStream; }
template<> constexpr auto signature<::java::util::jar::JarOutputStream> = ::java_util_jar / "JarOutputStream";
namespace java::util::jar { class JarVerifier; }
template<> constexpr auto signature<::java::util::jar::JarVerifier> = ::java_util_jar / "JarVerifier";
namespace java::util::jar { class JarVerifier$1; }
template<> constexpr auto signature<::java::util::jar::JarVerifier$1> = ::java_util_jar / "JarVerifier$1";
namespace java::util::jar { class JarVerifier$2; }
template<> constexpr auto signature<::java::util::jar::JarVerifier$2> = ::java_util_jar / "JarVerifier$2";
namespace java::util::jar { class JarVerifier$3; }
template<> constexpr auto signature<::java::util::jar::JarVerifier$3> = ::java_util_jar / "JarVerifier$3";
namespace java::util::jar { class JarVerifier$4; }
template<> constexpr auto signature<::java::util::jar::JarVerifier$4> = ::java_util_jar / "JarVerifier$4";
namespace java::util::jar { class JarVerifier$VerifierCodeSource; }
template<> constexpr auto signature<::java::util::jar::JarVerifier$VerifierCodeSource> = ::java_util_jar / "JarVerifier$VerifierCodeSource";
namespace java::util::jar { class JarVerifier$VerifierStream; }
template<> constexpr auto signature<::java::util::jar::JarVerifier$VerifierStream> = ::java_util_jar / "JarVerifier$VerifierStream";
namespace java::util::jar { class JavaUtilJarAccessImpl; }
template<> constexpr auto signature<::java::util::jar::JavaUtilJarAccessImpl> = ::java_util_jar / "JavaUtilJarAccessImpl";
namespace java::util::jar { class Manifest; }
template<> constexpr auto signature<::java::util::jar::Manifest> = ::java_util_jar / "Manifest";
namespace java::util::jar { class Manifest$FastInputStream; }
template<> constexpr auto signature<::java::util::jar::Manifest$FastInputStream> = ::java_util_jar / "Manifest$FastInputStream";
namespace java::util::jar { class Pack200; }
template<> constexpr auto signature<::java::util::jar::Pack200> = ::java_util_jar / "Pack200";
namespace java::util::jar { class Pack200$Packer; }
template<> constexpr auto signature<::java::util::jar::Pack200$Packer> = ::java_util_jar / "Pack200$Packer";
namespace java::util::jar { class Pack200$Unpacker; }
template<> constexpr auto signature<::java::util::jar::Pack200$Unpacker> = ::java_util_jar / "Pack200$Unpacker";

#endif
