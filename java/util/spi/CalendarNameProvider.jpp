#ifndef java_util_spi_CalendarNameProvider_HPP
#define java_util_spi_CalendarNameProvider_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::spi::CalendarNameProvider : public jObject<::java::util::spi::CalendarNameProvider, ::java::util::spi::LocaleServiceProvider> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_spi / "CalendarNameProvider";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String(::java::lang::String, ::jint, ::jint, ::jint, ::java::util::Locale)>("getDisplayName"), //
		jMethod<::java::util::Map(::java::lang::String, ::jint, ::jint, ::java::util::Locale)>("getDisplayNames"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getDisplayName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisplayName")] != -1);
		return call<R>("getDisplayName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getDisplayNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisplayNames")] != -1);
		return call<R>("getDisplayNames", std::forward<Args>(args)...);
	}

};

#endif
