#ifndef java_util_spi_LocaleNameProvider_HPP
#define java_util_spi_LocaleNameProvider_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::spi::LocaleNameProvider : public jObject<::java::util::spi::LocaleNameProvider, ::java::util::spi::LocaleServiceProvider> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_spi / "LocaleNameProvider";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String(::java::lang::String, ::java::util::Locale)>("getDisplayCountry"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::util::Locale)>("getDisplayLanguage"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::util::Locale)>("getDisplayScript"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::util::Locale)>("getDisplayVariant"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getDisplayCountry(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDisplayCountry")] != -1);
		return call<R>("getDisplayCountry", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDisplayLanguage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDisplayLanguage")] != -1);
		return call<R>("getDisplayLanguage", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDisplayScript(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDisplayScript")] != -1);
		return call<R>("getDisplayScript", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDisplayVariant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDisplayVariant")] != -1);
		return call<R>("getDisplayVariant", forward<Args>(args)...);
	}

};

#endif
