#ifndef java_util_Properties_HPP
#define java_util_Properties_HPP

#include "../../jfwd_decl.hpp"

class ::java::util::Properties : public jObject<::java::util::Properties, ::java::util::Hashtable> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util / "Properties";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::util::Properties)>(), //
		jMethod<::java::lang::String(::java::lang::String)>("getProperty"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::lang::String)>("getProperty"), //
		jMethod<::jvoid(::java::io::PrintStream)>("list"), //
		jMethod<::jvoid(::java::io::PrintWriter)>("list"), //
		jMethod<::jvoid(::java::io::InputStream)>("load"), //
		jMethod<::jvoid(::java::io::Reader)>("load"), //
		jMethod<::jvoid(::java::io::InputStream)>("loadFromXML"), //
		jMethod<::java::util::Enumeration()>("propertyNames"), //
		jMethod<::java::lang::Object(::java::lang::String, ::java::lang::String)>("setProperty"), //
		jMethod<::jvoid(::java::io::OutputStream, ::java::lang::String)>("store"), //
		jMethod<::jvoid(::java::io::Writer, ::java::lang::String)>("store"), //
		jMethod<::jvoid(::java::io::OutputStream, ::java::lang::String)>("storeToXML"), //
		jMethod<::jvoid(::java::io::OutputStream, ::java::lang::String, ::java::lang::String)>("storeToXML"), //
		jMethod<::java::util::Set()>("stringPropertyNames"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProperty")] != -1);
		return call<R>("getProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto list(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("list")] != -1);
		return call<R>("list", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto load(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("load")] != -1);
		return call<R>("load", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto loadFromXML(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("loadFromXML")] != -1);
		return call<R>("loadFromXML", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto propertyNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("propertyNames")] != -1);
		return call<R>("propertyNames", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto setProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setProperty")] != -1);
		return call<R>("setProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto store(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("store")] != -1);
		return call<R>("store", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto storeToXML(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("storeToXML")] != -1);
		return call<R>("storeToXML", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto stringPropertyNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stringPropertyNames")] != -1);
		return call<R>("stringPropertyNames", std::forward<Args>(args)...);
	}

};

#endif
