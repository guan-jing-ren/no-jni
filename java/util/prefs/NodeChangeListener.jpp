#ifndef java_util_prefs_NodeChangeListener_HPP
#define java_util_prefs_NodeChangeListener_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::prefs::NodeChangeListener : public jObject<::java::util::prefs::NodeChangeListener, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_prefs / "NodeChangeListener";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::util::prefs::NodeChangeEvent)>("childAdded"), //
		jMethod<::jvoid(::java::util::prefs::NodeChangeEvent)>("childRemoved"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto childAdded(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("childAdded")] != -1);
		return call<R>("childAdded", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto childRemoved(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("childRemoved")] != -1);
		return call<R>("childRemoved", std::forward<Args>(args)...);
	}

};

#endif
