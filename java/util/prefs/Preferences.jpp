#ifndef java_util_prefs_Preferences_HPP
#define java_util_prefs_Preferences_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::prefs::Preferences : public jObject<::java::util::prefs::Preferences, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_prefs / "Preferences";

	constexpr static Enume field_signatures{
		jField<::jint>("MAX_KEY_LENGTH"), //
		jField<::jint>("MAX_NAME_LENGTH"), //
		jField<::jint>("MAX_VALUE_LENGTH"), //
	};

	template<typename F = ::jint>
	static auto MAX_KEY_LENGTH() {
		static_assert(field_signatures[jField<F>("MAX_KEY_LENGTH")] != -1);
		return sat<F>("MAX_KEY_LENGTH");
	}

	template<typename F = ::jint>
	static auto MAX_NAME_LENGTH() {
		static_assert(field_signatures[jField<F>("MAX_NAME_LENGTH")] != -1);
		return sat<F>("MAX_NAME_LENGTH");
	}

	template<typename F = ::jint>
	static auto MAX_VALUE_LENGTH() {
		static_assert(field_signatures[jField<F>("MAX_VALUE_LENGTH")] != -1);
		return sat<F>("MAX_VALUE_LENGTH");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("absolutePath"), //
		jMethod<::jvoid(::java::util::prefs::NodeChangeListener)>("addNodeChangeListener"), //
		jMethod<::jvoid(::java::util::prefs::PreferenceChangeListener)>("addPreferenceChangeListener"), //
		jMethod<::java::lang::String *()>("childrenNames"), //
		jMethod<::jvoid()>("clear"), //
		jMethod<::jvoid(::java::io::OutputStream)>("exportNode"), //
		jMethod<::jvoid(::java::io::OutputStream)>("exportSubtree"), //
		jMethod<::jvoid()>("flush"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::lang::String)>("get"), //
		jMethod<::jboolean(::java::lang::String, ::jboolean)>("getBoolean"), //
		jMethod<::jbyte *(::java::lang::String, ::jbyte *)>("getByteArray"), //
		jMethod<::jdouble(::java::lang::String, ::jdouble)>("getDouble"), //
		jMethod<::jfloat(::java::lang::String, ::jfloat)>("getFloat"), //
		jMethod<::jint(::java::lang::String, ::jint)>("getInt"), //
		jMethod<::jlong(::java::lang::String, ::jlong)>("getLong"), //
		jMethod<::jvoid(::java::io::InputStream)>("importPreferences"), //
		jMethod<::jboolean()>("isUserNode"), //
		jMethod<::java::lang::String *()>("keys"), //
		jMethod<::java::lang::String()>("name"), //
		jMethod<::java::util::prefs::Preferences(::java::lang::String)>("node"), //
		jMethod<::jboolean(::java::lang::String)>("nodeExists"), //
		jMethod<::java::util::prefs::Preferences()>("parent"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("put"), //
		jMethod<::jvoid(::java::lang::String, ::jboolean)>("putBoolean"), //
		jMethod<::jvoid(::java::lang::String, ::jbyte *)>("putByteArray"), //
		jMethod<::jvoid(::java::lang::String, ::jdouble)>("putDouble"), //
		jMethod<::jvoid(::java::lang::String, ::jfloat)>("putFloat"), //
		jMethod<::jvoid(::java::lang::String, ::jint)>("putInt"), //
		jMethod<::jvoid(::java::lang::String, ::jlong)>("putLong"), //
		jMethod<::jvoid(::java::lang::String)>("remove"), //
		jMethod<::jvoid()>("removeNode"), //
		jMethod<::jvoid(::java::util::prefs::NodeChangeListener)>("removeNodeChangeListener"), //
		jMethod<::jvoid(::java::util::prefs::PreferenceChangeListener)>("removePreferenceChangeListener"), //
		jMethod<::jvoid()>("sync"), //
		jMethod<::java::util::prefs::Preferences(::java::lang::Class)>("systemNodeForPackage"), //
		jMethod<::java::util::prefs::Preferences()>("systemRoot"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::util::prefs::Preferences(::java::lang::Class)>("userNodeForPackage"), //
		jMethod<::java::util::prefs::Preferences()>("userRoot"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto absolutePath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("absolutePath")] != -1);
		return call<R>("absolutePath", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addNodeChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addNodeChangeListener")] != -1);
		return call<R>("addNodeChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addPreferenceChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addPreferenceChangeListener")] != -1);
		return call<R>("addPreferenceChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto childrenNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("childrenNames")] != -1);
		return call<R>("childrenNames", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto exportNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("exportNode")] != -1);
		return call<R>("exportNode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto exportSubtree(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("exportSubtree")] != -1);
		return call<R>("exportSubtree", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto flush(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("flush")] != -1);
		return call<R>("flush", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getBoolean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBoolean")] != -1);
		return call<R>("getBoolean", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getByteArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getByteArray")] != -1);
		return call<R>("getByteArray", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDouble")] != -1);
		return call<R>("getDouble", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getFloat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFloat")] != -1);
		return call<R>("getFloat", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInt")] != -1);
		return call<R>("getInt", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLong")] != -1);
		return call<R>("getLong", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto importPreferences(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("importPreferences")] != -1);
		return scall<R>("importPreferences", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isUserNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isUserNode")] != -1);
		return call<R>("isUserNode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto keys(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("keys")] != -1);
		return call<R>("keys", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto name(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("name")] != -1);
		return call<R>("name", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::prefs::Preferences, typename... Args>
	auto node(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("node")] != -1);
		return call<R>("node", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto nodeExists(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nodeExists")] != -1);
		return call<R>("nodeExists", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::prefs::Preferences, typename... Args>
	auto parent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parent")] != -1);
		return call<R>("parent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto put(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("put")] != -1);
		return call<R>("put", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putBoolean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putBoolean")] != -1);
		return call<R>("putBoolean", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putByteArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putByteArray")] != -1);
		return call<R>("putByteArray", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putDouble")] != -1);
		return call<R>("putDouble", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putFloat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putFloat")] != -1);
		return call<R>("putFloat", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putInt")] != -1);
		return call<R>("putInt", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putLong")] != -1);
		return call<R>("putLong", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeNode")] != -1);
		return call<R>("removeNode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeNodeChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeNodeChangeListener")] != -1);
		return call<R>("removeNodeChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removePreferenceChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removePreferenceChangeListener")] != -1);
		return call<R>("removePreferenceChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto sync(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sync")] != -1);
		return call<R>("sync", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::prefs::Preferences, typename... Args>
	static auto systemNodeForPackage(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("systemNodeForPackage")] != -1);
		return scall<R>("systemNodeForPackage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::prefs::Preferences, typename... Args>
	static auto systemRoot(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("systemRoot")] != -1);
		return scall<R>("systemRoot", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::prefs::Preferences, typename... Args>
	static auto userNodeForPackage(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("userNodeForPackage")] != -1);
		return scall<R>("userNodeForPackage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::prefs::Preferences, typename... Args>
	static auto userRoot(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("userRoot")] != -1);
		return scall<R>("userRoot", std::forward<Args>(args)...);
	}

};

#endif
