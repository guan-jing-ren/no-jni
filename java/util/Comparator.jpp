#ifndef java_util_Comparator_HPP
#define java_util_Comparator_HPP

#include "../../jfwd_decl.hpp"

class ::java::util::Comparator : public jObject<::java::util::Comparator, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util / "Comparator";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint(::java::lang::Object, ::java::lang::Object)>("compare"), //
		jMethod<::java::util::Comparator(::java::util::function::Function)>("comparing"), //
		jMethod<::java::util::Comparator(::java::util::function::Function, ::java::util::Comparator)>("comparing"), //
		jMethod<::java::util::Comparator(::java::util::function::ToDoubleFunction)>("comparingDouble"), //
		jMethod<::java::util::Comparator(::java::util::function::ToIntFunction)>("comparingInt"), //
		jMethod<::java::util::Comparator(::java::util::function::ToLongFunction)>("comparingLong"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::util::Comparator()>("naturalOrder"), //
		jMethod<::java::util::Comparator(::java::util::Comparator)>("nullsFirst"), //
		jMethod<::java::util::Comparator(::java::util::Comparator)>("nullsLast"), //
		jMethod<::java::util::Comparator()>("reverseOrder"), //
		jMethod<::java::util::Comparator()>("reversed"), //
		jMethod<::java::util::Comparator(::java::util::Comparator)>("thenComparing"), //
		jMethod<::java::util::Comparator(::java::util::function::Function)>("thenComparing"), //
		jMethod<::java::util::Comparator(::java::util::function::Function, ::java::util::Comparator)>("thenComparing"), //
		jMethod<::java::util::Comparator(::java::util::function::ToDoubleFunction)>("thenComparingDouble"), //
		jMethod<::java::util::Comparator(::java::util::function::ToIntFunction)>("thenComparingInt"), //
		jMethod<::java::util::Comparator(::java::util::function::ToLongFunction)>("thenComparingLong"), //
	};

	template<typename R = ::jint, typename... Args>
	auto compare(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("compare")] != -1);
		return call<R>("compare", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Comparator, typename... Args>
	static auto comparing(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("comparing")] != -1);
		return scall<R>("comparing", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Comparator, typename... Args>
	static auto comparingDouble(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("comparingDouble")] != -1);
		return scall<R>("comparingDouble", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Comparator, typename... Args>
	static auto comparingInt(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("comparingInt")] != -1);
		return scall<R>("comparingInt", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Comparator, typename... Args>
	static auto comparingLong(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("comparingLong")] != -1);
		return scall<R>("comparingLong", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Comparator, typename... Args>
	static auto naturalOrder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("naturalOrder")] != -1);
		return scall<R>("naturalOrder", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Comparator, typename... Args>
	static auto nullsFirst(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("nullsFirst")] != -1);
		return scall<R>("nullsFirst", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Comparator, typename... Args>
	static auto nullsLast(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("nullsLast")] != -1);
		return scall<R>("nullsLast", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Comparator, typename... Args>
	static auto reverseOrder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reverseOrder")] != -1);
		return scall<R>("reverseOrder", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Comparator, typename... Args>
	auto reversed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reversed")] != -1);
		return call<R>("reversed", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Comparator, typename... Args>
	auto thenComparing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("thenComparing")] != -1);
		return call<R>("thenComparing", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Comparator, typename... Args>
	auto thenComparingDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("thenComparingDouble")] != -1);
		return call<R>("thenComparingDouble", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Comparator, typename... Args>
	auto thenComparingInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("thenComparingInt")] != -1);
		return call<R>("thenComparingInt", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Comparator, typename... Args>
	auto thenComparingLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("thenComparingLong")] != -1);
		return call<R>("thenComparingLong", forward<Args>(args)...);
	}

};

#endif
