#ifndef java_util_LongSummaryStatistics_HPP
#define java_util_LongSummaryStatistics_HPP

#include "../../jfwd_decl.hpp"

class ::java::util::LongSummaryStatistics : public jObject<::java::util::LongSummaryStatistics, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util / "LongSummaryStatistics";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::jint)>("accept"), //
		jMethod<::jvoid(::jlong)>("accept"), //
		jMethod<::java::util::function::IntConsumer(::java::util::function::IntConsumer)>("andThen"), //
		jMethod<::java::util::function::LongConsumer(::java::util::function::LongConsumer)>("andThen"), //
		jMethod<::jvoid(::java::util::LongSummaryStatistics)>("combine"), //
		jMethod<::jdouble()>("getAverage"), //
		jMethod<::jlong()>("getCount"), //
		jMethod<::jlong()>("getMax"), //
		jMethod<::jlong()>("getMin"), //
		jMethod<::jlong()>("getSum"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto accept(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("accept")] != -1);
		return call<R>("accept", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::function::IntConsumer, typename... Args>
	auto andThen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("andThen")] != -1);
		return call<R>("andThen", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto combine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("combine")] != -1);
		return call<R>("combine", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getAverage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAverage")] != -1);
		return call<R>("getAverage", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCount")] != -1);
		return call<R>("getCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getMax(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMax")] != -1);
		return call<R>("getMax", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getMin(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMin")] != -1);
		return call<R>("getMin", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getSum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSum")] != -1);
		return call<R>("getSum", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
