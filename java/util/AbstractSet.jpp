#ifndef java_util_AbstractSet_HPP
#define java_util_AbstractSet_HPP

#include "../../jfwd_decl.hpp"

class ::java::util::AbstractSet : public jObject<::java::util::AbstractSet, ::java::util::AbstractCollection> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util / "AbstractSet";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean(::java::util::Collection)>("removeAll"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto removeAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeAll")] != -1);
		return call<R>("removeAll", forward<Args>(args)...);
	}

};

#endif
