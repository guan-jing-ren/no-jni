#ifndef java_util_Arrays_HPP
#define java_util_Arrays_HPP

#include "../../jfwd_decl.hpp"

class ::java::util::Arrays : public jObject<::java::util::Arrays, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util / "Arrays";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::util::List(::java::lang::Object *)>("asList"), //
		jMethod<::jint(::jbyte *, ::jbyte)>("binarySearch"), //
		jMethod<::jint(::jbyte *, ::jint, ::jint, ::jbyte)>("binarySearch"), //
		jMethod<::jint(::jchar *, ::jchar)>("binarySearch"), //
		jMethod<::jint(::jchar *, ::jint, ::jint, ::jchar)>("binarySearch"), //
		jMethod<::jint(::jdouble *, ::jdouble)>("binarySearch"), //
		jMethod<::jint(::jdouble *, ::jint, ::jint, ::jdouble)>("binarySearch"), //
		jMethod<::jint(::jfloat *, ::jfloat)>("binarySearch"), //
		jMethod<::jint(::jfloat *, ::jint, ::jint, ::jfloat)>("binarySearch"), //
		jMethod<::jint(::jint *, ::jint)>("binarySearch"), //
		jMethod<::jint(::jint *, ::jint, ::jint, ::jint)>("binarySearch"), //
		jMethod<::jint(::jlong *, ::jint, ::jint, ::jlong)>("binarySearch"), //
		jMethod<::jint(::jlong *, ::jlong)>("binarySearch"), //
		jMethod<::jint(::java::lang::Object *, ::jint, ::jint, ::java::lang::Object)>("binarySearch"), //
		jMethod<::jint(::java::lang::Object *, ::jint, ::jint, ::java::lang::Object, ::java::util::Comparator)>("binarySearch"), //
		jMethod<::jint(::java::lang::Object *, ::java::lang::Object)>("binarySearch"), //
		jMethod<::jint(::java::lang::Object *, ::java::lang::Object, ::java::util::Comparator)>("binarySearch"), //
		jMethod<::jint(::jshort *, ::jint, ::jint, ::jshort)>("binarySearch"), //
		jMethod<::jint(::jshort *, ::jshort)>("binarySearch"), //
		jMethod<::jbyte *(::jbyte *, ::jint)>("copyOf"), //
		jMethod<::jchar *(::jchar *, ::jint)>("copyOf"), //
		jMethod<::jdouble *(::jdouble *, ::jint)>("copyOf"), //
		jMethod<::jfloat *(::jfloat *, ::jint)>("copyOf"), //
		jMethod<::jint *(::jint *, ::jint)>("copyOf"), //
		jMethod<::jlong *(::jlong *, ::jint)>("copyOf"), //
		jMethod<::java::lang::Object *(::java::lang::Object *, ::jint)>("copyOf"), //
		jMethod<::java::lang::Object *(::java::lang::Object *, ::jint, ::java::lang::Class)>("copyOf"), //
		jMethod<::jshort *(::jshort *, ::jint)>("copyOf"), //
		jMethod<::jboolean *(::jboolean *, ::jint)>("copyOf"), //
		jMethod<::jbyte *(::jbyte *, ::jint, ::jint)>("copyOfRange"), //
		jMethod<::jchar *(::jchar *, ::jint, ::jint)>("copyOfRange"), //
		jMethod<::jdouble *(::jdouble *, ::jint, ::jint)>("copyOfRange"), //
		jMethod<::jfloat *(::jfloat *, ::jint, ::jint)>("copyOfRange"), //
		jMethod<::jint *(::jint *, ::jint, ::jint)>("copyOfRange"), //
		jMethod<::jlong *(::jlong *, ::jint, ::jint)>("copyOfRange"), //
		jMethod<::java::lang::Object *(::java::lang::Object *, ::jint, ::jint)>("copyOfRange"), //
		jMethod<::java::lang::Object *(::java::lang::Object *, ::jint, ::jint, ::java::lang::Class)>("copyOfRange"), //
		jMethod<::jshort *(::jshort *, ::jint, ::jint)>("copyOfRange"), //
		jMethod<::jboolean *(::jboolean *, ::jint, ::jint)>("copyOfRange"), //
		jMethod<::jboolean(::java::lang::Object *, ::java::lang::Object *)>("deepEquals"), //
		jMethod<::jint(::java::lang::Object *)>("deepHashCode"), //
		jMethod<::java::lang::String(::java::lang::Object *)>("deepToString"), //
		jMethod<::jboolean(::jbyte *, ::jbyte *)>("equals"), //
		jMethod<::jboolean(::jchar *, ::jchar *)>("equals"), //
		jMethod<::jboolean(::jdouble *, ::jdouble *)>("equals"), //
		jMethod<::jboolean(::jfloat *, ::jfloat *)>("equals"), //
		jMethod<::jboolean(::jint *, ::jint *)>("equals"), //
		jMethod<::jboolean(::jlong *, ::jlong *)>("equals"), //
		jMethod<::jboolean(::java::lang::Object *, ::java::lang::Object *)>("equals"), //
		jMethod<::jboolean(::jshort *, ::jshort *)>("equals"), //
		jMethod<::jboolean(::jboolean *, ::jboolean *)>("equals"), //
		jMethod<::jvoid(::jbyte *, ::jbyte)>("fill"), //
		jMethod<::jvoid(::jbyte *, ::jint, ::jint, ::jbyte)>("fill"), //
		jMethod<::jvoid(::jchar *, ::jchar)>("fill"), //
		jMethod<::jvoid(::jchar *, ::jint, ::jint, ::jchar)>("fill"), //
		jMethod<::jvoid(::jdouble *, ::jdouble)>("fill"), //
		jMethod<::jvoid(::jdouble *, ::jint, ::jint, ::jdouble)>("fill"), //
		jMethod<::jvoid(::jfloat *, ::jfloat)>("fill"), //
		jMethod<::jvoid(::jfloat *, ::jint, ::jint, ::jfloat)>("fill"), //
		jMethod<::jvoid(::jint *, ::jint)>("fill"), //
		jMethod<::jvoid(::jint *, ::jint, ::jint, ::jint)>("fill"), //
		jMethod<::jvoid(::jlong *, ::jint, ::jint, ::jlong)>("fill"), //
		jMethod<::jvoid(::jlong *, ::jlong)>("fill"), //
		jMethod<::jvoid(::java::lang::Object *, ::jint, ::jint, ::java::lang::Object)>("fill"), //
		jMethod<::jvoid(::java::lang::Object *, ::java::lang::Object)>("fill"), //
		jMethod<::jvoid(::jshort *, ::jint, ::jint, ::jshort)>("fill"), //
		jMethod<::jvoid(::jshort *, ::jshort)>("fill"), //
		jMethod<::jvoid(::jboolean *, ::jint, ::jint, ::jboolean)>("fill"), //
		jMethod<::jvoid(::jboolean *, ::jboolean)>("fill"), //
		jMethod<::jint(::jbyte *)>("hashCode"), //
		jMethod<::jint(::jchar *)>("hashCode"), //
		jMethod<::jint(::jdouble *)>("hashCode"), //
		jMethod<::jint(::jfloat *)>("hashCode"), //
		jMethod<::jint(::jint *)>("hashCode"), //
		jMethod<::jint(::jlong *)>("hashCode"), //
		jMethod<::jint(::java::lang::Object *)>("hashCode"), //
		jMethod<::jint(::jshort *)>("hashCode"), //
		jMethod<::jint(::jboolean *)>("hashCode"), //
		jMethod<::jvoid(::jdouble *, ::jint, ::jint, ::java::util::function::DoubleBinaryOperator)>("parallelPrefix"), //
		jMethod<::jvoid(::jdouble *, ::java::util::function::DoubleBinaryOperator)>("parallelPrefix"), //
		jMethod<::jvoid(::jint *, ::jint, ::jint, ::java::util::function::IntBinaryOperator)>("parallelPrefix"), //
		jMethod<::jvoid(::jint *, ::java::util::function::IntBinaryOperator)>("parallelPrefix"), //
		jMethod<::jvoid(::jlong *, ::jint, ::jint, ::java::util::function::LongBinaryOperator)>("parallelPrefix"), //
		jMethod<::jvoid(::jlong *, ::java::util::function::LongBinaryOperator)>("parallelPrefix"), //
		jMethod<::jvoid(::java::lang::Object *, ::jint, ::jint, ::java::util::function::BinaryOperator)>("parallelPrefix"), //
		jMethod<::jvoid(::java::lang::Object *, ::java::util::function::BinaryOperator)>("parallelPrefix"), //
		jMethod<::jvoid(::jdouble *, ::java::util::function::IntToDoubleFunction)>("parallelSetAll"), //
		jMethod<::jvoid(::jint *, ::java::util::function::IntUnaryOperator)>("parallelSetAll"), //
		jMethod<::jvoid(::jlong *, ::java::util::function::IntToLongFunction)>("parallelSetAll"), //
		jMethod<::jvoid(::java::lang::Object *, ::java::util::function::IntFunction)>("parallelSetAll"), //
		jMethod<::jvoid(::jbyte *)>("parallelSort"), //
		jMethod<::jvoid(::jbyte *, ::jint, ::jint)>("parallelSort"), //
		jMethod<::jvoid(::jchar *)>("parallelSort"), //
		jMethod<::jvoid(::jchar *, ::jint, ::jint)>("parallelSort"), //
		jMethod<::jvoid(::jdouble *)>("parallelSort"), //
		jMethod<::jvoid(::jdouble *, ::jint, ::jint)>("parallelSort"), //
		jMethod<::jvoid(::jfloat *)>("parallelSort"), //
		jMethod<::jvoid(::jfloat *, ::jint, ::jint)>("parallelSort"), //
		jMethod<::jvoid(::jint *)>("parallelSort"), //
		jMethod<::jvoid(::jint *, ::jint, ::jint)>("parallelSort"), //
		jMethod<::jvoid(::jlong *)>("parallelSort"), //
		jMethod<::jvoid(::jlong *, ::jint, ::jint)>("parallelSort"), //
		jMethod<::jvoid(::java::lang::Comparable *)>("parallelSort"), //
		jMethod<::jvoid(::java::lang::Comparable *, ::jint, ::jint)>("parallelSort"), //
		jMethod<::jvoid(::java::lang::Object *, ::jint, ::jint, ::java::util::Comparator)>("parallelSort"), //
		jMethod<::jvoid(::java::lang::Object *, ::java::util::Comparator)>("parallelSort"), //
		jMethod<::jvoid(::jshort *)>("parallelSort"), //
		jMethod<::jvoid(::jshort *, ::jint, ::jint)>("parallelSort"), //
		jMethod<::jvoid(::jdouble *, ::java::util::function::IntToDoubleFunction)>("setAll"), //
		jMethod<::jvoid(::jint *, ::java::util::function::IntUnaryOperator)>("setAll"), //
		jMethod<::jvoid(::jlong *, ::java::util::function::IntToLongFunction)>("setAll"), //
		jMethod<::jvoid(::java::lang::Object *, ::java::util::function::IntFunction)>("setAll"), //
		jMethod<::jvoid(::jbyte *)>("sort"), //
		jMethod<::jvoid(::jbyte *, ::jint, ::jint)>("sort"), //
		jMethod<::jvoid(::jchar *)>("sort"), //
		jMethod<::jvoid(::jchar *, ::jint, ::jint)>("sort"), //
		jMethod<::jvoid(::jdouble *)>("sort"), //
		jMethod<::jvoid(::jdouble *, ::jint, ::jint)>("sort"), //
		jMethod<::jvoid(::jfloat *)>("sort"), //
		jMethod<::jvoid(::jfloat *, ::jint, ::jint)>("sort"), //
		jMethod<::jvoid(::jint *)>("sort"), //
		jMethod<::jvoid(::jint *, ::jint, ::jint)>("sort"), //
		jMethod<::jvoid(::jlong *)>("sort"), //
		jMethod<::jvoid(::jlong *, ::jint, ::jint)>("sort"), //
		jMethod<::jvoid(::java::lang::Object *)>("sort"), //
		jMethod<::jvoid(::java::lang::Object *, ::jint, ::jint)>("sort"), //
		jMethod<::jvoid(::java::lang::Object *, ::jint, ::jint, ::java::util::Comparator)>("sort"), //
		jMethod<::jvoid(::java::lang::Object *, ::java::util::Comparator)>("sort"), //
		jMethod<::jvoid(::jshort *)>("sort"), //
		jMethod<::jvoid(::jshort *, ::jint, ::jint)>("sort"), //
		jMethod<::java::util::Spliterator$OfDouble(::jdouble *)>("spliterator"), //
		jMethod<::java::util::Spliterator$OfDouble(::jdouble *, ::jint, ::jint)>("spliterator"), //
		jMethod<::java::util::Spliterator$OfInt(::jint *)>("spliterator"), //
		jMethod<::java::util::Spliterator$OfInt(::jint *, ::jint, ::jint)>("spliterator"), //
		jMethod<::java::util::Spliterator$OfLong(::jlong *)>("spliterator"), //
		jMethod<::java::util::Spliterator$OfLong(::jlong *, ::jint, ::jint)>("spliterator"), //
		jMethod<::java::util::Spliterator(::java::lang::Object *)>("spliterator"), //
		jMethod<::java::util::Spliterator(::java::lang::Object *, ::jint, ::jint)>("spliterator"), //
		jMethod<::java::util::stream::DoubleStream(::jdouble *)>("stream"), //
		jMethod<::java::util::stream::DoubleStream(::jdouble *, ::jint, ::jint)>("stream"), //
		jMethod<::java::util::stream::IntStream(::jint *)>("stream"), //
		jMethod<::java::util::stream::IntStream(::jint *, ::jint, ::jint)>("stream"), //
		jMethod<::java::util::stream::LongStream(::jlong *)>("stream"), //
		jMethod<::java::util::stream::LongStream(::jlong *, ::jint, ::jint)>("stream"), //
		jMethod<::java::util::stream::Stream(::java::lang::Object *)>("stream"), //
		jMethod<::java::util::stream::Stream(::java::lang::Object *, ::jint, ::jint)>("stream"), //
		jMethod<::java::lang::String(::jbyte *)>("toString"), //
		jMethod<::java::lang::String(::jchar *)>("toString"), //
		jMethod<::java::lang::String(::jdouble *)>("toString"), //
		jMethod<::java::lang::String(::jfloat *)>("toString"), //
		jMethod<::java::lang::String(::jint *)>("toString"), //
		jMethod<::java::lang::String(::jlong *)>("toString"), //
		jMethod<::java::lang::String(::java::lang::Object *)>("toString"), //
		jMethod<::java::lang::String(::jshort *)>("toString"), //
		jMethod<::java::lang::String(::jboolean *)>("toString"), //
	};

	template<typename R = ::java::util::List, typename... Args>
	static auto asList(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("asList")] != -1);
		return scall<R>("asList", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto binarySearch(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("binarySearch")] != -1);
		return scall<R>("binarySearch", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	static auto copyOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("copyOf")] != -1);
		return scall<R>("copyOf", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	static auto copyOfRange(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("copyOfRange")] != -1);
		return scall<R>("copyOfRange", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto deepEquals(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deepEquals")] != -1);
		return scall<R>("deepEquals", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto deepHashCode(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deepHashCode")] != -1);
		return scall<R>("deepHashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto deepToString(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deepToString")] != -1);
		return scall<R>("deepToString", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto equals(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return scall<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto fill(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fill")] != -1);
		return scall<R>("fill", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto hashCode(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return scall<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto parallelPrefix(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parallelPrefix")] != -1);
		return scall<R>("parallelPrefix", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto parallelSetAll(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parallelSetAll")] != -1);
		return scall<R>("parallelSetAll", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto parallelSort(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parallelSort")] != -1);
		return scall<R>("parallelSort", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setAll(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAll")] != -1);
		return scall<R>("setAll", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto sort(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sort")] != -1);
		return scall<R>("sort", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Spliterator$OfDouble, typename... Args>
	static auto spliterator(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("spliterator")] != -1);
		return scall<R>("spliterator", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::DoubleStream, typename... Args>
	static auto stream(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stream")] != -1);
		return scall<R>("stream", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto toString(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return scall<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
