#ifndef java_util_Locale_HPP
#define java_util_Locale_HPP

#include "../../jfwd_decl.hpp"

class ::java::util::Locale : public jObject<::java::util::Locale, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util / "Locale";

	constexpr static Enume field_signatures{
		jField<::java::util::Locale>("CANADA"), //
		jField<::java::util::Locale>("CANADA_FRENCH"), //
		jField<::java::util::Locale>("CHINA"), //
		jField<::java::util::Locale>("CHINESE"), //
		jField<::java::util::Locale>("ENGLISH"), //
		jField<::java::util::Locale>("FRANCE"), //
		jField<::java::util::Locale>("FRENCH"), //
		jField<::java::util::Locale>("GERMAN"), //
		jField<::java::util::Locale>("GERMANY"), //
		jField<::java::util::Locale>("ITALIAN"), //
		jField<::java::util::Locale>("ITALY"), //
		jField<::java::util::Locale>("JAPAN"), //
		jField<::java::util::Locale>("JAPANESE"), //
		jField<::java::util::Locale>("KOREA"), //
		jField<::java::util::Locale>("KOREAN"), //
		jField<::java::util::Locale>("PRC"), //
		jField<::jchar>("PRIVATE_USE_EXTENSION"), //
		jField<::java::util::Locale>("ROOT"), //
		jField<::java::util::Locale>("SIMPLIFIED_CHINESE"), //
		jField<::java::util::Locale>("TAIWAN"), //
		jField<::java::util::Locale>("TRADITIONAL_CHINESE"), //
		jField<::java::util::Locale>("UK"), //
		jField<::jchar>("UNICODE_LOCALE_EXTENSION"), //
		jField<::java::util::Locale>("US"), //
	};

	template<typename F = ::java::util::Locale>
	static auto CANADA() {
		static_assert(field_signatures[jField<F>("CANADA")] != -1);
		return sat<F>("CANADA");
	}

	template<typename F = ::java::util::Locale>
	static auto CANADA_FRENCH() {
		static_assert(field_signatures[jField<F>("CANADA_FRENCH")] != -1);
		return sat<F>("CANADA_FRENCH");
	}

	template<typename F = ::java::util::Locale>
	static auto CHINA() {
		static_assert(field_signatures[jField<F>("CHINA")] != -1);
		return sat<F>("CHINA");
	}

	template<typename F = ::java::util::Locale>
	static auto CHINESE() {
		static_assert(field_signatures[jField<F>("CHINESE")] != -1);
		return sat<F>("CHINESE");
	}

	template<typename F = ::java::util::Locale>
	static auto ENGLISH() {
		static_assert(field_signatures[jField<F>("ENGLISH")] != -1);
		return sat<F>("ENGLISH");
	}

	template<typename F = ::java::util::Locale>
	static auto FRANCE() {
		static_assert(field_signatures[jField<F>("FRANCE")] != -1);
		return sat<F>("FRANCE");
	}

	template<typename F = ::java::util::Locale>
	static auto FRENCH() {
		static_assert(field_signatures[jField<F>("FRENCH")] != -1);
		return sat<F>("FRENCH");
	}

	template<typename F = ::java::util::Locale>
	static auto GERMAN() {
		static_assert(field_signatures[jField<F>("GERMAN")] != -1);
		return sat<F>("GERMAN");
	}

	template<typename F = ::java::util::Locale>
	static auto GERMANY() {
		static_assert(field_signatures[jField<F>("GERMANY")] != -1);
		return sat<F>("GERMANY");
	}

	template<typename F = ::java::util::Locale>
	static auto ITALIAN() {
		static_assert(field_signatures[jField<F>("ITALIAN")] != -1);
		return sat<F>("ITALIAN");
	}

	template<typename F = ::java::util::Locale>
	static auto ITALY() {
		static_assert(field_signatures[jField<F>("ITALY")] != -1);
		return sat<F>("ITALY");
	}

	template<typename F = ::java::util::Locale>
	static auto JAPAN() {
		static_assert(field_signatures[jField<F>("JAPAN")] != -1);
		return sat<F>("JAPAN");
	}

	template<typename F = ::java::util::Locale>
	static auto JAPANESE() {
		static_assert(field_signatures[jField<F>("JAPANESE")] != -1);
		return sat<F>("JAPANESE");
	}

	template<typename F = ::java::util::Locale>
	static auto KOREA() {
		static_assert(field_signatures[jField<F>("KOREA")] != -1);
		return sat<F>("KOREA");
	}

	template<typename F = ::java::util::Locale>
	static auto KOREAN() {
		static_assert(field_signatures[jField<F>("KOREAN")] != -1);
		return sat<F>("KOREAN");
	}

	template<typename F = ::java::util::Locale>
	static auto PRC() {
		static_assert(field_signatures[jField<F>("PRC")] != -1);
		return sat<F>("PRC");
	}

	template<typename F = ::jchar>
	static auto PRIVATE_USE_EXTENSION() {
		static_assert(field_signatures[jField<F>("PRIVATE_USE_EXTENSION")] != -1);
		return sat<F>("PRIVATE_USE_EXTENSION");
	}

	template<typename F = ::java::util::Locale>
	static auto ROOT() {
		static_assert(field_signatures[jField<F>("ROOT")] != -1);
		return sat<F>("ROOT");
	}

	template<typename F = ::java::util::Locale>
	static auto SIMPLIFIED_CHINESE() {
		static_assert(field_signatures[jField<F>("SIMPLIFIED_CHINESE")] != -1);
		return sat<F>("SIMPLIFIED_CHINESE");
	}

	template<typename F = ::java::util::Locale>
	static auto TAIWAN() {
		static_assert(field_signatures[jField<F>("TAIWAN")] != -1);
		return sat<F>("TAIWAN");
	}

	template<typename F = ::java::util::Locale>
	static auto TRADITIONAL_CHINESE() {
		static_assert(field_signatures[jField<F>("TRADITIONAL_CHINESE")] != -1);
		return sat<F>("TRADITIONAL_CHINESE");
	}

	template<typename F = ::java::util::Locale>
	static auto UK() {
		static_assert(field_signatures[jField<F>("UK")] != -1);
		return sat<F>("UK");
	}

	template<typename F = ::jchar>
	static auto UNICODE_LOCALE_EXTENSION() {
		static_assert(field_signatures[jField<F>("UNICODE_LOCALE_EXTENSION")] != -1);
		return sat<F>("UNICODE_LOCALE_EXTENSION");
	}

	template<typename F = ::java::util::Locale>
	static auto US() {
		static_assert(field_signatures[jField<F>("US")] != -1);
		return sat<F>("US");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String)>(), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::util::List(::java::util::List, ::java::util::Collection)>("filter"), //
		jMethod<::java::util::List(::java::util::List, ::java::util::Collection, ::java::util::Locale$FilteringMode)>("filter"), //
		jMethod<::java::util::List(::java::util::List, ::java::util::Collection)>("filterTags"), //
		jMethod<::java::util::List(::java::util::List, ::java::util::Collection, ::java::util::Locale$FilteringMode)>("filterTags"), //
		jMethod<::java::util::Locale(::java::lang::String)>("forLanguageTag"), //
		jMethod<::java::util::Locale *()>("getAvailableLocales"), //
		jMethod<::java::lang::String()>("getCountry"), //
		jMethod<::java::util::Locale()>("getDefault"), //
		jMethod<::java::util::Locale(::java::util::Locale$Category)>("getDefault"), //
		jMethod<::java::lang::String()>("getDisplayCountry"), //
		jMethod<::java::lang::String(::java::util::Locale)>("getDisplayCountry"), //
		jMethod<::java::lang::String()>("getDisplayLanguage"), //
		jMethod<::java::lang::String(::java::util::Locale)>("getDisplayLanguage"), //
		jMethod<::java::lang::String()>("getDisplayName"), //
		jMethod<::java::lang::String(::java::util::Locale)>("getDisplayName"), //
		jMethod<::java::lang::String()>("getDisplayScript"), //
		jMethod<::java::lang::String(::java::util::Locale)>("getDisplayScript"), //
		jMethod<::java::lang::String()>("getDisplayVariant"), //
		jMethod<::java::lang::String(::java::util::Locale)>("getDisplayVariant"), //
		jMethod<::java::lang::String(::jchar)>("getExtension"), //
		jMethod<::java::util::Set()>("getExtensionKeys"), //
		jMethod<::java::lang::String()>("getISO3Country"), //
		jMethod<::java::lang::String()>("getISO3Language"), //
		jMethod<::java::lang::String *()>("getISOCountries"), //
		jMethod<::java::lang::String *()>("getISOLanguages"), //
		jMethod<::java::lang::String()>("getLanguage"), //
		jMethod<::java::lang::String()>("getScript"), //
		jMethod<::java::util::Set()>("getUnicodeLocaleAttributes"), //
		jMethod<::java::util::Set()>("getUnicodeLocaleKeys"), //
		jMethod<::java::lang::String(::java::lang::String)>("getUnicodeLocaleType"), //
		jMethod<::java::lang::String()>("getVariant"), //
		jMethod<::jboolean()>("hasExtensions"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::util::Locale(::java::util::List, ::java::util::Collection)>("lookup"), //
		jMethod<::java::lang::String(::java::util::List, ::java::util::Collection)>("lookupTag"), //
		jMethod<::jvoid(::java::util::Locale$Category, ::java::util::Locale)>("setDefault"), //
		jMethod<::jvoid(::java::util::Locale)>("setDefault"), //
		jMethod<::java::util::Locale()>("stripExtensions"), //
		jMethod<::java::lang::String()>("toLanguageTag"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	static auto filter(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("filter")] != -1);
		return scall<R>("filter", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	static auto filterTags(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("filterTags")] != -1);
		return scall<R>("filterTags", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale, typename... Args>
	static auto forLanguageTag(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("forLanguageTag")] != -1);
		return scall<R>("forLanguageTag", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale *, typename... Args>
	static auto getAvailableLocales(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAvailableLocales")] != -1);
		return scall<R>("getAvailableLocales", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCountry(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCountry")] != -1);
		return call<R>("getCountry", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale, typename... Args>
	static auto getDefault(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefault")] != -1);
		return scall<R>("getDefault", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDisplayCountry(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisplayCountry")] != -1);
		return call<R>("getDisplayCountry", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDisplayLanguage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisplayLanguage")] != -1);
		return call<R>("getDisplayLanguage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDisplayName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisplayName")] != -1);
		return call<R>("getDisplayName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDisplayScript(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisplayScript")] != -1);
		return call<R>("getDisplayScript", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDisplayVariant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisplayVariant")] != -1);
		return call<R>("getDisplayVariant", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getExtension(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExtension")] != -1);
		return call<R>("getExtension", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto getExtensionKeys(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExtensionKeys")] != -1);
		return call<R>("getExtensionKeys", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getISO3Country(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getISO3Country")] != -1);
		return call<R>("getISO3Country", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getISO3Language(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getISO3Language")] != -1);
		return call<R>("getISO3Language", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	static auto getISOCountries(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getISOCountries")] != -1);
		return scall<R>("getISOCountries", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	static auto getISOLanguages(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getISOLanguages")] != -1);
		return scall<R>("getISOLanguages", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLanguage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLanguage")] != -1);
		return call<R>("getLanguage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getScript(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScript")] != -1);
		return call<R>("getScript", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto getUnicodeLocaleAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUnicodeLocaleAttributes")] != -1);
		return call<R>("getUnicodeLocaleAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto getUnicodeLocaleKeys(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUnicodeLocaleKeys")] != -1);
		return call<R>("getUnicodeLocaleKeys", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUnicodeLocaleType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUnicodeLocaleType")] != -1);
		return call<R>("getUnicodeLocaleType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getVariant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVariant")] != -1);
		return call<R>("getVariant", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasExtensions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasExtensions")] != -1);
		return call<R>("hasExtensions", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale, typename... Args>
	static auto lookup(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lookup")] != -1);
		return scall<R>("lookup", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto lookupTag(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lookupTag")] != -1);
		return scall<R>("lookupTag", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setDefault(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDefault")] != -1);
		return scall<R>("setDefault", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale, typename... Args>
	auto stripExtensions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stripExtensions")] != -1);
		return call<R>("stripExtensions", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toLanguageTag(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toLanguageTag")] != -1);
		return call<R>("toLanguageTag", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
