#ifndef java_util_Formatter$BigDecimalLayoutForm_HPP
#define java_util_Formatter$BigDecimalLayoutForm_HPP

#include "../../jfwd_decl.hpp"

class ::java::util::Formatter$BigDecimalLayoutForm : public jObject<::java::util::Formatter$BigDecimalLayoutForm, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util / "Formatter$BigDecimalLayoutForm";

	constexpr static Enume field_signatures{
		jField<::java::util::Formatter$BigDecimalLayoutForm>("DECIMAL_FLOAT"), //
		jField<::java::util::Formatter$BigDecimalLayoutForm>("SCIENTIFIC"), //
	};

	template<typename F = ::java::util::Formatter$BigDecimalLayoutForm>
	static auto DECIMAL_FLOAT() {
		static_assert(field_signatures[jField<F>("DECIMAL_FLOAT")] != -1);
		return sat<F>("DECIMAL_FLOAT");
	}

	template<typename F = ::java::util::Formatter$BigDecimalLayoutForm>
	static auto SCIENTIFIC() {
		static_assert(field_signatures[jField<F>("SCIENTIFIC")] != -1);
		return sat<F>("SCIENTIFIC");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::util::Formatter$BigDecimalLayoutForm(::java::lang::String)>("valueOf"), //
		jMethod<::java::util::Formatter$BigDecimalLayoutForm *()>("values"), //
	};

	template<typename R = ::java::util::Formatter$BigDecimalLayoutForm, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Formatter$BigDecimalLayoutForm *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
