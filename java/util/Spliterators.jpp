#ifndef java_util_Spliterators_HPP
#define java_util_Spliterators_HPP

#include "../../jfwd_decl.hpp"

class ::java::util::Spliterators : public jObject<::java::util::Spliterators, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util / "Spliterators";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::util::Spliterator$OfDouble()>("emptyDoubleSpliterator"), //
		jMethod<::java::util::Spliterator$OfInt()>("emptyIntSpliterator"), //
		jMethod<::java::util::Spliterator$OfLong()>("emptyLongSpliterator"), //
		jMethod<::java::util::Spliterator()>("emptySpliterator"), //
		jMethod<::java::util::PrimitiveIterator$OfDouble(::java::util::Spliterator$OfDouble)>("iterator"), //
		jMethod<::java::util::PrimitiveIterator$OfInt(::java::util::Spliterator$OfInt)>("iterator"), //
		jMethod<::java::util::PrimitiveIterator$OfLong(::java::util::Spliterator$OfLong)>("iterator"), //
		jMethod<::java::util::Iterator(::java::util::Spliterator)>("iterator"), //
		jMethod<::java::util::Spliterator(::java::util::Collection, ::jint)>("spliterator"), //
		jMethod<::java::util::Spliterator(::java::util::Iterator, ::jlong, ::jint)>("spliterator"), //
		jMethod<::java::util::Spliterator$OfDouble(::java::util::PrimitiveIterator$OfDouble, ::jlong, ::jint)>("spliterator"), //
		jMethod<::java::util::Spliterator$OfInt(::java::util::PrimitiveIterator$OfInt, ::jlong, ::jint)>("spliterator"), //
		jMethod<::java::util::Spliterator$OfLong(::java::util::PrimitiveIterator$OfLong, ::jlong, ::jint)>("spliterator"), //
		jMethod<::java::util::Spliterator$OfDouble(::jdouble *, ::jint)>("spliterator"), //
		jMethod<::java::util::Spliterator$OfDouble(::jdouble *, ::jint, ::jint, ::jint)>("spliterator"), //
		jMethod<::java::util::Spliterator$OfInt(::jint *, ::jint)>("spliterator"), //
		jMethod<::java::util::Spliterator$OfInt(::jint *, ::jint, ::jint, ::jint)>("spliterator"), //
		jMethod<::java::util::Spliterator$OfLong(::jlong *, ::jint)>("spliterator"), //
		jMethod<::java::util::Spliterator$OfLong(::jlong *, ::jint, ::jint, ::jint)>("spliterator"), //
		jMethod<::java::util::Spliterator(::java::lang::Object *, ::jint)>("spliterator"), //
		jMethod<::java::util::Spliterator(::java::lang::Object *, ::jint, ::jint, ::jint)>("spliterator"), //
		jMethod<::java::util::Spliterator(::java::util::Iterator, ::jint)>("spliteratorUnknownSize"), //
		jMethod<::java::util::Spliterator$OfDouble(::java::util::PrimitiveIterator$OfDouble, ::jint)>("spliteratorUnknownSize"), //
		jMethod<::java::util::Spliterator$OfInt(::java::util::PrimitiveIterator$OfInt, ::jint)>("spliteratorUnknownSize"), //
		jMethod<::java::util::Spliterator$OfLong(::java::util::PrimitiveIterator$OfLong, ::jint)>("spliteratorUnknownSize"), //
	};

	template<typename R = ::java::util::Spliterator$OfDouble, typename... Args>
	static auto emptyDoubleSpliterator(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("emptyDoubleSpliterator")] != -1);
		return scall<R>("emptyDoubleSpliterator", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Spliterator$OfInt, typename... Args>
	static auto emptyIntSpliterator(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("emptyIntSpliterator")] != -1);
		return scall<R>("emptyIntSpliterator", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Spliterator$OfLong, typename... Args>
	static auto emptyLongSpliterator(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("emptyLongSpliterator")] != -1);
		return scall<R>("emptyLongSpliterator", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Spliterator, typename... Args>
	static auto emptySpliterator(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("emptySpliterator")] != -1);
		return scall<R>("emptySpliterator", forward<Args>(args)...);
	}

	template<typename R = ::java::util::PrimitiveIterator$OfDouble, typename... Args>
	static auto iterator(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("iterator")] != -1);
		return scall<R>("iterator", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Spliterator, typename... Args>
	static auto spliterator(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("spliterator")] != -1);
		return scall<R>("spliterator", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Spliterator, typename... Args>
	static auto spliteratorUnknownSize(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("spliteratorUnknownSize")] != -1);
		return scall<R>("spliteratorUnknownSize", forward<Args>(args)...);
	}

};

#endif
