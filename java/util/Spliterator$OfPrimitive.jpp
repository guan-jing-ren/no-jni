#ifndef java_util_Spliterator$OfPrimitive_HPP
#define java_util_Spliterator$OfPrimitive_HPP

#include "../../jfwd_decl.hpp"

class ::java::util::Spliterator$OfPrimitive : public jObject<::java::util::Spliterator$OfPrimitive, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util / "Spliterator$OfPrimitive";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint()>("characteristics"), //
		jMethod<::jlong()>("estimateSize"), //
		jMethod<::jvoid(::java::lang::Object)>("forEachRemaining"), //
		jMethod<::jvoid(::java::util::function::Consumer)>("forEachRemaining"), //
		jMethod<::java::util::Comparator()>("getComparator"), //
		jMethod<::jlong()>("getExactSizeIfKnown"), //
		jMethod<::jboolean(::jint)>("hasCharacteristics"), //
		jMethod<::jboolean(::java::lang::Object)>("tryAdvance"), //
		jMethod<::jboolean(::java::util::function::Consumer)>("tryAdvance"), //
		jMethod<::java::util::Spliterator$OfPrimitive()>("trySplit"), //
		jMethod<::java::util::Spliterator()>("trySplit"), //
	};

	template<typename R = ::jint, typename... Args>
	auto characteristics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("characteristics")] != -1);
		return call<R>("characteristics", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto estimateSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("estimateSize")] != -1);
		return call<R>("estimateSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto forEachRemaining(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("forEachRemaining")] != -1);
		return call<R>("forEachRemaining", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Comparator, typename... Args>
	auto getComparator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getComparator")] != -1);
		return call<R>("getComparator", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getExactSizeIfKnown(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExactSizeIfKnown")] != -1);
		return call<R>("getExactSizeIfKnown", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasCharacteristics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasCharacteristics")] != -1);
		return call<R>("hasCharacteristics", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto tryAdvance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("tryAdvance")] != -1);
		return call<R>("tryAdvance", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Spliterator$OfPrimitive, typename... Args>
	auto trySplit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("trySplit")] != -1);
		return call<R>("trySplit", std::forward<Args>(args)...);
	}

};

#endif
