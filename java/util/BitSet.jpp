#ifndef java_util_BitSet_HPP
#define java_util_BitSet_HPP

#include "../../jfwd_decl.hpp"

class ::java::util::BitSet : public jObject<::java::util::BitSet, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util / "BitSet";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint)>(), //
		jMethod<::jvoid(::java::util::BitSet)>("and"), //
		jMethod<::jvoid(::java::util::BitSet)>("andNot"), //
		jMethod<::jint()>("cardinality"), //
		jMethod<::jvoid()>("clear"), //
		jMethod<::jvoid(::jint)>("clear"), //
		jMethod<::jvoid(::jint, ::jint)>("clear"), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jvoid(::jint)>("flip"), //
		jMethod<::jvoid(::jint, ::jint)>("flip"), //
		jMethod<::jboolean(::jint)>("get"), //
		jMethod<::java::util::BitSet(::jint, ::jint)>("get"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean(::java::util::BitSet)>("intersects"), //
		jMethod<::jboolean()>("isEmpty"), //
		jMethod<::jint()>("length"), //
		jMethod<::jint(::jint)>("nextClearBit"), //
		jMethod<::jint(::jint)>("nextSetBit"), //
		jMethod<::jvoid(::java::util::BitSet)>("or"), //
		jMethod<::jint(::jint)>("previousClearBit"), //
		jMethod<::jint(::jint)>("previousSetBit"), //
		jMethod<::jvoid(::jint)>("set"), //
		jMethod<::jvoid(::jint, ::jint)>("set"), //
		jMethod<::jvoid(::jint, ::jint, ::jboolean)>("set"), //
		jMethod<::jvoid(::jint, ::jboolean)>("set"), //
		jMethod<::jint()>("size"), //
		jMethod<::java::util::stream::IntStream()>("stream"), //
		jMethod<::jbyte *()>("toByteArray"), //
		jMethod<::jlong *()>("toLongArray"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::util::BitSet(::java::nio::ByteBuffer)>("valueOf"), //
		jMethod<::java::util::BitSet(::java::nio::LongBuffer)>("valueOf"), //
		jMethod<::java::util::BitSet(::jbyte *)>("valueOf"), //
		jMethod<::java::util::BitSet(::jlong *)>("valueOf"), //
		jMethod<::jvoid(::java::util::BitSet)>("xor"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto and_(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("and")] != -1);
		return call<R>("and", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto andNot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("andNot")] != -1);
		return call<R>("andNot", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto cardinality(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cardinality")] != -1);
		return call<R>("cardinality", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto flip(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("flip")] != -1);
		return call<R>("flip", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto intersects(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("intersects")] != -1);
		return call<R>("intersects", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEmpty")] != -1);
		return call<R>("isEmpty", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto length(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("length")] != -1);
		return call<R>("length", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto nextClearBit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nextClearBit")] != -1);
		return call<R>("nextClearBit", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto nextSetBit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nextSetBit")] != -1);
		return call<R>("nextSetBit", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto or_(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("or")] != -1);
		return call<R>("or", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto previousClearBit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("previousClearBit")] != -1);
		return call<R>("previousClearBit", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto previousSetBit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("previousSetBit")] != -1);
		return call<R>("previousSetBit", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set")] != -1);
		return call<R>("set", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto size(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("size")] != -1);
		return call<R>("size", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::IntStream, typename... Args>
	auto stream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stream")] != -1);
		return call<R>("stream", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto toByteArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toByteArray")] != -1);
		return call<R>("toByteArray", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong *, typename... Args>
	auto toLongArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toLongArray")] != -1);
		return call<R>("toLongArray", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::BitSet, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto xor_(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("xor")] != -1);
		return call<R>("xor", std::forward<Args>(args)...);
	}

};

#endif
