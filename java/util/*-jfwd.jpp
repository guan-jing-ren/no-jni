#ifndef java_util_JPP
#define java_util_JPP

namespace java::util { class AbstractCollection; }
template<> constexpr auto signature<::java::util::AbstractCollection> = ::java_util / "AbstractCollection";
namespace java::util { class AbstractList; }
template<> constexpr auto signature<::java::util::AbstractList> = ::java_util / "AbstractList";
namespace java::util { class AbstractList$1; }
template<> constexpr auto signature<::java::util::AbstractList$1> = ::java_util / "AbstractList$1";
namespace java::util { class AbstractList$Itr; }
template<> constexpr auto signature<::java::util::AbstractList$Itr> = ::java_util / "AbstractList$Itr";
namespace java::util { class AbstractList$ListItr; }
template<> constexpr auto signature<::java::util::AbstractList$ListItr> = ::java_util / "AbstractList$ListItr";
namespace java::util { class AbstractMap; }
template<> constexpr auto signature<::java::util::AbstractMap> = ::java_util / "AbstractMap";
namespace java::util { class AbstractMap$1; }
template<> constexpr auto signature<::java::util::AbstractMap$1> = ::java_util / "AbstractMap$1";
namespace java::util { class AbstractMap$1$1; }
template<> constexpr auto signature<::java::util::AbstractMap$1$1> = ::java_util / "AbstractMap$1$1";
namespace java::util { class AbstractMap$2; }
template<> constexpr auto signature<::java::util::AbstractMap$2> = ::java_util / "AbstractMap$2";
namespace java::util { class AbstractMap$2$1; }
template<> constexpr auto signature<::java::util::AbstractMap$2$1> = ::java_util / "AbstractMap$2$1";
namespace java::util { class AbstractMap$SimpleEntry; }
template<> constexpr auto signature<::java::util::AbstractMap$SimpleEntry> = ::java_util / "AbstractMap$SimpleEntry";
namespace java::util { class AbstractMap$SimpleImmutableEntry; }
template<> constexpr auto signature<::java::util::AbstractMap$SimpleImmutableEntry> = ::java_util / "AbstractMap$SimpleImmutableEntry";
namespace java::util { class AbstractQueue; }
template<> constexpr auto signature<::java::util::AbstractQueue> = ::java_util / "AbstractQueue";
namespace java::util { class AbstractSequentialList; }
template<> constexpr auto signature<::java::util::AbstractSequentialList> = ::java_util / "AbstractSequentialList";
namespace java::util { class AbstractSet; }
template<> constexpr auto signature<::java::util::AbstractSet> = ::java_util / "AbstractSet";
namespace java::util { class ArrayDeque; }
template<> constexpr auto signature<::java::util::ArrayDeque> = ::java_util / "ArrayDeque";
namespace java::util { class ArrayDeque$1; }
template<> constexpr auto signature<::java::util::ArrayDeque$1> = ::java_util / "ArrayDeque$1";
namespace java::util { class ArrayDeque$DeqIterator; }
template<> constexpr auto signature<::java::util::ArrayDeque$DeqIterator> = ::java_util / "ArrayDeque$DeqIterator";
namespace java::util { class ArrayDeque$DeqSpliterator; }
template<> constexpr auto signature<::java::util::ArrayDeque$DeqSpliterator> = ::java_util / "ArrayDeque$DeqSpliterator";
namespace java::util { class ArrayDeque$DescendingIterator; }
template<> constexpr auto signature<::java::util::ArrayDeque$DescendingIterator> = ::java_util / "ArrayDeque$DescendingIterator";
namespace java::util { class ArrayList; }
template<> constexpr auto signature<::java::util::ArrayList> = ::java_util / "ArrayList";
namespace java::util { class ArrayList$1; }
template<> constexpr auto signature<::java::util::ArrayList$1> = ::java_util / "ArrayList$1";
namespace java::util { class ArrayList$ArrayListSpliterator; }
template<> constexpr auto signature<::java::util::ArrayList$ArrayListSpliterator> = ::java_util / "ArrayList$ArrayListSpliterator";
namespace java::util { class ArrayList$Itr; }
template<> constexpr auto signature<::java::util::ArrayList$Itr> = ::java_util / "ArrayList$Itr";
namespace java::util { class ArrayList$ListItr; }
template<> constexpr auto signature<::java::util::ArrayList$ListItr> = ::java_util / "ArrayList$ListItr";
namespace java::util { class ArrayList$SubList; }
template<> constexpr auto signature<::java::util::ArrayList$SubList> = ::java_util / "ArrayList$SubList";
namespace java::util { class ArrayList$SubList$1; }
template<> constexpr auto signature<::java::util::ArrayList$SubList$1> = ::java_util / "ArrayList$SubList$1";
namespace java::util { class ArrayPrefixHelpers; }
template<> constexpr auto signature<::java::util::ArrayPrefixHelpers> = ::java_util / "ArrayPrefixHelpers";
namespace java::util { class ArrayPrefixHelpers$CumulateTask; }
template<> constexpr auto signature<::java::util::ArrayPrefixHelpers$CumulateTask> = ::java_util / "ArrayPrefixHelpers$CumulateTask";
namespace java::util { class ArrayPrefixHelpers$DoubleCumulateTask; }
template<> constexpr auto signature<::java::util::ArrayPrefixHelpers$DoubleCumulateTask> = ::java_util / "ArrayPrefixHelpers$DoubleCumulateTask";
namespace java::util { class ArrayPrefixHelpers$IntCumulateTask; }
template<> constexpr auto signature<::java::util::ArrayPrefixHelpers$IntCumulateTask> = ::java_util / "ArrayPrefixHelpers$IntCumulateTask";
namespace java::util { class ArrayPrefixHelpers$LongCumulateTask; }
template<> constexpr auto signature<::java::util::ArrayPrefixHelpers$LongCumulateTask> = ::java_util / "ArrayPrefixHelpers$LongCumulateTask";
namespace java::util { class Arrays; }
template<> constexpr auto signature<::java::util::Arrays> = ::java_util / "Arrays";
namespace java::util { class Arrays$ArrayList; }
template<> constexpr auto signature<::java::util::Arrays$ArrayList> = ::java_util / "Arrays$ArrayList";
namespace java::util { class Arrays$LegacyMergeSort; }
template<> constexpr auto signature<::java::util::Arrays$LegacyMergeSort> = ::java_util / "Arrays$LegacyMergeSort";
namespace java::util { class Arrays$NaturalOrder; }
template<> constexpr auto signature<::java::util::Arrays$NaturalOrder> = ::java_util / "Arrays$NaturalOrder";
namespace java::util { class ArraysParallelSortHelpers; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers> = ::java_util / "ArraysParallelSortHelpers";
namespace java::util { class ArraysParallelSortHelpers$EmptyCompleter; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$EmptyCompleter> = ::java_util / "ArraysParallelSortHelpers$EmptyCompleter";
namespace java::util { class ArraysParallelSortHelpers$FJByte; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJByte> = ::java_util / "ArraysParallelSortHelpers$FJByte";
namespace java::util { class ArraysParallelSortHelpers$FJByte$Merger; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJByte$Merger> = ::java_util / "ArraysParallelSortHelpers$FJByte$Merger";
namespace java::util { class ArraysParallelSortHelpers$FJByte$Sorter; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJByte$Sorter> = ::java_util / "ArraysParallelSortHelpers$FJByte$Sorter";
namespace java::util { class ArraysParallelSortHelpers$FJChar; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJChar> = ::java_util / "ArraysParallelSortHelpers$FJChar";
namespace java::util { class ArraysParallelSortHelpers$FJChar$Merger; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJChar$Merger> = ::java_util / "ArraysParallelSortHelpers$FJChar$Merger";
namespace java::util { class ArraysParallelSortHelpers$FJChar$Sorter; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJChar$Sorter> = ::java_util / "ArraysParallelSortHelpers$FJChar$Sorter";
namespace java::util { class ArraysParallelSortHelpers$FJDouble; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJDouble> = ::java_util / "ArraysParallelSortHelpers$FJDouble";
namespace java::util { class ArraysParallelSortHelpers$FJDouble$Merger; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJDouble$Merger> = ::java_util / "ArraysParallelSortHelpers$FJDouble$Merger";
namespace java::util { class ArraysParallelSortHelpers$FJDouble$Sorter; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJDouble$Sorter> = ::java_util / "ArraysParallelSortHelpers$FJDouble$Sorter";
namespace java::util { class ArraysParallelSortHelpers$FJFloat; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJFloat> = ::java_util / "ArraysParallelSortHelpers$FJFloat";
namespace java::util { class ArraysParallelSortHelpers$FJFloat$Merger; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJFloat$Merger> = ::java_util / "ArraysParallelSortHelpers$FJFloat$Merger";
namespace java::util { class ArraysParallelSortHelpers$FJFloat$Sorter; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJFloat$Sorter> = ::java_util / "ArraysParallelSortHelpers$FJFloat$Sorter";
namespace java::util { class ArraysParallelSortHelpers$FJInt; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJInt> = ::java_util / "ArraysParallelSortHelpers$FJInt";
namespace java::util { class ArraysParallelSortHelpers$FJInt$Merger; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJInt$Merger> = ::java_util / "ArraysParallelSortHelpers$FJInt$Merger";
namespace java::util { class ArraysParallelSortHelpers$FJInt$Sorter; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJInt$Sorter> = ::java_util / "ArraysParallelSortHelpers$FJInt$Sorter";
namespace java::util { class ArraysParallelSortHelpers$FJLong; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJLong> = ::java_util / "ArraysParallelSortHelpers$FJLong";
namespace java::util { class ArraysParallelSortHelpers$FJLong$Merger; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJLong$Merger> = ::java_util / "ArraysParallelSortHelpers$FJLong$Merger";
namespace java::util { class ArraysParallelSortHelpers$FJLong$Sorter; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJLong$Sorter> = ::java_util / "ArraysParallelSortHelpers$FJLong$Sorter";
namespace java::util { class ArraysParallelSortHelpers$FJObject; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJObject> = ::java_util / "ArraysParallelSortHelpers$FJObject";
namespace java::util { class ArraysParallelSortHelpers$FJObject$Merger; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJObject$Merger> = ::java_util / "ArraysParallelSortHelpers$FJObject$Merger";
namespace java::util { class ArraysParallelSortHelpers$FJObject$Sorter; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJObject$Sorter> = ::java_util / "ArraysParallelSortHelpers$FJObject$Sorter";
namespace java::util { class ArraysParallelSortHelpers$FJShort; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJShort> = ::java_util / "ArraysParallelSortHelpers$FJShort";
namespace java::util { class ArraysParallelSortHelpers$FJShort$Merger; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJShort$Merger> = ::java_util / "ArraysParallelSortHelpers$FJShort$Merger";
namespace java::util { class ArraysParallelSortHelpers$FJShort$Sorter; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJShort$Sorter> = ::java_util / "ArraysParallelSortHelpers$FJShort$Sorter";
namespace java::util { class ArraysParallelSortHelpers$Relay; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$Relay> = ::java_util / "ArraysParallelSortHelpers$Relay";
namespace java::util { class Base64; }
template<> constexpr auto signature<::java::util::Base64> = ::java_util / "Base64";
namespace java::util { class Base64$1; }
template<> constexpr auto signature<::java::util::Base64$1> = ::java_util / "Base64$1";
namespace java::util { class Base64$DecInputStream; }
template<> constexpr auto signature<::java::util::Base64$DecInputStream> = ::java_util / "Base64$DecInputStream";
namespace java::util { class Base64$Decoder; }
template<> constexpr auto signature<::java::util::Base64$Decoder> = ::java_util / "Base64$Decoder";
namespace java::util { class Base64$EncOutputStream; }
template<> constexpr auto signature<::java::util::Base64$EncOutputStream> = ::java_util / "Base64$EncOutputStream";
namespace java::util { class Base64$Encoder; }
template<> constexpr auto signature<::java::util::Base64$Encoder> = ::java_util / "Base64$Encoder";
namespace java::util { class BitSet; }
template<> constexpr auto signature<::java::util::BitSet> = ::java_util / "BitSet";
namespace java::util { class BitSet$1BitSetIterator; }
template<> constexpr auto signature<::java::util::BitSet$1BitSetIterator> = ::java_util / "BitSet$1BitSetIterator";
namespace java::util { class Calendar; }
template<> constexpr auto signature<::java::util::Calendar> = ::java_util / "Calendar";
namespace java::util { class Calendar$1; }
template<> constexpr auto signature<::java::util::Calendar$1> = ::java_util / "Calendar$1";
namespace java::util { class Calendar$AvailableCalendarTypes; }
template<> constexpr auto signature<::java::util::Calendar$AvailableCalendarTypes> = ::java_util / "Calendar$AvailableCalendarTypes";
namespace java::util { class Calendar$Builder; }
template<> constexpr auto signature<::java::util::Calendar$Builder> = ::java_util / "Calendar$Builder";
namespace java::util { class Calendar$CalendarAccessControlContext; }
template<> constexpr auto signature<::java::util::Calendar$CalendarAccessControlContext> = ::java_util / "Calendar$CalendarAccessControlContext";
namespace java::util { class Collection; }
template<> constexpr auto signature<::java::util::Collection> = ::java_util / "Collection";
namespace java::util { class Collections; }
template<> constexpr auto signature<::java::util::Collections> = ::java_util / "Collections";
namespace java::util { class Collections$1; }
template<> constexpr auto signature<::java::util::Collections$1> = ::java_util / "Collections$1";
namespace java::util { class Collections$2; }
template<> constexpr auto signature<::java::util::Collections$2> = ::java_util / "Collections$2";
namespace java::util { class Collections$3; }
template<> constexpr auto signature<::java::util::Collections$3> = ::java_util / "Collections$3";
namespace java::util { class Collections$AsLIFOQueue; }
template<> constexpr auto signature<::java::util::Collections$AsLIFOQueue> = ::java_util / "Collections$AsLIFOQueue";
namespace java::util { class Collections$CheckedCollection; }
template<> constexpr auto signature<::java::util::Collections$CheckedCollection> = ::java_util / "Collections$CheckedCollection";
namespace java::util { class Collections$CheckedCollection$1; }
template<> constexpr auto signature<::java::util::Collections$CheckedCollection$1> = ::java_util / "Collections$CheckedCollection$1";
namespace java::util { class Collections$CheckedList; }
template<> constexpr auto signature<::java::util::Collections$CheckedList> = ::java_util / "Collections$CheckedList";
namespace java::util { class Collections$CheckedList$1; }
template<> constexpr auto signature<::java::util::Collections$CheckedList$1> = ::java_util / "Collections$CheckedList$1";
namespace java::util { class Collections$CheckedMap; }
template<> constexpr auto signature<::java::util::Collections$CheckedMap> = ::java_util / "Collections$CheckedMap";
namespace java::util { class Collections$CheckedMap$CheckedEntrySet; }
template<> constexpr auto signature<::java::util::Collections$CheckedMap$CheckedEntrySet> = ::java_util / "Collections$CheckedMap$CheckedEntrySet";
namespace java::util { class Collections$CheckedMap$CheckedEntrySet$1; }
template<> constexpr auto signature<::java::util::Collections$CheckedMap$CheckedEntrySet$1> = ::java_util / "Collections$CheckedMap$CheckedEntrySet$1";
namespace java::util { class Collections$CheckedMap$CheckedEntrySet$CheckedEntry; }
template<> constexpr auto signature<::java::util::Collections$CheckedMap$CheckedEntrySet$CheckedEntry> = ::java_util / "Collections$CheckedMap$CheckedEntrySet$CheckedEntry";
namespace java::util { class Collections$CheckedNavigableMap; }
template<> constexpr auto signature<::java::util::Collections$CheckedNavigableMap> = ::java_util / "Collections$CheckedNavigableMap";
namespace java::util { class Collections$CheckedNavigableSet; }
template<> constexpr auto signature<::java::util::Collections$CheckedNavigableSet> = ::java_util / "Collections$CheckedNavigableSet";
namespace java::util { class Collections$CheckedQueue; }
template<> constexpr auto signature<::java::util::Collections$CheckedQueue> = ::java_util / "Collections$CheckedQueue";
namespace java::util { class Collections$CheckedRandomAccessList; }
template<> constexpr auto signature<::java::util::Collections$CheckedRandomAccessList> = ::java_util / "Collections$CheckedRandomAccessList";
namespace java::util { class Collections$CheckedSet; }
template<> constexpr auto signature<::java::util::Collections$CheckedSet> = ::java_util / "Collections$CheckedSet";
namespace java::util { class Collections$CheckedSortedMap; }
template<> constexpr auto signature<::java::util::Collections$CheckedSortedMap> = ::java_util / "Collections$CheckedSortedMap";
namespace java::util { class Collections$CheckedSortedSet; }
template<> constexpr auto signature<::java::util::Collections$CheckedSortedSet> = ::java_util / "Collections$CheckedSortedSet";
namespace java::util { class Collections$CopiesList; }
template<> constexpr auto signature<::java::util::Collections$CopiesList> = ::java_util / "Collections$CopiesList";
namespace java::util { class Collections$EmptyEnumeration; }
template<> constexpr auto signature<::java::util::Collections$EmptyEnumeration> = ::java_util / "Collections$EmptyEnumeration";
namespace java::util { class Collections$EmptyIterator; }
template<> constexpr auto signature<::java::util::Collections$EmptyIterator> = ::java_util / "Collections$EmptyIterator";
namespace java::util { class Collections$EmptyList; }
template<> constexpr auto signature<::java::util::Collections$EmptyList> = ::java_util / "Collections$EmptyList";
namespace java::util { class Collections$EmptyListIterator; }
template<> constexpr auto signature<::java::util::Collections$EmptyListIterator> = ::java_util / "Collections$EmptyListIterator";
namespace java::util { class Collections$EmptyMap; }
template<> constexpr auto signature<::java::util::Collections$EmptyMap> = ::java_util / "Collections$EmptyMap";
namespace java::util { class Collections$EmptySet; }
template<> constexpr auto signature<::java::util::Collections$EmptySet> = ::java_util / "Collections$EmptySet";
namespace java::util { class Collections$ReverseComparator; }
template<> constexpr auto signature<::java::util::Collections$ReverseComparator> = ::java_util / "Collections$ReverseComparator";
namespace java::util { class Collections$ReverseComparator2; }
template<> constexpr auto signature<::java::util::Collections$ReverseComparator2> = ::java_util / "Collections$ReverseComparator2";
namespace java::util { class Collections$SetFromMap; }
template<> constexpr auto signature<::java::util::Collections$SetFromMap> = ::java_util / "Collections$SetFromMap";
namespace java::util { class Collections$SingletonList; }
template<> constexpr auto signature<::java::util::Collections$SingletonList> = ::java_util / "Collections$SingletonList";
namespace java::util { class Collections$SingletonMap; }
template<> constexpr auto signature<::java::util::Collections$SingletonMap> = ::java_util / "Collections$SingletonMap";
namespace java::util { class Collections$SingletonSet; }
template<> constexpr auto signature<::java::util::Collections$SingletonSet> = ::java_util / "Collections$SingletonSet";
namespace java::util { class Collections$SynchronizedCollection; }
template<> constexpr auto signature<::java::util::Collections$SynchronizedCollection> = ::java_util / "Collections$SynchronizedCollection";
namespace java::util { class Collections$SynchronizedList; }
template<> constexpr auto signature<::java::util::Collections$SynchronizedList> = ::java_util / "Collections$SynchronizedList";
namespace java::util { class Collections$SynchronizedMap; }
template<> constexpr auto signature<::java::util::Collections$SynchronizedMap> = ::java_util / "Collections$SynchronizedMap";
namespace java::util { class Collections$SynchronizedNavigableMap; }
template<> constexpr auto signature<::java::util::Collections$SynchronizedNavigableMap> = ::java_util / "Collections$SynchronizedNavigableMap";
namespace java::util { class Collections$SynchronizedNavigableSet; }
template<> constexpr auto signature<::java::util::Collections$SynchronizedNavigableSet> = ::java_util / "Collections$SynchronizedNavigableSet";
namespace java::util { class Collections$SynchronizedRandomAccessList; }
template<> constexpr auto signature<::java::util::Collections$SynchronizedRandomAccessList> = ::java_util / "Collections$SynchronizedRandomAccessList";
namespace java::util { class Collections$SynchronizedSet; }
template<> constexpr auto signature<::java::util::Collections$SynchronizedSet> = ::java_util / "Collections$SynchronizedSet";
namespace java::util { class Collections$SynchronizedSortedMap; }
template<> constexpr auto signature<::java::util::Collections$SynchronizedSortedMap> = ::java_util / "Collections$SynchronizedSortedMap";
namespace java::util { class Collections$SynchronizedSortedSet; }
template<> constexpr auto signature<::java::util::Collections$SynchronizedSortedSet> = ::java_util / "Collections$SynchronizedSortedSet";
namespace java::util { class Collections$UnmodifiableCollection; }
template<> constexpr auto signature<::java::util::Collections$UnmodifiableCollection> = ::java_util / "Collections$UnmodifiableCollection";
namespace java::util { class Collections$UnmodifiableCollection$1; }
template<> constexpr auto signature<::java::util::Collections$UnmodifiableCollection$1> = ::java_util / "Collections$UnmodifiableCollection$1";
namespace java::util { class Collections$UnmodifiableList; }
template<> constexpr auto signature<::java::util::Collections$UnmodifiableList> = ::java_util / "Collections$UnmodifiableList";
namespace java::util { class Collections$UnmodifiableList$1; }
template<> constexpr auto signature<::java::util::Collections$UnmodifiableList$1> = ::java_util / "Collections$UnmodifiableList$1";
namespace java::util { class Collections$UnmodifiableMap; }
template<> constexpr auto signature<::java::util::Collections$UnmodifiableMap> = ::java_util / "Collections$UnmodifiableMap";
namespace java::util { class Collections$UnmodifiableMap$UnmodifiableEntrySet; }
template<> constexpr auto signature<::java::util::Collections$UnmodifiableMap$UnmodifiableEntrySet> = ::java_util / "Collections$UnmodifiableMap$UnmodifiableEntrySet";
namespace java::util { class Collections$UnmodifiableMap$UnmodifiableEntrySet$1; }
template<> constexpr auto signature<::java::util::Collections$UnmodifiableMap$UnmodifiableEntrySet$1> = ::java_util / "Collections$UnmodifiableMap$UnmodifiableEntrySet$1";
namespace java::util { class Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry; }
template<> constexpr auto signature<::java::util::Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry> = ::java_util / "Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry";
namespace java::util { class Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator; }
template<> constexpr auto signature<::java::util::Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator> = ::java_util / "Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator";
namespace java::util { class Collections$UnmodifiableNavigableMap; }
template<> constexpr auto signature<::java::util::Collections$UnmodifiableNavigableMap> = ::java_util / "Collections$UnmodifiableNavigableMap";
namespace java::util { class Collections$UnmodifiableNavigableMap$EmptyNavigableMap; }
template<> constexpr auto signature<::java::util::Collections$UnmodifiableNavigableMap$EmptyNavigableMap> = ::java_util / "Collections$UnmodifiableNavigableMap$EmptyNavigableMap";
namespace java::util { class Collections$UnmodifiableNavigableSet; }
template<> constexpr auto signature<::java::util::Collections$UnmodifiableNavigableSet> = ::java_util / "Collections$UnmodifiableNavigableSet";
namespace java::util { class Collections$UnmodifiableNavigableSet$EmptyNavigableSet; }
template<> constexpr auto signature<::java::util::Collections$UnmodifiableNavigableSet$EmptyNavigableSet> = ::java_util / "Collections$UnmodifiableNavigableSet$EmptyNavigableSet";
namespace java::util { class Collections$UnmodifiableRandomAccessList; }
template<> constexpr auto signature<::java::util::Collections$UnmodifiableRandomAccessList> = ::java_util / "Collections$UnmodifiableRandomAccessList";
namespace java::util { class Collections$UnmodifiableSet; }
template<> constexpr auto signature<::java::util::Collections$UnmodifiableSet> = ::java_util / "Collections$UnmodifiableSet";
namespace java::util { class Collections$UnmodifiableSortedMap; }
template<> constexpr auto signature<::java::util::Collections$UnmodifiableSortedMap> = ::java_util / "Collections$UnmodifiableSortedMap";
namespace java::util { class Collections$UnmodifiableSortedSet; }
template<> constexpr auto signature<::java::util::Collections$UnmodifiableSortedSet> = ::java_util / "Collections$UnmodifiableSortedSet";
namespace java::util { class ComparableTimSort; }
template<> constexpr auto signature<::java::util::ComparableTimSort> = ::java_util / "ComparableTimSort";
namespace java::util { class Comparator; }
template<> constexpr auto signature<::java::util::Comparator> = ::java_util / "Comparator";
namespace java::util { class Comparators; }
template<> constexpr auto signature<::java::util::Comparators> = ::java_util / "Comparators";
namespace java::util { class Comparators$NaturalOrderComparator; }
template<> constexpr auto signature<::java::util::Comparators$NaturalOrderComparator> = ::java_util / "Comparators$NaturalOrderComparator";
namespace java::util { class Comparators$NullComparator; }
template<> constexpr auto signature<::java::util::Comparators$NullComparator> = ::java_util / "Comparators$NullComparator";
namespace java::util { class ConcurrentModificationException; }
template<> constexpr auto signature<::java::util::ConcurrentModificationException> = ::java_util / "ConcurrentModificationException";
namespace java::util { class Currency; }
template<> constexpr auto signature<::java::util::Currency> = ::java_util / "Currency";
namespace java::util { class Currency$1; }
template<> constexpr auto signature<::java::util::Currency$1> = ::java_util / "Currency$1";
namespace java::util { class Currency$CurrencyNameGetter; }
template<> constexpr auto signature<::java::util::Currency$CurrencyNameGetter> = ::java_util / "Currency$CurrencyNameGetter";
namespace java::util { class Date; }
template<> constexpr auto signature<::java::util::Date> = ::java_util / "Date";
namespace java::util { class Deque; }
template<> constexpr auto signature<::java::util::Deque> = ::java_util / "Deque";
namespace java::util { class Dictionary; }
template<> constexpr auto signature<::java::util::Dictionary> = ::java_util / "Dictionary";
namespace java::util { class DoubleSummaryStatistics; }
template<> constexpr auto signature<::java::util::DoubleSummaryStatistics> = ::java_util / "DoubleSummaryStatistics";
namespace java::util { class DualPivotQuicksort; }
template<> constexpr auto signature<::java::util::DualPivotQuicksort> = ::java_util / "DualPivotQuicksort";
namespace java::util { class DuplicateFormatFlagsException; }
template<> constexpr auto signature<::java::util::DuplicateFormatFlagsException> = ::java_util / "DuplicateFormatFlagsException";
namespace java::util { class EmptyStackException; }
template<> constexpr auto signature<::java::util::EmptyStackException> = ::java_util / "EmptyStackException";
namespace java::util { class EnumMap; }
template<> constexpr auto signature<::java::util::EnumMap> = ::java_util / "EnumMap";
namespace java::util { class EnumMap$1; }
template<> constexpr auto signature<::java::util::EnumMap$1> = ::java_util / "EnumMap$1";
namespace java::util { class EnumMap$EntryIterator; }
template<> constexpr auto signature<::java::util::EnumMap$EntryIterator> = ::java_util / "EnumMap$EntryIterator";
namespace java::util { class EnumMap$EntryIterator$Entry; }
template<> constexpr auto signature<::java::util::EnumMap$EntryIterator$Entry> = ::java_util / "EnumMap$EntryIterator$Entry";
namespace java::util { class EnumMap$EntrySet; }
template<> constexpr auto signature<::java::util::EnumMap$EntrySet> = ::java_util / "EnumMap$EntrySet";
namespace java::util { class EnumMap$EnumMapIterator; }
template<> constexpr auto signature<::java::util::EnumMap$EnumMapIterator> = ::java_util / "EnumMap$EnumMapIterator";
namespace java::util { class EnumMap$KeyIterator; }
template<> constexpr auto signature<::java::util::EnumMap$KeyIterator> = ::java_util / "EnumMap$KeyIterator";
namespace java::util { class EnumMap$KeySet; }
template<> constexpr auto signature<::java::util::EnumMap$KeySet> = ::java_util / "EnumMap$KeySet";
namespace java::util { class EnumMap$ValueIterator; }
template<> constexpr auto signature<::java::util::EnumMap$ValueIterator> = ::java_util / "EnumMap$ValueIterator";
namespace java::util { class EnumMap$Values; }
template<> constexpr auto signature<::java::util::EnumMap$Values> = ::java_util / "EnumMap$Values";
namespace java::util { class EnumSet; }
template<> constexpr auto signature<::java::util::EnumSet> = ::java_util / "EnumSet";
namespace java::util { class EnumSet$SerializationProxy; }
template<> constexpr auto signature<::java::util::EnumSet$SerializationProxy> = ::java_util / "EnumSet$SerializationProxy";
namespace java::util { class Enumeration; }
template<> constexpr auto signature<::java::util::Enumeration> = ::java_util / "Enumeration";
namespace java::util { class EventListener; }
template<> constexpr auto signature<::java::util::EventListener> = ::java_util / "EventListener";
namespace java::util { class EventListenerProxy; }
template<> constexpr auto signature<::java::util::EventListenerProxy> = ::java_util / "EventListenerProxy";
namespace java::util { class EventObject; }
template<> constexpr auto signature<::java::util::EventObject> = ::java_util / "EventObject";
namespace java::util { class FormatFlagsConversionMismatchException; }
template<> constexpr auto signature<::java::util::FormatFlagsConversionMismatchException> = ::java_util / "FormatFlagsConversionMismatchException";
namespace java::util { class Formattable; }
template<> constexpr auto signature<::java::util::Formattable> = ::java_util / "Formattable";
namespace java::util { class FormattableFlags; }
template<> constexpr auto signature<::java::util::FormattableFlags> = ::java_util / "FormattableFlags";
namespace java::util { class Formatter; }
template<> constexpr auto signature<::java::util::Formatter> = ::java_util / "Formatter";
namespace java::util { class Formatter$BigDecimalLayoutForm; }
template<> constexpr auto signature<::java::util::Formatter$BigDecimalLayoutForm> = ::java_util / "Formatter$BigDecimalLayoutForm";
namespace java::util { class Formatter$Conversion; }
template<> constexpr auto signature<::java::util::Formatter$Conversion> = ::java_util / "Formatter$Conversion";
namespace java::util { class Formatter$DateTime; }
template<> constexpr auto signature<::java::util::Formatter$DateTime> = ::java_util / "Formatter$DateTime";
namespace java::util { class Formatter$FixedString; }
template<> constexpr auto signature<::java::util::Formatter$FixedString> = ::java_util / "Formatter$FixedString";
namespace java::util { class Formatter$Flags; }
template<> constexpr auto signature<::java::util::Formatter$Flags> = ::java_util / "Formatter$Flags";
namespace java::util { class Formatter$FormatSpecifier; }
template<> constexpr auto signature<::java::util::Formatter$FormatSpecifier> = ::java_util / "Formatter$FormatSpecifier";
namespace java::util { class Formatter$FormatSpecifier$BigDecimalLayout; }
template<> constexpr auto signature<::java::util::Formatter$FormatSpecifier$BigDecimalLayout> = ::java_util / "Formatter$FormatSpecifier$BigDecimalLayout";
namespace java::util { class Formatter$FormatString; }
template<> constexpr auto signature<::java::util::Formatter$FormatString> = ::java_util / "Formatter$FormatString";
namespace java::util { class FormatterClosedException; }
template<> constexpr auto signature<::java::util::FormatterClosedException> = ::java_util / "FormatterClosedException";
namespace java::util { class GregorianCalendar; }
template<> constexpr auto signature<::java::util::GregorianCalendar> = ::java_util / "GregorianCalendar";
namespace java::util { class HashMap; }
template<> constexpr auto signature<::java::util::HashMap> = ::java_util / "HashMap";
namespace java::util { class HashMap$EntryIterator; }
template<> constexpr auto signature<::java::util::HashMap$EntryIterator> = ::java_util / "HashMap$EntryIterator";
namespace java::util { class HashMap$EntrySet; }
template<> constexpr auto signature<::java::util::HashMap$EntrySet> = ::java_util / "HashMap$EntrySet";
namespace java::util { class HashMap$EntrySpliterator; }
template<> constexpr auto signature<::java::util::HashMap$EntrySpliterator> = ::java_util / "HashMap$EntrySpliterator";
namespace java::util { class HashMap$HashIterator; }
template<> constexpr auto signature<::java::util::HashMap$HashIterator> = ::java_util / "HashMap$HashIterator";
namespace java::util { class HashMap$HashMapSpliterator; }
template<> constexpr auto signature<::java::util::HashMap$HashMapSpliterator> = ::java_util / "HashMap$HashMapSpliterator";
namespace java::util { class HashMap$KeyIterator; }
template<> constexpr auto signature<::java::util::HashMap$KeyIterator> = ::java_util / "HashMap$KeyIterator";
namespace java::util { class HashMap$KeySet; }
template<> constexpr auto signature<::java::util::HashMap$KeySet> = ::java_util / "HashMap$KeySet";
namespace java::util { class HashMap$KeySpliterator; }
template<> constexpr auto signature<::java::util::HashMap$KeySpliterator> = ::java_util / "HashMap$KeySpliterator";
namespace java::util { class HashMap$Node; }
template<> constexpr auto signature<::java::util::HashMap$Node> = ::java_util / "HashMap$Node";
namespace java::util { class HashMap$TreeNode; }
template<> constexpr auto signature<::java::util::HashMap$TreeNode> = ::java_util / "HashMap$TreeNode";
namespace java::util { class HashMap$ValueIterator; }
template<> constexpr auto signature<::java::util::HashMap$ValueIterator> = ::java_util / "HashMap$ValueIterator";
namespace java::util { class HashMap$ValueSpliterator; }
template<> constexpr auto signature<::java::util::HashMap$ValueSpliterator> = ::java_util / "HashMap$ValueSpliterator";
namespace java::util { class HashMap$Values; }
template<> constexpr auto signature<::java::util::HashMap$Values> = ::java_util / "HashMap$Values";
namespace java::util { class HashSet; }
template<> constexpr auto signature<::java::util::HashSet> = ::java_util / "HashSet";
namespace java::util { class Hashtable; }
template<> constexpr auto signature<::java::util::Hashtable> = ::java_util / "Hashtable";
namespace java::util { class Hashtable$1; }
template<> constexpr auto signature<::java::util::Hashtable$1> = ::java_util / "Hashtable$1";
namespace java::util { class Hashtable$Entry; }
template<> constexpr auto signature<::java::util::Hashtable$Entry> = ::java_util / "Hashtable$Entry";
namespace java::util { class Hashtable$EntrySet; }
template<> constexpr auto signature<::java::util::Hashtable$EntrySet> = ::java_util / "Hashtable$EntrySet";
namespace java::util { class Hashtable$Enumerator; }
template<> constexpr auto signature<::java::util::Hashtable$Enumerator> = ::java_util / "Hashtable$Enumerator";
namespace java::util { class Hashtable$KeySet; }
template<> constexpr auto signature<::java::util::Hashtable$KeySet> = ::java_util / "Hashtable$KeySet";
namespace java::util { class Hashtable$ValueCollection; }
template<> constexpr auto signature<::java::util::Hashtable$ValueCollection> = ::java_util / "Hashtable$ValueCollection";
namespace java::util { class IdentityHashMap; }
template<> constexpr auto signature<::java::util::IdentityHashMap> = ::java_util / "IdentityHashMap";
namespace java::util { class IdentityHashMap$1; }
template<> constexpr auto signature<::java::util::IdentityHashMap$1> = ::java_util / "IdentityHashMap$1";
namespace java::util { class IdentityHashMap$EntryIterator; }
template<> constexpr auto signature<::java::util::IdentityHashMap$EntryIterator> = ::java_util / "IdentityHashMap$EntryIterator";
namespace java::util { class IdentityHashMap$EntryIterator$Entry; }
template<> constexpr auto signature<::java::util::IdentityHashMap$EntryIterator$Entry> = ::java_util / "IdentityHashMap$EntryIterator$Entry";
namespace java::util { class IdentityHashMap$EntrySet; }
template<> constexpr auto signature<::java::util::IdentityHashMap$EntrySet> = ::java_util / "IdentityHashMap$EntrySet";
namespace java::util { class IdentityHashMap$EntrySpliterator; }
template<> constexpr auto signature<::java::util::IdentityHashMap$EntrySpliterator> = ::java_util / "IdentityHashMap$EntrySpliterator";
namespace java::util { class IdentityHashMap$IdentityHashMapIterator; }
template<> constexpr auto signature<::java::util::IdentityHashMap$IdentityHashMapIterator> = ::java_util / "IdentityHashMap$IdentityHashMapIterator";
namespace java::util { class IdentityHashMap$IdentityHashMapSpliterator; }
template<> constexpr auto signature<::java::util::IdentityHashMap$IdentityHashMapSpliterator> = ::java_util / "IdentityHashMap$IdentityHashMapSpliterator";
namespace java::util { class IdentityHashMap$KeyIterator; }
template<> constexpr auto signature<::java::util::IdentityHashMap$KeyIterator> = ::java_util / "IdentityHashMap$KeyIterator";
namespace java::util { class IdentityHashMap$KeySet; }
template<> constexpr auto signature<::java::util::IdentityHashMap$KeySet> = ::java_util / "IdentityHashMap$KeySet";
namespace java::util { class IdentityHashMap$KeySpliterator; }
template<> constexpr auto signature<::java::util::IdentityHashMap$KeySpliterator> = ::java_util / "IdentityHashMap$KeySpliterator";
namespace java::util { class IdentityHashMap$ValueIterator; }
template<> constexpr auto signature<::java::util::IdentityHashMap$ValueIterator> = ::java_util / "IdentityHashMap$ValueIterator";
namespace java::util { class IdentityHashMap$ValueSpliterator; }
template<> constexpr auto signature<::java::util::IdentityHashMap$ValueSpliterator> = ::java_util / "IdentityHashMap$ValueSpliterator";
namespace java::util { class IdentityHashMap$Values; }
template<> constexpr auto signature<::java::util::IdentityHashMap$Values> = ::java_util / "IdentityHashMap$Values";
namespace java::util { class IllegalFormatCodePointException; }
template<> constexpr auto signature<::java::util::IllegalFormatCodePointException> = ::java_util / "IllegalFormatCodePointException";
namespace java::util { class IllegalFormatConversionException; }
template<> constexpr auto signature<::java::util::IllegalFormatConversionException> = ::java_util / "IllegalFormatConversionException";
namespace java::util { class IllegalFormatException; }
template<> constexpr auto signature<::java::util::IllegalFormatException> = ::java_util / "IllegalFormatException";
namespace java::util { class IllegalFormatFlagsException; }
template<> constexpr auto signature<::java::util::IllegalFormatFlagsException> = ::java_util / "IllegalFormatFlagsException";
namespace java::util { class IllegalFormatPrecisionException; }
template<> constexpr auto signature<::java::util::IllegalFormatPrecisionException> = ::java_util / "IllegalFormatPrecisionException";
namespace java::util { class IllegalFormatWidthException; }
template<> constexpr auto signature<::java::util::IllegalFormatWidthException> = ::java_util / "IllegalFormatWidthException";
namespace java::util { class IllformedLocaleException; }
template<> constexpr auto signature<::java::util::IllformedLocaleException> = ::java_util / "IllformedLocaleException";
namespace java::util { class InputMismatchException; }
template<> constexpr auto signature<::java::util::InputMismatchException> = ::java_util / "InputMismatchException";
namespace java::util { class IntSummaryStatistics; }
template<> constexpr auto signature<::java::util::IntSummaryStatistics> = ::java_util / "IntSummaryStatistics";
namespace java::util { class InvalidPropertiesFormatException; }
template<> constexpr auto signature<::java::util::InvalidPropertiesFormatException> = ::java_util / "InvalidPropertiesFormatException";
namespace java::util { class Iterator; }
template<> constexpr auto signature<::java::util::Iterator> = ::java_util / "Iterator";
namespace java::util { class JapaneseImperialCalendar; }
template<> constexpr auto signature<::java::util::JapaneseImperialCalendar> = ::java_util / "JapaneseImperialCalendar";
namespace java::util { class JumboEnumSet; }
template<> constexpr auto signature<::java::util::JumboEnumSet> = ::java_util / "JumboEnumSet";
namespace java::util { class JumboEnumSet$EnumSetIterator; }
template<> constexpr auto signature<::java::util::JumboEnumSet$EnumSetIterator> = ::java_util / "JumboEnumSet$EnumSetIterator";
namespace java::util { class LinkedHashMap; }
template<> constexpr auto signature<::java::util::LinkedHashMap> = ::java_util / "LinkedHashMap";
namespace java::util { class LinkedHashMap$Entry; }
template<> constexpr auto signature<::java::util::LinkedHashMap$Entry> = ::java_util / "LinkedHashMap$Entry";
namespace java::util { class LinkedHashMap$LinkedEntryIterator; }
template<> constexpr auto signature<::java::util::LinkedHashMap$LinkedEntryIterator> = ::java_util / "LinkedHashMap$LinkedEntryIterator";
namespace java::util { class LinkedHashMap$LinkedEntrySet; }
template<> constexpr auto signature<::java::util::LinkedHashMap$LinkedEntrySet> = ::java_util / "LinkedHashMap$LinkedEntrySet";
namespace java::util { class LinkedHashMap$LinkedHashIterator; }
template<> constexpr auto signature<::java::util::LinkedHashMap$LinkedHashIterator> = ::java_util / "LinkedHashMap$LinkedHashIterator";
namespace java::util { class LinkedHashMap$LinkedKeyIterator; }
template<> constexpr auto signature<::java::util::LinkedHashMap$LinkedKeyIterator> = ::java_util / "LinkedHashMap$LinkedKeyIterator";
namespace java::util { class LinkedHashMap$LinkedKeySet; }
template<> constexpr auto signature<::java::util::LinkedHashMap$LinkedKeySet> = ::java_util / "LinkedHashMap$LinkedKeySet";
namespace java::util { class LinkedHashMap$LinkedValueIterator; }
template<> constexpr auto signature<::java::util::LinkedHashMap$LinkedValueIterator> = ::java_util / "LinkedHashMap$LinkedValueIterator";
namespace java::util { class LinkedHashMap$LinkedValues; }
template<> constexpr auto signature<::java::util::LinkedHashMap$LinkedValues> = ::java_util / "LinkedHashMap$LinkedValues";
namespace java::util { class LinkedHashSet; }
template<> constexpr auto signature<::java::util::LinkedHashSet> = ::java_util / "LinkedHashSet";
namespace java::util { class LinkedList; }
template<> constexpr auto signature<::java::util::LinkedList> = ::java_util / "LinkedList";
namespace java::util { class LinkedList$1; }
template<> constexpr auto signature<::java::util::LinkedList$1> = ::java_util / "LinkedList$1";
namespace java::util { class LinkedList$DescendingIterator; }
template<> constexpr auto signature<::java::util::LinkedList$DescendingIterator> = ::java_util / "LinkedList$DescendingIterator";
namespace java::util { class LinkedList$LLSpliterator; }
template<> constexpr auto signature<::java::util::LinkedList$LLSpliterator> = ::java_util / "LinkedList$LLSpliterator";
namespace java::util { class LinkedList$ListItr; }
template<> constexpr auto signature<::java::util::LinkedList$ListItr> = ::java_util / "LinkedList$ListItr";
namespace java::util { class LinkedList$Node; }
template<> constexpr auto signature<::java::util::LinkedList$Node> = ::java_util / "LinkedList$Node";
namespace java::util { class List; }
template<> constexpr auto signature<::java::util::List> = ::java_util / "List";
namespace java::util { class ListIterator; }
template<> constexpr auto signature<::java::util::ListIterator> = ::java_util / "ListIterator";
namespace java::util { class ListResourceBundle; }
template<> constexpr auto signature<::java::util::ListResourceBundle> = ::java_util / "ListResourceBundle";
namespace java::util { class Locale; }
template<> constexpr auto signature<::java::util::Locale> = ::java_util / "Locale";
namespace java::util { class Locale$1; }
template<> constexpr auto signature<::java::util::Locale$1> = ::java_util / "Locale$1";
namespace java::util { class Locale$Builder; }
template<> constexpr auto signature<::java::util::Locale$Builder> = ::java_util / "Locale$Builder";
namespace java::util { class Locale$Cache; }
template<> constexpr auto signature<::java::util::Locale$Cache> = ::java_util / "Locale$Cache";
namespace java::util { class Locale$Category; }
template<> constexpr auto signature<::java::util::Locale$Category> = ::java_util / "Locale$Category";
namespace java::util { class Locale$FilteringMode; }
template<> constexpr auto signature<::java::util::Locale$FilteringMode> = ::java_util / "Locale$FilteringMode";
namespace java::util { class Locale$LanguageRange; }
template<> constexpr auto signature<::java::util::Locale$LanguageRange> = ::java_util / "Locale$LanguageRange";
namespace java::util { class Locale$LocaleKey; }
template<> constexpr auto signature<::java::util::Locale$LocaleKey> = ::java_util / "Locale$LocaleKey";
namespace java::util { class Locale$LocaleNameGetter; }
template<> constexpr auto signature<::java::util::Locale$LocaleNameGetter> = ::java_util / "Locale$LocaleNameGetter";
namespace java::util { class LocaleISOData; }
template<> constexpr auto signature<::java::util::LocaleISOData> = ::java_util / "LocaleISOData";
namespace java::util { class LongSummaryStatistics; }
template<> constexpr auto signature<::java::util::LongSummaryStatistics> = ::java_util / "LongSummaryStatistics";
namespace java::util { class Map; }
template<> constexpr auto signature<::java::util::Map> = ::java_util / "Map";
namespace java::util { class Map$Entry; }
template<> constexpr auto signature<::java::util::Map$Entry> = ::java_util / "Map$Entry";
namespace java::util { class MissingFormatArgumentException; }
template<> constexpr auto signature<::java::util::MissingFormatArgumentException> = ::java_util / "MissingFormatArgumentException";
namespace java::util { class MissingFormatWidthException; }
template<> constexpr auto signature<::java::util::MissingFormatWidthException> = ::java_util / "MissingFormatWidthException";
namespace java::util { class MissingResourceException; }
template<> constexpr auto signature<::java::util::MissingResourceException> = ::java_util / "MissingResourceException";
namespace java::util { class NavigableMap; }
template<> constexpr auto signature<::java::util::NavigableMap> = ::java_util / "NavigableMap";
namespace java::util { class NavigableSet; }
template<> constexpr auto signature<::java::util::NavigableSet> = ::java_util / "NavigableSet";
namespace java::util { class NoSuchElementException; }
template<> constexpr auto signature<::java::util::NoSuchElementException> = ::java_util / "NoSuchElementException";
namespace java::util { class Objects; }
template<> constexpr auto signature<::java::util::Objects> = ::java_util / "Objects";
namespace java::util { class Observable; }
template<> constexpr auto signature<::java::util::Observable> = ::java_util / "Observable";
namespace java::util { class Observer; }
template<> constexpr auto signature<::java::util::Observer> = ::java_util / "Observer";
namespace java::util { class Optional; }
template<> constexpr auto signature<::java::util::Optional> = ::java_util / "Optional";
namespace java::util { class OptionalDouble; }
template<> constexpr auto signature<::java::util::OptionalDouble> = ::java_util / "OptionalDouble";
namespace java::util { class OptionalInt; }
template<> constexpr auto signature<::java::util::OptionalInt> = ::java_util / "OptionalInt";
namespace java::util { class OptionalLong; }
template<> constexpr auto signature<::java::util::OptionalLong> = ::java_util / "OptionalLong";
namespace java::util { class PrimitiveIterator; }
template<> constexpr auto signature<::java::util::PrimitiveIterator> = ::java_util / "PrimitiveIterator";
namespace java::util { class PrimitiveIterator$OfDouble; }
template<> constexpr auto signature<::java::util::PrimitiveIterator$OfDouble> = ::java_util / "PrimitiveIterator$OfDouble";
namespace java::util { class PrimitiveIterator$OfInt; }
template<> constexpr auto signature<::java::util::PrimitiveIterator$OfInt> = ::java_util / "PrimitiveIterator$OfInt";
namespace java::util { class PrimitiveIterator$OfLong; }
template<> constexpr auto signature<::java::util::PrimitiveIterator$OfLong> = ::java_util / "PrimitiveIterator$OfLong";
namespace java::util { class PriorityQueue; }
template<> constexpr auto signature<::java::util::PriorityQueue> = ::java_util / "PriorityQueue";
namespace java::util { class PriorityQueue$1; }
template<> constexpr auto signature<::java::util::PriorityQueue$1> = ::java_util / "PriorityQueue$1";
namespace java::util { class PriorityQueue$Itr; }
template<> constexpr auto signature<::java::util::PriorityQueue$Itr> = ::java_util / "PriorityQueue$Itr";
namespace java::util { class PriorityQueue$PriorityQueueSpliterator; }
template<> constexpr auto signature<::java::util::PriorityQueue$PriorityQueueSpliterator> = ::java_util / "PriorityQueue$PriorityQueueSpliterator";
namespace java::util { class Properties; }
template<> constexpr auto signature<::java::util::Properties> = ::java_util / "Properties";
namespace java::util { class Properties$LineReader; }
template<> constexpr auto signature<::java::util::Properties$LineReader> = ::java_util / "Properties$LineReader";
namespace java::util { class Properties$XmlSupport; }
template<> constexpr auto signature<::java::util::Properties$XmlSupport> = ::java_util / "Properties$XmlSupport";
namespace java::util { class Properties$XmlSupport$1; }
template<> constexpr auto signature<::java::util::Properties$XmlSupport$1> = ::java_util / "Properties$XmlSupport$1";
namespace java::util { class PropertyPermission; }
template<> constexpr auto signature<::java::util::PropertyPermission> = ::java_util / "PropertyPermission";
namespace java::util { class PropertyPermissionCollection; }
template<> constexpr auto signature<::java::util::PropertyPermissionCollection> = ::java_util / "PropertyPermissionCollection";
namespace java::util { class PropertyResourceBundle; }
template<> constexpr auto signature<::java::util::PropertyResourceBundle> = ::java_util / "PropertyResourceBundle";
namespace java::util { class Queue; }
template<> constexpr auto signature<::java::util::Queue> = ::java_util / "Queue";
namespace java::util { class Random; }
template<> constexpr auto signature<::java::util::Random> = ::java_util / "Random";
namespace java::util { class Random$RandomDoublesSpliterator; }
template<> constexpr auto signature<::java::util::Random$RandomDoublesSpliterator> = ::java_util / "Random$RandomDoublesSpliterator";
namespace java::util { class Random$RandomIntsSpliterator; }
template<> constexpr auto signature<::java::util::Random$RandomIntsSpliterator> = ::java_util / "Random$RandomIntsSpliterator";
namespace java::util { class Random$RandomLongsSpliterator; }
template<> constexpr auto signature<::java::util::Random$RandomLongsSpliterator> = ::java_util / "Random$RandomLongsSpliterator";
namespace java::util { class RandomAccess; }
template<> constexpr auto signature<::java::util::RandomAccess> = ::java_util / "RandomAccess";
namespace java::util { class RandomAccessSubList; }
template<> constexpr auto signature<::java::util::RandomAccessSubList> = ::java_util / "RandomAccessSubList";
namespace java::util { class RegularEnumSet; }
template<> constexpr auto signature<::java::util::RegularEnumSet> = ::java_util / "RegularEnumSet";
namespace java::util { class RegularEnumSet$EnumSetIterator; }
template<> constexpr auto signature<::java::util::RegularEnumSet$EnumSetIterator> = ::java_util / "RegularEnumSet$EnumSetIterator";
namespace java::util { class ResourceBundle; }
template<> constexpr auto signature<::java::util::ResourceBundle> = ::java_util / "ResourceBundle";
namespace java::util { class ResourceBundle$1; }
template<> constexpr auto signature<::java::util::ResourceBundle$1> = ::java_util / "ResourceBundle$1";
namespace java::util { class ResourceBundle$BundleReference; }
template<> constexpr auto signature<::java::util::ResourceBundle$BundleReference> = ::java_util / "ResourceBundle$BundleReference";
namespace java::util { class ResourceBundle$CacheKey; }
template<> constexpr auto signature<::java::util::ResourceBundle$CacheKey> = ::java_util / "ResourceBundle$CacheKey";
namespace java::util { class ResourceBundle$CacheKeyReference; }
template<> constexpr auto signature<::java::util::ResourceBundle$CacheKeyReference> = ::java_util / "ResourceBundle$CacheKeyReference";
namespace java::util { class ResourceBundle$Control; }
template<> constexpr auto signature<::java::util::ResourceBundle$Control> = ::java_util / "ResourceBundle$Control";
namespace java::util { class ResourceBundle$Control$1; }
template<> constexpr auto signature<::java::util::ResourceBundle$Control$1> = ::java_util / "ResourceBundle$Control$1";
namespace java::util { class ResourceBundle$Control$CandidateListCache; }
template<> constexpr auto signature<::java::util::ResourceBundle$Control$CandidateListCache> = ::java_util / "ResourceBundle$Control$CandidateListCache";
namespace java::util { class ResourceBundle$LoaderReference; }
template<> constexpr auto signature<::java::util::ResourceBundle$LoaderReference> = ::java_util / "ResourceBundle$LoaderReference";
namespace java::util { class ResourceBundle$NoFallbackControl; }
template<> constexpr auto signature<::java::util::ResourceBundle$NoFallbackControl> = ::java_util / "ResourceBundle$NoFallbackControl";
namespace java::util { class ResourceBundle$RBClassLoader; }
template<> constexpr auto signature<::java::util::ResourceBundle$RBClassLoader> = ::java_util / "ResourceBundle$RBClassLoader";
namespace java::util { class ResourceBundle$RBClassLoader$1; }
template<> constexpr auto signature<::java::util::ResourceBundle$RBClassLoader$1> = ::java_util / "ResourceBundle$RBClassLoader$1";
namespace java::util { class ResourceBundle$SingleFormatControl; }
template<> constexpr auto signature<::java::util::ResourceBundle$SingleFormatControl> = ::java_util / "ResourceBundle$SingleFormatControl";
namespace java::util { class Scanner; }
template<> constexpr auto signature<::java::util::Scanner> = ::java_util / "Scanner";
namespace java::util { class Scanner$1; }
template<> constexpr auto signature<::java::util::Scanner$1> = ::java_util / "Scanner$1";
namespace java::util { class ServiceConfigurationError; }
template<> constexpr auto signature<::java::util::ServiceConfigurationError> = ::java_util / "ServiceConfigurationError";
namespace java::util { class ServiceLoader; }
template<> constexpr auto signature<::java::util::ServiceLoader> = ::java_util / "ServiceLoader";
namespace java::util { class ServiceLoader$1; }
template<> constexpr auto signature<::java::util::ServiceLoader$1> = ::java_util / "ServiceLoader$1";
namespace java::util { class ServiceLoader$LazyIterator; }
template<> constexpr auto signature<::java::util::ServiceLoader$LazyIterator> = ::java_util / "ServiceLoader$LazyIterator";
namespace java::util { class ServiceLoader$LazyIterator$1; }
template<> constexpr auto signature<::java::util::ServiceLoader$LazyIterator$1> = ::java_util / "ServiceLoader$LazyIterator$1";
namespace java::util { class ServiceLoader$LazyIterator$2; }
template<> constexpr auto signature<::java::util::ServiceLoader$LazyIterator$2> = ::java_util / "ServiceLoader$LazyIterator$2";
namespace java::util { class Set; }
template<> constexpr auto signature<::java::util::Set> = ::java_util / "Set";
namespace java::util { class SimpleTimeZone; }
template<> constexpr auto signature<::java::util::SimpleTimeZone> = ::java_util / "SimpleTimeZone";
namespace java::util { class SortedMap; }
template<> constexpr auto signature<::java::util::SortedMap> = ::java_util / "SortedMap";
namespace java::util { class SortedSet; }
template<> constexpr auto signature<::java::util::SortedSet> = ::java_util / "SortedSet";
namespace java::util { class SortedSet$1; }
template<> constexpr auto signature<::java::util::SortedSet$1> = ::java_util / "SortedSet$1";
namespace java::util { class Spliterator; }
template<> constexpr auto signature<::java::util::Spliterator> = ::java_util / "Spliterator";
namespace java::util { class Spliterator$OfDouble; }
template<> constexpr auto signature<::java::util::Spliterator$OfDouble> = ::java_util / "Spliterator$OfDouble";
namespace java::util { class Spliterator$OfInt; }
template<> constexpr auto signature<::java::util::Spliterator$OfInt> = ::java_util / "Spliterator$OfInt";
namespace java::util { class Spliterator$OfLong; }
template<> constexpr auto signature<::java::util::Spliterator$OfLong> = ::java_util / "Spliterator$OfLong";
namespace java::util { class Spliterator$OfPrimitive; }
template<> constexpr auto signature<::java::util::Spliterator$OfPrimitive> = ::java_util / "Spliterator$OfPrimitive";
namespace java::util { class Spliterators; }
template<> constexpr auto signature<::java::util::Spliterators> = ::java_util / "Spliterators";
namespace java::util { class Spliterators$1Adapter; }
template<> constexpr auto signature<::java::util::Spliterators$1Adapter> = ::java_util / "Spliterators$1Adapter";
namespace java::util { class Spliterators$2Adapter; }
template<> constexpr auto signature<::java::util::Spliterators$2Adapter> = ::java_util / "Spliterators$2Adapter";
namespace java::util { class Spliterators$3Adapter; }
template<> constexpr auto signature<::java::util::Spliterators$3Adapter> = ::java_util / "Spliterators$3Adapter";
namespace java::util { class Spliterators$4Adapter; }
template<> constexpr auto signature<::java::util::Spliterators$4Adapter> = ::java_util / "Spliterators$4Adapter";
namespace java::util { class Spliterators$AbstractDoubleSpliterator; }
template<> constexpr auto signature<::java::util::Spliterators$AbstractDoubleSpliterator> = ::java_util / "Spliterators$AbstractDoubleSpliterator";
namespace java::util { class Spliterators$AbstractDoubleSpliterator$HoldingDoubleConsumer; }
template<> constexpr auto signature<::java::util::Spliterators$AbstractDoubleSpliterator$HoldingDoubleConsumer> = ::java_util / "Spliterators$AbstractDoubleSpliterator$HoldingDoubleConsumer";
namespace java::util { class Spliterators$AbstractIntSpliterator; }
template<> constexpr auto signature<::java::util::Spliterators$AbstractIntSpliterator> = ::java_util / "Spliterators$AbstractIntSpliterator";
namespace java::util { class Spliterators$AbstractIntSpliterator$HoldingIntConsumer; }
template<> constexpr auto signature<::java::util::Spliterators$AbstractIntSpliterator$HoldingIntConsumer> = ::java_util / "Spliterators$AbstractIntSpliterator$HoldingIntConsumer";
namespace java::util { class Spliterators$AbstractLongSpliterator; }
template<> constexpr auto signature<::java::util::Spliterators$AbstractLongSpliterator> = ::java_util / "Spliterators$AbstractLongSpliterator";
namespace java::util { class Spliterators$AbstractLongSpliterator$HoldingLongConsumer; }
template<> constexpr auto signature<::java::util::Spliterators$AbstractLongSpliterator$HoldingLongConsumer> = ::java_util / "Spliterators$AbstractLongSpliterator$HoldingLongConsumer";
namespace java::util { class Spliterators$AbstractSpliterator; }
template<> constexpr auto signature<::java::util::Spliterators$AbstractSpliterator> = ::java_util / "Spliterators$AbstractSpliterator";
namespace java::util { class Spliterators$AbstractSpliterator$HoldingConsumer; }
template<> constexpr auto signature<::java::util::Spliterators$AbstractSpliterator$HoldingConsumer> = ::java_util / "Spliterators$AbstractSpliterator$HoldingConsumer";
namespace java::util { class Spliterators$ArraySpliterator; }
template<> constexpr auto signature<::java::util::Spliterators$ArraySpliterator> = ::java_util / "Spliterators$ArraySpliterator";
namespace java::util { class Spliterators$DoubleArraySpliterator; }
template<> constexpr auto signature<::java::util::Spliterators$DoubleArraySpliterator> = ::java_util / "Spliterators$DoubleArraySpliterator";
namespace java::util { class Spliterators$DoubleIteratorSpliterator; }
template<> constexpr auto signature<::java::util::Spliterators$DoubleIteratorSpliterator> = ::java_util / "Spliterators$DoubleIteratorSpliterator";
namespace java::util { class Spliterators$EmptySpliterator; }
template<> constexpr auto signature<::java::util::Spliterators$EmptySpliterator> = ::java_util / "Spliterators$EmptySpliterator";
namespace java::util { class Spliterators$EmptySpliterator$OfDouble; }
template<> constexpr auto signature<::java::util::Spliterators$EmptySpliterator$OfDouble> = ::java_util / "Spliterators$EmptySpliterator$OfDouble";
namespace java::util { class Spliterators$EmptySpliterator$OfInt; }
template<> constexpr auto signature<::java::util::Spliterators$EmptySpliterator$OfInt> = ::java_util / "Spliterators$EmptySpliterator$OfInt";
namespace java::util { class Spliterators$EmptySpliterator$OfLong; }
template<> constexpr auto signature<::java::util::Spliterators$EmptySpliterator$OfLong> = ::java_util / "Spliterators$EmptySpliterator$OfLong";
namespace java::util { class Spliterators$EmptySpliterator$OfRef; }
template<> constexpr auto signature<::java::util::Spliterators$EmptySpliterator$OfRef> = ::java_util / "Spliterators$EmptySpliterator$OfRef";
namespace java::util { class Spliterators$IntArraySpliterator; }
template<> constexpr auto signature<::java::util::Spliterators$IntArraySpliterator> = ::java_util / "Spliterators$IntArraySpliterator";
namespace java::util { class Spliterators$IntIteratorSpliterator; }
template<> constexpr auto signature<::java::util::Spliterators$IntIteratorSpliterator> = ::java_util / "Spliterators$IntIteratorSpliterator";
namespace java::util { class Spliterators$IteratorSpliterator; }
template<> constexpr auto signature<::java::util::Spliterators$IteratorSpliterator> = ::java_util / "Spliterators$IteratorSpliterator";
namespace java::util { class Spliterators$LongArraySpliterator; }
template<> constexpr auto signature<::java::util::Spliterators$LongArraySpliterator> = ::java_util / "Spliterators$LongArraySpliterator";
namespace java::util { class Spliterators$LongIteratorSpliterator; }
template<> constexpr auto signature<::java::util::Spliterators$LongIteratorSpliterator> = ::java_util / "Spliterators$LongIteratorSpliterator";
namespace java::util { class SplittableRandom; }
template<> constexpr auto signature<::java::util::SplittableRandom> = ::java_util / "SplittableRandom";
namespace java::util { class SplittableRandom$RandomDoublesSpliterator; }
template<> constexpr auto signature<::java::util::SplittableRandom$RandomDoublesSpliterator> = ::java_util / "SplittableRandom$RandomDoublesSpliterator";
namespace java::util { class SplittableRandom$RandomIntsSpliterator; }
template<> constexpr auto signature<::java::util::SplittableRandom$RandomIntsSpliterator> = ::java_util / "SplittableRandom$RandomIntsSpliterator";
namespace java::util { class SplittableRandom$RandomLongsSpliterator; }
template<> constexpr auto signature<::java::util::SplittableRandom$RandomLongsSpliterator> = ::java_util / "SplittableRandom$RandomLongsSpliterator";
namespace java::util { class Stack; }
template<> constexpr auto signature<::java::util::Stack> = ::java_util / "Stack";
namespace java::util { class StringJoiner; }
template<> constexpr auto signature<::java::util::StringJoiner> = ::java_util / "StringJoiner";
namespace java::util { class StringTokenizer; }
template<> constexpr auto signature<::java::util::StringTokenizer> = ::java_util / "StringTokenizer";
namespace java::util { class SubList; }
template<> constexpr auto signature<::java::util::SubList> = ::java_util / "SubList";
namespace java::util { class SubList$1; }
template<> constexpr auto signature<::java::util::SubList$1> = ::java_util / "SubList$1";
namespace java::util { class TaskQueue; }
template<> constexpr auto signature<::java::util::TaskQueue> = ::java_util / "TaskQueue";
namespace java::util { class TimSort; }
template<> constexpr auto signature<::java::util::TimSort> = ::java_util / "TimSort";
namespace java::util { class TimeZone; }
template<> constexpr auto signature<::java::util::TimeZone> = ::java_util / "TimeZone";
namespace java::util { class TimeZone$1; }
template<> constexpr auto signature<::java::util::TimeZone$1> = ::java_util / "TimeZone$1";
namespace java::util { class Timer; }
template<> constexpr auto signature<::java::util::Timer> = ::java_util / "Timer";
namespace java::util { class Timer$1; }
template<> constexpr auto signature<::java::util::Timer$1> = ::java_util / "Timer$1";
namespace java::util { class TimerTask; }
template<> constexpr auto signature<::java::util::TimerTask> = ::java_util / "TimerTask";
namespace java::util { class TimerThread; }
template<> constexpr auto signature<::java::util::TimerThread> = ::java_util / "TimerThread";
namespace java::util { class TooManyListenersException; }
template<> constexpr auto signature<::java::util::TooManyListenersException> = ::java_util / "TooManyListenersException";
namespace java::util { class TreeMap; }
template<> constexpr auto signature<::java::util::TreeMap> = ::java_util / "TreeMap";
namespace java::util { class TreeMap$AscendingSubMap; }
template<> constexpr auto signature<::java::util::TreeMap$AscendingSubMap> = ::java_util / "TreeMap$AscendingSubMap";
namespace java::util { class TreeMap$AscendingSubMap$AscendingEntrySetView; }
template<> constexpr auto signature<::java::util::TreeMap$AscendingSubMap$AscendingEntrySetView> = ::java_util / "TreeMap$AscendingSubMap$AscendingEntrySetView";
namespace java::util { class TreeMap$DescendingKeyIterator; }
template<> constexpr auto signature<::java::util::TreeMap$DescendingKeyIterator> = ::java_util / "TreeMap$DescendingKeyIterator";
namespace java::util { class TreeMap$DescendingKeySpliterator; }
template<> constexpr auto signature<::java::util::TreeMap$DescendingKeySpliterator> = ::java_util / "TreeMap$DescendingKeySpliterator";
namespace java::util { class TreeMap$DescendingSubMap; }
template<> constexpr auto signature<::java::util::TreeMap$DescendingSubMap> = ::java_util / "TreeMap$DescendingSubMap";
namespace java::util { class TreeMap$DescendingSubMap$DescendingEntrySetView; }
template<> constexpr auto signature<::java::util::TreeMap$DescendingSubMap$DescendingEntrySetView> = ::java_util / "TreeMap$DescendingSubMap$DescendingEntrySetView";
namespace java::util { class TreeMap$Entry; }
template<> constexpr auto signature<::java::util::TreeMap$Entry> = ::java_util / "TreeMap$Entry";
namespace java::util { class TreeMap$EntryIterator; }
template<> constexpr auto signature<::java::util::TreeMap$EntryIterator> = ::java_util / "TreeMap$EntryIterator";
namespace java::util { class TreeMap$EntrySet; }
template<> constexpr auto signature<::java::util::TreeMap$EntrySet> = ::java_util / "TreeMap$EntrySet";
namespace java::util { class TreeMap$EntrySpliterator; }
template<> constexpr auto signature<::java::util::TreeMap$EntrySpliterator> = ::java_util / "TreeMap$EntrySpliterator";
namespace java::util { class TreeMap$KeyIterator; }
template<> constexpr auto signature<::java::util::TreeMap$KeyIterator> = ::java_util / "TreeMap$KeyIterator";
namespace java::util { class TreeMap$KeySet; }
template<> constexpr auto signature<::java::util::TreeMap$KeySet> = ::java_util / "TreeMap$KeySet";
namespace java::util { class TreeMap$KeySpliterator; }
template<> constexpr auto signature<::java::util::TreeMap$KeySpliterator> = ::java_util / "TreeMap$KeySpliterator";
namespace java::util { class TreeMap$NavigableSubMap; }
template<> constexpr auto signature<::java::util::TreeMap$NavigableSubMap> = ::java_util / "TreeMap$NavigableSubMap";
namespace java::util { class TreeMap$NavigableSubMap$DescendingSubMapEntryIterator; }
template<> constexpr auto signature<::java::util::TreeMap$NavigableSubMap$DescendingSubMapEntryIterator> = ::java_util / "TreeMap$NavigableSubMap$DescendingSubMapEntryIterator";
namespace java::util { class TreeMap$NavigableSubMap$DescendingSubMapKeyIterator; }
template<> constexpr auto signature<::java::util::TreeMap$NavigableSubMap$DescendingSubMapKeyIterator> = ::java_util / "TreeMap$NavigableSubMap$DescendingSubMapKeyIterator";
namespace java::util { class TreeMap$NavigableSubMap$EntrySetView; }
template<> constexpr auto signature<::java::util::TreeMap$NavigableSubMap$EntrySetView> = ::java_util / "TreeMap$NavigableSubMap$EntrySetView";
namespace java::util { class TreeMap$NavigableSubMap$SubMapEntryIterator; }
template<> constexpr auto signature<::java::util::TreeMap$NavigableSubMap$SubMapEntryIterator> = ::java_util / "TreeMap$NavigableSubMap$SubMapEntryIterator";
namespace java::util { class TreeMap$NavigableSubMap$SubMapIterator; }
template<> constexpr auto signature<::java::util::TreeMap$NavigableSubMap$SubMapIterator> = ::java_util / "TreeMap$NavigableSubMap$SubMapIterator";
namespace java::util { class TreeMap$NavigableSubMap$SubMapKeyIterator; }
template<> constexpr auto signature<::java::util::TreeMap$NavigableSubMap$SubMapKeyIterator> = ::java_util / "TreeMap$NavigableSubMap$SubMapKeyIterator";
namespace java::util { class TreeMap$PrivateEntryIterator; }
template<> constexpr auto signature<::java::util::TreeMap$PrivateEntryIterator> = ::java_util / "TreeMap$PrivateEntryIterator";
namespace java::util { class TreeMap$SubMap; }
template<> constexpr auto signature<::java::util::TreeMap$SubMap> = ::java_util / "TreeMap$SubMap";
namespace java::util { class TreeMap$TreeMapSpliterator; }
template<> constexpr auto signature<::java::util::TreeMap$TreeMapSpliterator> = ::java_util / "TreeMap$TreeMapSpliterator";
namespace java::util { class TreeMap$ValueIterator; }
template<> constexpr auto signature<::java::util::TreeMap$ValueIterator> = ::java_util / "TreeMap$ValueIterator";
namespace java::util { class TreeMap$ValueSpliterator; }
template<> constexpr auto signature<::java::util::TreeMap$ValueSpliterator> = ::java_util / "TreeMap$ValueSpliterator";
namespace java::util { class TreeMap$Values; }
template<> constexpr auto signature<::java::util::TreeMap$Values> = ::java_util / "TreeMap$Values";
namespace java::util { class TreeSet; }
template<> constexpr auto signature<::java::util::TreeSet> = ::java_util / "TreeSet";
namespace java::util { class Tripwire; }
template<> constexpr auto signature<::java::util::Tripwire> = ::java_util / "Tripwire";
namespace java::util { class UUID; }
template<> constexpr auto signature<::java::util::UUID> = ::java_util / "UUID";
namespace java::util { class UUID$Holder; }
template<> constexpr auto signature<::java::util::UUID$Holder> = ::java_util / "UUID$Holder";
namespace java::util { class UnknownFormatConversionException; }
template<> constexpr auto signature<::java::util::UnknownFormatConversionException> = ::java_util / "UnknownFormatConversionException";
namespace java::util { class UnknownFormatFlagsException; }
template<> constexpr auto signature<::java::util::UnknownFormatFlagsException> = ::java_util / "UnknownFormatFlagsException";
namespace java::util { class Vector; }
template<> constexpr auto signature<::java::util::Vector> = ::java_util / "Vector";
namespace java::util { class Vector$1; }
template<> constexpr auto signature<::java::util::Vector$1> = ::java_util / "Vector$1";
namespace java::util { class Vector$Itr; }
template<> constexpr auto signature<::java::util::Vector$Itr> = ::java_util / "Vector$Itr";
namespace java::util { class Vector$ListItr; }
template<> constexpr auto signature<::java::util::Vector$ListItr> = ::java_util / "Vector$ListItr";
namespace java::util { class Vector$VectorSpliterator; }
template<> constexpr auto signature<::java::util::Vector$VectorSpliterator> = ::java_util / "Vector$VectorSpliterator";
namespace java::util { class WeakHashMap; }
template<> constexpr auto signature<::java::util::WeakHashMap> = ::java_util / "WeakHashMap";
namespace java::util { class WeakHashMap$1; }
template<> constexpr auto signature<::java::util::WeakHashMap$1> = ::java_util / "WeakHashMap$1";
namespace java::util { class WeakHashMap$Entry; }
template<> constexpr auto signature<::java::util::WeakHashMap$Entry> = ::java_util / "WeakHashMap$Entry";
namespace java::util { class WeakHashMap$EntryIterator; }
template<> constexpr auto signature<::java::util::WeakHashMap$EntryIterator> = ::java_util / "WeakHashMap$EntryIterator";
namespace java::util { class WeakHashMap$EntrySet; }
template<> constexpr auto signature<::java::util::WeakHashMap$EntrySet> = ::java_util / "WeakHashMap$EntrySet";
namespace java::util { class WeakHashMap$EntrySpliterator; }
template<> constexpr auto signature<::java::util::WeakHashMap$EntrySpliterator> = ::java_util / "WeakHashMap$EntrySpliterator";
namespace java::util { class WeakHashMap$HashIterator; }
template<> constexpr auto signature<::java::util::WeakHashMap$HashIterator> = ::java_util / "WeakHashMap$HashIterator";
namespace java::util { class WeakHashMap$KeyIterator; }
template<> constexpr auto signature<::java::util::WeakHashMap$KeyIterator> = ::java_util / "WeakHashMap$KeyIterator";
namespace java::util { class WeakHashMap$KeySet; }
template<> constexpr auto signature<::java::util::WeakHashMap$KeySet> = ::java_util / "WeakHashMap$KeySet";
namespace java::util { class WeakHashMap$KeySpliterator; }
template<> constexpr auto signature<::java::util::WeakHashMap$KeySpliterator> = ::java_util / "WeakHashMap$KeySpliterator";
namespace java::util { class WeakHashMap$ValueIterator; }
template<> constexpr auto signature<::java::util::WeakHashMap$ValueIterator> = ::java_util / "WeakHashMap$ValueIterator";
namespace java::util { class WeakHashMap$ValueSpliterator; }
template<> constexpr auto signature<::java::util::WeakHashMap$ValueSpliterator> = ::java_util / "WeakHashMap$ValueSpliterator";
namespace java::util { class WeakHashMap$Values; }
template<> constexpr auto signature<::java::util::WeakHashMap$Values> = ::java_util / "WeakHashMap$Values";
namespace java::util { class WeakHashMap$WeakHashMapSpliterator; }
template<> constexpr auto signature<::java::util::WeakHashMap$WeakHashMapSpliterator> = ::java_util / "WeakHashMap$WeakHashMapSpliterator";

#endif
