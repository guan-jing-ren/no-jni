#ifndef java_util_AbstractList_HPP
#define java_util_AbstractList_HPP

#include "../../jfwd_decl.hpp"

class ::java::util::AbstractList : public jObject<::java::util::AbstractList, ::java::util::AbstractCollection> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util / "AbstractList";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::jint, ::java::lang::Object)>("add"), //
		jMethod<::jboolean(::java::lang::Object)>("add"), //
		jMethod<::jboolean(::jint, ::java::util::Collection)>("addAll"), //
		jMethod<::jvoid()>("clear"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::Object(::jint)>("get"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jint(::java::lang::Object)>("indexOf"), //
		jMethod<::java::util::Iterator()>("iterator"), //
		jMethod<::jint(::java::lang::Object)>("lastIndexOf"), //
		jMethod<::java::util::ListIterator()>("listIterator"), //
		jMethod<::java::util::ListIterator(::jint)>("listIterator"), //
		jMethod<::java::lang::Object(::jint)>("remove"), //
		jMethod<::java::lang::Object(::jint, ::java::lang::Object)>("set"), //
		jMethod<::java::util::List(::jint, ::jint)>("subList"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto addAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addAll")] != -1);
		return call<R>("addAll", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto indexOf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("indexOf")] != -1);
		return call<R>("indexOf", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto iterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("iterator")] != -1);
		return call<R>("iterator", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto lastIndexOf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lastIndexOf")] != -1);
		return call<R>("lastIndexOf", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::ListIterator, typename... Args>
	auto listIterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("listIterator")] != -1);
		return call<R>("listIterator", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto set(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set")] != -1);
		return call<R>("set", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto subList(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("subList")] != -1);
		return call<R>("subList", std::forward<Args>(args)...);
	}

};

#endif
