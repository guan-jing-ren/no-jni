#ifndef java_util_stream_Collectors_HPP
#define java_util_stream_Collectors_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::stream::Collectors : public jObject<::java::util::stream::Collectors, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_stream / "Collectors";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::util::stream::Collector(::java::util::function::ToDoubleFunction)>("averagingDouble"), //
		jMethod<::java::util::stream::Collector(::java::util::function::ToIntFunction)>("averagingInt"), //
		jMethod<::java::util::stream::Collector(::java::util::function::ToLongFunction)>("averagingLong"), //
		jMethod<::java::util::stream::Collector(::java::util::stream::Collector, ::java::util::function::Function)>("collectingAndThen"), //
		jMethod<::java::util::stream::Collector()>("counting"), //
		jMethod<::java::util::stream::Collector(::java::util::function::Function)>("groupingBy"), //
		jMethod<::java::util::stream::Collector(::java::util::function::Function, ::java::util::function::Supplier, ::java::util::stream::Collector)>("groupingBy"), //
		jMethod<::java::util::stream::Collector(::java::util::function::Function, ::java::util::stream::Collector)>("groupingBy"), //
		jMethod<::java::util::stream::Collector(::java::util::function::Function)>("groupingByConcurrent"), //
		jMethod<::java::util::stream::Collector(::java::util::function::Function, ::java::util::function::Supplier, ::java::util::stream::Collector)>("groupingByConcurrent"), //
		jMethod<::java::util::stream::Collector(::java::util::function::Function, ::java::util::stream::Collector)>("groupingByConcurrent"), //
		jMethod<::java::util::stream::Collector()>("joining"), //
		jMethod<::java::util::stream::Collector(::java::lang::CharSequence)>("joining"), //
		jMethod<::java::util::stream::Collector(::java::lang::CharSequence, ::java::lang::CharSequence, ::java::lang::CharSequence)>("joining"), //
		jMethod<::java::util::stream::Collector(::java::util::function::Function, ::java::util::stream::Collector)>("mapping"), //
		jMethod<::java::util::stream::Collector(::java::util::Comparator)>("maxBy"), //
		jMethod<::java::util::stream::Collector(::java::util::Comparator)>("minBy"), //
		jMethod<::java::util::stream::Collector(::java::util::function::Predicate)>("partitioningBy"), //
		jMethod<::java::util::stream::Collector(::java::util::function::Predicate, ::java::util::stream::Collector)>("partitioningBy"), //
		jMethod<::java::util::stream::Collector(::java::lang::Object, ::java::util::function::BinaryOperator)>("reducing"), //
		jMethod<::java::util::stream::Collector(::java::lang::Object, ::java::util::function::Function, ::java::util::function::BinaryOperator)>("reducing"), //
		jMethod<::java::util::stream::Collector(::java::util::function::BinaryOperator)>("reducing"), //
		jMethod<::java::util::stream::Collector(::java::util::function::ToDoubleFunction)>("summarizingDouble"), //
		jMethod<::java::util::stream::Collector(::java::util::function::ToIntFunction)>("summarizingInt"), //
		jMethod<::java::util::stream::Collector(::java::util::function::ToLongFunction)>("summarizingLong"), //
		jMethod<::java::util::stream::Collector(::java::util::function::ToDoubleFunction)>("summingDouble"), //
		jMethod<::java::util::stream::Collector(::java::util::function::ToIntFunction)>("summingInt"), //
		jMethod<::java::util::stream::Collector(::java::util::function::ToLongFunction)>("summingLong"), //
		jMethod<::java::util::stream::Collector(::java::util::function::Supplier)>("toCollection"), //
		jMethod<::java::util::stream::Collector(::java::util::function::Function, ::java::util::function::Function)>("toConcurrentMap"), //
		jMethod<::java::util::stream::Collector(::java::util::function::Function, ::java::util::function::Function, ::java::util::function::BinaryOperator)>("toConcurrentMap"), //
		jMethod<::java::util::stream::Collector(::java::util::function::Function, ::java::util::function::Function, ::java::util::function::BinaryOperator, ::java::util::function::Supplier)>("toConcurrentMap"), //
		jMethod<::java::util::stream::Collector()>("toList"), //
		jMethod<::java::util::stream::Collector(::java::util::function::Function, ::java::util::function::Function)>("toMap"), //
		jMethod<::java::util::stream::Collector(::java::util::function::Function, ::java::util::function::Function, ::java::util::function::BinaryOperator)>("toMap"), //
		jMethod<::java::util::stream::Collector(::java::util::function::Function, ::java::util::function::Function, ::java::util::function::BinaryOperator, ::java::util::function::Supplier)>("toMap"), //
		jMethod<::java::util::stream::Collector()>("toSet"), //
	};

	template<typename R = ::java::util::stream::Collector, typename... Args>
	static auto averagingDouble(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("averagingDouble")] != -1);
		return scall<R>("averagingDouble", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::Collector, typename... Args>
	static auto averagingInt(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("averagingInt")] != -1);
		return scall<R>("averagingInt", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::Collector, typename... Args>
	static auto averagingLong(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("averagingLong")] != -1);
		return scall<R>("averagingLong", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::Collector, typename... Args>
	static auto collectingAndThen(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("collectingAndThen")] != -1);
		return scall<R>("collectingAndThen", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::Collector, typename... Args>
	static auto counting(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("counting")] != -1);
		return scall<R>("counting", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::Collector, typename... Args>
	static auto groupingBy(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("groupingBy")] != -1);
		return scall<R>("groupingBy", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::Collector, typename... Args>
	static auto groupingByConcurrent(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("groupingByConcurrent")] != -1);
		return scall<R>("groupingByConcurrent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::Collector, typename... Args>
	static auto joining(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("joining")] != -1);
		return scall<R>("joining", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::Collector, typename... Args>
	static auto mapping(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mapping")] != -1);
		return scall<R>("mapping", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::Collector, typename... Args>
	static auto maxBy(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("maxBy")] != -1);
		return scall<R>("maxBy", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::Collector, typename... Args>
	static auto minBy(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("minBy")] != -1);
		return scall<R>("minBy", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::Collector, typename... Args>
	static auto partitioningBy(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("partitioningBy")] != -1);
		return scall<R>("partitioningBy", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::Collector, typename... Args>
	static auto reducing(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reducing")] != -1);
		return scall<R>("reducing", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::Collector, typename... Args>
	static auto summarizingDouble(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("summarizingDouble")] != -1);
		return scall<R>("summarizingDouble", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::Collector, typename... Args>
	static auto summarizingInt(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("summarizingInt")] != -1);
		return scall<R>("summarizingInt", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::Collector, typename... Args>
	static auto summarizingLong(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("summarizingLong")] != -1);
		return scall<R>("summarizingLong", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::Collector, typename... Args>
	static auto summingDouble(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("summingDouble")] != -1);
		return scall<R>("summingDouble", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::Collector, typename... Args>
	static auto summingInt(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("summingInt")] != -1);
		return scall<R>("summingInt", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::Collector, typename... Args>
	static auto summingLong(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("summingLong")] != -1);
		return scall<R>("summingLong", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::Collector, typename... Args>
	static auto toCollection(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toCollection")] != -1);
		return scall<R>("toCollection", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::Collector, typename... Args>
	static auto toConcurrentMap(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toConcurrentMap")] != -1);
		return scall<R>("toConcurrentMap", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::Collector, typename... Args>
	static auto toList(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toList")] != -1);
		return scall<R>("toList", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::Collector, typename... Args>
	static auto toMap(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toMap")] != -1);
		return scall<R>("toMap", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::Collector, typename... Args>
	static auto toSet(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toSet")] != -1);
		return scall<R>("toSet", std::forward<Args>(args)...);
	}

};

#endif
