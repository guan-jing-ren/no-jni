#ifndef java_util_stream_Collector_HPP
#define java_util_stream_Collector_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::stream::Collector : public jObject<::java::util::stream::Collector, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_stream / "Collector";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::util::function::BiConsumer()>("accumulator"), //
		jMethod<::java::util::Set()>("characteristics"), //
		jMethod<::java::util::function::BinaryOperator()>("combiner"), //
		jMethod<::java::util::function::Function()>("finisher"), //
		jMethod<::java::util::stream::Collector(::java::util::function::Supplier, ::java::util::function::BiConsumer, ::java::util::function::BinaryOperator, ::java::util::function::Function, ::java::util::stream::Collector$Characteristics *)>("of"), //
		jMethod<::java::util::stream::Collector(::java::util::function::Supplier, ::java::util::function::BiConsumer, ::java::util::function::BinaryOperator, ::java::util::stream::Collector$Characteristics *)>("of"), //
		jMethod<::java::util::function::Supplier()>("supplier"), //
	};

	template<typename R = ::java::util::function::BiConsumer, typename... Args>
	auto accumulator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("accumulator")] != -1);
		return call<R>("accumulator", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto characteristics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("characteristics")] != -1);
		return call<R>("characteristics", forward<Args>(args)...);
	}

	template<typename R = ::java::util::function::BinaryOperator, typename... Args>
	auto combiner(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("combiner")] != -1);
		return call<R>("combiner", forward<Args>(args)...);
	}

	template<typename R = ::java::util::function::Function, typename... Args>
	auto finisher(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("finisher")] != -1);
		return call<R>("finisher", forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::Collector, typename... Args>
	static auto of(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("of")] != -1);
		return scall<R>("of", forward<Args>(args)...);
	}

	template<typename R = ::java::util::function::Supplier, typename... Args>
	auto supplier(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supplier")] != -1);
		return call<R>("supplier", forward<Args>(args)...);
	}

};

#endif
