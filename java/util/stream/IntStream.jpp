#ifndef java_util_stream_IntStream_HPP
#define java_util_stream_IntStream_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::stream::IntStream : public jObject<::java::util::stream::IntStream, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_stream / "IntStream";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::util::function::IntPredicate)>("allMatch"), //
		jMethod<::jboolean(::java::util::function::IntPredicate)>("anyMatch"), //
		jMethod<::java::util::stream::DoubleStream()>("asDoubleStream"), //
		jMethod<::java::util::stream::LongStream()>("asLongStream"), //
		jMethod<::java::util::OptionalDouble()>("average"), //
		jMethod<::java::util::stream::Stream()>("boxed"), //
		jMethod<::java::util::stream::IntStream$Builder()>("builder"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::java::lang::Object(::java::util::function::Supplier, ::java::util::function::ObjIntConsumer, ::java::util::function::BiConsumer)>("collect"), //
		jMethod<::java::util::stream::IntStream(::java::util::stream::IntStream, ::java::util::stream::IntStream)>("concat"), //
		jMethod<::jlong()>("count"), //
		jMethod<::java::util::stream::IntStream()>("distinct"), //
		jMethod<::java::util::stream::IntStream()>("empty"), //
		jMethod<::java::util::stream::IntStream(::java::util::function::IntPredicate)>("filter"), //
		jMethod<::java::util::OptionalInt()>("findAny"), //
		jMethod<::java::util::OptionalInt()>("findFirst"), //
		jMethod<::java::util::stream::IntStream(::java::util::function::IntFunction)>("flatMap"), //
		jMethod<::jvoid(::java::util::function::IntConsumer)>("forEach"), //
		jMethod<::jvoid(::java::util::function::IntConsumer)>("forEachOrdered"), //
		jMethod<::java::util::stream::IntStream(::java::util::function::IntSupplier)>("generate"), //
		jMethod<::jboolean()>("isParallel"), //
		jMethod<::java::util::stream::IntStream(::jint, ::java::util::function::IntUnaryOperator)>("iterate"), //
		jMethod<::java::util::Iterator()>("iterator"), //
		jMethod<::java::util::PrimitiveIterator$OfInt()>("iterator"), //
		jMethod<::java::util::stream::IntStream(::jlong)>("limit"), //
		jMethod<::java::util::stream::IntStream(::java::util::function::IntUnaryOperator)>("map"), //
		jMethod<::java::util::stream::DoubleStream(::java::util::function::IntToDoubleFunction)>("mapToDouble"), //
		jMethod<::java::util::stream::LongStream(::java::util::function::IntToLongFunction)>("mapToLong"), //
		jMethod<::java::util::stream::Stream(::java::util::function::IntFunction)>("mapToObj"), //
		jMethod<::java::util::OptionalInt()>("max"), //
		jMethod<::java::util::OptionalInt()>("min"), //
		jMethod<::jboolean(::java::util::function::IntPredicate)>("noneMatch"), //
		jMethod<::java::util::stream::IntStream(::jint)>("of"), //
		jMethod<::java::util::stream::IntStream(::jint *)>("of"), //
		jMethod<::java::util::stream::BaseStream(::java::lang::Runnable)>("onClose"), //
		jMethod<::java::util::stream::BaseStream()>("parallel"), //
		jMethod<::java::util::stream::IntStream()>("parallel"), //
		jMethod<::java::util::stream::IntStream(::java::util::function::IntConsumer)>("peek"), //
		jMethod<::java::util::stream::IntStream(::jint, ::jint)>("range"), //
		jMethod<::java::util::stream::IntStream(::jint, ::jint)>("rangeClosed"), //
		jMethod<::jint(::jint, ::java::util::function::IntBinaryOperator)>("reduce"), //
		jMethod<::java::util::OptionalInt(::java::util::function::IntBinaryOperator)>("reduce"), //
		jMethod<::java::util::stream::BaseStream()>("sequential"), //
		jMethod<::java::util::stream::IntStream()>("sequential"), //
		jMethod<::java::util::stream::IntStream(::jlong)>("skip"), //
		jMethod<::java::util::stream::IntStream()>("sorted"), //
		jMethod<::java::util::Spliterator$OfInt()>("spliterator"), //
		jMethod<::java::util::Spliterator()>("spliterator"), //
		jMethod<::jint()>("sum"), //
		jMethod<::java::util::IntSummaryStatistics()>("summaryStatistics"), //
		jMethod<::jint *()>("toArray"), //
		jMethod<::java::util::stream::BaseStream()>("unordered"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto allMatch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("allMatch")] != -1);
		return call<R>("allMatch", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto anyMatch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("anyMatch")] != -1);
		return call<R>("anyMatch", forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::DoubleStream, typename... Args>
	auto asDoubleStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("asDoubleStream")] != -1);
		return call<R>("asDoubleStream", forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::LongStream, typename... Args>
	auto asLongStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("asLongStream")] != -1);
		return call<R>("asLongStream", forward<Args>(args)...);
	}

	template<typename R = ::java::util::OptionalDouble, typename... Args>
	auto average(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("average")] != -1);
		return call<R>("average", forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::Stream, typename... Args>
	auto boxed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("boxed")] != -1);
		return call<R>("boxed", forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::IntStream$Builder, typename... Args>
	static auto builder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("builder")] != -1);
		return scall<R>("builder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("close")] != -1);
		return call<R>("close", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto collect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("collect")] != -1);
		return call<R>("collect", forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::IntStream, typename... Args>
	static auto concat(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("concat")] != -1);
		return scall<R>("concat", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto count(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("count")] != -1);
		return call<R>("count", forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::IntStream, typename... Args>
	auto distinct(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("distinct")] != -1);
		return call<R>("distinct", forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::IntStream, typename... Args>
	static auto empty(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("empty")] != -1);
		return scall<R>("empty", forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::IntStream, typename... Args>
	auto filter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("filter")] != -1);
		return call<R>("filter", forward<Args>(args)...);
	}

	template<typename R = ::java::util::OptionalInt, typename... Args>
	auto findAny(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("findAny")] != -1);
		return call<R>("findAny", forward<Args>(args)...);
	}

	template<typename R = ::java::util::OptionalInt, typename... Args>
	auto findFirst(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("findFirst")] != -1);
		return call<R>("findFirst", forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::IntStream, typename... Args>
	auto flatMap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("flatMap")] != -1);
		return call<R>("flatMap", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto forEach(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("forEach")] != -1);
		return call<R>("forEach", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto forEachOrdered(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("forEachOrdered")] != -1);
		return call<R>("forEachOrdered", forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::IntStream, typename... Args>
	static auto generate(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("generate")] != -1);
		return scall<R>("generate", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isParallel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isParallel")] != -1);
		return call<R>("isParallel", forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::IntStream, typename... Args>
	static auto iterate(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("iterate")] != -1);
		return scall<R>("iterate", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto iterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("iterator")] != -1);
		return call<R>("iterator", forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::IntStream, typename... Args>
	auto limit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("limit")] != -1);
		return call<R>("limit", forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::IntStream, typename... Args>
	auto map(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("map")] != -1);
		return call<R>("map", forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::DoubleStream, typename... Args>
	auto mapToDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("mapToDouble")] != -1);
		return call<R>("mapToDouble", forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::LongStream, typename... Args>
	auto mapToLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("mapToLong")] != -1);
		return call<R>("mapToLong", forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::Stream, typename... Args>
	auto mapToObj(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("mapToObj")] != -1);
		return call<R>("mapToObj", forward<Args>(args)...);
	}

	template<typename R = ::java::util::OptionalInt, typename... Args>
	auto max(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("max")] != -1);
		return call<R>("max", forward<Args>(args)...);
	}

	template<typename R = ::java::util::OptionalInt, typename... Args>
	auto min(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("min")] != -1);
		return call<R>("min", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto noneMatch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("noneMatch")] != -1);
		return call<R>("noneMatch", forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::IntStream, typename... Args>
	static auto of(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("of")] != -1);
		return scall<R>("of", forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::BaseStream, typename... Args>
	auto onClose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("onClose")] != -1);
		return call<R>("onClose", forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::BaseStream, typename... Args>
	auto parallel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("parallel")] != -1);
		return call<R>("parallel", forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::IntStream, typename... Args>
	auto peek(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("peek")] != -1);
		return call<R>("peek", forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::IntStream, typename... Args>
	static auto range(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("range")] != -1);
		return scall<R>("range", forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::IntStream, typename... Args>
	static auto rangeClosed(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("rangeClosed")] != -1);
		return scall<R>("rangeClosed", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto reduce(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reduce")] != -1);
		return call<R>("reduce", forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::BaseStream, typename... Args>
	auto sequential(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("sequential")] != -1);
		return call<R>("sequential", forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::IntStream, typename... Args>
	auto skip(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("skip")] != -1);
		return call<R>("skip", forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::IntStream, typename... Args>
	auto sorted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("sorted")] != -1);
		return call<R>("sorted", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Spliterator$OfInt, typename... Args>
	auto spliterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("spliterator")] != -1);
		return call<R>("spliterator", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto sum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("sum")] != -1);
		return call<R>("sum", forward<Args>(args)...);
	}

	template<typename R = ::java::util::IntSummaryStatistics, typename... Args>
	auto summaryStatistics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("summaryStatistics")] != -1);
		return call<R>("summaryStatistics", forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto toArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toArray")] != -1);
		return call<R>("toArray", forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::BaseStream, typename... Args>
	auto unordered(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("unordered")] != -1);
		return call<R>("unordered", forward<Args>(args)...);
	}

};

#endif
