#ifndef java_util_stream_Node$Builder$OfDouble_HPP
#define java_util_stream_Node$Builder$OfDouble_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::stream::Node$Builder$OfDouble : public jObject<::java::util::stream::Node$Builder$OfDouble, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_stream / "Node$Builder$OfDouble";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::jdouble)>("accept"), //
		jMethod<::jvoid(::java::lang::Double)>("accept"), //
		jMethod<::jvoid(::java::lang::Object)>("accept"), //
		jMethod<::java::util::stream::Node$OfDouble()>("build"), //
		jMethod<::java::util::stream::Node()>("build"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto accept(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("accept")] != -1);
		return call<R>("accept", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::Node$OfDouble, typename... Args>
	auto build(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("build")] != -1);
		return call<R>("build", std::forward<Args>(args)...);
	}

};

#endif
