#ifndef java_util_stream_JPP
#define java_util_stream_JPP

namespace java::util::stream { class AbstractPipeline; }
template<> constexpr auto signature<::java::util::stream::AbstractPipeline> = ::java_util_stream / "AbstractPipeline";
namespace java::util::stream { class AbstractShortCircuitTask; }
template<> constexpr auto signature<::java::util::stream::AbstractShortCircuitTask> = ::java_util_stream / "AbstractShortCircuitTask";
namespace java::util::stream { class AbstractSpinedBuffer; }
template<> constexpr auto signature<::java::util::stream::AbstractSpinedBuffer> = ::java_util_stream / "AbstractSpinedBuffer";
namespace java::util::stream { class AbstractTask; }
template<> constexpr auto signature<::java::util::stream::AbstractTask> = ::java_util_stream / "AbstractTask";
namespace java::util::stream { class BaseStream; }
template<> constexpr auto signature<::java::util::stream::BaseStream> = ::java_util_stream / "BaseStream";
namespace java::util::stream { class Collector; }
template<> constexpr auto signature<::java::util::stream::Collector> = ::java_util_stream / "Collector";
namespace java::util::stream { class Collector$Characteristics; }
template<> constexpr auto signature<::java::util::stream::Collector$Characteristics> = ::java_util_stream / "Collector$Characteristics";
namespace java::util::stream { class Collectors; }
template<> constexpr auto signature<::java::util::stream::Collectors> = ::java_util_stream / "Collectors";
namespace java::util::stream { class Collectors$1OptionalBox; }
template<> constexpr auto signature<::java::util::stream::Collectors$1OptionalBox> = ::java_util_stream / "Collectors$1OptionalBox";
namespace java::util::stream { class Collectors$CollectorImpl; }
template<> constexpr auto signature<::java::util::stream::Collectors$CollectorImpl> = ::java_util_stream / "Collectors$CollectorImpl";
namespace java::util::stream { class Collectors$Partition; }
template<> constexpr auto signature<::java::util::stream::Collectors$Partition> = ::java_util_stream / "Collectors$Partition";
namespace java::util::stream { class Collectors$Partition$1; }
template<> constexpr auto signature<::java::util::stream::Collectors$Partition$1> = ::java_util_stream / "Collectors$Partition$1";
namespace java::util::stream { class DistinctOps; }
template<> constexpr auto signature<::java::util::stream::DistinctOps> = ::java_util_stream / "DistinctOps";
namespace java::util::stream { class DistinctOps$1; }
template<> constexpr auto signature<::java::util::stream::DistinctOps$1> = ::java_util_stream / "DistinctOps$1";
namespace java::util::stream { class DistinctOps$1$1; }
template<> constexpr auto signature<::java::util::stream::DistinctOps$1$1> = ::java_util_stream / "DistinctOps$1$1";
namespace java::util::stream { class DistinctOps$1$2; }
template<> constexpr auto signature<::java::util::stream::DistinctOps$1$2> = ::java_util_stream / "DistinctOps$1$2";
namespace java::util::stream { class DoublePipeline; }
template<> constexpr auto signature<::java::util::stream::DoublePipeline> = ::java_util_stream / "DoublePipeline";
namespace java::util::stream { class DoublePipeline$1; }
template<> constexpr auto signature<::java::util::stream::DoublePipeline$1> = ::java_util_stream / "DoublePipeline$1";
namespace java::util::stream { class DoublePipeline$1$1; }
template<> constexpr auto signature<::java::util::stream::DoublePipeline$1$1> = ::java_util_stream / "DoublePipeline$1$1";
namespace java::util::stream { class DoublePipeline$2; }
template<> constexpr auto signature<::java::util::stream::DoublePipeline$2> = ::java_util_stream / "DoublePipeline$2";
namespace java::util::stream { class DoublePipeline$2$1; }
template<> constexpr auto signature<::java::util::stream::DoublePipeline$2$1> = ::java_util_stream / "DoublePipeline$2$1";
namespace java::util::stream { class DoublePipeline$3; }
template<> constexpr auto signature<::java::util::stream::DoublePipeline$3> = ::java_util_stream / "DoublePipeline$3";
namespace java::util::stream { class DoublePipeline$3$1; }
template<> constexpr auto signature<::java::util::stream::DoublePipeline$3$1> = ::java_util_stream / "DoublePipeline$3$1";
namespace java::util::stream { class DoublePipeline$4; }
template<> constexpr auto signature<::java::util::stream::DoublePipeline$4> = ::java_util_stream / "DoublePipeline$4";
namespace java::util::stream { class DoublePipeline$4$1; }
template<> constexpr auto signature<::java::util::stream::DoublePipeline$4$1> = ::java_util_stream / "DoublePipeline$4$1";
namespace java::util::stream { class DoublePipeline$5; }
template<> constexpr auto signature<::java::util::stream::DoublePipeline$5> = ::java_util_stream / "DoublePipeline$5";
namespace java::util::stream { class DoublePipeline$5$1; }
template<> constexpr auto signature<::java::util::stream::DoublePipeline$5$1> = ::java_util_stream / "DoublePipeline$5$1";
namespace java::util::stream { class DoublePipeline$6; }
template<> constexpr auto signature<::java::util::stream::DoublePipeline$6> = ::java_util_stream / "DoublePipeline$6";
namespace java::util::stream { class DoublePipeline$7; }
template<> constexpr auto signature<::java::util::stream::DoublePipeline$7> = ::java_util_stream / "DoublePipeline$7";
namespace java::util::stream { class DoublePipeline$7$1; }
template<> constexpr auto signature<::java::util::stream::DoublePipeline$7$1> = ::java_util_stream / "DoublePipeline$7$1";
namespace java::util::stream { class DoublePipeline$8; }
template<> constexpr auto signature<::java::util::stream::DoublePipeline$8> = ::java_util_stream / "DoublePipeline$8";
namespace java::util::stream { class DoublePipeline$8$1; }
template<> constexpr auto signature<::java::util::stream::DoublePipeline$8$1> = ::java_util_stream / "DoublePipeline$8$1";
namespace java::util::stream { class DoublePipeline$Head; }
template<> constexpr auto signature<::java::util::stream::DoublePipeline$Head> = ::java_util_stream / "DoublePipeline$Head";
namespace java::util::stream { class DoublePipeline$StatefulOp; }
template<> constexpr auto signature<::java::util::stream::DoublePipeline$StatefulOp> = ::java_util_stream / "DoublePipeline$StatefulOp";
namespace java::util::stream { class DoublePipeline$StatelessOp; }
template<> constexpr auto signature<::java::util::stream::DoublePipeline$StatelessOp> = ::java_util_stream / "DoublePipeline$StatelessOp";
namespace java::util::stream { class DoubleStream; }
template<> constexpr auto signature<::java::util::stream::DoubleStream> = ::java_util_stream / "DoubleStream";
namespace java::util::stream { class DoubleStream$1; }
template<> constexpr auto signature<::java::util::stream::DoubleStream$1> = ::java_util_stream / "DoubleStream$1";
namespace java::util::stream { class DoubleStream$Builder; }
template<> constexpr auto signature<::java::util::stream::DoubleStream$Builder> = ::java_util_stream / "DoubleStream$Builder";
namespace java::util::stream { class FindOps; }
template<> constexpr auto signature<::java::util::stream::FindOps> = ::java_util_stream / "FindOps";
namespace java::util::stream { class FindOps$FindOp; }
template<> constexpr auto signature<::java::util::stream::FindOps$FindOp> = ::java_util_stream / "FindOps$FindOp";
namespace java::util::stream { class FindOps$FindSink; }
template<> constexpr auto signature<::java::util::stream::FindOps$FindSink> = ::java_util_stream / "FindOps$FindSink";
namespace java::util::stream { class FindOps$FindSink$OfDouble; }
template<> constexpr auto signature<::java::util::stream::FindOps$FindSink$OfDouble> = ::java_util_stream / "FindOps$FindSink$OfDouble";
namespace java::util::stream { class FindOps$FindSink$OfInt; }
template<> constexpr auto signature<::java::util::stream::FindOps$FindSink$OfInt> = ::java_util_stream / "FindOps$FindSink$OfInt";
namespace java::util::stream { class FindOps$FindSink$OfLong; }
template<> constexpr auto signature<::java::util::stream::FindOps$FindSink$OfLong> = ::java_util_stream / "FindOps$FindSink$OfLong";
namespace java::util::stream { class FindOps$FindSink$OfRef; }
template<> constexpr auto signature<::java::util::stream::FindOps$FindSink$OfRef> = ::java_util_stream / "FindOps$FindSink$OfRef";
namespace java::util::stream { class FindOps$FindTask; }
template<> constexpr auto signature<::java::util::stream::FindOps$FindTask> = ::java_util_stream / "FindOps$FindTask";
namespace java::util::stream { class ForEachOps; }
template<> constexpr auto signature<::java::util::stream::ForEachOps> = ::java_util_stream / "ForEachOps";
namespace java::util::stream { class ForEachOps$ForEachOp; }
template<> constexpr auto signature<::java::util::stream::ForEachOps$ForEachOp> = ::java_util_stream / "ForEachOps$ForEachOp";
namespace java::util::stream { class ForEachOps$ForEachOp$OfDouble; }
template<> constexpr auto signature<::java::util::stream::ForEachOps$ForEachOp$OfDouble> = ::java_util_stream / "ForEachOps$ForEachOp$OfDouble";
namespace java::util::stream { class ForEachOps$ForEachOp$OfInt; }
template<> constexpr auto signature<::java::util::stream::ForEachOps$ForEachOp$OfInt> = ::java_util_stream / "ForEachOps$ForEachOp$OfInt";
namespace java::util::stream { class ForEachOps$ForEachOp$OfLong; }
template<> constexpr auto signature<::java::util::stream::ForEachOps$ForEachOp$OfLong> = ::java_util_stream / "ForEachOps$ForEachOp$OfLong";
namespace java::util::stream { class ForEachOps$ForEachOp$OfRef; }
template<> constexpr auto signature<::java::util::stream::ForEachOps$ForEachOp$OfRef> = ::java_util_stream / "ForEachOps$ForEachOp$OfRef";
namespace java::util::stream { class ForEachOps$ForEachOrderedTask; }
template<> constexpr auto signature<::java::util::stream::ForEachOps$ForEachOrderedTask> = ::java_util_stream / "ForEachOps$ForEachOrderedTask";
namespace java::util::stream { class ForEachOps$ForEachTask; }
template<> constexpr auto signature<::java::util::stream::ForEachOps$ForEachTask> = ::java_util_stream / "ForEachOps$ForEachTask";
namespace java::util::stream { class IntPipeline; }
template<> constexpr auto signature<::java::util::stream::IntPipeline> = ::java_util_stream / "IntPipeline";
namespace java::util::stream { class IntPipeline$1; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$1> = ::java_util_stream / "IntPipeline$1";
namespace java::util::stream { class IntPipeline$1$1; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$1$1> = ::java_util_stream / "IntPipeline$1$1";
namespace java::util::stream { class IntPipeline$10; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$10> = ::java_util_stream / "IntPipeline$10";
namespace java::util::stream { class IntPipeline$10$1; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$10$1> = ::java_util_stream / "IntPipeline$10$1";
namespace java::util::stream { class IntPipeline$2; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$2> = ::java_util_stream / "IntPipeline$2";
namespace java::util::stream { class IntPipeline$2$1; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$2$1> = ::java_util_stream / "IntPipeline$2$1";
namespace java::util::stream { class IntPipeline$3; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$3> = ::java_util_stream / "IntPipeline$3";
namespace java::util::stream { class IntPipeline$3$1; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$3$1> = ::java_util_stream / "IntPipeline$3$1";
namespace java::util::stream { class IntPipeline$4; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$4> = ::java_util_stream / "IntPipeline$4";
namespace java::util::stream { class IntPipeline$4$1; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$4$1> = ::java_util_stream / "IntPipeline$4$1";
namespace java::util::stream { class IntPipeline$5; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$5> = ::java_util_stream / "IntPipeline$5";
namespace java::util::stream { class IntPipeline$5$1; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$5$1> = ::java_util_stream / "IntPipeline$5$1";
namespace java::util::stream { class IntPipeline$6; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$6> = ::java_util_stream / "IntPipeline$6";
namespace java::util::stream { class IntPipeline$6$1; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$6$1> = ::java_util_stream / "IntPipeline$6$1";
namespace java::util::stream { class IntPipeline$7; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$7> = ::java_util_stream / "IntPipeline$7";
namespace java::util::stream { class IntPipeline$7$1; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$7$1> = ::java_util_stream / "IntPipeline$7$1";
namespace java::util::stream { class IntPipeline$8; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$8> = ::java_util_stream / "IntPipeline$8";
namespace java::util::stream { class IntPipeline$9; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$9> = ::java_util_stream / "IntPipeline$9";
namespace java::util::stream { class IntPipeline$9$1; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$9$1> = ::java_util_stream / "IntPipeline$9$1";
namespace java::util::stream { class IntPipeline$Head; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$Head> = ::java_util_stream / "IntPipeline$Head";
namespace java::util::stream { class IntPipeline$StatefulOp; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$StatefulOp> = ::java_util_stream / "IntPipeline$StatefulOp";
namespace java::util::stream { class IntPipeline$StatelessOp; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$StatelessOp> = ::java_util_stream / "IntPipeline$StatelessOp";
namespace java::util::stream { class IntStream; }
template<> constexpr auto signature<::java::util::stream::IntStream> = ::java_util_stream / "IntStream";
namespace java::util::stream { class IntStream$1; }
template<> constexpr auto signature<::java::util::stream::IntStream$1> = ::java_util_stream / "IntStream$1";
namespace java::util::stream { class IntStream$Builder; }
template<> constexpr auto signature<::java::util::stream::IntStream$Builder> = ::java_util_stream / "IntStream$Builder";
namespace java::util::stream { class LongPipeline; }
template<> constexpr auto signature<::java::util::stream::LongPipeline> = ::java_util_stream / "LongPipeline";
namespace java::util::stream { class LongPipeline$1; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$1> = ::java_util_stream / "LongPipeline$1";
namespace java::util::stream { class LongPipeline$1$1; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$1$1> = ::java_util_stream / "LongPipeline$1$1";
namespace java::util::stream { class LongPipeline$2; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$2> = ::java_util_stream / "LongPipeline$2";
namespace java::util::stream { class LongPipeline$2$1; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$2$1> = ::java_util_stream / "LongPipeline$2$1";
namespace java::util::stream { class LongPipeline$3; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$3> = ::java_util_stream / "LongPipeline$3";
namespace java::util::stream { class LongPipeline$3$1; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$3$1> = ::java_util_stream / "LongPipeline$3$1";
namespace java::util::stream { class LongPipeline$4; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$4> = ::java_util_stream / "LongPipeline$4";
namespace java::util::stream { class LongPipeline$4$1; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$4$1> = ::java_util_stream / "LongPipeline$4$1";
namespace java::util::stream { class LongPipeline$5; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$5> = ::java_util_stream / "LongPipeline$5";
namespace java::util::stream { class LongPipeline$5$1; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$5$1> = ::java_util_stream / "LongPipeline$5$1";
namespace java::util::stream { class LongPipeline$6; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$6> = ::java_util_stream / "LongPipeline$6";
namespace java::util::stream { class LongPipeline$6$1; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$6$1> = ::java_util_stream / "LongPipeline$6$1";
namespace java::util::stream { class LongPipeline$7; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$7> = ::java_util_stream / "LongPipeline$7";
namespace java::util::stream { class LongPipeline$8; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$8> = ::java_util_stream / "LongPipeline$8";
namespace java::util::stream { class LongPipeline$8$1; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$8$1> = ::java_util_stream / "LongPipeline$8$1";
namespace java::util::stream { class LongPipeline$9; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$9> = ::java_util_stream / "LongPipeline$9";
namespace java::util::stream { class LongPipeline$9$1; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$9$1> = ::java_util_stream / "LongPipeline$9$1";
namespace java::util::stream { class LongPipeline$Head; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$Head> = ::java_util_stream / "LongPipeline$Head";
namespace java::util::stream { class LongPipeline$StatefulOp; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$StatefulOp> = ::java_util_stream / "LongPipeline$StatefulOp";
namespace java::util::stream { class LongPipeline$StatelessOp; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$StatelessOp> = ::java_util_stream / "LongPipeline$StatelessOp";
namespace java::util::stream { class LongStream; }
template<> constexpr auto signature<::java::util::stream::LongStream> = ::java_util_stream / "LongStream";
namespace java::util::stream { class LongStream$1; }
template<> constexpr auto signature<::java::util::stream::LongStream$1> = ::java_util_stream / "LongStream$1";
namespace java::util::stream { class LongStream$Builder; }
template<> constexpr auto signature<::java::util::stream::LongStream$Builder> = ::java_util_stream / "LongStream$Builder";
namespace java::util::stream { class MatchOps; }
template<> constexpr auto signature<::java::util::stream::MatchOps> = ::java_util_stream / "MatchOps";
namespace java::util::stream { class MatchOps$1MatchSink; }
template<> constexpr auto signature<::java::util::stream::MatchOps$1MatchSink> = ::java_util_stream / "MatchOps$1MatchSink";
namespace java::util::stream { class MatchOps$2MatchSink; }
template<> constexpr auto signature<::java::util::stream::MatchOps$2MatchSink> = ::java_util_stream / "MatchOps$2MatchSink";
namespace java::util::stream { class MatchOps$3MatchSink; }
template<> constexpr auto signature<::java::util::stream::MatchOps$3MatchSink> = ::java_util_stream / "MatchOps$3MatchSink";
namespace java::util::stream { class MatchOps$4MatchSink; }
template<> constexpr auto signature<::java::util::stream::MatchOps$4MatchSink> = ::java_util_stream / "MatchOps$4MatchSink";
namespace java::util::stream { class MatchOps$BooleanTerminalSink; }
template<> constexpr auto signature<::java::util::stream::MatchOps$BooleanTerminalSink> = ::java_util_stream / "MatchOps$BooleanTerminalSink";
namespace java::util::stream { class MatchOps$MatchKind; }
template<> constexpr auto signature<::java::util::stream::MatchOps$MatchKind> = ::java_util_stream / "MatchOps$MatchKind";
namespace java::util::stream { class MatchOps$MatchOp; }
template<> constexpr auto signature<::java::util::stream::MatchOps$MatchOp> = ::java_util_stream / "MatchOps$MatchOp";
namespace java::util::stream { class MatchOps$MatchTask; }
template<> constexpr auto signature<::java::util::stream::MatchOps$MatchTask> = ::java_util_stream / "MatchOps$MatchTask";
namespace java::util::stream { class Node; }
template<> constexpr auto signature<::java::util::stream::Node> = ::java_util_stream / "Node";
namespace java::util::stream { class Node$Builder; }
template<> constexpr auto signature<::java::util::stream::Node$Builder> = ::java_util_stream / "Node$Builder";
namespace java::util::stream { class Node$Builder$OfDouble; }
template<> constexpr auto signature<::java::util::stream::Node$Builder$OfDouble> = ::java_util_stream / "Node$Builder$OfDouble";
namespace java::util::stream { class Node$Builder$OfInt; }
template<> constexpr auto signature<::java::util::stream::Node$Builder$OfInt> = ::java_util_stream / "Node$Builder$OfInt";
namespace java::util::stream { class Node$Builder$OfLong; }
template<> constexpr auto signature<::java::util::stream::Node$Builder$OfLong> = ::java_util_stream / "Node$Builder$OfLong";
namespace java::util::stream { class Node$OfDouble; }
template<> constexpr auto signature<::java::util::stream::Node$OfDouble> = ::java_util_stream / "Node$OfDouble";
namespace java::util::stream { class Node$OfInt; }
template<> constexpr auto signature<::java::util::stream::Node$OfInt> = ::java_util_stream / "Node$OfInt";
namespace java::util::stream { class Node$OfLong; }
template<> constexpr auto signature<::java::util::stream::Node$OfLong> = ::java_util_stream / "Node$OfLong";
namespace java::util::stream { class Node$OfPrimitive; }
template<> constexpr auto signature<::java::util::stream::Node$OfPrimitive> = ::java_util_stream / "Node$OfPrimitive";
namespace java::util::stream { class Nodes; }
template<> constexpr auto signature<::java::util::stream::Nodes> = ::java_util_stream / "Nodes";
namespace java::util::stream { class Nodes$1; }
template<> constexpr auto signature<::java::util::stream::Nodes$1> = ::java_util_stream / "Nodes$1";
namespace java::util::stream { class Nodes$AbstractConcNode; }
template<> constexpr auto signature<::java::util::stream::Nodes$AbstractConcNode> = ::java_util_stream / "Nodes$AbstractConcNode";
namespace java::util::stream { class Nodes$ArrayNode; }
template<> constexpr auto signature<::java::util::stream::Nodes$ArrayNode> = ::java_util_stream / "Nodes$ArrayNode";
namespace java::util::stream { class Nodes$CollectionNode; }
template<> constexpr auto signature<::java::util::stream::Nodes$CollectionNode> = ::java_util_stream / "Nodes$CollectionNode";
namespace java::util::stream { class Nodes$CollectorTask; }
template<> constexpr auto signature<::java::util::stream::Nodes$CollectorTask> = ::java_util_stream / "Nodes$CollectorTask";
namespace java::util::stream { class Nodes$CollectorTask$OfDouble; }
template<> constexpr auto signature<::java::util::stream::Nodes$CollectorTask$OfDouble> = ::java_util_stream / "Nodes$CollectorTask$OfDouble";
namespace java::util::stream { class Nodes$CollectorTask$OfInt; }
template<> constexpr auto signature<::java::util::stream::Nodes$CollectorTask$OfInt> = ::java_util_stream / "Nodes$CollectorTask$OfInt";
namespace java::util::stream { class Nodes$CollectorTask$OfLong; }
template<> constexpr auto signature<::java::util::stream::Nodes$CollectorTask$OfLong> = ::java_util_stream / "Nodes$CollectorTask$OfLong";
namespace java::util::stream { class Nodes$CollectorTask$OfRef; }
template<> constexpr auto signature<::java::util::stream::Nodes$CollectorTask$OfRef> = ::java_util_stream / "Nodes$CollectorTask$OfRef";
namespace java::util::stream { class Nodes$ConcNode; }
template<> constexpr auto signature<::java::util::stream::Nodes$ConcNode> = ::java_util_stream / "Nodes$ConcNode";
namespace java::util::stream { class Nodes$ConcNode$OfDouble; }
template<> constexpr auto signature<::java::util::stream::Nodes$ConcNode$OfDouble> = ::java_util_stream / "Nodes$ConcNode$OfDouble";
namespace java::util::stream { class Nodes$ConcNode$OfInt; }
template<> constexpr auto signature<::java::util::stream::Nodes$ConcNode$OfInt> = ::java_util_stream / "Nodes$ConcNode$OfInt";
namespace java::util::stream { class Nodes$ConcNode$OfLong; }
template<> constexpr auto signature<::java::util::stream::Nodes$ConcNode$OfLong> = ::java_util_stream / "Nodes$ConcNode$OfLong";
namespace java::util::stream { class Nodes$ConcNode$OfPrimitive; }
template<> constexpr auto signature<::java::util::stream::Nodes$ConcNode$OfPrimitive> = ::java_util_stream / "Nodes$ConcNode$OfPrimitive";
namespace java::util::stream { class Nodes$DoubleArrayNode; }
template<> constexpr auto signature<::java::util::stream::Nodes$DoubleArrayNode> = ::java_util_stream / "Nodes$DoubleArrayNode";
namespace java::util::stream { class Nodes$DoubleFixedNodeBuilder; }
template<> constexpr auto signature<::java::util::stream::Nodes$DoubleFixedNodeBuilder> = ::java_util_stream / "Nodes$DoubleFixedNodeBuilder";
namespace java::util::stream { class Nodes$DoubleSpinedNodeBuilder; }
template<> constexpr auto signature<::java::util::stream::Nodes$DoubleSpinedNodeBuilder> = ::java_util_stream / "Nodes$DoubleSpinedNodeBuilder";
namespace java::util::stream { class Nodes$EmptyNode; }
template<> constexpr auto signature<::java::util::stream::Nodes$EmptyNode> = ::java_util_stream / "Nodes$EmptyNode";
namespace java::util::stream { class Nodes$EmptyNode$OfDouble; }
template<> constexpr auto signature<::java::util::stream::Nodes$EmptyNode$OfDouble> = ::java_util_stream / "Nodes$EmptyNode$OfDouble";
namespace java::util::stream { class Nodes$EmptyNode$OfInt; }
template<> constexpr auto signature<::java::util::stream::Nodes$EmptyNode$OfInt> = ::java_util_stream / "Nodes$EmptyNode$OfInt";
namespace java::util::stream { class Nodes$EmptyNode$OfLong; }
template<> constexpr auto signature<::java::util::stream::Nodes$EmptyNode$OfLong> = ::java_util_stream / "Nodes$EmptyNode$OfLong";
namespace java::util::stream { class Nodes$EmptyNode$OfRef; }
template<> constexpr auto signature<::java::util::stream::Nodes$EmptyNode$OfRef> = ::java_util_stream / "Nodes$EmptyNode$OfRef";
namespace java::util::stream { class Nodes$FixedNodeBuilder; }
template<> constexpr auto signature<::java::util::stream::Nodes$FixedNodeBuilder> = ::java_util_stream / "Nodes$FixedNodeBuilder";
namespace java::util::stream { class Nodes$IntArrayNode; }
template<> constexpr auto signature<::java::util::stream::Nodes$IntArrayNode> = ::java_util_stream / "Nodes$IntArrayNode";
namespace java::util::stream { class Nodes$IntFixedNodeBuilder; }
template<> constexpr auto signature<::java::util::stream::Nodes$IntFixedNodeBuilder> = ::java_util_stream / "Nodes$IntFixedNodeBuilder";
namespace java::util::stream { class Nodes$IntSpinedNodeBuilder; }
template<> constexpr auto signature<::java::util::stream::Nodes$IntSpinedNodeBuilder> = ::java_util_stream / "Nodes$IntSpinedNodeBuilder";
namespace java::util::stream { class Nodes$InternalNodeSpliterator; }
template<> constexpr auto signature<::java::util::stream::Nodes$InternalNodeSpliterator> = ::java_util_stream / "Nodes$InternalNodeSpliterator";
namespace java::util::stream { class Nodes$InternalNodeSpliterator$OfDouble; }
template<> constexpr auto signature<::java::util::stream::Nodes$InternalNodeSpliterator$OfDouble> = ::java_util_stream / "Nodes$InternalNodeSpliterator$OfDouble";
namespace java::util::stream { class Nodes$InternalNodeSpliterator$OfInt; }
template<> constexpr auto signature<::java::util::stream::Nodes$InternalNodeSpliterator$OfInt> = ::java_util_stream / "Nodes$InternalNodeSpliterator$OfInt";
namespace java::util::stream { class Nodes$InternalNodeSpliterator$OfLong; }
template<> constexpr auto signature<::java::util::stream::Nodes$InternalNodeSpliterator$OfLong> = ::java_util_stream / "Nodes$InternalNodeSpliterator$OfLong";
namespace java::util::stream { class Nodes$InternalNodeSpliterator$OfPrimitive; }
template<> constexpr auto signature<::java::util::stream::Nodes$InternalNodeSpliterator$OfPrimitive> = ::java_util_stream / "Nodes$InternalNodeSpliterator$OfPrimitive";
namespace java::util::stream { class Nodes$InternalNodeSpliterator$OfRef; }
template<> constexpr auto signature<::java::util::stream::Nodes$InternalNodeSpliterator$OfRef> = ::java_util_stream / "Nodes$InternalNodeSpliterator$OfRef";
namespace java::util::stream { class Nodes$LongArrayNode; }
template<> constexpr auto signature<::java::util::stream::Nodes$LongArrayNode> = ::java_util_stream / "Nodes$LongArrayNode";
namespace java::util::stream { class Nodes$LongFixedNodeBuilder; }
template<> constexpr auto signature<::java::util::stream::Nodes$LongFixedNodeBuilder> = ::java_util_stream / "Nodes$LongFixedNodeBuilder";
namespace java::util::stream { class Nodes$LongSpinedNodeBuilder; }
template<> constexpr auto signature<::java::util::stream::Nodes$LongSpinedNodeBuilder> = ::java_util_stream / "Nodes$LongSpinedNodeBuilder";
namespace java::util::stream { class Nodes$SizedCollectorTask; }
template<> constexpr auto signature<::java::util::stream::Nodes$SizedCollectorTask> = ::java_util_stream / "Nodes$SizedCollectorTask";
namespace java::util::stream { class Nodes$SizedCollectorTask$OfDouble; }
template<> constexpr auto signature<::java::util::stream::Nodes$SizedCollectorTask$OfDouble> = ::java_util_stream / "Nodes$SizedCollectorTask$OfDouble";
namespace java::util::stream { class Nodes$SizedCollectorTask$OfInt; }
template<> constexpr auto signature<::java::util::stream::Nodes$SizedCollectorTask$OfInt> = ::java_util_stream / "Nodes$SizedCollectorTask$OfInt";
namespace java::util::stream { class Nodes$SizedCollectorTask$OfLong; }
template<> constexpr auto signature<::java::util::stream::Nodes$SizedCollectorTask$OfLong> = ::java_util_stream / "Nodes$SizedCollectorTask$OfLong";
namespace java::util::stream { class Nodes$SizedCollectorTask$OfRef; }
template<> constexpr auto signature<::java::util::stream::Nodes$SizedCollectorTask$OfRef> = ::java_util_stream / "Nodes$SizedCollectorTask$OfRef";
namespace java::util::stream { class Nodes$SpinedNodeBuilder; }
template<> constexpr auto signature<::java::util::stream::Nodes$SpinedNodeBuilder> = ::java_util_stream / "Nodes$SpinedNodeBuilder";
namespace java::util::stream { class Nodes$ToArrayTask; }
template<> constexpr auto signature<::java::util::stream::Nodes$ToArrayTask> = ::java_util_stream / "Nodes$ToArrayTask";
namespace java::util::stream { class Nodes$ToArrayTask$OfDouble; }
template<> constexpr auto signature<::java::util::stream::Nodes$ToArrayTask$OfDouble> = ::java_util_stream / "Nodes$ToArrayTask$OfDouble";
namespace java::util::stream { class Nodes$ToArrayTask$OfInt; }
template<> constexpr auto signature<::java::util::stream::Nodes$ToArrayTask$OfInt> = ::java_util_stream / "Nodes$ToArrayTask$OfInt";
namespace java::util::stream { class Nodes$ToArrayTask$OfLong; }
template<> constexpr auto signature<::java::util::stream::Nodes$ToArrayTask$OfLong> = ::java_util_stream / "Nodes$ToArrayTask$OfLong";
namespace java::util::stream { class Nodes$ToArrayTask$OfPrimitive; }
template<> constexpr auto signature<::java::util::stream::Nodes$ToArrayTask$OfPrimitive> = ::java_util_stream / "Nodes$ToArrayTask$OfPrimitive";
namespace java::util::stream { class Nodes$ToArrayTask$OfRef; }
template<> constexpr auto signature<::java::util::stream::Nodes$ToArrayTask$OfRef> = ::java_util_stream / "Nodes$ToArrayTask$OfRef";
namespace java::util::stream { class PipelineHelper; }
template<> constexpr auto signature<::java::util::stream::PipelineHelper> = ::java_util_stream / "PipelineHelper";
namespace java::util::stream { class ReduceOps; }
template<> constexpr auto signature<::java::util::stream::ReduceOps> = ::java_util_stream / "ReduceOps";
namespace java::util::stream { class ReduceOps$1; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$1> = ::java_util_stream / "ReduceOps$1";
namespace java::util::stream { class ReduceOps$10; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$10> = ::java_util_stream / "ReduceOps$10";
namespace java::util::stream { class ReduceOps$10ReducingSink; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$10ReducingSink> = ::java_util_stream / "ReduceOps$10ReducingSink";
namespace java::util::stream { class ReduceOps$11; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$11> = ::java_util_stream / "ReduceOps$11";
namespace java::util::stream { class ReduceOps$11ReducingSink; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$11ReducingSink> = ::java_util_stream / "ReduceOps$11ReducingSink";
namespace java::util::stream { class ReduceOps$12; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$12> = ::java_util_stream / "ReduceOps$12";
namespace java::util::stream { class ReduceOps$12ReducingSink; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$12ReducingSink> = ::java_util_stream / "ReduceOps$12ReducingSink";
namespace java::util::stream { class ReduceOps$13; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$13> = ::java_util_stream / "ReduceOps$13";
namespace java::util::stream { class ReduceOps$13ReducingSink; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$13ReducingSink> = ::java_util_stream / "ReduceOps$13ReducingSink";
namespace java::util::stream { class ReduceOps$1ReducingSink; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$1ReducingSink> = ::java_util_stream / "ReduceOps$1ReducingSink";
namespace java::util::stream { class ReduceOps$2; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$2> = ::java_util_stream / "ReduceOps$2";
namespace java::util::stream { class ReduceOps$2ReducingSink; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$2ReducingSink> = ::java_util_stream / "ReduceOps$2ReducingSink";
namespace java::util::stream { class ReduceOps$3; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$3> = ::java_util_stream / "ReduceOps$3";
namespace java::util::stream { class ReduceOps$3ReducingSink; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$3ReducingSink> = ::java_util_stream / "ReduceOps$3ReducingSink";
namespace java::util::stream { class ReduceOps$4; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$4> = ::java_util_stream / "ReduceOps$4";
namespace java::util::stream { class ReduceOps$4ReducingSink; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$4ReducingSink> = ::java_util_stream / "ReduceOps$4ReducingSink";
namespace java::util::stream { class ReduceOps$5; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$5> = ::java_util_stream / "ReduceOps$5";
namespace java::util::stream { class ReduceOps$5ReducingSink; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$5ReducingSink> = ::java_util_stream / "ReduceOps$5ReducingSink";
namespace java::util::stream { class ReduceOps$6; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$6> = ::java_util_stream / "ReduceOps$6";
namespace java::util::stream { class ReduceOps$6ReducingSink; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$6ReducingSink> = ::java_util_stream / "ReduceOps$6ReducingSink";
namespace java::util::stream { class ReduceOps$7; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$7> = ::java_util_stream / "ReduceOps$7";
namespace java::util::stream { class ReduceOps$7ReducingSink; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$7ReducingSink> = ::java_util_stream / "ReduceOps$7ReducingSink";
namespace java::util::stream { class ReduceOps$8; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$8> = ::java_util_stream / "ReduceOps$8";
namespace java::util::stream { class ReduceOps$8ReducingSink; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$8ReducingSink> = ::java_util_stream / "ReduceOps$8ReducingSink";
namespace java::util::stream { class ReduceOps$9; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$9> = ::java_util_stream / "ReduceOps$9";
namespace java::util::stream { class ReduceOps$9ReducingSink; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$9ReducingSink> = ::java_util_stream / "ReduceOps$9ReducingSink";
namespace java::util::stream { class ReduceOps$AccumulatingSink; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$AccumulatingSink> = ::java_util_stream / "ReduceOps$AccumulatingSink";
namespace java::util::stream { class ReduceOps$Box; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$Box> = ::java_util_stream / "ReduceOps$Box";
namespace java::util::stream { class ReduceOps$ReduceOp; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$ReduceOp> = ::java_util_stream / "ReduceOps$ReduceOp";
namespace java::util::stream { class ReduceOps$ReduceTask; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$ReduceTask> = ::java_util_stream / "ReduceOps$ReduceTask";
namespace java::util::stream { class ReferencePipeline; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline> = ::java_util_stream / "ReferencePipeline";
namespace java::util::stream { class ReferencePipeline$1; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$1> = ::java_util_stream / "ReferencePipeline$1";
namespace java::util::stream { class ReferencePipeline$10; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$10> = ::java_util_stream / "ReferencePipeline$10";
namespace java::util::stream { class ReferencePipeline$10$1; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$10$1> = ::java_util_stream / "ReferencePipeline$10$1";
namespace java::util::stream { class ReferencePipeline$11; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$11> = ::java_util_stream / "ReferencePipeline$11";
namespace java::util::stream { class ReferencePipeline$11$1; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$11$1> = ::java_util_stream / "ReferencePipeline$11$1";
namespace java::util::stream { class ReferencePipeline$2; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$2> = ::java_util_stream / "ReferencePipeline$2";
namespace java::util::stream { class ReferencePipeline$2$1; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$2$1> = ::java_util_stream / "ReferencePipeline$2$1";
namespace java::util::stream { class ReferencePipeline$3; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$3> = ::java_util_stream / "ReferencePipeline$3";
namespace java::util::stream { class ReferencePipeline$3$1; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$3$1> = ::java_util_stream / "ReferencePipeline$3$1";
namespace java::util::stream { class ReferencePipeline$4; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$4> = ::java_util_stream / "ReferencePipeline$4";
namespace java::util::stream { class ReferencePipeline$4$1; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$4$1> = ::java_util_stream / "ReferencePipeline$4$1";
namespace java::util::stream { class ReferencePipeline$5; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$5> = ::java_util_stream / "ReferencePipeline$5";
namespace java::util::stream { class ReferencePipeline$5$1; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$5$1> = ::java_util_stream / "ReferencePipeline$5$1";
namespace java::util::stream { class ReferencePipeline$6; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$6> = ::java_util_stream / "ReferencePipeline$6";
namespace java::util::stream { class ReferencePipeline$6$1; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$6$1> = ::java_util_stream / "ReferencePipeline$6$1";
namespace java::util::stream { class ReferencePipeline$7; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$7> = ::java_util_stream / "ReferencePipeline$7";
namespace java::util::stream { class ReferencePipeline$7$1; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$7$1> = ::java_util_stream / "ReferencePipeline$7$1";
namespace java::util::stream { class ReferencePipeline$8; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$8> = ::java_util_stream / "ReferencePipeline$8";
namespace java::util::stream { class ReferencePipeline$8$1; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$8$1> = ::java_util_stream / "ReferencePipeline$8$1";
namespace java::util::stream { class ReferencePipeline$9; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$9> = ::java_util_stream / "ReferencePipeline$9";
namespace java::util::stream { class ReferencePipeline$9$1; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$9$1> = ::java_util_stream / "ReferencePipeline$9$1";
namespace java::util::stream { class ReferencePipeline$Head; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$Head> = ::java_util_stream / "ReferencePipeline$Head";
namespace java::util::stream { class ReferencePipeline$StatefulOp; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$StatefulOp> = ::java_util_stream / "ReferencePipeline$StatefulOp";
namespace java::util::stream { class ReferencePipeline$StatelessOp; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$StatelessOp> = ::java_util_stream / "ReferencePipeline$StatelessOp";
namespace java::util::stream { class Sink; }
template<> constexpr auto signature<::java::util::stream::Sink> = ::java_util_stream / "Sink";
namespace java::util::stream { class Sink$ChainedDouble; }
template<> constexpr auto signature<::java::util::stream::Sink$ChainedDouble> = ::java_util_stream / "Sink$ChainedDouble";
namespace java::util::stream { class Sink$ChainedInt; }
template<> constexpr auto signature<::java::util::stream::Sink$ChainedInt> = ::java_util_stream / "Sink$ChainedInt";
namespace java::util::stream { class Sink$ChainedLong; }
template<> constexpr auto signature<::java::util::stream::Sink$ChainedLong> = ::java_util_stream / "Sink$ChainedLong";
namespace java::util::stream { class Sink$ChainedReference; }
template<> constexpr auto signature<::java::util::stream::Sink$ChainedReference> = ::java_util_stream / "Sink$ChainedReference";
namespace java::util::stream { class Sink$OfDouble; }
template<> constexpr auto signature<::java::util::stream::Sink$OfDouble> = ::java_util_stream / "Sink$OfDouble";
namespace java::util::stream { class Sink$OfInt; }
template<> constexpr auto signature<::java::util::stream::Sink$OfInt> = ::java_util_stream / "Sink$OfInt";
namespace java::util::stream { class Sink$OfLong; }
template<> constexpr auto signature<::java::util::stream::Sink$OfLong> = ::java_util_stream / "Sink$OfLong";
namespace java::util::stream { class SliceOps; }
template<> constexpr auto signature<::java::util::stream::SliceOps> = ::java_util_stream / "SliceOps";
namespace java::util::stream { class SliceOps$1; }
template<> constexpr auto signature<::java::util::stream::SliceOps$1> = ::java_util_stream / "SliceOps$1";
namespace java::util::stream { class SliceOps$1$1; }
template<> constexpr auto signature<::java::util::stream::SliceOps$1$1> = ::java_util_stream / "SliceOps$1$1";
namespace java::util::stream { class SliceOps$2; }
template<> constexpr auto signature<::java::util::stream::SliceOps$2> = ::java_util_stream / "SliceOps$2";
namespace java::util::stream { class SliceOps$2$1; }
template<> constexpr auto signature<::java::util::stream::SliceOps$2$1> = ::java_util_stream / "SliceOps$2$1";
namespace java::util::stream { class SliceOps$3; }
template<> constexpr auto signature<::java::util::stream::SliceOps$3> = ::java_util_stream / "SliceOps$3";
namespace java::util::stream { class SliceOps$3$1; }
template<> constexpr auto signature<::java::util::stream::SliceOps$3$1> = ::java_util_stream / "SliceOps$3$1";
namespace java::util::stream { class SliceOps$4; }
template<> constexpr auto signature<::java::util::stream::SliceOps$4> = ::java_util_stream / "SliceOps$4";
namespace java::util::stream { class SliceOps$4$1; }
template<> constexpr auto signature<::java::util::stream::SliceOps$4$1> = ::java_util_stream / "SliceOps$4$1";
namespace java::util::stream { class SliceOps$5; }
template<> constexpr auto signature<::java::util::stream::SliceOps$5> = ::java_util_stream / "SliceOps$5";
namespace java::util::stream { class SliceOps$SliceTask; }
template<> constexpr auto signature<::java::util::stream::SliceOps$SliceTask> = ::java_util_stream / "SliceOps$SliceTask";
namespace java::util::stream { class SortedOps; }
template<> constexpr auto signature<::java::util::stream::SortedOps> = ::java_util_stream / "SortedOps";
namespace java::util::stream { class SortedOps$AbstractDoubleSortingSink; }
template<> constexpr auto signature<::java::util::stream::SortedOps$AbstractDoubleSortingSink> = ::java_util_stream / "SortedOps$AbstractDoubleSortingSink";
namespace java::util::stream { class SortedOps$AbstractIntSortingSink; }
template<> constexpr auto signature<::java::util::stream::SortedOps$AbstractIntSortingSink> = ::java_util_stream / "SortedOps$AbstractIntSortingSink";
namespace java::util::stream { class SortedOps$AbstractLongSortingSink; }
template<> constexpr auto signature<::java::util::stream::SortedOps$AbstractLongSortingSink> = ::java_util_stream / "SortedOps$AbstractLongSortingSink";
namespace java::util::stream { class SortedOps$AbstractRefSortingSink; }
template<> constexpr auto signature<::java::util::stream::SortedOps$AbstractRefSortingSink> = ::java_util_stream / "SortedOps$AbstractRefSortingSink";
namespace java::util::stream { class SortedOps$DoubleSortingSink; }
template<> constexpr auto signature<::java::util::stream::SortedOps$DoubleSortingSink> = ::java_util_stream / "SortedOps$DoubleSortingSink";
namespace java::util::stream { class SortedOps$IntSortingSink; }
template<> constexpr auto signature<::java::util::stream::SortedOps$IntSortingSink> = ::java_util_stream / "SortedOps$IntSortingSink";
namespace java::util::stream { class SortedOps$LongSortingSink; }
template<> constexpr auto signature<::java::util::stream::SortedOps$LongSortingSink> = ::java_util_stream / "SortedOps$LongSortingSink";
namespace java::util::stream { class SortedOps$OfDouble; }
template<> constexpr auto signature<::java::util::stream::SortedOps$OfDouble> = ::java_util_stream / "SortedOps$OfDouble";
namespace java::util::stream { class SortedOps$OfInt; }
template<> constexpr auto signature<::java::util::stream::SortedOps$OfInt> = ::java_util_stream / "SortedOps$OfInt";
namespace java::util::stream { class SortedOps$OfLong; }
template<> constexpr auto signature<::java::util::stream::SortedOps$OfLong> = ::java_util_stream / "SortedOps$OfLong";
namespace java::util::stream { class SortedOps$OfRef; }
template<> constexpr auto signature<::java::util::stream::SortedOps$OfRef> = ::java_util_stream / "SortedOps$OfRef";
namespace java::util::stream { class SortedOps$RefSortingSink; }
template<> constexpr auto signature<::java::util::stream::SortedOps$RefSortingSink> = ::java_util_stream / "SortedOps$RefSortingSink";
namespace java::util::stream { class SortedOps$SizedDoubleSortingSink; }
template<> constexpr auto signature<::java::util::stream::SortedOps$SizedDoubleSortingSink> = ::java_util_stream / "SortedOps$SizedDoubleSortingSink";
namespace java::util::stream { class SortedOps$SizedIntSortingSink; }
template<> constexpr auto signature<::java::util::stream::SortedOps$SizedIntSortingSink> = ::java_util_stream / "SortedOps$SizedIntSortingSink";
namespace java::util::stream { class SortedOps$SizedLongSortingSink; }
template<> constexpr auto signature<::java::util::stream::SortedOps$SizedLongSortingSink> = ::java_util_stream / "SortedOps$SizedLongSortingSink";
namespace java::util::stream { class SortedOps$SizedRefSortingSink; }
template<> constexpr auto signature<::java::util::stream::SortedOps$SizedRefSortingSink> = ::java_util_stream / "SortedOps$SizedRefSortingSink";
namespace java::util::stream { class SpinedBuffer; }
template<> constexpr auto signature<::java::util::stream::SpinedBuffer> = ::java_util_stream / "SpinedBuffer";
namespace java::util::stream { class SpinedBuffer$1Splitr; }
template<> constexpr auto signature<::java::util::stream::SpinedBuffer$1Splitr> = ::java_util_stream / "SpinedBuffer$1Splitr";
namespace java::util::stream { class SpinedBuffer$OfDouble; }
template<> constexpr auto signature<::java::util::stream::SpinedBuffer$OfDouble> = ::java_util_stream / "SpinedBuffer$OfDouble";
namespace java::util::stream { class SpinedBuffer$OfDouble$1Splitr; }
template<> constexpr auto signature<::java::util::stream::SpinedBuffer$OfDouble$1Splitr> = ::java_util_stream / "SpinedBuffer$OfDouble$1Splitr";
namespace java::util::stream { class SpinedBuffer$OfInt; }
template<> constexpr auto signature<::java::util::stream::SpinedBuffer$OfInt> = ::java_util_stream / "SpinedBuffer$OfInt";
namespace java::util::stream { class SpinedBuffer$OfInt$1Splitr; }
template<> constexpr auto signature<::java::util::stream::SpinedBuffer$OfInt$1Splitr> = ::java_util_stream / "SpinedBuffer$OfInt$1Splitr";
namespace java::util::stream { class SpinedBuffer$OfLong; }
template<> constexpr auto signature<::java::util::stream::SpinedBuffer$OfLong> = ::java_util_stream / "SpinedBuffer$OfLong";
namespace java::util::stream { class SpinedBuffer$OfLong$1Splitr; }
template<> constexpr auto signature<::java::util::stream::SpinedBuffer$OfLong$1Splitr> = ::java_util_stream / "SpinedBuffer$OfLong$1Splitr";
namespace java::util::stream { class SpinedBuffer$OfPrimitive; }
template<> constexpr auto signature<::java::util::stream::SpinedBuffer$OfPrimitive> = ::java_util_stream / "SpinedBuffer$OfPrimitive";
namespace java::util::stream { class SpinedBuffer$OfPrimitive$BaseSpliterator; }
template<> constexpr auto signature<::java::util::stream::SpinedBuffer$OfPrimitive$BaseSpliterator> = ::java_util_stream / "SpinedBuffer$OfPrimitive$BaseSpliterator";
namespace java::util::stream { class Stream; }
template<> constexpr auto signature<::java::util::stream::Stream> = ::java_util_stream / "Stream";
namespace java::util::stream { class Stream$1; }
template<> constexpr auto signature<::java::util::stream::Stream$1> = ::java_util_stream / "Stream$1";
namespace java::util::stream { class Stream$Builder; }
template<> constexpr auto signature<::java::util::stream::Stream$Builder> = ::java_util_stream / "Stream$Builder";
namespace java::util::stream { class StreamOpFlag; }
template<> constexpr auto signature<::java::util::stream::StreamOpFlag> = ::java_util_stream / "StreamOpFlag";
namespace java::util::stream { class StreamOpFlag$MaskBuilder; }
template<> constexpr auto signature<::java::util::stream::StreamOpFlag$MaskBuilder> = ::java_util_stream / "StreamOpFlag$MaskBuilder";
namespace java::util::stream { class StreamOpFlag$Type; }
template<> constexpr auto signature<::java::util::stream::StreamOpFlag$Type> = ::java_util_stream / "StreamOpFlag$Type";
namespace java::util::stream { class StreamShape; }
template<> constexpr auto signature<::java::util::stream::StreamShape> = ::java_util_stream / "StreamShape";
namespace java::util::stream { class StreamSpliterators; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators> = ::java_util_stream / "StreamSpliterators";
namespace java::util::stream { class StreamSpliterators$1; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$1> = ::java_util_stream / "StreamSpliterators$1";
namespace java::util::stream { class StreamSpliterators$AbstractWrappingSpliterator; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$AbstractWrappingSpliterator> = ::java_util_stream / "StreamSpliterators$AbstractWrappingSpliterator";
namespace java::util::stream { class StreamSpliterators$ArrayBuffer; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$ArrayBuffer> = ::java_util_stream / "StreamSpliterators$ArrayBuffer";
namespace java::util::stream { class StreamSpliterators$ArrayBuffer$OfDouble; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$ArrayBuffer$OfDouble> = ::java_util_stream / "StreamSpliterators$ArrayBuffer$OfDouble";
namespace java::util::stream { class StreamSpliterators$ArrayBuffer$OfInt; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$ArrayBuffer$OfInt> = ::java_util_stream / "StreamSpliterators$ArrayBuffer$OfInt";
namespace java::util::stream { class StreamSpliterators$ArrayBuffer$OfLong; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$ArrayBuffer$OfLong> = ::java_util_stream / "StreamSpliterators$ArrayBuffer$OfLong";
namespace java::util::stream { class StreamSpliterators$ArrayBuffer$OfPrimitive; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$ArrayBuffer$OfPrimitive> = ::java_util_stream / "StreamSpliterators$ArrayBuffer$OfPrimitive";
namespace java::util::stream { class StreamSpliterators$ArrayBuffer$OfRef; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$ArrayBuffer$OfRef> = ::java_util_stream / "StreamSpliterators$ArrayBuffer$OfRef";
namespace java::util::stream { class StreamSpliterators$DelegatingSpliterator; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$DelegatingSpliterator> = ::java_util_stream / "StreamSpliterators$DelegatingSpliterator";
namespace java::util::stream { class StreamSpliterators$DelegatingSpliterator$OfDouble; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$DelegatingSpliterator$OfDouble> = ::java_util_stream / "StreamSpliterators$DelegatingSpliterator$OfDouble";
namespace java::util::stream { class StreamSpliterators$DelegatingSpliterator$OfInt; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$DelegatingSpliterator$OfInt> = ::java_util_stream / "StreamSpliterators$DelegatingSpliterator$OfInt";
namespace java::util::stream { class StreamSpliterators$DelegatingSpliterator$OfLong; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$DelegatingSpliterator$OfLong> = ::java_util_stream / "StreamSpliterators$DelegatingSpliterator$OfLong";
namespace java::util::stream { class StreamSpliterators$DelegatingSpliterator$OfPrimitive; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$DelegatingSpliterator$OfPrimitive> = ::java_util_stream / "StreamSpliterators$DelegatingSpliterator$OfPrimitive";
namespace java::util::stream { class StreamSpliterators$DistinctSpliterator; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$DistinctSpliterator> = ::java_util_stream / "StreamSpliterators$DistinctSpliterator";
namespace java::util::stream { class StreamSpliterators$DoubleWrappingSpliterator; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$DoubleWrappingSpliterator> = ::java_util_stream / "StreamSpliterators$DoubleWrappingSpliterator";
namespace java::util::stream { class StreamSpliterators$InfiniteSupplyingSpliterator; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$InfiniteSupplyingSpliterator> = ::java_util_stream / "StreamSpliterators$InfiniteSupplyingSpliterator";
namespace java::util::stream { class StreamSpliterators$InfiniteSupplyingSpliterator$OfDouble; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$InfiniteSupplyingSpliterator$OfDouble> = ::java_util_stream / "StreamSpliterators$InfiniteSupplyingSpliterator$OfDouble";
namespace java::util::stream { class StreamSpliterators$InfiniteSupplyingSpliterator$OfInt; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$InfiniteSupplyingSpliterator$OfInt> = ::java_util_stream / "StreamSpliterators$InfiniteSupplyingSpliterator$OfInt";
namespace java::util::stream { class StreamSpliterators$InfiniteSupplyingSpliterator$OfLong; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$InfiniteSupplyingSpliterator$OfLong> = ::java_util_stream / "StreamSpliterators$InfiniteSupplyingSpliterator$OfLong";
namespace java::util::stream { class StreamSpliterators$InfiniteSupplyingSpliterator$OfRef; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$InfiniteSupplyingSpliterator$OfRef> = ::java_util_stream / "StreamSpliterators$InfiniteSupplyingSpliterator$OfRef";
namespace java::util::stream { class StreamSpliterators$IntWrappingSpliterator; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$IntWrappingSpliterator> = ::java_util_stream / "StreamSpliterators$IntWrappingSpliterator";
namespace java::util::stream { class StreamSpliterators$LongWrappingSpliterator; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$LongWrappingSpliterator> = ::java_util_stream / "StreamSpliterators$LongWrappingSpliterator";
namespace java::util::stream { class StreamSpliterators$SliceSpliterator; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$SliceSpliterator> = ::java_util_stream / "StreamSpliterators$SliceSpliterator";
namespace java::util::stream { class StreamSpliterators$SliceSpliterator$OfDouble; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$SliceSpliterator$OfDouble> = ::java_util_stream / "StreamSpliterators$SliceSpliterator$OfDouble";
namespace java::util::stream { class StreamSpliterators$SliceSpliterator$OfInt; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$SliceSpliterator$OfInt> = ::java_util_stream / "StreamSpliterators$SliceSpliterator$OfInt";
namespace java::util::stream { class StreamSpliterators$SliceSpliterator$OfLong; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$SliceSpliterator$OfLong> = ::java_util_stream / "StreamSpliterators$SliceSpliterator$OfLong";
namespace java::util::stream { class StreamSpliterators$SliceSpliterator$OfPrimitive; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$SliceSpliterator$OfPrimitive> = ::java_util_stream / "StreamSpliterators$SliceSpliterator$OfPrimitive";
namespace java::util::stream { class StreamSpliterators$SliceSpliterator$OfRef; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$SliceSpliterator$OfRef> = ::java_util_stream / "StreamSpliterators$SliceSpliterator$OfRef";
namespace java::util::stream { class StreamSpliterators$UnorderedSliceSpliterator; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$UnorderedSliceSpliterator> = ::java_util_stream / "StreamSpliterators$UnorderedSliceSpliterator";
namespace java::util::stream { class StreamSpliterators$UnorderedSliceSpliterator$OfDouble; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$UnorderedSliceSpliterator$OfDouble> = ::java_util_stream / "StreamSpliterators$UnorderedSliceSpliterator$OfDouble";
namespace java::util::stream { class StreamSpliterators$UnorderedSliceSpliterator$OfInt; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$UnorderedSliceSpliterator$OfInt> = ::java_util_stream / "StreamSpliterators$UnorderedSliceSpliterator$OfInt";
namespace java::util::stream { class StreamSpliterators$UnorderedSliceSpliterator$OfLong; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$UnorderedSliceSpliterator$OfLong> = ::java_util_stream / "StreamSpliterators$UnorderedSliceSpliterator$OfLong";
namespace java::util::stream { class StreamSpliterators$UnorderedSliceSpliterator$OfPrimitive; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$UnorderedSliceSpliterator$OfPrimitive> = ::java_util_stream / "StreamSpliterators$UnorderedSliceSpliterator$OfPrimitive";
namespace java::util::stream { class StreamSpliterators$UnorderedSliceSpliterator$OfRef; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$UnorderedSliceSpliterator$OfRef> = ::java_util_stream / "StreamSpliterators$UnorderedSliceSpliterator$OfRef";
namespace java::util::stream { class StreamSpliterators$UnorderedSliceSpliterator$PermitStatus; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$UnorderedSliceSpliterator$PermitStatus> = ::java_util_stream / "StreamSpliterators$UnorderedSliceSpliterator$PermitStatus";
namespace java::util::stream { class StreamSpliterators$WrappingSpliterator; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$WrappingSpliterator> = ::java_util_stream / "StreamSpliterators$WrappingSpliterator";
namespace java::util::stream { class StreamSupport; }
template<> constexpr auto signature<::java::util::stream::StreamSupport> = ::java_util_stream / "StreamSupport";
namespace java::util::stream { class Streams; }
template<> constexpr auto signature<::java::util::stream::Streams> = ::java_util_stream / "Streams";
namespace java::util::stream { class Streams$1; }
template<> constexpr auto signature<::java::util::stream::Streams$1> = ::java_util_stream / "Streams$1";
namespace java::util::stream { class Streams$2; }
template<> constexpr auto signature<::java::util::stream::Streams$2> = ::java_util_stream / "Streams$2";
namespace java::util::stream { class Streams$AbstractStreamBuilderImpl; }
template<> constexpr auto signature<::java::util::stream::Streams$AbstractStreamBuilderImpl> = ::java_util_stream / "Streams$AbstractStreamBuilderImpl";
namespace java::util::stream { class Streams$ConcatSpliterator; }
template<> constexpr auto signature<::java::util::stream::Streams$ConcatSpliterator> = ::java_util_stream / "Streams$ConcatSpliterator";
namespace java::util::stream { class Streams$ConcatSpliterator$OfDouble; }
template<> constexpr auto signature<::java::util::stream::Streams$ConcatSpliterator$OfDouble> = ::java_util_stream / "Streams$ConcatSpliterator$OfDouble";
namespace java::util::stream { class Streams$ConcatSpliterator$OfInt; }
template<> constexpr auto signature<::java::util::stream::Streams$ConcatSpliterator$OfInt> = ::java_util_stream / "Streams$ConcatSpliterator$OfInt";
namespace java::util::stream { class Streams$ConcatSpliterator$OfLong; }
template<> constexpr auto signature<::java::util::stream::Streams$ConcatSpliterator$OfLong> = ::java_util_stream / "Streams$ConcatSpliterator$OfLong";
namespace java::util::stream { class Streams$ConcatSpliterator$OfPrimitive; }
template<> constexpr auto signature<::java::util::stream::Streams$ConcatSpliterator$OfPrimitive> = ::java_util_stream / "Streams$ConcatSpliterator$OfPrimitive";
namespace java::util::stream { class Streams$ConcatSpliterator$OfRef; }
template<> constexpr auto signature<::java::util::stream::Streams$ConcatSpliterator$OfRef> = ::java_util_stream / "Streams$ConcatSpliterator$OfRef";
namespace java::util::stream { class Streams$DoubleStreamBuilderImpl; }
template<> constexpr auto signature<::java::util::stream::Streams$DoubleStreamBuilderImpl> = ::java_util_stream / "Streams$DoubleStreamBuilderImpl";
namespace java::util::stream { class Streams$IntStreamBuilderImpl; }
template<> constexpr auto signature<::java::util::stream::Streams$IntStreamBuilderImpl> = ::java_util_stream / "Streams$IntStreamBuilderImpl";
namespace java::util::stream { class Streams$LongStreamBuilderImpl; }
template<> constexpr auto signature<::java::util::stream::Streams$LongStreamBuilderImpl> = ::java_util_stream / "Streams$LongStreamBuilderImpl";
namespace java::util::stream { class Streams$RangeIntSpliterator; }
template<> constexpr auto signature<::java::util::stream::Streams$RangeIntSpliterator> = ::java_util_stream / "Streams$RangeIntSpliterator";
namespace java::util::stream { class Streams$RangeLongSpliterator; }
template<> constexpr auto signature<::java::util::stream::Streams$RangeLongSpliterator> = ::java_util_stream / "Streams$RangeLongSpliterator";
namespace java::util::stream { class Streams$StreamBuilderImpl; }
template<> constexpr auto signature<::java::util::stream::Streams$StreamBuilderImpl> = ::java_util_stream / "Streams$StreamBuilderImpl";
namespace java::util::stream { class TerminalOp; }
template<> constexpr auto signature<::java::util::stream::TerminalOp> = ::java_util_stream / "TerminalOp";
namespace java::util::stream { class TerminalSink; }
template<> constexpr auto signature<::java::util::stream::TerminalSink> = ::java_util_stream / "TerminalSink";
namespace java::util::stream { class Tripwire; }
template<> constexpr auto signature<::java::util::stream::Tripwire> = ::java_util_stream / "Tripwire";

#endif
