#ifndef java_util_regex_Pattern_HPP
#define java_util_regex_Pattern_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::regex::Pattern : public jObject<::java::util::regex::Pattern, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_regex / "Pattern";

	constexpr static Enume field_signatures{
		jField<::jint>("CANON_EQ"), //
		jField<::jint>("CASE_INSENSITIVE"), //
		jField<::jint>("COMMENTS"), //
		jField<::jint>("DOTALL"), //
		jField<::jint>("LITERAL"), //
		jField<::jint>("MULTILINE"), //
		jField<::jint>("UNICODE_CASE"), //
		jField<::jint>("UNICODE_CHARACTER_CLASS"), //
		jField<::jint>("UNIX_LINES"), //
	};

	template<typename F = ::jint>
	static auto CANON_EQ() {
		static_assert(field_signatures[jField<F>("CANON_EQ")] != -1);
		return sat<F>("CANON_EQ");
	}

	template<typename F = ::jint>
	static auto CASE_INSENSITIVE() {
		static_assert(field_signatures[jField<F>("CASE_INSENSITIVE")] != -1);
		return sat<F>("CASE_INSENSITIVE");
	}

	template<typename F = ::jint>
	static auto COMMENTS() {
		static_assert(field_signatures[jField<F>("COMMENTS")] != -1);
		return sat<F>("COMMENTS");
	}

	template<typename F = ::jint>
	static auto DOTALL() {
		static_assert(field_signatures[jField<F>("DOTALL")] != -1);
		return sat<F>("DOTALL");
	}

	template<typename F = ::jint>
	static auto LITERAL() {
		static_assert(field_signatures[jField<F>("LITERAL")] != -1);
		return sat<F>("LITERAL");
	}

	template<typename F = ::jint>
	static auto MULTILINE() {
		static_assert(field_signatures[jField<F>("MULTILINE")] != -1);
		return sat<F>("MULTILINE");
	}

	template<typename F = ::jint>
	static auto UNICODE_CASE() {
		static_assert(field_signatures[jField<F>("UNICODE_CASE")] != -1);
		return sat<F>("UNICODE_CASE");
	}

	template<typename F = ::jint>
	static auto UNICODE_CHARACTER_CLASS() {
		static_assert(field_signatures[jField<F>("UNICODE_CHARACTER_CLASS")] != -1);
		return sat<F>("UNICODE_CHARACTER_CLASS");
	}

	template<typename F = ::jint>
	static auto UNIX_LINES() {
		static_assert(field_signatures[jField<F>("UNIX_LINES")] != -1);
		return sat<F>("UNIX_LINES");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::util::function::Predicate()>("asPredicate"), //
		jMethod<::java::util::regex::Pattern(::java::lang::String)>("compile"), //
		jMethod<::java::util::regex::Pattern(::java::lang::String, ::jint)>("compile"), //
		jMethod<::jint()>("flags"), //
		jMethod<::java::util::regex::Matcher(::java::lang::CharSequence)>("matcher"), //
		jMethod<::jboolean(::java::lang::String, ::java::lang::CharSequence)>("matches"), //
		jMethod<::java::lang::String()>("pattern"), //
		jMethod<::java::lang::String(::java::lang::String)>("quote"), //
		jMethod<::java::lang::String *(::java::lang::CharSequence)>("split"), //
		jMethod<::java::lang::String *(::java::lang::CharSequence, ::jint)>("split"), //
		jMethod<::java::util::stream::Stream(::java::lang::CharSequence)>("splitAsStream"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::util::function::Predicate, typename... Args>
	auto asPredicate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("asPredicate")] != -1);
		return call<R>("asPredicate", forward<Args>(args)...);
	}

	template<typename R = ::java::util::regex::Pattern, typename... Args>
	static auto compile(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("compile")] != -1);
		return scall<R>("compile", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto flags(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("flags")] != -1);
		return call<R>("flags", forward<Args>(args)...);
	}

	template<typename R = ::java::util::regex::Matcher, typename... Args>
	auto matcher(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("matcher")] != -1);
		return call<R>("matcher", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto matches(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("matches")] != -1);
		return scall<R>("matches", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto pattern(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("pattern")] != -1);
		return call<R>("pattern", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto quote(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("quote")] != -1);
		return scall<R>("quote", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto split(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("split")] != -1);
		return call<R>("split", forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::Stream, typename... Args>
	auto splitAsStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("splitAsStream")] != -1);
		return call<R>("splitAsStream", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
