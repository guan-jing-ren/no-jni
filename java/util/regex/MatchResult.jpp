#ifndef java_util_regex_MatchResult_HPP
#define java_util_regex_MatchResult_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::regex::MatchResult : public jObject<::java::util::regex::MatchResult, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_regex / "MatchResult";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint()>("end"), //
		jMethod<::jint(::jint)>("end"), //
		jMethod<::java::lang::String()>("group"), //
		jMethod<::java::lang::String(::jint)>("group"), //
		jMethod<::jint()>("groupCount"), //
		jMethod<::jint()>("start"), //
		jMethod<::jint(::jint)>("start"), //
	};

	template<typename R = ::jint, typename... Args>
	auto end(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("end")] != -1);
		return call<R>("end", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto group(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("group")] != -1);
		return call<R>("group", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto groupCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("groupCount")] != -1);
		return call<R>("groupCount", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto start(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("start")] != -1);
		return call<R>("start", forward<Args>(args)...);
	}

};

#endif
