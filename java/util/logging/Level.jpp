#ifndef java_util_logging_Level_HPP
#define java_util_logging_Level_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::logging::Level : public jObject<::java::util::logging::Level, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_logging / "Level";

	constexpr static Enume field_signatures{
		jField<::java::util::logging::Level>("ALL"), //
		jField<::java::util::logging::Level>("CONFIG"), //
		jField<::java::util::logging::Level>("FINE"), //
		jField<::java::util::logging::Level>("FINER"), //
		jField<::java::util::logging::Level>("FINEST"), //
		jField<::java::util::logging::Level>("INFO"), //
		jField<::java::util::logging::Level>("OFF"), //
		jField<::java::util::logging::Level>("SEVERE"), //
		jField<::java::util::logging::Level>("WARNING"), //
	};

	template<typename F = ::java::util::logging::Level>
	static auto ALL() {
		static_assert(field_signatures[jField<F>("ALL")] != -1);
		return sat<F>("ALL");
	}

	template<typename F = ::java::util::logging::Level>
	static auto CONFIG() {
		static_assert(field_signatures[jField<F>("CONFIG")] != -1);
		return sat<F>("CONFIG");
	}

	template<typename F = ::java::util::logging::Level>
	static auto FINE() {
		static_assert(field_signatures[jField<F>("FINE")] != -1);
		return sat<F>("FINE");
	}

	template<typename F = ::java::util::logging::Level>
	static auto FINER() {
		static_assert(field_signatures[jField<F>("FINER")] != -1);
		return sat<F>("FINER");
	}

	template<typename F = ::java::util::logging::Level>
	static auto FINEST() {
		static_assert(field_signatures[jField<F>("FINEST")] != -1);
		return sat<F>("FINEST");
	}

	template<typename F = ::java::util::logging::Level>
	static auto INFO() {
		static_assert(field_signatures[jField<F>("INFO")] != -1);
		return sat<F>("INFO");
	}

	template<typename F = ::java::util::logging::Level>
	static auto OFF() {
		static_assert(field_signatures[jField<F>("OFF")] != -1);
		return sat<F>("OFF");
	}

	template<typename F = ::java::util::logging::Level>
	static auto SEVERE() {
		static_assert(field_signatures[jField<F>("SEVERE")] != -1);
		return sat<F>("SEVERE");
	}

	template<typename F = ::java::util::logging::Level>
	static auto WARNING() {
		static_assert(field_signatures[jField<F>("WARNING")] != -1);
		return sat<F>("WARNING");
	}

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::String()>("getLocalizedName"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::lang::String()>("getResourceBundleName"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jint()>("intValue"), //
		jMethod<::java::util::logging::Level(::java::lang::String)>("parse"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLocalizedName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalizedName")] != -1);
		return call<R>("getLocalizedName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getResourceBundleName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResourceBundleName")] != -1);
		return call<R>("getResourceBundleName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto intValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("intValue")] != -1);
		return call<R>("intValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::logging::Level, typename... Args>
	static auto parse(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parse")] != -1);
		return scall<R>("parse", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
