#ifndef java_util_logging_Handler_HPP
#define java_util_logging_Handler_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::logging::Handler : public jObject<::java::util::logging::Handler, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_logging / "Handler";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("close"), //
		jMethod<::jvoid()>("flush"), //
		jMethod<::java::lang::String()>("getEncoding"), //
		jMethod<::java::util::logging::ErrorManager()>("getErrorManager"), //
		jMethod<::java::util::logging::Filter()>("getFilter"), //
		jMethod<::java::util::logging::Formatter()>("getFormatter"), //
		jMethod<::java::util::logging::Level()>("getLevel"), //
		jMethod<::jboolean(::java::util::logging::LogRecord)>("isLoggable"), //
		jMethod<::jvoid(::java::util::logging::LogRecord)>("publish"), //
		jMethod<::jvoid(::java::lang::String)>("setEncoding"), //
		jMethod<::jvoid(::java::util::logging::ErrorManager)>("setErrorManager"), //
		jMethod<::jvoid(::java::util::logging::Filter)>("setFilter"), //
		jMethod<::jvoid(::java::util::logging::Formatter)>("setFormatter"), //
		jMethod<::jvoid(::java::util::logging::Level)>("setLevel"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto flush(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("flush")] != -1);
		return call<R>("flush", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getEncoding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEncoding")] != -1);
		return call<R>("getEncoding", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::logging::ErrorManager, typename... Args>
	auto getErrorManager(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getErrorManager")] != -1);
		return call<R>("getErrorManager", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::logging::Filter, typename... Args>
	auto getFilter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFilter")] != -1);
		return call<R>("getFilter", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::logging::Formatter, typename... Args>
	auto getFormatter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFormatter")] != -1);
		return call<R>("getFormatter", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::logging::Level, typename... Args>
	auto getLevel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLevel")] != -1);
		return call<R>("getLevel", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLoggable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLoggable")] != -1);
		return call<R>("isLoggable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto publish(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("publish")] != -1);
		return call<R>("publish", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEncoding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEncoding")] != -1);
		return call<R>("setEncoding", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setErrorManager(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setErrorManager")] != -1);
		return call<R>("setErrorManager", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFilter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFilter")] != -1);
		return call<R>("setFilter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFormatter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFormatter")] != -1);
		return call<R>("setFormatter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLevel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLevel")] != -1);
		return call<R>("setLevel", std::forward<Args>(args)...);
	}

};

#endif
