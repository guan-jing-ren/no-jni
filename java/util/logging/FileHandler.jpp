#ifndef java_util_logging_FileHandler_HPP
#define java_util_logging_FileHandler_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::logging::FileHandler : public jObject<::java::util::logging::FileHandler, ::java::util::logging::StreamHandler> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_logging / "FileHandler";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::java::lang::String, ::jint, ::jint, ::jboolean)>(), //
		jConstructor<::jvoid(::java::lang::String, ::jboolean)>(), //
		jMethod<::jvoid()>("close"), //
		jMethod<::jvoid(::java::util::logging::LogRecord)>("publish"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto publish(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("publish")] != -1);
		return call<R>("publish", std::forward<Args>(args)...);
	}

};

#endif
