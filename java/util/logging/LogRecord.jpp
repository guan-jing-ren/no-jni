#ifndef java_util_logging_LogRecord_HPP
#define java_util_logging_LogRecord_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::logging::LogRecord : public jObject<::java::util::logging::LogRecord, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_logging / "LogRecord";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::util::logging::Level, ::java::lang::String)>(), //
		jMethod<::java::util::logging::Level()>("getLevel"), //
		jMethod<::java::lang::String()>("getLoggerName"), //
		jMethod<::java::lang::String()>("getMessage"), //
		jMethod<::jlong()>("getMillis"), //
		jMethod<::java::lang::Object *()>("getParameters"), //
		jMethod<::java::util::ResourceBundle()>("getResourceBundle"), //
		jMethod<::java::lang::String()>("getResourceBundleName"), //
		jMethod<::jlong()>("getSequenceNumber"), //
		jMethod<::java::lang::String()>("getSourceClassName"), //
		jMethod<::java::lang::String()>("getSourceMethodName"), //
		jMethod<::jint()>("getThreadID"), //
		jMethod<::java::lang::Throwable()>("getThrown"), //
		jMethod<::jvoid(::java::util::logging::Level)>("setLevel"), //
		jMethod<::jvoid(::java::lang::String)>("setLoggerName"), //
		jMethod<::jvoid(::java::lang::String)>("setMessage"), //
		jMethod<::jvoid(::jlong)>("setMillis"), //
		jMethod<::jvoid(::java::lang::Object *)>("setParameters"), //
		jMethod<::jvoid(::java::util::ResourceBundle)>("setResourceBundle"), //
		jMethod<::jvoid(::java::lang::String)>("setResourceBundleName"), //
		jMethod<::jvoid(::jlong)>("setSequenceNumber"), //
		jMethod<::jvoid(::java::lang::String)>("setSourceClassName"), //
		jMethod<::jvoid(::java::lang::String)>("setSourceMethodName"), //
		jMethod<::jvoid(::jint)>("setThreadID"), //
		jMethod<::jvoid(::java::lang::Throwable)>("setThrown"), //
	};

	template<typename R = ::java::util::logging::Level, typename... Args>
	auto getLevel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLevel")] != -1);
		return call<R>("getLevel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLoggerName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLoggerName")] != -1);
		return call<R>("getLoggerName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMessage")] != -1);
		return call<R>("getMessage", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getMillis(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMillis")] != -1);
		return call<R>("getMillis", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object *, typename... Args>
	auto getParameters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParameters")] != -1);
		return call<R>("getParameters", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::ResourceBundle, typename... Args>
	auto getResourceBundle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResourceBundle")] != -1);
		return call<R>("getResourceBundle", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getResourceBundleName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResourceBundleName")] != -1);
		return call<R>("getResourceBundleName", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getSequenceNumber(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSequenceNumber")] != -1);
		return call<R>("getSequenceNumber", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSourceClassName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSourceClassName")] != -1);
		return call<R>("getSourceClassName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSourceMethodName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSourceMethodName")] != -1);
		return call<R>("getSourceMethodName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getThreadID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getThreadID")] != -1);
		return call<R>("getThreadID", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Throwable, typename... Args>
	auto getThrown(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getThrown")] != -1);
		return call<R>("getThrown", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLevel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLevel")] != -1);
		return call<R>("setLevel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLoggerName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLoggerName")] != -1);
		return call<R>("setLoggerName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMessage")] != -1);
		return call<R>("setMessage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMillis(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMillis")] != -1);
		return call<R>("setMillis", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setParameters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setParameters")] != -1);
		return call<R>("setParameters", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setResourceBundle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setResourceBundle")] != -1);
		return call<R>("setResourceBundle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setResourceBundleName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setResourceBundleName")] != -1);
		return call<R>("setResourceBundleName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSequenceNumber(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSequenceNumber")] != -1);
		return call<R>("setSequenceNumber", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSourceClassName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSourceClassName")] != -1);
		return call<R>("setSourceClassName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSourceMethodName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSourceMethodName")] != -1);
		return call<R>("setSourceMethodName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setThreadID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setThreadID")] != -1);
		return call<R>("setThreadID", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setThrown(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setThrown")] != -1);
		return call<R>("setThrown", std::forward<Args>(args)...);
	}

};

#endif
