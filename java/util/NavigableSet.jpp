#ifndef java_util_NavigableSet_HPP
#define java_util_NavigableSet_HPP

#include "../../jfwd_decl.hpp"

class ::java::util::NavigableSet : public jObject<::java::util::NavigableSet, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util / "NavigableSet";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::Object)>("add"), //
		jMethod<::jboolean(::java::util::Collection)>("addAll"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("ceiling"), //
		jMethod<::jvoid()>("clear"), //
		jMethod<::java::util::Comparator()>("comparator"), //
		jMethod<::jboolean(::java::lang::Object)>("contains"), //
		jMethod<::jboolean(::java::util::Collection)>("containsAll"), //
		jMethod<::java::util::Iterator()>("descendingIterator"), //
		jMethod<::java::util::NavigableSet()>("descendingSet"), //
		jMethod<::java::lang::Object()>("first"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("floor"), //
		jMethod<::java::util::SortedSet(::java::lang::Object)>("headSet"), //
		jMethod<::java::util::NavigableSet(::java::lang::Object, ::jboolean)>("headSet"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("higher"), //
		jMethod<::jboolean()>("isEmpty"), //
		jMethod<::java::util::Iterator()>("iterator"), //
		jMethod<::java::lang::Object()>("last"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("lower"), //
		jMethod<::java::lang::Object()>("pollFirst"), //
		jMethod<::java::lang::Object()>("pollLast"), //
		jMethod<::jboolean(::java::lang::Object)>("remove"), //
		jMethod<::jboolean(::java::util::Collection)>("removeAll"), //
		jMethod<::jboolean(::java::util::Collection)>("retainAll"), //
		jMethod<::jint()>("size"), //
		jMethod<::java::util::Spliterator()>("spliterator"), //
		jMethod<::java::util::SortedSet(::java::lang::Object, ::java::lang::Object)>("subSet"), //
		jMethod<::java::util::NavigableSet(::java::lang::Object, ::jboolean, ::java::lang::Object, ::jboolean)>("subSet"), //
		jMethod<::java::util::SortedSet(::java::lang::Object)>("tailSet"), //
		jMethod<::java::util::NavigableSet(::java::lang::Object, ::jboolean)>("tailSet"), //
		jMethod<::java::lang::Object *()>("toArray"), //
		jMethod<::java::lang::Object *(::java::lang::Object *)>("toArray"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto addAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addAll")] != -1);
		return call<R>("addAll", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto ceiling(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ceiling")] != -1);
		return call<R>("ceiling", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Comparator, typename... Args>
	auto comparator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("comparator")] != -1);
		return call<R>("comparator", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto contains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("contains")] != -1);
		return call<R>("contains", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto containsAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("containsAll")] != -1);
		return call<R>("containsAll", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto descendingIterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("descendingIterator")] != -1);
		return call<R>("descendingIterator", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::NavigableSet, typename... Args>
	auto descendingSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("descendingSet")] != -1);
		return call<R>("descendingSet", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto first(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("first")] != -1);
		return call<R>("first", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto floor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("floor")] != -1);
		return call<R>("floor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::SortedSet, typename... Args>
	auto headSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("headSet")] != -1);
		return call<R>("headSet", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto higher(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("higher")] != -1);
		return call<R>("higher", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEmpty")] != -1);
		return call<R>("isEmpty", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto iterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("iterator")] != -1);
		return call<R>("iterator", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto last(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("last")] != -1);
		return call<R>("last", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto lower(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lower")] != -1);
		return call<R>("lower", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto pollFirst(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("pollFirst")] != -1);
		return call<R>("pollFirst", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto pollLast(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("pollLast")] != -1);
		return call<R>("pollLast", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto removeAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAll")] != -1);
		return call<R>("removeAll", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto retainAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("retainAll")] != -1);
		return call<R>("retainAll", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto size(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("size")] != -1);
		return call<R>("size", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Spliterator, typename... Args>
	auto spliterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("spliterator")] != -1);
		return call<R>("spliterator", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::SortedSet, typename... Args>
	auto subSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("subSet")] != -1);
		return call<R>("subSet", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::SortedSet, typename... Args>
	auto tailSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("tailSet")] != -1);
		return call<R>("tailSet", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object *, typename... Args>
	auto toArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toArray")] != -1);
		return call<R>("toArray", std::forward<Args>(args)...);
	}

};

#endif
