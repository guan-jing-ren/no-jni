#ifndef java_util_Deque_HPP
#define java_util_Deque_HPP

#include "../../jfwd_decl.hpp"

class ::java::util::Deque : public jObject<::java::util::Deque, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util / "Deque";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::Object)>("add"), //
		jMethod<::jboolean(::java::util::Collection)>("addAll"), //
		jMethod<::jvoid(::java::lang::Object)>("addFirst"), //
		jMethod<::jvoid(::java::lang::Object)>("addLast"), //
		jMethod<::jvoid()>("clear"), //
		jMethod<::jboolean(::java::lang::Object)>("contains"), //
		jMethod<::jboolean(::java::util::Collection)>("containsAll"), //
		jMethod<::java::util::Iterator()>("descendingIterator"), //
		jMethod<::java::lang::Object()>("element"), //
		jMethod<::java::lang::Object()>("getFirst"), //
		jMethod<::java::lang::Object()>("getLast"), //
		jMethod<::jboolean()>("isEmpty"), //
		jMethod<::java::util::Iterator()>("iterator"), //
		jMethod<::jboolean(::java::lang::Object)>("offer"), //
		jMethod<::jboolean(::java::lang::Object)>("offerFirst"), //
		jMethod<::jboolean(::java::lang::Object)>("offerLast"), //
		jMethod<::java::lang::Object()>("peek"), //
		jMethod<::java::lang::Object()>("peekFirst"), //
		jMethod<::java::lang::Object()>("peekLast"), //
		jMethod<::java::lang::Object()>("poll"), //
		jMethod<::java::lang::Object()>("pollFirst"), //
		jMethod<::java::lang::Object()>("pollLast"), //
		jMethod<::java::lang::Object()>("pop"), //
		jMethod<::jvoid(::java::lang::Object)>("push"), //
		jMethod<::java::lang::Object()>("remove"), //
		jMethod<::jboolean(::java::lang::Object)>("remove"), //
		jMethod<::jboolean(::java::util::Collection)>("removeAll"), //
		jMethod<::java::lang::Object()>("removeFirst"), //
		jMethod<::jboolean(::java::lang::Object)>("removeFirstOccurrence"), //
		jMethod<::java::lang::Object()>("removeLast"), //
		jMethod<::jboolean(::java::lang::Object)>("removeLastOccurrence"), //
		jMethod<::jboolean(::java::util::Collection)>("retainAll"), //
		jMethod<::jint()>("size"), //
		jMethod<::java::lang::Object *()>("toArray"), //
		jMethod<::java::lang::Object *(::java::lang::Object *)>("toArray"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("add")] != -1);
		return call<R>("add", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto addAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addAll")] != -1);
		return call<R>("addAll", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addFirst(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addFirst")] != -1);
		return call<R>("addFirst", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addLast(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addLast")] != -1);
		return call<R>("addLast", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto contains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("contains")] != -1);
		return call<R>("contains", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto containsAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("containsAll")] != -1);
		return call<R>("containsAll", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto descendingIterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("descendingIterator")] != -1);
		return call<R>("descendingIterator", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto element(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("element")] != -1);
		return call<R>("element", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getFirst(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFirst")] != -1);
		return call<R>("getFirst", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getLast(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLast")] != -1);
		return call<R>("getLast", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isEmpty")] != -1);
		return call<R>("isEmpty", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto iterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("iterator")] != -1);
		return call<R>("iterator", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto offer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("offer")] != -1);
		return call<R>("offer", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto offerFirst(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("offerFirst")] != -1);
		return call<R>("offerFirst", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto offerLast(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("offerLast")] != -1);
		return call<R>("offerLast", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto peek(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("peek")] != -1);
		return call<R>("peek", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto peekFirst(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("peekFirst")] != -1);
		return call<R>("peekFirst", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto peekLast(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("peekLast")] != -1);
		return call<R>("peekLast", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto poll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("poll")] != -1);
		return call<R>("poll", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto pollFirst(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("pollFirst")] != -1);
		return call<R>("pollFirst", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto pollLast(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("pollLast")] != -1);
		return call<R>("pollLast", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto pop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("pop")] != -1);
		return call<R>("pop", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto push(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("push")] != -1);
		return call<R>("push", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto removeAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeAll")] != -1);
		return call<R>("removeAll", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto removeFirst(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeFirst")] != -1);
		return call<R>("removeFirst", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto removeFirstOccurrence(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeFirstOccurrence")] != -1);
		return call<R>("removeFirstOccurrence", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto removeLast(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeLast")] != -1);
		return call<R>("removeLast", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto removeLastOccurrence(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeLastOccurrence")] != -1);
		return call<R>("removeLastOccurrence", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto retainAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("retainAll")] != -1);
		return call<R>("retainAll", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto size(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("size")] != -1);
		return call<R>("size", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object *, typename... Args>
	auto toArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toArray")] != -1);
		return call<R>("toArray", forward<Args>(args)...);
	}

};

#endif
