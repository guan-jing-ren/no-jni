#ifndef java_util_function_UnaryOperator_HPP
#define java_util_function_UnaryOperator_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::function::UnaryOperator : public jObject<::java::util::function::UnaryOperator, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_function / "UnaryOperator";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Object(::java::lang::Object)>("apply"), //
		jMethod<::java::util::function::UnaryOperator()>("identity"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto apply(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("apply")] != -1);
		return call<R>("apply", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::function::UnaryOperator, typename... Args>
	static auto identity(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("identity")] != -1);
		return scall<R>("identity", std::forward<Args>(args)...);
	}

};

#endif
