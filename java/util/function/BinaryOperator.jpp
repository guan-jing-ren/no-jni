#ifndef java_util_function_BinaryOperator_HPP
#define java_util_function_BinaryOperator_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::function::BinaryOperator : public jObject<::java::util::function::BinaryOperator, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_function / "BinaryOperator";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Object)>("apply"), //
		jMethod<::java::util::function::BinaryOperator(::java::util::Comparator)>("maxBy"), //
		jMethod<::java::util::function::BinaryOperator(::java::util::Comparator)>("minBy"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto apply(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("apply")] != -1);
		return call<R>("apply", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::function::BinaryOperator, typename... Args>
	static auto maxBy(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("maxBy")] != -1);
		return scall<R>("maxBy", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::function::BinaryOperator, typename... Args>
	static auto minBy(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("minBy")] != -1);
		return scall<R>("minBy", std::forward<Args>(args)...);
	}

};

#endif
