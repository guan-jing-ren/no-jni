#ifndef java_util_function_Predicate_HPP
#define java_util_function_Predicate_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::function::Predicate : public jObject<::java::util::function::Predicate, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_function / "Predicate";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::util::function::Predicate(::java::util::function::Predicate)>("and"), //
		jMethod<::java::util::function::Predicate(::java::lang::Object)>("isEqual"), //
		jMethod<::java::util::function::Predicate()>("negate"), //
		jMethod<::java::util::function::Predicate(::java::util::function::Predicate)>("or"), //
		jMethod<::jboolean(::java::lang::Object)>("test"), //
	};

	template<typename R = ::java::util::function::Predicate, typename... Args>
	auto and_(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("and")] != -1);
		return call<R>("and", forward<Args>(args)...);
	}

	template<typename R = ::java::util::function::Predicate, typename... Args>
	static auto isEqual(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isEqual")] != -1);
		return scall<R>("isEqual", forward<Args>(args)...);
	}

	template<typename R = ::java::util::function::Predicate, typename... Args>
	auto negate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("negate")] != -1);
		return call<R>("negate", forward<Args>(args)...);
	}

	template<typename R = ::java::util::function::Predicate, typename... Args>
	auto or_(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("or")] != -1);
		return call<R>("or", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto test(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("test")] != -1);
		return call<R>("test", forward<Args>(args)...);
	}

};

#endif
