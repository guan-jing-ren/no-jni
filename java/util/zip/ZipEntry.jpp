#ifndef java_util_zip_ZipEntry_HPP
#define java_util_zip_ZipEntry_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::zip::ZipEntry : public jObject<::java::util::zip::ZipEntry, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_zip / "ZipEntry";

	constexpr static Enume field_signatures{
		jField<::jint>("CENATT"), //
		jField<::jint>("CENATX"), //
		jField<::jint>("CENCOM"), //
		jField<::jint>("CENCRC"), //
		jField<::jint>("CENDSK"), //
		jField<::jint>("CENEXT"), //
		jField<::jint>("CENFLG"), //
		jField<::jint>("CENHDR"), //
		jField<::jint>("CENHOW"), //
		jField<::jint>("CENLEN"), //
		jField<::jint>("CENNAM"), //
		jField<::jint>("CENOFF"), //
		jField<::jlong>("CENSIG"), //
		jField<::jint>("CENSIZ"), //
		jField<::jint>("CENTIM"), //
		jField<::jint>("CENVEM"), //
		jField<::jint>("CENVER"), //
		jField<::jint>("DEFLATED"), //
		jField<::jint>("ENDCOM"), //
		jField<::jint>("ENDHDR"), //
		jField<::jint>("ENDOFF"), //
		jField<::jlong>("ENDSIG"), //
		jField<::jint>("ENDSIZ"), //
		jField<::jint>("ENDSUB"), //
		jField<::jint>("ENDTOT"), //
		jField<::jint>("EXTCRC"), //
		jField<::jint>("EXTHDR"), //
		jField<::jint>("EXTLEN"), //
		jField<::jlong>("EXTSIG"), //
		jField<::jint>("EXTSIZ"), //
		jField<::jint>("LOCCRC"), //
		jField<::jint>("LOCEXT"), //
		jField<::jint>("LOCFLG"), //
		jField<::jint>("LOCHDR"), //
		jField<::jint>("LOCHOW"), //
		jField<::jint>("LOCLEN"), //
		jField<::jint>("LOCNAM"), //
		jField<::jlong>("LOCSIG"), //
		jField<::jint>("LOCSIZ"), //
		jField<::jint>("LOCTIM"), //
		jField<::jint>("LOCVER"), //
		jField<::jint>("STORED"), //
	};

	template<typename F = ::jint>
	static auto CENATT() {
		static_assert(field_signatures[jField<F>("CENATT")] != -1);
		return sat<F>("CENATT");
	}

	template<typename F = ::jint>
	static auto CENATX() {
		static_assert(field_signatures[jField<F>("CENATX")] != -1);
		return sat<F>("CENATX");
	}

	template<typename F = ::jint>
	static auto CENCOM() {
		static_assert(field_signatures[jField<F>("CENCOM")] != -1);
		return sat<F>("CENCOM");
	}

	template<typename F = ::jint>
	static auto CENCRC() {
		static_assert(field_signatures[jField<F>("CENCRC")] != -1);
		return sat<F>("CENCRC");
	}

	template<typename F = ::jint>
	static auto CENDSK() {
		static_assert(field_signatures[jField<F>("CENDSK")] != -1);
		return sat<F>("CENDSK");
	}

	template<typename F = ::jint>
	static auto CENEXT() {
		static_assert(field_signatures[jField<F>("CENEXT")] != -1);
		return sat<F>("CENEXT");
	}

	template<typename F = ::jint>
	static auto CENFLG() {
		static_assert(field_signatures[jField<F>("CENFLG")] != -1);
		return sat<F>("CENFLG");
	}

	template<typename F = ::jint>
	static auto CENHDR() {
		static_assert(field_signatures[jField<F>("CENHDR")] != -1);
		return sat<F>("CENHDR");
	}

	template<typename F = ::jint>
	static auto CENHOW() {
		static_assert(field_signatures[jField<F>("CENHOW")] != -1);
		return sat<F>("CENHOW");
	}

	template<typename F = ::jint>
	static auto CENLEN() {
		static_assert(field_signatures[jField<F>("CENLEN")] != -1);
		return sat<F>("CENLEN");
	}

	template<typename F = ::jint>
	static auto CENNAM() {
		static_assert(field_signatures[jField<F>("CENNAM")] != -1);
		return sat<F>("CENNAM");
	}

	template<typename F = ::jint>
	static auto CENOFF() {
		static_assert(field_signatures[jField<F>("CENOFF")] != -1);
		return sat<F>("CENOFF");
	}

	template<typename F = ::jlong>
	static auto CENSIG() {
		static_assert(field_signatures[jField<F>("CENSIG")] != -1);
		return sat<F>("CENSIG");
	}

	template<typename F = ::jint>
	static auto CENSIZ() {
		static_assert(field_signatures[jField<F>("CENSIZ")] != -1);
		return sat<F>("CENSIZ");
	}

	template<typename F = ::jint>
	static auto CENTIM() {
		static_assert(field_signatures[jField<F>("CENTIM")] != -1);
		return sat<F>("CENTIM");
	}

	template<typename F = ::jint>
	static auto CENVEM() {
		static_assert(field_signatures[jField<F>("CENVEM")] != -1);
		return sat<F>("CENVEM");
	}

	template<typename F = ::jint>
	static auto CENVER() {
		static_assert(field_signatures[jField<F>("CENVER")] != -1);
		return sat<F>("CENVER");
	}

	template<typename F = ::jint>
	static auto DEFLATED() {
		static_assert(field_signatures[jField<F>("DEFLATED")] != -1);
		return sat<F>("DEFLATED");
	}

	template<typename F = ::jint>
	static auto ENDCOM() {
		static_assert(field_signatures[jField<F>("ENDCOM")] != -1);
		return sat<F>("ENDCOM");
	}

	template<typename F = ::jint>
	static auto ENDHDR() {
		static_assert(field_signatures[jField<F>("ENDHDR")] != -1);
		return sat<F>("ENDHDR");
	}

	template<typename F = ::jint>
	static auto ENDOFF() {
		static_assert(field_signatures[jField<F>("ENDOFF")] != -1);
		return sat<F>("ENDOFF");
	}

	template<typename F = ::jlong>
	static auto ENDSIG() {
		static_assert(field_signatures[jField<F>("ENDSIG")] != -1);
		return sat<F>("ENDSIG");
	}

	template<typename F = ::jint>
	static auto ENDSIZ() {
		static_assert(field_signatures[jField<F>("ENDSIZ")] != -1);
		return sat<F>("ENDSIZ");
	}

	template<typename F = ::jint>
	static auto ENDSUB() {
		static_assert(field_signatures[jField<F>("ENDSUB")] != -1);
		return sat<F>("ENDSUB");
	}

	template<typename F = ::jint>
	static auto ENDTOT() {
		static_assert(field_signatures[jField<F>("ENDTOT")] != -1);
		return sat<F>("ENDTOT");
	}

	template<typename F = ::jint>
	static auto EXTCRC() {
		static_assert(field_signatures[jField<F>("EXTCRC")] != -1);
		return sat<F>("EXTCRC");
	}

	template<typename F = ::jint>
	static auto EXTHDR() {
		static_assert(field_signatures[jField<F>("EXTHDR")] != -1);
		return sat<F>("EXTHDR");
	}

	template<typename F = ::jint>
	static auto EXTLEN() {
		static_assert(field_signatures[jField<F>("EXTLEN")] != -1);
		return sat<F>("EXTLEN");
	}

	template<typename F = ::jlong>
	static auto EXTSIG() {
		static_assert(field_signatures[jField<F>("EXTSIG")] != -1);
		return sat<F>("EXTSIG");
	}

	template<typename F = ::jint>
	static auto EXTSIZ() {
		static_assert(field_signatures[jField<F>("EXTSIZ")] != -1);
		return sat<F>("EXTSIZ");
	}

	template<typename F = ::jint>
	static auto LOCCRC() {
		static_assert(field_signatures[jField<F>("LOCCRC")] != -1);
		return sat<F>("LOCCRC");
	}

	template<typename F = ::jint>
	static auto LOCEXT() {
		static_assert(field_signatures[jField<F>("LOCEXT")] != -1);
		return sat<F>("LOCEXT");
	}

	template<typename F = ::jint>
	static auto LOCFLG() {
		static_assert(field_signatures[jField<F>("LOCFLG")] != -1);
		return sat<F>("LOCFLG");
	}

	template<typename F = ::jint>
	static auto LOCHDR() {
		static_assert(field_signatures[jField<F>("LOCHDR")] != -1);
		return sat<F>("LOCHDR");
	}

	template<typename F = ::jint>
	static auto LOCHOW() {
		static_assert(field_signatures[jField<F>("LOCHOW")] != -1);
		return sat<F>("LOCHOW");
	}

	template<typename F = ::jint>
	static auto LOCLEN() {
		static_assert(field_signatures[jField<F>("LOCLEN")] != -1);
		return sat<F>("LOCLEN");
	}

	template<typename F = ::jint>
	static auto LOCNAM() {
		static_assert(field_signatures[jField<F>("LOCNAM")] != -1);
		return sat<F>("LOCNAM");
	}

	template<typename F = ::jlong>
	static auto LOCSIG() {
		static_assert(field_signatures[jField<F>("LOCSIG")] != -1);
		return sat<F>("LOCSIG");
	}

	template<typename F = ::jint>
	static auto LOCSIZ() {
		static_assert(field_signatures[jField<F>("LOCSIZ")] != -1);
		return sat<F>("LOCSIZ");
	}

	template<typename F = ::jint>
	static auto LOCTIM() {
		static_assert(field_signatures[jField<F>("LOCTIM")] != -1);
		return sat<F>("LOCTIM");
	}

	template<typename F = ::jint>
	static auto LOCVER() {
		static_assert(field_signatures[jField<F>("LOCVER")] != -1);
		return sat<F>("LOCVER");
	}

	template<typename F = ::jint>
	static auto STORED() {
		static_assert(field_signatures[jField<F>("STORED")] != -1);
		return sat<F>("STORED");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::util::zip::ZipEntry)>(), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::java::lang::String()>("getComment"), //
		jMethod<::jlong()>("getCompressedSize"), //
		jMethod<::jlong()>("getCrc"), //
		jMethod<::java::nio::file::attribute::FileTime()>("getCreationTime"), //
		jMethod<::jbyte *()>("getExtra"), //
		jMethod<::java::nio::file::attribute::FileTime()>("getLastAccessTime"), //
		jMethod<::java::nio::file::attribute::FileTime()>("getLastModifiedTime"), //
		jMethod<::jint()>("getMethod"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jlong()>("getSize"), //
		jMethod<::jlong()>("getTime"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isDirectory"), //
		jMethod<::jvoid(::java::lang::String)>("setComment"), //
		jMethod<::jvoid(::jlong)>("setCompressedSize"), //
		jMethod<::jvoid(::jlong)>("setCrc"), //
		jMethod<::java::util::zip::ZipEntry(::java::nio::file::attribute::FileTime)>("setCreationTime"), //
		jMethod<::jvoid(::jbyte *)>("setExtra"), //
		jMethod<::java::util::zip::ZipEntry(::java::nio::file::attribute::FileTime)>("setLastAccessTime"), //
		jMethod<::java::util::zip::ZipEntry(::java::nio::file::attribute::FileTime)>("setLastModifiedTime"), //
		jMethod<::jvoid(::jint)>("setMethod"), //
		jMethod<::jvoid(::jlong)>("setSize"), //
		jMethod<::jvoid(::jlong)>("setTime"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getComment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getComment")] != -1);
		return call<R>("getComment", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getCompressedSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCompressedSize")] != -1);
		return call<R>("getCompressedSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getCrc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCrc")] != -1);
		return call<R>("getCrc", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::attribute::FileTime, typename... Args>
	auto getCreationTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCreationTime")] != -1);
		return call<R>("getCreationTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getExtra(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExtra")] != -1);
		return call<R>("getExtra", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::attribute::FileTime, typename... Args>
	auto getLastAccessTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLastAccessTime")] != -1);
		return call<R>("getLastAccessTime", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::attribute::FileTime, typename... Args>
	auto getLastModifiedTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLastModifiedTime")] != -1);
		return call<R>("getLastModifiedTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMethod(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMethod")] != -1);
		return call<R>("getMethod", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return call<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTime")] != -1);
		return call<R>("getTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDirectory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDirectory")] != -1);
		return call<R>("isDirectory", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setComment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setComment")] != -1);
		return call<R>("setComment", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCompressedSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCompressedSize")] != -1);
		return call<R>("setCompressedSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCrc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCrc")] != -1);
		return call<R>("setCrc", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::zip::ZipEntry, typename... Args>
	auto setCreationTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCreationTime")] != -1);
		return call<R>("setCreationTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setExtra(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setExtra")] != -1);
		return call<R>("setExtra", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::zip::ZipEntry, typename... Args>
	auto setLastAccessTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLastAccessTime")] != -1);
		return call<R>("setLastAccessTime", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::zip::ZipEntry, typename... Args>
	auto setLastModifiedTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLastModifiedTime")] != -1);
		return call<R>("setLastModifiedTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMethod(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMethod")] != -1);
		return call<R>("setMethod", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSize")] != -1);
		return call<R>("setSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTime")] != -1);
		return call<R>("setTime", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
