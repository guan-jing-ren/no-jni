#ifndef java_util_zip_InflaterOutputStream_HPP
#define java_util_zip_InflaterOutputStream_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::zip::InflaterOutputStream : public jObject<::java::util::zip::InflaterOutputStream, ::java::io::FilterOutputStream> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_zip / "InflaterOutputStream";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::io::OutputStream)>(), //
		jConstructor<::jvoid(::java::io::OutputStream, ::java::util::zip::Inflater)>(), //
		jConstructor<::jvoid(::java::io::OutputStream, ::java::util::zip::Inflater, ::jint)>(), //
		jMethod<::jvoid()>("close"), //
		jMethod<::jvoid()>("finish"), //
		jMethod<::jvoid()>("flush"), //
		jMethod<::jvoid(::jint)>("write"), //
		jMethod<::jvoid(::jbyte *, ::jint, ::jint)>("write"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("close")] != -1);
		return call<R>("close", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto finish(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("finish")] != -1);
		return call<R>("finish", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto flush(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("flush")] != -1);
		return call<R>("flush", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write")] != -1);
		return call<R>("write", forward<Args>(args)...);
	}

};

#endif
