#ifndef java_util_zip_ZipFile_HPP
#define java_util_zip_ZipFile_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::zip::ZipFile : public jObject<::java::util::zip::ZipFile, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_zip / "ZipFile";

	constexpr static Enume field_signatures{
		jField<::jint>("CENATT"), //
		jField<::jint>("CENATX"), //
		jField<::jint>("CENCOM"), //
		jField<::jint>("CENCRC"), //
		jField<::jint>("CENDSK"), //
		jField<::jint>("CENEXT"), //
		jField<::jint>("CENFLG"), //
		jField<::jint>("CENHDR"), //
		jField<::jint>("CENHOW"), //
		jField<::jint>("CENLEN"), //
		jField<::jint>("CENNAM"), //
		jField<::jint>("CENOFF"), //
		jField<::jlong>("CENSIG"), //
		jField<::jint>("CENSIZ"), //
		jField<::jint>("CENTIM"), //
		jField<::jint>("CENVEM"), //
		jField<::jint>("CENVER"), //
		jField<::jint>("ENDCOM"), //
		jField<::jint>("ENDHDR"), //
		jField<::jint>("ENDOFF"), //
		jField<::jlong>("ENDSIG"), //
		jField<::jint>("ENDSIZ"), //
		jField<::jint>("ENDSUB"), //
		jField<::jint>("ENDTOT"), //
		jField<::jint>("EXTCRC"), //
		jField<::jint>("EXTHDR"), //
		jField<::jint>("EXTLEN"), //
		jField<::jlong>("EXTSIG"), //
		jField<::jint>("EXTSIZ"), //
		jField<::jint>("LOCCRC"), //
		jField<::jint>("LOCEXT"), //
		jField<::jint>("LOCFLG"), //
		jField<::jint>("LOCHDR"), //
		jField<::jint>("LOCHOW"), //
		jField<::jint>("LOCLEN"), //
		jField<::jint>("LOCNAM"), //
		jField<::jlong>("LOCSIG"), //
		jField<::jint>("LOCSIZ"), //
		jField<::jint>("LOCTIM"), //
		jField<::jint>("LOCVER"), //
		jField<::jint>("OPEN_DELETE"), //
		jField<::jint>("OPEN_READ"), //
	};

	template<typename F = ::jint>
	static auto CENATT() {
		static_assert(field_signatures[jField<F>("CENATT")] != -1);
		return sat<F>("CENATT");
	}

	template<typename F = ::jint>
	static auto CENATX() {
		static_assert(field_signatures[jField<F>("CENATX")] != -1);
		return sat<F>("CENATX");
	}

	template<typename F = ::jint>
	static auto CENCOM() {
		static_assert(field_signatures[jField<F>("CENCOM")] != -1);
		return sat<F>("CENCOM");
	}

	template<typename F = ::jint>
	static auto CENCRC() {
		static_assert(field_signatures[jField<F>("CENCRC")] != -1);
		return sat<F>("CENCRC");
	}

	template<typename F = ::jint>
	static auto CENDSK() {
		static_assert(field_signatures[jField<F>("CENDSK")] != -1);
		return sat<F>("CENDSK");
	}

	template<typename F = ::jint>
	static auto CENEXT() {
		static_assert(field_signatures[jField<F>("CENEXT")] != -1);
		return sat<F>("CENEXT");
	}

	template<typename F = ::jint>
	static auto CENFLG() {
		static_assert(field_signatures[jField<F>("CENFLG")] != -1);
		return sat<F>("CENFLG");
	}

	template<typename F = ::jint>
	static auto CENHDR() {
		static_assert(field_signatures[jField<F>("CENHDR")] != -1);
		return sat<F>("CENHDR");
	}

	template<typename F = ::jint>
	static auto CENHOW() {
		static_assert(field_signatures[jField<F>("CENHOW")] != -1);
		return sat<F>("CENHOW");
	}

	template<typename F = ::jint>
	static auto CENLEN() {
		static_assert(field_signatures[jField<F>("CENLEN")] != -1);
		return sat<F>("CENLEN");
	}

	template<typename F = ::jint>
	static auto CENNAM() {
		static_assert(field_signatures[jField<F>("CENNAM")] != -1);
		return sat<F>("CENNAM");
	}

	template<typename F = ::jint>
	static auto CENOFF() {
		static_assert(field_signatures[jField<F>("CENOFF")] != -1);
		return sat<F>("CENOFF");
	}

	template<typename F = ::jlong>
	static auto CENSIG() {
		static_assert(field_signatures[jField<F>("CENSIG")] != -1);
		return sat<F>("CENSIG");
	}

	template<typename F = ::jint>
	static auto CENSIZ() {
		static_assert(field_signatures[jField<F>("CENSIZ")] != -1);
		return sat<F>("CENSIZ");
	}

	template<typename F = ::jint>
	static auto CENTIM() {
		static_assert(field_signatures[jField<F>("CENTIM")] != -1);
		return sat<F>("CENTIM");
	}

	template<typename F = ::jint>
	static auto CENVEM() {
		static_assert(field_signatures[jField<F>("CENVEM")] != -1);
		return sat<F>("CENVEM");
	}

	template<typename F = ::jint>
	static auto CENVER() {
		static_assert(field_signatures[jField<F>("CENVER")] != -1);
		return sat<F>("CENVER");
	}

	template<typename F = ::jint>
	static auto ENDCOM() {
		static_assert(field_signatures[jField<F>("ENDCOM")] != -1);
		return sat<F>("ENDCOM");
	}

	template<typename F = ::jint>
	static auto ENDHDR() {
		static_assert(field_signatures[jField<F>("ENDHDR")] != -1);
		return sat<F>("ENDHDR");
	}

	template<typename F = ::jint>
	static auto ENDOFF() {
		static_assert(field_signatures[jField<F>("ENDOFF")] != -1);
		return sat<F>("ENDOFF");
	}

	template<typename F = ::jlong>
	static auto ENDSIG() {
		static_assert(field_signatures[jField<F>("ENDSIG")] != -1);
		return sat<F>("ENDSIG");
	}

	template<typename F = ::jint>
	static auto ENDSIZ() {
		static_assert(field_signatures[jField<F>("ENDSIZ")] != -1);
		return sat<F>("ENDSIZ");
	}

	template<typename F = ::jint>
	static auto ENDSUB() {
		static_assert(field_signatures[jField<F>("ENDSUB")] != -1);
		return sat<F>("ENDSUB");
	}

	template<typename F = ::jint>
	static auto ENDTOT() {
		static_assert(field_signatures[jField<F>("ENDTOT")] != -1);
		return sat<F>("ENDTOT");
	}

	template<typename F = ::jint>
	static auto EXTCRC() {
		static_assert(field_signatures[jField<F>("EXTCRC")] != -1);
		return sat<F>("EXTCRC");
	}

	template<typename F = ::jint>
	static auto EXTHDR() {
		static_assert(field_signatures[jField<F>("EXTHDR")] != -1);
		return sat<F>("EXTHDR");
	}

	template<typename F = ::jint>
	static auto EXTLEN() {
		static_assert(field_signatures[jField<F>("EXTLEN")] != -1);
		return sat<F>("EXTLEN");
	}

	template<typename F = ::jlong>
	static auto EXTSIG() {
		static_assert(field_signatures[jField<F>("EXTSIG")] != -1);
		return sat<F>("EXTSIG");
	}

	template<typename F = ::jint>
	static auto EXTSIZ() {
		static_assert(field_signatures[jField<F>("EXTSIZ")] != -1);
		return sat<F>("EXTSIZ");
	}

	template<typename F = ::jint>
	static auto LOCCRC() {
		static_assert(field_signatures[jField<F>("LOCCRC")] != -1);
		return sat<F>("LOCCRC");
	}

	template<typename F = ::jint>
	static auto LOCEXT() {
		static_assert(field_signatures[jField<F>("LOCEXT")] != -1);
		return sat<F>("LOCEXT");
	}

	template<typename F = ::jint>
	static auto LOCFLG() {
		static_assert(field_signatures[jField<F>("LOCFLG")] != -1);
		return sat<F>("LOCFLG");
	}

	template<typename F = ::jint>
	static auto LOCHDR() {
		static_assert(field_signatures[jField<F>("LOCHDR")] != -1);
		return sat<F>("LOCHDR");
	}

	template<typename F = ::jint>
	static auto LOCHOW() {
		static_assert(field_signatures[jField<F>("LOCHOW")] != -1);
		return sat<F>("LOCHOW");
	}

	template<typename F = ::jint>
	static auto LOCLEN() {
		static_assert(field_signatures[jField<F>("LOCLEN")] != -1);
		return sat<F>("LOCLEN");
	}

	template<typename F = ::jint>
	static auto LOCNAM() {
		static_assert(field_signatures[jField<F>("LOCNAM")] != -1);
		return sat<F>("LOCNAM");
	}

	template<typename F = ::jlong>
	static auto LOCSIG() {
		static_assert(field_signatures[jField<F>("LOCSIG")] != -1);
		return sat<F>("LOCSIG");
	}

	template<typename F = ::jint>
	static auto LOCSIZ() {
		static_assert(field_signatures[jField<F>("LOCSIZ")] != -1);
		return sat<F>("LOCSIZ");
	}

	template<typename F = ::jint>
	static auto LOCTIM() {
		static_assert(field_signatures[jField<F>("LOCTIM")] != -1);
		return sat<F>("LOCTIM");
	}

	template<typename F = ::jint>
	static auto LOCVER() {
		static_assert(field_signatures[jField<F>("LOCVER")] != -1);
		return sat<F>("LOCVER");
	}

	template<typename F = ::jint>
	static auto OPEN_DELETE() {
		static_assert(field_signatures[jField<F>("OPEN_DELETE")] != -1);
		return sat<F>("OPEN_DELETE");
	}

	template<typename F = ::jint>
	static auto OPEN_READ() {
		static_assert(field_signatures[jField<F>("OPEN_READ")] != -1);
		return sat<F>("OPEN_READ");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::io::File)>(), //
		jConstructor<::jvoid(::java::io::File, ::jint)>(), //
		jConstructor<::jvoid(::java::io::File, ::jint, ::java::nio::charset::Charset)>(), //
		jConstructor<::jvoid(::java::io::File, ::java::nio::charset::Charset)>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::nio::charset::Charset)>(), //
		jMethod<::jvoid()>("close"), //
		jMethod<::java::util::Enumeration()>("entries"), //
		jMethod<::java::lang::String()>("getComment"), //
		jMethod<::java::util::zip::ZipEntry(::java::lang::String)>("getEntry"), //
		jMethod<::java::io::InputStream(::java::util::zip::ZipEntry)>("getInputStream"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jint()>("size"), //
		jMethod<::java::util::stream::Stream()>("stream"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto entries(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("entries")] != -1);
		return call<R>("entries", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getComment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getComment")] != -1);
		return call<R>("getComment", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::zip::ZipEntry, typename... Args>
	auto getEntry(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEntry")] != -1);
		return call<R>("getEntry", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	auto getInputStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInputStream")] != -1);
		return call<R>("getInputStream", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto size(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("size")] != -1);
		return call<R>("size", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::Stream, typename... Args>
	auto stream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stream")] != -1);
		return call<R>("stream", std::forward<Args>(args)...);
	}

};

#endif
