#ifndef java_util_zip_Deflater_HPP
#define java_util_zip_Deflater_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::zip::Deflater : public jObject<::java::util::zip::Deflater, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_zip / "Deflater";

	constexpr static Enume field_signatures{
		jField<::jint>("BEST_COMPRESSION"), //
		jField<::jint>("BEST_SPEED"), //
		jField<::jint>("DEFAULT_COMPRESSION"), //
		jField<::jint>("DEFAULT_STRATEGY"), //
		jField<::jint>("DEFLATED"), //
		jField<::jint>("FILTERED"), //
		jField<::jint>("FULL_FLUSH"), //
		jField<::jint>("HUFFMAN_ONLY"), //
		jField<::jint>("NO_COMPRESSION"), //
		jField<::jint>("NO_FLUSH"), //
		jField<::jint>("SYNC_FLUSH"), //
	};

	template<typename F = ::jint>
	static auto BEST_COMPRESSION() {
		static_assert(field_signatures[jField<F>("BEST_COMPRESSION")] != -1);
		return sat<F>("BEST_COMPRESSION");
	}

	template<typename F = ::jint>
	static auto BEST_SPEED() {
		static_assert(field_signatures[jField<F>("BEST_SPEED")] != -1);
		return sat<F>("BEST_SPEED");
	}

	template<typename F = ::jint>
	static auto DEFAULT_COMPRESSION() {
		static_assert(field_signatures[jField<F>("DEFAULT_COMPRESSION")] != -1);
		return sat<F>("DEFAULT_COMPRESSION");
	}

	template<typename F = ::jint>
	static auto DEFAULT_STRATEGY() {
		static_assert(field_signatures[jField<F>("DEFAULT_STRATEGY")] != -1);
		return sat<F>("DEFAULT_STRATEGY");
	}

	template<typename F = ::jint>
	static auto DEFLATED() {
		static_assert(field_signatures[jField<F>("DEFLATED")] != -1);
		return sat<F>("DEFLATED");
	}

	template<typename F = ::jint>
	static auto FILTERED() {
		static_assert(field_signatures[jField<F>("FILTERED")] != -1);
		return sat<F>("FILTERED");
	}

	template<typename F = ::jint>
	static auto FULL_FLUSH() {
		static_assert(field_signatures[jField<F>("FULL_FLUSH")] != -1);
		return sat<F>("FULL_FLUSH");
	}

	template<typename F = ::jint>
	static auto HUFFMAN_ONLY() {
		static_assert(field_signatures[jField<F>("HUFFMAN_ONLY")] != -1);
		return sat<F>("HUFFMAN_ONLY");
	}

	template<typename F = ::jint>
	static auto NO_COMPRESSION() {
		static_assert(field_signatures[jField<F>("NO_COMPRESSION")] != -1);
		return sat<F>("NO_COMPRESSION");
	}

	template<typename F = ::jint>
	static auto NO_FLUSH() {
		static_assert(field_signatures[jField<F>("NO_FLUSH")] != -1);
		return sat<F>("NO_FLUSH");
	}

	template<typename F = ::jint>
	static auto SYNC_FLUSH() {
		static_assert(field_signatures[jField<F>("SYNC_FLUSH")] != -1);
		return sat<F>("SYNC_FLUSH");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint)>(), //
		jConstructor<::jvoid(::jint, ::jboolean)>(), //
		jMethod<::jint(::jbyte *)>("deflate"), //
		jMethod<::jint(::jbyte *, ::jint, ::jint)>("deflate"), //
		jMethod<::jint(::jbyte *, ::jint, ::jint, ::jint)>("deflate"), //
		jMethod<::jvoid()>("end"), //
		jMethod<::jvoid()>("finish"), //
		jMethod<::jboolean()>("finished"), //
		jMethod<::jint()>("getAdler"), //
		jMethod<::jlong()>("getBytesRead"), //
		jMethod<::jlong()>("getBytesWritten"), //
		jMethod<::jint()>("getTotalIn"), //
		jMethod<::jint()>("getTotalOut"), //
		jMethod<::jboolean()>("needsInput"), //
		jMethod<::jvoid()>("reset"), //
		jMethod<::jvoid(::jbyte *)>("setDictionary"), //
		jMethod<::jvoid(::jbyte *, ::jint, ::jint)>("setDictionary"), //
		jMethod<::jvoid(::jbyte *)>("setInput"), //
		jMethod<::jvoid(::jbyte *, ::jint, ::jint)>("setInput"), //
		jMethod<::jvoid(::jint)>("setLevel"), //
		jMethod<::jvoid(::jint)>("setStrategy"), //
	};

	template<typename R = ::jint, typename... Args>
	auto deflate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deflate")] != -1);
		return call<R>("deflate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto end(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("end")] != -1);
		return call<R>("end", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto finish(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("finish")] != -1);
		return call<R>("finish", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto finished(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("finished")] != -1);
		return call<R>("finished", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAdler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAdler")] != -1);
		return call<R>("getAdler", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getBytesRead(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBytesRead")] != -1);
		return call<R>("getBytesRead", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getBytesWritten(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBytesWritten")] != -1);
		return call<R>("getBytesWritten", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTotalIn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTotalIn")] != -1);
		return call<R>("getTotalIn", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTotalOut(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTotalOut")] != -1);
		return call<R>("getTotalOut", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto needsInput(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("needsInput")] != -1);
		return call<R>("needsInput", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDictionary(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDictionary")] != -1);
		return call<R>("setDictionary", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInput(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setInput")] != -1);
		return call<R>("setInput", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLevel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLevel")] != -1);
		return call<R>("setLevel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setStrategy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setStrategy")] != -1);
		return call<R>("setStrategy", std::forward<Args>(args)...);
	}

};

#endif
