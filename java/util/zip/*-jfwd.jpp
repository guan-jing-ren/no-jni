#ifndef java_util_zip_JPP
#define java_util_zip_JPP

namespace java::util::zip { class Adler32; }
template<> constexpr auto signature<::java::util::zip::Adler32> = ::java_util_zip / "Adler32";
namespace java::util::zip { class CRC32; }
template<> constexpr auto signature<::java::util::zip::CRC32> = ::java_util_zip / "CRC32";
namespace java::util::zip { class CheckedInputStream; }
template<> constexpr auto signature<::java::util::zip::CheckedInputStream> = ::java_util_zip / "CheckedInputStream";
namespace java::util::zip { class CheckedOutputStream; }
template<> constexpr auto signature<::java::util::zip::CheckedOutputStream> = ::java_util_zip / "CheckedOutputStream";
namespace java::util::zip { class Checksum; }
template<> constexpr auto signature<::java::util::zip::Checksum> = ::java_util_zip / "Checksum";
namespace java::util::zip { class DataFormatException; }
template<> constexpr auto signature<::java::util::zip::DataFormatException> = ::java_util_zip / "DataFormatException";
namespace java::util::zip { class Deflater; }
template<> constexpr auto signature<::java::util::zip::Deflater> = ::java_util_zip / "Deflater";
namespace java::util::zip { class DeflaterInputStream; }
template<> constexpr auto signature<::java::util::zip::DeflaterInputStream> = ::java_util_zip / "DeflaterInputStream";
namespace java::util::zip { class DeflaterOutputStream; }
template<> constexpr auto signature<::java::util::zip::DeflaterOutputStream> = ::java_util_zip / "DeflaterOutputStream";
namespace java::util::zip { class GZIPInputStream; }
template<> constexpr auto signature<::java::util::zip::GZIPInputStream> = ::java_util_zip / "GZIPInputStream";
namespace java::util::zip { class GZIPInputStream$1; }
template<> constexpr auto signature<::java::util::zip::GZIPInputStream$1> = ::java_util_zip / "GZIPInputStream$1";
namespace java::util::zip { class GZIPOutputStream; }
template<> constexpr auto signature<::java::util::zip::GZIPOutputStream> = ::java_util_zip / "GZIPOutputStream";
namespace java::util::zip { class Inflater; }
template<> constexpr auto signature<::java::util::zip::Inflater> = ::java_util_zip / "Inflater";
namespace java::util::zip { class InflaterInputStream; }
template<> constexpr auto signature<::java::util::zip::InflaterInputStream> = ::java_util_zip / "InflaterInputStream";
namespace java::util::zip { class InflaterOutputStream; }
template<> constexpr auto signature<::java::util::zip::InflaterOutputStream> = ::java_util_zip / "InflaterOutputStream";
namespace java::util::zip { class ZStreamRef; }
template<> constexpr auto signature<::java::util::zip::ZStreamRef> = ::java_util_zip / "ZStreamRef";
namespace java::util::zip { class ZipCoder; }
template<> constexpr auto signature<::java::util::zip::ZipCoder> = ::java_util_zip / "ZipCoder";
namespace java::util::zip { class ZipConstants; }
template<> constexpr auto signature<::java::util::zip::ZipConstants> = ::java_util_zip / "ZipConstants";
namespace java::util::zip { class ZipConstants64; }
template<> constexpr auto signature<::java::util::zip::ZipConstants64> = ::java_util_zip / "ZipConstants64";
namespace java::util::zip { class ZipEntry; }
template<> constexpr auto signature<::java::util::zip::ZipEntry> = ::java_util_zip / "ZipEntry";
namespace java::util::zip { class ZipError; }
template<> constexpr auto signature<::java::util::zip::ZipError> = ::java_util_zip / "ZipError";
namespace java::util::zip { class ZipException; }
template<> constexpr auto signature<::java::util::zip::ZipException> = ::java_util_zip / "ZipException";
namespace java::util::zip { class ZipFile; }
template<> constexpr auto signature<::java::util::zip::ZipFile> = ::java_util_zip / "ZipFile";
namespace java::util::zip { class ZipFile$1; }
template<> constexpr auto signature<::java::util::zip::ZipFile$1> = ::java_util_zip / "ZipFile$1";
namespace java::util::zip { class ZipFile$ZipEntryIterator; }
template<> constexpr auto signature<::java::util::zip::ZipFile$ZipEntryIterator> = ::java_util_zip / "ZipFile$ZipEntryIterator";
namespace java::util::zip { class ZipFile$ZipFileInflaterInputStream; }
template<> constexpr auto signature<::java::util::zip::ZipFile$ZipFileInflaterInputStream> = ::java_util_zip / "ZipFile$ZipFileInflaterInputStream";
namespace java::util::zip { class ZipFile$ZipFileInputStream; }
template<> constexpr auto signature<::java::util::zip::ZipFile$ZipFileInputStream> = ::java_util_zip / "ZipFile$ZipFileInputStream";
namespace java::util::zip { class ZipInputStream; }
template<> constexpr auto signature<::java::util::zip::ZipInputStream> = ::java_util_zip / "ZipInputStream";
namespace java::util::zip { class ZipOutputStream; }
template<> constexpr auto signature<::java::util::zip::ZipOutputStream> = ::java_util_zip / "ZipOutputStream";
namespace java::util::zip { class ZipOutputStream$XEntry; }
template<> constexpr auto signature<::java::util::zip::ZipOutputStream$XEntry> = ::java_util_zip / "ZipOutputStream$XEntry";
namespace java::util::zip { class ZipUtils; }
template<> constexpr auto signature<::java::util::zip::ZipUtils> = ::java_util_zip / "ZipUtils";

#endif
