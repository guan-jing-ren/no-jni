#ifndef java_util_zip_GZIPInputStream_HPP
#define java_util_zip_GZIPInputStream_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::zip::GZIPInputStream : public jObject<::java::util::zip::GZIPInputStream, ::java::util::zip::InflaterInputStream> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_zip / "GZIPInputStream";

	constexpr static Enume field_signatures{
		jField<::jint>("GZIP_MAGIC"), //
	};

	template<typename F = ::jint>
	static auto GZIP_MAGIC() {
		static_assert(field_signatures[jField<F>("GZIP_MAGIC")] != -1);
		return sat<F>("GZIP_MAGIC");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::io::InputStream)>(), //
		jConstructor<::jvoid(::java::io::InputStream, ::jint)>(), //
		jMethod<::jvoid()>("close"), //
		jMethod<::jint(::jbyte *, ::jint, ::jint)>("read"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("read")] != -1);
		return call<R>("read", std::forward<Args>(args)...);
	}

};

#endif
