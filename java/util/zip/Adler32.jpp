#ifndef java_util_zip_Adler32_HPP
#define java_util_zip_Adler32_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::zip::Adler32 : public jObject<::java::util::zip::Adler32, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_zip / "Adler32";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jlong()>("getValue"), //
		jMethod<::jvoid()>("reset"), //
		jMethod<::jvoid(::jint)>("update"), //
		jMethod<::jvoid(::java::nio::ByteBuffer)>("update"), //
		jMethod<::jvoid(::jbyte *)>("update"), //
		jMethod<::jvoid(::jbyte *, ::jint, ::jint)>("update"), //
	};

	template<typename R = ::jlong, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto update(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("update")] != -1);
		return call<R>("update", std::forward<Args>(args)...);
	}

};

#endif
