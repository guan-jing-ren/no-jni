#ifndef java_util_zip_Inflater_HPP
#define java_util_zip_Inflater_HPP

#include "../../../jfwd_decl.hpp"

class ::java::util::zip::Inflater : public jObject<::java::util::zip::Inflater, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util_zip / "Inflater";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jboolean)>(), //
		jMethod<::jvoid()>("end"), //
		jMethod<::jboolean()>("finished"), //
		jMethod<::jint()>("getAdler"), //
		jMethod<::jlong()>("getBytesRead"), //
		jMethod<::jlong()>("getBytesWritten"), //
		jMethod<::jint()>("getRemaining"), //
		jMethod<::jint()>("getTotalIn"), //
		jMethod<::jint()>("getTotalOut"), //
		jMethod<::jint(::jbyte *)>("inflate"), //
		jMethod<::jint(::jbyte *, ::jint, ::jint)>("inflate"), //
		jMethod<::jboolean()>("needsDictionary"), //
		jMethod<::jboolean()>("needsInput"), //
		jMethod<::jvoid()>("reset"), //
		jMethod<::jvoid(::jbyte *)>("setDictionary"), //
		jMethod<::jvoid(::jbyte *, ::jint, ::jint)>("setDictionary"), //
		jMethod<::jvoid(::jbyte *)>("setInput"), //
		jMethod<::jvoid(::jbyte *, ::jint, ::jint)>("setInput"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto end(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("end")] != -1);
		return call<R>("end", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto finished(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("finished")] != -1);
		return call<R>("finished", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAdler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAdler")] != -1);
		return call<R>("getAdler", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getBytesRead(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBytesRead")] != -1);
		return call<R>("getBytesRead", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getBytesWritten(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBytesWritten")] != -1);
		return call<R>("getBytesWritten", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRemaining(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRemaining")] != -1);
		return call<R>("getRemaining", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTotalIn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTotalIn")] != -1);
		return call<R>("getTotalIn", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTotalOut(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTotalOut")] != -1);
		return call<R>("getTotalOut", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto inflate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("inflate")] != -1);
		return call<R>("inflate", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto needsDictionary(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("needsDictionary")] != -1);
		return call<R>("needsDictionary", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto needsInput(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("needsInput")] != -1);
		return call<R>("needsInput", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDictionary(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDictionary")] != -1);
		return call<R>("setDictionary", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInput(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setInput")] != -1);
		return call<R>("setInput", forward<Args>(args)...);
	}

};

#endif
