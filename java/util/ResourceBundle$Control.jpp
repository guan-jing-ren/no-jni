#ifndef java_util_ResourceBundle$Control_HPP
#define java_util_ResourceBundle$Control_HPP

#include "../../jfwd_decl.hpp"

class ::java::util::ResourceBundle$Control : public jObject<::java::util::ResourceBundle$Control, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_util / "ResourceBundle$Control";

	constexpr static Enume field_signatures{
		jField<::java::util::List>("FORMAT_CLASS"), //
		jField<::java::util::List>("FORMAT_DEFAULT"), //
		jField<::java::util::List>("FORMAT_PROPERTIES"), //
		jField<::jlong>("TTL_DONT_CACHE"), //
		jField<::jlong>("TTL_NO_EXPIRATION_CONTROL"), //
	};

	template<typename F = ::java::util::List>
	static auto FORMAT_CLASS() {
		static_assert(field_signatures[jField<F>("FORMAT_CLASS")] != -1);
		return sat<F>("FORMAT_CLASS");
	}

	template<typename F = ::java::util::List>
	static auto FORMAT_DEFAULT() {
		static_assert(field_signatures[jField<F>("FORMAT_DEFAULT")] != -1);
		return sat<F>("FORMAT_DEFAULT");
	}

	template<typename F = ::java::util::List>
	static auto FORMAT_PROPERTIES() {
		static_assert(field_signatures[jField<F>("FORMAT_PROPERTIES")] != -1);
		return sat<F>("FORMAT_PROPERTIES");
	}

	template<typename F = ::jlong>
	static auto TTL_DONT_CACHE() {
		static_assert(field_signatures[jField<F>("TTL_DONT_CACHE")] != -1);
		return sat<F>("TTL_DONT_CACHE");
	}

	template<typename F = ::jlong>
	static auto TTL_NO_EXPIRATION_CONTROL() {
		static_assert(field_signatures[jField<F>("TTL_NO_EXPIRATION_CONTROL")] != -1);
		return sat<F>("TTL_NO_EXPIRATION_CONTROL");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::util::List(::java::lang::String, ::java::util::Locale)>("getCandidateLocales"), //
		jMethod<::java::util::ResourceBundle$Control(::java::util::List)>("getControl"), //
		jMethod<::java::util::Locale(::java::lang::String, ::java::util::Locale)>("getFallbackLocale"), //
		jMethod<::java::util::List(::java::lang::String)>("getFormats"), //
		jMethod<::java::util::ResourceBundle$Control(::java::util::List)>("getNoFallbackControl"), //
		jMethod<::jlong(::java::lang::String, ::java::util::Locale)>("getTimeToLive"), //
		jMethod<::jboolean(::java::lang::String, ::java::util::Locale, ::java::lang::String, ::java::lang::ClassLoader, ::java::util::ResourceBundle, ::jlong)>("needsReload"), //
		jMethod<::java::util::ResourceBundle(::java::lang::String, ::java::util::Locale, ::java::lang::String, ::java::lang::ClassLoader, ::jboolean)>("newBundle"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::util::Locale)>("toBundleName"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::lang::String)>("toResourceName"), //
	};

	template<typename R = ::java::util::List, typename... Args>
	auto getCandidateLocales(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCandidateLocales")] != -1);
		return call<R>("getCandidateLocales", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::ResourceBundle$Control, typename... Args>
	static auto getControl(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getControl")] != -1);
		return scall<R>("getControl", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale, typename... Args>
	auto getFallbackLocale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFallbackLocale")] != -1);
		return call<R>("getFallbackLocale", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getFormats(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFormats")] != -1);
		return call<R>("getFormats", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::ResourceBundle$Control, typename... Args>
	static auto getNoFallbackControl(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNoFallbackControl")] != -1);
		return scall<R>("getNoFallbackControl", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getTimeToLive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTimeToLive")] != -1);
		return call<R>("getTimeToLive", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto needsReload(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("needsReload")] != -1);
		return call<R>("needsReload", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::ResourceBundle, typename... Args>
	auto newBundle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newBundle")] != -1);
		return call<R>("newBundle", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toBundleName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toBundleName")] != -1);
		return call<R>("toBundleName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toResourceName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toResourceName")] != -1);
		return call<R>("toResourceName", std::forward<Args>(args)...);
	}

};

#endif
