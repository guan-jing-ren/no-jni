#ifndef java_awt_PageAttributes$MediaType_HPP
#define java_awt_PageAttributes$MediaType_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::PageAttributes$MediaType : public jObject<::java::awt::PageAttributes$MediaType, ::java::awt::AttributeValue> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "PageAttributes$MediaType";

	constexpr static Enume field_signatures{
		jField<::java::awt::PageAttributes$MediaType>("A"), //
		jField<::java::awt::PageAttributes$MediaType>("A0"), //
		jField<::java::awt::PageAttributes$MediaType>("A1"), //
		jField<::java::awt::PageAttributes$MediaType>("A10"), //
		jField<::java::awt::PageAttributes$MediaType>("A2"), //
		jField<::java::awt::PageAttributes$MediaType>("A3"), //
		jField<::java::awt::PageAttributes$MediaType>("A4"), //
		jField<::java::awt::PageAttributes$MediaType>("A5"), //
		jField<::java::awt::PageAttributes$MediaType>("A6"), //
		jField<::java::awt::PageAttributes$MediaType>("A7"), //
		jField<::java::awt::PageAttributes$MediaType>("A8"), //
		jField<::java::awt::PageAttributes$MediaType>("A9"), //
		jField<::java::awt::PageAttributes$MediaType>("B"), //
		jField<::java::awt::PageAttributes$MediaType>("B0"), //
		jField<::java::awt::PageAttributes$MediaType>("B1"), //
		jField<::java::awt::PageAttributes$MediaType>("B10"), //
		jField<::java::awt::PageAttributes$MediaType>("B2"), //
		jField<::java::awt::PageAttributes$MediaType>("B3"), //
		jField<::java::awt::PageAttributes$MediaType>("B4"), //
		jField<::java::awt::PageAttributes$MediaType>("B5"), //
		jField<::java::awt::PageAttributes$MediaType>("B6"), //
		jField<::java::awt::PageAttributes$MediaType>("B7"), //
		jField<::java::awt::PageAttributes$MediaType>("B8"), //
		jField<::java::awt::PageAttributes$MediaType>("B9"), //
		jField<::java::awt::PageAttributes$MediaType>("C"), //
		jField<::java::awt::PageAttributes$MediaType>("C0"), //
		jField<::java::awt::PageAttributes$MediaType>("C1"), //
		jField<::java::awt::PageAttributes$MediaType>("C10"), //
		jField<::java::awt::PageAttributes$MediaType>("C2"), //
		jField<::java::awt::PageAttributes$MediaType>("C3"), //
		jField<::java::awt::PageAttributes$MediaType>("C4"), //
		jField<::java::awt::PageAttributes$MediaType>("C5"), //
		jField<::java::awt::PageAttributes$MediaType>("C6"), //
		jField<::java::awt::PageAttributes$MediaType>("C7"), //
		jField<::java::awt::PageAttributes$MediaType>("C8"), //
		jField<::java::awt::PageAttributes$MediaType>("C9"), //
		jField<::java::awt::PageAttributes$MediaType>("D"), //
		jField<::java::awt::PageAttributes$MediaType>("E"), //
		jField<::java::awt::PageAttributes$MediaType>("ENV_10"), //
		jField<::java::awt::PageAttributes$MediaType>("ENV_10X13"), //
		jField<::java::awt::PageAttributes$MediaType>("ENV_10X14"), //
		jField<::java::awt::PageAttributes$MediaType>("ENV_10X15"), //
		jField<::java::awt::PageAttributes$MediaType>("ENV_11"), //
		jField<::java::awt::PageAttributes$MediaType>("ENV_12"), //
		jField<::java::awt::PageAttributes$MediaType>("ENV_14"), //
		jField<::java::awt::PageAttributes$MediaType>("ENV_6X9"), //
		jField<::java::awt::PageAttributes$MediaType>("ENV_7X9"), //
		jField<::java::awt::PageAttributes$MediaType>("ENV_9"), //
		jField<::java::awt::PageAttributes$MediaType>("ENV_9X11"), //
		jField<::java::awt::PageAttributes$MediaType>("ENV_9X12"), //
		jField<::java::awt::PageAttributes$MediaType>("ENV_INVITE"), //
		jField<::java::awt::PageAttributes$MediaType>("ENV_ITALY"), //
		jField<::java::awt::PageAttributes$MediaType>("ENV_MONARCH"), //
		jField<::java::awt::PageAttributes$MediaType>("ENV_PERSONAL"), //
		jField<::java::awt::PageAttributes$MediaType>("EXECUTIVE"), //
		jField<::java::awt::PageAttributes$MediaType>("FOLIO"), //
		jField<::java::awt::PageAttributes$MediaType>("INVITE"), //
		jField<::java::awt::PageAttributes$MediaType>("INVITE_ENVELOPE"), //
		jField<::java::awt::PageAttributes$MediaType>("INVOICE"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_2A0"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_4A0"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_A0"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_A1"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_A10"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_A2"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_A3"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_A4"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_A5"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_A6"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_A7"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_A8"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_A9"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_B0"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_B1"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_B10"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_B2"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_B3"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_B4"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_B4_ENVELOPE"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_B5"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_B5_ENVELOPE"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_B6"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_B7"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_B8"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_B9"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_C0"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_C0_ENVELOPE"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_C1"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_C10"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_C10_ENVELOPE"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_C1_ENVELOPE"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_C2"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_C2_ENVELOPE"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_C3"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_C3_ENVELOPE"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_C4"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_C4_ENVELOPE"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_C5"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_C5_ENVELOPE"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_C6"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_C6_ENVELOPE"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_C7"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_C7_ENVELOPE"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_C8"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_C8_ENVELOPE"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_C9"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_C9_ENVELOPE"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_DESIGNATED_LONG"), //
		jField<::java::awt::PageAttributes$MediaType>("ISO_DESIGNATED_LONG_ENVELOPE"), //
		jField<::java::awt::PageAttributes$MediaType>("ITALY"), //
		jField<::java::awt::PageAttributes$MediaType>("ITALY_ENVELOPE"), //
		jField<::java::awt::PageAttributes$MediaType>("JIS_B0"), //
		jField<::java::awt::PageAttributes$MediaType>("JIS_B1"), //
		jField<::java::awt::PageAttributes$MediaType>("JIS_B10"), //
		jField<::java::awt::PageAttributes$MediaType>("JIS_B2"), //
		jField<::java::awt::PageAttributes$MediaType>("JIS_B3"), //
		jField<::java::awt::PageAttributes$MediaType>("JIS_B4"), //
		jField<::java::awt::PageAttributes$MediaType>("JIS_B5"), //
		jField<::java::awt::PageAttributes$MediaType>("JIS_B6"), //
		jField<::java::awt::PageAttributes$MediaType>("JIS_B7"), //
		jField<::java::awt::PageAttributes$MediaType>("JIS_B8"), //
		jField<::java::awt::PageAttributes$MediaType>("JIS_B9"), //
		jField<::java::awt::PageAttributes$MediaType>("LEDGER"), //
		jField<::java::awt::PageAttributes$MediaType>("LEGAL"), //
		jField<::java::awt::PageAttributes$MediaType>("LETTER"), //
		jField<::java::awt::PageAttributes$MediaType>("MONARCH"), //
		jField<::java::awt::PageAttributes$MediaType>("MONARCH_ENVELOPE"), //
		jField<::java::awt::PageAttributes$MediaType>("NA_10X13_ENVELOPE"), //
		jField<::java::awt::PageAttributes$MediaType>("NA_10X14_ENVELOPE"), //
		jField<::java::awt::PageAttributes$MediaType>("NA_10X15_ENVELOPE"), //
		jField<::java::awt::PageAttributes$MediaType>("NA_6X9_ENVELOPE"), //
		jField<::java::awt::PageAttributes$MediaType>("NA_7X9_ENVELOPE"), //
		jField<::java::awt::PageAttributes$MediaType>("NA_9X11_ENVELOPE"), //
		jField<::java::awt::PageAttributes$MediaType>("NA_9X12_ENVELOPE"), //
		jField<::java::awt::PageAttributes$MediaType>("NA_LEGAL"), //
		jField<::java::awt::PageAttributes$MediaType>("NA_LETTER"), //
		jField<::java::awt::PageAttributes$MediaType>("NA_NUMBER_10_ENVELOPE"), //
		jField<::java::awt::PageAttributes$MediaType>("NA_NUMBER_11_ENVELOPE"), //
		jField<::java::awt::PageAttributes$MediaType>("NA_NUMBER_12_ENVELOPE"), //
		jField<::java::awt::PageAttributes$MediaType>("NA_NUMBER_14_ENVELOPE"), //
		jField<::java::awt::PageAttributes$MediaType>("NA_NUMBER_9_ENVELOPE"), //
		jField<::java::awt::PageAttributes$MediaType>("NOTE"), //
		jField<::java::awt::PageAttributes$MediaType>("PERSONAL"), //
		jField<::java::awt::PageAttributes$MediaType>("PERSONAL_ENVELOPE"), //
		jField<::java::awt::PageAttributes$MediaType>("QUARTO"), //
		jField<::java::awt::PageAttributes$MediaType>("STATEMENT"), //
		jField<::java::awt::PageAttributes$MediaType>("TABLOID"), //
	};

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto A() {
		static_assert(field_signatures[jField<F>("A")] != -1);
		return sat<F>("A");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto A0() {
		static_assert(field_signatures[jField<F>("A0")] != -1);
		return sat<F>("A0");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto A1() {
		static_assert(field_signatures[jField<F>("A1")] != -1);
		return sat<F>("A1");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto A10() {
		static_assert(field_signatures[jField<F>("A10")] != -1);
		return sat<F>("A10");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto A2() {
		static_assert(field_signatures[jField<F>("A2")] != -1);
		return sat<F>("A2");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto A3() {
		static_assert(field_signatures[jField<F>("A3")] != -1);
		return sat<F>("A3");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto A4() {
		static_assert(field_signatures[jField<F>("A4")] != -1);
		return sat<F>("A4");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto A5() {
		static_assert(field_signatures[jField<F>("A5")] != -1);
		return sat<F>("A5");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto A6() {
		static_assert(field_signatures[jField<F>("A6")] != -1);
		return sat<F>("A6");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto A7() {
		static_assert(field_signatures[jField<F>("A7")] != -1);
		return sat<F>("A7");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto A8() {
		static_assert(field_signatures[jField<F>("A8")] != -1);
		return sat<F>("A8");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto A9() {
		static_assert(field_signatures[jField<F>("A9")] != -1);
		return sat<F>("A9");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto B() {
		static_assert(field_signatures[jField<F>("B")] != -1);
		return sat<F>("B");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto B0() {
		static_assert(field_signatures[jField<F>("B0")] != -1);
		return sat<F>("B0");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto B1() {
		static_assert(field_signatures[jField<F>("B1")] != -1);
		return sat<F>("B1");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto B10() {
		static_assert(field_signatures[jField<F>("B10")] != -1);
		return sat<F>("B10");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto B2() {
		static_assert(field_signatures[jField<F>("B2")] != -1);
		return sat<F>("B2");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto B3() {
		static_assert(field_signatures[jField<F>("B3")] != -1);
		return sat<F>("B3");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto B4() {
		static_assert(field_signatures[jField<F>("B4")] != -1);
		return sat<F>("B4");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto B5() {
		static_assert(field_signatures[jField<F>("B5")] != -1);
		return sat<F>("B5");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto B6() {
		static_assert(field_signatures[jField<F>("B6")] != -1);
		return sat<F>("B6");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto B7() {
		static_assert(field_signatures[jField<F>("B7")] != -1);
		return sat<F>("B7");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto B8() {
		static_assert(field_signatures[jField<F>("B8")] != -1);
		return sat<F>("B8");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto B9() {
		static_assert(field_signatures[jField<F>("B9")] != -1);
		return sat<F>("B9");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto C() {
		static_assert(field_signatures[jField<F>("C")] != -1);
		return sat<F>("C");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto C0() {
		static_assert(field_signatures[jField<F>("C0")] != -1);
		return sat<F>("C0");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto C1() {
		static_assert(field_signatures[jField<F>("C1")] != -1);
		return sat<F>("C1");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto C10() {
		static_assert(field_signatures[jField<F>("C10")] != -1);
		return sat<F>("C10");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto C2() {
		static_assert(field_signatures[jField<F>("C2")] != -1);
		return sat<F>("C2");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto C3() {
		static_assert(field_signatures[jField<F>("C3")] != -1);
		return sat<F>("C3");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto C4() {
		static_assert(field_signatures[jField<F>("C4")] != -1);
		return sat<F>("C4");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto C5() {
		static_assert(field_signatures[jField<F>("C5")] != -1);
		return sat<F>("C5");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto C6() {
		static_assert(field_signatures[jField<F>("C6")] != -1);
		return sat<F>("C6");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto C7() {
		static_assert(field_signatures[jField<F>("C7")] != -1);
		return sat<F>("C7");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto C8() {
		static_assert(field_signatures[jField<F>("C8")] != -1);
		return sat<F>("C8");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto C9() {
		static_assert(field_signatures[jField<F>("C9")] != -1);
		return sat<F>("C9");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto D() {
		static_assert(field_signatures[jField<F>("D")] != -1);
		return sat<F>("D");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto E() {
		static_assert(field_signatures[jField<F>("E")] != -1);
		return sat<F>("E");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ENV_10() {
		static_assert(field_signatures[jField<F>("ENV_10")] != -1);
		return sat<F>("ENV_10");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ENV_10X13() {
		static_assert(field_signatures[jField<F>("ENV_10X13")] != -1);
		return sat<F>("ENV_10X13");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ENV_10X14() {
		static_assert(field_signatures[jField<F>("ENV_10X14")] != -1);
		return sat<F>("ENV_10X14");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ENV_10X15() {
		static_assert(field_signatures[jField<F>("ENV_10X15")] != -1);
		return sat<F>("ENV_10X15");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ENV_11() {
		static_assert(field_signatures[jField<F>("ENV_11")] != -1);
		return sat<F>("ENV_11");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ENV_12() {
		static_assert(field_signatures[jField<F>("ENV_12")] != -1);
		return sat<F>("ENV_12");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ENV_14() {
		static_assert(field_signatures[jField<F>("ENV_14")] != -1);
		return sat<F>("ENV_14");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ENV_6X9() {
		static_assert(field_signatures[jField<F>("ENV_6X9")] != -1);
		return sat<F>("ENV_6X9");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ENV_7X9() {
		static_assert(field_signatures[jField<F>("ENV_7X9")] != -1);
		return sat<F>("ENV_7X9");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ENV_9() {
		static_assert(field_signatures[jField<F>("ENV_9")] != -1);
		return sat<F>("ENV_9");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ENV_9X11() {
		static_assert(field_signatures[jField<F>("ENV_9X11")] != -1);
		return sat<F>("ENV_9X11");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ENV_9X12() {
		static_assert(field_signatures[jField<F>("ENV_9X12")] != -1);
		return sat<F>("ENV_9X12");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ENV_INVITE() {
		static_assert(field_signatures[jField<F>("ENV_INVITE")] != -1);
		return sat<F>("ENV_INVITE");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ENV_ITALY() {
		static_assert(field_signatures[jField<F>("ENV_ITALY")] != -1);
		return sat<F>("ENV_ITALY");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ENV_MONARCH() {
		static_assert(field_signatures[jField<F>("ENV_MONARCH")] != -1);
		return sat<F>("ENV_MONARCH");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ENV_PERSONAL() {
		static_assert(field_signatures[jField<F>("ENV_PERSONAL")] != -1);
		return sat<F>("ENV_PERSONAL");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto EXECUTIVE() {
		static_assert(field_signatures[jField<F>("EXECUTIVE")] != -1);
		return sat<F>("EXECUTIVE");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto FOLIO() {
		static_assert(field_signatures[jField<F>("FOLIO")] != -1);
		return sat<F>("FOLIO");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto INVITE() {
		static_assert(field_signatures[jField<F>("INVITE")] != -1);
		return sat<F>("INVITE");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto INVITE_ENVELOPE() {
		static_assert(field_signatures[jField<F>("INVITE_ENVELOPE")] != -1);
		return sat<F>("INVITE_ENVELOPE");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto INVOICE() {
		static_assert(field_signatures[jField<F>("INVOICE")] != -1);
		return sat<F>("INVOICE");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_2A0() {
		static_assert(field_signatures[jField<F>("ISO_2A0")] != -1);
		return sat<F>("ISO_2A0");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_4A0() {
		static_assert(field_signatures[jField<F>("ISO_4A0")] != -1);
		return sat<F>("ISO_4A0");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_A0() {
		static_assert(field_signatures[jField<F>("ISO_A0")] != -1);
		return sat<F>("ISO_A0");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_A1() {
		static_assert(field_signatures[jField<F>("ISO_A1")] != -1);
		return sat<F>("ISO_A1");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_A10() {
		static_assert(field_signatures[jField<F>("ISO_A10")] != -1);
		return sat<F>("ISO_A10");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_A2() {
		static_assert(field_signatures[jField<F>("ISO_A2")] != -1);
		return sat<F>("ISO_A2");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_A3() {
		static_assert(field_signatures[jField<F>("ISO_A3")] != -1);
		return sat<F>("ISO_A3");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_A4() {
		static_assert(field_signatures[jField<F>("ISO_A4")] != -1);
		return sat<F>("ISO_A4");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_A5() {
		static_assert(field_signatures[jField<F>("ISO_A5")] != -1);
		return sat<F>("ISO_A5");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_A6() {
		static_assert(field_signatures[jField<F>("ISO_A6")] != -1);
		return sat<F>("ISO_A6");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_A7() {
		static_assert(field_signatures[jField<F>("ISO_A7")] != -1);
		return sat<F>("ISO_A7");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_A8() {
		static_assert(field_signatures[jField<F>("ISO_A8")] != -1);
		return sat<F>("ISO_A8");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_A9() {
		static_assert(field_signatures[jField<F>("ISO_A9")] != -1);
		return sat<F>("ISO_A9");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_B0() {
		static_assert(field_signatures[jField<F>("ISO_B0")] != -1);
		return sat<F>("ISO_B0");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_B1() {
		static_assert(field_signatures[jField<F>("ISO_B1")] != -1);
		return sat<F>("ISO_B1");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_B10() {
		static_assert(field_signatures[jField<F>("ISO_B10")] != -1);
		return sat<F>("ISO_B10");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_B2() {
		static_assert(field_signatures[jField<F>("ISO_B2")] != -1);
		return sat<F>("ISO_B2");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_B3() {
		static_assert(field_signatures[jField<F>("ISO_B3")] != -1);
		return sat<F>("ISO_B3");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_B4() {
		static_assert(field_signatures[jField<F>("ISO_B4")] != -1);
		return sat<F>("ISO_B4");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_B4_ENVELOPE() {
		static_assert(field_signatures[jField<F>("ISO_B4_ENVELOPE")] != -1);
		return sat<F>("ISO_B4_ENVELOPE");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_B5() {
		static_assert(field_signatures[jField<F>("ISO_B5")] != -1);
		return sat<F>("ISO_B5");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_B5_ENVELOPE() {
		static_assert(field_signatures[jField<F>("ISO_B5_ENVELOPE")] != -1);
		return sat<F>("ISO_B5_ENVELOPE");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_B6() {
		static_assert(field_signatures[jField<F>("ISO_B6")] != -1);
		return sat<F>("ISO_B6");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_B7() {
		static_assert(field_signatures[jField<F>("ISO_B7")] != -1);
		return sat<F>("ISO_B7");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_B8() {
		static_assert(field_signatures[jField<F>("ISO_B8")] != -1);
		return sat<F>("ISO_B8");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_B9() {
		static_assert(field_signatures[jField<F>("ISO_B9")] != -1);
		return sat<F>("ISO_B9");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_C0() {
		static_assert(field_signatures[jField<F>("ISO_C0")] != -1);
		return sat<F>("ISO_C0");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_C0_ENVELOPE() {
		static_assert(field_signatures[jField<F>("ISO_C0_ENVELOPE")] != -1);
		return sat<F>("ISO_C0_ENVELOPE");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_C1() {
		static_assert(field_signatures[jField<F>("ISO_C1")] != -1);
		return sat<F>("ISO_C1");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_C10() {
		static_assert(field_signatures[jField<F>("ISO_C10")] != -1);
		return sat<F>("ISO_C10");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_C10_ENVELOPE() {
		static_assert(field_signatures[jField<F>("ISO_C10_ENVELOPE")] != -1);
		return sat<F>("ISO_C10_ENVELOPE");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_C1_ENVELOPE() {
		static_assert(field_signatures[jField<F>("ISO_C1_ENVELOPE")] != -1);
		return sat<F>("ISO_C1_ENVELOPE");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_C2() {
		static_assert(field_signatures[jField<F>("ISO_C2")] != -1);
		return sat<F>("ISO_C2");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_C2_ENVELOPE() {
		static_assert(field_signatures[jField<F>("ISO_C2_ENVELOPE")] != -1);
		return sat<F>("ISO_C2_ENVELOPE");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_C3() {
		static_assert(field_signatures[jField<F>("ISO_C3")] != -1);
		return sat<F>("ISO_C3");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_C3_ENVELOPE() {
		static_assert(field_signatures[jField<F>("ISO_C3_ENVELOPE")] != -1);
		return sat<F>("ISO_C3_ENVELOPE");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_C4() {
		static_assert(field_signatures[jField<F>("ISO_C4")] != -1);
		return sat<F>("ISO_C4");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_C4_ENVELOPE() {
		static_assert(field_signatures[jField<F>("ISO_C4_ENVELOPE")] != -1);
		return sat<F>("ISO_C4_ENVELOPE");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_C5() {
		static_assert(field_signatures[jField<F>("ISO_C5")] != -1);
		return sat<F>("ISO_C5");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_C5_ENVELOPE() {
		static_assert(field_signatures[jField<F>("ISO_C5_ENVELOPE")] != -1);
		return sat<F>("ISO_C5_ENVELOPE");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_C6() {
		static_assert(field_signatures[jField<F>("ISO_C6")] != -1);
		return sat<F>("ISO_C6");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_C6_ENVELOPE() {
		static_assert(field_signatures[jField<F>("ISO_C6_ENVELOPE")] != -1);
		return sat<F>("ISO_C6_ENVELOPE");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_C7() {
		static_assert(field_signatures[jField<F>("ISO_C7")] != -1);
		return sat<F>("ISO_C7");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_C7_ENVELOPE() {
		static_assert(field_signatures[jField<F>("ISO_C7_ENVELOPE")] != -1);
		return sat<F>("ISO_C7_ENVELOPE");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_C8() {
		static_assert(field_signatures[jField<F>("ISO_C8")] != -1);
		return sat<F>("ISO_C8");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_C8_ENVELOPE() {
		static_assert(field_signatures[jField<F>("ISO_C8_ENVELOPE")] != -1);
		return sat<F>("ISO_C8_ENVELOPE");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_C9() {
		static_assert(field_signatures[jField<F>("ISO_C9")] != -1);
		return sat<F>("ISO_C9");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_C9_ENVELOPE() {
		static_assert(field_signatures[jField<F>("ISO_C9_ENVELOPE")] != -1);
		return sat<F>("ISO_C9_ENVELOPE");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_DESIGNATED_LONG() {
		static_assert(field_signatures[jField<F>("ISO_DESIGNATED_LONG")] != -1);
		return sat<F>("ISO_DESIGNATED_LONG");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ISO_DESIGNATED_LONG_ENVELOPE() {
		static_assert(field_signatures[jField<F>("ISO_DESIGNATED_LONG_ENVELOPE")] != -1);
		return sat<F>("ISO_DESIGNATED_LONG_ENVELOPE");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ITALY() {
		static_assert(field_signatures[jField<F>("ITALY")] != -1);
		return sat<F>("ITALY");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto ITALY_ENVELOPE() {
		static_assert(field_signatures[jField<F>("ITALY_ENVELOPE")] != -1);
		return sat<F>("ITALY_ENVELOPE");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto JIS_B0() {
		static_assert(field_signatures[jField<F>("JIS_B0")] != -1);
		return sat<F>("JIS_B0");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto JIS_B1() {
		static_assert(field_signatures[jField<F>("JIS_B1")] != -1);
		return sat<F>("JIS_B1");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto JIS_B10() {
		static_assert(field_signatures[jField<F>("JIS_B10")] != -1);
		return sat<F>("JIS_B10");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto JIS_B2() {
		static_assert(field_signatures[jField<F>("JIS_B2")] != -1);
		return sat<F>("JIS_B2");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto JIS_B3() {
		static_assert(field_signatures[jField<F>("JIS_B3")] != -1);
		return sat<F>("JIS_B3");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto JIS_B4() {
		static_assert(field_signatures[jField<F>("JIS_B4")] != -1);
		return sat<F>("JIS_B4");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto JIS_B5() {
		static_assert(field_signatures[jField<F>("JIS_B5")] != -1);
		return sat<F>("JIS_B5");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto JIS_B6() {
		static_assert(field_signatures[jField<F>("JIS_B6")] != -1);
		return sat<F>("JIS_B6");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto JIS_B7() {
		static_assert(field_signatures[jField<F>("JIS_B7")] != -1);
		return sat<F>("JIS_B7");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto JIS_B8() {
		static_assert(field_signatures[jField<F>("JIS_B8")] != -1);
		return sat<F>("JIS_B8");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto JIS_B9() {
		static_assert(field_signatures[jField<F>("JIS_B9")] != -1);
		return sat<F>("JIS_B9");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto LEDGER() {
		static_assert(field_signatures[jField<F>("LEDGER")] != -1);
		return sat<F>("LEDGER");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto LEGAL() {
		static_assert(field_signatures[jField<F>("LEGAL")] != -1);
		return sat<F>("LEGAL");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto LETTER() {
		static_assert(field_signatures[jField<F>("LETTER")] != -1);
		return sat<F>("LETTER");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto MONARCH() {
		static_assert(field_signatures[jField<F>("MONARCH")] != -1);
		return sat<F>("MONARCH");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto MONARCH_ENVELOPE() {
		static_assert(field_signatures[jField<F>("MONARCH_ENVELOPE")] != -1);
		return sat<F>("MONARCH_ENVELOPE");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto NA_10X13_ENVELOPE() {
		static_assert(field_signatures[jField<F>("NA_10X13_ENVELOPE")] != -1);
		return sat<F>("NA_10X13_ENVELOPE");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto NA_10X14_ENVELOPE() {
		static_assert(field_signatures[jField<F>("NA_10X14_ENVELOPE")] != -1);
		return sat<F>("NA_10X14_ENVELOPE");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto NA_10X15_ENVELOPE() {
		static_assert(field_signatures[jField<F>("NA_10X15_ENVELOPE")] != -1);
		return sat<F>("NA_10X15_ENVELOPE");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto NA_6X9_ENVELOPE() {
		static_assert(field_signatures[jField<F>("NA_6X9_ENVELOPE")] != -1);
		return sat<F>("NA_6X9_ENVELOPE");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto NA_7X9_ENVELOPE() {
		static_assert(field_signatures[jField<F>("NA_7X9_ENVELOPE")] != -1);
		return sat<F>("NA_7X9_ENVELOPE");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto NA_9X11_ENVELOPE() {
		static_assert(field_signatures[jField<F>("NA_9X11_ENVELOPE")] != -1);
		return sat<F>("NA_9X11_ENVELOPE");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto NA_9X12_ENVELOPE() {
		static_assert(field_signatures[jField<F>("NA_9X12_ENVELOPE")] != -1);
		return sat<F>("NA_9X12_ENVELOPE");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto NA_LEGAL() {
		static_assert(field_signatures[jField<F>("NA_LEGAL")] != -1);
		return sat<F>("NA_LEGAL");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto NA_LETTER() {
		static_assert(field_signatures[jField<F>("NA_LETTER")] != -1);
		return sat<F>("NA_LETTER");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto NA_NUMBER_10_ENVELOPE() {
		static_assert(field_signatures[jField<F>("NA_NUMBER_10_ENVELOPE")] != -1);
		return sat<F>("NA_NUMBER_10_ENVELOPE");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto NA_NUMBER_11_ENVELOPE() {
		static_assert(field_signatures[jField<F>("NA_NUMBER_11_ENVELOPE")] != -1);
		return sat<F>("NA_NUMBER_11_ENVELOPE");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto NA_NUMBER_12_ENVELOPE() {
		static_assert(field_signatures[jField<F>("NA_NUMBER_12_ENVELOPE")] != -1);
		return sat<F>("NA_NUMBER_12_ENVELOPE");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto NA_NUMBER_14_ENVELOPE() {
		static_assert(field_signatures[jField<F>("NA_NUMBER_14_ENVELOPE")] != -1);
		return sat<F>("NA_NUMBER_14_ENVELOPE");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto NA_NUMBER_9_ENVELOPE() {
		static_assert(field_signatures[jField<F>("NA_NUMBER_9_ENVELOPE")] != -1);
		return sat<F>("NA_NUMBER_9_ENVELOPE");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto NOTE() {
		static_assert(field_signatures[jField<F>("NOTE")] != -1);
		return sat<F>("NOTE");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto PERSONAL() {
		static_assert(field_signatures[jField<F>("PERSONAL")] != -1);
		return sat<F>("PERSONAL");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto PERSONAL_ENVELOPE() {
		static_assert(field_signatures[jField<F>("PERSONAL_ENVELOPE")] != -1);
		return sat<F>("PERSONAL_ENVELOPE");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto QUARTO() {
		static_assert(field_signatures[jField<F>("QUARTO")] != -1);
		return sat<F>("QUARTO");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto STATEMENT() {
		static_assert(field_signatures[jField<F>("STATEMENT")] != -1);
		return sat<F>("STATEMENT");
	}

	template<typename F = ::java::awt::PageAttributes$MediaType>
	static auto TABLOID() {
		static_assert(field_signatures[jField<F>("TABLOID")] != -1);
		return sat<F>("TABLOID");
	}

	constexpr static Enume method_signatures{
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
