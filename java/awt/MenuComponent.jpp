#ifndef java_awt_MenuComponent_HPP
#define java_awt_MenuComponent_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::MenuComponent : public jObject<::java::awt::MenuComponent, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "MenuComponent";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::awt::AWTEvent)>("dispatchEvent"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::java::awt::Font()>("getFont"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::awt::MenuContainer()>("getParent"), //
		jMethod<::java::awt::peer::MenuComponentPeer()>("getPeer"), //
		jMethod<::jboolean(::java::awt::Event)>("postEvent"), //
		jMethod<::jvoid()>("removeNotify"), //
		jMethod<::jvoid(::java::awt::Font)>("setFont"), //
		jMethod<::jvoid(::java::lang::String)>("setName"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto dispatchEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("dispatchEvent")] != -1);
		return call<R>("dispatchEvent", forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Font, typename... Args>
	auto getFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFont")] != -1);
		return call<R>("getFont", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::MenuContainer, typename... Args>
	auto getParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getParent")] != -1);
		return call<R>("getParent", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::peer::MenuComponentPeer, typename... Args>
	auto getPeer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPeer")] != -1);
		return call<R>("getPeer", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto postEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("postEvent")] != -1);
		return call<R>("postEvent", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeNotify")] != -1);
		return call<R>("removeNotify", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFont")] != -1);
		return call<R>("setFont", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setName")] != -1);
		return call<R>("setName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
