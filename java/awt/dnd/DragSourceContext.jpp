#ifndef java_awt_dnd_DragSourceContext_HPP
#define java_awt_dnd_DragSourceContext_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::dnd::DragSourceContext : public jObject<::java::awt::dnd::DragSourceContext, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_dnd / "DragSourceContext";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::dnd::peer::DragSourceContextPeer, ::java::awt::dnd::DragGestureEvent, ::java::awt::Cursor, ::java::awt::Image, ::java::awt::Point, ::java::awt::datatransfer::Transferable, ::java::awt::dnd::DragSourceListener)>(), //
		jMethod<::jvoid(::java::awt::dnd::DragSourceListener)>("addDragSourceListener"), //
		jMethod<::jvoid(::java::awt::dnd::DragSourceDropEvent)>("dragDropEnd"), //
		jMethod<::jvoid(::java::awt::dnd::DragSourceDragEvent)>("dragEnter"), //
		jMethod<::jvoid(::java::awt::dnd::DragSourceEvent)>("dragExit"), //
		jMethod<::jvoid(::java::awt::dnd::DragSourceDragEvent)>("dragMouseMoved"), //
		jMethod<::jvoid(::java::awt::dnd::DragSourceDragEvent)>("dragOver"), //
		jMethod<::jvoid(::java::awt::dnd::DragSourceDragEvent)>("dropActionChanged"), //
		jMethod<::java::awt::Component()>("getComponent"), //
		jMethod<::java::awt::Cursor()>("getCursor"), //
		jMethod<::java::awt::dnd::DragSource()>("getDragSource"), //
		jMethod<::jint()>("getSourceActions"), //
		jMethod<::java::awt::datatransfer::Transferable()>("getTransferable"), //
		jMethod<::java::awt::dnd::DragGestureEvent()>("getTrigger"), //
		jMethod<::jvoid(::java::awt::dnd::DragSourceListener)>("removeDragSourceListener"), //
		jMethod<::jvoid(::java::awt::Cursor)>("setCursor"), //
		jMethod<::jvoid()>("transferablesFlavorsChanged"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addDragSourceListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addDragSourceListener")] != -1);
		return call<R>("addDragSourceListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dragDropEnd(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dragDropEnd")] != -1);
		return call<R>("dragDropEnd", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dragEnter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dragEnter")] != -1);
		return call<R>("dragEnter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dragExit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dragExit")] != -1);
		return call<R>("dragExit", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dragMouseMoved(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dragMouseMoved")] != -1);
		return call<R>("dragMouseMoved", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dragOver(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dragOver")] != -1);
		return call<R>("dragOver", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dropActionChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dropActionChanged")] != -1);
		return call<R>("dropActionChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getComponent")] != -1);
		return call<R>("getComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Cursor, typename... Args>
	auto getCursor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCursor")] != -1);
		return call<R>("getCursor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::dnd::DragSource, typename... Args>
	auto getDragSource(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDragSource")] != -1);
		return call<R>("getDragSource", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSourceActions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSourceActions")] != -1);
		return call<R>("getSourceActions", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::datatransfer::Transferable, typename... Args>
	auto getTransferable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransferable")] != -1);
		return call<R>("getTransferable", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::dnd::DragGestureEvent, typename... Args>
	auto getTrigger(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTrigger")] != -1);
		return call<R>("getTrigger", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeDragSourceListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeDragSourceListener")] != -1);
		return call<R>("removeDragSourceListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCursor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCursor")] != -1);
		return call<R>("setCursor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto transferablesFlavorsChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("transferablesFlavorsChanged")] != -1);
		return call<R>("transferablesFlavorsChanged", std::forward<Args>(args)...);
	}

};

#endif
