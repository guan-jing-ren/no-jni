#ifndef java_awt_dnd_DragGestureRecognizer_HPP
#define java_awt_dnd_DragGestureRecognizer_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::dnd::DragGestureRecognizer : public jObject<::java::awt::dnd::DragGestureRecognizer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_dnd / "DragGestureRecognizer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::awt::dnd::DragGestureListener)>("addDragGestureListener"), //
		jMethod<::java::awt::Component()>("getComponent"), //
		jMethod<::java::awt::dnd::DragSource()>("getDragSource"), //
		jMethod<::jint()>("getSourceActions"), //
		jMethod<::java::awt::event::InputEvent()>("getTriggerEvent"), //
		jMethod<::jvoid(::java::awt::dnd::DragGestureListener)>("removeDragGestureListener"), //
		jMethod<::jvoid()>("resetRecognizer"), //
		jMethod<::jvoid(::java::awt::Component)>("setComponent"), //
		jMethod<::jvoid(::jint)>("setSourceActions"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addDragGestureListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addDragGestureListener")] != -1);
		return call<R>("addDragGestureListener", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getComponent")] != -1);
		return call<R>("getComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::dnd::DragSource, typename... Args>
	auto getDragSource(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDragSource")] != -1);
		return call<R>("getDragSource", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSourceActions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSourceActions")] != -1);
		return call<R>("getSourceActions", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::InputEvent, typename... Args>
	auto getTriggerEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTriggerEvent")] != -1);
		return call<R>("getTriggerEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeDragGestureListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeDragGestureListener")] != -1);
		return call<R>("removeDragGestureListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto resetRecognizer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("resetRecognizer")] != -1);
		return call<R>("resetRecognizer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setComponent")] != -1);
		return call<R>("setComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSourceActions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSourceActions")] != -1);
		return call<R>("setSourceActions", std::forward<Args>(args)...);
	}

};

#endif
