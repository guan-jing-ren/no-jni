#ifndef java_awt_dnd_DropTarget_HPP
#define java_awt_dnd_DropTarget_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::dnd::DropTarget : public jObject<::java::awt::dnd::DropTarget, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_dnd / "DropTarget";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::awt::Component, ::jint, ::java::awt::dnd::DropTargetListener)>(), //
		jConstructor<::jvoid(::java::awt::Component, ::jint, ::java::awt::dnd::DropTargetListener, ::jboolean)>(), //
		jConstructor<::jvoid(::java::awt::Component, ::jint, ::java::awt::dnd::DropTargetListener, ::jboolean, ::java::awt::datatransfer::FlavorMap)>(), //
		jConstructor<::jvoid(::java::awt::Component, ::java::awt::dnd::DropTargetListener)>(), //
		jMethod<::jvoid(::java::awt::dnd::DropTargetListener)>("addDropTargetListener"), //
		jMethod<::jvoid(::java::awt::peer::ComponentPeer)>("addNotify"), //
		jMethod<::jvoid(::java::awt::dnd::DropTargetDragEvent)>("dragEnter"), //
		jMethod<::jvoid(::java::awt::dnd::DropTargetEvent)>("dragExit"), //
		jMethod<::jvoid(::java::awt::dnd::DropTargetDragEvent)>("dragOver"), //
		jMethod<::jvoid(::java::awt::dnd::DropTargetDropEvent)>("drop"), //
		jMethod<::jvoid(::java::awt::dnd::DropTargetDragEvent)>("dropActionChanged"), //
		jMethod<::java::awt::Component()>("getComponent"), //
		jMethod<::jint()>("getDefaultActions"), //
		jMethod<::java::awt::dnd::DropTargetContext()>("getDropTargetContext"), //
		jMethod<::java::awt::datatransfer::FlavorMap()>("getFlavorMap"), //
		jMethod<::jboolean()>("isActive"), //
		jMethod<::jvoid(::java::awt::dnd::DropTargetListener)>("removeDropTargetListener"), //
		jMethod<::jvoid(::java::awt::peer::ComponentPeer)>("removeNotify"), //
		jMethod<::jvoid(::jboolean)>("setActive"), //
		jMethod<::jvoid(::java::awt::Component)>("setComponent"), //
		jMethod<::jvoid(::jint)>("setDefaultActions"), //
		jMethod<::jvoid(::java::awt::datatransfer::FlavorMap)>("setFlavorMap"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addDropTargetListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addDropTargetListener")] != -1);
		return call<R>("addDropTargetListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addNotify")] != -1);
		return call<R>("addNotify", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dragEnter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dragEnter")] != -1);
		return call<R>("dragEnter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dragExit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dragExit")] != -1);
		return call<R>("dragExit", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dragOver(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dragOver")] != -1);
		return call<R>("dragOver", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drop")] != -1);
		return call<R>("drop", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dropActionChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dropActionChanged")] != -1);
		return call<R>("dropActionChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getComponent")] != -1);
		return call<R>("getComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDefaultActions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultActions")] != -1);
		return call<R>("getDefaultActions", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::dnd::DropTargetContext, typename... Args>
	auto getDropTargetContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDropTargetContext")] != -1);
		return call<R>("getDropTargetContext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::datatransfer::FlavorMap, typename... Args>
	auto getFlavorMap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFlavorMap")] != -1);
		return call<R>("getFlavorMap", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isActive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isActive")] != -1);
		return call<R>("isActive", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeDropTargetListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeDropTargetListener")] != -1);
		return call<R>("removeDropTargetListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeNotify")] != -1);
		return call<R>("removeNotify", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setActive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setActive")] != -1);
		return call<R>("setActive", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setComponent")] != -1);
		return call<R>("setComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDefaultActions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDefaultActions")] != -1);
		return call<R>("setDefaultActions", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFlavorMap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFlavorMap")] != -1);
		return call<R>("setFlavorMap", std::forward<Args>(args)...);
	}

};

#endif
