#ifndef java_awt_dnd_DropTargetAdapter_HPP
#define java_awt_dnd_DropTargetAdapter_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::dnd::DropTargetAdapter : public jObject<::java::awt::dnd::DropTargetAdapter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_dnd / "DropTargetAdapter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::awt::dnd::DropTargetDragEvent)>("dragEnter"), //
		jMethod<::jvoid(::java::awt::dnd::DropTargetEvent)>("dragExit"), //
		jMethod<::jvoid(::java::awt::dnd::DropTargetDragEvent)>("dragOver"), //
		jMethod<::jvoid(::java::awt::dnd::DropTargetDragEvent)>("dropActionChanged"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto dragEnter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dragEnter")] != -1);
		return call<R>("dragEnter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dragExit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dragExit")] != -1);
		return call<R>("dragExit", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dragOver(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dragOver")] != -1);
		return call<R>("dragOver", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dropActionChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dropActionChanged")] != -1);
		return call<R>("dropActionChanged", std::forward<Args>(args)...);
	}

};

#endif
