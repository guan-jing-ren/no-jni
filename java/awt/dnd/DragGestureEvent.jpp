#ifndef java_awt_dnd_DragGestureEvent_HPP
#define java_awt_dnd_DragGestureEvent_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::dnd::DragGestureEvent : public jObject<::java::awt::dnd::DragGestureEvent, ::java::util::EventObject> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_dnd / "DragGestureEvent";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::dnd::DragGestureRecognizer, ::jint, ::java::awt::Point, ::java::util::List)>(), //
		jMethod<::java::awt::Component()>("getComponent"), //
		jMethod<::jint()>("getDragAction"), //
		jMethod<::java::awt::Point()>("getDragOrigin"), //
		jMethod<::java::awt::dnd::DragSource()>("getDragSource"), //
		jMethod<::java::awt::dnd::DragGestureRecognizer()>("getSourceAsDragGestureRecognizer"), //
		jMethod<::java::awt::event::InputEvent()>("getTriggerEvent"), //
		jMethod<::java::util::Iterator()>("iterator"), //
		jMethod<::jvoid(::java::awt::Cursor, ::java::awt::Image, ::java::awt::Point, ::java::awt::datatransfer::Transferable, ::java::awt::dnd::DragSourceListener)>("startDrag"), //
		jMethod<::jvoid(::java::awt::Cursor, ::java::awt::datatransfer::Transferable)>("startDrag"), //
		jMethod<::jvoid(::java::awt::Cursor, ::java::awt::datatransfer::Transferable, ::java::awt::dnd::DragSourceListener)>("startDrag"), //
		jMethod<::java::lang::Object *()>("toArray"), //
		jMethod<::java::lang::Object *(::java::lang::Object *)>("toArray"), //
	};

	template<typename R = ::java::awt::Component, typename... Args>
	auto getComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getComponent")] != -1);
		return call<R>("getComponent", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDragAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDragAction")] != -1);
		return call<R>("getDragAction", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Point, typename... Args>
	auto getDragOrigin(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDragOrigin")] != -1);
		return call<R>("getDragOrigin", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::dnd::DragSource, typename... Args>
	auto getDragSource(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDragSource")] != -1);
		return call<R>("getDragSource", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::dnd::DragGestureRecognizer, typename... Args>
	auto getSourceAsDragGestureRecognizer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSourceAsDragGestureRecognizer")] != -1);
		return call<R>("getSourceAsDragGestureRecognizer", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::InputEvent, typename... Args>
	auto getTriggerEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTriggerEvent")] != -1);
		return call<R>("getTriggerEvent", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto iterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("iterator")] != -1);
		return call<R>("iterator", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto startDrag(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("startDrag")] != -1);
		return call<R>("startDrag", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object *, typename... Args>
	auto toArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toArray")] != -1);
		return call<R>("toArray", forward<Args>(args)...);
	}

};

#endif
