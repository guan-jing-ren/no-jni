#ifndef java_awt_dnd_DropTargetDropEvent_HPP
#define java_awt_dnd_DropTargetDropEvent_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::dnd::DropTargetDropEvent : public jObject<::java::awt::dnd::DropTargetDropEvent, ::java::awt::dnd::DropTargetEvent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_dnd / "DropTargetDropEvent";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::dnd::DropTargetContext, ::java::awt::Point, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::java::awt::dnd::DropTargetContext, ::java::awt::Point, ::jint, ::jint, ::jboolean)>(), //
		jMethod<::jvoid(::jint)>("acceptDrop"), //
		jMethod<::jvoid(::jboolean)>("dropComplete"), //
		jMethod<::java::awt::datatransfer::DataFlavor *()>("getCurrentDataFlavors"), //
		jMethod<::java::util::List()>("getCurrentDataFlavorsAsList"), //
		jMethod<::jint()>("getDropAction"), //
		jMethod<::java::awt::Point()>("getLocation"), //
		jMethod<::jint()>("getSourceActions"), //
		jMethod<::java::awt::datatransfer::Transferable()>("getTransferable"), //
		jMethod<::jboolean(::java::awt::datatransfer::DataFlavor)>("isDataFlavorSupported"), //
		jMethod<::jboolean()>("isLocalTransfer"), //
		jMethod<::jvoid()>("rejectDrop"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto acceptDrop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("acceptDrop")] != -1);
		return call<R>("acceptDrop", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dropComplete(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("dropComplete")] != -1);
		return call<R>("dropComplete", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::datatransfer::DataFlavor *, typename... Args>
	auto getCurrentDataFlavors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCurrentDataFlavors")] != -1);
		return call<R>("getCurrentDataFlavors", forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getCurrentDataFlavorsAsList(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCurrentDataFlavorsAsList")] != -1);
		return call<R>("getCurrentDataFlavorsAsList", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDropAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDropAction")] != -1);
		return call<R>("getDropAction", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Point, typename... Args>
	auto getLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLocation")] != -1);
		return call<R>("getLocation", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSourceActions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSourceActions")] != -1);
		return call<R>("getSourceActions", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::datatransfer::Transferable, typename... Args>
	auto getTransferable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTransferable")] != -1);
		return call<R>("getTransferable", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDataFlavorSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isDataFlavorSupported")] != -1);
		return call<R>("isDataFlavorSupported", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLocalTransfer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isLocalTransfer")] != -1);
		return call<R>("isLocalTransfer", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto rejectDrop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("rejectDrop")] != -1);
		return call<R>("rejectDrop", forward<Args>(args)...);
	}

};

#endif
