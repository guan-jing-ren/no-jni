#ifndef java_awt_dnd_DragSourceAdapter_HPP
#define java_awt_dnd_DragSourceAdapter_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::dnd::DragSourceAdapter : public jObject<::java::awt::dnd::DragSourceAdapter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_dnd / "DragSourceAdapter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::awt::dnd::DragSourceDropEvent)>("dragDropEnd"), //
		jMethod<::jvoid(::java::awt::dnd::DragSourceDragEvent)>("dragEnter"), //
		jMethod<::jvoid(::java::awt::dnd::DragSourceEvent)>("dragExit"), //
		jMethod<::jvoid(::java::awt::dnd::DragSourceDragEvent)>("dragMouseMoved"), //
		jMethod<::jvoid(::java::awt::dnd::DragSourceDragEvent)>("dragOver"), //
		jMethod<::jvoid(::java::awt::dnd::DragSourceDragEvent)>("dropActionChanged"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto dragDropEnd(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dragDropEnd")] != -1);
		return call<R>("dragDropEnd", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dragEnter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dragEnter")] != -1);
		return call<R>("dragEnter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dragExit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dragExit")] != -1);
		return call<R>("dragExit", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dragMouseMoved(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dragMouseMoved")] != -1);
		return call<R>("dragMouseMoved", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dragOver(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dragOver")] != -1);
		return call<R>("dragOver", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dropActionChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dropActionChanged")] != -1);
		return call<R>("dropActionChanged", std::forward<Args>(args)...);
	}

};

#endif
