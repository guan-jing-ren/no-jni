#ifndef java_awt_dnd_DragSource_HPP
#define java_awt_dnd_DragSource_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::dnd::DragSource : public jObject<::java::awt::dnd::DragSource, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_dnd / "DragSource";

	constexpr static Enume field_signatures{
		jField<::java::awt::Cursor>("DefaultCopyDrop"), //
		jField<::java::awt::Cursor>("DefaultCopyNoDrop"), //
		jField<::java::awt::Cursor>("DefaultLinkDrop"), //
		jField<::java::awt::Cursor>("DefaultLinkNoDrop"), //
		jField<::java::awt::Cursor>("DefaultMoveDrop"), //
		jField<::java::awt::Cursor>("DefaultMoveNoDrop"), //
	};

	template<typename F = ::java::awt::Cursor>
	static auto DefaultCopyDrop() {
		static_assert(field_signatures[jField<F>("DefaultCopyDrop")] != -1);
		return sat<F>("DefaultCopyDrop");
	}

	template<typename F = ::java::awt::Cursor>
	static auto DefaultCopyNoDrop() {
		static_assert(field_signatures[jField<F>("DefaultCopyNoDrop")] != -1);
		return sat<F>("DefaultCopyNoDrop");
	}

	template<typename F = ::java::awt::Cursor>
	static auto DefaultLinkDrop() {
		static_assert(field_signatures[jField<F>("DefaultLinkDrop")] != -1);
		return sat<F>("DefaultLinkDrop");
	}

	template<typename F = ::java::awt::Cursor>
	static auto DefaultLinkNoDrop() {
		static_assert(field_signatures[jField<F>("DefaultLinkNoDrop")] != -1);
		return sat<F>("DefaultLinkNoDrop");
	}

	template<typename F = ::java::awt::Cursor>
	static auto DefaultMoveDrop() {
		static_assert(field_signatures[jField<F>("DefaultMoveDrop")] != -1);
		return sat<F>("DefaultMoveDrop");
	}

	template<typename F = ::java::awt::Cursor>
	static auto DefaultMoveNoDrop() {
		static_assert(field_signatures[jField<F>("DefaultMoveNoDrop")] != -1);
		return sat<F>("DefaultMoveNoDrop");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::awt::dnd::DragSourceListener)>("addDragSourceListener"), //
		jMethod<::jvoid(::java::awt::dnd::DragSourceMotionListener)>("addDragSourceMotionListener"), //
		jMethod<::java::awt::dnd::DragGestureRecognizer(::java::awt::Component, ::jint, ::java::awt::dnd::DragGestureListener)>("createDefaultDragGestureRecognizer"), //
		jMethod<::java::awt::dnd::DragGestureRecognizer(::java::lang::Class, ::java::awt::Component, ::jint, ::java::awt::dnd::DragGestureListener)>("createDragGestureRecognizer"), //
		jMethod<::java::awt::dnd::DragSource()>("getDefaultDragSource"), //
		jMethod<::java::awt::dnd::DragSourceListener *()>("getDragSourceListeners"), //
		jMethod<::java::awt::dnd::DragSourceMotionListener *()>("getDragSourceMotionListeners"), //
		jMethod<::jint()>("getDragThreshold"), //
		jMethod<::java::awt::datatransfer::FlavorMap()>("getFlavorMap"), //
		jMethod<::java::util::EventListener *(::java::lang::Class)>("getListeners"), //
		jMethod<::jboolean()>("isDragImageSupported"), //
		jMethod<::jvoid(::java::awt::dnd::DragSourceListener)>("removeDragSourceListener"), //
		jMethod<::jvoid(::java::awt::dnd::DragSourceMotionListener)>("removeDragSourceMotionListener"), //
		jMethod<::jvoid(::java::awt::dnd::DragGestureEvent, ::java::awt::Cursor, ::java::awt::Image, ::java::awt::Point, ::java::awt::datatransfer::Transferable, ::java::awt::dnd::DragSourceListener)>("startDrag"), //
		jMethod<::jvoid(::java::awt::dnd::DragGestureEvent, ::java::awt::Cursor, ::java::awt::Image, ::java::awt::Point, ::java::awt::datatransfer::Transferable, ::java::awt::dnd::DragSourceListener, ::java::awt::datatransfer::FlavorMap)>("startDrag"), //
		jMethod<::jvoid(::java::awt::dnd::DragGestureEvent, ::java::awt::Cursor, ::java::awt::datatransfer::Transferable, ::java::awt::dnd::DragSourceListener)>("startDrag"), //
		jMethod<::jvoid(::java::awt::dnd::DragGestureEvent, ::java::awt::Cursor, ::java::awt::datatransfer::Transferable, ::java::awt::dnd::DragSourceListener, ::java::awt::datatransfer::FlavorMap)>("startDrag"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addDragSourceListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addDragSourceListener")] != -1);
		return call<R>("addDragSourceListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addDragSourceMotionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addDragSourceMotionListener")] != -1);
		return call<R>("addDragSourceMotionListener", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::dnd::DragGestureRecognizer, typename... Args>
	auto createDefaultDragGestureRecognizer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createDefaultDragGestureRecognizer")] != -1);
		return call<R>("createDefaultDragGestureRecognizer", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::dnd::DragGestureRecognizer, typename... Args>
	auto createDragGestureRecognizer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createDragGestureRecognizer")] != -1);
		return call<R>("createDragGestureRecognizer", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::dnd::DragSource, typename... Args>
	static auto getDefaultDragSource(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDefaultDragSource")] != -1);
		return scall<R>("getDefaultDragSource", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::dnd::DragSourceListener *, typename... Args>
	auto getDragSourceListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDragSourceListeners")] != -1);
		return call<R>("getDragSourceListeners", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::dnd::DragSourceMotionListener *, typename... Args>
	auto getDragSourceMotionListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDragSourceMotionListeners")] != -1);
		return call<R>("getDragSourceMotionListeners", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getDragThreshold(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDragThreshold")] != -1);
		return scall<R>("getDragThreshold", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::datatransfer::FlavorMap, typename... Args>
	auto getFlavorMap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFlavorMap")] != -1);
		return call<R>("getFlavorMap", forward<Args>(args)...);
	}

	template<typename R = ::java::util::EventListener *, typename... Args>
	auto getListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getListeners")] != -1);
		return call<R>("getListeners", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isDragImageSupported(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isDragImageSupported")] != -1);
		return scall<R>("isDragImageSupported", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeDragSourceListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeDragSourceListener")] != -1);
		return call<R>("removeDragSourceListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeDragSourceMotionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeDragSourceMotionListener")] != -1);
		return call<R>("removeDragSourceMotionListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto startDrag(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("startDrag")] != -1);
		return call<R>("startDrag", forward<Args>(args)...);
	}

};

#endif
