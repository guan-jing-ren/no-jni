#ifndef java_awt_dnd_DnDConstants_HPP
#define java_awt_dnd_DnDConstants_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::dnd::DnDConstants : public jObject<::java::awt::dnd::DnDConstants, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_dnd / "DnDConstants";

	constexpr static Enume field_signatures{
		jField<::jint>("ACTION_COPY"), //
		jField<::jint>("ACTION_COPY_OR_MOVE"), //
		jField<::jint>("ACTION_LINK"), //
		jField<::jint>("ACTION_MOVE"), //
		jField<::jint>("ACTION_NONE"), //
		jField<::jint>("ACTION_REFERENCE"), //
	};

	template<typename F = ::jint>
	static auto ACTION_COPY() {
		static_assert(field_signatures[jField<F>("ACTION_COPY")] != -1);
		return sat<F>("ACTION_COPY");
	}

	template<typename F = ::jint>
	static auto ACTION_COPY_OR_MOVE() {
		static_assert(field_signatures[jField<F>("ACTION_COPY_OR_MOVE")] != -1);
		return sat<F>("ACTION_COPY_OR_MOVE");
	}

	template<typename F = ::jint>
	static auto ACTION_LINK() {
		static_assert(field_signatures[jField<F>("ACTION_LINK")] != -1);
		return sat<F>("ACTION_LINK");
	}

	template<typename F = ::jint>
	static auto ACTION_MOVE() {
		static_assert(field_signatures[jField<F>("ACTION_MOVE")] != -1);
		return sat<F>("ACTION_MOVE");
	}

	template<typename F = ::jint>
	static auto ACTION_NONE() {
		static_assert(field_signatures[jField<F>("ACTION_NONE")] != -1);
		return sat<F>("ACTION_NONE");
	}

	template<typename F = ::jint>
	static auto ACTION_REFERENCE() {
		static_assert(field_signatures[jField<F>("ACTION_REFERENCE")] != -1);
		return sat<F>("ACTION_REFERENCE");
	}

	constexpr static Enume method_signatures{
		cexprstr{"\0"}, //
	};

};

#endif
