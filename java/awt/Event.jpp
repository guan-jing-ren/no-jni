#ifndef java_awt_Event_HPP
#define java_awt_Event_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::Event : public jObject<::java::awt::Event, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "Event";

	constexpr static Enume field_signatures{
		jField<::jint>("ACTION_EVENT"), //
		jField<::jint>("ALT_MASK"), //
		jField<::jint>("BACK_SPACE"), //
		jField<::jint>("CAPS_LOCK"), //
		jField<::jint>("CTRL_MASK"), //
		jField<::jint>("DELETE"), //
		jField<::jint>("DOWN"), //
		jField<::jint>("END"), //
		jField<::jint>("ENTER"), //
		jField<::jint>("ESCAPE"), //
		jField<::jint>("F1"), //
		jField<::jint>("F10"), //
		jField<::jint>("F11"), //
		jField<::jint>("F12"), //
		jField<::jint>("F2"), //
		jField<::jint>("F3"), //
		jField<::jint>("F4"), //
		jField<::jint>("F5"), //
		jField<::jint>("F6"), //
		jField<::jint>("F7"), //
		jField<::jint>("F8"), //
		jField<::jint>("F9"), //
		jField<::jint>("GOT_FOCUS"), //
		jField<::jint>("HOME"), //
		jField<::jint>("INSERT"), //
		jField<::jint>("KEY_ACTION"), //
		jField<::jint>("KEY_ACTION_RELEASE"), //
		jField<::jint>("KEY_PRESS"), //
		jField<::jint>("KEY_RELEASE"), //
		jField<::jint>("LEFT"), //
		jField<::jint>("LIST_DESELECT"), //
		jField<::jint>("LIST_SELECT"), //
		jField<::jint>("LOAD_FILE"), //
		jField<::jint>("LOST_FOCUS"), //
		jField<::jint>("META_MASK"), //
		jField<::jint>("MOUSE_DOWN"), //
		jField<::jint>("MOUSE_DRAG"), //
		jField<::jint>("MOUSE_ENTER"), //
		jField<::jint>("MOUSE_EXIT"), //
		jField<::jint>("MOUSE_MOVE"), //
		jField<::jint>("MOUSE_UP"), //
		jField<::jint>("NUM_LOCK"), //
		jField<::jint>("PAUSE"), //
		jField<::jint>("PGDN"), //
		jField<::jint>("PGUP"), //
		jField<::jint>("PRINT_SCREEN"), //
		jField<::jint>("RIGHT"), //
		jField<::jint>("SAVE_FILE"), //
		jField<::jint>("SCROLL_ABSOLUTE"), //
		jField<::jint>("SCROLL_BEGIN"), //
		jField<::jint>("SCROLL_END"), //
		jField<::jint>("SCROLL_LINE_DOWN"), //
		jField<::jint>("SCROLL_LINE_UP"), //
		jField<::jint>("SCROLL_LOCK"), //
		jField<::jint>("SCROLL_PAGE_DOWN"), //
		jField<::jint>("SCROLL_PAGE_UP"), //
		jField<::jint>("SHIFT_MASK"), //
		jField<::jint>("TAB"), //
		jField<::jint>("UP"), //
		jField<::jint>("WINDOW_DEICONIFY"), //
		jField<::jint>("WINDOW_DESTROY"), //
		jField<::jint>("WINDOW_EXPOSE"), //
		jField<::jint>("WINDOW_ICONIFY"), //
		jField<::jint>("WINDOW_MOVED"), //
		jField<::java::lang::Object>("arg"), //
		jField<::jint>("clickCount"), //
		jField<::java::awt::Event>("evt"), //
		jField<::jint>("id"), //
		jField<::jint>("key"), //
		jField<::jint>("modifiers"), //
		jField<::java::lang::Object>("target"), //
		jField<::jlong>("when"), //
		jField<::jint>("x"), //
		jField<::jint>("y"), //
	};

	template<typename F = ::jint>
	static auto ACTION_EVENT() {
		static_assert(field_signatures[jField<F>("ACTION_EVENT")] != -1);
		return sat<F>("ACTION_EVENT");
	}

	template<typename F = ::jint>
	static auto ALT_MASK() {
		static_assert(field_signatures[jField<F>("ALT_MASK")] != -1);
		return sat<F>("ALT_MASK");
	}

	template<typename F = ::jint>
	static auto BACK_SPACE() {
		static_assert(field_signatures[jField<F>("BACK_SPACE")] != -1);
		return sat<F>("BACK_SPACE");
	}

	template<typename F = ::jint>
	static auto CAPS_LOCK() {
		static_assert(field_signatures[jField<F>("CAPS_LOCK")] != -1);
		return sat<F>("CAPS_LOCK");
	}

	template<typename F = ::jint>
	static auto CTRL_MASK() {
		static_assert(field_signatures[jField<F>("CTRL_MASK")] != -1);
		return sat<F>("CTRL_MASK");
	}

	template<typename F = ::jint>
	static auto DELETE() {
		static_assert(field_signatures[jField<F>("DELETE")] != -1);
		return sat<F>("DELETE");
	}

	template<typename F = ::jint>
	static auto DOWN() {
		static_assert(field_signatures[jField<F>("DOWN")] != -1);
		return sat<F>("DOWN");
	}

	template<typename F = ::jint>
	static auto END() {
		static_assert(field_signatures[jField<F>("END")] != -1);
		return sat<F>("END");
	}

	template<typename F = ::jint>
	static auto ENTER() {
		static_assert(field_signatures[jField<F>("ENTER")] != -1);
		return sat<F>("ENTER");
	}

	template<typename F = ::jint>
	static auto ESCAPE() {
		static_assert(field_signatures[jField<F>("ESCAPE")] != -1);
		return sat<F>("ESCAPE");
	}

	template<typename F = ::jint>
	static auto F1() {
		static_assert(field_signatures[jField<F>("F1")] != -1);
		return sat<F>("F1");
	}

	template<typename F = ::jint>
	static auto F10() {
		static_assert(field_signatures[jField<F>("F10")] != -1);
		return sat<F>("F10");
	}

	template<typename F = ::jint>
	static auto F11() {
		static_assert(field_signatures[jField<F>("F11")] != -1);
		return sat<F>("F11");
	}

	template<typename F = ::jint>
	static auto F12() {
		static_assert(field_signatures[jField<F>("F12")] != -1);
		return sat<F>("F12");
	}

	template<typename F = ::jint>
	static auto F2() {
		static_assert(field_signatures[jField<F>("F2")] != -1);
		return sat<F>("F2");
	}

	template<typename F = ::jint>
	static auto F3() {
		static_assert(field_signatures[jField<F>("F3")] != -1);
		return sat<F>("F3");
	}

	template<typename F = ::jint>
	static auto F4() {
		static_assert(field_signatures[jField<F>("F4")] != -1);
		return sat<F>("F4");
	}

	template<typename F = ::jint>
	static auto F5() {
		static_assert(field_signatures[jField<F>("F5")] != -1);
		return sat<F>("F5");
	}

	template<typename F = ::jint>
	static auto F6() {
		static_assert(field_signatures[jField<F>("F6")] != -1);
		return sat<F>("F6");
	}

	template<typename F = ::jint>
	static auto F7() {
		static_assert(field_signatures[jField<F>("F7")] != -1);
		return sat<F>("F7");
	}

	template<typename F = ::jint>
	static auto F8() {
		static_assert(field_signatures[jField<F>("F8")] != -1);
		return sat<F>("F8");
	}

	template<typename F = ::jint>
	static auto F9() {
		static_assert(field_signatures[jField<F>("F9")] != -1);
		return sat<F>("F9");
	}

	template<typename F = ::jint>
	static auto GOT_FOCUS() {
		static_assert(field_signatures[jField<F>("GOT_FOCUS")] != -1);
		return sat<F>("GOT_FOCUS");
	}

	template<typename F = ::jint>
	static auto HOME() {
		static_assert(field_signatures[jField<F>("HOME")] != -1);
		return sat<F>("HOME");
	}

	template<typename F = ::jint>
	static auto INSERT() {
		static_assert(field_signatures[jField<F>("INSERT")] != -1);
		return sat<F>("INSERT");
	}

	template<typename F = ::jint>
	static auto KEY_ACTION() {
		static_assert(field_signatures[jField<F>("KEY_ACTION")] != -1);
		return sat<F>("KEY_ACTION");
	}

	template<typename F = ::jint>
	static auto KEY_ACTION_RELEASE() {
		static_assert(field_signatures[jField<F>("KEY_ACTION_RELEASE")] != -1);
		return sat<F>("KEY_ACTION_RELEASE");
	}

	template<typename F = ::jint>
	static auto KEY_PRESS() {
		static_assert(field_signatures[jField<F>("KEY_PRESS")] != -1);
		return sat<F>("KEY_PRESS");
	}

	template<typename F = ::jint>
	static auto KEY_RELEASE() {
		static_assert(field_signatures[jField<F>("KEY_RELEASE")] != -1);
		return sat<F>("KEY_RELEASE");
	}

	template<typename F = ::jint>
	static auto LEFT() {
		static_assert(field_signatures[jField<F>("LEFT")] != -1);
		return sat<F>("LEFT");
	}

	template<typename F = ::jint>
	static auto LIST_DESELECT() {
		static_assert(field_signatures[jField<F>("LIST_DESELECT")] != -1);
		return sat<F>("LIST_DESELECT");
	}

	template<typename F = ::jint>
	static auto LIST_SELECT() {
		static_assert(field_signatures[jField<F>("LIST_SELECT")] != -1);
		return sat<F>("LIST_SELECT");
	}

	template<typename F = ::jint>
	static auto LOAD_FILE() {
		static_assert(field_signatures[jField<F>("LOAD_FILE")] != -1);
		return sat<F>("LOAD_FILE");
	}

	template<typename F = ::jint>
	static auto LOST_FOCUS() {
		static_assert(field_signatures[jField<F>("LOST_FOCUS")] != -1);
		return sat<F>("LOST_FOCUS");
	}

	template<typename F = ::jint>
	static auto META_MASK() {
		static_assert(field_signatures[jField<F>("META_MASK")] != -1);
		return sat<F>("META_MASK");
	}

	template<typename F = ::jint>
	static auto MOUSE_DOWN() {
		static_assert(field_signatures[jField<F>("MOUSE_DOWN")] != -1);
		return sat<F>("MOUSE_DOWN");
	}

	template<typename F = ::jint>
	static auto MOUSE_DRAG() {
		static_assert(field_signatures[jField<F>("MOUSE_DRAG")] != -1);
		return sat<F>("MOUSE_DRAG");
	}

	template<typename F = ::jint>
	static auto MOUSE_ENTER() {
		static_assert(field_signatures[jField<F>("MOUSE_ENTER")] != -1);
		return sat<F>("MOUSE_ENTER");
	}

	template<typename F = ::jint>
	static auto MOUSE_EXIT() {
		static_assert(field_signatures[jField<F>("MOUSE_EXIT")] != -1);
		return sat<F>("MOUSE_EXIT");
	}

	template<typename F = ::jint>
	static auto MOUSE_MOVE() {
		static_assert(field_signatures[jField<F>("MOUSE_MOVE")] != -1);
		return sat<F>("MOUSE_MOVE");
	}

	template<typename F = ::jint>
	static auto MOUSE_UP() {
		static_assert(field_signatures[jField<F>("MOUSE_UP")] != -1);
		return sat<F>("MOUSE_UP");
	}

	template<typename F = ::jint>
	static auto NUM_LOCK() {
		static_assert(field_signatures[jField<F>("NUM_LOCK")] != -1);
		return sat<F>("NUM_LOCK");
	}

	template<typename F = ::jint>
	static auto PAUSE() {
		static_assert(field_signatures[jField<F>("PAUSE")] != -1);
		return sat<F>("PAUSE");
	}

	template<typename F = ::jint>
	static auto PGDN() {
		static_assert(field_signatures[jField<F>("PGDN")] != -1);
		return sat<F>("PGDN");
	}

	template<typename F = ::jint>
	static auto PGUP() {
		static_assert(field_signatures[jField<F>("PGUP")] != -1);
		return sat<F>("PGUP");
	}

	template<typename F = ::jint>
	static auto PRINT_SCREEN() {
		static_assert(field_signatures[jField<F>("PRINT_SCREEN")] != -1);
		return sat<F>("PRINT_SCREEN");
	}

	template<typename F = ::jint>
	static auto RIGHT() {
		static_assert(field_signatures[jField<F>("RIGHT")] != -1);
		return sat<F>("RIGHT");
	}

	template<typename F = ::jint>
	static auto SAVE_FILE() {
		static_assert(field_signatures[jField<F>("SAVE_FILE")] != -1);
		return sat<F>("SAVE_FILE");
	}

	template<typename F = ::jint>
	static auto SCROLL_ABSOLUTE() {
		static_assert(field_signatures[jField<F>("SCROLL_ABSOLUTE")] != -1);
		return sat<F>("SCROLL_ABSOLUTE");
	}

	template<typename F = ::jint>
	static auto SCROLL_BEGIN() {
		static_assert(field_signatures[jField<F>("SCROLL_BEGIN")] != -1);
		return sat<F>("SCROLL_BEGIN");
	}

	template<typename F = ::jint>
	static auto SCROLL_END() {
		static_assert(field_signatures[jField<F>("SCROLL_END")] != -1);
		return sat<F>("SCROLL_END");
	}

	template<typename F = ::jint>
	static auto SCROLL_LINE_DOWN() {
		static_assert(field_signatures[jField<F>("SCROLL_LINE_DOWN")] != -1);
		return sat<F>("SCROLL_LINE_DOWN");
	}

	template<typename F = ::jint>
	static auto SCROLL_LINE_UP() {
		static_assert(field_signatures[jField<F>("SCROLL_LINE_UP")] != -1);
		return sat<F>("SCROLL_LINE_UP");
	}

	template<typename F = ::jint>
	static auto SCROLL_LOCK() {
		static_assert(field_signatures[jField<F>("SCROLL_LOCK")] != -1);
		return sat<F>("SCROLL_LOCK");
	}

	template<typename F = ::jint>
	static auto SCROLL_PAGE_DOWN() {
		static_assert(field_signatures[jField<F>("SCROLL_PAGE_DOWN")] != -1);
		return sat<F>("SCROLL_PAGE_DOWN");
	}

	template<typename F = ::jint>
	static auto SCROLL_PAGE_UP() {
		static_assert(field_signatures[jField<F>("SCROLL_PAGE_UP")] != -1);
		return sat<F>("SCROLL_PAGE_UP");
	}

	template<typename F = ::jint>
	static auto SHIFT_MASK() {
		static_assert(field_signatures[jField<F>("SHIFT_MASK")] != -1);
		return sat<F>("SHIFT_MASK");
	}

	template<typename F = ::jint>
	static auto TAB() {
		static_assert(field_signatures[jField<F>("TAB")] != -1);
		return sat<F>("TAB");
	}

	template<typename F = ::jint>
	static auto UP() {
		static_assert(field_signatures[jField<F>("UP")] != -1);
		return sat<F>("UP");
	}

	template<typename F = ::jint>
	static auto WINDOW_DEICONIFY() {
		static_assert(field_signatures[jField<F>("WINDOW_DEICONIFY")] != -1);
		return sat<F>("WINDOW_DEICONIFY");
	}

	template<typename F = ::jint>
	static auto WINDOW_DESTROY() {
		static_assert(field_signatures[jField<F>("WINDOW_DESTROY")] != -1);
		return sat<F>("WINDOW_DESTROY");
	}

	template<typename F = ::jint>
	static auto WINDOW_EXPOSE() {
		static_assert(field_signatures[jField<F>("WINDOW_EXPOSE")] != -1);
		return sat<F>("WINDOW_EXPOSE");
	}

	template<typename F = ::jint>
	static auto WINDOW_ICONIFY() {
		static_assert(field_signatures[jField<F>("WINDOW_ICONIFY")] != -1);
		return sat<F>("WINDOW_ICONIFY");
	}

	template<typename F = ::jint>
	static auto WINDOW_MOVED() {
		static_assert(field_signatures[jField<F>("WINDOW_MOVED")] != -1);
		return sat<F>("WINDOW_MOVED");
	}

	template<typename F = ::java::lang::Object>
	auto arg() const {
		static_assert(field_signatures[jField<F>("arg")] != -1);
		return at<F>("arg");
	}

	template<typename F = ::jint>
	auto clickCount() const {
		static_assert(field_signatures[jField<F>("clickCount")] != -1);
		return at<F>("clickCount");
	}

	template<typename F = ::java::awt::Event>
	auto evt() const {
		static_assert(field_signatures[jField<F>("evt")] != -1);
		return at<F>("evt");
	}

	template<typename F = ::jint>
	auto id() const {
		static_assert(field_signatures[jField<F>("id")] != -1);
		return at<F>("id");
	}

	template<typename F = ::jint>
	auto key() const {
		static_assert(field_signatures[jField<F>("key")] != -1);
		return at<F>("key");
	}

	template<typename F = ::jint>
	auto modifiers() const {
		static_assert(field_signatures[jField<F>("modifiers")] != -1);
		return at<F>("modifiers");
	}

	template<typename F = ::java::lang::Object>
	auto target() const {
		static_assert(field_signatures[jField<F>("target")] != -1);
		return at<F>("target");
	}

	template<typename F = ::jlong>
	auto when() const {
		static_assert(field_signatures[jField<F>("when")] != -1);
		return at<F>("when");
	}

	template<typename F = ::jint>
	auto x() const {
		static_assert(field_signatures[jField<F>("x")] != -1);
		return at<F>("x");
	}

	template<typename F = ::jint>
	auto y() const {
		static_assert(field_signatures[jField<F>("y")] != -1);
		return at<F>("y");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::Object, ::jint, ::java::lang::Object)>(), //
		jConstructor<::jvoid(::java::lang::Object, ::jlong, ::jint, ::jint, ::jint, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::java::lang::Object, ::jlong, ::jint, ::jint, ::jint, ::jint, ::jint, ::java::lang::Object)>(), //
		jMethod<::jboolean()>("controlDown"), //
		jMethod<::jboolean()>("metaDown"), //
		jMethod<::jboolean()>("shiftDown"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid(::jint, ::jint)>("translate"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto controlDown(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("controlDown")] != -1);
		return call<R>("controlDown", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto metaDown(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("metaDown")] != -1);
		return call<R>("metaDown", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto shiftDown(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("shiftDown")] != -1);
		return call<R>("shiftDown", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto translate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("translate")] != -1);
		return call<R>("translate", forward<Args>(args)...);
	}

};

#endif
