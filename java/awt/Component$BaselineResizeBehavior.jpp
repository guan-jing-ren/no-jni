#ifndef java_awt_Component$BaselineResizeBehavior_HPP
#define java_awt_Component$BaselineResizeBehavior_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::Component$BaselineResizeBehavior : public jObject<::java::awt::Component$BaselineResizeBehavior, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "Component$BaselineResizeBehavior";

	constexpr static Enume field_signatures{
		jField<::java::awt::Component$BaselineResizeBehavior>("CENTER_OFFSET"), //
		jField<::java::awt::Component$BaselineResizeBehavior>("CONSTANT_ASCENT"), //
		jField<::java::awt::Component$BaselineResizeBehavior>("CONSTANT_DESCENT"), //
		jField<::java::awt::Component$BaselineResizeBehavior>("OTHER"), //
	};

	template<typename F = ::java::awt::Component$BaselineResizeBehavior>
	static auto CENTER_OFFSET() {
		static_assert(field_signatures[jField<F>("CENTER_OFFSET")] != -1);
		return sat<F>("CENTER_OFFSET");
	}

	template<typename F = ::java::awt::Component$BaselineResizeBehavior>
	static auto CONSTANT_ASCENT() {
		static_assert(field_signatures[jField<F>("CONSTANT_ASCENT")] != -1);
		return sat<F>("CONSTANT_ASCENT");
	}

	template<typename F = ::java::awt::Component$BaselineResizeBehavior>
	static auto CONSTANT_DESCENT() {
		static_assert(field_signatures[jField<F>("CONSTANT_DESCENT")] != -1);
		return sat<F>("CONSTANT_DESCENT");
	}

	template<typename F = ::java::awt::Component$BaselineResizeBehavior>
	static auto OTHER() {
		static_assert(field_signatures[jField<F>("OTHER")] != -1);
		return sat<F>("OTHER");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::awt::Component$BaselineResizeBehavior(::java::lang::String)>("valueOf"), //
		jMethod<::java::awt::Component$BaselineResizeBehavior *()>("values"), //
	};

	template<typename R = ::java::awt::Component$BaselineResizeBehavior, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component$BaselineResizeBehavior *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
