#ifndef java_awt_Color_HPP
#define java_awt_Color_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::Color : public jObject<::java::awt::Color, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "Color";

	constexpr static Enume field_signatures{
		jField<::java::awt::Color>("BLACK"), //
		jField<::java::awt::Color>("BLUE"), //
		jField<::java::awt::Color>("CYAN"), //
		jField<::java::awt::Color>("DARK_GRAY"), //
		jField<::java::awt::Color>("GRAY"), //
		jField<::java::awt::Color>("GREEN"), //
		jField<::java::awt::Color>("LIGHT_GRAY"), //
		jField<::java::awt::Color>("MAGENTA"), //
		jField<::java::awt::Color>("ORANGE"), //
		jField<::java::awt::Color>("PINK"), //
		jField<::java::awt::Color>("RED"), //
		jField<::java::awt::Color>("WHITE"), //
		jField<::java::awt::Color>("YELLOW"), //
		jField<::java::awt::Color>("black"), //
		jField<::java::awt::Color>("blue"), //
		jField<::java::awt::Color>("cyan"), //
		jField<::java::awt::Color>("darkGray"), //
		jField<::java::awt::Color>("gray"), //
		jField<::java::awt::Color>("green"), //
		jField<::java::awt::Color>("lightGray"), //
		jField<::java::awt::Color>("magenta"), //
		jField<::java::awt::Color>("orange"), //
		jField<::java::awt::Color>("pink"), //
		jField<::java::awt::Color>("red"), //
		jField<::java::awt::Color>("white"), //
		jField<::java::awt::Color>("yellow"), //
	};

	template<typename F = ::java::awt::Color>
	static auto BLACK() {
		static_assert(field_signatures[jField<F>("BLACK")] != -1);
		return sat<F>("BLACK");
	}

	template<typename F = ::java::awt::Color>
	static auto BLUE() {
		static_assert(field_signatures[jField<F>("BLUE")] != -1);
		return sat<F>("BLUE");
	}

	template<typename F = ::java::awt::Color>
	static auto CYAN() {
		static_assert(field_signatures[jField<F>("CYAN")] != -1);
		return sat<F>("CYAN");
	}

	template<typename F = ::java::awt::Color>
	static auto DARK_GRAY() {
		static_assert(field_signatures[jField<F>("DARK_GRAY")] != -1);
		return sat<F>("DARK_GRAY");
	}

	template<typename F = ::java::awt::Color>
	static auto GRAY() {
		static_assert(field_signatures[jField<F>("GRAY")] != -1);
		return sat<F>("GRAY");
	}

	template<typename F = ::java::awt::Color>
	static auto GREEN() {
		static_assert(field_signatures[jField<F>("GREEN")] != -1);
		return sat<F>("GREEN");
	}

	template<typename F = ::java::awt::Color>
	static auto LIGHT_GRAY() {
		static_assert(field_signatures[jField<F>("LIGHT_GRAY")] != -1);
		return sat<F>("LIGHT_GRAY");
	}

	template<typename F = ::java::awt::Color>
	static auto MAGENTA() {
		static_assert(field_signatures[jField<F>("MAGENTA")] != -1);
		return sat<F>("MAGENTA");
	}

	template<typename F = ::java::awt::Color>
	static auto ORANGE() {
		static_assert(field_signatures[jField<F>("ORANGE")] != -1);
		return sat<F>("ORANGE");
	}

	template<typename F = ::java::awt::Color>
	static auto PINK() {
		static_assert(field_signatures[jField<F>("PINK")] != -1);
		return sat<F>("PINK");
	}

	template<typename F = ::java::awt::Color>
	static auto RED() {
		static_assert(field_signatures[jField<F>("RED")] != -1);
		return sat<F>("RED");
	}

	template<typename F = ::java::awt::Color>
	static auto WHITE() {
		static_assert(field_signatures[jField<F>("WHITE")] != -1);
		return sat<F>("WHITE");
	}

	template<typename F = ::java::awt::Color>
	static auto YELLOW() {
		static_assert(field_signatures[jField<F>("YELLOW")] != -1);
		return sat<F>("YELLOW");
	}

	template<typename F = ::java::awt::Color>
	static auto black() {
		static_assert(field_signatures[jField<F>("black")] != -1);
		return sat<F>("black");
	}

	template<typename F = ::java::awt::Color>
	static auto blue() {
		static_assert(field_signatures[jField<F>("blue")] != -1);
		return sat<F>("blue");
	}

	template<typename F = ::java::awt::Color>
	static auto cyan() {
		static_assert(field_signatures[jField<F>("cyan")] != -1);
		return sat<F>("cyan");
	}

	template<typename F = ::java::awt::Color>
	static auto darkGray() {
		static_assert(field_signatures[jField<F>("darkGray")] != -1);
		return sat<F>("darkGray");
	}

	template<typename F = ::java::awt::Color>
	static auto gray() {
		static_assert(field_signatures[jField<F>("gray")] != -1);
		return sat<F>("gray");
	}

	template<typename F = ::java::awt::Color>
	static auto green() {
		static_assert(field_signatures[jField<F>("green")] != -1);
		return sat<F>("green");
	}

	template<typename F = ::java::awt::Color>
	static auto lightGray() {
		static_assert(field_signatures[jField<F>("lightGray")] != -1);
		return sat<F>("lightGray");
	}

	template<typename F = ::java::awt::Color>
	static auto magenta() {
		static_assert(field_signatures[jField<F>("magenta")] != -1);
		return sat<F>("magenta");
	}

	template<typename F = ::java::awt::Color>
	static auto orange() {
		static_assert(field_signatures[jField<F>("orange")] != -1);
		return sat<F>("orange");
	}

	template<typename F = ::java::awt::Color>
	static auto pink() {
		static_assert(field_signatures[jField<F>("pink")] != -1);
		return sat<F>("pink");
	}

	template<typename F = ::java::awt::Color>
	static auto red() {
		static_assert(field_signatures[jField<F>("red")] != -1);
		return sat<F>("red");
	}

	template<typename F = ::java::awt::Color>
	static auto white() {
		static_assert(field_signatures[jField<F>("white")] != -1);
		return sat<F>("white");
	}

	template<typename F = ::java::awt::Color>
	static auto yellow() {
		static_assert(field_signatures[jField<F>("yellow")] != -1);
		return sat<F>("yellow");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jfloat, ::jfloat, ::jfloat)>(), //
		jConstructor<::jvoid(::jfloat, ::jfloat, ::jfloat, ::jfloat)>(), //
		jConstructor<::jvoid(::jint)>(), //
		jConstructor<::jvoid(::jint, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::jint, ::jint, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::jint, ::jboolean)>(), //
		jConstructor<::jvoid(::java::awt::color::ColorSpace, ::jfloat *, ::jfloat)>(), //
		jMethod<::jint(::jfloat, ::jfloat, ::jfloat)>("HSBtoRGB"), //
		jMethod<::jfloat *(::jint, ::jint, ::jint, ::jfloat *)>("RGBtoHSB"), //
		jMethod<::java::awt::Color()>("brighter"), //
		jMethod<::java::awt::PaintContext(::java::awt::image::ColorModel, ::java::awt::Rectangle, ::java::awt::geom::Rectangle2D, ::java::awt::geom::AffineTransform, ::java::awt::RenderingHints)>("createContext"), //
		jMethod<::java::awt::Color()>("darker"), //
		jMethod<::java::awt::Color(::java::lang::String)>("decode"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint()>("getAlpha"), //
		jMethod<::jint()>("getBlue"), //
		jMethod<::java::awt::Color(::java::lang::String)>("getColor"), //
		jMethod<::java::awt::Color(::java::lang::String, ::jint)>("getColor"), //
		jMethod<::java::awt::Color(::java::lang::String, ::java::awt::Color)>("getColor"), //
		jMethod<::jfloat *(::java::awt::color::ColorSpace, ::jfloat *)>("getColorComponents"), //
		jMethod<::jfloat *(::jfloat *)>("getColorComponents"), //
		jMethod<::java::awt::color::ColorSpace()>("getColorSpace"), //
		jMethod<::jfloat *(::java::awt::color::ColorSpace, ::jfloat *)>("getComponents"), //
		jMethod<::jfloat *(::jfloat *)>("getComponents"), //
		jMethod<::jint()>("getGreen"), //
		jMethod<::java::awt::Color(::jfloat, ::jfloat, ::jfloat)>("getHSBColor"), //
		jMethod<::jint()>("getRGB"), //
		jMethod<::jfloat *(::jfloat *)>("getRGBColorComponents"), //
		jMethod<::jfloat *(::jfloat *)>("getRGBComponents"), //
		jMethod<::jint()>("getRed"), //
		jMethod<::jint()>("getTransparency"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jint, typename... Args>
	static auto HSBtoRGB(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("HSBtoRGB")] != -1);
		return scall<R>("HSBtoRGB", forward<Args>(args)...);
	}

	template<typename R = ::jfloat *, typename... Args>
	static auto RGBtoHSB(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("RGBtoHSB")] != -1);
		return scall<R>("RGBtoHSB", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto brighter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("brighter")] != -1);
		return call<R>("brighter", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::PaintContext, typename... Args>
	auto createContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createContext")] != -1);
		return call<R>("createContext", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto darker(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("darker")] != -1);
		return call<R>("darker", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	static auto decode(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("decode")] != -1);
		return scall<R>("decode", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAlpha(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAlpha")] != -1);
		return call<R>("getAlpha", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBlue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBlue")] != -1);
		return call<R>("getBlue", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	static auto getColor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColor")] != -1);
		return scall<R>("getColor", forward<Args>(args)...);
	}

	template<typename R = ::jfloat *, typename... Args>
	auto getColorComponents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColorComponents")] != -1);
		return call<R>("getColorComponents", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::color::ColorSpace, typename... Args>
	auto getColorSpace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColorSpace")] != -1);
		return call<R>("getColorSpace", forward<Args>(args)...);
	}

	template<typename R = ::jfloat *, typename... Args>
	auto getComponents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getComponents")] != -1);
		return call<R>("getComponents", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getGreen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getGreen")] != -1);
		return call<R>("getGreen", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	static auto getHSBColor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHSBColor")] != -1);
		return scall<R>("getHSBColor", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRGB(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRGB")] != -1);
		return call<R>("getRGB", forward<Args>(args)...);
	}

	template<typename R = ::jfloat *, typename... Args>
	auto getRGBColorComponents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRGBColorComponents")] != -1);
		return call<R>("getRGBColorComponents", forward<Args>(args)...);
	}

	template<typename R = ::jfloat *, typename... Args>
	auto getRGBComponents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRGBComponents")] != -1);
		return call<R>("getRGBComponents", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRed")] != -1);
		return call<R>("getRed", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTransparency(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTransparency")] != -1);
		return call<R>("getTransparency", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
