#ifndef java_awt_Container_HPP
#define java_awt_Container_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::Container : public jObject<::java::awt::Container, ::java::awt::Component> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "Container";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::awt::Component(::java::awt::Component)>("add"), //
		jMethod<::java::awt::Component(::java::awt::Component, ::jint)>("add"), //
		jMethod<::jvoid(::java::awt::Component, ::java::lang::Object)>("add"), //
		jMethod<::jvoid(::java::awt::Component, ::java::lang::Object, ::jint)>("add"), //
		jMethod<::java::awt::Component(::java::lang::String, ::java::awt::Component)>("add"), //
		jMethod<::jvoid(::java::awt::event::ContainerListener)>("addContainerListener"), //
		jMethod<::jvoid()>("addNotify"), //
		jMethod<::jvoid(::java::beans::PropertyChangeListener)>("addPropertyChangeListener"), //
		jMethod<::jvoid(::java::lang::String, ::java::beans::PropertyChangeListener)>("addPropertyChangeListener"), //
		jMethod<::jvoid(::java::awt::ComponentOrientation)>("applyComponentOrientation"), //
		jMethod<::jboolean(::jint)>("areFocusTraversalKeysSet"), //
		jMethod<::jint()>("countComponents"), //
		jMethod<::jvoid(::java::awt::Event)>("deliverEvent"), //
		jMethod<::jvoid()>("doLayout"), //
		jMethod<::java::awt::Component(::jint, ::jint)>("findComponentAt"), //
		jMethod<::java::awt::Component(::java::awt::Point)>("findComponentAt"), //
		jMethod<::jfloat()>("getAlignmentX"), //
		jMethod<::jfloat()>("getAlignmentY"), //
		jMethod<::java::awt::Component(::jint)>("getComponent"), //
		jMethod<::java::awt::Component(::jint, ::jint)>("getComponentAt"), //
		jMethod<::java::awt::Component(::java::awt::Point)>("getComponentAt"), //
		jMethod<::jint()>("getComponentCount"), //
		jMethod<::jint(::java::awt::Component)>("getComponentZOrder"), //
		jMethod<::java::awt::Component *()>("getComponents"), //
		jMethod<::java::awt::event::ContainerListener *()>("getContainerListeners"), //
		jMethod<::java::util::Set(::jint)>("getFocusTraversalKeys"), //
		jMethod<::java::awt::FocusTraversalPolicy()>("getFocusTraversalPolicy"), //
		jMethod<::java::awt::Insets()>("getInsets"), //
		jMethod<::java::awt::LayoutManager()>("getLayout"), //
		jMethod<::java::util::EventListener *(::java::lang::Class)>("getListeners"), //
		jMethod<::java::awt::Dimension()>("getMaximumSize"), //
		jMethod<::java::awt::Dimension()>("getMinimumSize"), //
		jMethod<::java::awt::Point(::jboolean)>("getMousePosition"), //
		jMethod<::java::awt::Dimension()>("getPreferredSize"), //
		jMethod<::java::awt::Insets()>("insets"), //
		jMethod<::jvoid()>("invalidate"), //
		jMethod<::jboolean(::java::awt::Component)>("isAncestorOf"), //
		jMethod<::jboolean()>("isFocusCycleRoot"), //
		jMethod<::jboolean(::java::awt::Container)>("isFocusCycleRoot"), //
		jMethod<::jboolean()>("isFocusTraversalPolicyProvider"), //
		jMethod<::jboolean()>("isFocusTraversalPolicySet"), //
		jMethod<::jboolean()>("isValidateRoot"), //
		jMethod<::jvoid()>("layout"), //
		jMethod<::jvoid(::java::io::PrintStream, ::jint)>("list"), //
		jMethod<::jvoid(::java::io::PrintWriter, ::jint)>("list"), //
		jMethod<::java::awt::Component(::jint, ::jint)>("locate"), //
		jMethod<::java::awt::Dimension()>("minimumSize"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paint"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paintComponents"), //
		jMethod<::java::awt::Dimension()>("preferredSize"), //
		jMethod<::jvoid(::java::awt::Graphics)>("print"), //
		jMethod<::jvoid(::java::awt::Graphics)>("printComponents"), //
		jMethod<::jvoid(::jint)>("remove"), //
		jMethod<::jvoid(::java::awt::Component)>("remove"), //
		jMethod<::jvoid()>("removeAll"), //
		jMethod<::jvoid(::java::awt::event::ContainerListener)>("removeContainerListener"), //
		jMethod<::jvoid()>("removeNotify"), //
		jMethod<::jvoid(::java::awt::Component, ::jint)>("setComponentZOrder"), //
		jMethod<::jvoid(::jboolean)>("setFocusCycleRoot"), //
		jMethod<::jvoid(::jint, ::java::util::Set)>("setFocusTraversalKeys"), //
		jMethod<::jvoid(::java::awt::FocusTraversalPolicy)>("setFocusTraversalPolicy"), //
		jMethod<::jvoid(::jboolean)>("setFocusTraversalPolicyProvider"), //
		jMethod<::jvoid(::java::awt::Font)>("setFont"), //
		jMethod<::jvoid(::java::awt::LayoutManager)>("setLayout"), //
		jMethod<::jvoid()>("transferFocusDownCycle"), //
		jMethod<::jvoid(::java::awt::Graphics)>("update"), //
		jMethod<::jvoid()>("validate"), //
	};

	template<typename R = ::java::awt::Component, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("add")] != -1);
		return call<R>("add", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addContainerListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addContainerListener")] != -1);
		return call<R>("addContainerListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addNotify")] != -1);
		return call<R>("addNotify", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addPropertyChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addPropertyChangeListener")] != -1);
		return call<R>("addPropertyChangeListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto applyComponentOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("applyComponentOrientation")] != -1);
		return call<R>("applyComponentOrientation", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto areFocusTraversalKeysSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("areFocusTraversalKeysSet")] != -1);
		return call<R>("areFocusTraversalKeysSet", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto countComponents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("countComponents")] != -1);
		return call<R>("countComponents", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deliverEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("deliverEvent")] != -1);
		return call<R>("deliverEvent", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto doLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("doLayout")] != -1);
		return call<R>("doLayout", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto findComponentAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("findComponentAt")] != -1);
		return call<R>("findComponentAt", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getAlignmentX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAlignmentX")] != -1);
		return call<R>("getAlignmentX", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getAlignmentY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAlignmentY")] != -1);
		return call<R>("getAlignmentY", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getComponent")] != -1);
		return call<R>("getComponent", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getComponentAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getComponentAt")] != -1);
		return call<R>("getComponentAt", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getComponentCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getComponentCount")] != -1);
		return call<R>("getComponentCount", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getComponentZOrder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getComponentZOrder")] != -1);
		return call<R>("getComponentZOrder", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component *, typename... Args>
	auto getComponents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getComponents")] != -1);
		return call<R>("getComponents", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::ContainerListener *, typename... Args>
	auto getContainerListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getContainerListeners")] != -1);
		return call<R>("getContainerListeners", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto getFocusTraversalKeys(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFocusTraversalKeys")] != -1);
		return call<R>("getFocusTraversalKeys", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::FocusTraversalPolicy, typename... Args>
	auto getFocusTraversalPolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFocusTraversalPolicy")] != -1);
		return call<R>("getFocusTraversalPolicy", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Insets, typename... Args>
	auto getInsets(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInsets")] != -1);
		return call<R>("getInsets", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::LayoutManager, typename... Args>
	auto getLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLayout")] != -1);
		return call<R>("getLayout", forward<Args>(args)...);
	}

	template<typename R = ::java::util::EventListener *, typename... Args>
	auto getListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getListeners")] != -1);
		return call<R>("getListeners", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMaximumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaximumSize")] != -1);
		return call<R>("getMaximumSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinimumSize")] != -1);
		return call<R>("getMinimumSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Point, typename... Args>
	auto getMousePosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMousePosition")] != -1);
		return call<R>("getMousePosition", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreferredSize")] != -1);
		return call<R>("getPreferredSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Insets, typename... Args>
	auto insets(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("insets")] != -1);
		return call<R>("insets", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto invalidate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("invalidate")] != -1);
		return call<R>("invalidate", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAncestorOf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isAncestorOf")] != -1);
		return call<R>("isAncestorOf", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFocusCycleRoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isFocusCycleRoot")] != -1);
		return call<R>("isFocusCycleRoot", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFocusTraversalPolicyProvider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isFocusTraversalPolicyProvider")] != -1);
		return call<R>("isFocusTraversalPolicyProvider", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFocusTraversalPolicySet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isFocusTraversalPolicySet")] != -1);
		return call<R>("isFocusTraversalPolicySet", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isValidateRoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isValidateRoot")] != -1);
		return call<R>("isValidateRoot", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto layout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("layout")] != -1);
		return call<R>("layout", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto list(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("list")] != -1);
		return call<R>("list", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto locate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("locate")] != -1);
		return call<R>("locate", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto minimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("minimumSize")] != -1);
		return call<R>("minimumSize", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintComponents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintComponents")] != -1);
		return call<R>("paintComponents", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto preferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("preferredSize")] != -1);
		return call<R>("preferredSize", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto print(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("print")] != -1);
		return call<R>("print", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto printComponents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("printComponents")] != -1);
		return call<R>("printComponents", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeAll")] != -1);
		return call<R>("removeAll", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeContainerListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeContainerListener")] != -1);
		return call<R>("removeContainerListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeNotify")] != -1);
		return call<R>("removeNotify", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setComponentZOrder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setComponentZOrder")] != -1);
		return call<R>("setComponentZOrder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFocusCycleRoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFocusCycleRoot")] != -1);
		return call<R>("setFocusCycleRoot", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFocusTraversalKeys(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFocusTraversalKeys")] != -1);
		return call<R>("setFocusTraversalKeys", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFocusTraversalPolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFocusTraversalPolicy")] != -1);
		return call<R>("setFocusTraversalPolicy", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFocusTraversalPolicyProvider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFocusTraversalPolicyProvider")] != -1);
		return call<R>("setFocusTraversalPolicyProvider", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFont")] != -1);
		return call<R>("setFont", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLayout")] != -1);
		return call<R>("setLayout", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto transferFocusDownCycle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("transferFocusDownCycle")] != -1);
		return call<R>("transferFocusDownCycle", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto update(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("update")] != -1);
		return call<R>("update", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto validate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("validate")] != -1);
		return call<R>("validate", forward<Args>(args)...);
	}

};

#endif
