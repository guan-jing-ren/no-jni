#ifndef java_awt_Dialog_HPP
#define java_awt_Dialog_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::Dialog : public jObject<::java::awt::Dialog, ::java::awt::Window> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "Dialog";

	constexpr static Enume field_signatures{
		jField<::java::awt::Dialog$ModalityType>("DEFAULT_MODALITY_TYPE"), //
	};

	template<typename F = ::java::awt::Dialog$ModalityType>
	static auto DEFAULT_MODALITY_TYPE() {
		static_assert(field_signatures[jField<F>("DEFAULT_MODALITY_TYPE")] != -1);
		return sat<F>("DEFAULT_MODALITY_TYPE");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::Dialog)>(), //
		jConstructor<::jvoid(::java::awt::Dialog, ::java::lang::String)>(), //
		jConstructor<::jvoid(::java::awt::Dialog, ::java::lang::String, ::jboolean)>(), //
		jConstructor<::jvoid(::java::awt::Dialog, ::java::lang::String, ::jboolean, ::java::awt::GraphicsConfiguration)>(), //
		jConstructor<::jvoid(::java::awt::Frame)>(), //
		jConstructor<::jvoid(::java::awt::Frame, ::java::lang::String)>(), //
		jConstructor<::jvoid(::java::awt::Frame, ::java::lang::String, ::jboolean)>(), //
		jConstructor<::jvoid(::java::awt::Frame, ::java::lang::String, ::jboolean, ::java::awt::GraphicsConfiguration)>(), //
		jConstructor<::jvoid(::java::awt::Frame, ::jboolean)>(), //
		jConstructor<::jvoid(::java::awt::Window)>(), //
		jConstructor<::jvoid(::java::awt::Window, ::java::awt::Dialog$ModalityType)>(), //
		jConstructor<::jvoid(::java::awt::Window, ::java::lang::String)>(), //
		jConstructor<::jvoid(::java::awt::Window, ::java::lang::String, ::java::awt::Dialog$ModalityType)>(), //
		jConstructor<::jvoid(::java::awt::Window, ::java::lang::String, ::java::awt::Dialog$ModalityType, ::java::awt::GraphicsConfiguration)>(), //
		jMethod<::jvoid()>("addNotify"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::java::awt::Dialog$ModalityType()>("getModalityType"), //
		jMethod<::java::lang::String()>("getTitle"), //
		jMethod<::jboolean()>("isModal"), //
		jMethod<::jboolean()>("isResizable"), //
		jMethod<::jboolean()>("isUndecorated"), //
		jMethod<::jvoid(::java::awt::Color)>("setBackground"), //
		jMethod<::jvoid(::jboolean)>("setModal"), //
		jMethod<::jvoid(::java::awt::Dialog$ModalityType)>("setModalityType"), //
		jMethod<::jvoid(::jfloat)>("setOpacity"), //
		jMethod<::jvoid(::jboolean)>("setResizable"), //
		jMethod<::jvoid(::java::awt::Shape)>("setShape"), //
		jMethod<::jvoid(::java::lang::String)>("setTitle"), //
		jMethod<::jvoid(::jboolean)>("setUndecorated"), //
		jMethod<::jvoid(::jboolean)>("setVisible"), //
		jMethod<::jvoid()>("toBack"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addNotify")] != -1);
		return call<R>("addNotify", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dialog$ModalityType, typename... Args>
	auto getModalityType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getModalityType")] != -1);
		return call<R>("getModalityType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTitle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTitle")] != -1);
		return call<R>("getTitle", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isModal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isModal")] != -1);
		return call<R>("isModal", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isResizable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isResizable")] != -1);
		return call<R>("isResizable", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isUndecorated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isUndecorated")] != -1);
		return call<R>("isUndecorated", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBackground")] != -1);
		return call<R>("setBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setModal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setModal")] != -1);
		return call<R>("setModal", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setModalityType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setModalityType")] != -1);
		return call<R>("setModalityType", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOpacity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOpacity")] != -1);
		return call<R>("setOpacity", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setResizable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setResizable")] != -1);
		return call<R>("setResizable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setShape(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setShape")] != -1);
		return call<R>("setShape", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTitle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTitle")] != -1);
		return call<R>("setTitle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUndecorated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUndecorated")] != -1);
		return call<R>("setUndecorated", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVisible")] != -1);
		return call<R>("setVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto toBack(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toBack")] != -1);
		return call<R>("toBack", std::forward<Args>(args)...);
	}

};

#endif
