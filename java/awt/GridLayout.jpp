#ifndef java_awt_GridLayout_HPP
#define java_awt_GridLayout_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::GridLayout : public jObject<::java::awt::GridLayout, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "GridLayout";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint, ::jint)>(), //
		jConstructor<::jvoid(::jint, ::jint, ::jint, ::jint)>(), //
		jMethod<::jvoid(::java::lang::String, ::java::awt::Component)>("addLayoutComponent"), //
		jMethod<::jint()>("getColumns"), //
		jMethod<::jint()>("getHgap"), //
		jMethod<::jint()>("getRows"), //
		jMethod<::jint()>("getVgap"), //
		jMethod<::jvoid(::java::awt::Container)>("layoutContainer"), //
		jMethod<::java::awt::Dimension(::java::awt::Container)>("minimumLayoutSize"), //
		jMethod<::java::awt::Dimension(::java::awt::Container)>("preferredLayoutSize"), //
		jMethod<::jvoid(::java::awt::Component)>("removeLayoutComponent"), //
		jMethod<::jvoid(::jint)>("setColumns"), //
		jMethod<::jvoid(::jint)>("setHgap"), //
		jMethod<::jvoid(::jint)>("setRows"), //
		jMethod<::jvoid(::jint)>("setVgap"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addLayoutComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addLayoutComponent")] != -1);
		return call<R>("addLayoutComponent", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getColumns(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColumns")] != -1);
		return call<R>("getColumns", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHgap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHgap")] != -1);
		return call<R>("getHgap", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRows(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRows")] != -1);
		return call<R>("getRows", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getVgap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getVgap")] != -1);
		return call<R>("getVgap", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto layoutContainer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("layoutContainer")] != -1);
		return call<R>("layoutContainer", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto minimumLayoutSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("minimumLayoutSize")] != -1);
		return call<R>("minimumLayoutSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto preferredLayoutSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("preferredLayoutSize")] != -1);
		return call<R>("preferredLayoutSize", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeLayoutComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeLayoutComponent")] != -1);
		return call<R>("removeLayoutComponent", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColumns(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setColumns")] != -1);
		return call<R>("setColumns", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHgap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setHgap")] != -1);
		return call<R>("setHgap", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRows(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setRows")] != -1);
		return call<R>("setRows", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVgap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setVgap")] != -1);
		return call<R>("setVgap", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
