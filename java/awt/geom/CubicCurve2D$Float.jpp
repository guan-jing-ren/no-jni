#ifndef java_awt_geom_CubicCurve2D$Float_HPP
#define java_awt_geom_CubicCurve2D$Float_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::geom::CubicCurve2D$Float : public jObject<::java::awt::geom::CubicCurve2D$Float, ::java::awt::geom::CubicCurve2D> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_geom / "CubicCurve2D$Float";

	constexpr static Enume field_signatures{
		jField<::jfloat>("ctrlx1"), //
		jField<::jfloat>("ctrlx2"), //
		jField<::jfloat>("ctrly1"), //
		jField<::jfloat>("ctrly2"), //
		jField<::jfloat>("x1"), //
		jField<::jfloat>("x2"), //
		jField<::jfloat>("y1"), //
		jField<::jfloat>("y2"), //
	};

	template<typename F = ::jfloat>
	auto ctrlx1() const {
		static_assert(field_signatures[jField<F>("ctrlx1")] != -1);
		return at<F>("ctrlx1");
	}

	template<typename F = ::jfloat>
	auto ctrlx2() const {
		static_assert(field_signatures[jField<F>("ctrlx2")] != -1);
		return at<F>("ctrlx2");
	}

	template<typename F = ::jfloat>
	auto ctrly1() const {
		static_assert(field_signatures[jField<F>("ctrly1")] != -1);
		return at<F>("ctrly1");
	}

	template<typename F = ::jfloat>
	auto ctrly2() const {
		static_assert(field_signatures[jField<F>("ctrly2")] != -1);
		return at<F>("ctrly2");
	}

	template<typename F = ::jfloat>
	auto x1() const {
		static_assert(field_signatures[jField<F>("x1")] != -1);
		return at<F>("x1");
	}

	template<typename F = ::jfloat>
	auto x2() const {
		static_assert(field_signatures[jField<F>("x2")] != -1);
		return at<F>("x2");
	}

	template<typename F = ::jfloat>
	auto y1() const {
		static_assert(field_signatures[jField<F>("y1")] != -1);
		return at<F>("y1");
	}

	template<typename F = ::jfloat>
	auto y2() const {
		static_assert(field_signatures[jField<F>("y2")] != -1);
		return at<F>("y2");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jfloat, ::jfloat, ::jfloat, ::jfloat, ::jfloat, ::jfloat, ::jfloat, ::jfloat)>(), //
		jMethod<::java::awt::geom::Rectangle2D()>("getBounds2D"), //
		jMethod<::java::awt::geom::Point2D()>("getCtrlP1"), //
		jMethod<::java::awt::geom::Point2D()>("getCtrlP2"), //
		jMethod<::jdouble()>("getCtrlX1"), //
		jMethod<::jdouble()>("getCtrlX2"), //
		jMethod<::jdouble()>("getCtrlY1"), //
		jMethod<::jdouble()>("getCtrlY2"), //
		jMethod<::java::awt::geom::Point2D()>("getP1"), //
		jMethod<::java::awt::geom::Point2D()>("getP2"), //
		jMethod<::jdouble()>("getX1"), //
		jMethod<::jdouble()>("getX2"), //
		jMethod<::jdouble()>("getY1"), //
		jMethod<::jdouble()>("getY2"), //
		jMethod<::jvoid(::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble)>("setCurve"), //
		jMethod<::jvoid(::jfloat, ::jfloat, ::jfloat, ::jfloat, ::jfloat, ::jfloat, ::jfloat, ::jfloat)>("setCurve"), //
	};

	template<typename R = ::java::awt::geom::Rectangle2D, typename... Args>
	auto getBounds2D(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBounds2D")] != -1);
		return call<R>("getBounds2D", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Point2D, typename... Args>
	auto getCtrlP1(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCtrlP1")] != -1);
		return call<R>("getCtrlP1", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Point2D, typename... Args>
	auto getCtrlP2(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCtrlP2")] != -1);
		return call<R>("getCtrlP2", forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getCtrlX1(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCtrlX1")] != -1);
		return call<R>("getCtrlX1", forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getCtrlX2(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCtrlX2")] != -1);
		return call<R>("getCtrlX2", forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getCtrlY1(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCtrlY1")] != -1);
		return call<R>("getCtrlY1", forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getCtrlY2(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCtrlY2")] != -1);
		return call<R>("getCtrlY2", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Point2D, typename... Args>
	auto getP1(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getP1")] != -1);
		return call<R>("getP1", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Point2D, typename... Args>
	auto getP2(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getP2")] != -1);
		return call<R>("getP2", forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getX1(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getX1")] != -1);
		return call<R>("getX1", forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getX2(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getX2")] != -1);
		return call<R>("getX2", forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getY1(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getY1")] != -1);
		return call<R>("getY1", forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getY2(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getY2")] != -1);
		return call<R>("getY2", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCurve(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCurve")] != -1);
		return call<R>("setCurve", forward<Args>(args)...);
	}

};

#endif
