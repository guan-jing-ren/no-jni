#ifndef java_awt_geom_Arc2D_HPP
#define java_awt_geom_Arc2D_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::geom::Arc2D : public jObject<::java::awt::geom::Arc2D, ::java::awt::geom::RectangularShape> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_geom / "Arc2D";

	constexpr static Enume field_signatures{
		jField<::jint>("CHORD"), //
		jField<::jint>("OPEN"), //
		jField<::jint>("PIE"), //
	};

	template<typename F = ::jint>
	static auto CHORD() {
		static_assert(field_signatures[jField<F>("CHORD")] != -1);
		return sat<F>("CHORD");
	}

	template<typename F = ::jint>
	static auto OPEN() {
		static_assert(field_signatures[jField<F>("OPEN")] != -1);
		return sat<F>("OPEN");
	}

	template<typename F = ::jint>
	static auto PIE() {
		static_assert(field_signatures[jField<F>("PIE")] != -1);
		return sat<F>("PIE");
	}

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::jdouble, ::jdouble)>("contains"), //
		jMethod<::jboolean(::jdouble, ::jdouble, ::jdouble, ::jdouble)>("contains"), //
		jMethod<::jboolean(::java::awt::geom::Rectangle2D)>("contains"), //
		jMethod<::jboolean(::jdouble)>("containsAngle"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jdouble()>("getAngleExtent"), //
		jMethod<::jdouble()>("getAngleStart"), //
		jMethod<::jint()>("getArcType"), //
		jMethod<::java::awt::geom::Rectangle2D()>("getBounds2D"), //
		jMethod<::java::awt::geom::Point2D()>("getEndPoint"), //
		jMethod<::java::awt::geom::PathIterator(::java::awt::geom::AffineTransform)>("getPathIterator"), //
		jMethod<::java::awt::geom::Point2D()>("getStartPoint"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean(::jdouble, ::jdouble, ::jdouble, ::jdouble)>("intersects"), //
		jMethod<::jvoid(::jdouble)>("setAngleExtent"), //
		jMethod<::jvoid(::jdouble)>("setAngleStart"), //
		jMethod<::jvoid(::java::awt::geom::Point2D)>("setAngleStart"), //
		jMethod<::jvoid(::jdouble, ::jdouble, ::jdouble, ::jdouble)>("setAngles"), //
		jMethod<::jvoid(::java::awt::geom::Point2D, ::java::awt::geom::Point2D)>("setAngles"), //
		jMethod<::jvoid(::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jint)>("setArc"), //
		jMethod<::jvoid(::java::awt::geom::Arc2D)>("setArc"), //
		jMethod<::jvoid(::java::awt::geom::Point2D, ::java::awt::geom::Dimension2D, ::jdouble, ::jdouble, ::jint)>("setArc"), //
		jMethod<::jvoid(::java::awt::geom::Rectangle2D, ::jdouble, ::jdouble, ::jint)>("setArc"), //
		jMethod<::jvoid(::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jint)>("setArcByCenter"), //
		jMethod<::jvoid(::java::awt::geom::Point2D, ::java::awt::geom::Point2D, ::java::awt::geom::Point2D, ::jdouble)>("setArcByTangent"), //
		jMethod<::jvoid(::jint)>("setArcType"), //
		jMethod<::jvoid(::jdouble, ::jdouble, ::jdouble, ::jdouble)>("setFrame"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto contains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("contains")] != -1);
		return call<R>("contains", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto containsAngle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("containsAngle")] != -1);
		return call<R>("containsAngle", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getAngleExtent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAngleExtent")] != -1);
		return call<R>("getAngleExtent", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getAngleStart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAngleStart")] != -1);
		return call<R>("getAngleStart", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getArcType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getArcType")] != -1);
		return call<R>("getArcType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Rectangle2D, typename... Args>
	auto getBounds2D(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds2D")] != -1);
		return call<R>("getBounds2D", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Point2D, typename... Args>
	auto getEndPoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEndPoint")] != -1);
		return call<R>("getEndPoint", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::PathIterator, typename... Args>
	auto getPathIterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPathIterator")] != -1);
		return call<R>("getPathIterator", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Point2D, typename... Args>
	auto getStartPoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStartPoint")] != -1);
		return call<R>("getStartPoint", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto intersects(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("intersects")] != -1);
		return call<R>("intersects", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAngleExtent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAngleExtent")] != -1);
		return call<R>("setAngleExtent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAngleStart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAngleStart")] != -1);
		return call<R>("setAngleStart", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAngles(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAngles")] != -1);
		return call<R>("setAngles", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setArc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setArc")] != -1);
		return call<R>("setArc", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setArcByCenter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setArcByCenter")] != -1);
		return call<R>("setArcByCenter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setArcByTangent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setArcByTangent")] != -1);
		return call<R>("setArcByTangent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setArcType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setArcType")] != -1);
		return call<R>("setArcType", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFrame(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFrame")] != -1);
		return call<R>("setFrame", std::forward<Args>(args)...);
	}

};

#endif
