#ifndef java_awt_geom_Path2D$Float_HPP
#define java_awt_geom_Path2D$Float_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::geom::Path2D$Float : public jObject<::java::awt::geom::Path2D$Float, ::java::awt::geom::Path2D> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_geom / "Path2D$Float";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint)>(), //
		jConstructor<::jvoid(::jint, ::jint)>(), //
		jConstructor<::jvoid(::java::awt::Shape)>(), //
		jConstructor<::jvoid(::java::awt::Shape, ::java::awt::geom::AffineTransform)>(), //
		jMethod<::jvoid(::java::awt::geom::PathIterator, ::jboolean)>("append"), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jvoid(::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble)>("curveTo"), //
		jMethod<::jvoid(::jfloat, ::jfloat, ::jfloat, ::jfloat, ::jfloat, ::jfloat)>("curveTo"), //
		jMethod<::java::awt::geom::Rectangle2D()>("getBounds2D"), //
		jMethod<::java::awt::geom::PathIterator(::java::awt::geom::AffineTransform)>("getPathIterator"), //
		jMethod<::jvoid(::jdouble, ::jdouble)>("lineTo"), //
		jMethod<::jvoid(::jfloat, ::jfloat)>("lineTo"), //
		jMethod<::jvoid(::jdouble, ::jdouble)>("moveTo"), //
		jMethod<::jvoid(::jfloat, ::jfloat)>("moveTo"), //
		jMethod<::jvoid(::jdouble, ::jdouble, ::jdouble, ::jdouble)>("quadTo"), //
		jMethod<::jvoid(::jfloat, ::jfloat, ::jfloat, ::jfloat)>("quadTo"), //
		jMethod<::jvoid(::java::awt::geom::AffineTransform)>("transform"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto append(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("append")] != -1);
		return call<R>("append", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto curveTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("curveTo")] != -1);
		return call<R>("curveTo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Rectangle2D, typename... Args>
	auto getBounds2D(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds2D")] != -1);
		return call<R>("getBounds2D", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::PathIterator, typename... Args>
	auto getPathIterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPathIterator")] != -1);
		return call<R>("getPathIterator", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto lineTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lineTo")] != -1);
		return call<R>("lineTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto moveTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("moveTo")] != -1);
		return call<R>("moveTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto quadTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("quadTo")] != -1);
		return call<R>("quadTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto transform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("transform")] != -1);
		return call<R>("transform", std::forward<Args>(args)...);
	}

};

#endif
