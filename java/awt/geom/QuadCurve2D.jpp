#ifndef java_awt_geom_QuadCurve2D_HPP
#define java_awt_geom_QuadCurve2D_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::geom::QuadCurve2D : public jObject<::java::awt::geom::QuadCurve2D, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_geom / "QuadCurve2D";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jboolean(::jdouble, ::jdouble)>("contains"), //
		jMethod<::jboolean(::jdouble, ::jdouble, ::jdouble, ::jdouble)>("contains"), //
		jMethod<::jboolean(::java::awt::geom::Point2D)>("contains"), //
		jMethod<::jboolean(::java::awt::geom::Rectangle2D)>("contains"), //
		jMethod<::java::awt::Rectangle()>("getBounds"), //
		jMethod<::java::awt::geom::Rectangle2D()>("getBounds2D"), //
		jMethod<::java::awt::geom::Point2D()>("getCtrlPt"), //
		jMethod<::jdouble()>("getCtrlX"), //
		jMethod<::jdouble()>("getCtrlY"), //
		jMethod<::jdouble()>("getFlatness"), //
		jMethod<::jdouble(::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble)>("getFlatness"), //
		jMethod<::jdouble(::jdouble *, ::jint)>("getFlatness"), //
		jMethod<::jdouble()>("getFlatnessSq"), //
		jMethod<::jdouble(::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble)>("getFlatnessSq"), //
		jMethod<::jdouble(::jdouble *, ::jint)>("getFlatnessSq"), //
		jMethod<::java::awt::geom::Point2D()>("getP1"), //
		jMethod<::java::awt::geom::Point2D()>("getP2"), //
		jMethod<::java::awt::geom::PathIterator(::java::awt::geom::AffineTransform)>("getPathIterator"), //
		jMethod<::java::awt::geom::PathIterator(::java::awt::geom::AffineTransform, ::jdouble)>("getPathIterator"), //
		jMethod<::jdouble()>("getX1"), //
		jMethod<::jdouble()>("getX2"), //
		jMethod<::jdouble()>("getY1"), //
		jMethod<::jdouble()>("getY2"), //
		jMethod<::jboolean(::jdouble, ::jdouble, ::jdouble, ::jdouble)>("intersects"), //
		jMethod<::jboolean(::java::awt::geom::Rectangle2D)>("intersects"), //
		jMethod<::jvoid(::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble)>("setCurve"), //
		jMethod<::jvoid(::java::awt::geom::Point2D, ::java::awt::geom::Point2D, ::java::awt::geom::Point2D)>("setCurve"), //
		jMethod<::jvoid(::java::awt::geom::QuadCurve2D)>("setCurve"), //
		jMethod<::jvoid(::jdouble *, ::jint)>("setCurve"), //
		jMethod<::jvoid(::java::awt::geom::Point2D *, ::jint)>("setCurve"), //
		jMethod<::jint(::jdouble *)>("solveQuadratic"), //
		jMethod<::jint(::jdouble *, ::jdouble *)>("solveQuadratic"), //
		jMethod<::jvoid(::java::awt::geom::QuadCurve2D, ::java::awt::geom::QuadCurve2D)>("subdivide"), //
		jMethod<::jvoid(::java::awt::geom::QuadCurve2D, ::java::awt::geom::QuadCurve2D, ::java::awt::geom::QuadCurve2D)>("subdivide"), //
		jMethod<::jvoid(::jdouble *, ::jint, ::jdouble *, ::jint, ::jdouble *, ::jint)>("subdivide"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto contains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("contains")] != -1);
		return call<R>("contains", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds")] != -1);
		return call<R>("getBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Rectangle2D, typename... Args>
	auto getBounds2D(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds2D")] != -1);
		return call<R>("getBounds2D", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Point2D, typename... Args>
	auto getCtrlPt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCtrlPt")] != -1);
		return call<R>("getCtrlPt", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getCtrlX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCtrlX")] != -1);
		return call<R>("getCtrlX", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getCtrlY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCtrlY")] != -1);
		return call<R>("getCtrlY", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getFlatness(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFlatness")] != -1);
		return call<R>("getFlatness", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getFlatnessSq(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFlatnessSq")] != -1);
		return call<R>("getFlatnessSq", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Point2D, typename... Args>
	auto getP1(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getP1")] != -1);
		return call<R>("getP1", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Point2D, typename... Args>
	auto getP2(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getP2")] != -1);
		return call<R>("getP2", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::PathIterator, typename... Args>
	auto getPathIterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPathIterator")] != -1);
		return call<R>("getPathIterator", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getX1(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getX1")] != -1);
		return call<R>("getX1", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getX2(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getX2")] != -1);
		return call<R>("getX2", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getY1(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getY1")] != -1);
		return call<R>("getY1", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getY2(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getY2")] != -1);
		return call<R>("getY2", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto intersects(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("intersects")] != -1);
		return call<R>("intersects", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCurve(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCurve")] != -1);
		return call<R>("setCurve", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto solveQuadratic(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("solveQuadratic")] != -1);
		return scall<R>("solveQuadratic", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto subdivide(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("subdivide")] != -1);
		return call<R>("subdivide", std::forward<Args>(args)...);
	}

};

#endif
