#ifndef java_awt_geom_AffineTransform_HPP
#define java_awt_geom_AffineTransform_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::geom::AffineTransform : public jObject<::java::awt::geom::AffineTransform, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_geom / "AffineTransform";

	constexpr static Enume field_signatures{
		jField<::jint>("TYPE_FLIP"), //
		jField<::jint>("TYPE_GENERAL_ROTATION"), //
		jField<::jint>("TYPE_GENERAL_SCALE"), //
		jField<::jint>("TYPE_GENERAL_TRANSFORM"), //
		jField<::jint>("TYPE_IDENTITY"), //
		jField<::jint>("TYPE_MASK_ROTATION"), //
		jField<::jint>("TYPE_MASK_SCALE"), //
		jField<::jint>("TYPE_QUADRANT_ROTATION"), //
		jField<::jint>("TYPE_TRANSLATION"), //
		jField<::jint>("TYPE_UNIFORM_SCALE"), //
	};

	template<typename F = ::jint>
	static auto TYPE_FLIP() {
		static_assert(field_signatures[jField<F>("TYPE_FLIP")] != -1);
		return sat<F>("TYPE_FLIP");
	}

	template<typename F = ::jint>
	static auto TYPE_GENERAL_ROTATION() {
		static_assert(field_signatures[jField<F>("TYPE_GENERAL_ROTATION")] != -1);
		return sat<F>("TYPE_GENERAL_ROTATION");
	}

	template<typename F = ::jint>
	static auto TYPE_GENERAL_SCALE() {
		static_assert(field_signatures[jField<F>("TYPE_GENERAL_SCALE")] != -1);
		return sat<F>("TYPE_GENERAL_SCALE");
	}

	template<typename F = ::jint>
	static auto TYPE_GENERAL_TRANSFORM() {
		static_assert(field_signatures[jField<F>("TYPE_GENERAL_TRANSFORM")] != -1);
		return sat<F>("TYPE_GENERAL_TRANSFORM");
	}

	template<typename F = ::jint>
	static auto TYPE_IDENTITY() {
		static_assert(field_signatures[jField<F>("TYPE_IDENTITY")] != -1);
		return sat<F>("TYPE_IDENTITY");
	}

	template<typename F = ::jint>
	static auto TYPE_MASK_ROTATION() {
		static_assert(field_signatures[jField<F>("TYPE_MASK_ROTATION")] != -1);
		return sat<F>("TYPE_MASK_ROTATION");
	}

	template<typename F = ::jint>
	static auto TYPE_MASK_SCALE() {
		static_assert(field_signatures[jField<F>("TYPE_MASK_SCALE")] != -1);
		return sat<F>("TYPE_MASK_SCALE");
	}

	template<typename F = ::jint>
	static auto TYPE_QUADRANT_ROTATION() {
		static_assert(field_signatures[jField<F>("TYPE_QUADRANT_ROTATION")] != -1);
		return sat<F>("TYPE_QUADRANT_ROTATION");
	}

	template<typename F = ::jint>
	static auto TYPE_TRANSLATION() {
		static_assert(field_signatures[jField<F>("TYPE_TRANSLATION")] != -1);
		return sat<F>("TYPE_TRANSLATION");
	}

	template<typename F = ::jint>
	static auto TYPE_UNIFORM_SCALE() {
		static_assert(field_signatures[jField<F>("TYPE_UNIFORM_SCALE")] != -1);
		return sat<F>("TYPE_UNIFORM_SCALE");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble)>(), //
		jConstructor<::jvoid(::jfloat, ::jfloat, ::jfloat, ::jfloat, ::jfloat, ::jfloat)>(), //
		jConstructor<::jvoid(::java::awt::geom::AffineTransform)>(), //
		jConstructor<::jvoid(::jdouble *)>(), //
		jConstructor<::jvoid(::jfloat *)>(), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jvoid(::java::awt::geom::AffineTransform)>("concatenate"), //
		jMethod<::java::awt::geom::AffineTransform()>("createInverse"), //
		jMethod<::java::awt::Shape(::java::awt::Shape)>("createTransformedShape"), //
		jMethod<::java::awt::geom::Point2D(::java::awt::geom::Point2D, ::java::awt::geom::Point2D)>("deltaTransform"), //
		jMethod<::jvoid(::jdouble *, ::jint, ::jdouble *, ::jint, ::jint)>("deltaTransform"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jdouble()>("getDeterminant"), //
		jMethod<::jvoid(::jdouble *)>("getMatrix"), //
		jMethod<::java::awt::geom::AffineTransform(::jint)>("getQuadrantRotateInstance"), //
		jMethod<::java::awt::geom::AffineTransform(::jint, ::jdouble, ::jdouble)>("getQuadrantRotateInstance"), //
		jMethod<::java::awt::geom::AffineTransform(::jdouble)>("getRotateInstance"), //
		jMethod<::java::awt::geom::AffineTransform(::jdouble, ::jdouble)>("getRotateInstance"), //
		jMethod<::java::awt::geom::AffineTransform(::jdouble, ::jdouble, ::jdouble)>("getRotateInstance"), //
		jMethod<::java::awt::geom::AffineTransform(::jdouble, ::jdouble, ::jdouble, ::jdouble)>("getRotateInstance"), //
		jMethod<::java::awt::geom::AffineTransform(::jdouble, ::jdouble)>("getScaleInstance"), //
		jMethod<::jdouble()>("getScaleX"), //
		jMethod<::jdouble()>("getScaleY"), //
		jMethod<::java::awt::geom::AffineTransform(::jdouble, ::jdouble)>("getShearInstance"), //
		jMethod<::jdouble()>("getShearX"), //
		jMethod<::jdouble()>("getShearY"), //
		jMethod<::java::awt::geom::AffineTransform(::jdouble, ::jdouble)>("getTranslateInstance"), //
		jMethod<::jdouble()>("getTranslateX"), //
		jMethod<::jdouble()>("getTranslateY"), //
		jMethod<::jint()>("getType"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::awt::geom::Point2D(::java::awt::geom::Point2D, ::java::awt::geom::Point2D)>("inverseTransform"), //
		jMethod<::jvoid(::jdouble *, ::jint, ::jdouble *, ::jint, ::jint)>("inverseTransform"), //
		jMethod<::jvoid()>("invert"), //
		jMethod<::jboolean()>("isIdentity"), //
		jMethod<::jvoid(::java::awt::geom::AffineTransform)>("preConcatenate"), //
		jMethod<::jvoid(::jint)>("quadrantRotate"), //
		jMethod<::jvoid(::jint, ::jdouble, ::jdouble)>("quadrantRotate"), //
		jMethod<::jvoid(::jdouble)>("rotate"), //
		jMethod<::jvoid(::jdouble, ::jdouble)>("rotate"), //
		jMethod<::jvoid(::jdouble, ::jdouble, ::jdouble)>("rotate"), //
		jMethod<::jvoid(::jdouble, ::jdouble, ::jdouble, ::jdouble)>("rotate"), //
		jMethod<::jvoid(::jdouble, ::jdouble)>("scale"), //
		jMethod<::jvoid()>("setToIdentity"), //
		jMethod<::jvoid(::jint)>("setToQuadrantRotation"), //
		jMethod<::jvoid(::jint, ::jdouble, ::jdouble)>("setToQuadrantRotation"), //
		jMethod<::jvoid(::jdouble)>("setToRotation"), //
		jMethod<::jvoid(::jdouble, ::jdouble)>("setToRotation"), //
		jMethod<::jvoid(::jdouble, ::jdouble, ::jdouble)>("setToRotation"), //
		jMethod<::jvoid(::jdouble, ::jdouble, ::jdouble, ::jdouble)>("setToRotation"), //
		jMethod<::jvoid(::jdouble, ::jdouble)>("setToScale"), //
		jMethod<::jvoid(::jdouble, ::jdouble)>("setToShear"), //
		jMethod<::jvoid(::jdouble, ::jdouble)>("setToTranslation"), //
		jMethod<::jvoid(::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble)>("setTransform"), //
		jMethod<::jvoid(::java::awt::geom::AffineTransform)>("setTransform"), //
		jMethod<::jvoid(::jdouble, ::jdouble)>("shear"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::awt::geom::Point2D(::java::awt::geom::Point2D, ::java::awt::geom::Point2D)>("transform"), //
		jMethod<::jvoid(::jdouble *, ::jint, ::jdouble *, ::jint, ::jint)>("transform"), //
		jMethod<::jvoid(::jdouble *, ::jint, ::jfloat *, ::jint, ::jint)>("transform"), //
		jMethod<::jvoid(::jfloat *, ::jint, ::jdouble *, ::jint, ::jint)>("transform"), //
		jMethod<::jvoid(::jfloat *, ::jint, ::jfloat *, ::jint, ::jint)>("transform"), //
		jMethod<::jvoid(::java::awt::geom::Point2D *, ::jint, ::java::awt::geom::Point2D *, ::jint, ::jint)>("transform"), //
		jMethod<::jvoid(::jdouble, ::jdouble)>("translate"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto concatenate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("concatenate")] != -1);
		return call<R>("concatenate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::AffineTransform, typename... Args>
	auto createInverse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createInverse")] != -1);
		return call<R>("createInverse", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Shape, typename... Args>
	auto createTransformedShape(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createTransformedShape")] != -1);
		return call<R>("createTransformedShape", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Point2D, typename... Args>
	auto deltaTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deltaTransform")] != -1);
		return call<R>("deltaTransform", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getDeterminant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDeterminant")] != -1);
		return call<R>("getDeterminant", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getMatrix(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMatrix")] != -1);
		return call<R>("getMatrix", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::AffineTransform, typename... Args>
	static auto getQuadrantRotateInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getQuadrantRotateInstance")] != -1);
		return scall<R>("getQuadrantRotateInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::AffineTransform, typename... Args>
	static auto getRotateInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRotateInstance")] != -1);
		return scall<R>("getRotateInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::AffineTransform, typename... Args>
	static auto getScaleInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScaleInstance")] != -1);
		return scall<R>("getScaleInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getScaleX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScaleX")] != -1);
		return call<R>("getScaleX", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getScaleY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScaleY")] != -1);
		return call<R>("getScaleY", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::AffineTransform, typename... Args>
	static auto getShearInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getShearInstance")] != -1);
		return scall<R>("getShearInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getShearX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getShearX")] != -1);
		return call<R>("getShearX", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getShearY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getShearY")] != -1);
		return call<R>("getShearY", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::AffineTransform, typename... Args>
	static auto getTranslateInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTranslateInstance")] != -1);
		return scall<R>("getTranslateInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getTranslateX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTranslateX")] != -1);
		return call<R>("getTranslateX", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getTranslateY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTranslateY")] != -1);
		return call<R>("getTranslateY", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Point2D, typename... Args>
	auto inverseTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("inverseTransform")] != -1);
		return call<R>("inverseTransform", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto invert(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invert")] != -1);
		return call<R>("invert", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isIdentity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isIdentity")] != -1);
		return call<R>("isIdentity", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto preConcatenate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("preConcatenate")] != -1);
		return call<R>("preConcatenate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto quadrantRotate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("quadrantRotate")] != -1);
		return call<R>("quadrantRotate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto rotate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rotate")] != -1);
		return call<R>("rotate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto scale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("scale")] != -1);
		return call<R>("scale", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setToIdentity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setToIdentity")] != -1);
		return call<R>("setToIdentity", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setToQuadrantRotation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setToQuadrantRotation")] != -1);
		return call<R>("setToQuadrantRotation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setToRotation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setToRotation")] != -1);
		return call<R>("setToRotation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setToScale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setToScale")] != -1);
		return call<R>("setToScale", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setToShear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setToShear")] != -1);
		return call<R>("setToShear", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setToTranslation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setToTranslation")] != -1);
		return call<R>("setToTranslation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTransform")] != -1);
		return call<R>("setTransform", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto shear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shear")] != -1);
		return call<R>("shear", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Point2D, typename... Args>
	auto transform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("transform")] != -1);
		return call<R>("transform", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto translate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("translate")] != -1);
		return call<R>("translate", std::forward<Args>(args)...);
	}

};

#endif
