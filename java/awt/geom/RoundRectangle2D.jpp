#ifndef java_awt_geom_RoundRectangle2D_HPP
#define java_awt_geom_RoundRectangle2D_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::geom::RoundRectangle2D : public jObject<::java::awt::geom::RoundRectangle2D, ::java::awt::geom::RectangularShape> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_geom / "RoundRectangle2D";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::jdouble, ::jdouble)>("contains"), //
		jMethod<::jboolean(::jdouble, ::jdouble, ::jdouble, ::jdouble)>("contains"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jdouble()>("getArcHeight"), //
		jMethod<::jdouble()>("getArcWidth"), //
		jMethod<::java::awt::geom::PathIterator(::java::awt::geom::AffineTransform)>("getPathIterator"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean(::jdouble, ::jdouble, ::jdouble, ::jdouble)>("intersects"), //
		jMethod<::jvoid(::jdouble, ::jdouble, ::jdouble, ::jdouble)>("setFrame"), //
		jMethod<::jvoid(::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble)>("setRoundRect"), //
		jMethod<::jvoid(::java::awt::geom::RoundRectangle2D)>("setRoundRect"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto contains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("contains")] != -1);
		return call<R>("contains", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getArcHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getArcHeight")] != -1);
		return call<R>("getArcHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getArcWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getArcWidth")] != -1);
		return call<R>("getArcWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::PathIterator, typename... Args>
	auto getPathIterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPathIterator")] != -1);
		return call<R>("getPathIterator", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto intersects(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("intersects")] != -1);
		return call<R>("intersects", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFrame(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFrame")] != -1);
		return call<R>("setFrame", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRoundRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRoundRect")] != -1);
		return call<R>("setRoundRect", std::forward<Args>(args)...);
	}

};

#endif
