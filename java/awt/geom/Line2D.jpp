#ifndef java_awt_geom_Line2D_HPP
#define java_awt_geom_Line2D_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::geom::Line2D : public jObject<::java::awt::geom::Line2D, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_geom / "Line2D";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jboolean(::jdouble, ::jdouble)>("contains"), //
		jMethod<::jboolean(::jdouble, ::jdouble, ::jdouble, ::jdouble)>("contains"), //
		jMethod<::jboolean(::java::awt::geom::Point2D)>("contains"), //
		jMethod<::jboolean(::java::awt::geom::Rectangle2D)>("contains"), //
		jMethod<::java::awt::Rectangle()>("getBounds"), //
		jMethod<::java::awt::geom::Point2D()>("getP1"), //
		jMethod<::java::awt::geom::Point2D()>("getP2"), //
		jMethod<::java::awt::geom::PathIterator(::java::awt::geom::AffineTransform)>("getPathIterator"), //
		jMethod<::java::awt::geom::PathIterator(::java::awt::geom::AffineTransform, ::jdouble)>("getPathIterator"), //
		jMethod<::jdouble()>("getX1"), //
		jMethod<::jdouble()>("getX2"), //
		jMethod<::jdouble()>("getY1"), //
		jMethod<::jdouble()>("getY2"), //
		jMethod<::jboolean(::jdouble, ::jdouble, ::jdouble, ::jdouble)>("intersects"), //
		jMethod<::jboolean(::java::awt::geom::Rectangle2D)>("intersects"), //
		jMethod<::jboolean(::jdouble, ::jdouble, ::jdouble, ::jdouble)>("intersectsLine"), //
		jMethod<::jboolean(::java::awt::geom::Line2D)>("intersectsLine"), //
		jMethod<::jboolean(::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble)>("linesIntersect"), //
		jMethod<::jdouble(::jdouble, ::jdouble)>("ptLineDist"), //
		jMethod<::jdouble(::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble)>("ptLineDist"), //
		jMethod<::jdouble(::java::awt::geom::Point2D)>("ptLineDist"), //
		jMethod<::jdouble(::jdouble, ::jdouble)>("ptLineDistSq"), //
		jMethod<::jdouble(::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble)>("ptLineDistSq"), //
		jMethod<::jdouble(::java::awt::geom::Point2D)>("ptLineDistSq"), //
		jMethod<::jdouble(::jdouble, ::jdouble)>("ptSegDist"), //
		jMethod<::jdouble(::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble)>("ptSegDist"), //
		jMethod<::jdouble(::java::awt::geom::Point2D)>("ptSegDist"), //
		jMethod<::jdouble(::jdouble, ::jdouble)>("ptSegDistSq"), //
		jMethod<::jdouble(::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble)>("ptSegDistSq"), //
		jMethod<::jdouble(::java::awt::geom::Point2D)>("ptSegDistSq"), //
		jMethod<::jint(::jdouble, ::jdouble)>("relativeCCW"), //
		jMethod<::jint(::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble)>("relativeCCW"), //
		jMethod<::jint(::java::awt::geom::Point2D)>("relativeCCW"), //
		jMethod<::jvoid(::jdouble, ::jdouble, ::jdouble, ::jdouble)>("setLine"), //
		jMethod<::jvoid(::java::awt::geom::Line2D)>("setLine"), //
		jMethod<::jvoid(::java::awt::geom::Point2D, ::java::awt::geom::Point2D)>("setLine"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto contains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("contains")] != -1);
		return call<R>("contains", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds")] != -1);
		return call<R>("getBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Point2D, typename... Args>
	auto getP1(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getP1")] != -1);
		return call<R>("getP1", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Point2D, typename... Args>
	auto getP2(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getP2")] != -1);
		return call<R>("getP2", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::PathIterator, typename... Args>
	auto getPathIterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPathIterator")] != -1);
		return call<R>("getPathIterator", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getX1(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getX1")] != -1);
		return call<R>("getX1", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getX2(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getX2")] != -1);
		return call<R>("getX2", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getY1(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getY1")] != -1);
		return call<R>("getY1", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getY2(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getY2")] != -1);
		return call<R>("getY2", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto intersects(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("intersects")] != -1);
		return call<R>("intersects", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto intersectsLine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("intersectsLine")] != -1);
		return call<R>("intersectsLine", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto linesIntersect(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("linesIntersect")] != -1);
		return scall<R>("linesIntersect", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto ptLineDist(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ptLineDist")] != -1);
		return call<R>("ptLineDist", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto ptLineDistSq(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ptLineDistSq")] != -1);
		return call<R>("ptLineDistSq", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto ptSegDist(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ptSegDist")] != -1);
		return call<R>("ptSegDist", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto ptSegDistSq(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ptSegDistSq")] != -1);
		return call<R>("ptSegDistSq", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto relativeCCW(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("relativeCCW")] != -1);
		return call<R>("relativeCCW", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLine")] != -1);
		return call<R>("setLine", std::forward<Args>(args)...);
	}

};

#endif
