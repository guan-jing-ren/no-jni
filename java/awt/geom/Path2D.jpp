#ifndef java_awt_geom_Path2D_HPP
#define java_awt_geom_Path2D_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::geom::Path2D : public jObject<::java::awt::geom::Path2D, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_geom / "Path2D";

	constexpr static Enume field_signatures{
		jField<::jint>("WIND_EVEN_ODD"), //
		jField<::jint>("WIND_NON_ZERO"), //
	};

	template<typename F = ::jint>
	static auto WIND_EVEN_ODD() {
		static_assert(field_signatures[jField<F>("WIND_EVEN_ODD")] != -1);
		return sat<F>("WIND_EVEN_ODD");
	}

	template<typename F = ::jint>
	static auto WIND_NON_ZERO() {
		static_assert(field_signatures[jField<F>("WIND_NON_ZERO")] != -1);
		return sat<F>("WIND_NON_ZERO");
	}

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::awt::Shape, ::jboolean)>("append"), //
		jMethod<::jvoid(::java::awt::geom::PathIterator, ::jboolean)>("append"), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jvoid()>("closePath"), //
		jMethod<::jboolean(::jdouble, ::jdouble)>("contains"), //
		jMethod<::jboolean(::jdouble, ::jdouble, ::jdouble, ::jdouble)>("contains"), //
		jMethod<::jboolean(::java::awt::geom::PathIterator, ::jdouble, ::jdouble)>("contains"), //
		jMethod<::jboolean(::java::awt::geom::PathIterator, ::jdouble, ::jdouble, ::jdouble, ::jdouble)>("contains"), //
		jMethod<::jboolean(::java::awt::geom::PathIterator, ::java::awt::geom::Point2D)>("contains"), //
		jMethod<::jboolean(::java::awt::geom::PathIterator, ::java::awt::geom::Rectangle2D)>("contains"), //
		jMethod<::jboolean(::java::awt::geom::Point2D)>("contains"), //
		jMethod<::jboolean(::java::awt::geom::Rectangle2D)>("contains"), //
		jMethod<::java::awt::Shape(::java::awt::geom::AffineTransform)>("createTransformedShape"), //
		jMethod<::jvoid(::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble)>("curveTo"), //
		jMethod<::java::awt::Rectangle()>("getBounds"), //
		jMethod<::java::awt::geom::Point2D()>("getCurrentPoint"), //
		jMethod<::java::awt::geom::PathIterator(::java::awt::geom::AffineTransform, ::jdouble)>("getPathIterator"), //
		jMethod<::jint()>("getWindingRule"), //
		jMethod<::jboolean(::jdouble, ::jdouble, ::jdouble, ::jdouble)>("intersects"), //
		jMethod<::jboolean(::java::awt::geom::PathIterator, ::jdouble, ::jdouble, ::jdouble, ::jdouble)>("intersects"), //
		jMethod<::jboolean(::java::awt::geom::PathIterator, ::java::awt::geom::Rectangle2D)>("intersects"), //
		jMethod<::jboolean(::java::awt::geom::Rectangle2D)>("intersects"), //
		jMethod<::jvoid(::jdouble, ::jdouble)>("lineTo"), //
		jMethod<::jvoid(::jdouble, ::jdouble)>("moveTo"), //
		jMethod<::jvoid(::jdouble, ::jdouble, ::jdouble, ::jdouble)>("quadTo"), //
		jMethod<::jvoid()>("reset"), //
		jMethod<::jvoid(::jint)>("setWindingRule"), //
		jMethod<::jvoid(::java::awt::geom::AffineTransform)>("transform"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto append(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("append")] != -1);
		return call<R>("append", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto closePath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("closePath")] != -1);
		return call<R>("closePath", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto contains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("contains")] != -1);
		return call<R>("contains", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Shape, typename... Args>
	auto createTransformedShape(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createTransformedShape")] != -1);
		return call<R>("createTransformedShape", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto curveTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("curveTo")] != -1);
		return call<R>("curveTo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds")] != -1);
		return call<R>("getBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Point2D, typename... Args>
	auto getCurrentPoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCurrentPoint")] != -1);
		return call<R>("getCurrentPoint", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::PathIterator, typename... Args>
	auto getPathIterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPathIterator")] != -1);
		return call<R>("getPathIterator", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWindingRule(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWindingRule")] != -1);
		return call<R>("getWindingRule", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto intersects(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("intersects")] != -1);
		return call<R>("intersects", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto lineTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lineTo")] != -1);
		return call<R>("lineTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto moveTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("moveTo")] != -1);
		return call<R>("moveTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto quadTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("quadTo")] != -1);
		return call<R>("quadTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWindingRule(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setWindingRule")] != -1);
		return call<R>("setWindingRule", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto transform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("transform")] != -1);
		return call<R>("transform", std::forward<Args>(args)...);
	}

};

#endif
