#ifndef java_awt_geom_RectangularShape_HPP
#define java_awt_geom_RectangularShape_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::geom::RectangularShape : public jObject<::java::awt::geom::RectangularShape, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_geom / "RectangularShape";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jboolean(::jdouble, ::jdouble)>("contains"), //
		jMethod<::jboolean(::jdouble, ::jdouble, ::jdouble, ::jdouble)>("contains"), //
		jMethod<::jboolean(::java::awt::geom::Point2D)>("contains"), //
		jMethod<::jboolean(::java::awt::geom::Rectangle2D)>("contains"), //
		jMethod<::java::awt::Rectangle()>("getBounds"), //
		jMethod<::java::awt::geom::Rectangle2D()>("getBounds2D"), //
		jMethod<::jdouble()>("getCenterX"), //
		jMethod<::jdouble()>("getCenterY"), //
		jMethod<::java::awt::geom::Rectangle2D()>("getFrame"), //
		jMethod<::jdouble()>("getHeight"), //
		jMethod<::jdouble()>("getMaxX"), //
		jMethod<::jdouble()>("getMaxY"), //
		jMethod<::jdouble()>("getMinX"), //
		jMethod<::jdouble()>("getMinY"), //
		jMethod<::java::awt::geom::PathIterator(::java::awt::geom::AffineTransform)>("getPathIterator"), //
		jMethod<::java::awt::geom::PathIterator(::java::awt::geom::AffineTransform, ::jdouble)>("getPathIterator"), //
		jMethod<::jdouble()>("getWidth"), //
		jMethod<::jdouble()>("getX"), //
		jMethod<::jdouble()>("getY"), //
		jMethod<::jboolean(::jdouble, ::jdouble, ::jdouble, ::jdouble)>("intersects"), //
		jMethod<::jboolean(::java::awt::geom::Rectangle2D)>("intersects"), //
		jMethod<::jboolean()>("isEmpty"), //
		jMethod<::jvoid(::jdouble, ::jdouble, ::jdouble, ::jdouble)>("setFrame"), //
		jMethod<::jvoid(::java::awt::geom::Point2D, ::java::awt::geom::Dimension2D)>("setFrame"), //
		jMethod<::jvoid(::java::awt::geom::Rectangle2D)>("setFrame"), //
		jMethod<::jvoid(::jdouble, ::jdouble, ::jdouble, ::jdouble)>("setFrameFromCenter"), //
		jMethod<::jvoid(::java::awt::geom::Point2D, ::java::awt::geom::Point2D)>("setFrameFromCenter"), //
		jMethod<::jvoid(::jdouble, ::jdouble, ::jdouble, ::jdouble)>("setFrameFromDiagonal"), //
		jMethod<::jvoid(::java::awt::geom::Point2D, ::java::awt::geom::Point2D)>("setFrameFromDiagonal"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto contains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("contains")] != -1);
		return call<R>("contains", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds")] != -1);
		return call<R>("getBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Rectangle2D, typename... Args>
	auto getBounds2D(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds2D")] != -1);
		return call<R>("getBounds2D", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getCenterX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCenterX")] != -1);
		return call<R>("getCenterX", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getCenterY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCenterY")] != -1);
		return call<R>("getCenterY", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Rectangle2D, typename... Args>
	auto getFrame(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFrame")] != -1);
		return call<R>("getFrame", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeight")] != -1);
		return call<R>("getHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getMaxX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaxX")] != -1);
		return call<R>("getMaxX", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getMaxY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaxY")] != -1);
		return call<R>("getMaxY", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getMinX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinX")] != -1);
		return call<R>("getMinX", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getMinY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinY")] != -1);
		return call<R>("getMinY", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::PathIterator, typename... Args>
	auto getPathIterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPathIterator")] != -1);
		return call<R>("getPathIterator", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getX")] != -1);
		return call<R>("getX", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getY")] != -1);
		return call<R>("getY", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto intersects(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("intersects")] != -1);
		return call<R>("intersects", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEmpty")] != -1);
		return call<R>("isEmpty", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFrame(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFrame")] != -1);
		return call<R>("setFrame", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFrameFromCenter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFrameFromCenter")] != -1);
		return call<R>("setFrameFromCenter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFrameFromDiagonal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFrameFromDiagonal")] != -1);
		return call<R>("setFrameFromDiagonal", std::forward<Args>(args)...);
	}

};

#endif
