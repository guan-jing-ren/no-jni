#ifndef java_awt_geom_Rectangle2D_HPP
#define java_awt_geom_Rectangle2D_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::geom::Rectangle2D : public jObject<::java::awt::geom::Rectangle2D, ::java::awt::geom::RectangularShape> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_geom / "Rectangle2D";

	constexpr static Enume field_signatures{
		jField<::jint>("OUT_BOTTOM"), //
		jField<::jint>("OUT_LEFT"), //
		jField<::jint>("OUT_RIGHT"), //
		jField<::jint>("OUT_TOP"), //
	};

	template<typename F = ::jint>
	static auto OUT_BOTTOM() {
		static_assert(field_signatures[jField<F>("OUT_BOTTOM")] != -1);
		return sat<F>("OUT_BOTTOM");
	}

	template<typename F = ::jint>
	static auto OUT_LEFT() {
		static_assert(field_signatures[jField<F>("OUT_LEFT")] != -1);
		return sat<F>("OUT_LEFT");
	}

	template<typename F = ::jint>
	static auto OUT_RIGHT() {
		static_assert(field_signatures[jField<F>("OUT_RIGHT")] != -1);
		return sat<F>("OUT_RIGHT");
	}

	template<typename F = ::jint>
	static auto OUT_TOP() {
		static_assert(field_signatures[jField<F>("OUT_TOP")] != -1);
		return sat<F>("OUT_TOP");
	}

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::jdouble, ::jdouble)>("add"), //
		jMethod<::jvoid(::java::awt::geom::Point2D)>("add"), //
		jMethod<::jvoid(::java::awt::geom::Rectangle2D)>("add"), //
		jMethod<::jboolean(::jdouble, ::jdouble)>("contains"), //
		jMethod<::jboolean(::jdouble, ::jdouble, ::jdouble, ::jdouble)>("contains"), //
		jMethod<::java::awt::geom::Rectangle2D(::java::awt::geom::Rectangle2D)>("createIntersection"), //
		jMethod<::java::awt::geom::Rectangle2D(::java::awt::geom::Rectangle2D)>("createUnion"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::awt::geom::Rectangle2D()>("getBounds2D"), //
		jMethod<::java::awt::geom::PathIterator(::java::awt::geom::AffineTransform)>("getPathIterator"), //
		jMethod<::java::awt::geom::PathIterator(::java::awt::geom::AffineTransform, ::jdouble)>("getPathIterator"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jvoid(::java::awt::geom::Rectangle2D, ::java::awt::geom::Rectangle2D, ::java::awt::geom::Rectangle2D)>("intersect"), //
		jMethod<::jboolean(::jdouble, ::jdouble, ::jdouble, ::jdouble)>("intersects"), //
		jMethod<::jboolean(::jdouble, ::jdouble, ::jdouble, ::jdouble)>("intersectsLine"), //
		jMethod<::jboolean(::java::awt::geom::Line2D)>("intersectsLine"), //
		jMethod<::jint(::jdouble, ::jdouble)>("outcode"), //
		jMethod<::jint(::java::awt::geom::Point2D)>("outcode"), //
		jMethod<::jvoid(::jdouble, ::jdouble, ::jdouble, ::jdouble)>("setFrame"), //
		jMethod<::jvoid(::jdouble, ::jdouble, ::jdouble, ::jdouble)>("setRect"), //
		jMethod<::jvoid(::java::awt::geom::Rectangle2D)>("setRect"), //
		jMethod<::jvoid(::java::awt::geom::Rectangle2D, ::java::awt::geom::Rectangle2D, ::java::awt::geom::Rectangle2D)>("union"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto contains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("contains")] != -1);
		return call<R>("contains", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Rectangle2D, typename... Args>
	auto createIntersection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createIntersection")] != -1);
		return call<R>("createIntersection", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Rectangle2D, typename... Args>
	auto createUnion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createUnion")] != -1);
		return call<R>("createUnion", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Rectangle2D, typename... Args>
	auto getBounds2D(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds2D")] != -1);
		return call<R>("getBounds2D", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::PathIterator, typename... Args>
	auto getPathIterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPathIterator")] != -1);
		return call<R>("getPathIterator", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto intersect(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("intersect")] != -1);
		return scall<R>("intersect", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto intersects(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("intersects")] != -1);
		return call<R>("intersects", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto intersectsLine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("intersectsLine")] != -1);
		return call<R>("intersectsLine", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto outcode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("outcode")] != -1);
		return call<R>("outcode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFrame(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFrame")] != -1);
		return call<R>("setFrame", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRect")] != -1);
		return call<R>("setRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto union_(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("union")] != -1);
		return scall<R>("union", std::forward<Args>(args)...);
	}

};

#endif
