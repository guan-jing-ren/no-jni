#ifndef java_awt_geom_Point2D$Float_HPP
#define java_awt_geom_Point2D$Float_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::geom::Point2D$Float : public jObject<::java::awt::geom::Point2D$Float, ::java::awt::geom::Point2D> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_geom / "Point2D$Float";

	constexpr static Enume field_signatures{
		jField<::jfloat>("x"), //
		jField<::jfloat>("y"), //
	};

	template<typename F = ::jfloat>
	auto x() const {
		static_assert(field_signatures[jField<F>("x")] != -1);
		return at<F>("x");
	}

	template<typename F = ::jfloat>
	auto y() const {
		static_assert(field_signatures[jField<F>("y")] != -1);
		return at<F>("y");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jfloat, ::jfloat)>(), //
		jMethod<::jdouble()>("getX"), //
		jMethod<::jdouble()>("getY"), //
		jMethod<::jvoid(::jdouble, ::jdouble)>("setLocation"), //
		jMethod<::jvoid(::jfloat, ::jfloat)>("setLocation"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jdouble, typename... Args>
	auto getX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getX")] != -1);
		return call<R>("getX", forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getY")] != -1);
		return call<R>("getY", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLocation")] != -1);
		return call<R>("setLocation", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
