#ifndef java_awt_geom_Rectangle2D$Double_HPP
#define java_awt_geom_Rectangle2D$Double_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::geom::Rectangle2D$Double : public jObject<::java::awt::geom::Rectangle2D$Double, ::java::awt::geom::Rectangle2D> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_geom / "Rectangle2D$Double";

	constexpr static Enume field_signatures{
		jField<::jdouble>("height"), //
		jField<::jdouble>("width"), //
		jField<::jdouble>("x"), //
		jField<::jdouble>("y"), //
	};

	template<typename F = ::jdouble>
	auto height() const {
		static_assert(field_signatures[jField<F>("height")] != -1);
		return at<F>("height");
	}

	template<typename F = ::jdouble>
	auto width() const {
		static_assert(field_signatures[jField<F>("width")] != -1);
		return at<F>("width");
	}

	template<typename F = ::jdouble>
	auto x() const {
		static_assert(field_signatures[jField<F>("x")] != -1);
		return at<F>("x");
	}

	template<typename F = ::jdouble>
	auto y() const {
		static_assert(field_signatures[jField<F>("y")] != -1);
		return at<F>("y");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jdouble, ::jdouble, ::jdouble, ::jdouble)>(), //
		jMethod<::java::awt::geom::Rectangle2D(::java::awt::geom::Rectangle2D)>("createIntersection"), //
		jMethod<::java::awt::geom::Rectangle2D(::java::awt::geom::Rectangle2D)>("createUnion"), //
		jMethod<::java::awt::geom::Rectangle2D()>("getBounds2D"), //
		jMethod<::jdouble()>("getHeight"), //
		jMethod<::jdouble()>("getWidth"), //
		jMethod<::jdouble()>("getX"), //
		jMethod<::jdouble()>("getY"), //
		jMethod<::jboolean()>("isEmpty"), //
		jMethod<::jint(::jdouble, ::jdouble)>("outcode"), //
		jMethod<::jvoid(::jdouble, ::jdouble, ::jdouble, ::jdouble)>("setRect"), //
		jMethod<::jvoid(::java::awt::geom::Rectangle2D)>("setRect"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::awt::geom::Rectangle2D, typename... Args>
	auto createIntersection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createIntersection")] != -1);
		return call<R>("createIntersection", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Rectangle2D, typename... Args>
	auto createUnion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createUnion")] != -1);
		return call<R>("createUnion", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Rectangle2D, typename... Args>
	auto getBounds2D(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds2D")] != -1);
		return call<R>("getBounds2D", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeight")] != -1);
		return call<R>("getHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getX")] != -1);
		return call<R>("getX", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getY")] != -1);
		return call<R>("getY", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEmpty")] != -1);
		return call<R>("isEmpty", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto outcode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("outcode")] != -1);
		return call<R>("outcode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRect")] != -1);
		return call<R>("setRect", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
