#ifndef java_awt_geom_FlatteningPathIterator_HPP
#define java_awt_geom_FlatteningPathIterator_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::geom::FlatteningPathIterator : public jObject<::java::awt::geom::FlatteningPathIterator, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_geom / "FlatteningPathIterator";

	constexpr static Enume field_signatures{
		jField<::jint>("SEG_CLOSE"), //
		jField<::jint>("SEG_CUBICTO"), //
		jField<::jint>("SEG_LINETO"), //
		jField<::jint>("SEG_MOVETO"), //
		jField<::jint>("SEG_QUADTO"), //
		jField<::jint>("WIND_EVEN_ODD"), //
		jField<::jint>("WIND_NON_ZERO"), //
	};

	template<typename F = ::jint>
	static auto SEG_CLOSE() {
		static_assert(field_signatures[jField<F>("SEG_CLOSE")] != -1);
		return sat<F>("SEG_CLOSE");
	}

	template<typename F = ::jint>
	static auto SEG_CUBICTO() {
		static_assert(field_signatures[jField<F>("SEG_CUBICTO")] != -1);
		return sat<F>("SEG_CUBICTO");
	}

	template<typename F = ::jint>
	static auto SEG_LINETO() {
		static_assert(field_signatures[jField<F>("SEG_LINETO")] != -1);
		return sat<F>("SEG_LINETO");
	}

	template<typename F = ::jint>
	static auto SEG_MOVETO() {
		static_assert(field_signatures[jField<F>("SEG_MOVETO")] != -1);
		return sat<F>("SEG_MOVETO");
	}

	template<typename F = ::jint>
	static auto SEG_QUADTO() {
		static_assert(field_signatures[jField<F>("SEG_QUADTO")] != -1);
		return sat<F>("SEG_QUADTO");
	}

	template<typename F = ::jint>
	static auto WIND_EVEN_ODD() {
		static_assert(field_signatures[jField<F>("WIND_EVEN_ODD")] != -1);
		return sat<F>("WIND_EVEN_ODD");
	}

	template<typename F = ::jint>
	static auto WIND_NON_ZERO() {
		static_assert(field_signatures[jField<F>("WIND_NON_ZERO")] != -1);
		return sat<F>("WIND_NON_ZERO");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::geom::PathIterator, ::jdouble)>(), //
		jConstructor<::jvoid(::java::awt::geom::PathIterator, ::jdouble, ::jint)>(), //
		jMethod<::jint(::jdouble *)>("currentSegment"), //
		jMethod<::jint(::jfloat *)>("currentSegment"), //
		jMethod<::jdouble()>("getFlatness"), //
		jMethod<::jint()>("getRecursionLimit"), //
		jMethod<::jint()>("getWindingRule"), //
		jMethod<::jboolean()>("isDone"), //
		jMethod<::jvoid()>("next"), //
	};

	template<typename R = ::jint, typename... Args>
	auto currentSegment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("currentSegment")] != -1);
		return call<R>("currentSegment", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getFlatness(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFlatness")] != -1);
		return call<R>("getFlatness", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRecursionLimit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRecursionLimit")] != -1);
		return call<R>("getRecursionLimit", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWindingRule(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWindingRule")] != -1);
		return call<R>("getWindingRule", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDone")] != -1);
		return call<R>("isDone", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto next(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("next")] != -1);
		return call<R>("next", std::forward<Args>(args)...);
	}

};

#endif
