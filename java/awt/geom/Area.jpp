#ifndef java_awt_geom_Area_HPP
#define java_awt_geom_Area_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::geom::Area : public jObject<::java::awt::geom::Area, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_geom / "Area";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::awt::Shape)>(), //
		jMethod<::jvoid(::java::awt::geom::Area)>("add"), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jboolean(::jdouble, ::jdouble)>("contains"), //
		jMethod<::jboolean(::jdouble, ::jdouble, ::jdouble, ::jdouble)>("contains"), //
		jMethod<::jboolean(::java::awt::geom::Point2D)>("contains"), //
		jMethod<::jboolean(::java::awt::geom::Rectangle2D)>("contains"), //
		jMethod<::java::awt::geom::Area(::java::awt::geom::AffineTransform)>("createTransformedArea"), //
		jMethod<::jboolean(::java::awt::geom::Area)>("equals"), //
		jMethod<::jvoid(::java::awt::geom::Area)>("exclusiveOr"), //
		jMethod<::java::awt::Rectangle()>("getBounds"), //
		jMethod<::java::awt::geom::Rectangle2D()>("getBounds2D"), //
		jMethod<::java::awt::geom::PathIterator(::java::awt::geom::AffineTransform)>("getPathIterator"), //
		jMethod<::java::awt::geom::PathIterator(::java::awt::geom::AffineTransform, ::jdouble)>("getPathIterator"), //
		jMethod<::jvoid(::java::awt::geom::Area)>("intersect"), //
		jMethod<::jboolean(::jdouble, ::jdouble, ::jdouble, ::jdouble)>("intersects"), //
		jMethod<::jboolean(::java::awt::geom::Rectangle2D)>("intersects"), //
		jMethod<::jboolean()>("isEmpty"), //
		jMethod<::jboolean()>("isPolygonal"), //
		jMethod<::jboolean()>("isRectangular"), //
		jMethod<::jboolean()>("isSingular"), //
		jMethod<::jvoid()>("reset"), //
		jMethod<::jvoid(::java::awt::geom::Area)>("subtract"), //
		jMethod<::jvoid(::java::awt::geom::AffineTransform)>("transform"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("add")] != -1);
		return call<R>("add", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto contains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("contains")] != -1);
		return call<R>("contains", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Area, typename... Args>
	auto createTransformedArea(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createTransformedArea")] != -1);
		return call<R>("createTransformedArea", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto exclusiveOr(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("exclusiveOr")] != -1);
		return call<R>("exclusiveOr", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBounds")] != -1);
		return call<R>("getBounds", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Rectangle2D, typename... Args>
	auto getBounds2D(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBounds2D")] != -1);
		return call<R>("getBounds2D", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::PathIterator, typename... Args>
	auto getPathIterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPathIterator")] != -1);
		return call<R>("getPathIterator", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto intersect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("intersect")] != -1);
		return call<R>("intersect", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto intersects(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("intersects")] != -1);
		return call<R>("intersects", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isEmpty")] != -1);
		return call<R>("isEmpty", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPolygonal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isPolygonal")] != -1);
		return call<R>("isPolygonal", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRectangular(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isRectangular")] != -1);
		return call<R>("isRectangular", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSingular(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isSingular")] != -1);
		return call<R>("isSingular", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto subtract(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("subtract")] != -1);
		return call<R>("subtract", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto transform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("transform")] != -1);
		return call<R>("transform", forward<Args>(args)...);
	}

};

#endif
