#ifndef java_awt_geom_Point2D_HPP
#define java_awt_geom_Point2D_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::geom::Point2D : public jObject<::java::awt::geom::Point2D, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_geom / "Point2D";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jdouble(::jdouble, ::jdouble)>("distance"), //
		jMethod<::jdouble(::jdouble, ::jdouble, ::jdouble, ::jdouble)>("distance"), //
		jMethod<::jdouble(::java::awt::geom::Point2D)>("distance"), //
		jMethod<::jdouble(::jdouble, ::jdouble)>("distanceSq"), //
		jMethod<::jdouble(::jdouble, ::jdouble, ::jdouble, ::jdouble)>("distanceSq"), //
		jMethod<::jdouble(::java::awt::geom::Point2D)>("distanceSq"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jdouble()>("getX"), //
		jMethod<::jdouble()>("getY"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jvoid(::jdouble, ::jdouble)>("setLocation"), //
		jMethod<::jvoid(::java::awt::geom::Point2D)>("setLocation"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto distance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("distance")] != -1);
		return call<R>("distance", forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto distanceSq(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("distanceSq")] != -1);
		return call<R>("distanceSq", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getX")] != -1);
		return call<R>("getX", forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getY")] != -1);
		return call<R>("getY", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLocation")] != -1);
		return call<R>("setLocation", forward<Args>(args)...);
	}

};

#endif
