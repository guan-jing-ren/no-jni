#ifndef java_awt_TextField_HPP
#define java_awt_TextField_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::TextField : public jObject<::java::awt::TextField, ::java::awt::TextComponent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "TextField";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint)>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::jint)>(), //
		jMethod<::jvoid(::java::awt::event::ActionListener)>("addActionListener"), //
		jMethod<::jvoid()>("addNotify"), //
		jMethod<::jboolean()>("echoCharIsSet"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::java::awt::event::ActionListener *()>("getActionListeners"), //
		jMethod<::jint()>("getColumns"), //
		jMethod<::jchar()>("getEchoChar"), //
		jMethod<::java::util::EventListener *(::java::lang::Class)>("getListeners"), //
		jMethod<::java::awt::Dimension()>("getMinimumSize"), //
		jMethod<::java::awt::Dimension(::jint)>("getMinimumSize"), //
		jMethod<::java::awt::Dimension()>("getPreferredSize"), //
		jMethod<::java::awt::Dimension(::jint)>("getPreferredSize"), //
		jMethod<::java::awt::Dimension()>("minimumSize"), //
		jMethod<::java::awt::Dimension(::jint)>("minimumSize"), //
		jMethod<::java::awt::Dimension()>("preferredSize"), //
		jMethod<::java::awt::Dimension(::jint)>("preferredSize"), //
		jMethod<::jvoid(::java::awt::event::ActionListener)>("removeActionListener"), //
		jMethod<::jvoid(::jint)>("setColumns"), //
		jMethod<::jvoid(::jchar)>("setEchoChar"), //
		jMethod<::jvoid(::jchar)>("setEchoCharacter"), //
		jMethod<::jvoid(::java::lang::String)>("setText"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addActionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addActionListener")] != -1);
		return call<R>("addActionListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addNotify")] != -1);
		return call<R>("addNotify", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto echoCharIsSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("echoCharIsSet")] != -1);
		return call<R>("echoCharIsSet", forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::ActionListener *, typename... Args>
	auto getActionListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getActionListeners")] != -1);
		return call<R>("getActionListeners", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getColumns(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColumns")] != -1);
		return call<R>("getColumns", forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto getEchoChar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getEchoChar")] != -1);
		return call<R>("getEchoChar", forward<Args>(args)...);
	}

	template<typename R = ::java::util::EventListener *, typename... Args>
	auto getListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getListeners")] != -1);
		return call<R>("getListeners", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinimumSize")] != -1);
		return call<R>("getMinimumSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreferredSize")] != -1);
		return call<R>("getPreferredSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto minimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("minimumSize")] != -1);
		return call<R>("minimumSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto preferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("preferredSize")] != -1);
		return call<R>("preferredSize", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeActionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeActionListener")] != -1);
		return call<R>("removeActionListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColumns(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setColumns")] != -1);
		return call<R>("setColumns", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEchoChar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setEchoChar")] != -1);
		return call<R>("setEchoChar", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEchoCharacter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setEchoCharacter")] != -1);
		return call<R>("setEchoCharacter", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setText")] != -1);
		return call<R>("setText", forward<Args>(args)...);
	}

};

#endif
