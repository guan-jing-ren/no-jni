#ifndef java_awt_DefaultKeyboardFocusManager_HPP
#define java_awt_DefaultKeyboardFocusManager_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::DefaultKeyboardFocusManager : public jObject<::java::awt::DefaultKeyboardFocusManager, ::java::awt::KeyboardFocusManager> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "DefaultKeyboardFocusManager";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jboolean(::java::awt::AWTEvent)>("dispatchEvent"), //
		jMethod<::jboolean(::java::awt::event::KeyEvent)>("dispatchKeyEvent"), //
		jMethod<::jvoid(::java::awt::Container)>("downFocusCycle"), //
		jMethod<::jvoid(::java::awt::Component)>("focusNextComponent"), //
		jMethod<::jvoid(::java::awt::Component)>("focusPreviousComponent"), //
		jMethod<::jboolean(::java::awt::event::KeyEvent)>("postProcessKeyEvent"), //
		jMethod<::jvoid(::java::awt::Component, ::java::awt::event::KeyEvent)>("processKeyEvent"), //
		jMethod<::jvoid(::java::awt::Component)>("upFocusCycle"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto dispatchEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("dispatchEvent")] != -1);
		return call<R>("dispatchEvent", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto dispatchKeyEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("dispatchKeyEvent")] != -1);
		return call<R>("dispatchKeyEvent", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto downFocusCycle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("downFocusCycle")] != -1);
		return call<R>("downFocusCycle", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto focusNextComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("focusNextComponent")] != -1);
		return call<R>("focusNextComponent", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto focusPreviousComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("focusPreviousComponent")] != -1);
		return call<R>("focusPreviousComponent", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto postProcessKeyEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("postProcessKeyEvent")] != -1);
		return call<R>("postProcessKeyEvent", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto processKeyEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("processKeyEvent")] != -1);
		return call<R>("processKeyEvent", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto upFocusCycle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("upFocusCycle")] != -1);
		return call<R>("upFocusCycle", forward<Args>(args)...);
	}

};

#endif
