#ifndef java_awt_peer_RobotPeer_HPP
#define java_awt_peer_RobotPeer_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::peer::RobotPeer : public jObject<::java::awt::peer::RobotPeer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_peer / "RobotPeer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jint(::jint, ::jint)>("getRGBPixel"), //
		jMethod<::jint *(::java::awt::Rectangle)>("getRGBPixels"), //
		jMethod<::jvoid(::jint)>("keyPress"), //
		jMethod<::jvoid(::jint)>("keyRelease"), //
		jMethod<::jvoid(::jint, ::jint)>("mouseMove"), //
		jMethod<::jvoid(::jint)>("mousePress"), //
		jMethod<::jvoid(::jint)>("mouseRelease"), //
		jMethod<::jvoid(::jint)>("mouseWheel"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRGBPixel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRGBPixel")] != -1);
		return call<R>("getRGBPixel", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getRGBPixels(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRGBPixels")] != -1);
		return call<R>("getRGBPixels", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto keyPress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("keyPress")] != -1);
		return call<R>("keyPress", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto keyRelease(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("keyRelease")] != -1);
		return call<R>("keyRelease", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mouseMove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mouseMove")] != -1);
		return call<R>("mouseMove", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mousePress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mousePress")] != -1);
		return call<R>("mousePress", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mouseRelease(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mouseRelease")] != -1);
		return call<R>("mouseRelease", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mouseWheel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mouseWheel")] != -1);
		return call<R>("mouseWheel", std::forward<Args>(args)...);
	}

};

#endif
