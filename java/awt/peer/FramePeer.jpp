#ifndef java_awt_peer_FramePeer_HPP
#define java_awt_peer_FramePeer_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::peer::FramePeer : public jObject<::java::awt::peer::FramePeer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_peer / "FramePeer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::jboolean)>("emulateActivation"), //
		jMethod<::java::awt::Rectangle()>("getBoundsPrivate"), //
		jMethod<::jint()>("getState"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("setBoundsPrivate"), //
		jMethod<::jvoid(::java::awt::Rectangle)>("setMaximizedBounds"), //
		jMethod<::jvoid(::java::awt::MenuBar)>("setMenuBar"), //
		jMethod<::jvoid(::jboolean)>("setResizable"), //
		jMethod<::jvoid(::jint)>("setState"), //
		jMethod<::jvoid(::java::lang::String)>("setTitle"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto emulateActivation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("emulateActivation")] != -1);
		return call<R>("emulateActivation", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getBoundsPrivate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBoundsPrivate")] != -1);
		return call<R>("getBoundsPrivate", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getState")] != -1);
		return call<R>("getState", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBoundsPrivate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBoundsPrivate")] != -1);
		return call<R>("setBoundsPrivate", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaximizedBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMaximizedBounds")] != -1);
		return call<R>("setMaximizedBounds", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMenuBar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMenuBar")] != -1);
		return call<R>("setMenuBar", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setResizable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setResizable")] != -1);
		return call<R>("setResizable", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setState")] != -1);
		return call<R>("setState", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTitle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setTitle")] != -1);
		return call<R>("setTitle", forward<Args>(args)...);
	}

};

#endif
