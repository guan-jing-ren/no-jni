#ifndef java_awt_peer_TextComponentPeer_HPP
#define java_awt_peer_TextComponentPeer_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::peer::TextComponentPeer : public jObject<::java::awt::peer::TextComponentPeer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_peer / "TextComponentPeer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint()>("getCaretPosition"), //
		jMethod<::java::awt::im::InputMethodRequests()>("getInputMethodRequests"), //
		jMethod<::jint()>("getSelectionEnd"), //
		jMethod<::jint()>("getSelectionStart"), //
		jMethod<::java::lang::String()>("getText"), //
		jMethod<::jvoid(::jint, ::jint)>("select"), //
		jMethod<::jvoid(::jint)>("setCaretPosition"), //
		jMethod<::jvoid(::jboolean)>("setEditable"), //
		jMethod<::jvoid(::java::lang::String)>("setText"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getCaretPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCaretPosition")] != -1);
		return call<R>("getCaretPosition", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::im::InputMethodRequests, typename... Args>
	auto getInputMethodRequests(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInputMethodRequests")] != -1);
		return call<R>("getInputMethodRequests", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSelectionEnd(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSelectionEnd")] != -1);
		return call<R>("getSelectionEnd", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSelectionStart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSelectionStart")] != -1);
		return call<R>("getSelectionStart", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getText")] != -1);
		return call<R>("getText", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto select(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("select")] != -1);
		return call<R>("select", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCaretPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCaretPosition")] != -1);
		return call<R>("setCaretPosition", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEditable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setEditable")] != -1);
		return call<R>("setEditable", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setText")] != -1);
		return call<R>("setText", forward<Args>(args)...);
	}

};

#endif
