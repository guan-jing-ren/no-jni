#ifndef java_awt_peer_ListPeer_HPP
#define java_awt_peer_ListPeer_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::peer::ListPeer : public jObject<::java::awt::peer::ListPeer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_peer / "ListPeer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::lang::String, ::jint)>("add"), //
		jMethod<::jvoid(::jint, ::jint)>("delItems"), //
		jMethod<::jvoid(::jint)>("deselect"), //
		jMethod<::java::awt::Dimension(::jint)>("getMinimumSize"), //
		jMethod<::java::awt::Dimension(::jint)>("getPreferredSize"), //
		jMethod<::jint *()>("getSelectedIndexes"), //
		jMethod<::jvoid(::jint)>("makeVisible"), //
		jMethod<::jvoid()>("removeAll"), //
		jMethod<::jvoid(::jint)>("select"), //
		jMethod<::jvoid(::jboolean)>("setMultipleMode"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("add")] != -1);
		return call<R>("add", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto delItems(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("delItems")] != -1);
		return call<R>("delItems", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deselect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("deselect")] != -1);
		return call<R>("deselect", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinimumSize")] != -1);
		return call<R>("getMinimumSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreferredSize")] != -1);
		return call<R>("getPreferredSize", forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getSelectedIndexes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSelectedIndexes")] != -1);
		return call<R>("getSelectedIndexes", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto makeVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("makeVisible")] != -1);
		return call<R>("makeVisible", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeAll")] != -1);
		return call<R>("removeAll", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto select(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("select")] != -1);
		return call<R>("select", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMultipleMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMultipleMode")] != -1);
		return call<R>("setMultipleMode", forward<Args>(args)...);
	}

};

#endif
