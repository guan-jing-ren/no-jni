#ifndef java_awt_peer_ScrollPanePeer_HPP
#define java_awt_peer_ScrollPanePeer_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::peer::ScrollPanePeer : public jObject<::java::awt::peer::ScrollPanePeer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_peer / "ScrollPanePeer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::jint, ::jint)>("childResized"), //
		jMethod<::jint()>("getHScrollbarHeight"), //
		jMethod<::jint()>("getVScrollbarWidth"), //
		jMethod<::jvoid(::jint, ::jint)>("setScrollPosition"), //
		jMethod<::jvoid(::java::awt::Adjustable, ::jint)>("setUnitIncrement"), //
		jMethod<::jvoid(::java::awt::Adjustable, ::jint)>("setValue"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto childResized(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("childResized")] != -1);
		return call<R>("childResized", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHScrollbarHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHScrollbarHeight")] != -1);
		return call<R>("getHScrollbarHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getVScrollbarWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVScrollbarWidth")] != -1);
		return call<R>("getVScrollbarWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setScrollPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setScrollPosition")] != -1);
		return call<R>("setScrollPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUnitIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUnitIncrement")] != -1);
		return call<R>("setUnitIncrement", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setValue")] != -1);
		return call<R>("setValue", std::forward<Args>(args)...);
	}

};

#endif
