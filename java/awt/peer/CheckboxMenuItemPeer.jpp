#ifndef java_awt_peer_CheckboxMenuItemPeer_HPP
#define java_awt_peer_CheckboxMenuItemPeer_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::peer::CheckboxMenuItemPeer : public jObject<::java::awt::peer::CheckboxMenuItemPeer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_peer / "CheckboxMenuItemPeer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::jboolean)>("setEnabled"), //
		jMethod<::jvoid(::java::lang::String)>("setLabel"), //
		jMethod<::jvoid(::jboolean)>("setState"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto setEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEnabled")] != -1);
		return call<R>("setEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLabel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLabel")] != -1);
		return call<R>("setLabel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setState")] != -1);
		return call<R>("setState", std::forward<Args>(args)...);
	}

};

#endif
