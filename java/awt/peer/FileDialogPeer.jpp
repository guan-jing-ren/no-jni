#ifndef java_awt_peer_FileDialogPeer_HPP
#define java_awt_peer_FileDialogPeer_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::peer::FileDialogPeer : public jObject<::java::awt::peer::FileDialogPeer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_peer / "FileDialogPeer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::util::List)>("blockWindows"), //
		jMethod<::jvoid(::java::lang::String)>("setDirectory"), //
		jMethod<::jvoid(::java::lang::String)>("setFile"), //
		jMethod<::jvoid(::java::io::FilenameFilter)>("setFilenameFilter"), //
		jMethod<::jvoid(::jboolean)>("setResizable"), //
		jMethod<::jvoid(::java::lang::String)>("setTitle"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto blockWindows(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("blockWindows")] != -1);
		return call<R>("blockWindows", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDirectory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDirectory")] != -1);
		return call<R>("setDirectory", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFile")] != -1);
		return call<R>("setFile", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFilenameFilter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFilenameFilter")] != -1);
		return call<R>("setFilenameFilter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setResizable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setResizable")] != -1);
		return call<R>("setResizable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTitle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTitle")] != -1);
		return call<R>("setTitle", std::forward<Args>(args)...);
	}

};

#endif
