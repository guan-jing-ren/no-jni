#ifndef java_awt_peer_ComponentPeer_HPP
#define java_awt_peer_ComponentPeer_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::peer::ComponentPeer : public jObject<::java::awt::peer::ComponentPeer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_peer / "ComponentPeer";

	constexpr static Enume field_signatures{
		jField<::jint>("DEFAULT_OPERATION"), //
		jField<::jint>("NO_EMBEDDED_CHECK"), //
		jField<::jint>("RESET_OPERATION"), //
		jField<::jint>("SET_BOUNDS"), //
		jField<::jint>("SET_CLIENT_SIZE"), //
		jField<::jint>("SET_LOCATION"), //
		jField<::jint>("SET_SIZE"), //
	};

	template<typename F = ::jint>
	static auto DEFAULT_OPERATION() {
		static_assert(field_signatures[jField<F>("DEFAULT_OPERATION")] != -1);
		return sat<F>("DEFAULT_OPERATION");
	}

	template<typename F = ::jint>
	static auto NO_EMBEDDED_CHECK() {
		static_assert(field_signatures[jField<F>("NO_EMBEDDED_CHECK")] != -1);
		return sat<F>("NO_EMBEDDED_CHECK");
	}

	template<typename F = ::jint>
	static auto RESET_OPERATION() {
		static_assert(field_signatures[jField<F>("RESET_OPERATION")] != -1);
		return sat<F>("RESET_OPERATION");
	}

	template<typename F = ::jint>
	static auto SET_BOUNDS() {
		static_assert(field_signatures[jField<F>("SET_BOUNDS")] != -1);
		return sat<F>("SET_BOUNDS");
	}

	template<typename F = ::jint>
	static auto SET_CLIENT_SIZE() {
		static_assert(field_signatures[jField<F>("SET_CLIENT_SIZE")] != -1);
		return sat<F>("SET_CLIENT_SIZE");
	}

	template<typename F = ::jint>
	static auto SET_LOCATION() {
		static_assert(field_signatures[jField<F>("SET_LOCATION")] != -1);
		return sat<F>("SET_LOCATION");
	}

	template<typename F = ::jint>
	static auto SET_SIZE() {
		static_assert(field_signatures[jField<F>("SET_SIZE")] != -1);
		return sat<F>("SET_SIZE");
	}

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::sun::java2d::pipe::Region)>("applyShape"), //
		jMethod<::jboolean()>("canDetermineObscurity"), //
		jMethod<::jint(::java::awt::Image, ::jint, ::jint, ::java::awt::image::ImageObserver)>("checkImage"), //
		jMethod<::jvoid(::java::awt::event::PaintEvent)>("coalescePaintEvent"), //
		jMethod<::jvoid(::jint, ::java::awt::BufferCapabilities)>("createBuffers"), //
		jMethod<::java::awt::Image(::jint, ::jint)>("createImage"), //
		jMethod<::java::awt::Image(::java::awt::image::ImageProducer)>("createImage"), //
		jMethod<::java::awt::image::VolatileImage(::jint, ::jint)>("createVolatileImage"), //
		jMethod<::jvoid()>("destroyBuffers"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::java::awt::BufferCapabilities$FlipContents)>("flip"), //
		jMethod<::java::awt::Image()>("getBackBuffer"), //
		jMethod<::java::awt::image::ColorModel()>("getColorModel"), //
		jMethod<::java::awt::FontMetrics(::java::awt::Font)>("getFontMetrics"), //
		jMethod<::java::awt::Graphics()>("getGraphics"), //
		jMethod<::java::awt::GraphicsConfiguration()>("getGraphicsConfiguration"), //
		jMethod<::java::awt::Point()>("getLocationOnScreen"), //
		jMethod<::java::awt::Dimension()>("getMinimumSize"), //
		jMethod<::java::awt::Dimension()>("getPreferredSize"), //
		jMethod<::jvoid(::java::awt::AWTEvent)>("handleEvent"), //
		jMethod<::jboolean()>("handlesWheelScrolling"), //
		jMethod<::jboolean()>("isFocusable"), //
		jMethod<::jboolean()>("isObscured"), //
		jMethod<::jboolean()>("isReparentSupported"), //
		jMethod<::jvoid()>("layout"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paint"), //
		jMethod<::jboolean(::java::awt::Image, ::jint, ::jint, ::java::awt::image::ImageObserver)>("prepareImage"), //
		jMethod<::jvoid(::java::awt::Graphics)>("print"), //
		jMethod<::jvoid(::java::awt::peer::ContainerPeer)>("reparent"), //
		jMethod<::jboolean(::java::awt::Component, ::jboolean, ::jboolean, ::jlong, ::sun::awt::CausedFocusEvent$Cause)>("requestFocus"), //
		jMethod<::jvoid(::java::awt::Color)>("setBackground"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint)>("setBounds"), //
		jMethod<::jvoid(::jboolean)>("setEnabled"), //
		jMethod<::jvoid(::java::awt::Font)>("setFont"), //
		jMethod<::jvoid(::java::awt::Color)>("setForeground"), //
		jMethod<::jvoid(::jboolean)>("setVisible"), //
		jMethod<::jvoid(::java::awt::peer::ComponentPeer)>("setZOrder"), //
		jMethod<::jvoid()>("updateCursorImmediately"), //
		jMethod<::jboolean(::java::awt::GraphicsConfiguration)>("updateGraphicsData"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto applyShape(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("applyShape")] != -1);
		return call<R>("applyShape", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto canDetermineObscurity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("canDetermineObscurity")] != -1);
		return call<R>("canDetermineObscurity", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto checkImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("checkImage")] != -1);
		return call<R>("checkImage", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto coalescePaintEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("coalescePaintEvent")] != -1);
		return call<R>("coalescePaintEvent", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto createBuffers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createBuffers")] != -1);
		return call<R>("createBuffers", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Image, typename... Args>
	auto createImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createImage")] != -1);
		return call<R>("createImage", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::VolatileImage, typename... Args>
	auto createVolatileImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createVolatileImage")] != -1);
		return call<R>("createVolatileImage", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto destroyBuffers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("destroyBuffers")] != -1);
		return call<R>("destroyBuffers", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto flip(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("flip")] != -1);
		return call<R>("flip", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Image, typename... Args>
	auto getBackBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBackBuffer")] != -1);
		return call<R>("getBackBuffer", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::ColorModel, typename... Args>
	auto getColorModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColorModel")] != -1);
		return call<R>("getColorModel", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::FontMetrics, typename... Args>
	auto getFontMetrics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFontMetrics")] != -1);
		return call<R>("getFontMetrics", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Graphics, typename... Args>
	auto getGraphics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getGraphics")] != -1);
		return call<R>("getGraphics", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::GraphicsConfiguration, typename... Args>
	auto getGraphicsConfiguration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getGraphicsConfiguration")] != -1);
		return call<R>("getGraphicsConfiguration", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Point, typename... Args>
	auto getLocationOnScreen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLocationOnScreen")] != -1);
		return call<R>("getLocationOnScreen", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinimumSize")] != -1);
		return call<R>("getMinimumSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreferredSize")] != -1);
		return call<R>("getPreferredSize", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("handleEvent")] != -1);
		return call<R>("handleEvent", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto handlesWheelScrolling(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("handlesWheelScrolling")] != -1);
		return call<R>("handlesWheelScrolling", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFocusable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isFocusable")] != -1);
		return call<R>("isFocusable", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isObscured(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isObscured")] != -1);
		return call<R>("isObscured", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isReparentSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isReparentSupported")] != -1);
		return call<R>("isReparentSupported", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto layout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("layout")] != -1);
		return call<R>("layout", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto prepareImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("prepareImage")] != -1);
		return call<R>("prepareImage", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto print(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("print")] != -1);
		return call<R>("print", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reparent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reparent")] != -1);
		return call<R>("reparent", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto requestFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("requestFocus")] != -1);
		return call<R>("requestFocus", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBackground")] != -1);
		return call<R>("setBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBounds")] != -1);
		return call<R>("setBounds", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setEnabled")] != -1);
		return call<R>("setEnabled", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFont")] != -1);
		return call<R>("setFont", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setForeground")] != -1);
		return call<R>("setForeground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setVisible")] != -1);
		return call<R>("setVisible", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setZOrder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setZOrder")] != -1);
		return call<R>("setZOrder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateCursorImmediately(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("updateCursorImmediately")] != -1);
		return call<R>("updateCursorImmediately", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto updateGraphicsData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("updateGraphicsData")] != -1);
		return call<R>("updateGraphicsData", forward<Args>(args)...);
	}

};

#endif
