#ifndef java_awt_peer_TrayIconPeer_HPP
#define java_awt_peer_TrayIconPeer_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::peer::TrayIconPeer : public jObject<::java::awt::peer::TrayIconPeer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_peer / "TrayIconPeer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String)>("displayMessage"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jvoid(::java::lang::String)>("setToolTip"), //
		jMethod<::jvoid(::jint, ::jint)>("showPopupMenu"), //
		jMethod<::jvoid()>("updateImage"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto displayMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("displayMessage")] != -1);
		return call<R>("displayMessage", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setToolTip(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setToolTip")] != -1);
		return call<R>("setToolTip", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto showPopupMenu(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("showPopupMenu")] != -1);
		return call<R>("showPopupMenu", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("updateImage")] != -1);
		return call<R>("updateImage", forward<Args>(args)...);
	}

};

#endif
