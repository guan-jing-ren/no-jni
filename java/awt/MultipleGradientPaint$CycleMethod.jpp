#ifndef java_awt_MultipleGradientPaint$CycleMethod_HPP
#define java_awt_MultipleGradientPaint$CycleMethod_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::MultipleGradientPaint$CycleMethod : public jObject<::java::awt::MultipleGradientPaint$CycleMethod, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "MultipleGradientPaint$CycleMethod";

	constexpr static Enume field_signatures{
		jField<::java::awt::MultipleGradientPaint$CycleMethod>("NO_CYCLE"), //
		jField<::java::awt::MultipleGradientPaint$CycleMethod>("REFLECT"), //
		jField<::java::awt::MultipleGradientPaint$CycleMethod>("REPEAT"), //
	};

	template<typename F = ::java::awt::MultipleGradientPaint$CycleMethod>
	static auto NO_CYCLE() {
		static_assert(field_signatures[jField<F>("NO_CYCLE")] != -1);
		return sat<F>("NO_CYCLE");
	}

	template<typename F = ::java::awt::MultipleGradientPaint$CycleMethod>
	static auto REFLECT() {
		static_assert(field_signatures[jField<F>("REFLECT")] != -1);
		return sat<F>("REFLECT");
	}

	template<typename F = ::java::awt::MultipleGradientPaint$CycleMethod>
	static auto REPEAT() {
		static_assert(field_signatures[jField<F>("REPEAT")] != -1);
		return sat<F>("REPEAT");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::awt::MultipleGradientPaint$CycleMethod(::java::lang::String)>("valueOf"), //
		jMethod<::java::awt::MultipleGradientPaint$CycleMethod *()>("values"), //
	};

	template<typename R = ::java::awt::MultipleGradientPaint$CycleMethod, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::MultipleGradientPaint$CycleMethod *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", forward<Args>(args)...);
	}

};

#endif
