#ifndef java_awt_TextComponent_HPP
#define java_awt_TextComponent_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::TextComponent : public jObject<::java::awt::TextComponent, ::java::awt::Component> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "TextComponent";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("addNotify"), //
		jMethod<::jvoid(::java::awt::event::TextListener)>("addTextListener"), //
		jMethod<::jvoid(::jboolean)>("enableInputMethods"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::java::awt::Color()>("getBackground"), //
		jMethod<::jint()>("getCaretPosition"), //
		jMethod<::java::awt::im::InputMethodRequests()>("getInputMethodRequests"), //
		jMethod<::java::util::EventListener *(::java::lang::Class)>("getListeners"), //
		jMethod<::java::lang::String()>("getSelectedText"), //
		jMethod<::jint()>("getSelectionEnd"), //
		jMethod<::jint()>("getSelectionStart"), //
		jMethod<::java::lang::String()>("getText"), //
		jMethod<::java::awt::event::TextListener *()>("getTextListeners"), //
		jMethod<::jboolean()>("isEditable"), //
		jMethod<::jvoid()>("removeNotify"), //
		jMethod<::jvoid(::java::awt::event::TextListener)>("removeTextListener"), //
		jMethod<::jvoid(::jint, ::jint)>("select"), //
		jMethod<::jvoid()>("selectAll"), //
		jMethod<::jvoid(::java::awt::Color)>("setBackground"), //
		jMethod<::jvoid(::jint)>("setCaretPosition"), //
		jMethod<::jvoid(::jboolean)>("setEditable"), //
		jMethod<::jvoid(::jint)>("setSelectionEnd"), //
		jMethod<::jvoid(::jint)>("setSelectionStart"), //
		jMethod<::jvoid(::java::lang::String)>("setText"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addNotify")] != -1);
		return call<R>("addNotify", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addTextListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addTextListener")] != -1);
		return call<R>("addTextListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto enableInputMethods(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("enableInputMethods")] != -1);
		return call<R>("enableInputMethods", forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBackground")] != -1);
		return call<R>("getBackground", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCaretPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCaretPosition")] != -1);
		return call<R>("getCaretPosition", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::im::InputMethodRequests, typename... Args>
	auto getInputMethodRequests(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInputMethodRequests")] != -1);
		return call<R>("getInputMethodRequests", forward<Args>(args)...);
	}

	template<typename R = ::java::util::EventListener *, typename... Args>
	auto getListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getListeners")] != -1);
		return call<R>("getListeners", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSelectedText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSelectedText")] != -1);
		return call<R>("getSelectedText", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSelectionEnd(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSelectionEnd")] != -1);
		return call<R>("getSelectionEnd", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSelectionStart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSelectionStart")] != -1);
		return call<R>("getSelectionStart", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getText")] != -1);
		return call<R>("getText", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::TextListener *, typename... Args>
	auto getTextListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTextListeners")] != -1);
		return call<R>("getTextListeners", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEditable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isEditable")] != -1);
		return call<R>("isEditable", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeNotify")] != -1);
		return call<R>("removeNotify", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeTextListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeTextListener")] != -1);
		return call<R>("removeTextListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto select(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("select")] != -1);
		return call<R>("select", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto selectAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("selectAll")] != -1);
		return call<R>("selectAll", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBackground")] != -1);
		return call<R>("setBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCaretPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCaretPosition")] != -1);
		return call<R>("setCaretPosition", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEditable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setEditable")] != -1);
		return call<R>("setEditable", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionEnd(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSelectionEnd")] != -1);
		return call<R>("setSelectionEnd", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionStart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSelectionStart")] != -1);
		return call<R>("setSelectionStart", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setText")] != -1);
		return call<R>("setText", forward<Args>(args)...);
	}

};

#endif
