#ifndef java_awt_Cursor_HPP
#define java_awt_Cursor_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::Cursor : public jObject<::java::awt::Cursor, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "Cursor";

	constexpr static Enume field_signatures{
		jField<::jint>("CROSSHAIR_CURSOR"), //
		jField<::jint>("CUSTOM_CURSOR"), //
		jField<::jint>("DEFAULT_CURSOR"), //
		jField<::jint>("E_RESIZE_CURSOR"), //
		jField<::jint>("HAND_CURSOR"), //
		jField<::jint>("MOVE_CURSOR"), //
		jField<::jint>("NE_RESIZE_CURSOR"), //
		jField<::jint>("NW_RESIZE_CURSOR"), //
		jField<::jint>("N_RESIZE_CURSOR"), //
		jField<::jint>("SE_RESIZE_CURSOR"), //
		jField<::jint>("SW_RESIZE_CURSOR"), //
		jField<::jint>("S_RESIZE_CURSOR"), //
		jField<::jint>("TEXT_CURSOR"), //
		jField<::jint>("WAIT_CURSOR"), //
		jField<::jint>("W_RESIZE_CURSOR"), //
	};

	template<typename F = ::jint>
	static auto CROSSHAIR_CURSOR() {
		static_assert(field_signatures[jField<F>("CROSSHAIR_CURSOR")] != -1);
		return sat<F>("CROSSHAIR_CURSOR");
	}

	template<typename F = ::jint>
	static auto CUSTOM_CURSOR() {
		static_assert(field_signatures[jField<F>("CUSTOM_CURSOR")] != -1);
		return sat<F>("CUSTOM_CURSOR");
	}

	template<typename F = ::jint>
	static auto DEFAULT_CURSOR() {
		static_assert(field_signatures[jField<F>("DEFAULT_CURSOR")] != -1);
		return sat<F>("DEFAULT_CURSOR");
	}

	template<typename F = ::jint>
	static auto E_RESIZE_CURSOR() {
		static_assert(field_signatures[jField<F>("E_RESIZE_CURSOR")] != -1);
		return sat<F>("E_RESIZE_CURSOR");
	}

	template<typename F = ::jint>
	static auto HAND_CURSOR() {
		static_assert(field_signatures[jField<F>("HAND_CURSOR")] != -1);
		return sat<F>("HAND_CURSOR");
	}

	template<typename F = ::jint>
	static auto MOVE_CURSOR() {
		static_assert(field_signatures[jField<F>("MOVE_CURSOR")] != -1);
		return sat<F>("MOVE_CURSOR");
	}

	template<typename F = ::jint>
	static auto NE_RESIZE_CURSOR() {
		static_assert(field_signatures[jField<F>("NE_RESIZE_CURSOR")] != -1);
		return sat<F>("NE_RESIZE_CURSOR");
	}

	template<typename F = ::jint>
	static auto NW_RESIZE_CURSOR() {
		static_assert(field_signatures[jField<F>("NW_RESIZE_CURSOR")] != -1);
		return sat<F>("NW_RESIZE_CURSOR");
	}

	template<typename F = ::jint>
	static auto N_RESIZE_CURSOR() {
		static_assert(field_signatures[jField<F>("N_RESIZE_CURSOR")] != -1);
		return sat<F>("N_RESIZE_CURSOR");
	}

	template<typename F = ::jint>
	static auto SE_RESIZE_CURSOR() {
		static_assert(field_signatures[jField<F>("SE_RESIZE_CURSOR")] != -1);
		return sat<F>("SE_RESIZE_CURSOR");
	}

	template<typename F = ::jint>
	static auto SW_RESIZE_CURSOR() {
		static_assert(field_signatures[jField<F>("SW_RESIZE_CURSOR")] != -1);
		return sat<F>("SW_RESIZE_CURSOR");
	}

	template<typename F = ::jint>
	static auto S_RESIZE_CURSOR() {
		static_assert(field_signatures[jField<F>("S_RESIZE_CURSOR")] != -1);
		return sat<F>("S_RESIZE_CURSOR");
	}

	template<typename F = ::jint>
	static auto TEXT_CURSOR() {
		static_assert(field_signatures[jField<F>("TEXT_CURSOR")] != -1);
		return sat<F>("TEXT_CURSOR");
	}

	template<typename F = ::jint>
	static auto WAIT_CURSOR() {
		static_assert(field_signatures[jField<F>("WAIT_CURSOR")] != -1);
		return sat<F>("WAIT_CURSOR");
	}

	template<typename F = ::jint>
	static auto W_RESIZE_CURSOR() {
		static_assert(field_signatures[jField<F>("W_RESIZE_CURSOR")] != -1);
		return sat<F>("W_RESIZE_CURSOR");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint)>(), //
		jMethod<::java::awt::Cursor()>("getDefaultCursor"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::awt::Cursor(::jint)>("getPredefinedCursor"), //
		jMethod<::java::awt::Cursor(::java::lang::String)>("getSystemCustomCursor"), //
		jMethod<::jint()>("getType"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::awt::Cursor, typename... Args>
	static auto getDefaultCursor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDefaultCursor")] != -1);
		return scall<R>("getDefaultCursor", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Cursor, typename... Args>
	static auto getPredefinedCursor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPredefinedCursor")] != -1);
		return scall<R>("getPredefinedCursor", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Cursor, typename... Args>
	static auto getSystemCustomCursor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSystemCustomCursor")] != -1);
		return scall<R>("getSystemCustomCursor", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
