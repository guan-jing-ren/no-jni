#ifndef java_awt_print_PageFormat_HPP
#define java_awt_print_PageFormat_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::print::PageFormat : public jObject<::java::awt::print::PageFormat, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_print / "PageFormat";

	constexpr static Enume field_signatures{
		jField<::jint>("LANDSCAPE"), //
		jField<::jint>("PORTRAIT"), //
		jField<::jint>("REVERSE_LANDSCAPE"), //
	};

	template<typename F = ::jint>
	static auto LANDSCAPE() {
		static_assert(field_signatures[jField<F>("LANDSCAPE")] != -1);
		return sat<F>("LANDSCAPE");
	}

	template<typename F = ::jint>
	static auto PORTRAIT() {
		static_assert(field_signatures[jField<F>("PORTRAIT")] != -1);
		return sat<F>("PORTRAIT");
	}

	template<typename F = ::jint>
	static auto REVERSE_LANDSCAPE() {
		static_assert(field_signatures[jField<F>("REVERSE_LANDSCAPE")] != -1);
		return sat<F>("REVERSE_LANDSCAPE");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jdouble()>("getHeight"), //
		jMethod<::jdouble()>("getImageableHeight"), //
		jMethod<::jdouble()>("getImageableWidth"), //
		jMethod<::jdouble()>("getImageableX"), //
		jMethod<::jdouble()>("getImageableY"), //
		jMethod<::jdouble *()>("getMatrix"), //
		jMethod<::jint()>("getOrientation"), //
		jMethod<::java::awt::print::Paper()>("getPaper"), //
		jMethod<::jdouble()>("getWidth"), //
		jMethod<::jvoid(::jint)>("setOrientation"), //
		jMethod<::jvoid(::java::awt::print::Paper)>("setPaper"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeight")] != -1);
		return call<R>("getHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getImageableHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getImageableHeight")] != -1);
		return call<R>("getImageableHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getImageableWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getImageableWidth")] != -1);
		return call<R>("getImageableWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getImageableX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getImageableX")] != -1);
		return call<R>("getImageableX", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getImageableY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getImageableY")] != -1);
		return call<R>("getImageableY", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble *, typename... Args>
	auto getMatrix(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMatrix")] != -1);
		return call<R>("getMatrix", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOrientation")] != -1);
		return call<R>("getOrientation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::print::Paper, typename... Args>
	auto getPaper(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPaper")] != -1);
		return call<R>("getPaper", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOrientation")] != -1);
		return call<R>("setOrientation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPaper(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPaper")] != -1);
		return call<R>("setPaper", std::forward<Args>(args)...);
	}

};

#endif
