#ifndef java_awt_print_Paper_HPP
#define java_awt_print_Paper_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::print::Paper : public jObject<::java::awt::print::Paper, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_print / "Paper";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jdouble()>("getHeight"), //
		jMethod<::jdouble()>("getImageableHeight"), //
		jMethod<::jdouble()>("getImageableWidth"), //
		jMethod<::jdouble()>("getImageableX"), //
		jMethod<::jdouble()>("getImageableY"), //
		jMethod<::jdouble()>("getWidth"), //
		jMethod<::jvoid(::jdouble, ::jdouble, ::jdouble, ::jdouble)>("setImageableArea"), //
		jMethod<::jvoid(::jdouble, ::jdouble)>("setSize"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeight")] != -1);
		return call<R>("getHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getImageableHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getImageableHeight")] != -1);
		return call<R>("getImageableHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getImageableWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getImageableWidth")] != -1);
		return call<R>("getImageableWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getImageableX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getImageableX")] != -1);
		return call<R>("getImageableX", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getImageableY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getImageableY")] != -1);
		return call<R>("getImageableY", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setImageableArea(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setImageableArea")] != -1);
		return call<R>("setImageableArea", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSize")] != -1);
		return call<R>("setSize", std::forward<Args>(args)...);
	}

};

#endif
