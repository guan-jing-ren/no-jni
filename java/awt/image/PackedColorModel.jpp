#ifndef java_awt_image_PackedColorModel_HPP
#define java_awt_image_PackedColorModel_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::image::PackedColorModel : public jObject<::java::awt::image::PackedColorModel, ::java::awt::image::ColorModel> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_image / "PackedColorModel";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::color::ColorSpace, ::jint, ::jint, ::jint, ::jint, ::jint, ::jboolean, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::java::awt::color::ColorSpace, ::jint, ::jint *, ::jint, ::jboolean, ::jint, ::jint)>(), //
		jMethod<::java::awt::image::SampleModel(::jint, ::jint)>("createCompatibleSampleModel"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::awt::image::WritableRaster(::java::awt::image::WritableRaster)>("getAlphaRaster"), //
		jMethod<::jint(::jint)>("getMask"), //
		jMethod<::jint *()>("getMasks"), //
		jMethod<::jboolean(::java::awt::image::SampleModel)>("isCompatibleSampleModel"), //
	};

	template<typename R = ::java::awt::image::SampleModel, typename... Args>
	auto createCompatibleSampleModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createCompatibleSampleModel")] != -1);
		return call<R>("createCompatibleSampleModel", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::WritableRaster, typename... Args>
	auto getAlphaRaster(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAlphaRaster")] != -1);
		return call<R>("getAlphaRaster", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMask(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMask")] != -1);
		return call<R>("getMask", forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getMasks(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMasks")] != -1);
		return call<R>("getMasks", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCompatibleSampleModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isCompatibleSampleModel")] != -1);
		return call<R>("isCompatibleSampleModel", forward<Args>(args)...);
	}

};

#endif
