#ifndef java_awt_image_ImageFilter_HPP
#define java_awt_image_ImageFilter_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::image::ImageFilter : public jObject<::java::awt::image::ImageFilter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_image / "ImageFilter";

	constexpr static Enume field_signatures{
		jField<::jint>("COMPLETESCANLINES"), //
		jField<::jint>("IMAGEABORTED"), //
		jField<::jint>("IMAGEERROR"), //
		jField<::jint>("RANDOMPIXELORDER"), //
		jField<::jint>("SINGLEFRAME"), //
		jField<::jint>("SINGLEFRAMEDONE"), //
		jField<::jint>("SINGLEPASS"), //
		jField<::jint>("STATICIMAGEDONE"), //
		jField<::jint>("TOPDOWNLEFTRIGHT"), //
	};

	template<typename F = ::jint>
	static auto COMPLETESCANLINES() {
		static_assert(field_signatures[jField<F>("COMPLETESCANLINES")] != -1);
		return sat<F>("COMPLETESCANLINES");
	}

	template<typename F = ::jint>
	static auto IMAGEABORTED() {
		static_assert(field_signatures[jField<F>("IMAGEABORTED")] != -1);
		return sat<F>("IMAGEABORTED");
	}

	template<typename F = ::jint>
	static auto IMAGEERROR() {
		static_assert(field_signatures[jField<F>("IMAGEERROR")] != -1);
		return sat<F>("IMAGEERROR");
	}

	template<typename F = ::jint>
	static auto RANDOMPIXELORDER() {
		static_assert(field_signatures[jField<F>("RANDOMPIXELORDER")] != -1);
		return sat<F>("RANDOMPIXELORDER");
	}

	template<typename F = ::jint>
	static auto SINGLEFRAME() {
		static_assert(field_signatures[jField<F>("SINGLEFRAME")] != -1);
		return sat<F>("SINGLEFRAME");
	}

	template<typename F = ::jint>
	static auto SINGLEFRAMEDONE() {
		static_assert(field_signatures[jField<F>("SINGLEFRAMEDONE")] != -1);
		return sat<F>("SINGLEFRAMEDONE");
	}

	template<typename F = ::jint>
	static auto SINGLEPASS() {
		static_assert(field_signatures[jField<F>("SINGLEPASS")] != -1);
		return sat<F>("SINGLEPASS");
	}

	template<typename F = ::jint>
	static auto STATICIMAGEDONE() {
		static_assert(field_signatures[jField<F>("STATICIMAGEDONE")] != -1);
		return sat<F>("STATICIMAGEDONE");
	}

	template<typename F = ::jint>
	static auto TOPDOWNLEFTRIGHT() {
		static_assert(field_signatures[jField<F>("TOPDOWNLEFTRIGHT")] != -1);
		return sat<F>("TOPDOWNLEFTRIGHT");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::java::awt::image::ImageFilter(::java::awt::image::ImageConsumer)>("getFilterInstance"), //
		jMethod<::jvoid(::jint)>("imageComplete"), //
		jMethod<::jvoid(::java::awt::image::ImageProducer)>("resendTopDownLeftRight"), //
		jMethod<::jvoid(::java::awt::image::ColorModel)>("setColorModel"), //
		jMethod<::jvoid(::jint, ::jint)>("setDimensions"), //
		jMethod<::jvoid(::jint)>("setHints"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::java::awt::image::ColorModel, ::jbyte *, ::jint, ::jint)>("setPixels"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::java::awt::image::ColorModel, ::jint *, ::jint, ::jint)>("setPixels"), //
		jMethod<::jvoid(::java::util::Hashtable)>("setProperties"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::ImageFilter, typename... Args>
	auto getFilterInstance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFilterInstance")] != -1);
		return call<R>("getFilterInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto imageComplete(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("imageComplete")] != -1);
		return call<R>("imageComplete", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto resendTopDownLeftRight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("resendTopDownLeftRight")] != -1);
		return call<R>("resendTopDownLeftRight", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColorModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setColorModel")] != -1);
		return call<R>("setColorModel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDimensions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDimensions")] != -1);
		return call<R>("setDimensions", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHints")] != -1);
		return call<R>("setHints", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPixels(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPixels")] != -1);
		return call<R>("setPixels", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setProperties(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setProperties")] != -1);
		return call<R>("setProperties", std::forward<Args>(args)...);
	}

};

#endif
