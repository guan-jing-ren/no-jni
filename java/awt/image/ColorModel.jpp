#ifndef java_awt_image_ColorModel_HPP
#define java_awt_image_ColorModel_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::image::ColorModel : public jObject<::java::awt::image::ColorModel, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_image / "ColorModel";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint)>(), //
		jMethod<::java::awt::image::ColorModel(::java::awt::image::WritableRaster, ::jboolean)>("coerceData"), //
		jMethod<::java::awt::image::SampleModel(::jint, ::jint)>("createCompatibleSampleModel"), //
		jMethod<::java::awt::image::WritableRaster(::jint, ::jint)>("createCompatibleWritableRaster"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jvoid()>("finalize"), //
		jMethod<::jint(::jint)>("getAlpha"), //
		jMethod<::jint(::java::lang::Object)>("getAlpha"), //
		jMethod<::java::awt::image::WritableRaster(::java::awt::image::WritableRaster)>("getAlphaRaster"), //
		jMethod<::jint(::jint)>("getBlue"), //
		jMethod<::jint(::java::lang::Object)>("getBlue"), //
		jMethod<::java::awt::color::ColorSpace()>("getColorSpace"), //
		jMethod<::jint *()>("getComponentSize"), //
		jMethod<::jint(::jint)>("getComponentSize"), //
		jMethod<::jint *(::jint, ::jint *, ::jint)>("getComponents"), //
		jMethod<::jint *(::java::lang::Object, ::jint *, ::jint)>("getComponents"), //
		jMethod<::jint(::jfloat *, ::jint)>("getDataElement"), //
		jMethod<::jint(::jint *, ::jint)>("getDataElement"), //
		jMethod<::java::lang::Object(::jint, ::java::lang::Object)>("getDataElements"), //
		jMethod<::java::lang::Object(::jfloat *, ::jint, ::java::lang::Object)>("getDataElements"), //
		jMethod<::java::lang::Object(::jint *, ::jint, ::java::lang::Object)>("getDataElements"), //
		jMethod<::jint(::jint)>("getGreen"), //
		jMethod<::jint(::java::lang::Object)>("getGreen"), //
		jMethod<::jfloat *(::java::lang::Object, ::jfloat *, ::jint)>("getNormalizedComponents"), //
		jMethod<::jfloat *(::jint *, ::jint, ::jfloat *, ::jint)>("getNormalizedComponents"), //
		jMethod<::jint()>("getNumColorComponents"), //
		jMethod<::jint()>("getNumComponents"), //
		jMethod<::jint()>("getPixelSize"), //
		jMethod<::jint(::jint)>("getRGB"), //
		jMethod<::jint(::java::lang::Object)>("getRGB"), //
		jMethod<::java::awt::image::ColorModel()>("getRGBdefault"), //
		jMethod<::jint(::jint)>("getRed"), //
		jMethod<::jint(::java::lang::Object)>("getRed"), //
		jMethod<::jint()>("getTransferType"), //
		jMethod<::jint()>("getTransparency"), //
		jMethod<::jint *(::jfloat *, ::jint, ::jint *, ::jint)>("getUnnormalizedComponents"), //
		jMethod<::jboolean()>("hasAlpha"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isAlphaPremultiplied"), //
		jMethod<::jboolean(::java::awt::image::Raster)>("isCompatibleRaster"), //
		jMethod<::jboolean(::java::awt::image::SampleModel)>("isCompatibleSampleModel"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::awt::image::ColorModel, typename... Args>
	auto coerceData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("coerceData")] != -1);
		return call<R>("coerceData", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::SampleModel, typename... Args>
	auto createCompatibleSampleModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createCompatibleSampleModel")] != -1);
		return call<R>("createCompatibleSampleModel", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::WritableRaster, typename... Args>
	auto createCompatibleWritableRaster(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createCompatibleWritableRaster")] != -1);
		return call<R>("createCompatibleWritableRaster", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto finalize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("finalize")] != -1);
		return call<R>("finalize", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAlpha(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAlpha")] != -1);
		return call<R>("getAlpha", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::WritableRaster, typename... Args>
	auto getAlphaRaster(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAlphaRaster")] != -1);
		return call<R>("getAlphaRaster", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBlue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBlue")] != -1);
		return call<R>("getBlue", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::color::ColorSpace, typename... Args>
	auto getColorSpace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColorSpace")] != -1);
		return call<R>("getColorSpace", forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getComponentSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getComponentSize")] != -1);
		return call<R>("getComponentSize", forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getComponents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getComponents")] != -1);
		return call<R>("getComponents", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDataElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDataElement")] != -1);
		return call<R>("getDataElement", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getDataElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDataElements")] != -1);
		return call<R>("getDataElements", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getGreen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getGreen")] != -1);
		return call<R>("getGreen", forward<Args>(args)...);
	}

	template<typename R = ::jfloat *, typename... Args>
	auto getNormalizedComponents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNormalizedComponents")] != -1);
		return call<R>("getNormalizedComponents", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumColorComponents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNumColorComponents")] != -1);
		return call<R>("getNumColorComponents", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumComponents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNumComponents")] != -1);
		return call<R>("getNumComponents", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPixelSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPixelSize")] != -1);
		return call<R>("getPixelSize", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRGB(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRGB")] != -1);
		return call<R>("getRGB", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::ColorModel, typename... Args>
	static auto getRGBdefault(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRGBdefault")] != -1);
		return scall<R>("getRGBdefault", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRed")] != -1);
		return call<R>("getRed", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTransferType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTransferType")] != -1);
		return call<R>("getTransferType", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTransparency(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTransparency")] != -1);
		return call<R>("getTransparency", forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getUnnormalizedComponents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUnnormalizedComponents")] != -1);
		return call<R>("getUnnormalizedComponents", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasAlpha(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hasAlpha")] != -1);
		return call<R>("hasAlpha", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAlphaPremultiplied(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isAlphaPremultiplied")] != -1);
		return call<R>("isAlphaPremultiplied", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCompatibleRaster(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isCompatibleRaster")] != -1);
		return call<R>("isCompatibleRaster", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCompatibleSampleModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isCompatibleSampleModel")] != -1);
		return call<R>("isCompatibleSampleModel", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
