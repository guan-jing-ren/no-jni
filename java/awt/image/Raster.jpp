#ifndef java_awt_image_Raster_HPP
#define java_awt_image_Raster_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::image::Raster : public jObject<::java::awt::image::Raster, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_image / "Raster";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::awt::image::WritableRaster(::jint, ::jint, ::jint, ::jint, ::java::awt::Point)>("createBandedRaster"), //
		jMethod<::java::awt::image::WritableRaster(::jint, ::jint, ::jint, ::jint, ::jint *, ::jint *, ::java::awt::Point)>("createBandedRaster"), //
		jMethod<::java::awt::image::WritableRaster(::java::awt::image::DataBuffer, ::jint, ::jint, ::jint, ::jint *, ::jint *, ::java::awt::Point)>("createBandedRaster"), //
		jMethod<::java::awt::image::Raster(::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint *)>("createChild"), //
		jMethod<::java::awt::image::WritableRaster()>("createCompatibleWritableRaster"), //
		jMethod<::java::awt::image::WritableRaster(::jint, ::jint)>("createCompatibleWritableRaster"), //
		jMethod<::java::awt::image::WritableRaster(::jint, ::jint, ::jint, ::jint)>("createCompatibleWritableRaster"), //
		jMethod<::java::awt::image::WritableRaster(::java::awt::Rectangle)>("createCompatibleWritableRaster"), //
		jMethod<::java::awt::image::WritableRaster(::jint, ::jint, ::jint, ::jint, ::jint, ::jint *, ::java::awt::Point)>("createInterleavedRaster"), //
		jMethod<::java::awt::image::WritableRaster(::jint, ::jint, ::jint, ::jint, ::java::awt::Point)>("createInterleavedRaster"), //
		jMethod<::java::awt::image::WritableRaster(::java::awt::image::DataBuffer, ::jint, ::jint, ::jint, ::jint, ::jint *, ::java::awt::Point)>("createInterleavedRaster"), //
		jMethod<::java::awt::image::WritableRaster(::jint, ::jint, ::jint, ::jint, ::jint, ::java::awt::Point)>("createPackedRaster"), //
		jMethod<::java::awt::image::WritableRaster(::jint, ::jint, ::jint, ::jint *, ::java::awt::Point)>("createPackedRaster"), //
		jMethod<::java::awt::image::WritableRaster(::java::awt::image::DataBuffer, ::jint, ::jint, ::jint, ::java::awt::Point)>("createPackedRaster"), //
		jMethod<::java::awt::image::WritableRaster(::java::awt::image::DataBuffer, ::jint, ::jint, ::jint, ::jint *, ::java::awt::Point)>("createPackedRaster"), //
		jMethod<::java::awt::image::Raster(::java::awt::image::SampleModel, ::java::awt::image::DataBuffer, ::java::awt::Point)>("createRaster"), //
		jMethod<::java::awt::image::Raster(::jint, ::jint)>("createTranslatedChild"), //
		jMethod<::java::awt::image::WritableRaster(::java::awt::image::SampleModel, ::java::awt::Point)>("createWritableRaster"), //
		jMethod<::java::awt::image::WritableRaster(::java::awt::image::SampleModel, ::java::awt::image::DataBuffer, ::java::awt::Point)>("createWritableRaster"), //
		jMethod<::java::awt::Rectangle()>("getBounds"), //
		jMethod<::java::awt::image::DataBuffer()>("getDataBuffer"), //
		jMethod<::java::lang::Object(::jint, ::jint, ::jint, ::jint, ::java::lang::Object)>("getDataElements"), //
		jMethod<::java::lang::Object(::jint, ::jint, ::java::lang::Object)>("getDataElements"), //
		jMethod<::jint()>("getHeight"), //
		jMethod<::jint()>("getMinX"), //
		jMethod<::jint()>("getMinY"), //
		jMethod<::jint()>("getNumBands"), //
		jMethod<::jint()>("getNumDataElements"), //
		jMethod<::java::awt::image::Raster()>("getParent"), //
		jMethod<::jdouble *(::jint, ::jint, ::jdouble *)>("getPixel"), //
		jMethod<::jfloat *(::jint, ::jint, ::jfloat *)>("getPixel"), //
		jMethod<::jint *(::jint, ::jint, ::jint *)>("getPixel"), //
		jMethod<::jdouble *(::jint, ::jint, ::jint, ::jint, ::jdouble *)>("getPixels"), //
		jMethod<::jfloat *(::jint, ::jint, ::jint, ::jint, ::jfloat *)>("getPixels"), //
		jMethod<::jint *(::jint, ::jint, ::jint, ::jint, ::jint *)>("getPixels"), //
		jMethod<::jint(::jint, ::jint, ::jint)>("getSample"), //
		jMethod<::jdouble(::jint, ::jint, ::jint)>("getSampleDouble"), //
		jMethod<::jfloat(::jint, ::jint, ::jint)>("getSampleFloat"), //
		jMethod<::java::awt::image::SampleModel()>("getSampleModel"), //
		jMethod<::jint()>("getSampleModelTranslateX"), //
		jMethod<::jint()>("getSampleModelTranslateY"), //
		jMethod<::jdouble *(::jint, ::jint, ::jint, ::jint, ::jint, ::jdouble *)>("getSamples"), //
		jMethod<::jfloat *(::jint, ::jint, ::jint, ::jint, ::jint, ::jfloat *)>("getSamples"), //
		jMethod<::jint *(::jint, ::jint, ::jint, ::jint, ::jint, ::jint *)>("getSamples"), //
		jMethod<::jint()>("getTransferType"), //
		jMethod<::jint()>("getWidth"), //
	};

	template<typename R = ::java::awt::image::WritableRaster, typename... Args>
	static auto createBandedRaster(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createBandedRaster")] != -1);
		return scall<R>("createBandedRaster", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::Raster, typename... Args>
	auto createChild(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createChild")] != -1);
		return call<R>("createChild", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::WritableRaster, typename... Args>
	auto createCompatibleWritableRaster(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createCompatibleWritableRaster")] != -1);
		return call<R>("createCompatibleWritableRaster", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::WritableRaster, typename... Args>
	static auto createInterleavedRaster(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createInterleavedRaster")] != -1);
		return scall<R>("createInterleavedRaster", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::WritableRaster, typename... Args>
	static auto createPackedRaster(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createPackedRaster")] != -1);
		return scall<R>("createPackedRaster", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::Raster, typename... Args>
	static auto createRaster(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createRaster")] != -1);
		return scall<R>("createRaster", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::Raster, typename... Args>
	auto createTranslatedChild(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createTranslatedChild")] != -1);
		return call<R>("createTranslatedChild", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::WritableRaster, typename... Args>
	static auto createWritableRaster(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createWritableRaster")] != -1);
		return scall<R>("createWritableRaster", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds")] != -1);
		return call<R>("getBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::DataBuffer, typename... Args>
	auto getDataBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDataBuffer")] != -1);
		return call<R>("getDataBuffer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getDataElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDataElements")] != -1);
		return call<R>("getDataElements", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeight")] != -1);
		return call<R>("getHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinX")] != -1);
		return call<R>("getMinX", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinY")] != -1);
		return call<R>("getMinY", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumBands(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNumBands")] != -1);
		return call<R>("getNumBands", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumDataElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNumDataElements")] != -1);
		return call<R>("getNumDataElements", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::Raster, typename... Args>
	auto getParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParent")] != -1);
		return call<R>("getParent", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble *, typename... Args>
	auto getPixel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPixel")] != -1);
		return call<R>("getPixel", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble *, typename... Args>
	auto getPixels(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPixels")] != -1);
		return call<R>("getPixels", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSample(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSample")] != -1);
		return call<R>("getSample", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getSampleDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSampleDouble")] != -1);
		return call<R>("getSampleDouble", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getSampleFloat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSampleFloat")] != -1);
		return call<R>("getSampleFloat", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::SampleModel, typename... Args>
	auto getSampleModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSampleModel")] != -1);
		return call<R>("getSampleModel", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSampleModelTranslateX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSampleModelTranslateX")] != -1);
		return call<R>("getSampleModelTranslateX", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSampleModelTranslateY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSampleModelTranslateY")] != -1);
		return call<R>("getSampleModelTranslateY", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble *, typename... Args>
	auto getSamples(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSamples")] != -1);
		return call<R>("getSamples", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTransferType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransferType")] != -1);
		return call<R>("getTransferType", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", std::forward<Args>(args)...);
	}

};

#endif
