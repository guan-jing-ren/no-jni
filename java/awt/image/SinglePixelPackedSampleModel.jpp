#ifndef java_awt_image_SinglePixelPackedSampleModel_HPP
#define java_awt_image_SinglePixelPackedSampleModel_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::image::SinglePixelPackedSampleModel : public jObject<::java::awt::image::SinglePixelPackedSampleModel, ::java::awt::image::SampleModel> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_image / "SinglePixelPackedSampleModel";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint *)>(), //
		jConstructor<::jvoid(::jint, ::jint, ::jint, ::jint *)>(), //
		jMethod<::java::awt::image::SampleModel(::jint, ::jint)>("createCompatibleSampleModel"), //
		jMethod<::java::awt::image::DataBuffer()>("createDataBuffer"), //
		jMethod<::java::awt::image::SampleModel(::jint *)>("createSubsetSampleModel"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint *()>("getBitMasks"), //
		jMethod<::jint *()>("getBitOffsets"), //
		jMethod<::java::lang::Object(::jint, ::jint, ::java::lang::Object, ::java::awt::image::DataBuffer)>("getDataElements"), //
		jMethod<::jint()>("getNumDataElements"), //
		jMethod<::jint(::jint, ::jint)>("getOffset"), //
		jMethod<::jint *(::jint, ::jint, ::jint *, ::java::awt::image::DataBuffer)>("getPixel"), //
		jMethod<::jint *(::jint, ::jint, ::jint, ::jint, ::jint *, ::java::awt::image::DataBuffer)>("getPixels"), //
		jMethod<::jint(::jint, ::jint, ::jint, ::java::awt::image::DataBuffer)>("getSample"), //
		jMethod<::jint *()>("getSampleSize"), //
		jMethod<::jint(::jint)>("getSampleSize"), //
		jMethod<::jint *(::jint, ::jint, ::jint, ::jint, ::jint, ::jint *, ::java::awt::image::DataBuffer)>("getSamples"), //
		jMethod<::jint()>("getScanlineStride"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jvoid(::jint, ::jint, ::java::lang::Object, ::java::awt::image::DataBuffer)>("setDataElements"), //
		jMethod<::jvoid(::jint, ::jint, ::jint *, ::java::awt::image::DataBuffer)>("setPixel"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint *, ::java::awt::image::DataBuffer)>("setPixels"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::java::awt::image::DataBuffer)>("setSample"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jint *, ::java::awt::image::DataBuffer)>("setSamples"), //
	};

	template<typename R = ::java::awt::image::SampleModel, typename... Args>
	auto createCompatibleSampleModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createCompatibleSampleModel")] != -1);
		return call<R>("createCompatibleSampleModel", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::DataBuffer, typename... Args>
	auto createDataBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createDataBuffer")] != -1);
		return call<R>("createDataBuffer", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::SampleModel, typename... Args>
	auto createSubsetSampleModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createSubsetSampleModel")] != -1);
		return call<R>("createSubsetSampleModel", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getBitMasks(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBitMasks")] != -1);
		return call<R>("getBitMasks", forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getBitOffsets(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBitOffsets")] != -1);
		return call<R>("getBitOffsets", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getDataElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDataElements")] != -1);
		return call<R>("getDataElements", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumDataElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNumDataElements")] != -1);
		return call<R>("getNumDataElements", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getOffset")] != -1);
		return call<R>("getOffset", forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getPixel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPixel")] != -1);
		return call<R>("getPixel", forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getPixels(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPixels")] != -1);
		return call<R>("getPixels", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSample(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSample")] != -1);
		return call<R>("getSample", forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getSampleSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSampleSize")] != -1);
		return call<R>("getSampleSize", forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getSamples(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSamples")] != -1);
		return call<R>("getSamples", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getScanlineStride(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getScanlineStride")] != -1);
		return call<R>("getScanlineStride", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDataElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDataElements")] != -1);
		return call<R>("setDataElements", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPixel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPixel")] != -1);
		return call<R>("setPixel", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPixels(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPixels")] != -1);
		return call<R>("setPixels", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSample(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSample")] != -1);
		return call<R>("setSample", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSamples(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSamples")] != -1);
		return call<R>("setSamples", forward<Args>(args)...);
	}

};

#endif
