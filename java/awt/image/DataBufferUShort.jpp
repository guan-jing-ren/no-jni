#ifndef java_awt_image_DataBufferUShort_HPP
#define java_awt_image_DataBufferUShort_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::image::DataBufferUShort : public jObject<::java::awt::image::DataBufferUShort, ::java::awt::image::DataBuffer> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_image / "DataBufferUShort";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint)>(), //
		jConstructor<::jvoid(::jint, ::jint)>(), //
		jConstructor<::jvoid(::jshort *, ::jint)>(), //
		jConstructor<::jvoid(::jshort *, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::jshort **, ::jint)>(), //
		jConstructor<::jvoid(::jshort **, ::jint, ::jint *)>(), //
		jMethod<::jshort **()>("getBankData"), //
		jMethod<::jshort *()>("getData"), //
		jMethod<::jshort *(::jint)>("getData"), //
		jMethod<::jint(::jint)>("getElem"), //
		jMethod<::jint(::jint, ::jint)>("getElem"), //
		jMethod<::jvoid(::jint, ::jint)>("setElem"), //
		jMethod<::jvoid(::jint, ::jint, ::jint)>("setElem"), //
	};

	template<typename R = ::jshort **, typename... Args>
	auto getBankData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBankData")] != -1);
		return call<R>("getBankData", forward<Args>(args)...);
	}

	template<typename R = ::jshort *, typename... Args>
	auto getData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getData")] != -1);
		return call<R>("getData", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getElem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getElem")] != -1);
		return call<R>("getElem", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setElem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setElem")] != -1);
		return call<R>("setElem", forward<Args>(args)...);
	}

};

#endif
