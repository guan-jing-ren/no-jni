#ifndef java_awt_image_IndexColorModel_HPP
#define java_awt_image_IndexColorModel_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::image::IndexColorModel : public jObject<::java::awt::image::IndexColorModel, ::java::awt::image::ColorModel> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_image / "IndexColorModel";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint, ::jint, ::jbyte *, ::jint, ::jboolean)>(), //
		jConstructor<::jvoid(::jint, ::jint, ::jbyte *, ::jint, ::jboolean, ::jint)>(), //
		jConstructor<::jvoid(::jint, ::jint, ::jbyte *, ::jbyte *, ::jbyte *)>(), //
		jConstructor<::jvoid(::jint, ::jint, ::jbyte *, ::jbyte *, ::jbyte *, ::jint)>(), //
		jConstructor<::jvoid(::jint, ::jint, ::jbyte *, ::jbyte *, ::jbyte *, ::jbyte *)>(), //
		jConstructor<::jvoid(::jint, ::jint, ::jint *, ::jint, ::jint, ::java::math::BigInteger)>(), //
		jConstructor<::jvoid(::jint, ::jint, ::jint *, ::jint, ::jboolean, ::jint, ::jint)>(), //
		jMethod<::java::awt::image::BufferedImage(::java::awt::image::Raster, ::jboolean)>("convertToIntDiscrete"), //
		jMethod<::java::awt::image::SampleModel(::jint, ::jint)>("createCompatibleSampleModel"), //
		jMethod<::java::awt::image::WritableRaster(::jint, ::jint)>("createCompatibleWritableRaster"), //
		jMethod<::jvoid()>("finalize"), //
		jMethod<::jint(::jint)>("getAlpha"), //
		jMethod<::jvoid(::jbyte *)>("getAlphas"), //
		jMethod<::jint(::jint)>("getBlue"), //
		jMethod<::jvoid(::jbyte *)>("getBlues"), //
		jMethod<::jint *()>("getComponentSize"), //
		jMethod<::jint *(::jint, ::jint *, ::jint)>("getComponents"), //
		jMethod<::jint *(::java::lang::Object, ::jint *, ::jint)>("getComponents"), //
		jMethod<::jint(::jint *, ::jint)>("getDataElement"), //
		jMethod<::java::lang::Object(::jint, ::java::lang::Object)>("getDataElements"), //
		jMethod<::java::lang::Object(::jint *, ::jint, ::java::lang::Object)>("getDataElements"), //
		jMethod<::jint(::jint)>("getGreen"), //
		jMethod<::jvoid(::jbyte *)>("getGreens"), //
		jMethod<::jint()>("getMapSize"), //
		jMethod<::jint(::jint)>("getRGB"), //
		jMethod<::jvoid(::jint *)>("getRGBs"), //
		jMethod<::jint(::jint)>("getRed"), //
		jMethod<::jvoid(::jbyte *)>("getReds"), //
		jMethod<::jint()>("getTransparency"), //
		jMethod<::jint()>("getTransparentPixel"), //
		jMethod<::java::math::BigInteger()>("getValidPixels"), //
		jMethod<::jboolean(::java::awt::image::Raster)>("isCompatibleRaster"), //
		jMethod<::jboolean(::java::awt::image::SampleModel)>("isCompatibleSampleModel"), //
		jMethod<::jboolean()>("isValid"), //
		jMethod<::jboolean(::jint)>("isValid"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::awt::image::BufferedImage, typename... Args>
	auto convertToIntDiscrete(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("convertToIntDiscrete")] != -1);
		return call<R>("convertToIntDiscrete", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::SampleModel, typename... Args>
	auto createCompatibleSampleModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createCompatibleSampleModel")] != -1);
		return call<R>("createCompatibleSampleModel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::WritableRaster, typename... Args>
	auto createCompatibleWritableRaster(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createCompatibleWritableRaster")] != -1);
		return call<R>("createCompatibleWritableRaster", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto finalize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("finalize")] != -1);
		return call<R>("finalize", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAlpha(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlpha")] != -1);
		return call<R>("getAlpha", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getAlphas(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlphas")] != -1);
		return call<R>("getAlphas", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBlue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBlue")] != -1);
		return call<R>("getBlue", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getBlues(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBlues")] != -1);
		return call<R>("getBlues", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getComponentSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getComponentSize")] != -1);
		return call<R>("getComponentSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getComponents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getComponents")] != -1);
		return call<R>("getComponents", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDataElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDataElement")] != -1);
		return call<R>("getDataElement", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getDataElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDataElements")] != -1);
		return call<R>("getDataElements", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getGreen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGreen")] != -1);
		return call<R>("getGreen", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getGreens(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGreens")] != -1);
		return call<R>("getGreens", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMapSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMapSize")] != -1);
		return call<R>("getMapSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRGB(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRGB")] != -1);
		return call<R>("getRGB", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getRGBs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRGBs")] != -1);
		return call<R>("getRGBs", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRed")] != -1);
		return call<R>("getRed", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getReds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReds")] != -1);
		return call<R>("getReds", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTransparency(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransparency")] != -1);
		return call<R>("getTransparency", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTransparentPixel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransparentPixel")] != -1);
		return call<R>("getTransparentPixel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto getValidPixels(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValidPixels")] != -1);
		return call<R>("getValidPixels", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCompatibleRaster(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCompatibleRaster")] != -1);
		return call<R>("isCompatibleRaster", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCompatibleSampleModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCompatibleSampleModel")] != -1);
		return call<R>("isCompatibleSampleModel", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isValid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isValid")] != -1);
		return call<R>("isValid", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
