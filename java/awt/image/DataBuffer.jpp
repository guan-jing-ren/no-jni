#ifndef java_awt_image_DataBuffer_HPP
#define java_awt_image_DataBuffer_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::image::DataBuffer : public jObject<::java::awt::image::DataBuffer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_image / "DataBuffer";

	constexpr static Enume field_signatures{
		jField<::jint>("TYPE_BYTE"), //
		jField<::jint>("TYPE_DOUBLE"), //
		jField<::jint>("TYPE_FLOAT"), //
		jField<::jint>("TYPE_INT"), //
		jField<::jint>("TYPE_SHORT"), //
		jField<::jint>("TYPE_UNDEFINED"), //
		jField<::jint>("TYPE_USHORT"), //
	};

	template<typename F = ::jint>
	static auto TYPE_BYTE() {
		static_assert(field_signatures[jField<F>("TYPE_BYTE")] != -1);
		return sat<F>("TYPE_BYTE");
	}

	template<typename F = ::jint>
	static auto TYPE_DOUBLE() {
		static_assert(field_signatures[jField<F>("TYPE_DOUBLE")] != -1);
		return sat<F>("TYPE_DOUBLE");
	}

	template<typename F = ::jint>
	static auto TYPE_FLOAT() {
		static_assert(field_signatures[jField<F>("TYPE_FLOAT")] != -1);
		return sat<F>("TYPE_FLOAT");
	}

	template<typename F = ::jint>
	static auto TYPE_INT() {
		static_assert(field_signatures[jField<F>("TYPE_INT")] != -1);
		return sat<F>("TYPE_INT");
	}

	template<typename F = ::jint>
	static auto TYPE_SHORT() {
		static_assert(field_signatures[jField<F>("TYPE_SHORT")] != -1);
		return sat<F>("TYPE_SHORT");
	}

	template<typename F = ::jint>
	static auto TYPE_UNDEFINED() {
		static_assert(field_signatures[jField<F>("TYPE_UNDEFINED")] != -1);
		return sat<F>("TYPE_UNDEFINED");
	}

	template<typename F = ::jint>
	static auto TYPE_USHORT() {
		static_assert(field_signatures[jField<F>("TYPE_USHORT")] != -1);
		return sat<F>("TYPE_USHORT");
	}

	constexpr static Enume method_signatures{
		jMethod<::jint()>("getDataType"), //
		jMethod<::jint(::jint)>("getDataTypeSize"), //
		jMethod<::jint(::jint)>("getElem"), //
		jMethod<::jint(::jint, ::jint)>("getElem"), //
		jMethod<::jdouble(::jint)>("getElemDouble"), //
		jMethod<::jdouble(::jint, ::jint)>("getElemDouble"), //
		jMethod<::jfloat(::jint)>("getElemFloat"), //
		jMethod<::jfloat(::jint, ::jint)>("getElemFloat"), //
		jMethod<::jint()>("getNumBanks"), //
		jMethod<::jint()>("getOffset"), //
		jMethod<::jint *()>("getOffsets"), //
		jMethod<::jint()>("getSize"), //
		jMethod<::jvoid(::jint, ::jint)>("setElem"), //
		jMethod<::jvoid(::jint, ::jint, ::jint)>("setElem"), //
		jMethod<::jvoid(::jint, ::jdouble)>("setElemDouble"), //
		jMethod<::jvoid(::jint, ::jint, ::jdouble)>("setElemDouble"), //
		jMethod<::jvoid(::jint, ::jfloat)>("setElemFloat"), //
		jMethod<::jvoid(::jint, ::jint, ::jfloat)>("setElemFloat"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getDataType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDataType")] != -1);
		return call<R>("getDataType", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getDataTypeSize(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDataTypeSize")] != -1);
		return scall<R>("getDataTypeSize", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getElem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getElem")] != -1);
		return call<R>("getElem", forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getElemDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getElemDouble")] != -1);
		return call<R>("getElemDouble", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getElemFloat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getElemFloat")] != -1);
		return call<R>("getElemFloat", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumBanks(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNumBanks")] != -1);
		return call<R>("getNumBanks", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getOffset")] != -1);
		return call<R>("getOffset", forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getOffsets(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getOffsets")] != -1);
		return call<R>("getOffsets", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSize")] != -1);
		return call<R>("getSize", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setElem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setElem")] != -1);
		return call<R>("setElem", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setElemDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setElemDouble")] != -1);
		return call<R>("setElemDouble", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setElemFloat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setElemFloat")] != -1);
		return call<R>("setElemFloat", forward<Args>(args)...);
	}

};

#endif
