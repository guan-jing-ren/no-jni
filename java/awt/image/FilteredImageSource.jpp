#ifndef java_awt_image_FilteredImageSource_HPP
#define java_awt_image_FilteredImageSource_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::image::FilteredImageSource : public jObject<::java::awt::image::FilteredImageSource, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_image / "FilteredImageSource";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::image::ImageProducer, ::java::awt::image::ImageFilter)>(), //
		jMethod<::jvoid(::java::awt::image::ImageConsumer)>("addConsumer"), //
		jMethod<::jboolean(::java::awt::image::ImageConsumer)>("isConsumer"), //
		jMethod<::jvoid(::java::awt::image::ImageConsumer)>("removeConsumer"), //
		jMethod<::jvoid(::java::awt::image::ImageConsumer)>("requestTopDownLeftRightResend"), //
		jMethod<::jvoid(::java::awt::image::ImageConsumer)>("startProduction"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addConsumer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addConsumer")] != -1);
		return call<R>("addConsumer", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isConsumer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isConsumer")] != -1);
		return call<R>("isConsumer", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeConsumer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeConsumer")] != -1);
		return call<R>("removeConsumer", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto requestTopDownLeftRightResend(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("requestTopDownLeftRightResend")] != -1);
		return call<R>("requestTopDownLeftRightResend", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto startProduction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("startProduction")] != -1);
		return call<R>("startProduction", forward<Args>(args)...);
	}

};

#endif
