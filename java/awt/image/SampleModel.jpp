#ifndef java_awt_image_SampleModel_HPP
#define java_awt_image_SampleModel_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::image::SampleModel : public jObject<::java::awt::image::SampleModel, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_image / "SampleModel";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint, ::jint, ::jint, ::jint)>(), //
		jMethod<::java::awt::image::SampleModel(::jint, ::jint)>("createCompatibleSampleModel"), //
		jMethod<::java::awt::image::DataBuffer()>("createDataBuffer"), //
		jMethod<::java::awt::image::SampleModel(::jint *)>("createSubsetSampleModel"), //
		jMethod<::java::lang::Object(::jint, ::jint, ::jint, ::jint, ::java::lang::Object, ::java::awt::image::DataBuffer)>("getDataElements"), //
		jMethod<::java::lang::Object(::jint, ::jint, ::java::lang::Object, ::java::awt::image::DataBuffer)>("getDataElements"), //
		jMethod<::jint()>("getDataType"), //
		jMethod<::jint()>("getHeight"), //
		jMethod<::jint()>("getNumBands"), //
		jMethod<::jint()>("getNumDataElements"), //
		jMethod<::jdouble *(::jint, ::jint, ::jdouble *, ::java::awt::image::DataBuffer)>("getPixel"), //
		jMethod<::jfloat *(::jint, ::jint, ::jfloat *, ::java::awt::image::DataBuffer)>("getPixel"), //
		jMethod<::jint *(::jint, ::jint, ::jint *, ::java::awt::image::DataBuffer)>("getPixel"), //
		jMethod<::jdouble *(::jint, ::jint, ::jint, ::jint, ::jdouble *, ::java::awt::image::DataBuffer)>("getPixels"), //
		jMethod<::jfloat *(::jint, ::jint, ::jint, ::jint, ::jfloat *, ::java::awt::image::DataBuffer)>("getPixels"), //
		jMethod<::jint *(::jint, ::jint, ::jint, ::jint, ::jint *, ::java::awt::image::DataBuffer)>("getPixels"), //
		jMethod<::jint(::jint, ::jint, ::jint, ::java::awt::image::DataBuffer)>("getSample"), //
		jMethod<::jdouble(::jint, ::jint, ::jint, ::java::awt::image::DataBuffer)>("getSampleDouble"), //
		jMethod<::jfloat(::jint, ::jint, ::jint, ::java::awt::image::DataBuffer)>("getSampleFloat"), //
		jMethod<::jint *()>("getSampleSize"), //
		jMethod<::jint(::jint)>("getSampleSize"), //
		jMethod<::jdouble *(::jint, ::jint, ::jint, ::jint, ::jint, ::jdouble *, ::java::awt::image::DataBuffer)>("getSamples"), //
		jMethod<::jfloat *(::jint, ::jint, ::jint, ::jint, ::jint, ::jfloat *, ::java::awt::image::DataBuffer)>("getSamples"), //
		jMethod<::jint *(::jint, ::jint, ::jint, ::jint, ::jint, ::jint *, ::java::awt::image::DataBuffer)>("getSamples"), //
		jMethod<::jint()>("getTransferType"), //
		jMethod<::jint()>("getWidth"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::java::lang::Object, ::java::awt::image::DataBuffer)>("setDataElements"), //
		jMethod<::jvoid(::jint, ::jint, ::java::lang::Object, ::java::awt::image::DataBuffer)>("setDataElements"), //
		jMethod<::jvoid(::jint, ::jint, ::jdouble *, ::java::awt::image::DataBuffer)>("setPixel"), //
		jMethod<::jvoid(::jint, ::jint, ::jfloat *, ::java::awt::image::DataBuffer)>("setPixel"), //
		jMethod<::jvoid(::jint, ::jint, ::jint *, ::java::awt::image::DataBuffer)>("setPixel"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jdouble *, ::java::awt::image::DataBuffer)>("setPixels"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jfloat *, ::java::awt::image::DataBuffer)>("setPixels"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint *, ::java::awt::image::DataBuffer)>("setPixels"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jdouble, ::java::awt::image::DataBuffer)>("setSample"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jfloat, ::java::awt::image::DataBuffer)>("setSample"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::java::awt::image::DataBuffer)>("setSample"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jdouble *, ::java::awt::image::DataBuffer)>("setSamples"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jfloat *, ::java::awt::image::DataBuffer)>("setSamples"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jint *, ::java::awt::image::DataBuffer)>("setSamples"), //
	};

	template<typename R = ::java::awt::image::SampleModel, typename... Args>
	auto createCompatibleSampleModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createCompatibleSampleModel")] != -1);
		return call<R>("createCompatibleSampleModel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::DataBuffer, typename... Args>
	auto createDataBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createDataBuffer")] != -1);
		return call<R>("createDataBuffer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::SampleModel, typename... Args>
	auto createSubsetSampleModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createSubsetSampleModel")] != -1);
		return call<R>("createSubsetSampleModel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getDataElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDataElements")] != -1);
		return call<R>("getDataElements", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDataType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDataType")] != -1);
		return call<R>("getDataType", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeight")] != -1);
		return call<R>("getHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumBands(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNumBands")] != -1);
		return call<R>("getNumBands", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumDataElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNumDataElements")] != -1);
		return call<R>("getNumDataElements", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble *, typename... Args>
	auto getPixel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPixel")] != -1);
		return call<R>("getPixel", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble *, typename... Args>
	auto getPixels(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPixels")] != -1);
		return call<R>("getPixels", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSample(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSample")] != -1);
		return call<R>("getSample", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getSampleDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSampleDouble")] != -1);
		return call<R>("getSampleDouble", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getSampleFloat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSampleFloat")] != -1);
		return call<R>("getSampleFloat", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getSampleSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSampleSize")] != -1);
		return call<R>("getSampleSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble *, typename... Args>
	auto getSamples(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSamples")] != -1);
		return call<R>("getSamples", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTransferType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransferType")] != -1);
		return call<R>("getTransferType", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDataElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDataElements")] != -1);
		return call<R>("setDataElements", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPixel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPixel")] != -1);
		return call<R>("setPixel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPixels(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPixels")] != -1);
		return call<R>("setPixels", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSample(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSample")] != -1);
		return call<R>("setSample", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSamples(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSamples")] != -1);
		return call<R>("setSamples", std::forward<Args>(args)...);
	}

};

#endif
