#ifndef java_awt_image_WritableRaster_HPP
#define java_awt_image_WritableRaster_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::image::WritableRaster : public jObject<::java::awt::image::WritableRaster, ::java::awt::image::Raster> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_image / "WritableRaster";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::awt::image::WritableRaster(::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint *)>("createWritableChild"), //
		jMethod<::java::awt::image::WritableRaster(::jint, ::jint)>("createWritableTranslatedChild"), //
		jMethod<::java::awt::image::WritableRaster()>("getWritableParent"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::java::lang::Object)>("setDataElements"), //
		jMethod<::jvoid(::jint, ::jint, ::java::awt::image::Raster)>("setDataElements"), //
		jMethod<::jvoid(::jint, ::jint, ::java::lang::Object)>("setDataElements"), //
		jMethod<::jvoid(::jint, ::jint, ::jdouble *)>("setPixel"), //
		jMethod<::jvoid(::jint, ::jint, ::jfloat *)>("setPixel"), //
		jMethod<::jvoid(::jint, ::jint, ::jint *)>("setPixel"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jdouble *)>("setPixels"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jfloat *)>("setPixels"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint *)>("setPixels"), //
		jMethod<::jvoid(::jint, ::jint, ::java::awt::image::Raster)>("setRect"), //
		jMethod<::jvoid(::java::awt::image::Raster)>("setRect"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jdouble)>("setSample"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jfloat)>("setSample"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("setSample"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jdouble *)>("setSamples"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jfloat *)>("setSamples"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jint *)>("setSamples"), //
	};

	template<typename R = ::java::awt::image::WritableRaster, typename... Args>
	auto createWritableChild(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createWritableChild")] != -1);
		return call<R>("createWritableChild", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::WritableRaster, typename... Args>
	auto createWritableTranslatedChild(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createWritableTranslatedChild")] != -1);
		return call<R>("createWritableTranslatedChild", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::WritableRaster, typename... Args>
	auto getWritableParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWritableParent")] != -1);
		return call<R>("getWritableParent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDataElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDataElements")] != -1);
		return call<R>("setDataElements", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPixel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPixel")] != -1);
		return call<R>("setPixel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPixels(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPixels")] != -1);
		return call<R>("setPixels", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRect")] != -1);
		return call<R>("setRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSample(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSample")] != -1);
		return call<R>("setSample", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSamples(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSamples")] != -1);
		return call<R>("setSamples", std::forward<Args>(args)...);
	}

};

#endif
