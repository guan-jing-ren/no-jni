#ifndef java_awt_image_renderable_RenderContext_HPP
#define java_awt_image_renderable_RenderContext_HPP

#include "../../../../jfwd_decl.hpp"

class ::java::awt::image::renderable::RenderContext : public jObject<::java::awt::image::renderable::RenderContext, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_image_renderable / "RenderContext";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::geom::AffineTransform)>(), //
		jConstructor<::jvoid(::java::awt::geom::AffineTransform, ::java::awt::RenderingHints)>(), //
		jConstructor<::jvoid(::java::awt::geom::AffineTransform, ::java::awt::Shape)>(), //
		jConstructor<::jvoid(::java::awt::geom::AffineTransform, ::java::awt::Shape, ::java::awt::RenderingHints)>(), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jvoid(::java::awt::geom::AffineTransform)>("concatenateTransform"), //
		jMethod<::jvoid(::java::awt::geom::AffineTransform)>("concetenateTransform"), //
		jMethod<::java::awt::Shape()>("getAreaOfInterest"), //
		jMethod<::java::awt::RenderingHints()>("getRenderingHints"), //
		jMethod<::java::awt::geom::AffineTransform()>("getTransform"), //
		jMethod<::jvoid(::java::awt::geom::AffineTransform)>("preConcatenateTransform"), //
		jMethod<::jvoid(::java::awt::geom::AffineTransform)>("preConcetenateTransform"), //
		jMethod<::jvoid(::java::awt::Shape)>("setAreaOfInterest"), //
		jMethod<::jvoid(::java::awt::RenderingHints)>("setRenderingHints"), //
		jMethod<::jvoid(::java::awt::geom::AffineTransform)>("setTransform"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto concatenateTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("concatenateTransform")] != -1);
		return call<R>("concatenateTransform", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto concetenateTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("concetenateTransform")] != -1);
		return call<R>("concetenateTransform", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Shape, typename... Args>
	auto getAreaOfInterest(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAreaOfInterest")] != -1);
		return call<R>("getAreaOfInterest", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::RenderingHints, typename... Args>
	auto getRenderingHints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRenderingHints")] != -1);
		return call<R>("getRenderingHints", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::AffineTransform, typename... Args>
	auto getTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransform")] != -1);
		return call<R>("getTransform", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto preConcatenateTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("preConcatenateTransform")] != -1);
		return call<R>("preConcatenateTransform", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto preConcetenateTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("preConcetenateTransform")] != -1);
		return call<R>("preConcetenateTransform", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAreaOfInterest(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAreaOfInterest")] != -1);
		return call<R>("setAreaOfInterest", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRenderingHints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRenderingHints")] != -1);
		return call<R>("setRenderingHints", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTransform")] != -1);
		return call<R>("setTransform", std::forward<Args>(args)...);
	}

};

#endif
