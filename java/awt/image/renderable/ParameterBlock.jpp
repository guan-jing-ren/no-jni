#ifndef java_awt_image_renderable_ParameterBlock_HPP
#define java_awt_image_renderable_ParameterBlock_HPP

#include "../../../../jfwd_decl.hpp"

class ::java::awt::image::renderable::ParameterBlock : public jObject<::java::awt::image::renderable::ParameterBlock, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_image_renderable / "ParameterBlock";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::util::Vector)>(), //
		jConstructor<::jvoid(::java::util::Vector, ::java::util::Vector)>(), //
		jMethod<::java::awt::image::renderable::ParameterBlock(::jbyte)>("add"), //
		jMethod<::java::awt::image::renderable::ParameterBlock(::jchar)>("add"), //
		jMethod<::java::awt::image::renderable::ParameterBlock(::jdouble)>("add"), //
		jMethod<::java::awt::image::renderable::ParameterBlock(::jfloat)>("add"), //
		jMethod<::java::awt::image::renderable::ParameterBlock(::jint)>("add"), //
		jMethod<::java::awt::image::renderable::ParameterBlock(::jlong)>("add"), //
		jMethod<::java::awt::image::renderable::ParameterBlock(::java::lang::Object)>("add"), //
		jMethod<::java::awt::image::renderable::ParameterBlock(::jshort)>("add"), //
		jMethod<::java::awt::image::renderable::ParameterBlock(::java::lang::Object)>("addSource"), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jbyte(::jint)>("getByteParameter"), //
		jMethod<::jchar(::jint)>("getCharParameter"), //
		jMethod<::jdouble(::jint)>("getDoubleParameter"), //
		jMethod<::jfloat(::jint)>("getFloatParameter"), //
		jMethod<::jint(::jint)>("getIntParameter"), //
		jMethod<::jlong(::jint)>("getLongParameter"), //
		jMethod<::jint()>("getNumParameters"), //
		jMethod<::jint()>("getNumSources"), //
		jMethod<::java::lang::Object(::jint)>("getObjectParameter"), //
		jMethod<::java::lang::Class *()>("getParamClasses"), //
		jMethod<::java::util::Vector()>("getParameters"), //
		jMethod<::java::awt::image::renderable::RenderableImage(::jint)>("getRenderableSource"), //
		jMethod<::java::awt::image::RenderedImage(::jint)>("getRenderedSource"), //
		jMethod<::jshort(::jint)>("getShortParameter"), //
		jMethod<::java::lang::Object(::jint)>("getSource"), //
		jMethod<::java::util::Vector()>("getSources"), //
		jMethod<::jvoid()>("removeParameters"), //
		jMethod<::jvoid()>("removeSources"), //
		jMethod<::java::awt::image::renderable::ParameterBlock(::jbyte, ::jint)>("set"), //
		jMethod<::java::awt::image::renderable::ParameterBlock(::jchar, ::jint)>("set"), //
		jMethod<::java::awt::image::renderable::ParameterBlock(::jdouble, ::jint)>("set"), //
		jMethod<::java::awt::image::renderable::ParameterBlock(::jfloat, ::jint)>("set"), //
		jMethod<::java::awt::image::renderable::ParameterBlock(::jint, ::jint)>("set"), //
		jMethod<::java::awt::image::renderable::ParameterBlock(::jlong, ::jint)>("set"), //
		jMethod<::java::awt::image::renderable::ParameterBlock(::java::lang::Object, ::jint)>("set"), //
		jMethod<::java::awt::image::renderable::ParameterBlock(::jshort, ::jint)>("set"), //
		jMethod<::jvoid(::java::util::Vector)>("setParameters"), //
		jMethod<::java::awt::image::renderable::ParameterBlock(::java::lang::Object, ::jint)>("setSource"), //
		jMethod<::jvoid(::java::util::Vector)>("setSources"), //
		jMethod<::java::lang::Object()>("shallowClone"), //
	};

	template<typename R = ::java::awt::image::renderable::ParameterBlock, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::renderable::ParameterBlock, typename... Args>
	auto addSource(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addSource")] != -1);
		return call<R>("addSource", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto getByteParameter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getByteParameter")] != -1);
		return call<R>("getByteParameter", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto getCharParameter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCharParameter")] != -1);
		return call<R>("getCharParameter", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getDoubleParameter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDoubleParameter")] != -1);
		return call<R>("getDoubleParameter", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getFloatParameter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFloatParameter")] != -1);
		return call<R>("getFloatParameter", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getIntParameter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIntParameter")] != -1);
		return call<R>("getIntParameter", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLongParameter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLongParameter")] != -1);
		return call<R>("getLongParameter", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumParameters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNumParameters")] != -1);
		return call<R>("getNumParameters", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumSources(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNumSources")] != -1);
		return call<R>("getNumSources", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getObjectParameter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectParameter")] != -1);
		return call<R>("getObjectParameter", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class *, typename... Args>
	auto getParamClasses(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParamClasses")] != -1);
		return call<R>("getParamClasses", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Vector, typename... Args>
	auto getParameters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParameters")] != -1);
		return call<R>("getParameters", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::renderable::RenderableImage, typename... Args>
	auto getRenderableSource(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRenderableSource")] != -1);
		return call<R>("getRenderableSource", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::RenderedImage, typename... Args>
	auto getRenderedSource(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRenderedSource")] != -1);
		return call<R>("getRenderedSource", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto getShortParameter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getShortParameter")] != -1);
		return call<R>("getShortParameter", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getSource(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSource")] != -1);
		return call<R>("getSource", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Vector, typename... Args>
	auto getSources(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSources")] != -1);
		return call<R>("getSources", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeParameters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeParameters")] != -1);
		return call<R>("removeParameters", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeSources(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeSources")] != -1);
		return call<R>("removeSources", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::renderable::ParameterBlock, typename... Args>
	auto set(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set")] != -1);
		return call<R>("set", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setParameters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setParameters")] != -1);
		return call<R>("setParameters", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::renderable::ParameterBlock, typename... Args>
	auto setSource(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSource")] != -1);
		return call<R>("setSource", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSources(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSources")] != -1);
		return call<R>("setSources", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto shallowClone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shallowClone")] != -1);
		return call<R>("shallowClone", std::forward<Args>(args)...);
	}

};

#endif
