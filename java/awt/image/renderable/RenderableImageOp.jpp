#ifndef java_awt_image_renderable_RenderableImageOp_HPP
#define java_awt_image_renderable_RenderableImageOp_HPP

#include "../../../../jfwd_decl.hpp"

class ::java::awt::image::renderable::RenderableImageOp : public jObject<::java::awt::image::renderable::RenderableImageOp, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_image_renderable / "RenderableImageOp";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("HINTS_OBSERVED"), //
	};

	template<typename F = ::java::lang::String>
	static auto HINTS_OBSERVED() {
		static_assert(field_signatures[jField<F>("HINTS_OBSERVED")] != -1);
		return sat<F>("HINTS_OBSERVED");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::image::renderable::ContextualRenderedImageFactory, ::java::awt::image::renderable::ParameterBlock)>(), //
		jMethod<::java::awt::image::RenderedImage()>("createDefaultRendering"), //
		jMethod<::java::awt::image::RenderedImage(::java::awt::image::renderable::RenderContext)>("createRendering"), //
		jMethod<::java::awt::image::RenderedImage(::jint, ::jint, ::java::awt::RenderingHints)>("createScaledRendering"), //
		jMethod<::jfloat()>("getHeight"), //
		jMethod<::jfloat()>("getMinX"), //
		jMethod<::jfloat()>("getMinY"), //
		jMethod<::java::awt::image::renderable::ParameterBlock()>("getParameterBlock"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getProperty"), //
		jMethod<::java::lang::String *()>("getPropertyNames"), //
		jMethod<::java::util::Vector()>("getSources"), //
		jMethod<::jfloat()>("getWidth"), //
		jMethod<::jboolean()>("isDynamic"), //
		jMethod<::java::awt::image::renderable::ParameterBlock(::java::awt::image::renderable::ParameterBlock)>("setParameterBlock"), //
	};

	template<typename R = ::java::awt::image::RenderedImage, typename... Args>
	auto createDefaultRendering(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createDefaultRendering")] != -1);
		return call<R>("createDefaultRendering", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::RenderedImage, typename... Args>
	auto createRendering(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createRendering")] != -1);
		return call<R>("createRendering", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::RenderedImage, typename... Args>
	auto createScaledRendering(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createScaledRendering")] != -1);
		return call<R>("createScaledRendering", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeight")] != -1);
		return call<R>("getHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getMinX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinX")] != -1);
		return call<R>("getMinX", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getMinY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinY")] != -1);
		return call<R>("getMinY", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::renderable::ParameterBlock, typename... Args>
	auto getParameterBlock(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParameterBlock")] != -1);
		return call<R>("getParameterBlock", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProperty")] != -1);
		return call<R>("getProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getPropertyNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPropertyNames")] != -1);
		return call<R>("getPropertyNames", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Vector, typename... Args>
	auto getSources(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSources")] != -1);
		return call<R>("getSources", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDynamic(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDynamic")] != -1);
		return call<R>("isDynamic", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::renderable::ParameterBlock, typename... Args>
	auto setParameterBlock(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setParameterBlock")] != -1);
		return call<R>("setParameterBlock", std::forward<Args>(args)...);
	}

};

#endif
