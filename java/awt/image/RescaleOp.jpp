#ifndef java_awt_image_RescaleOp_HPP
#define java_awt_image_RescaleOp_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::image::RescaleOp : public jObject<::java::awt::image::RescaleOp, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_image / "RescaleOp";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jfloat, ::jfloat, ::java::awt::RenderingHints)>(), //
		jConstructor<::jvoid(::jfloat *, ::jfloat *, ::java::awt::RenderingHints)>(), //
		jMethod<::java::awt::image::BufferedImage(::java::awt::image::BufferedImage, ::java::awt::image::ColorModel)>("createCompatibleDestImage"), //
		jMethod<::java::awt::image::WritableRaster(::java::awt::image::Raster)>("createCompatibleDestRaster"), //
		jMethod<::java::awt::image::BufferedImage(::java::awt::image::BufferedImage, ::java::awt::image::BufferedImage)>("filter"), //
		jMethod<::java::awt::image::WritableRaster(::java::awt::image::Raster, ::java::awt::image::WritableRaster)>("filter"), //
		jMethod<::java::awt::geom::Rectangle2D(::java::awt::image::BufferedImage)>("getBounds2D"), //
		jMethod<::java::awt::geom::Rectangle2D(::java::awt::image::Raster)>("getBounds2D"), //
		jMethod<::jint()>("getNumFactors"), //
		jMethod<::jfloat *(::jfloat *)>("getOffsets"), //
		jMethod<::java::awt::geom::Point2D(::java::awt::geom::Point2D, ::java::awt::geom::Point2D)>("getPoint2D"), //
		jMethod<::java::awt::RenderingHints()>("getRenderingHints"), //
		jMethod<::jfloat *(::jfloat *)>("getScaleFactors"), //
	};

	template<typename R = ::java::awt::image::BufferedImage, typename... Args>
	auto createCompatibleDestImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createCompatibleDestImage")] != -1);
		return call<R>("createCompatibleDestImage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::WritableRaster, typename... Args>
	auto createCompatibleDestRaster(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createCompatibleDestRaster")] != -1);
		return call<R>("createCompatibleDestRaster", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::BufferedImage, typename... Args>
	auto filter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("filter")] != -1);
		return call<R>("filter", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Rectangle2D, typename... Args>
	auto getBounds2D(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds2D")] != -1);
		return call<R>("getBounds2D", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumFactors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNumFactors")] != -1);
		return call<R>("getNumFactors", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat *, typename... Args>
	auto getOffsets(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOffsets")] != -1);
		return call<R>("getOffsets", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Point2D, typename... Args>
	auto getPoint2D(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPoint2D")] != -1);
		return call<R>("getPoint2D", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::RenderingHints, typename... Args>
	auto getRenderingHints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRenderingHints")] != -1);
		return call<R>("getRenderingHints", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat *, typename... Args>
	auto getScaleFactors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScaleFactors")] != -1);
		return call<R>("getScaleFactors", std::forward<Args>(args)...);
	}

};

#endif
