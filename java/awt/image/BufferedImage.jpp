#ifndef java_awt_image_BufferedImage_HPP
#define java_awt_image_BufferedImage_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::image::BufferedImage : public jObject<::java::awt::image::BufferedImage, ::java::awt::Image> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_image / "BufferedImage";

	constexpr static Enume field_signatures{
		jField<::jint>("BITMASK"), //
		jField<::jint>("OPAQUE"), //
		jField<::jint>("TRANSLUCENT"), //
		jField<::jint>("TYPE_3BYTE_BGR"), //
		jField<::jint>("TYPE_4BYTE_ABGR"), //
		jField<::jint>("TYPE_4BYTE_ABGR_PRE"), //
		jField<::jint>("TYPE_BYTE_BINARY"), //
		jField<::jint>("TYPE_BYTE_GRAY"), //
		jField<::jint>("TYPE_BYTE_INDEXED"), //
		jField<::jint>("TYPE_CUSTOM"), //
		jField<::jint>("TYPE_INT_ARGB"), //
		jField<::jint>("TYPE_INT_ARGB_PRE"), //
		jField<::jint>("TYPE_INT_BGR"), //
		jField<::jint>("TYPE_INT_RGB"), //
		jField<::jint>("TYPE_USHORT_555_RGB"), //
		jField<::jint>("TYPE_USHORT_565_RGB"), //
		jField<::jint>("TYPE_USHORT_GRAY"), //
	};

	template<typename F = ::jint>
	static auto BITMASK() {
		static_assert(field_signatures[jField<F>("BITMASK")] != -1);
		return sat<F>("BITMASK");
	}

	template<typename F = ::jint>
	static auto OPAQUE() {
		static_assert(field_signatures[jField<F>("OPAQUE")] != -1);
		return sat<F>("OPAQUE");
	}

	template<typename F = ::jint>
	static auto TRANSLUCENT() {
		static_assert(field_signatures[jField<F>("TRANSLUCENT")] != -1);
		return sat<F>("TRANSLUCENT");
	}

	template<typename F = ::jint>
	static auto TYPE_3BYTE_BGR() {
		static_assert(field_signatures[jField<F>("TYPE_3BYTE_BGR")] != -1);
		return sat<F>("TYPE_3BYTE_BGR");
	}

	template<typename F = ::jint>
	static auto TYPE_4BYTE_ABGR() {
		static_assert(field_signatures[jField<F>("TYPE_4BYTE_ABGR")] != -1);
		return sat<F>("TYPE_4BYTE_ABGR");
	}

	template<typename F = ::jint>
	static auto TYPE_4BYTE_ABGR_PRE() {
		static_assert(field_signatures[jField<F>("TYPE_4BYTE_ABGR_PRE")] != -1);
		return sat<F>("TYPE_4BYTE_ABGR_PRE");
	}

	template<typename F = ::jint>
	static auto TYPE_BYTE_BINARY() {
		static_assert(field_signatures[jField<F>("TYPE_BYTE_BINARY")] != -1);
		return sat<F>("TYPE_BYTE_BINARY");
	}

	template<typename F = ::jint>
	static auto TYPE_BYTE_GRAY() {
		static_assert(field_signatures[jField<F>("TYPE_BYTE_GRAY")] != -1);
		return sat<F>("TYPE_BYTE_GRAY");
	}

	template<typename F = ::jint>
	static auto TYPE_BYTE_INDEXED() {
		static_assert(field_signatures[jField<F>("TYPE_BYTE_INDEXED")] != -1);
		return sat<F>("TYPE_BYTE_INDEXED");
	}

	template<typename F = ::jint>
	static auto TYPE_CUSTOM() {
		static_assert(field_signatures[jField<F>("TYPE_CUSTOM")] != -1);
		return sat<F>("TYPE_CUSTOM");
	}

	template<typename F = ::jint>
	static auto TYPE_INT_ARGB() {
		static_assert(field_signatures[jField<F>("TYPE_INT_ARGB")] != -1);
		return sat<F>("TYPE_INT_ARGB");
	}

	template<typename F = ::jint>
	static auto TYPE_INT_ARGB_PRE() {
		static_assert(field_signatures[jField<F>("TYPE_INT_ARGB_PRE")] != -1);
		return sat<F>("TYPE_INT_ARGB_PRE");
	}

	template<typename F = ::jint>
	static auto TYPE_INT_BGR() {
		static_assert(field_signatures[jField<F>("TYPE_INT_BGR")] != -1);
		return sat<F>("TYPE_INT_BGR");
	}

	template<typename F = ::jint>
	static auto TYPE_INT_RGB() {
		static_assert(field_signatures[jField<F>("TYPE_INT_RGB")] != -1);
		return sat<F>("TYPE_INT_RGB");
	}

	template<typename F = ::jint>
	static auto TYPE_USHORT_555_RGB() {
		static_assert(field_signatures[jField<F>("TYPE_USHORT_555_RGB")] != -1);
		return sat<F>("TYPE_USHORT_555_RGB");
	}

	template<typename F = ::jint>
	static auto TYPE_USHORT_565_RGB() {
		static_assert(field_signatures[jField<F>("TYPE_USHORT_565_RGB")] != -1);
		return sat<F>("TYPE_USHORT_565_RGB");
	}

	template<typename F = ::jint>
	static auto TYPE_USHORT_GRAY() {
		static_assert(field_signatures[jField<F>("TYPE_USHORT_GRAY")] != -1);
		return sat<F>("TYPE_USHORT_GRAY");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::jint, ::jint, ::jint, ::java::awt::image::IndexColorModel)>(), //
		jConstructor<::jvoid(::java::awt::image::ColorModel, ::java::awt::image::WritableRaster, ::jboolean, ::java::util::Hashtable)>(), //
		jMethod<::jvoid(::java::awt::image::TileObserver)>("addTileObserver"), //
		jMethod<::jvoid(::jboolean)>("coerceData"), //
		jMethod<::java::awt::image::WritableRaster(::java::awt::image::WritableRaster)>("copyData"), //
		jMethod<::java::awt::Graphics2D()>("createGraphics"), //
		jMethod<::java::awt::image::WritableRaster()>("getAlphaRaster"), //
		jMethod<::java::awt::image::ColorModel()>("getColorModel"), //
		jMethod<::java::awt::image::Raster()>("getData"), //
		jMethod<::java::awt::image::Raster(::java::awt::Rectangle)>("getData"), //
		jMethod<::java::awt::Graphics()>("getGraphics"), //
		jMethod<::jint()>("getHeight"), //
		jMethod<::jint(::java::awt::image::ImageObserver)>("getHeight"), //
		jMethod<::jint()>("getMinTileX"), //
		jMethod<::jint()>("getMinTileY"), //
		jMethod<::jint()>("getMinX"), //
		jMethod<::jint()>("getMinY"), //
		jMethod<::jint()>("getNumXTiles"), //
		jMethod<::jint()>("getNumYTiles"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getProperty"), //
		jMethod<::java::lang::Object(::java::lang::String, ::java::awt::image::ImageObserver)>("getProperty"), //
		jMethod<::java::lang::String *()>("getPropertyNames"), //
		jMethod<::jint(::jint, ::jint)>("getRGB"), //
		jMethod<::jint *(::jint, ::jint, ::jint, ::jint, ::jint *, ::jint, ::jint)>("getRGB"), //
		jMethod<::java::awt::image::WritableRaster()>("getRaster"), //
		jMethod<::java::awt::image::SampleModel()>("getSampleModel"), //
		jMethod<::java::awt::image::ImageProducer()>("getSource"), //
		jMethod<::java::util::Vector()>("getSources"), //
		jMethod<::java::awt::image::BufferedImage(::jint, ::jint, ::jint, ::jint)>("getSubimage"), //
		jMethod<::java::awt::image::Raster(::jint, ::jint)>("getTile"), //
		jMethod<::jint()>("getTileGridXOffset"), //
		jMethod<::jint()>("getTileGridYOffset"), //
		jMethod<::jint()>("getTileHeight"), //
		jMethod<::jint()>("getTileWidth"), //
		jMethod<::jint()>("getTransparency"), //
		jMethod<::jint()>("getType"), //
		jMethod<::jint()>("getWidth"), //
		jMethod<::jint(::java::awt::image::ImageObserver)>("getWidth"), //
		jMethod<::java::awt::image::WritableRaster(::jint, ::jint)>("getWritableTile"), //
		jMethod<::java::awt::Point *()>("getWritableTileIndices"), //
		jMethod<::jboolean()>("hasTileWriters"), //
		jMethod<::jboolean()>("isAlphaPremultiplied"), //
		jMethod<::jboolean(::jint, ::jint)>("isTileWritable"), //
		jMethod<::jvoid(::jint, ::jint)>("releaseWritableTile"), //
		jMethod<::jvoid(::java::awt::image::TileObserver)>("removeTileObserver"), //
		jMethod<::jvoid(::java::awt::image::Raster)>("setData"), //
		jMethod<::jvoid(::jint, ::jint, ::jint)>("setRGB"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint *, ::jint, ::jint)>("setRGB"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addTileObserver(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addTileObserver")] != -1);
		return call<R>("addTileObserver", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto coerceData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("coerceData")] != -1);
		return call<R>("coerceData", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::WritableRaster, typename... Args>
	auto copyData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("copyData")] != -1);
		return call<R>("copyData", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Graphics2D, typename... Args>
	auto createGraphics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createGraphics")] != -1);
		return call<R>("createGraphics", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::WritableRaster, typename... Args>
	auto getAlphaRaster(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlphaRaster")] != -1);
		return call<R>("getAlphaRaster", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::ColorModel, typename... Args>
	auto getColorModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColorModel")] != -1);
		return call<R>("getColorModel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::Raster, typename... Args>
	auto getData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getData")] != -1);
		return call<R>("getData", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Graphics, typename... Args>
	auto getGraphics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGraphics")] != -1);
		return call<R>("getGraphics", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeight")] != -1);
		return call<R>("getHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinTileX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinTileX")] != -1);
		return call<R>("getMinTileX", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinTileY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinTileY")] != -1);
		return call<R>("getMinTileY", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinX")] != -1);
		return call<R>("getMinX", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinY")] != -1);
		return call<R>("getMinY", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumXTiles(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNumXTiles")] != -1);
		return call<R>("getNumXTiles", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumYTiles(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNumYTiles")] != -1);
		return call<R>("getNumYTiles", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProperty")] != -1);
		return call<R>("getProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getPropertyNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPropertyNames")] != -1);
		return call<R>("getPropertyNames", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRGB(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRGB")] != -1);
		return call<R>("getRGB", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::WritableRaster, typename... Args>
	auto getRaster(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRaster")] != -1);
		return call<R>("getRaster", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::SampleModel, typename... Args>
	auto getSampleModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSampleModel")] != -1);
		return call<R>("getSampleModel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::ImageProducer, typename... Args>
	auto getSource(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSource")] != -1);
		return call<R>("getSource", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Vector, typename... Args>
	auto getSources(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSources")] != -1);
		return call<R>("getSources", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::BufferedImage, typename... Args>
	auto getSubimage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSubimage")] != -1);
		return call<R>("getSubimage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::Raster, typename... Args>
	auto getTile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTile")] != -1);
		return call<R>("getTile", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTileGridXOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTileGridXOffset")] != -1);
		return call<R>("getTileGridXOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTileGridYOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTileGridYOffset")] != -1);
		return call<R>("getTileGridYOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTileHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTileHeight")] != -1);
		return call<R>("getTileHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTileWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTileWidth")] != -1);
		return call<R>("getTileWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTransparency(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransparency")] != -1);
		return call<R>("getTransparency", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::WritableRaster, typename... Args>
	auto getWritableTile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWritableTile")] != -1);
		return call<R>("getWritableTile", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Point *, typename... Args>
	auto getWritableTileIndices(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWritableTileIndices")] != -1);
		return call<R>("getWritableTileIndices", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasTileWriters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasTileWriters")] != -1);
		return call<R>("hasTileWriters", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAlphaPremultiplied(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAlphaPremultiplied")] != -1);
		return call<R>("isAlphaPremultiplied", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isTileWritable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isTileWritable")] != -1);
		return call<R>("isTileWritable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto releaseWritableTile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("releaseWritableTile")] != -1);
		return call<R>("releaseWritableTile", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeTileObserver(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeTileObserver")] != -1);
		return call<R>("removeTileObserver", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setData")] != -1);
		return call<R>("setData", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRGB(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRGB")] != -1);
		return call<R>("setRGB", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
