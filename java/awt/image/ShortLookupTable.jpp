#ifndef java_awt_image_ShortLookupTable_HPP
#define java_awt_image_ShortLookupTable_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::image::ShortLookupTable : public jObject<::java::awt::image::ShortLookupTable, ::java::awt::image::LookupTable> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_image / "ShortLookupTable";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint, ::jshort *)>(), //
		jConstructor<::jvoid(::jint, ::jshort **)>(), //
		jMethod<::jshort **()>("getTable"), //
		jMethod<::jint *(::jint *, ::jint *)>("lookupPixel"), //
		jMethod<::jshort *(::jshort *, ::jshort *)>("lookupPixel"), //
	};

	template<typename R = ::jshort **, typename... Args>
	auto getTable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTable")] != -1);
		return call<R>("getTable", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto lookupPixel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lookupPixel")] != -1);
		return call<R>("lookupPixel", std::forward<Args>(args)...);
	}

};

#endif
