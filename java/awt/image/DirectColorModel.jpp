#ifndef java_awt_image_DirectColorModel_HPP
#define java_awt_image_DirectColorModel_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::image::DirectColorModel : public jObject<::java::awt::image::DirectColorModel, ::java::awt::image::PackedColorModel> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_image / "DirectColorModel";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint, ::jint, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::java::awt::color::ColorSpace, ::jint, ::jint, ::jint, ::jint, ::jint, ::jboolean, ::jint)>(), //
		jMethod<::java::awt::image::ColorModel(::java::awt::image::WritableRaster, ::jboolean)>("coerceData"), //
		jMethod<::java::awt::image::WritableRaster(::jint, ::jint)>("createCompatibleWritableRaster"), //
		jMethod<::jint(::jint)>("getAlpha"), //
		jMethod<::jint(::java::lang::Object)>("getAlpha"), //
		jMethod<::jint()>("getAlphaMask"), //
		jMethod<::jint(::jint)>("getBlue"), //
		jMethod<::jint(::java::lang::Object)>("getBlue"), //
		jMethod<::jint()>("getBlueMask"), //
		jMethod<::jint *(::jint, ::jint *, ::jint)>("getComponents"), //
		jMethod<::jint *(::java::lang::Object, ::jint *, ::jint)>("getComponents"), //
		jMethod<::jint(::jint *, ::jint)>("getDataElement"), //
		jMethod<::java::lang::Object(::jint, ::java::lang::Object)>("getDataElements"), //
		jMethod<::java::lang::Object(::jint *, ::jint, ::java::lang::Object)>("getDataElements"), //
		jMethod<::jint(::jint)>("getGreen"), //
		jMethod<::jint(::java::lang::Object)>("getGreen"), //
		jMethod<::jint()>("getGreenMask"), //
		jMethod<::jint(::jint)>("getRGB"), //
		jMethod<::jint(::java::lang::Object)>("getRGB"), //
		jMethod<::jint(::jint)>("getRed"), //
		jMethod<::jint(::java::lang::Object)>("getRed"), //
		jMethod<::jint()>("getRedMask"), //
		jMethod<::jboolean(::java::awt::image::Raster)>("isCompatibleRaster"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::awt::image::ColorModel, typename... Args>
	auto coerceData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("coerceData")] != -1);
		return call<R>("coerceData", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::WritableRaster, typename... Args>
	auto createCompatibleWritableRaster(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createCompatibleWritableRaster")] != -1);
		return call<R>("createCompatibleWritableRaster", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAlpha(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAlpha")] != -1);
		return call<R>("getAlpha", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAlphaMask(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAlphaMask")] != -1);
		return call<R>("getAlphaMask", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBlue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBlue")] != -1);
		return call<R>("getBlue", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBlueMask(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBlueMask")] != -1);
		return call<R>("getBlueMask", forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getComponents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getComponents")] != -1);
		return call<R>("getComponents", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDataElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDataElement")] != -1);
		return call<R>("getDataElement", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getDataElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDataElements")] != -1);
		return call<R>("getDataElements", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getGreen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getGreen")] != -1);
		return call<R>("getGreen", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getGreenMask(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getGreenMask")] != -1);
		return call<R>("getGreenMask", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRGB(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRGB")] != -1);
		return call<R>("getRGB", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRed")] != -1);
		return call<R>("getRed", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRedMask(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRedMask")] != -1);
		return call<R>("getRedMask", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCompatibleRaster(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isCompatibleRaster")] != -1);
		return call<R>("isCompatibleRaster", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
