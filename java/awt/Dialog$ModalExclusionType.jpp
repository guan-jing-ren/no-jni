#ifndef java_awt_Dialog$ModalExclusionType_HPP
#define java_awt_Dialog$ModalExclusionType_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::Dialog$ModalExclusionType : public jObject<::java::awt::Dialog$ModalExclusionType, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "Dialog$ModalExclusionType";

	constexpr static Enume field_signatures{
		jField<::java::awt::Dialog$ModalExclusionType>("APPLICATION_EXCLUDE"), //
		jField<::java::awt::Dialog$ModalExclusionType>("NO_EXCLUDE"), //
		jField<::java::awt::Dialog$ModalExclusionType>("TOOLKIT_EXCLUDE"), //
	};

	template<typename F = ::java::awt::Dialog$ModalExclusionType>
	static auto APPLICATION_EXCLUDE() {
		static_assert(field_signatures[jField<F>("APPLICATION_EXCLUDE")] != -1);
		return sat<F>("APPLICATION_EXCLUDE");
	}

	template<typename F = ::java::awt::Dialog$ModalExclusionType>
	static auto NO_EXCLUDE() {
		static_assert(field_signatures[jField<F>("NO_EXCLUDE")] != -1);
		return sat<F>("NO_EXCLUDE");
	}

	template<typename F = ::java::awt::Dialog$ModalExclusionType>
	static auto TOOLKIT_EXCLUDE() {
		static_assert(field_signatures[jField<F>("TOOLKIT_EXCLUDE")] != -1);
		return sat<F>("TOOLKIT_EXCLUDE");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::awt::Dialog$ModalExclusionType(::java::lang::String)>("valueOf"), //
		jMethod<::java::awt::Dialog$ModalExclusionType *()>("values"), //
	};

	template<typename R = ::java::awt::Dialog$ModalExclusionType, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dialog$ModalExclusionType *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
