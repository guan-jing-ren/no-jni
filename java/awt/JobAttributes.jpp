#ifndef java_awt_JobAttributes_HPP
#define java_awt_JobAttributes_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::JobAttributes : public jObject<::java::awt::JobAttributes, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "JobAttributes";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint, ::java::awt::JobAttributes$DefaultSelectionType, ::java::awt::JobAttributes$DestinationType, ::java::awt::JobAttributes$DialogType, ::java::lang::String, ::jint, ::jint, ::java::awt::JobAttributes$MultipleDocumentHandlingType, ::jint **, ::java::lang::String, ::java::awt::JobAttributes$SidesType)>(), //
		jConstructor<::jvoid(::java::awt::JobAttributes)>(), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint()>("getCopies"), //
		jMethod<::java::awt::JobAttributes$DefaultSelectionType()>("getDefaultSelection"), //
		jMethod<::java::awt::JobAttributes$DestinationType()>("getDestination"), //
		jMethod<::java::awt::JobAttributes$DialogType()>("getDialog"), //
		jMethod<::java::lang::String()>("getFileName"), //
		jMethod<::jint()>("getFromPage"), //
		jMethod<::jint()>("getMaxPage"), //
		jMethod<::jint()>("getMinPage"), //
		jMethod<::java::awt::JobAttributes$MultipleDocumentHandlingType()>("getMultipleDocumentHandling"), //
		jMethod<::jint **()>("getPageRanges"), //
		jMethod<::java::lang::String()>("getPrinter"), //
		jMethod<::java::awt::JobAttributes$SidesType()>("getSides"), //
		jMethod<::jint()>("getToPage"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jvoid(::java::awt::JobAttributes)>("set"), //
		jMethod<::jvoid(::jint)>("setCopies"), //
		jMethod<::jvoid()>("setCopiesToDefault"), //
		jMethod<::jvoid(::java::awt::JobAttributes$DefaultSelectionType)>("setDefaultSelection"), //
		jMethod<::jvoid(::java::awt::JobAttributes$DestinationType)>("setDestination"), //
		jMethod<::jvoid(::java::awt::JobAttributes$DialogType)>("setDialog"), //
		jMethod<::jvoid(::java::lang::String)>("setFileName"), //
		jMethod<::jvoid(::jint)>("setFromPage"), //
		jMethod<::jvoid(::jint)>("setMaxPage"), //
		jMethod<::jvoid(::jint)>("setMinPage"), //
		jMethod<::jvoid(::java::awt::JobAttributes$MultipleDocumentHandlingType)>("setMultipleDocumentHandling"), //
		jMethod<::jvoid()>("setMultipleDocumentHandlingToDefault"), //
		jMethod<::jvoid(::jint **)>("setPageRanges"), //
		jMethod<::jvoid(::java::lang::String)>("setPrinter"), //
		jMethod<::jvoid(::java::awt::JobAttributes$SidesType)>("setSides"), //
		jMethod<::jvoid()>("setSidesToDefault"), //
		jMethod<::jvoid(::jint)>("setToPage"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCopies(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCopies")] != -1);
		return call<R>("getCopies", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::JobAttributes$DefaultSelectionType, typename... Args>
	auto getDefaultSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultSelection")] != -1);
		return call<R>("getDefaultSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::JobAttributes$DestinationType, typename... Args>
	auto getDestination(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDestination")] != -1);
		return call<R>("getDestination", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::JobAttributes$DialogType, typename... Args>
	auto getDialog(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDialog")] != -1);
		return call<R>("getDialog", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFileName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFileName")] != -1);
		return call<R>("getFileName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getFromPage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFromPage")] != -1);
		return call<R>("getFromPage", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxPage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaxPage")] != -1);
		return call<R>("getMaxPage", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinPage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinPage")] != -1);
		return call<R>("getMinPage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::JobAttributes$MultipleDocumentHandlingType, typename... Args>
	auto getMultipleDocumentHandling(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMultipleDocumentHandling")] != -1);
		return call<R>("getMultipleDocumentHandling", std::forward<Args>(args)...);
	}

	template<typename R = ::jint **, typename... Args>
	auto getPageRanges(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPageRanges")] != -1);
		return call<R>("getPageRanges", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPrinter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrinter")] != -1);
		return call<R>("getPrinter", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::JobAttributes$SidesType, typename... Args>
	auto getSides(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSides")] != -1);
		return call<R>("getSides", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getToPage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getToPage")] != -1);
		return call<R>("getToPage", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set")] != -1);
		return call<R>("set", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCopies(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCopies")] != -1);
		return call<R>("setCopies", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCopiesToDefault(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCopiesToDefault")] != -1);
		return call<R>("setCopiesToDefault", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDefaultSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDefaultSelection")] != -1);
		return call<R>("setDefaultSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDestination(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDestination")] != -1);
		return call<R>("setDestination", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDialog(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDialog")] != -1);
		return call<R>("setDialog", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFileName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFileName")] != -1);
		return call<R>("setFileName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFromPage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFromPage")] != -1);
		return call<R>("setFromPage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaxPage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMaxPage")] != -1);
		return call<R>("setMaxPage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMinPage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMinPage")] != -1);
		return call<R>("setMinPage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMultipleDocumentHandling(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMultipleDocumentHandling")] != -1);
		return call<R>("setMultipleDocumentHandling", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMultipleDocumentHandlingToDefault(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMultipleDocumentHandlingToDefault")] != -1);
		return call<R>("setMultipleDocumentHandlingToDefault", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPageRanges(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPageRanges")] != -1);
		return call<R>("setPageRanges", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPrinter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPrinter")] != -1);
		return call<R>("setPrinter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSides(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSides")] != -1);
		return call<R>("setSides", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSidesToDefault(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSidesToDefault")] != -1);
		return call<R>("setSidesToDefault", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setToPage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setToPage")] != -1);
		return call<R>("setToPage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
