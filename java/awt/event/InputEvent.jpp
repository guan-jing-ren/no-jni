#ifndef java_awt_event_InputEvent_HPP
#define java_awt_event_InputEvent_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::event::InputEvent : public jObject<::java::awt::event::InputEvent, ::java::awt::event::ComponentEvent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_event / "InputEvent";

	constexpr static Enume field_signatures{
		jField<::jint>("ALT_DOWN_MASK"), //
		jField<::jint>("ALT_GRAPH_DOWN_MASK"), //
		jField<::jint>("ALT_GRAPH_MASK"), //
		jField<::jint>("ALT_MASK"), //
		jField<::jint>("BUTTON1_DOWN_MASK"), //
		jField<::jint>("BUTTON1_MASK"), //
		jField<::jint>("BUTTON2_DOWN_MASK"), //
		jField<::jint>("BUTTON2_MASK"), //
		jField<::jint>("BUTTON3_DOWN_MASK"), //
		jField<::jint>("BUTTON3_MASK"), //
		jField<::jint>("CTRL_DOWN_MASK"), //
		jField<::jint>("CTRL_MASK"), //
		jField<::jint>("META_DOWN_MASK"), //
		jField<::jint>("META_MASK"), //
		jField<::jint>("SHIFT_DOWN_MASK"), //
		jField<::jint>("SHIFT_MASK"), //
	};

	template<typename F = ::jint>
	static auto ALT_DOWN_MASK() {
		static_assert(field_signatures[jField<F>("ALT_DOWN_MASK")] != -1);
		return sat<F>("ALT_DOWN_MASK");
	}

	template<typename F = ::jint>
	static auto ALT_GRAPH_DOWN_MASK() {
		static_assert(field_signatures[jField<F>("ALT_GRAPH_DOWN_MASK")] != -1);
		return sat<F>("ALT_GRAPH_DOWN_MASK");
	}

	template<typename F = ::jint>
	static auto ALT_GRAPH_MASK() {
		static_assert(field_signatures[jField<F>("ALT_GRAPH_MASK")] != -1);
		return sat<F>("ALT_GRAPH_MASK");
	}

	template<typename F = ::jint>
	static auto ALT_MASK() {
		static_assert(field_signatures[jField<F>("ALT_MASK")] != -1);
		return sat<F>("ALT_MASK");
	}

	template<typename F = ::jint>
	static auto BUTTON1_DOWN_MASK() {
		static_assert(field_signatures[jField<F>("BUTTON1_DOWN_MASK")] != -1);
		return sat<F>("BUTTON1_DOWN_MASK");
	}

	template<typename F = ::jint>
	static auto BUTTON1_MASK() {
		static_assert(field_signatures[jField<F>("BUTTON1_MASK")] != -1);
		return sat<F>("BUTTON1_MASK");
	}

	template<typename F = ::jint>
	static auto BUTTON2_DOWN_MASK() {
		static_assert(field_signatures[jField<F>("BUTTON2_DOWN_MASK")] != -1);
		return sat<F>("BUTTON2_DOWN_MASK");
	}

	template<typename F = ::jint>
	static auto BUTTON2_MASK() {
		static_assert(field_signatures[jField<F>("BUTTON2_MASK")] != -1);
		return sat<F>("BUTTON2_MASK");
	}

	template<typename F = ::jint>
	static auto BUTTON3_DOWN_MASK() {
		static_assert(field_signatures[jField<F>("BUTTON3_DOWN_MASK")] != -1);
		return sat<F>("BUTTON3_DOWN_MASK");
	}

	template<typename F = ::jint>
	static auto BUTTON3_MASK() {
		static_assert(field_signatures[jField<F>("BUTTON3_MASK")] != -1);
		return sat<F>("BUTTON3_MASK");
	}

	template<typename F = ::jint>
	static auto CTRL_DOWN_MASK() {
		static_assert(field_signatures[jField<F>("CTRL_DOWN_MASK")] != -1);
		return sat<F>("CTRL_DOWN_MASK");
	}

	template<typename F = ::jint>
	static auto CTRL_MASK() {
		static_assert(field_signatures[jField<F>("CTRL_MASK")] != -1);
		return sat<F>("CTRL_MASK");
	}

	template<typename F = ::jint>
	static auto META_DOWN_MASK() {
		static_assert(field_signatures[jField<F>("META_DOWN_MASK")] != -1);
		return sat<F>("META_DOWN_MASK");
	}

	template<typename F = ::jint>
	static auto META_MASK() {
		static_assert(field_signatures[jField<F>("META_MASK")] != -1);
		return sat<F>("META_MASK");
	}

	template<typename F = ::jint>
	static auto SHIFT_DOWN_MASK() {
		static_assert(field_signatures[jField<F>("SHIFT_DOWN_MASK")] != -1);
		return sat<F>("SHIFT_DOWN_MASK");
	}

	template<typename F = ::jint>
	static auto SHIFT_MASK() {
		static_assert(field_signatures[jField<F>("SHIFT_MASK")] != -1);
		return sat<F>("SHIFT_MASK");
	}

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("consume"), //
		jMethod<::jint(::jint)>("getMaskForButton"), //
		jMethod<::jint()>("getModifiers"), //
		jMethod<::jint()>("getModifiersEx"), //
		jMethod<::java::lang::String(::jint)>("getModifiersExText"), //
		jMethod<::jlong()>("getWhen"), //
		jMethod<::jboolean()>("isAltDown"), //
		jMethod<::jboolean()>("isAltGraphDown"), //
		jMethod<::jboolean()>("isConsumed"), //
		jMethod<::jboolean()>("isControlDown"), //
		jMethod<::jboolean()>("isMetaDown"), //
		jMethod<::jboolean()>("isShiftDown"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto consume(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("consume")] != -1);
		return call<R>("consume", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getMaskForButton(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaskForButton")] != -1);
		return scall<R>("getMaskForButton", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getModifiers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getModifiers")] != -1);
		return call<R>("getModifiers", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getModifiersEx(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getModifiersEx")] != -1);
		return call<R>("getModifiersEx", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getModifiersExText(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getModifiersExText")] != -1);
		return scall<R>("getModifiersExText", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getWhen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWhen")] != -1);
		return call<R>("getWhen", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAltDown(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAltDown")] != -1);
		return call<R>("isAltDown", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAltGraphDown(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAltGraphDown")] != -1);
		return call<R>("isAltGraphDown", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isConsumed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isConsumed")] != -1);
		return call<R>("isConsumed", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isControlDown(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isControlDown")] != -1);
		return call<R>("isControlDown", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isMetaDown(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isMetaDown")] != -1);
		return call<R>("isMetaDown", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isShiftDown(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isShiftDown")] != -1);
		return call<R>("isShiftDown", std::forward<Args>(args)...);
	}

};

#endif
