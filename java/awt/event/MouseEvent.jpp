#ifndef java_awt_event_MouseEvent_HPP
#define java_awt_event_MouseEvent_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::event::MouseEvent : public jObject<::java::awt::event::MouseEvent, ::java::awt::event::InputEvent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_event / "MouseEvent";

	constexpr static Enume field_signatures{
		jField<::jint>("BUTTON1"), //
		jField<::jint>("BUTTON2"), //
		jField<::jint>("BUTTON3"), //
		jField<::jint>("MOUSE_CLICKED"), //
		jField<::jint>("MOUSE_DRAGGED"), //
		jField<::jint>("MOUSE_ENTERED"), //
		jField<::jint>("MOUSE_EXITED"), //
		jField<::jint>("MOUSE_FIRST"), //
		jField<::jint>("MOUSE_LAST"), //
		jField<::jint>("MOUSE_MOVED"), //
		jField<::jint>("MOUSE_PRESSED"), //
		jField<::jint>("MOUSE_RELEASED"), //
		jField<::jint>("MOUSE_WHEEL"), //
		jField<::jint>("NOBUTTON"), //
	};

	template<typename F = ::jint>
	static auto BUTTON1() {
		static_assert(field_signatures[jField<F>("BUTTON1")] != -1);
		return sat<F>("BUTTON1");
	}

	template<typename F = ::jint>
	static auto BUTTON2() {
		static_assert(field_signatures[jField<F>("BUTTON2")] != -1);
		return sat<F>("BUTTON2");
	}

	template<typename F = ::jint>
	static auto BUTTON3() {
		static_assert(field_signatures[jField<F>("BUTTON3")] != -1);
		return sat<F>("BUTTON3");
	}

	template<typename F = ::jint>
	static auto MOUSE_CLICKED() {
		static_assert(field_signatures[jField<F>("MOUSE_CLICKED")] != -1);
		return sat<F>("MOUSE_CLICKED");
	}

	template<typename F = ::jint>
	static auto MOUSE_DRAGGED() {
		static_assert(field_signatures[jField<F>("MOUSE_DRAGGED")] != -1);
		return sat<F>("MOUSE_DRAGGED");
	}

	template<typename F = ::jint>
	static auto MOUSE_ENTERED() {
		static_assert(field_signatures[jField<F>("MOUSE_ENTERED")] != -1);
		return sat<F>("MOUSE_ENTERED");
	}

	template<typename F = ::jint>
	static auto MOUSE_EXITED() {
		static_assert(field_signatures[jField<F>("MOUSE_EXITED")] != -1);
		return sat<F>("MOUSE_EXITED");
	}

	template<typename F = ::jint>
	static auto MOUSE_FIRST() {
		static_assert(field_signatures[jField<F>("MOUSE_FIRST")] != -1);
		return sat<F>("MOUSE_FIRST");
	}

	template<typename F = ::jint>
	static auto MOUSE_LAST() {
		static_assert(field_signatures[jField<F>("MOUSE_LAST")] != -1);
		return sat<F>("MOUSE_LAST");
	}

	template<typename F = ::jint>
	static auto MOUSE_MOVED() {
		static_assert(field_signatures[jField<F>("MOUSE_MOVED")] != -1);
		return sat<F>("MOUSE_MOVED");
	}

	template<typename F = ::jint>
	static auto MOUSE_PRESSED() {
		static_assert(field_signatures[jField<F>("MOUSE_PRESSED")] != -1);
		return sat<F>("MOUSE_PRESSED");
	}

	template<typename F = ::jint>
	static auto MOUSE_RELEASED() {
		static_assert(field_signatures[jField<F>("MOUSE_RELEASED")] != -1);
		return sat<F>("MOUSE_RELEASED");
	}

	template<typename F = ::jint>
	static auto MOUSE_WHEEL() {
		static_assert(field_signatures[jField<F>("MOUSE_WHEEL")] != -1);
		return sat<F>("MOUSE_WHEEL");
	}

	template<typename F = ::jint>
	static auto NOBUTTON() {
		static_assert(field_signatures[jField<F>("NOBUTTON")] != -1);
		return sat<F>("NOBUTTON");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::Component, ::jint, ::jlong, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jboolean, ::jint)>(), //
		jConstructor<::jvoid(::java::awt::Component, ::jint, ::jlong, ::jint, ::jint, ::jint, ::jint, ::jboolean)>(), //
		jConstructor<::jvoid(::java::awt::Component, ::jint, ::jlong, ::jint, ::jint, ::jint, ::jint, ::jboolean, ::jint)>(), //
		jMethod<::jint()>("getButton"), //
		jMethod<::jint()>("getClickCount"), //
		jMethod<::java::awt::Point()>("getLocationOnScreen"), //
		jMethod<::jint()>("getModifiersEx"), //
		jMethod<::java::lang::String(::jint)>("getMouseModifiersText"), //
		jMethod<::java::awt::Point()>("getPoint"), //
		jMethod<::jint()>("getX"), //
		jMethod<::jint()>("getXOnScreen"), //
		jMethod<::jint()>("getY"), //
		jMethod<::jint()>("getYOnScreen"), //
		jMethod<::jboolean()>("isPopupTrigger"), //
		jMethod<::java::lang::String()>("paramString"), //
		jMethod<::jvoid(::jint, ::jint)>("translatePoint"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getButton(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getButton")] != -1);
		return call<R>("getButton", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getClickCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClickCount")] != -1);
		return call<R>("getClickCount", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Point, typename... Args>
	auto getLocationOnScreen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocationOnScreen")] != -1);
		return call<R>("getLocationOnScreen", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getModifiersEx(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getModifiersEx")] != -1);
		return call<R>("getModifiersEx", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getMouseModifiersText(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMouseModifiersText")] != -1);
		return scall<R>("getMouseModifiersText", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Point, typename... Args>
	auto getPoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPoint")] != -1);
		return call<R>("getPoint", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getX")] != -1);
		return call<R>("getX", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getXOnScreen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getXOnScreen")] != -1);
		return call<R>("getXOnScreen", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getY")] != -1);
		return call<R>("getY", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getYOnScreen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getYOnScreen")] != -1);
		return call<R>("getYOnScreen", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPopupTrigger(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPopupTrigger")] != -1);
		return call<R>("isPopupTrigger", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto paramString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paramString")] != -1);
		return call<R>("paramString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto translatePoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("translatePoint")] != -1);
		return call<R>("translatePoint", std::forward<Args>(args)...);
	}

};

#endif
