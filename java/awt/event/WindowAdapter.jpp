#ifndef java_awt_event_WindowAdapter_HPP
#define java_awt_event_WindowAdapter_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::event::WindowAdapter : public jObject<::java::awt::event::WindowAdapter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_event / "WindowAdapter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::awt::event::WindowEvent)>("windowActivated"), //
		jMethod<::jvoid(::java::awt::event::WindowEvent)>("windowClosed"), //
		jMethod<::jvoid(::java::awt::event::WindowEvent)>("windowClosing"), //
		jMethod<::jvoid(::java::awt::event::WindowEvent)>("windowDeactivated"), //
		jMethod<::jvoid(::java::awt::event::WindowEvent)>("windowDeiconified"), //
		jMethod<::jvoid(::java::awt::event::WindowEvent)>("windowGainedFocus"), //
		jMethod<::jvoid(::java::awt::event::WindowEvent)>("windowIconified"), //
		jMethod<::jvoid(::java::awt::event::WindowEvent)>("windowLostFocus"), //
		jMethod<::jvoid(::java::awt::event::WindowEvent)>("windowOpened"), //
		jMethod<::jvoid(::java::awt::event::WindowEvent)>("windowStateChanged"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto windowActivated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("windowActivated")] != -1);
		return call<R>("windowActivated", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto windowClosed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("windowClosed")] != -1);
		return call<R>("windowClosed", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto windowClosing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("windowClosing")] != -1);
		return call<R>("windowClosing", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto windowDeactivated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("windowDeactivated")] != -1);
		return call<R>("windowDeactivated", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto windowDeiconified(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("windowDeiconified")] != -1);
		return call<R>("windowDeiconified", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto windowGainedFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("windowGainedFocus")] != -1);
		return call<R>("windowGainedFocus", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto windowIconified(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("windowIconified")] != -1);
		return call<R>("windowIconified", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto windowLostFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("windowLostFocus")] != -1);
		return call<R>("windowLostFocus", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto windowOpened(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("windowOpened")] != -1);
		return call<R>("windowOpened", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto windowStateChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("windowStateChanged")] != -1);
		return call<R>("windowStateChanged", std::forward<Args>(args)...);
	}

};

#endif
