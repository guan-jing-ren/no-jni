#ifndef java_awt_event_KeyEvent_HPP
#define java_awt_event_KeyEvent_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::event::KeyEvent : public jObject<::java::awt::event::KeyEvent, ::java::awt::event::InputEvent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_event / "KeyEvent";

	constexpr static Enume field_signatures{
		jField<::jchar>("CHAR_UNDEFINED"), //
		jField<::jint>("KEY_FIRST"), //
		jField<::jint>("KEY_LAST"), //
		jField<::jint>("KEY_LOCATION_LEFT"), //
		jField<::jint>("KEY_LOCATION_NUMPAD"), //
		jField<::jint>("KEY_LOCATION_RIGHT"), //
		jField<::jint>("KEY_LOCATION_STANDARD"), //
		jField<::jint>("KEY_LOCATION_UNKNOWN"), //
		jField<::jint>("KEY_PRESSED"), //
		jField<::jint>("KEY_RELEASED"), //
		jField<::jint>("KEY_TYPED"), //
		jField<::jint>("VK_0"), //
		jField<::jint>("VK_1"), //
		jField<::jint>("VK_2"), //
		jField<::jint>("VK_3"), //
		jField<::jint>("VK_4"), //
		jField<::jint>("VK_5"), //
		jField<::jint>("VK_6"), //
		jField<::jint>("VK_7"), //
		jField<::jint>("VK_8"), //
		jField<::jint>("VK_9"), //
		jField<::jint>("VK_A"), //
		jField<::jint>("VK_ACCEPT"), //
		jField<::jint>("VK_ADD"), //
		jField<::jint>("VK_AGAIN"), //
		jField<::jint>("VK_ALL_CANDIDATES"), //
		jField<::jint>("VK_ALPHANUMERIC"), //
		jField<::jint>("VK_ALT"), //
		jField<::jint>("VK_ALT_GRAPH"), //
		jField<::jint>("VK_AMPERSAND"), //
		jField<::jint>("VK_ASTERISK"), //
		jField<::jint>("VK_AT"), //
		jField<::jint>("VK_B"), //
		jField<::jint>("VK_BACK_QUOTE"), //
		jField<::jint>("VK_BACK_SLASH"), //
		jField<::jint>("VK_BACK_SPACE"), //
		jField<::jint>("VK_BEGIN"), //
		jField<::jint>("VK_BRACELEFT"), //
		jField<::jint>("VK_BRACERIGHT"), //
		jField<::jint>("VK_C"), //
		jField<::jint>("VK_CANCEL"), //
		jField<::jint>("VK_CAPS_LOCK"), //
		jField<::jint>("VK_CIRCUMFLEX"), //
		jField<::jint>("VK_CLEAR"), //
		jField<::jint>("VK_CLOSE_BRACKET"), //
		jField<::jint>("VK_CODE_INPUT"), //
		jField<::jint>("VK_COLON"), //
		jField<::jint>("VK_COMMA"), //
		jField<::jint>("VK_COMPOSE"), //
		jField<::jint>("VK_CONTEXT_MENU"), //
		jField<::jint>("VK_CONTROL"), //
		jField<::jint>("VK_CONVERT"), //
		jField<::jint>("VK_COPY"), //
		jField<::jint>("VK_CUT"), //
		jField<::jint>("VK_D"), //
		jField<::jint>("VK_DEAD_ABOVEDOT"), //
		jField<::jint>("VK_DEAD_ABOVERING"), //
		jField<::jint>("VK_DEAD_ACUTE"), //
		jField<::jint>("VK_DEAD_BREVE"), //
		jField<::jint>("VK_DEAD_CARON"), //
		jField<::jint>("VK_DEAD_CEDILLA"), //
		jField<::jint>("VK_DEAD_CIRCUMFLEX"), //
		jField<::jint>("VK_DEAD_DIAERESIS"), //
		jField<::jint>("VK_DEAD_DOUBLEACUTE"), //
		jField<::jint>("VK_DEAD_GRAVE"), //
		jField<::jint>("VK_DEAD_IOTA"), //
		jField<::jint>("VK_DEAD_MACRON"), //
		jField<::jint>("VK_DEAD_OGONEK"), //
		jField<::jint>("VK_DEAD_SEMIVOICED_SOUND"), //
		jField<::jint>("VK_DEAD_TILDE"), //
		jField<::jint>("VK_DEAD_VOICED_SOUND"), //
		jField<::jint>("VK_DECIMAL"), //
		jField<::jint>("VK_DELETE"), //
		jField<::jint>("VK_DIVIDE"), //
		jField<::jint>("VK_DOLLAR"), //
		jField<::jint>("VK_DOWN"), //
		jField<::jint>("VK_E"), //
		jField<::jint>("VK_END"), //
		jField<::jint>("VK_ENTER"), //
		jField<::jint>("VK_EQUALS"), //
		jField<::jint>("VK_ESCAPE"), //
		jField<::jint>("VK_EURO_SIGN"), //
		jField<::jint>("VK_EXCLAMATION_MARK"), //
		jField<::jint>("VK_F"), //
		jField<::jint>("VK_F1"), //
		jField<::jint>("VK_F10"), //
		jField<::jint>("VK_F11"), //
		jField<::jint>("VK_F12"), //
		jField<::jint>("VK_F13"), //
		jField<::jint>("VK_F14"), //
		jField<::jint>("VK_F15"), //
		jField<::jint>("VK_F16"), //
		jField<::jint>("VK_F17"), //
		jField<::jint>("VK_F18"), //
		jField<::jint>("VK_F19"), //
		jField<::jint>("VK_F2"), //
		jField<::jint>("VK_F20"), //
		jField<::jint>("VK_F21"), //
		jField<::jint>("VK_F22"), //
		jField<::jint>("VK_F23"), //
		jField<::jint>("VK_F24"), //
		jField<::jint>("VK_F3"), //
		jField<::jint>("VK_F4"), //
		jField<::jint>("VK_F5"), //
		jField<::jint>("VK_F6"), //
		jField<::jint>("VK_F7"), //
		jField<::jint>("VK_F8"), //
		jField<::jint>("VK_F9"), //
		jField<::jint>("VK_FINAL"), //
		jField<::jint>("VK_FIND"), //
		jField<::jint>("VK_FULL_WIDTH"), //
		jField<::jint>("VK_G"), //
		jField<::jint>("VK_GREATER"), //
		jField<::jint>("VK_H"), //
		jField<::jint>("VK_HALF_WIDTH"), //
		jField<::jint>("VK_HELP"), //
		jField<::jint>("VK_HIRAGANA"), //
		jField<::jint>("VK_HOME"), //
		jField<::jint>("VK_I"), //
		jField<::jint>("VK_INPUT_METHOD_ON_OFF"), //
		jField<::jint>("VK_INSERT"), //
		jField<::jint>("VK_INVERTED_EXCLAMATION_MARK"), //
		jField<::jint>("VK_J"), //
		jField<::jint>("VK_JAPANESE_HIRAGANA"), //
		jField<::jint>("VK_JAPANESE_KATAKANA"), //
		jField<::jint>("VK_JAPANESE_ROMAN"), //
		jField<::jint>("VK_K"), //
		jField<::jint>("VK_KANA"), //
		jField<::jint>("VK_KANA_LOCK"), //
		jField<::jint>("VK_KANJI"), //
		jField<::jint>("VK_KATAKANA"), //
		jField<::jint>("VK_KP_DOWN"), //
		jField<::jint>("VK_KP_LEFT"), //
		jField<::jint>("VK_KP_RIGHT"), //
		jField<::jint>("VK_KP_UP"), //
		jField<::jint>("VK_L"), //
		jField<::jint>("VK_LEFT"), //
		jField<::jint>("VK_LEFT_PARENTHESIS"), //
		jField<::jint>("VK_LESS"), //
		jField<::jint>("VK_M"), //
		jField<::jint>("VK_META"), //
		jField<::jint>("VK_MINUS"), //
		jField<::jint>("VK_MODECHANGE"), //
		jField<::jint>("VK_MULTIPLY"), //
		jField<::jint>("VK_N"), //
		jField<::jint>("VK_NONCONVERT"), //
		jField<::jint>("VK_NUMBER_SIGN"), //
		jField<::jint>("VK_NUMPAD0"), //
		jField<::jint>("VK_NUMPAD1"), //
		jField<::jint>("VK_NUMPAD2"), //
		jField<::jint>("VK_NUMPAD3"), //
		jField<::jint>("VK_NUMPAD4"), //
		jField<::jint>("VK_NUMPAD5"), //
		jField<::jint>("VK_NUMPAD6"), //
		jField<::jint>("VK_NUMPAD7"), //
		jField<::jint>("VK_NUMPAD8"), //
		jField<::jint>("VK_NUMPAD9"), //
		jField<::jint>("VK_NUM_LOCK"), //
		jField<::jint>("VK_O"), //
		jField<::jint>("VK_OPEN_BRACKET"), //
		jField<::jint>("VK_P"), //
		jField<::jint>("VK_PAGE_DOWN"), //
		jField<::jint>("VK_PAGE_UP"), //
		jField<::jint>("VK_PASTE"), //
		jField<::jint>("VK_PAUSE"), //
		jField<::jint>("VK_PERIOD"), //
		jField<::jint>("VK_PLUS"), //
		jField<::jint>("VK_PREVIOUS_CANDIDATE"), //
		jField<::jint>("VK_PRINTSCREEN"), //
		jField<::jint>("VK_PROPS"), //
		jField<::jint>("VK_Q"), //
		jField<::jint>("VK_QUOTE"), //
		jField<::jint>("VK_QUOTEDBL"), //
		jField<::jint>("VK_R"), //
		jField<::jint>("VK_RIGHT"), //
		jField<::jint>("VK_RIGHT_PARENTHESIS"), //
		jField<::jint>("VK_ROMAN_CHARACTERS"), //
		jField<::jint>("VK_S"), //
		jField<::jint>("VK_SCROLL_LOCK"), //
		jField<::jint>("VK_SEMICOLON"), //
		jField<::jint>("VK_SEPARATER"), //
		jField<::jint>("VK_SEPARATOR"), //
		jField<::jint>("VK_SHIFT"), //
		jField<::jint>("VK_SLASH"), //
		jField<::jint>("VK_SPACE"), //
		jField<::jint>("VK_STOP"), //
		jField<::jint>("VK_SUBTRACT"), //
		jField<::jint>("VK_T"), //
		jField<::jint>("VK_TAB"), //
		jField<::jint>("VK_U"), //
		jField<::jint>("VK_UNDEFINED"), //
		jField<::jint>("VK_UNDERSCORE"), //
		jField<::jint>("VK_UNDO"), //
		jField<::jint>("VK_UP"), //
		jField<::jint>("VK_V"), //
		jField<::jint>("VK_W"), //
		jField<::jint>("VK_WINDOWS"), //
		jField<::jint>("VK_X"), //
		jField<::jint>("VK_Y"), //
		jField<::jint>("VK_Z"), //
	};

	template<typename F = ::jchar>
	static auto CHAR_UNDEFINED() {
		static_assert(field_signatures[jField<F>("CHAR_UNDEFINED")] != -1);
		return sat<F>("CHAR_UNDEFINED");
	}

	template<typename F = ::jint>
	static auto KEY_FIRST() {
		static_assert(field_signatures[jField<F>("KEY_FIRST")] != -1);
		return sat<F>("KEY_FIRST");
	}

	template<typename F = ::jint>
	static auto KEY_LAST() {
		static_assert(field_signatures[jField<F>("KEY_LAST")] != -1);
		return sat<F>("KEY_LAST");
	}

	template<typename F = ::jint>
	static auto KEY_LOCATION_LEFT() {
		static_assert(field_signatures[jField<F>("KEY_LOCATION_LEFT")] != -1);
		return sat<F>("KEY_LOCATION_LEFT");
	}

	template<typename F = ::jint>
	static auto KEY_LOCATION_NUMPAD() {
		static_assert(field_signatures[jField<F>("KEY_LOCATION_NUMPAD")] != -1);
		return sat<F>("KEY_LOCATION_NUMPAD");
	}

	template<typename F = ::jint>
	static auto KEY_LOCATION_RIGHT() {
		static_assert(field_signatures[jField<F>("KEY_LOCATION_RIGHT")] != -1);
		return sat<F>("KEY_LOCATION_RIGHT");
	}

	template<typename F = ::jint>
	static auto KEY_LOCATION_STANDARD() {
		static_assert(field_signatures[jField<F>("KEY_LOCATION_STANDARD")] != -1);
		return sat<F>("KEY_LOCATION_STANDARD");
	}

	template<typename F = ::jint>
	static auto KEY_LOCATION_UNKNOWN() {
		static_assert(field_signatures[jField<F>("KEY_LOCATION_UNKNOWN")] != -1);
		return sat<F>("KEY_LOCATION_UNKNOWN");
	}

	template<typename F = ::jint>
	static auto KEY_PRESSED() {
		static_assert(field_signatures[jField<F>("KEY_PRESSED")] != -1);
		return sat<F>("KEY_PRESSED");
	}

	template<typename F = ::jint>
	static auto KEY_RELEASED() {
		static_assert(field_signatures[jField<F>("KEY_RELEASED")] != -1);
		return sat<F>("KEY_RELEASED");
	}

	template<typename F = ::jint>
	static auto KEY_TYPED() {
		static_assert(field_signatures[jField<F>("KEY_TYPED")] != -1);
		return sat<F>("KEY_TYPED");
	}

	template<typename F = ::jint>
	static auto VK_0() {
		static_assert(field_signatures[jField<F>("VK_0")] != -1);
		return sat<F>("VK_0");
	}

	template<typename F = ::jint>
	static auto VK_1() {
		static_assert(field_signatures[jField<F>("VK_1")] != -1);
		return sat<F>("VK_1");
	}

	template<typename F = ::jint>
	static auto VK_2() {
		static_assert(field_signatures[jField<F>("VK_2")] != -1);
		return sat<F>("VK_2");
	}

	template<typename F = ::jint>
	static auto VK_3() {
		static_assert(field_signatures[jField<F>("VK_3")] != -1);
		return sat<F>("VK_3");
	}

	template<typename F = ::jint>
	static auto VK_4() {
		static_assert(field_signatures[jField<F>("VK_4")] != -1);
		return sat<F>("VK_4");
	}

	template<typename F = ::jint>
	static auto VK_5() {
		static_assert(field_signatures[jField<F>("VK_5")] != -1);
		return sat<F>("VK_5");
	}

	template<typename F = ::jint>
	static auto VK_6() {
		static_assert(field_signatures[jField<F>("VK_6")] != -1);
		return sat<F>("VK_6");
	}

	template<typename F = ::jint>
	static auto VK_7() {
		static_assert(field_signatures[jField<F>("VK_7")] != -1);
		return sat<F>("VK_7");
	}

	template<typename F = ::jint>
	static auto VK_8() {
		static_assert(field_signatures[jField<F>("VK_8")] != -1);
		return sat<F>("VK_8");
	}

	template<typename F = ::jint>
	static auto VK_9() {
		static_assert(field_signatures[jField<F>("VK_9")] != -1);
		return sat<F>("VK_9");
	}

	template<typename F = ::jint>
	static auto VK_A() {
		static_assert(field_signatures[jField<F>("VK_A")] != -1);
		return sat<F>("VK_A");
	}

	template<typename F = ::jint>
	static auto VK_ACCEPT() {
		static_assert(field_signatures[jField<F>("VK_ACCEPT")] != -1);
		return sat<F>("VK_ACCEPT");
	}

	template<typename F = ::jint>
	static auto VK_ADD() {
		static_assert(field_signatures[jField<F>("VK_ADD")] != -1);
		return sat<F>("VK_ADD");
	}

	template<typename F = ::jint>
	static auto VK_AGAIN() {
		static_assert(field_signatures[jField<F>("VK_AGAIN")] != -1);
		return sat<F>("VK_AGAIN");
	}

	template<typename F = ::jint>
	static auto VK_ALL_CANDIDATES() {
		static_assert(field_signatures[jField<F>("VK_ALL_CANDIDATES")] != -1);
		return sat<F>("VK_ALL_CANDIDATES");
	}

	template<typename F = ::jint>
	static auto VK_ALPHANUMERIC() {
		static_assert(field_signatures[jField<F>("VK_ALPHANUMERIC")] != -1);
		return sat<F>("VK_ALPHANUMERIC");
	}

	template<typename F = ::jint>
	static auto VK_ALT() {
		static_assert(field_signatures[jField<F>("VK_ALT")] != -1);
		return sat<F>("VK_ALT");
	}

	template<typename F = ::jint>
	static auto VK_ALT_GRAPH() {
		static_assert(field_signatures[jField<F>("VK_ALT_GRAPH")] != -1);
		return sat<F>("VK_ALT_GRAPH");
	}

	template<typename F = ::jint>
	static auto VK_AMPERSAND() {
		static_assert(field_signatures[jField<F>("VK_AMPERSAND")] != -1);
		return sat<F>("VK_AMPERSAND");
	}

	template<typename F = ::jint>
	static auto VK_ASTERISK() {
		static_assert(field_signatures[jField<F>("VK_ASTERISK")] != -1);
		return sat<F>("VK_ASTERISK");
	}

	template<typename F = ::jint>
	static auto VK_AT() {
		static_assert(field_signatures[jField<F>("VK_AT")] != -1);
		return sat<F>("VK_AT");
	}

	template<typename F = ::jint>
	static auto VK_B() {
		static_assert(field_signatures[jField<F>("VK_B")] != -1);
		return sat<F>("VK_B");
	}

	template<typename F = ::jint>
	static auto VK_BACK_QUOTE() {
		static_assert(field_signatures[jField<F>("VK_BACK_QUOTE")] != -1);
		return sat<F>("VK_BACK_QUOTE");
	}

	template<typename F = ::jint>
	static auto VK_BACK_SLASH() {
		static_assert(field_signatures[jField<F>("VK_BACK_SLASH")] != -1);
		return sat<F>("VK_BACK_SLASH");
	}

	template<typename F = ::jint>
	static auto VK_BACK_SPACE() {
		static_assert(field_signatures[jField<F>("VK_BACK_SPACE")] != -1);
		return sat<F>("VK_BACK_SPACE");
	}

	template<typename F = ::jint>
	static auto VK_BEGIN() {
		static_assert(field_signatures[jField<F>("VK_BEGIN")] != -1);
		return sat<F>("VK_BEGIN");
	}

	template<typename F = ::jint>
	static auto VK_BRACELEFT() {
		static_assert(field_signatures[jField<F>("VK_BRACELEFT")] != -1);
		return sat<F>("VK_BRACELEFT");
	}

	template<typename F = ::jint>
	static auto VK_BRACERIGHT() {
		static_assert(field_signatures[jField<F>("VK_BRACERIGHT")] != -1);
		return sat<F>("VK_BRACERIGHT");
	}

	template<typename F = ::jint>
	static auto VK_C() {
		static_assert(field_signatures[jField<F>("VK_C")] != -1);
		return sat<F>("VK_C");
	}

	template<typename F = ::jint>
	static auto VK_CANCEL() {
		static_assert(field_signatures[jField<F>("VK_CANCEL")] != -1);
		return sat<F>("VK_CANCEL");
	}

	template<typename F = ::jint>
	static auto VK_CAPS_LOCK() {
		static_assert(field_signatures[jField<F>("VK_CAPS_LOCK")] != -1);
		return sat<F>("VK_CAPS_LOCK");
	}

	template<typename F = ::jint>
	static auto VK_CIRCUMFLEX() {
		static_assert(field_signatures[jField<F>("VK_CIRCUMFLEX")] != -1);
		return sat<F>("VK_CIRCUMFLEX");
	}

	template<typename F = ::jint>
	static auto VK_CLEAR() {
		static_assert(field_signatures[jField<F>("VK_CLEAR")] != -1);
		return sat<F>("VK_CLEAR");
	}

	template<typename F = ::jint>
	static auto VK_CLOSE_BRACKET() {
		static_assert(field_signatures[jField<F>("VK_CLOSE_BRACKET")] != -1);
		return sat<F>("VK_CLOSE_BRACKET");
	}

	template<typename F = ::jint>
	static auto VK_CODE_INPUT() {
		static_assert(field_signatures[jField<F>("VK_CODE_INPUT")] != -1);
		return sat<F>("VK_CODE_INPUT");
	}

	template<typename F = ::jint>
	static auto VK_COLON() {
		static_assert(field_signatures[jField<F>("VK_COLON")] != -1);
		return sat<F>("VK_COLON");
	}

	template<typename F = ::jint>
	static auto VK_COMMA() {
		static_assert(field_signatures[jField<F>("VK_COMMA")] != -1);
		return sat<F>("VK_COMMA");
	}

	template<typename F = ::jint>
	static auto VK_COMPOSE() {
		static_assert(field_signatures[jField<F>("VK_COMPOSE")] != -1);
		return sat<F>("VK_COMPOSE");
	}

	template<typename F = ::jint>
	static auto VK_CONTEXT_MENU() {
		static_assert(field_signatures[jField<F>("VK_CONTEXT_MENU")] != -1);
		return sat<F>("VK_CONTEXT_MENU");
	}

	template<typename F = ::jint>
	static auto VK_CONTROL() {
		static_assert(field_signatures[jField<F>("VK_CONTROL")] != -1);
		return sat<F>("VK_CONTROL");
	}

	template<typename F = ::jint>
	static auto VK_CONVERT() {
		static_assert(field_signatures[jField<F>("VK_CONVERT")] != -1);
		return sat<F>("VK_CONVERT");
	}

	template<typename F = ::jint>
	static auto VK_COPY() {
		static_assert(field_signatures[jField<F>("VK_COPY")] != -1);
		return sat<F>("VK_COPY");
	}

	template<typename F = ::jint>
	static auto VK_CUT() {
		static_assert(field_signatures[jField<F>("VK_CUT")] != -1);
		return sat<F>("VK_CUT");
	}

	template<typename F = ::jint>
	static auto VK_D() {
		static_assert(field_signatures[jField<F>("VK_D")] != -1);
		return sat<F>("VK_D");
	}

	template<typename F = ::jint>
	static auto VK_DEAD_ABOVEDOT() {
		static_assert(field_signatures[jField<F>("VK_DEAD_ABOVEDOT")] != -1);
		return sat<F>("VK_DEAD_ABOVEDOT");
	}

	template<typename F = ::jint>
	static auto VK_DEAD_ABOVERING() {
		static_assert(field_signatures[jField<F>("VK_DEAD_ABOVERING")] != -1);
		return sat<F>("VK_DEAD_ABOVERING");
	}

	template<typename F = ::jint>
	static auto VK_DEAD_ACUTE() {
		static_assert(field_signatures[jField<F>("VK_DEAD_ACUTE")] != -1);
		return sat<F>("VK_DEAD_ACUTE");
	}

	template<typename F = ::jint>
	static auto VK_DEAD_BREVE() {
		static_assert(field_signatures[jField<F>("VK_DEAD_BREVE")] != -1);
		return sat<F>("VK_DEAD_BREVE");
	}

	template<typename F = ::jint>
	static auto VK_DEAD_CARON() {
		static_assert(field_signatures[jField<F>("VK_DEAD_CARON")] != -1);
		return sat<F>("VK_DEAD_CARON");
	}

	template<typename F = ::jint>
	static auto VK_DEAD_CEDILLA() {
		static_assert(field_signatures[jField<F>("VK_DEAD_CEDILLA")] != -1);
		return sat<F>("VK_DEAD_CEDILLA");
	}

	template<typename F = ::jint>
	static auto VK_DEAD_CIRCUMFLEX() {
		static_assert(field_signatures[jField<F>("VK_DEAD_CIRCUMFLEX")] != -1);
		return sat<F>("VK_DEAD_CIRCUMFLEX");
	}

	template<typename F = ::jint>
	static auto VK_DEAD_DIAERESIS() {
		static_assert(field_signatures[jField<F>("VK_DEAD_DIAERESIS")] != -1);
		return sat<F>("VK_DEAD_DIAERESIS");
	}

	template<typename F = ::jint>
	static auto VK_DEAD_DOUBLEACUTE() {
		static_assert(field_signatures[jField<F>("VK_DEAD_DOUBLEACUTE")] != -1);
		return sat<F>("VK_DEAD_DOUBLEACUTE");
	}

	template<typename F = ::jint>
	static auto VK_DEAD_GRAVE() {
		static_assert(field_signatures[jField<F>("VK_DEAD_GRAVE")] != -1);
		return sat<F>("VK_DEAD_GRAVE");
	}

	template<typename F = ::jint>
	static auto VK_DEAD_IOTA() {
		static_assert(field_signatures[jField<F>("VK_DEAD_IOTA")] != -1);
		return sat<F>("VK_DEAD_IOTA");
	}

	template<typename F = ::jint>
	static auto VK_DEAD_MACRON() {
		static_assert(field_signatures[jField<F>("VK_DEAD_MACRON")] != -1);
		return sat<F>("VK_DEAD_MACRON");
	}

	template<typename F = ::jint>
	static auto VK_DEAD_OGONEK() {
		static_assert(field_signatures[jField<F>("VK_DEAD_OGONEK")] != -1);
		return sat<F>("VK_DEAD_OGONEK");
	}

	template<typename F = ::jint>
	static auto VK_DEAD_SEMIVOICED_SOUND() {
		static_assert(field_signatures[jField<F>("VK_DEAD_SEMIVOICED_SOUND")] != -1);
		return sat<F>("VK_DEAD_SEMIVOICED_SOUND");
	}

	template<typename F = ::jint>
	static auto VK_DEAD_TILDE() {
		static_assert(field_signatures[jField<F>("VK_DEAD_TILDE")] != -1);
		return sat<F>("VK_DEAD_TILDE");
	}

	template<typename F = ::jint>
	static auto VK_DEAD_VOICED_SOUND() {
		static_assert(field_signatures[jField<F>("VK_DEAD_VOICED_SOUND")] != -1);
		return sat<F>("VK_DEAD_VOICED_SOUND");
	}

	template<typename F = ::jint>
	static auto VK_DECIMAL() {
		static_assert(field_signatures[jField<F>("VK_DECIMAL")] != -1);
		return sat<F>("VK_DECIMAL");
	}

	template<typename F = ::jint>
	static auto VK_DELETE() {
		static_assert(field_signatures[jField<F>("VK_DELETE")] != -1);
		return sat<F>("VK_DELETE");
	}

	template<typename F = ::jint>
	static auto VK_DIVIDE() {
		static_assert(field_signatures[jField<F>("VK_DIVIDE")] != -1);
		return sat<F>("VK_DIVIDE");
	}

	template<typename F = ::jint>
	static auto VK_DOLLAR() {
		static_assert(field_signatures[jField<F>("VK_DOLLAR")] != -1);
		return sat<F>("VK_DOLLAR");
	}

	template<typename F = ::jint>
	static auto VK_DOWN() {
		static_assert(field_signatures[jField<F>("VK_DOWN")] != -1);
		return sat<F>("VK_DOWN");
	}

	template<typename F = ::jint>
	static auto VK_E() {
		static_assert(field_signatures[jField<F>("VK_E")] != -1);
		return sat<F>("VK_E");
	}

	template<typename F = ::jint>
	static auto VK_END() {
		static_assert(field_signatures[jField<F>("VK_END")] != -1);
		return sat<F>("VK_END");
	}

	template<typename F = ::jint>
	static auto VK_ENTER() {
		static_assert(field_signatures[jField<F>("VK_ENTER")] != -1);
		return sat<F>("VK_ENTER");
	}

	template<typename F = ::jint>
	static auto VK_EQUALS() {
		static_assert(field_signatures[jField<F>("VK_EQUALS")] != -1);
		return sat<F>("VK_EQUALS");
	}

	template<typename F = ::jint>
	static auto VK_ESCAPE() {
		static_assert(field_signatures[jField<F>("VK_ESCAPE")] != -1);
		return sat<F>("VK_ESCAPE");
	}

	template<typename F = ::jint>
	static auto VK_EURO_SIGN() {
		static_assert(field_signatures[jField<F>("VK_EURO_SIGN")] != -1);
		return sat<F>("VK_EURO_SIGN");
	}

	template<typename F = ::jint>
	static auto VK_EXCLAMATION_MARK() {
		static_assert(field_signatures[jField<F>("VK_EXCLAMATION_MARK")] != -1);
		return sat<F>("VK_EXCLAMATION_MARK");
	}

	template<typename F = ::jint>
	static auto VK_F() {
		static_assert(field_signatures[jField<F>("VK_F")] != -1);
		return sat<F>("VK_F");
	}

	template<typename F = ::jint>
	static auto VK_F1() {
		static_assert(field_signatures[jField<F>("VK_F1")] != -1);
		return sat<F>("VK_F1");
	}

	template<typename F = ::jint>
	static auto VK_F10() {
		static_assert(field_signatures[jField<F>("VK_F10")] != -1);
		return sat<F>("VK_F10");
	}

	template<typename F = ::jint>
	static auto VK_F11() {
		static_assert(field_signatures[jField<F>("VK_F11")] != -1);
		return sat<F>("VK_F11");
	}

	template<typename F = ::jint>
	static auto VK_F12() {
		static_assert(field_signatures[jField<F>("VK_F12")] != -1);
		return sat<F>("VK_F12");
	}

	template<typename F = ::jint>
	static auto VK_F13() {
		static_assert(field_signatures[jField<F>("VK_F13")] != -1);
		return sat<F>("VK_F13");
	}

	template<typename F = ::jint>
	static auto VK_F14() {
		static_assert(field_signatures[jField<F>("VK_F14")] != -1);
		return sat<F>("VK_F14");
	}

	template<typename F = ::jint>
	static auto VK_F15() {
		static_assert(field_signatures[jField<F>("VK_F15")] != -1);
		return sat<F>("VK_F15");
	}

	template<typename F = ::jint>
	static auto VK_F16() {
		static_assert(field_signatures[jField<F>("VK_F16")] != -1);
		return sat<F>("VK_F16");
	}

	template<typename F = ::jint>
	static auto VK_F17() {
		static_assert(field_signatures[jField<F>("VK_F17")] != -1);
		return sat<F>("VK_F17");
	}

	template<typename F = ::jint>
	static auto VK_F18() {
		static_assert(field_signatures[jField<F>("VK_F18")] != -1);
		return sat<F>("VK_F18");
	}

	template<typename F = ::jint>
	static auto VK_F19() {
		static_assert(field_signatures[jField<F>("VK_F19")] != -1);
		return sat<F>("VK_F19");
	}

	template<typename F = ::jint>
	static auto VK_F2() {
		static_assert(field_signatures[jField<F>("VK_F2")] != -1);
		return sat<F>("VK_F2");
	}

	template<typename F = ::jint>
	static auto VK_F20() {
		static_assert(field_signatures[jField<F>("VK_F20")] != -1);
		return sat<F>("VK_F20");
	}

	template<typename F = ::jint>
	static auto VK_F21() {
		static_assert(field_signatures[jField<F>("VK_F21")] != -1);
		return sat<F>("VK_F21");
	}

	template<typename F = ::jint>
	static auto VK_F22() {
		static_assert(field_signatures[jField<F>("VK_F22")] != -1);
		return sat<F>("VK_F22");
	}

	template<typename F = ::jint>
	static auto VK_F23() {
		static_assert(field_signatures[jField<F>("VK_F23")] != -1);
		return sat<F>("VK_F23");
	}

	template<typename F = ::jint>
	static auto VK_F24() {
		static_assert(field_signatures[jField<F>("VK_F24")] != -1);
		return sat<F>("VK_F24");
	}

	template<typename F = ::jint>
	static auto VK_F3() {
		static_assert(field_signatures[jField<F>("VK_F3")] != -1);
		return sat<F>("VK_F3");
	}

	template<typename F = ::jint>
	static auto VK_F4() {
		static_assert(field_signatures[jField<F>("VK_F4")] != -1);
		return sat<F>("VK_F4");
	}

	template<typename F = ::jint>
	static auto VK_F5() {
		static_assert(field_signatures[jField<F>("VK_F5")] != -1);
		return sat<F>("VK_F5");
	}

	template<typename F = ::jint>
	static auto VK_F6() {
		static_assert(field_signatures[jField<F>("VK_F6")] != -1);
		return sat<F>("VK_F6");
	}

	template<typename F = ::jint>
	static auto VK_F7() {
		static_assert(field_signatures[jField<F>("VK_F7")] != -1);
		return sat<F>("VK_F7");
	}

	template<typename F = ::jint>
	static auto VK_F8() {
		static_assert(field_signatures[jField<F>("VK_F8")] != -1);
		return sat<F>("VK_F8");
	}

	template<typename F = ::jint>
	static auto VK_F9() {
		static_assert(field_signatures[jField<F>("VK_F9")] != -1);
		return sat<F>("VK_F9");
	}

	template<typename F = ::jint>
	static auto VK_FINAL() {
		static_assert(field_signatures[jField<F>("VK_FINAL")] != -1);
		return sat<F>("VK_FINAL");
	}

	template<typename F = ::jint>
	static auto VK_FIND() {
		static_assert(field_signatures[jField<F>("VK_FIND")] != -1);
		return sat<F>("VK_FIND");
	}

	template<typename F = ::jint>
	static auto VK_FULL_WIDTH() {
		static_assert(field_signatures[jField<F>("VK_FULL_WIDTH")] != -1);
		return sat<F>("VK_FULL_WIDTH");
	}

	template<typename F = ::jint>
	static auto VK_G() {
		static_assert(field_signatures[jField<F>("VK_G")] != -1);
		return sat<F>("VK_G");
	}

	template<typename F = ::jint>
	static auto VK_GREATER() {
		static_assert(field_signatures[jField<F>("VK_GREATER")] != -1);
		return sat<F>("VK_GREATER");
	}

	template<typename F = ::jint>
	static auto VK_H() {
		static_assert(field_signatures[jField<F>("VK_H")] != -1);
		return sat<F>("VK_H");
	}

	template<typename F = ::jint>
	static auto VK_HALF_WIDTH() {
		static_assert(field_signatures[jField<F>("VK_HALF_WIDTH")] != -1);
		return sat<F>("VK_HALF_WIDTH");
	}

	template<typename F = ::jint>
	static auto VK_HELP() {
		static_assert(field_signatures[jField<F>("VK_HELP")] != -1);
		return sat<F>("VK_HELP");
	}

	template<typename F = ::jint>
	static auto VK_HIRAGANA() {
		static_assert(field_signatures[jField<F>("VK_HIRAGANA")] != -1);
		return sat<F>("VK_HIRAGANA");
	}

	template<typename F = ::jint>
	static auto VK_HOME() {
		static_assert(field_signatures[jField<F>("VK_HOME")] != -1);
		return sat<F>("VK_HOME");
	}

	template<typename F = ::jint>
	static auto VK_I() {
		static_assert(field_signatures[jField<F>("VK_I")] != -1);
		return sat<F>("VK_I");
	}

	template<typename F = ::jint>
	static auto VK_INPUT_METHOD_ON_OFF() {
		static_assert(field_signatures[jField<F>("VK_INPUT_METHOD_ON_OFF")] != -1);
		return sat<F>("VK_INPUT_METHOD_ON_OFF");
	}

	template<typename F = ::jint>
	static auto VK_INSERT() {
		static_assert(field_signatures[jField<F>("VK_INSERT")] != -1);
		return sat<F>("VK_INSERT");
	}

	template<typename F = ::jint>
	static auto VK_INVERTED_EXCLAMATION_MARK() {
		static_assert(field_signatures[jField<F>("VK_INVERTED_EXCLAMATION_MARK")] != -1);
		return sat<F>("VK_INVERTED_EXCLAMATION_MARK");
	}

	template<typename F = ::jint>
	static auto VK_J() {
		static_assert(field_signatures[jField<F>("VK_J")] != -1);
		return sat<F>("VK_J");
	}

	template<typename F = ::jint>
	static auto VK_JAPANESE_HIRAGANA() {
		static_assert(field_signatures[jField<F>("VK_JAPANESE_HIRAGANA")] != -1);
		return sat<F>("VK_JAPANESE_HIRAGANA");
	}

	template<typename F = ::jint>
	static auto VK_JAPANESE_KATAKANA() {
		static_assert(field_signatures[jField<F>("VK_JAPANESE_KATAKANA")] != -1);
		return sat<F>("VK_JAPANESE_KATAKANA");
	}

	template<typename F = ::jint>
	static auto VK_JAPANESE_ROMAN() {
		static_assert(field_signatures[jField<F>("VK_JAPANESE_ROMAN")] != -1);
		return sat<F>("VK_JAPANESE_ROMAN");
	}

	template<typename F = ::jint>
	static auto VK_K() {
		static_assert(field_signatures[jField<F>("VK_K")] != -1);
		return sat<F>("VK_K");
	}

	template<typename F = ::jint>
	static auto VK_KANA() {
		static_assert(field_signatures[jField<F>("VK_KANA")] != -1);
		return sat<F>("VK_KANA");
	}

	template<typename F = ::jint>
	static auto VK_KANA_LOCK() {
		static_assert(field_signatures[jField<F>("VK_KANA_LOCK")] != -1);
		return sat<F>("VK_KANA_LOCK");
	}

	template<typename F = ::jint>
	static auto VK_KANJI() {
		static_assert(field_signatures[jField<F>("VK_KANJI")] != -1);
		return sat<F>("VK_KANJI");
	}

	template<typename F = ::jint>
	static auto VK_KATAKANA() {
		static_assert(field_signatures[jField<F>("VK_KATAKANA")] != -1);
		return sat<F>("VK_KATAKANA");
	}

	template<typename F = ::jint>
	static auto VK_KP_DOWN() {
		static_assert(field_signatures[jField<F>("VK_KP_DOWN")] != -1);
		return sat<F>("VK_KP_DOWN");
	}

	template<typename F = ::jint>
	static auto VK_KP_LEFT() {
		static_assert(field_signatures[jField<F>("VK_KP_LEFT")] != -1);
		return sat<F>("VK_KP_LEFT");
	}

	template<typename F = ::jint>
	static auto VK_KP_RIGHT() {
		static_assert(field_signatures[jField<F>("VK_KP_RIGHT")] != -1);
		return sat<F>("VK_KP_RIGHT");
	}

	template<typename F = ::jint>
	static auto VK_KP_UP() {
		static_assert(field_signatures[jField<F>("VK_KP_UP")] != -1);
		return sat<F>("VK_KP_UP");
	}

	template<typename F = ::jint>
	static auto VK_L() {
		static_assert(field_signatures[jField<F>("VK_L")] != -1);
		return sat<F>("VK_L");
	}

	template<typename F = ::jint>
	static auto VK_LEFT() {
		static_assert(field_signatures[jField<F>("VK_LEFT")] != -1);
		return sat<F>("VK_LEFT");
	}

	template<typename F = ::jint>
	static auto VK_LEFT_PARENTHESIS() {
		static_assert(field_signatures[jField<F>("VK_LEFT_PARENTHESIS")] != -1);
		return sat<F>("VK_LEFT_PARENTHESIS");
	}

	template<typename F = ::jint>
	static auto VK_LESS() {
		static_assert(field_signatures[jField<F>("VK_LESS")] != -1);
		return sat<F>("VK_LESS");
	}

	template<typename F = ::jint>
	static auto VK_M() {
		static_assert(field_signatures[jField<F>("VK_M")] != -1);
		return sat<F>("VK_M");
	}

	template<typename F = ::jint>
	static auto VK_META() {
		static_assert(field_signatures[jField<F>("VK_META")] != -1);
		return sat<F>("VK_META");
	}

	template<typename F = ::jint>
	static auto VK_MINUS() {
		static_assert(field_signatures[jField<F>("VK_MINUS")] != -1);
		return sat<F>("VK_MINUS");
	}

	template<typename F = ::jint>
	static auto VK_MODECHANGE() {
		static_assert(field_signatures[jField<F>("VK_MODECHANGE")] != -1);
		return sat<F>("VK_MODECHANGE");
	}

	template<typename F = ::jint>
	static auto VK_MULTIPLY() {
		static_assert(field_signatures[jField<F>("VK_MULTIPLY")] != -1);
		return sat<F>("VK_MULTIPLY");
	}

	template<typename F = ::jint>
	static auto VK_N() {
		static_assert(field_signatures[jField<F>("VK_N")] != -1);
		return sat<F>("VK_N");
	}

	template<typename F = ::jint>
	static auto VK_NONCONVERT() {
		static_assert(field_signatures[jField<F>("VK_NONCONVERT")] != -1);
		return sat<F>("VK_NONCONVERT");
	}

	template<typename F = ::jint>
	static auto VK_NUMBER_SIGN() {
		static_assert(field_signatures[jField<F>("VK_NUMBER_SIGN")] != -1);
		return sat<F>("VK_NUMBER_SIGN");
	}

	template<typename F = ::jint>
	static auto VK_NUMPAD0() {
		static_assert(field_signatures[jField<F>("VK_NUMPAD0")] != -1);
		return sat<F>("VK_NUMPAD0");
	}

	template<typename F = ::jint>
	static auto VK_NUMPAD1() {
		static_assert(field_signatures[jField<F>("VK_NUMPAD1")] != -1);
		return sat<F>("VK_NUMPAD1");
	}

	template<typename F = ::jint>
	static auto VK_NUMPAD2() {
		static_assert(field_signatures[jField<F>("VK_NUMPAD2")] != -1);
		return sat<F>("VK_NUMPAD2");
	}

	template<typename F = ::jint>
	static auto VK_NUMPAD3() {
		static_assert(field_signatures[jField<F>("VK_NUMPAD3")] != -1);
		return sat<F>("VK_NUMPAD3");
	}

	template<typename F = ::jint>
	static auto VK_NUMPAD4() {
		static_assert(field_signatures[jField<F>("VK_NUMPAD4")] != -1);
		return sat<F>("VK_NUMPAD4");
	}

	template<typename F = ::jint>
	static auto VK_NUMPAD5() {
		static_assert(field_signatures[jField<F>("VK_NUMPAD5")] != -1);
		return sat<F>("VK_NUMPAD5");
	}

	template<typename F = ::jint>
	static auto VK_NUMPAD6() {
		static_assert(field_signatures[jField<F>("VK_NUMPAD6")] != -1);
		return sat<F>("VK_NUMPAD6");
	}

	template<typename F = ::jint>
	static auto VK_NUMPAD7() {
		static_assert(field_signatures[jField<F>("VK_NUMPAD7")] != -1);
		return sat<F>("VK_NUMPAD7");
	}

	template<typename F = ::jint>
	static auto VK_NUMPAD8() {
		static_assert(field_signatures[jField<F>("VK_NUMPAD8")] != -1);
		return sat<F>("VK_NUMPAD8");
	}

	template<typename F = ::jint>
	static auto VK_NUMPAD9() {
		static_assert(field_signatures[jField<F>("VK_NUMPAD9")] != -1);
		return sat<F>("VK_NUMPAD9");
	}

	template<typename F = ::jint>
	static auto VK_NUM_LOCK() {
		static_assert(field_signatures[jField<F>("VK_NUM_LOCK")] != -1);
		return sat<F>("VK_NUM_LOCK");
	}

	template<typename F = ::jint>
	static auto VK_O() {
		static_assert(field_signatures[jField<F>("VK_O")] != -1);
		return sat<F>("VK_O");
	}

	template<typename F = ::jint>
	static auto VK_OPEN_BRACKET() {
		static_assert(field_signatures[jField<F>("VK_OPEN_BRACKET")] != -1);
		return sat<F>("VK_OPEN_BRACKET");
	}

	template<typename F = ::jint>
	static auto VK_P() {
		static_assert(field_signatures[jField<F>("VK_P")] != -1);
		return sat<F>("VK_P");
	}

	template<typename F = ::jint>
	static auto VK_PAGE_DOWN() {
		static_assert(field_signatures[jField<F>("VK_PAGE_DOWN")] != -1);
		return sat<F>("VK_PAGE_DOWN");
	}

	template<typename F = ::jint>
	static auto VK_PAGE_UP() {
		static_assert(field_signatures[jField<F>("VK_PAGE_UP")] != -1);
		return sat<F>("VK_PAGE_UP");
	}

	template<typename F = ::jint>
	static auto VK_PASTE() {
		static_assert(field_signatures[jField<F>("VK_PASTE")] != -1);
		return sat<F>("VK_PASTE");
	}

	template<typename F = ::jint>
	static auto VK_PAUSE() {
		static_assert(field_signatures[jField<F>("VK_PAUSE")] != -1);
		return sat<F>("VK_PAUSE");
	}

	template<typename F = ::jint>
	static auto VK_PERIOD() {
		static_assert(field_signatures[jField<F>("VK_PERIOD")] != -1);
		return sat<F>("VK_PERIOD");
	}

	template<typename F = ::jint>
	static auto VK_PLUS() {
		static_assert(field_signatures[jField<F>("VK_PLUS")] != -1);
		return sat<F>("VK_PLUS");
	}

	template<typename F = ::jint>
	static auto VK_PREVIOUS_CANDIDATE() {
		static_assert(field_signatures[jField<F>("VK_PREVIOUS_CANDIDATE")] != -1);
		return sat<F>("VK_PREVIOUS_CANDIDATE");
	}

	template<typename F = ::jint>
	static auto VK_PRINTSCREEN() {
		static_assert(field_signatures[jField<F>("VK_PRINTSCREEN")] != -1);
		return sat<F>("VK_PRINTSCREEN");
	}

	template<typename F = ::jint>
	static auto VK_PROPS() {
		static_assert(field_signatures[jField<F>("VK_PROPS")] != -1);
		return sat<F>("VK_PROPS");
	}

	template<typename F = ::jint>
	static auto VK_Q() {
		static_assert(field_signatures[jField<F>("VK_Q")] != -1);
		return sat<F>("VK_Q");
	}

	template<typename F = ::jint>
	static auto VK_QUOTE() {
		static_assert(field_signatures[jField<F>("VK_QUOTE")] != -1);
		return sat<F>("VK_QUOTE");
	}

	template<typename F = ::jint>
	static auto VK_QUOTEDBL() {
		static_assert(field_signatures[jField<F>("VK_QUOTEDBL")] != -1);
		return sat<F>("VK_QUOTEDBL");
	}

	template<typename F = ::jint>
	static auto VK_R() {
		static_assert(field_signatures[jField<F>("VK_R")] != -1);
		return sat<F>("VK_R");
	}

	template<typename F = ::jint>
	static auto VK_RIGHT() {
		static_assert(field_signatures[jField<F>("VK_RIGHT")] != -1);
		return sat<F>("VK_RIGHT");
	}

	template<typename F = ::jint>
	static auto VK_RIGHT_PARENTHESIS() {
		static_assert(field_signatures[jField<F>("VK_RIGHT_PARENTHESIS")] != -1);
		return sat<F>("VK_RIGHT_PARENTHESIS");
	}

	template<typename F = ::jint>
	static auto VK_ROMAN_CHARACTERS() {
		static_assert(field_signatures[jField<F>("VK_ROMAN_CHARACTERS")] != -1);
		return sat<F>("VK_ROMAN_CHARACTERS");
	}

	template<typename F = ::jint>
	static auto VK_S() {
		static_assert(field_signatures[jField<F>("VK_S")] != -1);
		return sat<F>("VK_S");
	}

	template<typename F = ::jint>
	static auto VK_SCROLL_LOCK() {
		static_assert(field_signatures[jField<F>("VK_SCROLL_LOCK")] != -1);
		return sat<F>("VK_SCROLL_LOCK");
	}

	template<typename F = ::jint>
	static auto VK_SEMICOLON() {
		static_assert(field_signatures[jField<F>("VK_SEMICOLON")] != -1);
		return sat<F>("VK_SEMICOLON");
	}

	template<typename F = ::jint>
	static auto VK_SEPARATER() {
		static_assert(field_signatures[jField<F>("VK_SEPARATER")] != -1);
		return sat<F>("VK_SEPARATER");
	}

	template<typename F = ::jint>
	static auto VK_SEPARATOR() {
		static_assert(field_signatures[jField<F>("VK_SEPARATOR")] != -1);
		return sat<F>("VK_SEPARATOR");
	}

	template<typename F = ::jint>
	static auto VK_SHIFT() {
		static_assert(field_signatures[jField<F>("VK_SHIFT")] != -1);
		return sat<F>("VK_SHIFT");
	}

	template<typename F = ::jint>
	static auto VK_SLASH() {
		static_assert(field_signatures[jField<F>("VK_SLASH")] != -1);
		return sat<F>("VK_SLASH");
	}

	template<typename F = ::jint>
	static auto VK_SPACE() {
		static_assert(field_signatures[jField<F>("VK_SPACE")] != -1);
		return sat<F>("VK_SPACE");
	}

	template<typename F = ::jint>
	static auto VK_STOP() {
		static_assert(field_signatures[jField<F>("VK_STOP")] != -1);
		return sat<F>("VK_STOP");
	}

	template<typename F = ::jint>
	static auto VK_SUBTRACT() {
		static_assert(field_signatures[jField<F>("VK_SUBTRACT")] != -1);
		return sat<F>("VK_SUBTRACT");
	}

	template<typename F = ::jint>
	static auto VK_T() {
		static_assert(field_signatures[jField<F>("VK_T")] != -1);
		return sat<F>("VK_T");
	}

	template<typename F = ::jint>
	static auto VK_TAB() {
		static_assert(field_signatures[jField<F>("VK_TAB")] != -1);
		return sat<F>("VK_TAB");
	}

	template<typename F = ::jint>
	static auto VK_U() {
		static_assert(field_signatures[jField<F>("VK_U")] != -1);
		return sat<F>("VK_U");
	}

	template<typename F = ::jint>
	static auto VK_UNDEFINED() {
		static_assert(field_signatures[jField<F>("VK_UNDEFINED")] != -1);
		return sat<F>("VK_UNDEFINED");
	}

	template<typename F = ::jint>
	static auto VK_UNDERSCORE() {
		static_assert(field_signatures[jField<F>("VK_UNDERSCORE")] != -1);
		return sat<F>("VK_UNDERSCORE");
	}

	template<typename F = ::jint>
	static auto VK_UNDO() {
		static_assert(field_signatures[jField<F>("VK_UNDO")] != -1);
		return sat<F>("VK_UNDO");
	}

	template<typename F = ::jint>
	static auto VK_UP() {
		static_assert(field_signatures[jField<F>("VK_UP")] != -1);
		return sat<F>("VK_UP");
	}

	template<typename F = ::jint>
	static auto VK_V() {
		static_assert(field_signatures[jField<F>("VK_V")] != -1);
		return sat<F>("VK_V");
	}

	template<typename F = ::jint>
	static auto VK_W() {
		static_assert(field_signatures[jField<F>("VK_W")] != -1);
		return sat<F>("VK_W");
	}

	template<typename F = ::jint>
	static auto VK_WINDOWS() {
		static_assert(field_signatures[jField<F>("VK_WINDOWS")] != -1);
		return sat<F>("VK_WINDOWS");
	}

	template<typename F = ::jint>
	static auto VK_X() {
		static_assert(field_signatures[jField<F>("VK_X")] != -1);
		return sat<F>("VK_X");
	}

	template<typename F = ::jint>
	static auto VK_Y() {
		static_assert(field_signatures[jField<F>("VK_Y")] != -1);
		return sat<F>("VK_Y");
	}

	template<typename F = ::jint>
	static auto VK_Z() {
		static_assert(field_signatures[jField<F>("VK_Z")] != -1);
		return sat<F>("VK_Z");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::Component, ::jint, ::jlong, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::java::awt::Component, ::jint, ::jlong, ::jint, ::jint, ::jchar)>(), //
		jConstructor<::jvoid(::java::awt::Component, ::jint, ::jlong, ::jint, ::jint, ::jchar, ::jint)>(), //
		jMethod<::jint()>("getExtendedKeyCode"), //
		jMethod<::jint(::jint)>("getExtendedKeyCodeForChar"), //
		jMethod<::jchar()>("getKeyChar"), //
		jMethod<::jint()>("getKeyCode"), //
		jMethod<::jint()>("getKeyLocation"), //
		jMethod<::java::lang::String(::jint)>("getKeyModifiersText"), //
		jMethod<::java::lang::String(::jint)>("getKeyText"), //
		jMethod<::jboolean()>("isActionKey"), //
		jMethod<::java::lang::String()>("paramString"), //
		jMethod<::jvoid(::jchar)>("setKeyChar"), //
		jMethod<::jvoid(::jint)>("setKeyCode"), //
		jMethod<::jvoid(::jint)>("setModifiers"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getExtendedKeyCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExtendedKeyCode")] != -1);
		return call<R>("getExtendedKeyCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getExtendedKeyCodeForChar(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExtendedKeyCodeForChar")] != -1);
		return scall<R>("getExtendedKeyCodeForChar", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto getKeyChar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeyChar")] != -1);
		return call<R>("getKeyChar", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getKeyCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeyCode")] != -1);
		return call<R>("getKeyCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getKeyLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeyLocation")] != -1);
		return call<R>("getKeyLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getKeyModifiersText(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeyModifiersText")] != -1);
		return scall<R>("getKeyModifiersText", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getKeyText(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeyText")] != -1);
		return scall<R>("getKeyText", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isActionKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isActionKey")] != -1);
		return call<R>("isActionKey", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto paramString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paramString")] != -1);
		return call<R>("paramString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setKeyChar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setKeyChar")] != -1);
		return call<R>("setKeyChar", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setKeyCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setKeyCode")] != -1);
		return call<R>("setKeyCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setModifiers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setModifiers")] != -1);
		return call<R>("setModifiers", std::forward<Args>(args)...);
	}

};

#endif
