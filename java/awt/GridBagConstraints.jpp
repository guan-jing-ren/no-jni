#ifndef java_awt_GridBagConstraints_HPP
#define java_awt_GridBagConstraints_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::GridBagConstraints : public jObject<::java::awt::GridBagConstraints, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "GridBagConstraints";

	constexpr static Enume field_signatures{
		jField<::jint>("ABOVE_BASELINE"), //
		jField<::jint>("ABOVE_BASELINE_LEADING"), //
		jField<::jint>("ABOVE_BASELINE_TRAILING"), //
		jField<::jint>("BASELINE"), //
		jField<::jint>("BASELINE_LEADING"), //
		jField<::jint>("BASELINE_TRAILING"), //
		jField<::jint>("BELOW_BASELINE"), //
		jField<::jint>("BELOW_BASELINE_LEADING"), //
		jField<::jint>("BELOW_BASELINE_TRAILING"), //
		jField<::jint>("BOTH"), //
		jField<::jint>("CENTER"), //
		jField<::jint>("EAST"), //
		jField<::jint>("FIRST_LINE_END"), //
		jField<::jint>("FIRST_LINE_START"), //
		jField<::jint>("HORIZONTAL"), //
		jField<::jint>("LAST_LINE_END"), //
		jField<::jint>("LAST_LINE_START"), //
		jField<::jint>("LINE_END"), //
		jField<::jint>("LINE_START"), //
		jField<::jint>("NONE"), //
		jField<::jint>("NORTH"), //
		jField<::jint>("NORTHEAST"), //
		jField<::jint>("NORTHWEST"), //
		jField<::jint>("PAGE_END"), //
		jField<::jint>("PAGE_START"), //
		jField<::jint>("RELATIVE"), //
		jField<::jint>("REMAINDER"), //
		jField<::jint>("SOUTH"), //
		jField<::jint>("SOUTHEAST"), //
		jField<::jint>("SOUTHWEST"), //
		jField<::jint>("VERTICAL"), //
		jField<::jint>("WEST"), //
		jField<::jint>("anchor"), //
		jField<::jint>("fill"), //
		jField<::jint>("gridheight"), //
		jField<::jint>("gridwidth"), //
		jField<::jint>("gridx"), //
		jField<::jint>("gridy"), //
		jField<::java::awt::Insets>("insets"), //
		jField<::jint>("ipadx"), //
		jField<::jint>("ipady"), //
		jField<::jdouble>("weightx"), //
		jField<::jdouble>("weighty"), //
	};

	template<typename F = ::jint>
	static auto ABOVE_BASELINE() {
		static_assert(field_signatures[jField<F>("ABOVE_BASELINE")] != -1);
		return sat<F>("ABOVE_BASELINE");
	}

	template<typename F = ::jint>
	static auto ABOVE_BASELINE_LEADING() {
		static_assert(field_signatures[jField<F>("ABOVE_BASELINE_LEADING")] != -1);
		return sat<F>("ABOVE_BASELINE_LEADING");
	}

	template<typename F = ::jint>
	static auto ABOVE_BASELINE_TRAILING() {
		static_assert(field_signatures[jField<F>("ABOVE_BASELINE_TRAILING")] != -1);
		return sat<F>("ABOVE_BASELINE_TRAILING");
	}

	template<typename F = ::jint>
	static auto BASELINE() {
		static_assert(field_signatures[jField<F>("BASELINE")] != -1);
		return sat<F>("BASELINE");
	}

	template<typename F = ::jint>
	static auto BASELINE_LEADING() {
		static_assert(field_signatures[jField<F>("BASELINE_LEADING")] != -1);
		return sat<F>("BASELINE_LEADING");
	}

	template<typename F = ::jint>
	static auto BASELINE_TRAILING() {
		static_assert(field_signatures[jField<F>("BASELINE_TRAILING")] != -1);
		return sat<F>("BASELINE_TRAILING");
	}

	template<typename F = ::jint>
	static auto BELOW_BASELINE() {
		static_assert(field_signatures[jField<F>("BELOW_BASELINE")] != -1);
		return sat<F>("BELOW_BASELINE");
	}

	template<typename F = ::jint>
	static auto BELOW_BASELINE_LEADING() {
		static_assert(field_signatures[jField<F>("BELOW_BASELINE_LEADING")] != -1);
		return sat<F>("BELOW_BASELINE_LEADING");
	}

	template<typename F = ::jint>
	static auto BELOW_BASELINE_TRAILING() {
		static_assert(field_signatures[jField<F>("BELOW_BASELINE_TRAILING")] != -1);
		return sat<F>("BELOW_BASELINE_TRAILING");
	}

	template<typename F = ::jint>
	static auto BOTH() {
		static_assert(field_signatures[jField<F>("BOTH")] != -1);
		return sat<F>("BOTH");
	}

	template<typename F = ::jint>
	static auto CENTER() {
		static_assert(field_signatures[jField<F>("CENTER")] != -1);
		return sat<F>("CENTER");
	}

	template<typename F = ::jint>
	static auto EAST() {
		static_assert(field_signatures[jField<F>("EAST")] != -1);
		return sat<F>("EAST");
	}

	template<typename F = ::jint>
	static auto FIRST_LINE_END() {
		static_assert(field_signatures[jField<F>("FIRST_LINE_END")] != -1);
		return sat<F>("FIRST_LINE_END");
	}

	template<typename F = ::jint>
	static auto FIRST_LINE_START() {
		static_assert(field_signatures[jField<F>("FIRST_LINE_START")] != -1);
		return sat<F>("FIRST_LINE_START");
	}

	template<typename F = ::jint>
	static auto HORIZONTAL() {
		static_assert(field_signatures[jField<F>("HORIZONTAL")] != -1);
		return sat<F>("HORIZONTAL");
	}

	template<typename F = ::jint>
	static auto LAST_LINE_END() {
		static_assert(field_signatures[jField<F>("LAST_LINE_END")] != -1);
		return sat<F>("LAST_LINE_END");
	}

	template<typename F = ::jint>
	static auto LAST_LINE_START() {
		static_assert(field_signatures[jField<F>("LAST_LINE_START")] != -1);
		return sat<F>("LAST_LINE_START");
	}

	template<typename F = ::jint>
	static auto LINE_END() {
		static_assert(field_signatures[jField<F>("LINE_END")] != -1);
		return sat<F>("LINE_END");
	}

	template<typename F = ::jint>
	static auto LINE_START() {
		static_assert(field_signatures[jField<F>("LINE_START")] != -1);
		return sat<F>("LINE_START");
	}

	template<typename F = ::jint>
	static auto NONE() {
		static_assert(field_signatures[jField<F>("NONE")] != -1);
		return sat<F>("NONE");
	}

	template<typename F = ::jint>
	static auto NORTH() {
		static_assert(field_signatures[jField<F>("NORTH")] != -1);
		return sat<F>("NORTH");
	}

	template<typename F = ::jint>
	static auto NORTHEAST() {
		static_assert(field_signatures[jField<F>("NORTHEAST")] != -1);
		return sat<F>("NORTHEAST");
	}

	template<typename F = ::jint>
	static auto NORTHWEST() {
		static_assert(field_signatures[jField<F>("NORTHWEST")] != -1);
		return sat<F>("NORTHWEST");
	}

	template<typename F = ::jint>
	static auto PAGE_END() {
		static_assert(field_signatures[jField<F>("PAGE_END")] != -1);
		return sat<F>("PAGE_END");
	}

	template<typename F = ::jint>
	static auto PAGE_START() {
		static_assert(field_signatures[jField<F>("PAGE_START")] != -1);
		return sat<F>("PAGE_START");
	}

	template<typename F = ::jint>
	static auto RELATIVE() {
		static_assert(field_signatures[jField<F>("RELATIVE")] != -1);
		return sat<F>("RELATIVE");
	}

	template<typename F = ::jint>
	static auto REMAINDER() {
		static_assert(field_signatures[jField<F>("REMAINDER")] != -1);
		return sat<F>("REMAINDER");
	}

	template<typename F = ::jint>
	static auto SOUTH() {
		static_assert(field_signatures[jField<F>("SOUTH")] != -1);
		return sat<F>("SOUTH");
	}

	template<typename F = ::jint>
	static auto SOUTHEAST() {
		static_assert(field_signatures[jField<F>("SOUTHEAST")] != -1);
		return sat<F>("SOUTHEAST");
	}

	template<typename F = ::jint>
	static auto SOUTHWEST() {
		static_assert(field_signatures[jField<F>("SOUTHWEST")] != -1);
		return sat<F>("SOUTHWEST");
	}

	template<typename F = ::jint>
	static auto VERTICAL() {
		static_assert(field_signatures[jField<F>("VERTICAL")] != -1);
		return sat<F>("VERTICAL");
	}

	template<typename F = ::jint>
	static auto WEST() {
		static_assert(field_signatures[jField<F>("WEST")] != -1);
		return sat<F>("WEST");
	}

	template<typename F = ::jint>
	auto anchor() const {
		static_assert(field_signatures[jField<F>("anchor")] != -1);
		return at<F>("anchor");
	}

	template<typename F = ::jint>
	auto fill() const {
		static_assert(field_signatures[jField<F>("fill")] != -1);
		return at<F>("fill");
	}

	template<typename F = ::jint>
	auto gridheight() const {
		static_assert(field_signatures[jField<F>("gridheight")] != -1);
		return at<F>("gridheight");
	}

	template<typename F = ::jint>
	auto gridwidth() const {
		static_assert(field_signatures[jField<F>("gridwidth")] != -1);
		return at<F>("gridwidth");
	}

	template<typename F = ::jint>
	auto gridx() const {
		static_assert(field_signatures[jField<F>("gridx")] != -1);
		return at<F>("gridx");
	}

	template<typename F = ::jint>
	auto gridy() const {
		static_assert(field_signatures[jField<F>("gridy")] != -1);
		return at<F>("gridy");
	}

	template<typename F = ::java::awt::Insets>
	auto insets() const {
		static_assert(field_signatures[jField<F>("insets")] != -1);
		return at<F>("insets");
	}

	template<typename F = ::jint>
	auto ipadx() const {
		static_assert(field_signatures[jField<F>("ipadx")] != -1);
		return at<F>("ipadx");
	}

	template<typename F = ::jint>
	auto ipady() const {
		static_assert(field_signatures[jField<F>("ipady")] != -1);
		return at<F>("ipady");
	}

	template<typename F = ::jdouble>
	auto weightx() const {
		static_assert(field_signatures[jField<F>("weightx")] != -1);
		return at<F>("weightx");
	}

	template<typename F = ::jdouble>
	auto weighty() const {
		static_assert(field_signatures[jField<F>("weighty")] != -1);
		return at<F>("weighty");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint, ::jint, ::jint, ::jint, ::jdouble, ::jdouble, ::jint, ::jint, ::java::awt::Insets, ::jint, ::jint)>(), //
		jMethod<::java::lang::Object()>("clone"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

};

#endif
