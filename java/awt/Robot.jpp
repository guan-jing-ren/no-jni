#ifndef java_awt_Robot_HPP
#define java_awt_Robot_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::Robot : public jObject<::java::awt::Robot, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "Robot";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::awt::GraphicsDevice)>(), //
		jMethod<::java::awt::image::BufferedImage(::java::awt::Rectangle)>("createScreenCapture"), //
		jMethod<::jvoid(::jint)>("delay"), //
		jMethod<::jint()>("getAutoDelay"), //
		jMethod<::java::awt::Color(::jint, ::jint)>("getPixelColor"), //
		jMethod<::jboolean()>("isAutoWaitForIdle"), //
		jMethod<::jvoid(::jint)>("keyPress"), //
		jMethod<::jvoid(::jint)>("keyRelease"), //
		jMethod<::jvoid(::jint, ::jint)>("mouseMove"), //
		jMethod<::jvoid(::jint)>("mousePress"), //
		jMethod<::jvoid(::jint)>("mouseRelease"), //
		jMethod<::jvoid(::jint)>("mouseWheel"), //
		jMethod<::jvoid(::jint)>("setAutoDelay"), //
		jMethod<::jvoid(::jboolean)>("setAutoWaitForIdle"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid()>("waitForIdle"), //
	};

	template<typename R = ::java::awt::image::BufferedImage, typename... Args>
	auto createScreenCapture(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createScreenCapture")] != -1);
		return call<R>("createScreenCapture", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto delay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("delay")] != -1);
		return call<R>("delay", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAutoDelay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAutoDelay")] != -1);
		return call<R>("getAutoDelay", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getPixelColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPixelColor")] != -1);
		return call<R>("getPixelColor", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAutoWaitForIdle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAutoWaitForIdle")] != -1);
		return call<R>("isAutoWaitForIdle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto keyPress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("keyPress")] != -1);
		return call<R>("keyPress", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto keyRelease(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("keyRelease")] != -1);
		return call<R>("keyRelease", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mouseMove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mouseMove")] != -1);
		return call<R>("mouseMove", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mousePress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mousePress")] != -1);
		return call<R>("mousePress", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mouseRelease(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mouseRelease")] != -1);
		return call<R>("mouseRelease", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mouseWheel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mouseWheel")] != -1);
		return call<R>("mouseWheel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAutoDelay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAutoDelay")] != -1);
		return call<R>("setAutoDelay", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAutoWaitForIdle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAutoWaitForIdle")] != -1);
		return call<R>("setAutoWaitForIdle", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto waitForIdle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("waitForIdle")] != -1);
		return call<R>("waitForIdle", std::forward<Args>(args)...);
	}

};

#endif
