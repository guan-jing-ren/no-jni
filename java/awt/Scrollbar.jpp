#ifndef java_awt_Scrollbar_HPP
#define java_awt_Scrollbar_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::Scrollbar : public jObject<::java::awt::Scrollbar, ::java::awt::Component> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "Scrollbar";

	constexpr static Enume field_signatures{
		jField<::jint>("HORIZONTAL"), //
		jField<::jint>("VERTICAL"), //
	};

	template<typename F = ::jint>
	static auto HORIZONTAL() {
		static_assert(field_signatures[jField<F>("HORIZONTAL")] != -1);
		return sat<F>("HORIZONTAL");
	}

	template<typename F = ::jint>
	static auto VERTICAL() {
		static_assert(field_signatures[jField<F>("VERTICAL")] != -1);
		return sat<F>("VERTICAL");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint)>(), //
		jConstructor<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint)>(), //
		jMethod<::jvoid(::java::awt::event::AdjustmentListener)>("addAdjustmentListener"), //
		jMethod<::jvoid()>("addNotify"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::java::awt::event::AdjustmentListener *()>("getAdjustmentListeners"), //
		jMethod<::jint()>("getBlockIncrement"), //
		jMethod<::jint()>("getLineIncrement"), //
		jMethod<::java::util::EventListener *(::java::lang::Class)>("getListeners"), //
		jMethod<::jint()>("getMaximum"), //
		jMethod<::jint()>("getMinimum"), //
		jMethod<::jint()>("getOrientation"), //
		jMethod<::jint()>("getPageIncrement"), //
		jMethod<::jint()>("getUnitIncrement"), //
		jMethod<::jint()>("getValue"), //
		jMethod<::jboolean()>("getValueIsAdjusting"), //
		jMethod<::jint()>("getVisible"), //
		jMethod<::jint()>("getVisibleAmount"), //
		jMethod<::jvoid(::java::awt::event::AdjustmentListener)>("removeAdjustmentListener"), //
		jMethod<::jvoid(::jint)>("setBlockIncrement"), //
		jMethod<::jvoid(::jint)>("setLineIncrement"), //
		jMethod<::jvoid(::jint)>("setMaximum"), //
		jMethod<::jvoid(::jint)>("setMinimum"), //
		jMethod<::jvoid(::jint)>("setOrientation"), //
		jMethod<::jvoid(::jint)>("setPageIncrement"), //
		jMethod<::jvoid(::jint)>("setUnitIncrement"), //
		jMethod<::jvoid(::jint)>("setValue"), //
		jMethod<::jvoid(::jboolean)>("setValueIsAdjusting"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("setValues"), //
		jMethod<::jvoid(::jint)>("setVisibleAmount"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addAdjustmentListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addAdjustmentListener")] != -1);
		return call<R>("addAdjustmentListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addNotify")] != -1);
		return call<R>("addNotify", forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::AdjustmentListener *, typename... Args>
	auto getAdjustmentListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAdjustmentListeners")] != -1);
		return call<R>("getAdjustmentListeners", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBlockIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBlockIncrement")] != -1);
		return call<R>("getBlockIncrement", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLineIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLineIncrement")] != -1);
		return call<R>("getLineIncrement", forward<Args>(args)...);
	}

	template<typename R = ::java::util::EventListener *, typename... Args>
	auto getListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getListeners")] != -1);
		return call<R>("getListeners", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaximum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaximum")] != -1);
		return call<R>("getMaximum", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinimum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinimum")] != -1);
		return call<R>("getMinimum", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getOrientation")] != -1);
		return call<R>("getOrientation", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPageIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPageIncrement")] != -1);
		return call<R>("getPageIncrement", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getUnitIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUnitIncrement")] != -1);
		return call<R>("getUnitIncrement", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getValueIsAdjusting(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getValueIsAdjusting")] != -1);
		return call<R>("getValueIsAdjusting", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getVisible")] != -1);
		return call<R>("getVisible", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getVisibleAmount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getVisibleAmount")] != -1);
		return call<R>("getVisibleAmount", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAdjustmentListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeAdjustmentListener")] != -1);
		return call<R>("removeAdjustmentListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBlockIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBlockIncrement")] != -1);
		return call<R>("setBlockIncrement", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLineIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLineIncrement")] != -1);
		return call<R>("setLineIncrement", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaximum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMaximum")] != -1);
		return call<R>("setMaximum", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMinimum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMinimum")] != -1);
		return call<R>("setMinimum", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setOrientation")] != -1);
		return call<R>("setOrientation", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPageIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPageIncrement")] != -1);
		return call<R>("setPageIncrement", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUnitIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setUnitIncrement")] != -1);
		return call<R>("setUnitIncrement", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setValue")] != -1);
		return call<R>("setValue", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValueIsAdjusting(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setValueIsAdjusting")] != -1);
		return call<R>("setValueIsAdjusting", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValues(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setValues")] != -1);
		return call<R>("setValues", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVisibleAmount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setVisibleAmount")] != -1);
		return call<R>("setVisibleAmount", forward<Args>(args)...);
	}

};

#endif
