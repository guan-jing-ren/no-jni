#ifndef java_awt_SystemColor_HPP
#define java_awt_SystemColor_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::SystemColor : public jObject<::java::awt::SystemColor, ::java::awt::Color> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "SystemColor";

	constexpr static Enume field_signatures{
		jField<::jint>("ACTIVE_CAPTION"), //
		jField<::jint>("ACTIVE_CAPTION_BORDER"), //
		jField<::jint>("ACTIVE_CAPTION_TEXT"), //
		jField<::jint>("CONTROL"), //
		jField<::jint>("CONTROL_DK_SHADOW"), //
		jField<::jint>("CONTROL_HIGHLIGHT"), //
		jField<::jint>("CONTROL_LT_HIGHLIGHT"), //
		jField<::jint>("CONTROL_SHADOW"), //
		jField<::jint>("CONTROL_TEXT"), //
		jField<::jint>("DESKTOP"), //
		jField<::jint>("INACTIVE_CAPTION"), //
		jField<::jint>("INACTIVE_CAPTION_BORDER"), //
		jField<::jint>("INACTIVE_CAPTION_TEXT"), //
		jField<::jint>("INFO"), //
		jField<::jint>("INFO_TEXT"), //
		jField<::jint>("MENU"), //
		jField<::jint>("MENU_TEXT"), //
		jField<::jint>("NUM_COLORS"), //
		jField<::jint>("SCROLLBAR"), //
		jField<::jint>("TEXT"), //
		jField<::jint>("TEXT_HIGHLIGHT"), //
		jField<::jint>("TEXT_HIGHLIGHT_TEXT"), //
		jField<::jint>("TEXT_INACTIVE_TEXT"), //
		jField<::jint>("TEXT_TEXT"), //
		jField<::jint>("WINDOW"), //
		jField<::jint>("WINDOW_BORDER"), //
		jField<::jint>("WINDOW_TEXT"), //
		jField<::java::awt::SystemColor>("activeCaption"), //
		jField<::java::awt::SystemColor>("activeCaptionBorder"), //
		jField<::java::awt::SystemColor>("activeCaptionText"), //
		jField<::java::awt::SystemColor>("control"), //
		jField<::java::awt::SystemColor>("controlDkShadow"), //
		jField<::java::awt::SystemColor>("controlHighlight"), //
		jField<::java::awt::SystemColor>("controlLtHighlight"), //
		jField<::java::awt::SystemColor>("controlShadow"), //
		jField<::java::awt::SystemColor>("controlText"), //
		jField<::java::awt::SystemColor>("desktop"), //
		jField<::java::awt::SystemColor>("inactiveCaption"), //
		jField<::java::awt::SystemColor>("inactiveCaptionBorder"), //
		jField<::java::awt::SystemColor>("inactiveCaptionText"), //
		jField<::java::awt::SystemColor>("info"), //
		jField<::java::awt::SystemColor>("infoText"), //
		jField<::java::awt::SystemColor>("menu"), //
		jField<::java::awt::SystemColor>("menuText"), //
		jField<::java::awt::SystemColor>("scrollbar"), //
		jField<::java::awt::SystemColor>("text"), //
		jField<::java::awt::SystemColor>("textHighlight"), //
		jField<::java::awt::SystemColor>("textHighlightText"), //
		jField<::java::awt::SystemColor>("textInactiveText"), //
		jField<::java::awt::SystemColor>("textText"), //
		jField<::java::awt::SystemColor>("window"), //
		jField<::java::awt::SystemColor>("windowBorder"), //
		jField<::java::awt::SystemColor>("windowText"), //
	};

	template<typename F = ::jint>
	static auto ACTIVE_CAPTION() {
		static_assert(field_signatures[jField<F>("ACTIVE_CAPTION")] != -1);
		return sat<F>("ACTIVE_CAPTION");
	}

	template<typename F = ::jint>
	static auto ACTIVE_CAPTION_BORDER() {
		static_assert(field_signatures[jField<F>("ACTIVE_CAPTION_BORDER")] != -1);
		return sat<F>("ACTIVE_CAPTION_BORDER");
	}

	template<typename F = ::jint>
	static auto ACTIVE_CAPTION_TEXT() {
		static_assert(field_signatures[jField<F>("ACTIVE_CAPTION_TEXT")] != -1);
		return sat<F>("ACTIVE_CAPTION_TEXT");
	}

	template<typename F = ::jint>
	static auto CONTROL() {
		static_assert(field_signatures[jField<F>("CONTROL")] != -1);
		return sat<F>("CONTROL");
	}

	template<typename F = ::jint>
	static auto CONTROL_DK_SHADOW() {
		static_assert(field_signatures[jField<F>("CONTROL_DK_SHADOW")] != -1);
		return sat<F>("CONTROL_DK_SHADOW");
	}

	template<typename F = ::jint>
	static auto CONTROL_HIGHLIGHT() {
		static_assert(field_signatures[jField<F>("CONTROL_HIGHLIGHT")] != -1);
		return sat<F>("CONTROL_HIGHLIGHT");
	}

	template<typename F = ::jint>
	static auto CONTROL_LT_HIGHLIGHT() {
		static_assert(field_signatures[jField<F>("CONTROL_LT_HIGHLIGHT")] != -1);
		return sat<F>("CONTROL_LT_HIGHLIGHT");
	}

	template<typename F = ::jint>
	static auto CONTROL_SHADOW() {
		static_assert(field_signatures[jField<F>("CONTROL_SHADOW")] != -1);
		return sat<F>("CONTROL_SHADOW");
	}

	template<typename F = ::jint>
	static auto CONTROL_TEXT() {
		static_assert(field_signatures[jField<F>("CONTROL_TEXT")] != -1);
		return sat<F>("CONTROL_TEXT");
	}

	template<typename F = ::jint>
	static auto DESKTOP() {
		static_assert(field_signatures[jField<F>("DESKTOP")] != -1);
		return sat<F>("DESKTOP");
	}

	template<typename F = ::jint>
	static auto INACTIVE_CAPTION() {
		static_assert(field_signatures[jField<F>("INACTIVE_CAPTION")] != -1);
		return sat<F>("INACTIVE_CAPTION");
	}

	template<typename F = ::jint>
	static auto INACTIVE_CAPTION_BORDER() {
		static_assert(field_signatures[jField<F>("INACTIVE_CAPTION_BORDER")] != -1);
		return sat<F>("INACTIVE_CAPTION_BORDER");
	}

	template<typename F = ::jint>
	static auto INACTIVE_CAPTION_TEXT() {
		static_assert(field_signatures[jField<F>("INACTIVE_CAPTION_TEXT")] != -1);
		return sat<F>("INACTIVE_CAPTION_TEXT");
	}

	template<typename F = ::jint>
	static auto INFO() {
		static_assert(field_signatures[jField<F>("INFO")] != -1);
		return sat<F>("INFO");
	}

	template<typename F = ::jint>
	static auto INFO_TEXT() {
		static_assert(field_signatures[jField<F>("INFO_TEXT")] != -1);
		return sat<F>("INFO_TEXT");
	}

	template<typename F = ::jint>
	static auto MENU() {
		static_assert(field_signatures[jField<F>("MENU")] != -1);
		return sat<F>("MENU");
	}

	template<typename F = ::jint>
	static auto MENU_TEXT() {
		static_assert(field_signatures[jField<F>("MENU_TEXT")] != -1);
		return sat<F>("MENU_TEXT");
	}

	template<typename F = ::jint>
	static auto NUM_COLORS() {
		static_assert(field_signatures[jField<F>("NUM_COLORS")] != -1);
		return sat<F>("NUM_COLORS");
	}

	template<typename F = ::jint>
	static auto SCROLLBAR() {
		static_assert(field_signatures[jField<F>("SCROLLBAR")] != -1);
		return sat<F>("SCROLLBAR");
	}

	template<typename F = ::jint>
	static auto TEXT() {
		static_assert(field_signatures[jField<F>("TEXT")] != -1);
		return sat<F>("TEXT");
	}

	template<typename F = ::jint>
	static auto TEXT_HIGHLIGHT() {
		static_assert(field_signatures[jField<F>("TEXT_HIGHLIGHT")] != -1);
		return sat<F>("TEXT_HIGHLIGHT");
	}

	template<typename F = ::jint>
	static auto TEXT_HIGHLIGHT_TEXT() {
		static_assert(field_signatures[jField<F>("TEXT_HIGHLIGHT_TEXT")] != -1);
		return sat<F>("TEXT_HIGHLIGHT_TEXT");
	}

	template<typename F = ::jint>
	static auto TEXT_INACTIVE_TEXT() {
		static_assert(field_signatures[jField<F>("TEXT_INACTIVE_TEXT")] != -1);
		return sat<F>("TEXT_INACTIVE_TEXT");
	}

	template<typename F = ::jint>
	static auto TEXT_TEXT() {
		static_assert(field_signatures[jField<F>("TEXT_TEXT")] != -1);
		return sat<F>("TEXT_TEXT");
	}

	template<typename F = ::jint>
	static auto WINDOW() {
		static_assert(field_signatures[jField<F>("WINDOW")] != -1);
		return sat<F>("WINDOW");
	}

	template<typename F = ::jint>
	static auto WINDOW_BORDER() {
		static_assert(field_signatures[jField<F>("WINDOW_BORDER")] != -1);
		return sat<F>("WINDOW_BORDER");
	}

	template<typename F = ::jint>
	static auto WINDOW_TEXT() {
		static_assert(field_signatures[jField<F>("WINDOW_TEXT")] != -1);
		return sat<F>("WINDOW_TEXT");
	}

	template<typename F = ::java::awt::SystemColor>
	static auto activeCaption() {
		static_assert(field_signatures[jField<F>("activeCaption")] != -1);
		return sat<F>("activeCaption");
	}

	template<typename F = ::java::awt::SystemColor>
	static auto activeCaptionBorder() {
		static_assert(field_signatures[jField<F>("activeCaptionBorder")] != -1);
		return sat<F>("activeCaptionBorder");
	}

	template<typename F = ::java::awt::SystemColor>
	static auto activeCaptionText() {
		static_assert(field_signatures[jField<F>("activeCaptionText")] != -1);
		return sat<F>("activeCaptionText");
	}

	template<typename F = ::java::awt::SystemColor>
	static auto control() {
		static_assert(field_signatures[jField<F>("control")] != -1);
		return sat<F>("control");
	}

	template<typename F = ::java::awt::SystemColor>
	static auto controlDkShadow() {
		static_assert(field_signatures[jField<F>("controlDkShadow")] != -1);
		return sat<F>("controlDkShadow");
	}

	template<typename F = ::java::awt::SystemColor>
	static auto controlHighlight() {
		static_assert(field_signatures[jField<F>("controlHighlight")] != -1);
		return sat<F>("controlHighlight");
	}

	template<typename F = ::java::awt::SystemColor>
	static auto controlLtHighlight() {
		static_assert(field_signatures[jField<F>("controlLtHighlight")] != -1);
		return sat<F>("controlLtHighlight");
	}

	template<typename F = ::java::awt::SystemColor>
	static auto controlShadow() {
		static_assert(field_signatures[jField<F>("controlShadow")] != -1);
		return sat<F>("controlShadow");
	}

	template<typename F = ::java::awt::SystemColor>
	static auto controlText() {
		static_assert(field_signatures[jField<F>("controlText")] != -1);
		return sat<F>("controlText");
	}

	template<typename F = ::java::awt::SystemColor>
	static auto desktop() {
		static_assert(field_signatures[jField<F>("desktop")] != -1);
		return sat<F>("desktop");
	}

	template<typename F = ::java::awt::SystemColor>
	static auto inactiveCaption() {
		static_assert(field_signatures[jField<F>("inactiveCaption")] != -1);
		return sat<F>("inactiveCaption");
	}

	template<typename F = ::java::awt::SystemColor>
	static auto inactiveCaptionBorder() {
		static_assert(field_signatures[jField<F>("inactiveCaptionBorder")] != -1);
		return sat<F>("inactiveCaptionBorder");
	}

	template<typename F = ::java::awt::SystemColor>
	static auto inactiveCaptionText() {
		static_assert(field_signatures[jField<F>("inactiveCaptionText")] != -1);
		return sat<F>("inactiveCaptionText");
	}

	template<typename F = ::java::awt::SystemColor>
	static auto info() {
		static_assert(field_signatures[jField<F>("info")] != -1);
		return sat<F>("info");
	}

	template<typename F = ::java::awt::SystemColor>
	static auto infoText() {
		static_assert(field_signatures[jField<F>("infoText")] != -1);
		return sat<F>("infoText");
	}

	template<typename F = ::java::awt::SystemColor>
	static auto menu() {
		static_assert(field_signatures[jField<F>("menu")] != -1);
		return sat<F>("menu");
	}

	template<typename F = ::java::awt::SystemColor>
	static auto menuText() {
		static_assert(field_signatures[jField<F>("menuText")] != -1);
		return sat<F>("menuText");
	}

	template<typename F = ::java::awt::SystemColor>
	static auto scrollbar() {
		static_assert(field_signatures[jField<F>("scrollbar")] != -1);
		return sat<F>("scrollbar");
	}

	template<typename F = ::java::awt::SystemColor>
	static auto text() {
		static_assert(field_signatures[jField<F>("text")] != -1);
		return sat<F>("text");
	}

	template<typename F = ::java::awt::SystemColor>
	static auto textHighlight() {
		static_assert(field_signatures[jField<F>("textHighlight")] != -1);
		return sat<F>("textHighlight");
	}

	template<typename F = ::java::awt::SystemColor>
	static auto textHighlightText() {
		static_assert(field_signatures[jField<F>("textHighlightText")] != -1);
		return sat<F>("textHighlightText");
	}

	template<typename F = ::java::awt::SystemColor>
	static auto textInactiveText() {
		static_assert(field_signatures[jField<F>("textInactiveText")] != -1);
		return sat<F>("textInactiveText");
	}

	template<typename F = ::java::awt::SystemColor>
	static auto textText() {
		static_assert(field_signatures[jField<F>("textText")] != -1);
		return sat<F>("textText");
	}

	template<typename F = ::java::awt::SystemColor>
	static auto window() {
		static_assert(field_signatures[jField<F>("window")] != -1);
		return sat<F>("window");
	}

	template<typename F = ::java::awt::SystemColor>
	static auto windowBorder() {
		static_assert(field_signatures[jField<F>("windowBorder")] != -1);
		return sat<F>("windowBorder");
	}

	template<typename F = ::java::awt::SystemColor>
	static auto windowText() {
		static_assert(field_signatures[jField<F>("windowText")] != -1);
		return sat<F>("windowText");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
