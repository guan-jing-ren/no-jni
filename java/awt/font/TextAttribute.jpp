#ifndef java_awt_font_TextAttribute_HPP
#define java_awt_font_TextAttribute_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::font::TextAttribute : public jObject<::java::awt::font::TextAttribute, ::java::text::AttributedCharacterIterator$Attribute> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_font / "TextAttribute";

	constexpr static Enume field_signatures{
		jField<::java::awt::font::TextAttribute>("BACKGROUND"), //
		jField<::java::awt::font::TextAttribute>("BIDI_EMBEDDING"), //
		jField<::java::awt::font::TextAttribute>("CHAR_REPLACEMENT"), //
		jField<::java::awt::font::TextAttribute>("FAMILY"), //
		jField<::java::awt::font::TextAttribute>("FONT"), //
		jField<::java::awt::font::TextAttribute>("FOREGROUND"), //
		jField<::java::awt::font::TextAttribute>("INPUT_METHOD_HIGHLIGHT"), //
		jField<::java::awt::font::TextAttribute>("INPUT_METHOD_UNDERLINE"), //
		jField<::java::awt::font::TextAttribute>("JUSTIFICATION"), //
		jField<::java::lang::Float>("JUSTIFICATION_FULL"), //
		jField<::java::lang::Float>("JUSTIFICATION_NONE"), //
		jField<::java::awt::font::TextAttribute>("KERNING"), //
		jField<::java::lang::Integer>("KERNING_ON"), //
		jField<::java::awt::font::TextAttribute>("LIGATURES"), //
		jField<::java::lang::Integer>("LIGATURES_ON"), //
		jField<::java::awt::font::TextAttribute>("NUMERIC_SHAPING"), //
		jField<::java::awt::font::TextAttribute>("POSTURE"), //
		jField<::java::lang::Float>("POSTURE_OBLIQUE"), //
		jField<::java::lang::Float>("POSTURE_REGULAR"), //
		jField<::java::awt::font::TextAttribute>("RUN_DIRECTION"), //
		jField<::java::lang::Boolean>("RUN_DIRECTION_LTR"), //
		jField<::java::lang::Boolean>("RUN_DIRECTION_RTL"), //
		jField<::java::awt::font::TextAttribute>("SIZE"), //
		jField<::java::awt::font::TextAttribute>("STRIKETHROUGH"), //
		jField<::java::lang::Boolean>("STRIKETHROUGH_ON"), //
		jField<::java::awt::font::TextAttribute>("SUPERSCRIPT"), //
		jField<::java::lang::Integer>("SUPERSCRIPT_SUB"), //
		jField<::java::lang::Integer>("SUPERSCRIPT_SUPER"), //
		jField<::java::awt::font::TextAttribute>("SWAP_COLORS"), //
		jField<::java::lang::Boolean>("SWAP_COLORS_ON"), //
		jField<::java::awt::font::TextAttribute>("TRACKING"), //
		jField<::java::lang::Float>("TRACKING_LOOSE"), //
		jField<::java::lang::Float>("TRACKING_TIGHT"), //
		jField<::java::awt::font::TextAttribute>("TRANSFORM"), //
		jField<::java::awt::font::TextAttribute>("UNDERLINE"), //
		jField<::java::lang::Integer>("UNDERLINE_LOW_DASHED"), //
		jField<::java::lang::Integer>("UNDERLINE_LOW_DOTTED"), //
		jField<::java::lang::Integer>("UNDERLINE_LOW_GRAY"), //
		jField<::java::lang::Integer>("UNDERLINE_LOW_ONE_PIXEL"), //
		jField<::java::lang::Integer>("UNDERLINE_LOW_TWO_PIXEL"), //
		jField<::java::lang::Integer>("UNDERLINE_ON"), //
		jField<::java::awt::font::TextAttribute>("WEIGHT"), //
		jField<::java::lang::Float>("WEIGHT_BOLD"), //
		jField<::java::lang::Float>("WEIGHT_DEMIBOLD"), //
		jField<::java::lang::Float>("WEIGHT_DEMILIGHT"), //
		jField<::java::lang::Float>("WEIGHT_EXTRABOLD"), //
		jField<::java::lang::Float>("WEIGHT_EXTRA_LIGHT"), //
		jField<::java::lang::Float>("WEIGHT_HEAVY"), //
		jField<::java::lang::Float>("WEIGHT_LIGHT"), //
		jField<::java::lang::Float>("WEIGHT_MEDIUM"), //
		jField<::java::lang::Float>("WEIGHT_REGULAR"), //
		jField<::java::lang::Float>("WEIGHT_SEMIBOLD"), //
		jField<::java::lang::Float>("WEIGHT_ULTRABOLD"), //
		jField<::java::awt::font::TextAttribute>("WIDTH"), //
		jField<::java::lang::Float>("WIDTH_CONDENSED"), //
		jField<::java::lang::Float>("WIDTH_EXTENDED"), //
		jField<::java::lang::Float>("WIDTH_REGULAR"), //
		jField<::java::lang::Float>("WIDTH_SEMI_CONDENSED"), //
		jField<::java::lang::Float>("WIDTH_SEMI_EXTENDED"), //
	};

	template<typename F = ::java::awt::font::TextAttribute>
	static auto BACKGROUND() {
		static_assert(field_signatures[jField<F>("BACKGROUND")] != -1);
		return sat<F>("BACKGROUND");
	}

	template<typename F = ::java::awt::font::TextAttribute>
	static auto BIDI_EMBEDDING() {
		static_assert(field_signatures[jField<F>("BIDI_EMBEDDING")] != -1);
		return sat<F>("BIDI_EMBEDDING");
	}

	template<typename F = ::java::awt::font::TextAttribute>
	static auto CHAR_REPLACEMENT() {
		static_assert(field_signatures[jField<F>("CHAR_REPLACEMENT")] != -1);
		return sat<F>("CHAR_REPLACEMENT");
	}

	template<typename F = ::java::awt::font::TextAttribute>
	static auto FAMILY() {
		static_assert(field_signatures[jField<F>("FAMILY")] != -1);
		return sat<F>("FAMILY");
	}

	template<typename F = ::java::awt::font::TextAttribute>
	static auto FONT() {
		static_assert(field_signatures[jField<F>("FONT")] != -1);
		return sat<F>("FONT");
	}

	template<typename F = ::java::awt::font::TextAttribute>
	static auto FOREGROUND() {
		static_assert(field_signatures[jField<F>("FOREGROUND")] != -1);
		return sat<F>("FOREGROUND");
	}

	template<typename F = ::java::awt::font::TextAttribute>
	static auto INPUT_METHOD_HIGHLIGHT() {
		static_assert(field_signatures[jField<F>("INPUT_METHOD_HIGHLIGHT")] != -1);
		return sat<F>("INPUT_METHOD_HIGHLIGHT");
	}

	template<typename F = ::java::awt::font::TextAttribute>
	static auto INPUT_METHOD_UNDERLINE() {
		static_assert(field_signatures[jField<F>("INPUT_METHOD_UNDERLINE")] != -1);
		return sat<F>("INPUT_METHOD_UNDERLINE");
	}

	template<typename F = ::java::awt::font::TextAttribute>
	static auto JUSTIFICATION() {
		static_assert(field_signatures[jField<F>("JUSTIFICATION")] != -1);
		return sat<F>("JUSTIFICATION");
	}

	template<typename F = ::java::lang::Float>
	static auto JUSTIFICATION_FULL() {
		static_assert(field_signatures[jField<F>("JUSTIFICATION_FULL")] != -1);
		return sat<F>("JUSTIFICATION_FULL");
	}

	template<typename F = ::java::lang::Float>
	static auto JUSTIFICATION_NONE() {
		static_assert(field_signatures[jField<F>("JUSTIFICATION_NONE")] != -1);
		return sat<F>("JUSTIFICATION_NONE");
	}

	template<typename F = ::java::awt::font::TextAttribute>
	static auto KERNING() {
		static_assert(field_signatures[jField<F>("KERNING")] != -1);
		return sat<F>("KERNING");
	}

	template<typename F = ::java::lang::Integer>
	static auto KERNING_ON() {
		static_assert(field_signatures[jField<F>("KERNING_ON")] != -1);
		return sat<F>("KERNING_ON");
	}

	template<typename F = ::java::awt::font::TextAttribute>
	static auto LIGATURES() {
		static_assert(field_signatures[jField<F>("LIGATURES")] != -1);
		return sat<F>("LIGATURES");
	}

	template<typename F = ::java::lang::Integer>
	static auto LIGATURES_ON() {
		static_assert(field_signatures[jField<F>("LIGATURES_ON")] != -1);
		return sat<F>("LIGATURES_ON");
	}

	template<typename F = ::java::awt::font::TextAttribute>
	static auto NUMERIC_SHAPING() {
		static_assert(field_signatures[jField<F>("NUMERIC_SHAPING")] != -1);
		return sat<F>("NUMERIC_SHAPING");
	}

	template<typename F = ::java::awt::font::TextAttribute>
	static auto POSTURE() {
		static_assert(field_signatures[jField<F>("POSTURE")] != -1);
		return sat<F>("POSTURE");
	}

	template<typename F = ::java::lang::Float>
	static auto POSTURE_OBLIQUE() {
		static_assert(field_signatures[jField<F>("POSTURE_OBLIQUE")] != -1);
		return sat<F>("POSTURE_OBLIQUE");
	}

	template<typename F = ::java::lang::Float>
	static auto POSTURE_REGULAR() {
		static_assert(field_signatures[jField<F>("POSTURE_REGULAR")] != -1);
		return sat<F>("POSTURE_REGULAR");
	}

	template<typename F = ::java::awt::font::TextAttribute>
	static auto RUN_DIRECTION() {
		static_assert(field_signatures[jField<F>("RUN_DIRECTION")] != -1);
		return sat<F>("RUN_DIRECTION");
	}

	template<typename F = ::java::lang::Boolean>
	static auto RUN_DIRECTION_LTR() {
		static_assert(field_signatures[jField<F>("RUN_DIRECTION_LTR")] != -1);
		return sat<F>("RUN_DIRECTION_LTR");
	}

	template<typename F = ::java::lang::Boolean>
	static auto RUN_DIRECTION_RTL() {
		static_assert(field_signatures[jField<F>("RUN_DIRECTION_RTL")] != -1);
		return sat<F>("RUN_DIRECTION_RTL");
	}

	template<typename F = ::java::awt::font::TextAttribute>
	static auto SIZE() {
		static_assert(field_signatures[jField<F>("SIZE")] != -1);
		return sat<F>("SIZE");
	}

	template<typename F = ::java::awt::font::TextAttribute>
	static auto STRIKETHROUGH() {
		static_assert(field_signatures[jField<F>("STRIKETHROUGH")] != -1);
		return sat<F>("STRIKETHROUGH");
	}

	template<typename F = ::java::lang::Boolean>
	static auto STRIKETHROUGH_ON() {
		static_assert(field_signatures[jField<F>("STRIKETHROUGH_ON")] != -1);
		return sat<F>("STRIKETHROUGH_ON");
	}

	template<typename F = ::java::awt::font::TextAttribute>
	static auto SUPERSCRIPT() {
		static_assert(field_signatures[jField<F>("SUPERSCRIPT")] != -1);
		return sat<F>("SUPERSCRIPT");
	}

	template<typename F = ::java::lang::Integer>
	static auto SUPERSCRIPT_SUB() {
		static_assert(field_signatures[jField<F>("SUPERSCRIPT_SUB")] != -1);
		return sat<F>("SUPERSCRIPT_SUB");
	}

	template<typename F = ::java::lang::Integer>
	static auto SUPERSCRIPT_SUPER() {
		static_assert(field_signatures[jField<F>("SUPERSCRIPT_SUPER")] != -1);
		return sat<F>("SUPERSCRIPT_SUPER");
	}

	template<typename F = ::java::awt::font::TextAttribute>
	static auto SWAP_COLORS() {
		static_assert(field_signatures[jField<F>("SWAP_COLORS")] != -1);
		return sat<F>("SWAP_COLORS");
	}

	template<typename F = ::java::lang::Boolean>
	static auto SWAP_COLORS_ON() {
		static_assert(field_signatures[jField<F>("SWAP_COLORS_ON")] != -1);
		return sat<F>("SWAP_COLORS_ON");
	}

	template<typename F = ::java::awt::font::TextAttribute>
	static auto TRACKING() {
		static_assert(field_signatures[jField<F>("TRACKING")] != -1);
		return sat<F>("TRACKING");
	}

	template<typename F = ::java::lang::Float>
	static auto TRACKING_LOOSE() {
		static_assert(field_signatures[jField<F>("TRACKING_LOOSE")] != -1);
		return sat<F>("TRACKING_LOOSE");
	}

	template<typename F = ::java::lang::Float>
	static auto TRACKING_TIGHT() {
		static_assert(field_signatures[jField<F>("TRACKING_TIGHT")] != -1);
		return sat<F>("TRACKING_TIGHT");
	}

	template<typename F = ::java::awt::font::TextAttribute>
	static auto TRANSFORM() {
		static_assert(field_signatures[jField<F>("TRANSFORM")] != -1);
		return sat<F>("TRANSFORM");
	}

	template<typename F = ::java::awt::font::TextAttribute>
	static auto UNDERLINE() {
		static_assert(field_signatures[jField<F>("UNDERLINE")] != -1);
		return sat<F>("UNDERLINE");
	}

	template<typename F = ::java::lang::Integer>
	static auto UNDERLINE_LOW_DASHED() {
		static_assert(field_signatures[jField<F>("UNDERLINE_LOW_DASHED")] != -1);
		return sat<F>("UNDERLINE_LOW_DASHED");
	}

	template<typename F = ::java::lang::Integer>
	static auto UNDERLINE_LOW_DOTTED() {
		static_assert(field_signatures[jField<F>("UNDERLINE_LOW_DOTTED")] != -1);
		return sat<F>("UNDERLINE_LOW_DOTTED");
	}

	template<typename F = ::java::lang::Integer>
	static auto UNDERLINE_LOW_GRAY() {
		static_assert(field_signatures[jField<F>("UNDERLINE_LOW_GRAY")] != -1);
		return sat<F>("UNDERLINE_LOW_GRAY");
	}

	template<typename F = ::java::lang::Integer>
	static auto UNDERLINE_LOW_ONE_PIXEL() {
		static_assert(field_signatures[jField<F>("UNDERLINE_LOW_ONE_PIXEL")] != -1);
		return sat<F>("UNDERLINE_LOW_ONE_PIXEL");
	}

	template<typename F = ::java::lang::Integer>
	static auto UNDERLINE_LOW_TWO_PIXEL() {
		static_assert(field_signatures[jField<F>("UNDERLINE_LOW_TWO_PIXEL")] != -1);
		return sat<F>("UNDERLINE_LOW_TWO_PIXEL");
	}

	template<typename F = ::java::lang::Integer>
	static auto UNDERLINE_ON() {
		static_assert(field_signatures[jField<F>("UNDERLINE_ON")] != -1);
		return sat<F>("UNDERLINE_ON");
	}

	template<typename F = ::java::awt::font::TextAttribute>
	static auto WEIGHT() {
		static_assert(field_signatures[jField<F>("WEIGHT")] != -1);
		return sat<F>("WEIGHT");
	}

	template<typename F = ::java::lang::Float>
	static auto WEIGHT_BOLD() {
		static_assert(field_signatures[jField<F>("WEIGHT_BOLD")] != -1);
		return sat<F>("WEIGHT_BOLD");
	}

	template<typename F = ::java::lang::Float>
	static auto WEIGHT_DEMIBOLD() {
		static_assert(field_signatures[jField<F>("WEIGHT_DEMIBOLD")] != -1);
		return sat<F>("WEIGHT_DEMIBOLD");
	}

	template<typename F = ::java::lang::Float>
	static auto WEIGHT_DEMILIGHT() {
		static_assert(field_signatures[jField<F>("WEIGHT_DEMILIGHT")] != -1);
		return sat<F>("WEIGHT_DEMILIGHT");
	}

	template<typename F = ::java::lang::Float>
	static auto WEIGHT_EXTRABOLD() {
		static_assert(field_signatures[jField<F>("WEIGHT_EXTRABOLD")] != -1);
		return sat<F>("WEIGHT_EXTRABOLD");
	}

	template<typename F = ::java::lang::Float>
	static auto WEIGHT_EXTRA_LIGHT() {
		static_assert(field_signatures[jField<F>("WEIGHT_EXTRA_LIGHT")] != -1);
		return sat<F>("WEIGHT_EXTRA_LIGHT");
	}

	template<typename F = ::java::lang::Float>
	static auto WEIGHT_HEAVY() {
		static_assert(field_signatures[jField<F>("WEIGHT_HEAVY")] != -1);
		return sat<F>("WEIGHT_HEAVY");
	}

	template<typename F = ::java::lang::Float>
	static auto WEIGHT_LIGHT() {
		static_assert(field_signatures[jField<F>("WEIGHT_LIGHT")] != -1);
		return sat<F>("WEIGHT_LIGHT");
	}

	template<typename F = ::java::lang::Float>
	static auto WEIGHT_MEDIUM() {
		static_assert(field_signatures[jField<F>("WEIGHT_MEDIUM")] != -1);
		return sat<F>("WEIGHT_MEDIUM");
	}

	template<typename F = ::java::lang::Float>
	static auto WEIGHT_REGULAR() {
		static_assert(field_signatures[jField<F>("WEIGHT_REGULAR")] != -1);
		return sat<F>("WEIGHT_REGULAR");
	}

	template<typename F = ::java::lang::Float>
	static auto WEIGHT_SEMIBOLD() {
		static_assert(field_signatures[jField<F>("WEIGHT_SEMIBOLD")] != -1);
		return sat<F>("WEIGHT_SEMIBOLD");
	}

	template<typename F = ::java::lang::Float>
	static auto WEIGHT_ULTRABOLD() {
		static_assert(field_signatures[jField<F>("WEIGHT_ULTRABOLD")] != -1);
		return sat<F>("WEIGHT_ULTRABOLD");
	}

	template<typename F = ::java::awt::font::TextAttribute>
	static auto WIDTH() {
		static_assert(field_signatures[jField<F>("WIDTH")] != -1);
		return sat<F>("WIDTH");
	}

	template<typename F = ::java::lang::Float>
	static auto WIDTH_CONDENSED() {
		static_assert(field_signatures[jField<F>("WIDTH_CONDENSED")] != -1);
		return sat<F>("WIDTH_CONDENSED");
	}

	template<typename F = ::java::lang::Float>
	static auto WIDTH_EXTENDED() {
		static_assert(field_signatures[jField<F>("WIDTH_EXTENDED")] != -1);
		return sat<F>("WIDTH_EXTENDED");
	}

	template<typename F = ::java::lang::Float>
	static auto WIDTH_REGULAR() {
		static_assert(field_signatures[jField<F>("WIDTH_REGULAR")] != -1);
		return sat<F>("WIDTH_REGULAR");
	}

	template<typename F = ::java::lang::Float>
	static auto WIDTH_SEMI_CONDENSED() {
		static_assert(field_signatures[jField<F>("WIDTH_SEMI_CONDENSED")] != -1);
		return sat<F>("WIDTH_SEMI_CONDENSED");
	}

	template<typename F = ::java::lang::Float>
	static auto WIDTH_SEMI_EXTENDED() {
		static_assert(field_signatures[jField<F>("WIDTH_SEMI_EXTENDED")] != -1);
		return sat<F>("WIDTH_SEMI_EXTENDED");
	}

	constexpr static Enume method_signatures{
		cexprstr{"\0"}, //
	};

};

#endif
