#ifndef java_awt_font_TextLayout_HPP
#define java_awt_font_TextLayout_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::font::TextLayout : public jObject<::java::awt::font::TextLayout, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_font / "TextLayout";

	constexpr static Enume field_signatures{
		jField<::java::awt::font::TextLayout$CaretPolicy>("DEFAULT_CARET_POLICY"), //
	};

	template<typename F = ::java::awt::font::TextLayout$CaretPolicy>
	static auto DEFAULT_CARET_POLICY() {
		static_assert(field_signatures[jField<F>("DEFAULT_CARET_POLICY")] != -1);
		return sat<F>("DEFAULT_CARET_POLICY");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::java::awt::Font, ::java::awt::font::FontRenderContext)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::util::Map, ::java::awt::font::FontRenderContext)>(), //
		jConstructor<::jvoid(::java::text::AttributedCharacterIterator, ::java::awt::font::FontRenderContext)>(), //
		jMethod<::jvoid(::java::awt::Graphics2D, ::jfloat, ::jfloat)>("draw"), //
		jMethod<::jboolean(::java::awt::font::TextLayout)>("equals"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jfloat()>("getAdvance"), //
		jMethod<::jfloat()>("getAscent"), //
		jMethod<::jbyte()>("getBaseline"), //
		jMethod<::jfloat *()>("getBaselineOffsets"), //
		jMethod<::java::awt::Shape(::jint, ::jint)>("getBlackBoxBounds"), //
		jMethod<::java::awt::geom::Rectangle2D()>("getBounds"), //
		jMethod<::jfloat *(::java::awt::font::TextHitInfo)>("getCaretInfo"), //
		jMethod<::jfloat *(::java::awt::font::TextHitInfo, ::java::awt::geom::Rectangle2D)>("getCaretInfo"), //
		jMethod<::java::awt::Shape(::java::awt::font::TextHitInfo)>("getCaretShape"), //
		jMethod<::java::awt::Shape(::java::awt::font::TextHitInfo, ::java::awt::geom::Rectangle2D)>("getCaretShape"), //
		jMethod<::java::awt::Shape *(::jint)>("getCaretShapes"), //
		jMethod<::java::awt::Shape *(::jint, ::java::awt::geom::Rectangle2D)>("getCaretShapes"), //
		jMethod<::java::awt::Shape *(::jint, ::java::awt::geom::Rectangle2D, ::java::awt::font::TextLayout$CaretPolicy)>("getCaretShapes"), //
		jMethod<::jint()>("getCharacterCount"), //
		jMethod<::jbyte(::jint)>("getCharacterLevel"), //
		jMethod<::jfloat()>("getDescent"), //
		jMethod<::java::awt::font::TextLayout(::jfloat)>("getJustifiedLayout"), //
		jMethod<::java::awt::font::LayoutPath()>("getLayoutPath"), //
		jMethod<::jfloat()>("getLeading"), //
		jMethod<::java::awt::Shape(::jint, ::jint)>("getLogicalHighlightShape"), //
		jMethod<::java::awt::Shape(::jint, ::jint, ::java::awt::geom::Rectangle2D)>("getLogicalHighlightShape"), //
		jMethod<::jint *(::java::awt::font::TextHitInfo, ::java::awt::font::TextHitInfo)>("getLogicalRangesForVisualSelection"), //
		jMethod<::java::awt::font::TextHitInfo(::jint)>("getNextLeftHit"), //
		jMethod<::java::awt::font::TextHitInfo(::jint, ::java::awt::font::TextLayout$CaretPolicy)>("getNextLeftHit"), //
		jMethod<::java::awt::font::TextHitInfo(::java::awt::font::TextHitInfo)>("getNextLeftHit"), //
		jMethod<::java::awt::font::TextHitInfo(::jint)>("getNextRightHit"), //
		jMethod<::java::awt::font::TextHitInfo(::jint, ::java::awt::font::TextLayout$CaretPolicy)>("getNextRightHit"), //
		jMethod<::java::awt::font::TextHitInfo(::java::awt::font::TextHitInfo)>("getNextRightHit"), //
		jMethod<::java::awt::Shape(::java::awt::geom::AffineTransform)>("getOutline"), //
		jMethod<::java::awt::Rectangle(::java::awt::font::FontRenderContext, ::jfloat, ::jfloat)>("getPixelBounds"), //
		jMethod<::jfloat()>("getVisibleAdvance"), //
		jMethod<::java::awt::Shape(::java::awt::font::TextHitInfo, ::java::awt::font::TextHitInfo)>("getVisualHighlightShape"), //
		jMethod<::java::awt::Shape(::java::awt::font::TextHitInfo, ::java::awt::font::TextHitInfo, ::java::awt::geom::Rectangle2D)>("getVisualHighlightShape"), //
		jMethod<::java::awt::font::TextHitInfo(::java::awt::font::TextHitInfo)>("getVisualOtherHit"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::awt::font::TextHitInfo(::jfloat, ::jfloat)>("hitTestChar"), //
		jMethod<::java::awt::font::TextHitInfo(::jfloat, ::jfloat, ::java::awt::geom::Rectangle2D)>("hitTestChar"), //
		jMethod<::jvoid(::java::awt::font::TextHitInfo, ::java::awt::geom::Point2D)>("hitToPoint"), //
		jMethod<::jboolean()>("isLeftToRight"), //
		jMethod<::jboolean()>("isVertical"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto draw(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("draw")] != -1);
		return call<R>("draw", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getAdvance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAdvance")] != -1);
		return call<R>("getAdvance", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getAscent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAscent")] != -1);
		return call<R>("getAscent", forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto getBaseline(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBaseline")] != -1);
		return call<R>("getBaseline", forward<Args>(args)...);
	}

	template<typename R = ::jfloat *, typename... Args>
	auto getBaselineOffsets(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBaselineOffsets")] != -1);
		return call<R>("getBaselineOffsets", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Shape, typename... Args>
	auto getBlackBoxBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBlackBoxBounds")] != -1);
		return call<R>("getBlackBoxBounds", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Rectangle2D, typename... Args>
	auto getBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBounds")] != -1);
		return call<R>("getBounds", forward<Args>(args)...);
	}

	template<typename R = ::jfloat *, typename... Args>
	auto getCaretInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCaretInfo")] != -1);
		return call<R>("getCaretInfo", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Shape, typename... Args>
	auto getCaretShape(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCaretShape")] != -1);
		return call<R>("getCaretShape", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Shape *, typename... Args>
	auto getCaretShapes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCaretShapes")] != -1);
		return call<R>("getCaretShapes", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCharacterCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCharacterCount")] != -1);
		return call<R>("getCharacterCount", forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto getCharacterLevel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCharacterLevel")] != -1);
		return call<R>("getCharacterLevel", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getDescent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDescent")] != -1);
		return call<R>("getDescent", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::font::TextLayout, typename... Args>
	auto getJustifiedLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getJustifiedLayout")] != -1);
		return call<R>("getJustifiedLayout", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::font::LayoutPath, typename... Args>
	auto getLayoutPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLayoutPath")] != -1);
		return call<R>("getLayoutPath", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getLeading(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLeading")] != -1);
		return call<R>("getLeading", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Shape, typename... Args>
	auto getLogicalHighlightShape(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLogicalHighlightShape")] != -1);
		return call<R>("getLogicalHighlightShape", forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getLogicalRangesForVisualSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLogicalRangesForVisualSelection")] != -1);
		return call<R>("getLogicalRangesForVisualSelection", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::font::TextHitInfo, typename... Args>
	auto getNextLeftHit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNextLeftHit")] != -1);
		return call<R>("getNextLeftHit", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::font::TextHitInfo, typename... Args>
	auto getNextRightHit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNextRightHit")] != -1);
		return call<R>("getNextRightHit", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Shape, typename... Args>
	auto getOutline(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getOutline")] != -1);
		return call<R>("getOutline", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getPixelBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPixelBounds")] != -1);
		return call<R>("getPixelBounds", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getVisibleAdvance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getVisibleAdvance")] != -1);
		return call<R>("getVisibleAdvance", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Shape, typename... Args>
	auto getVisualHighlightShape(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getVisualHighlightShape")] != -1);
		return call<R>("getVisualHighlightShape", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::font::TextHitInfo, typename... Args>
	auto getVisualOtherHit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getVisualOtherHit")] != -1);
		return call<R>("getVisualOtherHit", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::font::TextHitInfo, typename... Args>
	auto hitTestChar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hitTestChar")] != -1);
		return call<R>("hitTestChar", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto hitToPoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hitToPoint")] != -1);
		return call<R>("hitToPoint", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLeftToRight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isLeftToRight")] != -1);
		return call<R>("isLeftToRight", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isVertical(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isVertical")] != -1);
		return call<R>("isVertical", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
