#ifndef java_awt_font_FontRenderContext_HPP
#define java_awt_font_FontRenderContext_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::font::FontRenderContext : public jObject<::java::awt::font::FontRenderContext, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_font / "FontRenderContext";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::geom::AffineTransform, ::java::lang::Object, ::java::lang::Object)>(), //
		jConstructor<::jvoid(::java::awt::geom::AffineTransform, ::jboolean, ::jboolean)>(), //
		jMethod<::jboolean(::java::awt::font::FontRenderContext)>("equals"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::Object()>("getAntiAliasingHint"), //
		jMethod<::java::lang::Object()>("getFractionalMetricsHint"), //
		jMethod<::java::awt::geom::AffineTransform()>("getTransform"), //
		jMethod<::jint()>("getTransformType"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isAntiAliased"), //
		jMethod<::jboolean()>("isTransformed"), //
		jMethod<::jboolean()>("usesFractionalMetrics"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getAntiAliasingHint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAntiAliasingHint")] != -1);
		return call<R>("getAntiAliasingHint", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getFractionalMetricsHint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFractionalMetricsHint")] != -1);
		return call<R>("getFractionalMetricsHint", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::AffineTransform, typename... Args>
	auto getTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransform")] != -1);
		return call<R>("getTransform", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTransformType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransformType")] != -1);
		return call<R>("getTransformType", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAntiAliased(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAntiAliased")] != -1);
		return call<R>("isAntiAliased", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isTransformed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isTransformed")] != -1);
		return call<R>("isTransformed", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto usesFractionalMetrics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("usesFractionalMetrics")] != -1);
		return call<R>("usesFractionalMetrics", std::forward<Args>(args)...);
	}

};

#endif
