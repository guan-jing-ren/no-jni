#ifndef java_awt_font_GlyphMetrics_HPP
#define java_awt_font_GlyphMetrics_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::font::GlyphMetrics : public jObject<::java::awt::font::GlyphMetrics, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_font / "GlyphMetrics";

	constexpr static Enume field_signatures{
		jField<::jbyte>("COMBINING"), //
		jField<::jbyte>("COMPONENT"), //
		jField<::jbyte>("LIGATURE"), //
		jField<::jbyte>("STANDARD"), //
		jField<::jbyte>("WHITESPACE"), //
	};

	template<typename F = ::jbyte>
	static auto COMBINING() {
		static_assert(field_signatures[jField<F>("COMBINING")] != -1);
		return sat<F>("COMBINING");
	}

	template<typename F = ::jbyte>
	static auto COMPONENT() {
		static_assert(field_signatures[jField<F>("COMPONENT")] != -1);
		return sat<F>("COMPONENT");
	}

	template<typename F = ::jbyte>
	static auto LIGATURE() {
		static_assert(field_signatures[jField<F>("LIGATURE")] != -1);
		return sat<F>("LIGATURE");
	}

	template<typename F = ::jbyte>
	static auto STANDARD() {
		static_assert(field_signatures[jField<F>("STANDARD")] != -1);
		return sat<F>("STANDARD");
	}

	template<typename F = ::jbyte>
	static auto WHITESPACE() {
		static_assert(field_signatures[jField<F>("WHITESPACE")] != -1);
		return sat<F>("WHITESPACE");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jfloat, ::java::awt::geom::Rectangle2D, ::jbyte)>(), //
		jConstructor<::jvoid(::jboolean, ::jfloat, ::jfloat, ::java::awt::geom::Rectangle2D, ::jbyte)>(), //
		jMethod<::jfloat()>("getAdvance"), //
		jMethod<::jfloat()>("getAdvanceX"), //
		jMethod<::jfloat()>("getAdvanceY"), //
		jMethod<::java::awt::geom::Rectangle2D()>("getBounds2D"), //
		jMethod<::jfloat()>("getLSB"), //
		jMethod<::jfloat()>("getRSB"), //
		jMethod<::jint()>("getType"), //
		jMethod<::jboolean()>("isCombining"), //
		jMethod<::jboolean()>("isComponent"), //
		jMethod<::jboolean()>("isLigature"), //
		jMethod<::jboolean()>("isStandard"), //
		jMethod<::jboolean()>("isWhitespace"), //
	};

	template<typename R = ::jfloat, typename... Args>
	auto getAdvance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAdvance")] != -1);
		return call<R>("getAdvance", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getAdvanceX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAdvanceX")] != -1);
		return call<R>("getAdvanceX", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getAdvanceY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAdvanceY")] != -1);
		return call<R>("getAdvanceY", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Rectangle2D, typename... Args>
	auto getBounds2D(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds2D")] != -1);
		return call<R>("getBounds2D", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getLSB(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLSB")] != -1);
		return call<R>("getLSB", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getRSB(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRSB")] != -1);
		return call<R>("getRSB", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCombining(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCombining")] != -1);
		return call<R>("isCombining", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isComponent")] != -1);
		return call<R>("isComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLigature(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLigature")] != -1);
		return call<R>("isLigature", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isStandard(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isStandard")] != -1);
		return call<R>("isStandard", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isWhitespace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isWhitespace")] != -1);
		return call<R>("isWhitespace", std::forward<Args>(args)...);
	}

};

#endif
