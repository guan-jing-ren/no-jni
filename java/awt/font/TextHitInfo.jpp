#ifndef java_awt_font_TextHitInfo_HPP
#define java_awt_font_TextHitInfo_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::font::TextHitInfo : public jObject<::java::awt::font::TextHitInfo, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_font / "TextHitInfo";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::awt::font::TextHitInfo(::jint)>("afterOffset"), //
		jMethod<::java::awt::font::TextHitInfo(::jint)>("beforeOffset"), //
		jMethod<::jboolean(::java::awt::font::TextHitInfo)>("equals"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint()>("getCharIndex"), //
		jMethod<::jint()>("getInsertionIndex"), //
		jMethod<::java::awt::font::TextHitInfo(::jint)>("getOffsetHit"), //
		jMethod<::java::awt::font::TextHitInfo()>("getOtherHit"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isLeadingEdge"), //
		jMethod<::java::awt::font::TextHitInfo(::jint)>("leading"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::awt::font::TextHitInfo(::jint)>("trailing"), //
	};

	template<typename R = ::java::awt::font::TextHitInfo, typename... Args>
	static auto afterOffset(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("afterOffset")] != -1);
		return scall<R>("afterOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::font::TextHitInfo, typename... Args>
	static auto beforeOffset(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("beforeOffset")] != -1);
		return scall<R>("beforeOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCharIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCharIndex")] != -1);
		return call<R>("getCharIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getInsertionIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInsertionIndex")] != -1);
		return call<R>("getInsertionIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::font::TextHitInfo, typename... Args>
	auto getOffsetHit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOffsetHit")] != -1);
		return call<R>("getOffsetHit", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::font::TextHitInfo, typename... Args>
	auto getOtherHit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOtherHit")] != -1);
		return call<R>("getOtherHit", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLeadingEdge(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLeadingEdge")] != -1);
		return call<R>("isLeadingEdge", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::font::TextHitInfo, typename... Args>
	static auto leading(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("leading")] != -1);
		return scall<R>("leading", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::font::TextHitInfo, typename... Args>
	static auto trailing(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("trailing")] != -1);
		return scall<R>("trailing", std::forward<Args>(args)...);
	}

};

#endif
