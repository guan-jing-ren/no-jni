#ifndef java_awt_font_NumericShaper$Range_HPP
#define java_awt_font_NumericShaper$Range_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::font::NumericShaper$Range : public jObject<::java::awt::font::NumericShaper$Range, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_font / "NumericShaper$Range";

	constexpr static Enume field_signatures{
		jField<::java::awt::font::NumericShaper$Range>("ARABIC"), //
		jField<::java::awt::font::NumericShaper$Range>("BALINESE"), //
		jField<::java::awt::font::NumericShaper$Range>("BENGALI"), //
		jField<::java::awt::font::NumericShaper$Range>("CHAM"), //
		jField<::java::awt::font::NumericShaper$Range>("DEVANAGARI"), //
		jField<::java::awt::font::NumericShaper$Range>("EASTERN_ARABIC"), //
		jField<::java::awt::font::NumericShaper$Range>("ETHIOPIC"), //
		jField<::java::awt::font::NumericShaper$Range>("EUROPEAN"), //
		jField<::java::awt::font::NumericShaper$Range>("GUJARATI"), //
		jField<::java::awt::font::NumericShaper$Range>("GURMUKHI"), //
		jField<::java::awt::font::NumericShaper$Range>("JAVANESE"), //
		jField<::java::awt::font::NumericShaper$Range>("KANNADA"), //
		jField<::java::awt::font::NumericShaper$Range>("KAYAH_LI"), //
		jField<::java::awt::font::NumericShaper$Range>("KHMER"), //
		jField<::java::awt::font::NumericShaper$Range>("LAO"), //
		jField<::java::awt::font::NumericShaper$Range>("LEPCHA"), //
		jField<::java::awt::font::NumericShaper$Range>("LIMBU"), //
		jField<::java::awt::font::NumericShaper$Range>("MALAYALAM"), //
		jField<::java::awt::font::NumericShaper$Range>("MEETEI_MAYEK"), //
		jField<::java::awt::font::NumericShaper$Range>("MONGOLIAN"), //
		jField<::java::awt::font::NumericShaper$Range>("MYANMAR"), //
		jField<::java::awt::font::NumericShaper$Range>("MYANMAR_SHAN"), //
		jField<::java::awt::font::NumericShaper$Range>("NEW_TAI_LUE"), //
		jField<::java::awt::font::NumericShaper$Range>("NKO"), //
		jField<::java::awt::font::NumericShaper$Range>("OL_CHIKI"), //
		jField<::java::awt::font::NumericShaper$Range>("ORIYA"), //
		jField<::java::awt::font::NumericShaper$Range>("SAURASHTRA"), //
		jField<::java::awt::font::NumericShaper$Range>("SUNDANESE"), //
		jField<::java::awt::font::NumericShaper$Range>("TAI_THAM_HORA"), //
		jField<::java::awt::font::NumericShaper$Range>("TAI_THAM_THAM"), //
		jField<::java::awt::font::NumericShaper$Range>("TAMIL"), //
		jField<::java::awt::font::NumericShaper$Range>("TELUGU"), //
		jField<::java::awt::font::NumericShaper$Range>("THAI"), //
		jField<::java::awt::font::NumericShaper$Range>("TIBETAN"), //
		jField<::java::awt::font::NumericShaper$Range>("VAI"), //
	};

	template<typename F = ::java::awt::font::NumericShaper$Range>
	static auto ARABIC() {
		static_assert(field_signatures[jField<F>("ARABIC")] != -1);
		return sat<F>("ARABIC");
	}

	template<typename F = ::java::awt::font::NumericShaper$Range>
	static auto BALINESE() {
		static_assert(field_signatures[jField<F>("BALINESE")] != -1);
		return sat<F>("BALINESE");
	}

	template<typename F = ::java::awt::font::NumericShaper$Range>
	static auto BENGALI() {
		static_assert(field_signatures[jField<F>("BENGALI")] != -1);
		return sat<F>("BENGALI");
	}

	template<typename F = ::java::awt::font::NumericShaper$Range>
	static auto CHAM() {
		static_assert(field_signatures[jField<F>("CHAM")] != -1);
		return sat<F>("CHAM");
	}

	template<typename F = ::java::awt::font::NumericShaper$Range>
	static auto DEVANAGARI() {
		static_assert(field_signatures[jField<F>("DEVANAGARI")] != -1);
		return sat<F>("DEVANAGARI");
	}

	template<typename F = ::java::awt::font::NumericShaper$Range>
	static auto EASTERN_ARABIC() {
		static_assert(field_signatures[jField<F>("EASTERN_ARABIC")] != -1);
		return sat<F>("EASTERN_ARABIC");
	}

	template<typename F = ::java::awt::font::NumericShaper$Range>
	static auto ETHIOPIC() {
		static_assert(field_signatures[jField<F>("ETHIOPIC")] != -1);
		return sat<F>("ETHIOPIC");
	}

	template<typename F = ::java::awt::font::NumericShaper$Range>
	static auto EUROPEAN() {
		static_assert(field_signatures[jField<F>("EUROPEAN")] != -1);
		return sat<F>("EUROPEAN");
	}

	template<typename F = ::java::awt::font::NumericShaper$Range>
	static auto GUJARATI() {
		static_assert(field_signatures[jField<F>("GUJARATI")] != -1);
		return sat<F>("GUJARATI");
	}

	template<typename F = ::java::awt::font::NumericShaper$Range>
	static auto GURMUKHI() {
		static_assert(field_signatures[jField<F>("GURMUKHI")] != -1);
		return sat<F>("GURMUKHI");
	}

	template<typename F = ::java::awt::font::NumericShaper$Range>
	static auto JAVANESE() {
		static_assert(field_signatures[jField<F>("JAVANESE")] != -1);
		return sat<F>("JAVANESE");
	}

	template<typename F = ::java::awt::font::NumericShaper$Range>
	static auto KANNADA() {
		static_assert(field_signatures[jField<F>("KANNADA")] != -1);
		return sat<F>("KANNADA");
	}

	template<typename F = ::java::awt::font::NumericShaper$Range>
	static auto KAYAH_LI() {
		static_assert(field_signatures[jField<F>("KAYAH_LI")] != -1);
		return sat<F>("KAYAH_LI");
	}

	template<typename F = ::java::awt::font::NumericShaper$Range>
	static auto KHMER() {
		static_assert(field_signatures[jField<F>("KHMER")] != -1);
		return sat<F>("KHMER");
	}

	template<typename F = ::java::awt::font::NumericShaper$Range>
	static auto LAO() {
		static_assert(field_signatures[jField<F>("LAO")] != -1);
		return sat<F>("LAO");
	}

	template<typename F = ::java::awt::font::NumericShaper$Range>
	static auto LEPCHA() {
		static_assert(field_signatures[jField<F>("LEPCHA")] != -1);
		return sat<F>("LEPCHA");
	}

	template<typename F = ::java::awt::font::NumericShaper$Range>
	static auto LIMBU() {
		static_assert(field_signatures[jField<F>("LIMBU")] != -1);
		return sat<F>("LIMBU");
	}

	template<typename F = ::java::awt::font::NumericShaper$Range>
	static auto MALAYALAM() {
		static_assert(field_signatures[jField<F>("MALAYALAM")] != -1);
		return sat<F>("MALAYALAM");
	}

	template<typename F = ::java::awt::font::NumericShaper$Range>
	static auto MEETEI_MAYEK() {
		static_assert(field_signatures[jField<F>("MEETEI_MAYEK")] != -1);
		return sat<F>("MEETEI_MAYEK");
	}

	template<typename F = ::java::awt::font::NumericShaper$Range>
	static auto MONGOLIAN() {
		static_assert(field_signatures[jField<F>("MONGOLIAN")] != -1);
		return sat<F>("MONGOLIAN");
	}

	template<typename F = ::java::awt::font::NumericShaper$Range>
	static auto MYANMAR() {
		static_assert(field_signatures[jField<F>("MYANMAR")] != -1);
		return sat<F>("MYANMAR");
	}

	template<typename F = ::java::awt::font::NumericShaper$Range>
	static auto MYANMAR_SHAN() {
		static_assert(field_signatures[jField<F>("MYANMAR_SHAN")] != -1);
		return sat<F>("MYANMAR_SHAN");
	}

	template<typename F = ::java::awt::font::NumericShaper$Range>
	static auto NEW_TAI_LUE() {
		static_assert(field_signatures[jField<F>("NEW_TAI_LUE")] != -1);
		return sat<F>("NEW_TAI_LUE");
	}

	template<typename F = ::java::awt::font::NumericShaper$Range>
	static auto NKO() {
		static_assert(field_signatures[jField<F>("NKO")] != -1);
		return sat<F>("NKO");
	}

	template<typename F = ::java::awt::font::NumericShaper$Range>
	static auto OL_CHIKI() {
		static_assert(field_signatures[jField<F>("OL_CHIKI")] != -1);
		return sat<F>("OL_CHIKI");
	}

	template<typename F = ::java::awt::font::NumericShaper$Range>
	static auto ORIYA() {
		static_assert(field_signatures[jField<F>("ORIYA")] != -1);
		return sat<F>("ORIYA");
	}

	template<typename F = ::java::awt::font::NumericShaper$Range>
	static auto SAURASHTRA() {
		static_assert(field_signatures[jField<F>("SAURASHTRA")] != -1);
		return sat<F>("SAURASHTRA");
	}

	template<typename F = ::java::awt::font::NumericShaper$Range>
	static auto SUNDANESE() {
		static_assert(field_signatures[jField<F>("SUNDANESE")] != -1);
		return sat<F>("SUNDANESE");
	}

	template<typename F = ::java::awt::font::NumericShaper$Range>
	static auto TAI_THAM_HORA() {
		static_assert(field_signatures[jField<F>("TAI_THAM_HORA")] != -1);
		return sat<F>("TAI_THAM_HORA");
	}

	template<typename F = ::java::awt::font::NumericShaper$Range>
	static auto TAI_THAM_THAM() {
		static_assert(field_signatures[jField<F>("TAI_THAM_THAM")] != -1);
		return sat<F>("TAI_THAM_THAM");
	}

	template<typename F = ::java::awt::font::NumericShaper$Range>
	static auto TAMIL() {
		static_assert(field_signatures[jField<F>("TAMIL")] != -1);
		return sat<F>("TAMIL");
	}

	template<typename F = ::java::awt::font::NumericShaper$Range>
	static auto TELUGU() {
		static_assert(field_signatures[jField<F>("TELUGU")] != -1);
		return sat<F>("TELUGU");
	}

	template<typename F = ::java::awt::font::NumericShaper$Range>
	static auto THAI() {
		static_assert(field_signatures[jField<F>("THAI")] != -1);
		return sat<F>("THAI");
	}

	template<typename F = ::java::awt::font::NumericShaper$Range>
	static auto TIBETAN() {
		static_assert(field_signatures[jField<F>("TIBETAN")] != -1);
		return sat<F>("TIBETAN");
	}

	template<typename F = ::java::awt::font::NumericShaper$Range>
	static auto VAI() {
		static_assert(field_signatures[jField<F>("VAI")] != -1);
		return sat<F>("VAI");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::awt::font::NumericShaper$Range(::java::lang::String)>("valueOf"), //
		jMethod<::java::awt::font::NumericShaper$Range *()>("values"), //
	};

	template<typename R = ::java::awt::font::NumericShaper$Range, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::font::NumericShaper$Range *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
