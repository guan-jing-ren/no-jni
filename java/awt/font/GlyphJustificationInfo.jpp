#ifndef java_awt_font_GlyphJustificationInfo_HPP
#define java_awt_font_GlyphJustificationInfo_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::font::GlyphJustificationInfo : public jObject<::java::awt::font::GlyphJustificationInfo, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_font / "GlyphJustificationInfo";

	constexpr static Enume field_signatures{
		jField<::jint>("PRIORITY_INTERCHAR"), //
		jField<::jint>("PRIORITY_KASHIDA"), //
		jField<::jint>("PRIORITY_NONE"), //
		jField<::jint>("PRIORITY_WHITESPACE"), //
		jField<::jboolean>("growAbsorb"), //
		jField<::jfloat>("growLeftLimit"), //
		jField<::jint>("growPriority"), //
		jField<::jfloat>("growRightLimit"), //
		jField<::jboolean>("shrinkAbsorb"), //
		jField<::jfloat>("shrinkLeftLimit"), //
		jField<::jint>("shrinkPriority"), //
		jField<::jfloat>("shrinkRightLimit"), //
		jField<::jfloat>("weight"), //
	};

	template<typename F = ::jint>
	static auto PRIORITY_INTERCHAR() {
		static_assert(field_signatures[jField<F>("PRIORITY_INTERCHAR")] != -1);
		return sat<F>("PRIORITY_INTERCHAR");
	}

	template<typename F = ::jint>
	static auto PRIORITY_KASHIDA() {
		static_assert(field_signatures[jField<F>("PRIORITY_KASHIDA")] != -1);
		return sat<F>("PRIORITY_KASHIDA");
	}

	template<typename F = ::jint>
	static auto PRIORITY_NONE() {
		static_assert(field_signatures[jField<F>("PRIORITY_NONE")] != -1);
		return sat<F>("PRIORITY_NONE");
	}

	template<typename F = ::jint>
	static auto PRIORITY_WHITESPACE() {
		static_assert(field_signatures[jField<F>("PRIORITY_WHITESPACE")] != -1);
		return sat<F>("PRIORITY_WHITESPACE");
	}

	template<typename F = ::jboolean>
	auto growAbsorb() const {
		static_assert(field_signatures[jField<F>("growAbsorb")] != -1);
		return at<F>("growAbsorb");
	}

	template<typename F = ::jfloat>
	auto growLeftLimit() const {
		static_assert(field_signatures[jField<F>("growLeftLimit")] != -1);
		return at<F>("growLeftLimit");
	}

	template<typename F = ::jint>
	auto growPriority() const {
		static_assert(field_signatures[jField<F>("growPriority")] != -1);
		return at<F>("growPriority");
	}

	template<typename F = ::jfloat>
	auto growRightLimit() const {
		static_assert(field_signatures[jField<F>("growRightLimit")] != -1);
		return at<F>("growRightLimit");
	}

	template<typename F = ::jboolean>
	auto shrinkAbsorb() const {
		static_assert(field_signatures[jField<F>("shrinkAbsorb")] != -1);
		return at<F>("shrinkAbsorb");
	}

	template<typename F = ::jfloat>
	auto shrinkLeftLimit() const {
		static_assert(field_signatures[jField<F>("shrinkLeftLimit")] != -1);
		return at<F>("shrinkLeftLimit");
	}

	template<typename F = ::jint>
	auto shrinkPriority() const {
		static_assert(field_signatures[jField<F>("shrinkPriority")] != -1);
		return at<F>("shrinkPriority");
	}

	template<typename F = ::jfloat>
	auto shrinkRightLimit() const {
		static_assert(field_signatures[jField<F>("shrinkRightLimit")] != -1);
		return at<F>("shrinkRightLimit");
	}

	template<typename F = ::jfloat>
	auto weight() const {
		static_assert(field_signatures[jField<F>("weight")] != -1);
		return at<F>("weight");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jfloat, ::jboolean, ::jint, ::jfloat, ::jfloat, ::jboolean, ::jint, ::jfloat, ::jfloat)>(), //
	};

};

#endif
