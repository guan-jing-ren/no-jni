#ifndef java_awt_font_NumericShaper_HPP
#define java_awt_font_NumericShaper_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::font::NumericShaper : public jObject<::java::awt::font::NumericShaper, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_font / "NumericShaper";

	constexpr static Enume field_signatures{
		jField<::jint>("ALL_RANGES"), //
		jField<::jint>("ARABIC"), //
		jField<::jint>("BENGALI"), //
		jField<::jint>("DEVANAGARI"), //
		jField<::jint>("EASTERN_ARABIC"), //
		jField<::jint>("ETHIOPIC"), //
		jField<::jint>("EUROPEAN"), //
		jField<::jint>("GUJARATI"), //
		jField<::jint>("GURMUKHI"), //
		jField<::jint>("KANNADA"), //
		jField<::jint>("KHMER"), //
		jField<::jint>("LAO"), //
		jField<::jint>("MALAYALAM"), //
		jField<::jint>("MONGOLIAN"), //
		jField<::jint>("MYANMAR"), //
		jField<::jint>("ORIYA"), //
		jField<::jint>("TAMIL"), //
		jField<::jint>("TELUGU"), //
		jField<::jint>("THAI"), //
		jField<::jint>("TIBETAN"), //
	};

	template<typename F = ::jint>
	static auto ALL_RANGES() {
		static_assert(field_signatures[jField<F>("ALL_RANGES")] != -1);
		return sat<F>("ALL_RANGES");
	}

	template<typename F = ::jint>
	static auto ARABIC() {
		static_assert(field_signatures[jField<F>("ARABIC")] != -1);
		return sat<F>("ARABIC");
	}

	template<typename F = ::jint>
	static auto BENGALI() {
		static_assert(field_signatures[jField<F>("BENGALI")] != -1);
		return sat<F>("BENGALI");
	}

	template<typename F = ::jint>
	static auto DEVANAGARI() {
		static_assert(field_signatures[jField<F>("DEVANAGARI")] != -1);
		return sat<F>("DEVANAGARI");
	}

	template<typename F = ::jint>
	static auto EASTERN_ARABIC() {
		static_assert(field_signatures[jField<F>("EASTERN_ARABIC")] != -1);
		return sat<F>("EASTERN_ARABIC");
	}

	template<typename F = ::jint>
	static auto ETHIOPIC() {
		static_assert(field_signatures[jField<F>("ETHIOPIC")] != -1);
		return sat<F>("ETHIOPIC");
	}

	template<typename F = ::jint>
	static auto EUROPEAN() {
		static_assert(field_signatures[jField<F>("EUROPEAN")] != -1);
		return sat<F>("EUROPEAN");
	}

	template<typename F = ::jint>
	static auto GUJARATI() {
		static_assert(field_signatures[jField<F>("GUJARATI")] != -1);
		return sat<F>("GUJARATI");
	}

	template<typename F = ::jint>
	static auto GURMUKHI() {
		static_assert(field_signatures[jField<F>("GURMUKHI")] != -1);
		return sat<F>("GURMUKHI");
	}

	template<typename F = ::jint>
	static auto KANNADA() {
		static_assert(field_signatures[jField<F>("KANNADA")] != -1);
		return sat<F>("KANNADA");
	}

	template<typename F = ::jint>
	static auto KHMER() {
		static_assert(field_signatures[jField<F>("KHMER")] != -1);
		return sat<F>("KHMER");
	}

	template<typename F = ::jint>
	static auto LAO() {
		static_assert(field_signatures[jField<F>("LAO")] != -1);
		return sat<F>("LAO");
	}

	template<typename F = ::jint>
	static auto MALAYALAM() {
		static_assert(field_signatures[jField<F>("MALAYALAM")] != -1);
		return sat<F>("MALAYALAM");
	}

	template<typename F = ::jint>
	static auto MONGOLIAN() {
		static_assert(field_signatures[jField<F>("MONGOLIAN")] != -1);
		return sat<F>("MONGOLIAN");
	}

	template<typename F = ::jint>
	static auto MYANMAR() {
		static_assert(field_signatures[jField<F>("MYANMAR")] != -1);
		return sat<F>("MYANMAR");
	}

	template<typename F = ::jint>
	static auto ORIYA() {
		static_assert(field_signatures[jField<F>("ORIYA")] != -1);
		return sat<F>("ORIYA");
	}

	template<typename F = ::jint>
	static auto TAMIL() {
		static_assert(field_signatures[jField<F>("TAMIL")] != -1);
		return sat<F>("TAMIL");
	}

	template<typename F = ::jint>
	static auto TELUGU() {
		static_assert(field_signatures[jField<F>("TELUGU")] != -1);
		return sat<F>("TELUGU");
	}

	template<typename F = ::jint>
	static auto THAI() {
		static_assert(field_signatures[jField<F>("THAI")] != -1);
		return sat<F>("THAI");
	}

	template<typename F = ::jint>
	static auto TIBETAN() {
		static_assert(field_signatures[jField<F>("TIBETAN")] != -1);
		return sat<F>("TIBETAN");
	}

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::awt::font::NumericShaper(::jint)>("getContextualShaper"), //
		jMethod<::java::awt::font::NumericShaper(::jint, ::jint)>("getContextualShaper"), //
		jMethod<::java::awt::font::NumericShaper(::java::util::Set)>("getContextualShaper"), //
		jMethod<::java::awt::font::NumericShaper(::java::util::Set, ::java::awt::font::NumericShaper$Range)>("getContextualShaper"), //
		jMethod<::java::util::Set()>("getRangeSet"), //
		jMethod<::jint()>("getRanges"), //
		jMethod<::java::awt::font::NumericShaper(::jint)>("getShaper"), //
		jMethod<::java::awt::font::NumericShaper(::java::awt::font::NumericShaper$Range)>("getShaper"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isContextual"), //
		jMethod<::jvoid(::jchar *, ::jint, ::jint)>("shape"), //
		jMethod<::jvoid(::jchar *, ::jint, ::jint, ::jint)>("shape"), //
		jMethod<::jvoid(::jchar *, ::jint, ::jint, ::java::awt::font::NumericShaper$Range)>("shape"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::font::NumericShaper, typename... Args>
	static auto getContextualShaper(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getContextualShaper")] != -1);
		return scall<R>("getContextualShaper", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto getRangeSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRangeSet")] != -1);
		return call<R>("getRangeSet", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRanges(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRanges")] != -1);
		return call<R>("getRanges", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::font::NumericShaper, typename... Args>
	static auto getShaper(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getShaper")] != -1);
		return scall<R>("getShaper", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isContextual(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isContextual")] != -1);
		return call<R>("isContextual", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto shape(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("shape")] != -1);
		return call<R>("shape", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
