#ifndef java_awt_font_GlyphVector_HPP
#define java_awt_font_GlyphVector_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::font::GlyphVector : public jObject<::java::awt::font::GlyphVector, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_font / "GlyphVector";

	constexpr static Enume field_signatures{
		jField<::jint>("FLAG_COMPLEX_GLYPHS"), //
		jField<::jint>("FLAG_HAS_POSITION_ADJUSTMENTS"), //
		jField<::jint>("FLAG_HAS_TRANSFORMS"), //
		jField<::jint>("FLAG_MASK"), //
		jField<::jint>("FLAG_RUN_RTL"), //
	};

	template<typename F = ::jint>
	static auto FLAG_COMPLEX_GLYPHS() {
		static_assert(field_signatures[jField<F>("FLAG_COMPLEX_GLYPHS")] != -1);
		return sat<F>("FLAG_COMPLEX_GLYPHS");
	}

	template<typename F = ::jint>
	static auto FLAG_HAS_POSITION_ADJUSTMENTS() {
		static_assert(field_signatures[jField<F>("FLAG_HAS_POSITION_ADJUSTMENTS")] != -1);
		return sat<F>("FLAG_HAS_POSITION_ADJUSTMENTS");
	}

	template<typename F = ::jint>
	static auto FLAG_HAS_TRANSFORMS() {
		static_assert(field_signatures[jField<F>("FLAG_HAS_TRANSFORMS")] != -1);
		return sat<F>("FLAG_HAS_TRANSFORMS");
	}

	template<typename F = ::jint>
	static auto FLAG_MASK() {
		static_assert(field_signatures[jField<F>("FLAG_MASK")] != -1);
		return sat<F>("FLAG_MASK");
	}

	template<typename F = ::jint>
	static auto FLAG_RUN_RTL() {
		static_assert(field_signatures[jField<F>("FLAG_RUN_RTL")] != -1);
		return sat<F>("FLAG_RUN_RTL");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jboolean(::java::awt::font::GlyphVector)>("equals"), //
		jMethod<::java::awt::Font()>("getFont"), //
		jMethod<::java::awt::font::FontRenderContext()>("getFontRenderContext"), //
		jMethod<::jint(::jint)>("getGlyphCharIndex"), //
		jMethod<::jint *(::jint, ::jint, ::jint *)>("getGlyphCharIndices"), //
		jMethod<::jint(::jint)>("getGlyphCode"), //
		jMethod<::jint *(::jint, ::jint, ::jint *)>("getGlyphCodes"), //
		jMethod<::java::awt::font::GlyphJustificationInfo(::jint)>("getGlyphJustificationInfo"), //
		jMethod<::java::awt::Shape(::jint)>("getGlyphLogicalBounds"), //
		jMethod<::java::awt::font::GlyphMetrics(::jint)>("getGlyphMetrics"), //
		jMethod<::java::awt::Shape(::jint)>("getGlyphOutline"), //
		jMethod<::java::awt::Shape(::jint, ::jfloat, ::jfloat)>("getGlyphOutline"), //
		jMethod<::java::awt::Rectangle(::jint, ::java::awt::font::FontRenderContext, ::jfloat, ::jfloat)>("getGlyphPixelBounds"), //
		jMethod<::java::awt::geom::Point2D(::jint)>("getGlyphPosition"), //
		jMethod<::jfloat *(::jint, ::jint, ::jfloat *)>("getGlyphPositions"), //
		jMethod<::java::awt::geom::AffineTransform(::jint)>("getGlyphTransform"), //
		jMethod<::java::awt::Shape(::jint)>("getGlyphVisualBounds"), //
		jMethod<::jint()>("getLayoutFlags"), //
		jMethod<::java::awt::geom::Rectangle2D()>("getLogicalBounds"), //
		jMethod<::jint()>("getNumGlyphs"), //
		jMethod<::java::awt::Shape()>("getOutline"), //
		jMethod<::java::awt::Shape(::jfloat, ::jfloat)>("getOutline"), //
		jMethod<::java::awt::Rectangle(::java::awt::font::FontRenderContext, ::jfloat, ::jfloat)>("getPixelBounds"), //
		jMethod<::java::awt::geom::Rectangle2D()>("getVisualBounds"), //
		jMethod<::jvoid()>("performDefaultLayout"), //
		jMethod<::jvoid(::jint, ::java::awt::geom::Point2D)>("setGlyphPosition"), //
		jMethod<::jvoid(::jint, ::java::awt::geom::AffineTransform)>("setGlyphTransform"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Font, typename... Args>
	auto getFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFont")] != -1);
		return call<R>("getFont", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::font::FontRenderContext, typename... Args>
	auto getFontRenderContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFontRenderContext")] != -1);
		return call<R>("getFontRenderContext", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getGlyphCharIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getGlyphCharIndex")] != -1);
		return call<R>("getGlyphCharIndex", forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getGlyphCharIndices(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getGlyphCharIndices")] != -1);
		return call<R>("getGlyphCharIndices", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getGlyphCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getGlyphCode")] != -1);
		return call<R>("getGlyphCode", forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getGlyphCodes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getGlyphCodes")] != -1);
		return call<R>("getGlyphCodes", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::font::GlyphJustificationInfo, typename... Args>
	auto getGlyphJustificationInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getGlyphJustificationInfo")] != -1);
		return call<R>("getGlyphJustificationInfo", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Shape, typename... Args>
	auto getGlyphLogicalBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getGlyphLogicalBounds")] != -1);
		return call<R>("getGlyphLogicalBounds", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::font::GlyphMetrics, typename... Args>
	auto getGlyphMetrics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getGlyphMetrics")] != -1);
		return call<R>("getGlyphMetrics", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Shape, typename... Args>
	auto getGlyphOutline(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getGlyphOutline")] != -1);
		return call<R>("getGlyphOutline", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getGlyphPixelBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getGlyphPixelBounds")] != -1);
		return call<R>("getGlyphPixelBounds", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Point2D, typename... Args>
	auto getGlyphPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getGlyphPosition")] != -1);
		return call<R>("getGlyphPosition", forward<Args>(args)...);
	}

	template<typename R = ::jfloat *, typename... Args>
	auto getGlyphPositions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getGlyphPositions")] != -1);
		return call<R>("getGlyphPositions", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::AffineTransform, typename... Args>
	auto getGlyphTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getGlyphTransform")] != -1);
		return call<R>("getGlyphTransform", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Shape, typename... Args>
	auto getGlyphVisualBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getGlyphVisualBounds")] != -1);
		return call<R>("getGlyphVisualBounds", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLayoutFlags(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLayoutFlags")] != -1);
		return call<R>("getLayoutFlags", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Rectangle2D, typename... Args>
	auto getLogicalBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLogicalBounds")] != -1);
		return call<R>("getLogicalBounds", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumGlyphs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNumGlyphs")] != -1);
		return call<R>("getNumGlyphs", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Shape, typename... Args>
	auto getOutline(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getOutline")] != -1);
		return call<R>("getOutline", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getPixelBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPixelBounds")] != -1);
		return call<R>("getPixelBounds", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Rectangle2D, typename... Args>
	auto getVisualBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getVisualBounds")] != -1);
		return call<R>("getVisualBounds", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto performDefaultLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("performDefaultLayout")] != -1);
		return call<R>("performDefaultLayout", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGlyphPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setGlyphPosition")] != -1);
		return call<R>("setGlyphPosition", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGlyphTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setGlyphTransform")] != -1);
		return call<R>("setGlyphTransform", forward<Args>(args)...);
	}

};

#endif
