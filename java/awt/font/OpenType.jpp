#ifndef java_awt_font_OpenType_HPP
#define java_awt_font_OpenType_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::font::OpenType : public jObject<::java::awt::font::OpenType, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_font / "OpenType";

	constexpr static Enume field_signatures{
		jField<::jint>("TAG_ACNT"), //
		jField<::jint>("TAG_AVAR"), //
		jField<::jint>("TAG_BASE"), //
		jField<::jint>("TAG_BDAT"), //
		jField<::jint>("TAG_BLOC"), //
		jField<::jint>("TAG_BSLN"), //
		jField<::jint>("TAG_CFF"), //
		jField<::jint>("TAG_CMAP"), //
		jField<::jint>("TAG_CVAR"), //
		jField<::jint>("TAG_CVT"), //
		jField<::jint>("TAG_DSIG"), //
		jField<::jint>("TAG_EBDT"), //
		jField<::jint>("TAG_EBLC"), //
		jField<::jint>("TAG_EBSC"), //
		jField<::jint>("TAG_FDSC"), //
		jField<::jint>("TAG_FEAT"), //
		jField<::jint>("TAG_FMTX"), //
		jField<::jint>("TAG_FPGM"), //
		jField<::jint>("TAG_FVAR"), //
		jField<::jint>("TAG_GASP"), //
		jField<::jint>("TAG_GDEF"), //
		jField<::jint>("TAG_GLYF"), //
		jField<::jint>("TAG_GPOS"), //
		jField<::jint>("TAG_GSUB"), //
		jField<::jint>("TAG_GVAR"), //
		jField<::jint>("TAG_HDMX"), //
		jField<::jint>("TAG_HEAD"), //
		jField<::jint>("TAG_HHEA"), //
		jField<::jint>("TAG_HMTX"), //
		jField<::jint>("TAG_JSTF"), //
		jField<::jint>("TAG_JUST"), //
		jField<::jint>("TAG_KERN"), //
		jField<::jint>("TAG_LCAR"), //
		jField<::jint>("TAG_LOCA"), //
		jField<::jint>("TAG_LTSH"), //
		jField<::jint>("TAG_MAXP"), //
		jField<::jint>("TAG_MMFX"), //
		jField<::jint>("TAG_MMSD"), //
		jField<::jint>("TAG_MORT"), //
		jField<::jint>("TAG_NAME"), //
		jField<::jint>("TAG_OPBD"), //
		jField<::jint>("TAG_OS2"), //
		jField<::jint>("TAG_PCLT"), //
		jField<::jint>("TAG_POST"), //
		jField<::jint>("TAG_PREP"), //
		jField<::jint>("TAG_PROP"), //
		jField<::jint>("TAG_TRAK"), //
		jField<::jint>("TAG_TYP1"), //
		jField<::jint>("TAG_VDMX"), //
		jField<::jint>("TAG_VHEA"), //
		jField<::jint>("TAG_VMTX"), //
	};

	template<typename F = ::jint>
	static auto TAG_ACNT() {
		static_assert(field_signatures[jField<F>("TAG_ACNT")] != -1);
		return sat<F>("TAG_ACNT");
	}

	template<typename F = ::jint>
	static auto TAG_AVAR() {
		static_assert(field_signatures[jField<F>("TAG_AVAR")] != -1);
		return sat<F>("TAG_AVAR");
	}

	template<typename F = ::jint>
	static auto TAG_BASE() {
		static_assert(field_signatures[jField<F>("TAG_BASE")] != -1);
		return sat<F>("TAG_BASE");
	}

	template<typename F = ::jint>
	static auto TAG_BDAT() {
		static_assert(field_signatures[jField<F>("TAG_BDAT")] != -1);
		return sat<F>("TAG_BDAT");
	}

	template<typename F = ::jint>
	static auto TAG_BLOC() {
		static_assert(field_signatures[jField<F>("TAG_BLOC")] != -1);
		return sat<F>("TAG_BLOC");
	}

	template<typename F = ::jint>
	static auto TAG_BSLN() {
		static_assert(field_signatures[jField<F>("TAG_BSLN")] != -1);
		return sat<F>("TAG_BSLN");
	}

	template<typename F = ::jint>
	static auto TAG_CFF() {
		static_assert(field_signatures[jField<F>("TAG_CFF")] != -1);
		return sat<F>("TAG_CFF");
	}

	template<typename F = ::jint>
	static auto TAG_CMAP() {
		static_assert(field_signatures[jField<F>("TAG_CMAP")] != -1);
		return sat<F>("TAG_CMAP");
	}

	template<typename F = ::jint>
	static auto TAG_CVAR() {
		static_assert(field_signatures[jField<F>("TAG_CVAR")] != -1);
		return sat<F>("TAG_CVAR");
	}

	template<typename F = ::jint>
	static auto TAG_CVT() {
		static_assert(field_signatures[jField<F>("TAG_CVT")] != -1);
		return sat<F>("TAG_CVT");
	}

	template<typename F = ::jint>
	static auto TAG_DSIG() {
		static_assert(field_signatures[jField<F>("TAG_DSIG")] != -1);
		return sat<F>("TAG_DSIG");
	}

	template<typename F = ::jint>
	static auto TAG_EBDT() {
		static_assert(field_signatures[jField<F>("TAG_EBDT")] != -1);
		return sat<F>("TAG_EBDT");
	}

	template<typename F = ::jint>
	static auto TAG_EBLC() {
		static_assert(field_signatures[jField<F>("TAG_EBLC")] != -1);
		return sat<F>("TAG_EBLC");
	}

	template<typename F = ::jint>
	static auto TAG_EBSC() {
		static_assert(field_signatures[jField<F>("TAG_EBSC")] != -1);
		return sat<F>("TAG_EBSC");
	}

	template<typename F = ::jint>
	static auto TAG_FDSC() {
		static_assert(field_signatures[jField<F>("TAG_FDSC")] != -1);
		return sat<F>("TAG_FDSC");
	}

	template<typename F = ::jint>
	static auto TAG_FEAT() {
		static_assert(field_signatures[jField<F>("TAG_FEAT")] != -1);
		return sat<F>("TAG_FEAT");
	}

	template<typename F = ::jint>
	static auto TAG_FMTX() {
		static_assert(field_signatures[jField<F>("TAG_FMTX")] != -1);
		return sat<F>("TAG_FMTX");
	}

	template<typename F = ::jint>
	static auto TAG_FPGM() {
		static_assert(field_signatures[jField<F>("TAG_FPGM")] != -1);
		return sat<F>("TAG_FPGM");
	}

	template<typename F = ::jint>
	static auto TAG_FVAR() {
		static_assert(field_signatures[jField<F>("TAG_FVAR")] != -1);
		return sat<F>("TAG_FVAR");
	}

	template<typename F = ::jint>
	static auto TAG_GASP() {
		static_assert(field_signatures[jField<F>("TAG_GASP")] != -1);
		return sat<F>("TAG_GASP");
	}

	template<typename F = ::jint>
	static auto TAG_GDEF() {
		static_assert(field_signatures[jField<F>("TAG_GDEF")] != -1);
		return sat<F>("TAG_GDEF");
	}

	template<typename F = ::jint>
	static auto TAG_GLYF() {
		static_assert(field_signatures[jField<F>("TAG_GLYF")] != -1);
		return sat<F>("TAG_GLYF");
	}

	template<typename F = ::jint>
	static auto TAG_GPOS() {
		static_assert(field_signatures[jField<F>("TAG_GPOS")] != -1);
		return sat<F>("TAG_GPOS");
	}

	template<typename F = ::jint>
	static auto TAG_GSUB() {
		static_assert(field_signatures[jField<F>("TAG_GSUB")] != -1);
		return sat<F>("TAG_GSUB");
	}

	template<typename F = ::jint>
	static auto TAG_GVAR() {
		static_assert(field_signatures[jField<F>("TAG_GVAR")] != -1);
		return sat<F>("TAG_GVAR");
	}

	template<typename F = ::jint>
	static auto TAG_HDMX() {
		static_assert(field_signatures[jField<F>("TAG_HDMX")] != -1);
		return sat<F>("TAG_HDMX");
	}

	template<typename F = ::jint>
	static auto TAG_HEAD() {
		static_assert(field_signatures[jField<F>("TAG_HEAD")] != -1);
		return sat<F>("TAG_HEAD");
	}

	template<typename F = ::jint>
	static auto TAG_HHEA() {
		static_assert(field_signatures[jField<F>("TAG_HHEA")] != -1);
		return sat<F>("TAG_HHEA");
	}

	template<typename F = ::jint>
	static auto TAG_HMTX() {
		static_assert(field_signatures[jField<F>("TAG_HMTX")] != -1);
		return sat<F>("TAG_HMTX");
	}

	template<typename F = ::jint>
	static auto TAG_JSTF() {
		static_assert(field_signatures[jField<F>("TAG_JSTF")] != -1);
		return sat<F>("TAG_JSTF");
	}

	template<typename F = ::jint>
	static auto TAG_JUST() {
		static_assert(field_signatures[jField<F>("TAG_JUST")] != -1);
		return sat<F>("TAG_JUST");
	}

	template<typename F = ::jint>
	static auto TAG_KERN() {
		static_assert(field_signatures[jField<F>("TAG_KERN")] != -1);
		return sat<F>("TAG_KERN");
	}

	template<typename F = ::jint>
	static auto TAG_LCAR() {
		static_assert(field_signatures[jField<F>("TAG_LCAR")] != -1);
		return sat<F>("TAG_LCAR");
	}

	template<typename F = ::jint>
	static auto TAG_LOCA() {
		static_assert(field_signatures[jField<F>("TAG_LOCA")] != -1);
		return sat<F>("TAG_LOCA");
	}

	template<typename F = ::jint>
	static auto TAG_LTSH() {
		static_assert(field_signatures[jField<F>("TAG_LTSH")] != -1);
		return sat<F>("TAG_LTSH");
	}

	template<typename F = ::jint>
	static auto TAG_MAXP() {
		static_assert(field_signatures[jField<F>("TAG_MAXP")] != -1);
		return sat<F>("TAG_MAXP");
	}

	template<typename F = ::jint>
	static auto TAG_MMFX() {
		static_assert(field_signatures[jField<F>("TAG_MMFX")] != -1);
		return sat<F>("TAG_MMFX");
	}

	template<typename F = ::jint>
	static auto TAG_MMSD() {
		static_assert(field_signatures[jField<F>("TAG_MMSD")] != -1);
		return sat<F>("TAG_MMSD");
	}

	template<typename F = ::jint>
	static auto TAG_MORT() {
		static_assert(field_signatures[jField<F>("TAG_MORT")] != -1);
		return sat<F>("TAG_MORT");
	}

	template<typename F = ::jint>
	static auto TAG_NAME() {
		static_assert(field_signatures[jField<F>("TAG_NAME")] != -1);
		return sat<F>("TAG_NAME");
	}

	template<typename F = ::jint>
	static auto TAG_OPBD() {
		static_assert(field_signatures[jField<F>("TAG_OPBD")] != -1);
		return sat<F>("TAG_OPBD");
	}

	template<typename F = ::jint>
	static auto TAG_OS2() {
		static_assert(field_signatures[jField<F>("TAG_OS2")] != -1);
		return sat<F>("TAG_OS2");
	}

	template<typename F = ::jint>
	static auto TAG_PCLT() {
		static_assert(field_signatures[jField<F>("TAG_PCLT")] != -1);
		return sat<F>("TAG_PCLT");
	}

	template<typename F = ::jint>
	static auto TAG_POST() {
		static_assert(field_signatures[jField<F>("TAG_POST")] != -1);
		return sat<F>("TAG_POST");
	}

	template<typename F = ::jint>
	static auto TAG_PREP() {
		static_assert(field_signatures[jField<F>("TAG_PREP")] != -1);
		return sat<F>("TAG_PREP");
	}

	template<typename F = ::jint>
	static auto TAG_PROP() {
		static_assert(field_signatures[jField<F>("TAG_PROP")] != -1);
		return sat<F>("TAG_PROP");
	}

	template<typename F = ::jint>
	static auto TAG_TRAK() {
		static_assert(field_signatures[jField<F>("TAG_TRAK")] != -1);
		return sat<F>("TAG_TRAK");
	}

	template<typename F = ::jint>
	static auto TAG_TYP1() {
		static_assert(field_signatures[jField<F>("TAG_TYP1")] != -1);
		return sat<F>("TAG_TYP1");
	}

	template<typename F = ::jint>
	static auto TAG_VDMX() {
		static_assert(field_signatures[jField<F>("TAG_VDMX")] != -1);
		return sat<F>("TAG_VDMX");
	}

	template<typename F = ::jint>
	static auto TAG_VHEA() {
		static_assert(field_signatures[jField<F>("TAG_VHEA")] != -1);
		return sat<F>("TAG_VHEA");
	}

	template<typename F = ::jint>
	static auto TAG_VMTX() {
		static_assert(field_signatures[jField<F>("TAG_VMTX")] != -1);
		return sat<F>("TAG_VMTX");
	}

	constexpr static Enume method_signatures{
		jMethod<::jbyte *(::jint)>("getFontTable"), //
		jMethod<::jbyte *(::jint, ::jint, ::jint)>("getFontTable"), //
		jMethod<::jbyte *(::java::lang::String)>("getFontTable"), //
		jMethod<::jbyte *(::java::lang::String, ::jint, ::jint)>("getFontTable"), //
		jMethod<::jint(::jint)>("getFontTableSize"), //
		jMethod<::jint(::java::lang::String)>("getFontTableSize"), //
		jMethod<::jint()>("getVersion"), //
	};

	template<typename R = ::jbyte *, typename... Args>
	auto getFontTable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFontTable")] != -1);
		return call<R>("getFontTable", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getFontTableSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFontTableSize")] != -1);
		return call<R>("getFontTableSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVersion")] != -1);
		return call<R>("getVersion", std::forward<Args>(args)...);
	}

};

#endif
