#ifndef java_awt_font_ImageGraphicAttribute_HPP
#define java_awt_font_ImageGraphicAttribute_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::font::ImageGraphicAttribute : public jObject<::java::awt::font::ImageGraphicAttribute, ::java::awt::font::GraphicAttribute> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_font / "ImageGraphicAttribute";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::Image, ::jint)>(), //
		jConstructor<::jvoid(::java::awt::Image, ::jint, ::jfloat, ::jfloat)>(), //
		jMethod<::jvoid(::java::awt::Graphics2D, ::jfloat, ::jfloat)>("draw"), //
		jMethod<::jboolean(::java::awt::font::ImageGraphicAttribute)>("equals"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jfloat()>("getAdvance"), //
		jMethod<::jfloat()>("getAscent"), //
		jMethod<::java::awt::geom::Rectangle2D()>("getBounds"), //
		jMethod<::jfloat()>("getDescent"), //
		jMethod<::jint()>("hashCode"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto draw(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("draw")] != -1);
		return call<R>("draw", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getAdvance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAdvance")] != -1);
		return call<R>("getAdvance", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getAscent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAscent")] != -1);
		return call<R>("getAscent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Rectangle2D, typename... Args>
	auto getBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds")] != -1);
		return call<R>("getBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getDescent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDescent")] != -1);
		return call<R>("getDescent", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

};

#endif
