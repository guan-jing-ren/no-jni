#ifndef java_awt_Checkbox_HPP
#define java_awt_Checkbox_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::Checkbox : public jObject<::java::awt::Checkbox, ::java::awt::Component> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "Checkbox";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::awt::CheckboxGroup, ::jboolean)>(), //
		jConstructor<::jvoid(::java::lang::String, ::jboolean)>(), //
		jConstructor<::jvoid(::java::lang::String, ::jboolean, ::java::awt::CheckboxGroup)>(), //
		jMethod<::jvoid(::java::awt::event::ItemListener)>("addItemListener"), //
		jMethod<::jvoid()>("addNotify"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::java::awt::CheckboxGroup()>("getCheckboxGroup"), //
		jMethod<::java::awt::event::ItemListener *()>("getItemListeners"), //
		jMethod<::java::lang::String()>("getLabel"), //
		jMethod<::java::util::EventListener *(::java::lang::Class)>("getListeners"), //
		jMethod<::java::lang::Object *()>("getSelectedObjects"), //
		jMethod<::jboolean()>("getState"), //
		jMethod<::jvoid(::java::awt::event::ItemListener)>("removeItemListener"), //
		jMethod<::jvoid(::java::awt::CheckboxGroup)>("setCheckboxGroup"), //
		jMethod<::jvoid(::java::lang::String)>("setLabel"), //
		jMethod<::jvoid(::jboolean)>("setState"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addItemListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addItemListener")] != -1);
		return call<R>("addItemListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addNotify")] != -1);
		return call<R>("addNotify", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::CheckboxGroup, typename... Args>
	auto getCheckboxGroup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCheckboxGroup")] != -1);
		return call<R>("getCheckboxGroup", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::ItemListener *, typename... Args>
	auto getItemListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItemListeners")] != -1);
		return call<R>("getItemListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLabel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLabel")] != -1);
		return call<R>("getLabel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::EventListener *, typename... Args>
	auto getListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getListeners")] != -1);
		return call<R>("getListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object *, typename... Args>
	auto getSelectedObjects(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedObjects")] != -1);
		return call<R>("getSelectedObjects", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getState")] != -1);
		return call<R>("getState", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeItemListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeItemListener")] != -1);
		return call<R>("removeItemListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCheckboxGroup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCheckboxGroup")] != -1);
		return call<R>("setCheckboxGroup", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLabel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLabel")] != -1);
		return call<R>("setLabel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setState")] != -1);
		return call<R>("setState", std::forward<Args>(args)...);
	}

};

#endif
