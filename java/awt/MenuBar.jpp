#ifndef java_awt_MenuBar_HPP
#define java_awt_MenuBar_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::MenuBar : public jObject<::java::awt::MenuBar, ::java::awt::MenuComponent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "MenuBar";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::awt::Menu(::java::awt::Menu)>("add"), //
		jMethod<::jvoid()>("addNotify"), //
		jMethod<::jvoid(::java::awt::MenuShortcut)>("deleteShortcut"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::java::awt::Font()>("getFont"), //
		jMethod<::java::awt::Menu()>("getHelpMenu"), //
		jMethod<::java::awt::Menu(::jint)>("getMenu"), //
		jMethod<::jint()>("getMenuCount"), //
		jMethod<::java::awt::MenuItem(::java::awt::MenuShortcut)>("getShortcutMenuItem"), //
		jMethod<::jvoid(::jint)>("remove"), //
		jMethod<::jvoid(::java::awt::MenuComponent)>("remove"), //
		jMethod<::jvoid()>("removeNotify"), //
		jMethod<::jvoid(::java::awt::Menu)>("setHelpMenu"), //
		jMethod<::java::util::Enumeration()>("shortcuts"), //
	};

	template<typename R = ::java::awt::Menu, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addNotify")] != -1);
		return call<R>("addNotify", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deleteShortcut(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deleteShortcut")] != -1);
		return call<R>("deleteShortcut", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Font, typename... Args>
	auto getFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFont")] != -1);
		return call<R>("getFont", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Menu, typename... Args>
	auto getHelpMenu(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHelpMenu")] != -1);
		return call<R>("getHelpMenu", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Menu, typename... Args>
	auto getMenu(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMenu")] != -1);
		return call<R>("getMenu", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMenuCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMenuCount")] != -1);
		return call<R>("getMenuCount", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::MenuItem, typename... Args>
	auto getShortcutMenuItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getShortcutMenuItem")] != -1);
		return call<R>("getShortcutMenuItem", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeNotify")] != -1);
		return call<R>("removeNotify", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHelpMenu(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHelpMenu")] != -1);
		return call<R>("setHelpMenu", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto shortcuts(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shortcuts")] != -1);
		return call<R>("shortcuts", std::forward<Args>(args)...);
	}

};

#endif
