#ifndef java_awt_AWTEvent_HPP
#define java_awt_AWTEvent_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::AWTEvent : public jObject<::java::awt::AWTEvent, ::java::util::EventObject> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "AWTEvent";

	constexpr static Enume field_signatures{
		jField<::jlong>("ACTION_EVENT_MASK"), //
		jField<::jlong>("ADJUSTMENT_EVENT_MASK"), //
		jField<::jlong>("COMPONENT_EVENT_MASK"), //
		jField<::jlong>("CONTAINER_EVENT_MASK"), //
		jField<::jlong>("FOCUS_EVENT_MASK"), //
		jField<::jlong>("HIERARCHY_BOUNDS_EVENT_MASK"), //
		jField<::jlong>("HIERARCHY_EVENT_MASK"), //
		jField<::jlong>("INPUT_METHOD_EVENT_MASK"), //
		jField<::jlong>("INVOCATION_EVENT_MASK"), //
		jField<::jlong>("ITEM_EVENT_MASK"), //
		jField<::jlong>("KEY_EVENT_MASK"), //
		jField<::jlong>("MOUSE_EVENT_MASK"), //
		jField<::jlong>("MOUSE_MOTION_EVENT_MASK"), //
		jField<::jlong>("MOUSE_WHEEL_EVENT_MASK"), //
		jField<::jlong>("PAINT_EVENT_MASK"), //
		jField<::jint>("RESERVED_ID_MAX"), //
		jField<::jlong>("TEXT_EVENT_MASK"), //
		jField<::jlong>("WINDOW_EVENT_MASK"), //
		jField<::jlong>("WINDOW_FOCUS_EVENT_MASK"), //
		jField<::jlong>("WINDOW_STATE_EVENT_MASK"), //
	};

	template<typename F = ::jlong>
	static auto ACTION_EVENT_MASK() {
		static_assert(field_signatures[jField<F>("ACTION_EVENT_MASK")] != -1);
		return sat<F>("ACTION_EVENT_MASK");
	}

	template<typename F = ::jlong>
	static auto ADJUSTMENT_EVENT_MASK() {
		static_assert(field_signatures[jField<F>("ADJUSTMENT_EVENT_MASK")] != -1);
		return sat<F>("ADJUSTMENT_EVENT_MASK");
	}

	template<typename F = ::jlong>
	static auto COMPONENT_EVENT_MASK() {
		static_assert(field_signatures[jField<F>("COMPONENT_EVENT_MASK")] != -1);
		return sat<F>("COMPONENT_EVENT_MASK");
	}

	template<typename F = ::jlong>
	static auto CONTAINER_EVENT_MASK() {
		static_assert(field_signatures[jField<F>("CONTAINER_EVENT_MASK")] != -1);
		return sat<F>("CONTAINER_EVENT_MASK");
	}

	template<typename F = ::jlong>
	static auto FOCUS_EVENT_MASK() {
		static_assert(field_signatures[jField<F>("FOCUS_EVENT_MASK")] != -1);
		return sat<F>("FOCUS_EVENT_MASK");
	}

	template<typename F = ::jlong>
	static auto HIERARCHY_BOUNDS_EVENT_MASK() {
		static_assert(field_signatures[jField<F>("HIERARCHY_BOUNDS_EVENT_MASK")] != -1);
		return sat<F>("HIERARCHY_BOUNDS_EVENT_MASK");
	}

	template<typename F = ::jlong>
	static auto HIERARCHY_EVENT_MASK() {
		static_assert(field_signatures[jField<F>("HIERARCHY_EVENT_MASK")] != -1);
		return sat<F>("HIERARCHY_EVENT_MASK");
	}

	template<typename F = ::jlong>
	static auto INPUT_METHOD_EVENT_MASK() {
		static_assert(field_signatures[jField<F>("INPUT_METHOD_EVENT_MASK")] != -1);
		return sat<F>("INPUT_METHOD_EVENT_MASK");
	}

	template<typename F = ::jlong>
	static auto INVOCATION_EVENT_MASK() {
		static_assert(field_signatures[jField<F>("INVOCATION_EVENT_MASK")] != -1);
		return sat<F>("INVOCATION_EVENT_MASK");
	}

	template<typename F = ::jlong>
	static auto ITEM_EVENT_MASK() {
		static_assert(field_signatures[jField<F>("ITEM_EVENT_MASK")] != -1);
		return sat<F>("ITEM_EVENT_MASK");
	}

	template<typename F = ::jlong>
	static auto KEY_EVENT_MASK() {
		static_assert(field_signatures[jField<F>("KEY_EVENT_MASK")] != -1);
		return sat<F>("KEY_EVENT_MASK");
	}

	template<typename F = ::jlong>
	static auto MOUSE_EVENT_MASK() {
		static_assert(field_signatures[jField<F>("MOUSE_EVENT_MASK")] != -1);
		return sat<F>("MOUSE_EVENT_MASK");
	}

	template<typename F = ::jlong>
	static auto MOUSE_MOTION_EVENT_MASK() {
		static_assert(field_signatures[jField<F>("MOUSE_MOTION_EVENT_MASK")] != -1);
		return sat<F>("MOUSE_MOTION_EVENT_MASK");
	}

	template<typename F = ::jlong>
	static auto MOUSE_WHEEL_EVENT_MASK() {
		static_assert(field_signatures[jField<F>("MOUSE_WHEEL_EVENT_MASK")] != -1);
		return sat<F>("MOUSE_WHEEL_EVENT_MASK");
	}

	template<typename F = ::jlong>
	static auto PAINT_EVENT_MASK() {
		static_assert(field_signatures[jField<F>("PAINT_EVENT_MASK")] != -1);
		return sat<F>("PAINT_EVENT_MASK");
	}

	template<typename F = ::jint>
	static auto RESERVED_ID_MAX() {
		static_assert(field_signatures[jField<F>("RESERVED_ID_MAX")] != -1);
		return sat<F>("RESERVED_ID_MAX");
	}

	template<typename F = ::jlong>
	static auto TEXT_EVENT_MASK() {
		static_assert(field_signatures[jField<F>("TEXT_EVENT_MASK")] != -1);
		return sat<F>("TEXT_EVENT_MASK");
	}

	template<typename F = ::jlong>
	static auto WINDOW_EVENT_MASK() {
		static_assert(field_signatures[jField<F>("WINDOW_EVENT_MASK")] != -1);
		return sat<F>("WINDOW_EVENT_MASK");
	}

	template<typename F = ::jlong>
	static auto WINDOW_FOCUS_EVENT_MASK() {
		static_assert(field_signatures[jField<F>("WINDOW_FOCUS_EVENT_MASK")] != -1);
		return sat<F>("WINDOW_FOCUS_EVENT_MASK");
	}

	template<typename F = ::jlong>
	static auto WINDOW_STATE_EVENT_MASK() {
		static_assert(field_signatures[jField<F>("WINDOW_STATE_EVENT_MASK")] != -1);
		return sat<F>("WINDOW_STATE_EVENT_MASK");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::Event)>(), //
		jConstructor<::jvoid(::java::lang::Object, ::jint)>(), //
		jMethod<::jint()>("getID"), //
		jMethod<::java::lang::String()>("paramString"), //
		jMethod<::jvoid(::java::lang::Object)>("setSource"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getID")] != -1);
		return call<R>("getID", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto paramString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paramString")] != -1);
		return call<R>("paramString", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSource(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSource")] != -1);
		return call<R>("setSource", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
