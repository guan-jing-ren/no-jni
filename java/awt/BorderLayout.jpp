#ifndef java_awt_BorderLayout_HPP
#define java_awt_BorderLayout_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::BorderLayout : public jObject<::java::awt::BorderLayout, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "BorderLayout";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("AFTER_LAST_LINE"), //
		jField<::java::lang::String>("AFTER_LINE_ENDS"), //
		jField<::java::lang::String>("BEFORE_FIRST_LINE"), //
		jField<::java::lang::String>("BEFORE_LINE_BEGINS"), //
		jField<::java::lang::String>("CENTER"), //
		jField<::java::lang::String>("EAST"), //
		jField<::java::lang::String>("LINE_END"), //
		jField<::java::lang::String>("LINE_START"), //
		jField<::java::lang::String>("NORTH"), //
		jField<::java::lang::String>("PAGE_END"), //
		jField<::java::lang::String>("PAGE_START"), //
		jField<::java::lang::String>("SOUTH"), //
		jField<::java::lang::String>("WEST"), //
	};

	template<typename F = ::java::lang::String>
	static auto AFTER_LAST_LINE() {
		static_assert(field_signatures[jField<F>("AFTER_LAST_LINE")] != -1);
		return sat<F>("AFTER_LAST_LINE");
	}

	template<typename F = ::java::lang::String>
	static auto AFTER_LINE_ENDS() {
		static_assert(field_signatures[jField<F>("AFTER_LINE_ENDS")] != -1);
		return sat<F>("AFTER_LINE_ENDS");
	}

	template<typename F = ::java::lang::String>
	static auto BEFORE_FIRST_LINE() {
		static_assert(field_signatures[jField<F>("BEFORE_FIRST_LINE")] != -1);
		return sat<F>("BEFORE_FIRST_LINE");
	}

	template<typename F = ::java::lang::String>
	static auto BEFORE_LINE_BEGINS() {
		static_assert(field_signatures[jField<F>("BEFORE_LINE_BEGINS")] != -1);
		return sat<F>("BEFORE_LINE_BEGINS");
	}

	template<typename F = ::java::lang::String>
	static auto CENTER() {
		static_assert(field_signatures[jField<F>("CENTER")] != -1);
		return sat<F>("CENTER");
	}

	template<typename F = ::java::lang::String>
	static auto EAST() {
		static_assert(field_signatures[jField<F>("EAST")] != -1);
		return sat<F>("EAST");
	}

	template<typename F = ::java::lang::String>
	static auto LINE_END() {
		static_assert(field_signatures[jField<F>("LINE_END")] != -1);
		return sat<F>("LINE_END");
	}

	template<typename F = ::java::lang::String>
	static auto LINE_START() {
		static_assert(field_signatures[jField<F>("LINE_START")] != -1);
		return sat<F>("LINE_START");
	}

	template<typename F = ::java::lang::String>
	static auto NORTH() {
		static_assert(field_signatures[jField<F>("NORTH")] != -1);
		return sat<F>("NORTH");
	}

	template<typename F = ::java::lang::String>
	static auto PAGE_END() {
		static_assert(field_signatures[jField<F>("PAGE_END")] != -1);
		return sat<F>("PAGE_END");
	}

	template<typename F = ::java::lang::String>
	static auto PAGE_START() {
		static_assert(field_signatures[jField<F>("PAGE_START")] != -1);
		return sat<F>("PAGE_START");
	}

	template<typename F = ::java::lang::String>
	static auto SOUTH() {
		static_assert(field_signatures[jField<F>("SOUTH")] != -1);
		return sat<F>("SOUTH");
	}

	template<typename F = ::java::lang::String>
	static auto WEST() {
		static_assert(field_signatures[jField<F>("WEST")] != -1);
		return sat<F>("WEST");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint, ::jint)>(), //
		jMethod<::jvoid(::java::awt::Component, ::java::lang::Object)>("addLayoutComponent"), //
		jMethod<::java::lang::Object(::java::awt::Component)>("getConstraints"), //
		jMethod<::jint()>("getHgap"), //
		jMethod<::jfloat(::java::awt::Container)>("getLayoutAlignmentX"), //
		jMethod<::jfloat(::java::awt::Container)>("getLayoutAlignmentY"), //
		jMethod<::java::awt::Component(::java::awt::Container, ::java::lang::Object)>("getLayoutComponent"), //
		jMethod<::java::awt::Component(::java::lang::Object)>("getLayoutComponent"), //
		jMethod<::jint()>("getVgap"), //
		jMethod<::jvoid(::java::awt::Container)>("invalidateLayout"), //
		jMethod<::jvoid(::java::awt::Container)>("layoutContainer"), //
		jMethod<::java::awt::Dimension(::java::awt::Container)>("maximumLayoutSize"), //
		jMethod<::java::awt::Dimension(::java::awt::Container)>("minimumLayoutSize"), //
		jMethod<::java::awt::Dimension(::java::awt::Container)>("preferredLayoutSize"), //
		jMethod<::jvoid(::java::awt::Component)>("removeLayoutComponent"), //
		jMethod<::jvoid(::jint)>("setHgap"), //
		jMethod<::jvoid(::jint)>("setVgap"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addLayoutComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addLayoutComponent")] != -1);
		return call<R>("addLayoutComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getConstraints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConstraints")] != -1);
		return call<R>("getConstraints", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHgap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHgap")] != -1);
		return call<R>("getHgap", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getLayoutAlignmentX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLayoutAlignmentX")] != -1);
		return call<R>("getLayoutAlignmentX", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getLayoutAlignmentY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLayoutAlignmentY")] != -1);
		return call<R>("getLayoutAlignmentY", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getLayoutComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLayoutComponent")] != -1);
		return call<R>("getLayoutComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getVgap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVgap")] != -1);
		return call<R>("getVgap", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto invalidateLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidateLayout")] != -1);
		return call<R>("invalidateLayout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto layoutContainer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("layoutContainer")] != -1);
		return call<R>("layoutContainer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto maximumLayoutSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("maximumLayoutSize")] != -1);
		return call<R>("maximumLayoutSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto minimumLayoutSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("minimumLayoutSize")] != -1);
		return call<R>("minimumLayoutSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto preferredLayoutSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("preferredLayoutSize")] != -1);
		return call<R>("preferredLayoutSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeLayoutComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeLayoutComponent")] != -1);
		return call<R>("removeLayoutComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHgap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHgap")] != -1);
		return call<R>("setHgap", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVgap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVgap")] != -1);
		return call<R>("setVgap", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
