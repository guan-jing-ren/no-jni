#ifndef java_awt_ScrollPane_HPP
#define java_awt_ScrollPane_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::ScrollPane : public jObject<::java::awt::ScrollPane, ::java::awt::Container> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "ScrollPane";

	constexpr static Enume field_signatures{
		jField<::jint>("SCROLLBARS_ALWAYS"), //
		jField<::jint>("SCROLLBARS_AS_NEEDED"), //
		jField<::jint>("SCROLLBARS_NEVER"), //
	};

	template<typename F = ::jint>
	static auto SCROLLBARS_ALWAYS() {
		static_assert(field_signatures[jField<F>("SCROLLBARS_ALWAYS")] != -1);
		return sat<F>("SCROLLBARS_ALWAYS");
	}

	template<typename F = ::jint>
	static auto SCROLLBARS_AS_NEEDED() {
		static_assert(field_signatures[jField<F>("SCROLLBARS_AS_NEEDED")] != -1);
		return sat<F>("SCROLLBARS_AS_NEEDED");
	}

	template<typename F = ::jint>
	static auto SCROLLBARS_NEVER() {
		static_assert(field_signatures[jField<F>("SCROLLBARS_NEVER")] != -1);
		return sat<F>("SCROLLBARS_NEVER");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint)>(), //
		jMethod<::jvoid()>("addNotify"), //
		jMethod<::jvoid()>("doLayout"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::java::awt::Adjustable()>("getHAdjustable"), //
		jMethod<::jint()>("getHScrollbarHeight"), //
		jMethod<::java::awt::Point()>("getScrollPosition"), //
		jMethod<::jint()>("getScrollbarDisplayPolicy"), //
		jMethod<::java::awt::Adjustable()>("getVAdjustable"), //
		jMethod<::jint()>("getVScrollbarWidth"), //
		jMethod<::java::awt::Dimension()>("getViewportSize"), //
		jMethod<::jboolean()>("isWheelScrollingEnabled"), //
		jMethod<::jvoid()>("layout"), //
		jMethod<::java::lang::String()>("paramString"), //
		jMethod<::jvoid(::java::awt::Graphics)>("printComponents"), //
		jMethod<::jvoid(::java::awt::LayoutManager)>("setLayout"), //
		jMethod<::jvoid(::jint, ::jint)>("setScrollPosition"), //
		jMethod<::jvoid(::java::awt::Point)>("setScrollPosition"), //
		jMethod<::jvoid(::jboolean)>("setWheelScrollingEnabled"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addNotify")] != -1);
		return call<R>("addNotify", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto doLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("doLayout")] != -1);
		return call<R>("doLayout", forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Adjustable, typename... Args>
	auto getHAdjustable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHAdjustable")] != -1);
		return call<R>("getHAdjustable", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHScrollbarHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHScrollbarHeight")] != -1);
		return call<R>("getHScrollbarHeight", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Point, typename... Args>
	auto getScrollPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getScrollPosition")] != -1);
		return call<R>("getScrollPosition", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getScrollbarDisplayPolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getScrollbarDisplayPolicy")] != -1);
		return call<R>("getScrollbarDisplayPolicy", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Adjustable, typename... Args>
	auto getVAdjustable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getVAdjustable")] != -1);
		return call<R>("getVAdjustable", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getVScrollbarWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getVScrollbarWidth")] != -1);
		return call<R>("getVScrollbarWidth", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getViewportSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getViewportSize")] != -1);
		return call<R>("getViewportSize", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isWheelScrollingEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isWheelScrollingEnabled")] != -1);
		return call<R>("isWheelScrollingEnabled", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto layout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("layout")] != -1);
		return call<R>("layout", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto paramString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paramString")] != -1);
		return call<R>("paramString", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto printComponents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("printComponents")] != -1);
		return call<R>("printComponents", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLayout")] != -1);
		return call<R>("setLayout", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setScrollPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setScrollPosition")] != -1);
		return call<R>("setScrollPosition", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWheelScrollingEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setWheelScrollingEnabled")] != -1);
		return call<R>("setWheelScrollingEnabled", forward<Args>(args)...);
	}

};

#endif
