#ifndef java_awt_GraphicsConfiguration_HPP
#define java_awt_GraphicsConfiguration_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::GraphicsConfiguration : public jObject<::java::awt::GraphicsConfiguration, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "GraphicsConfiguration";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::awt::image::BufferedImage(::jint, ::jint)>("createCompatibleImage"), //
		jMethod<::java::awt::image::BufferedImage(::jint, ::jint, ::jint)>("createCompatibleImage"), //
		jMethod<::java::awt::image::VolatileImage(::jint, ::jint)>("createCompatibleVolatileImage"), //
		jMethod<::java::awt::image::VolatileImage(::jint, ::jint, ::jint)>("createCompatibleVolatileImage"), //
		jMethod<::java::awt::image::VolatileImage(::jint, ::jint, ::java::awt::ImageCapabilities)>("createCompatibleVolatileImage"), //
		jMethod<::java::awt::image::VolatileImage(::jint, ::jint, ::java::awt::ImageCapabilities, ::jint)>("createCompatibleVolatileImage"), //
		jMethod<::java::awt::Rectangle()>("getBounds"), //
		jMethod<::java::awt::BufferCapabilities()>("getBufferCapabilities"), //
		jMethod<::java::awt::image::ColorModel()>("getColorModel"), //
		jMethod<::java::awt::image::ColorModel(::jint)>("getColorModel"), //
		jMethod<::java::awt::geom::AffineTransform()>("getDefaultTransform"), //
		jMethod<::java::awt::GraphicsDevice()>("getDevice"), //
		jMethod<::java::awt::ImageCapabilities()>("getImageCapabilities"), //
		jMethod<::java::awt::geom::AffineTransform()>("getNormalizingTransform"), //
		jMethod<::jboolean()>("isTranslucencyCapable"), //
	};

	template<typename R = ::java::awt::image::BufferedImage, typename... Args>
	auto createCompatibleImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createCompatibleImage")] != -1);
		return call<R>("createCompatibleImage", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::VolatileImage, typename... Args>
	auto createCompatibleVolatileImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createCompatibleVolatileImage")] != -1);
		return call<R>("createCompatibleVolatileImage", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBounds")] != -1);
		return call<R>("getBounds", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::BufferCapabilities, typename... Args>
	auto getBufferCapabilities(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBufferCapabilities")] != -1);
		return call<R>("getBufferCapabilities", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::ColorModel, typename... Args>
	auto getColorModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColorModel")] != -1);
		return call<R>("getColorModel", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::AffineTransform, typename... Args>
	auto getDefaultTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDefaultTransform")] != -1);
		return call<R>("getDefaultTransform", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::GraphicsDevice, typename... Args>
	auto getDevice(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDevice")] != -1);
		return call<R>("getDevice", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::ImageCapabilities, typename... Args>
	auto getImageCapabilities(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getImageCapabilities")] != -1);
		return call<R>("getImageCapabilities", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::AffineTransform, typename... Args>
	auto getNormalizingTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNormalizingTransform")] != -1);
		return call<R>("getNormalizingTransform", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isTranslucencyCapable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isTranslucencyCapable")] != -1);
		return call<R>("isTranslucencyCapable", forward<Args>(args)...);
	}

};

#endif
