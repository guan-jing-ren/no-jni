#ifndef java_awt_Frame_HPP
#define java_awt_Frame_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::Frame : public jObject<::java::awt::Frame, ::java::awt::Window> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "Frame";

	constexpr static Enume field_signatures{
		jField<::jint>("CROSSHAIR_CURSOR"), //
		jField<::jint>("DEFAULT_CURSOR"), //
		jField<::jint>("E_RESIZE_CURSOR"), //
		jField<::jint>("HAND_CURSOR"), //
		jField<::jint>("ICONIFIED"), //
		jField<::jint>("MAXIMIZED_BOTH"), //
		jField<::jint>("MAXIMIZED_HORIZ"), //
		jField<::jint>("MAXIMIZED_VERT"), //
		jField<::jint>("MOVE_CURSOR"), //
		jField<::jint>("NE_RESIZE_CURSOR"), //
		jField<::jint>("NORMAL"), //
		jField<::jint>("NW_RESIZE_CURSOR"), //
		jField<::jint>("N_RESIZE_CURSOR"), //
		jField<::jint>("SE_RESIZE_CURSOR"), //
		jField<::jint>("SW_RESIZE_CURSOR"), //
		jField<::jint>("S_RESIZE_CURSOR"), //
		jField<::jint>("TEXT_CURSOR"), //
		jField<::jint>("WAIT_CURSOR"), //
		jField<::jint>("W_RESIZE_CURSOR"), //
	};

	template<typename F = ::jint>
	static auto CROSSHAIR_CURSOR() {
		static_assert(field_signatures[jField<F>("CROSSHAIR_CURSOR")] != -1);
		return sat<F>("CROSSHAIR_CURSOR");
	}

	template<typename F = ::jint>
	static auto DEFAULT_CURSOR() {
		static_assert(field_signatures[jField<F>("DEFAULT_CURSOR")] != -1);
		return sat<F>("DEFAULT_CURSOR");
	}

	template<typename F = ::jint>
	static auto E_RESIZE_CURSOR() {
		static_assert(field_signatures[jField<F>("E_RESIZE_CURSOR")] != -1);
		return sat<F>("E_RESIZE_CURSOR");
	}

	template<typename F = ::jint>
	static auto HAND_CURSOR() {
		static_assert(field_signatures[jField<F>("HAND_CURSOR")] != -1);
		return sat<F>("HAND_CURSOR");
	}

	template<typename F = ::jint>
	static auto ICONIFIED() {
		static_assert(field_signatures[jField<F>("ICONIFIED")] != -1);
		return sat<F>("ICONIFIED");
	}

	template<typename F = ::jint>
	static auto MAXIMIZED_BOTH() {
		static_assert(field_signatures[jField<F>("MAXIMIZED_BOTH")] != -1);
		return sat<F>("MAXIMIZED_BOTH");
	}

	template<typename F = ::jint>
	static auto MAXIMIZED_HORIZ() {
		static_assert(field_signatures[jField<F>("MAXIMIZED_HORIZ")] != -1);
		return sat<F>("MAXIMIZED_HORIZ");
	}

	template<typename F = ::jint>
	static auto MAXIMIZED_VERT() {
		static_assert(field_signatures[jField<F>("MAXIMIZED_VERT")] != -1);
		return sat<F>("MAXIMIZED_VERT");
	}

	template<typename F = ::jint>
	static auto MOVE_CURSOR() {
		static_assert(field_signatures[jField<F>("MOVE_CURSOR")] != -1);
		return sat<F>("MOVE_CURSOR");
	}

	template<typename F = ::jint>
	static auto NE_RESIZE_CURSOR() {
		static_assert(field_signatures[jField<F>("NE_RESIZE_CURSOR")] != -1);
		return sat<F>("NE_RESIZE_CURSOR");
	}

	template<typename F = ::jint>
	static auto NORMAL() {
		static_assert(field_signatures[jField<F>("NORMAL")] != -1);
		return sat<F>("NORMAL");
	}

	template<typename F = ::jint>
	static auto NW_RESIZE_CURSOR() {
		static_assert(field_signatures[jField<F>("NW_RESIZE_CURSOR")] != -1);
		return sat<F>("NW_RESIZE_CURSOR");
	}

	template<typename F = ::jint>
	static auto N_RESIZE_CURSOR() {
		static_assert(field_signatures[jField<F>("N_RESIZE_CURSOR")] != -1);
		return sat<F>("N_RESIZE_CURSOR");
	}

	template<typename F = ::jint>
	static auto SE_RESIZE_CURSOR() {
		static_assert(field_signatures[jField<F>("SE_RESIZE_CURSOR")] != -1);
		return sat<F>("SE_RESIZE_CURSOR");
	}

	template<typename F = ::jint>
	static auto SW_RESIZE_CURSOR() {
		static_assert(field_signatures[jField<F>("SW_RESIZE_CURSOR")] != -1);
		return sat<F>("SW_RESIZE_CURSOR");
	}

	template<typename F = ::jint>
	static auto S_RESIZE_CURSOR() {
		static_assert(field_signatures[jField<F>("S_RESIZE_CURSOR")] != -1);
		return sat<F>("S_RESIZE_CURSOR");
	}

	template<typename F = ::jint>
	static auto TEXT_CURSOR() {
		static_assert(field_signatures[jField<F>("TEXT_CURSOR")] != -1);
		return sat<F>("TEXT_CURSOR");
	}

	template<typename F = ::jint>
	static auto WAIT_CURSOR() {
		static_assert(field_signatures[jField<F>("WAIT_CURSOR")] != -1);
		return sat<F>("WAIT_CURSOR");
	}

	template<typename F = ::jint>
	static auto W_RESIZE_CURSOR() {
		static_assert(field_signatures[jField<F>("W_RESIZE_CURSOR")] != -1);
		return sat<F>("W_RESIZE_CURSOR");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::awt::GraphicsConfiguration)>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::awt::GraphicsConfiguration)>(), //
		jMethod<::jvoid()>("addNotify"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::jint()>("getCursorType"), //
		jMethod<::jint()>("getExtendedState"), //
		jMethod<::java::awt::Frame *()>("getFrames"), //
		jMethod<::java::awt::Image()>("getIconImage"), //
		jMethod<::java::awt::Rectangle()>("getMaximizedBounds"), //
		jMethod<::java::awt::MenuBar()>("getMenuBar"), //
		jMethod<::jint()>("getState"), //
		jMethod<::java::lang::String()>("getTitle"), //
		jMethod<::jboolean()>("isResizable"), //
		jMethod<::jboolean()>("isUndecorated"), //
		jMethod<::jvoid(::java::awt::MenuComponent)>("remove"), //
		jMethod<::jvoid()>("removeNotify"), //
		jMethod<::jvoid(::java::awt::Color)>("setBackground"), //
		jMethod<::jvoid(::jint)>("setCursor"), //
		jMethod<::jvoid(::jint)>("setExtendedState"), //
		jMethod<::jvoid(::java::awt::Image)>("setIconImage"), //
		jMethod<::jvoid(::java::awt::Rectangle)>("setMaximizedBounds"), //
		jMethod<::jvoid(::java::awt::MenuBar)>("setMenuBar"), //
		jMethod<::jvoid(::jfloat)>("setOpacity"), //
		jMethod<::jvoid(::jboolean)>("setResizable"), //
		jMethod<::jvoid(::java::awt::Shape)>("setShape"), //
		jMethod<::jvoid(::jint)>("setState"), //
		jMethod<::jvoid(::java::lang::String)>("setTitle"), //
		jMethod<::jvoid(::jboolean)>("setUndecorated"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addNotify")] != -1);
		return call<R>("addNotify", forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCursorType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCursorType")] != -1);
		return call<R>("getCursorType", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getExtendedState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getExtendedState")] != -1);
		return call<R>("getExtendedState", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Frame *, typename... Args>
	static auto getFrames(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFrames")] != -1);
		return scall<R>("getFrames", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Image, typename... Args>
	auto getIconImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getIconImage")] != -1);
		return call<R>("getIconImage", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getMaximizedBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaximizedBounds")] != -1);
		return call<R>("getMaximizedBounds", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::MenuBar, typename... Args>
	auto getMenuBar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMenuBar")] != -1);
		return call<R>("getMenuBar", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getState")] != -1);
		return call<R>("getState", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTitle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTitle")] != -1);
		return call<R>("getTitle", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isResizable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isResizable")] != -1);
		return call<R>("isResizable", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isUndecorated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isUndecorated")] != -1);
		return call<R>("isUndecorated", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeNotify")] != -1);
		return call<R>("removeNotify", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBackground")] != -1);
		return call<R>("setBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCursor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCursor")] != -1);
		return call<R>("setCursor", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setExtendedState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setExtendedState")] != -1);
		return call<R>("setExtendedState", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIconImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setIconImage")] != -1);
		return call<R>("setIconImage", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaximizedBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMaximizedBounds")] != -1);
		return call<R>("setMaximizedBounds", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMenuBar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMenuBar")] != -1);
		return call<R>("setMenuBar", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOpacity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setOpacity")] != -1);
		return call<R>("setOpacity", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setResizable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setResizable")] != -1);
		return call<R>("setResizable", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setShape(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setShape")] != -1);
		return call<R>("setShape", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setState")] != -1);
		return call<R>("setState", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTitle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setTitle")] != -1);
		return call<R>("setTitle", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUndecorated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setUndecorated")] != -1);
		return call<R>("setUndecorated", forward<Args>(args)...);
	}

};

#endif
