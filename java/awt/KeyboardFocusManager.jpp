#ifndef java_awt_KeyboardFocusManager_HPP
#define java_awt_KeyboardFocusManager_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::KeyboardFocusManager : public jObject<::java::awt::KeyboardFocusManager, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "KeyboardFocusManager";

	constexpr static Enume field_signatures{
		jField<::jint>("BACKWARD_TRAVERSAL_KEYS"), //
		jField<::jint>("DOWN_CYCLE_TRAVERSAL_KEYS"), //
		jField<::jint>("FORWARD_TRAVERSAL_KEYS"), //
		jField<::jint>("UP_CYCLE_TRAVERSAL_KEYS"), //
	};

	template<typename F = ::jint>
	static auto BACKWARD_TRAVERSAL_KEYS() {
		static_assert(field_signatures[jField<F>("BACKWARD_TRAVERSAL_KEYS")] != -1);
		return sat<F>("BACKWARD_TRAVERSAL_KEYS");
	}

	template<typename F = ::jint>
	static auto DOWN_CYCLE_TRAVERSAL_KEYS() {
		static_assert(field_signatures[jField<F>("DOWN_CYCLE_TRAVERSAL_KEYS")] != -1);
		return sat<F>("DOWN_CYCLE_TRAVERSAL_KEYS");
	}

	template<typename F = ::jint>
	static auto FORWARD_TRAVERSAL_KEYS() {
		static_assert(field_signatures[jField<F>("FORWARD_TRAVERSAL_KEYS")] != -1);
		return sat<F>("FORWARD_TRAVERSAL_KEYS");
	}

	template<typename F = ::jint>
	static auto UP_CYCLE_TRAVERSAL_KEYS() {
		static_assert(field_signatures[jField<F>("UP_CYCLE_TRAVERSAL_KEYS")] != -1);
		return sat<F>("UP_CYCLE_TRAVERSAL_KEYS");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::awt::KeyEventDispatcher)>("addKeyEventDispatcher"), //
		jMethod<::jvoid(::java::awt::KeyEventPostProcessor)>("addKeyEventPostProcessor"), //
		jMethod<::jvoid(::java::beans::PropertyChangeListener)>("addPropertyChangeListener"), //
		jMethod<::jvoid(::java::lang::String, ::java::beans::PropertyChangeListener)>("addPropertyChangeListener"), //
		jMethod<::jvoid(::java::beans::VetoableChangeListener)>("addVetoableChangeListener"), //
		jMethod<::jvoid(::java::lang::String, ::java::beans::VetoableChangeListener)>("addVetoableChangeListener"), //
		jMethod<::jvoid()>("clearFocusOwner"), //
		jMethod<::jvoid()>("clearGlobalFocusOwner"), //
		jMethod<::jboolean(::java::awt::AWTEvent)>("dispatchEvent"), //
		jMethod<::jboolean(::java::awt::event::KeyEvent)>("dispatchKeyEvent"), //
		jMethod<::jvoid()>("downFocusCycle"), //
		jMethod<::jvoid(::java::awt::Container)>("downFocusCycle"), //
		jMethod<::jvoid()>("focusNextComponent"), //
		jMethod<::jvoid(::java::awt::Component)>("focusNextComponent"), //
		jMethod<::jvoid()>("focusPreviousComponent"), //
		jMethod<::jvoid(::java::awt::Component)>("focusPreviousComponent"), //
		jMethod<::java::awt::Window()>("getActiveWindow"), //
		jMethod<::java::awt::Container()>("getCurrentFocusCycleRoot"), //
		jMethod<::java::awt::KeyboardFocusManager()>("getCurrentKeyboardFocusManager"), //
		jMethod<::java::util::Set(::jint)>("getDefaultFocusTraversalKeys"), //
		jMethod<::java::awt::FocusTraversalPolicy()>("getDefaultFocusTraversalPolicy"), //
		jMethod<::java::awt::Component()>("getFocusOwner"), //
		jMethod<::java::awt::Window()>("getFocusedWindow"), //
		jMethod<::java::awt::Component()>("getPermanentFocusOwner"), //
		jMethod<::java::beans::PropertyChangeListener *()>("getPropertyChangeListeners"), //
		jMethod<::java::beans::PropertyChangeListener *(::java::lang::String)>("getPropertyChangeListeners"), //
		jMethod<::java::beans::VetoableChangeListener *()>("getVetoableChangeListeners"), //
		jMethod<::java::beans::VetoableChangeListener *(::java::lang::String)>("getVetoableChangeListeners"), //
		jMethod<::jboolean(::java::awt::event::KeyEvent)>("postProcessKeyEvent"), //
		jMethod<::jvoid(::java::awt::Component, ::java::awt::event::KeyEvent)>("processKeyEvent"), //
		jMethod<::jvoid(::java::awt::Component, ::java::awt::AWTEvent)>("redispatchEvent"), //
		jMethod<::jvoid(::java::awt::KeyEventDispatcher)>("removeKeyEventDispatcher"), //
		jMethod<::jvoid(::java::awt::KeyEventPostProcessor)>("removeKeyEventPostProcessor"), //
		jMethod<::jvoid(::java::beans::PropertyChangeListener)>("removePropertyChangeListener"), //
		jMethod<::jvoid(::java::lang::String, ::java::beans::PropertyChangeListener)>("removePropertyChangeListener"), //
		jMethod<::jvoid(::java::beans::VetoableChangeListener)>("removeVetoableChangeListener"), //
		jMethod<::jvoid(::java::lang::String, ::java::beans::VetoableChangeListener)>("removeVetoableChangeListener"), //
		jMethod<::jvoid(::java::awt::KeyboardFocusManager)>("setCurrentKeyboardFocusManager"), //
		jMethod<::jvoid(::jint, ::java::util::Set)>("setDefaultFocusTraversalKeys"), //
		jMethod<::jvoid(::java::awt::FocusTraversalPolicy)>("setDefaultFocusTraversalPolicy"), //
		jMethod<::jvoid(::java::awt::Container)>("setGlobalCurrentFocusCycleRoot"), //
		jMethod<::jvoid()>("upFocusCycle"), //
		jMethod<::jvoid(::java::awt::Component)>("upFocusCycle"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addKeyEventDispatcher(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addKeyEventDispatcher")] != -1);
		return call<R>("addKeyEventDispatcher", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addKeyEventPostProcessor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addKeyEventPostProcessor")] != -1);
		return call<R>("addKeyEventPostProcessor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addPropertyChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addPropertyChangeListener")] != -1);
		return call<R>("addPropertyChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addVetoableChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addVetoableChangeListener")] != -1);
		return call<R>("addVetoableChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clearFocusOwner(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clearFocusOwner")] != -1);
		return call<R>("clearFocusOwner", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clearGlobalFocusOwner(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clearGlobalFocusOwner")] != -1);
		return call<R>("clearGlobalFocusOwner", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto dispatchEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispatchEvent")] != -1);
		return call<R>("dispatchEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto dispatchKeyEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispatchKeyEvent")] != -1);
		return call<R>("dispatchKeyEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto downFocusCycle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("downFocusCycle")] != -1);
		return call<R>("downFocusCycle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto focusNextComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("focusNextComponent")] != -1);
		return call<R>("focusNextComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto focusPreviousComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("focusPreviousComponent")] != -1);
		return call<R>("focusPreviousComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Window, typename... Args>
	auto getActiveWindow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getActiveWindow")] != -1);
		return call<R>("getActiveWindow", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Container, typename... Args>
	auto getCurrentFocusCycleRoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCurrentFocusCycleRoot")] != -1);
		return call<R>("getCurrentFocusCycleRoot", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::KeyboardFocusManager, typename... Args>
	static auto getCurrentKeyboardFocusManager(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCurrentKeyboardFocusManager")] != -1);
		return scall<R>("getCurrentKeyboardFocusManager", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto getDefaultFocusTraversalKeys(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultFocusTraversalKeys")] != -1);
		return call<R>("getDefaultFocusTraversalKeys", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::FocusTraversalPolicy, typename... Args>
	auto getDefaultFocusTraversalPolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultFocusTraversalPolicy")] != -1);
		return call<R>("getDefaultFocusTraversalPolicy", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getFocusOwner(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFocusOwner")] != -1);
		return call<R>("getFocusOwner", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Window, typename... Args>
	auto getFocusedWindow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFocusedWindow")] != -1);
		return call<R>("getFocusedWindow", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getPermanentFocusOwner(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPermanentFocusOwner")] != -1);
		return call<R>("getPermanentFocusOwner", std::forward<Args>(args)...);
	}

	template<typename R = ::java::beans::PropertyChangeListener *, typename... Args>
	auto getPropertyChangeListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPropertyChangeListeners")] != -1);
		return call<R>("getPropertyChangeListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::java::beans::VetoableChangeListener *, typename... Args>
	auto getVetoableChangeListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVetoableChangeListeners")] != -1);
		return call<R>("getVetoableChangeListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto postProcessKeyEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("postProcessKeyEvent")] != -1);
		return call<R>("postProcessKeyEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto processKeyEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("processKeyEvent")] != -1);
		return call<R>("processKeyEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto redispatchEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("redispatchEvent")] != -1);
		return call<R>("redispatchEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeKeyEventDispatcher(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeKeyEventDispatcher")] != -1);
		return call<R>("removeKeyEventDispatcher", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeKeyEventPostProcessor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeKeyEventPostProcessor")] != -1);
		return call<R>("removeKeyEventPostProcessor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removePropertyChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removePropertyChangeListener")] != -1);
		return call<R>("removePropertyChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeVetoableChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeVetoableChangeListener")] != -1);
		return call<R>("removeVetoableChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setCurrentKeyboardFocusManager(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCurrentKeyboardFocusManager")] != -1);
		return scall<R>("setCurrentKeyboardFocusManager", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDefaultFocusTraversalKeys(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDefaultFocusTraversalKeys")] != -1);
		return call<R>("setDefaultFocusTraversalKeys", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDefaultFocusTraversalPolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDefaultFocusTraversalPolicy")] != -1);
		return call<R>("setDefaultFocusTraversalPolicy", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGlobalCurrentFocusCycleRoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setGlobalCurrentFocusCycleRoot")] != -1);
		return call<R>("setGlobalCurrentFocusCycleRoot", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto upFocusCycle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("upFocusCycle")] != -1);
		return call<R>("upFocusCycle", std::forward<Args>(args)...);
	}

};

#endif
