#ifndef java_awt_GraphicsDevice_HPP
#define java_awt_GraphicsDevice_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::GraphicsDevice : public jObject<::java::awt::GraphicsDevice, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "GraphicsDevice";

	constexpr static Enume field_signatures{
		jField<::jint>("TYPE_IMAGE_BUFFER"), //
		jField<::jint>("TYPE_PRINTER"), //
		jField<::jint>("TYPE_RASTER_SCREEN"), //
	};

	template<typename F = ::jint>
	static auto TYPE_IMAGE_BUFFER() {
		static_assert(field_signatures[jField<F>("TYPE_IMAGE_BUFFER")] != -1);
		return sat<F>("TYPE_IMAGE_BUFFER");
	}

	template<typename F = ::jint>
	static auto TYPE_PRINTER() {
		static_assert(field_signatures[jField<F>("TYPE_PRINTER")] != -1);
		return sat<F>("TYPE_PRINTER");
	}

	template<typename F = ::jint>
	static auto TYPE_RASTER_SCREEN() {
		static_assert(field_signatures[jField<F>("TYPE_RASTER_SCREEN")] != -1);
		return sat<F>("TYPE_RASTER_SCREEN");
	}

	constexpr static Enume method_signatures{
		jMethod<::jint()>("getAvailableAcceleratedMemory"), //
		jMethod<::java::awt::GraphicsConfiguration(::java::awt::GraphicsConfigTemplate)>("getBestConfiguration"), //
		jMethod<::java::awt::GraphicsConfiguration *()>("getConfigurations"), //
		jMethod<::java::awt::GraphicsConfiguration()>("getDefaultConfiguration"), //
		jMethod<::java::awt::DisplayMode()>("getDisplayMode"), //
		jMethod<::java::awt::DisplayMode *()>("getDisplayModes"), //
		jMethod<::java::awt::Window()>("getFullScreenWindow"), //
		jMethod<::java::lang::String()>("getIDstring"), //
		jMethod<::jint()>("getType"), //
		jMethod<::jboolean()>("isDisplayChangeSupported"), //
		jMethod<::jboolean()>("isFullScreenSupported"), //
		jMethod<::jboolean(::java::awt::GraphicsDevice$WindowTranslucency)>("isWindowTranslucencySupported"), //
		jMethod<::jvoid(::java::awt::DisplayMode)>("setDisplayMode"), //
		jMethod<::jvoid(::java::awt::Window)>("setFullScreenWindow"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getAvailableAcceleratedMemory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAvailableAcceleratedMemory")] != -1);
		return call<R>("getAvailableAcceleratedMemory", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::GraphicsConfiguration, typename... Args>
	auto getBestConfiguration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBestConfiguration")] != -1);
		return call<R>("getBestConfiguration", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::GraphicsConfiguration *, typename... Args>
	auto getConfigurations(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getConfigurations")] != -1);
		return call<R>("getConfigurations", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::GraphicsConfiguration, typename... Args>
	auto getDefaultConfiguration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDefaultConfiguration")] != -1);
		return call<R>("getDefaultConfiguration", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::DisplayMode, typename... Args>
	auto getDisplayMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDisplayMode")] != -1);
		return call<R>("getDisplayMode", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::DisplayMode *, typename... Args>
	auto getDisplayModes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDisplayModes")] != -1);
		return call<R>("getDisplayModes", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Window, typename... Args>
	auto getFullScreenWindow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFullScreenWindow")] != -1);
		return call<R>("getFullScreenWindow", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getIDstring(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getIDstring")] != -1);
		return call<R>("getIDstring", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDisplayChangeSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isDisplayChangeSupported")] != -1);
		return call<R>("isDisplayChangeSupported", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFullScreenSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isFullScreenSupported")] != -1);
		return call<R>("isFullScreenSupported", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isWindowTranslucencySupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isWindowTranslucencySupported")] != -1);
		return call<R>("isWindowTranslucencySupported", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDisplayMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDisplayMode")] != -1);
		return call<R>("setDisplayMode", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFullScreenWindow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFullScreenWindow")] != -1);
		return call<R>("setFullScreenWindow", forward<Args>(args)...);
	}

};

#endif
