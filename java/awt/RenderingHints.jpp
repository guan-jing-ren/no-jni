#ifndef java_awt_RenderingHints_HPP
#define java_awt_RenderingHints_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::RenderingHints : public jObject<::java::awt::RenderingHints, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "RenderingHints";

	constexpr static Enume field_signatures{
		jField<::java::awt::RenderingHints$Key>("KEY_ALPHA_INTERPOLATION"), //
		jField<::java::awt::RenderingHints$Key>("KEY_ANTIALIASING"), //
		jField<::java::awt::RenderingHints$Key>("KEY_COLOR_RENDERING"), //
		jField<::java::awt::RenderingHints$Key>("KEY_DITHERING"), //
		jField<::java::awt::RenderingHints$Key>("KEY_FRACTIONALMETRICS"), //
		jField<::java::awt::RenderingHints$Key>("KEY_INTERPOLATION"), //
		jField<::java::awt::RenderingHints$Key>("KEY_RENDERING"), //
		jField<::java::awt::RenderingHints$Key>("KEY_STROKE_CONTROL"), //
		jField<::java::awt::RenderingHints$Key>("KEY_TEXT_ANTIALIASING"), //
		jField<::java::awt::RenderingHints$Key>("KEY_TEXT_LCD_CONTRAST"), //
		jField<::java::lang::Object>("VALUE_ALPHA_INTERPOLATION_DEFAULT"), //
		jField<::java::lang::Object>("VALUE_ALPHA_INTERPOLATION_QUALITY"), //
		jField<::java::lang::Object>("VALUE_ALPHA_INTERPOLATION_SPEED"), //
		jField<::java::lang::Object>("VALUE_ANTIALIAS_DEFAULT"), //
		jField<::java::lang::Object>("VALUE_ANTIALIAS_OFF"), //
		jField<::java::lang::Object>("VALUE_ANTIALIAS_ON"), //
		jField<::java::lang::Object>("VALUE_COLOR_RENDER_DEFAULT"), //
		jField<::java::lang::Object>("VALUE_COLOR_RENDER_QUALITY"), //
		jField<::java::lang::Object>("VALUE_COLOR_RENDER_SPEED"), //
		jField<::java::lang::Object>("VALUE_DITHER_DEFAULT"), //
		jField<::java::lang::Object>("VALUE_DITHER_DISABLE"), //
		jField<::java::lang::Object>("VALUE_DITHER_ENABLE"), //
		jField<::java::lang::Object>("VALUE_FRACTIONALMETRICS_DEFAULT"), //
		jField<::java::lang::Object>("VALUE_FRACTIONALMETRICS_OFF"), //
		jField<::java::lang::Object>("VALUE_FRACTIONALMETRICS_ON"), //
		jField<::java::lang::Object>("VALUE_INTERPOLATION_BICUBIC"), //
		jField<::java::lang::Object>("VALUE_INTERPOLATION_BILINEAR"), //
		jField<::java::lang::Object>("VALUE_INTERPOLATION_NEAREST_NEIGHBOR"), //
		jField<::java::lang::Object>("VALUE_RENDER_DEFAULT"), //
		jField<::java::lang::Object>("VALUE_RENDER_QUALITY"), //
		jField<::java::lang::Object>("VALUE_RENDER_SPEED"), //
		jField<::java::lang::Object>("VALUE_STROKE_DEFAULT"), //
		jField<::java::lang::Object>("VALUE_STROKE_NORMALIZE"), //
		jField<::java::lang::Object>("VALUE_STROKE_PURE"), //
		jField<::java::lang::Object>("VALUE_TEXT_ANTIALIAS_DEFAULT"), //
		jField<::java::lang::Object>("VALUE_TEXT_ANTIALIAS_GASP"), //
		jField<::java::lang::Object>("VALUE_TEXT_ANTIALIAS_LCD_HBGR"), //
		jField<::java::lang::Object>("VALUE_TEXT_ANTIALIAS_LCD_HRGB"), //
		jField<::java::lang::Object>("VALUE_TEXT_ANTIALIAS_LCD_VBGR"), //
		jField<::java::lang::Object>("VALUE_TEXT_ANTIALIAS_LCD_VRGB"), //
		jField<::java::lang::Object>("VALUE_TEXT_ANTIALIAS_OFF"), //
		jField<::java::lang::Object>("VALUE_TEXT_ANTIALIAS_ON"), //
	};

	template<typename F = ::java::awt::RenderingHints$Key>
	static auto KEY_ALPHA_INTERPOLATION() {
		static_assert(field_signatures[jField<F>("KEY_ALPHA_INTERPOLATION")] != -1);
		return sat<F>("KEY_ALPHA_INTERPOLATION");
	}

	template<typename F = ::java::awt::RenderingHints$Key>
	static auto KEY_ANTIALIASING() {
		static_assert(field_signatures[jField<F>("KEY_ANTIALIASING")] != -1);
		return sat<F>("KEY_ANTIALIASING");
	}

	template<typename F = ::java::awt::RenderingHints$Key>
	static auto KEY_COLOR_RENDERING() {
		static_assert(field_signatures[jField<F>("KEY_COLOR_RENDERING")] != -1);
		return sat<F>("KEY_COLOR_RENDERING");
	}

	template<typename F = ::java::awt::RenderingHints$Key>
	static auto KEY_DITHERING() {
		static_assert(field_signatures[jField<F>("KEY_DITHERING")] != -1);
		return sat<F>("KEY_DITHERING");
	}

	template<typename F = ::java::awt::RenderingHints$Key>
	static auto KEY_FRACTIONALMETRICS() {
		static_assert(field_signatures[jField<F>("KEY_FRACTIONALMETRICS")] != -1);
		return sat<F>("KEY_FRACTIONALMETRICS");
	}

	template<typename F = ::java::awt::RenderingHints$Key>
	static auto KEY_INTERPOLATION() {
		static_assert(field_signatures[jField<F>("KEY_INTERPOLATION")] != -1);
		return sat<F>("KEY_INTERPOLATION");
	}

	template<typename F = ::java::awt::RenderingHints$Key>
	static auto KEY_RENDERING() {
		static_assert(field_signatures[jField<F>("KEY_RENDERING")] != -1);
		return sat<F>("KEY_RENDERING");
	}

	template<typename F = ::java::awt::RenderingHints$Key>
	static auto KEY_STROKE_CONTROL() {
		static_assert(field_signatures[jField<F>("KEY_STROKE_CONTROL")] != -1);
		return sat<F>("KEY_STROKE_CONTROL");
	}

	template<typename F = ::java::awt::RenderingHints$Key>
	static auto KEY_TEXT_ANTIALIASING() {
		static_assert(field_signatures[jField<F>("KEY_TEXT_ANTIALIASING")] != -1);
		return sat<F>("KEY_TEXT_ANTIALIASING");
	}

	template<typename F = ::java::awt::RenderingHints$Key>
	static auto KEY_TEXT_LCD_CONTRAST() {
		static_assert(field_signatures[jField<F>("KEY_TEXT_LCD_CONTRAST")] != -1);
		return sat<F>("KEY_TEXT_LCD_CONTRAST");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_ALPHA_INTERPOLATION_DEFAULT() {
		static_assert(field_signatures[jField<F>("VALUE_ALPHA_INTERPOLATION_DEFAULT")] != -1);
		return sat<F>("VALUE_ALPHA_INTERPOLATION_DEFAULT");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_ALPHA_INTERPOLATION_QUALITY() {
		static_assert(field_signatures[jField<F>("VALUE_ALPHA_INTERPOLATION_QUALITY")] != -1);
		return sat<F>("VALUE_ALPHA_INTERPOLATION_QUALITY");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_ALPHA_INTERPOLATION_SPEED() {
		static_assert(field_signatures[jField<F>("VALUE_ALPHA_INTERPOLATION_SPEED")] != -1);
		return sat<F>("VALUE_ALPHA_INTERPOLATION_SPEED");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_ANTIALIAS_DEFAULT() {
		static_assert(field_signatures[jField<F>("VALUE_ANTIALIAS_DEFAULT")] != -1);
		return sat<F>("VALUE_ANTIALIAS_DEFAULT");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_ANTIALIAS_OFF() {
		static_assert(field_signatures[jField<F>("VALUE_ANTIALIAS_OFF")] != -1);
		return sat<F>("VALUE_ANTIALIAS_OFF");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_ANTIALIAS_ON() {
		static_assert(field_signatures[jField<F>("VALUE_ANTIALIAS_ON")] != -1);
		return sat<F>("VALUE_ANTIALIAS_ON");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_COLOR_RENDER_DEFAULT() {
		static_assert(field_signatures[jField<F>("VALUE_COLOR_RENDER_DEFAULT")] != -1);
		return sat<F>("VALUE_COLOR_RENDER_DEFAULT");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_COLOR_RENDER_QUALITY() {
		static_assert(field_signatures[jField<F>("VALUE_COLOR_RENDER_QUALITY")] != -1);
		return sat<F>("VALUE_COLOR_RENDER_QUALITY");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_COLOR_RENDER_SPEED() {
		static_assert(field_signatures[jField<F>("VALUE_COLOR_RENDER_SPEED")] != -1);
		return sat<F>("VALUE_COLOR_RENDER_SPEED");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_DITHER_DEFAULT() {
		static_assert(field_signatures[jField<F>("VALUE_DITHER_DEFAULT")] != -1);
		return sat<F>("VALUE_DITHER_DEFAULT");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_DITHER_DISABLE() {
		static_assert(field_signatures[jField<F>("VALUE_DITHER_DISABLE")] != -1);
		return sat<F>("VALUE_DITHER_DISABLE");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_DITHER_ENABLE() {
		static_assert(field_signatures[jField<F>("VALUE_DITHER_ENABLE")] != -1);
		return sat<F>("VALUE_DITHER_ENABLE");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_FRACTIONALMETRICS_DEFAULT() {
		static_assert(field_signatures[jField<F>("VALUE_FRACTIONALMETRICS_DEFAULT")] != -1);
		return sat<F>("VALUE_FRACTIONALMETRICS_DEFAULT");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_FRACTIONALMETRICS_OFF() {
		static_assert(field_signatures[jField<F>("VALUE_FRACTIONALMETRICS_OFF")] != -1);
		return sat<F>("VALUE_FRACTIONALMETRICS_OFF");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_FRACTIONALMETRICS_ON() {
		static_assert(field_signatures[jField<F>("VALUE_FRACTIONALMETRICS_ON")] != -1);
		return sat<F>("VALUE_FRACTIONALMETRICS_ON");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_INTERPOLATION_BICUBIC() {
		static_assert(field_signatures[jField<F>("VALUE_INTERPOLATION_BICUBIC")] != -1);
		return sat<F>("VALUE_INTERPOLATION_BICUBIC");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_INTERPOLATION_BILINEAR() {
		static_assert(field_signatures[jField<F>("VALUE_INTERPOLATION_BILINEAR")] != -1);
		return sat<F>("VALUE_INTERPOLATION_BILINEAR");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_INTERPOLATION_NEAREST_NEIGHBOR() {
		static_assert(field_signatures[jField<F>("VALUE_INTERPOLATION_NEAREST_NEIGHBOR")] != -1);
		return sat<F>("VALUE_INTERPOLATION_NEAREST_NEIGHBOR");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_RENDER_DEFAULT() {
		static_assert(field_signatures[jField<F>("VALUE_RENDER_DEFAULT")] != -1);
		return sat<F>("VALUE_RENDER_DEFAULT");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_RENDER_QUALITY() {
		static_assert(field_signatures[jField<F>("VALUE_RENDER_QUALITY")] != -1);
		return sat<F>("VALUE_RENDER_QUALITY");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_RENDER_SPEED() {
		static_assert(field_signatures[jField<F>("VALUE_RENDER_SPEED")] != -1);
		return sat<F>("VALUE_RENDER_SPEED");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_STROKE_DEFAULT() {
		static_assert(field_signatures[jField<F>("VALUE_STROKE_DEFAULT")] != -1);
		return sat<F>("VALUE_STROKE_DEFAULT");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_STROKE_NORMALIZE() {
		static_assert(field_signatures[jField<F>("VALUE_STROKE_NORMALIZE")] != -1);
		return sat<F>("VALUE_STROKE_NORMALIZE");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_STROKE_PURE() {
		static_assert(field_signatures[jField<F>("VALUE_STROKE_PURE")] != -1);
		return sat<F>("VALUE_STROKE_PURE");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_TEXT_ANTIALIAS_DEFAULT() {
		static_assert(field_signatures[jField<F>("VALUE_TEXT_ANTIALIAS_DEFAULT")] != -1);
		return sat<F>("VALUE_TEXT_ANTIALIAS_DEFAULT");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_TEXT_ANTIALIAS_GASP() {
		static_assert(field_signatures[jField<F>("VALUE_TEXT_ANTIALIAS_GASP")] != -1);
		return sat<F>("VALUE_TEXT_ANTIALIAS_GASP");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_TEXT_ANTIALIAS_LCD_HBGR() {
		static_assert(field_signatures[jField<F>("VALUE_TEXT_ANTIALIAS_LCD_HBGR")] != -1);
		return sat<F>("VALUE_TEXT_ANTIALIAS_LCD_HBGR");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_TEXT_ANTIALIAS_LCD_HRGB() {
		static_assert(field_signatures[jField<F>("VALUE_TEXT_ANTIALIAS_LCD_HRGB")] != -1);
		return sat<F>("VALUE_TEXT_ANTIALIAS_LCD_HRGB");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_TEXT_ANTIALIAS_LCD_VBGR() {
		static_assert(field_signatures[jField<F>("VALUE_TEXT_ANTIALIAS_LCD_VBGR")] != -1);
		return sat<F>("VALUE_TEXT_ANTIALIAS_LCD_VBGR");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_TEXT_ANTIALIAS_LCD_VRGB() {
		static_assert(field_signatures[jField<F>("VALUE_TEXT_ANTIALIAS_LCD_VRGB")] != -1);
		return sat<F>("VALUE_TEXT_ANTIALIAS_LCD_VRGB");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_TEXT_ANTIALIAS_OFF() {
		static_assert(field_signatures[jField<F>("VALUE_TEXT_ANTIALIAS_OFF")] != -1);
		return sat<F>("VALUE_TEXT_ANTIALIAS_OFF");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_TEXT_ANTIALIAS_ON() {
		static_assert(field_signatures[jField<F>("VALUE_TEXT_ANTIALIAS_ON")] != -1);
		return sat<F>("VALUE_TEXT_ANTIALIAS_ON");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::RenderingHints$Key, ::java::lang::Object)>(), //
		jConstructor<::jvoid(::java::util::Map)>(), //
		jMethod<::jvoid(::java::awt::RenderingHints)>("add"), //
		jMethod<::jvoid()>("clear"), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::util::function::BiFunction)>("compute"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::util::function::Function)>("computeIfAbsent"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::util::function::BiFunction)>("computeIfPresent"), //
		jMethod<::jboolean(::java::lang::Object)>("containsKey"), //
		jMethod<::jboolean(::java::lang::Object)>("containsValue"), //
		jMethod<::java::util::Set()>("entrySet"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jvoid(::java::util::function::BiConsumer)>("forEach"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("get"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Object)>("getOrDefault"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isEmpty"), //
		jMethod<::java::util::Set()>("keySet"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Object, ::java::util::function::BiFunction)>("merge"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Object)>("put"), //
		jMethod<::jvoid(::java::util::Map)>("putAll"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Object)>("putIfAbsent"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("remove"), //
		jMethod<::jboolean(::java::lang::Object, ::java::lang::Object)>("remove"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Object)>("replace"), //
		jMethod<::jboolean(::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("replace"), //
		jMethod<::jvoid(::java::util::function::BiFunction)>("replaceAll"), //
		jMethod<::jint()>("size"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::util::Collection()>("values"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto compute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compute")] != -1);
		return call<R>("compute", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto computeIfAbsent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("computeIfAbsent")] != -1);
		return call<R>("computeIfAbsent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto computeIfPresent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("computeIfPresent")] != -1);
		return call<R>("computeIfPresent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto containsKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("containsKey")] != -1);
		return call<R>("containsKey", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto containsValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("containsValue")] != -1);
		return call<R>("containsValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto entrySet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("entrySet")] != -1);
		return call<R>("entrySet", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto forEach(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("forEach")] != -1);
		return call<R>("forEach", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getOrDefault(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOrDefault")] != -1);
		return call<R>("getOrDefault", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEmpty")] != -1);
		return call<R>("isEmpty", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto keySet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("keySet")] != -1);
		return call<R>("keySet", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto merge(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("merge")] != -1);
		return call<R>("merge", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto put(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("put")] != -1);
		return call<R>("put", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putAll")] != -1);
		return call<R>("putAll", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto putIfAbsent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putIfAbsent")] != -1);
		return call<R>("putIfAbsent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto replace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("replace")] != -1);
		return call<R>("replace", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto replaceAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("replaceAll")] != -1);
		return call<R>("replaceAll", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto size(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("size")] != -1);
		return call<R>("size", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Collection, typename... Args>
	auto values(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return call<R>("values", std::forward<Args>(args)...);
	}

};

#endif
