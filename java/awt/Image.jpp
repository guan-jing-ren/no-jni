#ifndef java_awt_Image_HPP
#define java_awt_Image_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::Image : public jObject<::java::awt::Image, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "Image";

	constexpr static Enume field_signatures{
		jField<::jint>("SCALE_AREA_AVERAGING"), //
		jField<::jint>("SCALE_DEFAULT"), //
		jField<::jint>("SCALE_FAST"), //
		jField<::jint>("SCALE_REPLICATE"), //
		jField<::jint>("SCALE_SMOOTH"), //
		jField<::java::lang::Object>("UndefinedProperty"), //
	};

	template<typename F = ::jint>
	static auto SCALE_AREA_AVERAGING() {
		static_assert(field_signatures[jField<F>("SCALE_AREA_AVERAGING")] != -1);
		return sat<F>("SCALE_AREA_AVERAGING");
	}

	template<typename F = ::jint>
	static auto SCALE_DEFAULT() {
		static_assert(field_signatures[jField<F>("SCALE_DEFAULT")] != -1);
		return sat<F>("SCALE_DEFAULT");
	}

	template<typename F = ::jint>
	static auto SCALE_FAST() {
		static_assert(field_signatures[jField<F>("SCALE_FAST")] != -1);
		return sat<F>("SCALE_FAST");
	}

	template<typename F = ::jint>
	static auto SCALE_REPLICATE() {
		static_assert(field_signatures[jField<F>("SCALE_REPLICATE")] != -1);
		return sat<F>("SCALE_REPLICATE");
	}

	template<typename F = ::jint>
	static auto SCALE_SMOOTH() {
		static_assert(field_signatures[jField<F>("SCALE_SMOOTH")] != -1);
		return sat<F>("SCALE_SMOOTH");
	}

	template<typename F = ::java::lang::Object>
	static auto UndefinedProperty() {
		static_assert(field_signatures[jField<F>("UndefinedProperty")] != -1);
		return sat<F>("UndefinedProperty");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid()>("flush"), //
		jMethod<::jfloat()>("getAccelerationPriority"), //
		jMethod<::java::awt::ImageCapabilities(::java::awt::GraphicsConfiguration)>("getCapabilities"), //
		jMethod<::java::awt::Graphics()>("getGraphics"), //
		jMethod<::jint(::java::awt::image::ImageObserver)>("getHeight"), //
		jMethod<::java::lang::Object(::java::lang::String, ::java::awt::image::ImageObserver)>("getProperty"), //
		jMethod<::java::awt::Image(::jint, ::jint, ::jint)>("getScaledInstance"), //
		jMethod<::java::awt::image::ImageProducer()>("getSource"), //
		jMethod<::jint(::java::awt::image::ImageObserver)>("getWidth"), //
		jMethod<::jvoid(::jfloat)>("setAccelerationPriority"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto flush(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("flush")] != -1);
		return call<R>("flush", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getAccelerationPriority(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccelerationPriority")] != -1);
		return call<R>("getAccelerationPriority", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::ImageCapabilities, typename... Args>
	auto getCapabilities(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCapabilities")] != -1);
		return call<R>("getCapabilities", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Graphics, typename... Args>
	auto getGraphics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getGraphics")] != -1);
		return call<R>("getGraphics", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHeight")] != -1);
		return call<R>("getHeight", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getProperty")] != -1);
		return call<R>("getProperty", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Image, typename... Args>
	auto getScaledInstance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getScaledInstance")] != -1);
		return call<R>("getScaledInstance", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::ImageProducer, typename... Args>
	auto getSource(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSource")] != -1);
		return call<R>("getSource", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAccelerationPriority(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setAccelerationPriority")] != -1);
		return call<R>("setAccelerationPriority", forward<Args>(args)...);
	}

};

#endif
