#ifndef java_awt_Desktop$Action_HPP
#define java_awt_Desktop$Action_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::Desktop$Action : public jObject<::java::awt::Desktop$Action, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "Desktop$Action";

	constexpr static Enume field_signatures{
		jField<::java::awt::Desktop$Action>("BROWSE"), //
		jField<::java::awt::Desktop$Action>("EDIT"), //
		jField<::java::awt::Desktop$Action>("MAIL"), //
		jField<::java::awt::Desktop$Action>("OPEN"), //
		jField<::java::awt::Desktop$Action>("PRINT"), //
	};

	template<typename F = ::java::awt::Desktop$Action>
	static auto BROWSE() {
		static_assert(field_signatures[jField<F>("BROWSE")] != -1);
		return sat<F>("BROWSE");
	}

	template<typename F = ::java::awt::Desktop$Action>
	static auto EDIT() {
		static_assert(field_signatures[jField<F>("EDIT")] != -1);
		return sat<F>("EDIT");
	}

	template<typename F = ::java::awt::Desktop$Action>
	static auto MAIL() {
		static_assert(field_signatures[jField<F>("MAIL")] != -1);
		return sat<F>("MAIL");
	}

	template<typename F = ::java::awt::Desktop$Action>
	static auto OPEN() {
		static_assert(field_signatures[jField<F>("OPEN")] != -1);
		return sat<F>("OPEN");
	}

	template<typename F = ::java::awt::Desktop$Action>
	static auto PRINT() {
		static_assert(field_signatures[jField<F>("PRINT")] != -1);
		return sat<F>("PRINT");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::awt::Desktop$Action(::java::lang::String)>("valueOf"), //
		jMethod<::java::awt::Desktop$Action *()>("values"), //
	};

	template<typename R = ::java::awt::Desktop$Action, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Desktop$Action *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
