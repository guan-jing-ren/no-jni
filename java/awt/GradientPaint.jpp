#ifndef java_awt_GradientPaint_HPP
#define java_awt_GradientPaint_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::GradientPaint : public jObject<::java::awt::GradientPaint, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "GradientPaint";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jfloat, ::jfloat, ::java::awt::Color, ::jfloat, ::jfloat, ::java::awt::Color)>(), //
		jConstructor<::jvoid(::jfloat, ::jfloat, ::java::awt::Color, ::jfloat, ::jfloat, ::java::awt::Color, ::jboolean)>(), //
		jConstructor<::jvoid(::java::awt::geom::Point2D, ::java::awt::Color, ::java::awt::geom::Point2D, ::java::awt::Color)>(), //
		jConstructor<::jvoid(::java::awt::geom::Point2D, ::java::awt::Color, ::java::awt::geom::Point2D, ::java::awt::Color, ::jboolean)>(), //
		jMethod<::java::awt::PaintContext(::java::awt::image::ColorModel, ::java::awt::Rectangle, ::java::awt::geom::Rectangle2D, ::java::awt::geom::AffineTransform, ::java::awt::RenderingHints)>("createContext"), //
		jMethod<::java::awt::Color()>("getColor1"), //
		jMethod<::java::awt::Color()>("getColor2"), //
		jMethod<::java::awt::geom::Point2D()>("getPoint1"), //
		jMethod<::java::awt::geom::Point2D()>("getPoint2"), //
		jMethod<::jint()>("getTransparency"), //
		jMethod<::jboolean()>("isCyclic"), //
	};

	template<typename R = ::java::awt::PaintContext, typename... Args>
	auto createContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createContext")] != -1);
		return call<R>("createContext", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getColor1(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColor1")] != -1);
		return call<R>("getColor1", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getColor2(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColor2")] != -1);
		return call<R>("getColor2", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Point2D, typename... Args>
	auto getPoint1(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPoint1")] != -1);
		return call<R>("getPoint1", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Point2D, typename... Args>
	auto getPoint2(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPoint2")] != -1);
		return call<R>("getPoint2", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTransparency(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTransparency")] != -1);
		return call<R>("getTransparency", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCyclic(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isCyclic")] != -1);
		return call<R>("isCyclic", forward<Args>(args)...);
	}

};

#endif
