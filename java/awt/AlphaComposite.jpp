#ifndef java_awt_AlphaComposite_HPP
#define java_awt_AlphaComposite_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::AlphaComposite : public jObject<::java::awt::AlphaComposite, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "AlphaComposite";

	constexpr static Enume field_signatures{
		jField<::jint>("CLEAR"), //
		jField<::java::awt::AlphaComposite>("Clear"), //
		jField<::jint>("DST"), //
		jField<::jint>("DST_ATOP"), //
		jField<::jint>("DST_IN"), //
		jField<::jint>("DST_OUT"), //
		jField<::jint>("DST_OVER"), //
		jField<::java::awt::AlphaComposite>("Dst"), //
		jField<::java::awt::AlphaComposite>("DstAtop"), //
		jField<::java::awt::AlphaComposite>("DstIn"), //
		jField<::java::awt::AlphaComposite>("DstOut"), //
		jField<::java::awt::AlphaComposite>("DstOver"), //
		jField<::jint>("SRC"), //
		jField<::jint>("SRC_ATOP"), //
		jField<::jint>("SRC_IN"), //
		jField<::jint>("SRC_OUT"), //
		jField<::jint>("SRC_OVER"), //
		jField<::java::awt::AlphaComposite>("Src"), //
		jField<::java::awt::AlphaComposite>("SrcAtop"), //
		jField<::java::awt::AlphaComposite>("SrcIn"), //
		jField<::java::awt::AlphaComposite>("SrcOut"), //
		jField<::java::awt::AlphaComposite>("SrcOver"), //
		jField<::jint>("XOR"), //
		jField<::java::awt::AlphaComposite>("Xor"), //
	};

	template<typename F = ::jint>
	static auto CLEAR() {
		static_assert(field_signatures[jField<F>("CLEAR")] != -1);
		return sat<F>("CLEAR");
	}

	template<typename F = ::java::awt::AlphaComposite>
	static auto Clear() {
		static_assert(field_signatures[jField<F>("Clear")] != -1);
		return sat<F>("Clear");
	}

	template<typename F = ::jint>
	static auto DST() {
		static_assert(field_signatures[jField<F>("DST")] != -1);
		return sat<F>("DST");
	}

	template<typename F = ::jint>
	static auto DST_ATOP() {
		static_assert(field_signatures[jField<F>("DST_ATOP")] != -1);
		return sat<F>("DST_ATOP");
	}

	template<typename F = ::jint>
	static auto DST_IN() {
		static_assert(field_signatures[jField<F>("DST_IN")] != -1);
		return sat<F>("DST_IN");
	}

	template<typename F = ::jint>
	static auto DST_OUT() {
		static_assert(field_signatures[jField<F>("DST_OUT")] != -1);
		return sat<F>("DST_OUT");
	}

	template<typename F = ::jint>
	static auto DST_OVER() {
		static_assert(field_signatures[jField<F>("DST_OVER")] != -1);
		return sat<F>("DST_OVER");
	}

	template<typename F = ::java::awt::AlphaComposite>
	static auto Dst() {
		static_assert(field_signatures[jField<F>("Dst")] != -1);
		return sat<F>("Dst");
	}

	template<typename F = ::java::awt::AlphaComposite>
	static auto DstAtop() {
		static_assert(field_signatures[jField<F>("DstAtop")] != -1);
		return sat<F>("DstAtop");
	}

	template<typename F = ::java::awt::AlphaComposite>
	static auto DstIn() {
		static_assert(field_signatures[jField<F>("DstIn")] != -1);
		return sat<F>("DstIn");
	}

	template<typename F = ::java::awt::AlphaComposite>
	static auto DstOut() {
		static_assert(field_signatures[jField<F>("DstOut")] != -1);
		return sat<F>("DstOut");
	}

	template<typename F = ::java::awt::AlphaComposite>
	static auto DstOver() {
		static_assert(field_signatures[jField<F>("DstOver")] != -1);
		return sat<F>("DstOver");
	}

	template<typename F = ::jint>
	static auto SRC() {
		static_assert(field_signatures[jField<F>("SRC")] != -1);
		return sat<F>("SRC");
	}

	template<typename F = ::jint>
	static auto SRC_ATOP() {
		static_assert(field_signatures[jField<F>("SRC_ATOP")] != -1);
		return sat<F>("SRC_ATOP");
	}

	template<typename F = ::jint>
	static auto SRC_IN() {
		static_assert(field_signatures[jField<F>("SRC_IN")] != -1);
		return sat<F>("SRC_IN");
	}

	template<typename F = ::jint>
	static auto SRC_OUT() {
		static_assert(field_signatures[jField<F>("SRC_OUT")] != -1);
		return sat<F>("SRC_OUT");
	}

	template<typename F = ::jint>
	static auto SRC_OVER() {
		static_assert(field_signatures[jField<F>("SRC_OVER")] != -1);
		return sat<F>("SRC_OVER");
	}

	template<typename F = ::java::awt::AlphaComposite>
	static auto Src() {
		static_assert(field_signatures[jField<F>("Src")] != -1);
		return sat<F>("Src");
	}

	template<typename F = ::java::awt::AlphaComposite>
	static auto SrcAtop() {
		static_assert(field_signatures[jField<F>("SrcAtop")] != -1);
		return sat<F>("SrcAtop");
	}

	template<typename F = ::java::awt::AlphaComposite>
	static auto SrcIn() {
		static_assert(field_signatures[jField<F>("SrcIn")] != -1);
		return sat<F>("SrcIn");
	}

	template<typename F = ::java::awt::AlphaComposite>
	static auto SrcOut() {
		static_assert(field_signatures[jField<F>("SrcOut")] != -1);
		return sat<F>("SrcOut");
	}

	template<typename F = ::java::awt::AlphaComposite>
	static auto SrcOver() {
		static_assert(field_signatures[jField<F>("SrcOver")] != -1);
		return sat<F>("SrcOver");
	}

	template<typename F = ::jint>
	static auto XOR() {
		static_assert(field_signatures[jField<F>("XOR")] != -1);
		return sat<F>("XOR");
	}

	template<typename F = ::java::awt::AlphaComposite>
	static auto Xor() {
		static_assert(field_signatures[jField<F>("Xor")] != -1);
		return sat<F>("Xor");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::awt::CompositeContext(::java::awt::image::ColorModel, ::java::awt::image::ColorModel, ::java::awt::RenderingHints)>("createContext"), //
		jMethod<::java::awt::AlphaComposite(::jfloat)>("derive"), //
		jMethod<::java::awt::AlphaComposite(::jint)>("derive"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jfloat()>("getAlpha"), //
		jMethod<::java::awt::AlphaComposite(::jint)>("getInstance"), //
		jMethod<::java::awt::AlphaComposite(::jint, ::jfloat)>("getInstance"), //
		jMethod<::jint()>("getRule"), //
		jMethod<::jint()>("hashCode"), //
	};

	template<typename R = ::java::awt::CompositeContext, typename... Args>
	auto createContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createContext")] != -1);
		return call<R>("createContext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::AlphaComposite, typename... Args>
	auto derive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("derive")] != -1);
		return call<R>("derive", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getAlpha(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlpha")] != -1);
		return call<R>("getAlpha", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::AlphaComposite, typename... Args>
	static auto getInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInstance")] != -1);
		return scall<R>("getInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRule(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRule")] != -1);
		return call<R>("getRule", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

};

#endif
