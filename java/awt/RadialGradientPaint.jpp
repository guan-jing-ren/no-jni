#ifndef java_awt_RadialGradientPaint_HPP
#define java_awt_RadialGradientPaint_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::RadialGradientPaint : public jObject<::java::awt::RadialGradientPaint, ::java::awt::MultipleGradientPaint> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "RadialGradientPaint";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jfloat, ::jfloat, ::jfloat, ::jfloat, ::jfloat, ::jfloat *, ::java::awt::Color *, ::java::awt::MultipleGradientPaint$CycleMethod)>(), //
		jConstructor<::jvoid(::jfloat, ::jfloat, ::jfloat, ::jfloat *, ::java::awt::Color *)>(), //
		jConstructor<::jvoid(::jfloat, ::jfloat, ::jfloat, ::jfloat *, ::java::awt::Color *, ::java::awt::MultipleGradientPaint$CycleMethod)>(), //
		jConstructor<::jvoid(::java::awt::geom::Point2D, ::jfloat, ::java::awt::geom::Point2D, ::jfloat *, ::java::awt::Color *, ::java::awt::MultipleGradientPaint$CycleMethod)>(), //
		jConstructor<::jvoid(::java::awt::geom::Point2D, ::jfloat, ::java::awt::geom::Point2D, ::jfloat *, ::java::awt::Color *, ::java::awt::MultipleGradientPaint$CycleMethod, ::java::awt::MultipleGradientPaint$ColorSpaceType, ::java::awt::geom::AffineTransform)>(), //
		jConstructor<::jvoid(::java::awt::geom::Point2D, ::jfloat, ::jfloat *, ::java::awt::Color *)>(), //
		jConstructor<::jvoid(::java::awt::geom::Point2D, ::jfloat, ::jfloat *, ::java::awt::Color *, ::java::awt::MultipleGradientPaint$CycleMethod)>(), //
		jConstructor<::jvoid(::java::awt::geom::Rectangle2D, ::jfloat *, ::java::awt::Color *, ::java::awt::MultipleGradientPaint$CycleMethod)>(), //
		jMethod<::java::awt::PaintContext(::java::awt::image::ColorModel, ::java::awt::Rectangle, ::java::awt::geom::Rectangle2D, ::java::awt::geom::AffineTransform, ::java::awt::RenderingHints)>("createContext"), //
		jMethod<::java::awt::geom::Point2D()>("getCenterPoint"), //
		jMethod<::java::awt::geom::Point2D()>("getFocusPoint"), //
		jMethod<::jfloat()>("getRadius"), //
	};

	template<typename R = ::java::awt::PaintContext, typename... Args>
	auto createContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createContext")] != -1);
		return call<R>("createContext", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Point2D, typename... Args>
	auto getCenterPoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCenterPoint")] != -1);
		return call<R>("getCenterPoint", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Point2D, typename... Args>
	auto getFocusPoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFocusPoint")] != -1);
		return call<R>("getFocusPoint", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getRadius(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRadius")] != -1);
		return call<R>("getRadius", forward<Args>(args)...);
	}

};

#endif
