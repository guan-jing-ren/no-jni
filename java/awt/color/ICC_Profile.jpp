#ifndef java_awt_color_ICC_Profile_HPP
#define java_awt_color_ICC_Profile_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::color::ICC_Profile : public jObject<::java::awt::color::ICC_Profile, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_color / "ICC_Profile";

	constexpr static Enume field_signatures{
		jField<::jint>("CLASS_ABSTRACT"), //
		jField<::jint>("CLASS_COLORSPACECONVERSION"), //
		jField<::jint>("CLASS_DEVICELINK"), //
		jField<::jint>("CLASS_DISPLAY"), //
		jField<::jint>("CLASS_INPUT"), //
		jField<::jint>("CLASS_NAMEDCOLOR"), //
		jField<::jint>("CLASS_OUTPUT"), //
		jField<::jint>("icAbsoluteColorimetric"), //
		jField<::jint>("icCurveCount"), //
		jField<::jint>("icCurveData"), //
		jField<::jint>("icHdrAttributes"), //
		jField<::jint>("icHdrCmmId"), //
		jField<::jint>("icHdrColorSpace"), //
		jField<::jint>("icHdrCreator"), //
		jField<::jint>("icHdrDate"), //
		jField<::jint>("icHdrDeviceClass"), //
		jField<::jint>("icHdrFlags"), //
		jField<::jint>("icHdrIlluminant"), //
		jField<::jint>("icHdrMagic"), //
		jField<::jint>("icHdrManufacturer"), //
		jField<::jint>("icHdrModel"), //
		jField<::jint>("icHdrPcs"), //
		jField<::jint>("icHdrPlatform"), //
		jField<::jint>("icHdrProfileID"), //
		jField<::jint>("icHdrRenderingIntent"), //
		jField<::jint>("icHdrSize"), //
		jField<::jint>("icHdrVersion"), //
		jField<::jint>("icICCAbsoluteColorimetric"), //
		jField<::jint>("icMediaRelativeColorimetric"), //
		jField<::jint>("icPerceptual"), //
		jField<::jint>("icRelativeColorimetric"), //
		jField<::jint>("icSaturation"), //
		jField<::jint>("icSigAToB0Tag"), //
		jField<::jint>("icSigAToB1Tag"), //
		jField<::jint>("icSigAToB2Tag"), //
		jField<::jint>("icSigAbstractClass"), //
		jField<::jint>("icSigBToA0Tag"), //
		jField<::jint>("icSigBToA1Tag"), //
		jField<::jint>("icSigBToA2Tag"), //
		jField<::jint>("icSigBlueColorantTag"), //
		jField<::jint>("icSigBlueMatrixColumnTag"), //
		jField<::jint>("icSigBlueTRCTag"), //
		jField<::jint>("icSigCalibrationDateTimeTag"), //
		jField<::jint>("icSigCharTargetTag"), //
		jField<::jint>("icSigChromaticAdaptationTag"), //
		jField<::jint>("icSigChromaticityTag"), //
		jField<::jint>("icSigCmyData"), //
		jField<::jint>("icSigCmykData"), //
		jField<::jint>("icSigColorSpaceClass"), //
		jField<::jint>("icSigColorantOrderTag"), //
		jField<::jint>("icSigColorantTableTag"), //
		jField<::jint>("icSigCopyrightTag"), //
		jField<::jint>("icSigCrdInfoTag"), //
		jField<::jint>("icSigDeviceMfgDescTag"), //
		jField<::jint>("icSigDeviceModelDescTag"), //
		jField<::jint>("icSigDeviceSettingsTag"), //
		jField<::jint>("icSigDisplayClass"), //
		jField<::jint>("icSigGamutTag"), //
		jField<::jint>("icSigGrayData"), //
		jField<::jint>("icSigGrayTRCTag"), //
		jField<::jint>("icSigGreenColorantTag"), //
		jField<::jint>("icSigGreenMatrixColumnTag"), //
		jField<::jint>("icSigGreenTRCTag"), //
		jField<::jint>("icSigHead"), //
		jField<::jint>("icSigHlsData"), //
		jField<::jint>("icSigHsvData"), //
		jField<::jint>("icSigInputClass"), //
		jField<::jint>("icSigLabData"), //
		jField<::jint>("icSigLinkClass"), //
		jField<::jint>("icSigLuminanceTag"), //
		jField<::jint>("icSigLuvData"), //
		jField<::jint>("icSigMeasurementTag"), //
		jField<::jint>("icSigMediaBlackPointTag"), //
		jField<::jint>("icSigMediaWhitePointTag"), //
		jField<::jint>("icSigNamedColor2Tag"), //
		jField<::jint>("icSigNamedColorClass"), //
		jField<::jint>("icSigOutputClass"), //
		jField<::jint>("icSigOutputResponseTag"), //
		jField<::jint>("icSigPreview0Tag"), //
		jField<::jint>("icSigPreview1Tag"), //
		jField<::jint>("icSigPreview2Tag"), //
		jField<::jint>("icSigProfileDescriptionTag"), //
		jField<::jint>("icSigProfileSequenceDescTag"), //
		jField<::jint>("icSigPs2CRD0Tag"), //
		jField<::jint>("icSigPs2CRD1Tag"), //
		jField<::jint>("icSigPs2CRD2Tag"), //
		jField<::jint>("icSigPs2CRD3Tag"), //
		jField<::jint>("icSigPs2CSATag"), //
		jField<::jint>("icSigPs2RenderingIntentTag"), //
		jField<::jint>("icSigRedColorantTag"), //
		jField<::jint>("icSigRedMatrixColumnTag"), //
		jField<::jint>("icSigRedTRCTag"), //
		jField<::jint>("icSigRgbData"), //
		jField<::jint>("icSigScreeningDescTag"), //
		jField<::jint>("icSigScreeningTag"), //
		jField<::jint>("icSigSpace2CLR"), //
		jField<::jint>("icSigSpace3CLR"), //
		jField<::jint>("icSigSpace4CLR"), //
		jField<::jint>("icSigSpace5CLR"), //
		jField<::jint>("icSigSpace6CLR"), //
		jField<::jint>("icSigSpace7CLR"), //
		jField<::jint>("icSigSpace8CLR"), //
		jField<::jint>("icSigSpace9CLR"), //
		jField<::jint>("icSigSpaceACLR"), //
		jField<::jint>("icSigSpaceBCLR"), //
		jField<::jint>("icSigSpaceCCLR"), //
		jField<::jint>("icSigSpaceDCLR"), //
		jField<::jint>("icSigSpaceECLR"), //
		jField<::jint>("icSigSpaceFCLR"), //
		jField<::jint>("icSigTechnologyTag"), //
		jField<::jint>("icSigUcrBgTag"), //
		jField<::jint>("icSigViewingCondDescTag"), //
		jField<::jint>("icSigViewingConditionsTag"), //
		jField<::jint>("icSigXYZData"), //
		jField<::jint>("icSigYCbCrData"), //
		jField<::jint>("icSigYxyData"), //
		jField<::jint>("icTagReserved"), //
		jField<::jint>("icTagType"), //
		jField<::jint>("icXYZNumberX"), //
	};

	template<typename F = ::jint>
	static auto CLASS_ABSTRACT() {
		static_assert(field_signatures[jField<F>("CLASS_ABSTRACT")] != -1);
		return sat<F>("CLASS_ABSTRACT");
	}

	template<typename F = ::jint>
	static auto CLASS_COLORSPACECONVERSION() {
		static_assert(field_signatures[jField<F>("CLASS_COLORSPACECONVERSION")] != -1);
		return sat<F>("CLASS_COLORSPACECONVERSION");
	}

	template<typename F = ::jint>
	static auto CLASS_DEVICELINK() {
		static_assert(field_signatures[jField<F>("CLASS_DEVICELINK")] != -1);
		return sat<F>("CLASS_DEVICELINK");
	}

	template<typename F = ::jint>
	static auto CLASS_DISPLAY() {
		static_assert(field_signatures[jField<F>("CLASS_DISPLAY")] != -1);
		return sat<F>("CLASS_DISPLAY");
	}

	template<typename F = ::jint>
	static auto CLASS_INPUT() {
		static_assert(field_signatures[jField<F>("CLASS_INPUT")] != -1);
		return sat<F>("CLASS_INPUT");
	}

	template<typename F = ::jint>
	static auto CLASS_NAMEDCOLOR() {
		static_assert(field_signatures[jField<F>("CLASS_NAMEDCOLOR")] != -1);
		return sat<F>("CLASS_NAMEDCOLOR");
	}

	template<typename F = ::jint>
	static auto CLASS_OUTPUT() {
		static_assert(field_signatures[jField<F>("CLASS_OUTPUT")] != -1);
		return sat<F>("CLASS_OUTPUT");
	}

	template<typename F = ::jint>
	static auto icAbsoluteColorimetric() {
		static_assert(field_signatures[jField<F>("icAbsoluteColorimetric")] != -1);
		return sat<F>("icAbsoluteColorimetric");
	}

	template<typename F = ::jint>
	static auto icCurveCount() {
		static_assert(field_signatures[jField<F>("icCurveCount")] != -1);
		return sat<F>("icCurveCount");
	}

	template<typename F = ::jint>
	static auto icCurveData() {
		static_assert(field_signatures[jField<F>("icCurveData")] != -1);
		return sat<F>("icCurveData");
	}

	template<typename F = ::jint>
	static auto icHdrAttributes() {
		static_assert(field_signatures[jField<F>("icHdrAttributes")] != -1);
		return sat<F>("icHdrAttributes");
	}

	template<typename F = ::jint>
	static auto icHdrCmmId() {
		static_assert(field_signatures[jField<F>("icHdrCmmId")] != -1);
		return sat<F>("icHdrCmmId");
	}

	template<typename F = ::jint>
	static auto icHdrColorSpace() {
		static_assert(field_signatures[jField<F>("icHdrColorSpace")] != -1);
		return sat<F>("icHdrColorSpace");
	}

	template<typename F = ::jint>
	static auto icHdrCreator() {
		static_assert(field_signatures[jField<F>("icHdrCreator")] != -1);
		return sat<F>("icHdrCreator");
	}

	template<typename F = ::jint>
	static auto icHdrDate() {
		static_assert(field_signatures[jField<F>("icHdrDate")] != -1);
		return sat<F>("icHdrDate");
	}

	template<typename F = ::jint>
	static auto icHdrDeviceClass() {
		static_assert(field_signatures[jField<F>("icHdrDeviceClass")] != -1);
		return sat<F>("icHdrDeviceClass");
	}

	template<typename F = ::jint>
	static auto icHdrFlags() {
		static_assert(field_signatures[jField<F>("icHdrFlags")] != -1);
		return sat<F>("icHdrFlags");
	}

	template<typename F = ::jint>
	static auto icHdrIlluminant() {
		static_assert(field_signatures[jField<F>("icHdrIlluminant")] != -1);
		return sat<F>("icHdrIlluminant");
	}

	template<typename F = ::jint>
	static auto icHdrMagic() {
		static_assert(field_signatures[jField<F>("icHdrMagic")] != -1);
		return sat<F>("icHdrMagic");
	}

	template<typename F = ::jint>
	static auto icHdrManufacturer() {
		static_assert(field_signatures[jField<F>("icHdrManufacturer")] != -1);
		return sat<F>("icHdrManufacturer");
	}

	template<typename F = ::jint>
	static auto icHdrModel() {
		static_assert(field_signatures[jField<F>("icHdrModel")] != -1);
		return sat<F>("icHdrModel");
	}

	template<typename F = ::jint>
	static auto icHdrPcs() {
		static_assert(field_signatures[jField<F>("icHdrPcs")] != -1);
		return sat<F>("icHdrPcs");
	}

	template<typename F = ::jint>
	static auto icHdrPlatform() {
		static_assert(field_signatures[jField<F>("icHdrPlatform")] != -1);
		return sat<F>("icHdrPlatform");
	}

	template<typename F = ::jint>
	static auto icHdrProfileID() {
		static_assert(field_signatures[jField<F>("icHdrProfileID")] != -1);
		return sat<F>("icHdrProfileID");
	}

	template<typename F = ::jint>
	static auto icHdrRenderingIntent() {
		static_assert(field_signatures[jField<F>("icHdrRenderingIntent")] != -1);
		return sat<F>("icHdrRenderingIntent");
	}

	template<typename F = ::jint>
	static auto icHdrSize() {
		static_assert(field_signatures[jField<F>("icHdrSize")] != -1);
		return sat<F>("icHdrSize");
	}

	template<typename F = ::jint>
	static auto icHdrVersion() {
		static_assert(field_signatures[jField<F>("icHdrVersion")] != -1);
		return sat<F>("icHdrVersion");
	}

	template<typename F = ::jint>
	static auto icICCAbsoluteColorimetric() {
		static_assert(field_signatures[jField<F>("icICCAbsoluteColorimetric")] != -1);
		return sat<F>("icICCAbsoluteColorimetric");
	}

	template<typename F = ::jint>
	static auto icMediaRelativeColorimetric() {
		static_assert(field_signatures[jField<F>("icMediaRelativeColorimetric")] != -1);
		return sat<F>("icMediaRelativeColorimetric");
	}

	template<typename F = ::jint>
	static auto icPerceptual() {
		static_assert(field_signatures[jField<F>("icPerceptual")] != -1);
		return sat<F>("icPerceptual");
	}

	template<typename F = ::jint>
	static auto icRelativeColorimetric() {
		static_assert(field_signatures[jField<F>("icRelativeColorimetric")] != -1);
		return sat<F>("icRelativeColorimetric");
	}

	template<typename F = ::jint>
	static auto icSaturation() {
		static_assert(field_signatures[jField<F>("icSaturation")] != -1);
		return sat<F>("icSaturation");
	}

	template<typename F = ::jint>
	static auto icSigAToB0Tag() {
		static_assert(field_signatures[jField<F>("icSigAToB0Tag")] != -1);
		return sat<F>("icSigAToB0Tag");
	}

	template<typename F = ::jint>
	static auto icSigAToB1Tag() {
		static_assert(field_signatures[jField<F>("icSigAToB1Tag")] != -1);
		return sat<F>("icSigAToB1Tag");
	}

	template<typename F = ::jint>
	static auto icSigAToB2Tag() {
		static_assert(field_signatures[jField<F>("icSigAToB2Tag")] != -1);
		return sat<F>("icSigAToB2Tag");
	}

	template<typename F = ::jint>
	static auto icSigAbstractClass() {
		static_assert(field_signatures[jField<F>("icSigAbstractClass")] != -1);
		return sat<F>("icSigAbstractClass");
	}

	template<typename F = ::jint>
	static auto icSigBToA0Tag() {
		static_assert(field_signatures[jField<F>("icSigBToA0Tag")] != -1);
		return sat<F>("icSigBToA0Tag");
	}

	template<typename F = ::jint>
	static auto icSigBToA1Tag() {
		static_assert(field_signatures[jField<F>("icSigBToA1Tag")] != -1);
		return sat<F>("icSigBToA1Tag");
	}

	template<typename F = ::jint>
	static auto icSigBToA2Tag() {
		static_assert(field_signatures[jField<F>("icSigBToA2Tag")] != -1);
		return sat<F>("icSigBToA2Tag");
	}

	template<typename F = ::jint>
	static auto icSigBlueColorantTag() {
		static_assert(field_signatures[jField<F>("icSigBlueColorantTag")] != -1);
		return sat<F>("icSigBlueColorantTag");
	}

	template<typename F = ::jint>
	static auto icSigBlueMatrixColumnTag() {
		static_assert(field_signatures[jField<F>("icSigBlueMatrixColumnTag")] != -1);
		return sat<F>("icSigBlueMatrixColumnTag");
	}

	template<typename F = ::jint>
	static auto icSigBlueTRCTag() {
		static_assert(field_signatures[jField<F>("icSigBlueTRCTag")] != -1);
		return sat<F>("icSigBlueTRCTag");
	}

	template<typename F = ::jint>
	static auto icSigCalibrationDateTimeTag() {
		static_assert(field_signatures[jField<F>("icSigCalibrationDateTimeTag")] != -1);
		return sat<F>("icSigCalibrationDateTimeTag");
	}

	template<typename F = ::jint>
	static auto icSigCharTargetTag() {
		static_assert(field_signatures[jField<F>("icSigCharTargetTag")] != -1);
		return sat<F>("icSigCharTargetTag");
	}

	template<typename F = ::jint>
	static auto icSigChromaticAdaptationTag() {
		static_assert(field_signatures[jField<F>("icSigChromaticAdaptationTag")] != -1);
		return sat<F>("icSigChromaticAdaptationTag");
	}

	template<typename F = ::jint>
	static auto icSigChromaticityTag() {
		static_assert(field_signatures[jField<F>("icSigChromaticityTag")] != -1);
		return sat<F>("icSigChromaticityTag");
	}

	template<typename F = ::jint>
	static auto icSigCmyData() {
		static_assert(field_signatures[jField<F>("icSigCmyData")] != -1);
		return sat<F>("icSigCmyData");
	}

	template<typename F = ::jint>
	static auto icSigCmykData() {
		static_assert(field_signatures[jField<F>("icSigCmykData")] != -1);
		return sat<F>("icSigCmykData");
	}

	template<typename F = ::jint>
	static auto icSigColorSpaceClass() {
		static_assert(field_signatures[jField<F>("icSigColorSpaceClass")] != -1);
		return sat<F>("icSigColorSpaceClass");
	}

	template<typename F = ::jint>
	static auto icSigColorantOrderTag() {
		static_assert(field_signatures[jField<F>("icSigColorantOrderTag")] != -1);
		return sat<F>("icSigColorantOrderTag");
	}

	template<typename F = ::jint>
	static auto icSigColorantTableTag() {
		static_assert(field_signatures[jField<F>("icSigColorantTableTag")] != -1);
		return sat<F>("icSigColorantTableTag");
	}

	template<typename F = ::jint>
	static auto icSigCopyrightTag() {
		static_assert(field_signatures[jField<F>("icSigCopyrightTag")] != -1);
		return sat<F>("icSigCopyrightTag");
	}

	template<typename F = ::jint>
	static auto icSigCrdInfoTag() {
		static_assert(field_signatures[jField<F>("icSigCrdInfoTag")] != -1);
		return sat<F>("icSigCrdInfoTag");
	}

	template<typename F = ::jint>
	static auto icSigDeviceMfgDescTag() {
		static_assert(field_signatures[jField<F>("icSigDeviceMfgDescTag")] != -1);
		return sat<F>("icSigDeviceMfgDescTag");
	}

	template<typename F = ::jint>
	static auto icSigDeviceModelDescTag() {
		static_assert(field_signatures[jField<F>("icSigDeviceModelDescTag")] != -1);
		return sat<F>("icSigDeviceModelDescTag");
	}

	template<typename F = ::jint>
	static auto icSigDeviceSettingsTag() {
		static_assert(field_signatures[jField<F>("icSigDeviceSettingsTag")] != -1);
		return sat<F>("icSigDeviceSettingsTag");
	}

	template<typename F = ::jint>
	static auto icSigDisplayClass() {
		static_assert(field_signatures[jField<F>("icSigDisplayClass")] != -1);
		return sat<F>("icSigDisplayClass");
	}

	template<typename F = ::jint>
	static auto icSigGamutTag() {
		static_assert(field_signatures[jField<F>("icSigGamutTag")] != -1);
		return sat<F>("icSigGamutTag");
	}

	template<typename F = ::jint>
	static auto icSigGrayData() {
		static_assert(field_signatures[jField<F>("icSigGrayData")] != -1);
		return sat<F>("icSigGrayData");
	}

	template<typename F = ::jint>
	static auto icSigGrayTRCTag() {
		static_assert(field_signatures[jField<F>("icSigGrayTRCTag")] != -1);
		return sat<F>("icSigGrayTRCTag");
	}

	template<typename F = ::jint>
	static auto icSigGreenColorantTag() {
		static_assert(field_signatures[jField<F>("icSigGreenColorantTag")] != -1);
		return sat<F>("icSigGreenColorantTag");
	}

	template<typename F = ::jint>
	static auto icSigGreenMatrixColumnTag() {
		static_assert(field_signatures[jField<F>("icSigGreenMatrixColumnTag")] != -1);
		return sat<F>("icSigGreenMatrixColumnTag");
	}

	template<typename F = ::jint>
	static auto icSigGreenTRCTag() {
		static_assert(field_signatures[jField<F>("icSigGreenTRCTag")] != -1);
		return sat<F>("icSigGreenTRCTag");
	}

	template<typename F = ::jint>
	static auto icSigHead() {
		static_assert(field_signatures[jField<F>("icSigHead")] != -1);
		return sat<F>("icSigHead");
	}

	template<typename F = ::jint>
	static auto icSigHlsData() {
		static_assert(field_signatures[jField<F>("icSigHlsData")] != -1);
		return sat<F>("icSigHlsData");
	}

	template<typename F = ::jint>
	static auto icSigHsvData() {
		static_assert(field_signatures[jField<F>("icSigHsvData")] != -1);
		return sat<F>("icSigHsvData");
	}

	template<typename F = ::jint>
	static auto icSigInputClass() {
		static_assert(field_signatures[jField<F>("icSigInputClass")] != -1);
		return sat<F>("icSigInputClass");
	}

	template<typename F = ::jint>
	static auto icSigLabData() {
		static_assert(field_signatures[jField<F>("icSigLabData")] != -1);
		return sat<F>("icSigLabData");
	}

	template<typename F = ::jint>
	static auto icSigLinkClass() {
		static_assert(field_signatures[jField<F>("icSigLinkClass")] != -1);
		return sat<F>("icSigLinkClass");
	}

	template<typename F = ::jint>
	static auto icSigLuminanceTag() {
		static_assert(field_signatures[jField<F>("icSigLuminanceTag")] != -1);
		return sat<F>("icSigLuminanceTag");
	}

	template<typename F = ::jint>
	static auto icSigLuvData() {
		static_assert(field_signatures[jField<F>("icSigLuvData")] != -1);
		return sat<F>("icSigLuvData");
	}

	template<typename F = ::jint>
	static auto icSigMeasurementTag() {
		static_assert(field_signatures[jField<F>("icSigMeasurementTag")] != -1);
		return sat<F>("icSigMeasurementTag");
	}

	template<typename F = ::jint>
	static auto icSigMediaBlackPointTag() {
		static_assert(field_signatures[jField<F>("icSigMediaBlackPointTag")] != -1);
		return sat<F>("icSigMediaBlackPointTag");
	}

	template<typename F = ::jint>
	static auto icSigMediaWhitePointTag() {
		static_assert(field_signatures[jField<F>("icSigMediaWhitePointTag")] != -1);
		return sat<F>("icSigMediaWhitePointTag");
	}

	template<typename F = ::jint>
	static auto icSigNamedColor2Tag() {
		static_assert(field_signatures[jField<F>("icSigNamedColor2Tag")] != -1);
		return sat<F>("icSigNamedColor2Tag");
	}

	template<typename F = ::jint>
	static auto icSigNamedColorClass() {
		static_assert(field_signatures[jField<F>("icSigNamedColorClass")] != -1);
		return sat<F>("icSigNamedColorClass");
	}

	template<typename F = ::jint>
	static auto icSigOutputClass() {
		static_assert(field_signatures[jField<F>("icSigOutputClass")] != -1);
		return sat<F>("icSigOutputClass");
	}

	template<typename F = ::jint>
	static auto icSigOutputResponseTag() {
		static_assert(field_signatures[jField<F>("icSigOutputResponseTag")] != -1);
		return sat<F>("icSigOutputResponseTag");
	}

	template<typename F = ::jint>
	static auto icSigPreview0Tag() {
		static_assert(field_signatures[jField<F>("icSigPreview0Tag")] != -1);
		return sat<F>("icSigPreview0Tag");
	}

	template<typename F = ::jint>
	static auto icSigPreview1Tag() {
		static_assert(field_signatures[jField<F>("icSigPreview1Tag")] != -1);
		return sat<F>("icSigPreview1Tag");
	}

	template<typename F = ::jint>
	static auto icSigPreview2Tag() {
		static_assert(field_signatures[jField<F>("icSigPreview2Tag")] != -1);
		return sat<F>("icSigPreview2Tag");
	}

	template<typename F = ::jint>
	static auto icSigProfileDescriptionTag() {
		static_assert(field_signatures[jField<F>("icSigProfileDescriptionTag")] != -1);
		return sat<F>("icSigProfileDescriptionTag");
	}

	template<typename F = ::jint>
	static auto icSigProfileSequenceDescTag() {
		static_assert(field_signatures[jField<F>("icSigProfileSequenceDescTag")] != -1);
		return sat<F>("icSigProfileSequenceDescTag");
	}

	template<typename F = ::jint>
	static auto icSigPs2CRD0Tag() {
		static_assert(field_signatures[jField<F>("icSigPs2CRD0Tag")] != -1);
		return sat<F>("icSigPs2CRD0Tag");
	}

	template<typename F = ::jint>
	static auto icSigPs2CRD1Tag() {
		static_assert(field_signatures[jField<F>("icSigPs2CRD1Tag")] != -1);
		return sat<F>("icSigPs2CRD1Tag");
	}

	template<typename F = ::jint>
	static auto icSigPs2CRD2Tag() {
		static_assert(field_signatures[jField<F>("icSigPs2CRD2Tag")] != -1);
		return sat<F>("icSigPs2CRD2Tag");
	}

	template<typename F = ::jint>
	static auto icSigPs2CRD3Tag() {
		static_assert(field_signatures[jField<F>("icSigPs2CRD3Tag")] != -1);
		return sat<F>("icSigPs2CRD3Tag");
	}

	template<typename F = ::jint>
	static auto icSigPs2CSATag() {
		static_assert(field_signatures[jField<F>("icSigPs2CSATag")] != -1);
		return sat<F>("icSigPs2CSATag");
	}

	template<typename F = ::jint>
	static auto icSigPs2RenderingIntentTag() {
		static_assert(field_signatures[jField<F>("icSigPs2RenderingIntentTag")] != -1);
		return sat<F>("icSigPs2RenderingIntentTag");
	}

	template<typename F = ::jint>
	static auto icSigRedColorantTag() {
		static_assert(field_signatures[jField<F>("icSigRedColorantTag")] != -1);
		return sat<F>("icSigRedColorantTag");
	}

	template<typename F = ::jint>
	static auto icSigRedMatrixColumnTag() {
		static_assert(field_signatures[jField<F>("icSigRedMatrixColumnTag")] != -1);
		return sat<F>("icSigRedMatrixColumnTag");
	}

	template<typename F = ::jint>
	static auto icSigRedTRCTag() {
		static_assert(field_signatures[jField<F>("icSigRedTRCTag")] != -1);
		return sat<F>("icSigRedTRCTag");
	}

	template<typename F = ::jint>
	static auto icSigRgbData() {
		static_assert(field_signatures[jField<F>("icSigRgbData")] != -1);
		return sat<F>("icSigRgbData");
	}

	template<typename F = ::jint>
	static auto icSigScreeningDescTag() {
		static_assert(field_signatures[jField<F>("icSigScreeningDescTag")] != -1);
		return sat<F>("icSigScreeningDescTag");
	}

	template<typename F = ::jint>
	static auto icSigScreeningTag() {
		static_assert(field_signatures[jField<F>("icSigScreeningTag")] != -1);
		return sat<F>("icSigScreeningTag");
	}

	template<typename F = ::jint>
	static auto icSigSpace2CLR() {
		static_assert(field_signatures[jField<F>("icSigSpace2CLR")] != -1);
		return sat<F>("icSigSpace2CLR");
	}

	template<typename F = ::jint>
	static auto icSigSpace3CLR() {
		static_assert(field_signatures[jField<F>("icSigSpace3CLR")] != -1);
		return sat<F>("icSigSpace3CLR");
	}

	template<typename F = ::jint>
	static auto icSigSpace4CLR() {
		static_assert(field_signatures[jField<F>("icSigSpace4CLR")] != -1);
		return sat<F>("icSigSpace4CLR");
	}

	template<typename F = ::jint>
	static auto icSigSpace5CLR() {
		static_assert(field_signatures[jField<F>("icSigSpace5CLR")] != -1);
		return sat<F>("icSigSpace5CLR");
	}

	template<typename F = ::jint>
	static auto icSigSpace6CLR() {
		static_assert(field_signatures[jField<F>("icSigSpace6CLR")] != -1);
		return sat<F>("icSigSpace6CLR");
	}

	template<typename F = ::jint>
	static auto icSigSpace7CLR() {
		static_assert(field_signatures[jField<F>("icSigSpace7CLR")] != -1);
		return sat<F>("icSigSpace7CLR");
	}

	template<typename F = ::jint>
	static auto icSigSpace8CLR() {
		static_assert(field_signatures[jField<F>("icSigSpace8CLR")] != -1);
		return sat<F>("icSigSpace8CLR");
	}

	template<typename F = ::jint>
	static auto icSigSpace9CLR() {
		static_assert(field_signatures[jField<F>("icSigSpace9CLR")] != -1);
		return sat<F>("icSigSpace9CLR");
	}

	template<typename F = ::jint>
	static auto icSigSpaceACLR() {
		static_assert(field_signatures[jField<F>("icSigSpaceACLR")] != -1);
		return sat<F>("icSigSpaceACLR");
	}

	template<typename F = ::jint>
	static auto icSigSpaceBCLR() {
		static_assert(field_signatures[jField<F>("icSigSpaceBCLR")] != -1);
		return sat<F>("icSigSpaceBCLR");
	}

	template<typename F = ::jint>
	static auto icSigSpaceCCLR() {
		static_assert(field_signatures[jField<F>("icSigSpaceCCLR")] != -1);
		return sat<F>("icSigSpaceCCLR");
	}

	template<typename F = ::jint>
	static auto icSigSpaceDCLR() {
		static_assert(field_signatures[jField<F>("icSigSpaceDCLR")] != -1);
		return sat<F>("icSigSpaceDCLR");
	}

	template<typename F = ::jint>
	static auto icSigSpaceECLR() {
		static_assert(field_signatures[jField<F>("icSigSpaceECLR")] != -1);
		return sat<F>("icSigSpaceECLR");
	}

	template<typename F = ::jint>
	static auto icSigSpaceFCLR() {
		static_assert(field_signatures[jField<F>("icSigSpaceFCLR")] != -1);
		return sat<F>("icSigSpaceFCLR");
	}

	template<typename F = ::jint>
	static auto icSigTechnologyTag() {
		static_assert(field_signatures[jField<F>("icSigTechnologyTag")] != -1);
		return sat<F>("icSigTechnologyTag");
	}

	template<typename F = ::jint>
	static auto icSigUcrBgTag() {
		static_assert(field_signatures[jField<F>("icSigUcrBgTag")] != -1);
		return sat<F>("icSigUcrBgTag");
	}

	template<typename F = ::jint>
	static auto icSigViewingCondDescTag() {
		static_assert(field_signatures[jField<F>("icSigViewingCondDescTag")] != -1);
		return sat<F>("icSigViewingCondDescTag");
	}

	template<typename F = ::jint>
	static auto icSigViewingConditionsTag() {
		static_assert(field_signatures[jField<F>("icSigViewingConditionsTag")] != -1);
		return sat<F>("icSigViewingConditionsTag");
	}

	template<typename F = ::jint>
	static auto icSigXYZData() {
		static_assert(field_signatures[jField<F>("icSigXYZData")] != -1);
		return sat<F>("icSigXYZData");
	}

	template<typename F = ::jint>
	static auto icSigYCbCrData() {
		static_assert(field_signatures[jField<F>("icSigYCbCrData")] != -1);
		return sat<F>("icSigYCbCrData");
	}

	template<typename F = ::jint>
	static auto icSigYxyData() {
		static_assert(field_signatures[jField<F>("icSigYxyData")] != -1);
		return sat<F>("icSigYxyData");
	}

	template<typename F = ::jint>
	static auto icTagReserved() {
		static_assert(field_signatures[jField<F>("icTagReserved")] != -1);
		return sat<F>("icTagReserved");
	}

	template<typename F = ::jint>
	static auto icTagType() {
		static_assert(field_signatures[jField<F>("icTagType")] != -1);
		return sat<F>("icTagType");
	}

	template<typename F = ::jint>
	static auto icXYZNumberX() {
		static_assert(field_signatures[jField<F>("icXYZNumberX")] != -1);
		return sat<F>("icXYZNumberX");
	}

	constexpr static Enume method_signatures{
		jMethod<::jint()>("getColorSpaceType"), //
		jMethod<::jbyte *()>("getData"), //
		jMethod<::jbyte *(::jint)>("getData"), //
		jMethod<::java::awt::color::ICC_Profile(::jint)>("getInstance"), //
		jMethod<::java::awt::color::ICC_Profile(::java::io::InputStream)>("getInstance"), //
		jMethod<::java::awt::color::ICC_Profile(::java::lang::String)>("getInstance"), //
		jMethod<::java::awt::color::ICC_Profile(::jbyte *)>("getInstance"), //
		jMethod<::jint()>("getMajorVersion"), //
		jMethod<::jint()>("getMinorVersion"), //
		jMethod<::jint()>("getNumComponents"), //
		jMethod<::jint()>("getPCSType"), //
		jMethod<::jint()>("getProfileClass"), //
		jMethod<::jvoid(::jint, ::jbyte *)>("setData"), //
		jMethod<::jvoid(::java::io::OutputStream)>("write"), //
		jMethod<::jvoid(::java::lang::String)>("write"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getColorSpaceType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColorSpaceType")] != -1);
		return call<R>("getColorSpaceType", forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getData")] != -1);
		return call<R>("getData", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::color::ICC_Profile, typename... Args>
	static auto getInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInstance")] != -1);
		return scall<R>("getInstance", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMajorVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMajorVersion")] != -1);
		return call<R>("getMajorVersion", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinorVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinorVersion")] != -1);
		return call<R>("getMinorVersion", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumComponents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNumComponents")] != -1);
		return call<R>("getNumComponents", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPCSType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPCSType")] != -1);
		return call<R>("getPCSType", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getProfileClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getProfileClass")] != -1);
		return call<R>("getProfileClass", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setData")] != -1);
		return call<R>("setData", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write")] != -1);
		return call<R>("write", forward<Args>(args)...);
	}

};

#endif
