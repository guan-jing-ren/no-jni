#ifndef java_awt_color_ColorSpace_HPP
#define java_awt_color_ColorSpace_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::color::ColorSpace : public jObject<::java::awt::color::ColorSpace, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_color / "ColorSpace";

	constexpr static Enume field_signatures{
		jField<::jint>("CS_CIEXYZ"), //
		jField<::jint>("CS_GRAY"), //
		jField<::jint>("CS_LINEAR_RGB"), //
		jField<::jint>("CS_PYCC"), //
		jField<::jint>("CS_sRGB"), //
		jField<::jint>("TYPE_2CLR"), //
		jField<::jint>("TYPE_3CLR"), //
		jField<::jint>("TYPE_4CLR"), //
		jField<::jint>("TYPE_5CLR"), //
		jField<::jint>("TYPE_6CLR"), //
		jField<::jint>("TYPE_7CLR"), //
		jField<::jint>("TYPE_8CLR"), //
		jField<::jint>("TYPE_9CLR"), //
		jField<::jint>("TYPE_ACLR"), //
		jField<::jint>("TYPE_BCLR"), //
		jField<::jint>("TYPE_CCLR"), //
		jField<::jint>("TYPE_CMY"), //
		jField<::jint>("TYPE_CMYK"), //
		jField<::jint>("TYPE_DCLR"), //
		jField<::jint>("TYPE_ECLR"), //
		jField<::jint>("TYPE_FCLR"), //
		jField<::jint>("TYPE_GRAY"), //
		jField<::jint>("TYPE_HLS"), //
		jField<::jint>("TYPE_HSV"), //
		jField<::jint>("TYPE_Lab"), //
		jField<::jint>("TYPE_Luv"), //
		jField<::jint>("TYPE_RGB"), //
		jField<::jint>("TYPE_XYZ"), //
		jField<::jint>("TYPE_YCbCr"), //
		jField<::jint>("TYPE_Yxy"), //
	};

	template<typename F = ::jint>
	static auto CS_CIEXYZ() {
		static_assert(field_signatures[jField<F>("CS_CIEXYZ")] != -1);
		return sat<F>("CS_CIEXYZ");
	}

	template<typename F = ::jint>
	static auto CS_GRAY() {
		static_assert(field_signatures[jField<F>("CS_GRAY")] != -1);
		return sat<F>("CS_GRAY");
	}

	template<typename F = ::jint>
	static auto CS_LINEAR_RGB() {
		static_assert(field_signatures[jField<F>("CS_LINEAR_RGB")] != -1);
		return sat<F>("CS_LINEAR_RGB");
	}

	template<typename F = ::jint>
	static auto CS_PYCC() {
		static_assert(field_signatures[jField<F>("CS_PYCC")] != -1);
		return sat<F>("CS_PYCC");
	}

	template<typename F = ::jint>
	static auto CS_sRGB() {
		static_assert(field_signatures[jField<F>("CS_sRGB")] != -1);
		return sat<F>("CS_sRGB");
	}

	template<typename F = ::jint>
	static auto TYPE_2CLR() {
		static_assert(field_signatures[jField<F>("TYPE_2CLR")] != -1);
		return sat<F>("TYPE_2CLR");
	}

	template<typename F = ::jint>
	static auto TYPE_3CLR() {
		static_assert(field_signatures[jField<F>("TYPE_3CLR")] != -1);
		return sat<F>("TYPE_3CLR");
	}

	template<typename F = ::jint>
	static auto TYPE_4CLR() {
		static_assert(field_signatures[jField<F>("TYPE_4CLR")] != -1);
		return sat<F>("TYPE_4CLR");
	}

	template<typename F = ::jint>
	static auto TYPE_5CLR() {
		static_assert(field_signatures[jField<F>("TYPE_5CLR")] != -1);
		return sat<F>("TYPE_5CLR");
	}

	template<typename F = ::jint>
	static auto TYPE_6CLR() {
		static_assert(field_signatures[jField<F>("TYPE_6CLR")] != -1);
		return sat<F>("TYPE_6CLR");
	}

	template<typename F = ::jint>
	static auto TYPE_7CLR() {
		static_assert(field_signatures[jField<F>("TYPE_7CLR")] != -1);
		return sat<F>("TYPE_7CLR");
	}

	template<typename F = ::jint>
	static auto TYPE_8CLR() {
		static_assert(field_signatures[jField<F>("TYPE_8CLR")] != -1);
		return sat<F>("TYPE_8CLR");
	}

	template<typename F = ::jint>
	static auto TYPE_9CLR() {
		static_assert(field_signatures[jField<F>("TYPE_9CLR")] != -1);
		return sat<F>("TYPE_9CLR");
	}

	template<typename F = ::jint>
	static auto TYPE_ACLR() {
		static_assert(field_signatures[jField<F>("TYPE_ACLR")] != -1);
		return sat<F>("TYPE_ACLR");
	}

	template<typename F = ::jint>
	static auto TYPE_BCLR() {
		static_assert(field_signatures[jField<F>("TYPE_BCLR")] != -1);
		return sat<F>("TYPE_BCLR");
	}

	template<typename F = ::jint>
	static auto TYPE_CCLR() {
		static_assert(field_signatures[jField<F>("TYPE_CCLR")] != -1);
		return sat<F>("TYPE_CCLR");
	}

	template<typename F = ::jint>
	static auto TYPE_CMY() {
		static_assert(field_signatures[jField<F>("TYPE_CMY")] != -1);
		return sat<F>("TYPE_CMY");
	}

	template<typename F = ::jint>
	static auto TYPE_CMYK() {
		static_assert(field_signatures[jField<F>("TYPE_CMYK")] != -1);
		return sat<F>("TYPE_CMYK");
	}

	template<typename F = ::jint>
	static auto TYPE_DCLR() {
		static_assert(field_signatures[jField<F>("TYPE_DCLR")] != -1);
		return sat<F>("TYPE_DCLR");
	}

	template<typename F = ::jint>
	static auto TYPE_ECLR() {
		static_assert(field_signatures[jField<F>("TYPE_ECLR")] != -1);
		return sat<F>("TYPE_ECLR");
	}

	template<typename F = ::jint>
	static auto TYPE_FCLR() {
		static_assert(field_signatures[jField<F>("TYPE_FCLR")] != -1);
		return sat<F>("TYPE_FCLR");
	}

	template<typename F = ::jint>
	static auto TYPE_GRAY() {
		static_assert(field_signatures[jField<F>("TYPE_GRAY")] != -1);
		return sat<F>("TYPE_GRAY");
	}

	template<typename F = ::jint>
	static auto TYPE_HLS() {
		static_assert(field_signatures[jField<F>("TYPE_HLS")] != -1);
		return sat<F>("TYPE_HLS");
	}

	template<typename F = ::jint>
	static auto TYPE_HSV() {
		static_assert(field_signatures[jField<F>("TYPE_HSV")] != -1);
		return sat<F>("TYPE_HSV");
	}

	template<typename F = ::jint>
	static auto TYPE_Lab() {
		static_assert(field_signatures[jField<F>("TYPE_Lab")] != -1);
		return sat<F>("TYPE_Lab");
	}

	template<typename F = ::jint>
	static auto TYPE_Luv() {
		static_assert(field_signatures[jField<F>("TYPE_Luv")] != -1);
		return sat<F>("TYPE_Luv");
	}

	template<typename F = ::jint>
	static auto TYPE_RGB() {
		static_assert(field_signatures[jField<F>("TYPE_RGB")] != -1);
		return sat<F>("TYPE_RGB");
	}

	template<typename F = ::jint>
	static auto TYPE_XYZ() {
		static_assert(field_signatures[jField<F>("TYPE_XYZ")] != -1);
		return sat<F>("TYPE_XYZ");
	}

	template<typename F = ::jint>
	static auto TYPE_YCbCr() {
		static_assert(field_signatures[jField<F>("TYPE_YCbCr")] != -1);
		return sat<F>("TYPE_YCbCr");
	}

	template<typename F = ::jint>
	static auto TYPE_Yxy() {
		static_assert(field_signatures[jField<F>("TYPE_Yxy")] != -1);
		return sat<F>("TYPE_Yxy");
	}

	constexpr static Enume method_signatures{
		jMethod<::jfloat *(::jfloat *)>("fromCIEXYZ"), //
		jMethod<::jfloat *(::jfloat *)>("fromRGB"), //
		jMethod<::java::awt::color::ColorSpace(::jint)>("getInstance"), //
		jMethod<::jfloat(::jint)>("getMaxValue"), //
		jMethod<::jfloat(::jint)>("getMinValue"), //
		jMethod<::java::lang::String(::jint)>("getName"), //
		jMethod<::jint()>("getNumComponents"), //
		jMethod<::jint()>("getType"), //
		jMethod<::jboolean()>("isCS_sRGB"), //
		jMethod<::jfloat *(::jfloat *)>("toCIEXYZ"), //
		jMethod<::jfloat *(::jfloat *)>("toRGB"), //
	};

	template<typename R = ::jfloat *, typename... Args>
	auto fromCIEXYZ(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("fromCIEXYZ")] != -1);
		return call<R>("fromCIEXYZ", forward<Args>(args)...);
	}

	template<typename R = ::jfloat *, typename... Args>
	auto fromRGB(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("fromRGB")] != -1);
		return call<R>("fromRGB", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::color::ColorSpace, typename... Args>
	static auto getInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInstance")] != -1);
		return scall<R>("getInstance", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getMaxValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaxValue")] != -1);
		return call<R>("getMaxValue", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getMinValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinValue")] != -1);
		return call<R>("getMinValue", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumComponents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNumComponents")] != -1);
		return call<R>("getNumComponents", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCS_sRGB(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isCS_sRGB")] != -1);
		return call<R>("isCS_sRGB", forward<Args>(args)...);
	}

	template<typename R = ::jfloat *, typename... Args>
	auto toCIEXYZ(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toCIEXYZ")] != -1);
		return call<R>("toCIEXYZ", forward<Args>(args)...);
	}

	template<typename R = ::jfloat *, typename... Args>
	auto toRGB(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toRGB")] != -1);
		return call<R>("toRGB", forward<Args>(args)...);
	}

};

#endif
