#ifndef java_awt_Window_HPP
#define java_awt_Window_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::Window : public jObject<::java::awt::Window, ::java::awt::Container> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "Window";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::Frame)>(), //
		jConstructor<::jvoid(::java::awt::Window)>(), //
		jConstructor<::jvoid(::java::awt::Window, ::java::awt::GraphicsConfiguration)>(), //
		jMethod<::jvoid()>("addNotify"), //
		jMethod<::jvoid(::java::beans::PropertyChangeListener)>("addPropertyChangeListener"), //
		jMethod<::jvoid(::java::lang::String, ::java::beans::PropertyChangeListener)>("addPropertyChangeListener"), //
		jMethod<::jvoid(::java::awt::event::WindowFocusListener)>("addWindowFocusListener"), //
		jMethod<::jvoid(::java::awt::event::WindowListener)>("addWindowListener"), //
		jMethod<::jvoid(::java::awt::event::WindowStateListener)>("addWindowStateListener"), //
		jMethod<::jvoid(::java::lang::String)>("applyResourceBundle"), //
		jMethod<::jvoid(::java::util::ResourceBundle)>("applyResourceBundle"), //
		jMethod<::jvoid(::jint)>("createBufferStrategy"), //
		jMethod<::jvoid(::jint, ::java::awt::BufferCapabilities)>("createBufferStrategy"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::java::awt::Color()>("getBackground"), //
		jMethod<::java::awt::image::BufferStrategy()>("getBufferStrategy"), //
		jMethod<::java::awt::Container()>("getFocusCycleRootAncestor"), //
		jMethod<::java::awt::Component()>("getFocusOwner"), //
		jMethod<::java::util::Set(::jint)>("getFocusTraversalKeys"), //
		jMethod<::jboolean()>("getFocusableWindowState"), //
		jMethod<::java::util::List()>("getIconImages"), //
		jMethod<::java::awt::im::InputContext()>("getInputContext"), //
		jMethod<::java::util::EventListener *(::java::lang::Class)>("getListeners"), //
		jMethod<::java::util::Locale()>("getLocale"), //
		jMethod<::java::awt::Dialog$ModalExclusionType()>("getModalExclusionType"), //
		jMethod<::java::awt::Component()>("getMostRecentFocusOwner"), //
		jMethod<::jfloat()>("getOpacity"), //
		jMethod<::java::awt::Window *()>("getOwnedWindows"), //
		jMethod<::java::awt::Window()>("getOwner"), //
		jMethod<::java::awt::Window *()>("getOwnerlessWindows"), //
		jMethod<::java::awt::Shape()>("getShape"), //
		jMethod<::java::awt::Toolkit()>("getToolkit"), //
		jMethod<::java::awt::Window$Type()>("getType"), //
		jMethod<::java::lang::String()>("getWarningString"), //
		jMethod<::java::awt::event::WindowFocusListener *()>("getWindowFocusListeners"), //
		jMethod<::java::awt::event::WindowListener *()>("getWindowListeners"), //
		jMethod<::java::awt::event::WindowStateListener *()>("getWindowStateListeners"), //
		jMethod<::java::awt::Window *()>("getWindows"), //
		jMethod<::jvoid()>("hide"), //
		jMethod<::jboolean()>("isActive"), //
		jMethod<::jboolean()>("isAlwaysOnTop"), //
		jMethod<::jboolean()>("isAlwaysOnTopSupported"), //
		jMethod<::jboolean()>("isAutoRequestFocus"), //
		jMethod<::jboolean()>("isFocusCycleRoot"), //
		jMethod<::jboolean()>("isFocusableWindow"), //
		jMethod<::jboolean()>("isFocused"), //
		jMethod<::jboolean()>("isLocationByPlatform"), //
		jMethod<::jboolean()>("isOpaque"), //
		jMethod<::jboolean()>("isShowing"), //
		jMethod<::jboolean()>("isValidateRoot"), //
		jMethod<::jvoid()>("pack"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paint"), //
		jMethod<::jboolean(::java::awt::Event)>("postEvent"), //
		jMethod<::jvoid()>("removeNotify"), //
		jMethod<::jvoid(::java::awt::event::WindowFocusListener)>("removeWindowFocusListener"), //
		jMethod<::jvoid(::java::awt::event::WindowListener)>("removeWindowListener"), //
		jMethod<::jvoid(::java::awt::event::WindowStateListener)>("removeWindowStateListener"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("reshape"), //
		jMethod<::jvoid(::jboolean)>("setAlwaysOnTop"), //
		jMethod<::jvoid(::jboolean)>("setAutoRequestFocus"), //
		jMethod<::jvoid(::java::awt::Color)>("setBackground"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("setBounds"), //
		jMethod<::jvoid(::java::awt::Rectangle)>("setBounds"), //
		jMethod<::jvoid(::java::awt::Cursor)>("setCursor"), //
		jMethod<::jvoid(::jboolean)>("setFocusCycleRoot"), //
		jMethod<::jvoid(::jboolean)>("setFocusableWindowState"), //
		jMethod<::jvoid(::java::awt::Image)>("setIconImage"), //
		jMethod<::jvoid(::java::util::List)>("setIconImages"), //
		jMethod<::jvoid(::jint, ::jint)>("setLocation"), //
		jMethod<::jvoid(::java::awt::Point)>("setLocation"), //
		jMethod<::jvoid(::jboolean)>("setLocationByPlatform"), //
		jMethod<::jvoid(::java::awt::Component)>("setLocationRelativeTo"), //
		jMethod<::jvoid(::java::awt::Dimension)>("setMinimumSize"), //
		jMethod<::jvoid(::java::awt::Dialog$ModalExclusionType)>("setModalExclusionType"), //
		jMethod<::jvoid(::jfloat)>("setOpacity"), //
		jMethod<::jvoid(::java::awt::Shape)>("setShape"), //
		jMethod<::jvoid(::jint, ::jint)>("setSize"), //
		jMethod<::jvoid(::java::awt::Dimension)>("setSize"), //
		jMethod<::jvoid(::java::awt::Window$Type)>("setType"), //
		jMethod<::jvoid(::jboolean)>("setVisible"), //
		jMethod<::jvoid()>("show"), //
		jMethod<::jvoid()>("toBack"), //
		jMethod<::jvoid()>("toFront"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addNotify")] != -1);
		return call<R>("addNotify", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addPropertyChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addPropertyChangeListener")] != -1);
		return call<R>("addPropertyChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addWindowFocusListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addWindowFocusListener")] != -1);
		return call<R>("addWindowFocusListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addWindowListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addWindowListener")] != -1);
		return call<R>("addWindowListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addWindowStateListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addWindowStateListener")] != -1);
		return call<R>("addWindowStateListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto applyResourceBundle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("applyResourceBundle")] != -1);
		return call<R>("applyResourceBundle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto createBufferStrategy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createBufferStrategy")] != -1);
		return call<R>("createBufferStrategy", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBackground")] != -1);
		return call<R>("getBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::BufferStrategy, typename... Args>
	auto getBufferStrategy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBufferStrategy")] != -1);
		return call<R>("getBufferStrategy", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Container, typename... Args>
	auto getFocusCycleRootAncestor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFocusCycleRootAncestor")] != -1);
		return call<R>("getFocusCycleRootAncestor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getFocusOwner(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFocusOwner")] != -1);
		return call<R>("getFocusOwner", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto getFocusTraversalKeys(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFocusTraversalKeys")] != -1);
		return call<R>("getFocusTraversalKeys", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getFocusableWindowState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFocusableWindowState")] != -1);
		return call<R>("getFocusableWindowState", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getIconImages(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIconImages")] != -1);
		return call<R>("getIconImages", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::im::InputContext, typename... Args>
	auto getInputContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInputContext")] != -1);
		return call<R>("getInputContext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::EventListener *, typename... Args>
	auto getListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getListeners")] != -1);
		return call<R>("getListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale, typename... Args>
	auto getLocale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocale")] != -1);
		return call<R>("getLocale", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dialog$ModalExclusionType, typename... Args>
	auto getModalExclusionType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getModalExclusionType")] != -1);
		return call<R>("getModalExclusionType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getMostRecentFocusOwner(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMostRecentFocusOwner")] != -1);
		return call<R>("getMostRecentFocusOwner", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getOpacity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOpacity")] != -1);
		return call<R>("getOpacity", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Window *, typename... Args>
	auto getOwnedWindows(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOwnedWindows")] != -1);
		return call<R>("getOwnedWindows", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Window, typename... Args>
	auto getOwner(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOwner")] != -1);
		return call<R>("getOwner", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Window *, typename... Args>
	static auto getOwnerlessWindows(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOwnerlessWindows")] != -1);
		return scall<R>("getOwnerlessWindows", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Shape, typename... Args>
	auto getShape(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getShape")] != -1);
		return call<R>("getShape", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Toolkit, typename... Args>
	auto getToolkit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getToolkit")] != -1);
		return call<R>("getToolkit", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Window$Type, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getWarningString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWarningString")] != -1);
		return call<R>("getWarningString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::WindowFocusListener *, typename... Args>
	auto getWindowFocusListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWindowFocusListeners")] != -1);
		return call<R>("getWindowFocusListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::WindowListener *, typename... Args>
	auto getWindowListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWindowListeners")] != -1);
		return call<R>("getWindowListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::WindowStateListener *, typename... Args>
	auto getWindowStateListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWindowStateListeners")] != -1);
		return call<R>("getWindowStateListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Window *, typename... Args>
	static auto getWindows(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWindows")] != -1);
		return scall<R>("getWindows", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto hide(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hide")] != -1);
		return call<R>("hide", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isActive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isActive")] != -1);
		return call<R>("isActive", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAlwaysOnTop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAlwaysOnTop")] != -1);
		return call<R>("isAlwaysOnTop", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAlwaysOnTopSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAlwaysOnTopSupported")] != -1);
		return call<R>("isAlwaysOnTopSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAutoRequestFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAutoRequestFocus")] != -1);
		return call<R>("isAutoRequestFocus", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFocusCycleRoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFocusCycleRoot")] != -1);
		return call<R>("isFocusCycleRoot", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFocusableWindow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFocusableWindow")] != -1);
		return call<R>("isFocusableWindow", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFocused(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFocused")] != -1);
		return call<R>("isFocused", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLocationByPlatform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLocationByPlatform")] != -1);
		return call<R>("isLocationByPlatform", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isOpaque(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isOpaque")] != -1);
		return call<R>("isOpaque", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isShowing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isShowing")] != -1);
		return call<R>("isShowing", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isValidateRoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isValidateRoot")] != -1);
		return call<R>("isValidateRoot", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto pack(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("pack")] != -1);
		return call<R>("pack", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto postEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("postEvent")] != -1);
		return call<R>("postEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeNotify")] != -1);
		return call<R>("removeNotify", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeWindowFocusListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeWindowFocusListener")] != -1);
		return call<R>("removeWindowFocusListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeWindowListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeWindowListener")] != -1);
		return call<R>("removeWindowListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeWindowStateListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeWindowStateListener")] != -1);
		return call<R>("removeWindowStateListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reshape(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reshape")] != -1);
		return call<R>("reshape", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAlwaysOnTop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAlwaysOnTop")] != -1);
		return call<R>("setAlwaysOnTop", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAutoRequestFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAutoRequestFocus")] != -1);
		return call<R>("setAutoRequestFocus", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBackground")] != -1);
		return call<R>("setBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBounds")] != -1);
		return call<R>("setBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCursor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCursor")] != -1);
		return call<R>("setCursor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFocusCycleRoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFocusCycleRoot")] != -1);
		return call<R>("setFocusCycleRoot", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFocusableWindowState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFocusableWindowState")] != -1);
		return call<R>("setFocusableWindowState", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIconImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIconImage")] != -1);
		return call<R>("setIconImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIconImages(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIconImages")] != -1);
		return call<R>("setIconImages", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLocation")] != -1);
		return call<R>("setLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLocationByPlatform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLocationByPlatform")] != -1);
		return call<R>("setLocationByPlatform", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLocationRelativeTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLocationRelativeTo")] != -1);
		return call<R>("setLocationRelativeTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMinimumSize")] != -1);
		return call<R>("setMinimumSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setModalExclusionType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setModalExclusionType")] != -1);
		return call<R>("setModalExclusionType", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOpacity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOpacity")] != -1);
		return call<R>("setOpacity", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setShape(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setShape")] != -1);
		return call<R>("setShape", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSize")] != -1);
		return call<R>("setSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setType")] != -1);
		return call<R>("setType", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVisible")] != -1);
		return call<R>("setVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto show(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("show")] != -1);
		return call<R>("show", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto toBack(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toBack")] != -1);
		return call<R>("toBack", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto toFront(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toFront")] != -1);
		return call<R>("toFront", std::forward<Args>(args)...);
	}

};

#endif
