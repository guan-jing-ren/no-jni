#ifndef java_awt_GraphicsEnvironment_HPP
#define java_awt_GraphicsEnvironment_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::GraphicsEnvironment : public jObject<::java::awt::GraphicsEnvironment, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "GraphicsEnvironment";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::awt::Graphics2D(::java::awt::image::BufferedImage)>("createGraphics"), //
		jMethod<::java::awt::Font *()>("getAllFonts"), //
		jMethod<::java::lang::String *()>("getAvailableFontFamilyNames"), //
		jMethod<::java::lang::String *(::java::util::Locale)>("getAvailableFontFamilyNames"), //
		jMethod<::java::awt::Point()>("getCenterPoint"), //
		jMethod<::java::awt::GraphicsDevice()>("getDefaultScreenDevice"), //
		jMethod<::java::awt::GraphicsEnvironment()>("getLocalGraphicsEnvironment"), //
		jMethod<::java::awt::Rectangle()>("getMaximumWindowBounds"), //
		jMethod<::java::awt::GraphicsDevice *()>("getScreenDevices"), //
		jMethod<::jboolean()>("isHeadless"), //
		jMethod<::jboolean()>("isHeadlessInstance"), //
		jMethod<::jvoid()>("preferLocaleFonts"), //
		jMethod<::jvoid()>("preferProportionalFonts"), //
		jMethod<::jboolean(::java::awt::Font)>("registerFont"), //
	};

	template<typename R = ::java::awt::Graphics2D, typename... Args>
	auto createGraphics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createGraphics")] != -1);
		return call<R>("createGraphics", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Font *, typename... Args>
	auto getAllFonts(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAllFonts")] != -1);
		return call<R>("getAllFonts", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getAvailableFontFamilyNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAvailableFontFamilyNames")] != -1);
		return call<R>("getAvailableFontFamilyNames", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Point, typename... Args>
	auto getCenterPoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCenterPoint")] != -1);
		return call<R>("getCenterPoint", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::GraphicsDevice, typename... Args>
	auto getDefaultScreenDevice(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultScreenDevice")] != -1);
		return call<R>("getDefaultScreenDevice", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::GraphicsEnvironment, typename... Args>
	static auto getLocalGraphicsEnvironment(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalGraphicsEnvironment")] != -1);
		return scall<R>("getLocalGraphicsEnvironment", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getMaximumWindowBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaximumWindowBounds")] != -1);
		return call<R>("getMaximumWindowBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::GraphicsDevice *, typename... Args>
	auto getScreenDevices(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScreenDevices")] != -1);
		return call<R>("getScreenDevices", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isHeadless(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isHeadless")] != -1);
		return scall<R>("isHeadless", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isHeadlessInstance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isHeadlessInstance")] != -1);
		return call<R>("isHeadlessInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto preferLocaleFonts(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("preferLocaleFonts")] != -1);
		return call<R>("preferLocaleFonts", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto preferProportionalFonts(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("preferProportionalFonts")] != -1);
		return call<R>("preferProportionalFonts", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto registerFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("registerFont")] != -1);
		return call<R>("registerFont", std::forward<Args>(args)...);
	}

};

#endif
