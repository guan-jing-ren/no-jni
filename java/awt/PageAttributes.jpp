#ifndef java_awt_PageAttributes_HPP
#define java_awt_PageAttributes_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::PageAttributes : public jObject<::java::awt::PageAttributes, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "PageAttributes";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::awt::PageAttributes$ColorType, ::java::awt::PageAttributes$MediaType, ::java::awt::PageAttributes$OrientationRequestedType, ::java::awt::PageAttributes$OriginType, ::java::awt::PageAttributes$PrintQualityType, ::jint *)>(), //
		jConstructor<::jvoid(::java::awt::PageAttributes)>(), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::awt::PageAttributes$ColorType()>("getColor"), //
		jMethod<::java::awt::PageAttributes$MediaType()>("getMedia"), //
		jMethod<::java::awt::PageAttributes$OrientationRequestedType()>("getOrientationRequested"), //
		jMethod<::java::awt::PageAttributes$OriginType()>("getOrigin"), //
		jMethod<::java::awt::PageAttributes$PrintQualityType()>("getPrintQuality"), //
		jMethod<::jint *()>("getPrinterResolution"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jvoid(::java::awt::PageAttributes)>("set"), //
		jMethod<::jvoid(::java::awt::PageAttributes$ColorType)>("setColor"), //
		jMethod<::jvoid(::java::awt::PageAttributes$MediaType)>("setMedia"), //
		jMethod<::jvoid()>("setMediaToDefault"), //
		jMethod<::jvoid(::jint)>("setOrientationRequested"), //
		jMethod<::jvoid(::java::awt::PageAttributes$OrientationRequestedType)>("setOrientationRequested"), //
		jMethod<::jvoid()>("setOrientationRequestedToDefault"), //
		jMethod<::jvoid(::java::awt::PageAttributes$OriginType)>("setOrigin"), //
		jMethod<::jvoid(::jint)>("setPrintQuality"), //
		jMethod<::jvoid(::java::awt::PageAttributes$PrintQualityType)>("setPrintQuality"), //
		jMethod<::jvoid()>("setPrintQualityToDefault"), //
		jMethod<::jvoid(::jint)>("setPrinterResolution"), //
		jMethod<::jvoid(::jint *)>("setPrinterResolution"), //
		jMethod<::jvoid()>("setPrinterResolutionToDefault"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::PageAttributes$ColorType, typename... Args>
	auto getColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColor")] != -1);
		return call<R>("getColor", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::PageAttributes$MediaType, typename... Args>
	auto getMedia(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMedia")] != -1);
		return call<R>("getMedia", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::PageAttributes$OrientationRequestedType, typename... Args>
	auto getOrientationRequested(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getOrientationRequested")] != -1);
		return call<R>("getOrientationRequested", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::PageAttributes$OriginType, typename... Args>
	auto getOrigin(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getOrigin")] != -1);
		return call<R>("getOrigin", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::PageAttributes$PrintQualityType, typename... Args>
	auto getPrintQuality(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPrintQuality")] != -1);
		return call<R>("getPrintQuality", forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getPrinterResolution(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPrinterResolution")] != -1);
		return call<R>("getPrinterResolution", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("set")] != -1);
		return call<R>("set", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setColor")] != -1);
		return call<R>("setColor", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMedia(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMedia")] != -1);
		return call<R>("setMedia", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMediaToDefault(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMediaToDefault")] != -1);
		return call<R>("setMediaToDefault", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOrientationRequested(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setOrientationRequested")] != -1);
		return call<R>("setOrientationRequested", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOrientationRequestedToDefault(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setOrientationRequestedToDefault")] != -1);
		return call<R>("setOrientationRequestedToDefault", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOrigin(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setOrigin")] != -1);
		return call<R>("setOrigin", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPrintQuality(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPrintQuality")] != -1);
		return call<R>("setPrintQuality", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPrintQualityToDefault(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPrintQualityToDefault")] != -1);
		return call<R>("setPrintQualityToDefault", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPrinterResolution(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPrinterResolution")] != -1);
		return call<R>("setPrinterResolution", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPrinterResolutionToDefault(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPrinterResolutionToDefault")] != -1);
		return call<R>("setPrinterResolutionToDefault", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
