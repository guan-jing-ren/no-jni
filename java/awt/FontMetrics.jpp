#ifndef java_awt_FontMetrics_HPP
#define java_awt_FontMetrics_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::FontMetrics : public jObject<::java::awt::FontMetrics, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "FontMetrics";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint(::jbyte *, ::jint, ::jint)>("bytesWidth"), //
		jMethod<::jint(::jchar)>("charWidth"), //
		jMethod<::jint(::jint)>("charWidth"), //
		jMethod<::jint(::jchar *, ::jint, ::jint)>("charsWidth"), //
		jMethod<::jint()>("getAscent"), //
		jMethod<::jint()>("getDescent"), //
		jMethod<::java::awt::Font()>("getFont"), //
		jMethod<::java::awt::font::FontRenderContext()>("getFontRenderContext"), //
		jMethod<::jint()>("getHeight"), //
		jMethod<::jint()>("getLeading"), //
		jMethod<::java::awt::font::LineMetrics(::java::lang::String, ::jint, ::jint, ::java::awt::Graphics)>("getLineMetrics"), //
		jMethod<::java::awt::font::LineMetrics(::java::lang::String, ::java::awt::Graphics)>("getLineMetrics"), //
		jMethod<::java::awt::font::LineMetrics(::java::text::CharacterIterator, ::jint, ::jint, ::java::awt::Graphics)>("getLineMetrics"), //
		jMethod<::java::awt::font::LineMetrics(::jchar *, ::jint, ::jint, ::java::awt::Graphics)>("getLineMetrics"), //
		jMethod<::jint()>("getMaxAdvance"), //
		jMethod<::jint()>("getMaxAscent"), //
		jMethod<::java::awt::geom::Rectangle2D(::java::awt::Graphics)>("getMaxCharBounds"), //
		jMethod<::jint()>("getMaxDescent"), //
		jMethod<::java::awt::geom::Rectangle2D(::java::lang::String, ::jint, ::jint, ::java::awt::Graphics)>("getStringBounds"), //
		jMethod<::java::awt::geom::Rectangle2D(::java::lang::String, ::java::awt::Graphics)>("getStringBounds"), //
		jMethod<::java::awt::geom::Rectangle2D(::java::text::CharacterIterator, ::jint, ::jint, ::java::awt::Graphics)>("getStringBounds"), //
		jMethod<::java::awt::geom::Rectangle2D(::jchar *, ::jint, ::jint, ::java::awt::Graphics)>("getStringBounds"), //
		jMethod<::jint *()>("getWidths"), //
		jMethod<::jboolean()>("hasUniformLineMetrics"), //
		jMethod<::jint(::java::lang::String)>("stringWidth"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jint, typename... Args>
	auto bytesWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("bytesWidth")] != -1);
		return call<R>("bytesWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto charWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("charWidth")] != -1);
		return call<R>("charWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto charsWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("charsWidth")] != -1);
		return call<R>("charsWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAscent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAscent")] != -1);
		return call<R>("getAscent", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDescent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDescent")] != -1);
		return call<R>("getDescent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Font, typename... Args>
	auto getFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFont")] != -1);
		return call<R>("getFont", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::font::FontRenderContext, typename... Args>
	auto getFontRenderContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFontRenderContext")] != -1);
		return call<R>("getFontRenderContext", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeight")] != -1);
		return call<R>("getHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLeading(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLeading")] != -1);
		return call<R>("getLeading", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::font::LineMetrics, typename... Args>
	auto getLineMetrics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineMetrics")] != -1);
		return call<R>("getLineMetrics", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxAdvance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaxAdvance")] != -1);
		return call<R>("getMaxAdvance", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxAscent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaxAscent")] != -1);
		return call<R>("getMaxAscent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Rectangle2D, typename... Args>
	auto getMaxCharBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaxCharBounds")] != -1);
		return call<R>("getMaxCharBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxDescent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaxDescent")] != -1);
		return call<R>("getMaxDescent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Rectangle2D, typename... Args>
	auto getStringBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStringBounds")] != -1);
		return call<R>("getStringBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getWidths(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWidths")] != -1);
		return call<R>("getWidths", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasUniformLineMetrics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasUniformLineMetrics")] != -1);
		return call<R>("hasUniformLineMetrics", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto stringWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stringWidth")] != -1);
		return call<R>("stringWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
