#ifndef java_awt_datatransfer_FlavorTable_HPP
#define java_awt_datatransfer_FlavorTable_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::datatransfer::FlavorTable : public jObject<::java::awt::datatransfer::FlavorTable, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_datatransfer / "FlavorTable";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::util::List(::java::lang::String)>("getFlavorsForNative"), //
		jMethod<::java::util::Map(::java::lang::String *)>("getFlavorsForNatives"), //
		jMethod<::java::util::List(::java::awt::datatransfer::DataFlavor)>("getNativesForFlavor"), //
		jMethod<::java::util::Map(::java::awt::datatransfer::DataFlavor *)>("getNativesForFlavors"), //
	};

	template<typename R = ::java::util::List, typename... Args>
	auto getFlavorsForNative(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFlavorsForNative")] != -1);
		return call<R>("getFlavorsForNative", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getFlavorsForNatives(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFlavorsForNatives")] != -1);
		return call<R>("getFlavorsForNatives", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getNativesForFlavor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNativesForFlavor")] != -1);
		return call<R>("getNativesForFlavor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getNativesForFlavors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNativesForFlavors")] != -1);
		return call<R>("getNativesForFlavors", std::forward<Args>(args)...);
	}

};

#endif
