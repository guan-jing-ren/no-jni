#ifndef java_awt_datatransfer_SystemFlavorMap_HPP
#define java_awt_datatransfer_SystemFlavorMap_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::datatransfer::SystemFlavorMap : public jObject<::java::awt::datatransfer::SystemFlavorMap, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_datatransfer / "SystemFlavorMap";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::lang::String, ::java::awt::datatransfer::DataFlavor)>("addFlavorForUnencodedNative"), //
		jMethod<::jvoid(::java::awt::datatransfer::DataFlavor, ::java::lang::String)>("addUnencodedNativeForFlavor"), //
		jMethod<::java::awt::datatransfer::DataFlavor(::java::lang::String)>("decodeDataFlavor"), //
		jMethod<::java::lang::String(::java::lang::String)>("decodeJavaMIMEType"), //
		jMethod<::java::lang::String(::java::awt::datatransfer::DataFlavor)>("encodeDataFlavor"), //
		jMethod<::java::lang::String(::java::lang::String)>("encodeJavaMIMEType"), //
		jMethod<::java::awt::datatransfer::FlavorMap()>("getDefaultFlavorMap"), //
		jMethod<::java::util::List(::java::lang::String)>("getFlavorsForNative"), //
		jMethod<::java::util::Map(::java::lang::String *)>("getFlavorsForNatives"), //
		jMethod<::java::util::List(::java::awt::datatransfer::DataFlavor)>("getNativesForFlavor"), //
		jMethod<::java::util::Map(::java::awt::datatransfer::DataFlavor *)>("getNativesForFlavors"), //
		jMethod<::jboolean(::java::lang::String)>("isJavaMIMEType"), //
		jMethod<::jvoid(::java::lang::String, ::java::awt::datatransfer::DataFlavor *)>("setFlavorsForNative"), //
		jMethod<::jvoid(::java::awt::datatransfer::DataFlavor, ::java::lang::String *)>("setNativesForFlavor"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addFlavorForUnencodedNative(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addFlavorForUnencodedNative")] != -1);
		return call<R>("addFlavorForUnencodedNative", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addUnencodedNativeForFlavor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addUnencodedNativeForFlavor")] != -1);
		return call<R>("addUnencodedNativeForFlavor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::datatransfer::DataFlavor, typename... Args>
	static auto decodeDataFlavor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("decodeDataFlavor")] != -1);
		return scall<R>("decodeDataFlavor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto decodeJavaMIMEType(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("decodeJavaMIMEType")] != -1);
		return scall<R>("decodeJavaMIMEType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto encodeDataFlavor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("encodeDataFlavor")] != -1);
		return scall<R>("encodeDataFlavor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto encodeJavaMIMEType(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("encodeJavaMIMEType")] != -1);
		return scall<R>("encodeJavaMIMEType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::datatransfer::FlavorMap, typename... Args>
	static auto getDefaultFlavorMap(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultFlavorMap")] != -1);
		return scall<R>("getDefaultFlavorMap", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getFlavorsForNative(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFlavorsForNative")] != -1);
		return call<R>("getFlavorsForNative", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getFlavorsForNatives(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFlavorsForNatives")] != -1);
		return call<R>("getFlavorsForNatives", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getNativesForFlavor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNativesForFlavor")] != -1);
		return call<R>("getNativesForFlavor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getNativesForFlavors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNativesForFlavors")] != -1);
		return call<R>("getNativesForFlavors", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isJavaMIMEType(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isJavaMIMEType")] != -1);
		return scall<R>("isJavaMIMEType", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFlavorsForNative(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFlavorsForNative")] != -1);
		return call<R>("setFlavorsForNative", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNativesForFlavor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNativesForFlavor")] != -1);
		return call<R>("setNativesForFlavor", std::forward<Args>(args)...);
	}

};

#endif
