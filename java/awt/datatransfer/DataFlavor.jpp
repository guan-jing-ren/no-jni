#ifndef java_awt_datatransfer_DataFlavor_HPP
#define java_awt_datatransfer_DataFlavor_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::datatransfer::DataFlavor : public jObject<::java::awt::datatransfer::DataFlavor, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_datatransfer / "DataFlavor";

	constexpr static Enume field_signatures{
		jField<::java::awt::datatransfer::DataFlavor>("allHtmlFlavor"), //
		jField<::java::awt::datatransfer::DataFlavor>("fragmentHtmlFlavor"), //
		jField<::java::awt::datatransfer::DataFlavor>("imageFlavor"), //
		jField<::java::awt::datatransfer::DataFlavor>("javaFileListFlavor"), //
		jField<::java::lang::String>("javaJVMLocalObjectMimeType"), //
		jField<::java::lang::String>("javaRemoteObjectMimeType"), //
		jField<::java::lang::String>("javaSerializedObjectMimeType"), //
		jField<::java::awt::datatransfer::DataFlavor>("selectionHtmlFlavor"), //
		jField<::java::awt::datatransfer::DataFlavor>("stringFlavor"), //
	};

	template<typename F = ::java::awt::datatransfer::DataFlavor>
	static auto allHtmlFlavor() {
		static_assert(field_signatures[jField<F>("allHtmlFlavor")] != -1);
		return sat<F>("allHtmlFlavor");
	}

	template<typename F = ::java::awt::datatransfer::DataFlavor>
	static auto fragmentHtmlFlavor() {
		static_assert(field_signatures[jField<F>("fragmentHtmlFlavor")] != -1);
		return sat<F>("fragmentHtmlFlavor");
	}

	template<typename F = ::java::awt::datatransfer::DataFlavor>
	static auto imageFlavor() {
		static_assert(field_signatures[jField<F>("imageFlavor")] != -1);
		return sat<F>("imageFlavor");
	}

	template<typename F = ::java::awt::datatransfer::DataFlavor>
	static auto javaFileListFlavor() {
		static_assert(field_signatures[jField<F>("javaFileListFlavor")] != -1);
		return sat<F>("javaFileListFlavor");
	}

	template<typename F = ::java::lang::String>
	static auto javaJVMLocalObjectMimeType() {
		static_assert(field_signatures[jField<F>("javaJVMLocalObjectMimeType")] != -1);
		return sat<F>("javaJVMLocalObjectMimeType");
	}

	template<typename F = ::java::lang::String>
	static auto javaRemoteObjectMimeType() {
		static_assert(field_signatures[jField<F>("javaRemoteObjectMimeType")] != -1);
		return sat<F>("javaRemoteObjectMimeType");
	}

	template<typename F = ::java::lang::String>
	static auto javaSerializedObjectMimeType() {
		static_assert(field_signatures[jField<F>("javaSerializedObjectMimeType")] != -1);
		return sat<F>("javaSerializedObjectMimeType");
	}

	template<typename F = ::java::awt::datatransfer::DataFlavor>
	static auto selectionHtmlFlavor() {
		static_assert(field_signatures[jField<F>("selectionHtmlFlavor")] != -1);
		return sat<F>("selectionHtmlFlavor");
	}

	template<typename F = ::java::awt::datatransfer::DataFlavor>
	static auto stringFlavor() {
		static_assert(field_signatures[jField<F>("stringFlavor")] != -1);
		return sat<F>("stringFlavor");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::Class, ::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::ClassLoader)>(), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jboolean(::java::awt::datatransfer::DataFlavor)>("equals"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::Class()>("getDefaultRepresentationClass"), //
		jMethod<::java::lang::String()>("getDefaultRepresentationClassAsString"), //
		jMethod<::java::lang::String()>("getHumanPresentableName"), //
		jMethod<::java::lang::String()>("getMimeType"), //
		jMethod<::java::lang::String(::java::lang::String)>("getParameter"), //
		jMethod<::java::lang::String()>("getPrimaryType"), //
		jMethod<::java::io::Reader(::java::awt::datatransfer::Transferable)>("getReaderForText"), //
		jMethod<::java::lang::Class()>("getRepresentationClass"), //
		jMethod<::java::lang::String()>("getSubType"), //
		jMethod<::java::awt::datatransfer::DataFlavor()>("getTextPlainUnicodeFlavor"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isFlavorJavaFileListType"), //
		jMethod<::jboolean()>("isFlavorRemoteObjectType"), //
		jMethod<::jboolean()>("isFlavorSerializedObjectType"), //
		jMethod<::jboolean()>("isFlavorTextType"), //
		jMethod<::jboolean(::java::awt::datatransfer::DataFlavor)>("isMimeTypeEqual"), //
		jMethod<::jboolean(::java::lang::String)>("isMimeTypeEqual"), //
		jMethod<::jboolean()>("isMimeTypeSerializedObject"), //
		jMethod<::jboolean()>("isRepresentationClassByteBuffer"), //
		jMethod<::jboolean()>("isRepresentationClassCharBuffer"), //
		jMethod<::jboolean()>("isRepresentationClassInputStream"), //
		jMethod<::jboolean()>("isRepresentationClassReader"), //
		jMethod<::jboolean()>("isRepresentationClassRemote"), //
		jMethod<::jboolean()>("isRepresentationClassSerializable"), //
		jMethod<::jboolean(::java::awt::datatransfer::DataFlavor)>("match"), //
		jMethod<::jvoid(::java::io::ObjectInput)>("readExternal"), //
		jMethod<::java::awt::datatransfer::DataFlavor(::java::awt::datatransfer::DataFlavor *)>("selectBestTextFlavor"), //
		jMethod<::jvoid(::java::lang::String)>("setHumanPresentableName"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid(::java::io::ObjectOutput)>("writeExternal"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto getDefaultRepresentationClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultRepresentationClass")] != -1);
		return call<R>("getDefaultRepresentationClass", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDefaultRepresentationClassAsString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultRepresentationClassAsString")] != -1);
		return call<R>("getDefaultRepresentationClassAsString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHumanPresentableName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHumanPresentableName")] != -1);
		return call<R>("getHumanPresentableName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMimeType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMimeType")] != -1);
		return call<R>("getMimeType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getParameter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParameter")] != -1);
		return call<R>("getParameter", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPrimaryType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrimaryType")] != -1);
		return call<R>("getPrimaryType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::Reader, typename... Args>
	auto getReaderForText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReaderForText")] != -1);
		return call<R>("getReaderForText", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto getRepresentationClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRepresentationClass")] != -1);
		return call<R>("getRepresentationClass", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSubType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSubType")] != -1);
		return call<R>("getSubType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::datatransfer::DataFlavor, typename... Args>
	static auto getTextPlainUnicodeFlavor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextPlainUnicodeFlavor")] != -1);
		return scall<R>("getTextPlainUnicodeFlavor", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFlavorJavaFileListType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFlavorJavaFileListType")] != -1);
		return call<R>("isFlavorJavaFileListType", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFlavorRemoteObjectType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFlavorRemoteObjectType")] != -1);
		return call<R>("isFlavorRemoteObjectType", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFlavorSerializedObjectType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFlavorSerializedObjectType")] != -1);
		return call<R>("isFlavorSerializedObjectType", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFlavorTextType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFlavorTextType")] != -1);
		return call<R>("isFlavorTextType", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isMimeTypeEqual(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isMimeTypeEqual")] != -1);
		return call<R>("isMimeTypeEqual", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isMimeTypeSerializedObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isMimeTypeSerializedObject")] != -1);
		return call<R>("isMimeTypeSerializedObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRepresentationClassByteBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isRepresentationClassByteBuffer")] != -1);
		return call<R>("isRepresentationClassByteBuffer", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRepresentationClassCharBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isRepresentationClassCharBuffer")] != -1);
		return call<R>("isRepresentationClassCharBuffer", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRepresentationClassInputStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isRepresentationClassInputStream")] != -1);
		return call<R>("isRepresentationClassInputStream", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRepresentationClassReader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isRepresentationClassReader")] != -1);
		return call<R>("isRepresentationClassReader", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRepresentationClassRemote(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isRepresentationClassRemote")] != -1);
		return call<R>("isRepresentationClassRemote", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRepresentationClassSerializable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isRepresentationClassSerializable")] != -1);
		return call<R>("isRepresentationClassSerializable", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto match(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("match")] != -1);
		return call<R>("match", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto readExternal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readExternal")] != -1);
		return call<R>("readExternal", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::datatransfer::DataFlavor, typename... Args>
	static auto selectBestTextFlavor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("selectBestTextFlavor")] != -1);
		return scall<R>("selectBestTextFlavor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHumanPresentableName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHumanPresentableName")] != -1);
		return call<R>("setHumanPresentableName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeExternal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeExternal")] != -1);
		return call<R>("writeExternal", std::forward<Args>(args)...);
	}

};

#endif
