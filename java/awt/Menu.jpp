#ifndef java_awt_Menu_HPP
#define java_awt_Menu_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::Menu : public jObject<::java::awt::Menu, ::java::awt::MenuItem> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "Menu";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::jboolean)>(), //
		jMethod<::java::awt::MenuItem(::java::awt::MenuItem)>("add"), //
		jMethod<::jvoid(::java::lang::String)>("add"), //
		jMethod<::jvoid()>("addNotify"), //
		jMethod<::jvoid()>("addSeparator"), //
		jMethod<::jint()>("countItems"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::java::awt::MenuItem(::jint)>("getItem"), //
		jMethod<::jint()>("getItemCount"), //
		jMethod<::jvoid(::java::awt::MenuItem, ::jint)>("insert"), //
		jMethod<::jvoid(::java::lang::String, ::jint)>("insert"), //
		jMethod<::jvoid(::jint)>("insertSeparator"), //
		jMethod<::jboolean()>("isTearOff"), //
		jMethod<::java::lang::String()>("paramString"), //
		jMethod<::jvoid(::jint)>("remove"), //
		jMethod<::jvoid(::java::awt::MenuComponent)>("remove"), //
		jMethod<::jvoid()>("removeAll"), //
		jMethod<::jvoid()>("removeNotify"), //
	};

	template<typename R = ::java::awt::MenuItem, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addNotify")] != -1);
		return call<R>("addNotify", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addSeparator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addSeparator")] != -1);
		return call<R>("addSeparator", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto countItems(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("countItems")] != -1);
		return call<R>("countItems", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::MenuItem, typename... Args>
	auto getItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItem")] != -1);
		return call<R>("getItem", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getItemCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItemCount")] != -1);
		return call<R>("getItemCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insert(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insert")] != -1);
		return call<R>("insert", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insertSeparator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insertSeparator")] != -1);
		return call<R>("insertSeparator", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isTearOff(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isTearOff")] != -1);
		return call<R>("isTearOff", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto paramString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paramString")] != -1);
		return call<R>("paramString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAll")] != -1);
		return call<R>("removeAll", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeNotify")] != -1);
		return call<R>("removeNotify", std::forward<Args>(args)...);
	}

};

#endif
