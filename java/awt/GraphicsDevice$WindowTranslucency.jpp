#ifndef java_awt_GraphicsDevice$WindowTranslucency_HPP
#define java_awt_GraphicsDevice$WindowTranslucency_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::GraphicsDevice$WindowTranslucency : public jObject<::java::awt::GraphicsDevice$WindowTranslucency, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "GraphicsDevice$WindowTranslucency";

	constexpr static Enume field_signatures{
		jField<::java::awt::GraphicsDevice$WindowTranslucency>("PERPIXEL_TRANSLUCENT"), //
		jField<::java::awt::GraphicsDevice$WindowTranslucency>("PERPIXEL_TRANSPARENT"), //
		jField<::java::awt::GraphicsDevice$WindowTranslucency>("TRANSLUCENT"), //
	};

	template<typename F = ::java::awt::GraphicsDevice$WindowTranslucency>
	static auto PERPIXEL_TRANSLUCENT() {
		static_assert(field_signatures[jField<F>("PERPIXEL_TRANSLUCENT")] != -1);
		return sat<F>("PERPIXEL_TRANSLUCENT");
	}

	template<typename F = ::java::awt::GraphicsDevice$WindowTranslucency>
	static auto PERPIXEL_TRANSPARENT() {
		static_assert(field_signatures[jField<F>("PERPIXEL_TRANSPARENT")] != -1);
		return sat<F>("PERPIXEL_TRANSPARENT");
	}

	template<typename F = ::java::awt::GraphicsDevice$WindowTranslucency>
	static auto TRANSLUCENT() {
		static_assert(field_signatures[jField<F>("TRANSLUCENT")] != -1);
		return sat<F>("TRANSLUCENT");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::awt::GraphicsDevice$WindowTranslucency(::java::lang::String)>("valueOf"), //
		jMethod<::java::awt::GraphicsDevice$WindowTranslucency *()>("values"), //
	};

	template<typename R = ::java::awt::GraphicsDevice$WindowTranslucency, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::GraphicsDevice$WindowTranslucency *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
