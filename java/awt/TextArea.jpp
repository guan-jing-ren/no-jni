#ifndef java_awt_TextArea_HPP
#define java_awt_TextArea_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::TextArea : public jObject<::java::awt::TextArea, ::java::awt::TextComponent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "TextArea";

	constexpr static Enume field_signatures{
		jField<::jint>("SCROLLBARS_BOTH"), //
		jField<::jint>("SCROLLBARS_HORIZONTAL_ONLY"), //
		jField<::jint>("SCROLLBARS_NONE"), //
		jField<::jint>("SCROLLBARS_VERTICAL_ONLY"), //
	};

	template<typename F = ::jint>
	static auto SCROLLBARS_BOTH() {
		static_assert(field_signatures[jField<F>("SCROLLBARS_BOTH")] != -1);
		return sat<F>("SCROLLBARS_BOTH");
	}

	template<typename F = ::jint>
	static auto SCROLLBARS_HORIZONTAL_ONLY() {
		static_assert(field_signatures[jField<F>("SCROLLBARS_HORIZONTAL_ONLY")] != -1);
		return sat<F>("SCROLLBARS_HORIZONTAL_ONLY");
	}

	template<typename F = ::jint>
	static auto SCROLLBARS_NONE() {
		static_assert(field_signatures[jField<F>("SCROLLBARS_NONE")] != -1);
		return sat<F>("SCROLLBARS_NONE");
	}

	template<typename F = ::jint>
	static auto SCROLLBARS_VERTICAL_ONLY() {
		static_assert(field_signatures[jField<F>("SCROLLBARS_VERTICAL_ONLY")] != -1);
		return sat<F>("SCROLLBARS_VERTICAL_ONLY");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint, ::jint)>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::java::lang::String, ::jint, ::jint, ::jint)>(), //
		jMethod<::jvoid()>("addNotify"), //
		jMethod<::jvoid(::java::lang::String)>("append"), //
		jMethod<::jvoid(::java::lang::String)>("appendText"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::jint()>("getColumns"), //
		jMethod<::java::awt::Dimension()>("getMinimumSize"), //
		jMethod<::java::awt::Dimension(::jint, ::jint)>("getMinimumSize"), //
		jMethod<::java::awt::Dimension()>("getPreferredSize"), //
		jMethod<::java::awt::Dimension(::jint, ::jint)>("getPreferredSize"), //
		jMethod<::jint()>("getRows"), //
		jMethod<::jint()>("getScrollbarVisibility"), //
		jMethod<::jvoid(::java::lang::String, ::jint)>("insert"), //
		jMethod<::jvoid(::java::lang::String, ::jint)>("insertText"), //
		jMethod<::java::awt::Dimension()>("minimumSize"), //
		jMethod<::java::awt::Dimension(::jint, ::jint)>("minimumSize"), //
		jMethod<::java::awt::Dimension()>("preferredSize"), //
		jMethod<::java::awt::Dimension(::jint, ::jint)>("preferredSize"), //
		jMethod<::jvoid(::java::lang::String, ::jint, ::jint)>("replaceRange"), //
		jMethod<::jvoid(::java::lang::String, ::jint, ::jint)>("replaceText"), //
		jMethod<::jvoid(::jint)>("setColumns"), //
		jMethod<::jvoid(::jint)>("setRows"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addNotify")] != -1);
		return call<R>("addNotify", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto append(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("append")] != -1);
		return call<R>("append", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto appendText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("appendText")] != -1);
		return call<R>("appendText", forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getColumns(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColumns")] != -1);
		return call<R>("getColumns", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinimumSize")] != -1);
		return call<R>("getMinimumSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreferredSize")] != -1);
		return call<R>("getPreferredSize", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRows(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRows")] != -1);
		return call<R>("getRows", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getScrollbarVisibility(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getScrollbarVisibility")] != -1);
		return call<R>("getScrollbarVisibility", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insert(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("insert")] != -1);
		return call<R>("insert", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insertText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("insertText")] != -1);
		return call<R>("insertText", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto minimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("minimumSize")] != -1);
		return call<R>("minimumSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto preferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("preferredSize")] != -1);
		return call<R>("preferredSize", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto replaceRange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("replaceRange")] != -1);
		return call<R>("replaceRange", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto replaceText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("replaceText")] != -1);
		return call<R>("replaceText", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColumns(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setColumns")] != -1);
		return call<R>("setColumns", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRows(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setRows")] != -1);
		return call<R>("setRows", forward<Args>(args)...);
	}

};

#endif
