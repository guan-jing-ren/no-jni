#ifndef java_awt_Graphics2D_HPP
#define java_awt_Graphics2D_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::Graphics2D : public jObject<::java::awt::Graphics2D, ::java::awt::Graphics> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "Graphics2D";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::util::Map)>("addRenderingHints"), //
		jMethod<::jvoid(::java::awt::Shape)>("clip"), //
		jMethod<::jvoid(::java::awt::Shape)>("draw"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jboolean)>("draw3DRect"), //
		jMethod<::jvoid(::java::awt::font::GlyphVector, ::jfloat, ::jfloat)>("drawGlyphVector"), //
		jMethod<::jboolean(::java::awt::Image, ::java::awt::geom::AffineTransform, ::java::awt::image::ImageObserver)>("drawImage"), //
		jMethod<::jvoid(::java::awt::image::BufferedImage, ::java::awt::image::BufferedImageOp, ::jint, ::jint)>("drawImage"), //
		jMethod<::jvoid(::java::awt::image::renderable::RenderableImage, ::java::awt::geom::AffineTransform)>("drawRenderableImage"), //
		jMethod<::jvoid(::java::awt::image::RenderedImage, ::java::awt::geom::AffineTransform)>("drawRenderedImage"), //
		jMethod<::jvoid(::java::lang::String, ::jfloat, ::jfloat)>("drawString"), //
		jMethod<::jvoid(::java::lang::String, ::jint, ::jint)>("drawString"), //
		jMethod<::jvoid(::java::text::AttributedCharacterIterator, ::jfloat, ::jfloat)>("drawString"), //
		jMethod<::jvoid(::java::text::AttributedCharacterIterator, ::jint, ::jint)>("drawString"), //
		jMethod<::jvoid(::java::awt::Shape)>("fill"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jboolean)>("fill3DRect"), //
		jMethod<::java::awt::Color()>("getBackground"), //
		jMethod<::java::awt::Composite()>("getComposite"), //
		jMethod<::java::awt::GraphicsConfiguration()>("getDeviceConfiguration"), //
		jMethod<::java::awt::font::FontRenderContext()>("getFontRenderContext"), //
		jMethod<::java::awt::Paint()>("getPaint"), //
		jMethod<::java::lang::Object(::java::awt::RenderingHints$Key)>("getRenderingHint"), //
		jMethod<::java::awt::RenderingHints()>("getRenderingHints"), //
		jMethod<::java::awt::Stroke()>("getStroke"), //
		jMethod<::java::awt::geom::AffineTransform()>("getTransform"), //
		jMethod<::jboolean(::java::awt::Rectangle, ::java::awt::Shape, ::jboolean)>("hit"), //
		jMethod<::jvoid(::jdouble)>("rotate"), //
		jMethod<::jvoid(::jdouble, ::jdouble, ::jdouble)>("rotate"), //
		jMethod<::jvoid(::jdouble, ::jdouble)>("scale"), //
		jMethod<::jvoid(::java::awt::Color)>("setBackground"), //
		jMethod<::jvoid(::java::awt::Composite)>("setComposite"), //
		jMethod<::jvoid(::java::awt::Paint)>("setPaint"), //
		jMethod<::jvoid(::java::awt::RenderingHints$Key, ::java::lang::Object)>("setRenderingHint"), //
		jMethod<::jvoid(::java::util::Map)>("setRenderingHints"), //
		jMethod<::jvoid(::java::awt::Stroke)>("setStroke"), //
		jMethod<::jvoid(::java::awt::geom::AffineTransform)>("setTransform"), //
		jMethod<::jvoid(::jdouble, ::jdouble)>("shear"), //
		jMethod<::jvoid(::java::awt::geom::AffineTransform)>("transform"), //
		jMethod<::jvoid(::jdouble, ::jdouble)>("translate"), //
		jMethod<::jvoid(::jint, ::jint)>("translate"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addRenderingHints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addRenderingHints")] != -1);
		return call<R>("addRenderingHints", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clip(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clip")] != -1);
		return call<R>("clip", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto draw(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("draw")] != -1);
		return call<R>("draw", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto draw3DRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("draw3DRect")] != -1);
		return call<R>("draw3DRect", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawGlyphVector(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("drawGlyphVector")] != -1);
		return call<R>("drawGlyphVector", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto drawImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("drawImage")] != -1);
		return call<R>("drawImage", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawRenderableImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("drawRenderableImage")] != -1);
		return call<R>("drawRenderableImage", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawRenderedImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("drawRenderedImage")] != -1);
		return call<R>("drawRenderedImage", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("drawString")] != -1);
		return call<R>("drawString", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fill(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("fill")] != -1);
		return call<R>("fill", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fill3DRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("fill3DRect")] != -1);
		return call<R>("fill3DRect", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBackground")] != -1);
		return call<R>("getBackground", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Composite, typename... Args>
	auto getComposite(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getComposite")] != -1);
		return call<R>("getComposite", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::GraphicsConfiguration, typename... Args>
	auto getDeviceConfiguration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDeviceConfiguration")] != -1);
		return call<R>("getDeviceConfiguration", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::font::FontRenderContext, typename... Args>
	auto getFontRenderContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFontRenderContext")] != -1);
		return call<R>("getFontRenderContext", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Paint, typename... Args>
	auto getPaint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPaint")] != -1);
		return call<R>("getPaint", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getRenderingHint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRenderingHint")] != -1);
		return call<R>("getRenderingHint", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::RenderingHints, typename... Args>
	auto getRenderingHints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRenderingHints")] != -1);
		return call<R>("getRenderingHints", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Stroke, typename... Args>
	auto getStroke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getStroke")] != -1);
		return call<R>("getStroke", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::AffineTransform, typename... Args>
	auto getTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTransform")] != -1);
		return call<R>("getTransform", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hit")] != -1);
		return call<R>("hit", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto rotate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("rotate")] != -1);
		return call<R>("rotate", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto scale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("scale")] != -1);
		return call<R>("scale", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBackground")] != -1);
		return call<R>("setBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setComposite(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setComposite")] != -1);
		return call<R>("setComposite", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPaint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPaint")] != -1);
		return call<R>("setPaint", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRenderingHint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setRenderingHint")] != -1);
		return call<R>("setRenderingHint", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRenderingHints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setRenderingHints")] != -1);
		return call<R>("setRenderingHints", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setStroke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setStroke")] != -1);
		return call<R>("setStroke", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setTransform")] != -1);
		return call<R>("setTransform", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto shear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("shear")] != -1);
		return call<R>("shear", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto transform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("transform")] != -1);
		return call<R>("transform", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto translate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("translate")] != -1);
		return call<R>("translate", forward<Args>(args)...);
	}

};

#endif
