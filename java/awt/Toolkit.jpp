#ifndef java_awt_Toolkit_HPP
#define java_awt_Toolkit_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::Toolkit : public jObject<::java::awt::Toolkit, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "Toolkit";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::awt::event::AWTEventListener, ::jlong)>("addAWTEventListener"), //
		jMethod<::jvoid(::java::lang::String, ::java::beans::PropertyChangeListener)>("addPropertyChangeListener"), //
		jMethod<::jboolean()>("areExtraMouseButtonsEnabled"), //
		jMethod<::jvoid()>("beep"), //
		jMethod<::jint(::java::awt::Image, ::jint, ::jint, ::java::awt::image::ImageObserver)>("checkImage"), //
		jMethod<::java::awt::Cursor(::java::awt::Image, ::java::awt::Point, ::java::lang::String)>("createCustomCursor"), //
		jMethod<::java::awt::dnd::DragGestureRecognizer(::java::lang::Class, ::java::awt::dnd::DragSource, ::java::awt::Component, ::jint, ::java::awt::dnd::DragGestureListener)>("createDragGestureRecognizer"), //
		jMethod<::java::awt::dnd::peer::DragSourceContextPeer(::java::awt::dnd::DragGestureEvent)>("createDragSourceContextPeer"), //
		jMethod<::java::awt::Image(::java::awt::image::ImageProducer)>("createImage"), //
		jMethod<::java::awt::Image(::java::lang::String)>("createImage"), //
		jMethod<::java::awt::Image(::java::net::URL)>("createImage"), //
		jMethod<::java::awt::Image(::jbyte *)>("createImage"), //
		jMethod<::java::awt::Image(::jbyte *, ::jint, ::jint)>("createImage"), //
		jMethod<::java::awt::event::AWTEventListener *()>("getAWTEventListeners"), //
		jMethod<::java::awt::event::AWTEventListener *(::jlong)>("getAWTEventListeners"), //
		jMethod<::java::awt::Dimension(::jint, ::jint)>("getBestCursorSize"), //
		jMethod<::java::awt::image::ColorModel()>("getColorModel"), //
		jMethod<::java::awt::Toolkit()>("getDefaultToolkit"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getDesktopProperty"), //
		jMethod<::java::awt::Image(::java::lang::String)>("getImage"), //
		jMethod<::java::awt::Image(::java::net::URL)>("getImage"), //
		jMethod<::jboolean(::jint)>("getLockingKeyState"), //
		jMethod<::jint()>("getMaximumCursorColors"), //
		jMethod<::jint()>("getMenuShortcutKeyMask"), //
		jMethod<::java::awt::PrintJob(::java::awt::Frame, ::java::lang::String, ::java::awt::JobAttributes, ::java::awt::PageAttributes)>("getPrintJob"), //
		jMethod<::java::awt::PrintJob(::java::awt::Frame, ::java::lang::String, ::java::util::Properties)>("getPrintJob"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::lang::String)>("getProperty"), //
		jMethod<::java::beans::PropertyChangeListener *()>("getPropertyChangeListeners"), //
		jMethod<::java::beans::PropertyChangeListener *(::java::lang::String)>("getPropertyChangeListeners"), //
		jMethod<::java::awt::Insets(::java::awt::GraphicsConfiguration)>("getScreenInsets"), //
		jMethod<::jint()>("getScreenResolution"), //
		jMethod<::java::awt::Dimension()>("getScreenSize"), //
		jMethod<::java::awt::datatransfer::Clipboard()>("getSystemClipboard"), //
		jMethod<::java::awt::EventQueue()>("getSystemEventQueue"), //
		jMethod<::java::awt::datatransfer::Clipboard()>("getSystemSelection"), //
		jMethod<::jboolean()>("isAlwaysOnTopSupported"), //
		jMethod<::jboolean()>("isDynamicLayoutActive"), //
		jMethod<::jboolean(::jint)>("isFrameStateSupported"), //
		jMethod<::jboolean(::java::awt::Dialog$ModalExclusionType)>("isModalExclusionTypeSupported"), //
		jMethod<::jboolean(::java::awt::Dialog$ModalityType)>("isModalityTypeSupported"), //
		jMethod<::java::util::Map(::java::awt::im::InputMethodHighlight)>("mapInputMethodHighlight"), //
		jMethod<::jboolean(::java::awt::Image, ::jint, ::jint, ::java::awt::image::ImageObserver)>("prepareImage"), //
		jMethod<::jvoid(::java::awt::event::AWTEventListener)>("removeAWTEventListener"), //
		jMethod<::jvoid(::java::lang::String, ::java::beans::PropertyChangeListener)>("removePropertyChangeListener"), //
		jMethod<::jvoid(::jboolean)>("setDynamicLayout"), //
		jMethod<::jvoid(::jint, ::jboolean)>("setLockingKeyState"), //
		jMethod<::jvoid()>("sync"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addAWTEventListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addAWTEventListener")] != -1);
		return call<R>("addAWTEventListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addPropertyChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addPropertyChangeListener")] != -1);
		return call<R>("addPropertyChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto areExtraMouseButtonsEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("areExtraMouseButtonsEnabled")] != -1);
		return call<R>("areExtraMouseButtonsEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto beep(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("beep")] != -1);
		return call<R>("beep", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto checkImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkImage")] != -1);
		return call<R>("checkImage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Cursor, typename... Args>
	auto createCustomCursor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createCustomCursor")] != -1);
		return call<R>("createCustomCursor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::dnd::DragGestureRecognizer, typename... Args>
	auto createDragGestureRecognizer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createDragGestureRecognizer")] != -1);
		return call<R>("createDragGestureRecognizer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::dnd::peer::DragSourceContextPeer, typename... Args>
	auto createDragSourceContextPeer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createDragSourceContextPeer")] != -1);
		return call<R>("createDragSourceContextPeer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Image, typename... Args>
	auto createImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createImage")] != -1);
		return call<R>("createImage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::AWTEventListener *, typename... Args>
	auto getAWTEventListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAWTEventListeners")] != -1);
		return call<R>("getAWTEventListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getBestCursorSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBestCursorSize")] != -1);
		return call<R>("getBestCursorSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::ColorModel, typename... Args>
	auto getColorModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColorModel")] != -1);
		return call<R>("getColorModel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Toolkit, typename... Args>
	static auto getDefaultToolkit(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultToolkit")] != -1);
		return scall<R>("getDefaultToolkit", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getDesktopProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDesktopProperty")] != -1);
		return call<R>("getDesktopProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Image, typename... Args>
	auto getImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getImage")] != -1);
		return call<R>("getImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getLockingKeyState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLockingKeyState")] != -1);
		return call<R>("getLockingKeyState", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaximumCursorColors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaximumCursorColors")] != -1);
		return call<R>("getMaximumCursorColors", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMenuShortcutKeyMask(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMenuShortcutKeyMask")] != -1);
		return call<R>("getMenuShortcutKeyMask", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::PrintJob, typename... Args>
	auto getPrintJob(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrintJob")] != -1);
		return call<R>("getPrintJob", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getProperty(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProperty")] != -1);
		return scall<R>("getProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::java::beans::PropertyChangeListener *, typename... Args>
	auto getPropertyChangeListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPropertyChangeListeners")] != -1);
		return call<R>("getPropertyChangeListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Insets, typename... Args>
	auto getScreenInsets(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScreenInsets")] != -1);
		return call<R>("getScreenInsets", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getScreenResolution(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScreenResolution")] != -1);
		return call<R>("getScreenResolution", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getScreenSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScreenSize")] != -1);
		return call<R>("getScreenSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::datatransfer::Clipboard, typename... Args>
	auto getSystemClipboard(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSystemClipboard")] != -1);
		return call<R>("getSystemClipboard", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::EventQueue, typename... Args>
	auto getSystemEventQueue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSystemEventQueue")] != -1);
		return call<R>("getSystemEventQueue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::datatransfer::Clipboard, typename... Args>
	auto getSystemSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSystemSelection")] != -1);
		return call<R>("getSystemSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAlwaysOnTopSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAlwaysOnTopSupported")] != -1);
		return call<R>("isAlwaysOnTopSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDynamicLayoutActive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDynamicLayoutActive")] != -1);
		return call<R>("isDynamicLayoutActive", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFrameStateSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFrameStateSupported")] != -1);
		return call<R>("isFrameStateSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isModalExclusionTypeSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isModalExclusionTypeSupported")] != -1);
		return call<R>("isModalExclusionTypeSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isModalityTypeSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isModalityTypeSupported")] != -1);
		return call<R>("isModalityTypeSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto mapInputMethodHighlight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mapInputMethodHighlight")] != -1);
		return call<R>("mapInputMethodHighlight", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto prepareImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("prepareImage")] != -1);
		return call<R>("prepareImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAWTEventListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAWTEventListener")] != -1);
		return call<R>("removeAWTEventListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removePropertyChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removePropertyChangeListener")] != -1);
		return call<R>("removePropertyChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDynamicLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDynamicLayout")] != -1);
		return call<R>("setDynamicLayout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLockingKeyState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLockingKeyState")] != -1);
		return call<R>("setLockingKeyState", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto sync(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sync")] != -1);
		return call<R>("sync", std::forward<Args>(args)...);
	}

};

#endif
