#ifndef java_awt_Button_HPP
#define java_awt_Button_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::Button : public jObject<::java::awt::Button, ::java::awt::Component> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "Button";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jMethod<::jvoid(::java::awt::event::ActionListener)>("addActionListener"), //
		jMethod<::jvoid()>("addNotify"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::java::lang::String()>("getActionCommand"), //
		jMethod<::java::awt::event::ActionListener *()>("getActionListeners"), //
		jMethod<::java::lang::String()>("getLabel"), //
		jMethod<::java::util::EventListener *(::java::lang::Class)>("getListeners"), //
		jMethod<::jvoid(::java::awt::event::ActionListener)>("removeActionListener"), //
		jMethod<::jvoid(::java::lang::String)>("setActionCommand"), //
		jMethod<::jvoid(::java::lang::String)>("setLabel"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addActionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addActionListener")] != -1);
		return call<R>("addActionListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addNotify")] != -1);
		return call<R>("addNotify", forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getActionCommand(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getActionCommand")] != -1);
		return call<R>("getActionCommand", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::ActionListener *, typename... Args>
	auto getActionListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getActionListeners")] != -1);
		return call<R>("getActionListeners", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLabel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLabel")] != -1);
		return call<R>("getLabel", forward<Args>(args)...);
	}

	template<typename R = ::java::util::EventListener *, typename... Args>
	auto getListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getListeners")] != -1);
		return call<R>("getListeners", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeActionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeActionListener")] != -1);
		return call<R>("removeActionListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setActionCommand(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setActionCommand")] != -1);
		return call<R>("setActionCommand", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLabel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLabel")] != -1);
		return call<R>("setLabel", forward<Args>(args)...);
	}

};

#endif
