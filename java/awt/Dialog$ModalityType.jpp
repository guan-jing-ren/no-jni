#ifndef java_awt_Dialog$ModalityType_HPP
#define java_awt_Dialog$ModalityType_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::Dialog$ModalityType : public jObject<::java::awt::Dialog$ModalityType, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "Dialog$ModalityType";

	constexpr static Enume field_signatures{
		jField<::java::awt::Dialog$ModalityType>("APPLICATION_MODAL"), //
		jField<::java::awt::Dialog$ModalityType>("DOCUMENT_MODAL"), //
		jField<::java::awt::Dialog$ModalityType>("MODELESS"), //
		jField<::java::awt::Dialog$ModalityType>("TOOLKIT_MODAL"), //
	};

	template<typename F = ::java::awt::Dialog$ModalityType>
	static auto APPLICATION_MODAL() {
		static_assert(field_signatures[jField<F>("APPLICATION_MODAL")] != -1);
		return sat<F>("APPLICATION_MODAL");
	}

	template<typename F = ::java::awt::Dialog$ModalityType>
	static auto DOCUMENT_MODAL() {
		static_assert(field_signatures[jField<F>("DOCUMENT_MODAL")] != -1);
		return sat<F>("DOCUMENT_MODAL");
	}

	template<typename F = ::java::awt::Dialog$ModalityType>
	static auto MODELESS() {
		static_assert(field_signatures[jField<F>("MODELESS")] != -1);
		return sat<F>("MODELESS");
	}

	template<typename F = ::java::awt::Dialog$ModalityType>
	static auto TOOLKIT_MODAL() {
		static_assert(field_signatures[jField<F>("TOOLKIT_MODAL")] != -1);
		return sat<F>("TOOLKIT_MODAL");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::awt::Dialog$ModalityType(::java::lang::String)>("valueOf"), //
		jMethod<::java::awt::Dialog$ModalityType *()>("values"), //
	};

	template<typename R = ::java::awt::Dialog$ModalityType, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dialog$ModalityType *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
