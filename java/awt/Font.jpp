#ifndef java_awt_Font_HPP
#define java_awt_Font_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::Font : public jObject<::java::awt::Font, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "Font";

	constexpr static Enume field_signatures{
		jField<::jint>("BOLD"), //
		jField<::jint>("CENTER_BASELINE"), //
		jField<::java::lang::String>("DIALOG"), //
		jField<::java::lang::String>("DIALOG_INPUT"), //
		jField<::jint>("HANGING_BASELINE"), //
		jField<::jint>("ITALIC"), //
		jField<::jint>("LAYOUT_LEFT_TO_RIGHT"), //
		jField<::jint>("LAYOUT_NO_LIMIT_CONTEXT"), //
		jField<::jint>("LAYOUT_NO_START_CONTEXT"), //
		jField<::jint>("LAYOUT_RIGHT_TO_LEFT"), //
		jField<::java::lang::String>("MONOSPACED"), //
		jField<::jint>("PLAIN"), //
		jField<::jint>("ROMAN_BASELINE"), //
		jField<::java::lang::String>("SANS_SERIF"), //
		jField<::java::lang::String>("SERIF"), //
		jField<::jint>("TRUETYPE_FONT"), //
		jField<::jint>("TYPE1_FONT"), //
	};

	template<typename F = ::jint>
	static auto BOLD() {
		static_assert(field_signatures[jField<F>("BOLD")] != -1);
		return sat<F>("BOLD");
	}

	template<typename F = ::jint>
	static auto CENTER_BASELINE() {
		static_assert(field_signatures[jField<F>("CENTER_BASELINE")] != -1);
		return sat<F>("CENTER_BASELINE");
	}

	template<typename F = ::java::lang::String>
	static auto DIALOG() {
		static_assert(field_signatures[jField<F>("DIALOG")] != -1);
		return sat<F>("DIALOG");
	}

	template<typename F = ::java::lang::String>
	static auto DIALOG_INPUT() {
		static_assert(field_signatures[jField<F>("DIALOG_INPUT")] != -1);
		return sat<F>("DIALOG_INPUT");
	}

	template<typename F = ::jint>
	static auto HANGING_BASELINE() {
		static_assert(field_signatures[jField<F>("HANGING_BASELINE")] != -1);
		return sat<F>("HANGING_BASELINE");
	}

	template<typename F = ::jint>
	static auto ITALIC() {
		static_assert(field_signatures[jField<F>("ITALIC")] != -1);
		return sat<F>("ITALIC");
	}

	template<typename F = ::jint>
	static auto LAYOUT_LEFT_TO_RIGHT() {
		static_assert(field_signatures[jField<F>("LAYOUT_LEFT_TO_RIGHT")] != -1);
		return sat<F>("LAYOUT_LEFT_TO_RIGHT");
	}

	template<typename F = ::jint>
	static auto LAYOUT_NO_LIMIT_CONTEXT() {
		static_assert(field_signatures[jField<F>("LAYOUT_NO_LIMIT_CONTEXT")] != -1);
		return sat<F>("LAYOUT_NO_LIMIT_CONTEXT");
	}

	template<typename F = ::jint>
	static auto LAYOUT_NO_START_CONTEXT() {
		static_assert(field_signatures[jField<F>("LAYOUT_NO_START_CONTEXT")] != -1);
		return sat<F>("LAYOUT_NO_START_CONTEXT");
	}

	template<typename F = ::jint>
	static auto LAYOUT_RIGHT_TO_LEFT() {
		static_assert(field_signatures[jField<F>("LAYOUT_RIGHT_TO_LEFT")] != -1);
		return sat<F>("LAYOUT_RIGHT_TO_LEFT");
	}

	template<typename F = ::java::lang::String>
	static auto MONOSPACED() {
		static_assert(field_signatures[jField<F>("MONOSPACED")] != -1);
		return sat<F>("MONOSPACED");
	}

	template<typename F = ::jint>
	static auto PLAIN() {
		static_assert(field_signatures[jField<F>("PLAIN")] != -1);
		return sat<F>("PLAIN");
	}

	template<typename F = ::jint>
	static auto ROMAN_BASELINE() {
		static_assert(field_signatures[jField<F>("ROMAN_BASELINE")] != -1);
		return sat<F>("ROMAN_BASELINE");
	}

	template<typename F = ::java::lang::String>
	static auto SANS_SERIF() {
		static_assert(field_signatures[jField<F>("SANS_SERIF")] != -1);
		return sat<F>("SANS_SERIF");
	}

	template<typename F = ::java::lang::String>
	static auto SERIF() {
		static_assert(field_signatures[jField<F>("SERIF")] != -1);
		return sat<F>("SERIF");
	}

	template<typename F = ::jint>
	static auto TRUETYPE_FONT() {
		static_assert(field_signatures[jField<F>("TRUETYPE_FONT")] != -1);
		return sat<F>("TRUETYPE_FONT");
	}

	template<typename F = ::jint>
	static auto TYPE1_FONT() {
		static_assert(field_signatures[jField<F>("TYPE1_FONT")] != -1);
		return sat<F>("TYPE1_FONT");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::java::util::Map)>(), //
		jMethod<::jboolean(::jchar)>("canDisplay"), //
		jMethod<::jboolean(::jint)>("canDisplay"), //
		jMethod<::jint(::java::lang::String)>("canDisplayUpTo"), //
		jMethod<::jint(::java::text::CharacterIterator, ::jint, ::jint)>("canDisplayUpTo"), //
		jMethod<::jint(::jchar *, ::jint, ::jint)>("canDisplayUpTo"), //
		jMethod<::java::awt::Font(::jint, ::java::io::File)>("createFont"), //
		jMethod<::java::awt::Font(::jint, ::java::io::InputStream)>("createFont"), //
		jMethod<::java::awt::font::GlyphVector(::java::awt::font::FontRenderContext, ::java::lang::String)>("createGlyphVector"), //
		jMethod<::java::awt::font::GlyphVector(::java::awt::font::FontRenderContext, ::java::text::CharacterIterator)>("createGlyphVector"), //
		jMethod<::java::awt::font::GlyphVector(::java::awt::font::FontRenderContext, ::jchar *)>("createGlyphVector"), //
		jMethod<::java::awt::font::GlyphVector(::java::awt::font::FontRenderContext, ::jint *)>("createGlyphVector"), //
		jMethod<::java::awt::Font(::java::lang::String)>("decode"), //
		jMethod<::java::awt::Font(::jfloat)>("deriveFont"), //
		jMethod<::java::awt::Font(::jint)>("deriveFont"), //
		jMethod<::java::awt::Font(::jint, ::jfloat)>("deriveFont"), //
		jMethod<::java::awt::Font(::jint, ::java::awt::geom::AffineTransform)>("deriveFont"), //
		jMethod<::java::awt::Font(::java::awt::geom::AffineTransform)>("deriveFont"), //
		jMethod<::java::awt::Font(::java::util::Map)>("deriveFont"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::util::Map()>("getAttributes"), //
		jMethod<::java::text::AttributedCharacterIterator$Attribute *()>("getAvailableAttributes"), //
		jMethod<::jbyte(::jchar)>("getBaselineFor"), //
		jMethod<::java::lang::String()>("getFamily"), //
		jMethod<::java::lang::String(::java::util::Locale)>("getFamily"), //
		jMethod<::java::awt::Font(::java::lang::String)>("getFont"), //
		jMethod<::java::awt::Font(::java::lang::String, ::java::awt::Font)>("getFont"), //
		jMethod<::java::awt::Font(::java::util::Map)>("getFont"), //
		jMethod<::java::lang::String()>("getFontName"), //
		jMethod<::java::lang::String(::java::util::Locale)>("getFontName"), //
		jMethod<::jfloat()>("getItalicAngle"), //
		jMethod<::java::awt::font::LineMetrics(::java::lang::String, ::jint, ::jint, ::java::awt::font::FontRenderContext)>("getLineMetrics"), //
		jMethod<::java::awt::font::LineMetrics(::java::lang::String, ::java::awt::font::FontRenderContext)>("getLineMetrics"), //
		jMethod<::java::awt::font::LineMetrics(::java::text::CharacterIterator, ::jint, ::jint, ::java::awt::font::FontRenderContext)>("getLineMetrics"), //
		jMethod<::java::awt::font::LineMetrics(::jchar *, ::jint, ::jint, ::java::awt::font::FontRenderContext)>("getLineMetrics"), //
		jMethod<::java::awt::geom::Rectangle2D(::java::awt::font::FontRenderContext)>("getMaxCharBounds"), //
		jMethod<::jint()>("getMissingGlyphCode"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jint()>("getNumGlyphs"), //
		jMethod<::java::lang::String()>("getPSName"), //
		jMethod<::java::awt::peer::FontPeer()>("getPeer"), //
		jMethod<::jint()>("getSize"), //
		jMethod<::jfloat()>("getSize2D"), //
		jMethod<::java::awt::geom::Rectangle2D(::java::lang::String, ::jint, ::jint, ::java::awt::font::FontRenderContext)>("getStringBounds"), //
		jMethod<::java::awt::geom::Rectangle2D(::java::lang::String, ::java::awt::font::FontRenderContext)>("getStringBounds"), //
		jMethod<::java::awt::geom::Rectangle2D(::java::text::CharacterIterator, ::jint, ::jint, ::java::awt::font::FontRenderContext)>("getStringBounds"), //
		jMethod<::java::awt::geom::Rectangle2D(::jchar *, ::jint, ::jint, ::java::awt::font::FontRenderContext)>("getStringBounds"), //
		jMethod<::jint()>("getStyle"), //
		jMethod<::java::awt::geom::AffineTransform()>("getTransform"), //
		jMethod<::jboolean()>("hasLayoutAttributes"), //
		jMethod<::jboolean()>("hasUniformLineMetrics"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isBold"), //
		jMethod<::jboolean()>("isItalic"), //
		jMethod<::jboolean()>("isPlain"), //
		jMethod<::jboolean()>("isTransformed"), //
		jMethod<::java::awt::font::GlyphVector(::java::awt::font::FontRenderContext, ::jchar *, ::jint, ::jint, ::jint)>("layoutGlyphVector"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto canDisplay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("canDisplay")] != -1);
		return call<R>("canDisplay", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto canDisplayUpTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("canDisplayUpTo")] != -1);
		return call<R>("canDisplayUpTo", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Font, typename... Args>
	static auto createFont(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createFont")] != -1);
		return scall<R>("createFont", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::font::GlyphVector, typename... Args>
	auto createGlyphVector(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createGlyphVector")] != -1);
		return call<R>("createGlyphVector", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Font, typename... Args>
	static auto decode(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("decode")] != -1);
		return scall<R>("decode", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Font, typename... Args>
	auto deriveFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("deriveFont")] != -1);
		return call<R>("deriveFont", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttributes")] != -1);
		return call<R>("getAttributes", forward<Args>(args)...);
	}

	template<typename R = ::java::text::AttributedCharacterIterator$Attribute *, typename... Args>
	auto getAvailableAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAvailableAttributes")] != -1);
		return call<R>("getAvailableAttributes", forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto getBaselineFor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBaselineFor")] != -1);
		return call<R>("getBaselineFor", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFamily(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFamily")] != -1);
		return call<R>("getFamily", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Font, typename... Args>
	static auto getFont(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFont")] != -1);
		return scall<R>("getFont", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFontName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFontName")] != -1);
		return call<R>("getFontName", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getItalicAngle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getItalicAngle")] != -1);
		return call<R>("getItalicAngle", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::font::LineMetrics, typename... Args>
	auto getLineMetrics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLineMetrics")] != -1);
		return call<R>("getLineMetrics", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Rectangle2D, typename... Args>
	auto getMaxCharBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaxCharBounds")] != -1);
		return call<R>("getMaxCharBounds", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMissingGlyphCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMissingGlyphCode")] != -1);
		return call<R>("getMissingGlyphCode", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumGlyphs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNumGlyphs")] != -1);
		return call<R>("getNumGlyphs", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPSName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPSName")] != -1);
		return call<R>("getPSName", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::peer::FontPeer, typename... Args>
	auto getPeer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPeer")] != -1);
		return call<R>("getPeer", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSize")] != -1);
		return call<R>("getSize", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getSize2D(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSize2D")] != -1);
		return call<R>("getSize2D", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Rectangle2D, typename... Args>
	auto getStringBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getStringBounds")] != -1);
		return call<R>("getStringBounds", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getStyle")] != -1);
		return call<R>("getStyle", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::AffineTransform, typename... Args>
	auto getTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTransform")] != -1);
		return call<R>("getTransform", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasLayoutAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hasLayoutAttributes")] != -1);
		return call<R>("hasLayoutAttributes", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasUniformLineMetrics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hasUniformLineMetrics")] != -1);
		return call<R>("hasUniformLineMetrics", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isBold(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isBold")] != -1);
		return call<R>("isBold", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isItalic(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isItalic")] != -1);
		return call<R>("isItalic", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPlain(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isPlain")] != -1);
		return call<R>("isPlain", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isTransformed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isTransformed")] != -1);
		return call<R>("isTransformed", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::font::GlyphVector, typename... Args>
	auto layoutGlyphVector(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("layoutGlyphVector")] != -1);
		return call<R>("layoutGlyphVector", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
