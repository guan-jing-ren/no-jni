#ifndef java_awt_List_HPP
#define java_awt_List_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::List : public jObject<::java::awt::List, ::java::awt::Component> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "List";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint)>(), //
		jConstructor<::jvoid(::jint, ::jboolean)>(), //
		jMethod<::jvoid(::java::lang::String)>("add"), //
		jMethod<::jvoid(::java::lang::String, ::jint)>("add"), //
		jMethod<::jvoid(::java::awt::event::ActionListener)>("addActionListener"), //
		jMethod<::jvoid(::java::lang::String)>("addItem"), //
		jMethod<::jvoid(::java::lang::String, ::jint)>("addItem"), //
		jMethod<::jvoid(::java::awt::event::ItemListener)>("addItemListener"), //
		jMethod<::jvoid()>("addNotify"), //
		jMethod<::jboolean()>("allowsMultipleSelections"), //
		jMethod<::jvoid()>("clear"), //
		jMethod<::jint()>("countItems"), //
		jMethod<::jvoid(::jint)>("delItem"), //
		jMethod<::jvoid(::jint, ::jint)>("delItems"), //
		jMethod<::jvoid(::jint)>("deselect"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::java::awt::event::ActionListener *()>("getActionListeners"), //
		jMethod<::java::lang::String(::jint)>("getItem"), //
		jMethod<::jint()>("getItemCount"), //
		jMethod<::java::awt::event::ItemListener *()>("getItemListeners"), //
		jMethod<::java::lang::String *()>("getItems"), //
		jMethod<::java::util::EventListener *(::java::lang::Class)>("getListeners"), //
		jMethod<::java::awt::Dimension()>("getMinimumSize"), //
		jMethod<::java::awt::Dimension(::jint)>("getMinimumSize"), //
		jMethod<::java::awt::Dimension()>("getPreferredSize"), //
		jMethod<::java::awt::Dimension(::jint)>("getPreferredSize"), //
		jMethod<::jint()>("getRows"), //
		jMethod<::jint()>("getSelectedIndex"), //
		jMethod<::jint *()>("getSelectedIndexes"), //
		jMethod<::java::lang::String()>("getSelectedItem"), //
		jMethod<::java::lang::String *()>("getSelectedItems"), //
		jMethod<::java::lang::Object *()>("getSelectedObjects"), //
		jMethod<::jint()>("getVisibleIndex"), //
		jMethod<::jboolean(::jint)>("isIndexSelected"), //
		jMethod<::jboolean()>("isMultipleMode"), //
		jMethod<::jboolean(::jint)>("isSelected"), //
		jMethod<::jvoid(::jint)>("makeVisible"), //
		jMethod<::java::awt::Dimension()>("minimumSize"), //
		jMethod<::java::awt::Dimension(::jint)>("minimumSize"), //
		jMethod<::java::awt::Dimension()>("preferredSize"), //
		jMethod<::java::awt::Dimension(::jint)>("preferredSize"), //
		jMethod<::jvoid(::jint)>("remove"), //
		jMethod<::jvoid(::java::lang::String)>("remove"), //
		jMethod<::jvoid(::java::awt::event::ActionListener)>("removeActionListener"), //
		jMethod<::jvoid()>("removeAll"), //
		jMethod<::jvoid(::java::awt::event::ItemListener)>("removeItemListener"), //
		jMethod<::jvoid()>("removeNotify"), //
		jMethod<::jvoid(::java::lang::String, ::jint)>("replaceItem"), //
		jMethod<::jvoid(::jint)>("select"), //
		jMethod<::jvoid(::jboolean)>("setMultipleMode"), //
		jMethod<::jvoid(::jboolean)>("setMultipleSelections"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addActionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addActionListener")] != -1);
		return call<R>("addActionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addItem")] != -1);
		return call<R>("addItem", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addItemListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addItemListener")] != -1);
		return call<R>("addItemListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addNotify")] != -1);
		return call<R>("addNotify", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto allowsMultipleSelections(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("allowsMultipleSelections")] != -1);
		return call<R>("allowsMultipleSelections", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto countItems(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("countItems")] != -1);
		return call<R>("countItems", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto delItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("delItem")] != -1);
		return call<R>("delItem", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto delItems(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("delItems")] != -1);
		return call<R>("delItems", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deselect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deselect")] != -1);
		return call<R>("deselect", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::ActionListener *, typename... Args>
	auto getActionListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getActionListeners")] != -1);
		return call<R>("getActionListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItem")] != -1);
		return call<R>("getItem", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getItemCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItemCount")] != -1);
		return call<R>("getItemCount", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::ItemListener *, typename... Args>
	auto getItemListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItemListeners")] != -1);
		return call<R>("getItemListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getItems(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItems")] != -1);
		return call<R>("getItems", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::EventListener *, typename... Args>
	auto getListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getListeners")] != -1);
		return call<R>("getListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinimumSize")] != -1);
		return call<R>("getMinimumSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreferredSize")] != -1);
		return call<R>("getPreferredSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRows(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRows")] != -1);
		return call<R>("getRows", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSelectedIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedIndex")] != -1);
		return call<R>("getSelectedIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getSelectedIndexes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedIndexes")] != -1);
		return call<R>("getSelectedIndexes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSelectedItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedItem")] != -1);
		return call<R>("getSelectedItem", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getSelectedItems(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedItems")] != -1);
		return call<R>("getSelectedItems", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object *, typename... Args>
	auto getSelectedObjects(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedObjects")] != -1);
		return call<R>("getSelectedObjects", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getVisibleIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVisibleIndex")] != -1);
		return call<R>("getVisibleIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isIndexSelected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isIndexSelected")] != -1);
		return call<R>("isIndexSelected", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isMultipleMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isMultipleMode")] != -1);
		return call<R>("isMultipleMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSelected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSelected")] != -1);
		return call<R>("isSelected", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto makeVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeVisible")] != -1);
		return call<R>("makeVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto minimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("minimumSize")] != -1);
		return call<R>("minimumSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto preferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("preferredSize")] != -1);
		return call<R>("preferredSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeActionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeActionListener")] != -1);
		return call<R>("removeActionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAll")] != -1);
		return call<R>("removeAll", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeItemListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeItemListener")] != -1);
		return call<R>("removeItemListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeNotify")] != -1);
		return call<R>("removeNotify", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto replaceItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("replaceItem")] != -1);
		return call<R>("replaceItem", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto select(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("select")] != -1);
		return call<R>("select", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMultipleMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMultipleMode")] != -1);
		return call<R>("setMultipleMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMultipleSelections(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMultipleSelections")] != -1);
		return call<R>("setMultipleSelections", std::forward<Args>(args)...);
	}

};

#endif
