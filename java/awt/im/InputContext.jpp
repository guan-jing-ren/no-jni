#ifndef java_awt_im_InputContext_HPP
#define java_awt_im_InputContext_HPP

#include "../../../jfwd_decl.hpp"

class ::java::awt::im::InputContext : public jObject<::java::awt::im::InputContext, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_im / "InputContext";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::awt::AWTEvent)>("dispatchEvent"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jvoid()>("endComposition"), //
		jMethod<::java::lang::Object()>("getInputMethodControlObject"), //
		jMethod<::java::awt::im::InputContext()>("getInstance"), //
		jMethod<::java::util::Locale()>("getLocale"), //
		jMethod<::jboolean()>("isCompositionEnabled"), //
		jMethod<::jvoid()>("reconvert"), //
		jMethod<::jvoid(::java::awt::Component)>("removeNotify"), //
		jMethod<::jboolean(::java::util::Locale)>("selectInputMethod"), //
		jMethod<::jvoid(::java::lang::Character$Subset *)>("setCharacterSubsets"), //
		jMethod<::jvoid(::jboolean)>("setCompositionEnabled"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto dispatchEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("dispatchEvent")] != -1);
		return call<R>("dispatchEvent", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endComposition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("endComposition")] != -1);
		return call<R>("endComposition", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getInputMethodControlObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInputMethodControlObject")] != -1);
		return call<R>("getInputMethodControlObject", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::im::InputContext, typename... Args>
	static auto getInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInstance")] != -1);
		return scall<R>("getInstance", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale, typename... Args>
	auto getLocale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLocale")] != -1);
		return call<R>("getLocale", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCompositionEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isCompositionEnabled")] != -1);
		return call<R>("isCompositionEnabled", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reconvert(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reconvert")] != -1);
		return call<R>("reconvert", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeNotify")] != -1);
		return call<R>("removeNotify", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto selectInputMethod(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("selectInputMethod")] != -1);
		return call<R>("selectInputMethod", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCharacterSubsets(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCharacterSubsets")] != -1);
		return call<R>("setCharacterSubsets", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCompositionEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCompositionEnabled")] != -1);
		return call<R>("setCompositionEnabled", forward<Args>(args)...);
	}

};

#endif
