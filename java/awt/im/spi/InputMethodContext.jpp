#ifndef java_awt_im_spi_InputMethodContext_HPP
#define java_awt_im_spi_InputMethodContext_HPP

#include "../../../../jfwd_decl.hpp"

class ::java::awt::im::spi::InputMethodContext : public jObject<::java::awt::im::spi::InputMethodContext, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt_im_spi / "InputMethodContext";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::text::AttributedCharacterIterator(::java::text::AttributedCharacterIterator$Attribute *)>("cancelLatestCommittedText"), //
		jMethod<::javax::swing::JFrame(::java::lang::String, ::jboolean)>("createInputMethodJFrame"), //
		jMethod<::java::awt::Window(::java::lang::String, ::jboolean)>("createInputMethodWindow"), //
		jMethod<::jvoid(::jint, ::java::text::AttributedCharacterIterator, ::jint, ::java::awt::font::TextHitInfo, ::java::awt::font::TextHitInfo)>("dispatchInputMethodEvent"), //
		jMethod<::jvoid(::java::awt::im::spi::InputMethod, ::jboolean)>("enableClientWindowNotification"), //
		jMethod<::java::text::AttributedCharacterIterator(::jint, ::jint, ::java::text::AttributedCharacterIterator$Attribute *)>("getCommittedText"), //
		jMethod<::jint()>("getCommittedTextLength"), //
		jMethod<::jint()>("getInsertPositionOffset"), //
		jMethod<::java::awt::font::TextHitInfo(::jint, ::jint)>("getLocationOffset"), //
		jMethod<::java::text::AttributedCharacterIterator(::java::text::AttributedCharacterIterator$Attribute *)>("getSelectedText"), //
		jMethod<::java::awt::Rectangle(::java::awt::font::TextHitInfo)>("getTextLocation"), //
	};

	template<typename R = ::java::text::AttributedCharacterIterator, typename... Args>
	auto cancelLatestCommittedText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cancelLatestCommittedText")] != -1);
		return call<R>("cancelLatestCommittedText", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JFrame, typename... Args>
	auto createInputMethodJFrame(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createInputMethodJFrame")] != -1);
		return call<R>("createInputMethodJFrame", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Window, typename... Args>
	auto createInputMethodWindow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createInputMethodWindow")] != -1);
		return call<R>("createInputMethodWindow", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispatchInputMethodEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispatchInputMethodEvent")] != -1);
		return call<R>("dispatchInputMethodEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto enableClientWindowNotification(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("enableClientWindowNotification")] != -1);
		return call<R>("enableClientWindowNotification", std::forward<Args>(args)...);
	}

	template<typename R = ::java::text::AttributedCharacterIterator, typename... Args>
	auto getCommittedText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCommittedText")] != -1);
		return call<R>("getCommittedText", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCommittedTextLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCommittedTextLength")] != -1);
		return call<R>("getCommittedTextLength", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getInsertPositionOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInsertPositionOffset")] != -1);
		return call<R>("getInsertPositionOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::font::TextHitInfo, typename... Args>
	auto getLocationOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocationOffset")] != -1);
		return call<R>("getLocationOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::java::text::AttributedCharacterIterator, typename... Args>
	auto getSelectedText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedText")] != -1);
		return call<R>("getSelectedText", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getTextLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextLocation")] != -1);
		return call<R>("getTextLocation", std::forward<Args>(args)...);
	}

};

#endif
