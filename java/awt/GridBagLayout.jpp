#ifndef java_awt_GridBagLayout_HPP
#define java_awt_GridBagLayout_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::GridBagLayout : public jObject<::java::awt::GridBagLayout, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "GridBagLayout";

	constexpr static Enume field_signatures{
		jField<::jdouble *>("columnWeights"), //
		jField<::jint *>("columnWidths"), //
		jField<::jint *>("rowHeights"), //
		jField<::jdouble *>("rowWeights"), //
	};

	template<typename F = ::jdouble *>
	auto columnWeights() const {
		static_assert(field_signatures[jField<F>("columnWeights")] != -1);
		return at<F>("columnWeights");
	}

	template<typename F = ::jint *>
	auto columnWidths() const {
		static_assert(field_signatures[jField<F>("columnWidths")] != -1);
		return at<F>("columnWidths");
	}

	template<typename F = ::jint *>
	auto rowHeights() const {
		static_assert(field_signatures[jField<F>("rowHeights")] != -1);
		return at<F>("rowHeights");
	}

	template<typename F = ::jdouble *>
	auto rowWeights() const {
		static_assert(field_signatures[jField<F>("rowWeights")] != -1);
		return at<F>("rowWeights");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::awt::Component, ::java::lang::Object)>("addLayoutComponent"), //
		jMethod<::jvoid(::java::lang::String, ::java::awt::Component)>("addLayoutComponent"), //
		jMethod<::java::awt::GridBagConstraints(::java::awt::Component)>("getConstraints"), //
		jMethod<::jfloat(::java::awt::Container)>("getLayoutAlignmentX"), //
		jMethod<::jfloat(::java::awt::Container)>("getLayoutAlignmentY"), //
		jMethod<::jint **()>("getLayoutDimensions"), //
		jMethod<::java::awt::Point()>("getLayoutOrigin"), //
		jMethod<::jdouble **()>("getLayoutWeights"), //
		jMethod<::jvoid(::java::awt::Container)>("invalidateLayout"), //
		jMethod<::jvoid(::java::awt::Container)>("layoutContainer"), //
		jMethod<::java::awt::Point(::jint, ::jint)>("location"), //
		jMethod<::java::awt::Dimension(::java::awt::Container)>("maximumLayoutSize"), //
		jMethod<::java::awt::Dimension(::java::awt::Container)>("minimumLayoutSize"), //
		jMethod<::java::awt::Dimension(::java::awt::Container)>("preferredLayoutSize"), //
		jMethod<::jvoid(::java::awt::Component)>("removeLayoutComponent"), //
		jMethod<::jvoid(::java::awt::Component, ::java::awt::GridBagConstraints)>("setConstraints"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addLayoutComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addLayoutComponent")] != -1);
		return call<R>("addLayoutComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::GridBagConstraints, typename... Args>
	auto getConstraints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConstraints")] != -1);
		return call<R>("getConstraints", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getLayoutAlignmentX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLayoutAlignmentX")] != -1);
		return call<R>("getLayoutAlignmentX", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getLayoutAlignmentY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLayoutAlignmentY")] != -1);
		return call<R>("getLayoutAlignmentY", std::forward<Args>(args)...);
	}

	template<typename R = ::jint **, typename... Args>
	auto getLayoutDimensions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLayoutDimensions")] != -1);
		return call<R>("getLayoutDimensions", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Point, typename... Args>
	auto getLayoutOrigin(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLayoutOrigin")] != -1);
		return call<R>("getLayoutOrigin", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble **, typename... Args>
	auto getLayoutWeights(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLayoutWeights")] != -1);
		return call<R>("getLayoutWeights", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto invalidateLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidateLayout")] != -1);
		return call<R>("invalidateLayout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto layoutContainer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("layoutContainer")] != -1);
		return call<R>("layoutContainer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Point, typename... Args>
	auto location(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("location")] != -1);
		return call<R>("location", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto maximumLayoutSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("maximumLayoutSize")] != -1);
		return call<R>("maximumLayoutSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto minimumLayoutSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("minimumLayoutSize")] != -1);
		return call<R>("minimumLayoutSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto preferredLayoutSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("preferredLayoutSize")] != -1);
		return call<R>("preferredLayoutSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeLayoutComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeLayoutComponent")] != -1);
		return call<R>("removeLayoutComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setConstraints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setConstraints")] != -1);
		return call<R>("setConstraints", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
