#ifndef java_awt_AWTKeyStroke_HPP
#define java_awt_AWTKeyStroke_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::AWTKeyStroke : public jObject<::java::awt::AWTKeyStroke, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "AWTKeyStroke";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::awt::AWTKeyStroke(::jchar)>("getAWTKeyStroke"), //
		jMethod<::java::awt::AWTKeyStroke(::jint, ::jint)>("getAWTKeyStroke"), //
		jMethod<::java::awt::AWTKeyStroke(::jint, ::jint, ::jboolean)>("getAWTKeyStroke"), //
		jMethod<::java::awt::AWTKeyStroke(::java::lang::Character, ::jint)>("getAWTKeyStroke"), //
		jMethod<::java::awt::AWTKeyStroke(::java::lang::String)>("getAWTKeyStroke"), //
		jMethod<::java::awt::AWTKeyStroke(::java::awt::event::KeyEvent)>("getAWTKeyStrokeForEvent"), //
		jMethod<::jchar()>("getKeyChar"), //
		jMethod<::jint()>("getKeyCode"), //
		jMethod<::jint()>("getKeyEventType"), //
		jMethod<::jint()>("getModifiers"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isOnKeyRelease"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::AWTKeyStroke, typename... Args>
	static auto getAWTKeyStroke(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAWTKeyStroke")] != -1);
		return scall<R>("getAWTKeyStroke", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::AWTKeyStroke, typename... Args>
	static auto getAWTKeyStrokeForEvent(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAWTKeyStrokeForEvent")] != -1);
		return scall<R>("getAWTKeyStrokeForEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto getKeyChar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeyChar")] != -1);
		return call<R>("getKeyChar", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getKeyCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeyCode")] != -1);
		return call<R>("getKeyCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getKeyEventType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeyEventType")] != -1);
		return call<R>("getKeyEventType", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getModifiers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getModifiers")] != -1);
		return call<R>("getModifiers", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isOnKeyRelease(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isOnKeyRelease")] != -1);
		return call<R>("isOnKeyRelease", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
