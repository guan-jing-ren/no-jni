#ifndef java_awt_TrayIcon_HPP
#define java_awt_TrayIcon_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::TrayIcon : public jObject<::java::awt::TrayIcon, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "TrayIcon";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::Image)>(), //
		jConstructor<::jvoid(::java::awt::Image, ::java::lang::String)>(), //
		jConstructor<::jvoid(::java::awt::Image, ::java::lang::String, ::java::awt::PopupMenu)>(), //
		jMethod<::jvoid(::java::awt::event::ActionListener)>("addActionListener"), //
		jMethod<::jvoid(::java::awt::event::MouseListener)>("addMouseListener"), //
		jMethod<::jvoid(::java::awt::event::MouseMotionListener)>("addMouseMotionListener"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::awt::TrayIcon$MessageType)>("displayMessage"), //
		jMethod<::java::lang::String()>("getActionCommand"), //
		jMethod<::java::awt::event::ActionListener *()>("getActionListeners"), //
		jMethod<::java::awt::Image()>("getImage"), //
		jMethod<::java::awt::event::MouseListener *()>("getMouseListeners"), //
		jMethod<::java::awt::event::MouseMotionListener *()>("getMouseMotionListeners"), //
		jMethod<::java::awt::PopupMenu()>("getPopupMenu"), //
		jMethod<::java::awt::Dimension()>("getSize"), //
		jMethod<::java::lang::String()>("getToolTip"), //
		jMethod<::jboolean()>("isImageAutoSize"), //
		jMethod<::jvoid(::java::awt::event::ActionListener)>("removeActionListener"), //
		jMethod<::jvoid(::java::awt::event::MouseListener)>("removeMouseListener"), //
		jMethod<::jvoid(::java::awt::event::MouseMotionListener)>("removeMouseMotionListener"), //
		jMethod<::jvoid(::java::lang::String)>("setActionCommand"), //
		jMethod<::jvoid(::java::awt::Image)>("setImage"), //
		jMethod<::jvoid(::jboolean)>("setImageAutoSize"), //
		jMethod<::jvoid(::java::awt::PopupMenu)>("setPopupMenu"), //
		jMethod<::jvoid(::java::lang::String)>("setToolTip"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addActionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addActionListener")] != -1);
		return call<R>("addActionListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addMouseListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addMouseListener")] != -1);
		return call<R>("addMouseListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addMouseMotionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addMouseMotionListener")] != -1);
		return call<R>("addMouseMotionListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto displayMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("displayMessage")] != -1);
		return call<R>("displayMessage", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getActionCommand(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getActionCommand")] != -1);
		return call<R>("getActionCommand", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::ActionListener *, typename... Args>
	auto getActionListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getActionListeners")] != -1);
		return call<R>("getActionListeners", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Image, typename... Args>
	auto getImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getImage")] != -1);
		return call<R>("getImage", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::MouseListener *, typename... Args>
	auto getMouseListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMouseListeners")] != -1);
		return call<R>("getMouseListeners", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::MouseMotionListener *, typename... Args>
	auto getMouseMotionListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMouseMotionListeners")] != -1);
		return call<R>("getMouseMotionListeners", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::PopupMenu, typename... Args>
	auto getPopupMenu(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPopupMenu")] != -1);
		return call<R>("getPopupMenu", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSize")] != -1);
		return call<R>("getSize", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getToolTip(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getToolTip")] != -1);
		return call<R>("getToolTip", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isImageAutoSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isImageAutoSize")] != -1);
		return call<R>("isImageAutoSize", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeActionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeActionListener")] != -1);
		return call<R>("removeActionListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeMouseListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeMouseListener")] != -1);
		return call<R>("removeMouseListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeMouseMotionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeMouseMotionListener")] != -1);
		return call<R>("removeMouseMotionListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setActionCommand(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setActionCommand")] != -1);
		return call<R>("setActionCommand", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setImage")] != -1);
		return call<R>("setImage", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setImageAutoSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setImageAutoSize")] != -1);
		return call<R>("setImageAutoSize", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPopupMenu(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPopupMenu")] != -1);
		return call<R>("setPopupMenu", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setToolTip(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setToolTip")] != -1);
		return call<R>("setToolTip", forward<Args>(args)...);
	}

};

#endif
