#ifndef java_awt_Component_HPP
#define java_awt_Component_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::Component : public jObject<::java::awt::Component, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "Component";

	constexpr static Enume field_signatures{
		jField<::jfloat>("BOTTOM_ALIGNMENT"), //
		jField<::jfloat>("CENTER_ALIGNMENT"), //
		jField<::jfloat>("LEFT_ALIGNMENT"), //
		jField<::jfloat>("RIGHT_ALIGNMENT"), //
		jField<::jfloat>("TOP_ALIGNMENT"), //
	};

	template<typename F = ::jfloat>
	static auto BOTTOM_ALIGNMENT() {
		static_assert(field_signatures[jField<F>("BOTTOM_ALIGNMENT")] != -1);
		return sat<F>("BOTTOM_ALIGNMENT");
	}

	template<typename F = ::jfloat>
	static auto CENTER_ALIGNMENT() {
		static_assert(field_signatures[jField<F>("CENTER_ALIGNMENT")] != -1);
		return sat<F>("CENTER_ALIGNMENT");
	}

	template<typename F = ::jfloat>
	static auto LEFT_ALIGNMENT() {
		static_assert(field_signatures[jField<F>("LEFT_ALIGNMENT")] != -1);
		return sat<F>("LEFT_ALIGNMENT");
	}

	template<typename F = ::jfloat>
	static auto RIGHT_ALIGNMENT() {
		static_assert(field_signatures[jField<F>("RIGHT_ALIGNMENT")] != -1);
		return sat<F>("RIGHT_ALIGNMENT");
	}

	template<typename F = ::jfloat>
	static auto TOP_ALIGNMENT() {
		static_assert(field_signatures[jField<F>("TOP_ALIGNMENT")] != -1);
		return sat<F>("TOP_ALIGNMENT");
	}

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::awt::Event, ::java::lang::Object)>("action"), //
		jMethod<::jvoid(::java::awt::PopupMenu)>("add"), //
		jMethod<::jvoid(::java::awt::event::ComponentListener)>("addComponentListener"), //
		jMethod<::jvoid(::java::awt::event::FocusListener)>("addFocusListener"), //
		jMethod<::jvoid(::java::awt::event::HierarchyBoundsListener)>("addHierarchyBoundsListener"), //
		jMethod<::jvoid(::java::awt::event::HierarchyListener)>("addHierarchyListener"), //
		jMethod<::jvoid(::java::awt::event::InputMethodListener)>("addInputMethodListener"), //
		jMethod<::jvoid(::java::awt::event::KeyListener)>("addKeyListener"), //
		jMethod<::jvoid(::java::awt::event::MouseListener)>("addMouseListener"), //
		jMethod<::jvoid(::java::awt::event::MouseMotionListener)>("addMouseMotionListener"), //
		jMethod<::jvoid(::java::awt::event::MouseWheelListener)>("addMouseWheelListener"), //
		jMethod<::jvoid()>("addNotify"), //
		jMethod<::jvoid(::java::beans::PropertyChangeListener)>("addPropertyChangeListener"), //
		jMethod<::jvoid(::java::lang::String, ::java::beans::PropertyChangeListener)>("addPropertyChangeListener"), //
		jMethod<::jvoid(::java::awt::ComponentOrientation)>("applyComponentOrientation"), //
		jMethod<::jboolean(::jint)>("areFocusTraversalKeysSet"), //
		jMethod<::java::awt::Rectangle()>("bounds"), //
		jMethod<::jint(::java::awt::Image, ::jint, ::jint, ::java::awt::image::ImageObserver)>("checkImage"), //
		jMethod<::jint(::java::awt::Image, ::java::awt::image::ImageObserver)>("checkImage"), //
		jMethod<::jboolean(::jint, ::jint)>("contains"), //
		jMethod<::jboolean(::java::awt::Point)>("contains"), //
		jMethod<::java::awt::Image(::jint, ::jint)>("createImage"), //
		jMethod<::java::awt::Image(::java::awt::image::ImageProducer)>("createImage"), //
		jMethod<::java::awt::image::VolatileImage(::jint, ::jint)>("createVolatileImage"), //
		jMethod<::java::awt::image::VolatileImage(::jint, ::jint, ::java::awt::ImageCapabilities)>("createVolatileImage"), //
		jMethod<::jvoid(::java::awt::Event)>("deliverEvent"), //
		jMethod<::jvoid()>("disable"), //
		jMethod<::jvoid(::java::awt::AWTEvent)>("dispatchEvent"), //
		jMethod<::jvoid()>("doLayout"), //
		jMethod<::jvoid()>("enable"), //
		jMethod<::jvoid(::jboolean)>("enable"), //
		jMethod<::jvoid(::jboolean)>("enableInputMethods"), //
		jMethod<::jvoid(::java::lang::String, ::jbyte, ::jbyte)>("firePropertyChange"), //
		jMethod<::jvoid(::java::lang::String, ::jchar, ::jchar)>("firePropertyChange"), //
		jMethod<::jvoid(::java::lang::String, ::jdouble, ::jdouble)>("firePropertyChange"), //
		jMethod<::jvoid(::java::lang::String, ::jfloat, ::jfloat)>("firePropertyChange"), //
		jMethod<::jvoid(::java::lang::String, ::jlong, ::jlong)>("firePropertyChange"), //
		jMethod<::jvoid(::java::lang::String, ::jshort, ::jshort)>("firePropertyChange"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::jfloat()>("getAlignmentX"), //
		jMethod<::jfloat()>("getAlignmentY"), //
		jMethod<::java::awt::Color()>("getBackground"), //
		jMethod<::jint(::jint, ::jint)>("getBaseline"), //
		jMethod<::java::awt::Component$BaselineResizeBehavior()>("getBaselineResizeBehavior"), //
		jMethod<::java::awt::Rectangle()>("getBounds"), //
		jMethod<::java::awt::Rectangle(::java::awt::Rectangle)>("getBounds"), //
		jMethod<::java::awt::image::ColorModel()>("getColorModel"), //
		jMethod<::java::awt::Component(::jint, ::jint)>("getComponentAt"), //
		jMethod<::java::awt::Component(::java::awt::Point)>("getComponentAt"), //
		jMethod<::java::awt::event::ComponentListener *()>("getComponentListeners"), //
		jMethod<::java::awt::ComponentOrientation()>("getComponentOrientation"), //
		jMethod<::java::awt::Cursor()>("getCursor"), //
		jMethod<::java::awt::dnd::DropTarget()>("getDropTarget"), //
		jMethod<::java::awt::Container()>("getFocusCycleRootAncestor"), //
		jMethod<::java::awt::event::FocusListener *()>("getFocusListeners"), //
		jMethod<::java::util::Set(::jint)>("getFocusTraversalKeys"), //
		jMethod<::jboolean()>("getFocusTraversalKeysEnabled"), //
		jMethod<::java::awt::Font()>("getFont"), //
		jMethod<::java::awt::FontMetrics(::java::awt::Font)>("getFontMetrics"), //
		jMethod<::java::awt::Color()>("getForeground"), //
		jMethod<::java::awt::Graphics()>("getGraphics"), //
		jMethod<::java::awt::GraphicsConfiguration()>("getGraphicsConfiguration"), //
		jMethod<::jint()>("getHeight"), //
		jMethod<::java::awt::event::HierarchyBoundsListener *()>("getHierarchyBoundsListeners"), //
		jMethod<::java::awt::event::HierarchyListener *()>("getHierarchyListeners"), //
		jMethod<::jboolean()>("getIgnoreRepaint"), //
		jMethod<::java::awt::im::InputContext()>("getInputContext"), //
		jMethod<::java::awt::event::InputMethodListener *()>("getInputMethodListeners"), //
		jMethod<::java::awt::im::InputMethodRequests()>("getInputMethodRequests"), //
		jMethod<::java::awt::event::KeyListener *()>("getKeyListeners"), //
		jMethod<::java::util::EventListener *(::java::lang::Class)>("getListeners"), //
		jMethod<::java::util::Locale()>("getLocale"), //
		jMethod<::java::awt::Point()>("getLocation"), //
		jMethod<::java::awt::Point(::java::awt::Point)>("getLocation"), //
		jMethod<::java::awt::Point()>("getLocationOnScreen"), //
		jMethod<::java::awt::Dimension()>("getMaximumSize"), //
		jMethod<::java::awt::Dimension()>("getMinimumSize"), //
		jMethod<::java::awt::event::MouseListener *()>("getMouseListeners"), //
		jMethod<::java::awt::event::MouseMotionListener *()>("getMouseMotionListeners"), //
		jMethod<::java::awt::Point()>("getMousePosition"), //
		jMethod<::java::awt::event::MouseWheelListener *()>("getMouseWheelListeners"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::awt::Container()>("getParent"), //
		jMethod<::java::awt::peer::ComponentPeer()>("getPeer"), //
		jMethod<::java::awt::Dimension()>("getPreferredSize"), //
		jMethod<::java::beans::PropertyChangeListener *()>("getPropertyChangeListeners"), //
		jMethod<::java::beans::PropertyChangeListener *(::java::lang::String)>("getPropertyChangeListeners"), //
		jMethod<::java::awt::Dimension()>("getSize"), //
		jMethod<::java::awt::Dimension(::java::awt::Dimension)>("getSize"), //
		jMethod<::java::awt::Toolkit()>("getToolkit"), //
		jMethod<::java::lang::Object()>("getTreeLock"), //
		jMethod<::jint()>("getWidth"), //
		jMethod<::jint()>("getX"), //
		jMethod<::jint()>("getY"), //
		jMethod<::jboolean(::java::awt::Event, ::java::lang::Object)>("gotFocus"), //
		jMethod<::jboolean(::java::awt::Event)>("handleEvent"), //
		jMethod<::jboolean()>("hasFocus"), //
		jMethod<::jvoid()>("hide"), //
		jMethod<::jboolean(::java::awt::Image, ::jint, ::jint, ::jint, ::jint, ::jint)>("imageUpdate"), //
		jMethod<::jboolean(::jint, ::jint)>("inside"), //
		jMethod<::jvoid()>("invalidate"), //
		jMethod<::jboolean()>("isBackgroundSet"), //
		jMethod<::jboolean()>("isCursorSet"), //
		jMethod<::jboolean()>("isDisplayable"), //
		jMethod<::jboolean()>("isDoubleBuffered"), //
		jMethod<::jboolean()>("isEnabled"), //
		jMethod<::jboolean(::java::awt::Container)>("isFocusCycleRoot"), //
		jMethod<::jboolean()>("isFocusOwner"), //
		jMethod<::jboolean()>("isFocusTraversable"), //
		jMethod<::jboolean()>("isFocusable"), //
		jMethod<::jboolean()>("isFontSet"), //
		jMethod<::jboolean()>("isForegroundSet"), //
		jMethod<::jboolean()>("isLightweight"), //
		jMethod<::jboolean()>("isMaximumSizeSet"), //
		jMethod<::jboolean()>("isMinimumSizeSet"), //
		jMethod<::jboolean()>("isOpaque"), //
		jMethod<::jboolean()>("isPreferredSizeSet"), //
		jMethod<::jboolean()>("isShowing"), //
		jMethod<::jboolean()>("isValid"), //
		jMethod<::jboolean()>("isVisible"), //
		jMethod<::jboolean(::java::awt::Event, ::jint)>("keyDown"), //
		jMethod<::jboolean(::java::awt::Event, ::jint)>("keyUp"), //
		jMethod<::jvoid()>("layout"), //
		jMethod<::jvoid()>("list"), //
		jMethod<::jvoid(::java::io::PrintStream)>("list"), //
		jMethod<::jvoid(::java::io::PrintStream, ::jint)>("list"), //
		jMethod<::jvoid(::java::io::PrintWriter)>("list"), //
		jMethod<::jvoid(::java::io::PrintWriter, ::jint)>("list"), //
		jMethod<::java::awt::Component(::jint, ::jint)>("locate"), //
		jMethod<::java::awt::Point()>("location"), //
		jMethod<::jboolean(::java::awt::Event, ::java::lang::Object)>("lostFocus"), //
		jMethod<::java::awt::Dimension()>("minimumSize"), //
		jMethod<::jboolean(::java::awt::Event, ::jint, ::jint)>("mouseDown"), //
		jMethod<::jboolean(::java::awt::Event, ::jint, ::jint)>("mouseDrag"), //
		jMethod<::jboolean(::java::awt::Event, ::jint, ::jint)>("mouseEnter"), //
		jMethod<::jboolean(::java::awt::Event, ::jint, ::jint)>("mouseExit"), //
		jMethod<::jboolean(::java::awt::Event, ::jint, ::jint)>("mouseMove"), //
		jMethod<::jboolean(::java::awt::Event, ::jint, ::jint)>("mouseUp"), //
		jMethod<::jvoid(::jint, ::jint)>("move"), //
		jMethod<::jvoid()>("nextFocus"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paint"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paintAll"), //
		jMethod<::jboolean(::java::awt::Event)>("postEvent"), //
		jMethod<::java::awt::Dimension()>("preferredSize"), //
		jMethod<::jboolean(::java::awt::Image, ::jint, ::jint, ::java::awt::image::ImageObserver)>("prepareImage"), //
		jMethod<::jboolean(::java::awt::Image, ::java::awt::image::ImageObserver)>("prepareImage"), //
		jMethod<::jvoid(::java::awt::Graphics)>("print"), //
		jMethod<::jvoid(::java::awt::Graphics)>("printAll"), //
		jMethod<::jvoid(::java::awt::MenuComponent)>("remove"), //
		jMethod<::jvoid(::java::awt::event::ComponentListener)>("removeComponentListener"), //
		jMethod<::jvoid(::java::awt::event::FocusListener)>("removeFocusListener"), //
		jMethod<::jvoid(::java::awt::event::HierarchyBoundsListener)>("removeHierarchyBoundsListener"), //
		jMethod<::jvoid(::java::awt::event::HierarchyListener)>("removeHierarchyListener"), //
		jMethod<::jvoid(::java::awt::event::InputMethodListener)>("removeInputMethodListener"), //
		jMethod<::jvoid(::java::awt::event::KeyListener)>("removeKeyListener"), //
		jMethod<::jvoid(::java::awt::event::MouseListener)>("removeMouseListener"), //
		jMethod<::jvoid(::java::awt::event::MouseMotionListener)>("removeMouseMotionListener"), //
		jMethod<::jvoid(::java::awt::event::MouseWheelListener)>("removeMouseWheelListener"), //
		jMethod<::jvoid()>("removeNotify"), //
		jMethod<::jvoid(::java::beans::PropertyChangeListener)>("removePropertyChangeListener"), //
		jMethod<::jvoid(::java::lang::String, ::java::beans::PropertyChangeListener)>("removePropertyChangeListener"), //
		jMethod<::jvoid()>("repaint"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("repaint"), //
		jMethod<::jvoid(::jlong)>("repaint"), //
		jMethod<::jvoid(::jlong, ::jint, ::jint, ::jint, ::jint)>("repaint"), //
		jMethod<::jvoid()>("requestFocus"), //
		jMethod<::jboolean()>("requestFocusInWindow"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("reshape"), //
		jMethod<::jvoid(::jint, ::jint)>("resize"), //
		jMethod<::jvoid(::java::awt::Dimension)>("resize"), //
		jMethod<::jvoid()>("revalidate"), //
		jMethod<::jvoid(::java::awt::Color)>("setBackground"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("setBounds"), //
		jMethod<::jvoid(::java::awt::Rectangle)>("setBounds"), //
		jMethod<::jvoid(::java::awt::ComponentOrientation)>("setComponentOrientation"), //
		jMethod<::jvoid(::java::awt::Cursor)>("setCursor"), //
		jMethod<::jvoid(::java::awt::dnd::DropTarget)>("setDropTarget"), //
		jMethod<::jvoid(::jboolean)>("setEnabled"), //
		jMethod<::jvoid(::jint, ::java::util::Set)>("setFocusTraversalKeys"), //
		jMethod<::jvoid(::jboolean)>("setFocusTraversalKeysEnabled"), //
		jMethod<::jvoid(::jboolean)>("setFocusable"), //
		jMethod<::jvoid(::java::awt::Font)>("setFont"), //
		jMethod<::jvoid(::java::awt::Color)>("setForeground"), //
		jMethod<::jvoid(::jboolean)>("setIgnoreRepaint"), //
		jMethod<::jvoid(::java::util::Locale)>("setLocale"), //
		jMethod<::jvoid(::jint, ::jint)>("setLocation"), //
		jMethod<::jvoid(::java::awt::Point)>("setLocation"), //
		jMethod<::jvoid(::java::awt::Dimension)>("setMaximumSize"), //
		jMethod<::jvoid(::java::awt::Dimension)>("setMinimumSize"), //
		jMethod<::jvoid(::java::lang::String)>("setName"), //
		jMethod<::jvoid(::java::awt::Dimension)>("setPreferredSize"), //
		jMethod<::jvoid(::jint, ::jint)>("setSize"), //
		jMethod<::jvoid(::java::awt::Dimension)>("setSize"), //
		jMethod<::jvoid(::jboolean)>("setVisible"), //
		jMethod<::jvoid()>("show"), //
		jMethod<::jvoid(::jboolean)>("show"), //
		jMethod<::java::awt::Dimension()>("size"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid()>("transferFocus"), //
		jMethod<::jvoid()>("transferFocusBackward"), //
		jMethod<::jvoid()>("transferFocusUpCycle"), //
		jMethod<::jvoid(::java::awt::Graphics)>("update"), //
		jMethod<::jvoid()>("validate"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto action(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("action")] != -1);
		return call<R>("action", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("add")] != -1);
		return call<R>("add", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addComponentListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addComponentListener")] != -1);
		return call<R>("addComponentListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addFocusListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addFocusListener")] != -1);
		return call<R>("addFocusListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addHierarchyBoundsListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addHierarchyBoundsListener")] != -1);
		return call<R>("addHierarchyBoundsListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addHierarchyListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addHierarchyListener")] != -1);
		return call<R>("addHierarchyListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addInputMethodListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addInputMethodListener")] != -1);
		return call<R>("addInputMethodListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addKeyListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addKeyListener")] != -1);
		return call<R>("addKeyListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addMouseListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addMouseListener")] != -1);
		return call<R>("addMouseListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addMouseMotionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addMouseMotionListener")] != -1);
		return call<R>("addMouseMotionListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addMouseWheelListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addMouseWheelListener")] != -1);
		return call<R>("addMouseWheelListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addNotify")] != -1);
		return call<R>("addNotify", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addPropertyChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addPropertyChangeListener")] != -1);
		return call<R>("addPropertyChangeListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto applyComponentOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("applyComponentOrientation")] != -1);
		return call<R>("applyComponentOrientation", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto areFocusTraversalKeysSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("areFocusTraversalKeysSet")] != -1);
		return call<R>("areFocusTraversalKeysSet", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto bounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("bounds")] != -1);
		return call<R>("bounds", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto checkImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("checkImage")] != -1);
		return call<R>("checkImage", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto contains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("contains")] != -1);
		return call<R>("contains", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Image, typename... Args>
	auto createImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createImage")] != -1);
		return call<R>("createImage", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::VolatileImage, typename... Args>
	auto createVolatileImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createVolatileImage")] != -1);
		return call<R>("createVolatileImage", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deliverEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("deliverEvent")] != -1);
		return call<R>("deliverEvent", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto disable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("disable")] != -1);
		return call<R>("disable", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispatchEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("dispatchEvent")] != -1);
		return call<R>("dispatchEvent", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto doLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("doLayout")] != -1);
		return call<R>("doLayout", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto enable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("enable")] != -1);
		return call<R>("enable", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto enableInputMethods(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("enableInputMethods")] != -1);
		return call<R>("enableInputMethods", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto firePropertyChange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("firePropertyChange")] != -1);
		return call<R>("firePropertyChange", forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getAlignmentX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAlignmentX")] != -1);
		return call<R>("getAlignmentX", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getAlignmentY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAlignmentY")] != -1);
		return call<R>("getAlignmentY", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBackground")] != -1);
		return call<R>("getBackground", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBaseline(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBaseline")] != -1);
		return call<R>("getBaseline", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component$BaselineResizeBehavior, typename... Args>
	auto getBaselineResizeBehavior(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBaselineResizeBehavior")] != -1);
		return call<R>("getBaselineResizeBehavior", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBounds")] != -1);
		return call<R>("getBounds", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::ColorModel, typename... Args>
	auto getColorModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColorModel")] != -1);
		return call<R>("getColorModel", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getComponentAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getComponentAt")] != -1);
		return call<R>("getComponentAt", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::ComponentListener *, typename... Args>
	auto getComponentListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getComponentListeners")] != -1);
		return call<R>("getComponentListeners", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::ComponentOrientation, typename... Args>
	auto getComponentOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getComponentOrientation")] != -1);
		return call<R>("getComponentOrientation", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Cursor, typename... Args>
	auto getCursor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCursor")] != -1);
		return call<R>("getCursor", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::dnd::DropTarget, typename... Args>
	auto getDropTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDropTarget")] != -1);
		return call<R>("getDropTarget", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Container, typename... Args>
	auto getFocusCycleRootAncestor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFocusCycleRootAncestor")] != -1);
		return call<R>("getFocusCycleRootAncestor", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::FocusListener *, typename... Args>
	auto getFocusListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFocusListeners")] != -1);
		return call<R>("getFocusListeners", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto getFocusTraversalKeys(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFocusTraversalKeys")] != -1);
		return call<R>("getFocusTraversalKeys", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getFocusTraversalKeysEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFocusTraversalKeysEnabled")] != -1);
		return call<R>("getFocusTraversalKeysEnabled", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Font, typename... Args>
	auto getFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFont")] != -1);
		return call<R>("getFont", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::FontMetrics, typename... Args>
	auto getFontMetrics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFontMetrics")] != -1);
		return call<R>("getFontMetrics", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getForeground")] != -1);
		return call<R>("getForeground", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Graphics, typename... Args>
	auto getGraphics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getGraphics")] != -1);
		return call<R>("getGraphics", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::GraphicsConfiguration, typename... Args>
	auto getGraphicsConfiguration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getGraphicsConfiguration")] != -1);
		return call<R>("getGraphicsConfiguration", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHeight")] != -1);
		return call<R>("getHeight", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::HierarchyBoundsListener *, typename... Args>
	auto getHierarchyBoundsListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHierarchyBoundsListeners")] != -1);
		return call<R>("getHierarchyBoundsListeners", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::HierarchyListener *, typename... Args>
	auto getHierarchyListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHierarchyListeners")] != -1);
		return call<R>("getHierarchyListeners", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getIgnoreRepaint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getIgnoreRepaint")] != -1);
		return call<R>("getIgnoreRepaint", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::im::InputContext, typename... Args>
	auto getInputContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInputContext")] != -1);
		return call<R>("getInputContext", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::InputMethodListener *, typename... Args>
	auto getInputMethodListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInputMethodListeners")] != -1);
		return call<R>("getInputMethodListeners", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::im::InputMethodRequests, typename... Args>
	auto getInputMethodRequests(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInputMethodRequests")] != -1);
		return call<R>("getInputMethodRequests", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::KeyListener *, typename... Args>
	auto getKeyListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getKeyListeners")] != -1);
		return call<R>("getKeyListeners", forward<Args>(args)...);
	}

	template<typename R = ::java::util::EventListener *, typename... Args>
	auto getListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getListeners")] != -1);
		return call<R>("getListeners", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale, typename... Args>
	auto getLocale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLocale")] != -1);
		return call<R>("getLocale", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Point, typename... Args>
	auto getLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLocation")] != -1);
		return call<R>("getLocation", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Point, typename... Args>
	auto getLocationOnScreen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLocationOnScreen")] != -1);
		return call<R>("getLocationOnScreen", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMaximumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaximumSize")] != -1);
		return call<R>("getMaximumSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinimumSize")] != -1);
		return call<R>("getMinimumSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::MouseListener *, typename... Args>
	auto getMouseListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMouseListeners")] != -1);
		return call<R>("getMouseListeners", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::MouseMotionListener *, typename... Args>
	auto getMouseMotionListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMouseMotionListeners")] != -1);
		return call<R>("getMouseMotionListeners", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Point, typename... Args>
	auto getMousePosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMousePosition")] != -1);
		return call<R>("getMousePosition", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::MouseWheelListener *, typename... Args>
	auto getMouseWheelListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMouseWheelListeners")] != -1);
		return call<R>("getMouseWheelListeners", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Container, typename... Args>
	auto getParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getParent")] != -1);
		return call<R>("getParent", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::peer::ComponentPeer, typename... Args>
	auto getPeer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPeer")] != -1);
		return call<R>("getPeer", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreferredSize")] != -1);
		return call<R>("getPreferredSize", forward<Args>(args)...);
	}

	template<typename R = ::java::beans::PropertyChangeListener *, typename... Args>
	auto getPropertyChangeListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPropertyChangeListeners")] != -1);
		return call<R>("getPropertyChangeListeners", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSize")] != -1);
		return call<R>("getSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Toolkit, typename... Args>
	auto getToolkit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getToolkit")] != -1);
		return call<R>("getToolkit", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getTreeLock(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTreeLock")] != -1);
		return call<R>("getTreeLock", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getX")] != -1);
		return call<R>("getX", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getY")] != -1);
		return call<R>("getY", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto gotFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("gotFocus")] != -1);
		return call<R>("gotFocus", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto handleEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("handleEvent")] != -1);
		return call<R>("handleEvent", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hasFocus")] != -1);
		return call<R>("hasFocus", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto hide(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hide")] != -1);
		return call<R>("hide", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto imageUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("imageUpdate")] != -1);
		return call<R>("imageUpdate", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto inside(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("inside")] != -1);
		return call<R>("inside", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto invalidate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("invalidate")] != -1);
		return call<R>("invalidate", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isBackgroundSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isBackgroundSet")] != -1);
		return call<R>("isBackgroundSet", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCursorSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isCursorSet")] != -1);
		return call<R>("isCursorSet", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDisplayable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isDisplayable")] != -1);
		return call<R>("isDisplayable", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDoubleBuffered(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isDoubleBuffered")] != -1);
		return call<R>("isDoubleBuffered", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isEnabled")] != -1);
		return call<R>("isEnabled", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFocusCycleRoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isFocusCycleRoot")] != -1);
		return call<R>("isFocusCycleRoot", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFocusOwner(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isFocusOwner")] != -1);
		return call<R>("isFocusOwner", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFocusTraversable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isFocusTraversable")] != -1);
		return call<R>("isFocusTraversable", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFocusable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isFocusable")] != -1);
		return call<R>("isFocusable", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFontSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isFontSet")] != -1);
		return call<R>("isFontSet", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isForegroundSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isForegroundSet")] != -1);
		return call<R>("isForegroundSet", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLightweight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isLightweight")] != -1);
		return call<R>("isLightweight", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isMaximumSizeSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isMaximumSizeSet")] != -1);
		return call<R>("isMaximumSizeSet", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isMinimumSizeSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isMinimumSizeSet")] != -1);
		return call<R>("isMinimumSizeSet", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isOpaque(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isOpaque")] != -1);
		return call<R>("isOpaque", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPreferredSizeSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isPreferredSizeSet")] != -1);
		return call<R>("isPreferredSizeSet", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isShowing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isShowing")] != -1);
		return call<R>("isShowing", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isValid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isValid")] != -1);
		return call<R>("isValid", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isVisible")] != -1);
		return call<R>("isVisible", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto keyDown(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("keyDown")] != -1);
		return call<R>("keyDown", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto keyUp(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("keyUp")] != -1);
		return call<R>("keyUp", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto layout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("layout")] != -1);
		return call<R>("layout", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto list(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("list")] != -1);
		return call<R>("list", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto locate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("locate")] != -1);
		return call<R>("locate", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Point, typename... Args>
	auto location(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("location")] != -1);
		return call<R>("location", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto lostFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("lostFocus")] != -1);
		return call<R>("lostFocus", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto minimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("minimumSize")] != -1);
		return call<R>("minimumSize", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto mouseDown(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("mouseDown")] != -1);
		return call<R>("mouseDown", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto mouseDrag(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("mouseDrag")] != -1);
		return call<R>("mouseDrag", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto mouseEnter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("mouseEnter")] != -1);
		return call<R>("mouseEnter", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto mouseExit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("mouseExit")] != -1);
		return call<R>("mouseExit", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto mouseMove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("mouseMove")] != -1);
		return call<R>("mouseMove", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto mouseUp(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("mouseUp")] != -1);
		return call<R>("mouseUp", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto move(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("move")] != -1);
		return call<R>("move", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto nextFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("nextFocus")] != -1);
		return call<R>("nextFocus", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintAll")] != -1);
		return call<R>("paintAll", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto postEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("postEvent")] != -1);
		return call<R>("postEvent", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto preferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("preferredSize")] != -1);
		return call<R>("preferredSize", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto prepareImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("prepareImage")] != -1);
		return call<R>("prepareImage", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto print(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("print")] != -1);
		return call<R>("print", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto printAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("printAll")] != -1);
		return call<R>("printAll", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeComponentListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeComponentListener")] != -1);
		return call<R>("removeComponentListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeFocusListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeFocusListener")] != -1);
		return call<R>("removeFocusListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeHierarchyBoundsListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeHierarchyBoundsListener")] != -1);
		return call<R>("removeHierarchyBoundsListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeHierarchyListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeHierarchyListener")] != -1);
		return call<R>("removeHierarchyListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeInputMethodListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeInputMethodListener")] != -1);
		return call<R>("removeInputMethodListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeKeyListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeKeyListener")] != -1);
		return call<R>("removeKeyListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeMouseListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeMouseListener")] != -1);
		return call<R>("removeMouseListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeMouseMotionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeMouseMotionListener")] != -1);
		return call<R>("removeMouseMotionListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeMouseWheelListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeMouseWheelListener")] != -1);
		return call<R>("removeMouseWheelListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeNotify")] != -1);
		return call<R>("removeNotify", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removePropertyChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removePropertyChangeListener")] != -1);
		return call<R>("removePropertyChangeListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto repaint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("repaint")] != -1);
		return call<R>("repaint", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto requestFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("requestFocus")] != -1);
		return call<R>("requestFocus", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto requestFocusInWindow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("requestFocusInWindow")] != -1);
		return call<R>("requestFocusInWindow", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reshape(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reshape")] != -1);
		return call<R>("reshape", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto resize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("resize")] != -1);
		return call<R>("resize", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto revalidate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("revalidate")] != -1);
		return call<R>("revalidate", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBackground")] != -1);
		return call<R>("setBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBounds")] != -1);
		return call<R>("setBounds", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setComponentOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setComponentOrientation")] != -1);
		return call<R>("setComponentOrientation", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCursor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCursor")] != -1);
		return call<R>("setCursor", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDropTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDropTarget")] != -1);
		return call<R>("setDropTarget", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setEnabled")] != -1);
		return call<R>("setEnabled", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFocusTraversalKeys(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFocusTraversalKeys")] != -1);
		return call<R>("setFocusTraversalKeys", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFocusTraversalKeysEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFocusTraversalKeysEnabled")] != -1);
		return call<R>("setFocusTraversalKeysEnabled", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFocusable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFocusable")] != -1);
		return call<R>("setFocusable", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFont")] != -1);
		return call<R>("setFont", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setForeground")] != -1);
		return call<R>("setForeground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIgnoreRepaint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setIgnoreRepaint")] != -1);
		return call<R>("setIgnoreRepaint", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLocale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLocale")] != -1);
		return call<R>("setLocale", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLocation")] != -1);
		return call<R>("setLocation", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaximumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMaximumSize")] != -1);
		return call<R>("setMaximumSize", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMinimumSize")] != -1);
		return call<R>("setMinimumSize", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setName")] != -1);
		return call<R>("setName", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPreferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPreferredSize")] != -1);
		return call<R>("setPreferredSize", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSize")] != -1);
		return call<R>("setSize", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setVisible")] != -1);
		return call<R>("setVisible", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto show(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("show")] != -1);
		return call<R>("show", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto size(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("size")] != -1);
		return call<R>("size", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto transferFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("transferFocus")] != -1);
		return call<R>("transferFocus", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto transferFocusBackward(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("transferFocusBackward")] != -1);
		return call<R>("transferFocusBackward", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto transferFocusUpCycle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("transferFocusUpCycle")] != -1);
		return call<R>("transferFocusUpCycle", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto update(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("update")] != -1);
		return call<R>("update", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto validate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("validate")] != -1);
		return call<R>("validate", forward<Args>(args)...);
	}

};

#endif
