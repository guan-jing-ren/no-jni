#ifndef java_awt_AWTEventMulticaster_HPP
#define java_awt_AWTEventMulticaster_HPP

#include "../../jfwd_decl.hpp"

class ::java::awt::AWTEventMulticaster : public jObject<::java::awt::AWTEventMulticaster, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_awt / "AWTEventMulticaster";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::awt::event::ActionEvent)>("actionPerformed"), //
		jMethod<::java::awt::event::ActionListener(::java::awt::event::ActionListener, ::java::awt::event::ActionListener)>("add"), //
		jMethod<::java::awt::event::AdjustmentListener(::java::awt::event::AdjustmentListener, ::java::awt::event::AdjustmentListener)>("add"), //
		jMethod<::java::awt::event::ComponentListener(::java::awt::event::ComponentListener, ::java::awt::event::ComponentListener)>("add"), //
		jMethod<::java::awt::event::ContainerListener(::java::awt::event::ContainerListener, ::java::awt::event::ContainerListener)>("add"), //
		jMethod<::java::awt::event::FocusListener(::java::awt::event::FocusListener, ::java::awt::event::FocusListener)>("add"), //
		jMethod<::java::awt::event::HierarchyBoundsListener(::java::awt::event::HierarchyBoundsListener, ::java::awt::event::HierarchyBoundsListener)>("add"), //
		jMethod<::java::awt::event::HierarchyListener(::java::awt::event::HierarchyListener, ::java::awt::event::HierarchyListener)>("add"), //
		jMethod<::java::awt::event::InputMethodListener(::java::awt::event::InputMethodListener, ::java::awt::event::InputMethodListener)>("add"), //
		jMethod<::java::awt::event::ItemListener(::java::awt::event::ItemListener, ::java::awt::event::ItemListener)>("add"), //
		jMethod<::java::awt::event::KeyListener(::java::awt::event::KeyListener, ::java::awt::event::KeyListener)>("add"), //
		jMethod<::java::awt::event::MouseListener(::java::awt::event::MouseListener, ::java::awt::event::MouseListener)>("add"), //
		jMethod<::java::awt::event::MouseMotionListener(::java::awt::event::MouseMotionListener, ::java::awt::event::MouseMotionListener)>("add"), //
		jMethod<::java::awt::event::MouseWheelListener(::java::awt::event::MouseWheelListener, ::java::awt::event::MouseWheelListener)>("add"), //
		jMethod<::java::awt::event::TextListener(::java::awt::event::TextListener, ::java::awt::event::TextListener)>("add"), //
		jMethod<::java::awt::event::WindowFocusListener(::java::awt::event::WindowFocusListener, ::java::awt::event::WindowFocusListener)>("add"), //
		jMethod<::java::awt::event::WindowListener(::java::awt::event::WindowListener, ::java::awt::event::WindowListener)>("add"), //
		jMethod<::java::awt::event::WindowStateListener(::java::awt::event::WindowStateListener, ::java::awt::event::WindowStateListener)>("add"), //
		jMethod<::jvoid(::java::awt::event::AdjustmentEvent)>("adjustmentValueChanged"), //
		jMethod<::jvoid(::java::awt::event::HierarchyEvent)>("ancestorMoved"), //
		jMethod<::jvoid(::java::awt::event::HierarchyEvent)>("ancestorResized"), //
		jMethod<::jvoid(::java::awt::event::InputMethodEvent)>("caretPositionChanged"), //
		jMethod<::jvoid(::java::awt::event::ContainerEvent)>("componentAdded"), //
		jMethod<::jvoid(::java::awt::event::ComponentEvent)>("componentHidden"), //
		jMethod<::jvoid(::java::awt::event::ComponentEvent)>("componentMoved"), //
		jMethod<::jvoid(::java::awt::event::ContainerEvent)>("componentRemoved"), //
		jMethod<::jvoid(::java::awt::event::ComponentEvent)>("componentResized"), //
		jMethod<::jvoid(::java::awt::event::ComponentEvent)>("componentShown"), //
		jMethod<::jvoid(::java::awt::event::FocusEvent)>("focusGained"), //
		jMethod<::jvoid(::java::awt::event::FocusEvent)>("focusLost"), //
		jMethod<::java::util::EventListener *(::java::util::EventListener, ::java::lang::Class)>("getListeners"), //
		jMethod<::jvoid(::java::awt::event::HierarchyEvent)>("hierarchyChanged"), //
		jMethod<::jvoid(::java::awt::event::InputMethodEvent)>("inputMethodTextChanged"), //
		jMethod<::jvoid(::java::awt::event::ItemEvent)>("itemStateChanged"), //
		jMethod<::jvoid(::java::awt::event::KeyEvent)>("keyPressed"), //
		jMethod<::jvoid(::java::awt::event::KeyEvent)>("keyReleased"), //
		jMethod<::jvoid(::java::awt::event::KeyEvent)>("keyTyped"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mouseClicked"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mouseDragged"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mouseEntered"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mouseExited"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mouseMoved"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mousePressed"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mouseReleased"), //
		jMethod<::jvoid(::java::awt::event::MouseWheelEvent)>("mouseWheelMoved"), //
		jMethod<::java::awt::event::ActionListener(::java::awt::event::ActionListener, ::java::awt::event::ActionListener)>("remove"), //
		jMethod<::java::awt::event::AdjustmentListener(::java::awt::event::AdjustmentListener, ::java::awt::event::AdjustmentListener)>("remove"), //
		jMethod<::java::awt::event::ComponentListener(::java::awt::event::ComponentListener, ::java::awt::event::ComponentListener)>("remove"), //
		jMethod<::java::awt::event::ContainerListener(::java::awt::event::ContainerListener, ::java::awt::event::ContainerListener)>("remove"), //
		jMethod<::java::awt::event::FocusListener(::java::awt::event::FocusListener, ::java::awt::event::FocusListener)>("remove"), //
		jMethod<::java::awt::event::HierarchyBoundsListener(::java::awt::event::HierarchyBoundsListener, ::java::awt::event::HierarchyBoundsListener)>("remove"), //
		jMethod<::java::awt::event::HierarchyListener(::java::awt::event::HierarchyListener, ::java::awt::event::HierarchyListener)>("remove"), //
		jMethod<::java::awt::event::InputMethodListener(::java::awt::event::InputMethodListener, ::java::awt::event::InputMethodListener)>("remove"), //
		jMethod<::java::awt::event::ItemListener(::java::awt::event::ItemListener, ::java::awt::event::ItemListener)>("remove"), //
		jMethod<::java::awt::event::KeyListener(::java::awt::event::KeyListener, ::java::awt::event::KeyListener)>("remove"), //
		jMethod<::java::awt::event::MouseListener(::java::awt::event::MouseListener, ::java::awt::event::MouseListener)>("remove"), //
		jMethod<::java::awt::event::MouseMotionListener(::java::awt::event::MouseMotionListener, ::java::awt::event::MouseMotionListener)>("remove"), //
		jMethod<::java::awt::event::MouseWheelListener(::java::awt::event::MouseWheelListener, ::java::awt::event::MouseWheelListener)>("remove"), //
		jMethod<::java::awt::event::TextListener(::java::awt::event::TextListener, ::java::awt::event::TextListener)>("remove"), //
		jMethod<::java::awt::event::WindowFocusListener(::java::awt::event::WindowFocusListener, ::java::awt::event::WindowFocusListener)>("remove"), //
		jMethod<::java::awt::event::WindowListener(::java::awt::event::WindowListener, ::java::awt::event::WindowListener)>("remove"), //
		jMethod<::java::awt::event::WindowStateListener(::java::awt::event::WindowStateListener, ::java::awt::event::WindowStateListener)>("remove"), //
		jMethod<::jvoid(::java::awt::event::TextEvent)>("textValueChanged"), //
		jMethod<::jvoid(::java::awt::event::WindowEvent)>("windowActivated"), //
		jMethod<::jvoid(::java::awt::event::WindowEvent)>("windowClosed"), //
		jMethod<::jvoid(::java::awt::event::WindowEvent)>("windowClosing"), //
		jMethod<::jvoid(::java::awt::event::WindowEvent)>("windowDeactivated"), //
		jMethod<::jvoid(::java::awt::event::WindowEvent)>("windowDeiconified"), //
		jMethod<::jvoid(::java::awt::event::WindowEvent)>("windowGainedFocus"), //
		jMethod<::jvoid(::java::awt::event::WindowEvent)>("windowIconified"), //
		jMethod<::jvoid(::java::awt::event::WindowEvent)>("windowLostFocus"), //
		jMethod<::jvoid(::java::awt::event::WindowEvent)>("windowOpened"), //
		jMethod<::jvoid(::java::awt::event::WindowEvent)>("windowStateChanged"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto actionPerformed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("actionPerformed")] != -1);
		return call<R>("actionPerformed", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::ActionListener, typename... Args>
	static auto add(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("add")] != -1);
		return scall<R>("add", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto adjustmentValueChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("adjustmentValueChanged")] != -1);
		return call<R>("adjustmentValueChanged", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto ancestorMoved(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("ancestorMoved")] != -1);
		return call<R>("ancestorMoved", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto ancestorResized(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("ancestorResized")] != -1);
		return call<R>("ancestorResized", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto caretPositionChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("caretPositionChanged")] != -1);
		return call<R>("caretPositionChanged", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto componentAdded(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("componentAdded")] != -1);
		return call<R>("componentAdded", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto componentHidden(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("componentHidden")] != -1);
		return call<R>("componentHidden", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto componentMoved(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("componentMoved")] != -1);
		return call<R>("componentMoved", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto componentRemoved(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("componentRemoved")] != -1);
		return call<R>("componentRemoved", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto componentResized(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("componentResized")] != -1);
		return call<R>("componentResized", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto componentShown(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("componentShown")] != -1);
		return call<R>("componentShown", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto focusGained(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("focusGained")] != -1);
		return call<R>("focusGained", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto focusLost(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("focusLost")] != -1);
		return call<R>("focusLost", forward<Args>(args)...);
	}

	template<typename R = ::java::util::EventListener *, typename... Args>
	static auto getListeners(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getListeners")] != -1);
		return scall<R>("getListeners", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto hierarchyChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hierarchyChanged")] != -1);
		return call<R>("hierarchyChanged", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto inputMethodTextChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("inputMethodTextChanged")] != -1);
		return call<R>("inputMethodTextChanged", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto itemStateChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("itemStateChanged")] != -1);
		return call<R>("itemStateChanged", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto keyPressed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("keyPressed")] != -1);
		return call<R>("keyPressed", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto keyReleased(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("keyReleased")] != -1);
		return call<R>("keyReleased", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto keyTyped(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("keyTyped")] != -1);
		return call<R>("keyTyped", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mouseClicked(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("mouseClicked")] != -1);
		return call<R>("mouseClicked", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mouseDragged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("mouseDragged")] != -1);
		return call<R>("mouseDragged", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mouseEntered(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("mouseEntered")] != -1);
		return call<R>("mouseEntered", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mouseExited(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("mouseExited")] != -1);
		return call<R>("mouseExited", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mouseMoved(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("mouseMoved")] != -1);
		return call<R>("mouseMoved", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mousePressed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("mousePressed")] != -1);
		return call<R>("mousePressed", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mouseReleased(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("mouseReleased")] != -1);
		return call<R>("mouseReleased", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mouseWheelMoved(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("mouseWheelMoved")] != -1);
		return call<R>("mouseWheelMoved", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::ActionListener, typename... Args>
	static auto remove(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("remove")] != -1);
		return scall<R>("remove", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto textValueChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("textValueChanged")] != -1);
		return call<R>("textValueChanged", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto windowActivated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("windowActivated")] != -1);
		return call<R>("windowActivated", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto windowClosed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("windowClosed")] != -1);
		return call<R>("windowClosed", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto windowClosing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("windowClosing")] != -1);
		return call<R>("windowClosing", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto windowDeactivated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("windowDeactivated")] != -1);
		return call<R>("windowDeactivated", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto windowDeiconified(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("windowDeiconified")] != -1);
		return call<R>("windowDeiconified", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto windowGainedFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("windowGainedFocus")] != -1);
		return call<R>("windowGainedFocus", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto windowIconified(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("windowIconified")] != -1);
		return call<R>("windowIconified", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto windowLostFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("windowLostFocus")] != -1);
		return call<R>("windowLostFocus", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto windowOpened(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("windowOpened")] != -1);
		return call<R>("windowOpened", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto windowStateChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("windowStateChanged")] != -1);
		return call<R>("windowStateChanged", forward<Args>(args)...);
	}

};

#endif
