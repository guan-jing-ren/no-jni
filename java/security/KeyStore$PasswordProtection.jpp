#ifndef java_security_KeyStore$PasswordProtection_HPP
#define java_security_KeyStore$PasswordProtection_HPP

#include "../../jfwd_decl.hpp"

class ::java::security::KeyStore$PasswordProtection : public jObject<::java::security::KeyStore$PasswordProtection, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_security / "KeyStore$PasswordProtection";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jchar *)>(), //
		jConstructor<::jvoid(::jchar *, ::java::lang::String, ::java::security::spec::AlgorithmParameterSpec)>(), //
		jMethod<::jvoid()>("destroy"), //
		jMethod<::jchar *()>("getPassword"), //
		jMethod<::java::lang::String()>("getProtectionAlgorithm"), //
		jMethod<::java::security::spec::AlgorithmParameterSpec()>("getProtectionParameters"), //
		jMethod<::jboolean()>("isDestroyed"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto destroy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("destroy")] != -1);
		return call<R>("destroy", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar *, typename... Args>
	auto getPassword(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPassword")] != -1);
		return call<R>("getPassword", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getProtectionAlgorithm(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProtectionAlgorithm")] != -1);
		return call<R>("getProtectionAlgorithm", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::spec::AlgorithmParameterSpec, typename... Args>
	auto getProtectionParameters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProtectionParameters")] != -1);
		return call<R>("getProtectionParameters", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDestroyed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDestroyed")] != -1);
		return call<R>("isDestroyed", std::forward<Args>(args)...);
	}

};

#endif
