#ifndef java_security_KeyStore$SecretKeyEntry_HPP
#define java_security_KeyStore$SecretKeyEntry_HPP

#include "../../jfwd_decl.hpp"

class ::java::security::KeyStore$SecretKeyEntry : public jObject<::java::security::KeyStore$SecretKeyEntry, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_security / "KeyStore$SecretKeyEntry";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::crypto::SecretKey)>(), //
		jConstructor<::jvoid(::javax::crypto::SecretKey, ::java::util::Set)>(), //
		jMethod<::java::util::Set()>("getAttributes"), //
		jMethod<::javax::crypto::SecretKey()>("getSecretKey"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::util::Set, typename... Args>
	auto getAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttributes")] != -1);
		return call<R>("getAttributes", forward<Args>(args)...);
	}

	template<typename R = ::javax::crypto::SecretKey, typename... Args>
	auto getSecretKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSecretKey")] != -1);
		return call<R>("getSecretKey", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
