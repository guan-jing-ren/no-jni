#ifndef java_security_cert_PolicyNode_HPP
#define java_security_cert_PolicyNode_HPP

#include "../../../jfwd_decl.hpp"

class ::java::security::cert::PolicyNode : public jObject<::java::security::cert::PolicyNode, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_security_cert / "PolicyNode";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::util::Iterator()>("getChildren"), //
		jMethod<::jint()>("getDepth"), //
		jMethod<::java::util::Set()>("getExpectedPolicies"), //
		jMethod<::java::security::cert::PolicyNode()>("getParent"), //
		jMethod<::java::util::Set()>("getPolicyQualifiers"), //
		jMethod<::java::lang::String()>("getValidPolicy"), //
		jMethod<::jboolean()>("isCritical"), //
	};

	template<typename R = ::java::util::Iterator, typename... Args>
	auto getChildren(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChildren")] != -1);
		return call<R>("getChildren", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDepth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDepth")] != -1);
		return call<R>("getDepth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto getExpectedPolicies(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExpectedPolicies")] != -1);
		return call<R>("getExpectedPolicies", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::cert::PolicyNode, typename... Args>
	auto getParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParent")] != -1);
		return call<R>("getParent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto getPolicyQualifiers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPolicyQualifiers")] != -1);
		return call<R>("getPolicyQualifiers", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getValidPolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValidPolicy")] != -1);
		return call<R>("getValidPolicy", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCritical(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCritical")] != -1);
		return call<R>("isCritical", std::forward<Args>(args)...);
	}

};

#endif
