#ifndef java_security_cert_PKIXParameters_HPP
#define java_security_cert_PKIXParameters_HPP

#include "../../../jfwd_decl.hpp"

class ::java::security::cert::PKIXParameters : public jObject<::java::security::cert::PKIXParameters, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_security_cert / "PKIXParameters";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::security::KeyStore)>(), //
		jConstructor<::jvoid(::java::util::Set)>(), //
		jMethod<::jvoid(::java::security::cert::PKIXCertPathChecker)>("addCertPathChecker"), //
		jMethod<::jvoid(::java::security::cert::CertStore)>("addCertStore"), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::java::util::List()>("getCertPathCheckers"), //
		jMethod<::java::util::List()>("getCertStores"), //
		jMethod<::java::util::Date()>("getDate"), //
		jMethod<::java::util::Set()>("getInitialPolicies"), //
		jMethod<::jboolean()>("getPolicyQualifiersRejected"), //
		jMethod<::java::lang::String()>("getSigProvider"), //
		jMethod<::java::security::cert::CertSelector()>("getTargetCertConstraints"), //
		jMethod<::java::util::Set()>("getTrustAnchors"), //
		jMethod<::jboolean()>("isAnyPolicyInhibited"), //
		jMethod<::jboolean()>("isExplicitPolicyRequired"), //
		jMethod<::jboolean()>("isPolicyMappingInhibited"), //
		jMethod<::jboolean()>("isRevocationEnabled"), //
		jMethod<::jvoid(::jboolean)>("setAnyPolicyInhibited"), //
		jMethod<::jvoid(::java::util::List)>("setCertPathCheckers"), //
		jMethod<::jvoid(::java::util::List)>("setCertStores"), //
		jMethod<::jvoid(::java::util::Date)>("setDate"), //
		jMethod<::jvoid(::jboolean)>("setExplicitPolicyRequired"), //
		jMethod<::jvoid(::java::util::Set)>("setInitialPolicies"), //
		jMethod<::jvoid(::jboolean)>("setPolicyMappingInhibited"), //
		jMethod<::jvoid(::jboolean)>("setPolicyQualifiersRejected"), //
		jMethod<::jvoid(::jboolean)>("setRevocationEnabled"), //
		jMethod<::jvoid(::java::lang::String)>("setSigProvider"), //
		jMethod<::jvoid(::java::security::cert::CertSelector)>("setTargetCertConstraints"), //
		jMethod<::jvoid(::java::util::Set)>("setTrustAnchors"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addCertPathChecker(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addCertPathChecker")] != -1);
		return call<R>("addCertPathChecker", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addCertStore(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addCertStore")] != -1);
		return call<R>("addCertStore", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getCertPathCheckers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCertPathCheckers")] != -1);
		return call<R>("getCertPathCheckers", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getCertStores(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCertStores")] != -1);
		return call<R>("getCertStores", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Date, typename... Args>
	auto getDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDate")] != -1);
		return call<R>("getDate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto getInitialPolicies(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInitialPolicies")] != -1);
		return call<R>("getInitialPolicies", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getPolicyQualifiersRejected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPolicyQualifiersRejected")] != -1);
		return call<R>("getPolicyQualifiersRejected", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSigProvider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSigProvider")] != -1);
		return call<R>("getSigProvider", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::cert::CertSelector, typename... Args>
	auto getTargetCertConstraints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTargetCertConstraints")] != -1);
		return call<R>("getTargetCertConstraints", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto getTrustAnchors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTrustAnchors")] != -1);
		return call<R>("getTrustAnchors", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAnyPolicyInhibited(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAnyPolicyInhibited")] != -1);
		return call<R>("isAnyPolicyInhibited", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isExplicitPolicyRequired(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isExplicitPolicyRequired")] != -1);
		return call<R>("isExplicitPolicyRequired", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPolicyMappingInhibited(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPolicyMappingInhibited")] != -1);
		return call<R>("isPolicyMappingInhibited", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRevocationEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isRevocationEnabled")] != -1);
		return call<R>("isRevocationEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAnyPolicyInhibited(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAnyPolicyInhibited")] != -1);
		return call<R>("setAnyPolicyInhibited", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCertPathCheckers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCertPathCheckers")] != -1);
		return call<R>("setCertPathCheckers", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCertStores(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCertStores")] != -1);
		return call<R>("setCertStores", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDate")] != -1);
		return call<R>("setDate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setExplicitPolicyRequired(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setExplicitPolicyRequired")] != -1);
		return call<R>("setExplicitPolicyRequired", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInitialPolicies(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setInitialPolicies")] != -1);
		return call<R>("setInitialPolicies", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPolicyMappingInhibited(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPolicyMappingInhibited")] != -1);
		return call<R>("setPolicyMappingInhibited", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPolicyQualifiersRejected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPolicyQualifiersRejected")] != -1);
		return call<R>("setPolicyQualifiersRejected", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRevocationEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRevocationEnabled")] != -1);
		return call<R>("setRevocationEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSigProvider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSigProvider")] != -1);
		return call<R>("setSigProvider", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTargetCertConstraints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTargetCertConstraints")] != -1);
		return call<R>("setTargetCertConstraints", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTrustAnchors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTrustAnchors")] != -1);
		return call<R>("setTrustAnchors", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
