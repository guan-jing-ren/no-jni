#ifndef java_security_cert_X509CRLSelector_HPP
#define java_security_cert_X509CRLSelector_HPP

#include "../../../jfwd_decl.hpp"

class ::java::security::cert::X509CRLSelector : public jObject<::java::security::cert::X509CRLSelector, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_security_cert / "X509CRLSelector";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::javax::security::auth::x500::X500Principal)>("addIssuer"), //
		jMethod<::jvoid(::java::lang::String)>("addIssuerName"), //
		jMethod<::jvoid(::jbyte *)>("addIssuerName"), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::java::security::cert::X509Certificate()>("getCertificateChecking"), //
		jMethod<::java::util::Date()>("getDateAndTime"), //
		jMethod<::java::util::Collection()>("getIssuerNames"), //
		jMethod<::java::util::Collection()>("getIssuers"), //
		jMethod<::java::math::BigInteger()>("getMaxCRL"), //
		jMethod<::java::math::BigInteger()>("getMinCRL"), //
		jMethod<::jboolean(::java::security::cert::CRL)>("match"), //
		jMethod<::jvoid(::java::security::cert::X509Certificate)>("setCertificateChecking"), //
		jMethod<::jvoid(::java::util::Date)>("setDateAndTime"), //
		jMethod<::jvoid(::java::util::Collection)>("setIssuerNames"), //
		jMethod<::jvoid(::java::util::Collection)>("setIssuers"), //
		jMethod<::jvoid(::java::math::BigInteger)>("setMaxCRLNumber"), //
		jMethod<::jvoid(::java::math::BigInteger)>("setMinCRLNumber"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addIssuer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addIssuer")] != -1);
		return call<R>("addIssuer", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addIssuerName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addIssuerName")] != -1);
		return call<R>("addIssuerName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", forward<Args>(args)...);
	}

	template<typename R = ::java::security::cert::X509Certificate, typename... Args>
	auto getCertificateChecking(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCertificateChecking")] != -1);
		return call<R>("getCertificateChecking", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Date, typename... Args>
	auto getDateAndTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDateAndTime")] != -1);
		return call<R>("getDateAndTime", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Collection, typename... Args>
	auto getIssuerNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getIssuerNames")] != -1);
		return call<R>("getIssuerNames", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Collection, typename... Args>
	auto getIssuers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getIssuers")] != -1);
		return call<R>("getIssuers", forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto getMaxCRL(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaxCRL")] != -1);
		return call<R>("getMaxCRL", forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto getMinCRL(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinCRL")] != -1);
		return call<R>("getMinCRL", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto match(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("match")] != -1);
		return call<R>("match", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCertificateChecking(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCertificateChecking")] != -1);
		return call<R>("setCertificateChecking", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDateAndTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDateAndTime")] != -1);
		return call<R>("setDateAndTime", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIssuerNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setIssuerNames")] != -1);
		return call<R>("setIssuerNames", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIssuers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setIssuers")] != -1);
		return call<R>("setIssuers", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaxCRLNumber(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMaxCRLNumber")] != -1);
		return call<R>("setMaxCRLNumber", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMinCRLNumber(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMinCRLNumber")] != -1);
		return call<R>("setMinCRLNumber", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
