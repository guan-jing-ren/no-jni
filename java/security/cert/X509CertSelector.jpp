#ifndef java_security_cert_X509CertSelector_HPP
#define java_security_cert_X509CertSelector_HPP

#include "../../../jfwd_decl.hpp"

class ::java::security::cert::X509CertSelector : public jObject<::java::security::cert::X509CertSelector, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_security_cert / "X509CertSelector";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::jint, ::java::lang::String)>("addPathToName"), //
		jMethod<::jvoid(::jint, ::jbyte *)>("addPathToName"), //
		jMethod<::jvoid(::jint, ::java::lang::String)>("addSubjectAlternativeName"), //
		jMethod<::jvoid(::jint, ::jbyte *)>("addSubjectAlternativeName"), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jbyte *()>("getAuthorityKeyIdentifier"), //
		jMethod<::jint()>("getBasicConstraints"), //
		jMethod<::java::security::cert::X509Certificate()>("getCertificate"), //
		jMethod<::java::util::Date()>("getCertificateValid"), //
		jMethod<::java::util::Set()>("getExtendedKeyUsage"), //
		jMethod<::javax::security::auth::x500::X500Principal()>("getIssuer"), //
		jMethod<::jbyte *()>("getIssuerAsBytes"), //
		jMethod<::java::lang::String()>("getIssuerAsString"), //
		jMethod<::jboolean *()>("getKeyUsage"), //
		jMethod<::jboolean()>("getMatchAllSubjectAltNames"), //
		jMethod<::jbyte *()>("getNameConstraints"), //
		jMethod<::java::util::Collection()>("getPathToNames"), //
		jMethod<::java::util::Set()>("getPolicy"), //
		jMethod<::java::util::Date()>("getPrivateKeyValid"), //
		jMethod<::java::math::BigInteger()>("getSerialNumber"), //
		jMethod<::javax::security::auth::x500::X500Principal()>("getSubject"), //
		jMethod<::java::util::Collection()>("getSubjectAlternativeNames"), //
		jMethod<::jbyte *()>("getSubjectAsBytes"), //
		jMethod<::java::lang::String()>("getSubjectAsString"), //
		jMethod<::jbyte *()>("getSubjectKeyIdentifier"), //
		jMethod<::java::security::PublicKey()>("getSubjectPublicKey"), //
		jMethod<::java::lang::String()>("getSubjectPublicKeyAlgID"), //
		jMethod<::jboolean(::java::security::cert::Certificate)>("match"), //
		jMethod<::jvoid(::jbyte *)>("setAuthorityKeyIdentifier"), //
		jMethod<::jvoid(::jint)>("setBasicConstraints"), //
		jMethod<::jvoid(::java::security::cert::X509Certificate)>("setCertificate"), //
		jMethod<::jvoid(::java::util::Date)>("setCertificateValid"), //
		jMethod<::jvoid(::java::util::Set)>("setExtendedKeyUsage"), //
		jMethod<::jvoid(::java::lang::String)>("setIssuer"), //
		jMethod<::jvoid(::javax::security::auth::x500::X500Principal)>("setIssuer"), //
		jMethod<::jvoid(::jbyte *)>("setIssuer"), //
		jMethod<::jvoid(::jboolean *)>("setKeyUsage"), //
		jMethod<::jvoid(::jboolean)>("setMatchAllSubjectAltNames"), //
		jMethod<::jvoid(::jbyte *)>("setNameConstraints"), //
		jMethod<::jvoid(::java::util::Collection)>("setPathToNames"), //
		jMethod<::jvoid(::java::util::Set)>("setPolicy"), //
		jMethod<::jvoid(::java::util::Date)>("setPrivateKeyValid"), //
		jMethod<::jvoid(::java::math::BigInteger)>("setSerialNumber"), //
		jMethod<::jvoid(::java::lang::String)>("setSubject"), //
		jMethod<::jvoid(::javax::security::auth::x500::X500Principal)>("setSubject"), //
		jMethod<::jvoid(::jbyte *)>("setSubject"), //
		jMethod<::jvoid(::java::util::Collection)>("setSubjectAlternativeNames"), //
		jMethod<::jvoid(::jbyte *)>("setSubjectKeyIdentifier"), //
		jMethod<::jvoid(::java::security::PublicKey)>("setSubjectPublicKey"), //
		jMethod<::jvoid(::jbyte *)>("setSubjectPublicKey"), //
		jMethod<::jvoid(::java::lang::String)>("setSubjectPublicKeyAlgID"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addPathToName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addPathToName")] != -1);
		return call<R>("addPathToName", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addSubjectAlternativeName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addSubjectAlternativeName")] != -1);
		return call<R>("addSubjectAlternativeName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getAuthorityKeyIdentifier(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAuthorityKeyIdentifier")] != -1);
		return call<R>("getAuthorityKeyIdentifier", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBasicConstraints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBasicConstraints")] != -1);
		return call<R>("getBasicConstraints", forward<Args>(args)...);
	}

	template<typename R = ::java::security::cert::X509Certificate, typename... Args>
	auto getCertificate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCertificate")] != -1);
		return call<R>("getCertificate", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Date, typename... Args>
	auto getCertificateValid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCertificateValid")] != -1);
		return call<R>("getCertificateValid", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto getExtendedKeyUsage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getExtendedKeyUsage")] != -1);
		return call<R>("getExtendedKeyUsage", forward<Args>(args)...);
	}

	template<typename R = ::javax::security::auth::x500::X500Principal, typename... Args>
	auto getIssuer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getIssuer")] != -1);
		return call<R>("getIssuer", forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getIssuerAsBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getIssuerAsBytes")] != -1);
		return call<R>("getIssuerAsBytes", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getIssuerAsString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getIssuerAsString")] != -1);
		return call<R>("getIssuerAsString", forward<Args>(args)...);
	}

	template<typename R = ::jboolean *, typename... Args>
	auto getKeyUsage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getKeyUsage")] != -1);
		return call<R>("getKeyUsage", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getMatchAllSubjectAltNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMatchAllSubjectAltNames")] != -1);
		return call<R>("getMatchAllSubjectAltNames", forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getNameConstraints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNameConstraints")] != -1);
		return call<R>("getNameConstraints", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Collection, typename... Args>
	auto getPathToNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPathToNames")] != -1);
		return call<R>("getPathToNames", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto getPolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPolicy")] != -1);
		return call<R>("getPolicy", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Date, typename... Args>
	auto getPrivateKeyValid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPrivateKeyValid")] != -1);
		return call<R>("getPrivateKeyValid", forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto getSerialNumber(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSerialNumber")] != -1);
		return call<R>("getSerialNumber", forward<Args>(args)...);
	}

	template<typename R = ::javax::security::auth::x500::X500Principal, typename... Args>
	auto getSubject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSubject")] != -1);
		return call<R>("getSubject", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Collection, typename... Args>
	auto getSubjectAlternativeNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSubjectAlternativeNames")] != -1);
		return call<R>("getSubjectAlternativeNames", forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getSubjectAsBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSubjectAsBytes")] != -1);
		return call<R>("getSubjectAsBytes", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSubjectAsString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSubjectAsString")] != -1);
		return call<R>("getSubjectAsString", forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getSubjectKeyIdentifier(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSubjectKeyIdentifier")] != -1);
		return call<R>("getSubjectKeyIdentifier", forward<Args>(args)...);
	}

	template<typename R = ::java::security::PublicKey, typename... Args>
	auto getSubjectPublicKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSubjectPublicKey")] != -1);
		return call<R>("getSubjectPublicKey", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSubjectPublicKeyAlgID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSubjectPublicKeyAlgID")] != -1);
		return call<R>("getSubjectPublicKeyAlgID", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto match(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("match")] != -1);
		return call<R>("match", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAuthorityKeyIdentifier(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setAuthorityKeyIdentifier")] != -1);
		return call<R>("setAuthorityKeyIdentifier", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBasicConstraints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBasicConstraints")] != -1);
		return call<R>("setBasicConstraints", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCertificate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCertificate")] != -1);
		return call<R>("setCertificate", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCertificateValid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCertificateValid")] != -1);
		return call<R>("setCertificateValid", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setExtendedKeyUsage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setExtendedKeyUsage")] != -1);
		return call<R>("setExtendedKeyUsage", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIssuer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setIssuer")] != -1);
		return call<R>("setIssuer", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setKeyUsage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setKeyUsage")] != -1);
		return call<R>("setKeyUsage", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMatchAllSubjectAltNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMatchAllSubjectAltNames")] != -1);
		return call<R>("setMatchAllSubjectAltNames", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNameConstraints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setNameConstraints")] != -1);
		return call<R>("setNameConstraints", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPathToNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPathToNames")] != -1);
		return call<R>("setPathToNames", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPolicy")] != -1);
		return call<R>("setPolicy", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPrivateKeyValid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPrivateKeyValid")] != -1);
		return call<R>("setPrivateKeyValid", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSerialNumber(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSerialNumber")] != -1);
		return call<R>("setSerialNumber", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSubject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSubject")] != -1);
		return call<R>("setSubject", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSubjectAlternativeNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSubjectAlternativeNames")] != -1);
		return call<R>("setSubjectAlternativeNames", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSubjectKeyIdentifier(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSubjectKeyIdentifier")] != -1);
		return call<R>("setSubjectKeyIdentifier", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSubjectPublicKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSubjectPublicKey")] != -1);
		return call<R>("setSubjectPublicKey", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSubjectPublicKeyAlgID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSubjectPublicKeyAlgID")] != -1);
		return call<R>("setSubjectPublicKeyAlgID", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
