#ifndef java_security_cert_X509CRL_HPP
#define java_security_cert_X509CRL_HPP

#include "../../../jfwd_decl.hpp"

class ::java::security::cert::X509CRL : public jObject<::java::security::cert::X509CRL, ::java::security::cert::CRL> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_security_cert / "X509CRL";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jbyte *()>("getEncoded"), //
		jMethod<::java::security::Principal()>("getIssuerDN"), //
		jMethod<::javax::security::auth::x500::X500Principal()>("getIssuerX500Principal"), //
		jMethod<::java::util::Date()>("getNextUpdate"), //
		jMethod<::java::security::cert::X509CRLEntry(::java::math::BigInteger)>("getRevokedCertificate"), //
		jMethod<::java::security::cert::X509CRLEntry(::java::security::cert::X509Certificate)>("getRevokedCertificate"), //
		jMethod<::java::util::Set()>("getRevokedCertificates"), //
		jMethod<::java::lang::String()>("getSigAlgName"), //
		jMethod<::java::lang::String()>("getSigAlgOID"), //
		jMethod<::jbyte *()>("getSigAlgParams"), //
		jMethod<::jbyte *()>("getSignature"), //
		jMethod<::jbyte *()>("getTBSCertList"), //
		jMethod<::java::util::Date()>("getThisUpdate"), //
		jMethod<::jint()>("getVersion"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jvoid(::java::security::PublicKey)>("verify"), //
		jMethod<::jvoid(::java::security::PublicKey, ::java::lang::String)>("verify"), //
		jMethod<::jvoid(::java::security::PublicKey, ::java::security::Provider)>("verify"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getEncoded(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getEncoded")] != -1);
		return call<R>("getEncoded", forward<Args>(args)...);
	}

	template<typename R = ::java::security::Principal, typename... Args>
	auto getIssuerDN(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getIssuerDN")] != -1);
		return call<R>("getIssuerDN", forward<Args>(args)...);
	}

	template<typename R = ::javax::security::auth::x500::X500Principal, typename... Args>
	auto getIssuerX500Principal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getIssuerX500Principal")] != -1);
		return call<R>("getIssuerX500Principal", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Date, typename... Args>
	auto getNextUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNextUpdate")] != -1);
		return call<R>("getNextUpdate", forward<Args>(args)...);
	}

	template<typename R = ::java::security::cert::X509CRLEntry, typename... Args>
	auto getRevokedCertificate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRevokedCertificate")] != -1);
		return call<R>("getRevokedCertificate", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto getRevokedCertificates(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRevokedCertificates")] != -1);
		return call<R>("getRevokedCertificates", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSigAlgName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSigAlgName")] != -1);
		return call<R>("getSigAlgName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSigAlgOID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSigAlgOID")] != -1);
		return call<R>("getSigAlgOID", forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getSigAlgParams(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSigAlgParams")] != -1);
		return call<R>("getSigAlgParams", forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getSignature(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSignature")] != -1);
		return call<R>("getSignature", forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getTBSCertList(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTBSCertList")] != -1);
		return call<R>("getTBSCertList", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Date, typename... Args>
	auto getThisUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getThisUpdate")] != -1);
		return call<R>("getThisUpdate", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getVersion")] != -1);
		return call<R>("getVersion", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto verify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("verify")] != -1);
		return call<R>("verify", forward<Args>(args)...);
	}

};

#endif
