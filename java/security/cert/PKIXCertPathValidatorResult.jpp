#ifndef java_security_cert_PKIXCertPathValidatorResult_HPP
#define java_security_cert_PKIXCertPathValidatorResult_HPP

#include "../../../jfwd_decl.hpp"

class ::java::security::cert::PKIXCertPathValidatorResult : public jObject<::java::security::cert::PKIXCertPathValidatorResult, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_security_cert / "PKIXCertPathValidatorResult";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::security::cert::TrustAnchor, ::java::security::cert::PolicyNode, ::java::security::PublicKey)>(), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::java::security::cert::PolicyNode()>("getPolicyTree"), //
		jMethod<::java::security::PublicKey()>("getPublicKey"), //
		jMethod<::java::security::cert::TrustAnchor()>("getTrustAnchor"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::cert::PolicyNode, typename... Args>
	auto getPolicyTree(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPolicyTree")] != -1);
		return call<R>("getPolicyTree", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::PublicKey, typename... Args>
	auto getPublicKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPublicKey")] != -1);
		return call<R>("getPublicKey", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::cert::TrustAnchor, typename... Args>
	auto getTrustAnchor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTrustAnchor")] != -1);
		return call<R>("getTrustAnchor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
