#ifndef java_security_cert_X509Certificate_HPP
#define java_security_cert_X509Certificate_HPP

#include "../../../jfwd_decl.hpp"

class ::java::security::cert::X509Certificate : public jObject<::java::security::cert::X509Certificate, ::java::security::cert::Certificate> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_security_cert / "X509Certificate";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("checkValidity"), //
		jMethod<::jvoid(::java::util::Date)>("checkValidity"), //
		jMethod<::jint()>("getBasicConstraints"), //
		jMethod<::java::util::List()>("getExtendedKeyUsage"), //
		jMethod<::java::util::Collection()>("getIssuerAlternativeNames"), //
		jMethod<::java::security::Principal()>("getIssuerDN"), //
		jMethod<::jboolean *()>("getIssuerUniqueID"), //
		jMethod<::javax::security::auth::x500::X500Principal()>("getIssuerX500Principal"), //
		jMethod<::jboolean *()>("getKeyUsage"), //
		jMethod<::java::util::Date()>("getNotAfter"), //
		jMethod<::java::util::Date()>("getNotBefore"), //
		jMethod<::java::math::BigInteger()>("getSerialNumber"), //
		jMethod<::java::lang::String()>("getSigAlgName"), //
		jMethod<::java::lang::String()>("getSigAlgOID"), //
		jMethod<::jbyte *()>("getSigAlgParams"), //
		jMethod<::jbyte *()>("getSignature"), //
		jMethod<::java::util::Collection()>("getSubjectAlternativeNames"), //
		jMethod<::java::security::Principal()>("getSubjectDN"), //
		jMethod<::jboolean *()>("getSubjectUniqueID"), //
		jMethod<::javax::security::auth::x500::X500Principal()>("getSubjectX500Principal"), //
		jMethod<::jbyte *()>("getTBSCertificate"), //
		jMethod<::jint()>("getVersion"), //
		jMethod<::jvoid(::java::security::PublicKey, ::java::security::Provider)>("verify"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto checkValidity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkValidity")] != -1);
		return call<R>("checkValidity", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBasicConstraints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBasicConstraints")] != -1);
		return call<R>("getBasicConstraints", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getExtendedKeyUsage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExtendedKeyUsage")] != -1);
		return call<R>("getExtendedKeyUsage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Collection, typename... Args>
	auto getIssuerAlternativeNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIssuerAlternativeNames")] != -1);
		return call<R>("getIssuerAlternativeNames", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::Principal, typename... Args>
	auto getIssuerDN(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIssuerDN")] != -1);
		return call<R>("getIssuerDN", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean *, typename... Args>
	auto getIssuerUniqueID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIssuerUniqueID")] != -1);
		return call<R>("getIssuerUniqueID", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::security::auth::x500::X500Principal, typename... Args>
	auto getIssuerX500Principal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIssuerX500Principal")] != -1);
		return call<R>("getIssuerX500Principal", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean *, typename... Args>
	auto getKeyUsage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeyUsage")] != -1);
		return call<R>("getKeyUsage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Date, typename... Args>
	auto getNotAfter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNotAfter")] != -1);
		return call<R>("getNotAfter", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Date, typename... Args>
	auto getNotBefore(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNotBefore")] != -1);
		return call<R>("getNotBefore", std::forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto getSerialNumber(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSerialNumber")] != -1);
		return call<R>("getSerialNumber", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSigAlgName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSigAlgName")] != -1);
		return call<R>("getSigAlgName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSigAlgOID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSigAlgOID")] != -1);
		return call<R>("getSigAlgOID", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getSigAlgParams(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSigAlgParams")] != -1);
		return call<R>("getSigAlgParams", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getSignature(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSignature")] != -1);
		return call<R>("getSignature", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Collection, typename... Args>
	auto getSubjectAlternativeNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSubjectAlternativeNames")] != -1);
		return call<R>("getSubjectAlternativeNames", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::Principal, typename... Args>
	auto getSubjectDN(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSubjectDN")] != -1);
		return call<R>("getSubjectDN", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean *, typename... Args>
	auto getSubjectUniqueID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSubjectUniqueID")] != -1);
		return call<R>("getSubjectUniqueID", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::security::auth::x500::X500Principal, typename... Args>
	auto getSubjectX500Principal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSubjectX500Principal")] != -1);
		return call<R>("getSubjectX500Principal", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getTBSCertificate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTBSCertificate")] != -1);
		return call<R>("getTBSCertificate", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVersion")] != -1);
		return call<R>("getVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto verify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("verify")] != -1);
		return call<R>("verify", std::forward<Args>(args)...);
	}

};

#endif
