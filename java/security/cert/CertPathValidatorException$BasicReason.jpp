#ifndef java_security_cert_CertPathValidatorException$BasicReason_HPP
#define java_security_cert_CertPathValidatorException$BasicReason_HPP

#include "../../../jfwd_decl.hpp"

class ::java::security::cert::CertPathValidatorException$BasicReason : public jObject<::java::security::cert::CertPathValidatorException$BasicReason, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_security_cert / "CertPathValidatorException$BasicReason";

	constexpr static Enume field_signatures{
		jField<::java::security::cert::CertPathValidatorException$BasicReason>("ALGORITHM_CONSTRAINED"), //
		jField<::java::security::cert::CertPathValidatorException$BasicReason>("EXPIRED"), //
		jField<::java::security::cert::CertPathValidatorException$BasicReason>("INVALID_SIGNATURE"), //
		jField<::java::security::cert::CertPathValidatorException$BasicReason>("NOT_YET_VALID"), //
		jField<::java::security::cert::CertPathValidatorException$BasicReason>("REVOKED"), //
		jField<::java::security::cert::CertPathValidatorException$BasicReason>("UNDETERMINED_REVOCATION_STATUS"), //
		jField<::java::security::cert::CertPathValidatorException$BasicReason>("UNSPECIFIED"), //
	};

	template<typename F = ::java::security::cert::CertPathValidatorException$BasicReason>
	static auto ALGORITHM_CONSTRAINED() {
		static_assert(field_signatures[jField<F>("ALGORITHM_CONSTRAINED")] != -1);
		return sat<F>("ALGORITHM_CONSTRAINED");
	}

	template<typename F = ::java::security::cert::CertPathValidatorException$BasicReason>
	static auto EXPIRED() {
		static_assert(field_signatures[jField<F>("EXPIRED")] != -1);
		return sat<F>("EXPIRED");
	}

	template<typename F = ::java::security::cert::CertPathValidatorException$BasicReason>
	static auto INVALID_SIGNATURE() {
		static_assert(field_signatures[jField<F>("INVALID_SIGNATURE")] != -1);
		return sat<F>("INVALID_SIGNATURE");
	}

	template<typename F = ::java::security::cert::CertPathValidatorException$BasicReason>
	static auto NOT_YET_VALID() {
		static_assert(field_signatures[jField<F>("NOT_YET_VALID")] != -1);
		return sat<F>("NOT_YET_VALID");
	}

	template<typename F = ::java::security::cert::CertPathValidatorException$BasicReason>
	static auto REVOKED() {
		static_assert(field_signatures[jField<F>("REVOKED")] != -1);
		return sat<F>("REVOKED");
	}

	template<typename F = ::java::security::cert::CertPathValidatorException$BasicReason>
	static auto UNDETERMINED_REVOCATION_STATUS() {
		static_assert(field_signatures[jField<F>("UNDETERMINED_REVOCATION_STATUS")] != -1);
		return sat<F>("UNDETERMINED_REVOCATION_STATUS");
	}

	template<typename F = ::java::security::cert::CertPathValidatorException$BasicReason>
	static auto UNSPECIFIED() {
		static_assert(field_signatures[jField<F>("UNSPECIFIED")] != -1);
		return sat<F>("UNSPECIFIED");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::security::cert::CertPathValidatorException$BasicReason(::java::lang::String)>("valueOf"), //
		jMethod<::java::security::cert::CertPathValidatorException$BasicReason *()>("values"), //
	};

	template<typename R = ::java::security::cert::CertPathValidatorException$BasicReason, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::cert::CertPathValidatorException$BasicReason *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
