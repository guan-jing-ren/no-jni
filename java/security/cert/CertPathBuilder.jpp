#ifndef java_security_cert_CertPathBuilder_HPP
#define java_security_cert_CertPathBuilder_HPP

#include "../../../jfwd_decl.hpp"

class ::java::security::cert::CertPathBuilder : public jObject<::java::security::cert::CertPathBuilder, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_security_cert / "CertPathBuilder";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::security::cert::CertPathBuilderResult(::java::security::cert::CertPathParameters)>("build"), //
		jMethod<::java::lang::String()>("getAlgorithm"), //
		jMethod<::java::lang::String()>("getDefaultType"), //
		jMethod<::java::security::cert::CertPathBuilder(::java::lang::String)>("getInstance"), //
		jMethod<::java::security::cert::CertPathBuilder(::java::lang::String, ::java::lang::String)>("getInstance"), //
		jMethod<::java::security::cert::CertPathBuilder(::java::lang::String, ::java::security::Provider)>("getInstance"), //
		jMethod<::java::security::Provider()>("getProvider"), //
		jMethod<::java::security::cert::CertPathChecker()>("getRevocationChecker"), //
	};

	template<typename R = ::java::security::cert::CertPathBuilderResult, typename... Args>
	auto build(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("build")] != -1);
		return call<R>("build", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAlgorithm(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAlgorithm")] != -1);
		return call<R>("getAlgorithm", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getDefaultType(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDefaultType")] != -1);
		return scall<R>("getDefaultType", forward<Args>(args)...);
	}

	template<typename R = ::java::security::cert::CertPathBuilder, typename... Args>
	static auto getInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInstance")] != -1);
		return scall<R>("getInstance", forward<Args>(args)...);
	}

	template<typename R = ::java::security::Provider, typename... Args>
	auto getProvider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getProvider")] != -1);
		return call<R>("getProvider", forward<Args>(args)...);
	}

	template<typename R = ::java::security::cert::CertPathChecker, typename... Args>
	auto getRevocationChecker(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRevocationChecker")] != -1);
		return call<R>("getRevocationChecker", forward<Args>(args)...);
	}

};

#endif
