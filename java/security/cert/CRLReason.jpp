#ifndef java_security_cert_CRLReason_HPP
#define java_security_cert_CRLReason_HPP

#include "../../../jfwd_decl.hpp"

class ::java::security::cert::CRLReason : public jObject<::java::security::cert::CRLReason, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_security_cert / "CRLReason";

	constexpr static Enume field_signatures{
		jField<::java::security::cert::CRLReason>("AA_COMPROMISE"), //
		jField<::java::security::cert::CRLReason>("AFFILIATION_CHANGED"), //
		jField<::java::security::cert::CRLReason>("CA_COMPROMISE"), //
		jField<::java::security::cert::CRLReason>("CERTIFICATE_HOLD"), //
		jField<::java::security::cert::CRLReason>("CESSATION_OF_OPERATION"), //
		jField<::java::security::cert::CRLReason>("KEY_COMPROMISE"), //
		jField<::java::security::cert::CRLReason>("PRIVILEGE_WITHDRAWN"), //
		jField<::java::security::cert::CRLReason>("REMOVE_FROM_CRL"), //
		jField<::java::security::cert::CRLReason>("SUPERSEDED"), //
		jField<::java::security::cert::CRLReason>("UNSPECIFIED"), //
		jField<::java::security::cert::CRLReason>("UNUSED"), //
	};

	template<typename F = ::java::security::cert::CRLReason>
	static auto AA_COMPROMISE() {
		static_assert(field_signatures[jField<F>("AA_COMPROMISE")] != -1);
		return sat<F>("AA_COMPROMISE");
	}

	template<typename F = ::java::security::cert::CRLReason>
	static auto AFFILIATION_CHANGED() {
		static_assert(field_signatures[jField<F>("AFFILIATION_CHANGED")] != -1);
		return sat<F>("AFFILIATION_CHANGED");
	}

	template<typename F = ::java::security::cert::CRLReason>
	static auto CA_COMPROMISE() {
		static_assert(field_signatures[jField<F>("CA_COMPROMISE")] != -1);
		return sat<F>("CA_COMPROMISE");
	}

	template<typename F = ::java::security::cert::CRLReason>
	static auto CERTIFICATE_HOLD() {
		static_assert(field_signatures[jField<F>("CERTIFICATE_HOLD")] != -1);
		return sat<F>("CERTIFICATE_HOLD");
	}

	template<typename F = ::java::security::cert::CRLReason>
	static auto CESSATION_OF_OPERATION() {
		static_assert(field_signatures[jField<F>("CESSATION_OF_OPERATION")] != -1);
		return sat<F>("CESSATION_OF_OPERATION");
	}

	template<typename F = ::java::security::cert::CRLReason>
	static auto KEY_COMPROMISE() {
		static_assert(field_signatures[jField<F>("KEY_COMPROMISE")] != -1);
		return sat<F>("KEY_COMPROMISE");
	}

	template<typename F = ::java::security::cert::CRLReason>
	static auto PRIVILEGE_WITHDRAWN() {
		static_assert(field_signatures[jField<F>("PRIVILEGE_WITHDRAWN")] != -1);
		return sat<F>("PRIVILEGE_WITHDRAWN");
	}

	template<typename F = ::java::security::cert::CRLReason>
	static auto REMOVE_FROM_CRL() {
		static_assert(field_signatures[jField<F>("REMOVE_FROM_CRL")] != -1);
		return sat<F>("REMOVE_FROM_CRL");
	}

	template<typename F = ::java::security::cert::CRLReason>
	static auto SUPERSEDED() {
		static_assert(field_signatures[jField<F>("SUPERSEDED")] != -1);
		return sat<F>("SUPERSEDED");
	}

	template<typename F = ::java::security::cert::CRLReason>
	static auto UNSPECIFIED() {
		static_assert(field_signatures[jField<F>("UNSPECIFIED")] != -1);
		return sat<F>("UNSPECIFIED");
	}

	template<typename F = ::java::security::cert::CRLReason>
	static auto UNUSED() {
		static_assert(field_signatures[jField<F>("UNUSED")] != -1);
		return sat<F>("UNUSED");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::security::cert::CRLReason(::java::lang::String)>("valueOf"), //
		jMethod<::java::security::cert::CRLReason *()>("values"), //
	};

	template<typename R = ::java::security::cert::CRLReason, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::cert::CRLReason *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
