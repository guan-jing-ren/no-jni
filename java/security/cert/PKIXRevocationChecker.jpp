#ifndef java_security_cert_PKIXRevocationChecker_HPP
#define java_security_cert_PKIXRevocationChecker_HPP

#include "../../../jfwd_decl.hpp"

class ::java::security::cert::PKIXRevocationChecker : public jObject<::java::security::cert::PKIXRevocationChecker, ::java::security::cert::PKIXCertPathChecker> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_security_cert / "PKIXRevocationChecker";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::java::security::cert::PKIXRevocationChecker()>("clone"), //
		jMethod<::java::util::List()>("getOcspExtensions"), //
		jMethod<::java::net::URI()>("getOcspResponder"), //
		jMethod<::java::security::cert::X509Certificate()>("getOcspResponderCert"), //
		jMethod<::java::util::Map()>("getOcspResponses"), //
		jMethod<::java::util::Set()>("getOptions"), //
		jMethod<::java::util::List()>("getSoftFailExceptions"), //
		jMethod<::jvoid(::java::util::List)>("setOcspExtensions"), //
		jMethod<::jvoid(::java::net::URI)>("setOcspResponder"), //
		jMethod<::jvoid(::java::security::cert::X509Certificate)>("setOcspResponderCert"), //
		jMethod<::jvoid(::java::util::Map)>("setOcspResponses"), //
		jMethod<::jvoid(::java::util::Set)>("setOptions"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getOcspExtensions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOcspExtensions")] != -1);
		return call<R>("getOcspExtensions", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::URI, typename... Args>
	auto getOcspResponder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOcspResponder")] != -1);
		return call<R>("getOcspResponder", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::cert::X509Certificate, typename... Args>
	auto getOcspResponderCert(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOcspResponderCert")] != -1);
		return call<R>("getOcspResponderCert", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getOcspResponses(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOcspResponses")] != -1);
		return call<R>("getOcspResponses", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto getOptions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOptions")] != -1);
		return call<R>("getOptions", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getSoftFailExceptions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSoftFailExceptions")] != -1);
		return call<R>("getSoftFailExceptions", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOcspExtensions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOcspExtensions")] != -1);
		return call<R>("setOcspExtensions", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOcspResponder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOcspResponder")] != -1);
		return call<R>("setOcspResponder", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOcspResponderCert(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOcspResponderCert")] != -1);
		return call<R>("setOcspResponderCert", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOcspResponses(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOcspResponses")] != -1);
		return call<R>("setOcspResponses", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOptions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOptions")] != -1);
		return call<R>("setOptions", std::forward<Args>(args)...);
	}

};

#endif
