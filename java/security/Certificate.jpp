#ifndef java_security_Certificate_HPP
#define java_security_Certificate_HPP

#include "../../jfwd_decl.hpp"

class ::java::security::Certificate : public jObject<::java::security::Certificate, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_security / "Certificate";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::io::InputStream)>("decode"), //
		jMethod<::jvoid(::java::io::OutputStream)>("encode"), //
		jMethod<::java::lang::String()>("getFormat"), //
		jMethod<::java::security::Principal()>("getGuarantor"), //
		jMethod<::java::security::Principal()>("getPrincipal"), //
		jMethod<::java::security::PublicKey()>("getPublicKey"), //
		jMethod<::java::lang::String(::jboolean)>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto decode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("decode")] != -1);
		return call<R>("decode", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto encode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("encode")] != -1);
		return call<R>("encode", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFormat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFormat")] != -1);
		return call<R>("getFormat", forward<Args>(args)...);
	}

	template<typename R = ::java::security::Principal, typename... Args>
	auto getGuarantor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getGuarantor")] != -1);
		return call<R>("getGuarantor", forward<Args>(args)...);
	}

	template<typename R = ::java::security::Principal, typename... Args>
	auto getPrincipal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPrincipal")] != -1);
		return call<R>("getPrincipal", forward<Args>(args)...);
	}

	template<typename R = ::java::security::PublicKey, typename... Args>
	auto getPublicKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPublicKey")] != -1);
		return call<R>("getPublicKey", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
