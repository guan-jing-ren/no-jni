#ifndef java_security_DigestOutputStream_HPP
#define java_security_DigestOutputStream_HPP

#include "../../jfwd_decl.hpp"

class ::java::security::DigestOutputStream : public jObject<::java::security::DigestOutputStream, ::java::io::FilterOutputStream> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_security / "DigestOutputStream";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::io::OutputStream, ::java::security::MessageDigest)>(), //
		jMethod<::java::security::MessageDigest()>("getMessageDigest"), //
		jMethod<::jvoid(::jboolean)>("on"), //
		jMethod<::jvoid(::java::security::MessageDigest)>("setMessageDigest"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid(::jint)>("write"), //
		jMethod<::jvoid(::jbyte *, ::jint, ::jint)>("write"), //
	};

	template<typename R = ::java::security::MessageDigest, typename... Args>
	auto getMessageDigest(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMessageDigest")] != -1);
		return call<R>("getMessageDigest", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto on(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("on")] != -1);
		return call<R>("on", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMessageDigest(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMessageDigest")] != -1);
		return call<R>("setMessageDigest", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write")] != -1);
		return call<R>("write", forward<Args>(args)...);
	}

};

#endif
