#ifndef java_security_spec_RSAPrivateCrtKeySpec_HPP
#define java_security_spec_RSAPrivateCrtKeySpec_HPP

#include "../../../jfwd_decl.hpp"

class ::java::security::spec::RSAPrivateCrtKeySpec : public jObject<::java::security::spec::RSAPrivateCrtKeySpec, ::java::security::spec::RSAPrivateKeySpec> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_security_spec / "RSAPrivateCrtKeySpec";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::math::BigInteger, ::java::math::BigInteger, ::java::math::BigInteger, ::java::math::BigInteger, ::java::math::BigInteger, ::java::math::BigInteger, ::java::math::BigInteger, ::java::math::BigInteger)>(), //
		jMethod<::java::math::BigInteger()>("getCrtCoefficient"), //
		jMethod<::java::math::BigInteger()>("getPrimeExponentP"), //
		jMethod<::java::math::BigInteger()>("getPrimeExponentQ"), //
		jMethod<::java::math::BigInteger()>("getPrimeP"), //
		jMethod<::java::math::BigInteger()>("getPrimeQ"), //
		jMethod<::java::math::BigInteger()>("getPublicExponent"), //
	};

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto getCrtCoefficient(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCrtCoefficient")] != -1);
		return call<R>("getCrtCoefficient", forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto getPrimeExponentP(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPrimeExponentP")] != -1);
		return call<R>("getPrimeExponentP", forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto getPrimeExponentQ(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPrimeExponentQ")] != -1);
		return call<R>("getPrimeExponentQ", forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto getPrimeP(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPrimeP")] != -1);
		return call<R>("getPrimeP", forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto getPrimeQ(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPrimeQ")] != -1);
		return call<R>("getPrimeQ", forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto getPublicExponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPublicExponent")] != -1);
		return call<R>("getPublicExponent", forward<Args>(args)...);
	}

};

#endif
