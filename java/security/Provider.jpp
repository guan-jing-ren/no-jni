#ifndef java_security_Provider_HPP
#define java_security_Provider_HPP

#include "../../jfwd_decl.hpp"

class ::java::security::Provider : public jObject<::java::security::Provider, ::java::util::Properties> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_security / "Provider";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("clear"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::util::function::BiFunction)>("compute"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::util::function::Function)>("computeIfAbsent"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::util::function::BiFunction)>("computeIfPresent"), //
		jMethod<::java::util::Enumeration()>("elements"), //
		jMethod<::java::util::Set()>("entrySet"), //
		jMethod<::jvoid(::java::util::function::BiConsumer)>("forEach"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("get"), //
		jMethod<::java::lang::String()>("getInfo"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Object)>("getOrDefault"), //
		jMethod<::java::lang::String(::java::lang::String)>("getProperty"), //
		jMethod<::java::security::Provider$Service(::java::lang::String, ::java::lang::String)>("getService"), //
		jMethod<::java::util::Set()>("getServices"), //
		jMethod<::jdouble()>("getVersion"), //
		jMethod<::java::util::Set()>("keySet"), //
		jMethod<::java::util::Enumeration()>("keys"), //
		jMethod<::jvoid(::java::io::InputStream)>("load"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Object, ::java::util::function::BiFunction)>("merge"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Object)>("put"), //
		jMethod<::jvoid(::java::util::Map)>("putAll"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Object)>("putIfAbsent"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("remove"), //
		jMethod<::jboolean(::java::lang::Object, ::java::lang::Object)>("remove"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Object)>("replace"), //
		jMethod<::jboolean(::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("replace"), //
		jMethod<::jvoid(::java::util::function::BiFunction)>("replaceAll"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::util::Collection()>("values"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto compute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compute")] != -1);
		return call<R>("compute", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto computeIfAbsent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("computeIfAbsent")] != -1);
		return call<R>("computeIfAbsent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto computeIfPresent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("computeIfPresent")] != -1);
		return call<R>("computeIfPresent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto elements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("elements")] != -1);
		return call<R>("elements", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto entrySet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("entrySet")] != -1);
		return call<R>("entrySet", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto forEach(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("forEach")] != -1);
		return call<R>("forEach", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInfo")] != -1);
		return call<R>("getInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getOrDefault(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOrDefault")] != -1);
		return call<R>("getOrDefault", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProperty")] != -1);
		return call<R>("getProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::Provider$Service, typename... Args>
	auto getService(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getService")] != -1);
		return call<R>("getService", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto getServices(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServices")] != -1);
		return call<R>("getServices", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVersion")] != -1);
		return call<R>("getVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto keySet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("keySet")] != -1);
		return call<R>("keySet", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto keys(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("keys")] != -1);
		return call<R>("keys", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto load(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("load")] != -1);
		return call<R>("load", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto merge(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("merge")] != -1);
		return call<R>("merge", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto put(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("put")] != -1);
		return call<R>("put", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putAll")] != -1);
		return call<R>("putAll", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto putIfAbsent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putIfAbsent")] != -1);
		return call<R>("putIfAbsent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto replace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("replace")] != -1);
		return call<R>("replace", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto replaceAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("replaceAll")] != -1);
		return call<R>("replaceAll", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Collection, typename... Args>
	auto values(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return call<R>("values", std::forward<Args>(args)...);
	}

};

#endif
