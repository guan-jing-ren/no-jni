#ifndef java_security_AlgorithmParameters_HPP
#define java_security_AlgorithmParameters_HPP

#include "../../jfwd_decl.hpp"

class ::java::security::AlgorithmParameters : public jObject<::java::security::AlgorithmParameters, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_security / "AlgorithmParameters";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getAlgorithm"), //
		jMethod<::jbyte *()>("getEncoded"), //
		jMethod<::jbyte *(::java::lang::String)>("getEncoded"), //
		jMethod<::java::security::AlgorithmParameters(::java::lang::String)>("getInstance"), //
		jMethod<::java::security::AlgorithmParameters(::java::lang::String, ::java::lang::String)>("getInstance"), //
		jMethod<::java::security::AlgorithmParameters(::java::lang::String, ::java::security::Provider)>("getInstance"), //
		jMethod<::java::security::spec::AlgorithmParameterSpec(::java::lang::Class)>("getParameterSpec"), //
		jMethod<::java::security::Provider()>("getProvider"), //
		jMethod<::jvoid(::java::security::spec::AlgorithmParameterSpec)>("init"), //
		jMethod<::jvoid(::jbyte *)>("init"), //
		jMethod<::jvoid(::jbyte *, ::java::lang::String)>("init"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getAlgorithm(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAlgorithm")] != -1);
		return call<R>("getAlgorithm", forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getEncoded(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getEncoded")] != -1);
		return call<R>("getEncoded", forward<Args>(args)...);
	}

	template<typename R = ::java::security::AlgorithmParameters, typename... Args>
	static auto getInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInstance")] != -1);
		return scall<R>("getInstance", forward<Args>(args)...);
	}

	template<typename R = ::java::security::spec::AlgorithmParameterSpec, typename... Args>
	auto getParameterSpec(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getParameterSpec")] != -1);
		return call<R>("getParameterSpec", forward<Args>(args)...);
	}

	template<typename R = ::java::security::Provider, typename... Args>
	auto getProvider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getProvider")] != -1);
		return call<R>("getProvider", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto init(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("init")] != -1);
		return call<R>("init", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
