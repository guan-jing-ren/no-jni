#ifndef java_security_KeyStore$Builder_HPP
#define java_security_KeyStore$Builder_HPP

#include "../../jfwd_decl.hpp"

class ::java::security::KeyStore$Builder : public jObject<::java::security::KeyStore$Builder, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_security / "KeyStore$Builder";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::security::KeyStore()>("getKeyStore"), //
		jMethod<::java::security::KeyStore$ProtectionParameter(::java::lang::String)>("getProtectionParameter"), //
		jMethod<::java::security::KeyStore$Builder(::java::lang::String, ::java::security::Provider, ::java::io::File, ::java::security::KeyStore$ProtectionParameter)>("newInstance"), //
		jMethod<::java::security::KeyStore$Builder(::java::lang::String, ::java::security::Provider, ::java::security::KeyStore$ProtectionParameter)>("newInstance"), //
		jMethod<::java::security::KeyStore$Builder(::java::security::KeyStore, ::java::security::KeyStore$ProtectionParameter)>("newInstance"), //
	};

	template<typename R = ::java::security::KeyStore, typename... Args>
	auto getKeyStore(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeyStore")] != -1);
		return call<R>("getKeyStore", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::KeyStore$ProtectionParameter, typename... Args>
	auto getProtectionParameter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProtectionParameter")] != -1);
		return call<R>("getProtectionParameter", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::KeyStore$Builder, typename... Args>
	static auto newInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newInstance")] != -1);
		return scall<R>("newInstance", std::forward<Args>(args)...);
	}

};

#endif
