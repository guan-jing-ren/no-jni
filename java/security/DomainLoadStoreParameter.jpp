#ifndef java_security_DomainLoadStoreParameter_HPP
#define java_security_DomainLoadStoreParameter_HPP

#include "../../jfwd_decl.hpp"

class ::java::security::DomainLoadStoreParameter : public jObject<::java::security::DomainLoadStoreParameter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_security / "DomainLoadStoreParameter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::net::URI, ::java::util::Map)>(), //
		jMethod<::java::net::URI()>("getConfiguration"), //
		jMethod<::java::security::KeyStore$ProtectionParameter()>("getProtectionParameter"), //
		jMethod<::java::util::Map()>("getProtectionParams"), //
	};

	template<typename R = ::java::net::URI, typename... Args>
	auto getConfiguration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConfiguration")] != -1);
		return call<R>("getConfiguration", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::KeyStore$ProtectionParameter, typename... Args>
	auto getProtectionParameter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProtectionParameter")] != -1);
		return call<R>("getProtectionParameter", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getProtectionParams(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProtectionParams")] != -1);
		return call<R>("getProtectionParams", std::forward<Args>(args)...);
	}

};

#endif
