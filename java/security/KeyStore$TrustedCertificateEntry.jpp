#ifndef java_security_KeyStore$TrustedCertificateEntry_HPP
#define java_security_KeyStore$TrustedCertificateEntry_HPP

#include "../../jfwd_decl.hpp"

class ::java::security::KeyStore$TrustedCertificateEntry : public jObject<::java::security::KeyStore$TrustedCertificateEntry, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_security / "KeyStore$TrustedCertificateEntry";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::security::cert::Certificate)>(), //
		jConstructor<::jvoid(::java::security::cert::Certificate, ::java::util::Set)>(), //
		jMethod<::java::util::Set()>("getAttributes"), //
		jMethod<::java::security::cert::Certificate()>("getTrustedCertificate"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::util::Set, typename... Args>
	auto getAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributes")] != -1);
		return call<R>("getAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::cert::Certificate, typename... Args>
	auto getTrustedCertificate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTrustedCertificate")] != -1);
		return call<R>("getTrustedCertificate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
