#ifndef java_security_interfaces_DSAPrivateKey_HPP
#define java_security_interfaces_DSAPrivateKey_HPP

#include "../../../jfwd_decl.hpp"

class ::java::security::interfaces::DSAPrivateKey : public jObject<::java::security::interfaces::DSAPrivateKey, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_security_interfaces / "DSAPrivateKey";

	constexpr static Enume field_signatures{
		jField<::jlong>("serialVersionUID"), //
	};

	template<typename F = ::jlong>
	static auto serialVersionUID() {
		static_assert(field_signatures[jField<F>("serialVersionUID")] != -1);
		return sat<F>("serialVersionUID");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getAlgorithm"), //
		jMethod<::jbyte *()>("getEncoded"), //
		jMethod<::java::lang::String()>("getFormat"), //
		jMethod<::java::security::interfaces::DSAParams()>("getParams"), //
		jMethod<::java::math::BigInteger()>("getX"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getAlgorithm(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAlgorithm")] != -1);
		return call<R>("getAlgorithm", forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getEncoded(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getEncoded")] != -1);
		return call<R>("getEncoded", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFormat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFormat")] != -1);
		return call<R>("getFormat", forward<Args>(args)...);
	}

	template<typename R = ::java::security::interfaces::DSAParams, typename... Args>
	auto getParams(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getParams")] != -1);
		return call<R>("getParams", forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto getX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getX")] != -1);
		return call<R>("getX", forward<Args>(args)...);
	}

};

#endif
