#ifndef java_security_CodeSigner_HPP
#define java_security_CodeSigner_HPP

#include "../../jfwd_decl.hpp"

class ::java::security::CodeSigner : public jObject<::java::security::CodeSigner, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_security / "CodeSigner";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::security::cert::CertPath, ::java::security::Timestamp)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::security::cert::CertPath()>("getSignerCertPath"), //
		jMethod<::java::security::Timestamp()>("getTimestamp"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::java::security::cert::CertPath, typename... Args>
	auto getSignerCertPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSignerCertPath")] != -1);
		return call<R>("getSignerCertPath", forward<Args>(args)...);
	}

	template<typename R = ::java::security::Timestamp, typename... Args>
	auto getTimestamp(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTimestamp")] != -1);
		return call<R>("getTimestamp", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
