#ifndef java_security_KeyStore_HPP
#define java_security_KeyStore_HPP

#include "../../jfwd_decl.hpp"

class ::java::security::KeyStore : public jObject<::java::security::KeyStore, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_security / "KeyStore";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::util::Enumeration()>("aliases"), //
		jMethod<::jboolean(::java::lang::String)>("containsAlias"), //
		jMethod<::jvoid(::java::lang::String)>("deleteEntry"), //
		jMethod<::jboolean(::java::lang::String, ::java::lang::Class)>("entryInstanceOf"), //
		jMethod<::java::security::cert::Certificate(::java::lang::String)>("getCertificate"), //
		jMethod<::java::lang::String(::java::security::cert::Certificate)>("getCertificateAlias"), //
		jMethod<::java::security::cert::Certificate *(::java::lang::String)>("getCertificateChain"), //
		jMethod<::java::util::Date(::java::lang::String)>("getCreationDate"), //
		jMethod<::java::lang::String()>("getDefaultType"), //
		jMethod<::java::security::KeyStore$Entry(::java::lang::String, ::java::security::KeyStore$ProtectionParameter)>("getEntry"), //
		jMethod<::java::security::KeyStore(::java::lang::String)>("getInstance"), //
		jMethod<::java::security::KeyStore(::java::lang::String, ::java::lang::String)>("getInstance"), //
		jMethod<::java::security::KeyStore(::java::lang::String, ::java::security::Provider)>("getInstance"), //
		jMethod<::java::security::Key(::java::lang::String, ::jchar *)>("getKey"), //
		jMethod<::java::security::Provider()>("getProvider"), //
		jMethod<::java::lang::String()>("getType"), //
		jMethod<::jboolean(::java::lang::String)>("isCertificateEntry"), //
		jMethod<::jboolean(::java::lang::String)>("isKeyEntry"), //
		jMethod<::jvoid(::java::io::InputStream, ::jchar *)>("load"), //
		jMethod<::jvoid(::java::security::KeyStore$LoadStoreParameter)>("load"), //
		jMethod<::jvoid(::java::lang::String, ::java::security::cert::Certificate)>("setCertificateEntry"), //
		jMethod<::jvoid(::java::lang::String, ::java::security::KeyStore$Entry, ::java::security::KeyStore$ProtectionParameter)>("setEntry"), //
		jMethod<::jvoid(::java::lang::String, ::java::security::Key, ::jchar *, ::java::security::cert::Certificate *)>("setKeyEntry"), //
		jMethod<::jvoid(::java::lang::String, ::jbyte *, ::java::security::cert::Certificate *)>("setKeyEntry"), //
		jMethod<::jint()>("size"), //
		jMethod<::jvoid(::java::io::OutputStream, ::jchar *)>("store"), //
		jMethod<::jvoid(::java::security::KeyStore$LoadStoreParameter)>("store"), //
	};

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto aliases(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("aliases")] != -1);
		return call<R>("aliases", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto containsAlias(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("containsAlias")] != -1);
		return call<R>("containsAlias", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deleteEntry(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deleteEntry")] != -1);
		return call<R>("deleteEntry", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto entryInstanceOf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("entryInstanceOf")] != -1);
		return call<R>("entryInstanceOf", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::cert::Certificate, typename... Args>
	auto getCertificate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCertificate")] != -1);
		return call<R>("getCertificate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCertificateAlias(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCertificateAlias")] != -1);
		return call<R>("getCertificateAlias", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::cert::Certificate *, typename... Args>
	auto getCertificateChain(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCertificateChain")] != -1);
		return call<R>("getCertificateChain", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Date, typename... Args>
	auto getCreationDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCreationDate")] != -1);
		return call<R>("getCreationDate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getDefaultType(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultType")] != -1);
		return scall<R>("getDefaultType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::KeyStore$Entry, typename... Args>
	auto getEntry(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEntry")] != -1);
		return call<R>("getEntry", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::KeyStore, typename... Args>
	static auto getInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInstance")] != -1);
		return scall<R>("getInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::Key, typename... Args>
	auto getKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKey")] != -1);
		return call<R>("getKey", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::Provider, typename... Args>
	auto getProvider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProvider")] != -1);
		return call<R>("getProvider", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCertificateEntry(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCertificateEntry")] != -1);
		return call<R>("isCertificateEntry", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isKeyEntry(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isKeyEntry")] != -1);
		return call<R>("isKeyEntry", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto load(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("load")] != -1);
		return call<R>("load", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCertificateEntry(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCertificateEntry")] != -1);
		return call<R>("setCertificateEntry", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEntry(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEntry")] != -1);
		return call<R>("setEntry", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setKeyEntry(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setKeyEntry")] != -1);
		return call<R>("setKeyEntry", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto size(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("size")] != -1);
		return call<R>("size", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto store(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("store")] != -1);
		return call<R>("store", std::forward<Args>(args)...);
	}

};

#endif
