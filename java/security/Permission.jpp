#ifndef java_security_Permission_HPP
#define java_security_Permission_HPP

#include "../../jfwd_decl.hpp"

class ::java::security::Permission : public jObject<::java::security::Permission, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_security / "Permission";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
		jMethod<::jvoid(::java::lang::Object)>("checkGuard"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::String()>("getActions"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean(::java::security::Permission)>("implies"), //
		jMethod<::java::security::PermissionCollection()>("newPermissionCollection"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto checkGuard(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("checkGuard")] != -1);
		return call<R>("checkGuard", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getActions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getActions")] != -1);
		return call<R>("getActions", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto implies(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("implies")] != -1);
		return call<R>("implies", forward<Args>(args)...);
	}

	template<typename R = ::java::security::PermissionCollection, typename... Args>
	auto newPermissionCollection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("newPermissionCollection")] != -1);
		return call<R>("newPermissionCollection", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
