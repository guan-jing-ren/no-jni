#ifndef java_security_Provider$Service_HPP
#define java_security_Provider$Service_HPP

#include "../../jfwd_decl.hpp"

class ::java::security::Provider$Service : public jObject<::java::security::Provider$Service, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_security / "Provider$Service";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::security::Provider, ::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::util::List, ::java::util::Map)>(), //
		jMethod<::java::lang::String()>("getAlgorithm"), //
		jMethod<::java::lang::String(::java::lang::String)>("getAttribute"), //
		jMethod<::java::lang::String()>("getClassName"), //
		jMethod<::java::security::Provider()>("getProvider"), //
		jMethod<::java::lang::String()>("getType"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("newInstance"), //
		jMethod<::jboolean(::java::lang::Object)>("supportsParameter"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getAlgorithm(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlgorithm")] != -1);
		return call<R>("getAlgorithm", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttribute")] != -1);
		return call<R>("getAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getClassName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClassName")] != -1);
		return call<R>("getClassName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::Provider, typename... Args>
	auto getProvider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProvider")] != -1);
		return call<R>("getProvider", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto newInstance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newInstance")] != -1);
		return call<R>("newInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsParameter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("supportsParameter")] != -1);
		return call<R>("supportsParameter", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
