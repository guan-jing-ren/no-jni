#ifndef java_security_KeyStoreSpi_HPP
#define java_security_KeyStoreSpi_HPP

#include "../../jfwd_decl.hpp"

class ::java::security::KeyStoreSpi : public jObject<::java::security::KeyStoreSpi, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_security / "KeyStoreSpi";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::util::Enumeration()>("engineAliases"), //
		jMethod<::jboolean(::java::lang::String)>("engineContainsAlias"), //
		jMethod<::jvoid(::java::lang::String)>("engineDeleteEntry"), //
		jMethod<::jboolean(::java::lang::String, ::java::lang::Class)>("engineEntryInstanceOf"), //
		jMethod<::java::security::cert::Certificate(::java::lang::String)>("engineGetCertificate"), //
		jMethod<::java::lang::String(::java::security::cert::Certificate)>("engineGetCertificateAlias"), //
		jMethod<::java::security::cert::Certificate *(::java::lang::String)>("engineGetCertificateChain"), //
		jMethod<::java::util::Date(::java::lang::String)>("engineGetCreationDate"), //
		jMethod<::java::security::KeyStore$Entry(::java::lang::String, ::java::security::KeyStore$ProtectionParameter)>("engineGetEntry"), //
		jMethod<::java::security::Key(::java::lang::String, ::jchar *)>("engineGetKey"), //
		jMethod<::jboolean(::java::lang::String)>("engineIsCertificateEntry"), //
		jMethod<::jboolean(::java::lang::String)>("engineIsKeyEntry"), //
		jMethod<::jvoid(::java::io::InputStream, ::jchar *)>("engineLoad"), //
		jMethod<::jvoid(::java::security::KeyStore$LoadStoreParameter)>("engineLoad"), //
		jMethod<::jvoid(::java::lang::String, ::java::security::cert::Certificate)>("engineSetCertificateEntry"), //
		jMethod<::jvoid(::java::lang::String, ::java::security::KeyStore$Entry, ::java::security::KeyStore$ProtectionParameter)>("engineSetEntry"), //
		jMethod<::jvoid(::java::lang::String, ::java::security::Key, ::jchar *, ::java::security::cert::Certificate *)>("engineSetKeyEntry"), //
		jMethod<::jvoid(::java::lang::String, ::jbyte *, ::java::security::cert::Certificate *)>("engineSetKeyEntry"), //
		jMethod<::jint()>("engineSize"), //
		jMethod<::jvoid(::java::io::OutputStream, ::jchar *)>("engineStore"), //
		jMethod<::jvoid(::java::security::KeyStore$LoadStoreParameter)>("engineStore"), //
	};

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto engineAliases(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("engineAliases")] != -1);
		return call<R>("engineAliases", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto engineContainsAlias(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("engineContainsAlias")] != -1);
		return call<R>("engineContainsAlias", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto engineDeleteEntry(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("engineDeleteEntry")] != -1);
		return call<R>("engineDeleteEntry", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto engineEntryInstanceOf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("engineEntryInstanceOf")] != -1);
		return call<R>("engineEntryInstanceOf", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::cert::Certificate, typename... Args>
	auto engineGetCertificate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("engineGetCertificate")] != -1);
		return call<R>("engineGetCertificate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto engineGetCertificateAlias(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("engineGetCertificateAlias")] != -1);
		return call<R>("engineGetCertificateAlias", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::cert::Certificate *, typename... Args>
	auto engineGetCertificateChain(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("engineGetCertificateChain")] != -1);
		return call<R>("engineGetCertificateChain", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Date, typename... Args>
	auto engineGetCreationDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("engineGetCreationDate")] != -1);
		return call<R>("engineGetCreationDate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::KeyStore$Entry, typename... Args>
	auto engineGetEntry(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("engineGetEntry")] != -1);
		return call<R>("engineGetEntry", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::Key, typename... Args>
	auto engineGetKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("engineGetKey")] != -1);
		return call<R>("engineGetKey", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto engineIsCertificateEntry(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("engineIsCertificateEntry")] != -1);
		return call<R>("engineIsCertificateEntry", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto engineIsKeyEntry(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("engineIsKeyEntry")] != -1);
		return call<R>("engineIsKeyEntry", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto engineLoad(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("engineLoad")] != -1);
		return call<R>("engineLoad", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto engineSetCertificateEntry(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("engineSetCertificateEntry")] != -1);
		return call<R>("engineSetCertificateEntry", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto engineSetEntry(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("engineSetEntry")] != -1);
		return call<R>("engineSetEntry", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto engineSetKeyEntry(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("engineSetKeyEntry")] != -1);
		return call<R>("engineSetKeyEntry", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto engineSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("engineSize")] != -1);
		return call<R>("engineSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto engineStore(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("engineStore")] != -1);
		return call<R>("engineStore", std::forward<Args>(args)...);
	}

};

#endif
