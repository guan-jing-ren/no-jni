#ifndef java_security_KeyRep$Type_HPP
#define java_security_KeyRep$Type_HPP

#include "../../jfwd_decl.hpp"

class ::java::security::KeyRep$Type : public jObject<::java::security::KeyRep$Type, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_security / "KeyRep$Type";

	constexpr static Enume field_signatures{
		jField<::java::security::KeyRep$Type>("PRIVATE"), //
		jField<::java::security::KeyRep$Type>("PUBLIC"), //
		jField<::java::security::KeyRep$Type>("SECRET"), //
	};

	template<typename F = ::java::security::KeyRep$Type>
	static auto PRIVATE() {
		static_assert(field_signatures[jField<F>("PRIVATE")] != -1);
		return sat<F>("PRIVATE");
	}

	template<typename F = ::java::security::KeyRep$Type>
	static auto PUBLIC() {
		static_assert(field_signatures[jField<F>("PUBLIC")] != -1);
		return sat<F>("PUBLIC");
	}

	template<typename F = ::java::security::KeyRep$Type>
	static auto SECRET() {
		static_assert(field_signatures[jField<F>("SECRET")] != -1);
		return sat<F>("SECRET");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::security::KeyRep$Type(::java::lang::String)>("valueOf"), //
		jMethod<::java::security::KeyRep$Type *()>("values"), //
	};

	template<typename R = ::java::security::KeyRep$Type, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::KeyRep$Type *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
