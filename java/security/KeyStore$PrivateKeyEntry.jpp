#ifndef java_security_KeyStore$PrivateKeyEntry_HPP
#define java_security_KeyStore$PrivateKeyEntry_HPP

#include "../../jfwd_decl.hpp"

class ::java::security::KeyStore$PrivateKeyEntry : public jObject<::java::security::KeyStore$PrivateKeyEntry, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_security / "KeyStore$PrivateKeyEntry";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::security::PrivateKey, ::java::security::cert::Certificate *)>(), //
		jConstructor<::jvoid(::java::security::PrivateKey, ::java::security::cert::Certificate *, ::java::util::Set)>(), //
		jMethod<::java::util::Set()>("getAttributes"), //
		jMethod<::java::security::cert::Certificate()>("getCertificate"), //
		jMethod<::java::security::cert::Certificate *()>("getCertificateChain"), //
		jMethod<::java::security::PrivateKey()>("getPrivateKey"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::util::Set, typename... Args>
	auto getAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttributes")] != -1);
		return call<R>("getAttributes", forward<Args>(args)...);
	}

	template<typename R = ::java::security::cert::Certificate, typename... Args>
	auto getCertificate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCertificate")] != -1);
		return call<R>("getCertificate", forward<Args>(args)...);
	}

	template<typename R = ::java::security::cert::Certificate *, typename... Args>
	auto getCertificateChain(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCertificateChain")] != -1);
		return call<R>("getCertificateChain", forward<Args>(args)...);
	}

	template<typename R = ::java::security::PrivateKey, typename... Args>
	auto getPrivateKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPrivateKey")] != -1);
		return call<R>("getPrivateKey", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
