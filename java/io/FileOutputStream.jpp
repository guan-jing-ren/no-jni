#ifndef java_io_FileOutputStream_HPP
#define java_io_FileOutputStream_HPP

#include "../../jfwd_decl.hpp"

class ::java::io::FileOutputStream : public jObject<::java::io::FileOutputStream, ::java::io::OutputStream> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_io / "FileOutputStream";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::io::File)>(), //
		jConstructor<::jvoid(::java::io::File, ::jboolean)>(), //
		jConstructor<::jvoid(::java::io::FileDescriptor)>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::jboolean)>(), //
		jMethod<::jvoid()>("close"), //
		jMethod<::java::nio::channels::FileChannel()>("getChannel"), //
		jMethod<::java::io::FileDescriptor()>("getFD"), //
		jMethod<::jvoid(::jint)>("write"), //
		jMethod<::jvoid(::jbyte *)>("write"), //
		jMethod<::jvoid(::jbyte *, ::jint, ::jint)>("write"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::FileChannel, typename... Args>
	auto getChannel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChannel")] != -1);
		return call<R>("getChannel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::FileDescriptor, typename... Args>
	auto getFD(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFD")] != -1);
		return call<R>("getFD", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write")] != -1);
		return call<R>("write", std::forward<Args>(args)...);
	}

};

#endif
