#ifndef java_io_InvalidClassException_HPP
#define java_io_InvalidClassException_HPP

#include "../../jfwd_decl.hpp"

class ::java::io::InvalidClassException : public jObject<::java::io::InvalidClassException, ::java::io::ObjectStreamException> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_io / "InvalidClassException";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("classname"), //
	};

	template<typename F = ::java::lang::String>
	auto classname() const {
		static_assert(field_signatures[jField<F>("classname")] != -1);
		return at<F>("classname");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String)>(), //
		jMethod<::java::lang::String()>("getMessage"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMessage")] != -1);
		return call<R>("getMessage", std::forward<Args>(args)...);
	}

};

#endif
