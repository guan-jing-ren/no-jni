#ifndef java_io_DataOutputStream_HPP
#define java_io_DataOutputStream_HPP

#include "../../jfwd_decl.hpp"

class ::java::io::DataOutputStream : public jObject<::java::io::DataOutputStream, ::java::io::FilterOutputStream> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_io / "DataOutputStream";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::io::OutputStream)>(), //
		jMethod<::jvoid()>("flush"), //
		jMethod<::jint()>("size"), //
		jMethod<::jvoid(::jint)>("write"), //
		jMethod<::jvoid(::jbyte *, ::jint, ::jint)>("write"), //
		jMethod<::jvoid(::jboolean)>("writeBoolean"), //
		jMethod<::jvoid(::jint)>("writeByte"), //
		jMethod<::jvoid(::java::lang::String)>("writeBytes"), //
		jMethod<::jvoid(::jint)>("writeChar"), //
		jMethod<::jvoid(::java::lang::String)>("writeChars"), //
		jMethod<::jvoid(::jdouble)>("writeDouble"), //
		jMethod<::jvoid(::jfloat)>("writeFloat"), //
		jMethod<::jvoid(::jint)>("writeInt"), //
		jMethod<::jvoid(::jlong)>("writeLong"), //
		jMethod<::jvoid(::jint)>("writeShort"), //
		jMethod<::jvoid(::java::lang::String)>("writeUTF"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto flush(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("flush")] != -1);
		return call<R>("flush", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto size(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("size")] != -1);
		return call<R>("size", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write")] != -1);
		return call<R>("write", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeBoolean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeBoolean")] != -1);
		return call<R>("writeBoolean", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeByte")] != -1);
		return call<R>("writeByte", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeBytes")] != -1);
		return call<R>("writeBytes", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeChar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeChar")] != -1);
		return call<R>("writeChar", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeChars(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeChars")] != -1);
		return call<R>("writeChars", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeDouble")] != -1);
		return call<R>("writeDouble", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeFloat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeFloat")] != -1);
		return call<R>("writeFloat", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeInt")] != -1);
		return call<R>("writeInt", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeLong")] != -1);
		return call<R>("writeLong", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeShort")] != -1);
		return call<R>("writeShort", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeUTF(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeUTF")] != -1);
		return call<R>("writeUTF", forward<Args>(args)...);
	}

};

#endif
