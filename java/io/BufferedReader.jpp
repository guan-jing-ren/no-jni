#ifndef java_io_BufferedReader_HPP
#define java_io_BufferedReader_HPP

#include "../../jfwd_decl.hpp"

class ::java::io::BufferedReader : public jObject<::java::io::BufferedReader, ::java::io::Reader> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_io / "BufferedReader";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::io::Reader)>(), //
		jConstructor<::jvoid(::java::io::Reader, ::jint)>(), //
		jMethod<::jvoid()>("close"), //
		jMethod<::java::util::stream::Stream()>("lines"), //
		jMethod<::jvoid(::jint)>("mark"), //
		jMethod<::jboolean()>("markSupported"), //
		jMethod<::jint()>("read"), //
		jMethod<::jint(::jchar *, ::jint, ::jint)>("read"), //
		jMethod<::java::lang::String()>("readLine"), //
		jMethod<::jboolean()>("ready"), //
		jMethod<::jvoid()>("reset"), //
		jMethod<::jlong(::jlong)>("skip"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("close")] != -1);
		return call<R>("close", forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::Stream, typename... Args>
	auto lines(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("lines")] != -1);
		return call<R>("lines", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mark(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("mark")] != -1);
		return call<R>("mark", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto markSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("markSupported")] != -1);
		return call<R>("markSupported", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read")] != -1);
		return call<R>("read", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto readLine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("readLine")] != -1);
		return call<R>("readLine", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto ready(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("ready")] != -1);
		return call<R>("ready", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto skip(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("skip")] != -1);
		return call<R>("skip", forward<Args>(args)...);
	}

};

#endif
