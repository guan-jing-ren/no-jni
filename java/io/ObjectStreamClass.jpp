#ifndef java_io_ObjectStreamClass_HPP
#define java_io_ObjectStreamClass_HPP

#include "../../jfwd_decl.hpp"

class ::java::io::ObjectStreamClass : public jObject<::java::io::ObjectStreamClass, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_io / "ObjectStreamClass";

	constexpr static Enume field_signatures{
		jField<::java::io::ObjectStreamField *>("NO_FIELDS"), //
	};

	template<typename F = ::java::io::ObjectStreamField *>
	static auto NO_FIELDS() {
		static_assert(field_signatures[jField<F>("NO_FIELDS")] != -1);
		return sat<F>("NO_FIELDS");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Class()>("forClass"), //
		jMethod<::java::io::ObjectStreamField(::java::lang::String)>("getField"), //
		jMethod<::java::io::ObjectStreamField *()>("getFields"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jlong()>("getSerialVersionUID"), //
		jMethod<::java::io::ObjectStreamClass(::java::lang::Class)>("lookup"), //
		jMethod<::java::io::ObjectStreamClass(::java::lang::Class)>("lookupAny"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::Class, typename... Args>
	auto forClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("forClass")] != -1);
		return call<R>("forClass", forward<Args>(args)...);
	}

	template<typename R = ::java::io::ObjectStreamField, typename... Args>
	auto getField(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getField")] != -1);
		return call<R>("getField", forward<Args>(args)...);
	}

	template<typename R = ::java::io::ObjectStreamField *, typename... Args>
	auto getFields(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFields")] != -1);
		return call<R>("getFields", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getSerialVersionUID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSerialVersionUID")] != -1);
		return call<R>("getSerialVersionUID", forward<Args>(args)...);
	}

	template<typename R = ::java::io::ObjectStreamClass, typename... Args>
	static auto lookup(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("lookup")] != -1);
		return scall<R>("lookup", forward<Args>(args)...);
	}

	template<typename R = ::java::io::ObjectStreamClass, typename... Args>
	static auto lookupAny(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("lookupAny")] != -1);
		return scall<R>("lookupAny", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
