#ifndef java_io_ObjectInputStream_HPP
#define java_io_ObjectInputStream_HPP

#include "../../jfwd_decl.hpp"

class ::java::io::ObjectInputStream : public jObject<::java::io::ObjectInputStream, ::java::io::InputStream> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_io / "ObjectInputStream";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::io::InputStream)>(), //
		jMethod<::jint()>("available"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::jvoid()>("defaultReadObject"), //
		jMethod<::jint()>("read"), //
		jMethod<::jint(::jbyte *)>("read"), //
		jMethod<::jint(::jbyte *, ::jint, ::jint)>("read"), //
		jMethod<::jboolean()>("readBoolean"), //
		jMethod<::jbyte()>("readByte"), //
		jMethod<::jchar()>("readChar"), //
		jMethod<::jdouble()>("readDouble"), //
		jMethod<::java::io::ObjectInputStream$GetField()>("readFields"), //
		jMethod<::jfloat()>("readFloat"), //
		jMethod<::jvoid(::jbyte *)>("readFully"), //
		jMethod<::jvoid(::jbyte *, ::jint, ::jint)>("readFully"), //
		jMethod<::jint()>("readInt"), //
		jMethod<::java::lang::String()>("readLine"), //
		jMethod<::jlong()>("readLong"), //
		jMethod<::java::lang::Object()>("readObject"), //
		jMethod<::jshort()>("readShort"), //
		jMethod<::java::lang::String()>("readUTF"), //
		jMethod<::java::lang::Object()>("readUnshared"), //
		jMethod<::jint()>("readUnsignedByte"), //
		jMethod<::jint()>("readUnsignedShort"), //
		jMethod<::jvoid(::java::io::ObjectInputValidation, ::jint)>("registerValidation"), //
		jMethod<::jlong(::jlong)>("skip"), //
		jMethod<::jint(::jint)>("skipBytes"), //
	};

	template<typename R = ::jint, typename... Args>
	auto available(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("available")] != -1);
		return call<R>("available", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto defaultReadObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("defaultReadObject")] != -1);
		return call<R>("defaultReadObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("read")] != -1);
		return call<R>("read", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto readBoolean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readBoolean")] != -1);
		return call<R>("readBoolean", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto readByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readByte")] != -1);
		return call<R>("readByte", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto readChar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readChar")] != -1);
		return call<R>("readChar", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto readDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readDouble")] != -1);
		return call<R>("readDouble", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::ObjectInputStream$GetField, typename... Args>
	auto readFields(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readFields")] != -1);
		return call<R>("readFields", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto readFloat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readFloat")] != -1);
		return call<R>("readFloat", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto readFully(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readFully")] != -1);
		return call<R>("readFully", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto readInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readInt")] != -1);
		return call<R>("readInt", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto readLine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readLine")] != -1);
		return call<R>("readLine", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto readLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readLong")] != -1);
		return call<R>("readLong", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto readObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readObject")] != -1);
		return call<R>("readObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto readShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readShort")] != -1);
		return call<R>("readShort", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto readUTF(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readUTF")] != -1);
		return call<R>("readUTF", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto readUnshared(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readUnshared")] != -1);
		return call<R>("readUnshared", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto readUnsignedByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readUnsignedByte")] != -1);
		return call<R>("readUnsignedByte", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto readUnsignedShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readUnsignedShort")] != -1);
		return call<R>("readUnsignedShort", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto registerValidation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("registerValidation")] != -1);
		return call<R>("registerValidation", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto skip(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("skip")] != -1);
		return call<R>("skip", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto skipBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("skipBytes")] != -1);
		return call<R>("skipBytes", std::forward<Args>(args)...);
	}

};

#endif
