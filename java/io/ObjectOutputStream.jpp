#ifndef java_io_ObjectOutputStream_HPP
#define java_io_ObjectOutputStream_HPP

#include "../../jfwd_decl.hpp"

class ::java::io::ObjectOutputStream : public jObject<::java::io::ObjectOutputStream, ::java::io::OutputStream> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_io / "ObjectOutputStream";

	constexpr static Enume field_signatures{
		jField<::jint>("PROTOCOL_VERSION_1"), //
		jField<::jint>("PROTOCOL_VERSION_2"), //
		jField<::jbyte>("SC_BLOCK_DATA"), //
		jField<::jbyte>("SC_ENUM"), //
		jField<::jbyte>("SC_EXTERNALIZABLE"), //
		jField<::jbyte>("SC_SERIALIZABLE"), //
		jField<::jbyte>("SC_WRITE_METHOD"), //
		jField<::jshort>("STREAM_MAGIC"), //
		jField<::jshort>("STREAM_VERSION"), //
		jField<::java::io::SerializablePermission>("SUBCLASS_IMPLEMENTATION_PERMISSION"), //
		jField<::java::io::SerializablePermission>("SUBSTITUTION_PERMISSION"), //
		jField<::jbyte>("TC_ARRAY"), //
		jField<::jbyte>("TC_BASE"), //
		jField<::jbyte>("TC_BLOCKDATA"), //
		jField<::jbyte>("TC_BLOCKDATALONG"), //
		jField<::jbyte>("TC_CLASS"), //
		jField<::jbyte>("TC_CLASSDESC"), //
		jField<::jbyte>("TC_ENDBLOCKDATA"), //
		jField<::jbyte>("TC_ENUM"), //
		jField<::jbyte>("TC_EXCEPTION"), //
		jField<::jbyte>("TC_LONGSTRING"), //
		jField<::jbyte>("TC_MAX"), //
		jField<::jbyte>("TC_NULL"), //
		jField<::jbyte>("TC_OBJECT"), //
		jField<::jbyte>("TC_PROXYCLASSDESC"), //
		jField<::jbyte>("TC_REFERENCE"), //
		jField<::jbyte>("TC_RESET"), //
		jField<::jbyte>("TC_STRING"), //
		jField<::jint>("baseWireHandle"), //
	};

	template<typename F = ::jint>
	static auto PROTOCOL_VERSION_1() {
		static_assert(field_signatures[jField<F>("PROTOCOL_VERSION_1")] != -1);
		return sat<F>("PROTOCOL_VERSION_1");
	}

	template<typename F = ::jint>
	static auto PROTOCOL_VERSION_2() {
		static_assert(field_signatures[jField<F>("PROTOCOL_VERSION_2")] != -1);
		return sat<F>("PROTOCOL_VERSION_2");
	}

	template<typename F = ::jbyte>
	static auto SC_BLOCK_DATA() {
		static_assert(field_signatures[jField<F>("SC_BLOCK_DATA")] != -1);
		return sat<F>("SC_BLOCK_DATA");
	}

	template<typename F = ::jbyte>
	static auto SC_ENUM() {
		static_assert(field_signatures[jField<F>("SC_ENUM")] != -1);
		return sat<F>("SC_ENUM");
	}

	template<typename F = ::jbyte>
	static auto SC_EXTERNALIZABLE() {
		static_assert(field_signatures[jField<F>("SC_EXTERNALIZABLE")] != -1);
		return sat<F>("SC_EXTERNALIZABLE");
	}

	template<typename F = ::jbyte>
	static auto SC_SERIALIZABLE() {
		static_assert(field_signatures[jField<F>("SC_SERIALIZABLE")] != -1);
		return sat<F>("SC_SERIALIZABLE");
	}

	template<typename F = ::jbyte>
	static auto SC_WRITE_METHOD() {
		static_assert(field_signatures[jField<F>("SC_WRITE_METHOD")] != -1);
		return sat<F>("SC_WRITE_METHOD");
	}

	template<typename F = ::jshort>
	static auto STREAM_MAGIC() {
		static_assert(field_signatures[jField<F>("STREAM_MAGIC")] != -1);
		return sat<F>("STREAM_MAGIC");
	}

	template<typename F = ::jshort>
	static auto STREAM_VERSION() {
		static_assert(field_signatures[jField<F>("STREAM_VERSION")] != -1);
		return sat<F>("STREAM_VERSION");
	}

	template<typename F = ::java::io::SerializablePermission>
	static auto SUBCLASS_IMPLEMENTATION_PERMISSION() {
		static_assert(field_signatures[jField<F>("SUBCLASS_IMPLEMENTATION_PERMISSION")] != -1);
		return sat<F>("SUBCLASS_IMPLEMENTATION_PERMISSION");
	}

	template<typename F = ::java::io::SerializablePermission>
	static auto SUBSTITUTION_PERMISSION() {
		static_assert(field_signatures[jField<F>("SUBSTITUTION_PERMISSION")] != -1);
		return sat<F>("SUBSTITUTION_PERMISSION");
	}

	template<typename F = ::jbyte>
	static auto TC_ARRAY() {
		static_assert(field_signatures[jField<F>("TC_ARRAY")] != -1);
		return sat<F>("TC_ARRAY");
	}

	template<typename F = ::jbyte>
	static auto TC_BASE() {
		static_assert(field_signatures[jField<F>("TC_BASE")] != -1);
		return sat<F>("TC_BASE");
	}

	template<typename F = ::jbyte>
	static auto TC_BLOCKDATA() {
		static_assert(field_signatures[jField<F>("TC_BLOCKDATA")] != -1);
		return sat<F>("TC_BLOCKDATA");
	}

	template<typename F = ::jbyte>
	static auto TC_BLOCKDATALONG() {
		static_assert(field_signatures[jField<F>("TC_BLOCKDATALONG")] != -1);
		return sat<F>("TC_BLOCKDATALONG");
	}

	template<typename F = ::jbyte>
	static auto TC_CLASS() {
		static_assert(field_signatures[jField<F>("TC_CLASS")] != -1);
		return sat<F>("TC_CLASS");
	}

	template<typename F = ::jbyte>
	static auto TC_CLASSDESC() {
		static_assert(field_signatures[jField<F>("TC_CLASSDESC")] != -1);
		return sat<F>("TC_CLASSDESC");
	}

	template<typename F = ::jbyte>
	static auto TC_ENDBLOCKDATA() {
		static_assert(field_signatures[jField<F>("TC_ENDBLOCKDATA")] != -1);
		return sat<F>("TC_ENDBLOCKDATA");
	}

	template<typename F = ::jbyte>
	static auto TC_ENUM() {
		static_assert(field_signatures[jField<F>("TC_ENUM")] != -1);
		return sat<F>("TC_ENUM");
	}

	template<typename F = ::jbyte>
	static auto TC_EXCEPTION() {
		static_assert(field_signatures[jField<F>("TC_EXCEPTION")] != -1);
		return sat<F>("TC_EXCEPTION");
	}

	template<typename F = ::jbyte>
	static auto TC_LONGSTRING() {
		static_assert(field_signatures[jField<F>("TC_LONGSTRING")] != -1);
		return sat<F>("TC_LONGSTRING");
	}

	template<typename F = ::jbyte>
	static auto TC_MAX() {
		static_assert(field_signatures[jField<F>("TC_MAX")] != -1);
		return sat<F>("TC_MAX");
	}

	template<typename F = ::jbyte>
	static auto TC_NULL() {
		static_assert(field_signatures[jField<F>("TC_NULL")] != -1);
		return sat<F>("TC_NULL");
	}

	template<typename F = ::jbyte>
	static auto TC_OBJECT() {
		static_assert(field_signatures[jField<F>("TC_OBJECT")] != -1);
		return sat<F>("TC_OBJECT");
	}

	template<typename F = ::jbyte>
	static auto TC_PROXYCLASSDESC() {
		static_assert(field_signatures[jField<F>("TC_PROXYCLASSDESC")] != -1);
		return sat<F>("TC_PROXYCLASSDESC");
	}

	template<typename F = ::jbyte>
	static auto TC_REFERENCE() {
		static_assert(field_signatures[jField<F>("TC_REFERENCE")] != -1);
		return sat<F>("TC_REFERENCE");
	}

	template<typename F = ::jbyte>
	static auto TC_RESET() {
		static_assert(field_signatures[jField<F>("TC_RESET")] != -1);
		return sat<F>("TC_RESET");
	}

	template<typename F = ::jbyte>
	static auto TC_STRING() {
		static_assert(field_signatures[jField<F>("TC_STRING")] != -1);
		return sat<F>("TC_STRING");
	}

	template<typename F = ::jint>
	static auto baseWireHandle() {
		static_assert(field_signatures[jField<F>("baseWireHandle")] != -1);
		return sat<F>("baseWireHandle");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::io::OutputStream)>(), //
		jMethod<::jvoid()>("close"), //
		jMethod<::jvoid()>("defaultWriteObject"), //
		jMethod<::jvoid()>("flush"), //
		jMethod<::java::io::ObjectOutputStream$PutField()>("putFields"), //
		jMethod<::jvoid()>("reset"), //
		jMethod<::jvoid(::jint)>("useProtocolVersion"), //
		jMethod<::jvoid(::jint)>("write"), //
		jMethod<::jvoid(::jbyte *)>("write"), //
		jMethod<::jvoid(::jbyte *, ::jint, ::jint)>("write"), //
		jMethod<::jvoid(::jboolean)>("writeBoolean"), //
		jMethod<::jvoid(::jint)>("writeByte"), //
		jMethod<::jvoid(::java::lang::String)>("writeBytes"), //
		jMethod<::jvoid(::jint)>("writeChar"), //
		jMethod<::jvoid(::java::lang::String)>("writeChars"), //
		jMethod<::jvoid(::jdouble)>("writeDouble"), //
		jMethod<::jvoid()>("writeFields"), //
		jMethod<::jvoid(::jfloat)>("writeFloat"), //
		jMethod<::jvoid(::jint)>("writeInt"), //
		jMethod<::jvoid(::jlong)>("writeLong"), //
		jMethod<::jvoid(::java::lang::Object)>("writeObject"), //
		jMethod<::jvoid(::jint)>("writeShort"), //
		jMethod<::jvoid(::java::lang::String)>("writeUTF"), //
		jMethod<::jvoid(::java::lang::Object)>("writeUnshared"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto defaultWriteObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("defaultWriteObject")] != -1);
		return call<R>("defaultWriteObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto flush(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("flush")] != -1);
		return call<R>("flush", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::ObjectOutputStream$PutField, typename... Args>
	auto putFields(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putFields")] != -1);
		return call<R>("putFields", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto useProtocolVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("useProtocolVersion")] != -1);
		return call<R>("useProtocolVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write")] != -1);
		return call<R>("write", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeBoolean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeBoolean")] != -1);
		return call<R>("writeBoolean", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeByte")] != -1);
		return call<R>("writeByte", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeBytes")] != -1);
		return call<R>("writeBytes", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeChar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeChar")] != -1);
		return call<R>("writeChar", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeChars(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeChars")] != -1);
		return call<R>("writeChars", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeDouble")] != -1);
		return call<R>("writeDouble", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeFields(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeFields")] != -1);
		return call<R>("writeFields", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeFloat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeFloat")] != -1);
		return call<R>("writeFloat", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeInt")] != -1);
		return call<R>("writeInt", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeLong")] != -1);
		return call<R>("writeLong", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeObject")] != -1);
		return call<R>("writeObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeShort")] != -1);
		return call<R>("writeShort", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeUTF(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeUTF")] != -1);
		return call<R>("writeUTF", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeUnshared(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeUnshared")] != -1);
		return call<R>("writeUnshared", std::forward<Args>(args)...);
	}

};

#endif
