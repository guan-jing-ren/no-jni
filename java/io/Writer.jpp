#ifndef java_io_Writer_HPP
#define java_io_Writer_HPP

#include "../../jfwd_decl.hpp"

class ::java::io::Writer : public jObject<::java::io::Writer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_io / "Writer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::io::Writer(::jchar)>("append"), //
		jMethod<::java::lang::Appendable(::jchar)>("append"), //
		jMethod<::java::io::Writer(::java::lang::CharSequence)>("append"), //
		jMethod<::java::lang::Appendable(::java::lang::CharSequence)>("append"), //
		jMethod<::java::io::Writer(::java::lang::CharSequence, ::jint, ::jint)>("append"), //
		jMethod<::java::lang::Appendable(::java::lang::CharSequence, ::jint, ::jint)>("append"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::jvoid()>("flush"), //
		jMethod<::jvoid(::jint)>("write"), //
		jMethod<::jvoid(::java::lang::String)>("write"), //
		jMethod<::jvoid(::java::lang::String, ::jint, ::jint)>("write"), //
		jMethod<::jvoid(::jchar *)>("write"), //
		jMethod<::jvoid(::jchar *, ::jint, ::jint)>("write"), //
	};

	template<typename R = ::java::io::Writer, typename... Args>
	auto append(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("append")] != -1);
		return call<R>("append", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto flush(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("flush")] != -1);
		return call<R>("flush", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write")] != -1);
		return call<R>("write", std::forward<Args>(args)...);
	}

};

#endif
