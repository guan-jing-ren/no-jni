#ifndef java_io_DataInput_HPP
#define java_io_DataInput_HPP

#include "../../jfwd_decl.hpp"

class ::java::io::DataInput : public jObject<::java::io::DataInput, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_io / "DataInput";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean()>("readBoolean"), //
		jMethod<::jbyte()>("readByte"), //
		jMethod<::jchar()>("readChar"), //
		jMethod<::jdouble()>("readDouble"), //
		jMethod<::jfloat()>("readFloat"), //
		jMethod<::jvoid(::jbyte *)>("readFully"), //
		jMethod<::jvoid(::jbyte *, ::jint, ::jint)>("readFully"), //
		jMethod<::jint()>("readInt"), //
		jMethod<::java::lang::String()>("readLine"), //
		jMethod<::jlong()>("readLong"), //
		jMethod<::jshort()>("readShort"), //
		jMethod<::java::lang::String()>("readUTF"), //
		jMethod<::jint()>("readUnsignedByte"), //
		jMethod<::jint()>("readUnsignedShort"), //
		jMethod<::jint(::jint)>("skipBytes"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto readBoolean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("readBoolean")] != -1);
		return call<R>("readBoolean", forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto readByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("readByte")] != -1);
		return call<R>("readByte", forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto readChar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("readChar")] != -1);
		return call<R>("readChar", forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto readDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("readDouble")] != -1);
		return call<R>("readDouble", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto readFloat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("readFloat")] != -1);
		return call<R>("readFloat", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto readFully(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("readFully")] != -1);
		return call<R>("readFully", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto readInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("readInt")] != -1);
		return call<R>("readInt", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto readLine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("readLine")] != -1);
		return call<R>("readLine", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto readLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("readLong")] != -1);
		return call<R>("readLong", forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto readShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("readShort")] != -1);
		return call<R>("readShort", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto readUTF(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("readUTF")] != -1);
		return call<R>("readUTF", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto readUnsignedByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("readUnsignedByte")] != -1);
		return call<R>("readUnsignedByte", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto readUnsignedShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("readUnsignedShort")] != -1);
		return call<R>("readUnsignedShort", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto skipBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("skipBytes")] != -1);
		return call<R>("skipBytes", forward<Args>(args)...);
	}

};

#endif
