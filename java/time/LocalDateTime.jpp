#ifndef java_time_LocalDateTime_HPP
#define java_time_LocalDateTime_HPP

#include "../../jfwd_decl.hpp"

class ::java::time::LocalDateTime : public jObject<::java::time::LocalDateTime, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_time / "LocalDateTime";

	constexpr static Enume field_signatures{
		jField<::java::time::LocalDateTime>("MAX"), //
		jField<::java::time::LocalDateTime>("MIN"), //
	};

	template<typename F = ::java::time::LocalDateTime>
	static auto MAX() {
		static_assert(field_signatures[jField<F>("MAX")] != -1);
		return sat<F>("MAX");
	}

	template<typename F = ::java::time::LocalDateTime>
	static auto MIN() {
		static_assert(field_signatures[jField<F>("MIN")] != -1);
		return sat<F>("MIN");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::time::temporal::Temporal(::java::time::temporal::Temporal)>("adjustInto"), //
		jMethod<::java::time::OffsetDateTime(::java::time::ZoneOffset)>("atOffset"), //
		jMethod<::java::time::ZonedDateTime(::java::time::ZoneId)>("atZone"), //
		jMethod<::java::time::chrono::ChronoZonedDateTime(::java::time::ZoneId)>("atZone"), //
		jMethod<::jint(::java::lang::Object)>("compareTo"), //
		jMethod<::jint(::java::time::chrono::ChronoLocalDateTime)>("compareTo"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::String(::java::time::format::DateTimeFormatter)>("format"), //
		jMethod<::java::time::LocalDateTime(::java::time::temporal::TemporalAccessor)>("from"), //
		jMethod<::jint(::java::time::temporal::TemporalField)>("get"), //
		jMethod<::jint()>("getDayOfMonth"), //
		jMethod<::java::time::DayOfWeek()>("getDayOfWeek"), //
		jMethod<::jint()>("getDayOfYear"), //
		jMethod<::jint()>("getHour"), //
		jMethod<::jlong(::java::time::temporal::TemporalField)>("getLong"), //
		jMethod<::jint()>("getMinute"), //
		jMethod<::java::time::Month()>("getMonth"), //
		jMethod<::jint()>("getMonthValue"), //
		jMethod<::jint()>("getNano"), //
		jMethod<::jint()>("getSecond"), //
		jMethod<::jint()>("getYear"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean(::java::time::chrono::ChronoLocalDateTime)>("isAfter"), //
		jMethod<::jboolean(::java::time::chrono::ChronoLocalDateTime)>("isBefore"), //
		jMethod<::jboolean(::java::time::chrono::ChronoLocalDateTime)>("isEqual"), //
		jMethod<::jboolean(::java::time::temporal::TemporalField)>("isSupported"), //
		jMethod<::jboolean(::java::time::temporal::TemporalUnit)>("isSupported"), //
		jMethod<::java::time::LocalDateTime(::jlong, ::java::time::temporal::TemporalUnit)>("minus"), //
		jMethod<::java::time::chrono::ChronoLocalDateTime(::jlong, ::java::time::temporal::TemporalUnit)>("minus"), //
		jMethod<::java::time::temporal::Temporal(::jlong, ::java::time::temporal::TemporalUnit)>("minus"), //
		jMethod<::java::time::LocalDateTime(::java::time::temporal::TemporalAmount)>("minus"), //
		jMethod<::java::time::chrono::ChronoLocalDateTime(::java::time::temporal::TemporalAmount)>("minus"), //
		jMethod<::java::time::temporal::Temporal(::java::time::temporal::TemporalAmount)>("minus"), //
		jMethod<::java::time::LocalDateTime(::jlong)>("minusDays"), //
		jMethod<::java::time::LocalDateTime(::jlong)>("minusHours"), //
		jMethod<::java::time::LocalDateTime(::jlong)>("minusMinutes"), //
		jMethod<::java::time::LocalDateTime(::jlong)>("minusMonths"), //
		jMethod<::java::time::LocalDateTime(::jlong)>("minusNanos"), //
		jMethod<::java::time::LocalDateTime(::jlong)>("minusSeconds"), //
		jMethod<::java::time::LocalDateTime(::jlong)>("minusWeeks"), //
		jMethod<::java::time::LocalDateTime(::jlong)>("minusYears"), //
		jMethod<::java::time::LocalDateTime()>("now"), //
		jMethod<::java::time::LocalDateTime(::java::time::Clock)>("now"), //
		jMethod<::java::time::LocalDateTime(::java::time::ZoneId)>("now"), //
		jMethod<::java::time::LocalDateTime(::jint, ::jint, ::jint, ::jint, ::jint)>("of"), //
		jMethod<::java::time::LocalDateTime(::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("of"), //
		jMethod<::java::time::LocalDateTime(::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("of"), //
		jMethod<::java::time::LocalDateTime(::jint, ::java::time::Month, ::jint, ::jint, ::jint)>("of"), //
		jMethod<::java::time::LocalDateTime(::jint, ::java::time::Month, ::jint, ::jint, ::jint, ::jint)>("of"), //
		jMethod<::java::time::LocalDateTime(::jint, ::java::time::Month, ::jint, ::jint, ::jint, ::jint, ::jint)>("of"), //
		jMethod<::java::time::LocalDateTime(::java::time::LocalDate, ::java::time::LocalTime)>("of"), //
		jMethod<::java::time::LocalDateTime(::jlong, ::jint, ::java::time::ZoneOffset)>("ofEpochSecond"), //
		jMethod<::java::time::LocalDateTime(::java::time::Instant, ::java::time::ZoneId)>("ofInstant"), //
		jMethod<::java::time::LocalDateTime(::java::lang::CharSequence)>("parse"), //
		jMethod<::java::time::LocalDateTime(::java::lang::CharSequence, ::java::time::format::DateTimeFormatter)>("parse"), //
		jMethod<::java::time::LocalDateTime(::jlong, ::java::time::temporal::TemporalUnit)>("plus"), //
		jMethod<::java::time::chrono::ChronoLocalDateTime(::jlong, ::java::time::temporal::TemporalUnit)>("plus"), //
		jMethod<::java::time::temporal::Temporal(::jlong, ::java::time::temporal::TemporalUnit)>("plus"), //
		jMethod<::java::time::LocalDateTime(::java::time::temporal::TemporalAmount)>("plus"), //
		jMethod<::java::time::chrono::ChronoLocalDateTime(::java::time::temporal::TemporalAmount)>("plus"), //
		jMethod<::java::time::temporal::Temporal(::java::time::temporal::TemporalAmount)>("plus"), //
		jMethod<::java::time::LocalDateTime(::jlong)>("plusDays"), //
		jMethod<::java::time::LocalDateTime(::jlong)>("plusHours"), //
		jMethod<::java::time::LocalDateTime(::jlong)>("plusMinutes"), //
		jMethod<::java::time::LocalDateTime(::jlong)>("plusMonths"), //
		jMethod<::java::time::LocalDateTime(::jlong)>("plusNanos"), //
		jMethod<::java::time::LocalDateTime(::jlong)>("plusSeconds"), //
		jMethod<::java::time::LocalDateTime(::jlong)>("plusWeeks"), //
		jMethod<::java::time::LocalDateTime(::jlong)>("plusYears"), //
		jMethod<::java::lang::Object(::java::time::temporal::TemporalQuery)>("query"), //
		jMethod<::java::time::temporal::ValueRange(::java::time::temporal::TemporalField)>("range"), //
		jMethod<::java::time::LocalDate()>("toLocalDate"), //
		jMethod<::java::time::chrono::ChronoLocalDate()>("toLocalDate"), //
		jMethod<::java::time::LocalTime()>("toLocalTime"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::time::LocalDateTime(::java::time::temporal::TemporalUnit)>("truncatedTo"), //
		jMethod<::jlong(::java::time::temporal::Temporal, ::java::time::temporal::TemporalUnit)>("until"), //
		jMethod<::java::time::LocalDateTime(::java::time::temporal::TemporalAdjuster)>("with"), //
		jMethod<::java::time::chrono::ChronoLocalDateTime(::java::time::temporal::TemporalAdjuster)>("with"), //
		jMethod<::java::time::temporal::Temporal(::java::time::temporal::TemporalAdjuster)>("with"), //
		jMethod<::java::time::LocalDateTime(::java::time::temporal::TemporalField, ::jlong)>("with"), //
		jMethod<::java::time::chrono::ChronoLocalDateTime(::java::time::temporal::TemporalField, ::jlong)>("with"), //
		jMethod<::java::time::temporal::Temporal(::java::time::temporal::TemporalField, ::jlong)>("with"), //
		jMethod<::java::time::LocalDateTime(::jint)>("withDayOfMonth"), //
		jMethod<::java::time::LocalDateTime(::jint)>("withDayOfYear"), //
		jMethod<::java::time::LocalDateTime(::jint)>("withHour"), //
		jMethod<::java::time::LocalDateTime(::jint)>("withMinute"), //
		jMethod<::java::time::LocalDateTime(::jint)>("withMonth"), //
		jMethod<::java::time::LocalDateTime(::jint)>("withNano"), //
		jMethod<::java::time::LocalDateTime(::jint)>("withSecond"), //
		jMethod<::java::time::LocalDateTime(::jint)>("withYear"), //
	};

	template<typename R = ::java::time::temporal::Temporal, typename... Args>
	auto adjustInto(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("adjustInto")] != -1);
		return call<R>("adjustInto", forward<Args>(args)...);
	}

	template<typename R = ::java::time::OffsetDateTime, typename... Args>
	auto atOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("atOffset")] != -1);
		return call<R>("atOffset", forward<Args>(args)...);
	}

	template<typename R = ::java::time::ZonedDateTime, typename... Args>
	auto atZone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("atZone")] != -1);
		return call<R>("atZone", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto compareTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("compareTo")] != -1);
		return call<R>("compareTo", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto format(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("format")] != -1);
		return call<R>("format", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDateTime, typename... Args>
	static auto from(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("from")] != -1);
		return scall<R>("from", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("get")] != -1);
		return call<R>("get", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDayOfMonth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDayOfMonth")] != -1);
		return call<R>("getDayOfMonth", forward<Args>(args)...);
	}

	template<typename R = ::java::time::DayOfWeek, typename... Args>
	auto getDayOfWeek(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDayOfWeek")] != -1);
		return call<R>("getDayOfWeek", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDayOfYear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDayOfYear")] != -1);
		return call<R>("getDayOfYear", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHour(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHour")] != -1);
		return call<R>("getHour", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLong")] != -1);
		return call<R>("getLong", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinute")] != -1);
		return call<R>("getMinute", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Month, typename... Args>
	auto getMonth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMonth")] != -1);
		return call<R>("getMonth", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMonthValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMonthValue")] != -1);
		return call<R>("getMonthValue", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNano(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNano")] != -1);
		return call<R>("getNano", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSecond(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSecond")] != -1);
		return call<R>("getSecond", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getYear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getYear")] != -1);
		return call<R>("getYear", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAfter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isAfter")] != -1);
		return call<R>("isAfter", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isBefore(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isBefore")] != -1);
		return call<R>("isBefore", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEqual(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isEqual")] != -1);
		return call<R>("isEqual", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isSupported")] != -1);
		return call<R>("isSupported", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDateTime, typename... Args>
	auto minus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("minus")] != -1);
		return call<R>("minus", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDateTime, typename... Args>
	auto minusDays(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("minusDays")] != -1);
		return call<R>("minusDays", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDateTime, typename... Args>
	auto minusHours(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("minusHours")] != -1);
		return call<R>("minusHours", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDateTime, typename... Args>
	auto minusMinutes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("minusMinutes")] != -1);
		return call<R>("minusMinutes", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDateTime, typename... Args>
	auto minusMonths(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("minusMonths")] != -1);
		return call<R>("minusMonths", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDateTime, typename... Args>
	auto minusNanos(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("minusNanos")] != -1);
		return call<R>("minusNanos", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDateTime, typename... Args>
	auto minusSeconds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("minusSeconds")] != -1);
		return call<R>("minusSeconds", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDateTime, typename... Args>
	auto minusWeeks(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("minusWeeks")] != -1);
		return call<R>("minusWeeks", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDateTime, typename... Args>
	auto minusYears(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("minusYears")] != -1);
		return call<R>("minusYears", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDateTime, typename... Args>
	static auto now(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("now")] != -1);
		return scall<R>("now", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDateTime, typename... Args>
	static auto of(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("of")] != -1);
		return scall<R>("of", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDateTime, typename... Args>
	static auto ofEpochSecond(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("ofEpochSecond")] != -1);
		return scall<R>("ofEpochSecond", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDateTime, typename... Args>
	static auto ofInstant(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("ofInstant")] != -1);
		return scall<R>("ofInstant", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDateTime, typename... Args>
	static auto parse(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("parse")] != -1);
		return scall<R>("parse", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDateTime, typename... Args>
	auto plus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("plus")] != -1);
		return call<R>("plus", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDateTime, typename... Args>
	auto plusDays(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("plusDays")] != -1);
		return call<R>("plusDays", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDateTime, typename... Args>
	auto plusHours(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("plusHours")] != -1);
		return call<R>("plusHours", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDateTime, typename... Args>
	auto plusMinutes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("plusMinutes")] != -1);
		return call<R>("plusMinutes", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDateTime, typename... Args>
	auto plusMonths(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("plusMonths")] != -1);
		return call<R>("plusMonths", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDateTime, typename... Args>
	auto plusNanos(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("plusNanos")] != -1);
		return call<R>("plusNanos", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDateTime, typename... Args>
	auto plusSeconds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("plusSeconds")] != -1);
		return call<R>("plusSeconds", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDateTime, typename... Args>
	auto plusWeeks(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("plusWeeks")] != -1);
		return call<R>("plusWeeks", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDateTime, typename... Args>
	auto plusYears(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("plusYears")] != -1);
		return call<R>("plusYears", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto query(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("query")] != -1);
		return call<R>("query", forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::ValueRange, typename... Args>
	auto range(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("range")] != -1);
		return call<R>("range", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDate, typename... Args>
	auto toLocalDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toLocalDate")] != -1);
		return call<R>("toLocalDate", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalTime, typename... Args>
	auto toLocalTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toLocalTime")] != -1);
		return call<R>("toLocalTime", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDateTime, typename... Args>
	auto truncatedTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("truncatedTo")] != -1);
		return call<R>("truncatedTo", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto until(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("until")] != -1);
		return call<R>("until", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDateTime, typename... Args>
	auto with(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("with")] != -1);
		return call<R>("with", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDateTime, typename... Args>
	auto withDayOfMonth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("withDayOfMonth")] != -1);
		return call<R>("withDayOfMonth", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDateTime, typename... Args>
	auto withDayOfYear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("withDayOfYear")] != -1);
		return call<R>("withDayOfYear", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDateTime, typename... Args>
	auto withHour(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("withHour")] != -1);
		return call<R>("withHour", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDateTime, typename... Args>
	auto withMinute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("withMinute")] != -1);
		return call<R>("withMinute", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDateTime, typename... Args>
	auto withMonth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("withMonth")] != -1);
		return call<R>("withMonth", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDateTime, typename... Args>
	auto withNano(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("withNano")] != -1);
		return call<R>("withNano", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDateTime, typename... Args>
	auto withSecond(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("withSecond")] != -1);
		return call<R>("withSecond", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDateTime, typename... Args>
	auto withYear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("withYear")] != -1);
		return call<R>("withYear", forward<Args>(args)...);
	}

};

#endif
