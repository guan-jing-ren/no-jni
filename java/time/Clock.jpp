#ifndef java_time_Clock_HPP
#define java_time_Clock_HPP

#include "../../jfwd_decl.hpp"

class ::java::time::Clock : public jObject<::java::time::Clock, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_time / "Clock";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::time::Clock(::java::time::Instant, ::java::time::ZoneId)>("fixed"), //
		jMethod<::java::time::ZoneId()>("getZone"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::time::Instant()>("instant"), //
		jMethod<::jlong()>("millis"), //
		jMethod<::java::time::Clock(::java::time::Clock, ::java::time::Duration)>("offset"), //
		jMethod<::java::time::Clock(::java::time::ZoneId)>("system"), //
		jMethod<::java::time::Clock()>("systemDefaultZone"), //
		jMethod<::java::time::Clock()>("systemUTC"), //
		jMethod<::java::time::Clock(::java::time::Clock, ::java::time::Duration)>("tick"), //
		jMethod<::java::time::Clock(::java::time::ZoneId)>("tickMinutes"), //
		jMethod<::java::time::Clock(::java::time::ZoneId)>("tickSeconds"), //
		jMethod<::java::time::Clock(::java::time::ZoneId)>("withZone"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Clock, typename... Args>
	static auto fixed(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("fixed")] != -1);
		return scall<R>("fixed", forward<Args>(args)...);
	}

	template<typename R = ::java::time::ZoneId, typename... Args>
	auto getZone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getZone")] != -1);
		return call<R>("getZone", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Instant, typename... Args>
	auto instant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("instant")] != -1);
		return call<R>("instant", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto millis(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("millis")] != -1);
		return call<R>("millis", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Clock, typename... Args>
	static auto offset(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("offset")] != -1);
		return scall<R>("offset", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Clock, typename... Args>
	static auto system(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("system")] != -1);
		return scall<R>("system", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Clock, typename... Args>
	static auto systemDefaultZone(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("systemDefaultZone")] != -1);
		return scall<R>("systemDefaultZone", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Clock, typename... Args>
	static auto systemUTC(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("systemUTC")] != -1);
		return scall<R>("systemUTC", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Clock, typename... Args>
	static auto tick(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("tick")] != -1);
		return scall<R>("tick", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Clock, typename... Args>
	static auto tickMinutes(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("tickMinutes")] != -1);
		return scall<R>("tickMinutes", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Clock, typename... Args>
	static auto tickSeconds(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("tickSeconds")] != -1);
		return scall<R>("tickSeconds", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Clock, typename... Args>
	auto withZone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("withZone")] != -1);
		return call<R>("withZone", forward<Args>(args)...);
	}

};

#endif
