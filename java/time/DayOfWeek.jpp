#ifndef java_time_DayOfWeek_HPP
#define java_time_DayOfWeek_HPP

#include "../../jfwd_decl.hpp"

class ::java::time::DayOfWeek : public jObject<::java::time::DayOfWeek, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_time / "DayOfWeek";

	constexpr static Enume field_signatures{
		jField<::java::time::DayOfWeek>("FRIDAY"), //
		jField<::java::time::DayOfWeek>("MONDAY"), //
		jField<::java::time::DayOfWeek>("SATURDAY"), //
		jField<::java::time::DayOfWeek>("SUNDAY"), //
		jField<::java::time::DayOfWeek>("THURSDAY"), //
		jField<::java::time::DayOfWeek>("TUESDAY"), //
		jField<::java::time::DayOfWeek>("WEDNESDAY"), //
	};

	template<typename F = ::java::time::DayOfWeek>
	static auto FRIDAY() {
		static_assert(field_signatures[jField<F>("FRIDAY")] != -1);
		return sat<F>("FRIDAY");
	}

	template<typename F = ::java::time::DayOfWeek>
	static auto MONDAY() {
		static_assert(field_signatures[jField<F>("MONDAY")] != -1);
		return sat<F>("MONDAY");
	}

	template<typename F = ::java::time::DayOfWeek>
	static auto SATURDAY() {
		static_assert(field_signatures[jField<F>("SATURDAY")] != -1);
		return sat<F>("SATURDAY");
	}

	template<typename F = ::java::time::DayOfWeek>
	static auto SUNDAY() {
		static_assert(field_signatures[jField<F>("SUNDAY")] != -1);
		return sat<F>("SUNDAY");
	}

	template<typename F = ::java::time::DayOfWeek>
	static auto THURSDAY() {
		static_assert(field_signatures[jField<F>("THURSDAY")] != -1);
		return sat<F>("THURSDAY");
	}

	template<typename F = ::java::time::DayOfWeek>
	static auto TUESDAY() {
		static_assert(field_signatures[jField<F>("TUESDAY")] != -1);
		return sat<F>("TUESDAY");
	}

	template<typename F = ::java::time::DayOfWeek>
	static auto WEDNESDAY() {
		static_assert(field_signatures[jField<F>("WEDNESDAY")] != -1);
		return sat<F>("WEDNESDAY");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::time::temporal::Temporal(::java::time::temporal::Temporal)>("adjustInto"), //
		jMethod<::java::time::DayOfWeek(::java::time::temporal::TemporalAccessor)>("from"), //
		jMethod<::jint(::java::time::temporal::TemporalField)>("get"), //
		jMethod<::java::lang::String(::java::time::format::TextStyle, ::java::util::Locale)>("getDisplayName"), //
		jMethod<::jlong(::java::time::temporal::TemporalField)>("getLong"), //
		jMethod<::jint()>("getValue"), //
		jMethod<::jboolean(::java::time::temporal::TemporalField)>("isSupported"), //
		jMethod<::java::time::DayOfWeek(::jlong)>("minus"), //
		jMethod<::java::time::DayOfWeek(::jint)>("of"), //
		jMethod<::java::time::DayOfWeek(::jlong)>("plus"), //
		jMethod<::java::lang::Object(::java::time::temporal::TemporalQuery)>("query"), //
		jMethod<::java::time::temporal::ValueRange(::java::time::temporal::TemporalField)>("range"), //
		jMethod<::java::time::DayOfWeek(::java::lang::String)>("valueOf"), //
		jMethod<::java::time::DayOfWeek *()>("values"), //
	};

	template<typename R = ::java::time::temporal::Temporal, typename... Args>
	auto adjustInto(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("adjustInto")] != -1);
		return call<R>("adjustInto", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::DayOfWeek, typename... Args>
	static auto from(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("from")] != -1);
		return scall<R>("from", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDisplayName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisplayName")] != -1);
		return call<R>("getDisplayName", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLong")] != -1);
		return call<R>("getLong", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSupported")] != -1);
		return call<R>("isSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::DayOfWeek, typename... Args>
	auto minus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("minus")] != -1);
		return call<R>("minus", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::DayOfWeek, typename... Args>
	static auto of(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("of")] != -1);
		return scall<R>("of", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::DayOfWeek, typename... Args>
	auto plus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("plus")] != -1);
		return call<R>("plus", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto query(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("query")] != -1);
		return call<R>("query", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::ValueRange, typename... Args>
	auto range(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("range")] != -1);
		return call<R>("range", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::DayOfWeek, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::DayOfWeek *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
