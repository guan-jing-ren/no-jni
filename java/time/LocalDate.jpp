#ifndef java_time_LocalDate_HPP
#define java_time_LocalDate_HPP

#include "../../jfwd_decl.hpp"

class ::java::time::LocalDate : public jObject<::java::time::LocalDate, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_time / "LocalDate";

	constexpr static Enume field_signatures{
		jField<::java::time::LocalDate>("MAX"), //
		jField<::java::time::LocalDate>("MIN"), //
	};

	template<typename F = ::java::time::LocalDate>
	static auto MAX() {
		static_assert(field_signatures[jField<F>("MAX")] != -1);
		return sat<F>("MAX");
	}

	template<typename F = ::java::time::LocalDate>
	static auto MIN() {
		static_assert(field_signatures[jField<F>("MIN")] != -1);
		return sat<F>("MIN");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::time::temporal::Temporal(::java::time::temporal::Temporal)>("adjustInto"), //
		jMethod<::java::time::LocalDateTime()>("atStartOfDay"), //
		jMethod<::java::time::ZonedDateTime(::java::time::ZoneId)>("atStartOfDay"), //
		jMethod<::java::time::LocalDateTime(::jint, ::jint)>("atTime"), //
		jMethod<::java::time::LocalDateTime(::jint, ::jint, ::jint)>("atTime"), //
		jMethod<::java::time::LocalDateTime(::jint, ::jint, ::jint, ::jint)>("atTime"), //
		jMethod<::java::time::LocalDateTime(::java::time::LocalTime)>("atTime"), //
		jMethod<::java::time::chrono::ChronoLocalDateTime(::java::time::LocalTime)>("atTime"), //
		jMethod<::java::time::OffsetDateTime(::java::time::OffsetTime)>("atTime"), //
		jMethod<::jint(::java::lang::Object)>("compareTo"), //
		jMethod<::jint(::java::time::chrono::ChronoLocalDate)>("compareTo"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::String(::java::time::format::DateTimeFormatter)>("format"), //
		jMethod<::java::time::LocalDate(::java::time::temporal::TemporalAccessor)>("from"), //
		jMethod<::java::time::chrono::ChronoLocalDate(::java::time::temporal::TemporalAccessor)>("from"), //
		jMethod<::jint(::java::time::temporal::TemporalField)>("get"), //
		jMethod<::java::time::chrono::Chronology()>("getChronology"), //
		jMethod<::java::time::chrono::IsoChronology()>("getChronology"), //
		jMethod<::jint()>("getDayOfMonth"), //
		jMethod<::java::time::DayOfWeek()>("getDayOfWeek"), //
		jMethod<::jint()>("getDayOfYear"), //
		jMethod<::java::time::chrono::Era()>("getEra"), //
		jMethod<::jlong(::java::time::temporal::TemporalField)>("getLong"), //
		jMethod<::java::time::Month()>("getMonth"), //
		jMethod<::jint()>("getMonthValue"), //
		jMethod<::jint()>("getYear"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean(::java::time::chrono::ChronoLocalDate)>("isAfter"), //
		jMethod<::jboolean(::java::time::chrono::ChronoLocalDate)>("isBefore"), //
		jMethod<::jboolean(::java::time::chrono::ChronoLocalDate)>("isEqual"), //
		jMethod<::jboolean()>("isLeapYear"), //
		jMethod<::jboolean(::java::time::temporal::TemporalField)>("isSupported"), //
		jMethod<::jboolean(::java::time::temporal::TemporalUnit)>("isSupported"), //
		jMethod<::jint()>("lengthOfMonth"), //
		jMethod<::jint()>("lengthOfYear"), //
		jMethod<::java::time::LocalDate(::jlong, ::java::time::temporal::TemporalUnit)>("minus"), //
		jMethod<::java::time::chrono::ChronoLocalDate(::jlong, ::java::time::temporal::TemporalUnit)>("minus"), //
		jMethod<::java::time::temporal::Temporal(::jlong, ::java::time::temporal::TemporalUnit)>("minus"), //
		jMethod<::java::time::LocalDate(::java::time::temporal::TemporalAmount)>("minus"), //
		jMethod<::java::time::chrono::ChronoLocalDate(::java::time::temporal::TemporalAmount)>("minus"), //
		jMethod<::java::time::temporal::Temporal(::java::time::temporal::TemporalAmount)>("minus"), //
		jMethod<::java::time::LocalDate(::jlong)>("minusDays"), //
		jMethod<::java::time::LocalDate(::jlong)>("minusMonths"), //
		jMethod<::java::time::LocalDate(::jlong)>("minusWeeks"), //
		jMethod<::java::time::LocalDate(::jlong)>("minusYears"), //
		jMethod<::java::time::LocalDate()>("now"), //
		jMethod<::java::time::LocalDate(::java::time::Clock)>("now"), //
		jMethod<::java::time::LocalDate(::java::time::ZoneId)>("now"), //
		jMethod<::java::time::LocalDate(::jint, ::jint, ::jint)>("of"), //
		jMethod<::java::time::LocalDate(::jint, ::java::time::Month, ::jint)>("of"), //
		jMethod<::java::time::LocalDate(::jlong)>("ofEpochDay"), //
		jMethod<::java::time::LocalDate(::jint, ::jint)>("ofYearDay"), //
		jMethod<::java::time::LocalDate(::java::lang::CharSequence)>("parse"), //
		jMethod<::java::time::LocalDate(::java::lang::CharSequence, ::java::time::format::DateTimeFormatter)>("parse"), //
		jMethod<::java::time::LocalDate(::jlong, ::java::time::temporal::TemporalUnit)>("plus"), //
		jMethod<::java::time::chrono::ChronoLocalDate(::jlong, ::java::time::temporal::TemporalUnit)>("plus"), //
		jMethod<::java::time::temporal::Temporal(::jlong, ::java::time::temporal::TemporalUnit)>("plus"), //
		jMethod<::java::time::LocalDate(::java::time::temporal::TemporalAmount)>("plus"), //
		jMethod<::java::time::chrono::ChronoLocalDate(::java::time::temporal::TemporalAmount)>("plus"), //
		jMethod<::java::time::temporal::Temporal(::java::time::temporal::TemporalAmount)>("plus"), //
		jMethod<::java::time::LocalDate(::jlong)>("plusDays"), //
		jMethod<::java::time::LocalDate(::jlong)>("plusMonths"), //
		jMethod<::java::time::LocalDate(::jlong)>("plusWeeks"), //
		jMethod<::java::time::LocalDate(::jlong)>("plusYears"), //
		jMethod<::java::lang::Object(::java::time::temporal::TemporalQuery)>("query"), //
		jMethod<::java::time::temporal::ValueRange(::java::time::temporal::TemporalField)>("range"), //
		jMethod<::java::util::Comparator()>("timeLineOrder"), //
		jMethod<::jlong()>("toEpochDay"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::time::Period(::java::time::chrono::ChronoLocalDate)>("until"), //
		jMethod<::java::time::chrono::ChronoPeriod(::java::time::chrono::ChronoLocalDate)>("until"), //
		jMethod<::jlong(::java::time::temporal::Temporal, ::java::time::temporal::TemporalUnit)>("until"), //
		jMethod<::java::time::LocalDate(::java::time::temporal::TemporalAdjuster)>("with"), //
		jMethod<::java::time::chrono::ChronoLocalDate(::java::time::temporal::TemporalAdjuster)>("with"), //
		jMethod<::java::time::temporal::Temporal(::java::time::temporal::TemporalAdjuster)>("with"), //
		jMethod<::java::time::LocalDate(::java::time::temporal::TemporalField, ::jlong)>("with"), //
		jMethod<::java::time::chrono::ChronoLocalDate(::java::time::temporal::TemporalField, ::jlong)>("with"), //
		jMethod<::java::time::temporal::Temporal(::java::time::temporal::TemporalField, ::jlong)>("with"), //
		jMethod<::java::time::LocalDate(::jint)>("withDayOfMonth"), //
		jMethod<::java::time::LocalDate(::jint)>("withDayOfYear"), //
		jMethod<::java::time::LocalDate(::jint)>("withMonth"), //
		jMethod<::java::time::LocalDate(::jint)>("withYear"), //
	};

	template<typename R = ::java::time::temporal::Temporal, typename... Args>
	auto adjustInto(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("adjustInto")] != -1);
		return call<R>("adjustInto", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDateTime, typename... Args>
	auto atStartOfDay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("atStartOfDay")] != -1);
		return call<R>("atStartOfDay", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDateTime, typename... Args>
	auto atTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("atTime")] != -1);
		return call<R>("atTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto compareTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compareTo")] != -1);
		return call<R>("compareTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto format(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("format")] != -1);
		return call<R>("format", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDate, typename... Args>
	static auto from(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("from")] != -1);
		return scall<R>("from", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::chrono::Chronology, typename... Args>
	auto getChronology(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChronology")] != -1);
		return call<R>("getChronology", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDayOfMonth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDayOfMonth")] != -1);
		return call<R>("getDayOfMonth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::DayOfWeek, typename... Args>
	auto getDayOfWeek(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDayOfWeek")] != -1);
		return call<R>("getDayOfWeek", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDayOfYear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDayOfYear")] != -1);
		return call<R>("getDayOfYear", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::chrono::Era, typename... Args>
	auto getEra(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEra")] != -1);
		return call<R>("getEra", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLong")] != -1);
		return call<R>("getLong", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::Month, typename... Args>
	auto getMonth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMonth")] != -1);
		return call<R>("getMonth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMonthValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMonthValue")] != -1);
		return call<R>("getMonthValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getYear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getYear")] != -1);
		return call<R>("getYear", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAfter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAfter")] != -1);
		return call<R>("isAfter", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isBefore(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isBefore")] != -1);
		return call<R>("isBefore", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEqual(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEqual")] != -1);
		return call<R>("isEqual", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLeapYear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLeapYear")] != -1);
		return call<R>("isLeapYear", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSupported")] != -1);
		return call<R>("isSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto lengthOfMonth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lengthOfMonth")] != -1);
		return call<R>("lengthOfMonth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto lengthOfYear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lengthOfYear")] != -1);
		return call<R>("lengthOfYear", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDate, typename... Args>
	auto minus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("minus")] != -1);
		return call<R>("minus", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDate, typename... Args>
	auto minusDays(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("minusDays")] != -1);
		return call<R>("minusDays", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDate, typename... Args>
	auto minusMonths(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("minusMonths")] != -1);
		return call<R>("minusMonths", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDate, typename... Args>
	auto minusWeeks(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("minusWeeks")] != -1);
		return call<R>("minusWeeks", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDate, typename... Args>
	auto minusYears(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("minusYears")] != -1);
		return call<R>("minusYears", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDate, typename... Args>
	static auto now(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("now")] != -1);
		return scall<R>("now", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDate, typename... Args>
	static auto of(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("of")] != -1);
		return scall<R>("of", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDate, typename... Args>
	static auto ofEpochDay(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ofEpochDay")] != -1);
		return scall<R>("ofEpochDay", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDate, typename... Args>
	static auto ofYearDay(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ofYearDay")] != -1);
		return scall<R>("ofYearDay", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDate, typename... Args>
	static auto parse(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parse")] != -1);
		return scall<R>("parse", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDate, typename... Args>
	auto plus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("plus")] != -1);
		return call<R>("plus", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDate, typename... Args>
	auto plusDays(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("plusDays")] != -1);
		return call<R>("plusDays", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDate, typename... Args>
	auto plusMonths(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("plusMonths")] != -1);
		return call<R>("plusMonths", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDate, typename... Args>
	auto plusWeeks(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("plusWeeks")] != -1);
		return call<R>("plusWeeks", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDate, typename... Args>
	auto plusYears(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("plusYears")] != -1);
		return call<R>("plusYears", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto query(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("query")] != -1);
		return call<R>("query", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::ValueRange, typename... Args>
	auto range(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("range")] != -1);
		return call<R>("range", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Comparator, typename... Args>
	static auto timeLineOrder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("timeLineOrder")] != -1);
		return scall<R>("timeLineOrder", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto toEpochDay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toEpochDay")] != -1);
		return call<R>("toEpochDay", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::Period, typename... Args>
	auto until(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("until")] != -1);
		return call<R>("until", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDate, typename... Args>
	auto with(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("with")] != -1);
		return call<R>("with", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDate, typename... Args>
	auto withDayOfMonth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("withDayOfMonth")] != -1);
		return call<R>("withDayOfMonth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDate, typename... Args>
	auto withDayOfYear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("withDayOfYear")] != -1);
		return call<R>("withDayOfYear", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDate, typename... Args>
	auto withMonth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("withMonth")] != -1);
		return call<R>("withMonth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDate, typename... Args>
	auto withYear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("withYear")] != -1);
		return call<R>("withYear", std::forward<Args>(args)...);
	}

};

#endif
