#ifndef java_time_format_DecimalStyle_HPP
#define java_time_format_DecimalStyle_HPP

#include "../../../jfwd_decl.hpp"

class ::java::time::format::DecimalStyle : public jObject<::java::time::format::DecimalStyle, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_time_format / "DecimalStyle";

	constexpr static Enume field_signatures{
		jField<::java::time::format::DecimalStyle>("STANDARD"), //
	};

	template<typename F = ::java::time::format::DecimalStyle>
	static auto STANDARD() {
		static_assert(field_signatures[jField<F>("STANDARD")] != -1);
		return sat<F>("STANDARD");
	}

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::util::Set()>("getAvailableLocales"), //
		jMethod<::jchar()>("getDecimalSeparator"), //
		jMethod<::jchar()>("getNegativeSign"), //
		jMethod<::jchar()>("getPositiveSign"), //
		jMethod<::jchar()>("getZeroDigit"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::time::format::DecimalStyle(::java::util::Locale)>("of"), //
		jMethod<::java::time::format::DecimalStyle()>("ofDefaultLocale"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::time::format::DecimalStyle(::jchar)>("withDecimalSeparator"), //
		jMethod<::java::time::format::DecimalStyle(::jchar)>("withNegativeSign"), //
		jMethod<::java::time::format::DecimalStyle(::jchar)>("withPositiveSign"), //
		jMethod<::java::time::format::DecimalStyle(::jchar)>("withZeroDigit"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	static auto getAvailableLocales(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAvailableLocales")] != -1);
		return scall<R>("getAvailableLocales", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto getDecimalSeparator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDecimalSeparator")] != -1);
		return call<R>("getDecimalSeparator", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto getNegativeSign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNegativeSign")] != -1);
		return call<R>("getNegativeSign", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto getPositiveSign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPositiveSign")] != -1);
		return call<R>("getPositiveSign", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto getZeroDigit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getZeroDigit")] != -1);
		return call<R>("getZeroDigit", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DecimalStyle, typename... Args>
	static auto of(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("of")] != -1);
		return scall<R>("of", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DecimalStyle, typename... Args>
	static auto ofDefaultLocale(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ofDefaultLocale")] != -1);
		return scall<R>("ofDefaultLocale", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DecimalStyle, typename... Args>
	auto withDecimalSeparator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("withDecimalSeparator")] != -1);
		return call<R>("withDecimalSeparator", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DecimalStyle, typename... Args>
	auto withNegativeSign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("withNegativeSign")] != -1);
		return call<R>("withNegativeSign", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DecimalStyle, typename... Args>
	auto withPositiveSign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("withPositiveSign")] != -1);
		return call<R>("withPositiveSign", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DecimalStyle, typename... Args>
	auto withZeroDigit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("withZeroDigit")] != -1);
		return call<R>("withZeroDigit", std::forward<Args>(args)...);
	}

};

#endif
