#ifndef java_time_format_JPP
#define java_time_format_JPP

namespace java::time::format { class DateTimeFormatter; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatter> = ::java_time_format / "DateTimeFormatter";
namespace java::time::format { class DateTimeFormatter$ClassicFormat; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatter$ClassicFormat> = ::java_time_format / "DateTimeFormatter$ClassicFormat";
namespace java::time::format { class DateTimeFormatterBuilder; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder> = ::java_time_format / "DateTimeFormatterBuilder";
namespace java::time::format { class DateTimeFormatterBuilder$1; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$1> = ::java_time_format / "DateTimeFormatterBuilder$1";
namespace java::time::format { class DateTimeFormatterBuilder$2; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$2> = ::java_time_format / "DateTimeFormatterBuilder$2";
namespace java::time::format { class DateTimeFormatterBuilder$3; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$3> = ::java_time_format / "DateTimeFormatterBuilder$3";
namespace java::time::format { class DateTimeFormatterBuilder$CharLiteralPrinterParser; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$CharLiteralPrinterParser> = ::java_time_format / "DateTimeFormatterBuilder$CharLiteralPrinterParser";
namespace java::time::format { class DateTimeFormatterBuilder$ChronoPrinterParser; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$ChronoPrinterParser> = ::java_time_format / "DateTimeFormatterBuilder$ChronoPrinterParser";
namespace java::time::format { class DateTimeFormatterBuilder$CompositePrinterParser; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$CompositePrinterParser> = ::java_time_format / "DateTimeFormatterBuilder$CompositePrinterParser";
namespace java::time::format { class DateTimeFormatterBuilder$DateTimePrinterParser; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$DateTimePrinterParser> = ::java_time_format / "DateTimeFormatterBuilder$DateTimePrinterParser";
namespace java::time::format { class DateTimeFormatterBuilder$DefaultValueParser; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$DefaultValueParser> = ::java_time_format / "DateTimeFormatterBuilder$DefaultValueParser";
namespace java::time::format { class DateTimeFormatterBuilder$FractionPrinterParser; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$FractionPrinterParser> = ::java_time_format / "DateTimeFormatterBuilder$FractionPrinterParser";
namespace java::time::format { class DateTimeFormatterBuilder$InstantPrinterParser; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$InstantPrinterParser> = ::java_time_format / "DateTimeFormatterBuilder$InstantPrinterParser";
namespace java::time::format { class DateTimeFormatterBuilder$LocalizedOffsetIdPrinterParser; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$LocalizedOffsetIdPrinterParser> = ::java_time_format / "DateTimeFormatterBuilder$LocalizedOffsetIdPrinterParser";
namespace java::time::format { class DateTimeFormatterBuilder$LocalizedPrinterParser; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$LocalizedPrinterParser> = ::java_time_format / "DateTimeFormatterBuilder$LocalizedPrinterParser";
namespace java::time::format { class DateTimeFormatterBuilder$NumberPrinterParser; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$NumberPrinterParser> = ::java_time_format / "DateTimeFormatterBuilder$NumberPrinterParser";
namespace java::time::format { class DateTimeFormatterBuilder$OffsetIdPrinterParser; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$OffsetIdPrinterParser> = ::java_time_format / "DateTimeFormatterBuilder$OffsetIdPrinterParser";
namespace java::time::format { class DateTimeFormatterBuilder$PadPrinterParserDecorator; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$PadPrinterParserDecorator> = ::java_time_format / "DateTimeFormatterBuilder$PadPrinterParserDecorator";
namespace java::time::format { class DateTimeFormatterBuilder$PrefixTree; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$PrefixTree> = ::java_time_format / "DateTimeFormatterBuilder$PrefixTree";
namespace java::time::format { class DateTimeFormatterBuilder$PrefixTree$CI; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$PrefixTree$CI> = ::java_time_format / "DateTimeFormatterBuilder$PrefixTree$CI";
namespace java::time::format { class DateTimeFormatterBuilder$PrefixTree$LENIENT; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$PrefixTree$LENIENT> = ::java_time_format / "DateTimeFormatterBuilder$PrefixTree$LENIENT";
namespace java::time::format { class DateTimeFormatterBuilder$ReducedPrinterParser; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$ReducedPrinterParser> = ::java_time_format / "DateTimeFormatterBuilder$ReducedPrinterParser";
namespace java::time::format { class DateTimeFormatterBuilder$SettingsParser; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$SettingsParser> = ::java_time_format / "DateTimeFormatterBuilder$SettingsParser";
namespace java::time::format { class DateTimeFormatterBuilder$StringLiteralPrinterParser; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$StringLiteralPrinterParser> = ::java_time_format / "DateTimeFormatterBuilder$StringLiteralPrinterParser";
namespace java::time::format { class DateTimeFormatterBuilder$TextPrinterParser; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$TextPrinterParser> = ::java_time_format / "DateTimeFormatterBuilder$TextPrinterParser";
namespace java::time::format { class DateTimeFormatterBuilder$WeekBasedFieldPrinterParser; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$WeekBasedFieldPrinterParser> = ::java_time_format / "DateTimeFormatterBuilder$WeekBasedFieldPrinterParser";
namespace java::time::format { class DateTimeFormatterBuilder$ZoneIdPrinterParser; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$ZoneIdPrinterParser> = ::java_time_format / "DateTimeFormatterBuilder$ZoneIdPrinterParser";
namespace java::time::format { class DateTimeFormatterBuilder$ZoneTextPrinterParser; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$ZoneTextPrinterParser> = ::java_time_format / "DateTimeFormatterBuilder$ZoneTextPrinterParser";
namespace java::time::format { class DateTimeParseContext; }
template<> constexpr auto signature<::java::time::format::DateTimeParseContext> = ::java_time_format / "DateTimeParseContext";
namespace java::time::format { class DateTimeParseException; }
template<> constexpr auto signature<::java::time::format::DateTimeParseException> = ::java_time_format / "DateTimeParseException";
namespace java::time::format { class DateTimePrintContext; }
template<> constexpr auto signature<::java::time::format::DateTimePrintContext> = ::java_time_format / "DateTimePrintContext";
namespace java::time::format { class DateTimePrintContext$1; }
template<> constexpr auto signature<::java::time::format::DateTimePrintContext$1> = ::java_time_format / "DateTimePrintContext$1";
namespace java::time::format { class DateTimeTextProvider; }
template<> constexpr auto signature<::java::time::format::DateTimeTextProvider> = ::java_time_format / "DateTimeTextProvider";
namespace java::time::format { class DateTimeTextProvider$1; }
template<> constexpr auto signature<::java::time::format::DateTimeTextProvider$1> = ::java_time_format / "DateTimeTextProvider$1";
namespace java::time::format { class DateTimeTextProvider$2; }
template<> constexpr auto signature<::java::time::format::DateTimeTextProvider$2> = ::java_time_format / "DateTimeTextProvider$2";
namespace java::time::format { class DateTimeTextProvider$LocaleStore; }
template<> constexpr auto signature<::java::time::format::DateTimeTextProvider$LocaleStore> = ::java_time_format / "DateTimeTextProvider$LocaleStore";
namespace java::time::format { class DecimalStyle; }
template<> constexpr auto signature<::java::time::format::DecimalStyle> = ::java_time_format / "DecimalStyle";
namespace java::time::format { class FormatStyle; }
template<> constexpr auto signature<::java::time::format::FormatStyle> = ::java_time_format / "FormatStyle";
namespace java::time::format { class Parsed; }
template<> constexpr auto signature<::java::time::format::Parsed> = ::java_time_format / "Parsed";
namespace java::time::format { class ResolverStyle; }
template<> constexpr auto signature<::java::time::format::ResolverStyle> = ::java_time_format / "ResolverStyle";
namespace java::time::format { class SignStyle; }
template<> constexpr auto signature<::java::time::format::SignStyle> = ::java_time_format / "SignStyle";
namespace java::time::format { class TextStyle; }
template<> constexpr auto signature<::java::time::format::TextStyle> = ::java_time_format / "TextStyle";
namespace java::time::format { class ZoneName; }
template<> constexpr auto signature<::java::time::format::ZoneName> = ::java_time_format / "ZoneName";

#endif
