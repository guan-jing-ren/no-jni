#ifndef java_time_format_DateTimeFormatter_HPP
#define java_time_format_DateTimeFormatter_HPP

#include "../../../jfwd_decl.hpp"

class ::java::time::format::DateTimeFormatter : public jObject<::java::time::format::DateTimeFormatter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_time_format / "DateTimeFormatter";

	constexpr static Enume field_signatures{
		jField<::java::time::format::DateTimeFormatter>("BASIC_ISO_DATE"), //
		jField<::java::time::format::DateTimeFormatter>("ISO_DATE"), //
		jField<::java::time::format::DateTimeFormatter>("ISO_DATE_TIME"), //
		jField<::java::time::format::DateTimeFormatter>("ISO_INSTANT"), //
		jField<::java::time::format::DateTimeFormatter>("ISO_LOCAL_DATE"), //
		jField<::java::time::format::DateTimeFormatter>("ISO_LOCAL_DATE_TIME"), //
		jField<::java::time::format::DateTimeFormatter>("ISO_LOCAL_TIME"), //
		jField<::java::time::format::DateTimeFormatter>("ISO_OFFSET_DATE"), //
		jField<::java::time::format::DateTimeFormatter>("ISO_OFFSET_DATE_TIME"), //
		jField<::java::time::format::DateTimeFormatter>("ISO_OFFSET_TIME"), //
		jField<::java::time::format::DateTimeFormatter>("ISO_ORDINAL_DATE"), //
		jField<::java::time::format::DateTimeFormatter>("ISO_TIME"), //
		jField<::java::time::format::DateTimeFormatter>("ISO_WEEK_DATE"), //
		jField<::java::time::format::DateTimeFormatter>("ISO_ZONED_DATE_TIME"), //
		jField<::java::time::format::DateTimeFormatter>("RFC_1123_DATE_TIME"), //
	};

	template<typename F = ::java::time::format::DateTimeFormatter>
	static auto BASIC_ISO_DATE() {
		static_assert(field_signatures[jField<F>("BASIC_ISO_DATE")] != -1);
		return sat<F>("BASIC_ISO_DATE");
	}

	template<typename F = ::java::time::format::DateTimeFormatter>
	static auto ISO_DATE() {
		static_assert(field_signatures[jField<F>("ISO_DATE")] != -1);
		return sat<F>("ISO_DATE");
	}

	template<typename F = ::java::time::format::DateTimeFormatter>
	static auto ISO_DATE_TIME() {
		static_assert(field_signatures[jField<F>("ISO_DATE_TIME")] != -1);
		return sat<F>("ISO_DATE_TIME");
	}

	template<typename F = ::java::time::format::DateTimeFormatter>
	static auto ISO_INSTANT() {
		static_assert(field_signatures[jField<F>("ISO_INSTANT")] != -1);
		return sat<F>("ISO_INSTANT");
	}

	template<typename F = ::java::time::format::DateTimeFormatter>
	static auto ISO_LOCAL_DATE() {
		static_assert(field_signatures[jField<F>("ISO_LOCAL_DATE")] != -1);
		return sat<F>("ISO_LOCAL_DATE");
	}

	template<typename F = ::java::time::format::DateTimeFormatter>
	static auto ISO_LOCAL_DATE_TIME() {
		static_assert(field_signatures[jField<F>("ISO_LOCAL_DATE_TIME")] != -1);
		return sat<F>("ISO_LOCAL_DATE_TIME");
	}

	template<typename F = ::java::time::format::DateTimeFormatter>
	static auto ISO_LOCAL_TIME() {
		static_assert(field_signatures[jField<F>("ISO_LOCAL_TIME")] != -1);
		return sat<F>("ISO_LOCAL_TIME");
	}

	template<typename F = ::java::time::format::DateTimeFormatter>
	static auto ISO_OFFSET_DATE() {
		static_assert(field_signatures[jField<F>("ISO_OFFSET_DATE")] != -1);
		return sat<F>("ISO_OFFSET_DATE");
	}

	template<typename F = ::java::time::format::DateTimeFormatter>
	static auto ISO_OFFSET_DATE_TIME() {
		static_assert(field_signatures[jField<F>("ISO_OFFSET_DATE_TIME")] != -1);
		return sat<F>("ISO_OFFSET_DATE_TIME");
	}

	template<typename F = ::java::time::format::DateTimeFormatter>
	static auto ISO_OFFSET_TIME() {
		static_assert(field_signatures[jField<F>("ISO_OFFSET_TIME")] != -1);
		return sat<F>("ISO_OFFSET_TIME");
	}

	template<typename F = ::java::time::format::DateTimeFormatter>
	static auto ISO_ORDINAL_DATE() {
		static_assert(field_signatures[jField<F>("ISO_ORDINAL_DATE")] != -1);
		return sat<F>("ISO_ORDINAL_DATE");
	}

	template<typename F = ::java::time::format::DateTimeFormatter>
	static auto ISO_TIME() {
		static_assert(field_signatures[jField<F>("ISO_TIME")] != -1);
		return sat<F>("ISO_TIME");
	}

	template<typename F = ::java::time::format::DateTimeFormatter>
	static auto ISO_WEEK_DATE() {
		static_assert(field_signatures[jField<F>("ISO_WEEK_DATE")] != -1);
		return sat<F>("ISO_WEEK_DATE");
	}

	template<typename F = ::java::time::format::DateTimeFormatter>
	static auto ISO_ZONED_DATE_TIME() {
		static_assert(field_signatures[jField<F>("ISO_ZONED_DATE_TIME")] != -1);
		return sat<F>("ISO_ZONED_DATE_TIME");
	}

	template<typename F = ::java::time::format::DateTimeFormatter>
	static auto RFC_1123_DATE_TIME() {
		static_assert(field_signatures[jField<F>("RFC_1123_DATE_TIME")] != -1);
		return sat<F>("RFC_1123_DATE_TIME");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String(::java::time::temporal::TemporalAccessor)>("format"), //
		jMethod<::jvoid(::java::time::temporal::TemporalAccessor, ::java::lang::Appendable)>("formatTo"), //
		jMethod<::java::time::chrono::Chronology()>("getChronology"), //
		jMethod<::java::time::format::DecimalStyle()>("getDecimalStyle"), //
		jMethod<::java::util::Locale()>("getLocale"), //
		jMethod<::java::util::Set()>("getResolverFields"), //
		jMethod<::java::time::format::ResolverStyle()>("getResolverStyle"), //
		jMethod<::java::time::ZoneId()>("getZone"), //
		jMethod<::java::time::format::DateTimeFormatter(::java::time::format::FormatStyle)>("ofLocalizedDate"), //
		jMethod<::java::time::format::DateTimeFormatter(::java::time::format::FormatStyle)>("ofLocalizedDateTime"), //
		jMethod<::java::time::format::DateTimeFormatter(::java::time::format::FormatStyle, ::java::time::format::FormatStyle)>("ofLocalizedDateTime"), //
		jMethod<::java::time::format::DateTimeFormatter(::java::time::format::FormatStyle)>("ofLocalizedTime"), //
		jMethod<::java::time::format::DateTimeFormatter(::java::lang::String)>("ofPattern"), //
		jMethod<::java::time::format::DateTimeFormatter(::java::lang::String, ::java::util::Locale)>("ofPattern"), //
		jMethod<::java::time::temporal::TemporalAccessor(::java::lang::CharSequence)>("parse"), //
		jMethod<::java::time::temporal::TemporalAccessor(::java::lang::CharSequence, ::java::text::ParsePosition)>("parse"), //
		jMethod<::java::lang::Object(::java::lang::CharSequence, ::java::time::temporal::TemporalQuery)>("parse"), //
		jMethod<::java::time::temporal::TemporalAccessor(::java::lang::CharSequence, ::java::time::temporal::TemporalQuery *)>("parseBest"), //
		jMethod<::java::time::temporal::TemporalAccessor(::java::lang::CharSequence, ::java::text::ParsePosition)>("parseUnresolved"), //
		jMethod<::java::time::temporal::TemporalQuery()>("parsedExcessDays"), //
		jMethod<::java::time::temporal::TemporalQuery()>("parsedLeapSecond"), //
		jMethod<::java::text::Format()>("toFormat"), //
		jMethod<::java::text::Format(::java::time::temporal::TemporalQuery)>("toFormat"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::time::format::DateTimeFormatter(::java::time::chrono::Chronology)>("withChronology"), //
		jMethod<::java::time::format::DateTimeFormatter(::java::time::format::DecimalStyle)>("withDecimalStyle"), //
		jMethod<::java::time::format::DateTimeFormatter(::java::util::Locale)>("withLocale"), //
		jMethod<::java::time::format::DateTimeFormatter(::java::util::Set)>("withResolverFields"), //
		jMethod<::java::time::format::DateTimeFormatter(::java::time::temporal::TemporalField *)>("withResolverFields"), //
		jMethod<::java::time::format::DateTimeFormatter(::java::time::format::ResolverStyle)>("withResolverStyle"), //
		jMethod<::java::time::format::DateTimeFormatter(::java::time::ZoneId)>("withZone"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto format(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("format")] != -1);
		return call<R>("format", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto formatTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("formatTo")] != -1);
		return call<R>("formatTo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::chrono::Chronology, typename... Args>
	auto getChronology(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChronology")] != -1);
		return call<R>("getChronology", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DecimalStyle, typename... Args>
	auto getDecimalStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDecimalStyle")] != -1);
		return call<R>("getDecimalStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale, typename... Args>
	auto getLocale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocale")] != -1);
		return call<R>("getLocale", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto getResolverFields(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResolverFields")] != -1);
		return call<R>("getResolverFields", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::ResolverStyle, typename... Args>
	auto getResolverStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResolverStyle")] != -1);
		return call<R>("getResolverStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::ZoneId, typename... Args>
	auto getZone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getZone")] != -1);
		return call<R>("getZone", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DateTimeFormatter, typename... Args>
	static auto ofLocalizedDate(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ofLocalizedDate")] != -1);
		return scall<R>("ofLocalizedDate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DateTimeFormatter, typename... Args>
	static auto ofLocalizedDateTime(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ofLocalizedDateTime")] != -1);
		return scall<R>("ofLocalizedDateTime", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DateTimeFormatter, typename... Args>
	static auto ofLocalizedTime(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ofLocalizedTime")] != -1);
		return scall<R>("ofLocalizedTime", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DateTimeFormatter, typename... Args>
	static auto ofPattern(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ofPattern")] != -1);
		return scall<R>("ofPattern", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::TemporalAccessor, typename... Args>
	auto parse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parse")] != -1);
		return call<R>("parse", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::TemporalAccessor, typename... Args>
	auto parseBest(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseBest")] != -1);
		return call<R>("parseBest", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::TemporalAccessor, typename... Args>
	auto parseUnresolved(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseUnresolved")] != -1);
		return call<R>("parseUnresolved", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::TemporalQuery, typename... Args>
	static auto parsedExcessDays(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parsedExcessDays")] != -1);
		return scall<R>("parsedExcessDays", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::TemporalQuery, typename... Args>
	static auto parsedLeapSecond(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parsedLeapSecond")] != -1);
		return scall<R>("parsedLeapSecond", std::forward<Args>(args)...);
	}

	template<typename R = ::java::text::Format, typename... Args>
	auto toFormat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toFormat")] != -1);
		return call<R>("toFormat", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DateTimeFormatter, typename... Args>
	auto withChronology(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("withChronology")] != -1);
		return call<R>("withChronology", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DateTimeFormatter, typename... Args>
	auto withDecimalStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("withDecimalStyle")] != -1);
		return call<R>("withDecimalStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DateTimeFormatter, typename... Args>
	auto withLocale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("withLocale")] != -1);
		return call<R>("withLocale", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DateTimeFormatter, typename... Args>
	auto withResolverFields(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("withResolverFields")] != -1);
		return call<R>("withResolverFields", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DateTimeFormatter, typename... Args>
	auto withResolverStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("withResolverStyle")] != -1);
		return call<R>("withResolverStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DateTimeFormatter, typename... Args>
	auto withZone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("withZone")] != -1);
		return call<R>("withZone", std::forward<Args>(args)...);
	}

};

#endif
