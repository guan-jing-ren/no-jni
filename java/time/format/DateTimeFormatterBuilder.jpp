#ifndef java_time_format_DateTimeFormatterBuilder_HPP
#define java_time_format_DateTimeFormatterBuilder_HPP

#include "../../../jfwd_decl.hpp"

class ::java::time::format::DateTimeFormatterBuilder : public jObject<::java::time::format::DateTimeFormatterBuilder, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_time_format / "DateTimeFormatterBuilder";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::time::format::DateTimeFormatterBuilder(::java::time::format::DateTimeFormatter)>("append"), //
		jMethod<::java::time::format::DateTimeFormatterBuilder()>("appendChronologyId"), //
		jMethod<::java::time::format::DateTimeFormatterBuilder(::java::time::format::TextStyle)>("appendChronologyText"), //
		jMethod<::java::time::format::DateTimeFormatterBuilder(::java::time::temporal::TemporalField, ::jint, ::jint, ::jboolean)>("appendFraction"), //
		jMethod<::java::time::format::DateTimeFormatterBuilder()>("appendInstant"), //
		jMethod<::java::time::format::DateTimeFormatterBuilder(::jint)>("appendInstant"), //
		jMethod<::java::time::format::DateTimeFormatterBuilder(::jchar)>("appendLiteral"), //
		jMethod<::java::time::format::DateTimeFormatterBuilder(::java::lang::String)>("appendLiteral"), //
		jMethod<::java::time::format::DateTimeFormatterBuilder(::java::time::format::FormatStyle, ::java::time::format::FormatStyle)>("appendLocalized"), //
		jMethod<::java::time::format::DateTimeFormatterBuilder(::java::time::format::TextStyle)>("appendLocalizedOffset"), //
		jMethod<::java::time::format::DateTimeFormatterBuilder(::java::lang::String, ::java::lang::String)>("appendOffset"), //
		jMethod<::java::time::format::DateTimeFormatterBuilder()>("appendOffsetId"), //
		jMethod<::java::time::format::DateTimeFormatterBuilder(::java::time::format::DateTimeFormatter)>("appendOptional"), //
		jMethod<::java::time::format::DateTimeFormatterBuilder(::java::lang::String)>("appendPattern"), //
		jMethod<::java::time::format::DateTimeFormatterBuilder(::java::time::temporal::TemporalField)>("appendText"), //
		jMethod<::java::time::format::DateTimeFormatterBuilder(::java::time::temporal::TemporalField, ::java::time::format::TextStyle)>("appendText"), //
		jMethod<::java::time::format::DateTimeFormatterBuilder(::java::time::temporal::TemporalField, ::java::util::Map)>("appendText"), //
		jMethod<::java::time::format::DateTimeFormatterBuilder(::java::time::temporal::TemporalField)>("appendValue"), //
		jMethod<::java::time::format::DateTimeFormatterBuilder(::java::time::temporal::TemporalField, ::jint)>("appendValue"), //
		jMethod<::java::time::format::DateTimeFormatterBuilder(::java::time::temporal::TemporalField, ::jint, ::jint, ::java::time::format::SignStyle)>("appendValue"), //
		jMethod<::java::time::format::DateTimeFormatterBuilder(::java::time::temporal::TemporalField, ::jint, ::jint, ::jint)>("appendValueReduced"), //
		jMethod<::java::time::format::DateTimeFormatterBuilder(::java::time::temporal::TemporalField, ::jint, ::jint, ::java::time::chrono::ChronoLocalDate)>("appendValueReduced"), //
		jMethod<::java::time::format::DateTimeFormatterBuilder()>("appendZoneId"), //
		jMethod<::java::time::format::DateTimeFormatterBuilder()>("appendZoneOrOffsetId"), //
		jMethod<::java::time::format::DateTimeFormatterBuilder()>("appendZoneRegionId"), //
		jMethod<::java::time::format::DateTimeFormatterBuilder(::java::time::format::TextStyle)>("appendZoneText"), //
		jMethod<::java::time::format::DateTimeFormatterBuilder(::java::time::format::TextStyle, ::java::util::Set)>("appendZoneText"), //
		jMethod<::java::lang::String(::java::time::format::FormatStyle, ::java::time::format::FormatStyle, ::java::time::chrono::Chronology, ::java::util::Locale)>("getLocalizedDateTimePattern"), //
		jMethod<::java::time::format::DateTimeFormatterBuilder()>("optionalEnd"), //
		jMethod<::java::time::format::DateTimeFormatterBuilder()>("optionalStart"), //
		jMethod<::java::time::format::DateTimeFormatterBuilder(::jint)>("padNext"), //
		jMethod<::java::time::format::DateTimeFormatterBuilder(::jint, ::jchar)>("padNext"), //
		jMethod<::java::time::format::DateTimeFormatterBuilder()>("parseCaseInsensitive"), //
		jMethod<::java::time::format::DateTimeFormatterBuilder()>("parseCaseSensitive"), //
		jMethod<::java::time::format::DateTimeFormatterBuilder(::java::time::temporal::TemporalField, ::jlong)>("parseDefaulting"), //
		jMethod<::java::time::format::DateTimeFormatterBuilder()>("parseLenient"), //
		jMethod<::java::time::format::DateTimeFormatterBuilder()>("parseStrict"), //
		jMethod<::java::time::format::DateTimeFormatter()>("toFormatter"), //
		jMethod<::java::time::format::DateTimeFormatter(::java::util::Locale)>("toFormatter"), //
	};

	template<typename R = ::java::time::format::DateTimeFormatterBuilder, typename... Args>
	auto append(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("append")] != -1);
		return call<R>("append", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DateTimeFormatterBuilder, typename... Args>
	auto appendChronologyId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("appendChronologyId")] != -1);
		return call<R>("appendChronologyId", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DateTimeFormatterBuilder, typename... Args>
	auto appendChronologyText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("appendChronologyText")] != -1);
		return call<R>("appendChronologyText", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DateTimeFormatterBuilder, typename... Args>
	auto appendFraction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("appendFraction")] != -1);
		return call<R>("appendFraction", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DateTimeFormatterBuilder, typename... Args>
	auto appendInstant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("appendInstant")] != -1);
		return call<R>("appendInstant", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DateTimeFormatterBuilder, typename... Args>
	auto appendLiteral(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("appendLiteral")] != -1);
		return call<R>("appendLiteral", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DateTimeFormatterBuilder, typename... Args>
	auto appendLocalized(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("appendLocalized")] != -1);
		return call<R>("appendLocalized", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DateTimeFormatterBuilder, typename... Args>
	auto appendLocalizedOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("appendLocalizedOffset")] != -1);
		return call<R>("appendLocalizedOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DateTimeFormatterBuilder, typename... Args>
	auto appendOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("appendOffset")] != -1);
		return call<R>("appendOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DateTimeFormatterBuilder, typename... Args>
	auto appendOffsetId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("appendOffsetId")] != -1);
		return call<R>("appendOffsetId", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DateTimeFormatterBuilder, typename... Args>
	auto appendOptional(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("appendOptional")] != -1);
		return call<R>("appendOptional", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DateTimeFormatterBuilder, typename... Args>
	auto appendPattern(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("appendPattern")] != -1);
		return call<R>("appendPattern", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DateTimeFormatterBuilder, typename... Args>
	auto appendText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("appendText")] != -1);
		return call<R>("appendText", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DateTimeFormatterBuilder, typename... Args>
	auto appendValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("appendValue")] != -1);
		return call<R>("appendValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DateTimeFormatterBuilder, typename... Args>
	auto appendValueReduced(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("appendValueReduced")] != -1);
		return call<R>("appendValueReduced", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DateTimeFormatterBuilder, typename... Args>
	auto appendZoneId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("appendZoneId")] != -1);
		return call<R>("appendZoneId", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DateTimeFormatterBuilder, typename... Args>
	auto appendZoneOrOffsetId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("appendZoneOrOffsetId")] != -1);
		return call<R>("appendZoneOrOffsetId", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DateTimeFormatterBuilder, typename... Args>
	auto appendZoneRegionId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("appendZoneRegionId")] != -1);
		return call<R>("appendZoneRegionId", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DateTimeFormatterBuilder, typename... Args>
	auto appendZoneText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("appendZoneText")] != -1);
		return call<R>("appendZoneText", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getLocalizedDateTimePattern(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalizedDateTimePattern")] != -1);
		return scall<R>("getLocalizedDateTimePattern", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DateTimeFormatterBuilder, typename... Args>
	auto optionalEnd(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("optionalEnd")] != -1);
		return call<R>("optionalEnd", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DateTimeFormatterBuilder, typename... Args>
	auto optionalStart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("optionalStart")] != -1);
		return call<R>("optionalStart", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DateTimeFormatterBuilder, typename... Args>
	auto padNext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("padNext")] != -1);
		return call<R>("padNext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DateTimeFormatterBuilder, typename... Args>
	auto parseCaseInsensitive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseCaseInsensitive")] != -1);
		return call<R>("parseCaseInsensitive", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DateTimeFormatterBuilder, typename... Args>
	auto parseCaseSensitive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseCaseSensitive")] != -1);
		return call<R>("parseCaseSensitive", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DateTimeFormatterBuilder, typename... Args>
	auto parseDefaulting(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseDefaulting")] != -1);
		return call<R>("parseDefaulting", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DateTimeFormatterBuilder, typename... Args>
	auto parseLenient(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseLenient")] != -1);
		return call<R>("parseLenient", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DateTimeFormatterBuilder, typename... Args>
	auto parseStrict(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseStrict")] != -1);
		return call<R>("parseStrict", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::format::DateTimeFormatter, typename... Args>
	auto toFormatter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toFormatter")] != -1);
		return call<R>("toFormatter", std::forward<Args>(args)...);
	}

};

#endif
