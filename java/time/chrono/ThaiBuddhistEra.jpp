#ifndef java_time_chrono_ThaiBuddhistEra_HPP
#define java_time_chrono_ThaiBuddhistEra_HPP

#include "../../../jfwd_decl.hpp"

class ::java::time::chrono::ThaiBuddhistEra : public jObject<::java::time::chrono::ThaiBuddhistEra, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_time_chrono / "ThaiBuddhistEra";

	constexpr static Enume field_signatures{
		jField<::java::time::chrono::ThaiBuddhistEra>("BE"), //
		jField<::java::time::chrono::ThaiBuddhistEra>("BEFORE_BE"), //
	};

	template<typename F = ::java::time::chrono::ThaiBuddhistEra>
	static auto BE() {
		static_assert(field_signatures[jField<F>("BE")] != -1);
		return sat<F>("BE");
	}

	template<typename F = ::java::time::chrono::ThaiBuddhistEra>
	static auto BEFORE_BE() {
		static_assert(field_signatures[jField<F>("BEFORE_BE")] != -1);
		return sat<F>("BEFORE_BE");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::time::temporal::Temporal(::java::time::temporal::Temporal)>("adjustInto"), //
		jMethod<::jint(::java::time::temporal::TemporalField)>("get"), //
		jMethod<::java::lang::String(::java::time::format::TextStyle, ::java::util::Locale)>("getDisplayName"), //
		jMethod<::jlong(::java::time::temporal::TemporalField)>("getLong"), //
		jMethod<::jint()>("getValue"), //
		jMethod<::jboolean(::java::time::temporal::TemporalField)>("isSupported"), //
		jMethod<::java::time::chrono::ThaiBuddhistEra(::jint)>("of"), //
		jMethod<::java::lang::Object(::java::time::temporal::TemporalQuery)>("query"), //
		jMethod<::java::time::temporal::ValueRange(::java::time::temporal::TemporalField)>("range"), //
		jMethod<::java::time::chrono::ThaiBuddhistEra(::java::lang::String)>("valueOf"), //
		jMethod<::java::time::chrono::ThaiBuddhistEra *()>("values"), //
	};

	template<typename R = ::java::time::temporal::Temporal, typename... Args>
	auto adjustInto(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("adjustInto")] != -1);
		return call<R>("adjustInto", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDisplayName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisplayName")] != -1);
		return call<R>("getDisplayName", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLong")] != -1);
		return call<R>("getLong", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSupported")] != -1);
		return call<R>("isSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::chrono::ThaiBuddhistEra, typename... Args>
	static auto of(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("of")] != -1);
		return scall<R>("of", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto query(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("query")] != -1);
		return call<R>("query", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::ValueRange, typename... Args>
	auto range(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("range")] != -1);
		return call<R>("range", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::chrono::ThaiBuddhistEra, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::chrono::ThaiBuddhistEra *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
