#ifndef java_time_chrono_AbstractChronology_HPP
#define java_time_chrono_AbstractChronology_HPP

#include "../../../jfwd_decl.hpp"

class ::java::time::chrono::AbstractChronology : public jObject<::java::time::chrono::AbstractChronology, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_time_chrono / "AbstractChronology";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint(::java::lang::Object)>("compareTo"), //
		jMethod<::jint(::java::time::chrono::Chronology)>("compareTo"), //
		jMethod<::java::time::chrono::ChronoLocalDate(::jint, ::jint, ::jint)>("date"), //
		jMethod<::java::time::chrono::ChronoLocalDate(::java::time::temporal::TemporalAccessor)>("date"), //
		jMethod<::java::time::chrono::ChronoLocalDate(::jlong)>("dateEpochDay"), //
		jMethod<::java::time::chrono::ChronoLocalDate(::jint, ::jint)>("dateYearDay"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::time::chrono::Era(::jint)>("eraOf"), //
		jMethod<::java::util::List()>("eras"), //
		jMethod<::java::lang::String()>("getCalendarType"), //
		jMethod<::java::lang::String()>("getId"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean(::jlong)>("isLeapYear"), //
		jMethod<::jint(::java::time::chrono::Era, ::jint)>("prolepticYear"), //
		jMethod<::java::time::temporal::ValueRange(::java::time::temporal::ChronoField)>("range"), //
		jMethod<::java::time::chrono::ChronoLocalDate(::java::util::Map, ::java::time::format::ResolverStyle)>("resolveDate"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jint, typename... Args>
	auto compareTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compareTo")] != -1);
		return call<R>("compareTo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::chrono::ChronoLocalDate, typename... Args>
	auto date(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("date")] != -1);
		return call<R>("date", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::chrono::ChronoLocalDate, typename... Args>
	auto dateEpochDay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dateEpochDay")] != -1);
		return call<R>("dateEpochDay", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::chrono::ChronoLocalDate, typename... Args>
	auto dateYearDay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dateYearDay")] != -1);
		return call<R>("dateYearDay", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::chrono::Era, typename... Args>
	auto eraOf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("eraOf")] != -1);
		return call<R>("eraOf", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto eras(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("eras")] != -1);
		return call<R>("eras", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCalendarType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCalendarType")] != -1);
		return call<R>("getCalendarType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getId")] != -1);
		return call<R>("getId", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLeapYear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLeapYear")] != -1);
		return call<R>("isLeapYear", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto prolepticYear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("prolepticYear")] != -1);
		return call<R>("prolepticYear", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::ValueRange, typename... Args>
	auto range(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("range")] != -1);
		return call<R>("range", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::chrono::ChronoLocalDate, typename... Args>
	auto resolveDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("resolveDate")] != -1);
		return call<R>("resolveDate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
