#ifndef java_time_chrono_ChronoLocalDateTime_HPP
#define java_time_chrono_ChronoLocalDateTime_HPP

#include "../../../jfwd_decl.hpp"

class ::java::time::chrono::ChronoLocalDateTime : public jObject<::java::time::chrono::ChronoLocalDateTime, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_time_chrono / "ChronoLocalDateTime";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::time::temporal::Temporal(::java::time::temporal::Temporal)>("adjustInto"), //
		jMethod<::java::time::chrono::ChronoZonedDateTime(::java::time::ZoneId)>("atZone"), //
		jMethod<::jint(::java::lang::Object)>("compareTo"), //
		jMethod<::jint(::java::time::chrono::ChronoLocalDateTime)>("compareTo"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::String(::java::time::format::DateTimeFormatter)>("format"), //
		jMethod<::java::time::chrono::ChronoLocalDateTime(::java::time::temporal::TemporalAccessor)>("from"), //
		jMethod<::java::time::chrono::Chronology()>("getChronology"), //
		jMethod<::jlong(::java::time::temporal::TemporalField)>("getLong"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean(::java::time::chrono::ChronoLocalDateTime)>("isAfter"), //
		jMethod<::jboolean(::java::time::chrono::ChronoLocalDateTime)>("isBefore"), //
		jMethod<::jboolean(::java::time::chrono::ChronoLocalDateTime)>("isEqual"), //
		jMethod<::jboolean(::java::time::temporal::TemporalField)>("isSupported"), //
		jMethod<::jboolean(::java::time::temporal::TemporalUnit)>("isSupported"), //
		jMethod<::java::time::chrono::ChronoLocalDateTime(::jlong, ::java::time::temporal::TemporalUnit)>("minus"), //
		jMethod<::java::time::temporal::Temporal(::jlong, ::java::time::temporal::TemporalUnit)>("minus"), //
		jMethod<::java::time::chrono::ChronoLocalDateTime(::java::time::temporal::TemporalAmount)>("minus"), //
		jMethod<::java::time::temporal::Temporal(::java::time::temporal::TemporalAmount)>("minus"), //
		jMethod<::java::time::chrono::ChronoLocalDateTime(::jlong, ::java::time::temporal::TemporalUnit)>("plus"), //
		jMethod<::java::time::temporal::Temporal(::jlong, ::java::time::temporal::TemporalUnit)>("plus"), //
		jMethod<::java::time::chrono::ChronoLocalDateTime(::java::time::temporal::TemporalAmount)>("plus"), //
		jMethod<::java::time::temporal::Temporal(::java::time::temporal::TemporalAmount)>("plus"), //
		jMethod<::java::lang::Object(::java::time::temporal::TemporalQuery)>("query"), //
		jMethod<::java::util::Comparator()>("timeLineOrder"), //
		jMethod<::jlong(::java::time::ZoneOffset)>("toEpochSecond"), //
		jMethod<::java::time::Instant(::java::time::ZoneOffset)>("toInstant"), //
		jMethod<::java::time::chrono::ChronoLocalDate()>("toLocalDate"), //
		jMethod<::java::time::LocalTime()>("toLocalTime"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jlong(::java::time::temporal::Temporal, ::java::time::temporal::TemporalUnit)>("until"), //
		jMethod<::java::time::chrono::ChronoLocalDateTime(::java::time::temporal::TemporalAdjuster)>("with"), //
		jMethod<::java::time::temporal::Temporal(::java::time::temporal::TemporalAdjuster)>("with"), //
		jMethod<::java::time::chrono::ChronoLocalDateTime(::java::time::temporal::TemporalField, ::jlong)>("with"), //
		jMethod<::java::time::temporal::Temporal(::java::time::temporal::TemporalField, ::jlong)>("with"), //
	};

	template<typename R = ::java::time::temporal::Temporal, typename... Args>
	auto adjustInto(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("adjustInto")] != -1);
		return call<R>("adjustInto", forward<Args>(args)...);
	}

	template<typename R = ::java::time::chrono::ChronoZonedDateTime, typename... Args>
	auto atZone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("atZone")] != -1);
		return call<R>("atZone", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto compareTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("compareTo")] != -1);
		return call<R>("compareTo", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto format(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("format")] != -1);
		return call<R>("format", forward<Args>(args)...);
	}

	template<typename R = ::java::time::chrono::ChronoLocalDateTime, typename... Args>
	static auto from(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("from")] != -1);
		return scall<R>("from", forward<Args>(args)...);
	}

	template<typename R = ::java::time::chrono::Chronology, typename... Args>
	auto getChronology(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getChronology")] != -1);
		return call<R>("getChronology", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLong")] != -1);
		return call<R>("getLong", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAfter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isAfter")] != -1);
		return call<R>("isAfter", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isBefore(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isBefore")] != -1);
		return call<R>("isBefore", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEqual(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isEqual")] != -1);
		return call<R>("isEqual", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isSupported")] != -1);
		return call<R>("isSupported", forward<Args>(args)...);
	}

	template<typename R = ::java::time::chrono::ChronoLocalDateTime, typename... Args>
	auto minus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("minus")] != -1);
		return call<R>("minus", forward<Args>(args)...);
	}

	template<typename R = ::java::time::chrono::ChronoLocalDateTime, typename... Args>
	auto plus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("plus")] != -1);
		return call<R>("plus", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto query(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("query")] != -1);
		return call<R>("query", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Comparator, typename... Args>
	static auto timeLineOrder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("timeLineOrder")] != -1);
		return scall<R>("timeLineOrder", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto toEpochSecond(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toEpochSecond")] != -1);
		return call<R>("toEpochSecond", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Instant, typename... Args>
	auto toInstant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toInstant")] != -1);
		return call<R>("toInstant", forward<Args>(args)...);
	}

	template<typename R = ::java::time::chrono::ChronoLocalDate, typename... Args>
	auto toLocalDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toLocalDate")] != -1);
		return call<R>("toLocalDate", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalTime, typename... Args>
	auto toLocalTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toLocalTime")] != -1);
		return call<R>("toLocalTime", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto until(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("until")] != -1);
		return call<R>("until", forward<Args>(args)...);
	}

	template<typename R = ::java::time::chrono::ChronoLocalDateTime, typename... Args>
	auto with(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("with")] != -1);
		return call<R>("with", forward<Args>(args)...);
	}

};

#endif
