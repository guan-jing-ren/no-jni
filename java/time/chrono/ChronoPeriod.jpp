#ifndef java_time_chrono_ChronoPeriod_HPP
#define java_time_chrono_ChronoPeriod_HPP

#include "../../../jfwd_decl.hpp"

class ::java::time::chrono::ChronoPeriod : public jObject<::java::time::chrono::ChronoPeriod, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_time_chrono / "ChronoPeriod";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::time::temporal::Temporal(::java::time::temporal::Temporal)>("addTo"), //
		jMethod<::java::time::chrono::ChronoPeriod(::java::time::chrono::ChronoLocalDate, ::java::time::chrono::ChronoLocalDate)>("between"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jlong(::java::time::temporal::TemporalUnit)>("get"), //
		jMethod<::java::time::chrono::Chronology()>("getChronology"), //
		jMethod<::java::util::List()>("getUnits"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isNegative"), //
		jMethod<::jboolean()>("isZero"), //
		jMethod<::java::time::chrono::ChronoPeriod(::java::time::temporal::TemporalAmount)>("minus"), //
		jMethod<::java::time::chrono::ChronoPeriod(::jint)>("multipliedBy"), //
		jMethod<::java::time::chrono::ChronoPeriod()>("negated"), //
		jMethod<::java::time::chrono::ChronoPeriod()>("normalized"), //
		jMethod<::java::time::chrono::ChronoPeriod(::java::time::temporal::TemporalAmount)>("plus"), //
		jMethod<::java::time::temporal::Temporal(::java::time::temporal::Temporal)>("subtractFrom"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::time::temporal::Temporal, typename... Args>
	auto addTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addTo")] != -1);
		return call<R>("addTo", forward<Args>(args)...);
	}

	template<typename R = ::java::time::chrono::ChronoPeriod, typename... Args>
	static auto between(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("between")] != -1);
		return scall<R>("between", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("get")] != -1);
		return call<R>("get", forward<Args>(args)...);
	}

	template<typename R = ::java::time::chrono::Chronology, typename... Args>
	auto getChronology(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getChronology")] != -1);
		return call<R>("getChronology", forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getUnits(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUnits")] != -1);
		return call<R>("getUnits", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isNegative(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isNegative")] != -1);
		return call<R>("isNegative", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isZero(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isZero")] != -1);
		return call<R>("isZero", forward<Args>(args)...);
	}

	template<typename R = ::java::time::chrono::ChronoPeriod, typename... Args>
	auto minus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("minus")] != -1);
		return call<R>("minus", forward<Args>(args)...);
	}

	template<typename R = ::java::time::chrono::ChronoPeriod, typename... Args>
	auto multipliedBy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("multipliedBy")] != -1);
		return call<R>("multipliedBy", forward<Args>(args)...);
	}

	template<typename R = ::java::time::chrono::ChronoPeriod, typename... Args>
	auto negated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("negated")] != -1);
		return call<R>("negated", forward<Args>(args)...);
	}

	template<typename R = ::java::time::chrono::ChronoPeriod, typename... Args>
	auto normalized(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("normalized")] != -1);
		return call<R>("normalized", forward<Args>(args)...);
	}

	template<typename R = ::java::time::chrono::ChronoPeriod, typename... Args>
	auto plus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("plus")] != -1);
		return call<R>("plus", forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::Temporal, typename... Args>
	auto subtractFrom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("subtractFrom")] != -1);
		return call<R>("subtractFrom", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
