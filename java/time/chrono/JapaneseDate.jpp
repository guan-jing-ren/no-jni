#ifndef java_time_chrono_JapaneseDate_HPP
#define java_time_chrono_JapaneseDate_HPP

#include "../../../jfwd_decl.hpp"

class ::java::time::chrono::JapaneseDate : public jObject<::java::time::chrono::JapaneseDate, ::java::time::chrono::ChronoLocalDateImpl> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_time_chrono / "JapaneseDate";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::time::chrono::ChronoLocalDateTime(::java::time::LocalTime)>("atTime"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::time::chrono::JapaneseDate(::java::time::temporal::TemporalAccessor)>("from"), //
		jMethod<::java::time::chrono::Chronology()>("getChronology"), //
		jMethod<::java::time::chrono::JapaneseChronology()>("getChronology"), //
		jMethod<::java::time::chrono::Era()>("getEra"), //
		jMethod<::java::time::chrono::JapaneseEra()>("getEra"), //
		jMethod<::jlong(::java::time::temporal::TemporalField)>("getLong"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean(::java::time::temporal::TemporalField)>("isSupported"), //
		jMethod<::jint()>("lengthOfMonth"), //
		jMethod<::jint()>("lengthOfYear"), //
		jMethod<::java::time::chrono::ChronoLocalDate(::jlong, ::java::time::temporal::TemporalUnit)>("minus"), //
		jMethod<::java::time::chrono::JapaneseDate(::jlong, ::java::time::temporal::TemporalUnit)>("minus"), //
		jMethod<::java::time::temporal::Temporal(::jlong, ::java::time::temporal::TemporalUnit)>("minus"), //
		jMethod<::java::time::chrono::ChronoLocalDate(::java::time::temporal::TemporalAmount)>("minus"), //
		jMethod<::java::time::chrono::JapaneseDate(::java::time::temporal::TemporalAmount)>("minus"), //
		jMethod<::java::time::temporal::Temporal(::java::time::temporal::TemporalAmount)>("minus"), //
		jMethod<::java::time::chrono::JapaneseDate()>("now"), //
		jMethod<::java::time::chrono::JapaneseDate(::java::time::Clock)>("now"), //
		jMethod<::java::time::chrono::JapaneseDate(::java::time::ZoneId)>("now"), //
		jMethod<::java::time::chrono::JapaneseDate(::jint, ::jint, ::jint)>("of"), //
		jMethod<::java::time::chrono::JapaneseDate(::java::time::chrono::JapaneseEra, ::jint, ::jint, ::jint)>("of"), //
		jMethod<::java::time::chrono::ChronoLocalDate(::jlong, ::java::time::temporal::TemporalUnit)>("plus"), //
		jMethod<::java::time::chrono::JapaneseDate(::jlong, ::java::time::temporal::TemporalUnit)>("plus"), //
		jMethod<::java::time::temporal::Temporal(::jlong, ::java::time::temporal::TemporalUnit)>("plus"), //
		jMethod<::java::time::chrono::ChronoLocalDate(::java::time::temporal::TemporalAmount)>("plus"), //
		jMethod<::java::time::chrono::JapaneseDate(::java::time::temporal::TemporalAmount)>("plus"), //
		jMethod<::java::time::temporal::Temporal(::java::time::temporal::TemporalAmount)>("plus"), //
		jMethod<::java::time::temporal::ValueRange(::java::time::temporal::TemporalField)>("range"), //
		jMethod<::jlong()>("toEpochDay"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::time::chrono::ChronoPeriod(::java::time::chrono::ChronoLocalDate)>("until"), //
		jMethod<::jlong(::java::time::temporal::Temporal, ::java::time::temporal::TemporalUnit)>("until"), //
		jMethod<::java::time::chrono::ChronoLocalDate(::java::time::temporal::TemporalAdjuster)>("with"), //
		jMethod<::java::time::chrono::JapaneseDate(::java::time::temporal::TemporalAdjuster)>("with"), //
		jMethod<::java::time::temporal::Temporal(::java::time::temporal::TemporalAdjuster)>("with"), //
		jMethod<::java::time::chrono::ChronoLocalDate(::java::time::temporal::TemporalField, ::jlong)>("with"), //
		jMethod<::java::time::chrono::JapaneseDate(::java::time::temporal::TemporalField, ::jlong)>("with"), //
		jMethod<::java::time::temporal::Temporal(::java::time::temporal::TemporalField, ::jlong)>("with"), //
	};

	template<typename R = ::java::time::chrono::ChronoLocalDateTime, typename... Args>
	auto atTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("atTime")] != -1);
		return call<R>("atTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::chrono::JapaneseDate, typename... Args>
	static auto from(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("from")] != -1);
		return scall<R>("from", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::chrono::Chronology, typename... Args>
	auto getChronology(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChronology")] != -1);
		return call<R>("getChronology", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::chrono::Era, typename... Args>
	auto getEra(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEra")] != -1);
		return call<R>("getEra", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLong")] != -1);
		return call<R>("getLong", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSupported")] != -1);
		return call<R>("isSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto lengthOfMonth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lengthOfMonth")] != -1);
		return call<R>("lengthOfMonth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto lengthOfYear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lengthOfYear")] != -1);
		return call<R>("lengthOfYear", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::chrono::ChronoLocalDate, typename... Args>
	auto minus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("minus")] != -1);
		return call<R>("minus", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::chrono::JapaneseDate, typename... Args>
	static auto now(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("now")] != -1);
		return scall<R>("now", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::chrono::JapaneseDate, typename... Args>
	static auto of(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("of")] != -1);
		return scall<R>("of", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::chrono::ChronoLocalDate, typename... Args>
	auto plus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("plus")] != -1);
		return call<R>("plus", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::ValueRange, typename... Args>
	auto range(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("range")] != -1);
		return call<R>("range", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto toEpochDay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toEpochDay")] != -1);
		return call<R>("toEpochDay", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::chrono::ChronoPeriod, typename... Args>
	auto until(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("until")] != -1);
		return call<R>("until", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::chrono::ChronoLocalDate, typename... Args>
	auto with(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("with")] != -1);
		return call<R>("with", std::forward<Args>(args)...);
	}

};

#endif
