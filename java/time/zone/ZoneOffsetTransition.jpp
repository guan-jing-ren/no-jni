#ifndef java_time_zone_ZoneOffsetTransition_HPP
#define java_time_zone_ZoneOffsetTransition_HPP

#include "../../../jfwd_decl.hpp"

class ::java::time::zone::ZoneOffsetTransition : public jObject<::java::time::zone::ZoneOffsetTransition, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_time_zone / "ZoneOffsetTransition";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint(::java::lang::Object)>("compareTo"), //
		jMethod<::jint(::java::time::zone::ZoneOffsetTransition)>("compareTo"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::time::LocalDateTime()>("getDateTimeAfter"), //
		jMethod<::java::time::LocalDateTime()>("getDateTimeBefore"), //
		jMethod<::java::time::Duration()>("getDuration"), //
		jMethod<::java::time::Instant()>("getInstant"), //
		jMethod<::java::time::ZoneOffset()>("getOffsetAfter"), //
		jMethod<::java::time::ZoneOffset()>("getOffsetBefore"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isGap"), //
		jMethod<::jboolean()>("isOverlap"), //
		jMethod<::jboolean(::java::time::ZoneOffset)>("isValidOffset"), //
		jMethod<::java::time::zone::ZoneOffsetTransition(::java::time::LocalDateTime, ::java::time::ZoneOffset, ::java::time::ZoneOffset)>("of"), //
		jMethod<::jlong()>("toEpochSecond"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jint, typename... Args>
	auto compareTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("compareTo")] != -1);
		return call<R>("compareTo", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDateTime, typename... Args>
	auto getDateTimeAfter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDateTimeAfter")] != -1);
		return call<R>("getDateTimeAfter", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDateTime, typename... Args>
	auto getDateTimeBefore(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDateTimeBefore")] != -1);
		return call<R>("getDateTimeBefore", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Duration, typename... Args>
	auto getDuration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDuration")] != -1);
		return call<R>("getDuration", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Instant, typename... Args>
	auto getInstant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInstant")] != -1);
		return call<R>("getInstant", forward<Args>(args)...);
	}

	template<typename R = ::java::time::ZoneOffset, typename... Args>
	auto getOffsetAfter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getOffsetAfter")] != -1);
		return call<R>("getOffsetAfter", forward<Args>(args)...);
	}

	template<typename R = ::java::time::ZoneOffset, typename... Args>
	auto getOffsetBefore(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getOffsetBefore")] != -1);
		return call<R>("getOffsetBefore", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isGap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isGap")] != -1);
		return call<R>("isGap", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isOverlap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isOverlap")] != -1);
		return call<R>("isOverlap", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isValidOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isValidOffset")] != -1);
		return call<R>("isValidOffset", forward<Args>(args)...);
	}

	template<typename R = ::java::time::zone::ZoneOffsetTransition, typename... Args>
	static auto of(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("of")] != -1);
		return scall<R>("of", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto toEpochSecond(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toEpochSecond")] != -1);
		return call<R>("toEpochSecond", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
