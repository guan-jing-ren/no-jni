#ifndef java_time_zone_ZoneRules_HPP
#define java_time_zone_ZoneRules_HPP

#include "../../../jfwd_decl.hpp"

class ::java::time::zone::ZoneRules : public jObject<::java::time::zone::ZoneRules, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_time_zone / "ZoneRules";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::time::Duration(::java::time::Instant)>("getDaylightSavings"), //
		jMethod<::java::time::ZoneOffset(::java::time::Instant)>("getOffset"), //
		jMethod<::java::time::ZoneOffset(::java::time::LocalDateTime)>("getOffset"), //
		jMethod<::java::time::ZoneOffset(::java::time::Instant)>("getStandardOffset"), //
		jMethod<::java::time::zone::ZoneOffsetTransition(::java::time::LocalDateTime)>("getTransition"), //
		jMethod<::java::util::List()>("getTransitionRules"), //
		jMethod<::java::util::List()>("getTransitions"), //
		jMethod<::java::util::List(::java::time::LocalDateTime)>("getValidOffsets"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean(::java::time::Instant)>("isDaylightSavings"), //
		jMethod<::jboolean()>("isFixedOffset"), //
		jMethod<::jboolean(::java::time::LocalDateTime, ::java::time::ZoneOffset)>("isValidOffset"), //
		jMethod<::java::time::zone::ZoneOffsetTransition(::java::time::Instant)>("nextTransition"), //
		jMethod<::java::time::zone::ZoneRules(::java::time::ZoneOffset)>("of"), //
		jMethod<::java::time::zone::ZoneRules(::java::time::ZoneOffset, ::java::time::ZoneOffset, ::java::util::List, ::java::util::List, ::java::util::List)>("of"), //
		jMethod<::java::time::zone::ZoneOffsetTransition(::java::time::Instant)>("previousTransition"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::Duration, typename... Args>
	auto getDaylightSavings(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDaylightSavings")] != -1);
		return call<R>("getDaylightSavings", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::ZoneOffset, typename... Args>
	auto getOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOffset")] != -1);
		return call<R>("getOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::ZoneOffset, typename... Args>
	auto getStandardOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStandardOffset")] != -1);
		return call<R>("getStandardOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::zone::ZoneOffsetTransition, typename... Args>
	auto getTransition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransition")] != -1);
		return call<R>("getTransition", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getTransitionRules(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransitionRules")] != -1);
		return call<R>("getTransitionRules", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getTransitions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransitions")] != -1);
		return call<R>("getTransitions", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getValidOffsets(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValidOffsets")] != -1);
		return call<R>("getValidOffsets", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDaylightSavings(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDaylightSavings")] != -1);
		return call<R>("isDaylightSavings", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFixedOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFixedOffset")] != -1);
		return call<R>("isFixedOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isValidOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isValidOffset")] != -1);
		return call<R>("isValidOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::zone::ZoneOffsetTransition, typename... Args>
	auto nextTransition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nextTransition")] != -1);
		return call<R>("nextTransition", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::zone::ZoneRules, typename... Args>
	static auto of(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("of")] != -1);
		return scall<R>("of", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::zone::ZoneOffsetTransition, typename... Args>
	auto previousTransition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("previousTransition")] != -1);
		return call<R>("previousTransition", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
