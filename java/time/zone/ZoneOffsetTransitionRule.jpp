#ifndef java_time_zone_ZoneOffsetTransitionRule_HPP
#define java_time_zone_ZoneOffsetTransitionRule_HPP

#include "../../../jfwd_decl.hpp"

class ::java::time::zone::ZoneOffsetTransitionRule : public jObject<::java::time::zone::ZoneOffsetTransitionRule, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_time_zone / "ZoneOffsetTransitionRule";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::time::zone::ZoneOffsetTransition(::jint)>("createTransition"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint()>("getDayOfMonthIndicator"), //
		jMethod<::java::time::DayOfWeek()>("getDayOfWeek"), //
		jMethod<::java::time::LocalTime()>("getLocalTime"), //
		jMethod<::java::time::Month()>("getMonth"), //
		jMethod<::java::time::ZoneOffset()>("getOffsetAfter"), //
		jMethod<::java::time::ZoneOffset()>("getOffsetBefore"), //
		jMethod<::java::time::ZoneOffset()>("getStandardOffset"), //
		jMethod<::java::time::zone::ZoneOffsetTransitionRule$TimeDefinition()>("getTimeDefinition"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isMidnightEndOfDay"), //
		jMethod<::java::time::zone::ZoneOffsetTransitionRule(::java::time::Month, ::jint, ::java::time::DayOfWeek, ::java::time::LocalTime, ::jboolean, ::java::time::zone::ZoneOffsetTransitionRule$TimeDefinition, ::java::time::ZoneOffset, ::java::time::ZoneOffset, ::java::time::ZoneOffset)>("of"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::time::zone::ZoneOffsetTransition, typename... Args>
	auto createTransition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createTransition")] != -1);
		return call<R>("createTransition", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDayOfMonthIndicator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDayOfMonthIndicator")] != -1);
		return call<R>("getDayOfMonthIndicator", forward<Args>(args)...);
	}

	template<typename R = ::java::time::DayOfWeek, typename... Args>
	auto getDayOfWeek(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDayOfWeek")] != -1);
		return call<R>("getDayOfWeek", forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalTime, typename... Args>
	auto getLocalTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLocalTime")] != -1);
		return call<R>("getLocalTime", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Month, typename... Args>
	auto getMonth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMonth")] != -1);
		return call<R>("getMonth", forward<Args>(args)...);
	}

	template<typename R = ::java::time::ZoneOffset, typename... Args>
	auto getOffsetAfter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getOffsetAfter")] != -1);
		return call<R>("getOffsetAfter", forward<Args>(args)...);
	}

	template<typename R = ::java::time::ZoneOffset, typename... Args>
	auto getOffsetBefore(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getOffsetBefore")] != -1);
		return call<R>("getOffsetBefore", forward<Args>(args)...);
	}

	template<typename R = ::java::time::ZoneOffset, typename... Args>
	auto getStandardOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getStandardOffset")] != -1);
		return call<R>("getStandardOffset", forward<Args>(args)...);
	}

	template<typename R = ::java::time::zone::ZoneOffsetTransitionRule$TimeDefinition, typename... Args>
	auto getTimeDefinition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTimeDefinition")] != -1);
		return call<R>("getTimeDefinition", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isMidnightEndOfDay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isMidnightEndOfDay")] != -1);
		return call<R>("isMidnightEndOfDay", forward<Args>(args)...);
	}

	template<typename R = ::java::time::zone::ZoneOffsetTransitionRule, typename... Args>
	static auto of(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("of")] != -1);
		return scall<R>("of", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
