#ifndef java_time_Month_HPP
#define java_time_Month_HPP

#include "../../jfwd_decl.hpp"

class ::java::time::Month : public jObject<::java::time::Month, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_time / "Month";

	constexpr static Enume field_signatures{
		jField<::java::time::Month>("APRIL"), //
		jField<::java::time::Month>("AUGUST"), //
		jField<::java::time::Month>("DECEMBER"), //
		jField<::java::time::Month>("FEBRUARY"), //
		jField<::java::time::Month>("JANUARY"), //
		jField<::java::time::Month>("JULY"), //
		jField<::java::time::Month>("JUNE"), //
		jField<::java::time::Month>("MARCH"), //
		jField<::java::time::Month>("MAY"), //
		jField<::java::time::Month>("NOVEMBER"), //
		jField<::java::time::Month>("OCTOBER"), //
		jField<::java::time::Month>("SEPTEMBER"), //
	};

	template<typename F = ::java::time::Month>
	static auto APRIL() {
		static_assert(field_signatures[jField<F>("APRIL")] != -1);
		return sat<F>("APRIL");
	}

	template<typename F = ::java::time::Month>
	static auto AUGUST() {
		static_assert(field_signatures[jField<F>("AUGUST")] != -1);
		return sat<F>("AUGUST");
	}

	template<typename F = ::java::time::Month>
	static auto DECEMBER() {
		static_assert(field_signatures[jField<F>("DECEMBER")] != -1);
		return sat<F>("DECEMBER");
	}

	template<typename F = ::java::time::Month>
	static auto FEBRUARY() {
		static_assert(field_signatures[jField<F>("FEBRUARY")] != -1);
		return sat<F>("FEBRUARY");
	}

	template<typename F = ::java::time::Month>
	static auto JANUARY() {
		static_assert(field_signatures[jField<F>("JANUARY")] != -1);
		return sat<F>("JANUARY");
	}

	template<typename F = ::java::time::Month>
	static auto JULY() {
		static_assert(field_signatures[jField<F>("JULY")] != -1);
		return sat<F>("JULY");
	}

	template<typename F = ::java::time::Month>
	static auto JUNE() {
		static_assert(field_signatures[jField<F>("JUNE")] != -1);
		return sat<F>("JUNE");
	}

	template<typename F = ::java::time::Month>
	static auto MARCH() {
		static_assert(field_signatures[jField<F>("MARCH")] != -1);
		return sat<F>("MARCH");
	}

	template<typename F = ::java::time::Month>
	static auto MAY() {
		static_assert(field_signatures[jField<F>("MAY")] != -1);
		return sat<F>("MAY");
	}

	template<typename F = ::java::time::Month>
	static auto NOVEMBER() {
		static_assert(field_signatures[jField<F>("NOVEMBER")] != -1);
		return sat<F>("NOVEMBER");
	}

	template<typename F = ::java::time::Month>
	static auto OCTOBER() {
		static_assert(field_signatures[jField<F>("OCTOBER")] != -1);
		return sat<F>("OCTOBER");
	}

	template<typename F = ::java::time::Month>
	static auto SEPTEMBER() {
		static_assert(field_signatures[jField<F>("SEPTEMBER")] != -1);
		return sat<F>("SEPTEMBER");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::time::temporal::Temporal(::java::time::temporal::Temporal)>("adjustInto"), //
		jMethod<::jint(::jboolean)>("firstDayOfYear"), //
		jMethod<::java::time::Month()>("firstMonthOfQuarter"), //
		jMethod<::java::time::Month(::java::time::temporal::TemporalAccessor)>("from"), //
		jMethod<::jint(::java::time::temporal::TemporalField)>("get"), //
		jMethod<::java::lang::String(::java::time::format::TextStyle, ::java::util::Locale)>("getDisplayName"), //
		jMethod<::jlong(::java::time::temporal::TemporalField)>("getLong"), //
		jMethod<::jint()>("getValue"), //
		jMethod<::jboolean(::java::time::temporal::TemporalField)>("isSupported"), //
		jMethod<::jint(::jboolean)>("length"), //
		jMethod<::jint()>("maxLength"), //
		jMethod<::jint()>("minLength"), //
		jMethod<::java::time::Month(::jlong)>("minus"), //
		jMethod<::java::time::Month(::jint)>("of"), //
		jMethod<::java::time::Month(::jlong)>("plus"), //
		jMethod<::java::lang::Object(::java::time::temporal::TemporalQuery)>("query"), //
		jMethod<::java::time::temporal::ValueRange(::java::time::temporal::TemporalField)>("range"), //
		jMethod<::java::time::Month(::java::lang::String)>("valueOf"), //
		jMethod<::java::time::Month *()>("values"), //
	};

	template<typename R = ::java::time::temporal::Temporal, typename... Args>
	auto adjustInto(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("adjustInto")] != -1);
		return call<R>("adjustInto", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto firstDayOfYear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("firstDayOfYear")] != -1);
		return call<R>("firstDayOfYear", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::Month, typename... Args>
	auto firstMonthOfQuarter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("firstMonthOfQuarter")] != -1);
		return call<R>("firstMonthOfQuarter", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::Month, typename... Args>
	static auto from(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("from")] != -1);
		return scall<R>("from", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDisplayName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisplayName")] != -1);
		return call<R>("getDisplayName", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLong")] != -1);
		return call<R>("getLong", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSupported")] != -1);
		return call<R>("isSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto length(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("length")] != -1);
		return call<R>("length", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto maxLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("maxLength")] != -1);
		return call<R>("maxLength", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto minLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("minLength")] != -1);
		return call<R>("minLength", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::Month, typename... Args>
	auto minus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("minus")] != -1);
		return call<R>("minus", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::Month, typename... Args>
	static auto of(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("of")] != -1);
		return scall<R>("of", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::Month, typename... Args>
	auto plus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("plus")] != -1);
		return call<R>("plus", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto query(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("query")] != -1);
		return call<R>("query", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::ValueRange, typename... Args>
	auto range(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("range")] != -1);
		return call<R>("range", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::Month, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::Month *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
