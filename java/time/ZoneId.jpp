#ifndef java_time_ZoneId_HPP
#define java_time_ZoneId_HPP

#include "../../jfwd_decl.hpp"

class ::java::time::ZoneId : public jObject<::java::time::ZoneId, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_time / "ZoneId";

	constexpr static Enume field_signatures{
		jField<::java::util::Map>("SHORT_IDS"), //
	};

	template<typename F = ::java::util::Map>
	static auto SHORT_IDS() {
		static_assert(field_signatures[jField<F>("SHORT_IDS")] != -1);
		return sat<F>("SHORT_IDS");
	}

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::time::ZoneId(::java::time::temporal::TemporalAccessor)>("from"), //
		jMethod<::java::util::Set()>("getAvailableZoneIds"), //
		jMethod<::java::lang::String(::java::time::format::TextStyle, ::java::util::Locale)>("getDisplayName"), //
		jMethod<::java::lang::String()>("getId"), //
		jMethod<::java::time::zone::ZoneRules()>("getRules"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::time::ZoneId()>("normalized"), //
		jMethod<::java::time::ZoneId(::java::lang::String)>("of"), //
		jMethod<::java::time::ZoneId(::java::lang::String, ::java::util::Map)>("of"), //
		jMethod<::java::time::ZoneId(::java::lang::String, ::java::time::ZoneOffset)>("ofOffset"), //
		jMethod<::java::time::ZoneId()>("systemDefault"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::java::time::ZoneId, typename... Args>
	static auto from(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("from")] != -1);
		return scall<R>("from", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	static auto getAvailableZoneIds(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAvailableZoneIds")] != -1);
		return scall<R>("getAvailableZoneIds", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDisplayName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDisplayName")] != -1);
		return call<R>("getDisplayName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getId")] != -1);
		return call<R>("getId", forward<Args>(args)...);
	}

	template<typename R = ::java::time::zone::ZoneRules, typename... Args>
	auto getRules(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRules")] != -1);
		return call<R>("getRules", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::java::time::ZoneId, typename... Args>
	auto normalized(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("normalized")] != -1);
		return call<R>("normalized", forward<Args>(args)...);
	}

	template<typename R = ::java::time::ZoneId, typename... Args>
	static auto of(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("of")] != -1);
		return scall<R>("of", forward<Args>(args)...);
	}

	template<typename R = ::java::time::ZoneId, typename... Args>
	static auto ofOffset(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("ofOffset")] != -1);
		return scall<R>("ofOffset", forward<Args>(args)...);
	}

	template<typename R = ::java::time::ZoneId, typename... Args>
	static auto systemDefault(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("systemDefault")] != -1);
		return scall<R>("systemDefault", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
