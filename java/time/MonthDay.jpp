#ifndef java_time_MonthDay_HPP
#define java_time_MonthDay_HPP

#include "../../jfwd_decl.hpp"

class ::java::time::MonthDay : public jObject<::java::time::MonthDay, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_time / "MonthDay";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::time::temporal::Temporal(::java::time::temporal::Temporal)>("adjustInto"), //
		jMethod<::java::time::LocalDate(::jint)>("atYear"), //
		jMethod<::jint(::java::lang::Object)>("compareTo"), //
		jMethod<::jint(::java::time::MonthDay)>("compareTo"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::String(::java::time::format::DateTimeFormatter)>("format"), //
		jMethod<::java::time::MonthDay(::java::time::temporal::TemporalAccessor)>("from"), //
		jMethod<::jint(::java::time::temporal::TemporalField)>("get"), //
		jMethod<::jint()>("getDayOfMonth"), //
		jMethod<::jlong(::java::time::temporal::TemporalField)>("getLong"), //
		jMethod<::java::time::Month()>("getMonth"), //
		jMethod<::jint()>("getMonthValue"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean(::java::time::MonthDay)>("isAfter"), //
		jMethod<::jboolean(::java::time::MonthDay)>("isBefore"), //
		jMethod<::jboolean(::java::time::temporal::TemporalField)>("isSupported"), //
		jMethod<::jboolean(::jint)>("isValidYear"), //
		jMethod<::java::time::MonthDay()>("now"), //
		jMethod<::java::time::MonthDay(::java::time::Clock)>("now"), //
		jMethod<::java::time::MonthDay(::java::time::ZoneId)>("now"), //
		jMethod<::java::time::MonthDay(::jint, ::jint)>("of"), //
		jMethod<::java::time::MonthDay(::java::time::Month, ::jint)>("of"), //
		jMethod<::java::time::MonthDay(::java::lang::CharSequence)>("parse"), //
		jMethod<::java::time::MonthDay(::java::lang::CharSequence, ::java::time::format::DateTimeFormatter)>("parse"), //
		jMethod<::java::lang::Object(::java::time::temporal::TemporalQuery)>("query"), //
		jMethod<::java::time::temporal::ValueRange(::java::time::temporal::TemporalField)>("range"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::time::MonthDay(::java::time::Month)>("with"), //
		jMethod<::java::time::MonthDay(::jint)>("withDayOfMonth"), //
		jMethod<::java::time::MonthDay(::jint)>("withMonth"), //
	};

	template<typename R = ::java::time::temporal::Temporal, typename... Args>
	auto adjustInto(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("adjustInto")] != -1);
		return call<R>("adjustInto", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::LocalDate, typename... Args>
	auto atYear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("atYear")] != -1);
		return call<R>("atYear", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto compareTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compareTo")] != -1);
		return call<R>("compareTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto format(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("format")] != -1);
		return call<R>("format", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::MonthDay, typename... Args>
	static auto from(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("from")] != -1);
		return scall<R>("from", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDayOfMonth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDayOfMonth")] != -1);
		return call<R>("getDayOfMonth", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLong")] != -1);
		return call<R>("getLong", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::Month, typename... Args>
	auto getMonth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMonth")] != -1);
		return call<R>("getMonth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMonthValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMonthValue")] != -1);
		return call<R>("getMonthValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAfter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAfter")] != -1);
		return call<R>("isAfter", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isBefore(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isBefore")] != -1);
		return call<R>("isBefore", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSupported")] != -1);
		return call<R>("isSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isValidYear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isValidYear")] != -1);
		return call<R>("isValidYear", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::MonthDay, typename... Args>
	static auto now(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("now")] != -1);
		return scall<R>("now", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::MonthDay, typename... Args>
	static auto of(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("of")] != -1);
		return scall<R>("of", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::MonthDay, typename... Args>
	static auto parse(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parse")] != -1);
		return scall<R>("parse", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto query(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("query")] != -1);
		return call<R>("query", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::ValueRange, typename... Args>
	auto range(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("range")] != -1);
		return call<R>("range", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::MonthDay, typename... Args>
	auto with(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("with")] != -1);
		return call<R>("with", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::MonthDay, typename... Args>
	auto withDayOfMonth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("withDayOfMonth")] != -1);
		return call<R>("withDayOfMonth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::MonthDay, typename... Args>
	auto withMonth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("withMonth")] != -1);
		return call<R>("withMonth", std::forward<Args>(args)...);
	}

};

#endif
