#ifndef java_time_Duration_HPP
#define java_time_Duration_HPP

#include "../../jfwd_decl.hpp"

class ::java::time::Duration : public jObject<::java::time::Duration, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_time / "Duration";

	constexpr static Enume field_signatures{
		jField<::java::time::Duration>("ZERO"), //
	};

	template<typename F = ::java::time::Duration>
	static auto ZERO() {
		static_assert(field_signatures[jField<F>("ZERO")] != -1);
		return sat<F>("ZERO");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::time::Duration()>("abs"), //
		jMethod<::java::time::temporal::Temporal(::java::time::temporal::Temporal)>("addTo"), //
		jMethod<::java::time::Duration(::java::time::temporal::Temporal, ::java::time::temporal::Temporal)>("between"), //
		jMethod<::jint(::java::lang::Object)>("compareTo"), //
		jMethod<::jint(::java::time::Duration)>("compareTo"), //
		jMethod<::java::time::Duration(::jlong)>("dividedBy"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::time::Duration(::java::time::temporal::TemporalAmount)>("from"), //
		jMethod<::jlong(::java::time::temporal::TemporalUnit)>("get"), //
		jMethod<::jint()>("getNano"), //
		jMethod<::jlong()>("getSeconds"), //
		jMethod<::java::util::List()>("getUnits"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isNegative"), //
		jMethod<::jboolean()>("isZero"), //
		jMethod<::java::time::Duration(::jlong, ::java::time::temporal::TemporalUnit)>("minus"), //
		jMethod<::java::time::Duration(::java::time::Duration)>("minus"), //
		jMethod<::java::time::Duration(::jlong)>("minusDays"), //
		jMethod<::java::time::Duration(::jlong)>("minusHours"), //
		jMethod<::java::time::Duration(::jlong)>("minusMillis"), //
		jMethod<::java::time::Duration(::jlong)>("minusMinutes"), //
		jMethod<::java::time::Duration(::jlong)>("minusNanos"), //
		jMethod<::java::time::Duration(::jlong)>("minusSeconds"), //
		jMethod<::java::time::Duration(::jlong)>("multipliedBy"), //
		jMethod<::java::time::Duration()>("negated"), //
		jMethod<::java::time::Duration(::jlong, ::java::time::temporal::TemporalUnit)>("of"), //
		jMethod<::java::time::Duration(::jlong)>("ofDays"), //
		jMethod<::java::time::Duration(::jlong)>("ofHours"), //
		jMethod<::java::time::Duration(::jlong)>("ofMillis"), //
		jMethod<::java::time::Duration(::jlong)>("ofMinutes"), //
		jMethod<::java::time::Duration(::jlong)>("ofNanos"), //
		jMethod<::java::time::Duration(::jlong)>("ofSeconds"), //
		jMethod<::java::time::Duration(::jlong, ::jlong)>("ofSeconds"), //
		jMethod<::java::time::Duration(::java::lang::CharSequence)>("parse"), //
		jMethod<::java::time::Duration(::jlong, ::java::time::temporal::TemporalUnit)>("plus"), //
		jMethod<::java::time::Duration(::java::time::Duration)>("plus"), //
		jMethod<::java::time::Duration(::jlong)>("plusDays"), //
		jMethod<::java::time::Duration(::jlong)>("plusHours"), //
		jMethod<::java::time::Duration(::jlong)>("plusMillis"), //
		jMethod<::java::time::Duration(::jlong)>("plusMinutes"), //
		jMethod<::java::time::Duration(::jlong)>("plusNanos"), //
		jMethod<::java::time::Duration(::jlong)>("plusSeconds"), //
		jMethod<::java::time::temporal::Temporal(::java::time::temporal::Temporal)>("subtractFrom"), //
		jMethod<::jlong()>("toDays"), //
		jMethod<::jlong()>("toHours"), //
		jMethod<::jlong()>("toMillis"), //
		jMethod<::jlong()>("toMinutes"), //
		jMethod<::jlong()>("toNanos"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::time::Duration(::jint)>("withNanos"), //
		jMethod<::java::time::Duration(::jlong)>("withSeconds"), //
	};

	template<typename R = ::java::time::Duration, typename... Args>
	auto abs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("abs")] != -1);
		return call<R>("abs", forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::Temporal, typename... Args>
	auto addTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addTo")] != -1);
		return call<R>("addTo", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Duration, typename... Args>
	static auto between(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("between")] != -1);
		return scall<R>("between", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto compareTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("compareTo")] != -1);
		return call<R>("compareTo", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Duration, typename... Args>
	auto dividedBy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("dividedBy")] != -1);
		return call<R>("dividedBy", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Duration, typename... Args>
	static auto from(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("from")] != -1);
		return scall<R>("from", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("get")] != -1);
		return call<R>("get", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNano(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNano")] != -1);
		return call<R>("getNano", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getSeconds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSeconds")] != -1);
		return call<R>("getSeconds", forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getUnits(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUnits")] != -1);
		return call<R>("getUnits", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isNegative(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isNegative")] != -1);
		return call<R>("isNegative", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isZero(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isZero")] != -1);
		return call<R>("isZero", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Duration, typename... Args>
	auto minus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("minus")] != -1);
		return call<R>("minus", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Duration, typename... Args>
	auto minusDays(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("minusDays")] != -1);
		return call<R>("minusDays", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Duration, typename... Args>
	auto minusHours(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("minusHours")] != -1);
		return call<R>("minusHours", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Duration, typename... Args>
	auto minusMillis(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("minusMillis")] != -1);
		return call<R>("minusMillis", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Duration, typename... Args>
	auto minusMinutes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("minusMinutes")] != -1);
		return call<R>("minusMinutes", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Duration, typename... Args>
	auto minusNanos(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("minusNanos")] != -1);
		return call<R>("minusNanos", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Duration, typename... Args>
	auto minusSeconds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("minusSeconds")] != -1);
		return call<R>("minusSeconds", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Duration, typename... Args>
	auto multipliedBy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("multipliedBy")] != -1);
		return call<R>("multipliedBy", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Duration, typename... Args>
	auto negated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("negated")] != -1);
		return call<R>("negated", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Duration, typename... Args>
	static auto of(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("of")] != -1);
		return scall<R>("of", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Duration, typename... Args>
	static auto ofDays(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("ofDays")] != -1);
		return scall<R>("ofDays", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Duration, typename... Args>
	static auto ofHours(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("ofHours")] != -1);
		return scall<R>("ofHours", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Duration, typename... Args>
	static auto ofMillis(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("ofMillis")] != -1);
		return scall<R>("ofMillis", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Duration, typename... Args>
	static auto ofMinutes(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("ofMinutes")] != -1);
		return scall<R>("ofMinutes", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Duration, typename... Args>
	static auto ofNanos(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("ofNanos")] != -1);
		return scall<R>("ofNanos", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Duration, typename... Args>
	static auto ofSeconds(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("ofSeconds")] != -1);
		return scall<R>("ofSeconds", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Duration, typename... Args>
	static auto parse(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("parse")] != -1);
		return scall<R>("parse", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Duration, typename... Args>
	auto plus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("plus")] != -1);
		return call<R>("plus", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Duration, typename... Args>
	auto plusDays(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("plusDays")] != -1);
		return call<R>("plusDays", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Duration, typename... Args>
	auto plusHours(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("plusHours")] != -1);
		return call<R>("plusHours", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Duration, typename... Args>
	auto plusMillis(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("plusMillis")] != -1);
		return call<R>("plusMillis", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Duration, typename... Args>
	auto plusMinutes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("plusMinutes")] != -1);
		return call<R>("plusMinutes", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Duration, typename... Args>
	auto plusNanos(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("plusNanos")] != -1);
		return call<R>("plusNanos", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Duration, typename... Args>
	auto plusSeconds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("plusSeconds")] != -1);
		return call<R>("plusSeconds", forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::Temporal, typename... Args>
	auto subtractFrom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("subtractFrom")] != -1);
		return call<R>("subtractFrom", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto toDays(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toDays")] != -1);
		return call<R>("toDays", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto toHours(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toHours")] != -1);
		return call<R>("toHours", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto toMillis(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toMillis")] != -1);
		return call<R>("toMillis", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto toMinutes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toMinutes")] != -1);
		return call<R>("toMinutes", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto toNanos(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toNanos")] != -1);
		return call<R>("toNanos", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Duration, typename... Args>
	auto withNanos(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("withNanos")] != -1);
		return call<R>("withNanos", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Duration, typename... Args>
	auto withSeconds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("withSeconds")] != -1);
		return call<R>("withSeconds", forward<Args>(args)...);
	}

};

#endif
