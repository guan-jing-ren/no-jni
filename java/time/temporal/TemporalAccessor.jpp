#ifndef java_time_temporal_TemporalAccessor_HPP
#define java_time_temporal_TemporalAccessor_HPP

#include "../../../jfwd_decl.hpp"

class ::java::time::temporal::TemporalAccessor : public jObject<::java::time::temporal::TemporalAccessor, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_time_temporal / "TemporalAccessor";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint(::java::time::temporal::TemporalField)>("get"), //
		jMethod<::jlong(::java::time::temporal::TemporalField)>("getLong"), //
		jMethod<::jboolean(::java::time::temporal::TemporalField)>("isSupported"), //
		jMethod<::java::lang::Object(::java::time::temporal::TemporalQuery)>("query"), //
		jMethod<::java::time::temporal::ValueRange(::java::time::temporal::TemporalField)>("range"), //
	};

	template<typename R = ::jint, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("get")] != -1);
		return call<R>("get", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLong")] != -1);
		return call<R>("getLong", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isSupported")] != -1);
		return call<R>("isSupported", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto query(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("query")] != -1);
		return call<R>("query", forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::ValueRange, typename... Args>
	auto range(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("range")] != -1);
		return call<R>("range", forward<Args>(args)...);
	}

};

#endif
