#ifndef java_time_temporal_TemporalQueries_HPP
#define java_time_temporal_TemporalQueries_HPP

#include "../../../jfwd_decl.hpp"

class ::java::time::temporal::TemporalQueries : public jObject<::java::time::temporal::TemporalQueries, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_time_temporal / "TemporalQueries";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::time::temporal::TemporalQuery()>("chronology"), //
		jMethod<::java::time::temporal::TemporalQuery()>("localDate"), //
		jMethod<::java::time::temporal::TemporalQuery()>("localTime"), //
		jMethod<::java::time::temporal::TemporalQuery()>("offset"), //
		jMethod<::java::time::temporal::TemporalQuery()>("precision"), //
		jMethod<::java::time::temporal::TemporalQuery()>("zone"), //
		jMethod<::java::time::temporal::TemporalQuery()>("zoneId"), //
	};

	template<typename R = ::java::time::temporal::TemporalQuery, typename... Args>
	static auto chronology(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("chronology")] != -1);
		return scall<R>("chronology", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::TemporalQuery, typename... Args>
	static auto localDate(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("localDate")] != -1);
		return scall<R>("localDate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::TemporalQuery, typename... Args>
	static auto localTime(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("localTime")] != -1);
		return scall<R>("localTime", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::TemporalQuery, typename... Args>
	static auto offset(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("offset")] != -1);
		return scall<R>("offset", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::TemporalQuery, typename... Args>
	static auto precision(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("precision")] != -1);
		return scall<R>("precision", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::TemporalQuery, typename... Args>
	static auto zone(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("zone")] != -1);
		return scall<R>("zone", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::TemporalQuery, typename... Args>
	static auto zoneId(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("zoneId")] != -1);
		return scall<R>("zoneId", std::forward<Args>(args)...);
	}

};

#endif
