#ifndef java_time_temporal_TemporalField_HPP
#define java_time_temporal_TemporalField_HPP

#include "../../../jfwd_decl.hpp"

class ::java::time::temporal::TemporalField : public jObject<::java::time::temporal::TemporalField, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_time_temporal / "TemporalField";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::time::temporal::Temporal(::java::time::temporal::Temporal, ::jlong)>("adjustInto"), //
		jMethod<::java::time::temporal::TemporalUnit()>("getBaseUnit"), //
		jMethod<::java::lang::String(::java::util::Locale)>("getDisplayName"), //
		jMethod<::jlong(::java::time::temporal::TemporalAccessor)>("getFrom"), //
		jMethod<::java::time::temporal::TemporalUnit()>("getRangeUnit"), //
		jMethod<::jboolean()>("isDateBased"), //
		jMethod<::jboolean(::java::time::temporal::TemporalAccessor)>("isSupportedBy"), //
		jMethod<::jboolean()>("isTimeBased"), //
		jMethod<::java::time::temporal::ValueRange()>("range"), //
		jMethod<::java::time::temporal::ValueRange(::java::time::temporal::TemporalAccessor)>("rangeRefinedBy"), //
		jMethod<::java::time::temporal::TemporalAccessor(::java::util::Map, ::java::time::temporal::TemporalAccessor, ::java::time::format::ResolverStyle)>("resolve"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::time::temporal::Temporal, typename... Args>
	auto adjustInto(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("adjustInto")] != -1);
		return call<R>("adjustInto", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::TemporalUnit, typename... Args>
	auto getBaseUnit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBaseUnit")] != -1);
		return call<R>("getBaseUnit", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDisplayName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisplayName")] != -1);
		return call<R>("getDisplayName", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getFrom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFrom")] != -1);
		return call<R>("getFrom", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::TemporalUnit, typename... Args>
	auto getRangeUnit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRangeUnit")] != -1);
		return call<R>("getRangeUnit", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDateBased(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDateBased")] != -1);
		return call<R>("isDateBased", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSupportedBy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSupportedBy")] != -1);
		return call<R>("isSupportedBy", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isTimeBased(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isTimeBased")] != -1);
		return call<R>("isTimeBased", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::ValueRange, typename... Args>
	auto range(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("range")] != -1);
		return call<R>("range", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::ValueRange, typename... Args>
	auto rangeRefinedBy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rangeRefinedBy")] != -1);
		return call<R>("rangeRefinedBy", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::TemporalAccessor, typename... Args>
	auto resolve(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("resolve")] != -1);
		return call<R>("resolve", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
