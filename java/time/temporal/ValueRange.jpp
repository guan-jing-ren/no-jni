#ifndef java_time_temporal_ValueRange_HPP
#define java_time_temporal_ValueRange_HPP

#include "../../../jfwd_decl.hpp"

class ::java::time::temporal::ValueRange : public jObject<::java::time::temporal::ValueRange, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_time_temporal / "ValueRange";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint(::jlong, ::java::time::temporal::TemporalField)>("checkValidIntValue"), //
		jMethod<::jlong(::jlong, ::java::time::temporal::TemporalField)>("checkValidValue"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jlong()>("getLargestMinimum"), //
		jMethod<::jlong()>("getMaximum"), //
		jMethod<::jlong()>("getMinimum"), //
		jMethod<::jlong()>("getSmallestMaximum"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isFixed"), //
		jMethod<::jboolean()>("isIntValue"), //
		jMethod<::jboolean(::jlong)>("isValidIntValue"), //
		jMethod<::jboolean(::jlong)>("isValidValue"), //
		jMethod<::java::time::temporal::ValueRange(::jlong, ::jlong)>("of"), //
		jMethod<::java::time::temporal::ValueRange(::jlong, ::jlong, ::jlong)>("of"), //
		jMethod<::java::time::temporal::ValueRange(::jlong, ::jlong, ::jlong, ::jlong)>("of"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jint, typename... Args>
	auto checkValidIntValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkValidIntValue")] != -1);
		return call<R>("checkValidIntValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto checkValidValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkValidValue")] != -1);
		return call<R>("checkValidValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLargestMinimum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLargestMinimum")] != -1);
		return call<R>("getLargestMinimum", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getMaximum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaximum")] != -1);
		return call<R>("getMaximum", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getMinimum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinimum")] != -1);
		return call<R>("getMinimum", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getSmallestMaximum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSmallestMaximum")] != -1);
		return call<R>("getSmallestMaximum", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFixed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFixed")] != -1);
		return call<R>("isFixed", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isIntValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isIntValue")] != -1);
		return call<R>("isIntValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isValidIntValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isValidIntValue")] != -1);
		return call<R>("isValidIntValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isValidValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isValidValue")] != -1);
		return call<R>("isValidValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::ValueRange, typename... Args>
	static auto of(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("of")] != -1);
		return scall<R>("of", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
