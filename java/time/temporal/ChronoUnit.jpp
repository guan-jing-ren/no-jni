#ifndef java_time_temporal_ChronoUnit_HPP
#define java_time_temporal_ChronoUnit_HPP

#include "../../../jfwd_decl.hpp"

class ::java::time::temporal::ChronoUnit : public jObject<::java::time::temporal::ChronoUnit, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_time_temporal / "ChronoUnit";

	constexpr static Enume field_signatures{
		jField<::java::time::temporal::ChronoUnit>("CENTURIES"), //
		jField<::java::time::temporal::ChronoUnit>("DAYS"), //
		jField<::java::time::temporal::ChronoUnit>("DECADES"), //
		jField<::java::time::temporal::ChronoUnit>("ERAS"), //
		jField<::java::time::temporal::ChronoUnit>("FOREVER"), //
		jField<::java::time::temporal::ChronoUnit>("HALF_DAYS"), //
		jField<::java::time::temporal::ChronoUnit>("HOURS"), //
		jField<::java::time::temporal::ChronoUnit>("MICROS"), //
		jField<::java::time::temporal::ChronoUnit>("MILLENNIA"), //
		jField<::java::time::temporal::ChronoUnit>("MILLIS"), //
		jField<::java::time::temporal::ChronoUnit>("MINUTES"), //
		jField<::java::time::temporal::ChronoUnit>("MONTHS"), //
		jField<::java::time::temporal::ChronoUnit>("NANOS"), //
		jField<::java::time::temporal::ChronoUnit>("SECONDS"), //
		jField<::java::time::temporal::ChronoUnit>("WEEKS"), //
		jField<::java::time::temporal::ChronoUnit>("YEARS"), //
	};

	template<typename F = ::java::time::temporal::ChronoUnit>
	static auto CENTURIES() {
		static_assert(field_signatures[jField<F>("CENTURIES")] != -1);
		return sat<F>("CENTURIES");
	}

	template<typename F = ::java::time::temporal::ChronoUnit>
	static auto DAYS() {
		static_assert(field_signatures[jField<F>("DAYS")] != -1);
		return sat<F>("DAYS");
	}

	template<typename F = ::java::time::temporal::ChronoUnit>
	static auto DECADES() {
		static_assert(field_signatures[jField<F>("DECADES")] != -1);
		return sat<F>("DECADES");
	}

	template<typename F = ::java::time::temporal::ChronoUnit>
	static auto ERAS() {
		static_assert(field_signatures[jField<F>("ERAS")] != -1);
		return sat<F>("ERAS");
	}

	template<typename F = ::java::time::temporal::ChronoUnit>
	static auto FOREVER() {
		static_assert(field_signatures[jField<F>("FOREVER")] != -1);
		return sat<F>("FOREVER");
	}

	template<typename F = ::java::time::temporal::ChronoUnit>
	static auto HALF_DAYS() {
		static_assert(field_signatures[jField<F>("HALF_DAYS")] != -1);
		return sat<F>("HALF_DAYS");
	}

	template<typename F = ::java::time::temporal::ChronoUnit>
	static auto HOURS() {
		static_assert(field_signatures[jField<F>("HOURS")] != -1);
		return sat<F>("HOURS");
	}

	template<typename F = ::java::time::temporal::ChronoUnit>
	static auto MICROS() {
		static_assert(field_signatures[jField<F>("MICROS")] != -1);
		return sat<F>("MICROS");
	}

	template<typename F = ::java::time::temporal::ChronoUnit>
	static auto MILLENNIA() {
		static_assert(field_signatures[jField<F>("MILLENNIA")] != -1);
		return sat<F>("MILLENNIA");
	}

	template<typename F = ::java::time::temporal::ChronoUnit>
	static auto MILLIS() {
		static_assert(field_signatures[jField<F>("MILLIS")] != -1);
		return sat<F>("MILLIS");
	}

	template<typename F = ::java::time::temporal::ChronoUnit>
	static auto MINUTES() {
		static_assert(field_signatures[jField<F>("MINUTES")] != -1);
		return sat<F>("MINUTES");
	}

	template<typename F = ::java::time::temporal::ChronoUnit>
	static auto MONTHS() {
		static_assert(field_signatures[jField<F>("MONTHS")] != -1);
		return sat<F>("MONTHS");
	}

	template<typename F = ::java::time::temporal::ChronoUnit>
	static auto NANOS() {
		static_assert(field_signatures[jField<F>("NANOS")] != -1);
		return sat<F>("NANOS");
	}

	template<typename F = ::java::time::temporal::ChronoUnit>
	static auto SECONDS() {
		static_assert(field_signatures[jField<F>("SECONDS")] != -1);
		return sat<F>("SECONDS");
	}

	template<typename F = ::java::time::temporal::ChronoUnit>
	static auto WEEKS() {
		static_assert(field_signatures[jField<F>("WEEKS")] != -1);
		return sat<F>("WEEKS");
	}

	template<typename F = ::java::time::temporal::ChronoUnit>
	static auto YEARS() {
		static_assert(field_signatures[jField<F>("YEARS")] != -1);
		return sat<F>("YEARS");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::time::temporal::Temporal(::java::time::temporal::Temporal, ::jlong)>("addTo"), //
		jMethod<::jlong(::java::time::temporal::Temporal, ::java::time::temporal::Temporal)>("between"), //
		jMethod<::java::time::Duration()>("getDuration"), //
		jMethod<::jboolean()>("isDateBased"), //
		jMethod<::jboolean()>("isDurationEstimated"), //
		jMethod<::jboolean(::java::time::temporal::Temporal)>("isSupportedBy"), //
		jMethod<::jboolean()>("isTimeBased"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::time::temporal::ChronoUnit(::java::lang::String)>("valueOf"), //
		jMethod<::java::time::temporal::ChronoUnit *()>("values"), //
	};

	template<typename R = ::java::time::temporal::Temporal, typename... Args>
	auto addTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addTo")] != -1);
		return call<R>("addTo", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto between(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("between")] != -1);
		return call<R>("between", forward<Args>(args)...);
	}

	template<typename R = ::java::time::Duration, typename... Args>
	auto getDuration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDuration")] != -1);
		return call<R>("getDuration", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDateBased(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isDateBased")] != -1);
		return call<R>("isDateBased", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDurationEstimated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isDurationEstimated")] != -1);
		return call<R>("isDurationEstimated", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSupportedBy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isSupportedBy")] != -1);
		return call<R>("isSupportedBy", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isTimeBased(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isTimeBased")] != -1);
		return call<R>("isTimeBased", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::ChronoUnit, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::ChronoUnit *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", forward<Args>(args)...);
	}

};

#endif
