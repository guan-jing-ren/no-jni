#ifndef java_time_temporal_TemporalAdjusters_HPP
#define java_time_temporal_TemporalAdjusters_HPP

#include "../../../jfwd_decl.hpp"

class ::java::time::temporal::TemporalAdjusters : public jObject<::java::time::temporal::TemporalAdjusters, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_time_temporal / "TemporalAdjusters";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::time::temporal::TemporalAdjuster(::jint, ::java::time::DayOfWeek)>("dayOfWeekInMonth"), //
		jMethod<::java::time::temporal::TemporalAdjuster()>("firstDayOfMonth"), //
		jMethod<::java::time::temporal::TemporalAdjuster()>("firstDayOfNextMonth"), //
		jMethod<::java::time::temporal::TemporalAdjuster()>("firstDayOfNextYear"), //
		jMethod<::java::time::temporal::TemporalAdjuster()>("firstDayOfYear"), //
		jMethod<::java::time::temporal::TemporalAdjuster(::java::time::DayOfWeek)>("firstInMonth"), //
		jMethod<::java::time::temporal::TemporalAdjuster()>("lastDayOfMonth"), //
		jMethod<::java::time::temporal::TemporalAdjuster()>("lastDayOfYear"), //
		jMethod<::java::time::temporal::TemporalAdjuster(::java::time::DayOfWeek)>("lastInMonth"), //
		jMethod<::java::time::temporal::TemporalAdjuster(::java::time::DayOfWeek)>("next"), //
		jMethod<::java::time::temporal::TemporalAdjuster(::java::time::DayOfWeek)>("nextOrSame"), //
		jMethod<::java::time::temporal::TemporalAdjuster(::java::util::function::UnaryOperator)>("ofDateAdjuster"), //
		jMethod<::java::time::temporal::TemporalAdjuster(::java::time::DayOfWeek)>("previous"), //
		jMethod<::java::time::temporal::TemporalAdjuster(::java::time::DayOfWeek)>("previousOrSame"), //
	};

	template<typename R = ::java::time::temporal::TemporalAdjuster, typename... Args>
	static auto dayOfWeekInMonth(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dayOfWeekInMonth")] != -1);
		return scall<R>("dayOfWeekInMonth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::TemporalAdjuster, typename... Args>
	static auto firstDayOfMonth(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("firstDayOfMonth")] != -1);
		return scall<R>("firstDayOfMonth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::TemporalAdjuster, typename... Args>
	static auto firstDayOfNextMonth(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("firstDayOfNextMonth")] != -1);
		return scall<R>("firstDayOfNextMonth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::TemporalAdjuster, typename... Args>
	static auto firstDayOfNextYear(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("firstDayOfNextYear")] != -1);
		return scall<R>("firstDayOfNextYear", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::TemporalAdjuster, typename... Args>
	static auto firstDayOfYear(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("firstDayOfYear")] != -1);
		return scall<R>("firstDayOfYear", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::TemporalAdjuster, typename... Args>
	static auto firstInMonth(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("firstInMonth")] != -1);
		return scall<R>("firstInMonth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::TemporalAdjuster, typename... Args>
	static auto lastDayOfMonth(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lastDayOfMonth")] != -1);
		return scall<R>("lastDayOfMonth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::TemporalAdjuster, typename... Args>
	static auto lastDayOfYear(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lastDayOfYear")] != -1);
		return scall<R>("lastDayOfYear", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::TemporalAdjuster, typename... Args>
	static auto lastInMonth(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lastInMonth")] != -1);
		return scall<R>("lastInMonth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::TemporalAdjuster, typename... Args>
	static auto next(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("next")] != -1);
		return scall<R>("next", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::TemporalAdjuster, typename... Args>
	static auto nextOrSame(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nextOrSame")] != -1);
		return scall<R>("nextOrSame", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::TemporalAdjuster, typename... Args>
	static auto ofDateAdjuster(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ofDateAdjuster")] != -1);
		return scall<R>("ofDateAdjuster", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::TemporalAdjuster, typename... Args>
	static auto previous(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("previous")] != -1);
		return scall<R>("previous", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::TemporalAdjuster, typename... Args>
	static auto previousOrSame(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("previousOrSame")] != -1);
		return scall<R>("previousOrSame", std::forward<Args>(args)...);
	}

};

#endif
