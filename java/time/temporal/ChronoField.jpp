#ifndef java_time_temporal_ChronoField_HPP
#define java_time_temporal_ChronoField_HPP

#include "../../../jfwd_decl.hpp"

class ::java::time::temporal::ChronoField : public jObject<::java::time::temporal::ChronoField, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_time_temporal / "ChronoField";

	constexpr static Enume field_signatures{
		jField<::java::time::temporal::ChronoField>("ALIGNED_DAY_OF_WEEK_IN_MONTH"), //
		jField<::java::time::temporal::ChronoField>("ALIGNED_DAY_OF_WEEK_IN_YEAR"), //
		jField<::java::time::temporal::ChronoField>("ALIGNED_WEEK_OF_MONTH"), //
		jField<::java::time::temporal::ChronoField>("ALIGNED_WEEK_OF_YEAR"), //
		jField<::java::time::temporal::ChronoField>("AMPM_OF_DAY"), //
		jField<::java::time::temporal::ChronoField>("CLOCK_HOUR_OF_AMPM"), //
		jField<::java::time::temporal::ChronoField>("CLOCK_HOUR_OF_DAY"), //
		jField<::java::time::temporal::ChronoField>("DAY_OF_MONTH"), //
		jField<::java::time::temporal::ChronoField>("DAY_OF_WEEK"), //
		jField<::java::time::temporal::ChronoField>("DAY_OF_YEAR"), //
		jField<::java::time::temporal::ChronoField>("EPOCH_DAY"), //
		jField<::java::time::temporal::ChronoField>("ERA"), //
		jField<::java::time::temporal::ChronoField>("HOUR_OF_AMPM"), //
		jField<::java::time::temporal::ChronoField>("HOUR_OF_DAY"), //
		jField<::java::time::temporal::ChronoField>("INSTANT_SECONDS"), //
		jField<::java::time::temporal::ChronoField>("MICRO_OF_DAY"), //
		jField<::java::time::temporal::ChronoField>("MICRO_OF_SECOND"), //
		jField<::java::time::temporal::ChronoField>("MILLI_OF_DAY"), //
		jField<::java::time::temporal::ChronoField>("MILLI_OF_SECOND"), //
		jField<::java::time::temporal::ChronoField>("MINUTE_OF_DAY"), //
		jField<::java::time::temporal::ChronoField>("MINUTE_OF_HOUR"), //
		jField<::java::time::temporal::ChronoField>("MONTH_OF_YEAR"), //
		jField<::java::time::temporal::ChronoField>("NANO_OF_DAY"), //
		jField<::java::time::temporal::ChronoField>("NANO_OF_SECOND"), //
		jField<::java::time::temporal::ChronoField>("OFFSET_SECONDS"), //
		jField<::java::time::temporal::ChronoField>("PROLEPTIC_MONTH"), //
		jField<::java::time::temporal::ChronoField>("SECOND_OF_DAY"), //
		jField<::java::time::temporal::ChronoField>("SECOND_OF_MINUTE"), //
		jField<::java::time::temporal::ChronoField>("YEAR"), //
		jField<::java::time::temporal::ChronoField>("YEAR_OF_ERA"), //
	};

	template<typename F = ::java::time::temporal::ChronoField>
	static auto ALIGNED_DAY_OF_WEEK_IN_MONTH() {
		static_assert(field_signatures[jField<F>("ALIGNED_DAY_OF_WEEK_IN_MONTH")] != -1);
		return sat<F>("ALIGNED_DAY_OF_WEEK_IN_MONTH");
	}

	template<typename F = ::java::time::temporal::ChronoField>
	static auto ALIGNED_DAY_OF_WEEK_IN_YEAR() {
		static_assert(field_signatures[jField<F>("ALIGNED_DAY_OF_WEEK_IN_YEAR")] != -1);
		return sat<F>("ALIGNED_DAY_OF_WEEK_IN_YEAR");
	}

	template<typename F = ::java::time::temporal::ChronoField>
	static auto ALIGNED_WEEK_OF_MONTH() {
		static_assert(field_signatures[jField<F>("ALIGNED_WEEK_OF_MONTH")] != -1);
		return sat<F>("ALIGNED_WEEK_OF_MONTH");
	}

	template<typename F = ::java::time::temporal::ChronoField>
	static auto ALIGNED_WEEK_OF_YEAR() {
		static_assert(field_signatures[jField<F>("ALIGNED_WEEK_OF_YEAR")] != -1);
		return sat<F>("ALIGNED_WEEK_OF_YEAR");
	}

	template<typename F = ::java::time::temporal::ChronoField>
	static auto AMPM_OF_DAY() {
		static_assert(field_signatures[jField<F>("AMPM_OF_DAY")] != -1);
		return sat<F>("AMPM_OF_DAY");
	}

	template<typename F = ::java::time::temporal::ChronoField>
	static auto CLOCK_HOUR_OF_AMPM() {
		static_assert(field_signatures[jField<F>("CLOCK_HOUR_OF_AMPM")] != -1);
		return sat<F>("CLOCK_HOUR_OF_AMPM");
	}

	template<typename F = ::java::time::temporal::ChronoField>
	static auto CLOCK_HOUR_OF_DAY() {
		static_assert(field_signatures[jField<F>("CLOCK_HOUR_OF_DAY")] != -1);
		return sat<F>("CLOCK_HOUR_OF_DAY");
	}

	template<typename F = ::java::time::temporal::ChronoField>
	static auto DAY_OF_MONTH() {
		static_assert(field_signatures[jField<F>("DAY_OF_MONTH")] != -1);
		return sat<F>("DAY_OF_MONTH");
	}

	template<typename F = ::java::time::temporal::ChronoField>
	static auto DAY_OF_WEEK() {
		static_assert(field_signatures[jField<F>("DAY_OF_WEEK")] != -1);
		return sat<F>("DAY_OF_WEEK");
	}

	template<typename F = ::java::time::temporal::ChronoField>
	static auto DAY_OF_YEAR() {
		static_assert(field_signatures[jField<F>("DAY_OF_YEAR")] != -1);
		return sat<F>("DAY_OF_YEAR");
	}

	template<typename F = ::java::time::temporal::ChronoField>
	static auto EPOCH_DAY() {
		static_assert(field_signatures[jField<F>("EPOCH_DAY")] != -1);
		return sat<F>("EPOCH_DAY");
	}

	template<typename F = ::java::time::temporal::ChronoField>
	static auto ERA() {
		static_assert(field_signatures[jField<F>("ERA")] != -1);
		return sat<F>("ERA");
	}

	template<typename F = ::java::time::temporal::ChronoField>
	static auto HOUR_OF_AMPM() {
		static_assert(field_signatures[jField<F>("HOUR_OF_AMPM")] != -1);
		return sat<F>("HOUR_OF_AMPM");
	}

	template<typename F = ::java::time::temporal::ChronoField>
	static auto HOUR_OF_DAY() {
		static_assert(field_signatures[jField<F>("HOUR_OF_DAY")] != -1);
		return sat<F>("HOUR_OF_DAY");
	}

	template<typename F = ::java::time::temporal::ChronoField>
	static auto INSTANT_SECONDS() {
		static_assert(field_signatures[jField<F>("INSTANT_SECONDS")] != -1);
		return sat<F>("INSTANT_SECONDS");
	}

	template<typename F = ::java::time::temporal::ChronoField>
	static auto MICRO_OF_DAY() {
		static_assert(field_signatures[jField<F>("MICRO_OF_DAY")] != -1);
		return sat<F>("MICRO_OF_DAY");
	}

	template<typename F = ::java::time::temporal::ChronoField>
	static auto MICRO_OF_SECOND() {
		static_assert(field_signatures[jField<F>("MICRO_OF_SECOND")] != -1);
		return sat<F>("MICRO_OF_SECOND");
	}

	template<typename F = ::java::time::temporal::ChronoField>
	static auto MILLI_OF_DAY() {
		static_assert(field_signatures[jField<F>("MILLI_OF_DAY")] != -1);
		return sat<F>("MILLI_OF_DAY");
	}

	template<typename F = ::java::time::temporal::ChronoField>
	static auto MILLI_OF_SECOND() {
		static_assert(field_signatures[jField<F>("MILLI_OF_SECOND")] != -1);
		return sat<F>("MILLI_OF_SECOND");
	}

	template<typename F = ::java::time::temporal::ChronoField>
	static auto MINUTE_OF_DAY() {
		static_assert(field_signatures[jField<F>("MINUTE_OF_DAY")] != -1);
		return sat<F>("MINUTE_OF_DAY");
	}

	template<typename F = ::java::time::temporal::ChronoField>
	static auto MINUTE_OF_HOUR() {
		static_assert(field_signatures[jField<F>("MINUTE_OF_HOUR")] != -1);
		return sat<F>("MINUTE_OF_HOUR");
	}

	template<typename F = ::java::time::temporal::ChronoField>
	static auto MONTH_OF_YEAR() {
		static_assert(field_signatures[jField<F>("MONTH_OF_YEAR")] != -1);
		return sat<F>("MONTH_OF_YEAR");
	}

	template<typename F = ::java::time::temporal::ChronoField>
	static auto NANO_OF_DAY() {
		static_assert(field_signatures[jField<F>("NANO_OF_DAY")] != -1);
		return sat<F>("NANO_OF_DAY");
	}

	template<typename F = ::java::time::temporal::ChronoField>
	static auto NANO_OF_SECOND() {
		static_assert(field_signatures[jField<F>("NANO_OF_SECOND")] != -1);
		return sat<F>("NANO_OF_SECOND");
	}

	template<typename F = ::java::time::temporal::ChronoField>
	static auto OFFSET_SECONDS() {
		static_assert(field_signatures[jField<F>("OFFSET_SECONDS")] != -1);
		return sat<F>("OFFSET_SECONDS");
	}

	template<typename F = ::java::time::temporal::ChronoField>
	static auto PROLEPTIC_MONTH() {
		static_assert(field_signatures[jField<F>("PROLEPTIC_MONTH")] != -1);
		return sat<F>("PROLEPTIC_MONTH");
	}

	template<typename F = ::java::time::temporal::ChronoField>
	static auto SECOND_OF_DAY() {
		static_assert(field_signatures[jField<F>("SECOND_OF_DAY")] != -1);
		return sat<F>("SECOND_OF_DAY");
	}

	template<typename F = ::java::time::temporal::ChronoField>
	static auto SECOND_OF_MINUTE() {
		static_assert(field_signatures[jField<F>("SECOND_OF_MINUTE")] != -1);
		return sat<F>("SECOND_OF_MINUTE");
	}

	template<typename F = ::java::time::temporal::ChronoField>
	static auto YEAR() {
		static_assert(field_signatures[jField<F>("YEAR")] != -1);
		return sat<F>("YEAR");
	}

	template<typename F = ::java::time::temporal::ChronoField>
	static auto YEAR_OF_ERA() {
		static_assert(field_signatures[jField<F>("YEAR_OF_ERA")] != -1);
		return sat<F>("YEAR_OF_ERA");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::time::temporal::Temporal(::java::time::temporal::Temporal, ::jlong)>("adjustInto"), //
		jMethod<::jint(::jlong)>("checkValidIntValue"), //
		jMethod<::jlong(::jlong)>("checkValidValue"), //
		jMethod<::java::time::temporal::TemporalUnit()>("getBaseUnit"), //
		jMethod<::java::lang::String(::java::util::Locale)>("getDisplayName"), //
		jMethod<::jlong(::java::time::temporal::TemporalAccessor)>("getFrom"), //
		jMethod<::java::time::temporal::TemporalUnit()>("getRangeUnit"), //
		jMethod<::jboolean()>("isDateBased"), //
		jMethod<::jboolean(::java::time::temporal::TemporalAccessor)>("isSupportedBy"), //
		jMethod<::jboolean()>("isTimeBased"), //
		jMethod<::java::time::temporal::ValueRange()>("range"), //
		jMethod<::java::time::temporal::ValueRange(::java::time::temporal::TemporalAccessor)>("rangeRefinedBy"), //
		jMethod<::java::time::temporal::TemporalAccessor(::java::util::Map, ::java::time::temporal::TemporalAccessor, ::java::time::format::ResolverStyle)>("resolve"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::time::temporal::ChronoField(::java::lang::String)>("valueOf"), //
		jMethod<::java::time::temporal::ChronoField *()>("values"), //
	};

	template<typename R = ::java::time::temporal::Temporal, typename... Args>
	auto adjustInto(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("adjustInto")] != -1);
		return call<R>("adjustInto", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto checkValidIntValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkValidIntValue")] != -1);
		return call<R>("checkValidIntValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto checkValidValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkValidValue")] != -1);
		return call<R>("checkValidValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::TemporalUnit, typename... Args>
	auto getBaseUnit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBaseUnit")] != -1);
		return call<R>("getBaseUnit", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDisplayName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisplayName")] != -1);
		return call<R>("getDisplayName", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getFrom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFrom")] != -1);
		return call<R>("getFrom", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::TemporalUnit, typename... Args>
	auto getRangeUnit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRangeUnit")] != -1);
		return call<R>("getRangeUnit", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDateBased(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDateBased")] != -1);
		return call<R>("isDateBased", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSupportedBy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSupportedBy")] != -1);
		return call<R>("isSupportedBy", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isTimeBased(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isTimeBased")] != -1);
		return call<R>("isTimeBased", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::ValueRange, typename... Args>
	auto range(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("range")] != -1);
		return call<R>("range", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::ValueRange, typename... Args>
	auto rangeRefinedBy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rangeRefinedBy")] != -1);
		return call<R>("rangeRefinedBy", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::TemporalAccessor, typename... Args>
	auto resolve(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("resolve")] != -1);
		return call<R>("resolve", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::ChronoField, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::ChronoField *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
