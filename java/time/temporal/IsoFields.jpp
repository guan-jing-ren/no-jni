#ifndef java_time_temporal_IsoFields_HPP
#define java_time_temporal_IsoFields_HPP

#include "../../../jfwd_decl.hpp"

class ::java::time::temporal::IsoFields : public jObject<::java::time::temporal::IsoFields, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_time_temporal / "IsoFields";

	constexpr static Enume field_signatures{
		jField<::java::time::temporal::TemporalField>("DAY_OF_QUARTER"), //
		jField<::java::time::temporal::TemporalField>("QUARTER_OF_YEAR"), //
		jField<::java::time::temporal::TemporalUnit>("QUARTER_YEARS"), //
		jField<::java::time::temporal::TemporalField>("WEEK_BASED_YEAR"), //
		jField<::java::time::temporal::TemporalUnit>("WEEK_BASED_YEARS"), //
		jField<::java::time::temporal::TemporalField>("WEEK_OF_WEEK_BASED_YEAR"), //
	};

	template<typename F = ::java::time::temporal::TemporalField>
	static auto DAY_OF_QUARTER() {
		static_assert(field_signatures[jField<F>("DAY_OF_QUARTER")] != -1);
		return sat<F>("DAY_OF_QUARTER");
	}

	template<typename F = ::java::time::temporal::TemporalField>
	static auto QUARTER_OF_YEAR() {
		static_assert(field_signatures[jField<F>("QUARTER_OF_YEAR")] != -1);
		return sat<F>("QUARTER_OF_YEAR");
	}

	template<typename F = ::java::time::temporal::TemporalUnit>
	static auto QUARTER_YEARS() {
		static_assert(field_signatures[jField<F>("QUARTER_YEARS")] != -1);
		return sat<F>("QUARTER_YEARS");
	}

	template<typename F = ::java::time::temporal::TemporalField>
	static auto WEEK_BASED_YEAR() {
		static_assert(field_signatures[jField<F>("WEEK_BASED_YEAR")] != -1);
		return sat<F>("WEEK_BASED_YEAR");
	}

	template<typename F = ::java::time::temporal::TemporalUnit>
	static auto WEEK_BASED_YEARS() {
		static_assert(field_signatures[jField<F>("WEEK_BASED_YEARS")] != -1);
		return sat<F>("WEEK_BASED_YEARS");
	}

	template<typename F = ::java::time::temporal::TemporalField>
	static auto WEEK_OF_WEEK_BASED_YEAR() {
		static_assert(field_signatures[jField<F>("WEEK_OF_WEEK_BASED_YEAR")] != -1);
		return sat<F>("WEEK_OF_WEEK_BASED_YEAR");
	}

	constexpr static Enume method_signatures{
		cexprstr{"\0"}, //
	};

};

#endif
