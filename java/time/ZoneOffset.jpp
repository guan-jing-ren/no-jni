#ifndef java_time_ZoneOffset_HPP
#define java_time_ZoneOffset_HPP

#include "../../jfwd_decl.hpp"

class ::java::time::ZoneOffset : public jObject<::java::time::ZoneOffset, ::java::time::ZoneId> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_time / "ZoneOffset";

	constexpr static Enume field_signatures{
		jField<::java::time::ZoneOffset>("MAX"), //
		jField<::java::time::ZoneOffset>("MIN"), //
		jField<::java::time::ZoneOffset>("UTC"), //
	};

	template<typename F = ::java::time::ZoneOffset>
	static auto MAX() {
		static_assert(field_signatures[jField<F>("MAX")] != -1);
		return sat<F>("MAX");
	}

	template<typename F = ::java::time::ZoneOffset>
	static auto MIN() {
		static_assert(field_signatures[jField<F>("MIN")] != -1);
		return sat<F>("MIN");
	}

	template<typename F = ::java::time::ZoneOffset>
	static auto UTC() {
		static_assert(field_signatures[jField<F>("UTC")] != -1);
		return sat<F>("UTC");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::time::temporal::Temporal(::java::time::temporal::Temporal)>("adjustInto"), //
		jMethod<::jint(::java::lang::Object)>("compareTo"), //
		jMethod<::jint(::java::time::ZoneOffset)>("compareTo"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::time::ZoneOffset(::java::time::temporal::TemporalAccessor)>("from"), //
		jMethod<::jint(::java::time::temporal::TemporalField)>("get"), //
		jMethod<::java::lang::String()>("getId"), //
		jMethod<::jlong(::java::time::temporal::TemporalField)>("getLong"), //
		jMethod<::java::time::zone::ZoneRules()>("getRules"), //
		jMethod<::jint()>("getTotalSeconds"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean(::java::time::temporal::TemporalField)>("isSupported"), //
		jMethod<::java::time::ZoneOffset(::java::lang::String)>("of"), //
		jMethod<::java::time::ZoneOffset(::jint)>("ofHours"), //
		jMethod<::java::time::ZoneOffset(::jint, ::jint)>("ofHoursMinutes"), //
		jMethod<::java::time::ZoneOffset(::jint, ::jint, ::jint)>("ofHoursMinutesSeconds"), //
		jMethod<::java::time::ZoneOffset(::jint)>("ofTotalSeconds"), //
		jMethod<::java::lang::Object(::java::time::temporal::TemporalQuery)>("query"), //
		jMethod<::java::time::temporal::ValueRange(::java::time::temporal::TemporalField)>("range"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::time::temporal::Temporal, typename... Args>
	auto adjustInto(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("adjustInto")] != -1);
		return call<R>("adjustInto", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto compareTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compareTo")] != -1);
		return call<R>("compareTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::ZoneOffset, typename... Args>
	static auto from(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("from")] != -1);
		return scall<R>("from", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getId")] != -1);
		return call<R>("getId", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLong")] != -1);
		return call<R>("getLong", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::zone::ZoneRules, typename... Args>
	auto getRules(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRules")] != -1);
		return call<R>("getRules", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTotalSeconds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTotalSeconds")] != -1);
		return call<R>("getTotalSeconds", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSupported")] != -1);
		return call<R>("isSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::ZoneOffset, typename... Args>
	static auto of(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("of")] != -1);
		return scall<R>("of", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::ZoneOffset, typename... Args>
	static auto ofHours(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ofHours")] != -1);
		return scall<R>("ofHours", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::ZoneOffset, typename... Args>
	static auto ofHoursMinutes(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ofHoursMinutes")] != -1);
		return scall<R>("ofHoursMinutes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::ZoneOffset, typename... Args>
	static auto ofHoursMinutesSeconds(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ofHoursMinutesSeconds")] != -1);
		return scall<R>("ofHoursMinutesSeconds", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::ZoneOffset, typename... Args>
	static auto ofTotalSeconds(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ofTotalSeconds")] != -1);
		return scall<R>("ofTotalSeconds", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto query(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("query")] != -1);
		return call<R>("query", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::ValueRange, typename... Args>
	auto range(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("range")] != -1);
		return call<R>("range", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
