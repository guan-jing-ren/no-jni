#ifndef java_time_Period_HPP
#define java_time_Period_HPP

#include "../../jfwd_decl.hpp"

class ::java::time::Period : public jObject<::java::time::Period, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_time / "Period";

	constexpr static Enume field_signatures{
		jField<::java::time::Period>("ZERO"), //
	};

	template<typename F = ::java::time::Period>
	static auto ZERO() {
		static_assert(field_signatures[jField<F>("ZERO")] != -1);
		return sat<F>("ZERO");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::time::temporal::Temporal(::java::time::temporal::Temporal)>("addTo"), //
		jMethod<::java::time::Period(::java::time::LocalDate, ::java::time::LocalDate)>("between"), //
		jMethod<::java::time::chrono::ChronoPeriod(::java::time::chrono::ChronoLocalDate, ::java::time::chrono::ChronoLocalDate)>("between"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::time::Period(::java::time::temporal::TemporalAmount)>("from"), //
		jMethod<::jlong(::java::time::temporal::TemporalUnit)>("get"), //
		jMethod<::java::time::chrono::Chronology()>("getChronology"), //
		jMethod<::java::time::chrono::IsoChronology()>("getChronology"), //
		jMethod<::jint()>("getDays"), //
		jMethod<::jint()>("getMonths"), //
		jMethod<::java::util::List()>("getUnits"), //
		jMethod<::jint()>("getYears"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isNegative"), //
		jMethod<::jboolean()>("isZero"), //
		jMethod<::java::time::Period(::java::time::temporal::TemporalAmount)>("minus"), //
		jMethod<::java::time::chrono::ChronoPeriod(::java::time::temporal::TemporalAmount)>("minus"), //
		jMethod<::java::time::Period(::jlong)>("minusDays"), //
		jMethod<::java::time::Period(::jlong)>("minusMonths"), //
		jMethod<::java::time::Period(::jlong)>("minusYears"), //
		jMethod<::java::time::Period(::jint)>("multipliedBy"), //
		jMethod<::java::time::chrono::ChronoPeriod(::jint)>("multipliedBy"), //
		jMethod<::java::time::Period()>("negated"), //
		jMethod<::java::time::chrono::ChronoPeriod()>("negated"), //
		jMethod<::java::time::Period()>("normalized"), //
		jMethod<::java::time::chrono::ChronoPeriod()>("normalized"), //
		jMethod<::java::time::Period(::jint, ::jint, ::jint)>("of"), //
		jMethod<::java::time::Period(::jint)>("ofDays"), //
		jMethod<::java::time::Period(::jint)>("ofMonths"), //
		jMethod<::java::time::Period(::jint)>("ofWeeks"), //
		jMethod<::java::time::Period(::jint)>("ofYears"), //
		jMethod<::java::time::Period(::java::lang::CharSequence)>("parse"), //
		jMethod<::java::time::Period(::java::time::temporal::TemporalAmount)>("plus"), //
		jMethod<::java::time::chrono::ChronoPeriod(::java::time::temporal::TemporalAmount)>("plus"), //
		jMethod<::java::time::Period(::jlong)>("plusDays"), //
		jMethod<::java::time::Period(::jlong)>("plusMonths"), //
		jMethod<::java::time::Period(::jlong)>("plusYears"), //
		jMethod<::java::time::temporal::Temporal(::java::time::temporal::Temporal)>("subtractFrom"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jlong()>("toTotalMonths"), //
		jMethod<::java::time::Period(::jint)>("withDays"), //
		jMethod<::java::time::Period(::jint)>("withMonths"), //
		jMethod<::java::time::Period(::jint)>("withYears"), //
	};

	template<typename R = ::java::time::temporal::Temporal, typename... Args>
	auto addTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addTo")] != -1);
		return call<R>("addTo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::Period, typename... Args>
	static auto between(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("between")] != -1);
		return scall<R>("between", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::Period, typename... Args>
	static auto from(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("from")] != -1);
		return scall<R>("from", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::chrono::Chronology, typename... Args>
	auto getChronology(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChronology")] != -1);
		return call<R>("getChronology", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDays(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDays")] != -1);
		return call<R>("getDays", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMonths(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMonths")] != -1);
		return call<R>("getMonths", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getUnits(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUnits")] != -1);
		return call<R>("getUnits", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getYears(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getYears")] != -1);
		return call<R>("getYears", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isNegative(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isNegative")] != -1);
		return call<R>("isNegative", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isZero(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isZero")] != -1);
		return call<R>("isZero", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::Period, typename... Args>
	auto minus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("minus")] != -1);
		return call<R>("minus", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::Period, typename... Args>
	auto minusDays(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("minusDays")] != -1);
		return call<R>("minusDays", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::Period, typename... Args>
	auto minusMonths(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("minusMonths")] != -1);
		return call<R>("minusMonths", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::Period, typename... Args>
	auto minusYears(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("minusYears")] != -1);
		return call<R>("minusYears", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::Period, typename... Args>
	auto multipliedBy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("multipliedBy")] != -1);
		return call<R>("multipliedBy", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::Period, typename... Args>
	auto negated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("negated")] != -1);
		return call<R>("negated", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::Period, typename... Args>
	auto normalized(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("normalized")] != -1);
		return call<R>("normalized", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::Period, typename... Args>
	static auto of(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("of")] != -1);
		return scall<R>("of", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::Period, typename... Args>
	static auto ofDays(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ofDays")] != -1);
		return scall<R>("ofDays", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::Period, typename... Args>
	static auto ofMonths(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ofMonths")] != -1);
		return scall<R>("ofMonths", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::Period, typename... Args>
	static auto ofWeeks(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ofWeeks")] != -1);
		return scall<R>("ofWeeks", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::Period, typename... Args>
	static auto ofYears(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ofYears")] != -1);
		return scall<R>("ofYears", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::Period, typename... Args>
	static auto parse(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parse")] != -1);
		return scall<R>("parse", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::Period, typename... Args>
	auto plus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("plus")] != -1);
		return call<R>("plus", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::Period, typename... Args>
	auto plusDays(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("plusDays")] != -1);
		return call<R>("plusDays", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::Period, typename... Args>
	auto plusMonths(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("plusMonths")] != -1);
		return call<R>("plusMonths", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::Period, typename... Args>
	auto plusYears(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("plusYears")] != -1);
		return call<R>("plusYears", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::temporal::Temporal, typename... Args>
	auto subtractFrom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("subtractFrom")] != -1);
		return call<R>("subtractFrom", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto toTotalMonths(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toTotalMonths")] != -1);
		return call<R>("toTotalMonths", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::Period, typename... Args>
	auto withDays(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("withDays")] != -1);
		return call<R>("withDays", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::Period, typename... Args>
	auto withMonths(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("withMonths")] != -1);
		return call<R>("withMonths", std::forward<Args>(args)...);
	}

	template<typename R = ::java::time::Period, typename... Args>
	auto withYears(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("withYears")] != -1);
		return call<R>("withYears", std::forward<Args>(args)...);
	}

};

#endif
