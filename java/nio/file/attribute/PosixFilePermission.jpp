#ifndef java_nio_file_attribute_PosixFilePermission_HPP
#define java_nio_file_attribute_PosixFilePermission_HPP

#include "../../../../jfwd_decl.hpp"

class ::java::nio::file::attribute::PosixFilePermission : public jObject<::java::nio::file::attribute::PosixFilePermission, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_nio_file_attribute / "PosixFilePermission";

	constexpr static Enume field_signatures{
		jField<::java::nio::file::attribute::PosixFilePermission>("GROUP_EXECUTE"), //
		jField<::java::nio::file::attribute::PosixFilePermission>("GROUP_READ"), //
		jField<::java::nio::file::attribute::PosixFilePermission>("GROUP_WRITE"), //
		jField<::java::nio::file::attribute::PosixFilePermission>("OTHERS_EXECUTE"), //
		jField<::java::nio::file::attribute::PosixFilePermission>("OTHERS_READ"), //
		jField<::java::nio::file::attribute::PosixFilePermission>("OTHERS_WRITE"), //
		jField<::java::nio::file::attribute::PosixFilePermission>("OWNER_EXECUTE"), //
		jField<::java::nio::file::attribute::PosixFilePermission>("OWNER_READ"), //
		jField<::java::nio::file::attribute::PosixFilePermission>("OWNER_WRITE"), //
	};

	template<typename F = ::java::nio::file::attribute::PosixFilePermission>
	static auto GROUP_EXECUTE() {
		static_assert(field_signatures[jField<F>("GROUP_EXECUTE")] != -1);
		return sat<F>("GROUP_EXECUTE");
	}

	template<typename F = ::java::nio::file::attribute::PosixFilePermission>
	static auto GROUP_READ() {
		static_assert(field_signatures[jField<F>("GROUP_READ")] != -1);
		return sat<F>("GROUP_READ");
	}

	template<typename F = ::java::nio::file::attribute::PosixFilePermission>
	static auto GROUP_WRITE() {
		static_assert(field_signatures[jField<F>("GROUP_WRITE")] != -1);
		return sat<F>("GROUP_WRITE");
	}

	template<typename F = ::java::nio::file::attribute::PosixFilePermission>
	static auto OTHERS_EXECUTE() {
		static_assert(field_signatures[jField<F>("OTHERS_EXECUTE")] != -1);
		return sat<F>("OTHERS_EXECUTE");
	}

	template<typename F = ::java::nio::file::attribute::PosixFilePermission>
	static auto OTHERS_READ() {
		static_assert(field_signatures[jField<F>("OTHERS_READ")] != -1);
		return sat<F>("OTHERS_READ");
	}

	template<typename F = ::java::nio::file::attribute::PosixFilePermission>
	static auto OTHERS_WRITE() {
		static_assert(field_signatures[jField<F>("OTHERS_WRITE")] != -1);
		return sat<F>("OTHERS_WRITE");
	}

	template<typename F = ::java::nio::file::attribute::PosixFilePermission>
	static auto OWNER_EXECUTE() {
		static_assert(field_signatures[jField<F>("OWNER_EXECUTE")] != -1);
		return sat<F>("OWNER_EXECUTE");
	}

	template<typename F = ::java::nio::file::attribute::PosixFilePermission>
	static auto OWNER_READ() {
		static_assert(field_signatures[jField<F>("OWNER_READ")] != -1);
		return sat<F>("OWNER_READ");
	}

	template<typename F = ::java::nio::file::attribute::PosixFilePermission>
	static auto OWNER_WRITE() {
		static_assert(field_signatures[jField<F>("OWNER_WRITE")] != -1);
		return sat<F>("OWNER_WRITE");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::nio::file::attribute::PosixFilePermission(::java::lang::String)>("valueOf"), //
		jMethod<::java::nio::file::attribute::PosixFilePermission *()>("values"), //
	};

	template<typename R = ::java::nio::file::attribute::PosixFilePermission, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::attribute::PosixFilePermission *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", forward<Args>(args)...);
	}

};

#endif
