#ifndef java_nio_file_attribute_AclEntry$Builder_HPP
#define java_nio_file_attribute_AclEntry$Builder_HPP

#include "../../../../jfwd_decl.hpp"

class ::java::nio::file::attribute::AclEntry$Builder : public jObject<::java::nio::file::attribute::AclEntry$Builder, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_nio_file_attribute / "AclEntry$Builder";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::nio::file::attribute::AclEntry()>("build"), //
		jMethod<::java::nio::file::attribute::AclEntry$Builder(::java::util::Set)>("setFlags"), //
		jMethod<::java::nio::file::attribute::AclEntry$Builder(::java::nio::file::attribute::AclEntryFlag *)>("setFlags"), //
		jMethod<::java::nio::file::attribute::AclEntry$Builder(::java::util::Set)>("setPermissions"), //
		jMethod<::java::nio::file::attribute::AclEntry$Builder(::java::nio::file::attribute::AclEntryPermission *)>("setPermissions"), //
		jMethod<::java::nio::file::attribute::AclEntry$Builder(::java::nio::file::attribute::UserPrincipal)>("setPrincipal"), //
		jMethod<::java::nio::file::attribute::AclEntry$Builder(::java::nio::file::attribute::AclEntryType)>("setType"), //
	};

	template<typename R = ::java::nio::file::attribute::AclEntry, typename... Args>
	auto build(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("build")] != -1);
		return call<R>("build", forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::attribute::AclEntry$Builder, typename... Args>
	auto setFlags(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFlags")] != -1);
		return call<R>("setFlags", forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::attribute::AclEntry$Builder, typename... Args>
	auto setPermissions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPermissions")] != -1);
		return call<R>("setPermissions", forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::attribute::AclEntry$Builder, typename... Args>
	auto setPrincipal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPrincipal")] != -1);
		return call<R>("setPrincipal", forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::attribute::AclEntry$Builder, typename... Args>
	auto setType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setType")] != -1);
		return call<R>("setType", forward<Args>(args)...);
	}

};

#endif
