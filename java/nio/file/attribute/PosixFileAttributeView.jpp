#ifndef java_nio_file_attribute_PosixFileAttributeView_HPP
#define java_nio_file_attribute_PosixFileAttributeView_HPP

#include "../../../../jfwd_decl.hpp"

class ::java::nio::file::attribute::PosixFileAttributeView : public jObject<::java::nio::file::attribute::PosixFileAttributeView, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_nio_file_attribute / "PosixFileAttributeView";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::nio::file::attribute::UserPrincipal()>("getOwner"), //
		jMethod<::java::lang::String()>("name"), //
		jMethod<::java::nio::file::attribute::BasicFileAttributes()>("readAttributes"), //
		jMethod<::java::nio::file::attribute::PosixFileAttributes()>("readAttributes"), //
		jMethod<::jvoid(::java::nio::file::attribute::GroupPrincipal)>("setGroup"), //
		jMethod<::jvoid(::java::nio::file::attribute::UserPrincipal)>("setOwner"), //
		jMethod<::jvoid(::java::util::Set)>("setPermissions"), //
		jMethod<::jvoid(::java::nio::file::attribute::FileTime, ::java::nio::file::attribute::FileTime, ::java::nio::file::attribute::FileTime)>("setTimes"), //
	};

	template<typename R = ::java::nio::file::attribute::UserPrincipal, typename... Args>
	auto getOwner(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getOwner")] != -1);
		return call<R>("getOwner", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto name(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("name")] != -1);
		return call<R>("name", forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::attribute::BasicFileAttributes, typename... Args>
	auto readAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("readAttributes")] != -1);
		return call<R>("readAttributes", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGroup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setGroup")] != -1);
		return call<R>("setGroup", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOwner(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setOwner")] != -1);
		return call<R>("setOwner", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPermissions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPermissions")] != -1);
		return call<R>("setPermissions", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTimes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setTimes")] != -1);
		return call<R>("setTimes", forward<Args>(args)...);
	}

};

#endif
