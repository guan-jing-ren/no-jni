#ifndef java_nio_file_attribute_AclEntryType_HPP
#define java_nio_file_attribute_AclEntryType_HPP

#include "../../../../jfwd_decl.hpp"

class ::java::nio::file::attribute::AclEntryType : public jObject<::java::nio::file::attribute::AclEntryType, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_nio_file_attribute / "AclEntryType";

	constexpr static Enume field_signatures{
		jField<::java::nio::file::attribute::AclEntryType>("ALARM"), //
		jField<::java::nio::file::attribute::AclEntryType>("ALLOW"), //
		jField<::java::nio::file::attribute::AclEntryType>("AUDIT"), //
		jField<::java::nio::file::attribute::AclEntryType>("DENY"), //
	};

	template<typename F = ::java::nio::file::attribute::AclEntryType>
	static auto ALARM() {
		static_assert(field_signatures[jField<F>("ALARM")] != -1);
		return sat<F>("ALARM");
	}

	template<typename F = ::java::nio::file::attribute::AclEntryType>
	static auto ALLOW() {
		static_assert(field_signatures[jField<F>("ALLOW")] != -1);
		return sat<F>("ALLOW");
	}

	template<typename F = ::java::nio::file::attribute::AclEntryType>
	static auto AUDIT() {
		static_assert(field_signatures[jField<F>("AUDIT")] != -1);
		return sat<F>("AUDIT");
	}

	template<typename F = ::java::nio::file::attribute::AclEntryType>
	static auto DENY() {
		static_assert(field_signatures[jField<F>("DENY")] != -1);
		return sat<F>("DENY");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::nio::file::attribute::AclEntryType(::java::lang::String)>("valueOf"), //
		jMethod<::java::nio::file::attribute::AclEntryType *()>("values"), //
	};

	template<typename R = ::java::nio::file::attribute::AclEntryType, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::attribute::AclEntryType *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", forward<Args>(args)...);
	}

};

#endif
