#ifndef java_nio_file_attribute_AclEntry_HPP
#define java_nio_file_attribute_AclEntry_HPP

#include "../../../../jfwd_decl.hpp"

class ::java::nio::file::attribute::AclEntry : public jObject<::java::nio::file::attribute::AclEntry, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_nio_file_attribute / "AclEntry";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::util::Set()>("flags"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::nio::file::attribute::AclEntry$Builder()>("newBuilder"), //
		jMethod<::java::nio::file::attribute::AclEntry$Builder(::java::nio::file::attribute::AclEntry)>("newBuilder"), //
		jMethod<::java::util::Set()>("permissions"), //
		jMethod<::java::nio::file::attribute::UserPrincipal()>("principal"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::nio::file::attribute::AclEntryType()>("type"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto flags(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("flags")] != -1);
		return call<R>("flags", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::attribute::AclEntry$Builder, typename... Args>
	static auto newBuilder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newBuilder")] != -1);
		return scall<R>("newBuilder", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto permissions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("permissions")] != -1);
		return call<R>("permissions", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::attribute::UserPrincipal, typename... Args>
	auto principal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("principal")] != -1);
		return call<R>("principal", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::attribute::AclEntryType, typename... Args>
	auto type(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("type")] != -1);
		return call<R>("type", std::forward<Args>(args)...);
	}

};

#endif
