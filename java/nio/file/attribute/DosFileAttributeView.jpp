#ifndef java_nio_file_attribute_DosFileAttributeView_HPP
#define java_nio_file_attribute_DosFileAttributeView_HPP

#include "../../../../jfwd_decl.hpp"

class ::java::nio::file::attribute::DosFileAttributeView : public jObject<::java::nio::file::attribute::DosFileAttributeView, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_nio_file_attribute / "DosFileAttributeView";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("name"), //
		jMethod<::java::nio::file::attribute::BasicFileAttributes()>("readAttributes"), //
		jMethod<::java::nio::file::attribute::DosFileAttributes()>("readAttributes"), //
		jMethod<::jvoid(::jboolean)>("setArchive"), //
		jMethod<::jvoid(::jboolean)>("setHidden"), //
		jMethod<::jvoid(::jboolean)>("setReadOnly"), //
		jMethod<::jvoid(::jboolean)>("setSystem"), //
		jMethod<::jvoid(::java::nio::file::attribute::FileTime, ::java::nio::file::attribute::FileTime, ::java::nio::file::attribute::FileTime)>("setTimes"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto name(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("name")] != -1);
		return call<R>("name", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::attribute::BasicFileAttributes, typename... Args>
	auto readAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readAttributes")] != -1);
		return call<R>("readAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setArchive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setArchive")] != -1);
		return call<R>("setArchive", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHidden(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHidden")] != -1);
		return call<R>("setHidden", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setReadOnly(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setReadOnly")] != -1);
		return call<R>("setReadOnly", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSystem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSystem")] != -1);
		return call<R>("setSystem", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTimes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTimes")] != -1);
		return call<R>("setTimes", std::forward<Args>(args)...);
	}

};

#endif
