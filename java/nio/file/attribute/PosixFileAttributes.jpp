#ifndef java_nio_file_attribute_PosixFileAttributes_HPP
#define java_nio_file_attribute_PosixFileAttributes_HPP

#include "../../../../jfwd_decl.hpp"

class ::java::nio::file::attribute::PosixFileAttributes : public jObject<::java::nio::file::attribute::PosixFileAttributes, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_nio_file_attribute / "PosixFileAttributes";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::nio::file::attribute::GroupPrincipal()>("group"), //
		jMethod<::java::nio::file::attribute::UserPrincipal()>("owner"), //
		jMethod<::java::util::Set()>("permissions"), //
	};

	template<typename R = ::java::nio::file::attribute::GroupPrincipal, typename... Args>
	auto group(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("group")] != -1);
		return call<R>("group", forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::attribute::UserPrincipal, typename... Args>
	auto owner(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("owner")] != -1);
		return call<R>("owner", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto permissions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("permissions")] != -1);
		return call<R>("permissions", forward<Args>(args)...);
	}

};

#endif
