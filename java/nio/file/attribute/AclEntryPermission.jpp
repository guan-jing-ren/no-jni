#ifndef java_nio_file_attribute_AclEntryPermission_HPP
#define java_nio_file_attribute_AclEntryPermission_HPP

#include "../../../../jfwd_decl.hpp"

class ::java::nio::file::attribute::AclEntryPermission : public jObject<::java::nio::file::attribute::AclEntryPermission, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_nio_file_attribute / "AclEntryPermission";

	constexpr static Enume field_signatures{
		jField<::java::nio::file::attribute::AclEntryPermission>("ADD_FILE"), //
		jField<::java::nio::file::attribute::AclEntryPermission>("ADD_SUBDIRECTORY"), //
		jField<::java::nio::file::attribute::AclEntryPermission>("APPEND_DATA"), //
		jField<::java::nio::file::attribute::AclEntryPermission>("DELETE"), //
		jField<::java::nio::file::attribute::AclEntryPermission>("DELETE_CHILD"), //
		jField<::java::nio::file::attribute::AclEntryPermission>("EXECUTE"), //
		jField<::java::nio::file::attribute::AclEntryPermission>("LIST_DIRECTORY"), //
		jField<::java::nio::file::attribute::AclEntryPermission>("READ_ACL"), //
		jField<::java::nio::file::attribute::AclEntryPermission>("READ_ATTRIBUTES"), //
		jField<::java::nio::file::attribute::AclEntryPermission>("READ_DATA"), //
		jField<::java::nio::file::attribute::AclEntryPermission>("READ_NAMED_ATTRS"), //
		jField<::java::nio::file::attribute::AclEntryPermission>("SYNCHRONIZE"), //
		jField<::java::nio::file::attribute::AclEntryPermission>("WRITE_ACL"), //
		jField<::java::nio::file::attribute::AclEntryPermission>("WRITE_ATTRIBUTES"), //
		jField<::java::nio::file::attribute::AclEntryPermission>("WRITE_DATA"), //
		jField<::java::nio::file::attribute::AclEntryPermission>("WRITE_NAMED_ATTRS"), //
		jField<::java::nio::file::attribute::AclEntryPermission>("WRITE_OWNER"), //
	};

	template<typename F = ::java::nio::file::attribute::AclEntryPermission>
	static auto ADD_FILE() {
		static_assert(field_signatures[jField<F>("ADD_FILE")] != -1);
		return sat<F>("ADD_FILE");
	}

	template<typename F = ::java::nio::file::attribute::AclEntryPermission>
	static auto ADD_SUBDIRECTORY() {
		static_assert(field_signatures[jField<F>("ADD_SUBDIRECTORY")] != -1);
		return sat<F>("ADD_SUBDIRECTORY");
	}

	template<typename F = ::java::nio::file::attribute::AclEntryPermission>
	static auto APPEND_DATA() {
		static_assert(field_signatures[jField<F>("APPEND_DATA")] != -1);
		return sat<F>("APPEND_DATA");
	}

	template<typename F = ::java::nio::file::attribute::AclEntryPermission>
	static auto DELETE() {
		static_assert(field_signatures[jField<F>("DELETE")] != -1);
		return sat<F>("DELETE");
	}

	template<typename F = ::java::nio::file::attribute::AclEntryPermission>
	static auto DELETE_CHILD() {
		static_assert(field_signatures[jField<F>("DELETE_CHILD")] != -1);
		return sat<F>("DELETE_CHILD");
	}

	template<typename F = ::java::nio::file::attribute::AclEntryPermission>
	static auto EXECUTE() {
		static_assert(field_signatures[jField<F>("EXECUTE")] != -1);
		return sat<F>("EXECUTE");
	}

	template<typename F = ::java::nio::file::attribute::AclEntryPermission>
	static auto LIST_DIRECTORY() {
		static_assert(field_signatures[jField<F>("LIST_DIRECTORY")] != -1);
		return sat<F>("LIST_DIRECTORY");
	}

	template<typename F = ::java::nio::file::attribute::AclEntryPermission>
	static auto READ_ACL() {
		static_assert(field_signatures[jField<F>("READ_ACL")] != -1);
		return sat<F>("READ_ACL");
	}

	template<typename F = ::java::nio::file::attribute::AclEntryPermission>
	static auto READ_ATTRIBUTES() {
		static_assert(field_signatures[jField<F>("READ_ATTRIBUTES")] != -1);
		return sat<F>("READ_ATTRIBUTES");
	}

	template<typename F = ::java::nio::file::attribute::AclEntryPermission>
	static auto READ_DATA() {
		static_assert(field_signatures[jField<F>("READ_DATA")] != -1);
		return sat<F>("READ_DATA");
	}

	template<typename F = ::java::nio::file::attribute::AclEntryPermission>
	static auto READ_NAMED_ATTRS() {
		static_assert(field_signatures[jField<F>("READ_NAMED_ATTRS")] != -1);
		return sat<F>("READ_NAMED_ATTRS");
	}

	template<typename F = ::java::nio::file::attribute::AclEntryPermission>
	static auto SYNCHRONIZE() {
		static_assert(field_signatures[jField<F>("SYNCHRONIZE")] != -1);
		return sat<F>("SYNCHRONIZE");
	}

	template<typename F = ::java::nio::file::attribute::AclEntryPermission>
	static auto WRITE_ACL() {
		static_assert(field_signatures[jField<F>("WRITE_ACL")] != -1);
		return sat<F>("WRITE_ACL");
	}

	template<typename F = ::java::nio::file::attribute::AclEntryPermission>
	static auto WRITE_ATTRIBUTES() {
		static_assert(field_signatures[jField<F>("WRITE_ATTRIBUTES")] != -1);
		return sat<F>("WRITE_ATTRIBUTES");
	}

	template<typename F = ::java::nio::file::attribute::AclEntryPermission>
	static auto WRITE_DATA() {
		static_assert(field_signatures[jField<F>("WRITE_DATA")] != -1);
		return sat<F>("WRITE_DATA");
	}

	template<typename F = ::java::nio::file::attribute::AclEntryPermission>
	static auto WRITE_NAMED_ATTRS() {
		static_assert(field_signatures[jField<F>("WRITE_NAMED_ATTRS")] != -1);
		return sat<F>("WRITE_NAMED_ATTRS");
	}

	template<typename F = ::java::nio::file::attribute::AclEntryPermission>
	static auto WRITE_OWNER() {
		static_assert(field_signatures[jField<F>("WRITE_OWNER")] != -1);
		return sat<F>("WRITE_OWNER");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::nio::file::attribute::AclEntryPermission(::java::lang::String)>("valueOf"), //
		jMethod<::java::nio::file::attribute::AclEntryPermission *()>("values"), //
	};

	template<typename R = ::java::nio::file::attribute::AclEntryPermission, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::attribute::AclEntryPermission *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", forward<Args>(args)...);
	}

};

#endif
