#ifndef java_nio_file_StandardWatchEventKinds_HPP
#define java_nio_file_StandardWatchEventKinds_HPP

#include "../../../jfwd_decl.hpp"

class ::java::nio::file::StandardWatchEventKinds : public jObject<::java::nio::file::StandardWatchEventKinds, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_nio_file / "StandardWatchEventKinds";

	constexpr static Enume field_signatures{
		jField<::java::nio::file::WatchEvent$Kind>("ENTRY_CREATE"), //
		jField<::java::nio::file::WatchEvent$Kind>("ENTRY_DELETE"), //
		jField<::java::nio::file::WatchEvent$Kind>("ENTRY_MODIFY"), //
		jField<::java::nio::file::WatchEvent$Kind>("OVERFLOW"), //
	};

	template<typename F = ::java::nio::file::WatchEvent$Kind>
	static auto ENTRY_CREATE() {
		static_assert(field_signatures[jField<F>("ENTRY_CREATE")] != -1);
		return sat<F>("ENTRY_CREATE");
	}

	template<typename F = ::java::nio::file::WatchEvent$Kind>
	static auto ENTRY_DELETE() {
		static_assert(field_signatures[jField<F>("ENTRY_DELETE")] != -1);
		return sat<F>("ENTRY_DELETE");
	}

	template<typename F = ::java::nio::file::WatchEvent$Kind>
	static auto ENTRY_MODIFY() {
		static_assert(field_signatures[jField<F>("ENTRY_MODIFY")] != -1);
		return sat<F>("ENTRY_MODIFY");
	}

	template<typename F = ::java::nio::file::WatchEvent$Kind>
	static auto OVERFLOW_() {
		static_assert(field_signatures[jField<F>("OVERFLOW")] != -1);
		return sat<F>("OVERFLOW");
	}

	constexpr static Enume method_signatures{
		cexprstr{"\0"}, //
	};

};

#endif
