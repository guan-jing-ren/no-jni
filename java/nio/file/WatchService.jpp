#ifndef java_nio_file_WatchService_HPP
#define java_nio_file_WatchService_HPP

#include "../../../jfwd_decl.hpp"

class ::java::nio::file::WatchService : public jObject<::java::nio::file::WatchService, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_nio_file / "WatchService";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("close"), //
		jMethod<::java::nio::file::WatchKey()>("poll"), //
		jMethod<::java::nio::file::WatchKey(::jlong, ::java::util::concurrent::TimeUnit)>("poll"), //
		jMethod<::java::nio::file::WatchKey()>("take"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::WatchKey, typename... Args>
	auto poll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("poll")] != -1);
		return call<R>("poll", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::WatchKey, typename... Args>
	auto take(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("take")] != -1);
		return call<R>("take", std::forward<Args>(args)...);
	}

};

#endif
