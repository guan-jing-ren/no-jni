#ifndef java_nio_file_Path_HPP
#define java_nio_file_Path_HPP

#include "../../../jfwd_decl.hpp"

class ::java::nio::file::Path : public jObject<::java::nio::file::Path, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_nio_file / "Path";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint(::java::lang::Object)>("compareTo"), //
		jMethod<::jint(::java::nio::file::Path)>("compareTo"), //
		jMethod<::jboolean(::java::lang::String)>("endsWith"), //
		jMethod<::jboolean(::java::nio::file::Path)>("endsWith"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::nio::file::Path()>("getFileName"), //
		jMethod<::java::nio::file::FileSystem()>("getFileSystem"), //
		jMethod<::java::nio::file::Path(::jint)>("getName"), //
		jMethod<::jint()>("getNameCount"), //
		jMethod<::java::nio::file::Path()>("getParent"), //
		jMethod<::java::nio::file::Path()>("getRoot"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isAbsolute"), //
		jMethod<::java::util::Iterator()>("iterator"), //
		jMethod<::java::nio::file::Path()>("normalize"), //
		jMethod<::java::nio::file::WatchKey(::java::nio::file::WatchService, ::java::nio::file::WatchEvent$Kind *)>("register"), //
		jMethod<::java::nio::file::WatchKey(::java::nio::file::WatchService, ::java::nio::file::WatchEvent$Kind *, ::java::nio::file::WatchEvent$Modifier *)>("register"), //
		jMethod<::java::nio::file::Path(::java::nio::file::Path)>("relativize"), //
		jMethod<::java::nio::file::Path(::java::lang::String)>("resolve"), //
		jMethod<::java::nio::file::Path(::java::nio::file::Path)>("resolve"), //
		jMethod<::java::nio::file::Path(::java::lang::String)>("resolveSibling"), //
		jMethod<::java::nio::file::Path(::java::nio::file::Path)>("resolveSibling"), //
		jMethod<::jboolean(::java::lang::String)>("startsWith"), //
		jMethod<::jboolean(::java::nio::file::Path)>("startsWith"), //
		jMethod<::java::nio::file::Path(::jint, ::jint)>("subpath"), //
		jMethod<::java::nio::file::Path()>("toAbsolutePath"), //
		jMethod<::java::io::File()>("toFile"), //
		jMethod<::java::nio::file::Path(::java::nio::file::LinkOption *)>("toRealPath"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::net::URI()>("toUri"), //
	};

	template<typename R = ::jint, typename... Args>
	auto compareTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compareTo")] != -1);
		return call<R>("compareTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto endsWith(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("endsWith")] != -1);
		return call<R>("endsWith", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::Path, typename... Args>
	auto getFileName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFileName")] != -1);
		return call<R>("getFileName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::FileSystem, typename... Args>
	auto getFileSystem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFileSystem")] != -1);
		return call<R>("getFileSystem", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::Path, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNameCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNameCount")] != -1);
		return call<R>("getNameCount", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::Path, typename... Args>
	auto getParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParent")] != -1);
		return call<R>("getParent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::Path, typename... Args>
	auto getRoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRoot")] != -1);
		return call<R>("getRoot", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAbsolute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAbsolute")] != -1);
		return call<R>("isAbsolute", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto iterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("iterator")] != -1);
		return call<R>("iterator", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::Path, typename... Args>
	auto normalize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("normalize")] != -1);
		return call<R>("normalize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::WatchKey, typename... Args>
	auto register_(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("register")] != -1);
		return call<R>("register", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::Path, typename... Args>
	auto relativize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("relativize")] != -1);
		return call<R>("relativize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::Path, typename... Args>
	auto resolve(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("resolve")] != -1);
		return call<R>("resolve", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::Path, typename... Args>
	auto resolveSibling(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("resolveSibling")] != -1);
		return call<R>("resolveSibling", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto startsWith(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("startsWith")] != -1);
		return call<R>("startsWith", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::Path, typename... Args>
	auto subpath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("subpath")] != -1);
		return call<R>("subpath", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::Path, typename... Args>
	auto toAbsolutePath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toAbsolutePath")] != -1);
		return call<R>("toAbsolutePath", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::File, typename... Args>
	auto toFile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toFile")] != -1);
		return call<R>("toFile", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::Path, typename... Args>
	auto toRealPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toRealPath")] != -1);
		return call<R>("toRealPath", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::URI, typename... Args>
	auto toUri(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toUri")] != -1);
		return call<R>("toUri", std::forward<Args>(args)...);
	}

};

#endif
