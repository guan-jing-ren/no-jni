#ifndef java_nio_file_JPP
#define java_nio_file_JPP

namespace java::nio::file { class AccessDeniedException; }
template<> constexpr auto signature<::java::nio::file::AccessDeniedException> = ::java_nio_file / "AccessDeniedException";
namespace java::nio::file { class AccessMode; }
template<> constexpr auto signature<::java::nio::file::AccessMode> = ::java_nio_file / "AccessMode";
namespace java::nio::file { class AtomicMoveNotSupportedException; }
template<> constexpr auto signature<::java::nio::file::AtomicMoveNotSupportedException> = ::java_nio_file / "AtomicMoveNotSupportedException";
namespace java::nio::file { class ClosedDirectoryStreamException; }
template<> constexpr auto signature<::java::nio::file::ClosedDirectoryStreamException> = ::java_nio_file / "ClosedDirectoryStreamException";
namespace java::nio::file { class ClosedFileSystemException; }
template<> constexpr auto signature<::java::nio::file::ClosedFileSystemException> = ::java_nio_file / "ClosedFileSystemException";
namespace java::nio::file { class ClosedWatchServiceException; }
template<> constexpr auto signature<::java::nio::file::ClosedWatchServiceException> = ::java_nio_file / "ClosedWatchServiceException";
namespace java::nio::file { class CopyMoveHelper; }
template<> constexpr auto signature<::java::nio::file::CopyMoveHelper> = ::java_nio_file / "CopyMoveHelper";
namespace java::nio::file { class CopyMoveHelper$CopyOptions; }
template<> constexpr auto signature<::java::nio::file::CopyMoveHelper$CopyOptions> = ::java_nio_file / "CopyMoveHelper$CopyOptions";
namespace java::nio::file { class CopyOption; }
template<> constexpr auto signature<::java::nio::file::CopyOption> = ::java_nio_file / "CopyOption";
namespace java::nio::file { class DirectoryIteratorException; }
template<> constexpr auto signature<::java::nio::file::DirectoryIteratorException> = ::java_nio_file / "DirectoryIteratorException";
namespace java::nio::file { class DirectoryNotEmptyException; }
template<> constexpr auto signature<::java::nio::file::DirectoryNotEmptyException> = ::java_nio_file / "DirectoryNotEmptyException";
namespace java::nio::file { class DirectoryStream; }
template<> constexpr auto signature<::java::nio::file::DirectoryStream> = ::java_nio_file / "DirectoryStream";
namespace java::nio::file { class DirectoryStream$Filter; }
template<> constexpr auto signature<::java::nio::file::DirectoryStream$Filter> = ::java_nio_file / "DirectoryStream$Filter";
namespace java::nio::file { class FileAlreadyExistsException; }
template<> constexpr auto signature<::java::nio::file::FileAlreadyExistsException> = ::java_nio_file / "FileAlreadyExistsException";
namespace java::nio::file { class FileStore; }
template<> constexpr auto signature<::java::nio::file::FileStore> = ::java_nio_file / "FileStore";
namespace java::nio::file { class FileSystem; }
template<> constexpr auto signature<::java::nio::file::FileSystem> = ::java_nio_file / "FileSystem";
namespace java::nio::file { class FileSystemAlreadyExistsException; }
template<> constexpr auto signature<::java::nio::file::FileSystemAlreadyExistsException> = ::java_nio_file / "FileSystemAlreadyExistsException";
namespace java::nio::file { class FileSystemException; }
template<> constexpr auto signature<::java::nio::file::FileSystemException> = ::java_nio_file / "FileSystemException";
namespace java::nio::file { class FileSystemLoopException; }
template<> constexpr auto signature<::java::nio::file::FileSystemLoopException> = ::java_nio_file / "FileSystemLoopException";
namespace java::nio::file { class FileSystemNotFoundException; }
template<> constexpr auto signature<::java::nio::file::FileSystemNotFoundException> = ::java_nio_file / "FileSystemNotFoundException";
namespace java::nio::file { class FileSystems; }
template<> constexpr auto signature<::java::nio::file::FileSystems> = ::java_nio_file / "FileSystems";
namespace java::nio::file { class FileSystems$DefaultFileSystemHolder; }
template<> constexpr auto signature<::java::nio::file::FileSystems$DefaultFileSystemHolder> = ::java_nio_file / "FileSystems$DefaultFileSystemHolder";
namespace java::nio::file { class FileSystems$DefaultFileSystemHolder$1; }
template<> constexpr auto signature<::java::nio::file::FileSystems$DefaultFileSystemHolder$1> = ::java_nio_file / "FileSystems$DefaultFileSystemHolder$1";
namespace java::nio::file { class FileTreeIterator; }
template<> constexpr auto signature<::java::nio::file::FileTreeIterator> = ::java_nio_file / "FileTreeIterator";
namespace java::nio::file { class FileTreeWalker; }
template<> constexpr auto signature<::java::nio::file::FileTreeWalker> = ::java_nio_file / "FileTreeWalker";
namespace java::nio::file { class FileTreeWalker$1; }
template<> constexpr auto signature<::java::nio::file::FileTreeWalker$1> = ::java_nio_file / "FileTreeWalker$1";
namespace java::nio::file { class FileTreeWalker$DirectoryNode; }
template<> constexpr auto signature<::java::nio::file::FileTreeWalker$DirectoryNode> = ::java_nio_file / "FileTreeWalker$DirectoryNode";
namespace java::nio::file { class FileTreeWalker$Event; }
template<> constexpr auto signature<::java::nio::file::FileTreeWalker$Event> = ::java_nio_file / "FileTreeWalker$Event";
namespace java::nio::file { class FileTreeWalker$EventType; }
template<> constexpr auto signature<::java::nio::file::FileTreeWalker$EventType> = ::java_nio_file / "FileTreeWalker$EventType";
namespace java::nio::file { class FileVisitOption; }
template<> constexpr auto signature<::java::nio::file::FileVisitOption> = ::java_nio_file / "FileVisitOption";
namespace java::nio::file { class FileVisitResult; }
template<> constexpr auto signature<::java::nio::file::FileVisitResult> = ::java_nio_file / "FileVisitResult";
namespace java::nio::file { class FileVisitor; }
template<> constexpr auto signature<::java::nio::file::FileVisitor> = ::java_nio_file / "FileVisitor";
namespace java::nio::file { class Files; }
template<> constexpr auto signature<::java::nio::file::Files> = ::java_nio_file / "Files";
namespace java::nio::file { class Files$1; }
template<> constexpr auto signature<::java::nio::file::Files$1> = ::java_nio_file / "Files$1";
namespace java::nio::file { class Files$2; }
template<> constexpr auto signature<::java::nio::file::Files$2> = ::java_nio_file / "Files$2";
namespace java::nio::file { class Files$3; }
template<> constexpr auto signature<::java::nio::file::Files$3> = ::java_nio_file / "Files$3";
namespace java::nio::file { class Files$AcceptAllFilter; }
template<> constexpr auto signature<::java::nio::file::Files$AcceptAllFilter> = ::java_nio_file / "Files$AcceptAllFilter";
namespace java::nio::file { class Files$FileTypeDetectors; }
template<> constexpr auto signature<::java::nio::file::Files$FileTypeDetectors> = ::java_nio_file / "Files$FileTypeDetectors";
namespace java::nio::file { class Files$FileTypeDetectors$1; }
template<> constexpr auto signature<::java::nio::file::Files$FileTypeDetectors$1> = ::java_nio_file / "Files$FileTypeDetectors$1";
namespace java::nio::file { class Files$FileTypeDetectors$2; }
template<> constexpr auto signature<::java::nio::file::Files$FileTypeDetectors$2> = ::java_nio_file / "Files$FileTypeDetectors$2";
namespace java::nio::file { class InvalidPathException; }
template<> constexpr auto signature<::java::nio::file::InvalidPathException> = ::java_nio_file / "InvalidPathException";
namespace java::nio::file { class LinkOption; }
template<> constexpr auto signature<::java::nio::file::LinkOption> = ::java_nio_file / "LinkOption";
namespace java::nio::file { class LinkPermission; }
template<> constexpr auto signature<::java::nio::file::LinkPermission> = ::java_nio_file / "LinkPermission";
namespace java::nio::file { class NoSuchFileException; }
template<> constexpr auto signature<::java::nio::file::NoSuchFileException> = ::java_nio_file / "NoSuchFileException";
namespace java::nio::file { class NotDirectoryException; }
template<> constexpr auto signature<::java::nio::file::NotDirectoryException> = ::java_nio_file / "NotDirectoryException";
namespace java::nio::file { class NotLinkException; }
template<> constexpr auto signature<::java::nio::file::NotLinkException> = ::java_nio_file / "NotLinkException";
namespace java::nio::file { class OpenOption; }
template<> constexpr auto signature<::java::nio::file::OpenOption> = ::java_nio_file / "OpenOption";
namespace java::nio::file { class Path; }
template<> constexpr auto signature<::java::nio::file::Path> = ::java_nio_file / "Path";
namespace java::nio::file { class PathMatcher; }
template<> constexpr auto signature<::java::nio::file::PathMatcher> = ::java_nio_file / "PathMatcher";
namespace java::nio::file { class Paths; }
template<> constexpr auto signature<::java::nio::file::Paths> = ::java_nio_file / "Paths";
namespace java::nio::file { class ProviderMismatchException; }
template<> constexpr auto signature<::java::nio::file::ProviderMismatchException> = ::java_nio_file / "ProviderMismatchException";
namespace java::nio::file { class ProviderNotFoundException; }
template<> constexpr auto signature<::java::nio::file::ProviderNotFoundException> = ::java_nio_file / "ProviderNotFoundException";
namespace java::nio::file { class ReadOnlyFileSystemException; }
template<> constexpr auto signature<::java::nio::file::ReadOnlyFileSystemException> = ::java_nio_file / "ReadOnlyFileSystemException";
namespace java::nio::file { class SecureDirectoryStream; }
template<> constexpr auto signature<::java::nio::file::SecureDirectoryStream> = ::java_nio_file / "SecureDirectoryStream";
namespace java::nio::file { class SimpleFileVisitor; }
template<> constexpr auto signature<::java::nio::file::SimpleFileVisitor> = ::java_nio_file / "SimpleFileVisitor";
namespace java::nio::file { class StandardCopyOption; }
template<> constexpr auto signature<::java::nio::file::StandardCopyOption> = ::java_nio_file / "StandardCopyOption";
namespace java::nio::file { class StandardOpenOption; }
template<> constexpr auto signature<::java::nio::file::StandardOpenOption> = ::java_nio_file / "StandardOpenOption";
namespace java::nio::file { class StandardWatchEventKinds; }
template<> constexpr auto signature<::java::nio::file::StandardWatchEventKinds> = ::java_nio_file / "StandardWatchEventKinds";
namespace java::nio::file { class StandardWatchEventKinds$StdWatchEventKind; }
template<> constexpr auto signature<::java::nio::file::StandardWatchEventKinds$StdWatchEventKind> = ::java_nio_file / "StandardWatchEventKinds$StdWatchEventKind";
namespace java::nio::file { class TempFileHelper; }
template<> constexpr auto signature<::java::nio::file::TempFileHelper> = ::java_nio_file / "TempFileHelper";
namespace java::nio::file { class TempFileHelper$PosixPermissions; }
template<> constexpr auto signature<::java::nio::file::TempFileHelper$PosixPermissions> = ::java_nio_file / "TempFileHelper$PosixPermissions";
namespace java::nio::file { class WatchEvent; }
template<> constexpr auto signature<::java::nio::file::WatchEvent> = ::java_nio_file / "WatchEvent";
namespace java::nio::file { class WatchEvent$Kind; }
template<> constexpr auto signature<::java::nio::file::WatchEvent$Kind> = ::java_nio_file / "WatchEvent$Kind";
namespace java::nio::file { class WatchEvent$Modifier; }
template<> constexpr auto signature<::java::nio::file::WatchEvent$Modifier> = ::java_nio_file / "WatchEvent$Modifier";
namespace java::nio::file { class WatchKey; }
template<> constexpr auto signature<::java::nio::file::WatchKey> = ::java_nio_file / "WatchKey";
namespace java::nio::file { class WatchService; }
template<> constexpr auto signature<::java::nio::file::WatchService> = ::java_nio_file / "WatchService";
namespace java::nio::file { class Watchable; }
template<> constexpr auto signature<::java::nio::file::Watchable> = ::java_nio_file / "Watchable";

#endif
