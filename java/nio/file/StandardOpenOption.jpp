#ifndef java_nio_file_StandardOpenOption_HPP
#define java_nio_file_StandardOpenOption_HPP

#include "../../../jfwd_decl.hpp"

class ::java::nio::file::StandardOpenOption : public jObject<::java::nio::file::StandardOpenOption, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_nio_file / "StandardOpenOption";

	constexpr static Enume field_signatures{
		jField<::java::nio::file::StandardOpenOption>("APPEND"), //
		jField<::java::nio::file::StandardOpenOption>("CREATE"), //
		jField<::java::nio::file::StandardOpenOption>("CREATE_NEW"), //
		jField<::java::nio::file::StandardOpenOption>("DELETE_ON_CLOSE"), //
		jField<::java::nio::file::StandardOpenOption>("DSYNC"), //
		jField<::java::nio::file::StandardOpenOption>("READ"), //
		jField<::java::nio::file::StandardOpenOption>("SPARSE"), //
		jField<::java::nio::file::StandardOpenOption>("SYNC"), //
		jField<::java::nio::file::StandardOpenOption>("TRUNCATE_EXISTING"), //
		jField<::java::nio::file::StandardOpenOption>("WRITE"), //
	};

	template<typename F = ::java::nio::file::StandardOpenOption>
	static auto APPEND() {
		static_assert(field_signatures[jField<F>("APPEND")] != -1);
		return sat<F>("APPEND");
	}

	template<typename F = ::java::nio::file::StandardOpenOption>
	static auto CREATE() {
		static_assert(field_signatures[jField<F>("CREATE")] != -1);
		return sat<F>("CREATE");
	}

	template<typename F = ::java::nio::file::StandardOpenOption>
	static auto CREATE_NEW() {
		static_assert(field_signatures[jField<F>("CREATE_NEW")] != -1);
		return sat<F>("CREATE_NEW");
	}

	template<typename F = ::java::nio::file::StandardOpenOption>
	static auto DELETE_ON_CLOSE() {
		static_assert(field_signatures[jField<F>("DELETE_ON_CLOSE")] != -1);
		return sat<F>("DELETE_ON_CLOSE");
	}

	template<typename F = ::java::nio::file::StandardOpenOption>
	static auto DSYNC() {
		static_assert(field_signatures[jField<F>("DSYNC")] != -1);
		return sat<F>("DSYNC");
	}

	template<typename F = ::java::nio::file::StandardOpenOption>
	static auto READ() {
		static_assert(field_signatures[jField<F>("READ")] != -1);
		return sat<F>("READ");
	}

	template<typename F = ::java::nio::file::StandardOpenOption>
	static auto SPARSE() {
		static_assert(field_signatures[jField<F>("SPARSE")] != -1);
		return sat<F>("SPARSE");
	}

	template<typename F = ::java::nio::file::StandardOpenOption>
	static auto SYNC() {
		static_assert(field_signatures[jField<F>("SYNC")] != -1);
		return sat<F>("SYNC");
	}

	template<typename F = ::java::nio::file::StandardOpenOption>
	static auto TRUNCATE_EXISTING() {
		static_assert(field_signatures[jField<F>("TRUNCATE_EXISTING")] != -1);
		return sat<F>("TRUNCATE_EXISTING");
	}

	template<typename F = ::java::nio::file::StandardOpenOption>
	static auto WRITE() {
		static_assert(field_signatures[jField<F>("WRITE")] != -1);
		return sat<F>("WRITE");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::nio::file::StandardOpenOption(::java::lang::String)>("valueOf"), //
		jMethod<::java::nio::file::StandardOpenOption *()>("values"), //
	};

	template<typename R = ::java::nio::file::StandardOpenOption, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::StandardOpenOption *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
