#ifndef java_nio_file_FileSystem_HPP
#define java_nio_file_FileSystem_HPP

#include "../../../jfwd_decl.hpp"

class ::java::nio::file::FileSystem : public jObject<::java::nio::file::FileSystem, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_nio_file / "FileSystem";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("close"), //
		jMethod<::java::lang::Iterable()>("getFileStores"), //
		jMethod<::java::nio::file::Path(::java::lang::String, ::java::lang::String *)>("getPath"), //
		jMethod<::java::nio::file::PathMatcher(::java::lang::String)>("getPathMatcher"), //
		jMethod<::java::lang::Iterable()>("getRootDirectories"), //
		jMethod<::java::lang::String()>("getSeparator"), //
		jMethod<::java::nio::file::attribute::UserPrincipalLookupService()>("getUserPrincipalLookupService"), //
		jMethod<::jboolean()>("isOpen"), //
		jMethod<::jboolean()>("isReadOnly"), //
		jMethod<::java::nio::file::WatchService()>("newWatchService"), //
		jMethod<::java::nio::file::spi::FileSystemProvider()>("provider"), //
		jMethod<::java::util::Set()>("supportedFileAttributeViews"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Iterable, typename... Args>
	auto getFileStores(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFileStores")] != -1);
		return call<R>("getFileStores", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::Path, typename... Args>
	auto getPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPath")] != -1);
		return call<R>("getPath", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::PathMatcher, typename... Args>
	auto getPathMatcher(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPathMatcher")] != -1);
		return call<R>("getPathMatcher", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Iterable, typename... Args>
	auto getRootDirectories(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRootDirectories")] != -1);
		return call<R>("getRootDirectories", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSeparator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSeparator")] != -1);
		return call<R>("getSeparator", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::attribute::UserPrincipalLookupService, typename... Args>
	auto getUserPrincipalLookupService(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUserPrincipalLookupService")] != -1);
		return call<R>("getUserPrincipalLookupService", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isOpen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isOpen")] != -1);
		return call<R>("isOpen", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isReadOnly(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isReadOnly")] != -1);
		return call<R>("isReadOnly", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::WatchService, typename... Args>
	auto newWatchService(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newWatchService")] != -1);
		return call<R>("newWatchService", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::spi::FileSystemProvider, typename... Args>
	auto provider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("provider")] != -1);
		return call<R>("provider", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto supportedFileAttributeViews(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("supportedFileAttributeViews")] != -1);
		return call<R>("supportedFileAttributeViews", std::forward<Args>(args)...);
	}

};

#endif
