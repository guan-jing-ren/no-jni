#ifndef java_nio_file_SecureDirectoryStream_HPP
#define java_nio_file_SecureDirectoryStream_HPP

#include "../../../jfwd_decl.hpp"

class ::java::nio::file::SecureDirectoryStream : public jObject<::java::nio::file::SecureDirectoryStream, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_nio_file / "SecureDirectoryStream";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("close"), //
		jMethod<::jvoid(::java::lang::Object)>("deleteDirectory"), //
		jMethod<::jvoid(::java::lang::Object)>("deleteFile"), //
		jMethod<::java::nio::file::attribute::FileAttributeView(::java::lang::Class)>("getFileAttributeView"), //
		jMethod<::java::nio::file::attribute::FileAttributeView(::java::lang::Object, ::java::lang::Class, ::java::nio::file::LinkOption *)>("getFileAttributeView"), //
		jMethod<::java::util::Iterator()>("iterator"), //
		jMethod<::jvoid(::java::lang::Object, ::java::nio::file::SecureDirectoryStream, ::java::lang::Object)>("move"), //
		jMethod<::java::nio::channels::SeekableByteChannel(::java::lang::Object, ::java::util::Set, ::java::nio::file::attribute::FileAttribute *)>("newByteChannel"), //
		jMethod<::java::nio::file::SecureDirectoryStream(::java::lang::Object, ::java::nio::file::LinkOption *)>("newDirectoryStream"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("close")] != -1);
		return call<R>("close", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deleteDirectory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("deleteDirectory")] != -1);
		return call<R>("deleteDirectory", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deleteFile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("deleteFile")] != -1);
		return call<R>("deleteFile", forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::attribute::FileAttributeView, typename... Args>
	auto getFileAttributeView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFileAttributeView")] != -1);
		return call<R>("getFileAttributeView", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto iterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("iterator")] != -1);
		return call<R>("iterator", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto move(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("move")] != -1);
		return call<R>("move", forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::SeekableByteChannel, typename... Args>
	auto newByteChannel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("newByteChannel")] != -1);
		return call<R>("newByteChannel", forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::SecureDirectoryStream, typename... Args>
	auto newDirectoryStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("newDirectoryStream")] != -1);
		return call<R>("newDirectoryStream", forward<Args>(args)...);
	}

};

#endif
