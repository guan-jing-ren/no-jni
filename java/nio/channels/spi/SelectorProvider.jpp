#ifndef java_nio_channels_spi_SelectorProvider_HPP
#define java_nio_channels_spi_SelectorProvider_HPP

#include "../../../../jfwd_decl.hpp"

class ::java::nio::channels::spi::SelectorProvider : public jObject<::java::nio::channels::spi::SelectorProvider, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_nio_channels_spi / "SelectorProvider";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::nio::channels::Channel()>("inheritedChannel"), //
		jMethod<::java::nio::channels::DatagramChannel()>("openDatagramChannel"), //
		jMethod<::java::nio::channels::DatagramChannel(::java::net::ProtocolFamily)>("openDatagramChannel"), //
		jMethod<::java::nio::channels::Pipe()>("openPipe"), //
		jMethod<::java::nio::channels::spi::AbstractSelector()>("openSelector"), //
		jMethod<::java::nio::channels::ServerSocketChannel()>("openServerSocketChannel"), //
		jMethod<::java::nio::channels::SocketChannel()>("openSocketChannel"), //
		jMethod<::java::nio::channels::spi::SelectorProvider()>("provider"), //
	};

	template<typename R = ::java::nio::channels::Channel, typename... Args>
	auto inheritedChannel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("inheritedChannel")] != -1);
		return call<R>("inheritedChannel", forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::DatagramChannel, typename... Args>
	auto openDatagramChannel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("openDatagramChannel")] != -1);
		return call<R>("openDatagramChannel", forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::Pipe, typename... Args>
	auto openPipe(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("openPipe")] != -1);
		return call<R>("openPipe", forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::spi::AbstractSelector, typename... Args>
	auto openSelector(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("openSelector")] != -1);
		return call<R>("openSelector", forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::ServerSocketChannel, typename... Args>
	auto openServerSocketChannel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("openServerSocketChannel")] != -1);
		return call<R>("openServerSocketChannel", forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::SocketChannel, typename... Args>
	auto openSocketChannel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("openSocketChannel")] != -1);
		return call<R>("openSocketChannel", forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::spi::SelectorProvider, typename... Args>
	static auto provider(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("provider")] != -1);
		return scall<R>("provider", forward<Args>(args)...);
	}

};

#endif
