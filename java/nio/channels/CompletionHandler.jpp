#ifndef java_nio_channels_CompletionHandler_HPP
#define java_nio_channels_CompletionHandler_HPP

#include "../../../jfwd_decl.hpp"

class ::java::nio::channels::CompletionHandler : public jObject<::java::nio::channels::CompletionHandler, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_nio_channels / "CompletionHandler";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::lang::Object, ::java::lang::Object)>("completed"), //
		jMethod<::jvoid(::java::lang::Throwable, ::java::lang::Object)>("failed"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto completed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("completed")] != -1);
		return call<R>("completed", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto failed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("failed")] != -1);
		return call<R>("failed", std::forward<Args>(args)...);
	}

};

#endif
