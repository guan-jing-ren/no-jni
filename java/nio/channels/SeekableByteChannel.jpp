#ifndef java_nio_channels_SeekableByteChannel_HPP
#define java_nio_channels_SeekableByteChannel_HPP

#include "../../../jfwd_decl.hpp"

class ::java::nio::channels::SeekableByteChannel : public jObject<::java::nio::channels::SeekableByteChannel, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_nio_channels / "SeekableByteChannel";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jlong()>("position"), //
		jMethod<::java::nio::channels::SeekableByteChannel(::jlong)>("position"), //
		jMethod<::jint(::java::nio::ByteBuffer)>("read"), //
		jMethod<::jlong()>("size"), //
		jMethod<::java::nio::channels::SeekableByteChannel(::jlong)>("truncate"), //
		jMethod<::jint(::java::nio::ByteBuffer)>("write"), //
	};

	template<typename R = ::jlong, typename... Args>
	auto position(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("position")] != -1);
		return call<R>("position", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("read")] != -1);
		return call<R>("read", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto size(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("size")] != -1);
		return call<R>("size", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::SeekableByteChannel, typename... Args>
	auto truncate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("truncate")] != -1);
		return call<R>("truncate", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write")] != -1);
		return call<R>("write", std::forward<Args>(args)...);
	}

};

#endif
