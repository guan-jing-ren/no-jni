#ifndef java_nio_channels_ServerSocketChannel_HPP
#define java_nio_channels_ServerSocketChannel_HPP

#include "../../../jfwd_decl.hpp"

class ::java::nio::channels::ServerSocketChannel : public jObject<::java::nio::channels::ServerSocketChannel, ::java::nio::channels::spi::AbstractSelectableChannel> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_nio_channels / "ServerSocketChannel";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::nio::channels::SocketChannel()>("accept"), //
		jMethod<::java::nio::channels::NetworkChannel(::java::net::SocketAddress)>("bind"), //
		jMethod<::java::nio::channels::ServerSocketChannel(::java::net::SocketAddress)>("bind"), //
		jMethod<::java::nio::channels::ServerSocketChannel(::java::net::SocketAddress, ::jint)>("bind"), //
		jMethod<::java::net::SocketAddress()>("getLocalAddress"), //
		jMethod<::java::nio::channels::ServerSocketChannel()>("open"), //
		jMethod<::java::nio::channels::NetworkChannel(::java::net::SocketOption, ::java::lang::Object)>("setOption"), //
		jMethod<::java::nio::channels::ServerSocketChannel(::java::net::SocketOption, ::java::lang::Object)>("setOption"), //
		jMethod<::java::net::ServerSocket()>("socket"), //
		jMethod<::jint()>("validOps"), //
	};

	template<typename R = ::java::nio::channels::SocketChannel, typename... Args>
	auto accept(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("accept")] != -1);
		return call<R>("accept", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::NetworkChannel, typename... Args>
	auto bind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("bind")] != -1);
		return call<R>("bind", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::SocketAddress, typename... Args>
	auto getLocalAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalAddress")] != -1);
		return call<R>("getLocalAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::ServerSocketChannel, typename... Args>
	static auto open(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("open")] != -1);
		return scall<R>("open", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::NetworkChannel, typename... Args>
	auto setOption(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOption")] != -1);
		return call<R>("setOption", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::ServerSocket, typename... Args>
	auto socket(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("socket")] != -1);
		return call<R>("socket", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto validOps(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("validOps")] != -1);
		return call<R>("validOps", std::forward<Args>(args)...);
	}

};

#endif
