#ifndef java_nio_channels_Pipe$SourceChannel_HPP
#define java_nio_channels_Pipe$SourceChannel_HPP

#include "../../../jfwd_decl.hpp"

class ::java::nio::channels::Pipe$SourceChannel : public jObject<::java::nio::channels::Pipe$SourceChannel, ::java::nio::channels::spi::AbstractSelectableChannel> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_nio_channels / "Pipe$SourceChannel";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint(::java::nio::ByteBuffer)>("read"), //
		jMethod<::jlong(::java::nio::ByteBuffer *)>("read"), //
		jMethod<::jlong(::java::nio::ByteBuffer *, ::jint, ::jint)>("read"), //
		jMethod<::jint()>("validOps"), //
	};

	template<typename R = ::jint, typename... Args>
	auto read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("read")] != -1);
		return call<R>("read", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto validOps(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("validOps")] != -1);
		return call<R>("validOps", std::forward<Args>(args)...);
	}

};

#endif
