#ifndef java_nio_channels_MulticastChannel_HPP
#define java_nio_channels_MulticastChannel_HPP

#include "../../../jfwd_decl.hpp"

class ::java::nio::channels::MulticastChannel : public jObject<::java::nio::channels::MulticastChannel, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_nio_channels / "MulticastChannel";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::nio::channels::NetworkChannel(::java::net::SocketAddress)>("bind"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::java::net::SocketAddress()>("getLocalAddress"), //
		jMethod<::java::lang::Object(::java::net::SocketOption)>("getOption"), //
		jMethod<::java::nio::channels::MembershipKey(::java::net::InetAddress, ::java::net::NetworkInterface)>("join"), //
		jMethod<::java::nio::channels::MembershipKey(::java::net::InetAddress, ::java::net::NetworkInterface, ::java::net::InetAddress)>("join"), //
		jMethod<::java::nio::channels::NetworkChannel(::java::net::SocketOption, ::java::lang::Object)>("setOption"), //
		jMethod<::java::util::Set()>("supportedOptions"), //
	};

	template<typename R = ::java::nio::channels::NetworkChannel, typename... Args>
	auto bind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("bind")] != -1);
		return call<R>("bind", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::SocketAddress, typename... Args>
	auto getLocalAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalAddress")] != -1);
		return call<R>("getLocalAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getOption(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOption")] != -1);
		return call<R>("getOption", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::MembershipKey, typename... Args>
	auto join(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("join")] != -1);
		return call<R>("join", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::NetworkChannel, typename... Args>
	auto setOption(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOption")] != -1);
		return call<R>("setOption", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto supportedOptions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("supportedOptions")] != -1);
		return call<R>("supportedOptions", std::forward<Args>(args)...);
	}

};

#endif
