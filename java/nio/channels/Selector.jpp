#ifndef java_nio_channels_Selector_HPP
#define java_nio_channels_Selector_HPP

#include "../../../jfwd_decl.hpp"

class ::java::nio::channels::Selector : public jObject<::java::nio::channels::Selector, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_nio_channels / "Selector";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("close"), //
		jMethod<::jboolean()>("isOpen"), //
		jMethod<::java::util::Set()>("keys"), //
		jMethod<::java::nio::channels::Selector()>("open"), //
		jMethod<::java::nio::channels::spi::SelectorProvider()>("provider"), //
		jMethod<::jint()>("select"), //
		jMethod<::jint(::jlong)>("select"), //
		jMethod<::jint()>("selectNow"), //
		jMethod<::java::util::Set()>("selectedKeys"), //
		jMethod<::java::nio::channels::Selector()>("wakeup"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("close")] != -1);
		return call<R>("close", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isOpen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isOpen")] != -1);
		return call<R>("isOpen", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto keys(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("keys")] != -1);
		return call<R>("keys", forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::Selector, typename... Args>
	static auto open(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("open")] != -1);
		return scall<R>("open", forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::spi::SelectorProvider, typename... Args>
	auto provider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("provider")] != -1);
		return call<R>("provider", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto select(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("select")] != -1);
		return call<R>("select", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto selectNow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("selectNow")] != -1);
		return call<R>("selectNow", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto selectedKeys(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("selectedKeys")] != -1);
		return call<R>("selectedKeys", forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::Selector, typename... Args>
	auto wakeup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("wakeup")] != -1);
		return call<R>("wakeup", forward<Args>(args)...);
	}

};

#endif
