#ifndef java_nio_channels_MembershipKey_HPP
#define java_nio_channels_MembershipKey_HPP

#include "../../../jfwd_decl.hpp"

class ::java::nio::channels::MembershipKey : public jObject<::java::nio::channels::MembershipKey, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_nio_channels / "MembershipKey";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::nio::channels::MembershipKey(::java::net::InetAddress)>("block"), //
		jMethod<::java::nio::channels::MulticastChannel()>("channel"), //
		jMethod<::jvoid()>("drop"), //
		jMethod<::java::net::InetAddress()>("group"), //
		jMethod<::jboolean()>("isValid"), //
		jMethod<::java::net::NetworkInterface()>("networkInterface"), //
		jMethod<::java::net::InetAddress()>("sourceAddress"), //
		jMethod<::java::nio::channels::MembershipKey(::java::net::InetAddress)>("unblock"), //
	};

	template<typename R = ::java::nio::channels::MembershipKey, typename... Args>
	auto block(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("block")] != -1);
		return call<R>("block", forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::MulticastChannel, typename... Args>
	auto channel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("channel")] != -1);
		return call<R>("channel", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("drop")] != -1);
		return call<R>("drop", forward<Args>(args)...);
	}

	template<typename R = ::java::net::InetAddress, typename... Args>
	auto group(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("group")] != -1);
		return call<R>("group", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isValid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isValid")] != -1);
		return call<R>("isValid", forward<Args>(args)...);
	}

	template<typename R = ::java::net::NetworkInterface, typename... Args>
	auto networkInterface(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("networkInterface")] != -1);
		return call<R>("networkInterface", forward<Args>(args)...);
	}

	template<typename R = ::java::net::InetAddress, typename... Args>
	auto sourceAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("sourceAddress")] != -1);
		return call<R>("sourceAddress", forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::MembershipKey, typename... Args>
	auto unblock(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("unblock")] != -1);
		return call<R>("unblock", forward<Args>(args)...);
	}

};

#endif
