#ifndef java_nio_channels_JPP
#define java_nio_channels_JPP

namespace java::nio::channels { class AcceptPendingException; }
template<> constexpr auto signature<::java::nio::channels::AcceptPendingException> = ::java_nio_channels / "AcceptPendingException";
namespace java::nio::channels { class AlreadyBoundException; }
template<> constexpr auto signature<::java::nio::channels::AlreadyBoundException> = ::java_nio_channels / "AlreadyBoundException";
namespace java::nio::channels { class AlreadyConnectedException; }
template<> constexpr auto signature<::java::nio::channels::AlreadyConnectedException> = ::java_nio_channels / "AlreadyConnectedException";
namespace java::nio::channels { class AsynchronousByteChannel; }
template<> constexpr auto signature<::java::nio::channels::AsynchronousByteChannel> = ::java_nio_channels / "AsynchronousByteChannel";
namespace java::nio::channels { class AsynchronousChannel; }
template<> constexpr auto signature<::java::nio::channels::AsynchronousChannel> = ::java_nio_channels / "AsynchronousChannel";
namespace java::nio::channels { class AsynchronousChannelGroup; }
template<> constexpr auto signature<::java::nio::channels::AsynchronousChannelGroup> = ::java_nio_channels / "AsynchronousChannelGroup";
namespace java::nio::channels { class AsynchronousCloseException; }
template<> constexpr auto signature<::java::nio::channels::AsynchronousCloseException> = ::java_nio_channels / "AsynchronousCloseException";
namespace java::nio::channels { class AsynchronousFileChannel; }
template<> constexpr auto signature<::java::nio::channels::AsynchronousFileChannel> = ::java_nio_channels / "AsynchronousFileChannel";
namespace java::nio::channels { class AsynchronousServerSocketChannel; }
template<> constexpr auto signature<::java::nio::channels::AsynchronousServerSocketChannel> = ::java_nio_channels / "AsynchronousServerSocketChannel";
namespace java::nio::channels { class AsynchronousSocketChannel; }
template<> constexpr auto signature<::java::nio::channels::AsynchronousSocketChannel> = ::java_nio_channels / "AsynchronousSocketChannel";
namespace java::nio::channels { class ByteChannel; }
template<> constexpr auto signature<::java::nio::channels::ByteChannel> = ::java_nio_channels / "ByteChannel";
namespace java::nio::channels { class CancelledKeyException; }
template<> constexpr auto signature<::java::nio::channels::CancelledKeyException> = ::java_nio_channels / "CancelledKeyException";
namespace java::nio::channels { class Channel; }
template<> constexpr auto signature<::java::nio::channels::Channel> = ::java_nio_channels / "Channel";
namespace java::nio::channels { class Channels; }
template<> constexpr auto signature<::java::nio::channels::Channels> = ::java_nio_channels / "Channels";
namespace java::nio::channels { class Channels$1; }
template<> constexpr auto signature<::java::nio::channels::Channels$1> = ::java_nio_channels / "Channels$1";
namespace java::nio::channels { class Channels$2; }
template<> constexpr auto signature<::java::nio::channels::Channels$2> = ::java_nio_channels / "Channels$2";
namespace java::nio::channels { class Channels$3; }
template<> constexpr auto signature<::java::nio::channels::Channels$3> = ::java_nio_channels / "Channels$3";
namespace java::nio::channels { class Channels$ReadableByteChannelImpl; }
template<> constexpr auto signature<::java::nio::channels::Channels$ReadableByteChannelImpl> = ::java_nio_channels / "Channels$ReadableByteChannelImpl";
namespace java::nio::channels { class Channels$WritableByteChannelImpl; }
template<> constexpr auto signature<::java::nio::channels::Channels$WritableByteChannelImpl> = ::java_nio_channels / "Channels$WritableByteChannelImpl";
namespace java::nio::channels { class ClosedByInterruptException; }
template<> constexpr auto signature<::java::nio::channels::ClosedByInterruptException> = ::java_nio_channels / "ClosedByInterruptException";
namespace java::nio::channels { class ClosedChannelException; }
template<> constexpr auto signature<::java::nio::channels::ClosedChannelException> = ::java_nio_channels / "ClosedChannelException";
namespace java::nio::channels { class ClosedSelectorException; }
template<> constexpr auto signature<::java::nio::channels::ClosedSelectorException> = ::java_nio_channels / "ClosedSelectorException";
namespace java::nio::channels { class CompletionHandler; }
template<> constexpr auto signature<::java::nio::channels::CompletionHandler> = ::java_nio_channels / "CompletionHandler";
namespace java::nio::channels { class ConnectionPendingException; }
template<> constexpr auto signature<::java::nio::channels::ConnectionPendingException> = ::java_nio_channels / "ConnectionPendingException";
namespace java::nio::channels { class DatagramChannel; }
template<> constexpr auto signature<::java::nio::channels::DatagramChannel> = ::java_nio_channels / "DatagramChannel";
namespace java::nio::channels { class FileChannel; }
template<> constexpr auto signature<::java::nio::channels::FileChannel> = ::java_nio_channels / "FileChannel";
namespace java::nio::channels { class FileChannel$MapMode; }
template<> constexpr auto signature<::java::nio::channels::FileChannel$MapMode> = ::java_nio_channels / "FileChannel$MapMode";
namespace java::nio::channels { class FileLock; }
template<> constexpr auto signature<::java::nio::channels::FileLock> = ::java_nio_channels / "FileLock";
namespace java::nio::channels { class FileLockInterruptionException; }
template<> constexpr auto signature<::java::nio::channels::FileLockInterruptionException> = ::java_nio_channels / "FileLockInterruptionException";
namespace java::nio::channels { class GatheringByteChannel; }
template<> constexpr auto signature<::java::nio::channels::GatheringByteChannel> = ::java_nio_channels / "GatheringByteChannel";
namespace java::nio::channels { class IllegalBlockingModeException; }
template<> constexpr auto signature<::java::nio::channels::IllegalBlockingModeException> = ::java_nio_channels / "IllegalBlockingModeException";
namespace java::nio::channels { class IllegalChannelGroupException; }
template<> constexpr auto signature<::java::nio::channels::IllegalChannelGroupException> = ::java_nio_channels / "IllegalChannelGroupException";
namespace java::nio::channels { class IllegalSelectorException; }
template<> constexpr auto signature<::java::nio::channels::IllegalSelectorException> = ::java_nio_channels / "IllegalSelectorException";
namespace java::nio::channels { class InterruptedByTimeoutException; }
template<> constexpr auto signature<::java::nio::channels::InterruptedByTimeoutException> = ::java_nio_channels / "InterruptedByTimeoutException";
namespace java::nio::channels { class InterruptibleChannel; }
template<> constexpr auto signature<::java::nio::channels::InterruptibleChannel> = ::java_nio_channels / "InterruptibleChannel";
namespace java::nio::channels { class MembershipKey; }
template<> constexpr auto signature<::java::nio::channels::MembershipKey> = ::java_nio_channels / "MembershipKey";
namespace java::nio::channels { class MulticastChannel; }
template<> constexpr auto signature<::java::nio::channels::MulticastChannel> = ::java_nio_channels / "MulticastChannel";
namespace java::nio::channels { class NetworkChannel; }
template<> constexpr auto signature<::java::nio::channels::NetworkChannel> = ::java_nio_channels / "NetworkChannel";
namespace java::nio::channels { class NoConnectionPendingException; }
template<> constexpr auto signature<::java::nio::channels::NoConnectionPendingException> = ::java_nio_channels / "NoConnectionPendingException";
namespace java::nio::channels { class NonReadableChannelException; }
template<> constexpr auto signature<::java::nio::channels::NonReadableChannelException> = ::java_nio_channels / "NonReadableChannelException";
namespace java::nio::channels { class NonWritableChannelException; }
template<> constexpr auto signature<::java::nio::channels::NonWritableChannelException> = ::java_nio_channels / "NonWritableChannelException";
namespace java::nio::channels { class NotYetBoundException; }
template<> constexpr auto signature<::java::nio::channels::NotYetBoundException> = ::java_nio_channels / "NotYetBoundException";
namespace java::nio::channels { class NotYetConnectedException; }
template<> constexpr auto signature<::java::nio::channels::NotYetConnectedException> = ::java_nio_channels / "NotYetConnectedException";
namespace java::nio::channels { class OverlappingFileLockException; }
template<> constexpr auto signature<::java::nio::channels::OverlappingFileLockException> = ::java_nio_channels / "OverlappingFileLockException";
namespace java::nio::channels { class Pipe; }
template<> constexpr auto signature<::java::nio::channels::Pipe> = ::java_nio_channels / "Pipe";
namespace java::nio::channels { class Pipe$SinkChannel; }
template<> constexpr auto signature<::java::nio::channels::Pipe$SinkChannel> = ::java_nio_channels / "Pipe$SinkChannel";
namespace java::nio::channels { class Pipe$SourceChannel; }
template<> constexpr auto signature<::java::nio::channels::Pipe$SourceChannel> = ::java_nio_channels / "Pipe$SourceChannel";
namespace java::nio::channels { class ReadPendingException; }
template<> constexpr auto signature<::java::nio::channels::ReadPendingException> = ::java_nio_channels / "ReadPendingException";
namespace java::nio::channels { class ReadableByteChannel; }
template<> constexpr auto signature<::java::nio::channels::ReadableByteChannel> = ::java_nio_channels / "ReadableByteChannel";
namespace java::nio::channels { class ScatteringByteChannel; }
template<> constexpr auto signature<::java::nio::channels::ScatteringByteChannel> = ::java_nio_channels / "ScatteringByteChannel";
namespace java::nio::channels { class SeekableByteChannel; }
template<> constexpr auto signature<::java::nio::channels::SeekableByteChannel> = ::java_nio_channels / "SeekableByteChannel";
namespace java::nio::channels { class SelectableChannel; }
template<> constexpr auto signature<::java::nio::channels::SelectableChannel> = ::java_nio_channels / "SelectableChannel";
namespace java::nio::channels { class SelectionKey; }
template<> constexpr auto signature<::java::nio::channels::SelectionKey> = ::java_nio_channels / "SelectionKey";
namespace java::nio::channels { class Selector; }
template<> constexpr auto signature<::java::nio::channels::Selector> = ::java_nio_channels / "Selector";
namespace java::nio::channels { class ServerSocketChannel; }
template<> constexpr auto signature<::java::nio::channels::ServerSocketChannel> = ::java_nio_channels / "ServerSocketChannel";
namespace java::nio::channels { class ShutdownChannelGroupException; }
template<> constexpr auto signature<::java::nio::channels::ShutdownChannelGroupException> = ::java_nio_channels / "ShutdownChannelGroupException";
namespace java::nio::channels { class SocketChannel; }
template<> constexpr auto signature<::java::nio::channels::SocketChannel> = ::java_nio_channels / "SocketChannel";
namespace java::nio::channels { class UnresolvedAddressException; }
template<> constexpr auto signature<::java::nio::channels::UnresolvedAddressException> = ::java_nio_channels / "UnresolvedAddressException";
namespace java::nio::channels { class UnsupportedAddressTypeException; }
template<> constexpr auto signature<::java::nio::channels::UnsupportedAddressTypeException> = ::java_nio_channels / "UnsupportedAddressTypeException";
namespace java::nio::channels { class WritableByteChannel; }
template<> constexpr auto signature<::java::nio::channels::WritableByteChannel> = ::java_nio_channels / "WritableByteChannel";
namespace java::nio::channels { class WritePendingException; }
template<> constexpr auto signature<::java::nio::channels::WritePendingException> = ::java_nio_channels / "WritePendingException";

#endif
