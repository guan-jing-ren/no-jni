#ifndef java_nio_channels_FileLock_HPP
#define java_nio_channels_FileLock_HPP

#include "../../../jfwd_decl.hpp"

class ::java::nio::channels::FileLock : public jObject<::java::nio::channels::FileLock, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_nio_channels / "FileLock";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::nio::channels::Channel()>("acquiredBy"), //
		jMethod<::java::nio::channels::FileChannel()>("channel"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::jboolean()>("isShared"), //
		jMethod<::jboolean()>("isValid"), //
		jMethod<::jboolean(::jlong, ::jlong)>("overlaps"), //
		jMethod<::jlong()>("position"), //
		jMethod<::jvoid()>("release"), //
		jMethod<::jlong()>("size"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::nio::channels::Channel, typename... Args>
	auto acquiredBy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("acquiredBy")] != -1);
		return call<R>("acquiredBy", forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::FileChannel, typename... Args>
	auto channel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("channel")] != -1);
		return call<R>("channel", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("close")] != -1);
		return call<R>("close", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isShared(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isShared")] != -1);
		return call<R>("isShared", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isValid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isValid")] != -1);
		return call<R>("isValid", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto overlaps(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("overlaps")] != -1);
		return call<R>("overlaps", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto position(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("position")] != -1);
		return call<R>("position", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto release(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("release")] != -1);
		return call<R>("release", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto size(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("size")] != -1);
		return call<R>("size", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
