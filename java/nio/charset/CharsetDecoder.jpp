#ifndef java_nio_charset_CharsetDecoder_HPP
#define java_nio_charset_CharsetDecoder_HPP

#include "../../../jfwd_decl.hpp"

class ::java::nio::charset::CharsetDecoder : public jObject<::java::nio::charset::CharsetDecoder, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_nio_charset / "CharsetDecoder";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jfloat()>("averageCharsPerByte"), //
		jMethod<::java::nio::charset::Charset()>("charset"), //
		jMethod<::java::nio::CharBuffer(::java::nio::ByteBuffer)>("decode"), //
		jMethod<::java::nio::charset::CoderResult(::java::nio::ByteBuffer, ::java::nio::CharBuffer, ::jboolean)>("decode"), //
		jMethod<::java::nio::charset::Charset()>("detectedCharset"), //
		jMethod<::java::nio::charset::CoderResult(::java::nio::CharBuffer)>("flush"), //
		jMethod<::jboolean()>("isAutoDetecting"), //
		jMethod<::jboolean()>("isCharsetDetected"), //
		jMethod<::java::nio::charset::CodingErrorAction()>("malformedInputAction"), //
		jMethod<::jfloat()>("maxCharsPerByte"), //
		jMethod<::java::nio::charset::CharsetDecoder(::java::nio::charset::CodingErrorAction)>("onMalformedInput"), //
		jMethod<::java::nio::charset::CharsetDecoder(::java::nio::charset::CodingErrorAction)>("onUnmappableCharacter"), //
		jMethod<::java::nio::charset::CharsetDecoder(::java::lang::String)>("replaceWith"), //
		jMethod<::java::lang::String()>("replacement"), //
		jMethod<::java::nio::charset::CharsetDecoder()>("reset"), //
		jMethod<::java::nio::charset::CodingErrorAction()>("unmappableCharacterAction"), //
	};

	template<typename R = ::jfloat, typename... Args>
	auto averageCharsPerByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("averageCharsPerByte")] != -1);
		return call<R>("averageCharsPerByte", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::charset::Charset, typename... Args>
	auto charset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("charset")] != -1);
		return call<R>("charset", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::CharBuffer, typename... Args>
	auto decode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("decode")] != -1);
		return call<R>("decode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::charset::Charset, typename... Args>
	auto detectedCharset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("detectedCharset")] != -1);
		return call<R>("detectedCharset", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::charset::CoderResult, typename... Args>
	auto flush(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("flush")] != -1);
		return call<R>("flush", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAutoDetecting(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAutoDetecting")] != -1);
		return call<R>("isAutoDetecting", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCharsetDetected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCharsetDetected")] != -1);
		return call<R>("isCharsetDetected", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::charset::CodingErrorAction, typename... Args>
	auto malformedInputAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("malformedInputAction")] != -1);
		return call<R>("malformedInputAction", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto maxCharsPerByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("maxCharsPerByte")] != -1);
		return call<R>("maxCharsPerByte", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::charset::CharsetDecoder, typename... Args>
	auto onMalformedInput(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("onMalformedInput")] != -1);
		return call<R>("onMalformedInput", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::charset::CharsetDecoder, typename... Args>
	auto onUnmappableCharacter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("onUnmappableCharacter")] != -1);
		return call<R>("onUnmappableCharacter", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::charset::CharsetDecoder, typename... Args>
	auto replaceWith(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("replaceWith")] != -1);
		return call<R>("replaceWith", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto replacement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("replacement")] != -1);
		return call<R>("replacement", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::charset::CharsetDecoder, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::charset::CodingErrorAction, typename... Args>
	auto unmappableCharacterAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unmappableCharacterAction")] != -1);
		return call<R>("unmappableCharacterAction", std::forward<Args>(args)...);
	}

};

#endif
