#ifndef java_nio_charset_CharsetEncoder_HPP
#define java_nio_charset_CharsetEncoder_HPP

#include "../../../jfwd_decl.hpp"

class ::java::nio::charset::CharsetEncoder : public jObject<::java::nio::charset::CharsetEncoder, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_nio_charset / "CharsetEncoder";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jfloat()>("averageBytesPerChar"), //
		jMethod<::jboolean(::jchar)>("canEncode"), //
		jMethod<::jboolean(::java::lang::CharSequence)>("canEncode"), //
		jMethod<::java::nio::charset::Charset()>("charset"), //
		jMethod<::java::nio::ByteBuffer(::java::nio::CharBuffer)>("encode"), //
		jMethod<::java::nio::charset::CoderResult(::java::nio::CharBuffer, ::java::nio::ByteBuffer, ::jboolean)>("encode"), //
		jMethod<::java::nio::charset::CoderResult(::java::nio::ByteBuffer)>("flush"), //
		jMethod<::jboolean(::jbyte *)>("isLegalReplacement"), //
		jMethod<::java::nio::charset::CodingErrorAction()>("malformedInputAction"), //
		jMethod<::jfloat()>("maxBytesPerChar"), //
		jMethod<::java::nio::charset::CharsetEncoder(::java::nio::charset::CodingErrorAction)>("onMalformedInput"), //
		jMethod<::java::nio::charset::CharsetEncoder(::java::nio::charset::CodingErrorAction)>("onUnmappableCharacter"), //
		jMethod<::java::nio::charset::CharsetEncoder(::jbyte *)>("replaceWith"), //
		jMethod<::jbyte *()>("replacement"), //
		jMethod<::java::nio::charset::CharsetEncoder()>("reset"), //
		jMethod<::java::nio::charset::CodingErrorAction()>("unmappableCharacterAction"), //
	};

	template<typename R = ::jfloat, typename... Args>
	auto averageBytesPerChar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("averageBytesPerChar")] != -1);
		return call<R>("averageBytesPerChar", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto canEncode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canEncode")] != -1);
		return call<R>("canEncode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::charset::Charset, typename... Args>
	auto charset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("charset")] != -1);
		return call<R>("charset", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::ByteBuffer, typename... Args>
	auto encode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("encode")] != -1);
		return call<R>("encode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::charset::CoderResult, typename... Args>
	auto flush(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("flush")] != -1);
		return call<R>("flush", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLegalReplacement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLegalReplacement")] != -1);
		return call<R>("isLegalReplacement", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::charset::CodingErrorAction, typename... Args>
	auto malformedInputAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("malformedInputAction")] != -1);
		return call<R>("malformedInputAction", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto maxBytesPerChar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("maxBytesPerChar")] != -1);
		return call<R>("maxBytesPerChar", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::charset::CharsetEncoder, typename... Args>
	auto onMalformedInput(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("onMalformedInput")] != -1);
		return call<R>("onMalformedInput", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::charset::CharsetEncoder, typename... Args>
	auto onUnmappableCharacter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("onUnmappableCharacter")] != -1);
		return call<R>("onUnmappableCharacter", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::charset::CharsetEncoder, typename... Args>
	auto replaceWith(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("replaceWith")] != -1);
		return call<R>("replaceWith", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto replacement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("replacement")] != -1);
		return call<R>("replacement", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::charset::CharsetEncoder, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::charset::CodingErrorAction, typename... Args>
	auto unmappableCharacterAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unmappableCharacterAction")] != -1);
		return call<R>("unmappableCharacterAction", std::forward<Args>(args)...);
	}

};

#endif
