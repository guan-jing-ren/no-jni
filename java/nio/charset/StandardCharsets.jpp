#ifndef java_nio_charset_StandardCharsets_HPP
#define java_nio_charset_StandardCharsets_HPP

#include "../../../jfwd_decl.hpp"

class ::java::nio::charset::StandardCharsets : public jObject<::java::nio::charset::StandardCharsets, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_nio_charset / "StandardCharsets";

	constexpr static Enume field_signatures{
		jField<::java::nio::charset::Charset>("ISO_8859_1"), //
		jField<::java::nio::charset::Charset>("US_ASCII"), //
		jField<::java::nio::charset::Charset>("UTF_16"), //
		jField<::java::nio::charset::Charset>("UTF_16BE"), //
		jField<::java::nio::charset::Charset>("UTF_16LE"), //
		jField<::java::nio::charset::Charset>("UTF_8"), //
	};

	template<typename F = ::java::nio::charset::Charset>
	static auto ISO_8859_1() {
		static_assert(field_signatures[jField<F>("ISO_8859_1")] != -1);
		return sat<F>("ISO_8859_1");
	}

	template<typename F = ::java::nio::charset::Charset>
	static auto US_ASCII() {
		static_assert(field_signatures[jField<F>("US_ASCII")] != -1);
		return sat<F>("US_ASCII");
	}

	template<typename F = ::java::nio::charset::Charset>
	static auto UTF_16() {
		static_assert(field_signatures[jField<F>("UTF_16")] != -1);
		return sat<F>("UTF_16");
	}

	template<typename F = ::java::nio::charset::Charset>
	static auto UTF_16BE() {
		static_assert(field_signatures[jField<F>("UTF_16BE")] != -1);
		return sat<F>("UTF_16BE");
	}

	template<typename F = ::java::nio::charset::Charset>
	static auto UTF_16LE() {
		static_assert(field_signatures[jField<F>("UTF_16LE")] != -1);
		return sat<F>("UTF_16LE");
	}

	template<typename F = ::java::nio::charset::Charset>
	static auto UTF_8() {
		static_assert(field_signatures[jField<F>("UTF_8")] != -1);
		return sat<F>("UTF_8");
	}

	constexpr static Enume method_signatures{
		cexprstr{"\0"}, //
	};

};

#endif
