#ifndef java_nio_FloatBuffer_HPP
#define java_nio_FloatBuffer_HPP

#include "../../jfwd_decl.hpp"

class ::java::nio::FloatBuffer : public jObject<::java::nio::FloatBuffer, ::java::nio::Buffer> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_nio / "FloatBuffer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::nio::FloatBuffer(::jint)>("allocate"), //
		jMethod<::java::lang::Object()>("array"), //
		jMethod<::jfloat *()>("array"), //
		jMethod<::jint()>("arrayOffset"), //
		jMethod<::java::nio::FloatBuffer()>("asReadOnlyBuffer"), //
		jMethod<::java::nio::FloatBuffer()>("compact"), //
		jMethod<::jint(::java::lang::Object)>("compareTo"), //
		jMethod<::jint(::java::nio::FloatBuffer)>("compareTo"), //
		jMethod<::java::nio::FloatBuffer()>("duplicate"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jfloat()>("get"), //
		jMethod<::jfloat(::jint)>("get"), //
		jMethod<::java::nio::FloatBuffer(::jfloat *)>("get"), //
		jMethod<::java::nio::FloatBuffer(::jfloat *, ::jint, ::jint)>("get"), //
		jMethod<::jboolean()>("hasArray"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isDirect"), //
		jMethod<::java::nio::ByteOrder()>("order"), //
		jMethod<::java::nio::FloatBuffer(::jfloat)>("put"), //
		jMethod<::java::nio::FloatBuffer(::jint, ::jfloat)>("put"), //
		jMethod<::java::nio::FloatBuffer(::java::nio::FloatBuffer)>("put"), //
		jMethod<::java::nio::FloatBuffer(::jfloat *)>("put"), //
		jMethod<::java::nio::FloatBuffer(::jfloat *, ::jint, ::jint)>("put"), //
		jMethod<::java::nio::FloatBuffer()>("slice"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::nio::FloatBuffer(::jfloat *)>("wrap"), //
		jMethod<::java::nio::FloatBuffer(::jfloat *, ::jint, ::jint)>("wrap"), //
	};

	template<typename R = ::java::nio::FloatBuffer, typename... Args>
	static auto allocate(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("allocate")] != -1);
		return scall<R>("allocate", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("array")] != -1);
		return call<R>("array", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto arrayOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("arrayOffset")] != -1);
		return call<R>("arrayOffset", forward<Args>(args)...);
	}

	template<typename R = ::java::nio::FloatBuffer, typename... Args>
	auto asReadOnlyBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("asReadOnlyBuffer")] != -1);
		return call<R>("asReadOnlyBuffer", forward<Args>(args)...);
	}

	template<typename R = ::java::nio::FloatBuffer, typename... Args>
	auto compact(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("compact")] != -1);
		return call<R>("compact", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto compareTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("compareTo")] != -1);
		return call<R>("compareTo", forward<Args>(args)...);
	}

	template<typename R = ::java::nio::FloatBuffer, typename... Args>
	auto duplicate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("duplicate")] != -1);
		return call<R>("duplicate", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("get")] != -1);
		return call<R>("get", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hasArray")] != -1);
		return call<R>("hasArray", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDirect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isDirect")] != -1);
		return call<R>("isDirect", forward<Args>(args)...);
	}

	template<typename R = ::java::nio::ByteOrder, typename... Args>
	auto order(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("order")] != -1);
		return call<R>("order", forward<Args>(args)...);
	}

	template<typename R = ::java::nio::FloatBuffer, typename... Args>
	auto put(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("put")] != -1);
		return call<R>("put", forward<Args>(args)...);
	}

	template<typename R = ::java::nio::FloatBuffer, typename... Args>
	auto slice(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("slice")] != -1);
		return call<R>("slice", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

	template<typename R = ::java::nio::FloatBuffer, typename... Args>
	static auto wrap(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("wrap")] != -1);
		return scall<R>("wrap", forward<Args>(args)...);
	}

};

#endif
