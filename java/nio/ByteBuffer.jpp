#ifndef java_nio_ByteBuffer_HPP
#define java_nio_ByteBuffer_HPP

#include "../../jfwd_decl.hpp"

class ::java::nio::ByteBuffer : public jObject<::java::nio::ByteBuffer, ::java::nio::Buffer> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_nio / "ByteBuffer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::nio::ByteBuffer(::jint)>("allocate"), //
		jMethod<::java::nio::ByteBuffer(::jint)>("allocateDirect"), //
		jMethod<::java::lang::Object()>("array"), //
		jMethod<::jbyte *()>("array"), //
		jMethod<::jint()>("arrayOffset"), //
		jMethod<::java::nio::CharBuffer()>("asCharBuffer"), //
		jMethod<::java::nio::DoubleBuffer()>("asDoubleBuffer"), //
		jMethod<::java::nio::FloatBuffer()>("asFloatBuffer"), //
		jMethod<::java::nio::IntBuffer()>("asIntBuffer"), //
		jMethod<::java::nio::LongBuffer()>("asLongBuffer"), //
		jMethod<::java::nio::ByteBuffer()>("asReadOnlyBuffer"), //
		jMethod<::java::nio::ShortBuffer()>("asShortBuffer"), //
		jMethod<::java::nio::ByteBuffer()>("compact"), //
		jMethod<::jint(::java::lang::Object)>("compareTo"), //
		jMethod<::jint(::java::nio::ByteBuffer)>("compareTo"), //
		jMethod<::java::nio::ByteBuffer()>("duplicate"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jbyte()>("get"), //
		jMethod<::jbyte(::jint)>("get"), //
		jMethod<::java::nio::ByteBuffer(::jbyte *)>("get"), //
		jMethod<::java::nio::ByteBuffer(::jbyte *, ::jint, ::jint)>("get"), //
		jMethod<::jchar()>("getChar"), //
		jMethod<::jchar(::jint)>("getChar"), //
		jMethod<::jdouble()>("getDouble"), //
		jMethod<::jdouble(::jint)>("getDouble"), //
		jMethod<::jfloat()>("getFloat"), //
		jMethod<::jfloat(::jint)>("getFloat"), //
		jMethod<::jint()>("getInt"), //
		jMethod<::jint(::jint)>("getInt"), //
		jMethod<::jlong()>("getLong"), //
		jMethod<::jlong(::jint)>("getLong"), //
		jMethod<::jshort()>("getShort"), //
		jMethod<::jshort(::jint)>("getShort"), //
		jMethod<::jboolean()>("hasArray"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isDirect"), //
		jMethod<::java::nio::ByteOrder()>("order"), //
		jMethod<::java::nio::ByteBuffer(::java::nio::ByteOrder)>("order"), //
		jMethod<::java::nio::ByteBuffer(::jbyte)>("put"), //
		jMethod<::java::nio::ByteBuffer(::jint, ::jbyte)>("put"), //
		jMethod<::java::nio::ByteBuffer(::java::nio::ByteBuffer)>("put"), //
		jMethod<::java::nio::ByteBuffer(::jbyte *)>("put"), //
		jMethod<::java::nio::ByteBuffer(::jbyte *, ::jint, ::jint)>("put"), //
		jMethod<::java::nio::ByteBuffer(::jchar)>("putChar"), //
		jMethod<::java::nio::ByteBuffer(::jint, ::jchar)>("putChar"), //
		jMethod<::java::nio::ByteBuffer(::jdouble)>("putDouble"), //
		jMethod<::java::nio::ByteBuffer(::jint, ::jdouble)>("putDouble"), //
		jMethod<::java::nio::ByteBuffer(::jfloat)>("putFloat"), //
		jMethod<::java::nio::ByteBuffer(::jint, ::jfloat)>("putFloat"), //
		jMethod<::java::nio::ByteBuffer(::jint)>("putInt"), //
		jMethod<::java::nio::ByteBuffer(::jint, ::jint)>("putInt"), //
		jMethod<::java::nio::ByteBuffer(::jint, ::jlong)>("putLong"), //
		jMethod<::java::nio::ByteBuffer(::jlong)>("putLong"), //
		jMethod<::java::nio::ByteBuffer(::jint, ::jshort)>("putShort"), //
		jMethod<::java::nio::ByteBuffer(::jshort)>("putShort"), //
		jMethod<::java::nio::ByteBuffer()>("slice"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::nio::ByteBuffer(::jbyte *)>("wrap"), //
		jMethod<::java::nio::ByteBuffer(::jbyte *, ::jint, ::jint)>("wrap"), //
	};

	template<typename R = ::java::nio::ByteBuffer, typename... Args>
	static auto allocate(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("allocate")] != -1);
		return scall<R>("allocate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::ByteBuffer, typename... Args>
	static auto allocateDirect(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("allocateDirect")] != -1);
		return scall<R>("allocateDirect", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("array")] != -1);
		return call<R>("array", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto arrayOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("arrayOffset")] != -1);
		return call<R>("arrayOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::CharBuffer, typename... Args>
	auto asCharBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("asCharBuffer")] != -1);
		return call<R>("asCharBuffer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::DoubleBuffer, typename... Args>
	auto asDoubleBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("asDoubleBuffer")] != -1);
		return call<R>("asDoubleBuffer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::FloatBuffer, typename... Args>
	auto asFloatBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("asFloatBuffer")] != -1);
		return call<R>("asFloatBuffer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::IntBuffer, typename... Args>
	auto asIntBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("asIntBuffer")] != -1);
		return call<R>("asIntBuffer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::LongBuffer, typename... Args>
	auto asLongBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("asLongBuffer")] != -1);
		return call<R>("asLongBuffer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::ByteBuffer, typename... Args>
	auto asReadOnlyBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("asReadOnlyBuffer")] != -1);
		return call<R>("asReadOnlyBuffer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::ShortBuffer, typename... Args>
	auto asShortBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("asShortBuffer")] != -1);
		return call<R>("asShortBuffer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::ByteBuffer, typename... Args>
	auto compact(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compact")] != -1);
		return call<R>("compact", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto compareTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compareTo")] != -1);
		return call<R>("compareTo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::ByteBuffer, typename... Args>
	auto duplicate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("duplicate")] != -1);
		return call<R>("duplicate", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto getChar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChar")] != -1);
		return call<R>("getChar", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDouble")] != -1);
		return call<R>("getDouble", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getFloat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFloat")] != -1);
		return call<R>("getFloat", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInt")] != -1);
		return call<R>("getInt", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLong")] != -1);
		return call<R>("getLong", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto getShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getShort")] != -1);
		return call<R>("getShort", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasArray")] != -1);
		return call<R>("hasArray", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDirect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDirect")] != -1);
		return call<R>("isDirect", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::ByteOrder, typename... Args>
	auto order(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("order")] != -1);
		return call<R>("order", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::ByteBuffer, typename... Args>
	auto put(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("put")] != -1);
		return call<R>("put", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::ByteBuffer, typename... Args>
	auto putChar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putChar")] != -1);
		return call<R>("putChar", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::ByteBuffer, typename... Args>
	auto putDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putDouble")] != -1);
		return call<R>("putDouble", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::ByteBuffer, typename... Args>
	auto putFloat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putFloat")] != -1);
		return call<R>("putFloat", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::ByteBuffer, typename... Args>
	auto putInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putInt")] != -1);
		return call<R>("putInt", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::ByteBuffer, typename... Args>
	auto putLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putLong")] != -1);
		return call<R>("putLong", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::ByteBuffer, typename... Args>
	auto putShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putShort")] != -1);
		return call<R>("putShort", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::ByteBuffer, typename... Args>
	auto slice(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("slice")] != -1);
		return call<R>("slice", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::ByteBuffer, typename... Args>
	static auto wrap(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("wrap")] != -1);
		return scall<R>("wrap", std::forward<Args>(args)...);
	}

};

#endif
