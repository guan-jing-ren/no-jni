#ifndef java_nio_CharBuffer_HPP
#define java_nio_CharBuffer_HPP

#include "../../jfwd_decl.hpp"

class ::java::nio::CharBuffer : public jObject<::java::nio::CharBuffer, ::java::nio::Buffer> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_nio / "CharBuffer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::nio::CharBuffer(::jint)>("allocate"), //
		jMethod<::java::lang::Appendable(::jchar)>("append"), //
		jMethod<::java::nio::CharBuffer(::jchar)>("append"), //
		jMethod<::java::lang::Appendable(::java::lang::CharSequence)>("append"), //
		jMethod<::java::nio::CharBuffer(::java::lang::CharSequence)>("append"), //
		jMethod<::java::lang::Appendable(::java::lang::CharSequence, ::jint, ::jint)>("append"), //
		jMethod<::java::nio::CharBuffer(::java::lang::CharSequence, ::jint, ::jint)>("append"), //
		jMethod<::java::lang::Object()>("array"), //
		jMethod<::jchar *()>("array"), //
		jMethod<::jint()>("arrayOffset"), //
		jMethod<::java::nio::CharBuffer()>("asReadOnlyBuffer"), //
		jMethod<::jchar(::jint)>("charAt"), //
		jMethod<::java::util::stream::IntStream()>("chars"), //
		jMethod<::java::nio::CharBuffer()>("compact"), //
		jMethod<::jint(::java::lang::Object)>("compareTo"), //
		jMethod<::jint(::java::nio::CharBuffer)>("compareTo"), //
		jMethod<::java::nio::CharBuffer()>("duplicate"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jchar()>("get"), //
		jMethod<::jchar(::jint)>("get"), //
		jMethod<::java::nio::CharBuffer(::jchar *)>("get"), //
		jMethod<::java::nio::CharBuffer(::jchar *, ::jint, ::jint)>("get"), //
		jMethod<::jboolean()>("hasArray"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isDirect"), //
		jMethod<::jint()>("length"), //
		jMethod<::java::nio::ByteOrder()>("order"), //
		jMethod<::java::nio::CharBuffer(::jchar)>("put"), //
		jMethod<::java::nio::CharBuffer(::jint, ::jchar)>("put"), //
		jMethod<::java::nio::CharBuffer(::java::lang::String)>("put"), //
		jMethod<::java::nio::CharBuffer(::java::lang::String, ::jint, ::jint)>("put"), //
		jMethod<::java::nio::CharBuffer(::java::nio::CharBuffer)>("put"), //
		jMethod<::java::nio::CharBuffer(::jchar *)>("put"), //
		jMethod<::java::nio::CharBuffer(::jchar *, ::jint, ::jint)>("put"), //
		jMethod<::jint(::java::nio::CharBuffer)>("read"), //
		jMethod<::java::nio::CharBuffer()>("slice"), //
		jMethod<::java::lang::CharSequence(::jint, ::jint)>("subSequence"), //
		jMethod<::java::nio::CharBuffer(::jint, ::jint)>("subSequence"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::nio::CharBuffer(::java::lang::CharSequence)>("wrap"), //
		jMethod<::java::nio::CharBuffer(::java::lang::CharSequence, ::jint, ::jint)>("wrap"), //
		jMethod<::java::nio::CharBuffer(::jchar *)>("wrap"), //
		jMethod<::java::nio::CharBuffer(::jchar *, ::jint, ::jint)>("wrap"), //
	};

	template<typename R = ::java::nio::CharBuffer, typename... Args>
	static auto allocate(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("allocate")] != -1);
		return scall<R>("allocate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Appendable, typename... Args>
	auto append(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("append")] != -1);
		return call<R>("append", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("array")] != -1);
		return call<R>("array", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto arrayOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("arrayOffset")] != -1);
		return call<R>("arrayOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::CharBuffer, typename... Args>
	auto asReadOnlyBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("asReadOnlyBuffer")] != -1);
		return call<R>("asReadOnlyBuffer", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto charAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("charAt")] != -1);
		return call<R>("charAt", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::IntStream, typename... Args>
	auto chars(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("chars")] != -1);
		return call<R>("chars", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::CharBuffer, typename... Args>
	auto compact(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compact")] != -1);
		return call<R>("compact", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto compareTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compareTo")] != -1);
		return call<R>("compareTo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::CharBuffer, typename... Args>
	auto duplicate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("duplicate")] != -1);
		return call<R>("duplicate", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasArray")] != -1);
		return call<R>("hasArray", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDirect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDirect")] != -1);
		return call<R>("isDirect", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto length(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("length")] != -1);
		return call<R>("length", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::ByteOrder, typename... Args>
	auto order(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("order")] != -1);
		return call<R>("order", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::CharBuffer, typename... Args>
	auto put(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("put")] != -1);
		return call<R>("put", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("read")] != -1);
		return call<R>("read", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::CharBuffer, typename... Args>
	auto slice(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("slice")] != -1);
		return call<R>("slice", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::CharSequence, typename... Args>
	auto subSequence(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("subSequence")] != -1);
		return call<R>("subSequence", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::CharBuffer, typename... Args>
	static auto wrap(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("wrap")] != -1);
		return scall<R>("wrap", std::forward<Args>(args)...);
	}

};

#endif
