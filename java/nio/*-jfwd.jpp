#ifndef java_nio_JPP
#define java_nio_JPP

namespace java::nio { class Bits; }
template<> constexpr auto signature<::java::nio::Bits> = ::java_nio / "Bits";
namespace java::nio { class Bits$1; }
template<> constexpr auto signature<::java::nio::Bits$1> = ::java_nio / "Bits$1";
namespace java::nio { class Bits$1$1; }
template<> constexpr auto signature<::java::nio::Bits$1$1> = ::java_nio / "Bits$1$1";
namespace java::nio { class Buffer; }
template<> constexpr auto signature<::java::nio::Buffer> = ::java_nio / "Buffer";
namespace java::nio { class BufferOverflowException; }
template<> constexpr auto signature<::java::nio::BufferOverflowException> = ::java_nio / "BufferOverflowException";
namespace java::nio { class BufferUnderflowException; }
template<> constexpr auto signature<::java::nio::BufferUnderflowException> = ::java_nio / "BufferUnderflowException";
namespace java::nio { class ByteBuffer; }
template<> constexpr auto signature<::java::nio::ByteBuffer> = ::java_nio / "ByteBuffer";
namespace java::nio { class ByteBufferAsCharBufferB; }
template<> constexpr auto signature<::java::nio::ByteBufferAsCharBufferB> = ::java_nio / "ByteBufferAsCharBufferB";
namespace java::nio { class ByteBufferAsCharBufferL; }
template<> constexpr auto signature<::java::nio::ByteBufferAsCharBufferL> = ::java_nio / "ByteBufferAsCharBufferL";
namespace java::nio { class ByteBufferAsCharBufferRB; }
template<> constexpr auto signature<::java::nio::ByteBufferAsCharBufferRB> = ::java_nio / "ByteBufferAsCharBufferRB";
namespace java::nio { class ByteBufferAsCharBufferRL; }
template<> constexpr auto signature<::java::nio::ByteBufferAsCharBufferRL> = ::java_nio / "ByteBufferAsCharBufferRL";
namespace java::nio { class ByteBufferAsDoubleBufferB; }
template<> constexpr auto signature<::java::nio::ByteBufferAsDoubleBufferB> = ::java_nio / "ByteBufferAsDoubleBufferB";
namespace java::nio { class ByteBufferAsDoubleBufferL; }
template<> constexpr auto signature<::java::nio::ByteBufferAsDoubleBufferL> = ::java_nio / "ByteBufferAsDoubleBufferL";
namespace java::nio { class ByteBufferAsDoubleBufferRB; }
template<> constexpr auto signature<::java::nio::ByteBufferAsDoubleBufferRB> = ::java_nio / "ByteBufferAsDoubleBufferRB";
namespace java::nio { class ByteBufferAsDoubleBufferRL; }
template<> constexpr auto signature<::java::nio::ByteBufferAsDoubleBufferRL> = ::java_nio / "ByteBufferAsDoubleBufferRL";
namespace java::nio { class ByteBufferAsFloatBufferB; }
template<> constexpr auto signature<::java::nio::ByteBufferAsFloatBufferB> = ::java_nio / "ByteBufferAsFloatBufferB";
namespace java::nio { class ByteBufferAsFloatBufferL; }
template<> constexpr auto signature<::java::nio::ByteBufferAsFloatBufferL> = ::java_nio / "ByteBufferAsFloatBufferL";
namespace java::nio { class ByteBufferAsFloatBufferRB; }
template<> constexpr auto signature<::java::nio::ByteBufferAsFloatBufferRB> = ::java_nio / "ByteBufferAsFloatBufferRB";
namespace java::nio { class ByteBufferAsFloatBufferRL; }
template<> constexpr auto signature<::java::nio::ByteBufferAsFloatBufferRL> = ::java_nio / "ByteBufferAsFloatBufferRL";
namespace java::nio { class ByteBufferAsIntBufferB; }
template<> constexpr auto signature<::java::nio::ByteBufferAsIntBufferB> = ::java_nio / "ByteBufferAsIntBufferB";
namespace java::nio { class ByteBufferAsIntBufferL; }
template<> constexpr auto signature<::java::nio::ByteBufferAsIntBufferL> = ::java_nio / "ByteBufferAsIntBufferL";
namespace java::nio { class ByteBufferAsIntBufferRB; }
template<> constexpr auto signature<::java::nio::ByteBufferAsIntBufferRB> = ::java_nio / "ByteBufferAsIntBufferRB";
namespace java::nio { class ByteBufferAsIntBufferRL; }
template<> constexpr auto signature<::java::nio::ByteBufferAsIntBufferRL> = ::java_nio / "ByteBufferAsIntBufferRL";
namespace java::nio { class ByteBufferAsLongBufferB; }
template<> constexpr auto signature<::java::nio::ByteBufferAsLongBufferB> = ::java_nio / "ByteBufferAsLongBufferB";
namespace java::nio { class ByteBufferAsLongBufferL; }
template<> constexpr auto signature<::java::nio::ByteBufferAsLongBufferL> = ::java_nio / "ByteBufferAsLongBufferL";
namespace java::nio { class ByteBufferAsLongBufferRB; }
template<> constexpr auto signature<::java::nio::ByteBufferAsLongBufferRB> = ::java_nio / "ByteBufferAsLongBufferRB";
namespace java::nio { class ByteBufferAsLongBufferRL; }
template<> constexpr auto signature<::java::nio::ByteBufferAsLongBufferRL> = ::java_nio / "ByteBufferAsLongBufferRL";
namespace java::nio { class ByteBufferAsShortBufferB; }
template<> constexpr auto signature<::java::nio::ByteBufferAsShortBufferB> = ::java_nio / "ByteBufferAsShortBufferB";
namespace java::nio { class ByteBufferAsShortBufferL; }
template<> constexpr auto signature<::java::nio::ByteBufferAsShortBufferL> = ::java_nio / "ByteBufferAsShortBufferL";
namespace java::nio { class ByteBufferAsShortBufferRB; }
template<> constexpr auto signature<::java::nio::ByteBufferAsShortBufferRB> = ::java_nio / "ByteBufferAsShortBufferRB";
namespace java::nio { class ByteBufferAsShortBufferRL; }
template<> constexpr auto signature<::java::nio::ByteBufferAsShortBufferRL> = ::java_nio / "ByteBufferAsShortBufferRL";
namespace java::nio { class ByteOrder; }
template<> constexpr auto signature<::java::nio::ByteOrder> = ::java_nio / "ByteOrder";
namespace java::nio { class CharBuffer; }
template<> constexpr auto signature<::java::nio::CharBuffer> = ::java_nio / "CharBuffer";
namespace java::nio { class CharBufferSpliterator; }
template<> constexpr auto signature<::java::nio::CharBufferSpliterator> = ::java_nio / "CharBufferSpliterator";
namespace java::nio { class DirectByteBuffer; }
template<> constexpr auto signature<::java::nio::DirectByteBuffer> = ::java_nio / "DirectByteBuffer";
namespace java::nio { class DirectByteBuffer$1; }
template<> constexpr auto signature<::java::nio::DirectByteBuffer$1> = ::java_nio / "DirectByteBuffer$1";
namespace java::nio { class DirectByteBuffer$Deallocator; }
template<> constexpr auto signature<::java::nio::DirectByteBuffer$Deallocator> = ::java_nio / "DirectByteBuffer$Deallocator";
namespace java::nio { class DirectByteBufferR; }
template<> constexpr auto signature<::java::nio::DirectByteBufferR> = ::java_nio / "DirectByteBufferR";
namespace java::nio { class DirectCharBufferRS; }
template<> constexpr auto signature<::java::nio::DirectCharBufferRS> = ::java_nio / "DirectCharBufferRS";
namespace java::nio { class DirectCharBufferRU; }
template<> constexpr auto signature<::java::nio::DirectCharBufferRU> = ::java_nio / "DirectCharBufferRU";
namespace java::nio { class DirectCharBufferS; }
template<> constexpr auto signature<::java::nio::DirectCharBufferS> = ::java_nio / "DirectCharBufferS";
namespace java::nio { class DirectCharBufferU; }
template<> constexpr auto signature<::java::nio::DirectCharBufferU> = ::java_nio / "DirectCharBufferU";
namespace java::nio { class DirectDoubleBufferRS; }
template<> constexpr auto signature<::java::nio::DirectDoubleBufferRS> = ::java_nio / "DirectDoubleBufferRS";
namespace java::nio { class DirectDoubleBufferRU; }
template<> constexpr auto signature<::java::nio::DirectDoubleBufferRU> = ::java_nio / "DirectDoubleBufferRU";
namespace java::nio { class DirectDoubleBufferS; }
template<> constexpr auto signature<::java::nio::DirectDoubleBufferS> = ::java_nio / "DirectDoubleBufferS";
namespace java::nio { class DirectDoubleBufferU; }
template<> constexpr auto signature<::java::nio::DirectDoubleBufferU> = ::java_nio / "DirectDoubleBufferU";
namespace java::nio { class DirectFloatBufferRS; }
template<> constexpr auto signature<::java::nio::DirectFloatBufferRS> = ::java_nio / "DirectFloatBufferRS";
namespace java::nio { class DirectFloatBufferRU; }
template<> constexpr auto signature<::java::nio::DirectFloatBufferRU> = ::java_nio / "DirectFloatBufferRU";
namespace java::nio { class DirectFloatBufferS; }
template<> constexpr auto signature<::java::nio::DirectFloatBufferS> = ::java_nio / "DirectFloatBufferS";
namespace java::nio { class DirectFloatBufferU; }
template<> constexpr auto signature<::java::nio::DirectFloatBufferU> = ::java_nio / "DirectFloatBufferU";
namespace java::nio { class DirectIntBufferRS; }
template<> constexpr auto signature<::java::nio::DirectIntBufferRS> = ::java_nio / "DirectIntBufferRS";
namespace java::nio { class DirectIntBufferRU; }
template<> constexpr auto signature<::java::nio::DirectIntBufferRU> = ::java_nio / "DirectIntBufferRU";
namespace java::nio { class DirectIntBufferS; }
template<> constexpr auto signature<::java::nio::DirectIntBufferS> = ::java_nio / "DirectIntBufferS";
namespace java::nio { class DirectIntBufferU; }
template<> constexpr auto signature<::java::nio::DirectIntBufferU> = ::java_nio / "DirectIntBufferU";
namespace java::nio { class DirectLongBufferRS; }
template<> constexpr auto signature<::java::nio::DirectLongBufferRS> = ::java_nio / "DirectLongBufferRS";
namespace java::nio { class DirectLongBufferRU; }
template<> constexpr auto signature<::java::nio::DirectLongBufferRU> = ::java_nio / "DirectLongBufferRU";
namespace java::nio { class DirectLongBufferS; }
template<> constexpr auto signature<::java::nio::DirectLongBufferS> = ::java_nio / "DirectLongBufferS";
namespace java::nio { class DirectLongBufferU; }
template<> constexpr auto signature<::java::nio::DirectLongBufferU> = ::java_nio / "DirectLongBufferU";
namespace java::nio { class DirectShortBufferRS; }
template<> constexpr auto signature<::java::nio::DirectShortBufferRS> = ::java_nio / "DirectShortBufferRS";
namespace java::nio { class DirectShortBufferRU; }
template<> constexpr auto signature<::java::nio::DirectShortBufferRU> = ::java_nio / "DirectShortBufferRU";
namespace java::nio { class DirectShortBufferS; }
template<> constexpr auto signature<::java::nio::DirectShortBufferS> = ::java_nio / "DirectShortBufferS";
namespace java::nio { class DirectShortBufferU; }
template<> constexpr auto signature<::java::nio::DirectShortBufferU> = ::java_nio / "DirectShortBufferU";
namespace java::nio { class DoubleBuffer; }
template<> constexpr auto signature<::java::nio::DoubleBuffer> = ::java_nio / "DoubleBuffer";
namespace java::nio { class FloatBuffer; }
template<> constexpr auto signature<::java::nio::FloatBuffer> = ::java_nio / "FloatBuffer";
namespace java::nio { class HeapByteBuffer; }
template<> constexpr auto signature<::java::nio::HeapByteBuffer> = ::java_nio / "HeapByteBuffer";
namespace java::nio { class HeapByteBufferR; }
template<> constexpr auto signature<::java::nio::HeapByteBufferR> = ::java_nio / "HeapByteBufferR";
namespace java::nio { class HeapCharBuffer; }
template<> constexpr auto signature<::java::nio::HeapCharBuffer> = ::java_nio / "HeapCharBuffer";
namespace java::nio { class HeapCharBufferR; }
template<> constexpr auto signature<::java::nio::HeapCharBufferR> = ::java_nio / "HeapCharBufferR";
namespace java::nio { class HeapDoubleBuffer; }
template<> constexpr auto signature<::java::nio::HeapDoubleBuffer> = ::java_nio / "HeapDoubleBuffer";
namespace java::nio { class HeapDoubleBufferR; }
template<> constexpr auto signature<::java::nio::HeapDoubleBufferR> = ::java_nio / "HeapDoubleBufferR";
namespace java::nio { class HeapFloatBuffer; }
template<> constexpr auto signature<::java::nio::HeapFloatBuffer> = ::java_nio / "HeapFloatBuffer";
namespace java::nio { class HeapFloatBufferR; }
template<> constexpr auto signature<::java::nio::HeapFloatBufferR> = ::java_nio / "HeapFloatBufferR";
namespace java::nio { class HeapIntBuffer; }
template<> constexpr auto signature<::java::nio::HeapIntBuffer> = ::java_nio / "HeapIntBuffer";
namespace java::nio { class HeapIntBufferR; }
template<> constexpr auto signature<::java::nio::HeapIntBufferR> = ::java_nio / "HeapIntBufferR";
namespace java::nio { class HeapLongBuffer; }
template<> constexpr auto signature<::java::nio::HeapLongBuffer> = ::java_nio / "HeapLongBuffer";
namespace java::nio { class HeapLongBufferR; }
template<> constexpr auto signature<::java::nio::HeapLongBufferR> = ::java_nio / "HeapLongBufferR";
namespace java::nio { class HeapShortBuffer; }
template<> constexpr auto signature<::java::nio::HeapShortBuffer> = ::java_nio / "HeapShortBuffer";
namespace java::nio { class HeapShortBufferR; }
template<> constexpr auto signature<::java::nio::HeapShortBufferR> = ::java_nio / "HeapShortBufferR";
namespace java::nio { class IntBuffer; }
template<> constexpr auto signature<::java::nio::IntBuffer> = ::java_nio / "IntBuffer";
namespace java::nio { class InvalidMarkException; }
template<> constexpr auto signature<::java::nio::InvalidMarkException> = ::java_nio / "InvalidMarkException";
namespace java::nio { class LongBuffer; }
template<> constexpr auto signature<::java::nio::LongBuffer> = ::java_nio / "LongBuffer";
namespace java::nio { class MappedByteBuffer; }
template<> constexpr auto signature<::java::nio::MappedByteBuffer> = ::java_nio / "MappedByteBuffer";
namespace java::nio { class ReadOnlyBufferException; }
template<> constexpr auto signature<::java::nio::ReadOnlyBufferException> = ::java_nio / "ReadOnlyBufferException";
namespace java::nio { class ShortBuffer; }
template<> constexpr auto signature<::java::nio::ShortBuffer> = ::java_nio / "ShortBuffer";
namespace java::nio { class StringCharBuffer; }
template<> constexpr auto signature<::java::nio::StringCharBuffer> = ::java_nio / "StringCharBuffer";

#endif
