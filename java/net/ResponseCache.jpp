#ifndef java_net_ResponseCache_HPP
#define java_net_ResponseCache_HPP

#include "../../jfwd_decl.hpp"

class ::java::net::ResponseCache : public jObject<::java::net::ResponseCache, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_net / "ResponseCache";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::net::CacheResponse(::java::net::URI, ::java::lang::String, ::java::util::Map)>("get"), //
		jMethod<::java::net::ResponseCache()>("getDefault"), //
		jMethod<::java::net::CacheRequest(::java::net::URI, ::java::net::URLConnection)>("put"), //
		jMethod<::jvoid(::java::net::ResponseCache)>("setDefault"), //
	};

	template<typename R = ::java::net::CacheResponse, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("get")] != -1);
		return call<R>("get", forward<Args>(args)...);
	}

	template<typename R = ::java::net::ResponseCache, typename... Args>
	static auto getDefault(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDefault")] != -1);
		return scall<R>("getDefault", forward<Args>(args)...);
	}

	template<typename R = ::java::net::CacheRequest, typename... Args>
	auto put(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("put")] != -1);
		return call<R>("put", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setDefault(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDefault")] != -1);
		return scall<R>("setDefault", forward<Args>(args)...);
	}

};

#endif
