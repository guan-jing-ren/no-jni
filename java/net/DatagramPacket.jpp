#ifndef java_net_DatagramPacket_HPP
#define java_net_DatagramPacket_HPP

#include "../../jfwd_decl.hpp"

class ::java::net::DatagramPacket : public jObject<::java::net::DatagramPacket, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_net / "DatagramPacket";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jbyte *, ::jint)>(), //
		jConstructor<::jvoid(::jbyte *, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::jbyte *, ::jint, ::jint, ::java::net::InetAddress, ::jint)>(), //
		jConstructor<::jvoid(::jbyte *, ::jint, ::jint, ::java::net::SocketAddress)>(), //
		jConstructor<::jvoid(::jbyte *, ::jint, ::java::net::InetAddress, ::jint)>(), //
		jConstructor<::jvoid(::jbyte *, ::jint, ::java::net::SocketAddress)>(), //
		jMethod<::java::net::InetAddress()>("getAddress"), //
		jMethod<::jbyte *()>("getData"), //
		jMethod<::jint()>("getLength"), //
		jMethod<::jint()>("getOffset"), //
		jMethod<::jint()>("getPort"), //
		jMethod<::java::net::SocketAddress()>("getSocketAddress"), //
		jMethod<::jvoid(::java::net::InetAddress)>("setAddress"), //
		jMethod<::jvoid(::jbyte *)>("setData"), //
		jMethod<::jvoid(::jbyte *, ::jint, ::jint)>("setData"), //
		jMethod<::jvoid(::jint)>("setLength"), //
		jMethod<::jvoid(::jint)>("setPort"), //
		jMethod<::jvoid(::java::net::SocketAddress)>("setSocketAddress"), //
	};

	template<typename R = ::java::net::InetAddress, typename... Args>
	auto getAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAddress")] != -1);
		return call<R>("getAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getData")] != -1);
		return call<R>("getData", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLength")] != -1);
		return call<R>("getLength", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOffset")] != -1);
		return call<R>("getOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPort")] != -1);
		return call<R>("getPort", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::SocketAddress, typename... Args>
	auto getSocketAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSocketAddress")] != -1);
		return call<R>("getSocketAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAddress")] != -1);
		return call<R>("setAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setData")] != -1);
		return call<R>("setData", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLength")] != -1);
		return call<R>("setLength", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPort")] != -1);
		return call<R>("setPort", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSocketAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSocketAddress")] != -1);
		return call<R>("setSocketAddress", std::forward<Args>(args)...);
	}

};

#endif
