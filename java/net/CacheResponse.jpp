#ifndef java_net_CacheResponse_HPP
#define java_net_CacheResponse_HPP

#include "../../jfwd_decl.hpp"

class ::java::net::CacheResponse : public jObject<::java::net::CacheResponse, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_net / "CacheResponse";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::io::InputStream()>("getBody"), //
		jMethod<::java::util::Map()>("getHeaders"), //
	};

	template<typename R = ::java::io::InputStream, typename... Args>
	auto getBody(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBody")] != -1);
		return call<R>("getBody", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getHeaders(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHeaders")] != -1);
		return call<R>("getHeaders", forward<Args>(args)...);
	}

};

#endif
