#ifndef java_net_Authenticator_HPP
#define java_net_Authenticator_HPP

#include "../../jfwd_decl.hpp"

class ::java::net::Authenticator : public jObject<::java::net::Authenticator, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_net / "Authenticator";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::net::PasswordAuthentication(::java::lang::String, ::java::net::InetAddress, ::jint, ::java::lang::String, ::java::lang::String, ::java::lang::String)>("requestPasswordAuthentication"), //
		jMethod<::java::net::PasswordAuthentication(::java::lang::String, ::java::net::InetAddress, ::jint, ::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::net::URL, ::java::net::Authenticator$RequestorType)>("requestPasswordAuthentication"), //
		jMethod<::java::net::PasswordAuthentication(::java::net::InetAddress, ::jint, ::java::lang::String, ::java::lang::String, ::java::lang::String)>("requestPasswordAuthentication"), //
		jMethod<::jvoid(::java::net::Authenticator)>("setDefault"), //
	};

	template<typename R = ::java::net::PasswordAuthentication, typename... Args>
	static auto requestPasswordAuthentication(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("requestPasswordAuthentication")] != -1);
		return scall<R>("requestPasswordAuthentication", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setDefault(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDefault")] != -1);
		return scall<R>("setDefault", std::forward<Args>(args)...);
	}

};

#endif
