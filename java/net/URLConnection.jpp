#ifndef java_net_URLConnection_HPP
#define java_net_URLConnection_HPP

#include "../../jfwd_decl.hpp"

class ::java::net::URLConnection : public jObject<::java::net::URLConnection, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_net / "URLConnection";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("addRequestProperty"), //
		jMethod<::jvoid()>("connect"), //
		jMethod<::jboolean()>("getAllowUserInteraction"), //
		jMethod<::jint()>("getConnectTimeout"), //
		jMethod<::java::lang::Object()>("getContent"), //
		jMethod<::java::lang::Object(::java::lang::Class *)>("getContent"), //
		jMethod<::java::lang::String()>("getContentEncoding"), //
		jMethod<::jint()>("getContentLength"), //
		jMethod<::jlong()>("getContentLengthLong"), //
		jMethod<::java::lang::String()>("getContentType"), //
		jMethod<::jlong()>("getDate"), //
		jMethod<::jboolean()>("getDefaultAllowUserInteraction"), //
		jMethod<::java::lang::String(::java::lang::String)>("getDefaultRequestProperty"), //
		jMethod<::jboolean()>("getDefaultUseCaches"), //
		jMethod<::jboolean()>("getDoInput"), //
		jMethod<::jboolean()>("getDoOutput"), //
		jMethod<::jlong()>("getExpiration"), //
		jMethod<::java::net::FileNameMap()>("getFileNameMap"), //
		jMethod<::java::lang::String(::jint)>("getHeaderField"), //
		jMethod<::java::lang::String(::java::lang::String)>("getHeaderField"), //
		jMethod<::jlong(::java::lang::String, ::jlong)>("getHeaderFieldDate"), //
		jMethod<::jint(::java::lang::String, ::jint)>("getHeaderFieldInt"), //
		jMethod<::java::lang::String(::jint)>("getHeaderFieldKey"), //
		jMethod<::jlong(::java::lang::String, ::jlong)>("getHeaderFieldLong"), //
		jMethod<::java::util::Map()>("getHeaderFields"), //
		jMethod<::jlong()>("getIfModifiedSince"), //
		jMethod<::java::io::InputStream()>("getInputStream"), //
		jMethod<::jlong()>("getLastModified"), //
		jMethod<::java::io::OutputStream()>("getOutputStream"), //
		jMethod<::java::security::Permission()>("getPermission"), //
		jMethod<::jint()>("getReadTimeout"), //
		jMethod<::java::util::Map()>("getRequestProperties"), //
		jMethod<::java::lang::String(::java::lang::String)>("getRequestProperty"), //
		jMethod<::java::net::URL()>("getURL"), //
		jMethod<::jboolean()>("getUseCaches"), //
		jMethod<::java::lang::String(::java::lang::String)>("guessContentTypeFromName"), //
		jMethod<::java::lang::String(::java::io::InputStream)>("guessContentTypeFromStream"), //
		jMethod<::jvoid(::jboolean)>("setAllowUserInteraction"), //
		jMethod<::jvoid(::jint)>("setConnectTimeout"), //
		jMethod<::jvoid(::java::net::ContentHandlerFactory)>("setContentHandlerFactory"), //
		jMethod<::jvoid(::jboolean)>("setDefaultAllowUserInteraction"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("setDefaultRequestProperty"), //
		jMethod<::jvoid(::jboolean)>("setDefaultUseCaches"), //
		jMethod<::jvoid(::jboolean)>("setDoInput"), //
		jMethod<::jvoid(::jboolean)>("setDoOutput"), //
		jMethod<::jvoid(::java::net::FileNameMap)>("setFileNameMap"), //
		jMethod<::jvoid(::jlong)>("setIfModifiedSince"), //
		jMethod<::jvoid(::jint)>("setReadTimeout"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("setRequestProperty"), //
		jMethod<::jvoid(::jboolean)>("setUseCaches"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addRequestProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addRequestProperty")] != -1);
		return call<R>("addRequestProperty", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto connect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("connect")] != -1);
		return call<R>("connect", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getAllowUserInteraction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAllowUserInteraction")] != -1);
		return call<R>("getAllowUserInteraction", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getConnectTimeout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getConnectTimeout")] != -1);
		return call<R>("getConnectTimeout", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getContent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getContent")] != -1);
		return call<R>("getContent", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getContentEncoding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getContentEncoding")] != -1);
		return call<R>("getContentEncoding", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getContentLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getContentLength")] != -1);
		return call<R>("getContentLength", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getContentLengthLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getContentLengthLong")] != -1);
		return call<R>("getContentLengthLong", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getContentType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getContentType")] != -1);
		return call<R>("getContentType", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDate")] != -1);
		return call<R>("getDate", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto getDefaultAllowUserInteraction(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDefaultAllowUserInteraction")] != -1);
		return scall<R>("getDefaultAllowUserInteraction", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getDefaultRequestProperty(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDefaultRequestProperty")] != -1);
		return scall<R>("getDefaultRequestProperty", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getDefaultUseCaches(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDefaultUseCaches")] != -1);
		return call<R>("getDefaultUseCaches", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getDoInput(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDoInput")] != -1);
		return call<R>("getDoInput", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getDoOutput(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDoOutput")] != -1);
		return call<R>("getDoOutput", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getExpiration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getExpiration")] != -1);
		return call<R>("getExpiration", forward<Args>(args)...);
	}

	template<typename R = ::java::net::FileNameMap, typename... Args>
	static auto getFileNameMap(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFileNameMap")] != -1);
		return scall<R>("getFileNameMap", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHeaderField(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHeaderField")] != -1);
		return call<R>("getHeaderField", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getHeaderFieldDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHeaderFieldDate")] != -1);
		return call<R>("getHeaderFieldDate", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHeaderFieldInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHeaderFieldInt")] != -1);
		return call<R>("getHeaderFieldInt", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHeaderFieldKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHeaderFieldKey")] != -1);
		return call<R>("getHeaderFieldKey", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getHeaderFieldLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHeaderFieldLong")] != -1);
		return call<R>("getHeaderFieldLong", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getHeaderFields(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHeaderFields")] != -1);
		return call<R>("getHeaderFields", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getIfModifiedSince(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getIfModifiedSince")] != -1);
		return call<R>("getIfModifiedSince", forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	auto getInputStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInputStream")] != -1);
		return call<R>("getInputStream", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLastModified(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLastModified")] != -1);
		return call<R>("getLastModified", forward<Args>(args)...);
	}

	template<typename R = ::java::io::OutputStream, typename... Args>
	auto getOutputStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getOutputStream")] != -1);
		return call<R>("getOutputStream", forward<Args>(args)...);
	}

	template<typename R = ::java::security::Permission, typename... Args>
	auto getPermission(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPermission")] != -1);
		return call<R>("getPermission", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getReadTimeout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getReadTimeout")] != -1);
		return call<R>("getReadTimeout", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getRequestProperties(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRequestProperties")] != -1);
		return call<R>("getRequestProperties", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRequestProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRequestProperty")] != -1);
		return call<R>("getRequestProperty", forward<Args>(args)...);
	}

	template<typename R = ::java::net::URL, typename... Args>
	auto getURL(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getURL")] != -1);
		return call<R>("getURL", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getUseCaches(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUseCaches")] != -1);
		return call<R>("getUseCaches", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto guessContentTypeFromName(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("guessContentTypeFromName")] != -1);
		return scall<R>("guessContentTypeFromName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto guessContentTypeFromStream(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("guessContentTypeFromStream")] != -1);
		return scall<R>("guessContentTypeFromStream", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAllowUserInteraction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setAllowUserInteraction")] != -1);
		return call<R>("setAllowUserInteraction", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setConnectTimeout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setConnectTimeout")] != -1);
		return call<R>("setConnectTimeout", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setContentHandlerFactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setContentHandlerFactory")] != -1);
		return scall<R>("setContentHandlerFactory", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setDefaultAllowUserInteraction(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDefaultAllowUserInteraction")] != -1);
		return scall<R>("setDefaultAllowUserInteraction", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setDefaultRequestProperty(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDefaultRequestProperty")] != -1);
		return scall<R>("setDefaultRequestProperty", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDefaultUseCaches(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDefaultUseCaches")] != -1);
		return call<R>("setDefaultUseCaches", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDoInput(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDoInput")] != -1);
		return call<R>("setDoInput", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDoOutput(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDoOutput")] != -1);
		return call<R>("setDoOutput", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setFileNameMap(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFileNameMap")] != -1);
		return scall<R>("setFileNameMap", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIfModifiedSince(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setIfModifiedSince")] != -1);
		return call<R>("setIfModifiedSince", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setReadTimeout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setReadTimeout")] != -1);
		return call<R>("setReadTimeout", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRequestProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setRequestProperty")] != -1);
		return call<R>("setRequestProperty", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUseCaches(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setUseCaches")] != -1);
		return call<R>("setUseCaches", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
