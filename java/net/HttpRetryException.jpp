#ifndef java_net_HttpRetryException_HPP
#define java_net_HttpRetryException_HPP

#include "../../jfwd_decl.hpp"

class ::java::net::HttpRetryException : public jObject<::java::net::HttpRetryException, ::java::io::IOException> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_net / "HttpRetryException";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::jint)>(), //
		jConstructor<::jvoid(::java::lang::String, ::jint, ::java::lang::String)>(), //
		jMethod<::java::lang::String()>("getLocation"), //
		jMethod<::java::lang::String()>("getReason"), //
		jMethod<::jint()>("responseCode"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocation")] != -1);
		return call<R>("getLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getReason(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReason")] != -1);
		return call<R>("getReason", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto responseCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("responseCode")] != -1);
		return call<R>("responseCode", std::forward<Args>(args)...);
	}

};

#endif
