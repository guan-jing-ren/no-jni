#ifndef java_net_HttpURLConnection_HPP
#define java_net_HttpURLConnection_HPP

#include "../../jfwd_decl.hpp"

class ::java::net::HttpURLConnection : public jObject<::java::net::HttpURLConnection, ::java::net::URLConnection> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_net / "HttpURLConnection";

	constexpr static Enume field_signatures{
		jField<::jint>("HTTP_ACCEPTED"), //
		jField<::jint>("HTTP_BAD_GATEWAY"), //
		jField<::jint>("HTTP_BAD_METHOD"), //
		jField<::jint>("HTTP_BAD_REQUEST"), //
		jField<::jint>("HTTP_CLIENT_TIMEOUT"), //
		jField<::jint>("HTTP_CONFLICT"), //
		jField<::jint>("HTTP_CREATED"), //
		jField<::jint>("HTTP_ENTITY_TOO_LARGE"), //
		jField<::jint>("HTTP_FORBIDDEN"), //
		jField<::jint>("HTTP_GATEWAY_TIMEOUT"), //
		jField<::jint>("HTTP_GONE"), //
		jField<::jint>("HTTP_INTERNAL_ERROR"), //
		jField<::jint>("HTTP_LENGTH_REQUIRED"), //
		jField<::jint>("HTTP_MOVED_PERM"), //
		jField<::jint>("HTTP_MOVED_TEMP"), //
		jField<::jint>("HTTP_MULT_CHOICE"), //
		jField<::jint>("HTTP_NOT_ACCEPTABLE"), //
		jField<::jint>("HTTP_NOT_AUTHORITATIVE"), //
		jField<::jint>("HTTP_NOT_FOUND"), //
		jField<::jint>("HTTP_NOT_IMPLEMENTED"), //
		jField<::jint>("HTTP_NOT_MODIFIED"), //
		jField<::jint>("HTTP_NO_CONTENT"), //
		jField<::jint>("HTTP_OK"), //
		jField<::jint>("HTTP_PARTIAL"), //
		jField<::jint>("HTTP_PAYMENT_REQUIRED"), //
		jField<::jint>("HTTP_PRECON_FAILED"), //
		jField<::jint>("HTTP_PROXY_AUTH"), //
		jField<::jint>("HTTP_REQ_TOO_LONG"), //
		jField<::jint>("HTTP_RESET"), //
		jField<::jint>("HTTP_SEE_OTHER"), //
		jField<::jint>("HTTP_SERVER_ERROR"), //
		jField<::jint>("HTTP_UNAUTHORIZED"), //
		jField<::jint>("HTTP_UNAVAILABLE"), //
		jField<::jint>("HTTP_UNSUPPORTED_TYPE"), //
		jField<::jint>("HTTP_USE_PROXY"), //
		jField<::jint>("HTTP_VERSION"), //
	};

	template<typename F = ::jint>
	static auto HTTP_ACCEPTED() {
		static_assert(field_signatures[jField<F>("HTTP_ACCEPTED")] != -1);
		return sat<F>("HTTP_ACCEPTED");
	}

	template<typename F = ::jint>
	static auto HTTP_BAD_GATEWAY() {
		static_assert(field_signatures[jField<F>("HTTP_BAD_GATEWAY")] != -1);
		return sat<F>("HTTP_BAD_GATEWAY");
	}

	template<typename F = ::jint>
	static auto HTTP_BAD_METHOD() {
		static_assert(field_signatures[jField<F>("HTTP_BAD_METHOD")] != -1);
		return sat<F>("HTTP_BAD_METHOD");
	}

	template<typename F = ::jint>
	static auto HTTP_BAD_REQUEST() {
		static_assert(field_signatures[jField<F>("HTTP_BAD_REQUEST")] != -1);
		return sat<F>("HTTP_BAD_REQUEST");
	}

	template<typename F = ::jint>
	static auto HTTP_CLIENT_TIMEOUT() {
		static_assert(field_signatures[jField<F>("HTTP_CLIENT_TIMEOUT")] != -1);
		return sat<F>("HTTP_CLIENT_TIMEOUT");
	}

	template<typename F = ::jint>
	static auto HTTP_CONFLICT() {
		static_assert(field_signatures[jField<F>("HTTP_CONFLICT")] != -1);
		return sat<F>("HTTP_CONFLICT");
	}

	template<typename F = ::jint>
	static auto HTTP_CREATED() {
		static_assert(field_signatures[jField<F>("HTTP_CREATED")] != -1);
		return sat<F>("HTTP_CREATED");
	}

	template<typename F = ::jint>
	static auto HTTP_ENTITY_TOO_LARGE() {
		static_assert(field_signatures[jField<F>("HTTP_ENTITY_TOO_LARGE")] != -1);
		return sat<F>("HTTP_ENTITY_TOO_LARGE");
	}

	template<typename F = ::jint>
	static auto HTTP_FORBIDDEN() {
		static_assert(field_signatures[jField<F>("HTTP_FORBIDDEN")] != -1);
		return sat<F>("HTTP_FORBIDDEN");
	}

	template<typename F = ::jint>
	static auto HTTP_GATEWAY_TIMEOUT() {
		static_assert(field_signatures[jField<F>("HTTP_GATEWAY_TIMEOUT")] != -1);
		return sat<F>("HTTP_GATEWAY_TIMEOUT");
	}

	template<typename F = ::jint>
	static auto HTTP_GONE() {
		static_assert(field_signatures[jField<F>("HTTP_GONE")] != -1);
		return sat<F>("HTTP_GONE");
	}

	template<typename F = ::jint>
	static auto HTTP_INTERNAL_ERROR() {
		static_assert(field_signatures[jField<F>("HTTP_INTERNAL_ERROR")] != -1);
		return sat<F>("HTTP_INTERNAL_ERROR");
	}

	template<typename F = ::jint>
	static auto HTTP_LENGTH_REQUIRED() {
		static_assert(field_signatures[jField<F>("HTTP_LENGTH_REQUIRED")] != -1);
		return sat<F>("HTTP_LENGTH_REQUIRED");
	}

	template<typename F = ::jint>
	static auto HTTP_MOVED_PERM() {
		static_assert(field_signatures[jField<F>("HTTP_MOVED_PERM")] != -1);
		return sat<F>("HTTP_MOVED_PERM");
	}

	template<typename F = ::jint>
	static auto HTTP_MOVED_TEMP() {
		static_assert(field_signatures[jField<F>("HTTP_MOVED_TEMP")] != -1);
		return sat<F>("HTTP_MOVED_TEMP");
	}

	template<typename F = ::jint>
	static auto HTTP_MULT_CHOICE() {
		static_assert(field_signatures[jField<F>("HTTP_MULT_CHOICE")] != -1);
		return sat<F>("HTTP_MULT_CHOICE");
	}

	template<typename F = ::jint>
	static auto HTTP_NOT_ACCEPTABLE() {
		static_assert(field_signatures[jField<F>("HTTP_NOT_ACCEPTABLE")] != -1);
		return sat<F>("HTTP_NOT_ACCEPTABLE");
	}

	template<typename F = ::jint>
	static auto HTTP_NOT_AUTHORITATIVE() {
		static_assert(field_signatures[jField<F>("HTTP_NOT_AUTHORITATIVE")] != -1);
		return sat<F>("HTTP_NOT_AUTHORITATIVE");
	}

	template<typename F = ::jint>
	static auto HTTP_NOT_FOUND() {
		static_assert(field_signatures[jField<F>("HTTP_NOT_FOUND")] != -1);
		return sat<F>("HTTP_NOT_FOUND");
	}

	template<typename F = ::jint>
	static auto HTTP_NOT_IMPLEMENTED() {
		static_assert(field_signatures[jField<F>("HTTP_NOT_IMPLEMENTED")] != -1);
		return sat<F>("HTTP_NOT_IMPLEMENTED");
	}

	template<typename F = ::jint>
	static auto HTTP_NOT_MODIFIED() {
		static_assert(field_signatures[jField<F>("HTTP_NOT_MODIFIED")] != -1);
		return sat<F>("HTTP_NOT_MODIFIED");
	}

	template<typename F = ::jint>
	static auto HTTP_NO_CONTENT() {
		static_assert(field_signatures[jField<F>("HTTP_NO_CONTENT")] != -1);
		return sat<F>("HTTP_NO_CONTENT");
	}

	template<typename F = ::jint>
	static auto HTTP_OK() {
		static_assert(field_signatures[jField<F>("HTTP_OK")] != -1);
		return sat<F>("HTTP_OK");
	}

	template<typename F = ::jint>
	static auto HTTP_PARTIAL() {
		static_assert(field_signatures[jField<F>("HTTP_PARTIAL")] != -1);
		return sat<F>("HTTP_PARTIAL");
	}

	template<typename F = ::jint>
	static auto HTTP_PAYMENT_REQUIRED() {
		static_assert(field_signatures[jField<F>("HTTP_PAYMENT_REQUIRED")] != -1);
		return sat<F>("HTTP_PAYMENT_REQUIRED");
	}

	template<typename F = ::jint>
	static auto HTTP_PRECON_FAILED() {
		static_assert(field_signatures[jField<F>("HTTP_PRECON_FAILED")] != -1);
		return sat<F>("HTTP_PRECON_FAILED");
	}

	template<typename F = ::jint>
	static auto HTTP_PROXY_AUTH() {
		static_assert(field_signatures[jField<F>("HTTP_PROXY_AUTH")] != -1);
		return sat<F>("HTTP_PROXY_AUTH");
	}

	template<typename F = ::jint>
	static auto HTTP_REQ_TOO_LONG() {
		static_assert(field_signatures[jField<F>("HTTP_REQ_TOO_LONG")] != -1);
		return sat<F>("HTTP_REQ_TOO_LONG");
	}

	template<typename F = ::jint>
	static auto HTTP_RESET() {
		static_assert(field_signatures[jField<F>("HTTP_RESET")] != -1);
		return sat<F>("HTTP_RESET");
	}

	template<typename F = ::jint>
	static auto HTTP_SEE_OTHER() {
		static_assert(field_signatures[jField<F>("HTTP_SEE_OTHER")] != -1);
		return sat<F>("HTTP_SEE_OTHER");
	}

	template<typename F = ::jint>
	static auto HTTP_SERVER_ERROR() {
		static_assert(field_signatures[jField<F>("HTTP_SERVER_ERROR")] != -1);
		return sat<F>("HTTP_SERVER_ERROR");
	}

	template<typename F = ::jint>
	static auto HTTP_UNAUTHORIZED() {
		static_assert(field_signatures[jField<F>("HTTP_UNAUTHORIZED")] != -1);
		return sat<F>("HTTP_UNAUTHORIZED");
	}

	template<typename F = ::jint>
	static auto HTTP_UNAVAILABLE() {
		static_assert(field_signatures[jField<F>("HTTP_UNAVAILABLE")] != -1);
		return sat<F>("HTTP_UNAVAILABLE");
	}

	template<typename F = ::jint>
	static auto HTTP_UNSUPPORTED_TYPE() {
		static_assert(field_signatures[jField<F>("HTTP_UNSUPPORTED_TYPE")] != -1);
		return sat<F>("HTTP_UNSUPPORTED_TYPE");
	}

	template<typename F = ::jint>
	static auto HTTP_USE_PROXY() {
		static_assert(field_signatures[jField<F>("HTTP_USE_PROXY")] != -1);
		return sat<F>("HTTP_USE_PROXY");
	}

	template<typename F = ::jint>
	static auto HTTP_VERSION() {
		static_assert(field_signatures[jField<F>("HTTP_VERSION")] != -1);
		return sat<F>("HTTP_VERSION");
	}

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("disconnect"), //
		jMethod<::java::io::InputStream()>("getErrorStream"), //
		jMethod<::jboolean()>("getFollowRedirects"), //
		jMethod<::java::lang::String(::jint)>("getHeaderField"), //
		jMethod<::jlong(::java::lang::String, ::jlong)>("getHeaderFieldDate"), //
		jMethod<::java::lang::String(::jint)>("getHeaderFieldKey"), //
		jMethod<::jboolean()>("getInstanceFollowRedirects"), //
		jMethod<::java::security::Permission()>("getPermission"), //
		jMethod<::java::lang::String()>("getRequestMethod"), //
		jMethod<::jint()>("getResponseCode"), //
		jMethod<::java::lang::String()>("getResponseMessage"), //
		jMethod<::jvoid(::jint)>("setChunkedStreamingMode"), //
		jMethod<::jvoid(::jint)>("setFixedLengthStreamingMode"), //
		jMethod<::jvoid(::jlong)>("setFixedLengthStreamingMode"), //
		jMethod<::jvoid(::jboolean)>("setFollowRedirects"), //
		jMethod<::jvoid(::jboolean)>("setInstanceFollowRedirects"), //
		jMethod<::jvoid(::java::lang::String)>("setRequestMethod"), //
		jMethod<::jboolean()>("usingProxy"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto disconnect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("disconnect")] != -1);
		return call<R>("disconnect", forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	auto getErrorStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getErrorStream")] != -1);
		return call<R>("getErrorStream", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto getFollowRedirects(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFollowRedirects")] != -1);
		return scall<R>("getFollowRedirects", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHeaderField(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHeaderField")] != -1);
		return call<R>("getHeaderField", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getHeaderFieldDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHeaderFieldDate")] != -1);
		return call<R>("getHeaderFieldDate", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHeaderFieldKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHeaderFieldKey")] != -1);
		return call<R>("getHeaderFieldKey", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getInstanceFollowRedirects(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInstanceFollowRedirects")] != -1);
		return call<R>("getInstanceFollowRedirects", forward<Args>(args)...);
	}

	template<typename R = ::java::security::Permission, typename... Args>
	auto getPermission(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPermission")] != -1);
		return call<R>("getPermission", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRequestMethod(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRequestMethod")] != -1);
		return call<R>("getRequestMethod", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getResponseCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getResponseCode")] != -1);
		return call<R>("getResponseCode", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getResponseMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getResponseMessage")] != -1);
		return call<R>("getResponseMessage", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setChunkedStreamingMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setChunkedStreamingMode")] != -1);
		return call<R>("setChunkedStreamingMode", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFixedLengthStreamingMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFixedLengthStreamingMode")] != -1);
		return call<R>("setFixedLengthStreamingMode", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setFollowRedirects(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFollowRedirects")] != -1);
		return scall<R>("setFollowRedirects", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInstanceFollowRedirects(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setInstanceFollowRedirects")] != -1);
		return call<R>("setInstanceFollowRedirects", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRequestMethod(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setRequestMethod")] != -1);
		return call<R>("setRequestMethod", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto usingProxy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("usingProxy")] != -1);
		return call<R>("usingProxy", forward<Args>(args)...);
	}

};

#endif
