#ifndef java_net_HttpCookie_HPP
#define java_net_HttpCookie_HPP

#include "../../jfwd_decl.hpp"

class ::java::net::HttpCookie : public jObject<::java::net::HttpCookie, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_net / "HttpCookie";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String)>(), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jboolean(::java::lang::String, ::java::lang::String)>("domainMatches"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::String()>("getComment"), //
		jMethod<::java::lang::String()>("getCommentURL"), //
		jMethod<::jboolean()>("getDiscard"), //
		jMethod<::java::lang::String()>("getDomain"), //
		jMethod<::jlong()>("getMaxAge"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::lang::String()>("getPath"), //
		jMethod<::java::lang::String()>("getPortlist"), //
		jMethod<::jboolean()>("getSecure"), //
		jMethod<::java::lang::String()>("getValue"), //
		jMethod<::jint()>("getVersion"), //
		jMethod<::jboolean()>("hasExpired"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isHttpOnly"), //
		jMethod<::java::util::List(::java::lang::String)>("parse"), //
		jMethod<::jvoid(::java::lang::String)>("setComment"), //
		jMethod<::jvoid(::java::lang::String)>("setCommentURL"), //
		jMethod<::jvoid(::jboolean)>("setDiscard"), //
		jMethod<::jvoid(::java::lang::String)>("setDomain"), //
		jMethod<::jvoid(::jboolean)>("setHttpOnly"), //
		jMethod<::jvoid(::jlong)>("setMaxAge"), //
		jMethod<::jvoid(::java::lang::String)>("setPath"), //
		jMethod<::jvoid(::java::lang::String)>("setPortlist"), //
		jMethod<::jvoid(::jboolean)>("setSecure"), //
		jMethod<::jvoid(::java::lang::String)>("setValue"), //
		jMethod<::jvoid(::jint)>("setVersion"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto domainMatches(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("domainMatches")] != -1);
		return scall<R>("domainMatches", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getComment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getComment")] != -1);
		return call<R>("getComment", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCommentURL(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCommentURL")] != -1);
		return call<R>("getCommentURL", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getDiscard(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDiscard")] != -1);
		return call<R>("getDiscard", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDomain(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDomain")] != -1);
		return call<R>("getDomain", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getMaxAge(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaxAge")] != -1);
		return call<R>("getMaxAge", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPath")] != -1);
		return call<R>("getPath", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPortlist(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPortlist")] != -1);
		return call<R>("getPortlist", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getSecure(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSecure")] != -1);
		return call<R>("getSecure", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getVersion")] != -1);
		return call<R>("getVersion", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasExpired(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hasExpired")] != -1);
		return call<R>("hasExpired", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isHttpOnly(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isHttpOnly")] != -1);
		return call<R>("isHttpOnly", forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	static auto parse(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("parse")] != -1);
		return scall<R>("parse", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setComment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setComment")] != -1);
		return call<R>("setComment", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCommentURL(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCommentURL")] != -1);
		return call<R>("setCommentURL", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDiscard(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDiscard")] != -1);
		return call<R>("setDiscard", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDomain(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDomain")] != -1);
		return call<R>("setDomain", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHttpOnly(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setHttpOnly")] != -1);
		return call<R>("setHttpOnly", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaxAge(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMaxAge")] != -1);
		return call<R>("setMaxAge", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPath")] != -1);
		return call<R>("setPath", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPortlist(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPortlist")] != -1);
		return call<R>("setPortlist", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSecure(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSecure")] != -1);
		return call<R>("setSecure", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setValue")] != -1);
		return call<R>("setValue", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setVersion")] != -1);
		return call<R>("setVersion", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
