#ifndef java_net_DatagramSocket_HPP
#define java_net_DatagramSocket_HPP

#include "../../jfwd_decl.hpp"

class ::java::net::DatagramSocket : public jObject<::java::net::DatagramSocket, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_net / "DatagramSocket";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint)>(), //
		jConstructor<::jvoid(::jint, ::java::net::InetAddress)>(), //
		jConstructor<::jvoid(::java::net::SocketAddress)>(), //
		jMethod<::jvoid(::java::net::SocketAddress)>("bind"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::jvoid(::java::net::InetAddress, ::jint)>("connect"), //
		jMethod<::jvoid(::java::net::SocketAddress)>("connect"), //
		jMethod<::jvoid()>("disconnect"), //
		jMethod<::jboolean()>("getBroadcast"), //
		jMethod<::java::nio::channels::DatagramChannel()>("getChannel"), //
		jMethod<::java::net::InetAddress()>("getInetAddress"), //
		jMethod<::java::net::InetAddress()>("getLocalAddress"), //
		jMethod<::jint()>("getLocalPort"), //
		jMethod<::java::net::SocketAddress()>("getLocalSocketAddress"), //
		jMethod<::jint()>("getPort"), //
		jMethod<::jint()>("getReceiveBufferSize"), //
		jMethod<::java::net::SocketAddress()>("getRemoteSocketAddress"), //
		jMethod<::jboolean()>("getReuseAddress"), //
		jMethod<::jint()>("getSendBufferSize"), //
		jMethod<::jint()>("getSoTimeout"), //
		jMethod<::jint()>("getTrafficClass"), //
		jMethod<::jboolean()>("isBound"), //
		jMethod<::jboolean()>("isClosed"), //
		jMethod<::jboolean()>("isConnected"), //
		jMethod<::jvoid(::java::net::DatagramPacket)>("receive"), //
		jMethod<::jvoid(::java::net::DatagramPacket)>("send"), //
		jMethod<::jvoid(::jboolean)>("setBroadcast"), //
		jMethod<::jvoid(::java::net::DatagramSocketImplFactory)>("setDatagramSocketImplFactory"), //
		jMethod<::jvoid(::jint)>("setReceiveBufferSize"), //
		jMethod<::jvoid(::jboolean)>("setReuseAddress"), //
		jMethod<::jvoid(::jint)>("setSendBufferSize"), //
		jMethod<::jvoid(::jint)>("setSoTimeout"), //
		jMethod<::jvoid(::jint)>("setTrafficClass"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto bind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("bind")] != -1);
		return call<R>("bind", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto connect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("connect")] != -1);
		return call<R>("connect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto disconnect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("disconnect")] != -1);
		return call<R>("disconnect", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getBroadcast(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBroadcast")] != -1);
		return call<R>("getBroadcast", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::DatagramChannel, typename... Args>
	auto getChannel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChannel")] != -1);
		return call<R>("getChannel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::InetAddress, typename... Args>
	auto getInetAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInetAddress")] != -1);
		return call<R>("getInetAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::InetAddress, typename... Args>
	auto getLocalAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalAddress")] != -1);
		return call<R>("getLocalAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLocalPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalPort")] != -1);
		return call<R>("getLocalPort", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::SocketAddress, typename... Args>
	auto getLocalSocketAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalSocketAddress")] != -1);
		return call<R>("getLocalSocketAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPort")] != -1);
		return call<R>("getPort", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getReceiveBufferSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReceiveBufferSize")] != -1);
		return call<R>("getReceiveBufferSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::SocketAddress, typename... Args>
	auto getRemoteSocketAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRemoteSocketAddress")] != -1);
		return call<R>("getRemoteSocketAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getReuseAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReuseAddress")] != -1);
		return call<R>("getReuseAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSendBufferSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSendBufferSize")] != -1);
		return call<R>("getSendBufferSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSoTimeout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSoTimeout")] != -1);
		return call<R>("getSoTimeout", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTrafficClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTrafficClass")] != -1);
		return call<R>("getTrafficClass", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isBound(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isBound")] != -1);
		return call<R>("isBound", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isClosed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isClosed")] != -1);
		return call<R>("isClosed", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isConnected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isConnected")] != -1);
		return call<R>("isConnected", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto receive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("receive")] != -1);
		return call<R>("receive", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto send(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("send")] != -1);
		return call<R>("send", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBroadcast(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBroadcast")] != -1);
		return call<R>("setBroadcast", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setDatagramSocketImplFactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDatagramSocketImplFactory")] != -1);
		return scall<R>("setDatagramSocketImplFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setReceiveBufferSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setReceiveBufferSize")] != -1);
		return call<R>("setReceiveBufferSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setReuseAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setReuseAddress")] != -1);
		return call<R>("setReuseAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSendBufferSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSendBufferSize")] != -1);
		return call<R>("setSendBufferSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSoTimeout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSoTimeout")] != -1);
		return call<R>("setSoTimeout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTrafficClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTrafficClass")] != -1);
		return call<R>("setTrafficClass", std::forward<Args>(args)...);
	}

};

#endif
