#ifndef java_net_Socket_HPP
#define java_net_Socket_HPP

#include "../../jfwd_decl.hpp"

class ::java::net::Socket : public jObject<::java::net::Socket, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_net / "Socket";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::String, ::jint)>(), //
		jConstructor<::jvoid(::java::lang::String, ::jint, ::java::net::InetAddress, ::jint)>(), //
		jConstructor<::jvoid(::java::lang::String, ::jint, ::jboolean)>(), //
		jConstructor<::jvoid(::java::net::InetAddress, ::jint)>(), //
		jConstructor<::jvoid(::java::net::InetAddress, ::jint, ::java::net::InetAddress, ::jint)>(), //
		jConstructor<::jvoid(::java::net::InetAddress, ::jint, ::jboolean)>(), //
		jConstructor<::jvoid(::java::net::Proxy)>(), //
		jMethod<::jvoid(::java::net::SocketAddress)>("bind"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::jvoid(::java::net::SocketAddress)>("connect"), //
		jMethod<::jvoid(::java::net::SocketAddress, ::jint)>("connect"), //
		jMethod<::java::nio::channels::SocketChannel()>("getChannel"), //
		jMethod<::java::net::InetAddress()>("getInetAddress"), //
		jMethod<::java::io::InputStream()>("getInputStream"), //
		jMethod<::jboolean()>("getKeepAlive"), //
		jMethod<::java::net::InetAddress()>("getLocalAddress"), //
		jMethod<::jint()>("getLocalPort"), //
		jMethod<::java::net::SocketAddress()>("getLocalSocketAddress"), //
		jMethod<::jboolean()>("getOOBInline"), //
		jMethod<::java::io::OutputStream()>("getOutputStream"), //
		jMethod<::jint()>("getPort"), //
		jMethod<::jint()>("getReceiveBufferSize"), //
		jMethod<::java::net::SocketAddress()>("getRemoteSocketAddress"), //
		jMethod<::jboolean()>("getReuseAddress"), //
		jMethod<::jint()>("getSendBufferSize"), //
		jMethod<::jint()>("getSoLinger"), //
		jMethod<::jint()>("getSoTimeout"), //
		jMethod<::jboolean()>("getTcpNoDelay"), //
		jMethod<::jint()>("getTrafficClass"), //
		jMethod<::jboolean()>("isBound"), //
		jMethod<::jboolean()>("isClosed"), //
		jMethod<::jboolean()>("isConnected"), //
		jMethod<::jboolean()>("isInputShutdown"), //
		jMethod<::jboolean()>("isOutputShutdown"), //
		jMethod<::jvoid(::jint)>("sendUrgentData"), //
		jMethod<::jvoid(::jboolean)>("setKeepAlive"), //
		jMethod<::jvoid(::jboolean)>("setOOBInline"), //
		jMethod<::jvoid(::jint, ::jint, ::jint)>("setPerformancePreferences"), //
		jMethod<::jvoid(::jint)>("setReceiveBufferSize"), //
		jMethod<::jvoid(::jboolean)>("setReuseAddress"), //
		jMethod<::jvoid(::jint)>("setSendBufferSize"), //
		jMethod<::jvoid(::jboolean, ::jint)>("setSoLinger"), //
		jMethod<::jvoid(::jint)>("setSoTimeout"), //
		jMethod<::jvoid(::java::net::SocketImplFactory)>("setSocketImplFactory"), //
		jMethod<::jvoid(::jboolean)>("setTcpNoDelay"), //
		jMethod<::jvoid(::jint)>("setTrafficClass"), //
		jMethod<::jvoid()>("shutdownInput"), //
		jMethod<::jvoid()>("shutdownOutput"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto bind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("bind")] != -1);
		return call<R>("bind", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("close")] != -1);
		return call<R>("close", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto connect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("connect")] != -1);
		return call<R>("connect", forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::SocketChannel, typename... Args>
	auto getChannel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getChannel")] != -1);
		return call<R>("getChannel", forward<Args>(args)...);
	}

	template<typename R = ::java::net::InetAddress, typename... Args>
	auto getInetAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInetAddress")] != -1);
		return call<R>("getInetAddress", forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	auto getInputStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInputStream")] != -1);
		return call<R>("getInputStream", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getKeepAlive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getKeepAlive")] != -1);
		return call<R>("getKeepAlive", forward<Args>(args)...);
	}

	template<typename R = ::java::net::InetAddress, typename... Args>
	auto getLocalAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLocalAddress")] != -1);
		return call<R>("getLocalAddress", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLocalPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLocalPort")] != -1);
		return call<R>("getLocalPort", forward<Args>(args)...);
	}

	template<typename R = ::java::net::SocketAddress, typename... Args>
	auto getLocalSocketAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLocalSocketAddress")] != -1);
		return call<R>("getLocalSocketAddress", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getOOBInline(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getOOBInline")] != -1);
		return call<R>("getOOBInline", forward<Args>(args)...);
	}

	template<typename R = ::java::io::OutputStream, typename... Args>
	auto getOutputStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getOutputStream")] != -1);
		return call<R>("getOutputStream", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPort")] != -1);
		return call<R>("getPort", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getReceiveBufferSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getReceiveBufferSize")] != -1);
		return call<R>("getReceiveBufferSize", forward<Args>(args)...);
	}

	template<typename R = ::java::net::SocketAddress, typename... Args>
	auto getRemoteSocketAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRemoteSocketAddress")] != -1);
		return call<R>("getRemoteSocketAddress", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getReuseAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getReuseAddress")] != -1);
		return call<R>("getReuseAddress", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSendBufferSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSendBufferSize")] != -1);
		return call<R>("getSendBufferSize", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSoLinger(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSoLinger")] != -1);
		return call<R>("getSoLinger", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSoTimeout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSoTimeout")] != -1);
		return call<R>("getSoTimeout", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getTcpNoDelay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTcpNoDelay")] != -1);
		return call<R>("getTcpNoDelay", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTrafficClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTrafficClass")] != -1);
		return call<R>("getTrafficClass", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isBound(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isBound")] != -1);
		return call<R>("isBound", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isClosed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isClosed")] != -1);
		return call<R>("isClosed", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isConnected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isConnected")] != -1);
		return call<R>("isConnected", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isInputShutdown(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isInputShutdown")] != -1);
		return call<R>("isInputShutdown", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isOutputShutdown(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isOutputShutdown")] != -1);
		return call<R>("isOutputShutdown", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto sendUrgentData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("sendUrgentData")] != -1);
		return call<R>("sendUrgentData", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setKeepAlive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setKeepAlive")] != -1);
		return call<R>("setKeepAlive", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOOBInline(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setOOBInline")] != -1);
		return call<R>("setOOBInline", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPerformancePreferences(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPerformancePreferences")] != -1);
		return call<R>("setPerformancePreferences", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setReceiveBufferSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setReceiveBufferSize")] != -1);
		return call<R>("setReceiveBufferSize", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setReuseAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setReuseAddress")] != -1);
		return call<R>("setReuseAddress", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSendBufferSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSendBufferSize")] != -1);
		return call<R>("setSendBufferSize", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSoLinger(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSoLinger")] != -1);
		return call<R>("setSoLinger", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSoTimeout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSoTimeout")] != -1);
		return call<R>("setSoTimeout", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setSocketImplFactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSocketImplFactory")] != -1);
		return scall<R>("setSocketImplFactory", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTcpNoDelay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setTcpNoDelay")] != -1);
		return call<R>("setTcpNoDelay", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTrafficClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setTrafficClass")] != -1);
		return call<R>("setTrafficClass", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto shutdownInput(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("shutdownInput")] != -1);
		return call<R>("shutdownInput", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto shutdownOutput(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("shutdownOutput")] != -1);
		return call<R>("shutdownOutput", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
