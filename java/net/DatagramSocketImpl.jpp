#ifndef java_net_DatagramSocketImpl_HPP
#define java_net_DatagramSocketImpl_HPP

#include "../../jfwd_decl.hpp"

class ::java::net::DatagramSocketImpl : public jObject<::java::net::DatagramSocketImpl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_net / "DatagramSocketImpl";

	constexpr static Enume field_signatures{
		jField<::jint>("IP_MULTICAST_IF"), //
		jField<::jint>("IP_MULTICAST_IF2"), //
		jField<::jint>("IP_MULTICAST_LOOP"), //
		jField<::jint>("IP_TOS"), //
		jField<::jint>("SO_BINDADDR"), //
		jField<::jint>("SO_BROADCAST"), //
		jField<::jint>("SO_KEEPALIVE"), //
		jField<::jint>("SO_LINGER"), //
		jField<::jint>("SO_OOBINLINE"), //
		jField<::jint>("SO_RCVBUF"), //
		jField<::jint>("SO_REUSEADDR"), //
		jField<::jint>("SO_SNDBUF"), //
		jField<::jint>("SO_TIMEOUT"), //
		jField<::jint>("TCP_NODELAY"), //
	};

	template<typename F = ::jint>
	static auto IP_MULTICAST_IF() {
		static_assert(field_signatures[jField<F>("IP_MULTICAST_IF")] != -1);
		return sat<F>("IP_MULTICAST_IF");
	}

	template<typename F = ::jint>
	static auto IP_MULTICAST_IF2() {
		static_assert(field_signatures[jField<F>("IP_MULTICAST_IF2")] != -1);
		return sat<F>("IP_MULTICAST_IF2");
	}

	template<typename F = ::jint>
	static auto IP_MULTICAST_LOOP() {
		static_assert(field_signatures[jField<F>("IP_MULTICAST_LOOP")] != -1);
		return sat<F>("IP_MULTICAST_LOOP");
	}

	template<typename F = ::jint>
	static auto IP_TOS() {
		static_assert(field_signatures[jField<F>("IP_TOS")] != -1);
		return sat<F>("IP_TOS");
	}

	template<typename F = ::jint>
	static auto SO_BINDADDR() {
		static_assert(field_signatures[jField<F>("SO_BINDADDR")] != -1);
		return sat<F>("SO_BINDADDR");
	}

	template<typename F = ::jint>
	static auto SO_BROADCAST() {
		static_assert(field_signatures[jField<F>("SO_BROADCAST")] != -1);
		return sat<F>("SO_BROADCAST");
	}

	template<typename F = ::jint>
	static auto SO_KEEPALIVE() {
		static_assert(field_signatures[jField<F>("SO_KEEPALIVE")] != -1);
		return sat<F>("SO_KEEPALIVE");
	}

	template<typename F = ::jint>
	static auto SO_LINGER() {
		static_assert(field_signatures[jField<F>("SO_LINGER")] != -1);
		return sat<F>("SO_LINGER");
	}

	template<typename F = ::jint>
	static auto SO_OOBINLINE() {
		static_assert(field_signatures[jField<F>("SO_OOBINLINE")] != -1);
		return sat<F>("SO_OOBINLINE");
	}

	template<typename F = ::jint>
	static auto SO_RCVBUF() {
		static_assert(field_signatures[jField<F>("SO_RCVBUF")] != -1);
		return sat<F>("SO_RCVBUF");
	}

	template<typename F = ::jint>
	static auto SO_REUSEADDR() {
		static_assert(field_signatures[jField<F>("SO_REUSEADDR")] != -1);
		return sat<F>("SO_REUSEADDR");
	}

	template<typename F = ::jint>
	static auto SO_SNDBUF() {
		static_assert(field_signatures[jField<F>("SO_SNDBUF")] != -1);
		return sat<F>("SO_SNDBUF");
	}

	template<typename F = ::jint>
	static auto SO_TIMEOUT() {
		static_assert(field_signatures[jField<F>("SO_TIMEOUT")] != -1);
		return sat<F>("SO_TIMEOUT");
	}

	template<typename F = ::jint>
	static auto TCP_NODELAY() {
		static_assert(field_signatures[jField<F>("TCP_NODELAY")] != -1);
		return sat<F>("TCP_NODELAY");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::Object(::jint)>("getOption"), //
		jMethod<::jvoid(::jint, ::java::lang::Object)>("setOption"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto getOption(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOption")] != -1);
		return call<R>("getOption", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOption(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOption")] != -1);
		return call<R>("setOption", std::forward<Args>(args)...);
	}

};

#endif
