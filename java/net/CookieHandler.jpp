#ifndef java_net_CookieHandler_HPP
#define java_net_CookieHandler_HPP

#include "../../jfwd_decl.hpp"

class ::java::net::CookieHandler : public jObject<::java::net::CookieHandler, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_net / "CookieHandler";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::util::Map(::java::net::URI, ::java::util::Map)>("get"), //
		jMethod<::java::net::CookieHandler()>("getDefault"), //
		jMethod<::jvoid(::java::net::URI, ::java::util::Map)>("put"), //
		jMethod<::jvoid(::java::net::CookieHandler)>("setDefault"), //
	};

	template<typename R = ::java::util::Map, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::CookieHandler, typename... Args>
	static auto getDefault(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefault")] != -1);
		return scall<R>("getDefault", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto put(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("put")] != -1);
		return call<R>("put", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setDefault(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDefault")] != -1);
		return scall<R>("setDefault", std::forward<Args>(args)...);
	}

};

#endif
