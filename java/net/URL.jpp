#ifndef java_net_URL_HPP
#define java_net_URL_HPP

#include "../../jfwd_decl.hpp"

class ::java::net::URL : public jObject<::java::net::URL, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_net / "URL";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::jint, ::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::jint, ::java::lang::String, ::java::net::URLStreamHandler)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String)>(), //
		jConstructor<::jvoid(::java::net::URL, ::java::lang::String)>(), //
		jConstructor<::jvoid(::java::net::URL, ::java::lang::String, ::java::net::URLStreamHandler)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::String()>("getAuthority"), //
		jMethod<::java::lang::Object()>("getContent"), //
		jMethod<::java::lang::Object(::java::lang::Class *)>("getContent"), //
		jMethod<::jint()>("getDefaultPort"), //
		jMethod<::java::lang::String()>("getFile"), //
		jMethod<::java::lang::String()>("getHost"), //
		jMethod<::java::lang::String()>("getPath"), //
		jMethod<::jint()>("getPort"), //
		jMethod<::java::lang::String()>("getProtocol"), //
		jMethod<::java::lang::String()>("getQuery"), //
		jMethod<::java::lang::String()>("getRef"), //
		jMethod<::java::lang::String()>("getUserInfo"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::net::URLConnection()>("openConnection"), //
		jMethod<::java::net::URLConnection(::java::net::Proxy)>("openConnection"), //
		jMethod<::java::io::InputStream()>("openStream"), //
		jMethod<::jboolean(::java::net::URL)>("sameFile"), //
		jMethod<::jvoid(::java::net::URLStreamHandlerFactory)>("setURLStreamHandlerFactory"), //
		jMethod<::java::lang::String()>("toExternalForm"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::net::URI()>("toURI"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAuthority(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAuthority")] != -1);
		return call<R>("getAuthority", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getContent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContent")] != -1);
		return call<R>("getContent", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDefaultPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultPort")] != -1);
		return call<R>("getDefaultPort", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFile")] != -1);
		return call<R>("getFile", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHost(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHost")] != -1);
		return call<R>("getHost", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPath")] != -1);
		return call<R>("getPath", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPort")] != -1);
		return call<R>("getPort", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getProtocol(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProtocol")] != -1);
		return call<R>("getProtocol", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getQuery(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getQuery")] != -1);
		return call<R>("getQuery", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRef(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRef")] != -1);
		return call<R>("getRef", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUserInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUserInfo")] != -1);
		return call<R>("getUserInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::URLConnection, typename... Args>
	auto openConnection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("openConnection")] != -1);
		return call<R>("openConnection", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	auto openStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("openStream")] != -1);
		return call<R>("openStream", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto sameFile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sameFile")] != -1);
		return call<R>("sameFile", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setURLStreamHandlerFactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setURLStreamHandlerFactory")] != -1);
		return scall<R>("setURLStreamHandlerFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toExternalForm(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toExternalForm")] != -1);
		return call<R>("toExternalForm", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::URI, typename... Args>
	auto toURI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toURI")] != -1);
		return call<R>("toURI", std::forward<Args>(args)...);
	}

};

#endif
