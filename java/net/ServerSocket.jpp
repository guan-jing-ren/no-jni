#ifndef java_net_ServerSocket_HPP
#define java_net_ServerSocket_HPP

#include "../../jfwd_decl.hpp"

class ::java::net::ServerSocket : public jObject<::java::net::ServerSocket, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_net / "ServerSocket";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint)>(), //
		jConstructor<::jvoid(::jint, ::jint)>(), //
		jConstructor<::jvoid(::jint, ::jint, ::java::net::InetAddress)>(), //
		jMethod<::java::net::Socket()>("accept"), //
		jMethod<::jvoid(::java::net::SocketAddress)>("bind"), //
		jMethod<::jvoid(::java::net::SocketAddress, ::jint)>("bind"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::java::nio::channels::ServerSocketChannel()>("getChannel"), //
		jMethod<::java::net::InetAddress()>("getInetAddress"), //
		jMethod<::jint()>("getLocalPort"), //
		jMethod<::java::net::SocketAddress()>("getLocalSocketAddress"), //
		jMethod<::jint()>("getReceiveBufferSize"), //
		jMethod<::jboolean()>("getReuseAddress"), //
		jMethod<::jint()>("getSoTimeout"), //
		jMethod<::jboolean()>("isBound"), //
		jMethod<::jboolean()>("isClosed"), //
		jMethod<::jvoid(::jint, ::jint, ::jint)>("setPerformancePreferences"), //
		jMethod<::jvoid(::jint)>("setReceiveBufferSize"), //
		jMethod<::jvoid(::jboolean)>("setReuseAddress"), //
		jMethod<::jvoid(::jint)>("setSoTimeout"), //
		jMethod<::jvoid(::java::net::SocketImplFactory)>("setSocketFactory"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::net::Socket, typename... Args>
	auto accept(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("accept")] != -1);
		return call<R>("accept", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto bind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("bind")] != -1);
		return call<R>("bind", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::ServerSocketChannel, typename... Args>
	auto getChannel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChannel")] != -1);
		return call<R>("getChannel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::InetAddress, typename... Args>
	auto getInetAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInetAddress")] != -1);
		return call<R>("getInetAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLocalPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalPort")] != -1);
		return call<R>("getLocalPort", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::SocketAddress, typename... Args>
	auto getLocalSocketAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalSocketAddress")] != -1);
		return call<R>("getLocalSocketAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getReceiveBufferSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReceiveBufferSize")] != -1);
		return call<R>("getReceiveBufferSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getReuseAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReuseAddress")] != -1);
		return call<R>("getReuseAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSoTimeout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSoTimeout")] != -1);
		return call<R>("getSoTimeout", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isBound(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isBound")] != -1);
		return call<R>("isBound", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isClosed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isClosed")] != -1);
		return call<R>("isClosed", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPerformancePreferences(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPerformancePreferences")] != -1);
		return call<R>("setPerformancePreferences", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setReceiveBufferSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setReceiveBufferSize")] != -1);
		return call<R>("setReceiveBufferSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setReuseAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setReuseAddress")] != -1);
		return call<R>("setReuseAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSoTimeout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSoTimeout")] != -1);
		return call<R>("setSoTimeout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setSocketFactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSocketFactory")] != -1);
		return scall<R>("setSocketFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
