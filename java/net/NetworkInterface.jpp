#ifndef java_net_NetworkInterface_HPP
#define java_net_NetworkInterface_HPP

#include "../../jfwd_decl.hpp"

class ::java::net::NetworkInterface : public jObject<::java::net::NetworkInterface, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_net / "NetworkInterface";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::net::NetworkInterface(::jint)>("getByIndex"), //
		jMethod<::java::net::NetworkInterface(::java::net::InetAddress)>("getByInetAddress"), //
		jMethod<::java::net::NetworkInterface(::java::lang::String)>("getByName"), //
		jMethod<::java::lang::String()>("getDisplayName"), //
		jMethod<::jbyte *()>("getHardwareAddress"), //
		jMethod<::jint()>("getIndex"), //
		jMethod<::java::util::Enumeration()>("getInetAddresses"), //
		jMethod<::java::util::List()>("getInterfaceAddresses"), //
		jMethod<::jint()>("getMTU"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::util::Enumeration()>("getNetworkInterfaces"), //
		jMethod<::java::net::NetworkInterface()>("getParent"), //
		jMethod<::java::util::Enumeration()>("getSubInterfaces"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isLoopback"), //
		jMethod<::jboolean()>("isPointToPoint"), //
		jMethod<::jboolean()>("isUp"), //
		jMethod<::jboolean()>("isVirtual"), //
		jMethod<::jboolean()>("supportsMulticast"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::NetworkInterface, typename... Args>
	static auto getByIndex(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getByIndex")] != -1);
		return scall<R>("getByIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::NetworkInterface, typename... Args>
	static auto getByInetAddress(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getByInetAddress")] != -1);
		return scall<R>("getByInetAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::NetworkInterface, typename... Args>
	static auto getByName(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getByName")] != -1);
		return scall<R>("getByName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDisplayName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisplayName")] != -1);
		return call<R>("getDisplayName", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getHardwareAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHardwareAddress")] != -1);
		return call<R>("getHardwareAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIndex")] != -1);
		return call<R>("getIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto getInetAddresses(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInetAddresses")] != -1);
		return call<R>("getInetAddresses", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getInterfaceAddresses(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInterfaceAddresses")] != -1);
		return call<R>("getInterfaceAddresses", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMTU(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMTU")] != -1);
		return call<R>("getMTU", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	static auto getNetworkInterfaces(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNetworkInterfaces")] != -1);
		return scall<R>("getNetworkInterfaces", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::NetworkInterface, typename... Args>
	auto getParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParent")] != -1);
		return call<R>("getParent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto getSubInterfaces(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSubInterfaces")] != -1);
		return call<R>("getSubInterfaces", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLoopback(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLoopback")] != -1);
		return call<R>("isLoopback", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPointToPoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPointToPoint")] != -1);
		return call<R>("isPointToPoint", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isUp(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isUp")] != -1);
		return call<R>("isUp", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isVirtual(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isVirtual")] != -1);
		return call<R>("isVirtual", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsMulticast(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("supportsMulticast")] != -1);
		return call<R>("supportsMulticast", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
