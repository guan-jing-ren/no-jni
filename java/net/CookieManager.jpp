#ifndef java_net_CookieManager_HPP
#define java_net_CookieManager_HPP

#include "../../jfwd_decl.hpp"

class ::java::net::CookieManager : public jObject<::java::net::CookieManager, ::java::net::CookieHandler> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_net / "CookieManager";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::net::CookieStore, ::java::net::CookiePolicy)>(), //
		jMethod<::java::util::Map(::java::net::URI, ::java::util::Map)>("get"), //
		jMethod<::java::net::CookieStore()>("getCookieStore"), //
		jMethod<::jvoid(::java::net::URI, ::java::util::Map)>("put"), //
		jMethod<::jvoid(::java::net::CookiePolicy)>("setCookiePolicy"), //
	};

	template<typename R = ::java::util::Map, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::CookieStore, typename... Args>
	auto getCookieStore(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCookieStore")] != -1);
		return call<R>("getCookieStore", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto put(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("put")] != -1);
		return call<R>("put", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCookiePolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCookiePolicy")] != -1);
		return call<R>("setCookiePolicy", std::forward<Args>(args)...);
	}

};

#endif
