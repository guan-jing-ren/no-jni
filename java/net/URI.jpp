#ifndef java_net_URI_HPP
#define java_net_URI_HPP

#include "../../jfwd_decl.hpp"

class ::java::net::URI : public jObject<::java::net::URI, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_net / "URI";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String, ::jint, ::java::lang::String, ::java::lang::String, ::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::lang::String)>(), //
		jMethod<::jint(::java::lang::Object)>("compareTo"), //
		jMethod<::jint(::java::net::URI)>("compareTo"), //
		jMethod<::java::net::URI(::java::lang::String)>("create"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::String()>("getAuthority"), //
		jMethod<::java::lang::String()>("getFragment"), //
		jMethod<::java::lang::String()>("getHost"), //
		jMethod<::java::lang::String()>("getPath"), //
		jMethod<::jint()>("getPort"), //
		jMethod<::java::lang::String()>("getQuery"), //
		jMethod<::java::lang::String()>("getRawAuthority"), //
		jMethod<::java::lang::String()>("getRawFragment"), //
		jMethod<::java::lang::String()>("getRawPath"), //
		jMethod<::java::lang::String()>("getRawQuery"), //
		jMethod<::java::lang::String()>("getRawSchemeSpecificPart"), //
		jMethod<::java::lang::String()>("getRawUserInfo"), //
		jMethod<::java::lang::String()>("getScheme"), //
		jMethod<::java::lang::String()>("getSchemeSpecificPart"), //
		jMethod<::java::lang::String()>("getUserInfo"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isAbsolute"), //
		jMethod<::jboolean()>("isOpaque"), //
		jMethod<::java::net::URI()>("normalize"), //
		jMethod<::java::net::URI()>("parseServerAuthority"), //
		jMethod<::java::net::URI(::java::net::URI)>("relativize"), //
		jMethod<::java::net::URI(::java::lang::String)>("resolve"), //
		jMethod<::java::net::URI(::java::net::URI)>("resolve"), //
		jMethod<::java::lang::String()>("toASCIIString"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::net::URL()>("toURL"), //
	};

	template<typename R = ::jint, typename... Args>
	auto compareTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compareTo")] != -1);
		return call<R>("compareTo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::URI, typename... Args>
	static auto create(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create")] != -1);
		return scall<R>("create", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAuthority(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAuthority")] != -1);
		return call<R>("getAuthority", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFragment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFragment")] != -1);
		return call<R>("getFragment", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHost(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHost")] != -1);
		return call<R>("getHost", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPath")] != -1);
		return call<R>("getPath", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPort")] != -1);
		return call<R>("getPort", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getQuery(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getQuery")] != -1);
		return call<R>("getQuery", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRawAuthority(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRawAuthority")] != -1);
		return call<R>("getRawAuthority", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRawFragment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRawFragment")] != -1);
		return call<R>("getRawFragment", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRawPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRawPath")] != -1);
		return call<R>("getRawPath", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRawQuery(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRawQuery")] != -1);
		return call<R>("getRawQuery", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRawSchemeSpecificPart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRawSchemeSpecificPart")] != -1);
		return call<R>("getRawSchemeSpecificPart", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRawUserInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRawUserInfo")] != -1);
		return call<R>("getRawUserInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getScheme(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScheme")] != -1);
		return call<R>("getScheme", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSchemeSpecificPart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSchemeSpecificPart")] != -1);
		return call<R>("getSchemeSpecificPart", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUserInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUserInfo")] != -1);
		return call<R>("getUserInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAbsolute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAbsolute")] != -1);
		return call<R>("isAbsolute", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isOpaque(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isOpaque")] != -1);
		return call<R>("isOpaque", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::URI, typename... Args>
	auto normalize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("normalize")] != -1);
		return call<R>("normalize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::URI, typename... Args>
	auto parseServerAuthority(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseServerAuthority")] != -1);
		return call<R>("parseServerAuthority", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::URI, typename... Args>
	auto relativize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("relativize")] != -1);
		return call<R>("relativize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::URI, typename... Args>
	auto resolve(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("resolve")] != -1);
		return call<R>("resolve", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toASCIIString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toASCIIString")] != -1);
		return call<R>("toASCIIString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::URL, typename... Args>
	auto toURL(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toURL")] != -1);
		return call<R>("toURL", std::forward<Args>(args)...);
	}

};

#endif
