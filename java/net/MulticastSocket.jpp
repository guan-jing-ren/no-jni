#ifndef java_net_MulticastSocket_HPP
#define java_net_MulticastSocket_HPP

#include "../../jfwd_decl.hpp"

class ::java::net::MulticastSocket : public jObject<::java::net::MulticastSocket, ::java::net::DatagramSocket> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_net / "MulticastSocket";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint)>(), //
		jConstructor<::jvoid(::java::net::SocketAddress)>(), //
		jMethod<::java::net::InetAddress()>("getInterface"), //
		jMethod<::jboolean()>("getLoopbackMode"), //
		jMethod<::java::net::NetworkInterface()>("getNetworkInterface"), //
		jMethod<::jint()>("getTimeToLive"), //
		jMethod<::jvoid(::java::net::InetAddress)>("joinGroup"), //
		jMethod<::jvoid(::java::net::SocketAddress, ::java::net::NetworkInterface)>("joinGroup"), //
		jMethod<::jvoid(::java::net::InetAddress)>("leaveGroup"), //
		jMethod<::jvoid(::java::net::SocketAddress, ::java::net::NetworkInterface)>("leaveGroup"), //
		jMethod<::jvoid(::java::net::InetAddress)>("setInterface"), //
		jMethod<::jvoid(::jboolean)>("setLoopbackMode"), //
		jMethod<::jvoid(::java::net::NetworkInterface)>("setNetworkInterface"), //
		jMethod<::jvoid(::jint)>("setTimeToLive"), //
	};

	template<typename R = ::java::net::InetAddress, typename... Args>
	auto getInterface(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInterface")] != -1);
		return call<R>("getInterface", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getLoopbackMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLoopbackMode")] != -1);
		return call<R>("getLoopbackMode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::NetworkInterface, typename... Args>
	auto getNetworkInterface(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNetworkInterface")] != -1);
		return call<R>("getNetworkInterface", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTimeToLive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTimeToLive")] != -1);
		return call<R>("getTimeToLive", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto joinGroup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("joinGroup")] != -1);
		return call<R>("joinGroup", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto leaveGroup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("leaveGroup")] != -1);
		return call<R>("leaveGroup", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInterface(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setInterface")] != -1);
		return call<R>("setInterface", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLoopbackMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLoopbackMode")] != -1);
		return call<R>("setLoopbackMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNetworkInterface(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNetworkInterface")] != -1);
		return call<R>("setNetworkInterface", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTimeToLive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTimeToLive")] != -1);
		return call<R>("setTimeToLive", std::forward<Args>(args)...);
	}

};

#endif
