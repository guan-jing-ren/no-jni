#ifndef java_net_CookiePolicy_HPP
#define java_net_CookiePolicy_HPP

#include "../../jfwd_decl.hpp"

class ::java::net::CookiePolicy : public jObject<::java::net::CookiePolicy, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_net / "CookiePolicy";

	constexpr static Enume field_signatures{
		jField<::java::net::CookiePolicy>("ACCEPT_ALL"), //
		jField<::java::net::CookiePolicy>("ACCEPT_NONE"), //
		jField<::java::net::CookiePolicy>("ACCEPT_ORIGINAL_SERVER"), //
	};

	template<typename F = ::java::net::CookiePolicy>
	static auto ACCEPT_ALL() {
		static_assert(field_signatures[jField<F>("ACCEPT_ALL")] != -1);
		return sat<F>("ACCEPT_ALL");
	}

	template<typename F = ::java::net::CookiePolicy>
	static auto ACCEPT_NONE() {
		static_assert(field_signatures[jField<F>("ACCEPT_NONE")] != -1);
		return sat<F>("ACCEPT_NONE");
	}

	template<typename F = ::java::net::CookiePolicy>
	static auto ACCEPT_ORIGINAL_SERVER() {
		static_assert(field_signatures[jField<F>("ACCEPT_ORIGINAL_SERVER")] != -1);
		return sat<F>("ACCEPT_ORIGINAL_SERVER");
	}

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::net::URI, ::java::net::HttpCookie)>("shouldAccept"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto shouldAccept(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shouldAccept")] != -1);
		return call<R>("shouldAccept", std::forward<Args>(args)...);
	}

};

#endif
