#ifndef java_net_StandardSocketOptions_HPP
#define java_net_StandardSocketOptions_HPP

#include "../../jfwd_decl.hpp"

class ::java::net::StandardSocketOptions : public jObject<::java::net::StandardSocketOptions, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_net / "StandardSocketOptions";

	constexpr static Enume field_signatures{
		jField<::java::net::SocketOption>("IP_MULTICAST_IF"), //
		jField<::java::net::SocketOption>("IP_MULTICAST_LOOP"), //
		jField<::java::net::SocketOption>("IP_MULTICAST_TTL"), //
		jField<::java::net::SocketOption>("IP_TOS"), //
		jField<::java::net::SocketOption>("SO_BROADCAST"), //
		jField<::java::net::SocketOption>("SO_KEEPALIVE"), //
		jField<::java::net::SocketOption>("SO_LINGER"), //
		jField<::java::net::SocketOption>("SO_RCVBUF"), //
		jField<::java::net::SocketOption>("SO_REUSEADDR"), //
		jField<::java::net::SocketOption>("SO_SNDBUF"), //
		jField<::java::net::SocketOption>("TCP_NODELAY"), //
	};

	template<typename F = ::java::net::SocketOption>
	static auto IP_MULTICAST_IF() {
		static_assert(field_signatures[jField<F>("IP_MULTICAST_IF")] != -1);
		return sat<F>("IP_MULTICAST_IF");
	}

	template<typename F = ::java::net::SocketOption>
	static auto IP_MULTICAST_LOOP() {
		static_assert(field_signatures[jField<F>("IP_MULTICAST_LOOP")] != -1);
		return sat<F>("IP_MULTICAST_LOOP");
	}

	template<typename F = ::java::net::SocketOption>
	static auto IP_MULTICAST_TTL() {
		static_assert(field_signatures[jField<F>("IP_MULTICAST_TTL")] != -1);
		return sat<F>("IP_MULTICAST_TTL");
	}

	template<typename F = ::java::net::SocketOption>
	static auto IP_TOS() {
		static_assert(field_signatures[jField<F>("IP_TOS")] != -1);
		return sat<F>("IP_TOS");
	}

	template<typename F = ::java::net::SocketOption>
	static auto SO_BROADCAST() {
		static_assert(field_signatures[jField<F>("SO_BROADCAST")] != -1);
		return sat<F>("SO_BROADCAST");
	}

	template<typename F = ::java::net::SocketOption>
	static auto SO_KEEPALIVE() {
		static_assert(field_signatures[jField<F>("SO_KEEPALIVE")] != -1);
		return sat<F>("SO_KEEPALIVE");
	}

	template<typename F = ::java::net::SocketOption>
	static auto SO_LINGER() {
		static_assert(field_signatures[jField<F>("SO_LINGER")] != -1);
		return sat<F>("SO_LINGER");
	}

	template<typename F = ::java::net::SocketOption>
	static auto SO_RCVBUF() {
		static_assert(field_signatures[jField<F>("SO_RCVBUF")] != -1);
		return sat<F>("SO_RCVBUF");
	}

	template<typename F = ::java::net::SocketOption>
	static auto SO_REUSEADDR() {
		static_assert(field_signatures[jField<F>("SO_REUSEADDR")] != -1);
		return sat<F>("SO_REUSEADDR");
	}

	template<typename F = ::java::net::SocketOption>
	static auto SO_SNDBUF() {
		static_assert(field_signatures[jField<F>("SO_SNDBUF")] != -1);
		return sat<F>("SO_SNDBUF");
	}

	template<typename F = ::java::net::SocketOption>
	static auto TCP_NODELAY() {
		static_assert(field_signatures[jField<F>("TCP_NODELAY")] != -1);
		return sat<F>("TCP_NODELAY");
	}

	constexpr static Enume method_signatures{
		cexprstr{"\0"}, //
	};

};

#endif
