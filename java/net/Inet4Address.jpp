#ifndef java_net_Inet4Address_HPP
#define java_net_Inet4Address_HPP

#include "../../jfwd_decl.hpp"

class ::java::net::Inet4Address : public jObject<::java::net::Inet4Address, ::java::net::InetAddress> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_net / "Inet4Address";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jbyte *()>("getAddress"), //
		jMethod<::java::lang::String()>("getHostAddress"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isAnyLocalAddress"), //
		jMethod<::jboolean()>("isLinkLocalAddress"), //
		jMethod<::jboolean()>("isLoopbackAddress"), //
		jMethod<::jboolean()>("isMCGlobal"), //
		jMethod<::jboolean()>("isMCLinkLocal"), //
		jMethod<::jboolean()>("isMCNodeLocal"), //
		jMethod<::jboolean()>("isMCOrgLocal"), //
		jMethod<::jboolean()>("isMCSiteLocal"), //
		jMethod<::jboolean()>("isMulticastAddress"), //
		jMethod<::jboolean()>("isSiteLocalAddress"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAddress")] != -1);
		return call<R>("getAddress", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHostAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHostAddress")] != -1);
		return call<R>("getHostAddress", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAnyLocalAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isAnyLocalAddress")] != -1);
		return call<R>("isAnyLocalAddress", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLinkLocalAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isLinkLocalAddress")] != -1);
		return call<R>("isLinkLocalAddress", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLoopbackAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isLoopbackAddress")] != -1);
		return call<R>("isLoopbackAddress", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isMCGlobal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isMCGlobal")] != -1);
		return call<R>("isMCGlobal", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isMCLinkLocal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isMCLinkLocal")] != -1);
		return call<R>("isMCLinkLocal", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isMCNodeLocal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isMCNodeLocal")] != -1);
		return call<R>("isMCNodeLocal", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isMCOrgLocal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isMCOrgLocal")] != -1);
		return call<R>("isMCOrgLocal", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isMCSiteLocal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isMCSiteLocal")] != -1);
		return call<R>("isMCSiteLocal", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isMulticastAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isMulticastAddress")] != -1);
		return call<R>("isMulticastAddress", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSiteLocalAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isSiteLocalAddress")] != -1);
		return call<R>("isSiteLocalAddress", forward<Args>(args)...);
	}

};

#endif
