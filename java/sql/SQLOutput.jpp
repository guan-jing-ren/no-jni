#ifndef java_sql_SQLOutput_HPP
#define java_sql_SQLOutput_HPP

#include "../../jfwd_decl.hpp"

class ::java::sql::SQLOutput : public jObject<::java::sql::SQLOutput, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_sql / "SQLOutput";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::sql::Array)>("writeArray"), //
		jMethod<::jvoid(::java::io::InputStream)>("writeAsciiStream"), //
		jMethod<::jvoid(::java::math::BigDecimal)>("writeBigDecimal"), //
		jMethod<::jvoid(::java::io::InputStream)>("writeBinaryStream"), //
		jMethod<::jvoid(::java::sql::Blob)>("writeBlob"), //
		jMethod<::jvoid(::jboolean)>("writeBoolean"), //
		jMethod<::jvoid(::jbyte)>("writeByte"), //
		jMethod<::jvoid(::jbyte *)>("writeBytes"), //
		jMethod<::jvoid(::java::io::Reader)>("writeCharacterStream"), //
		jMethod<::jvoid(::java::sql::Clob)>("writeClob"), //
		jMethod<::jvoid(::java::sql::Date)>("writeDate"), //
		jMethod<::jvoid(::jdouble)>("writeDouble"), //
		jMethod<::jvoid(::jfloat)>("writeFloat"), //
		jMethod<::jvoid(::jint)>("writeInt"), //
		jMethod<::jvoid(::jlong)>("writeLong"), //
		jMethod<::jvoid(::java::sql::NClob)>("writeNClob"), //
		jMethod<::jvoid(::java::lang::String)>("writeNString"), //
		jMethod<::jvoid(::java::lang::Object, ::java::sql::SQLType)>("writeObject"), //
		jMethod<::jvoid(::java::sql::SQLData)>("writeObject"), //
		jMethod<::jvoid(::java::sql::Ref)>("writeRef"), //
		jMethod<::jvoid(::java::sql::RowId)>("writeRowId"), //
		jMethod<::jvoid(::java::sql::SQLXML)>("writeSQLXML"), //
		jMethod<::jvoid(::jshort)>("writeShort"), //
		jMethod<::jvoid(::java::lang::String)>("writeString"), //
		jMethod<::jvoid(::java::sql::Struct)>("writeStruct"), //
		jMethod<::jvoid(::java::sql::Time)>("writeTime"), //
		jMethod<::jvoid(::java::sql::Timestamp)>("writeTimestamp"), //
		jMethod<::jvoid(::java::net::URL)>("writeURL"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto writeArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeArray")] != -1);
		return call<R>("writeArray", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeAsciiStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeAsciiStream")] != -1);
		return call<R>("writeAsciiStream", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeBigDecimal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeBigDecimal")] != -1);
		return call<R>("writeBigDecimal", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeBinaryStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeBinaryStream")] != -1);
		return call<R>("writeBinaryStream", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeBlob(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeBlob")] != -1);
		return call<R>("writeBlob", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeBoolean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeBoolean")] != -1);
		return call<R>("writeBoolean", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeByte")] != -1);
		return call<R>("writeByte", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeBytes")] != -1);
		return call<R>("writeBytes", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeCharacterStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeCharacterStream")] != -1);
		return call<R>("writeCharacterStream", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeClob(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeClob")] != -1);
		return call<R>("writeClob", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeDate")] != -1);
		return call<R>("writeDate", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeDouble")] != -1);
		return call<R>("writeDouble", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeFloat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeFloat")] != -1);
		return call<R>("writeFloat", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeInt")] != -1);
		return call<R>("writeInt", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeLong")] != -1);
		return call<R>("writeLong", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeNClob(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeNClob")] != -1);
		return call<R>("writeNClob", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeNString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeNString")] != -1);
		return call<R>("writeNString", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeObject")] != -1);
		return call<R>("writeObject", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeRef(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeRef")] != -1);
		return call<R>("writeRef", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeRowId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeRowId")] != -1);
		return call<R>("writeRowId", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeSQLXML(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeSQLXML")] != -1);
		return call<R>("writeSQLXML", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeShort")] != -1);
		return call<R>("writeShort", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeString")] != -1);
		return call<R>("writeString", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeStruct(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeStruct")] != -1);
		return call<R>("writeStruct", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeTime")] != -1);
		return call<R>("writeTime", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeTimestamp(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeTimestamp")] != -1);
		return call<R>("writeTimestamp", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeURL(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeURL")] != -1);
		return call<R>("writeURL", forward<Args>(args)...);
	}

};

#endif
