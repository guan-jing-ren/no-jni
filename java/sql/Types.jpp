#ifndef java_sql_Types_HPP
#define java_sql_Types_HPP

#include "../../jfwd_decl.hpp"

class ::java::sql::Types : public jObject<::java::sql::Types, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_sql / "Types";

	constexpr static Enume field_signatures{
		jField<::jint>("ARRAY"), //
		jField<::jint>("BIGINT"), //
		jField<::jint>("BINARY"), //
		jField<::jint>("BIT"), //
		jField<::jint>("BLOB"), //
		jField<::jint>("BOOLEAN"), //
		jField<::jint>("CHAR"), //
		jField<::jint>("CLOB"), //
		jField<::jint>("DATALINK"), //
		jField<::jint>("DATE"), //
		jField<::jint>("DECIMAL"), //
		jField<::jint>("DISTINCT"), //
		jField<::jint>("DOUBLE"), //
		jField<::jint>("FLOAT"), //
		jField<::jint>("INTEGER"), //
		jField<::jint>("JAVA_OBJECT"), //
		jField<::jint>("LONGNVARCHAR"), //
		jField<::jint>("LONGVARBINARY"), //
		jField<::jint>("LONGVARCHAR"), //
		jField<::jint>("NCHAR"), //
		jField<::jint>("NCLOB"), //
		jField<::jint>("NULL"), //
		jField<::jint>("NUMERIC"), //
		jField<::jint>("NVARCHAR"), //
		jField<::jint>("OTHER"), //
		jField<::jint>("REAL"), //
		jField<::jint>("REF"), //
		jField<::jint>("REF_CURSOR"), //
		jField<::jint>("ROWID"), //
		jField<::jint>("SMALLINT"), //
		jField<::jint>("SQLXML"), //
		jField<::jint>("STRUCT"), //
		jField<::jint>("TIME"), //
		jField<::jint>("TIMESTAMP"), //
		jField<::jint>("TIMESTAMP_WITH_TIMEZONE"), //
		jField<::jint>("TIME_WITH_TIMEZONE"), //
		jField<::jint>("TINYINT"), //
		jField<::jint>("VARBINARY"), //
		jField<::jint>("VARCHAR"), //
	};

	template<typename F = ::jint>
	static auto ARRAY() {
		static_assert(field_signatures[jField<F>("ARRAY")] != -1);
		return sat<F>("ARRAY");
	}

	template<typename F = ::jint>
	static auto BIGINT() {
		static_assert(field_signatures[jField<F>("BIGINT")] != -1);
		return sat<F>("BIGINT");
	}

	template<typename F = ::jint>
	static auto BINARY() {
		static_assert(field_signatures[jField<F>("BINARY")] != -1);
		return sat<F>("BINARY");
	}

	template<typename F = ::jint>
	static auto BIT() {
		static_assert(field_signatures[jField<F>("BIT")] != -1);
		return sat<F>("BIT");
	}

	template<typename F = ::jint>
	static auto BLOB() {
		static_assert(field_signatures[jField<F>("BLOB")] != -1);
		return sat<F>("BLOB");
	}

	template<typename F = ::jint>
	static auto BOOLEAN() {
		static_assert(field_signatures[jField<F>("BOOLEAN")] != -1);
		return sat<F>("BOOLEAN");
	}

	template<typename F = ::jint>
	static auto CHAR() {
		static_assert(field_signatures[jField<F>("CHAR")] != -1);
		return sat<F>("CHAR");
	}

	template<typename F = ::jint>
	static auto CLOB() {
		static_assert(field_signatures[jField<F>("CLOB")] != -1);
		return sat<F>("CLOB");
	}

	template<typename F = ::jint>
	static auto DATALINK() {
		static_assert(field_signatures[jField<F>("DATALINK")] != -1);
		return sat<F>("DATALINK");
	}

	template<typename F = ::jint>
	static auto DATE() {
		static_assert(field_signatures[jField<F>("DATE")] != -1);
		return sat<F>("DATE");
	}

	template<typename F = ::jint>
	static auto DECIMAL() {
		static_assert(field_signatures[jField<F>("DECIMAL")] != -1);
		return sat<F>("DECIMAL");
	}

	template<typename F = ::jint>
	static auto DISTINCT() {
		static_assert(field_signatures[jField<F>("DISTINCT")] != -1);
		return sat<F>("DISTINCT");
	}

	template<typename F = ::jint>
	static auto DOUBLE() {
		static_assert(field_signatures[jField<F>("DOUBLE")] != -1);
		return sat<F>("DOUBLE");
	}

	template<typename F = ::jint>
	static auto FLOAT() {
		static_assert(field_signatures[jField<F>("FLOAT")] != -1);
		return sat<F>("FLOAT");
	}

	template<typename F = ::jint>
	static auto INTEGER() {
		static_assert(field_signatures[jField<F>("INTEGER")] != -1);
		return sat<F>("INTEGER");
	}

	template<typename F = ::jint>
	static auto JAVA_OBJECT() {
		static_assert(field_signatures[jField<F>("JAVA_OBJECT")] != -1);
		return sat<F>("JAVA_OBJECT");
	}

	template<typename F = ::jint>
	static auto LONGNVARCHAR() {
		static_assert(field_signatures[jField<F>("LONGNVARCHAR")] != -1);
		return sat<F>("LONGNVARCHAR");
	}

	template<typename F = ::jint>
	static auto LONGVARBINARY() {
		static_assert(field_signatures[jField<F>("LONGVARBINARY")] != -1);
		return sat<F>("LONGVARBINARY");
	}

	template<typename F = ::jint>
	static auto LONGVARCHAR() {
		static_assert(field_signatures[jField<F>("LONGVARCHAR")] != -1);
		return sat<F>("LONGVARCHAR");
	}

	template<typename F = ::jint>
	static auto NCHAR() {
		static_assert(field_signatures[jField<F>("NCHAR")] != -1);
		return sat<F>("NCHAR");
	}

	template<typename F = ::jint>
	static auto NCLOB() {
		static_assert(field_signatures[jField<F>("NCLOB")] != -1);
		return sat<F>("NCLOB");
	}

	template<typename F = ::jint>
	static auto NULL_() {
		static_assert(field_signatures[jField<F>("NULL")] != -1);
		return sat<F>("NULL");
	}

	template<typename F = ::jint>
	static auto NUMERIC() {
		static_assert(field_signatures[jField<F>("NUMERIC")] != -1);
		return sat<F>("NUMERIC");
	}

	template<typename F = ::jint>
	static auto NVARCHAR() {
		static_assert(field_signatures[jField<F>("NVARCHAR")] != -1);
		return sat<F>("NVARCHAR");
	}

	template<typename F = ::jint>
	static auto OTHER() {
		static_assert(field_signatures[jField<F>("OTHER")] != -1);
		return sat<F>("OTHER");
	}

	template<typename F = ::jint>
	static auto REAL() {
		static_assert(field_signatures[jField<F>("REAL")] != -1);
		return sat<F>("REAL");
	}

	template<typename F = ::jint>
	static auto REF() {
		static_assert(field_signatures[jField<F>("REF")] != -1);
		return sat<F>("REF");
	}

	template<typename F = ::jint>
	static auto REF_CURSOR() {
		static_assert(field_signatures[jField<F>("REF_CURSOR")] != -1);
		return sat<F>("REF_CURSOR");
	}

	template<typename F = ::jint>
	static auto ROWID() {
		static_assert(field_signatures[jField<F>("ROWID")] != -1);
		return sat<F>("ROWID");
	}

	template<typename F = ::jint>
	static auto SMALLINT() {
		static_assert(field_signatures[jField<F>("SMALLINT")] != -1);
		return sat<F>("SMALLINT");
	}

	template<typename F = ::jint>
	static auto SQLXML() {
		static_assert(field_signatures[jField<F>("SQLXML")] != -1);
		return sat<F>("SQLXML");
	}

	template<typename F = ::jint>
	static auto STRUCT() {
		static_assert(field_signatures[jField<F>("STRUCT")] != -1);
		return sat<F>("STRUCT");
	}

	template<typename F = ::jint>
	static auto TIME() {
		static_assert(field_signatures[jField<F>("TIME")] != -1);
		return sat<F>("TIME");
	}

	template<typename F = ::jint>
	static auto TIMESTAMP() {
		static_assert(field_signatures[jField<F>("TIMESTAMP")] != -1);
		return sat<F>("TIMESTAMP");
	}

	template<typename F = ::jint>
	static auto TIMESTAMP_WITH_TIMEZONE() {
		static_assert(field_signatures[jField<F>("TIMESTAMP_WITH_TIMEZONE")] != -1);
		return sat<F>("TIMESTAMP_WITH_TIMEZONE");
	}

	template<typename F = ::jint>
	static auto TIME_WITH_TIMEZONE() {
		static_assert(field_signatures[jField<F>("TIME_WITH_TIMEZONE")] != -1);
		return sat<F>("TIME_WITH_TIMEZONE");
	}

	template<typename F = ::jint>
	static auto TINYINT() {
		static_assert(field_signatures[jField<F>("TINYINT")] != -1);
		return sat<F>("TINYINT");
	}

	template<typename F = ::jint>
	static auto VARBINARY() {
		static_assert(field_signatures[jField<F>("VARBINARY")] != -1);
		return sat<F>("VARBINARY");
	}

	template<typename F = ::jint>
	static auto VARCHAR() {
		static_assert(field_signatures[jField<F>("VARCHAR")] != -1);
		return sat<F>("VARCHAR");
	}

	constexpr static Enume method_signatures{
		cexprstr{"\0"}, //
	};

};

#endif
