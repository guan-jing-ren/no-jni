#ifndef java_sql_CallableStatement_HPP
#define java_sql_CallableStatement_HPP

#include "../../jfwd_decl.hpp"

class ::java::sql::CallableStatement : public jObject<::java::sql::CallableStatement, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_sql / "CallableStatement";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("addBatch"), //
		jMethod<::jvoid(::java::lang::String)>("addBatch"), //
		jMethod<::jvoid()>("cancel"), //
		jMethod<::jvoid()>("clearBatch"), //
		jMethod<::jvoid()>("clearParameters"), //
		jMethod<::jvoid()>("clearWarnings"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::jvoid()>("closeOnCompletion"), //
		jMethod<::jboolean()>("execute"), //
		jMethod<::jboolean(::java::lang::String)>("execute"), //
		jMethod<::jboolean(::java::lang::String, ::jint)>("execute"), //
		jMethod<::jboolean(::java::lang::String, ::jint *)>("execute"), //
		jMethod<::jboolean(::java::lang::String, ::java::lang::String *)>("execute"), //
		jMethod<::jint *()>("executeBatch"), //
		jMethod<::java::sql::ResultSet()>("executeQuery"), //
		jMethod<::java::sql::ResultSet(::java::lang::String)>("executeQuery"), //
		jMethod<::jint()>("executeUpdate"), //
		jMethod<::jint(::java::lang::String)>("executeUpdate"), //
		jMethod<::jint(::java::lang::String, ::jint)>("executeUpdate"), //
		jMethod<::jint(::java::lang::String, ::jint *)>("executeUpdate"), //
		jMethod<::jint(::java::lang::String, ::java::lang::String *)>("executeUpdate"), //
		jMethod<::java::sql::Array(::jint)>("getArray"), //
		jMethod<::java::sql::Array(::java::lang::String)>("getArray"), //
		jMethod<::java::math::BigDecimal(::jint)>("getBigDecimal"), //
		jMethod<::java::math::BigDecimal(::jint, ::jint)>("getBigDecimal"), //
		jMethod<::java::math::BigDecimal(::java::lang::String)>("getBigDecimal"), //
		jMethod<::java::sql::Blob(::jint)>("getBlob"), //
		jMethod<::java::sql::Blob(::java::lang::String)>("getBlob"), //
		jMethod<::jboolean(::jint)>("getBoolean"), //
		jMethod<::jboolean(::java::lang::String)>("getBoolean"), //
		jMethod<::jbyte(::jint)>("getByte"), //
		jMethod<::jbyte(::java::lang::String)>("getByte"), //
		jMethod<::jbyte *(::jint)>("getBytes"), //
		jMethod<::jbyte *(::java::lang::String)>("getBytes"), //
		jMethod<::java::io::Reader(::jint)>("getCharacterStream"), //
		jMethod<::java::io::Reader(::java::lang::String)>("getCharacterStream"), //
		jMethod<::java::sql::Clob(::jint)>("getClob"), //
		jMethod<::java::sql::Clob(::java::lang::String)>("getClob"), //
		jMethod<::java::sql::Connection()>("getConnection"), //
		jMethod<::java::sql::Date(::jint)>("getDate"), //
		jMethod<::java::sql::Date(::jint, ::java::util::Calendar)>("getDate"), //
		jMethod<::java::sql::Date(::java::lang::String)>("getDate"), //
		jMethod<::java::sql::Date(::java::lang::String, ::java::util::Calendar)>("getDate"), //
		jMethod<::jdouble(::jint)>("getDouble"), //
		jMethod<::jdouble(::java::lang::String)>("getDouble"), //
		jMethod<::jint()>("getFetchDirection"), //
		jMethod<::jint()>("getFetchSize"), //
		jMethod<::jfloat(::jint)>("getFloat"), //
		jMethod<::jfloat(::java::lang::String)>("getFloat"), //
		jMethod<::java::sql::ResultSet()>("getGeneratedKeys"), //
		jMethod<::jint(::jint)>("getInt"), //
		jMethod<::jint(::java::lang::String)>("getInt"), //
		jMethod<::jlong(::jint)>("getLong"), //
		jMethod<::jlong(::java::lang::String)>("getLong"), //
		jMethod<::jint()>("getMaxFieldSize"), //
		jMethod<::jint()>("getMaxRows"), //
		jMethod<::java::sql::ResultSetMetaData()>("getMetaData"), //
		jMethod<::jboolean()>("getMoreResults"), //
		jMethod<::jboolean(::jint)>("getMoreResults"), //
		jMethod<::java::io::Reader(::jint)>("getNCharacterStream"), //
		jMethod<::java::io::Reader(::java::lang::String)>("getNCharacterStream"), //
		jMethod<::java::sql::NClob(::jint)>("getNClob"), //
		jMethod<::java::sql::NClob(::java::lang::String)>("getNClob"), //
		jMethod<::java::lang::String(::jint)>("getNString"), //
		jMethod<::java::lang::String(::java::lang::String)>("getNString"), //
		jMethod<::java::lang::Object(::jint)>("getObject"), //
		jMethod<::java::lang::Object(::jint, ::java::lang::Class)>("getObject"), //
		jMethod<::java::lang::Object(::jint, ::java::util::Map)>("getObject"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getObject"), //
		jMethod<::java::lang::Object(::java::lang::String, ::java::lang::Class)>("getObject"), //
		jMethod<::java::lang::Object(::java::lang::String, ::java::util::Map)>("getObject"), //
		jMethod<::java::sql::ParameterMetaData()>("getParameterMetaData"), //
		jMethod<::jint()>("getQueryTimeout"), //
		jMethod<::java::sql::Ref(::jint)>("getRef"), //
		jMethod<::java::sql::Ref(::java::lang::String)>("getRef"), //
		jMethod<::java::sql::ResultSet()>("getResultSet"), //
		jMethod<::jint()>("getResultSetConcurrency"), //
		jMethod<::jint()>("getResultSetHoldability"), //
		jMethod<::jint()>("getResultSetType"), //
		jMethod<::java::sql::RowId(::jint)>("getRowId"), //
		jMethod<::java::sql::RowId(::java::lang::String)>("getRowId"), //
		jMethod<::java::sql::SQLXML(::jint)>("getSQLXML"), //
		jMethod<::java::sql::SQLXML(::java::lang::String)>("getSQLXML"), //
		jMethod<::jshort(::jint)>("getShort"), //
		jMethod<::jshort(::java::lang::String)>("getShort"), //
		jMethod<::java::lang::String(::jint)>("getString"), //
		jMethod<::java::lang::String(::java::lang::String)>("getString"), //
		jMethod<::java::sql::Time(::jint)>("getTime"), //
		jMethod<::java::sql::Time(::jint, ::java::util::Calendar)>("getTime"), //
		jMethod<::java::sql::Time(::java::lang::String)>("getTime"), //
		jMethod<::java::sql::Time(::java::lang::String, ::java::util::Calendar)>("getTime"), //
		jMethod<::java::sql::Timestamp(::jint)>("getTimestamp"), //
		jMethod<::java::sql::Timestamp(::jint, ::java::util::Calendar)>("getTimestamp"), //
		jMethod<::java::sql::Timestamp(::java::lang::String)>("getTimestamp"), //
		jMethod<::java::sql::Timestamp(::java::lang::String, ::java::util::Calendar)>("getTimestamp"), //
		jMethod<::java::net::URL(::jint)>("getURL"), //
		jMethod<::java::net::URL(::java::lang::String)>("getURL"), //
		jMethod<::jint()>("getUpdateCount"), //
		jMethod<::java::sql::SQLWarning()>("getWarnings"), //
		jMethod<::jboolean()>("isCloseOnCompletion"), //
		jMethod<::jboolean()>("isClosed"), //
		jMethod<::jboolean()>("isPoolable"), //
		jMethod<::jboolean(::java::lang::Class)>("isWrapperFor"), //
		jMethod<::jvoid(::jint, ::jint)>("registerOutParameter"), //
		jMethod<::jvoid(::jint, ::jint, ::jint)>("registerOutParameter"), //
		jMethod<::jvoid(::jint, ::jint, ::java::lang::String)>("registerOutParameter"), //
		jMethod<::jvoid(::jint, ::java::sql::SQLType)>("registerOutParameter"), //
		jMethod<::jvoid(::jint, ::java::sql::SQLType, ::jint)>("registerOutParameter"), //
		jMethod<::jvoid(::jint, ::java::sql::SQLType, ::java::lang::String)>("registerOutParameter"), //
		jMethod<::jvoid(::java::lang::String, ::jint)>("registerOutParameter"), //
		jMethod<::jvoid(::java::lang::String, ::jint, ::jint)>("registerOutParameter"), //
		jMethod<::jvoid(::java::lang::String, ::jint, ::java::lang::String)>("registerOutParameter"), //
		jMethod<::jvoid(::java::lang::String, ::java::sql::SQLType)>("registerOutParameter"), //
		jMethod<::jvoid(::java::lang::String, ::java::sql::SQLType, ::jint)>("registerOutParameter"), //
		jMethod<::jvoid(::java::lang::String, ::java::sql::SQLType, ::java::lang::String)>("registerOutParameter"), //
		jMethod<::jvoid(::jint, ::java::sql::Array)>("setArray"), //
		jMethod<::jvoid(::jint, ::java::io::InputStream)>("setAsciiStream"), //
		jMethod<::jvoid(::jint, ::java::io::InputStream, ::jint)>("setAsciiStream"), //
		jMethod<::jvoid(::jint, ::java::io::InputStream, ::jlong)>("setAsciiStream"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::InputStream)>("setAsciiStream"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::InputStream, ::jint)>("setAsciiStream"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::InputStream, ::jlong)>("setAsciiStream"), //
		jMethod<::jvoid(::jint, ::java::math::BigDecimal)>("setBigDecimal"), //
		jMethod<::jvoid(::java::lang::String, ::java::math::BigDecimal)>("setBigDecimal"), //
		jMethod<::jvoid(::jint, ::java::io::InputStream)>("setBinaryStream"), //
		jMethod<::jvoid(::jint, ::java::io::InputStream, ::jint)>("setBinaryStream"), //
		jMethod<::jvoid(::jint, ::java::io::InputStream, ::jlong)>("setBinaryStream"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::InputStream)>("setBinaryStream"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::InputStream, ::jint)>("setBinaryStream"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::InputStream, ::jlong)>("setBinaryStream"), //
		jMethod<::jvoid(::jint, ::java::io::InputStream)>("setBlob"), //
		jMethod<::jvoid(::jint, ::java::io::InputStream, ::jlong)>("setBlob"), //
		jMethod<::jvoid(::jint, ::java::sql::Blob)>("setBlob"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::InputStream)>("setBlob"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::InputStream, ::jlong)>("setBlob"), //
		jMethod<::jvoid(::java::lang::String, ::java::sql::Blob)>("setBlob"), //
		jMethod<::jvoid(::jint, ::jboolean)>("setBoolean"), //
		jMethod<::jvoid(::java::lang::String, ::jboolean)>("setBoolean"), //
		jMethod<::jvoid(::jint, ::jbyte)>("setByte"), //
		jMethod<::jvoid(::java::lang::String, ::jbyte)>("setByte"), //
		jMethod<::jvoid(::jint, ::jbyte *)>("setBytes"), //
		jMethod<::jvoid(::java::lang::String, ::jbyte *)>("setBytes"), //
		jMethod<::jvoid(::jint, ::java::io::Reader)>("setCharacterStream"), //
		jMethod<::jvoid(::jint, ::java::io::Reader, ::jint)>("setCharacterStream"), //
		jMethod<::jvoid(::jint, ::java::io::Reader, ::jlong)>("setCharacterStream"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::Reader)>("setCharacterStream"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::Reader, ::jint)>("setCharacterStream"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::Reader, ::jlong)>("setCharacterStream"), //
		jMethod<::jvoid(::jint, ::java::io::Reader)>("setClob"), //
		jMethod<::jvoid(::jint, ::java::io::Reader, ::jlong)>("setClob"), //
		jMethod<::jvoid(::jint, ::java::sql::Clob)>("setClob"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::Reader)>("setClob"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::Reader, ::jlong)>("setClob"), //
		jMethod<::jvoid(::java::lang::String, ::java::sql::Clob)>("setClob"), //
		jMethod<::jvoid(::java::lang::String)>("setCursorName"), //
		jMethod<::jvoid(::jint, ::java::sql::Date)>("setDate"), //
		jMethod<::jvoid(::jint, ::java::sql::Date, ::java::util::Calendar)>("setDate"), //
		jMethod<::jvoid(::java::lang::String, ::java::sql::Date)>("setDate"), //
		jMethod<::jvoid(::java::lang::String, ::java::sql::Date, ::java::util::Calendar)>("setDate"), //
		jMethod<::jvoid(::jint, ::jdouble)>("setDouble"), //
		jMethod<::jvoid(::java::lang::String, ::jdouble)>("setDouble"), //
		jMethod<::jvoid(::jboolean)>("setEscapeProcessing"), //
		jMethod<::jvoid(::jint)>("setFetchDirection"), //
		jMethod<::jvoid(::jint)>("setFetchSize"), //
		jMethod<::jvoid(::jint, ::jfloat)>("setFloat"), //
		jMethod<::jvoid(::java::lang::String, ::jfloat)>("setFloat"), //
		jMethod<::jvoid(::jint, ::jint)>("setInt"), //
		jMethod<::jvoid(::java::lang::String, ::jint)>("setInt"), //
		jMethod<::jvoid(::jint, ::jlong)>("setLong"), //
		jMethod<::jvoid(::java::lang::String, ::jlong)>("setLong"), //
		jMethod<::jvoid(::jint)>("setMaxFieldSize"), //
		jMethod<::jvoid(::jint)>("setMaxRows"), //
		jMethod<::jvoid(::jint, ::java::io::Reader)>("setNCharacterStream"), //
		jMethod<::jvoid(::jint, ::java::io::Reader, ::jlong)>("setNCharacterStream"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::Reader)>("setNCharacterStream"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::Reader, ::jlong)>("setNCharacterStream"), //
		jMethod<::jvoid(::jint, ::java::io::Reader)>("setNClob"), //
		jMethod<::jvoid(::jint, ::java::io::Reader, ::jlong)>("setNClob"), //
		jMethod<::jvoid(::jint, ::java::sql::NClob)>("setNClob"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::Reader)>("setNClob"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::Reader, ::jlong)>("setNClob"), //
		jMethod<::jvoid(::java::lang::String, ::java::sql::NClob)>("setNClob"), //
		jMethod<::jvoid(::jint, ::java::lang::String)>("setNString"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("setNString"), //
		jMethod<::jvoid(::jint, ::jint)>("setNull"), //
		jMethod<::jvoid(::jint, ::jint, ::java::lang::String)>("setNull"), //
		jMethod<::jvoid(::java::lang::String, ::jint)>("setNull"), //
		jMethod<::jvoid(::java::lang::String, ::jint, ::java::lang::String)>("setNull"), //
		jMethod<::jvoid(::jint, ::java::lang::Object)>("setObject"), //
		jMethod<::jvoid(::jint, ::java::lang::Object, ::jint)>("setObject"), //
		jMethod<::jvoid(::jint, ::java::lang::Object, ::jint, ::jint)>("setObject"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object)>("setObject"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object, ::jint)>("setObject"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object, ::jint, ::jint)>("setObject"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object, ::java::sql::SQLType)>("setObject"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object, ::java::sql::SQLType, ::jint)>("setObject"), //
		jMethod<::jvoid(::jboolean)>("setPoolable"), //
		jMethod<::jvoid(::jint)>("setQueryTimeout"), //
		jMethod<::jvoid(::jint, ::java::sql::Ref)>("setRef"), //
		jMethod<::jvoid(::jint, ::java::sql::RowId)>("setRowId"), //
		jMethod<::jvoid(::java::lang::String, ::java::sql::RowId)>("setRowId"), //
		jMethod<::jvoid(::jint, ::java::sql::SQLXML)>("setSQLXML"), //
		jMethod<::jvoid(::java::lang::String, ::java::sql::SQLXML)>("setSQLXML"), //
		jMethod<::jvoid(::jint, ::jshort)>("setShort"), //
		jMethod<::jvoid(::java::lang::String, ::jshort)>("setShort"), //
		jMethod<::jvoid(::jint, ::java::lang::String)>("setString"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("setString"), //
		jMethod<::jvoid(::jint, ::java::sql::Time)>("setTime"), //
		jMethod<::jvoid(::jint, ::java::sql::Time, ::java::util::Calendar)>("setTime"), //
		jMethod<::jvoid(::java::lang::String, ::java::sql::Time)>("setTime"), //
		jMethod<::jvoid(::java::lang::String, ::java::sql::Time, ::java::util::Calendar)>("setTime"), //
		jMethod<::jvoid(::jint, ::java::sql::Timestamp)>("setTimestamp"), //
		jMethod<::jvoid(::jint, ::java::sql::Timestamp, ::java::util::Calendar)>("setTimestamp"), //
		jMethod<::jvoid(::java::lang::String, ::java::sql::Timestamp)>("setTimestamp"), //
		jMethod<::jvoid(::java::lang::String, ::java::sql::Timestamp, ::java::util::Calendar)>("setTimestamp"), //
		jMethod<::jvoid(::jint, ::java::net::URL)>("setURL"), //
		jMethod<::jvoid(::java::lang::String, ::java::net::URL)>("setURL"), //
		jMethod<::jvoid(::jint, ::java::io::InputStream, ::jint)>("setUnicodeStream"), //
		jMethod<::java::lang::Object(::java::lang::Class)>("unwrap"), //
		jMethod<::jboolean()>("wasNull"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addBatch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addBatch")] != -1);
		return call<R>("addBatch", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto cancel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cancel")] != -1);
		return call<R>("cancel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clearBatch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clearBatch")] != -1);
		return call<R>("clearBatch", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clearParameters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clearParameters")] != -1);
		return call<R>("clearParameters", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clearWarnings(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clearWarnings")] != -1);
		return call<R>("clearWarnings", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto closeOnCompletion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("closeOnCompletion")] != -1);
		return call<R>("closeOnCompletion", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto execute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("execute")] != -1);
		return call<R>("execute", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto executeBatch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("executeBatch")] != -1);
		return call<R>("executeBatch", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::ResultSet, typename... Args>
	auto executeQuery(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("executeQuery")] != -1);
		return call<R>("executeQuery", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto executeUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("executeUpdate")] != -1);
		return call<R>("executeUpdate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::Array, typename... Args>
	auto getArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getArray")] != -1);
		return call<R>("getArray", std::forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigDecimal, typename... Args>
	auto getBigDecimal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBigDecimal")] != -1);
		return call<R>("getBigDecimal", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::Blob, typename... Args>
	auto getBlob(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBlob")] != -1);
		return call<R>("getBlob", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getBoolean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBoolean")] != -1);
		return call<R>("getBoolean", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto getByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getByte")] != -1);
		return call<R>("getByte", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBytes")] != -1);
		return call<R>("getBytes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::Reader, typename... Args>
	auto getCharacterStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCharacterStream")] != -1);
		return call<R>("getCharacterStream", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::Clob, typename... Args>
	auto getClob(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClob")] != -1);
		return call<R>("getClob", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::Connection, typename... Args>
	auto getConnection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConnection")] != -1);
		return call<R>("getConnection", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::Date, typename... Args>
	auto getDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDate")] != -1);
		return call<R>("getDate", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDouble")] != -1);
		return call<R>("getDouble", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getFetchDirection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFetchDirection")] != -1);
		return call<R>("getFetchDirection", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getFetchSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFetchSize")] != -1);
		return call<R>("getFetchSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getFloat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFloat")] != -1);
		return call<R>("getFloat", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::ResultSet, typename... Args>
	auto getGeneratedKeys(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGeneratedKeys")] != -1);
		return call<R>("getGeneratedKeys", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInt")] != -1);
		return call<R>("getInt", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLong")] != -1);
		return call<R>("getLong", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxFieldSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaxFieldSize")] != -1);
		return call<R>("getMaxFieldSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxRows(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaxRows")] != -1);
		return call<R>("getMaxRows", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::ResultSetMetaData, typename... Args>
	auto getMetaData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMetaData")] != -1);
		return call<R>("getMetaData", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getMoreResults(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMoreResults")] != -1);
		return call<R>("getMoreResults", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::Reader, typename... Args>
	auto getNCharacterStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNCharacterStream")] != -1);
		return call<R>("getNCharacterStream", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::NClob, typename... Args>
	auto getNClob(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNClob")] != -1);
		return call<R>("getNClob", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNString")] != -1);
		return call<R>("getNString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObject")] != -1);
		return call<R>("getObject", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::ParameterMetaData, typename... Args>
	auto getParameterMetaData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParameterMetaData")] != -1);
		return call<R>("getParameterMetaData", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getQueryTimeout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getQueryTimeout")] != -1);
		return call<R>("getQueryTimeout", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::Ref, typename... Args>
	auto getRef(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRef")] != -1);
		return call<R>("getRef", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::ResultSet, typename... Args>
	auto getResultSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResultSet")] != -1);
		return call<R>("getResultSet", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getResultSetConcurrency(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResultSetConcurrency")] != -1);
		return call<R>("getResultSetConcurrency", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getResultSetHoldability(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResultSetHoldability")] != -1);
		return call<R>("getResultSetHoldability", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getResultSetType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResultSetType")] != -1);
		return call<R>("getResultSetType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::RowId, typename... Args>
	auto getRowId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRowId")] != -1);
		return call<R>("getRowId", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::SQLXML, typename... Args>
	auto getSQLXML(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSQLXML")] != -1);
		return call<R>("getSQLXML", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto getShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getShort")] != -1);
		return call<R>("getShort", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getString")] != -1);
		return call<R>("getString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::Time, typename... Args>
	auto getTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTime")] != -1);
		return call<R>("getTime", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::Timestamp, typename... Args>
	auto getTimestamp(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTimestamp")] != -1);
		return call<R>("getTimestamp", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::URL, typename... Args>
	auto getURL(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getURL")] != -1);
		return call<R>("getURL", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getUpdateCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUpdateCount")] != -1);
		return call<R>("getUpdateCount", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::SQLWarning, typename... Args>
	auto getWarnings(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWarnings")] != -1);
		return call<R>("getWarnings", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCloseOnCompletion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCloseOnCompletion")] != -1);
		return call<R>("isCloseOnCompletion", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isClosed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isClosed")] != -1);
		return call<R>("isClosed", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPoolable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPoolable")] != -1);
		return call<R>("isPoolable", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isWrapperFor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isWrapperFor")] != -1);
		return call<R>("isWrapperFor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto registerOutParameter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("registerOutParameter")] != -1);
		return call<R>("registerOutParameter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setArray")] != -1);
		return call<R>("setArray", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAsciiStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAsciiStream")] != -1);
		return call<R>("setAsciiStream", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBigDecimal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBigDecimal")] != -1);
		return call<R>("setBigDecimal", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBinaryStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBinaryStream")] != -1);
		return call<R>("setBinaryStream", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBlob(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBlob")] != -1);
		return call<R>("setBlob", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBoolean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBoolean")] != -1);
		return call<R>("setBoolean", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setByte")] != -1);
		return call<R>("setByte", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBytes")] != -1);
		return call<R>("setBytes", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCharacterStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCharacterStream")] != -1);
		return call<R>("setCharacterStream", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setClob(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setClob")] != -1);
		return call<R>("setClob", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCursorName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCursorName")] != -1);
		return call<R>("setCursorName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDate")] != -1);
		return call<R>("setDate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDouble")] != -1);
		return call<R>("setDouble", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEscapeProcessing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEscapeProcessing")] != -1);
		return call<R>("setEscapeProcessing", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFetchDirection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFetchDirection")] != -1);
		return call<R>("setFetchDirection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFetchSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFetchSize")] != -1);
		return call<R>("setFetchSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFloat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFloat")] != -1);
		return call<R>("setFloat", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setInt")] != -1);
		return call<R>("setInt", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLong")] != -1);
		return call<R>("setLong", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaxFieldSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMaxFieldSize")] != -1);
		return call<R>("setMaxFieldSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaxRows(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMaxRows")] != -1);
		return call<R>("setMaxRows", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNCharacterStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNCharacterStream")] != -1);
		return call<R>("setNCharacterStream", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNClob(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNClob")] != -1);
		return call<R>("setNClob", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNString")] != -1);
		return call<R>("setNString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNull(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNull")] != -1);
		return call<R>("setNull", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setObject")] != -1);
		return call<R>("setObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPoolable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPoolable")] != -1);
		return call<R>("setPoolable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setQueryTimeout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setQueryTimeout")] != -1);
		return call<R>("setQueryTimeout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRef(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRef")] != -1);
		return call<R>("setRef", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRowId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRowId")] != -1);
		return call<R>("setRowId", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSQLXML(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSQLXML")] != -1);
		return call<R>("setSQLXML", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setShort")] != -1);
		return call<R>("setShort", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setString")] != -1);
		return call<R>("setString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTime")] != -1);
		return call<R>("setTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTimestamp(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTimestamp")] != -1);
		return call<R>("setTimestamp", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setURL(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setURL")] != -1);
		return call<R>("setURL", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUnicodeStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUnicodeStream")] != -1);
		return call<R>("setUnicodeStream", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto unwrap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unwrap")] != -1);
		return call<R>("unwrap", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto wasNull(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("wasNull")] != -1);
		return call<R>("wasNull", std::forward<Args>(args)...);
	}

};

#endif
