#ifndef java_sql_SQLException_HPP
#define java_sql_SQLException_HPP

#include "../../jfwd_decl.hpp"

class ::java::sql::SQLException : public jObject<::java::sql::SQLException, ::java::lang::Exception> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_sql / "SQLException";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::jint)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::jint, ::java::lang::Throwable)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::Throwable)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::Throwable)>(), //
		jConstructor<::jvoid(::java::lang::Throwable)>(), //
		jMethod<::jvoid(::java::util::function::Consumer)>("forEach"), //
		jMethod<::jint()>("getErrorCode"), //
		jMethod<::java::sql::SQLException()>("getNextException"), //
		jMethod<::java::lang::String()>("getSQLState"), //
		jMethod<::java::util::Iterator()>("iterator"), //
		jMethod<::jvoid(::java::sql::SQLException)>("setNextException"), //
		jMethod<::java::util::Spliterator()>("spliterator"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto forEach(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("forEach")] != -1);
		return call<R>("forEach", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getErrorCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getErrorCode")] != -1);
		return call<R>("getErrorCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::SQLException, typename... Args>
	auto getNextException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNextException")] != -1);
		return call<R>("getNextException", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSQLState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSQLState")] != -1);
		return call<R>("getSQLState", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto iterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("iterator")] != -1);
		return call<R>("iterator", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNextException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNextException")] != -1);
		return call<R>("setNextException", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Spliterator, typename... Args>
	auto spliterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("spliterator")] != -1);
		return call<R>("spliterator", std::forward<Args>(args)...);
	}

};

#endif
