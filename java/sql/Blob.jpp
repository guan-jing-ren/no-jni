#ifndef java_sql_Blob_HPP
#define java_sql_Blob_HPP

#include "../../jfwd_decl.hpp"

class ::java::sql::Blob : public jObject<::java::sql::Blob, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_sql / "Blob";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("free"), //
		jMethod<::java::io::InputStream()>("getBinaryStream"), //
		jMethod<::java::io::InputStream(::jlong, ::jlong)>("getBinaryStream"), //
		jMethod<::jbyte *(::jlong, ::jint)>("getBytes"), //
		jMethod<::jlong()>("length"), //
		jMethod<::jlong(::java::sql::Blob, ::jlong)>("position"), //
		jMethod<::jlong(::jbyte *, ::jlong)>("position"), //
		jMethod<::java::io::OutputStream(::jlong)>("setBinaryStream"), //
		jMethod<::jint(::jlong, ::jbyte *)>("setBytes"), //
		jMethod<::jint(::jlong, ::jbyte *, ::jint, ::jint)>("setBytes"), //
		jMethod<::jvoid(::jlong)>("truncate"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto free(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("free")] != -1);
		return call<R>("free", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	auto getBinaryStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBinaryStream")] != -1);
		return call<R>("getBinaryStream", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBytes")] != -1);
		return call<R>("getBytes", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto length(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("length")] != -1);
		return call<R>("length", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto position(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("position")] != -1);
		return call<R>("position", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::OutputStream, typename... Args>
	auto setBinaryStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBinaryStream")] != -1);
		return call<R>("setBinaryStream", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto setBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBytes")] != -1);
		return call<R>("setBytes", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto truncate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("truncate")] != -1);
		return call<R>("truncate", std::forward<Args>(args)...);
	}

};

#endif
