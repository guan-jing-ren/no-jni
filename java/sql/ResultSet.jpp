#ifndef java_sql_ResultSet_HPP
#define java_sql_ResultSet_HPP

#include "../../jfwd_decl.hpp"

class ::java::sql::ResultSet : public jObject<::java::sql::ResultSet, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_sql / "ResultSet";

	constexpr static Enume field_signatures{
		jField<::jint>("CLOSE_CURSORS_AT_COMMIT"), //
		jField<::jint>("CONCUR_READ_ONLY"), //
		jField<::jint>("CONCUR_UPDATABLE"), //
		jField<::jint>("FETCH_FORWARD"), //
		jField<::jint>("FETCH_REVERSE"), //
		jField<::jint>("FETCH_UNKNOWN"), //
		jField<::jint>("HOLD_CURSORS_OVER_COMMIT"), //
		jField<::jint>("TYPE_FORWARD_ONLY"), //
		jField<::jint>("TYPE_SCROLL_INSENSITIVE"), //
		jField<::jint>("TYPE_SCROLL_SENSITIVE"), //
	};

	template<typename F = ::jint>
	static auto CLOSE_CURSORS_AT_COMMIT() {
		static_assert(field_signatures[jField<F>("CLOSE_CURSORS_AT_COMMIT")] != -1);
		return sat<F>("CLOSE_CURSORS_AT_COMMIT");
	}

	template<typename F = ::jint>
	static auto CONCUR_READ_ONLY() {
		static_assert(field_signatures[jField<F>("CONCUR_READ_ONLY")] != -1);
		return sat<F>("CONCUR_READ_ONLY");
	}

	template<typename F = ::jint>
	static auto CONCUR_UPDATABLE() {
		static_assert(field_signatures[jField<F>("CONCUR_UPDATABLE")] != -1);
		return sat<F>("CONCUR_UPDATABLE");
	}

	template<typename F = ::jint>
	static auto FETCH_FORWARD() {
		static_assert(field_signatures[jField<F>("FETCH_FORWARD")] != -1);
		return sat<F>("FETCH_FORWARD");
	}

	template<typename F = ::jint>
	static auto FETCH_REVERSE() {
		static_assert(field_signatures[jField<F>("FETCH_REVERSE")] != -1);
		return sat<F>("FETCH_REVERSE");
	}

	template<typename F = ::jint>
	static auto FETCH_UNKNOWN() {
		static_assert(field_signatures[jField<F>("FETCH_UNKNOWN")] != -1);
		return sat<F>("FETCH_UNKNOWN");
	}

	template<typename F = ::jint>
	static auto HOLD_CURSORS_OVER_COMMIT() {
		static_assert(field_signatures[jField<F>("HOLD_CURSORS_OVER_COMMIT")] != -1);
		return sat<F>("HOLD_CURSORS_OVER_COMMIT");
	}

	template<typename F = ::jint>
	static auto TYPE_FORWARD_ONLY() {
		static_assert(field_signatures[jField<F>("TYPE_FORWARD_ONLY")] != -1);
		return sat<F>("TYPE_FORWARD_ONLY");
	}

	template<typename F = ::jint>
	static auto TYPE_SCROLL_INSENSITIVE() {
		static_assert(field_signatures[jField<F>("TYPE_SCROLL_INSENSITIVE")] != -1);
		return sat<F>("TYPE_SCROLL_INSENSITIVE");
	}

	template<typename F = ::jint>
	static auto TYPE_SCROLL_SENSITIVE() {
		static_assert(field_signatures[jField<F>("TYPE_SCROLL_SENSITIVE")] != -1);
		return sat<F>("TYPE_SCROLL_SENSITIVE");
	}

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::jint)>("absolute"), //
		jMethod<::jvoid()>("afterLast"), //
		jMethod<::jvoid()>("beforeFirst"), //
		jMethod<::jvoid()>("cancelRowUpdates"), //
		jMethod<::jvoid()>("clearWarnings"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::jvoid()>("deleteRow"), //
		jMethod<::jint(::java::lang::String)>("findColumn"), //
		jMethod<::jboolean()>("first"), //
		jMethod<::java::sql::Array(::jint)>("getArray"), //
		jMethod<::java::sql::Array(::java::lang::String)>("getArray"), //
		jMethod<::java::io::InputStream(::jint)>("getAsciiStream"), //
		jMethod<::java::io::InputStream(::java::lang::String)>("getAsciiStream"), //
		jMethod<::java::math::BigDecimal(::jint)>("getBigDecimal"), //
		jMethod<::java::math::BigDecimal(::java::lang::String)>("getBigDecimal"), //
		jMethod<::java::io::InputStream(::jint)>("getBinaryStream"), //
		jMethod<::java::io::InputStream(::java::lang::String)>("getBinaryStream"), //
		jMethod<::java::sql::Blob(::jint)>("getBlob"), //
		jMethod<::java::sql::Blob(::java::lang::String)>("getBlob"), //
		jMethod<::jboolean(::jint)>("getBoolean"), //
		jMethod<::jboolean(::java::lang::String)>("getBoolean"), //
		jMethod<::jbyte(::jint)>("getByte"), //
		jMethod<::jbyte(::java::lang::String)>("getByte"), //
		jMethod<::jbyte *(::jint)>("getBytes"), //
		jMethod<::jbyte *(::java::lang::String)>("getBytes"), //
		jMethod<::java::io::Reader(::jint)>("getCharacterStream"), //
		jMethod<::java::io::Reader(::java::lang::String)>("getCharacterStream"), //
		jMethod<::java::sql::Clob(::jint)>("getClob"), //
		jMethod<::java::sql::Clob(::java::lang::String)>("getClob"), //
		jMethod<::jint()>("getConcurrency"), //
		jMethod<::java::lang::String()>("getCursorName"), //
		jMethod<::java::sql::Date(::jint)>("getDate"), //
		jMethod<::java::sql::Date(::jint, ::java::util::Calendar)>("getDate"), //
		jMethod<::java::sql::Date(::java::lang::String)>("getDate"), //
		jMethod<::java::sql::Date(::java::lang::String, ::java::util::Calendar)>("getDate"), //
		jMethod<::jdouble(::jint)>("getDouble"), //
		jMethod<::jdouble(::java::lang::String)>("getDouble"), //
		jMethod<::jint()>("getFetchDirection"), //
		jMethod<::jint()>("getFetchSize"), //
		jMethod<::jfloat(::jint)>("getFloat"), //
		jMethod<::jfloat(::java::lang::String)>("getFloat"), //
		jMethod<::jint()>("getHoldability"), //
		jMethod<::jint(::jint)>("getInt"), //
		jMethod<::jint(::java::lang::String)>("getInt"), //
		jMethod<::jlong(::jint)>("getLong"), //
		jMethod<::jlong(::java::lang::String)>("getLong"), //
		jMethod<::java::sql::ResultSetMetaData()>("getMetaData"), //
		jMethod<::java::io::Reader(::jint)>("getNCharacterStream"), //
		jMethod<::java::io::Reader(::java::lang::String)>("getNCharacterStream"), //
		jMethod<::java::sql::NClob(::jint)>("getNClob"), //
		jMethod<::java::sql::NClob(::java::lang::String)>("getNClob"), //
		jMethod<::java::lang::String(::jint)>("getNString"), //
		jMethod<::java::lang::String(::java::lang::String)>("getNString"), //
		jMethod<::java::lang::Object(::jint)>("getObject"), //
		jMethod<::java::lang::Object(::jint, ::java::lang::Class)>("getObject"), //
		jMethod<::java::lang::Object(::jint, ::java::util::Map)>("getObject"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getObject"), //
		jMethod<::java::lang::Object(::java::lang::String, ::java::lang::Class)>("getObject"), //
		jMethod<::java::lang::Object(::java::lang::String, ::java::util::Map)>("getObject"), //
		jMethod<::java::sql::Ref(::jint)>("getRef"), //
		jMethod<::java::sql::Ref(::java::lang::String)>("getRef"), //
		jMethod<::jint()>("getRow"), //
		jMethod<::java::sql::RowId(::jint)>("getRowId"), //
		jMethod<::java::sql::RowId(::java::lang::String)>("getRowId"), //
		jMethod<::java::sql::SQLXML(::jint)>("getSQLXML"), //
		jMethod<::java::sql::SQLXML(::java::lang::String)>("getSQLXML"), //
		jMethod<::jshort(::jint)>("getShort"), //
		jMethod<::jshort(::java::lang::String)>("getShort"), //
		jMethod<::java::sql::Statement()>("getStatement"), //
		jMethod<::java::lang::String(::jint)>("getString"), //
		jMethod<::java::lang::String(::java::lang::String)>("getString"), //
		jMethod<::java::sql::Time(::jint)>("getTime"), //
		jMethod<::java::sql::Time(::jint, ::java::util::Calendar)>("getTime"), //
		jMethod<::java::sql::Time(::java::lang::String)>("getTime"), //
		jMethod<::java::sql::Time(::java::lang::String, ::java::util::Calendar)>("getTime"), //
		jMethod<::java::sql::Timestamp(::jint)>("getTimestamp"), //
		jMethod<::java::sql::Timestamp(::jint, ::java::util::Calendar)>("getTimestamp"), //
		jMethod<::java::sql::Timestamp(::java::lang::String)>("getTimestamp"), //
		jMethod<::java::sql::Timestamp(::java::lang::String, ::java::util::Calendar)>("getTimestamp"), //
		jMethod<::jint()>("getType"), //
		jMethod<::java::net::URL(::jint)>("getURL"), //
		jMethod<::java::net::URL(::java::lang::String)>("getURL"), //
		jMethod<::java::sql::SQLWarning()>("getWarnings"), //
		jMethod<::jvoid()>("insertRow"), //
		jMethod<::jboolean()>("isAfterLast"), //
		jMethod<::jboolean()>("isBeforeFirst"), //
		jMethod<::jboolean()>("isClosed"), //
		jMethod<::jboolean()>("isFirst"), //
		jMethod<::jboolean()>("isLast"), //
		jMethod<::jboolean(::java::lang::Class)>("isWrapperFor"), //
		jMethod<::jboolean()>("last"), //
		jMethod<::jvoid()>("moveToCurrentRow"), //
		jMethod<::jvoid()>("moveToInsertRow"), //
		jMethod<::jboolean()>("next"), //
		jMethod<::jboolean()>("previous"), //
		jMethod<::jvoid()>("refreshRow"), //
		jMethod<::jboolean(::jint)>("relative"), //
		jMethod<::jboolean()>("rowDeleted"), //
		jMethod<::jboolean()>("rowInserted"), //
		jMethod<::jboolean()>("rowUpdated"), //
		jMethod<::jvoid(::jint)>("setFetchDirection"), //
		jMethod<::jvoid(::jint)>("setFetchSize"), //
		jMethod<::java::lang::Object(::java::lang::Class)>("unwrap"), //
		jMethod<::jvoid(::jint, ::java::sql::Array)>("updateArray"), //
		jMethod<::jvoid(::java::lang::String, ::java::sql::Array)>("updateArray"), //
		jMethod<::jvoid(::jint, ::java::io::InputStream)>("updateAsciiStream"), //
		jMethod<::jvoid(::jint, ::java::io::InputStream, ::jint)>("updateAsciiStream"), //
		jMethod<::jvoid(::jint, ::java::io::InputStream, ::jlong)>("updateAsciiStream"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::InputStream)>("updateAsciiStream"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::InputStream, ::jint)>("updateAsciiStream"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::InputStream, ::jlong)>("updateAsciiStream"), //
		jMethod<::jvoid(::jint, ::java::math::BigDecimal)>("updateBigDecimal"), //
		jMethod<::jvoid(::java::lang::String, ::java::math::BigDecimal)>("updateBigDecimal"), //
		jMethod<::jvoid(::jint, ::java::io::InputStream)>("updateBinaryStream"), //
		jMethod<::jvoid(::jint, ::java::io::InputStream, ::jint)>("updateBinaryStream"), //
		jMethod<::jvoid(::jint, ::java::io::InputStream, ::jlong)>("updateBinaryStream"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::InputStream)>("updateBinaryStream"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::InputStream, ::jint)>("updateBinaryStream"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::InputStream, ::jlong)>("updateBinaryStream"), //
		jMethod<::jvoid(::jint, ::java::io::InputStream)>("updateBlob"), //
		jMethod<::jvoid(::jint, ::java::io::InputStream, ::jlong)>("updateBlob"), //
		jMethod<::jvoid(::jint, ::java::sql::Blob)>("updateBlob"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::InputStream)>("updateBlob"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::InputStream, ::jlong)>("updateBlob"), //
		jMethod<::jvoid(::java::lang::String, ::java::sql::Blob)>("updateBlob"), //
		jMethod<::jvoid(::jint, ::jboolean)>("updateBoolean"), //
		jMethod<::jvoid(::java::lang::String, ::jboolean)>("updateBoolean"), //
		jMethod<::jvoid(::jint, ::jbyte)>("updateByte"), //
		jMethod<::jvoid(::java::lang::String, ::jbyte)>("updateByte"), //
		jMethod<::jvoid(::jint, ::jbyte *)>("updateBytes"), //
		jMethod<::jvoid(::java::lang::String, ::jbyte *)>("updateBytes"), //
		jMethod<::jvoid(::jint, ::java::io::Reader)>("updateCharacterStream"), //
		jMethod<::jvoid(::jint, ::java::io::Reader, ::jint)>("updateCharacterStream"), //
		jMethod<::jvoid(::jint, ::java::io::Reader, ::jlong)>("updateCharacterStream"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::Reader)>("updateCharacterStream"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::Reader, ::jint)>("updateCharacterStream"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::Reader, ::jlong)>("updateCharacterStream"), //
		jMethod<::jvoid(::jint, ::java::io::Reader)>("updateClob"), //
		jMethod<::jvoid(::jint, ::java::io::Reader, ::jlong)>("updateClob"), //
		jMethod<::jvoid(::jint, ::java::sql::Clob)>("updateClob"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::Reader)>("updateClob"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::Reader, ::jlong)>("updateClob"), //
		jMethod<::jvoid(::java::lang::String, ::java::sql::Clob)>("updateClob"), //
		jMethod<::jvoid(::jint, ::java::sql::Date)>("updateDate"), //
		jMethod<::jvoid(::java::lang::String, ::java::sql::Date)>("updateDate"), //
		jMethod<::jvoid(::jint, ::jdouble)>("updateDouble"), //
		jMethod<::jvoid(::java::lang::String, ::jdouble)>("updateDouble"), //
		jMethod<::jvoid(::jint, ::jfloat)>("updateFloat"), //
		jMethod<::jvoid(::java::lang::String, ::jfloat)>("updateFloat"), //
		jMethod<::jvoid(::jint, ::jint)>("updateInt"), //
		jMethod<::jvoid(::java::lang::String, ::jint)>("updateInt"), //
		jMethod<::jvoid(::jint, ::jlong)>("updateLong"), //
		jMethod<::jvoid(::java::lang::String, ::jlong)>("updateLong"), //
		jMethod<::jvoid(::jint, ::java::io::Reader)>("updateNCharacterStream"), //
		jMethod<::jvoid(::jint, ::java::io::Reader, ::jlong)>("updateNCharacterStream"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::Reader)>("updateNCharacterStream"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::Reader, ::jlong)>("updateNCharacterStream"), //
		jMethod<::jvoid(::jint, ::java::io::Reader)>("updateNClob"), //
		jMethod<::jvoid(::jint, ::java::io::Reader, ::jlong)>("updateNClob"), //
		jMethod<::jvoid(::jint, ::java::sql::NClob)>("updateNClob"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::Reader)>("updateNClob"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::Reader, ::jlong)>("updateNClob"), //
		jMethod<::jvoid(::java::lang::String, ::java::sql::NClob)>("updateNClob"), //
		jMethod<::jvoid(::jint, ::java::lang::String)>("updateNString"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("updateNString"), //
		jMethod<::jvoid(::jint)>("updateNull"), //
		jMethod<::jvoid(::java::lang::String)>("updateNull"), //
		jMethod<::jvoid(::jint, ::java::lang::Object)>("updateObject"), //
		jMethod<::jvoid(::jint, ::java::lang::Object, ::jint)>("updateObject"), //
		jMethod<::jvoid(::jint, ::java::lang::Object, ::java::sql::SQLType)>("updateObject"), //
		jMethod<::jvoid(::jint, ::java::lang::Object, ::java::sql::SQLType, ::jint)>("updateObject"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object)>("updateObject"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object, ::jint)>("updateObject"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object, ::java::sql::SQLType)>("updateObject"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object, ::java::sql::SQLType, ::jint)>("updateObject"), //
		jMethod<::jvoid(::jint, ::java::sql::Ref)>("updateRef"), //
		jMethod<::jvoid(::java::lang::String, ::java::sql::Ref)>("updateRef"), //
		jMethod<::jvoid()>("updateRow"), //
		jMethod<::jvoid(::jint, ::java::sql::RowId)>("updateRowId"), //
		jMethod<::jvoid(::java::lang::String, ::java::sql::RowId)>("updateRowId"), //
		jMethod<::jvoid(::jint, ::java::sql::SQLXML)>("updateSQLXML"), //
		jMethod<::jvoid(::java::lang::String, ::java::sql::SQLXML)>("updateSQLXML"), //
		jMethod<::jvoid(::jint, ::jshort)>("updateShort"), //
		jMethod<::jvoid(::java::lang::String, ::jshort)>("updateShort"), //
		jMethod<::jvoid(::jint, ::java::lang::String)>("updateString"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("updateString"), //
		jMethod<::jvoid(::jint, ::java::sql::Time)>("updateTime"), //
		jMethod<::jvoid(::java::lang::String, ::java::sql::Time)>("updateTime"), //
		jMethod<::jvoid(::jint, ::java::sql::Timestamp)>("updateTimestamp"), //
		jMethod<::jvoid(::java::lang::String, ::java::sql::Timestamp)>("updateTimestamp"), //
		jMethod<::jboolean()>("wasNull"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto absolute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("absolute")] != -1);
		return call<R>("absolute", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto afterLast(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("afterLast")] != -1);
		return call<R>("afterLast", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto beforeFirst(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("beforeFirst")] != -1);
		return call<R>("beforeFirst", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto cancelRowUpdates(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cancelRowUpdates")] != -1);
		return call<R>("cancelRowUpdates", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clearWarnings(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clearWarnings")] != -1);
		return call<R>("clearWarnings", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deleteRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deleteRow")] != -1);
		return call<R>("deleteRow", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto findColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("findColumn")] != -1);
		return call<R>("findColumn", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto first(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("first")] != -1);
		return call<R>("first", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::Array, typename... Args>
	auto getArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getArray")] != -1);
		return call<R>("getArray", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	auto getAsciiStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAsciiStream")] != -1);
		return call<R>("getAsciiStream", std::forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigDecimal, typename... Args>
	auto getBigDecimal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBigDecimal")] != -1);
		return call<R>("getBigDecimal", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	auto getBinaryStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBinaryStream")] != -1);
		return call<R>("getBinaryStream", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::Blob, typename... Args>
	auto getBlob(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBlob")] != -1);
		return call<R>("getBlob", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getBoolean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBoolean")] != -1);
		return call<R>("getBoolean", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto getByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getByte")] != -1);
		return call<R>("getByte", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBytes")] != -1);
		return call<R>("getBytes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::Reader, typename... Args>
	auto getCharacterStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCharacterStream")] != -1);
		return call<R>("getCharacterStream", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::Clob, typename... Args>
	auto getClob(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClob")] != -1);
		return call<R>("getClob", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getConcurrency(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConcurrency")] != -1);
		return call<R>("getConcurrency", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCursorName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCursorName")] != -1);
		return call<R>("getCursorName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::Date, typename... Args>
	auto getDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDate")] != -1);
		return call<R>("getDate", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDouble")] != -1);
		return call<R>("getDouble", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getFetchDirection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFetchDirection")] != -1);
		return call<R>("getFetchDirection", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getFetchSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFetchSize")] != -1);
		return call<R>("getFetchSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getFloat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFloat")] != -1);
		return call<R>("getFloat", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHoldability(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHoldability")] != -1);
		return call<R>("getHoldability", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInt")] != -1);
		return call<R>("getInt", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLong")] != -1);
		return call<R>("getLong", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::ResultSetMetaData, typename... Args>
	auto getMetaData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMetaData")] != -1);
		return call<R>("getMetaData", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::Reader, typename... Args>
	auto getNCharacterStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNCharacterStream")] != -1);
		return call<R>("getNCharacterStream", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::NClob, typename... Args>
	auto getNClob(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNClob")] != -1);
		return call<R>("getNClob", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNString")] != -1);
		return call<R>("getNString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObject")] != -1);
		return call<R>("getObject", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::Ref, typename... Args>
	auto getRef(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRef")] != -1);
		return call<R>("getRef", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRow")] != -1);
		return call<R>("getRow", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::RowId, typename... Args>
	auto getRowId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRowId")] != -1);
		return call<R>("getRowId", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::SQLXML, typename... Args>
	auto getSQLXML(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSQLXML")] != -1);
		return call<R>("getSQLXML", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto getShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getShort")] != -1);
		return call<R>("getShort", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::Statement, typename... Args>
	auto getStatement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStatement")] != -1);
		return call<R>("getStatement", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getString")] != -1);
		return call<R>("getString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::Time, typename... Args>
	auto getTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTime")] != -1);
		return call<R>("getTime", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::Timestamp, typename... Args>
	auto getTimestamp(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTimestamp")] != -1);
		return call<R>("getTimestamp", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::URL, typename... Args>
	auto getURL(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getURL")] != -1);
		return call<R>("getURL", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::SQLWarning, typename... Args>
	auto getWarnings(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWarnings")] != -1);
		return call<R>("getWarnings", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insertRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insertRow")] != -1);
		return call<R>("insertRow", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAfterLast(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAfterLast")] != -1);
		return call<R>("isAfterLast", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isBeforeFirst(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isBeforeFirst")] != -1);
		return call<R>("isBeforeFirst", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isClosed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isClosed")] != -1);
		return call<R>("isClosed", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFirst(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFirst")] != -1);
		return call<R>("isFirst", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLast(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLast")] != -1);
		return call<R>("isLast", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isWrapperFor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isWrapperFor")] != -1);
		return call<R>("isWrapperFor", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto last(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("last")] != -1);
		return call<R>("last", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto moveToCurrentRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("moveToCurrentRow")] != -1);
		return call<R>("moveToCurrentRow", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto moveToInsertRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("moveToInsertRow")] != -1);
		return call<R>("moveToInsertRow", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto next(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("next")] != -1);
		return call<R>("next", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto previous(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("previous")] != -1);
		return call<R>("previous", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto refreshRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("refreshRow")] != -1);
		return call<R>("refreshRow", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto relative(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("relative")] != -1);
		return call<R>("relative", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto rowDeleted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rowDeleted")] != -1);
		return call<R>("rowDeleted", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto rowInserted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rowInserted")] != -1);
		return call<R>("rowInserted", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto rowUpdated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rowUpdated")] != -1);
		return call<R>("rowUpdated", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFetchDirection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFetchDirection")] != -1);
		return call<R>("setFetchDirection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFetchSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFetchSize")] != -1);
		return call<R>("setFetchSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto unwrap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unwrap")] != -1);
		return call<R>("unwrap", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateArray")] != -1);
		return call<R>("updateArray", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateAsciiStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateAsciiStream")] != -1);
		return call<R>("updateAsciiStream", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateBigDecimal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateBigDecimal")] != -1);
		return call<R>("updateBigDecimal", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateBinaryStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateBinaryStream")] != -1);
		return call<R>("updateBinaryStream", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateBlob(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateBlob")] != -1);
		return call<R>("updateBlob", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateBoolean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateBoolean")] != -1);
		return call<R>("updateBoolean", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateByte")] != -1);
		return call<R>("updateByte", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateBytes")] != -1);
		return call<R>("updateBytes", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateCharacterStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateCharacterStream")] != -1);
		return call<R>("updateCharacterStream", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateClob(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateClob")] != -1);
		return call<R>("updateClob", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateDate")] != -1);
		return call<R>("updateDate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateDouble")] != -1);
		return call<R>("updateDouble", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateFloat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateFloat")] != -1);
		return call<R>("updateFloat", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateInt")] != -1);
		return call<R>("updateInt", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateLong")] != -1);
		return call<R>("updateLong", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateNCharacterStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateNCharacterStream")] != -1);
		return call<R>("updateNCharacterStream", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateNClob(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateNClob")] != -1);
		return call<R>("updateNClob", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateNString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateNString")] != -1);
		return call<R>("updateNString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateNull(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateNull")] != -1);
		return call<R>("updateNull", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateObject")] != -1);
		return call<R>("updateObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateRef(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateRef")] != -1);
		return call<R>("updateRef", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateRow")] != -1);
		return call<R>("updateRow", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateRowId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateRowId")] != -1);
		return call<R>("updateRowId", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateSQLXML(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateSQLXML")] != -1);
		return call<R>("updateSQLXML", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateShort")] != -1);
		return call<R>("updateShort", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateString")] != -1);
		return call<R>("updateString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateTime")] != -1);
		return call<R>("updateTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateTimestamp(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateTimestamp")] != -1);
		return call<R>("updateTimestamp", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto wasNull(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("wasNull")] != -1);
		return call<R>("wasNull", std::forward<Args>(args)...);
	}

};

#endif
