#ifndef java_sql_DatabaseMetaData_HPP
#define java_sql_DatabaseMetaData_HPP

#include "../../jfwd_decl.hpp"

class ::java::sql::DatabaseMetaData : public jObject<::java::sql::DatabaseMetaData, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_sql / "DatabaseMetaData";

	constexpr static Enume field_signatures{
		jField<::jshort>("attributeNoNulls"), //
		jField<::jshort>("attributeNullable"), //
		jField<::jshort>("attributeNullableUnknown"), //
		jField<::jint>("bestRowNotPseudo"), //
		jField<::jint>("bestRowPseudo"), //
		jField<::jint>("bestRowSession"), //
		jField<::jint>("bestRowTemporary"), //
		jField<::jint>("bestRowTransaction"), //
		jField<::jint>("bestRowUnknown"), //
		jField<::jint>("columnNoNulls"), //
		jField<::jint>("columnNullable"), //
		jField<::jint>("columnNullableUnknown"), //
		jField<::jint>("functionColumnIn"), //
		jField<::jint>("functionColumnInOut"), //
		jField<::jint>("functionColumnOut"), //
		jField<::jint>("functionColumnResult"), //
		jField<::jint>("functionColumnUnknown"), //
		jField<::jint>("functionNoNulls"), //
		jField<::jint>("functionNoTable"), //
		jField<::jint>("functionNullable"), //
		jField<::jint>("functionNullableUnknown"), //
		jField<::jint>("functionResultUnknown"), //
		jField<::jint>("functionReturn"), //
		jField<::jint>("functionReturnsTable"), //
		jField<::jint>("importedKeyCascade"), //
		jField<::jint>("importedKeyInitiallyDeferred"), //
		jField<::jint>("importedKeyInitiallyImmediate"), //
		jField<::jint>("importedKeyNoAction"), //
		jField<::jint>("importedKeyNotDeferrable"), //
		jField<::jint>("importedKeyRestrict"), //
		jField<::jint>("importedKeySetDefault"), //
		jField<::jint>("importedKeySetNull"), //
		jField<::jint>("procedureColumnIn"), //
		jField<::jint>("procedureColumnInOut"), //
		jField<::jint>("procedureColumnOut"), //
		jField<::jint>("procedureColumnResult"), //
		jField<::jint>("procedureColumnReturn"), //
		jField<::jint>("procedureColumnUnknown"), //
		jField<::jint>("procedureNoNulls"), //
		jField<::jint>("procedureNoResult"), //
		jField<::jint>("procedureNullable"), //
		jField<::jint>("procedureNullableUnknown"), //
		jField<::jint>("procedureResultUnknown"), //
		jField<::jint>("procedureReturnsResult"), //
		jField<::jint>("sqlStateSQL"), //
		jField<::jint>("sqlStateSQL99"), //
		jField<::jint>("sqlStateXOpen"), //
		jField<::jshort>("tableIndexClustered"), //
		jField<::jshort>("tableIndexHashed"), //
		jField<::jshort>("tableIndexOther"), //
		jField<::jshort>("tableIndexStatistic"), //
		jField<::jint>("typeNoNulls"), //
		jField<::jint>("typeNullable"), //
		jField<::jint>("typeNullableUnknown"), //
		jField<::jint>("typePredBasic"), //
		jField<::jint>("typePredChar"), //
		jField<::jint>("typePredNone"), //
		jField<::jint>("typeSearchable"), //
		jField<::jint>("versionColumnNotPseudo"), //
		jField<::jint>("versionColumnPseudo"), //
		jField<::jint>("versionColumnUnknown"), //
	};

	template<typename F = ::jshort>
	static auto attributeNoNulls() {
		static_assert(field_signatures[jField<F>("attributeNoNulls")] != -1);
		return sat<F>("attributeNoNulls");
	}

	template<typename F = ::jshort>
	static auto attributeNullable() {
		static_assert(field_signatures[jField<F>("attributeNullable")] != -1);
		return sat<F>("attributeNullable");
	}

	template<typename F = ::jshort>
	static auto attributeNullableUnknown() {
		static_assert(field_signatures[jField<F>("attributeNullableUnknown")] != -1);
		return sat<F>("attributeNullableUnknown");
	}

	template<typename F = ::jint>
	static auto bestRowNotPseudo() {
		static_assert(field_signatures[jField<F>("bestRowNotPseudo")] != -1);
		return sat<F>("bestRowNotPseudo");
	}

	template<typename F = ::jint>
	static auto bestRowPseudo() {
		static_assert(field_signatures[jField<F>("bestRowPseudo")] != -1);
		return sat<F>("bestRowPseudo");
	}

	template<typename F = ::jint>
	static auto bestRowSession() {
		static_assert(field_signatures[jField<F>("bestRowSession")] != -1);
		return sat<F>("bestRowSession");
	}

	template<typename F = ::jint>
	static auto bestRowTemporary() {
		static_assert(field_signatures[jField<F>("bestRowTemporary")] != -1);
		return sat<F>("bestRowTemporary");
	}

	template<typename F = ::jint>
	static auto bestRowTransaction() {
		static_assert(field_signatures[jField<F>("bestRowTransaction")] != -1);
		return sat<F>("bestRowTransaction");
	}

	template<typename F = ::jint>
	static auto bestRowUnknown() {
		static_assert(field_signatures[jField<F>("bestRowUnknown")] != -1);
		return sat<F>("bestRowUnknown");
	}

	template<typename F = ::jint>
	static auto columnNoNulls() {
		static_assert(field_signatures[jField<F>("columnNoNulls")] != -1);
		return sat<F>("columnNoNulls");
	}

	template<typename F = ::jint>
	static auto columnNullable() {
		static_assert(field_signatures[jField<F>("columnNullable")] != -1);
		return sat<F>("columnNullable");
	}

	template<typename F = ::jint>
	static auto columnNullableUnknown() {
		static_assert(field_signatures[jField<F>("columnNullableUnknown")] != -1);
		return sat<F>("columnNullableUnknown");
	}

	template<typename F = ::jint>
	static auto functionColumnIn() {
		static_assert(field_signatures[jField<F>("functionColumnIn")] != -1);
		return sat<F>("functionColumnIn");
	}

	template<typename F = ::jint>
	static auto functionColumnInOut() {
		static_assert(field_signatures[jField<F>("functionColumnInOut")] != -1);
		return sat<F>("functionColumnInOut");
	}

	template<typename F = ::jint>
	static auto functionColumnOut() {
		static_assert(field_signatures[jField<F>("functionColumnOut")] != -1);
		return sat<F>("functionColumnOut");
	}

	template<typename F = ::jint>
	static auto functionColumnResult() {
		static_assert(field_signatures[jField<F>("functionColumnResult")] != -1);
		return sat<F>("functionColumnResult");
	}

	template<typename F = ::jint>
	static auto functionColumnUnknown() {
		static_assert(field_signatures[jField<F>("functionColumnUnknown")] != -1);
		return sat<F>("functionColumnUnknown");
	}

	template<typename F = ::jint>
	static auto functionNoNulls() {
		static_assert(field_signatures[jField<F>("functionNoNulls")] != -1);
		return sat<F>("functionNoNulls");
	}

	template<typename F = ::jint>
	static auto functionNoTable() {
		static_assert(field_signatures[jField<F>("functionNoTable")] != -1);
		return sat<F>("functionNoTable");
	}

	template<typename F = ::jint>
	static auto functionNullable() {
		static_assert(field_signatures[jField<F>("functionNullable")] != -1);
		return sat<F>("functionNullable");
	}

	template<typename F = ::jint>
	static auto functionNullableUnknown() {
		static_assert(field_signatures[jField<F>("functionNullableUnknown")] != -1);
		return sat<F>("functionNullableUnknown");
	}

	template<typename F = ::jint>
	static auto functionResultUnknown() {
		static_assert(field_signatures[jField<F>("functionResultUnknown")] != -1);
		return sat<F>("functionResultUnknown");
	}

	template<typename F = ::jint>
	static auto functionReturn() {
		static_assert(field_signatures[jField<F>("functionReturn")] != -1);
		return sat<F>("functionReturn");
	}

	template<typename F = ::jint>
	static auto functionReturnsTable() {
		static_assert(field_signatures[jField<F>("functionReturnsTable")] != -1);
		return sat<F>("functionReturnsTable");
	}

	template<typename F = ::jint>
	static auto importedKeyCascade() {
		static_assert(field_signatures[jField<F>("importedKeyCascade")] != -1);
		return sat<F>("importedKeyCascade");
	}

	template<typename F = ::jint>
	static auto importedKeyInitiallyDeferred() {
		static_assert(field_signatures[jField<F>("importedKeyInitiallyDeferred")] != -1);
		return sat<F>("importedKeyInitiallyDeferred");
	}

	template<typename F = ::jint>
	static auto importedKeyInitiallyImmediate() {
		static_assert(field_signatures[jField<F>("importedKeyInitiallyImmediate")] != -1);
		return sat<F>("importedKeyInitiallyImmediate");
	}

	template<typename F = ::jint>
	static auto importedKeyNoAction() {
		static_assert(field_signatures[jField<F>("importedKeyNoAction")] != -1);
		return sat<F>("importedKeyNoAction");
	}

	template<typename F = ::jint>
	static auto importedKeyNotDeferrable() {
		static_assert(field_signatures[jField<F>("importedKeyNotDeferrable")] != -1);
		return sat<F>("importedKeyNotDeferrable");
	}

	template<typename F = ::jint>
	static auto importedKeyRestrict() {
		static_assert(field_signatures[jField<F>("importedKeyRestrict")] != -1);
		return sat<F>("importedKeyRestrict");
	}

	template<typename F = ::jint>
	static auto importedKeySetDefault() {
		static_assert(field_signatures[jField<F>("importedKeySetDefault")] != -1);
		return sat<F>("importedKeySetDefault");
	}

	template<typename F = ::jint>
	static auto importedKeySetNull() {
		static_assert(field_signatures[jField<F>("importedKeySetNull")] != -1);
		return sat<F>("importedKeySetNull");
	}

	template<typename F = ::jint>
	static auto procedureColumnIn() {
		static_assert(field_signatures[jField<F>("procedureColumnIn")] != -1);
		return sat<F>("procedureColumnIn");
	}

	template<typename F = ::jint>
	static auto procedureColumnInOut() {
		static_assert(field_signatures[jField<F>("procedureColumnInOut")] != -1);
		return sat<F>("procedureColumnInOut");
	}

	template<typename F = ::jint>
	static auto procedureColumnOut() {
		static_assert(field_signatures[jField<F>("procedureColumnOut")] != -1);
		return sat<F>("procedureColumnOut");
	}

	template<typename F = ::jint>
	static auto procedureColumnResult() {
		static_assert(field_signatures[jField<F>("procedureColumnResult")] != -1);
		return sat<F>("procedureColumnResult");
	}

	template<typename F = ::jint>
	static auto procedureColumnReturn() {
		static_assert(field_signatures[jField<F>("procedureColumnReturn")] != -1);
		return sat<F>("procedureColumnReturn");
	}

	template<typename F = ::jint>
	static auto procedureColumnUnknown() {
		static_assert(field_signatures[jField<F>("procedureColumnUnknown")] != -1);
		return sat<F>("procedureColumnUnknown");
	}

	template<typename F = ::jint>
	static auto procedureNoNulls() {
		static_assert(field_signatures[jField<F>("procedureNoNulls")] != -1);
		return sat<F>("procedureNoNulls");
	}

	template<typename F = ::jint>
	static auto procedureNoResult() {
		static_assert(field_signatures[jField<F>("procedureNoResult")] != -1);
		return sat<F>("procedureNoResult");
	}

	template<typename F = ::jint>
	static auto procedureNullable() {
		static_assert(field_signatures[jField<F>("procedureNullable")] != -1);
		return sat<F>("procedureNullable");
	}

	template<typename F = ::jint>
	static auto procedureNullableUnknown() {
		static_assert(field_signatures[jField<F>("procedureNullableUnknown")] != -1);
		return sat<F>("procedureNullableUnknown");
	}

	template<typename F = ::jint>
	static auto procedureResultUnknown() {
		static_assert(field_signatures[jField<F>("procedureResultUnknown")] != -1);
		return sat<F>("procedureResultUnknown");
	}

	template<typename F = ::jint>
	static auto procedureReturnsResult() {
		static_assert(field_signatures[jField<F>("procedureReturnsResult")] != -1);
		return sat<F>("procedureReturnsResult");
	}

	template<typename F = ::jint>
	static auto sqlStateSQL() {
		static_assert(field_signatures[jField<F>("sqlStateSQL")] != -1);
		return sat<F>("sqlStateSQL");
	}

	template<typename F = ::jint>
	static auto sqlStateSQL99() {
		static_assert(field_signatures[jField<F>("sqlStateSQL99")] != -1);
		return sat<F>("sqlStateSQL99");
	}

	template<typename F = ::jint>
	static auto sqlStateXOpen() {
		static_assert(field_signatures[jField<F>("sqlStateXOpen")] != -1);
		return sat<F>("sqlStateXOpen");
	}

	template<typename F = ::jshort>
	static auto tableIndexClustered() {
		static_assert(field_signatures[jField<F>("tableIndexClustered")] != -1);
		return sat<F>("tableIndexClustered");
	}

	template<typename F = ::jshort>
	static auto tableIndexHashed() {
		static_assert(field_signatures[jField<F>("tableIndexHashed")] != -1);
		return sat<F>("tableIndexHashed");
	}

	template<typename F = ::jshort>
	static auto tableIndexOther() {
		static_assert(field_signatures[jField<F>("tableIndexOther")] != -1);
		return sat<F>("tableIndexOther");
	}

	template<typename F = ::jshort>
	static auto tableIndexStatistic() {
		static_assert(field_signatures[jField<F>("tableIndexStatistic")] != -1);
		return sat<F>("tableIndexStatistic");
	}

	template<typename F = ::jint>
	static auto typeNoNulls() {
		static_assert(field_signatures[jField<F>("typeNoNulls")] != -1);
		return sat<F>("typeNoNulls");
	}

	template<typename F = ::jint>
	static auto typeNullable() {
		static_assert(field_signatures[jField<F>("typeNullable")] != -1);
		return sat<F>("typeNullable");
	}

	template<typename F = ::jint>
	static auto typeNullableUnknown() {
		static_assert(field_signatures[jField<F>("typeNullableUnknown")] != -1);
		return sat<F>("typeNullableUnknown");
	}

	template<typename F = ::jint>
	static auto typePredBasic() {
		static_assert(field_signatures[jField<F>("typePredBasic")] != -1);
		return sat<F>("typePredBasic");
	}

	template<typename F = ::jint>
	static auto typePredChar() {
		static_assert(field_signatures[jField<F>("typePredChar")] != -1);
		return sat<F>("typePredChar");
	}

	template<typename F = ::jint>
	static auto typePredNone() {
		static_assert(field_signatures[jField<F>("typePredNone")] != -1);
		return sat<F>("typePredNone");
	}

	template<typename F = ::jint>
	static auto typeSearchable() {
		static_assert(field_signatures[jField<F>("typeSearchable")] != -1);
		return sat<F>("typeSearchable");
	}

	template<typename F = ::jint>
	static auto versionColumnNotPseudo() {
		static_assert(field_signatures[jField<F>("versionColumnNotPseudo")] != -1);
		return sat<F>("versionColumnNotPseudo");
	}

	template<typename F = ::jint>
	static auto versionColumnPseudo() {
		static_assert(field_signatures[jField<F>("versionColumnPseudo")] != -1);
		return sat<F>("versionColumnPseudo");
	}

	template<typename F = ::jint>
	static auto versionColumnUnknown() {
		static_assert(field_signatures[jField<F>("versionColumnUnknown")] != -1);
		return sat<F>("versionColumnUnknown");
	}

	constexpr static Enume method_signatures{
		jMethod<::jboolean()>("allProceduresAreCallable"), //
		jMethod<::jboolean()>("allTablesAreSelectable"), //
		jMethod<::jboolean()>("autoCommitFailureClosesAllResultSets"), //
		jMethod<::jboolean()>("dataDefinitionCausesTransactionCommit"), //
		jMethod<::jboolean()>("dataDefinitionIgnoredInTransactions"), //
		jMethod<::jboolean(::jint)>("deletesAreDetected"), //
		jMethod<::jboolean()>("doesMaxRowSizeIncludeBlobs"), //
		jMethod<::jboolean()>("generatedKeyAlwaysReturned"), //
		jMethod<::java::sql::ResultSet(::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::lang::String)>("getAttributes"), //
		jMethod<::java::sql::ResultSet(::java::lang::String, ::java::lang::String, ::java::lang::String, ::jint, ::jboolean)>("getBestRowIdentifier"), //
		jMethod<::java::lang::String()>("getCatalogSeparator"), //
		jMethod<::java::lang::String()>("getCatalogTerm"), //
		jMethod<::java::sql::ResultSet()>("getCatalogs"), //
		jMethod<::java::sql::ResultSet()>("getClientInfoProperties"), //
		jMethod<::java::sql::ResultSet(::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::lang::String)>("getColumnPrivileges"), //
		jMethod<::java::sql::ResultSet(::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::lang::String)>("getColumns"), //
		jMethod<::java::sql::Connection()>("getConnection"), //
		jMethod<::java::sql::ResultSet(::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::lang::String)>("getCrossReference"), //
		jMethod<::jint()>("getDatabaseMajorVersion"), //
		jMethod<::jint()>("getDatabaseMinorVersion"), //
		jMethod<::java::lang::String()>("getDatabaseProductName"), //
		jMethod<::java::lang::String()>("getDatabaseProductVersion"), //
		jMethod<::jint()>("getDefaultTransactionIsolation"), //
		jMethod<::jint()>("getDriverMajorVersion"), //
		jMethod<::jint()>("getDriverMinorVersion"), //
		jMethod<::java::lang::String()>("getDriverName"), //
		jMethod<::java::lang::String()>("getDriverVersion"), //
		jMethod<::java::sql::ResultSet(::java::lang::String, ::java::lang::String, ::java::lang::String)>("getExportedKeys"), //
		jMethod<::java::lang::String()>("getExtraNameCharacters"), //
		jMethod<::java::sql::ResultSet(::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::lang::String)>("getFunctionColumns"), //
		jMethod<::java::sql::ResultSet(::java::lang::String, ::java::lang::String, ::java::lang::String)>("getFunctions"), //
		jMethod<::java::lang::String()>("getIdentifierQuoteString"), //
		jMethod<::java::sql::ResultSet(::java::lang::String, ::java::lang::String, ::java::lang::String)>("getImportedKeys"), //
		jMethod<::java::sql::ResultSet(::java::lang::String, ::java::lang::String, ::java::lang::String, ::jboolean, ::jboolean)>("getIndexInfo"), //
		jMethod<::jint()>("getJDBCMajorVersion"), //
		jMethod<::jint()>("getJDBCMinorVersion"), //
		jMethod<::jint()>("getMaxBinaryLiteralLength"), //
		jMethod<::jint()>("getMaxCatalogNameLength"), //
		jMethod<::jint()>("getMaxCharLiteralLength"), //
		jMethod<::jint()>("getMaxColumnNameLength"), //
		jMethod<::jint()>("getMaxColumnsInGroupBy"), //
		jMethod<::jint()>("getMaxColumnsInIndex"), //
		jMethod<::jint()>("getMaxColumnsInOrderBy"), //
		jMethod<::jint()>("getMaxColumnsInSelect"), //
		jMethod<::jint()>("getMaxColumnsInTable"), //
		jMethod<::jint()>("getMaxConnections"), //
		jMethod<::jint()>("getMaxCursorNameLength"), //
		jMethod<::jint()>("getMaxIndexLength"), //
		jMethod<::jlong()>("getMaxLogicalLobSize"), //
		jMethod<::jint()>("getMaxProcedureNameLength"), //
		jMethod<::jint()>("getMaxRowSize"), //
		jMethod<::jint()>("getMaxSchemaNameLength"), //
		jMethod<::jint()>("getMaxStatementLength"), //
		jMethod<::jint()>("getMaxStatements"), //
		jMethod<::jint()>("getMaxTableNameLength"), //
		jMethod<::jint()>("getMaxTablesInSelect"), //
		jMethod<::jint()>("getMaxUserNameLength"), //
		jMethod<::java::lang::String()>("getNumericFunctions"), //
		jMethod<::java::sql::ResultSet(::java::lang::String, ::java::lang::String, ::java::lang::String)>("getPrimaryKeys"), //
		jMethod<::java::sql::ResultSet(::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::lang::String)>("getProcedureColumns"), //
		jMethod<::java::lang::String()>("getProcedureTerm"), //
		jMethod<::java::sql::ResultSet(::java::lang::String, ::java::lang::String, ::java::lang::String)>("getProcedures"), //
		jMethod<::java::sql::ResultSet(::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::lang::String)>("getPseudoColumns"), //
		jMethod<::jint()>("getResultSetHoldability"), //
		jMethod<::java::sql::RowIdLifetime()>("getRowIdLifetime"), //
		jMethod<::java::lang::String()>("getSQLKeywords"), //
		jMethod<::jint()>("getSQLStateType"), //
		jMethod<::java::lang::String()>("getSchemaTerm"), //
		jMethod<::java::sql::ResultSet()>("getSchemas"), //
		jMethod<::java::sql::ResultSet(::java::lang::String, ::java::lang::String)>("getSchemas"), //
		jMethod<::java::lang::String()>("getSearchStringEscape"), //
		jMethod<::java::lang::String()>("getStringFunctions"), //
		jMethod<::java::sql::ResultSet(::java::lang::String, ::java::lang::String, ::java::lang::String)>("getSuperTables"), //
		jMethod<::java::sql::ResultSet(::java::lang::String, ::java::lang::String, ::java::lang::String)>("getSuperTypes"), //
		jMethod<::java::lang::String()>("getSystemFunctions"), //
		jMethod<::java::sql::ResultSet(::java::lang::String, ::java::lang::String, ::java::lang::String)>("getTablePrivileges"), //
		jMethod<::java::sql::ResultSet()>("getTableTypes"), //
		jMethod<::java::sql::ResultSet(::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::lang::String *)>("getTables"), //
		jMethod<::java::lang::String()>("getTimeDateFunctions"), //
		jMethod<::java::sql::ResultSet()>("getTypeInfo"), //
		jMethod<::java::sql::ResultSet(::java::lang::String, ::java::lang::String, ::java::lang::String, ::jint *)>("getUDTs"), //
		jMethod<::java::lang::String()>("getURL"), //
		jMethod<::java::lang::String()>("getUserName"), //
		jMethod<::java::sql::ResultSet(::java::lang::String, ::java::lang::String, ::java::lang::String)>("getVersionColumns"), //
		jMethod<::jboolean(::jint)>("insertsAreDetected"), //
		jMethod<::jboolean()>("isCatalogAtStart"), //
		jMethod<::jboolean()>("isReadOnly"), //
		jMethod<::jboolean(::java::lang::Class)>("isWrapperFor"), //
		jMethod<::jboolean()>("locatorsUpdateCopy"), //
		jMethod<::jboolean()>("nullPlusNonNullIsNull"), //
		jMethod<::jboolean()>("nullsAreSortedAtEnd"), //
		jMethod<::jboolean()>("nullsAreSortedAtStart"), //
		jMethod<::jboolean()>("nullsAreSortedHigh"), //
		jMethod<::jboolean()>("nullsAreSortedLow"), //
		jMethod<::jboolean(::jint)>("othersDeletesAreVisible"), //
		jMethod<::jboolean(::jint)>("othersInsertsAreVisible"), //
		jMethod<::jboolean(::jint)>("othersUpdatesAreVisible"), //
		jMethod<::jboolean(::jint)>("ownDeletesAreVisible"), //
		jMethod<::jboolean(::jint)>("ownInsertsAreVisible"), //
		jMethod<::jboolean(::jint)>("ownUpdatesAreVisible"), //
		jMethod<::jboolean()>("storesLowerCaseIdentifiers"), //
		jMethod<::jboolean()>("storesLowerCaseQuotedIdentifiers"), //
		jMethod<::jboolean()>("storesMixedCaseIdentifiers"), //
		jMethod<::jboolean()>("storesMixedCaseQuotedIdentifiers"), //
		jMethod<::jboolean()>("storesUpperCaseIdentifiers"), //
		jMethod<::jboolean()>("storesUpperCaseQuotedIdentifiers"), //
		jMethod<::jboolean()>("supportsANSI92EntryLevelSQL"), //
		jMethod<::jboolean()>("supportsANSI92FullSQL"), //
		jMethod<::jboolean()>("supportsANSI92IntermediateSQL"), //
		jMethod<::jboolean()>("supportsAlterTableWithAddColumn"), //
		jMethod<::jboolean()>("supportsAlterTableWithDropColumn"), //
		jMethod<::jboolean()>("supportsBatchUpdates"), //
		jMethod<::jboolean()>("supportsCatalogsInDataManipulation"), //
		jMethod<::jboolean()>("supportsCatalogsInIndexDefinitions"), //
		jMethod<::jboolean()>("supportsCatalogsInPrivilegeDefinitions"), //
		jMethod<::jboolean()>("supportsCatalogsInProcedureCalls"), //
		jMethod<::jboolean()>("supportsCatalogsInTableDefinitions"), //
		jMethod<::jboolean()>("supportsColumnAliasing"), //
		jMethod<::jboolean()>("supportsConvert"), //
		jMethod<::jboolean(::jint, ::jint)>("supportsConvert"), //
		jMethod<::jboolean()>("supportsCoreSQLGrammar"), //
		jMethod<::jboolean()>("supportsCorrelatedSubqueries"), //
		jMethod<::jboolean()>("supportsDataDefinitionAndDataManipulationTransactions"), //
		jMethod<::jboolean()>("supportsDataManipulationTransactionsOnly"), //
		jMethod<::jboolean()>("supportsDifferentTableCorrelationNames"), //
		jMethod<::jboolean()>("supportsExpressionsInOrderBy"), //
		jMethod<::jboolean()>("supportsExtendedSQLGrammar"), //
		jMethod<::jboolean()>("supportsFullOuterJoins"), //
		jMethod<::jboolean()>("supportsGetGeneratedKeys"), //
		jMethod<::jboolean()>("supportsGroupBy"), //
		jMethod<::jboolean()>("supportsGroupByBeyondSelect"), //
		jMethod<::jboolean()>("supportsGroupByUnrelated"), //
		jMethod<::jboolean()>("supportsIntegrityEnhancementFacility"), //
		jMethod<::jboolean()>("supportsLikeEscapeClause"), //
		jMethod<::jboolean()>("supportsLimitedOuterJoins"), //
		jMethod<::jboolean()>("supportsMinimumSQLGrammar"), //
		jMethod<::jboolean()>("supportsMixedCaseIdentifiers"), //
		jMethod<::jboolean()>("supportsMixedCaseQuotedIdentifiers"), //
		jMethod<::jboolean()>("supportsMultipleOpenResults"), //
		jMethod<::jboolean()>("supportsMultipleResultSets"), //
		jMethod<::jboolean()>("supportsMultipleTransactions"), //
		jMethod<::jboolean()>("supportsNamedParameters"), //
		jMethod<::jboolean()>("supportsNonNullableColumns"), //
		jMethod<::jboolean()>("supportsOpenCursorsAcrossCommit"), //
		jMethod<::jboolean()>("supportsOpenCursorsAcrossRollback"), //
		jMethod<::jboolean()>("supportsOpenStatementsAcrossCommit"), //
		jMethod<::jboolean()>("supportsOpenStatementsAcrossRollback"), //
		jMethod<::jboolean()>("supportsOrderByUnrelated"), //
		jMethod<::jboolean()>("supportsOuterJoins"), //
		jMethod<::jboolean()>("supportsPositionedDelete"), //
		jMethod<::jboolean()>("supportsPositionedUpdate"), //
		jMethod<::jboolean()>("supportsRefCursors"), //
		jMethod<::jboolean(::jint, ::jint)>("supportsResultSetConcurrency"), //
		jMethod<::jboolean(::jint)>("supportsResultSetHoldability"), //
		jMethod<::jboolean(::jint)>("supportsResultSetType"), //
		jMethod<::jboolean()>("supportsSavepoints"), //
		jMethod<::jboolean()>("supportsSchemasInDataManipulation"), //
		jMethod<::jboolean()>("supportsSchemasInIndexDefinitions"), //
		jMethod<::jboolean()>("supportsSchemasInPrivilegeDefinitions"), //
		jMethod<::jboolean()>("supportsSchemasInProcedureCalls"), //
		jMethod<::jboolean()>("supportsSchemasInTableDefinitions"), //
		jMethod<::jboolean()>("supportsSelectForUpdate"), //
		jMethod<::jboolean()>("supportsStatementPooling"), //
		jMethod<::jboolean()>("supportsStoredFunctionsUsingCallSyntax"), //
		jMethod<::jboolean()>("supportsStoredProcedures"), //
		jMethod<::jboolean()>("supportsSubqueriesInComparisons"), //
		jMethod<::jboolean()>("supportsSubqueriesInExists"), //
		jMethod<::jboolean()>("supportsSubqueriesInIns"), //
		jMethod<::jboolean()>("supportsSubqueriesInQuantifieds"), //
		jMethod<::jboolean()>("supportsTableCorrelationNames"), //
		jMethod<::jboolean(::jint)>("supportsTransactionIsolationLevel"), //
		jMethod<::jboolean()>("supportsTransactions"), //
		jMethod<::jboolean()>("supportsUnion"), //
		jMethod<::jboolean()>("supportsUnionAll"), //
		jMethod<::java::lang::Object(::java::lang::Class)>("unwrap"), //
		jMethod<::jboolean(::jint)>("updatesAreDetected"), //
		jMethod<::jboolean()>("usesLocalFilePerTable"), //
		jMethod<::jboolean()>("usesLocalFiles"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto allProceduresAreCallable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("allProceduresAreCallable")] != -1);
		return call<R>("allProceduresAreCallable", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto allTablesAreSelectable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("allTablesAreSelectable")] != -1);
		return call<R>("allTablesAreSelectable", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto autoCommitFailureClosesAllResultSets(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("autoCommitFailureClosesAllResultSets")] != -1);
		return call<R>("autoCommitFailureClosesAllResultSets", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto dataDefinitionCausesTransactionCommit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("dataDefinitionCausesTransactionCommit")] != -1);
		return call<R>("dataDefinitionCausesTransactionCommit", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto dataDefinitionIgnoredInTransactions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("dataDefinitionIgnoredInTransactions")] != -1);
		return call<R>("dataDefinitionIgnoredInTransactions", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto deletesAreDetected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("deletesAreDetected")] != -1);
		return call<R>("deletesAreDetected", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto doesMaxRowSizeIncludeBlobs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("doesMaxRowSizeIncludeBlobs")] != -1);
		return call<R>("doesMaxRowSizeIncludeBlobs", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto generatedKeyAlwaysReturned(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("generatedKeyAlwaysReturned")] != -1);
		return call<R>("generatedKeyAlwaysReturned", forward<Args>(args)...);
	}

	template<typename R = ::java::sql::ResultSet, typename... Args>
	auto getAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttributes")] != -1);
		return call<R>("getAttributes", forward<Args>(args)...);
	}

	template<typename R = ::java::sql::ResultSet, typename... Args>
	auto getBestRowIdentifier(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBestRowIdentifier")] != -1);
		return call<R>("getBestRowIdentifier", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCatalogSeparator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCatalogSeparator")] != -1);
		return call<R>("getCatalogSeparator", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCatalogTerm(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCatalogTerm")] != -1);
		return call<R>("getCatalogTerm", forward<Args>(args)...);
	}

	template<typename R = ::java::sql::ResultSet, typename... Args>
	auto getCatalogs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCatalogs")] != -1);
		return call<R>("getCatalogs", forward<Args>(args)...);
	}

	template<typename R = ::java::sql::ResultSet, typename... Args>
	auto getClientInfoProperties(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getClientInfoProperties")] != -1);
		return call<R>("getClientInfoProperties", forward<Args>(args)...);
	}

	template<typename R = ::java::sql::ResultSet, typename... Args>
	auto getColumnPrivileges(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColumnPrivileges")] != -1);
		return call<R>("getColumnPrivileges", forward<Args>(args)...);
	}

	template<typename R = ::java::sql::ResultSet, typename... Args>
	auto getColumns(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColumns")] != -1);
		return call<R>("getColumns", forward<Args>(args)...);
	}

	template<typename R = ::java::sql::Connection, typename... Args>
	auto getConnection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getConnection")] != -1);
		return call<R>("getConnection", forward<Args>(args)...);
	}

	template<typename R = ::java::sql::ResultSet, typename... Args>
	auto getCrossReference(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCrossReference")] != -1);
		return call<R>("getCrossReference", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDatabaseMajorVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDatabaseMajorVersion")] != -1);
		return call<R>("getDatabaseMajorVersion", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDatabaseMinorVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDatabaseMinorVersion")] != -1);
		return call<R>("getDatabaseMinorVersion", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDatabaseProductName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDatabaseProductName")] != -1);
		return call<R>("getDatabaseProductName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDatabaseProductVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDatabaseProductVersion")] != -1);
		return call<R>("getDatabaseProductVersion", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDefaultTransactionIsolation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDefaultTransactionIsolation")] != -1);
		return call<R>("getDefaultTransactionIsolation", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDriverMajorVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDriverMajorVersion")] != -1);
		return call<R>("getDriverMajorVersion", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDriverMinorVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDriverMinorVersion")] != -1);
		return call<R>("getDriverMinorVersion", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDriverName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDriverName")] != -1);
		return call<R>("getDriverName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDriverVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDriverVersion")] != -1);
		return call<R>("getDriverVersion", forward<Args>(args)...);
	}

	template<typename R = ::java::sql::ResultSet, typename... Args>
	auto getExportedKeys(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getExportedKeys")] != -1);
		return call<R>("getExportedKeys", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getExtraNameCharacters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getExtraNameCharacters")] != -1);
		return call<R>("getExtraNameCharacters", forward<Args>(args)...);
	}

	template<typename R = ::java::sql::ResultSet, typename... Args>
	auto getFunctionColumns(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFunctionColumns")] != -1);
		return call<R>("getFunctionColumns", forward<Args>(args)...);
	}

	template<typename R = ::java::sql::ResultSet, typename... Args>
	auto getFunctions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFunctions")] != -1);
		return call<R>("getFunctions", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getIdentifierQuoteString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getIdentifierQuoteString")] != -1);
		return call<R>("getIdentifierQuoteString", forward<Args>(args)...);
	}

	template<typename R = ::java::sql::ResultSet, typename... Args>
	auto getImportedKeys(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getImportedKeys")] != -1);
		return call<R>("getImportedKeys", forward<Args>(args)...);
	}

	template<typename R = ::java::sql::ResultSet, typename... Args>
	auto getIndexInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getIndexInfo")] != -1);
		return call<R>("getIndexInfo", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getJDBCMajorVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getJDBCMajorVersion")] != -1);
		return call<R>("getJDBCMajorVersion", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getJDBCMinorVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getJDBCMinorVersion")] != -1);
		return call<R>("getJDBCMinorVersion", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxBinaryLiteralLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaxBinaryLiteralLength")] != -1);
		return call<R>("getMaxBinaryLiteralLength", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxCatalogNameLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaxCatalogNameLength")] != -1);
		return call<R>("getMaxCatalogNameLength", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxCharLiteralLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaxCharLiteralLength")] != -1);
		return call<R>("getMaxCharLiteralLength", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxColumnNameLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaxColumnNameLength")] != -1);
		return call<R>("getMaxColumnNameLength", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxColumnsInGroupBy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaxColumnsInGroupBy")] != -1);
		return call<R>("getMaxColumnsInGroupBy", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxColumnsInIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaxColumnsInIndex")] != -1);
		return call<R>("getMaxColumnsInIndex", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxColumnsInOrderBy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaxColumnsInOrderBy")] != -1);
		return call<R>("getMaxColumnsInOrderBy", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxColumnsInSelect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaxColumnsInSelect")] != -1);
		return call<R>("getMaxColumnsInSelect", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxColumnsInTable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaxColumnsInTable")] != -1);
		return call<R>("getMaxColumnsInTable", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxConnections(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaxConnections")] != -1);
		return call<R>("getMaxConnections", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxCursorNameLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaxCursorNameLength")] != -1);
		return call<R>("getMaxCursorNameLength", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxIndexLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaxIndexLength")] != -1);
		return call<R>("getMaxIndexLength", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getMaxLogicalLobSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaxLogicalLobSize")] != -1);
		return call<R>("getMaxLogicalLobSize", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxProcedureNameLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaxProcedureNameLength")] != -1);
		return call<R>("getMaxProcedureNameLength", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxRowSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaxRowSize")] != -1);
		return call<R>("getMaxRowSize", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxSchemaNameLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaxSchemaNameLength")] != -1);
		return call<R>("getMaxSchemaNameLength", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxStatementLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaxStatementLength")] != -1);
		return call<R>("getMaxStatementLength", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxStatements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaxStatements")] != -1);
		return call<R>("getMaxStatements", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxTableNameLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaxTableNameLength")] != -1);
		return call<R>("getMaxTableNameLength", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxTablesInSelect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaxTablesInSelect")] != -1);
		return call<R>("getMaxTablesInSelect", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxUserNameLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaxUserNameLength")] != -1);
		return call<R>("getMaxUserNameLength", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNumericFunctions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNumericFunctions")] != -1);
		return call<R>("getNumericFunctions", forward<Args>(args)...);
	}

	template<typename R = ::java::sql::ResultSet, typename... Args>
	auto getPrimaryKeys(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPrimaryKeys")] != -1);
		return call<R>("getPrimaryKeys", forward<Args>(args)...);
	}

	template<typename R = ::java::sql::ResultSet, typename... Args>
	auto getProcedureColumns(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getProcedureColumns")] != -1);
		return call<R>("getProcedureColumns", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getProcedureTerm(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getProcedureTerm")] != -1);
		return call<R>("getProcedureTerm", forward<Args>(args)...);
	}

	template<typename R = ::java::sql::ResultSet, typename... Args>
	auto getProcedures(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getProcedures")] != -1);
		return call<R>("getProcedures", forward<Args>(args)...);
	}

	template<typename R = ::java::sql::ResultSet, typename... Args>
	auto getPseudoColumns(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPseudoColumns")] != -1);
		return call<R>("getPseudoColumns", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getResultSetHoldability(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getResultSetHoldability")] != -1);
		return call<R>("getResultSetHoldability", forward<Args>(args)...);
	}

	template<typename R = ::java::sql::RowIdLifetime, typename... Args>
	auto getRowIdLifetime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRowIdLifetime")] != -1);
		return call<R>("getRowIdLifetime", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSQLKeywords(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSQLKeywords")] != -1);
		return call<R>("getSQLKeywords", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSQLStateType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSQLStateType")] != -1);
		return call<R>("getSQLStateType", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSchemaTerm(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSchemaTerm")] != -1);
		return call<R>("getSchemaTerm", forward<Args>(args)...);
	}

	template<typename R = ::java::sql::ResultSet, typename... Args>
	auto getSchemas(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSchemas")] != -1);
		return call<R>("getSchemas", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSearchStringEscape(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSearchStringEscape")] != -1);
		return call<R>("getSearchStringEscape", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getStringFunctions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getStringFunctions")] != -1);
		return call<R>("getStringFunctions", forward<Args>(args)...);
	}

	template<typename R = ::java::sql::ResultSet, typename... Args>
	auto getSuperTables(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSuperTables")] != -1);
		return call<R>("getSuperTables", forward<Args>(args)...);
	}

	template<typename R = ::java::sql::ResultSet, typename... Args>
	auto getSuperTypes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSuperTypes")] != -1);
		return call<R>("getSuperTypes", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSystemFunctions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSystemFunctions")] != -1);
		return call<R>("getSystemFunctions", forward<Args>(args)...);
	}

	template<typename R = ::java::sql::ResultSet, typename... Args>
	auto getTablePrivileges(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTablePrivileges")] != -1);
		return call<R>("getTablePrivileges", forward<Args>(args)...);
	}

	template<typename R = ::java::sql::ResultSet, typename... Args>
	auto getTableTypes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTableTypes")] != -1);
		return call<R>("getTableTypes", forward<Args>(args)...);
	}

	template<typename R = ::java::sql::ResultSet, typename... Args>
	auto getTables(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTables")] != -1);
		return call<R>("getTables", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTimeDateFunctions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTimeDateFunctions")] != -1);
		return call<R>("getTimeDateFunctions", forward<Args>(args)...);
	}

	template<typename R = ::java::sql::ResultSet, typename... Args>
	auto getTypeInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTypeInfo")] != -1);
		return call<R>("getTypeInfo", forward<Args>(args)...);
	}

	template<typename R = ::java::sql::ResultSet, typename... Args>
	auto getUDTs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUDTs")] != -1);
		return call<R>("getUDTs", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getURL(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getURL")] != -1);
		return call<R>("getURL", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUserName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUserName")] != -1);
		return call<R>("getUserName", forward<Args>(args)...);
	}

	template<typename R = ::java::sql::ResultSet, typename... Args>
	auto getVersionColumns(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getVersionColumns")] != -1);
		return call<R>("getVersionColumns", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto insertsAreDetected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("insertsAreDetected")] != -1);
		return call<R>("insertsAreDetected", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCatalogAtStart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isCatalogAtStart")] != -1);
		return call<R>("isCatalogAtStart", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isReadOnly(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isReadOnly")] != -1);
		return call<R>("isReadOnly", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isWrapperFor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isWrapperFor")] != -1);
		return call<R>("isWrapperFor", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto locatorsUpdateCopy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("locatorsUpdateCopy")] != -1);
		return call<R>("locatorsUpdateCopy", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto nullPlusNonNullIsNull(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("nullPlusNonNullIsNull")] != -1);
		return call<R>("nullPlusNonNullIsNull", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto nullsAreSortedAtEnd(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("nullsAreSortedAtEnd")] != -1);
		return call<R>("nullsAreSortedAtEnd", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto nullsAreSortedAtStart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("nullsAreSortedAtStart")] != -1);
		return call<R>("nullsAreSortedAtStart", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto nullsAreSortedHigh(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("nullsAreSortedHigh")] != -1);
		return call<R>("nullsAreSortedHigh", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto nullsAreSortedLow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("nullsAreSortedLow")] != -1);
		return call<R>("nullsAreSortedLow", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto othersDeletesAreVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("othersDeletesAreVisible")] != -1);
		return call<R>("othersDeletesAreVisible", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto othersInsertsAreVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("othersInsertsAreVisible")] != -1);
		return call<R>("othersInsertsAreVisible", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto othersUpdatesAreVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("othersUpdatesAreVisible")] != -1);
		return call<R>("othersUpdatesAreVisible", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto ownDeletesAreVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("ownDeletesAreVisible")] != -1);
		return call<R>("ownDeletesAreVisible", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto ownInsertsAreVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("ownInsertsAreVisible")] != -1);
		return call<R>("ownInsertsAreVisible", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto ownUpdatesAreVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("ownUpdatesAreVisible")] != -1);
		return call<R>("ownUpdatesAreVisible", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto storesLowerCaseIdentifiers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("storesLowerCaseIdentifiers")] != -1);
		return call<R>("storesLowerCaseIdentifiers", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto storesLowerCaseQuotedIdentifiers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("storesLowerCaseQuotedIdentifiers")] != -1);
		return call<R>("storesLowerCaseQuotedIdentifiers", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto storesMixedCaseIdentifiers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("storesMixedCaseIdentifiers")] != -1);
		return call<R>("storesMixedCaseIdentifiers", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto storesMixedCaseQuotedIdentifiers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("storesMixedCaseQuotedIdentifiers")] != -1);
		return call<R>("storesMixedCaseQuotedIdentifiers", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto storesUpperCaseIdentifiers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("storesUpperCaseIdentifiers")] != -1);
		return call<R>("storesUpperCaseIdentifiers", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto storesUpperCaseQuotedIdentifiers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("storesUpperCaseQuotedIdentifiers")] != -1);
		return call<R>("storesUpperCaseQuotedIdentifiers", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsANSI92EntryLevelSQL(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsANSI92EntryLevelSQL")] != -1);
		return call<R>("supportsANSI92EntryLevelSQL", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsANSI92FullSQL(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsANSI92FullSQL")] != -1);
		return call<R>("supportsANSI92FullSQL", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsANSI92IntermediateSQL(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsANSI92IntermediateSQL")] != -1);
		return call<R>("supportsANSI92IntermediateSQL", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsAlterTableWithAddColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsAlterTableWithAddColumn")] != -1);
		return call<R>("supportsAlterTableWithAddColumn", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsAlterTableWithDropColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsAlterTableWithDropColumn")] != -1);
		return call<R>("supportsAlterTableWithDropColumn", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsBatchUpdates(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsBatchUpdates")] != -1);
		return call<R>("supportsBatchUpdates", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsCatalogsInDataManipulation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsCatalogsInDataManipulation")] != -1);
		return call<R>("supportsCatalogsInDataManipulation", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsCatalogsInIndexDefinitions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsCatalogsInIndexDefinitions")] != -1);
		return call<R>("supportsCatalogsInIndexDefinitions", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsCatalogsInPrivilegeDefinitions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsCatalogsInPrivilegeDefinitions")] != -1);
		return call<R>("supportsCatalogsInPrivilegeDefinitions", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsCatalogsInProcedureCalls(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsCatalogsInProcedureCalls")] != -1);
		return call<R>("supportsCatalogsInProcedureCalls", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsCatalogsInTableDefinitions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsCatalogsInTableDefinitions")] != -1);
		return call<R>("supportsCatalogsInTableDefinitions", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsColumnAliasing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsColumnAliasing")] != -1);
		return call<R>("supportsColumnAliasing", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsConvert(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsConvert")] != -1);
		return call<R>("supportsConvert", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsCoreSQLGrammar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsCoreSQLGrammar")] != -1);
		return call<R>("supportsCoreSQLGrammar", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsCorrelatedSubqueries(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsCorrelatedSubqueries")] != -1);
		return call<R>("supportsCorrelatedSubqueries", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsDataDefinitionAndDataManipulationTransactions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsDataDefinitionAndDataManipulationTransactions")] != -1);
		return call<R>("supportsDataDefinitionAndDataManipulationTransactions", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsDataManipulationTransactionsOnly(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsDataManipulationTransactionsOnly")] != -1);
		return call<R>("supportsDataManipulationTransactionsOnly", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsDifferentTableCorrelationNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsDifferentTableCorrelationNames")] != -1);
		return call<R>("supportsDifferentTableCorrelationNames", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsExpressionsInOrderBy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsExpressionsInOrderBy")] != -1);
		return call<R>("supportsExpressionsInOrderBy", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsExtendedSQLGrammar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsExtendedSQLGrammar")] != -1);
		return call<R>("supportsExtendedSQLGrammar", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsFullOuterJoins(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsFullOuterJoins")] != -1);
		return call<R>("supportsFullOuterJoins", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsGetGeneratedKeys(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsGetGeneratedKeys")] != -1);
		return call<R>("supportsGetGeneratedKeys", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsGroupBy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsGroupBy")] != -1);
		return call<R>("supportsGroupBy", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsGroupByBeyondSelect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsGroupByBeyondSelect")] != -1);
		return call<R>("supportsGroupByBeyondSelect", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsGroupByUnrelated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsGroupByUnrelated")] != -1);
		return call<R>("supportsGroupByUnrelated", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsIntegrityEnhancementFacility(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsIntegrityEnhancementFacility")] != -1);
		return call<R>("supportsIntegrityEnhancementFacility", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsLikeEscapeClause(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsLikeEscapeClause")] != -1);
		return call<R>("supportsLikeEscapeClause", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsLimitedOuterJoins(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsLimitedOuterJoins")] != -1);
		return call<R>("supportsLimitedOuterJoins", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsMinimumSQLGrammar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsMinimumSQLGrammar")] != -1);
		return call<R>("supportsMinimumSQLGrammar", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsMixedCaseIdentifiers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsMixedCaseIdentifiers")] != -1);
		return call<R>("supportsMixedCaseIdentifiers", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsMixedCaseQuotedIdentifiers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsMixedCaseQuotedIdentifiers")] != -1);
		return call<R>("supportsMixedCaseQuotedIdentifiers", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsMultipleOpenResults(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsMultipleOpenResults")] != -1);
		return call<R>("supportsMultipleOpenResults", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsMultipleResultSets(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsMultipleResultSets")] != -1);
		return call<R>("supportsMultipleResultSets", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsMultipleTransactions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsMultipleTransactions")] != -1);
		return call<R>("supportsMultipleTransactions", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsNamedParameters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsNamedParameters")] != -1);
		return call<R>("supportsNamedParameters", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsNonNullableColumns(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsNonNullableColumns")] != -1);
		return call<R>("supportsNonNullableColumns", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsOpenCursorsAcrossCommit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsOpenCursorsAcrossCommit")] != -1);
		return call<R>("supportsOpenCursorsAcrossCommit", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsOpenCursorsAcrossRollback(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsOpenCursorsAcrossRollback")] != -1);
		return call<R>("supportsOpenCursorsAcrossRollback", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsOpenStatementsAcrossCommit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsOpenStatementsAcrossCommit")] != -1);
		return call<R>("supportsOpenStatementsAcrossCommit", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsOpenStatementsAcrossRollback(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsOpenStatementsAcrossRollback")] != -1);
		return call<R>("supportsOpenStatementsAcrossRollback", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsOrderByUnrelated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsOrderByUnrelated")] != -1);
		return call<R>("supportsOrderByUnrelated", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsOuterJoins(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsOuterJoins")] != -1);
		return call<R>("supportsOuterJoins", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsPositionedDelete(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsPositionedDelete")] != -1);
		return call<R>("supportsPositionedDelete", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsPositionedUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsPositionedUpdate")] != -1);
		return call<R>("supportsPositionedUpdate", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsRefCursors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsRefCursors")] != -1);
		return call<R>("supportsRefCursors", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsResultSetConcurrency(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsResultSetConcurrency")] != -1);
		return call<R>("supportsResultSetConcurrency", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsResultSetHoldability(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsResultSetHoldability")] != -1);
		return call<R>("supportsResultSetHoldability", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsResultSetType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsResultSetType")] != -1);
		return call<R>("supportsResultSetType", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsSavepoints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsSavepoints")] != -1);
		return call<R>("supportsSavepoints", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsSchemasInDataManipulation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsSchemasInDataManipulation")] != -1);
		return call<R>("supportsSchemasInDataManipulation", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsSchemasInIndexDefinitions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsSchemasInIndexDefinitions")] != -1);
		return call<R>("supportsSchemasInIndexDefinitions", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsSchemasInPrivilegeDefinitions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsSchemasInPrivilegeDefinitions")] != -1);
		return call<R>("supportsSchemasInPrivilegeDefinitions", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsSchemasInProcedureCalls(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsSchemasInProcedureCalls")] != -1);
		return call<R>("supportsSchemasInProcedureCalls", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsSchemasInTableDefinitions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsSchemasInTableDefinitions")] != -1);
		return call<R>("supportsSchemasInTableDefinitions", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsSelectForUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsSelectForUpdate")] != -1);
		return call<R>("supportsSelectForUpdate", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsStatementPooling(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsStatementPooling")] != -1);
		return call<R>("supportsStatementPooling", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsStoredFunctionsUsingCallSyntax(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsStoredFunctionsUsingCallSyntax")] != -1);
		return call<R>("supportsStoredFunctionsUsingCallSyntax", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsStoredProcedures(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsStoredProcedures")] != -1);
		return call<R>("supportsStoredProcedures", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsSubqueriesInComparisons(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsSubqueriesInComparisons")] != -1);
		return call<R>("supportsSubqueriesInComparisons", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsSubqueriesInExists(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsSubqueriesInExists")] != -1);
		return call<R>("supportsSubqueriesInExists", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsSubqueriesInIns(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsSubqueriesInIns")] != -1);
		return call<R>("supportsSubqueriesInIns", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsSubqueriesInQuantifieds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsSubqueriesInQuantifieds")] != -1);
		return call<R>("supportsSubqueriesInQuantifieds", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsTableCorrelationNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsTableCorrelationNames")] != -1);
		return call<R>("supportsTableCorrelationNames", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsTransactionIsolationLevel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsTransactionIsolationLevel")] != -1);
		return call<R>("supportsTransactionIsolationLevel", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsTransactions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsTransactions")] != -1);
		return call<R>("supportsTransactions", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsUnion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsUnion")] != -1);
		return call<R>("supportsUnion", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsUnionAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsUnionAll")] != -1);
		return call<R>("supportsUnionAll", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto unwrap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("unwrap")] != -1);
		return call<R>("unwrap", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto updatesAreDetected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("updatesAreDetected")] != -1);
		return call<R>("updatesAreDetected", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto usesLocalFilePerTable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("usesLocalFilePerTable")] != -1);
		return call<R>("usesLocalFilePerTable", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto usesLocalFiles(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("usesLocalFiles")] != -1);
		return call<R>("usesLocalFiles", forward<Args>(args)...);
	}

};

#endif
