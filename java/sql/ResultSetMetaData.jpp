#ifndef java_sql_ResultSetMetaData_HPP
#define java_sql_ResultSetMetaData_HPP

#include "../../jfwd_decl.hpp"

class ::java::sql::ResultSetMetaData : public jObject<::java::sql::ResultSetMetaData, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_sql / "ResultSetMetaData";

	constexpr static Enume field_signatures{
		jField<::jint>("columnNoNulls"), //
		jField<::jint>("columnNullable"), //
		jField<::jint>("columnNullableUnknown"), //
	};

	template<typename F = ::jint>
	static auto columnNoNulls() {
		static_assert(field_signatures[jField<F>("columnNoNulls")] != -1);
		return sat<F>("columnNoNulls");
	}

	template<typename F = ::jint>
	static auto columnNullable() {
		static_assert(field_signatures[jField<F>("columnNullable")] != -1);
		return sat<F>("columnNullable");
	}

	template<typename F = ::jint>
	static auto columnNullableUnknown() {
		static_assert(field_signatures[jField<F>("columnNullableUnknown")] != -1);
		return sat<F>("columnNullableUnknown");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String(::jint)>("getCatalogName"), //
		jMethod<::java::lang::String(::jint)>("getColumnClassName"), //
		jMethod<::jint()>("getColumnCount"), //
		jMethod<::jint(::jint)>("getColumnDisplaySize"), //
		jMethod<::java::lang::String(::jint)>("getColumnLabel"), //
		jMethod<::java::lang::String(::jint)>("getColumnName"), //
		jMethod<::jint(::jint)>("getColumnType"), //
		jMethod<::java::lang::String(::jint)>("getColumnTypeName"), //
		jMethod<::jint(::jint)>("getPrecision"), //
		jMethod<::jint(::jint)>("getScale"), //
		jMethod<::java::lang::String(::jint)>("getSchemaName"), //
		jMethod<::java::lang::String(::jint)>("getTableName"), //
		jMethod<::jboolean(::jint)>("isAutoIncrement"), //
		jMethod<::jboolean(::jint)>("isCaseSensitive"), //
		jMethod<::jboolean(::jint)>("isCurrency"), //
		jMethod<::jboolean(::jint)>("isDefinitelyWritable"), //
		jMethod<::jint(::jint)>("isNullable"), //
		jMethod<::jboolean(::jint)>("isReadOnly"), //
		jMethod<::jboolean(::jint)>("isSearchable"), //
		jMethod<::jboolean(::jint)>("isSigned"), //
		jMethod<::jboolean(::jint)>("isWritable"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getCatalogName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCatalogName")] != -1);
		return call<R>("getCatalogName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getColumnClassName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColumnClassName")] != -1);
		return call<R>("getColumnClassName", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getColumnCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColumnCount")] != -1);
		return call<R>("getColumnCount", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getColumnDisplaySize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColumnDisplaySize")] != -1);
		return call<R>("getColumnDisplaySize", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getColumnLabel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColumnLabel")] != -1);
		return call<R>("getColumnLabel", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getColumnName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColumnName")] != -1);
		return call<R>("getColumnName", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getColumnType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColumnType")] != -1);
		return call<R>("getColumnType", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getColumnTypeName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColumnTypeName")] != -1);
		return call<R>("getColumnTypeName", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPrecision(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPrecision")] != -1);
		return call<R>("getPrecision", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getScale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getScale")] != -1);
		return call<R>("getScale", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSchemaName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSchemaName")] != -1);
		return call<R>("getSchemaName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTableName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTableName")] != -1);
		return call<R>("getTableName", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAutoIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isAutoIncrement")] != -1);
		return call<R>("isAutoIncrement", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCaseSensitive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isCaseSensitive")] != -1);
		return call<R>("isCaseSensitive", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCurrency(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isCurrency")] != -1);
		return call<R>("isCurrency", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDefinitelyWritable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isDefinitelyWritable")] != -1);
		return call<R>("isDefinitelyWritable", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto isNullable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isNullable")] != -1);
		return call<R>("isNullable", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isReadOnly(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isReadOnly")] != -1);
		return call<R>("isReadOnly", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSearchable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isSearchable")] != -1);
		return call<R>("isSearchable", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSigned(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isSigned")] != -1);
		return call<R>("isSigned", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isWritable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isWritable")] != -1);
		return call<R>("isWritable", forward<Args>(args)...);
	}

};

#endif
