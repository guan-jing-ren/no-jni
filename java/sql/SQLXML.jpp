#ifndef java_sql_SQLXML_HPP
#define java_sql_SQLXML_HPP

#include "../../jfwd_decl.hpp"

class ::java::sql::SQLXML : public jObject<::java::sql::SQLXML, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_sql / "SQLXML";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("free"), //
		jMethod<::java::io::InputStream()>("getBinaryStream"), //
		jMethod<::java::io::Reader()>("getCharacterStream"), //
		jMethod<::javax::xml::transform::Source(::java::lang::Class)>("getSource"), //
		jMethod<::java::lang::String()>("getString"), //
		jMethod<::java::io::OutputStream()>("setBinaryStream"), //
		jMethod<::java::io::Writer()>("setCharacterStream"), //
		jMethod<::javax::xml::transform::Result(::java::lang::Class)>("setResult"), //
		jMethod<::jvoid(::java::lang::String)>("setString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto free(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("free")] != -1);
		return call<R>("free", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	auto getBinaryStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBinaryStream")] != -1);
		return call<R>("getBinaryStream", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::Reader, typename... Args>
	auto getCharacterStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCharacterStream")] != -1);
		return call<R>("getCharacterStream", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::transform::Source, typename... Args>
	auto getSource(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSource")] != -1);
		return call<R>("getSource", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getString")] != -1);
		return call<R>("getString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::OutputStream, typename... Args>
	auto setBinaryStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBinaryStream")] != -1);
		return call<R>("setBinaryStream", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::Writer, typename... Args>
	auto setCharacterStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCharacterStream")] != -1);
		return call<R>("setCharacterStream", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::transform::Result, typename... Args>
	auto setResult(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setResult")] != -1);
		return call<R>("setResult", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setString")] != -1);
		return call<R>("setString", std::forward<Args>(args)...);
	}

};

#endif
