#ifndef java_sql_Array_HPP
#define java_sql_Array_HPP

#include "../../jfwd_decl.hpp"

class ::java::sql::Array : public jObject<::java::sql::Array, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_sql / "Array";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("free"), //
		jMethod<::java::lang::Object()>("getArray"), //
		jMethod<::java::lang::Object(::jlong, ::jint)>("getArray"), //
		jMethod<::java::lang::Object(::jlong, ::jint, ::java::util::Map)>("getArray"), //
		jMethod<::java::lang::Object(::java::util::Map)>("getArray"), //
		jMethod<::jint()>("getBaseType"), //
		jMethod<::java::lang::String()>("getBaseTypeName"), //
		jMethod<::java::sql::ResultSet()>("getResultSet"), //
		jMethod<::java::sql::ResultSet(::jlong, ::jint)>("getResultSet"), //
		jMethod<::java::sql::ResultSet(::jlong, ::jint, ::java::util::Map)>("getResultSet"), //
		jMethod<::java::sql::ResultSet(::java::util::Map)>("getResultSet"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto free(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("free")] != -1);
		return call<R>("free", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getArray")] != -1);
		return call<R>("getArray", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBaseType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBaseType")] != -1);
		return call<R>("getBaseType", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBaseTypeName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBaseTypeName")] != -1);
		return call<R>("getBaseTypeName", forward<Args>(args)...);
	}

	template<typename R = ::java::sql::ResultSet, typename... Args>
	auto getResultSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getResultSet")] != -1);
		return call<R>("getResultSet", forward<Args>(args)...);
	}

};

#endif
