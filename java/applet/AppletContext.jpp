#ifndef java_applet_AppletContext_HPP
#define java_applet_AppletContext_HPP

#include "../../jfwd_decl.hpp"

class ::java::applet::AppletContext : public jObject<::java::applet::AppletContext, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_applet / "AppletContext";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::applet::Applet(::java::lang::String)>("getApplet"), //
		jMethod<::java::util::Enumeration()>("getApplets"), //
		jMethod<::java::applet::AudioClip(::java::net::URL)>("getAudioClip"), //
		jMethod<::java::awt::Image(::java::net::URL)>("getImage"), //
		jMethod<::java::io::InputStream(::java::lang::String)>("getStream"), //
		jMethod<::java::util::Iterator()>("getStreamKeys"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::InputStream)>("setStream"), //
		jMethod<::jvoid(::java::net::URL)>("showDocument"), //
		jMethod<::jvoid(::java::net::URL, ::java::lang::String)>("showDocument"), //
		jMethod<::jvoid(::java::lang::String)>("showStatus"), //
	};

	template<typename R = ::java::applet::Applet, typename... Args>
	auto getApplet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getApplet")] != -1);
		return call<R>("getApplet", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto getApplets(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getApplets")] != -1);
		return call<R>("getApplets", forward<Args>(args)...);
	}

	template<typename R = ::java::applet::AudioClip, typename... Args>
	auto getAudioClip(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAudioClip")] != -1);
		return call<R>("getAudioClip", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Image, typename... Args>
	auto getImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getImage")] != -1);
		return call<R>("getImage", forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	auto getStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getStream")] != -1);
		return call<R>("getStream", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto getStreamKeys(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getStreamKeys")] != -1);
		return call<R>("getStreamKeys", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setStream")] != -1);
		return call<R>("setStream", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto showDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("showDocument")] != -1);
		return call<R>("showDocument", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto showStatus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("showStatus")] != -1);
		return call<R>("showStatus", forward<Args>(args)...);
	}

};

#endif
