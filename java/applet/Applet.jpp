#ifndef java_applet_Applet_HPP
#define java_applet_Applet_HPP

#include "../../jfwd_decl.hpp"

class ::java::applet::Applet : public jObject<::java::applet::Applet, ::java::awt::Panel> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_applet / "Applet";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid()>("destroy"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::java::applet::AppletContext()>("getAppletContext"), //
		jMethod<::java::lang::String()>("getAppletInfo"), //
		jMethod<::java::applet::AudioClip(::java::net::URL)>("getAudioClip"), //
		jMethod<::java::applet::AudioClip(::java::net::URL, ::java::lang::String)>("getAudioClip"), //
		jMethod<::java::net::URL()>("getCodeBase"), //
		jMethod<::java::net::URL()>("getDocumentBase"), //
		jMethod<::java::awt::Image(::java::net::URL)>("getImage"), //
		jMethod<::java::awt::Image(::java::net::URL, ::java::lang::String)>("getImage"), //
		jMethod<::java::util::Locale()>("getLocale"), //
		jMethod<::java::lang::String(::java::lang::String)>("getParameter"), //
		jMethod<::java::lang::String **()>("getParameterInfo"), //
		jMethod<::jvoid()>("init"), //
		jMethod<::jboolean()>("isActive"), //
		jMethod<::jboolean()>("isValidateRoot"), //
		jMethod<::java::applet::AudioClip(::java::net::URL)>("newAudioClip"), //
		jMethod<::jvoid(::java::net::URL)>("play"), //
		jMethod<::jvoid(::java::net::URL, ::java::lang::String)>("play"), //
		jMethod<::jvoid(::jint, ::jint)>("resize"), //
		jMethod<::jvoid(::java::awt::Dimension)>("resize"), //
		jMethod<::jvoid(::java::applet::AppletStub)>("setStub"), //
		jMethod<::jvoid(::java::lang::String)>("showStatus"), //
		jMethod<::jvoid()>("start"), //
		jMethod<::jvoid()>("stop"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto destroy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("destroy")] != -1);
		return call<R>("destroy", forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", forward<Args>(args)...);
	}

	template<typename R = ::java::applet::AppletContext, typename... Args>
	auto getAppletContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAppletContext")] != -1);
		return call<R>("getAppletContext", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAppletInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAppletInfo")] != -1);
		return call<R>("getAppletInfo", forward<Args>(args)...);
	}

	template<typename R = ::java::applet::AudioClip, typename... Args>
	auto getAudioClip(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAudioClip")] != -1);
		return call<R>("getAudioClip", forward<Args>(args)...);
	}

	template<typename R = ::java::net::URL, typename... Args>
	auto getCodeBase(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCodeBase")] != -1);
		return call<R>("getCodeBase", forward<Args>(args)...);
	}

	template<typename R = ::java::net::URL, typename... Args>
	auto getDocumentBase(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDocumentBase")] != -1);
		return call<R>("getDocumentBase", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Image, typename... Args>
	auto getImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getImage")] != -1);
		return call<R>("getImage", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale, typename... Args>
	auto getLocale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLocale")] != -1);
		return call<R>("getLocale", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getParameter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getParameter")] != -1);
		return call<R>("getParameter", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String **, typename... Args>
	auto getParameterInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getParameterInfo")] != -1);
		return call<R>("getParameterInfo", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto init(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("init")] != -1);
		return call<R>("init", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isActive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isActive")] != -1);
		return call<R>("isActive", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isValidateRoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isValidateRoot")] != -1);
		return call<R>("isValidateRoot", forward<Args>(args)...);
	}

	template<typename R = ::java::applet::AudioClip, typename... Args>
	static auto newAudioClip(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("newAudioClip")] != -1);
		return scall<R>("newAudioClip", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto play(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("play")] != -1);
		return call<R>("play", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto resize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("resize")] != -1);
		return call<R>("resize", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setStub(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setStub")] != -1);
		return call<R>("setStub", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto showStatus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("showStatus")] != -1);
		return call<R>("showStatus", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto start(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("start")] != -1);
		return call<R>("start", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto stop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("stop")] != -1);
		return call<R>("stop", forward<Args>(args)...);
	}

};

#endif
