#ifndef java_text_ChoiceFormat_HPP
#define java_text_ChoiceFormat_HPP

#include "../../jfwd_decl.hpp"

class ::java::text::ChoiceFormat : public jObject<::java::text::ChoiceFormat, ::java::text::NumberFormat> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_text / "ChoiceFormat";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::jdouble *, ::java::lang::String *)>(), //
		jMethod<::jvoid(::java::lang::String)>("applyPattern"), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::StringBuffer(::jdouble, ::java::lang::StringBuffer, ::java::text::FieldPosition)>("format"), //
		jMethod<::java::lang::StringBuffer(::jlong, ::java::lang::StringBuffer, ::java::text::FieldPosition)>("format"), //
		jMethod<::java::lang::Object *()>("getFormats"), //
		jMethod<::jdouble *()>("getLimits"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jdouble(::jdouble)>("nextDouble"), //
		jMethod<::jdouble(::jdouble, ::jboolean)>("nextDouble"), //
		jMethod<::java::lang::Number(::java::lang::String, ::java::text::ParsePosition)>("parse"), //
		jMethod<::jdouble(::jdouble)>("previousDouble"), //
		jMethod<::jvoid(::jdouble *, ::java::lang::String *)>("setChoices"), //
		jMethod<::java::lang::String()>("toPattern"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto applyPattern(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("applyPattern")] != -1);
		return call<R>("applyPattern", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::StringBuffer, typename... Args>
	auto format(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("format")] != -1);
		return call<R>("format", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object *, typename... Args>
	auto getFormats(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFormats")] != -1);
		return call<R>("getFormats", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble *, typename... Args>
	auto getLimits(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLimits")] != -1);
		return call<R>("getLimits", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	static auto nextDouble(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nextDouble")] != -1);
		return scall<R>("nextDouble", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Number, typename... Args>
	auto parse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parse")] != -1);
		return call<R>("parse", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	static auto previousDouble(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("previousDouble")] != -1);
		return scall<R>("previousDouble", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setChoices(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setChoices")] != -1);
		return call<R>("setChoices", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toPattern(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toPattern")] != -1);
		return call<R>("toPattern", std::forward<Args>(args)...);
	}

};

#endif
