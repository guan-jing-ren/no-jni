#ifndef java_text_NumberFormat$Field_HPP
#define java_text_NumberFormat$Field_HPP

#include "../../jfwd_decl.hpp"

class ::java::text::NumberFormat$Field : public jObject<::java::text::NumberFormat$Field, ::java::text::Format$Field> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_text / "NumberFormat$Field";

	constexpr static Enume field_signatures{
		jField<::java::text::NumberFormat$Field>("CURRENCY"), //
		jField<::java::text::NumberFormat$Field>("DECIMAL_SEPARATOR"), //
		jField<::java::text::NumberFormat$Field>("EXPONENT"), //
		jField<::java::text::NumberFormat$Field>("EXPONENT_SIGN"), //
		jField<::java::text::NumberFormat$Field>("EXPONENT_SYMBOL"), //
		jField<::java::text::NumberFormat$Field>("FRACTION"), //
		jField<::java::text::NumberFormat$Field>("GROUPING_SEPARATOR"), //
		jField<::java::text::NumberFormat$Field>("INTEGER"), //
		jField<::java::text::NumberFormat$Field>("PERCENT"), //
		jField<::java::text::NumberFormat$Field>("PERMILLE"), //
		jField<::java::text::NumberFormat$Field>("SIGN"), //
	};

	template<typename F = ::java::text::NumberFormat$Field>
	static auto CURRENCY() {
		static_assert(field_signatures[jField<F>("CURRENCY")] != -1);
		return sat<F>("CURRENCY");
	}

	template<typename F = ::java::text::NumberFormat$Field>
	static auto DECIMAL_SEPARATOR() {
		static_assert(field_signatures[jField<F>("DECIMAL_SEPARATOR")] != -1);
		return sat<F>("DECIMAL_SEPARATOR");
	}

	template<typename F = ::java::text::NumberFormat$Field>
	static auto EXPONENT() {
		static_assert(field_signatures[jField<F>("EXPONENT")] != -1);
		return sat<F>("EXPONENT");
	}

	template<typename F = ::java::text::NumberFormat$Field>
	static auto EXPONENT_SIGN() {
		static_assert(field_signatures[jField<F>("EXPONENT_SIGN")] != -1);
		return sat<F>("EXPONENT_SIGN");
	}

	template<typename F = ::java::text::NumberFormat$Field>
	static auto EXPONENT_SYMBOL() {
		static_assert(field_signatures[jField<F>("EXPONENT_SYMBOL")] != -1);
		return sat<F>("EXPONENT_SYMBOL");
	}

	template<typename F = ::java::text::NumberFormat$Field>
	static auto FRACTION() {
		static_assert(field_signatures[jField<F>("FRACTION")] != -1);
		return sat<F>("FRACTION");
	}

	template<typename F = ::java::text::NumberFormat$Field>
	static auto GROUPING_SEPARATOR() {
		static_assert(field_signatures[jField<F>("GROUPING_SEPARATOR")] != -1);
		return sat<F>("GROUPING_SEPARATOR");
	}

	template<typename F = ::java::text::NumberFormat$Field>
	static auto INTEGER() {
		static_assert(field_signatures[jField<F>("INTEGER")] != -1);
		return sat<F>("INTEGER");
	}

	template<typename F = ::java::text::NumberFormat$Field>
	static auto PERCENT() {
		static_assert(field_signatures[jField<F>("PERCENT")] != -1);
		return sat<F>("PERCENT");
	}

	template<typename F = ::java::text::NumberFormat$Field>
	static auto PERMILLE() {
		static_assert(field_signatures[jField<F>("PERMILLE")] != -1);
		return sat<F>("PERMILLE");
	}

	template<typename F = ::java::text::NumberFormat$Field>
	static auto SIGN() {
		static_assert(field_signatures[jField<F>("SIGN")] != -1);
		return sat<F>("SIGN");
	}

	constexpr static Enume method_signatures{
		cexprstr{"\0"}, //
	};

};

#endif
