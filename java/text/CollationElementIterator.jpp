#ifndef java_text_CollationElementIterator_HPP
#define java_text_CollationElementIterator_HPP

#include "../../jfwd_decl.hpp"

class ::java::text::CollationElementIterator : public jObject<::java::text::CollationElementIterator, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_text / "CollationElementIterator";

	constexpr static Enume field_signatures{
		jField<::jint>("NULLORDER"), //
	};

	template<typename F = ::jint>
	static auto NULLORDER() {
		static_assert(field_signatures[jField<F>("NULLORDER")] != -1);
		return sat<F>("NULLORDER");
	}

	constexpr static Enume method_signatures{
		jMethod<::jint(::jint)>("getMaxExpansion"), //
		jMethod<::jint()>("getOffset"), //
		jMethod<::jint()>("next"), //
		jMethod<::jint()>("previous"), //
		jMethod<::jint(::jint)>("primaryOrder"), //
		jMethod<::jvoid()>("reset"), //
		jMethod<::jshort(::jint)>("secondaryOrder"), //
		jMethod<::jvoid(::jint)>("setOffset"), //
		jMethod<::jvoid(::java::lang::String)>("setText"), //
		jMethod<::jvoid(::java::text::CharacterIterator)>("setText"), //
		jMethod<::jshort(::jint)>("tertiaryOrder"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getMaxExpansion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaxExpansion")] != -1);
		return call<R>("getMaxExpansion", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getOffset")] != -1);
		return call<R>("getOffset", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto next(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("next")] != -1);
		return call<R>("next", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto previous(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("previous")] != -1);
		return call<R>("previous", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto primaryOrder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("primaryOrder")] != -1);
		return scall<R>("primaryOrder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	static auto secondaryOrder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("secondaryOrder")] != -1);
		return scall<R>("secondaryOrder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setOffset")] != -1);
		return call<R>("setOffset", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setText")] != -1);
		return call<R>("setText", forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	static auto tertiaryOrder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("tertiaryOrder")] != -1);
		return scall<R>("tertiaryOrder", forward<Args>(args)...);
	}

};

#endif
