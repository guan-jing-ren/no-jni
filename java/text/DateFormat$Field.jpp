#ifndef java_text_DateFormat$Field_HPP
#define java_text_DateFormat$Field_HPP

#include "../../jfwd_decl.hpp"

class ::java::text::DateFormat$Field : public jObject<::java::text::DateFormat$Field, ::java::text::Format$Field> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_text / "DateFormat$Field";

	constexpr static Enume field_signatures{
		jField<::java::text::DateFormat$Field>("AM_PM"), //
		jField<::java::text::DateFormat$Field>("DAY_OF_MONTH"), //
		jField<::java::text::DateFormat$Field>("DAY_OF_WEEK"), //
		jField<::java::text::DateFormat$Field>("DAY_OF_WEEK_IN_MONTH"), //
		jField<::java::text::DateFormat$Field>("DAY_OF_YEAR"), //
		jField<::java::text::DateFormat$Field>("ERA"), //
		jField<::java::text::DateFormat$Field>("HOUR0"), //
		jField<::java::text::DateFormat$Field>("HOUR1"), //
		jField<::java::text::DateFormat$Field>("HOUR_OF_DAY0"), //
		jField<::java::text::DateFormat$Field>("HOUR_OF_DAY1"), //
		jField<::java::text::DateFormat$Field>("MILLISECOND"), //
		jField<::java::text::DateFormat$Field>("MINUTE"), //
		jField<::java::text::DateFormat$Field>("MONTH"), //
		jField<::java::text::DateFormat$Field>("SECOND"), //
		jField<::java::text::DateFormat$Field>("TIME_ZONE"), //
		jField<::java::text::DateFormat$Field>("WEEK_OF_MONTH"), //
		jField<::java::text::DateFormat$Field>("WEEK_OF_YEAR"), //
		jField<::java::text::DateFormat$Field>("YEAR"), //
	};

	template<typename F = ::java::text::DateFormat$Field>
	static auto AM_PM() {
		static_assert(field_signatures[jField<F>("AM_PM")] != -1);
		return sat<F>("AM_PM");
	}

	template<typename F = ::java::text::DateFormat$Field>
	static auto DAY_OF_MONTH() {
		static_assert(field_signatures[jField<F>("DAY_OF_MONTH")] != -1);
		return sat<F>("DAY_OF_MONTH");
	}

	template<typename F = ::java::text::DateFormat$Field>
	static auto DAY_OF_WEEK() {
		static_assert(field_signatures[jField<F>("DAY_OF_WEEK")] != -1);
		return sat<F>("DAY_OF_WEEK");
	}

	template<typename F = ::java::text::DateFormat$Field>
	static auto DAY_OF_WEEK_IN_MONTH() {
		static_assert(field_signatures[jField<F>("DAY_OF_WEEK_IN_MONTH")] != -1);
		return sat<F>("DAY_OF_WEEK_IN_MONTH");
	}

	template<typename F = ::java::text::DateFormat$Field>
	static auto DAY_OF_YEAR() {
		static_assert(field_signatures[jField<F>("DAY_OF_YEAR")] != -1);
		return sat<F>("DAY_OF_YEAR");
	}

	template<typename F = ::java::text::DateFormat$Field>
	static auto ERA() {
		static_assert(field_signatures[jField<F>("ERA")] != -1);
		return sat<F>("ERA");
	}

	template<typename F = ::java::text::DateFormat$Field>
	static auto HOUR0() {
		static_assert(field_signatures[jField<F>("HOUR0")] != -1);
		return sat<F>("HOUR0");
	}

	template<typename F = ::java::text::DateFormat$Field>
	static auto HOUR1() {
		static_assert(field_signatures[jField<F>("HOUR1")] != -1);
		return sat<F>("HOUR1");
	}

	template<typename F = ::java::text::DateFormat$Field>
	static auto HOUR_OF_DAY0() {
		static_assert(field_signatures[jField<F>("HOUR_OF_DAY0")] != -1);
		return sat<F>("HOUR_OF_DAY0");
	}

	template<typename F = ::java::text::DateFormat$Field>
	static auto HOUR_OF_DAY1() {
		static_assert(field_signatures[jField<F>("HOUR_OF_DAY1")] != -1);
		return sat<F>("HOUR_OF_DAY1");
	}

	template<typename F = ::java::text::DateFormat$Field>
	static auto MILLISECOND() {
		static_assert(field_signatures[jField<F>("MILLISECOND")] != -1);
		return sat<F>("MILLISECOND");
	}

	template<typename F = ::java::text::DateFormat$Field>
	static auto MINUTE() {
		static_assert(field_signatures[jField<F>("MINUTE")] != -1);
		return sat<F>("MINUTE");
	}

	template<typename F = ::java::text::DateFormat$Field>
	static auto MONTH() {
		static_assert(field_signatures[jField<F>("MONTH")] != -1);
		return sat<F>("MONTH");
	}

	template<typename F = ::java::text::DateFormat$Field>
	static auto SECOND() {
		static_assert(field_signatures[jField<F>("SECOND")] != -1);
		return sat<F>("SECOND");
	}

	template<typename F = ::java::text::DateFormat$Field>
	static auto TIME_ZONE() {
		static_assert(field_signatures[jField<F>("TIME_ZONE")] != -1);
		return sat<F>("TIME_ZONE");
	}

	template<typename F = ::java::text::DateFormat$Field>
	static auto WEEK_OF_MONTH() {
		static_assert(field_signatures[jField<F>("WEEK_OF_MONTH")] != -1);
		return sat<F>("WEEK_OF_MONTH");
	}

	template<typename F = ::java::text::DateFormat$Field>
	static auto WEEK_OF_YEAR() {
		static_assert(field_signatures[jField<F>("WEEK_OF_YEAR")] != -1);
		return sat<F>("WEEK_OF_YEAR");
	}

	template<typename F = ::java::text::DateFormat$Field>
	static auto YEAR() {
		static_assert(field_signatures[jField<F>("YEAR")] != -1);
		return sat<F>("YEAR");
	}

	constexpr static Enume method_signatures{
		jMethod<::jint()>("getCalendarField"), //
		jMethod<::java::text::DateFormat$Field(::jint)>("ofCalendarField"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getCalendarField(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCalendarField")] != -1);
		return call<R>("getCalendarField", forward<Args>(args)...);
	}

	template<typename R = ::java::text::DateFormat$Field, typename... Args>
	static auto ofCalendarField(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("ofCalendarField")] != -1);
		return scall<R>("ofCalendarField", forward<Args>(args)...);
	}

};

#endif
