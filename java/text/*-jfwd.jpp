#ifndef java_text_JPP
#define java_text_JPP

namespace java::text { class Annotation; }
template<> constexpr auto signature<::java::text::Annotation> = ::java_text / "Annotation";
namespace java::text { class AttributeEntry; }
template<> constexpr auto signature<::java::text::AttributeEntry> = ::java_text / "AttributeEntry";
namespace java::text { class AttributedCharacterIterator; }
template<> constexpr auto signature<::java::text::AttributedCharacterIterator> = ::java_text / "AttributedCharacterIterator";
namespace java::text { class AttributedCharacterIterator$Attribute; }
template<> constexpr auto signature<::java::text::AttributedCharacterIterator$Attribute> = ::java_text / "AttributedCharacterIterator$Attribute";
namespace java::text { class AttributedString; }
template<> constexpr auto signature<::java::text::AttributedString> = ::java_text / "AttributedString";
namespace java::text { class AttributedString$AttributeMap; }
template<> constexpr auto signature<::java::text::AttributedString$AttributeMap> = ::java_text / "AttributedString$AttributeMap";
namespace java::text { class AttributedString$AttributedStringIterator; }
template<> constexpr auto signature<::java::text::AttributedString$AttributedStringIterator> = ::java_text / "AttributedString$AttributedStringIterator";
namespace java::text { class Bidi; }
template<> constexpr auto signature<::java::text::Bidi> = ::java_text / "Bidi";
namespace java::text { class BreakIterator; }
template<> constexpr auto signature<::java::text::BreakIterator> = ::java_text / "BreakIterator";
namespace java::text { class BreakIterator$BreakIteratorCache; }
template<> constexpr auto signature<::java::text::BreakIterator$BreakIteratorCache> = ::java_text / "BreakIterator$BreakIteratorCache";
namespace java::text { class CalendarBuilder; }
template<> constexpr auto signature<::java::text::CalendarBuilder> = ::java_text / "CalendarBuilder";
namespace java::text { class CharacterIterator; }
template<> constexpr auto signature<::java::text::CharacterIterator> = ::java_text / "CharacterIterator";
namespace java::text { class CharacterIteratorFieldDelegate; }
template<> constexpr auto signature<::java::text::CharacterIteratorFieldDelegate> = ::java_text / "CharacterIteratorFieldDelegate";
namespace java::text { class ChoiceFormat; }
template<> constexpr auto signature<::java::text::ChoiceFormat> = ::java_text / "ChoiceFormat";
namespace java::text { class CollationElementIterator; }
template<> constexpr auto signature<::java::text::CollationElementIterator> = ::java_text / "CollationElementIterator";
namespace java::text { class CollationKey; }
template<> constexpr auto signature<::java::text::CollationKey> = ::java_text / "CollationKey";
namespace java::text { class Collator; }
template<> constexpr auto signature<::java::text::Collator> = ::java_text / "Collator";
namespace java::text { class DateFormat; }
template<> constexpr auto signature<::java::text::DateFormat> = ::java_text / "DateFormat";
namespace java::text { class DateFormat$Field; }
template<> constexpr auto signature<::java::text::DateFormat$Field> = ::java_text / "DateFormat$Field";
namespace java::text { class DateFormatSymbols; }
template<> constexpr auto signature<::java::text::DateFormatSymbols> = ::java_text / "DateFormatSymbols";
namespace java::text { class DecimalFormat; }
template<> constexpr auto signature<::java::text::DecimalFormat> = ::java_text / "DecimalFormat";
namespace java::text { class DecimalFormat$1; }
template<> constexpr auto signature<::java::text::DecimalFormat$1> = ::java_text / "DecimalFormat$1";
namespace java::text { class DecimalFormat$DigitArrays; }
template<> constexpr auto signature<::java::text::DecimalFormat$DigitArrays> = ::java_text / "DecimalFormat$DigitArrays";
namespace java::text { class DecimalFormat$FastPathData; }
template<> constexpr auto signature<::java::text::DecimalFormat$FastPathData> = ::java_text / "DecimalFormat$FastPathData";
namespace java::text { class DecimalFormatSymbols; }
template<> constexpr auto signature<::java::text::DecimalFormatSymbols> = ::java_text / "DecimalFormatSymbols";
namespace java::text { class DigitList; }
template<> constexpr auto signature<::java::text::DigitList> = ::java_text / "DigitList";
namespace java::text { class DigitList$1; }
template<> constexpr auto signature<::java::text::DigitList$1> = ::java_text / "DigitList$1";
namespace java::text { class DontCareFieldPosition; }
template<> constexpr auto signature<::java::text::DontCareFieldPosition> = ::java_text / "DontCareFieldPosition";
namespace java::text { class DontCareFieldPosition$1; }
template<> constexpr auto signature<::java::text::DontCareFieldPosition$1> = ::java_text / "DontCareFieldPosition$1";
namespace java::text { class EntryPair; }
template<> constexpr auto signature<::java::text::EntryPair> = ::java_text / "EntryPair";
namespace java::text { class FieldPosition; }
template<> constexpr auto signature<::java::text::FieldPosition> = ::java_text / "FieldPosition";
namespace java::text { class FieldPosition$1; }
template<> constexpr auto signature<::java::text::FieldPosition$1> = ::java_text / "FieldPosition$1";
namespace java::text { class FieldPosition$Delegate; }
template<> constexpr auto signature<::java::text::FieldPosition$Delegate> = ::java_text / "FieldPosition$Delegate";
namespace java::text { class Format; }
template<> constexpr auto signature<::java::text::Format> = ::java_text / "Format";
namespace java::text { class Format$Field; }
template<> constexpr auto signature<::java::text::Format$Field> = ::java_text / "Format$Field";
namespace java::text { class Format$FieldDelegate; }
template<> constexpr auto signature<::java::text::Format$FieldDelegate> = ::java_text / "Format$FieldDelegate";
namespace java::text { class MergeCollation; }
template<> constexpr auto signature<::java::text::MergeCollation> = ::java_text / "MergeCollation";
namespace java::text { class MessageFormat; }
template<> constexpr auto signature<::java::text::MessageFormat> = ::java_text / "MessageFormat";
namespace java::text { class MessageFormat$Field; }
template<> constexpr auto signature<::java::text::MessageFormat$Field> = ::java_text / "MessageFormat$Field";
namespace java::text { class Normalizer; }
template<> constexpr auto signature<::java::text::Normalizer> = ::java_text / "Normalizer";
namespace java::text { class Normalizer$Form; }
template<> constexpr auto signature<::java::text::Normalizer$Form> = ::java_text / "Normalizer$Form";
namespace java::text { class NumberFormat; }
template<> constexpr auto signature<::java::text::NumberFormat> = ::java_text / "NumberFormat";
namespace java::text { class NumberFormat$Field; }
template<> constexpr auto signature<::java::text::NumberFormat$Field> = ::java_text / "NumberFormat$Field";
namespace java::text { class ParseException; }
template<> constexpr auto signature<::java::text::ParseException> = ::java_text / "ParseException";
namespace java::text { class ParsePosition; }
template<> constexpr auto signature<::java::text::ParsePosition> = ::java_text / "ParsePosition";
namespace java::text { class PatternEntry; }
template<> constexpr auto signature<::java::text::PatternEntry> = ::java_text / "PatternEntry";
namespace java::text { class PatternEntry$Parser; }
template<> constexpr auto signature<::java::text::PatternEntry$Parser> = ::java_text / "PatternEntry$Parser";
namespace java::text { class RBCollationTables; }
template<> constexpr auto signature<::java::text::RBCollationTables> = ::java_text / "RBCollationTables";
namespace java::text { class RBCollationTables$1; }
template<> constexpr auto signature<::java::text::RBCollationTables$1> = ::java_text / "RBCollationTables$1";
namespace java::text { class RBCollationTables$BuildAPI; }
template<> constexpr auto signature<::java::text::RBCollationTables$BuildAPI> = ::java_text / "RBCollationTables$BuildAPI";
namespace java::text { class RBTableBuilder; }
template<> constexpr auto signature<::java::text::RBTableBuilder> = ::java_text / "RBTableBuilder";
namespace java::text { class RuleBasedCollationKey; }
template<> constexpr auto signature<::java::text::RuleBasedCollationKey> = ::java_text / "RuleBasedCollationKey";
namespace java::text { class RuleBasedCollator; }
template<> constexpr auto signature<::java::text::RuleBasedCollator> = ::java_text / "RuleBasedCollator";
namespace java::text { class SimpleDateFormat; }
template<> constexpr auto signature<::java::text::SimpleDateFormat> = ::java_text / "SimpleDateFormat";
namespace java::text { class StringCharacterIterator; }
template<> constexpr auto signature<::java::text::StringCharacterIterator> = ::java_text / "StringCharacterIterator";

#endif
