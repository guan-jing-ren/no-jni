#ifndef java_text_DecimalFormatSymbols_HPP
#define java_text_DecimalFormatSymbols_HPP

#include "../../jfwd_decl.hpp"

class ::java::text::DecimalFormatSymbols : public jObject<::java::text::DecimalFormatSymbols, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_text / "DecimalFormatSymbols";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::util::Locale)>(), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::util::Locale *()>("getAvailableLocales"), //
		jMethod<::java::util::Currency()>("getCurrency"), //
		jMethod<::java::lang::String()>("getCurrencySymbol"), //
		jMethod<::jchar()>("getDecimalSeparator"), //
		jMethod<::jchar()>("getDigit"), //
		jMethod<::java::lang::String()>("getExponentSeparator"), //
		jMethod<::jchar()>("getGroupingSeparator"), //
		jMethod<::java::lang::String()>("getInfinity"), //
		jMethod<::java::text::DecimalFormatSymbols()>("getInstance"), //
		jMethod<::java::text::DecimalFormatSymbols(::java::util::Locale)>("getInstance"), //
		jMethod<::java::lang::String()>("getInternationalCurrencySymbol"), //
		jMethod<::jchar()>("getMinusSign"), //
		jMethod<::jchar()>("getMonetaryDecimalSeparator"), //
		jMethod<::java::lang::String()>("getNaN"), //
		jMethod<::jchar()>("getPatternSeparator"), //
		jMethod<::jchar()>("getPerMill"), //
		jMethod<::jchar()>("getPercent"), //
		jMethod<::jchar()>("getZeroDigit"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jvoid(::java::util::Currency)>("setCurrency"), //
		jMethod<::jvoid(::java::lang::String)>("setCurrencySymbol"), //
		jMethod<::jvoid(::jchar)>("setDecimalSeparator"), //
		jMethod<::jvoid(::jchar)>("setDigit"), //
		jMethod<::jvoid(::java::lang::String)>("setExponentSeparator"), //
		jMethod<::jvoid(::jchar)>("setGroupingSeparator"), //
		jMethod<::jvoid(::java::lang::String)>("setInfinity"), //
		jMethod<::jvoid(::java::lang::String)>("setInternationalCurrencySymbol"), //
		jMethod<::jvoid(::jchar)>("setMinusSign"), //
		jMethod<::jvoid(::jchar)>("setMonetaryDecimalSeparator"), //
		jMethod<::jvoid(::java::lang::String)>("setNaN"), //
		jMethod<::jvoid(::jchar)>("setPatternSeparator"), //
		jMethod<::jvoid(::jchar)>("setPerMill"), //
		jMethod<::jvoid(::jchar)>("setPercent"), //
		jMethod<::jvoid(::jchar)>("setZeroDigit"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale *, typename... Args>
	static auto getAvailableLocales(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAvailableLocales")] != -1);
		return scall<R>("getAvailableLocales", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Currency, typename... Args>
	auto getCurrency(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCurrency")] != -1);
		return call<R>("getCurrency", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCurrencySymbol(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCurrencySymbol")] != -1);
		return call<R>("getCurrencySymbol", forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto getDecimalSeparator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDecimalSeparator")] != -1);
		return call<R>("getDecimalSeparator", forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto getDigit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDigit")] != -1);
		return call<R>("getDigit", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getExponentSeparator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getExponentSeparator")] != -1);
		return call<R>("getExponentSeparator", forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto getGroupingSeparator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getGroupingSeparator")] != -1);
		return call<R>("getGroupingSeparator", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getInfinity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInfinity")] != -1);
		return call<R>("getInfinity", forward<Args>(args)...);
	}

	template<typename R = ::java::text::DecimalFormatSymbols, typename... Args>
	static auto getInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInstance")] != -1);
		return scall<R>("getInstance", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getInternationalCurrencySymbol(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInternationalCurrencySymbol")] != -1);
		return call<R>("getInternationalCurrencySymbol", forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto getMinusSign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinusSign")] != -1);
		return call<R>("getMinusSign", forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto getMonetaryDecimalSeparator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMonetaryDecimalSeparator")] != -1);
		return call<R>("getMonetaryDecimalSeparator", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNaN(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNaN")] != -1);
		return call<R>("getNaN", forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto getPatternSeparator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPatternSeparator")] != -1);
		return call<R>("getPatternSeparator", forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto getPerMill(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPerMill")] != -1);
		return call<R>("getPerMill", forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto getPercent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPercent")] != -1);
		return call<R>("getPercent", forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto getZeroDigit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getZeroDigit")] != -1);
		return call<R>("getZeroDigit", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCurrency(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCurrency")] != -1);
		return call<R>("setCurrency", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCurrencySymbol(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCurrencySymbol")] != -1);
		return call<R>("setCurrencySymbol", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDecimalSeparator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDecimalSeparator")] != -1);
		return call<R>("setDecimalSeparator", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDigit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDigit")] != -1);
		return call<R>("setDigit", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setExponentSeparator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setExponentSeparator")] != -1);
		return call<R>("setExponentSeparator", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGroupingSeparator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setGroupingSeparator")] != -1);
		return call<R>("setGroupingSeparator", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInfinity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setInfinity")] != -1);
		return call<R>("setInfinity", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInternationalCurrencySymbol(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setInternationalCurrencySymbol")] != -1);
		return call<R>("setInternationalCurrencySymbol", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMinusSign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMinusSign")] != -1);
		return call<R>("setMinusSign", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMonetaryDecimalSeparator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMonetaryDecimalSeparator")] != -1);
		return call<R>("setMonetaryDecimalSeparator", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNaN(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setNaN")] != -1);
		return call<R>("setNaN", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPatternSeparator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPatternSeparator")] != -1);
		return call<R>("setPatternSeparator", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPerMill(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPerMill")] != -1);
		return call<R>("setPerMill", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPercent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPercent")] != -1);
		return call<R>("setPercent", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setZeroDigit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setZeroDigit")] != -1);
		return call<R>("setZeroDigit", forward<Args>(args)...);
	}

};

#endif
