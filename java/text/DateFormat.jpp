#ifndef java_text_DateFormat_HPP
#define java_text_DateFormat_HPP

#include "../../jfwd_decl.hpp"

class ::java::text::DateFormat : public jObject<::java::text::DateFormat, ::java::text::Format> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_text / "DateFormat";

	constexpr static Enume field_signatures{
		jField<::jint>("AM_PM_FIELD"), //
		jField<::jint>("DATE_FIELD"), //
		jField<::jint>("DAY_OF_WEEK_FIELD"), //
		jField<::jint>("DAY_OF_WEEK_IN_MONTH_FIELD"), //
		jField<::jint>("DAY_OF_YEAR_FIELD"), //
		jField<::jint>("DEFAULT"), //
		jField<::jint>("ERA_FIELD"), //
		jField<::jint>("FULL"), //
		jField<::jint>("HOUR0_FIELD"), //
		jField<::jint>("HOUR1_FIELD"), //
		jField<::jint>("HOUR_OF_DAY0_FIELD"), //
		jField<::jint>("HOUR_OF_DAY1_FIELD"), //
		jField<::jint>("LONG"), //
		jField<::jint>("MEDIUM"), //
		jField<::jint>("MILLISECOND_FIELD"), //
		jField<::jint>("MINUTE_FIELD"), //
		jField<::jint>("MONTH_FIELD"), //
		jField<::jint>("SECOND_FIELD"), //
		jField<::jint>("SHORT"), //
		jField<::jint>("TIMEZONE_FIELD"), //
		jField<::jint>("WEEK_OF_MONTH_FIELD"), //
		jField<::jint>("WEEK_OF_YEAR_FIELD"), //
		jField<::jint>("YEAR_FIELD"), //
	};

	template<typename F = ::jint>
	static auto AM_PM_FIELD() {
		static_assert(field_signatures[jField<F>("AM_PM_FIELD")] != -1);
		return sat<F>("AM_PM_FIELD");
	}

	template<typename F = ::jint>
	static auto DATE_FIELD() {
		static_assert(field_signatures[jField<F>("DATE_FIELD")] != -1);
		return sat<F>("DATE_FIELD");
	}

	template<typename F = ::jint>
	static auto DAY_OF_WEEK_FIELD() {
		static_assert(field_signatures[jField<F>("DAY_OF_WEEK_FIELD")] != -1);
		return sat<F>("DAY_OF_WEEK_FIELD");
	}

	template<typename F = ::jint>
	static auto DAY_OF_WEEK_IN_MONTH_FIELD() {
		static_assert(field_signatures[jField<F>("DAY_OF_WEEK_IN_MONTH_FIELD")] != -1);
		return sat<F>("DAY_OF_WEEK_IN_MONTH_FIELD");
	}

	template<typename F = ::jint>
	static auto DAY_OF_YEAR_FIELD() {
		static_assert(field_signatures[jField<F>("DAY_OF_YEAR_FIELD")] != -1);
		return sat<F>("DAY_OF_YEAR_FIELD");
	}

	template<typename F = ::jint>
	static auto DEFAULT() {
		static_assert(field_signatures[jField<F>("DEFAULT")] != -1);
		return sat<F>("DEFAULT");
	}

	template<typename F = ::jint>
	static auto ERA_FIELD() {
		static_assert(field_signatures[jField<F>("ERA_FIELD")] != -1);
		return sat<F>("ERA_FIELD");
	}

	template<typename F = ::jint>
	static auto FULL() {
		static_assert(field_signatures[jField<F>("FULL")] != -1);
		return sat<F>("FULL");
	}

	template<typename F = ::jint>
	static auto HOUR0_FIELD() {
		static_assert(field_signatures[jField<F>("HOUR0_FIELD")] != -1);
		return sat<F>("HOUR0_FIELD");
	}

	template<typename F = ::jint>
	static auto HOUR1_FIELD() {
		static_assert(field_signatures[jField<F>("HOUR1_FIELD")] != -1);
		return sat<F>("HOUR1_FIELD");
	}

	template<typename F = ::jint>
	static auto HOUR_OF_DAY0_FIELD() {
		static_assert(field_signatures[jField<F>("HOUR_OF_DAY0_FIELD")] != -1);
		return sat<F>("HOUR_OF_DAY0_FIELD");
	}

	template<typename F = ::jint>
	static auto HOUR_OF_DAY1_FIELD() {
		static_assert(field_signatures[jField<F>("HOUR_OF_DAY1_FIELD")] != -1);
		return sat<F>("HOUR_OF_DAY1_FIELD");
	}

	template<typename F = ::jint>
	static auto LONG() {
		static_assert(field_signatures[jField<F>("LONG")] != -1);
		return sat<F>("LONG");
	}

	template<typename F = ::jint>
	static auto MEDIUM() {
		static_assert(field_signatures[jField<F>("MEDIUM")] != -1);
		return sat<F>("MEDIUM");
	}

	template<typename F = ::jint>
	static auto MILLISECOND_FIELD() {
		static_assert(field_signatures[jField<F>("MILLISECOND_FIELD")] != -1);
		return sat<F>("MILLISECOND_FIELD");
	}

	template<typename F = ::jint>
	static auto MINUTE_FIELD() {
		static_assert(field_signatures[jField<F>("MINUTE_FIELD")] != -1);
		return sat<F>("MINUTE_FIELD");
	}

	template<typename F = ::jint>
	static auto MONTH_FIELD() {
		static_assert(field_signatures[jField<F>("MONTH_FIELD")] != -1);
		return sat<F>("MONTH_FIELD");
	}

	template<typename F = ::jint>
	static auto SECOND_FIELD() {
		static_assert(field_signatures[jField<F>("SECOND_FIELD")] != -1);
		return sat<F>("SECOND_FIELD");
	}

	template<typename F = ::jint>
	static auto SHORT() {
		static_assert(field_signatures[jField<F>("SHORT")] != -1);
		return sat<F>("SHORT");
	}

	template<typename F = ::jint>
	static auto TIMEZONE_FIELD() {
		static_assert(field_signatures[jField<F>("TIMEZONE_FIELD")] != -1);
		return sat<F>("TIMEZONE_FIELD");
	}

	template<typename F = ::jint>
	static auto WEEK_OF_MONTH_FIELD() {
		static_assert(field_signatures[jField<F>("WEEK_OF_MONTH_FIELD")] != -1);
		return sat<F>("WEEK_OF_MONTH_FIELD");
	}

	template<typename F = ::jint>
	static auto WEEK_OF_YEAR_FIELD() {
		static_assert(field_signatures[jField<F>("WEEK_OF_YEAR_FIELD")] != -1);
		return sat<F>("WEEK_OF_YEAR_FIELD");
	}

	template<typename F = ::jint>
	static auto YEAR_FIELD() {
		static_assert(field_signatures[jField<F>("YEAR_FIELD")] != -1);
		return sat<F>("YEAR_FIELD");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::StringBuffer(::java::lang::Object, ::java::lang::StringBuffer, ::java::text::FieldPosition)>("format"), //
		jMethod<::java::lang::String(::java::util::Date)>("format"), //
		jMethod<::java::lang::StringBuffer(::java::util::Date, ::java::lang::StringBuffer, ::java::text::FieldPosition)>("format"), //
		jMethod<::java::util::Locale *()>("getAvailableLocales"), //
		jMethod<::java::util::Calendar()>("getCalendar"), //
		jMethod<::java::text::DateFormat()>("getDateInstance"), //
		jMethod<::java::text::DateFormat(::jint)>("getDateInstance"), //
		jMethod<::java::text::DateFormat(::jint, ::java::util::Locale)>("getDateInstance"), //
		jMethod<::java::text::DateFormat()>("getDateTimeInstance"), //
		jMethod<::java::text::DateFormat(::jint, ::jint)>("getDateTimeInstance"), //
		jMethod<::java::text::DateFormat(::jint, ::jint, ::java::util::Locale)>("getDateTimeInstance"), //
		jMethod<::java::text::DateFormat()>("getInstance"), //
		jMethod<::java::text::NumberFormat()>("getNumberFormat"), //
		jMethod<::java::text::DateFormat()>("getTimeInstance"), //
		jMethod<::java::text::DateFormat(::jint)>("getTimeInstance"), //
		jMethod<::java::text::DateFormat(::jint, ::java::util::Locale)>("getTimeInstance"), //
		jMethod<::java::util::TimeZone()>("getTimeZone"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isLenient"), //
		jMethod<::java::util::Date(::java::lang::String)>("parse"), //
		jMethod<::java::util::Date(::java::lang::String, ::java::text::ParsePosition)>("parse"), //
		jMethod<::java::lang::Object(::java::lang::String, ::java::text::ParsePosition)>("parseObject"), //
		jMethod<::jvoid(::java::util::Calendar)>("setCalendar"), //
		jMethod<::jvoid(::jboolean)>("setLenient"), //
		jMethod<::jvoid(::java::text::NumberFormat)>("setNumberFormat"), //
		jMethod<::jvoid(::java::util::TimeZone)>("setTimeZone"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::StringBuffer, typename... Args>
	auto format(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("format")] != -1);
		return call<R>("format", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale *, typename... Args>
	static auto getAvailableLocales(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAvailableLocales")] != -1);
		return scall<R>("getAvailableLocales", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Calendar, typename... Args>
	auto getCalendar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCalendar")] != -1);
		return call<R>("getCalendar", forward<Args>(args)...);
	}

	template<typename R = ::java::text::DateFormat, typename... Args>
	static auto getDateInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDateInstance")] != -1);
		return scall<R>("getDateInstance", forward<Args>(args)...);
	}

	template<typename R = ::java::text::DateFormat, typename... Args>
	static auto getDateTimeInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDateTimeInstance")] != -1);
		return scall<R>("getDateTimeInstance", forward<Args>(args)...);
	}

	template<typename R = ::java::text::DateFormat, typename... Args>
	static auto getInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInstance")] != -1);
		return scall<R>("getInstance", forward<Args>(args)...);
	}

	template<typename R = ::java::text::NumberFormat, typename... Args>
	auto getNumberFormat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNumberFormat")] != -1);
		return call<R>("getNumberFormat", forward<Args>(args)...);
	}

	template<typename R = ::java::text::DateFormat, typename... Args>
	static auto getTimeInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTimeInstance")] != -1);
		return scall<R>("getTimeInstance", forward<Args>(args)...);
	}

	template<typename R = ::java::util::TimeZone, typename... Args>
	auto getTimeZone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTimeZone")] != -1);
		return call<R>("getTimeZone", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLenient(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isLenient")] != -1);
		return call<R>("isLenient", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Date, typename... Args>
	auto parse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("parse")] != -1);
		return call<R>("parse", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto parseObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("parseObject")] != -1);
		return call<R>("parseObject", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCalendar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCalendar")] != -1);
		return call<R>("setCalendar", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLenient(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLenient")] != -1);
		return call<R>("setLenient", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNumberFormat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setNumberFormat")] != -1);
		return call<R>("setNumberFormat", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTimeZone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setTimeZone")] != -1);
		return call<R>("setTimeZone", forward<Args>(args)...);
	}

};

#endif
