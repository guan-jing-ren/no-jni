#ifndef java_text_FieldPosition_HPP
#define java_text_FieldPosition_HPP

#include "../../jfwd_decl.hpp"

class ::java::text::FieldPosition : public jObject<::java::text::FieldPosition, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_text / "FieldPosition";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint)>(), //
		jConstructor<::jvoid(::java::text::Format$Field)>(), //
		jConstructor<::jvoid(::java::text::Format$Field, ::jint)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint()>("getBeginIndex"), //
		jMethod<::jint()>("getEndIndex"), //
		jMethod<::jint()>("getField"), //
		jMethod<::java::text::Format$Field()>("getFieldAttribute"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jvoid(::jint)>("setBeginIndex"), //
		jMethod<::jvoid(::jint)>("setEndIndex"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBeginIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBeginIndex")] != -1);
		return call<R>("getBeginIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getEndIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEndIndex")] != -1);
		return call<R>("getEndIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getField(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getField")] != -1);
		return call<R>("getField", std::forward<Args>(args)...);
	}

	template<typename R = ::java::text::Format$Field, typename... Args>
	auto getFieldAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFieldAttribute")] != -1);
		return call<R>("getFieldAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBeginIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBeginIndex")] != -1);
		return call<R>("setBeginIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEndIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEndIndex")] != -1);
		return call<R>("setEndIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
