#ifndef java_text_NumberFormat_HPP
#define java_text_NumberFormat_HPP

#include "../../jfwd_decl.hpp"

class ::java::text::NumberFormat : public jObject<::java::text::NumberFormat, ::java::text::Format> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_text / "NumberFormat";

	constexpr static Enume field_signatures{
		jField<::jint>("FRACTION_FIELD"), //
		jField<::jint>("INTEGER_FIELD"), //
	};

	template<typename F = ::jint>
	static auto FRACTION_FIELD() {
		static_assert(field_signatures[jField<F>("FRACTION_FIELD")] != -1);
		return sat<F>("FRACTION_FIELD");
	}

	template<typename F = ::jint>
	static auto INTEGER_FIELD() {
		static_assert(field_signatures[jField<F>("INTEGER_FIELD")] != -1);
		return sat<F>("INTEGER_FIELD");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::String(::jdouble)>("format"), //
		jMethod<::java::lang::StringBuffer(::jdouble, ::java::lang::StringBuffer, ::java::text::FieldPosition)>("format"), //
		jMethod<::java::lang::String(::jlong)>("format"), //
		jMethod<::java::lang::StringBuffer(::jlong, ::java::lang::StringBuffer, ::java::text::FieldPosition)>("format"), //
		jMethod<::java::lang::StringBuffer(::java::lang::Object, ::java::lang::StringBuffer, ::java::text::FieldPosition)>("format"), //
		jMethod<::java::util::Locale *()>("getAvailableLocales"), //
		jMethod<::java::util::Currency()>("getCurrency"), //
		jMethod<::java::text::NumberFormat()>("getCurrencyInstance"), //
		jMethod<::java::text::NumberFormat(::java::util::Locale)>("getCurrencyInstance"), //
		jMethod<::java::text::NumberFormat()>("getInstance"), //
		jMethod<::java::text::NumberFormat(::java::util::Locale)>("getInstance"), //
		jMethod<::java::text::NumberFormat()>("getIntegerInstance"), //
		jMethod<::java::text::NumberFormat(::java::util::Locale)>("getIntegerInstance"), //
		jMethod<::jint()>("getMaximumFractionDigits"), //
		jMethod<::jint()>("getMaximumIntegerDigits"), //
		jMethod<::jint()>("getMinimumFractionDigits"), //
		jMethod<::jint()>("getMinimumIntegerDigits"), //
		jMethod<::java::text::NumberFormat()>("getNumberInstance"), //
		jMethod<::java::text::NumberFormat(::java::util::Locale)>("getNumberInstance"), //
		jMethod<::java::text::NumberFormat()>("getPercentInstance"), //
		jMethod<::java::text::NumberFormat(::java::util::Locale)>("getPercentInstance"), //
		jMethod<::java::math::RoundingMode()>("getRoundingMode"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isGroupingUsed"), //
		jMethod<::jboolean()>("isParseIntegerOnly"), //
		jMethod<::java::lang::Number(::java::lang::String)>("parse"), //
		jMethod<::java::lang::Number(::java::lang::String, ::java::text::ParsePosition)>("parse"), //
		jMethod<::java::lang::Object(::java::lang::String, ::java::text::ParsePosition)>("parseObject"), //
		jMethod<::jvoid(::java::util::Currency)>("setCurrency"), //
		jMethod<::jvoid(::jboolean)>("setGroupingUsed"), //
		jMethod<::jvoid(::jint)>("setMaximumFractionDigits"), //
		jMethod<::jvoid(::jint)>("setMaximumIntegerDigits"), //
		jMethod<::jvoid(::jint)>("setMinimumFractionDigits"), //
		jMethod<::jvoid(::jint)>("setMinimumIntegerDigits"), //
		jMethod<::jvoid(::jboolean)>("setParseIntegerOnly"), //
		jMethod<::jvoid(::java::math::RoundingMode)>("setRoundingMode"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto format(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("format")] != -1);
		return call<R>("format", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale *, typename... Args>
	static auto getAvailableLocales(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAvailableLocales")] != -1);
		return scall<R>("getAvailableLocales", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Currency, typename... Args>
	auto getCurrency(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCurrency")] != -1);
		return call<R>("getCurrency", forward<Args>(args)...);
	}

	template<typename R = ::java::text::NumberFormat, typename... Args>
	static auto getCurrencyInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCurrencyInstance")] != -1);
		return scall<R>("getCurrencyInstance", forward<Args>(args)...);
	}

	template<typename R = ::java::text::NumberFormat, typename... Args>
	static auto getInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInstance")] != -1);
		return scall<R>("getInstance", forward<Args>(args)...);
	}

	template<typename R = ::java::text::NumberFormat, typename... Args>
	static auto getIntegerInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getIntegerInstance")] != -1);
		return scall<R>("getIntegerInstance", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaximumFractionDigits(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaximumFractionDigits")] != -1);
		return call<R>("getMaximumFractionDigits", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaximumIntegerDigits(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaximumIntegerDigits")] != -1);
		return call<R>("getMaximumIntegerDigits", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinimumFractionDigits(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinimumFractionDigits")] != -1);
		return call<R>("getMinimumFractionDigits", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinimumIntegerDigits(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinimumIntegerDigits")] != -1);
		return call<R>("getMinimumIntegerDigits", forward<Args>(args)...);
	}

	template<typename R = ::java::text::NumberFormat, typename... Args>
	static auto getNumberInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNumberInstance")] != -1);
		return scall<R>("getNumberInstance", forward<Args>(args)...);
	}

	template<typename R = ::java::text::NumberFormat, typename... Args>
	static auto getPercentInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPercentInstance")] != -1);
		return scall<R>("getPercentInstance", forward<Args>(args)...);
	}

	template<typename R = ::java::math::RoundingMode, typename... Args>
	auto getRoundingMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRoundingMode")] != -1);
		return call<R>("getRoundingMode", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isGroupingUsed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isGroupingUsed")] != -1);
		return call<R>("isGroupingUsed", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isParseIntegerOnly(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isParseIntegerOnly")] != -1);
		return call<R>("isParseIntegerOnly", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Number, typename... Args>
	auto parse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("parse")] != -1);
		return call<R>("parse", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto parseObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("parseObject")] != -1);
		return call<R>("parseObject", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCurrency(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCurrency")] != -1);
		return call<R>("setCurrency", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGroupingUsed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setGroupingUsed")] != -1);
		return call<R>("setGroupingUsed", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaximumFractionDigits(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMaximumFractionDigits")] != -1);
		return call<R>("setMaximumFractionDigits", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaximumIntegerDigits(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMaximumIntegerDigits")] != -1);
		return call<R>("setMaximumIntegerDigits", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMinimumFractionDigits(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMinimumFractionDigits")] != -1);
		return call<R>("setMinimumFractionDigits", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMinimumIntegerDigits(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMinimumIntegerDigits")] != -1);
		return call<R>("setMinimumIntegerDigits", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setParseIntegerOnly(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setParseIntegerOnly")] != -1);
		return call<R>("setParseIntegerOnly", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRoundingMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setRoundingMode")] != -1);
		return call<R>("setRoundingMode", forward<Args>(args)...);
	}

};

#endif
