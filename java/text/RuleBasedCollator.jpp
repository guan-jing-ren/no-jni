#ifndef java_text_RuleBasedCollator_HPP
#define java_text_RuleBasedCollator_HPP

#include "../../jfwd_decl.hpp"

class ::java::text::RuleBasedCollator : public jObject<::java::text::RuleBasedCollator, ::java::text::Collator> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_text / "RuleBasedCollator";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jint(::java::lang::String, ::java::lang::String)>("compare"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::text::CollationElementIterator(::java::lang::String)>("getCollationElementIterator"), //
		jMethod<::java::text::CollationElementIterator(::java::text::CharacterIterator)>("getCollationElementIterator"), //
		jMethod<::java::text::CollationKey(::java::lang::String)>("getCollationKey"), //
		jMethod<::java::lang::String()>("getRules"), //
		jMethod<::jint()>("hashCode"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto compare(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("compare")] != -1);
		return call<R>("compare", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::java::text::CollationElementIterator, typename... Args>
	auto getCollationElementIterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCollationElementIterator")] != -1);
		return call<R>("getCollationElementIterator", forward<Args>(args)...);
	}

	template<typename R = ::java::text::CollationKey, typename... Args>
	auto getCollationKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCollationKey")] != -1);
		return call<R>("getCollationKey", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRules(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRules")] != -1);
		return call<R>("getRules", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

};

#endif
