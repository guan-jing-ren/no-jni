#ifndef java_text_BreakIterator_HPP
#define java_text_BreakIterator_HPP

#include "../../jfwd_decl.hpp"

class ::java::text::BreakIterator : public jObject<::java::text::BreakIterator, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_text / "BreakIterator";

	constexpr static Enume field_signatures{
		jField<::jint>("DONE"), //
	};

	template<typename F = ::jint>
	static auto DONE() {
		static_assert(field_signatures[jField<F>("DONE")] != -1);
		return sat<F>("DONE");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jint()>("current"), //
		jMethod<::jint()>("first"), //
		jMethod<::jint(::jint)>("following"), //
		jMethod<::java::util::Locale *()>("getAvailableLocales"), //
		jMethod<::java::text::BreakIterator()>("getCharacterInstance"), //
		jMethod<::java::text::BreakIterator(::java::util::Locale)>("getCharacterInstance"), //
		jMethod<::java::text::BreakIterator()>("getLineInstance"), //
		jMethod<::java::text::BreakIterator(::java::util::Locale)>("getLineInstance"), //
		jMethod<::java::text::BreakIterator()>("getSentenceInstance"), //
		jMethod<::java::text::BreakIterator(::java::util::Locale)>("getSentenceInstance"), //
		jMethod<::java::text::CharacterIterator()>("getText"), //
		jMethod<::java::text::BreakIterator()>("getWordInstance"), //
		jMethod<::java::text::BreakIterator(::java::util::Locale)>("getWordInstance"), //
		jMethod<::jboolean(::jint)>("isBoundary"), //
		jMethod<::jint()>("last"), //
		jMethod<::jint()>("next"), //
		jMethod<::jint(::jint)>("next"), //
		jMethod<::jint(::jint)>("preceding"), //
		jMethod<::jint()>("previous"), //
		jMethod<::jvoid(::java::lang::String)>("setText"), //
		jMethod<::jvoid(::java::text::CharacterIterator)>("setText"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto current(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("current")] != -1);
		return call<R>("current", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto first(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("first")] != -1);
		return call<R>("first", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto following(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("following")] != -1);
		return call<R>("following", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale *, typename... Args>
	static auto getAvailableLocales(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAvailableLocales")] != -1);
		return scall<R>("getAvailableLocales", std::forward<Args>(args)...);
	}

	template<typename R = ::java::text::BreakIterator, typename... Args>
	static auto getCharacterInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCharacterInstance")] != -1);
		return scall<R>("getCharacterInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::java::text::BreakIterator, typename... Args>
	static auto getLineInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineInstance")] != -1);
		return scall<R>("getLineInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::java::text::BreakIterator, typename... Args>
	static auto getSentenceInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSentenceInstance")] != -1);
		return scall<R>("getSentenceInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::java::text::CharacterIterator, typename... Args>
	auto getText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getText")] != -1);
		return call<R>("getText", std::forward<Args>(args)...);
	}

	template<typename R = ::java::text::BreakIterator, typename... Args>
	static auto getWordInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWordInstance")] != -1);
		return scall<R>("getWordInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isBoundary(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isBoundary")] != -1);
		return call<R>("isBoundary", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto last(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("last")] != -1);
		return call<R>("last", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto next(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("next")] != -1);
		return call<R>("next", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto preceding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("preceding")] != -1);
		return call<R>("preceding", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto previous(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("previous")] != -1);
		return call<R>("previous", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setText")] != -1);
		return call<R>("setText", std::forward<Args>(args)...);
	}

};

#endif
