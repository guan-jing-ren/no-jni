#ifndef java_text_DecimalFormat_HPP
#define java_text_DecimalFormat_HPP

#include "../../jfwd_decl.hpp"

class ::java::text::DecimalFormat : public jObject<::java::text::DecimalFormat, ::java::text::NumberFormat> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_text / "DecimalFormat";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::text::DecimalFormatSymbols)>(), //
		jMethod<::jvoid(::java::lang::String)>("applyLocalizedPattern"), //
		jMethod<::jvoid(::java::lang::String)>("applyPattern"), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::StringBuffer(::jdouble, ::java::lang::StringBuffer, ::java::text::FieldPosition)>("format"), //
		jMethod<::java::lang::StringBuffer(::jlong, ::java::lang::StringBuffer, ::java::text::FieldPosition)>("format"), //
		jMethod<::java::lang::StringBuffer(::java::lang::Object, ::java::lang::StringBuffer, ::java::text::FieldPosition)>("format"), //
		jMethod<::java::text::AttributedCharacterIterator(::java::lang::Object)>("formatToCharacterIterator"), //
		jMethod<::java::util::Currency()>("getCurrency"), //
		jMethod<::java::text::DecimalFormatSymbols()>("getDecimalFormatSymbols"), //
		jMethod<::jint()>("getGroupingSize"), //
		jMethod<::jint()>("getMaximumFractionDigits"), //
		jMethod<::jint()>("getMaximumIntegerDigits"), //
		jMethod<::jint()>("getMinimumFractionDigits"), //
		jMethod<::jint()>("getMinimumIntegerDigits"), //
		jMethod<::jint()>("getMultiplier"), //
		jMethod<::java::lang::String()>("getNegativePrefix"), //
		jMethod<::java::lang::String()>("getNegativeSuffix"), //
		jMethod<::java::lang::String()>("getPositivePrefix"), //
		jMethod<::java::lang::String()>("getPositiveSuffix"), //
		jMethod<::java::math::RoundingMode()>("getRoundingMode"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isDecimalSeparatorAlwaysShown"), //
		jMethod<::jboolean()>("isParseBigDecimal"), //
		jMethod<::java::lang::Number(::java::lang::String, ::java::text::ParsePosition)>("parse"), //
		jMethod<::jvoid(::java::util::Currency)>("setCurrency"), //
		jMethod<::jvoid(::java::text::DecimalFormatSymbols)>("setDecimalFormatSymbols"), //
		jMethod<::jvoid(::jboolean)>("setDecimalSeparatorAlwaysShown"), //
		jMethod<::jvoid(::jint)>("setGroupingSize"), //
		jMethod<::jvoid(::jboolean)>("setGroupingUsed"), //
		jMethod<::jvoid(::jint)>("setMaximumFractionDigits"), //
		jMethod<::jvoid(::jint)>("setMaximumIntegerDigits"), //
		jMethod<::jvoid(::jint)>("setMinimumFractionDigits"), //
		jMethod<::jvoid(::jint)>("setMinimumIntegerDigits"), //
		jMethod<::jvoid(::jint)>("setMultiplier"), //
		jMethod<::jvoid(::java::lang::String)>("setNegativePrefix"), //
		jMethod<::jvoid(::java::lang::String)>("setNegativeSuffix"), //
		jMethod<::jvoid(::jboolean)>("setParseBigDecimal"), //
		jMethod<::jvoid(::java::lang::String)>("setPositivePrefix"), //
		jMethod<::jvoid(::java::lang::String)>("setPositiveSuffix"), //
		jMethod<::jvoid(::java::math::RoundingMode)>("setRoundingMode"), //
		jMethod<::java::lang::String()>("toLocalizedPattern"), //
		jMethod<::java::lang::String()>("toPattern"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto applyLocalizedPattern(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("applyLocalizedPattern")] != -1);
		return call<R>("applyLocalizedPattern", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto applyPattern(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("applyPattern")] != -1);
		return call<R>("applyPattern", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::StringBuffer, typename... Args>
	auto format(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("format")] != -1);
		return call<R>("format", forward<Args>(args)...);
	}

	template<typename R = ::java::text::AttributedCharacterIterator, typename... Args>
	auto formatToCharacterIterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("formatToCharacterIterator")] != -1);
		return call<R>("formatToCharacterIterator", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Currency, typename... Args>
	auto getCurrency(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCurrency")] != -1);
		return call<R>("getCurrency", forward<Args>(args)...);
	}

	template<typename R = ::java::text::DecimalFormatSymbols, typename... Args>
	auto getDecimalFormatSymbols(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDecimalFormatSymbols")] != -1);
		return call<R>("getDecimalFormatSymbols", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getGroupingSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getGroupingSize")] != -1);
		return call<R>("getGroupingSize", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaximumFractionDigits(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaximumFractionDigits")] != -1);
		return call<R>("getMaximumFractionDigits", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaximumIntegerDigits(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaximumIntegerDigits")] != -1);
		return call<R>("getMaximumIntegerDigits", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinimumFractionDigits(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinimumFractionDigits")] != -1);
		return call<R>("getMinimumFractionDigits", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinimumIntegerDigits(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinimumIntegerDigits")] != -1);
		return call<R>("getMinimumIntegerDigits", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMultiplier(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMultiplier")] != -1);
		return call<R>("getMultiplier", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNegativePrefix(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNegativePrefix")] != -1);
		return call<R>("getNegativePrefix", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNegativeSuffix(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNegativeSuffix")] != -1);
		return call<R>("getNegativeSuffix", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPositivePrefix(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPositivePrefix")] != -1);
		return call<R>("getPositivePrefix", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPositiveSuffix(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPositiveSuffix")] != -1);
		return call<R>("getPositiveSuffix", forward<Args>(args)...);
	}

	template<typename R = ::java::math::RoundingMode, typename... Args>
	auto getRoundingMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRoundingMode")] != -1);
		return call<R>("getRoundingMode", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDecimalSeparatorAlwaysShown(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isDecimalSeparatorAlwaysShown")] != -1);
		return call<R>("isDecimalSeparatorAlwaysShown", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isParseBigDecimal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isParseBigDecimal")] != -1);
		return call<R>("isParseBigDecimal", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Number, typename... Args>
	auto parse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("parse")] != -1);
		return call<R>("parse", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCurrency(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCurrency")] != -1);
		return call<R>("setCurrency", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDecimalFormatSymbols(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDecimalFormatSymbols")] != -1);
		return call<R>("setDecimalFormatSymbols", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDecimalSeparatorAlwaysShown(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDecimalSeparatorAlwaysShown")] != -1);
		return call<R>("setDecimalSeparatorAlwaysShown", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGroupingSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setGroupingSize")] != -1);
		return call<R>("setGroupingSize", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGroupingUsed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setGroupingUsed")] != -1);
		return call<R>("setGroupingUsed", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaximumFractionDigits(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMaximumFractionDigits")] != -1);
		return call<R>("setMaximumFractionDigits", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaximumIntegerDigits(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMaximumIntegerDigits")] != -1);
		return call<R>("setMaximumIntegerDigits", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMinimumFractionDigits(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMinimumFractionDigits")] != -1);
		return call<R>("setMinimumFractionDigits", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMinimumIntegerDigits(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMinimumIntegerDigits")] != -1);
		return call<R>("setMinimumIntegerDigits", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMultiplier(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMultiplier")] != -1);
		return call<R>("setMultiplier", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNegativePrefix(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setNegativePrefix")] != -1);
		return call<R>("setNegativePrefix", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNegativeSuffix(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setNegativeSuffix")] != -1);
		return call<R>("setNegativeSuffix", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setParseBigDecimal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setParseBigDecimal")] != -1);
		return call<R>("setParseBigDecimal", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPositivePrefix(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPositivePrefix")] != -1);
		return call<R>("setPositivePrefix", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPositiveSuffix(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPositiveSuffix")] != -1);
		return call<R>("setPositiveSuffix", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRoundingMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setRoundingMode")] != -1);
		return call<R>("setRoundingMode", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toLocalizedPattern(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toLocalizedPattern")] != -1);
		return call<R>("toLocalizedPattern", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toPattern(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toPattern")] != -1);
		return call<R>("toPattern", forward<Args>(args)...);
	}

};

#endif
