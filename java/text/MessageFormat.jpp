#ifndef java_text_MessageFormat_HPP
#define java_text_MessageFormat_HPP

#include "../../jfwd_decl.hpp"

class ::java::text::MessageFormat : public jObject<::java::text::MessageFormat, ::java::text::Format> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_text / "MessageFormat";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::util::Locale)>(), //
		jMethod<::jvoid(::java::lang::String)>("applyPattern"), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::StringBuffer(::java::lang::Object, ::java::lang::StringBuffer, ::java::text::FieldPosition)>("format"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::lang::Object *)>("format"), //
		jMethod<::java::lang::StringBuffer(::java::lang::Object *, ::java::lang::StringBuffer, ::java::text::FieldPosition)>("format"), //
		jMethod<::java::text::AttributedCharacterIterator(::java::lang::Object)>("formatToCharacterIterator"), //
		jMethod<::java::text::Format *()>("getFormats"), //
		jMethod<::java::text::Format *()>("getFormatsByArgumentIndex"), //
		jMethod<::java::util::Locale()>("getLocale"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::Object *(::java::lang::String)>("parse"), //
		jMethod<::java::lang::Object *(::java::lang::String, ::java::text::ParsePosition)>("parse"), //
		jMethod<::java::lang::Object(::java::lang::String, ::java::text::ParsePosition)>("parseObject"), //
		jMethod<::jvoid(::jint, ::java::text::Format)>("setFormat"), //
		jMethod<::jvoid(::jint, ::java::text::Format)>("setFormatByArgumentIndex"), //
		jMethod<::jvoid(::java::text::Format *)>("setFormats"), //
		jMethod<::jvoid(::java::text::Format *)>("setFormatsByArgumentIndex"), //
		jMethod<::jvoid(::java::util::Locale)>("setLocale"), //
		jMethod<::java::lang::String()>("toPattern"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto applyPattern(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("applyPattern")] != -1);
		return call<R>("applyPattern", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::StringBuffer, typename... Args>
	auto format(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("format")] != -1);
		return call<R>("format", forward<Args>(args)...);
	}

	template<typename R = ::java::text::AttributedCharacterIterator, typename... Args>
	auto formatToCharacterIterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("formatToCharacterIterator")] != -1);
		return call<R>("formatToCharacterIterator", forward<Args>(args)...);
	}

	template<typename R = ::java::text::Format *, typename... Args>
	auto getFormats(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFormats")] != -1);
		return call<R>("getFormats", forward<Args>(args)...);
	}

	template<typename R = ::java::text::Format *, typename... Args>
	auto getFormatsByArgumentIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFormatsByArgumentIndex")] != -1);
		return call<R>("getFormatsByArgumentIndex", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale, typename... Args>
	auto getLocale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLocale")] != -1);
		return call<R>("getLocale", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object *, typename... Args>
	auto parse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("parse")] != -1);
		return call<R>("parse", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto parseObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("parseObject")] != -1);
		return call<R>("parseObject", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFormat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFormat")] != -1);
		return call<R>("setFormat", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFormatByArgumentIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFormatByArgumentIndex")] != -1);
		return call<R>("setFormatByArgumentIndex", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFormats(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFormats")] != -1);
		return call<R>("setFormats", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFormatsByArgumentIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFormatsByArgumentIndex")] != -1);
		return call<R>("setFormatsByArgumentIndex", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLocale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLocale")] != -1);
		return call<R>("setLocale", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toPattern(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toPattern")] != -1);
		return call<R>("toPattern", forward<Args>(args)...);
	}

};

#endif
