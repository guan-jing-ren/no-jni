#ifndef java_text_Bidi_HPP
#define java_text_Bidi_HPP

#include "../../jfwd_decl.hpp"

class ::java::text::Bidi : public jObject<::java::text::Bidi, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_text / "Bidi";

	constexpr static Enume field_signatures{
		jField<::jint>("DIRECTION_DEFAULT_LEFT_TO_RIGHT"), //
		jField<::jint>("DIRECTION_DEFAULT_RIGHT_TO_LEFT"), //
		jField<::jint>("DIRECTION_LEFT_TO_RIGHT"), //
		jField<::jint>("DIRECTION_RIGHT_TO_LEFT"), //
	};

	template<typename F = ::jint>
	static auto DIRECTION_DEFAULT_LEFT_TO_RIGHT() {
		static_assert(field_signatures[jField<F>("DIRECTION_DEFAULT_LEFT_TO_RIGHT")] != -1);
		return sat<F>("DIRECTION_DEFAULT_LEFT_TO_RIGHT");
	}

	template<typename F = ::jint>
	static auto DIRECTION_DEFAULT_RIGHT_TO_LEFT() {
		static_assert(field_signatures[jField<F>("DIRECTION_DEFAULT_RIGHT_TO_LEFT")] != -1);
		return sat<F>("DIRECTION_DEFAULT_RIGHT_TO_LEFT");
	}

	template<typename F = ::jint>
	static auto DIRECTION_LEFT_TO_RIGHT() {
		static_assert(field_signatures[jField<F>("DIRECTION_LEFT_TO_RIGHT")] != -1);
		return sat<F>("DIRECTION_LEFT_TO_RIGHT");
	}

	template<typename F = ::jint>
	static auto DIRECTION_RIGHT_TO_LEFT() {
		static_assert(field_signatures[jField<F>("DIRECTION_RIGHT_TO_LEFT")] != -1);
		return sat<F>("DIRECTION_RIGHT_TO_LEFT");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::jint)>(), //
		jConstructor<::jvoid(::java::text::AttributedCharacterIterator)>(), //
		jConstructor<::jvoid(::jchar *, ::jint, ::jbyte *, ::jint, ::jint, ::jint)>(), //
		jMethod<::jboolean()>("baseIsLeftToRight"), //
		jMethod<::java::text::Bidi(::jint, ::jint)>("createLineBidi"), //
		jMethod<::jint()>("getBaseLevel"), //
		jMethod<::jint()>("getLength"), //
		jMethod<::jint(::jint)>("getLevelAt"), //
		jMethod<::jint()>("getRunCount"), //
		jMethod<::jint(::jint)>("getRunLevel"), //
		jMethod<::jint(::jint)>("getRunLimit"), //
		jMethod<::jint(::jint)>("getRunStart"), //
		jMethod<::jboolean()>("isLeftToRight"), //
		jMethod<::jboolean()>("isMixed"), //
		jMethod<::jboolean()>("isRightToLeft"), //
		jMethod<::jvoid(::jbyte *, ::jint, ::java::lang::Object *, ::jint, ::jint)>("reorderVisually"), //
		jMethod<::jboolean(::jchar *, ::jint, ::jint)>("requiresBidi"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto baseIsLeftToRight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("baseIsLeftToRight")] != -1);
		return call<R>("baseIsLeftToRight", std::forward<Args>(args)...);
	}

	template<typename R = ::java::text::Bidi, typename... Args>
	auto createLineBidi(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createLineBidi")] != -1);
		return call<R>("createLineBidi", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBaseLevel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBaseLevel")] != -1);
		return call<R>("getBaseLevel", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLength")] != -1);
		return call<R>("getLength", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLevelAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLevelAt")] != -1);
		return call<R>("getLevelAt", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRunCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRunCount")] != -1);
		return call<R>("getRunCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRunLevel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRunLevel")] != -1);
		return call<R>("getRunLevel", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRunLimit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRunLimit")] != -1);
		return call<R>("getRunLimit", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRunStart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRunStart")] != -1);
		return call<R>("getRunStart", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLeftToRight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLeftToRight")] != -1);
		return call<R>("isLeftToRight", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isMixed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isMixed")] != -1);
		return call<R>("isMixed", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRightToLeft(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isRightToLeft")] != -1);
		return call<R>("isRightToLeft", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto reorderVisually(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reorderVisually")] != -1);
		return scall<R>("reorderVisually", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto requiresBidi(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("requiresBidi")] != -1);
		return scall<R>("requiresBidi", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
