#ifndef java_text_Annotation_HPP
#define java_text_Annotation_HPP

#include "../../jfwd_decl.hpp"

class ::java::text::Annotation : public jObject<::java::text::Annotation, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_text / "Annotation";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::Object)>(), //
		jMethod<::java::lang::Object()>("getValue"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
