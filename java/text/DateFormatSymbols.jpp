#ifndef java_text_DateFormatSymbols_HPP
#define java_text_DateFormatSymbols_HPP

#include "../../jfwd_decl.hpp"

class ::java::text::DateFormatSymbols : public jObject<::java::text::DateFormatSymbols, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_text / "DateFormatSymbols";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::util::Locale)>(), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::String *()>("getAmPmStrings"), //
		jMethod<::java::util::Locale *()>("getAvailableLocales"), //
		jMethod<::java::lang::String *()>("getEras"), //
		jMethod<::java::text::DateFormatSymbols()>("getInstance"), //
		jMethod<::java::text::DateFormatSymbols(::java::util::Locale)>("getInstance"), //
		jMethod<::java::lang::String()>("getLocalPatternChars"), //
		jMethod<::java::lang::String *()>("getMonths"), //
		jMethod<::java::lang::String *()>("getShortMonths"), //
		jMethod<::java::lang::String *()>("getShortWeekdays"), //
		jMethod<::java::lang::String *()>("getWeekdays"), //
		jMethod<::java::lang::String **()>("getZoneStrings"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jvoid(::java::lang::String *)>("setAmPmStrings"), //
		jMethod<::jvoid(::java::lang::String *)>("setEras"), //
		jMethod<::jvoid(::java::lang::String)>("setLocalPatternChars"), //
		jMethod<::jvoid(::java::lang::String *)>("setMonths"), //
		jMethod<::jvoid(::java::lang::String *)>("setShortMonths"), //
		jMethod<::jvoid(::java::lang::String *)>("setShortWeekdays"), //
		jMethod<::jvoid(::java::lang::String *)>("setWeekdays"), //
		jMethod<::jvoid(::java::lang::String **)>("setZoneStrings"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getAmPmStrings(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAmPmStrings")] != -1);
		return call<R>("getAmPmStrings", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale *, typename... Args>
	static auto getAvailableLocales(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAvailableLocales")] != -1);
		return scall<R>("getAvailableLocales", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getEras(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEras")] != -1);
		return call<R>("getEras", std::forward<Args>(args)...);
	}

	template<typename R = ::java::text::DateFormatSymbols, typename... Args>
	static auto getInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInstance")] != -1);
		return scall<R>("getInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLocalPatternChars(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalPatternChars")] != -1);
		return call<R>("getLocalPatternChars", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getMonths(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMonths")] != -1);
		return call<R>("getMonths", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getShortMonths(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getShortMonths")] != -1);
		return call<R>("getShortMonths", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getShortWeekdays(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getShortWeekdays")] != -1);
		return call<R>("getShortWeekdays", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getWeekdays(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWeekdays")] != -1);
		return call<R>("getWeekdays", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String **, typename... Args>
	auto getZoneStrings(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getZoneStrings")] != -1);
		return call<R>("getZoneStrings", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAmPmStrings(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAmPmStrings")] != -1);
		return call<R>("setAmPmStrings", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEras(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEras")] != -1);
		return call<R>("setEras", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLocalPatternChars(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLocalPatternChars")] != -1);
		return call<R>("setLocalPatternChars", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMonths(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMonths")] != -1);
		return call<R>("setMonths", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setShortMonths(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setShortMonths")] != -1);
		return call<R>("setShortMonths", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setShortWeekdays(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setShortWeekdays")] != -1);
		return call<R>("setShortWeekdays", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWeekdays(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setWeekdays")] != -1);
		return call<R>("setWeekdays", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setZoneStrings(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setZoneStrings")] != -1);
		return call<R>("setZoneStrings", std::forward<Args>(args)...);
	}

};

#endif
