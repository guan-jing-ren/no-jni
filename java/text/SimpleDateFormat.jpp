#ifndef java_text_SimpleDateFormat_HPP
#define java_text_SimpleDateFormat_HPP

#include "../../jfwd_decl.hpp"

class ::java::text::SimpleDateFormat : public jObject<::java::text::SimpleDateFormat, ::java::text::DateFormat> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_text / "SimpleDateFormat";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::text::DateFormatSymbols)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::util::Locale)>(), //
		jMethod<::jvoid(::java::lang::String)>("applyLocalizedPattern"), //
		jMethod<::jvoid(::java::lang::String)>("applyPattern"), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::StringBuffer(::java::util::Date, ::java::lang::StringBuffer, ::java::text::FieldPosition)>("format"), //
		jMethod<::java::text::AttributedCharacterIterator(::java::lang::Object)>("formatToCharacterIterator"), //
		jMethod<::java::util::Date()>("get2DigitYearStart"), //
		jMethod<::java::text::DateFormatSymbols()>("getDateFormatSymbols"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::util::Date(::java::lang::String, ::java::text::ParsePosition)>("parse"), //
		jMethod<::jvoid(::java::util::Date)>("set2DigitYearStart"), //
		jMethod<::jvoid(::java::text::DateFormatSymbols)>("setDateFormatSymbols"), //
		jMethod<::java::lang::String()>("toLocalizedPattern"), //
		jMethod<::java::lang::String()>("toPattern"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto applyLocalizedPattern(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("applyLocalizedPattern")] != -1);
		return call<R>("applyLocalizedPattern", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto applyPattern(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("applyPattern")] != -1);
		return call<R>("applyPattern", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::StringBuffer, typename... Args>
	auto format(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("format")] != -1);
		return call<R>("format", forward<Args>(args)...);
	}

	template<typename R = ::java::text::AttributedCharacterIterator, typename... Args>
	auto formatToCharacterIterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("formatToCharacterIterator")] != -1);
		return call<R>("formatToCharacterIterator", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Date, typename... Args>
	auto get2DigitYearStart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("get2DigitYearStart")] != -1);
		return call<R>("get2DigitYearStart", forward<Args>(args)...);
	}

	template<typename R = ::java::text::DateFormatSymbols, typename... Args>
	auto getDateFormatSymbols(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDateFormatSymbols")] != -1);
		return call<R>("getDateFormatSymbols", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Date, typename... Args>
	auto parse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("parse")] != -1);
		return call<R>("parse", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set2DigitYearStart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("set2DigitYearStart")] != -1);
		return call<R>("set2DigitYearStart", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDateFormatSymbols(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDateFormatSymbols")] != -1);
		return call<R>("setDateFormatSymbols", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toLocalizedPattern(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toLocalizedPattern")] != -1);
		return call<R>("toLocalizedPattern", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toPattern(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toPattern")] != -1);
		return call<R>("toPattern", forward<Args>(args)...);
	}

};

#endif
