#ifndef java_text_spi_DateFormatProvider_HPP
#define java_text_spi_DateFormatProvider_HPP

#include "../../../jfwd_decl.hpp"

class ::java::text::spi::DateFormatProvider : public jObject<::java::text::spi::DateFormatProvider, ::java::util::spi::LocaleServiceProvider> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::java_text_spi / "DateFormatProvider";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::text::DateFormat(::jint, ::java::util::Locale)>("getDateInstance"), //
		jMethod<::java::text::DateFormat(::jint, ::jint, ::java::util::Locale)>("getDateTimeInstance"), //
		jMethod<::java::text::DateFormat(::jint, ::java::util::Locale)>("getTimeInstance"), //
	};

	template<typename R = ::java::text::DateFormat, typename... Args>
	auto getDateInstance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDateInstance")] != -1);
		return call<R>("getDateInstance", forward<Args>(args)...);
	}

	template<typename R = ::java::text::DateFormat, typename... Args>
	auto getDateTimeInstance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDateTimeInstance")] != -1);
		return call<R>("getDateTimeInstance", forward<Args>(args)...);
	}

	template<typename R = ::java::text::DateFormat, typename... Args>
	auto getTimeInstance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTimeInstance")] != -1);
		return call<R>("getTimeInstance", forward<Args>(args)...);
	}

};

#endif
