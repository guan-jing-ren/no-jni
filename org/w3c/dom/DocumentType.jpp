#ifndef org_w3c_dom_DocumentType_HPP
#define org_w3c_dom_DocumentType_HPP

#include "../../../jfwd_decl.hpp"

class ::org::w3c::dom::DocumentType : public jObject<::org::w3c::dom::DocumentType, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom / "DocumentType";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::org::w3c::dom::NamedNodeMap()>("getEntities"), //
		jMethod<::java::lang::String()>("getInternalSubset"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::org::w3c::dom::NamedNodeMap()>("getNotations"), //
		jMethod<::java::lang::String()>("getPublicId"), //
		jMethod<::java::lang::String()>("getSystemId"), //
	};

	template<typename R = ::org::w3c::dom::NamedNodeMap, typename... Args>
	auto getEntities(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEntities")] != -1);
		return call<R>("getEntities", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getInternalSubset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInternalSubset")] != -1);
		return call<R>("getInternalSubset", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::NamedNodeMap, typename... Args>
	auto getNotations(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNotations")] != -1);
		return call<R>("getNotations", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPublicId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPublicId")] != -1);
		return call<R>("getPublicId", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSystemId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSystemId")] != -1);
		return call<R>("getSystemId", std::forward<Args>(args)...);
	}

};

#endif
