#ifndef org_w3c_dom_css_CSS2Properties_HPP
#define org_w3c_dom_css_CSS2Properties_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::css::CSS2Properties : public jObject<::org::w3c::dom::css::CSS2Properties, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_css / "CSS2Properties";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getAzimuth"), //
		jMethod<::java::lang::String()>("getBackground"), //
		jMethod<::java::lang::String()>("getBackgroundAttachment"), //
		jMethod<::java::lang::String()>("getBackgroundColor"), //
		jMethod<::java::lang::String()>("getBackgroundImage"), //
		jMethod<::java::lang::String()>("getBackgroundPosition"), //
		jMethod<::java::lang::String()>("getBackgroundRepeat"), //
		jMethod<::java::lang::String()>("getBorder"), //
		jMethod<::java::lang::String()>("getBorderBottom"), //
		jMethod<::java::lang::String()>("getBorderBottomColor"), //
		jMethod<::java::lang::String()>("getBorderBottomStyle"), //
		jMethod<::java::lang::String()>("getBorderBottomWidth"), //
		jMethod<::java::lang::String()>("getBorderCollapse"), //
		jMethod<::java::lang::String()>("getBorderColor"), //
		jMethod<::java::lang::String()>("getBorderLeft"), //
		jMethod<::java::lang::String()>("getBorderLeftColor"), //
		jMethod<::java::lang::String()>("getBorderLeftStyle"), //
		jMethod<::java::lang::String()>("getBorderLeftWidth"), //
		jMethod<::java::lang::String()>("getBorderRight"), //
		jMethod<::java::lang::String()>("getBorderRightColor"), //
		jMethod<::java::lang::String()>("getBorderRightStyle"), //
		jMethod<::java::lang::String()>("getBorderRightWidth"), //
		jMethod<::java::lang::String()>("getBorderSpacing"), //
		jMethod<::java::lang::String()>("getBorderStyle"), //
		jMethod<::java::lang::String()>("getBorderTop"), //
		jMethod<::java::lang::String()>("getBorderTopColor"), //
		jMethod<::java::lang::String()>("getBorderTopStyle"), //
		jMethod<::java::lang::String()>("getBorderTopWidth"), //
		jMethod<::java::lang::String()>("getBorderWidth"), //
		jMethod<::java::lang::String()>("getBottom"), //
		jMethod<::java::lang::String()>("getCaptionSide"), //
		jMethod<::java::lang::String()>("getClear"), //
		jMethod<::java::lang::String()>("getClip"), //
		jMethod<::java::lang::String()>("getColor"), //
		jMethod<::java::lang::String()>("getContent"), //
		jMethod<::java::lang::String()>("getCounterIncrement"), //
		jMethod<::java::lang::String()>("getCounterReset"), //
		jMethod<::java::lang::String()>("getCssFloat"), //
		jMethod<::java::lang::String()>("getCue"), //
		jMethod<::java::lang::String()>("getCueAfter"), //
		jMethod<::java::lang::String()>("getCueBefore"), //
		jMethod<::java::lang::String()>("getCursor"), //
		jMethod<::java::lang::String()>("getDirection"), //
		jMethod<::java::lang::String()>("getDisplay"), //
		jMethod<::java::lang::String()>("getElevation"), //
		jMethod<::java::lang::String()>("getEmptyCells"), //
		jMethod<::java::lang::String()>("getFont"), //
		jMethod<::java::lang::String()>("getFontFamily"), //
		jMethod<::java::lang::String()>("getFontSize"), //
		jMethod<::java::lang::String()>("getFontSizeAdjust"), //
		jMethod<::java::lang::String()>("getFontStretch"), //
		jMethod<::java::lang::String()>("getFontStyle"), //
		jMethod<::java::lang::String()>("getFontVariant"), //
		jMethod<::java::lang::String()>("getFontWeight"), //
		jMethod<::java::lang::String()>("getHeight"), //
		jMethod<::java::lang::String()>("getLeft"), //
		jMethod<::java::lang::String()>("getLetterSpacing"), //
		jMethod<::java::lang::String()>("getLineHeight"), //
		jMethod<::java::lang::String()>("getListStyle"), //
		jMethod<::java::lang::String()>("getListStyleImage"), //
		jMethod<::java::lang::String()>("getListStylePosition"), //
		jMethod<::java::lang::String()>("getListStyleType"), //
		jMethod<::java::lang::String()>("getMargin"), //
		jMethod<::java::lang::String()>("getMarginBottom"), //
		jMethod<::java::lang::String()>("getMarginLeft"), //
		jMethod<::java::lang::String()>("getMarginRight"), //
		jMethod<::java::lang::String()>("getMarginTop"), //
		jMethod<::java::lang::String()>("getMarkerOffset"), //
		jMethod<::java::lang::String()>("getMarks"), //
		jMethod<::java::lang::String()>("getMaxHeight"), //
		jMethod<::java::lang::String()>("getMaxWidth"), //
		jMethod<::java::lang::String()>("getMinHeight"), //
		jMethod<::java::lang::String()>("getMinWidth"), //
		jMethod<::java::lang::String()>("getOrphans"), //
		jMethod<::java::lang::String()>("getOutline"), //
		jMethod<::java::lang::String()>("getOutlineColor"), //
		jMethod<::java::lang::String()>("getOutlineStyle"), //
		jMethod<::java::lang::String()>("getOutlineWidth"), //
		jMethod<::java::lang::String()>("getOverflow"), //
		jMethod<::java::lang::String()>("getPadding"), //
		jMethod<::java::lang::String()>("getPaddingBottom"), //
		jMethod<::java::lang::String()>("getPaddingLeft"), //
		jMethod<::java::lang::String()>("getPaddingRight"), //
		jMethod<::java::lang::String()>("getPaddingTop"), //
		jMethod<::java::lang::String()>("getPage"), //
		jMethod<::java::lang::String()>("getPageBreakAfter"), //
		jMethod<::java::lang::String()>("getPageBreakBefore"), //
		jMethod<::java::lang::String()>("getPageBreakInside"), //
		jMethod<::java::lang::String()>("getPause"), //
		jMethod<::java::lang::String()>("getPauseAfter"), //
		jMethod<::java::lang::String()>("getPauseBefore"), //
		jMethod<::java::lang::String()>("getPitch"), //
		jMethod<::java::lang::String()>("getPitchRange"), //
		jMethod<::java::lang::String()>("getPlayDuring"), //
		jMethod<::java::lang::String()>("getPosition"), //
		jMethod<::java::lang::String()>("getQuotes"), //
		jMethod<::java::lang::String()>("getRichness"), //
		jMethod<::java::lang::String()>("getRight"), //
		jMethod<::java::lang::String()>("getSize"), //
		jMethod<::java::lang::String()>("getSpeak"), //
		jMethod<::java::lang::String()>("getSpeakHeader"), //
		jMethod<::java::lang::String()>("getSpeakNumeral"), //
		jMethod<::java::lang::String()>("getSpeakPunctuation"), //
		jMethod<::java::lang::String()>("getSpeechRate"), //
		jMethod<::java::lang::String()>("getStress"), //
		jMethod<::java::lang::String()>("getTableLayout"), //
		jMethod<::java::lang::String()>("getTextAlign"), //
		jMethod<::java::lang::String()>("getTextDecoration"), //
		jMethod<::java::lang::String()>("getTextIndent"), //
		jMethod<::java::lang::String()>("getTextShadow"), //
		jMethod<::java::lang::String()>("getTextTransform"), //
		jMethod<::java::lang::String()>("getTop"), //
		jMethod<::java::lang::String()>("getUnicodeBidi"), //
		jMethod<::java::lang::String()>("getVerticalAlign"), //
		jMethod<::java::lang::String()>("getVisibility"), //
		jMethod<::java::lang::String()>("getVoiceFamily"), //
		jMethod<::java::lang::String()>("getVolume"), //
		jMethod<::java::lang::String()>("getWhiteSpace"), //
		jMethod<::java::lang::String()>("getWidows"), //
		jMethod<::java::lang::String()>("getWidth"), //
		jMethod<::java::lang::String()>("getWordSpacing"), //
		jMethod<::java::lang::String()>("getZIndex"), //
		jMethod<::jvoid(::java::lang::String)>("setAzimuth"), //
		jMethod<::jvoid(::java::lang::String)>("setBackground"), //
		jMethod<::jvoid(::java::lang::String)>("setBackgroundAttachment"), //
		jMethod<::jvoid(::java::lang::String)>("setBackgroundColor"), //
		jMethod<::jvoid(::java::lang::String)>("setBackgroundImage"), //
		jMethod<::jvoid(::java::lang::String)>("setBackgroundPosition"), //
		jMethod<::jvoid(::java::lang::String)>("setBackgroundRepeat"), //
		jMethod<::jvoid(::java::lang::String)>("setBorder"), //
		jMethod<::jvoid(::java::lang::String)>("setBorderBottom"), //
		jMethod<::jvoid(::java::lang::String)>("setBorderBottomColor"), //
		jMethod<::jvoid(::java::lang::String)>("setBorderBottomStyle"), //
		jMethod<::jvoid(::java::lang::String)>("setBorderBottomWidth"), //
		jMethod<::jvoid(::java::lang::String)>("setBorderCollapse"), //
		jMethod<::jvoid(::java::lang::String)>("setBorderColor"), //
		jMethod<::jvoid(::java::lang::String)>("setBorderLeft"), //
		jMethod<::jvoid(::java::lang::String)>("setBorderLeftColor"), //
		jMethod<::jvoid(::java::lang::String)>("setBorderLeftStyle"), //
		jMethod<::jvoid(::java::lang::String)>("setBorderLeftWidth"), //
		jMethod<::jvoid(::java::lang::String)>("setBorderRight"), //
		jMethod<::jvoid(::java::lang::String)>("setBorderRightColor"), //
		jMethod<::jvoid(::java::lang::String)>("setBorderRightStyle"), //
		jMethod<::jvoid(::java::lang::String)>("setBorderRightWidth"), //
		jMethod<::jvoid(::java::lang::String)>("setBorderSpacing"), //
		jMethod<::jvoid(::java::lang::String)>("setBorderStyle"), //
		jMethod<::jvoid(::java::lang::String)>("setBorderTop"), //
		jMethod<::jvoid(::java::lang::String)>("setBorderTopColor"), //
		jMethod<::jvoid(::java::lang::String)>("setBorderTopStyle"), //
		jMethod<::jvoid(::java::lang::String)>("setBorderTopWidth"), //
		jMethod<::jvoid(::java::lang::String)>("setBorderWidth"), //
		jMethod<::jvoid(::java::lang::String)>("setBottom"), //
		jMethod<::jvoid(::java::lang::String)>("setCaptionSide"), //
		jMethod<::jvoid(::java::lang::String)>("setClear"), //
		jMethod<::jvoid(::java::lang::String)>("setClip"), //
		jMethod<::jvoid(::java::lang::String)>("setColor"), //
		jMethod<::jvoid(::java::lang::String)>("setContent"), //
		jMethod<::jvoid(::java::lang::String)>("setCounterIncrement"), //
		jMethod<::jvoid(::java::lang::String)>("setCounterReset"), //
		jMethod<::jvoid(::java::lang::String)>("setCssFloat"), //
		jMethod<::jvoid(::java::lang::String)>("setCue"), //
		jMethod<::jvoid(::java::lang::String)>("setCueAfter"), //
		jMethod<::jvoid(::java::lang::String)>("setCueBefore"), //
		jMethod<::jvoid(::java::lang::String)>("setCursor"), //
		jMethod<::jvoid(::java::lang::String)>("setDirection"), //
		jMethod<::jvoid(::java::lang::String)>("setDisplay"), //
		jMethod<::jvoid(::java::lang::String)>("setElevation"), //
		jMethod<::jvoid(::java::lang::String)>("setEmptyCells"), //
		jMethod<::jvoid(::java::lang::String)>("setFont"), //
		jMethod<::jvoid(::java::lang::String)>("setFontFamily"), //
		jMethod<::jvoid(::java::lang::String)>("setFontSize"), //
		jMethod<::jvoid(::java::lang::String)>("setFontSizeAdjust"), //
		jMethod<::jvoid(::java::lang::String)>("setFontStretch"), //
		jMethod<::jvoid(::java::lang::String)>("setFontStyle"), //
		jMethod<::jvoid(::java::lang::String)>("setFontVariant"), //
		jMethod<::jvoid(::java::lang::String)>("setFontWeight"), //
		jMethod<::jvoid(::java::lang::String)>("setHeight"), //
		jMethod<::jvoid(::java::lang::String)>("setLeft"), //
		jMethod<::jvoid(::java::lang::String)>("setLetterSpacing"), //
		jMethod<::jvoid(::java::lang::String)>("setLineHeight"), //
		jMethod<::jvoid(::java::lang::String)>("setListStyle"), //
		jMethod<::jvoid(::java::lang::String)>("setListStyleImage"), //
		jMethod<::jvoid(::java::lang::String)>("setListStylePosition"), //
		jMethod<::jvoid(::java::lang::String)>("setListStyleType"), //
		jMethod<::jvoid(::java::lang::String)>("setMargin"), //
		jMethod<::jvoid(::java::lang::String)>("setMarginBottom"), //
		jMethod<::jvoid(::java::lang::String)>("setMarginLeft"), //
		jMethod<::jvoid(::java::lang::String)>("setMarginRight"), //
		jMethod<::jvoid(::java::lang::String)>("setMarginTop"), //
		jMethod<::jvoid(::java::lang::String)>("setMarkerOffset"), //
		jMethod<::jvoid(::java::lang::String)>("setMarks"), //
		jMethod<::jvoid(::java::lang::String)>("setMaxHeight"), //
		jMethod<::jvoid(::java::lang::String)>("setMaxWidth"), //
		jMethod<::jvoid(::java::lang::String)>("setMinHeight"), //
		jMethod<::jvoid(::java::lang::String)>("setMinWidth"), //
		jMethod<::jvoid(::java::lang::String)>("setOrphans"), //
		jMethod<::jvoid(::java::lang::String)>("setOutline"), //
		jMethod<::jvoid(::java::lang::String)>("setOutlineColor"), //
		jMethod<::jvoid(::java::lang::String)>("setOutlineStyle"), //
		jMethod<::jvoid(::java::lang::String)>("setOutlineWidth"), //
		jMethod<::jvoid(::java::lang::String)>("setOverflow"), //
		jMethod<::jvoid(::java::lang::String)>("setPadding"), //
		jMethod<::jvoid(::java::lang::String)>("setPaddingBottom"), //
		jMethod<::jvoid(::java::lang::String)>("setPaddingLeft"), //
		jMethod<::jvoid(::java::lang::String)>("setPaddingRight"), //
		jMethod<::jvoid(::java::lang::String)>("setPaddingTop"), //
		jMethod<::jvoid(::java::lang::String)>("setPage"), //
		jMethod<::jvoid(::java::lang::String)>("setPageBreakAfter"), //
		jMethod<::jvoid(::java::lang::String)>("setPageBreakBefore"), //
		jMethod<::jvoid(::java::lang::String)>("setPageBreakInside"), //
		jMethod<::jvoid(::java::lang::String)>("setPause"), //
		jMethod<::jvoid(::java::lang::String)>("setPauseAfter"), //
		jMethod<::jvoid(::java::lang::String)>("setPauseBefore"), //
		jMethod<::jvoid(::java::lang::String)>("setPitch"), //
		jMethod<::jvoid(::java::lang::String)>("setPitchRange"), //
		jMethod<::jvoid(::java::lang::String)>("setPlayDuring"), //
		jMethod<::jvoid(::java::lang::String)>("setPosition"), //
		jMethod<::jvoid(::java::lang::String)>("setQuotes"), //
		jMethod<::jvoid(::java::lang::String)>("setRichness"), //
		jMethod<::jvoid(::java::lang::String)>("setRight"), //
		jMethod<::jvoid(::java::lang::String)>("setSize"), //
		jMethod<::jvoid(::java::lang::String)>("setSpeak"), //
		jMethod<::jvoid(::java::lang::String)>("setSpeakHeader"), //
		jMethod<::jvoid(::java::lang::String)>("setSpeakNumeral"), //
		jMethod<::jvoid(::java::lang::String)>("setSpeakPunctuation"), //
		jMethod<::jvoid(::java::lang::String)>("setSpeechRate"), //
		jMethod<::jvoid(::java::lang::String)>("setStress"), //
		jMethod<::jvoid(::java::lang::String)>("setTableLayout"), //
		jMethod<::jvoid(::java::lang::String)>("setTextAlign"), //
		jMethod<::jvoid(::java::lang::String)>("setTextDecoration"), //
		jMethod<::jvoid(::java::lang::String)>("setTextIndent"), //
		jMethod<::jvoid(::java::lang::String)>("setTextShadow"), //
		jMethod<::jvoid(::java::lang::String)>("setTextTransform"), //
		jMethod<::jvoid(::java::lang::String)>("setTop"), //
		jMethod<::jvoid(::java::lang::String)>("setUnicodeBidi"), //
		jMethod<::jvoid(::java::lang::String)>("setVerticalAlign"), //
		jMethod<::jvoid(::java::lang::String)>("setVisibility"), //
		jMethod<::jvoid(::java::lang::String)>("setVoiceFamily"), //
		jMethod<::jvoid(::java::lang::String)>("setVolume"), //
		jMethod<::jvoid(::java::lang::String)>("setWhiteSpace"), //
		jMethod<::jvoid(::java::lang::String)>("setWidows"), //
		jMethod<::jvoid(::java::lang::String)>("setWidth"), //
		jMethod<::jvoid(::java::lang::String)>("setWordSpacing"), //
		jMethod<::jvoid(::java::lang::String)>("setZIndex"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getAzimuth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAzimuth")] != -1);
		return call<R>("getAzimuth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBackground")] != -1);
		return call<R>("getBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBackgroundAttachment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBackgroundAttachment")] != -1);
		return call<R>("getBackgroundAttachment", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBackgroundColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBackgroundColor")] != -1);
		return call<R>("getBackgroundColor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBackgroundImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBackgroundImage")] != -1);
		return call<R>("getBackgroundImage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBackgroundPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBackgroundPosition")] != -1);
		return call<R>("getBackgroundPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBackgroundRepeat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBackgroundRepeat")] != -1);
		return call<R>("getBackgroundRepeat", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorder")] != -1);
		return call<R>("getBorder", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBorderBottom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorderBottom")] != -1);
		return call<R>("getBorderBottom", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBorderBottomColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorderBottomColor")] != -1);
		return call<R>("getBorderBottomColor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBorderBottomStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorderBottomStyle")] != -1);
		return call<R>("getBorderBottomStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBorderBottomWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorderBottomWidth")] != -1);
		return call<R>("getBorderBottomWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBorderCollapse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorderCollapse")] != -1);
		return call<R>("getBorderCollapse", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBorderColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorderColor")] != -1);
		return call<R>("getBorderColor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBorderLeft(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorderLeft")] != -1);
		return call<R>("getBorderLeft", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBorderLeftColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorderLeftColor")] != -1);
		return call<R>("getBorderLeftColor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBorderLeftStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorderLeftStyle")] != -1);
		return call<R>("getBorderLeftStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBorderLeftWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorderLeftWidth")] != -1);
		return call<R>("getBorderLeftWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBorderRight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorderRight")] != -1);
		return call<R>("getBorderRight", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBorderRightColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorderRightColor")] != -1);
		return call<R>("getBorderRightColor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBorderRightStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorderRightStyle")] != -1);
		return call<R>("getBorderRightStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBorderRightWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorderRightWidth")] != -1);
		return call<R>("getBorderRightWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBorderSpacing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorderSpacing")] != -1);
		return call<R>("getBorderSpacing", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBorderStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorderStyle")] != -1);
		return call<R>("getBorderStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBorderTop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorderTop")] != -1);
		return call<R>("getBorderTop", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBorderTopColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorderTopColor")] != -1);
		return call<R>("getBorderTopColor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBorderTopStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorderTopStyle")] != -1);
		return call<R>("getBorderTopStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBorderTopWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorderTopWidth")] != -1);
		return call<R>("getBorderTopWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBorderWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorderWidth")] != -1);
		return call<R>("getBorderWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBottom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBottom")] != -1);
		return call<R>("getBottom", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCaptionSide(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCaptionSide")] != -1);
		return call<R>("getCaptionSide", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getClear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClear")] != -1);
		return call<R>("getClear", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getClip(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClip")] != -1);
		return call<R>("getClip", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColor")] != -1);
		return call<R>("getColor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getContent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContent")] != -1);
		return call<R>("getContent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCounterIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCounterIncrement")] != -1);
		return call<R>("getCounterIncrement", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCounterReset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCounterReset")] != -1);
		return call<R>("getCounterReset", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCssFloat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCssFloat")] != -1);
		return call<R>("getCssFloat", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCue")] != -1);
		return call<R>("getCue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCueAfter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCueAfter")] != -1);
		return call<R>("getCueAfter", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCueBefore(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCueBefore")] != -1);
		return call<R>("getCueBefore", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCursor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCursor")] != -1);
		return call<R>("getCursor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDirection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDirection")] != -1);
		return call<R>("getDirection", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDisplay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisplay")] != -1);
		return call<R>("getDisplay", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getElevation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getElevation")] != -1);
		return call<R>("getElevation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getEmptyCells(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEmptyCells")] != -1);
		return call<R>("getEmptyCells", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFont")] != -1);
		return call<R>("getFont", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFontFamily(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFontFamily")] != -1);
		return call<R>("getFontFamily", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFontSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFontSize")] != -1);
		return call<R>("getFontSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFontSizeAdjust(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFontSizeAdjust")] != -1);
		return call<R>("getFontSizeAdjust", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFontStretch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFontStretch")] != -1);
		return call<R>("getFontStretch", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFontStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFontStyle")] != -1);
		return call<R>("getFontStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFontVariant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFontVariant")] != -1);
		return call<R>("getFontVariant", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFontWeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFontWeight")] != -1);
		return call<R>("getFontWeight", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeight")] != -1);
		return call<R>("getHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLeft(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLeft")] != -1);
		return call<R>("getLeft", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLetterSpacing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLetterSpacing")] != -1);
		return call<R>("getLetterSpacing", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLineHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineHeight")] != -1);
		return call<R>("getLineHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getListStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getListStyle")] != -1);
		return call<R>("getListStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getListStyleImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getListStyleImage")] != -1);
		return call<R>("getListStyleImage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getListStylePosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getListStylePosition")] != -1);
		return call<R>("getListStylePosition", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getListStyleType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getListStyleType")] != -1);
		return call<R>("getListStyleType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMargin(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMargin")] != -1);
		return call<R>("getMargin", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMarginBottom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMarginBottom")] != -1);
		return call<R>("getMarginBottom", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMarginLeft(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMarginLeft")] != -1);
		return call<R>("getMarginLeft", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMarginRight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMarginRight")] != -1);
		return call<R>("getMarginRight", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMarginTop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMarginTop")] != -1);
		return call<R>("getMarginTop", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMarkerOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMarkerOffset")] != -1);
		return call<R>("getMarkerOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMarks(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMarks")] != -1);
		return call<R>("getMarks", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMaxHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaxHeight")] != -1);
		return call<R>("getMaxHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMaxWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaxWidth")] != -1);
		return call<R>("getMaxWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMinHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinHeight")] != -1);
		return call<R>("getMinHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMinWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinWidth")] != -1);
		return call<R>("getMinWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getOrphans(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOrphans")] != -1);
		return call<R>("getOrphans", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getOutline(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOutline")] != -1);
		return call<R>("getOutline", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getOutlineColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOutlineColor")] != -1);
		return call<R>("getOutlineColor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getOutlineStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOutlineStyle")] != -1);
		return call<R>("getOutlineStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getOutlineWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOutlineWidth")] != -1);
		return call<R>("getOutlineWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getOverflow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOverflow")] != -1);
		return call<R>("getOverflow", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPadding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPadding")] != -1);
		return call<R>("getPadding", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPaddingBottom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPaddingBottom")] != -1);
		return call<R>("getPaddingBottom", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPaddingLeft(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPaddingLeft")] != -1);
		return call<R>("getPaddingLeft", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPaddingRight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPaddingRight")] != -1);
		return call<R>("getPaddingRight", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPaddingTop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPaddingTop")] != -1);
		return call<R>("getPaddingTop", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPage")] != -1);
		return call<R>("getPage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPageBreakAfter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPageBreakAfter")] != -1);
		return call<R>("getPageBreakAfter", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPageBreakBefore(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPageBreakBefore")] != -1);
		return call<R>("getPageBreakBefore", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPageBreakInside(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPageBreakInside")] != -1);
		return call<R>("getPageBreakInside", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPause(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPause")] != -1);
		return call<R>("getPause", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPauseAfter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPauseAfter")] != -1);
		return call<R>("getPauseAfter", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPauseBefore(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPauseBefore")] != -1);
		return call<R>("getPauseBefore", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPitch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPitch")] != -1);
		return call<R>("getPitch", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPitchRange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPitchRange")] != -1);
		return call<R>("getPitchRange", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPlayDuring(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPlayDuring")] != -1);
		return call<R>("getPlayDuring", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPosition")] != -1);
		return call<R>("getPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getQuotes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getQuotes")] != -1);
		return call<R>("getQuotes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRichness(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRichness")] != -1);
		return call<R>("getRichness", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRight")] != -1);
		return call<R>("getRight", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return call<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSpeak(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSpeak")] != -1);
		return call<R>("getSpeak", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSpeakHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSpeakHeader")] != -1);
		return call<R>("getSpeakHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSpeakNumeral(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSpeakNumeral")] != -1);
		return call<R>("getSpeakNumeral", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSpeakPunctuation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSpeakPunctuation")] != -1);
		return call<R>("getSpeakPunctuation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSpeechRate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSpeechRate")] != -1);
		return call<R>("getSpeechRate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getStress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStress")] != -1);
		return call<R>("getStress", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTableLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTableLayout")] != -1);
		return call<R>("getTableLayout", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTextAlign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextAlign")] != -1);
		return call<R>("getTextAlign", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTextDecoration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextDecoration")] != -1);
		return call<R>("getTextDecoration", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTextIndent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextIndent")] != -1);
		return call<R>("getTextIndent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTextShadow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextShadow")] != -1);
		return call<R>("getTextShadow", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTextTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextTransform")] != -1);
		return call<R>("getTextTransform", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTop")] != -1);
		return call<R>("getTop", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUnicodeBidi(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUnicodeBidi")] != -1);
		return call<R>("getUnicodeBidi", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getVerticalAlign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVerticalAlign")] != -1);
		return call<R>("getVerticalAlign", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getVisibility(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVisibility")] != -1);
		return call<R>("getVisibility", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getVoiceFamily(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVoiceFamily")] != -1);
		return call<R>("getVoiceFamily", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getVolume(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVolume")] != -1);
		return call<R>("getVolume", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getWhiteSpace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWhiteSpace")] != -1);
		return call<R>("getWhiteSpace", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getWidows(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWidows")] != -1);
		return call<R>("getWidows", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getWordSpacing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWordSpacing")] != -1);
		return call<R>("getWordSpacing", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getZIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getZIndex")] != -1);
		return call<R>("getZIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAzimuth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAzimuth")] != -1);
		return call<R>("setAzimuth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBackground")] != -1);
		return call<R>("setBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackgroundAttachment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBackgroundAttachment")] != -1);
		return call<R>("setBackgroundAttachment", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackgroundColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBackgroundColor")] != -1);
		return call<R>("setBackgroundColor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackgroundImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBackgroundImage")] != -1);
		return call<R>("setBackgroundImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackgroundPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBackgroundPosition")] != -1);
		return call<R>("setBackgroundPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackgroundRepeat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBackgroundRepeat")] != -1);
		return call<R>("setBackgroundRepeat", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBorder")] != -1);
		return call<R>("setBorder", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBorderBottom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBorderBottom")] != -1);
		return call<R>("setBorderBottom", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBorderBottomColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBorderBottomColor")] != -1);
		return call<R>("setBorderBottomColor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBorderBottomStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBorderBottomStyle")] != -1);
		return call<R>("setBorderBottomStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBorderBottomWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBorderBottomWidth")] != -1);
		return call<R>("setBorderBottomWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBorderCollapse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBorderCollapse")] != -1);
		return call<R>("setBorderCollapse", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBorderColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBorderColor")] != -1);
		return call<R>("setBorderColor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBorderLeft(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBorderLeft")] != -1);
		return call<R>("setBorderLeft", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBorderLeftColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBorderLeftColor")] != -1);
		return call<R>("setBorderLeftColor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBorderLeftStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBorderLeftStyle")] != -1);
		return call<R>("setBorderLeftStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBorderLeftWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBorderLeftWidth")] != -1);
		return call<R>("setBorderLeftWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBorderRight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBorderRight")] != -1);
		return call<R>("setBorderRight", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBorderRightColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBorderRightColor")] != -1);
		return call<R>("setBorderRightColor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBorderRightStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBorderRightStyle")] != -1);
		return call<R>("setBorderRightStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBorderRightWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBorderRightWidth")] != -1);
		return call<R>("setBorderRightWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBorderSpacing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBorderSpacing")] != -1);
		return call<R>("setBorderSpacing", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBorderStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBorderStyle")] != -1);
		return call<R>("setBorderStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBorderTop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBorderTop")] != -1);
		return call<R>("setBorderTop", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBorderTopColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBorderTopColor")] != -1);
		return call<R>("setBorderTopColor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBorderTopStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBorderTopStyle")] != -1);
		return call<R>("setBorderTopStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBorderTopWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBorderTopWidth")] != -1);
		return call<R>("setBorderTopWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBorderWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBorderWidth")] != -1);
		return call<R>("setBorderWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBottom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBottom")] != -1);
		return call<R>("setBottom", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCaptionSide(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCaptionSide")] != -1);
		return call<R>("setCaptionSide", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setClear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setClear")] != -1);
		return call<R>("setClear", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setClip(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setClip")] != -1);
		return call<R>("setClip", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setColor")] != -1);
		return call<R>("setColor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setContent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setContent")] != -1);
		return call<R>("setContent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCounterIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCounterIncrement")] != -1);
		return call<R>("setCounterIncrement", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCounterReset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCounterReset")] != -1);
		return call<R>("setCounterReset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCssFloat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCssFloat")] != -1);
		return call<R>("setCssFloat", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCue")] != -1);
		return call<R>("setCue", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCueAfter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCueAfter")] != -1);
		return call<R>("setCueAfter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCueBefore(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCueBefore")] != -1);
		return call<R>("setCueBefore", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCursor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCursor")] != -1);
		return call<R>("setCursor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDirection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDirection")] != -1);
		return call<R>("setDirection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDisplay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDisplay")] != -1);
		return call<R>("setDisplay", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setElevation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setElevation")] != -1);
		return call<R>("setElevation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEmptyCells(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEmptyCells")] != -1);
		return call<R>("setEmptyCells", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFont")] != -1);
		return call<R>("setFont", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFontFamily(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFontFamily")] != -1);
		return call<R>("setFontFamily", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFontSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFontSize")] != -1);
		return call<R>("setFontSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFontSizeAdjust(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFontSizeAdjust")] != -1);
		return call<R>("setFontSizeAdjust", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFontStretch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFontStretch")] != -1);
		return call<R>("setFontStretch", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFontStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFontStyle")] != -1);
		return call<R>("setFontStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFontVariant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFontVariant")] != -1);
		return call<R>("setFontVariant", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFontWeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFontWeight")] != -1);
		return call<R>("setFontWeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHeight")] != -1);
		return call<R>("setHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLeft(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLeft")] != -1);
		return call<R>("setLeft", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLetterSpacing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLetterSpacing")] != -1);
		return call<R>("setLetterSpacing", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLineHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLineHeight")] != -1);
		return call<R>("setLineHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setListStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setListStyle")] != -1);
		return call<R>("setListStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setListStyleImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setListStyleImage")] != -1);
		return call<R>("setListStyleImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setListStylePosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setListStylePosition")] != -1);
		return call<R>("setListStylePosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setListStyleType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setListStyleType")] != -1);
		return call<R>("setListStyleType", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMargin(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMargin")] != -1);
		return call<R>("setMargin", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMarginBottom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMarginBottom")] != -1);
		return call<R>("setMarginBottom", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMarginLeft(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMarginLeft")] != -1);
		return call<R>("setMarginLeft", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMarginRight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMarginRight")] != -1);
		return call<R>("setMarginRight", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMarginTop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMarginTop")] != -1);
		return call<R>("setMarginTop", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMarkerOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMarkerOffset")] != -1);
		return call<R>("setMarkerOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMarks(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMarks")] != -1);
		return call<R>("setMarks", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaxHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMaxHeight")] != -1);
		return call<R>("setMaxHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaxWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMaxWidth")] != -1);
		return call<R>("setMaxWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMinHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMinHeight")] != -1);
		return call<R>("setMinHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMinWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMinWidth")] != -1);
		return call<R>("setMinWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOrphans(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOrphans")] != -1);
		return call<R>("setOrphans", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOutline(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOutline")] != -1);
		return call<R>("setOutline", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOutlineColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOutlineColor")] != -1);
		return call<R>("setOutlineColor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOutlineStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOutlineStyle")] != -1);
		return call<R>("setOutlineStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOutlineWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOutlineWidth")] != -1);
		return call<R>("setOutlineWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOverflow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOverflow")] != -1);
		return call<R>("setOverflow", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPadding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPadding")] != -1);
		return call<R>("setPadding", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPaddingBottom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPaddingBottom")] != -1);
		return call<R>("setPaddingBottom", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPaddingLeft(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPaddingLeft")] != -1);
		return call<R>("setPaddingLeft", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPaddingRight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPaddingRight")] != -1);
		return call<R>("setPaddingRight", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPaddingTop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPaddingTop")] != -1);
		return call<R>("setPaddingTop", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPage")] != -1);
		return call<R>("setPage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPageBreakAfter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPageBreakAfter")] != -1);
		return call<R>("setPageBreakAfter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPageBreakBefore(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPageBreakBefore")] != -1);
		return call<R>("setPageBreakBefore", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPageBreakInside(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPageBreakInside")] != -1);
		return call<R>("setPageBreakInside", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPause(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPause")] != -1);
		return call<R>("setPause", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPauseAfter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPauseAfter")] != -1);
		return call<R>("setPauseAfter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPauseBefore(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPauseBefore")] != -1);
		return call<R>("setPauseBefore", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPitch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPitch")] != -1);
		return call<R>("setPitch", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPitchRange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPitchRange")] != -1);
		return call<R>("setPitchRange", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPlayDuring(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPlayDuring")] != -1);
		return call<R>("setPlayDuring", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPosition")] != -1);
		return call<R>("setPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setQuotes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setQuotes")] != -1);
		return call<R>("setQuotes", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRichness(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRichness")] != -1);
		return call<R>("setRichness", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRight")] != -1);
		return call<R>("setRight", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSize")] != -1);
		return call<R>("setSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSpeak(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSpeak")] != -1);
		return call<R>("setSpeak", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSpeakHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSpeakHeader")] != -1);
		return call<R>("setSpeakHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSpeakNumeral(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSpeakNumeral")] != -1);
		return call<R>("setSpeakNumeral", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSpeakPunctuation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSpeakPunctuation")] != -1);
		return call<R>("setSpeakPunctuation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSpeechRate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSpeechRate")] != -1);
		return call<R>("setSpeechRate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setStress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setStress")] != -1);
		return call<R>("setStress", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTableLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTableLayout")] != -1);
		return call<R>("setTableLayout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTextAlign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTextAlign")] != -1);
		return call<R>("setTextAlign", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTextDecoration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTextDecoration")] != -1);
		return call<R>("setTextDecoration", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTextIndent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTextIndent")] != -1);
		return call<R>("setTextIndent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTextShadow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTextShadow")] != -1);
		return call<R>("setTextShadow", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTextTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTextTransform")] != -1);
		return call<R>("setTextTransform", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTop")] != -1);
		return call<R>("setTop", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUnicodeBidi(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUnicodeBidi")] != -1);
		return call<R>("setUnicodeBidi", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVerticalAlign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVerticalAlign")] != -1);
		return call<R>("setVerticalAlign", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVisibility(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVisibility")] != -1);
		return call<R>("setVisibility", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVoiceFamily(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVoiceFamily")] != -1);
		return call<R>("setVoiceFamily", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVolume(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVolume")] != -1);
		return call<R>("setVolume", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWhiteSpace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setWhiteSpace")] != -1);
		return call<R>("setWhiteSpace", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWidows(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setWidows")] != -1);
		return call<R>("setWidows", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setWidth")] != -1);
		return call<R>("setWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWordSpacing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setWordSpacing")] != -1);
		return call<R>("setWordSpacing", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setZIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setZIndex")] != -1);
		return call<R>("setZIndex", std::forward<Args>(args)...);
	}

};

#endif
