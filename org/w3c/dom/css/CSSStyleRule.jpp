#ifndef org_w3c_dom_css_CSSStyleRule_HPP
#define org_w3c_dom_css_CSSStyleRule_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::css::CSSStyleRule : public jObject<::org::w3c::dom::css::CSSStyleRule, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_css / "CSSStyleRule";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getSelectorText"), //
		jMethod<::org::w3c::dom::css::CSSStyleDeclaration()>("getStyle"), //
		jMethod<::jvoid(::java::lang::String)>("setSelectorText"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getSelectorText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSelectorText")] != -1);
		return call<R>("getSelectorText", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::css::CSSStyleDeclaration, typename... Args>
	auto getStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getStyle")] != -1);
		return call<R>("getStyle", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectorText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSelectorText")] != -1);
		return call<R>("setSelectorText", forward<Args>(args)...);
	}

};

#endif
