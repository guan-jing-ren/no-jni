#ifndef org_w3c_dom_css_CSSImportRule_HPP
#define org_w3c_dom_css_CSSImportRule_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::css::CSSImportRule : public jObject<::org::w3c::dom::css::CSSImportRule, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_css / "CSSImportRule";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getHref"), //
		jMethod<::org::w3c::dom::stylesheets::MediaList()>("getMedia"), //
		jMethod<::org::w3c::dom::css::CSSStyleSheet()>("getStyleSheet"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getHref(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHref")] != -1);
		return call<R>("getHref", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::stylesheets::MediaList, typename... Args>
	auto getMedia(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMedia")] != -1);
		return call<R>("getMedia", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::css::CSSStyleSheet, typename... Args>
	auto getStyleSheet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStyleSheet")] != -1);
		return call<R>("getStyleSheet", std::forward<Args>(args)...);
	}

};

#endif
