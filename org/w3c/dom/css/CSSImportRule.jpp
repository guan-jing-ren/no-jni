#ifndef org_w3c_dom_css_CSSImportRule_HPP
#define org_w3c_dom_css_CSSImportRule_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::css::CSSImportRule : public jObject<::org::w3c::dom::css::CSSImportRule, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_css / "CSSImportRule";

	constexpr static Enume field_signatures{
		jField<::jshort>("CHARSET_RULE"), //
		jField<::jshort>("FONT_FACE_RULE"), //
		jField<::jshort>("IMPORT_RULE"), //
		jField<::jshort>("MEDIA_RULE"), //
		jField<::jshort>("PAGE_RULE"), //
		jField<::jshort>("STYLE_RULE"), //
		jField<::jshort>("UNKNOWN_RULE"), //
	};

	template<typename F = ::jshort>
	static auto CHARSET_RULE() {
		static_assert(field_signatures[jField<F>("CHARSET_RULE")] != -1);
		return sat<F>("CHARSET_RULE");
	}

	template<typename F = ::jshort>
	static auto FONT_FACE_RULE() {
		static_assert(field_signatures[jField<F>("FONT_FACE_RULE")] != -1);
		return sat<F>("FONT_FACE_RULE");
	}

	template<typename F = ::jshort>
	static auto IMPORT_RULE() {
		static_assert(field_signatures[jField<F>("IMPORT_RULE")] != -1);
		return sat<F>("IMPORT_RULE");
	}

	template<typename F = ::jshort>
	static auto MEDIA_RULE() {
		static_assert(field_signatures[jField<F>("MEDIA_RULE")] != -1);
		return sat<F>("MEDIA_RULE");
	}

	template<typename F = ::jshort>
	static auto PAGE_RULE() {
		static_assert(field_signatures[jField<F>("PAGE_RULE")] != -1);
		return sat<F>("PAGE_RULE");
	}

	template<typename F = ::jshort>
	static auto STYLE_RULE() {
		static_assert(field_signatures[jField<F>("STYLE_RULE")] != -1);
		return sat<F>("STYLE_RULE");
	}

	template<typename F = ::jshort>
	static auto UNKNOWN_RULE() {
		static_assert(field_signatures[jField<F>("UNKNOWN_RULE")] != -1);
		return sat<F>("UNKNOWN_RULE");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getCssText"), //
		jMethod<::java::lang::String()>("getHref"), //
		jMethod<::org::w3c::dom::stylesheets::MediaList()>("getMedia"), //
		jMethod<::org::w3c::dom::css::CSSRule()>("getParentRule"), //
		jMethod<::org::w3c::dom::css::CSSStyleSheet()>("getParentStyleSheet"), //
		jMethod<::org::w3c::dom::css::CSSStyleSheet()>("getStyleSheet"), //
		jMethod<::jshort()>("getType"), //
		jMethod<::jvoid(::java::lang::String)>("setCssText"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getCssText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCssText")] != -1);
		return call<R>("getCssText", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHref(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHref")] != -1);
		return call<R>("getHref", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::stylesheets::MediaList, typename... Args>
	auto getMedia(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMedia")] != -1);
		return call<R>("getMedia", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::css::CSSRule, typename... Args>
	auto getParentRule(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParentRule")] != -1);
		return call<R>("getParentRule", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::css::CSSStyleSheet, typename... Args>
	auto getParentStyleSheet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParentStyleSheet")] != -1);
		return call<R>("getParentStyleSheet", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::css::CSSStyleSheet, typename... Args>
	auto getStyleSheet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStyleSheet")] != -1);
		return call<R>("getStyleSheet", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCssText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCssText")] != -1);
		return call<R>("setCssText", std::forward<Args>(args)...);
	}

};

#endif
