#ifndef org_w3c_dom_css_CSSStyleSheet_HPP
#define org_w3c_dom_css_CSSStyleSheet_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::css::CSSStyleSheet : public jObject<::org::w3c::dom::css::CSSStyleSheet, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_css / "CSSStyleSheet";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::jint)>("deleteRule"), //
		jMethod<::org::w3c::dom::css::CSSRuleList()>("getCssRules"), //
		jMethod<::org::w3c::dom::css::CSSRule()>("getOwnerRule"), //
		jMethod<::jint(::java::lang::String, ::jint)>("insertRule"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto deleteRule(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deleteRule")] != -1);
		return call<R>("deleteRule", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::css::CSSRuleList, typename... Args>
	auto getCssRules(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCssRules")] != -1);
		return call<R>("getCssRules", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::css::CSSRule, typename... Args>
	auto getOwnerRule(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOwnerRule")] != -1);
		return call<R>("getOwnerRule", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto insertRule(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insertRule")] != -1);
		return call<R>("insertRule", std::forward<Args>(args)...);
	}

};

#endif
