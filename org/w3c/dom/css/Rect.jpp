#ifndef org_w3c_dom_css_Rect_HPP
#define org_w3c_dom_css_Rect_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::css::Rect : public jObject<::org::w3c::dom::css::Rect, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_css / "Rect";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::org::w3c::dom::css::CSSPrimitiveValue()>("getBottom"), //
		jMethod<::org::w3c::dom::css::CSSPrimitiveValue()>("getLeft"), //
		jMethod<::org::w3c::dom::css::CSSPrimitiveValue()>("getRight"), //
		jMethod<::org::w3c::dom::css::CSSPrimitiveValue()>("getTop"), //
	};

	template<typename R = ::org::w3c::dom::css::CSSPrimitiveValue, typename... Args>
	auto getBottom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBottom")] != -1);
		return call<R>("getBottom", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::css::CSSPrimitiveValue, typename... Args>
	auto getLeft(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLeft")] != -1);
		return call<R>("getLeft", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::css::CSSPrimitiveValue, typename... Args>
	auto getRight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRight")] != -1);
		return call<R>("getRight", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::css::CSSPrimitiveValue, typename... Args>
	auto getTop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTop")] != -1);
		return call<R>("getTop", std::forward<Args>(args)...);
	}

};

#endif
