#ifndef org_w3c_dom_css_RGBColor_HPP
#define org_w3c_dom_css_RGBColor_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::css::RGBColor : public jObject<::org::w3c::dom::css::RGBColor, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_css / "RGBColor";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::org::w3c::dom::css::CSSPrimitiveValue()>("getBlue"), //
		jMethod<::org::w3c::dom::css::CSSPrimitiveValue()>("getGreen"), //
		jMethod<::org::w3c::dom::css::CSSPrimitiveValue()>("getRed"), //
	};

	template<typename R = ::org::w3c::dom::css::CSSPrimitiveValue, typename... Args>
	auto getBlue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBlue")] != -1);
		return call<R>("getBlue", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::css::CSSPrimitiveValue, typename... Args>
	auto getGreen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGreen")] != -1);
		return call<R>("getGreen", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::css::CSSPrimitiveValue, typename... Args>
	auto getRed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRed")] != -1);
		return call<R>("getRed", std::forward<Args>(args)...);
	}

};

#endif
