#ifndef org_w3c_dom_css_Counter_HPP
#define org_w3c_dom_css_Counter_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::css::Counter : public jObject<::org::w3c::dom::css::Counter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_css / "Counter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getIdentifier"), //
		jMethod<::java::lang::String()>("getListStyle"), //
		jMethod<::java::lang::String()>("getSeparator"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getIdentifier(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIdentifier")] != -1);
		return call<R>("getIdentifier", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getListStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getListStyle")] != -1);
		return call<R>("getListStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSeparator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSeparator")] != -1);
		return call<R>("getSeparator", std::forward<Args>(args)...);
	}

};

#endif
