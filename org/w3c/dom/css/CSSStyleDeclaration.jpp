#ifndef org_w3c_dom_css_CSSStyleDeclaration_HPP
#define org_w3c_dom_css_CSSStyleDeclaration_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::css::CSSStyleDeclaration : public jObject<::org::w3c::dom::css::CSSStyleDeclaration, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_css / "CSSStyleDeclaration";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getCssText"), //
		jMethod<::jint()>("getLength"), //
		jMethod<::org::w3c::dom::css::CSSRule()>("getParentRule"), //
		jMethod<::org::w3c::dom::css::CSSValue(::java::lang::String)>("getPropertyCSSValue"), //
		jMethod<::java::lang::String(::java::lang::String)>("getPropertyPriority"), //
		jMethod<::java::lang::String(::java::lang::String)>("getPropertyValue"), //
		jMethod<::java::lang::String(::jint)>("item"), //
		jMethod<::java::lang::String(::java::lang::String)>("removeProperty"), //
		jMethod<::jvoid(::java::lang::String)>("setCssText"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String)>("setProperty"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getCssText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCssText")] != -1);
		return call<R>("getCssText", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLength")] != -1);
		return call<R>("getLength", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::css::CSSRule, typename... Args>
	auto getParentRule(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParentRule")] != -1);
		return call<R>("getParentRule", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::css::CSSValue, typename... Args>
	auto getPropertyCSSValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPropertyCSSValue")] != -1);
		return call<R>("getPropertyCSSValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPropertyPriority(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPropertyPriority")] != -1);
		return call<R>("getPropertyPriority", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPropertyValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPropertyValue")] != -1);
		return call<R>("getPropertyValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto item(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("item")] != -1);
		return call<R>("item", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto removeProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeProperty")] != -1);
		return call<R>("removeProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCssText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCssText")] != -1);
		return call<R>("setCssText", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setProperty")] != -1);
		return call<R>("setProperty", std::forward<Args>(args)...);
	}

};

#endif
