#ifndef org_w3c_dom_css_CSSFontFaceRule_HPP
#define org_w3c_dom_css_CSSFontFaceRule_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::css::CSSFontFaceRule : public jObject<::org::w3c::dom::css::CSSFontFaceRule, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_css / "CSSFontFaceRule";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getCssText"), //
		jMethod<::org::w3c::dom::css::CSSRule()>("getParentRule"), //
		jMethod<::org::w3c::dom::css::CSSStyleSheet()>("getParentStyleSheet"), //
		jMethod<::org::w3c::dom::css::CSSStyleDeclaration()>("getStyle"), //
		jMethod<::jshort()>("getType"), //
		jMethod<::jvoid(::java::lang::String)>("setCssText"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getCssText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCssText")] != -1);
		return call<R>("getCssText", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::css::CSSRule, typename... Args>
	auto getParentRule(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParentRule")] != -1);
		return call<R>("getParentRule", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::css::CSSStyleSheet, typename... Args>
	auto getParentStyleSheet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParentStyleSheet")] != -1);
		return call<R>("getParentStyleSheet", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::css::CSSStyleDeclaration, typename... Args>
	auto getStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStyle")] != -1);
		return call<R>("getStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCssText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCssText")] != -1);
		return call<R>("setCssText", std::forward<Args>(args)...);
	}

};

#endif
