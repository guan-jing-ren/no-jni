#ifndef org_w3c_dom_css_DOMImplementationCSS_HPP
#define org_w3c_dom_css_DOMImplementationCSS_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::css::DOMImplementationCSS : public jObject<::org::w3c::dom::css::DOMImplementationCSS, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_css / "DOMImplementationCSS";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::org::w3c::dom::css::CSSStyleSheet(::java::lang::String, ::java::lang::String)>("createCSSStyleSheet"), //
		jMethod<::org::w3c::dom::Document(::java::lang::String, ::java::lang::String, ::org::w3c::dom::DocumentType)>("createDocument"), //
		jMethod<::org::w3c::dom::DocumentType(::java::lang::String, ::java::lang::String, ::java::lang::String)>("createDocumentType"), //
		jMethod<::java::lang::Object(::java::lang::String, ::java::lang::String)>("getFeature"), //
		jMethod<::jboolean(::java::lang::String, ::java::lang::String)>("hasFeature"), //
	};

	template<typename R = ::org::w3c::dom::css::CSSStyleSheet, typename... Args>
	auto createCSSStyleSheet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createCSSStyleSheet")] != -1);
		return call<R>("createCSSStyleSheet", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Document, typename... Args>
	auto createDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createDocument")] != -1);
		return call<R>("createDocument", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::DocumentType, typename... Args>
	auto createDocumentType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createDocumentType")] != -1);
		return call<R>("createDocumentType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getFeature(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFeature")] != -1);
		return call<R>("getFeature", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasFeature(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasFeature")] != -1);
		return call<R>("hasFeature", std::forward<Args>(args)...);
	}

};

#endif
