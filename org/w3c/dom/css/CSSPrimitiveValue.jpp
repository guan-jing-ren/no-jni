#ifndef org_w3c_dom_css_CSSPrimitiveValue_HPP
#define org_w3c_dom_css_CSSPrimitiveValue_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::css::CSSPrimitiveValue : public jObject<::org::w3c::dom::css::CSSPrimitiveValue, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_css / "CSSPrimitiveValue";

	constexpr static Enume field_signatures{
		jField<::jshort>("CSS_ATTR"), //
		jField<::jshort>("CSS_CM"), //
		jField<::jshort>("CSS_COUNTER"), //
		jField<::jshort>("CSS_DEG"), //
		jField<::jshort>("CSS_DIMENSION"), //
		jField<::jshort>("CSS_EMS"), //
		jField<::jshort>("CSS_EXS"), //
		jField<::jshort>("CSS_GRAD"), //
		jField<::jshort>("CSS_HZ"), //
		jField<::jshort>("CSS_IDENT"), //
		jField<::jshort>("CSS_IN"), //
		jField<::jshort>("CSS_KHZ"), //
		jField<::jshort>("CSS_MM"), //
		jField<::jshort>("CSS_MS"), //
		jField<::jshort>("CSS_NUMBER"), //
		jField<::jshort>("CSS_PC"), //
		jField<::jshort>("CSS_PERCENTAGE"), //
		jField<::jshort>("CSS_PT"), //
		jField<::jshort>("CSS_PX"), //
		jField<::jshort>("CSS_RAD"), //
		jField<::jshort>("CSS_RECT"), //
		jField<::jshort>("CSS_RGBCOLOR"), //
		jField<::jshort>("CSS_S"), //
		jField<::jshort>("CSS_STRING"), //
		jField<::jshort>("CSS_UNKNOWN"), //
		jField<::jshort>("CSS_URI"), //
	};

	template<typename F = ::jshort>
	static auto CSS_ATTR() {
		static_assert(field_signatures[jField<F>("CSS_ATTR")] != -1);
		return sat<F>("CSS_ATTR");
	}

	template<typename F = ::jshort>
	static auto CSS_CM() {
		static_assert(field_signatures[jField<F>("CSS_CM")] != -1);
		return sat<F>("CSS_CM");
	}

	template<typename F = ::jshort>
	static auto CSS_COUNTER() {
		static_assert(field_signatures[jField<F>("CSS_COUNTER")] != -1);
		return sat<F>("CSS_COUNTER");
	}

	template<typename F = ::jshort>
	static auto CSS_DEG() {
		static_assert(field_signatures[jField<F>("CSS_DEG")] != -1);
		return sat<F>("CSS_DEG");
	}

	template<typename F = ::jshort>
	static auto CSS_DIMENSION() {
		static_assert(field_signatures[jField<F>("CSS_DIMENSION")] != -1);
		return sat<F>("CSS_DIMENSION");
	}

	template<typename F = ::jshort>
	static auto CSS_EMS() {
		static_assert(field_signatures[jField<F>("CSS_EMS")] != -1);
		return sat<F>("CSS_EMS");
	}

	template<typename F = ::jshort>
	static auto CSS_EXS() {
		static_assert(field_signatures[jField<F>("CSS_EXS")] != -1);
		return sat<F>("CSS_EXS");
	}

	template<typename F = ::jshort>
	static auto CSS_GRAD() {
		static_assert(field_signatures[jField<F>("CSS_GRAD")] != -1);
		return sat<F>("CSS_GRAD");
	}

	template<typename F = ::jshort>
	static auto CSS_HZ() {
		static_assert(field_signatures[jField<F>("CSS_HZ")] != -1);
		return sat<F>("CSS_HZ");
	}

	template<typename F = ::jshort>
	static auto CSS_IDENT() {
		static_assert(field_signatures[jField<F>("CSS_IDENT")] != -1);
		return sat<F>("CSS_IDENT");
	}

	template<typename F = ::jshort>
	static auto CSS_IN() {
		static_assert(field_signatures[jField<F>("CSS_IN")] != -1);
		return sat<F>("CSS_IN");
	}

	template<typename F = ::jshort>
	static auto CSS_KHZ() {
		static_assert(field_signatures[jField<F>("CSS_KHZ")] != -1);
		return sat<F>("CSS_KHZ");
	}

	template<typename F = ::jshort>
	static auto CSS_MM() {
		static_assert(field_signatures[jField<F>("CSS_MM")] != -1);
		return sat<F>("CSS_MM");
	}

	template<typename F = ::jshort>
	static auto CSS_MS() {
		static_assert(field_signatures[jField<F>("CSS_MS")] != -1);
		return sat<F>("CSS_MS");
	}

	template<typename F = ::jshort>
	static auto CSS_NUMBER() {
		static_assert(field_signatures[jField<F>("CSS_NUMBER")] != -1);
		return sat<F>("CSS_NUMBER");
	}

	template<typename F = ::jshort>
	static auto CSS_PC() {
		static_assert(field_signatures[jField<F>("CSS_PC")] != -1);
		return sat<F>("CSS_PC");
	}

	template<typename F = ::jshort>
	static auto CSS_PERCENTAGE() {
		static_assert(field_signatures[jField<F>("CSS_PERCENTAGE")] != -1);
		return sat<F>("CSS_PERCENTAGE");
	}

	template<typename F = ::jshort>
	static auto CSS_PT() {
		static_assert(field_signatures[jField<F>("CSS_PT")] != -1);
		return sat<F>("CSS_PT");
	}

	template<typename F = ::jshort>
	static auto CSS_PX() {
		static_assert(field_signatures[jField<F>("CSS_PX")] != -1);
		return sat<F>("CSS_PX");
	}

	template<typename F = ::jshort>
	static auto CSS_RAD() {
		static_assert(field_signatures[jField<F>("CSS_RAD")] != -1);
		return sat<F>("CSS_RAD");
	}

	template<typename F = ::jshort>
	static auto CSS_RECT() {
		static_assert(field_signatures[jField<F>("CSS_RECT")] != -1);
		return sat<F>("CSS_RECT");
	}

	template<typename F = ::jshort>
	static auto CSS_RGBCOLOR() {
		static_assert(field_signatures[jField<F>("CSS_RGBCOLOR")] != -1);
		return sat<F>("CSS_RGBCOLOR");
	}

	template<typename F = ::jshort>
	static auto CSS_S() {
		static_assert(field_signatures[jField<F>("CSS_S")] != -1);
		return sat<F>("CSS_S");
	}

	template<typename F = ::jshort>
	static auto CSS_STRING() {
		static_assert(field_signatures[jField<F>("CSS_STRING")] != -1);
		return sat<F>("CSS_STRING");
	}

	template<typename F = ::jshort>
	static auto CSS_UNKNOWN() {
		static_assert(field_signatures[jField<F>("CSS_UNKNOWN")] != -1);
		return sat<F>("CSS_UNKNOWN");
	}

	template<typename F = ::jshort>
	static auto CSS_URI() {
		static_assert(field_signatures[jField<F>("CSS_URI")] != -1);
		return sat<F>("CSS_URI");
	}

	constexpr static Enume method_signatures{
		jMethod<::org::w3c::dom::css::Counter()>("getCounterValue"), //
		jMethod<::jfloat(::jshort)>("getFloatValue"), //
		jMethod<::jshort()>("getPrimitiveType"), //
		jMethod<::org::w3c::dom::css::RGBColor()>("getRGBColorValue"), //
		jMethod<::org::w3c::dom::css::Rect()>("getRectValue"), //
		jMethod<::java::lang::String()>("getStringValue"), //
		jMethod<::jvoid(::jshort, ::jfloat)>("setFloatValue"), //
		jMethod<::jvoid(::jshort, ::java::lang::String)>("setStringValue"), //
	};

	template<typename R = ::org::w3c::dom::css::Counter, typename... Args>
	auto getCounterValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCounterValue")] != -1);
		return call<R>("getCounterValue", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getFloatValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFloatValue")] != -1);
		return call<R>("getFloatValue", forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto getPrimitiveType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPrimitiveType")] != -1);
		return call<R>("getPrimitiveType", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::css::RGBColor, typename... Args>
	auto getRGBColorValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRGBColorValue")] != -1);
		return call<R>("getRGBColorValue", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::css::Rect, typename... Args>
	auto getRectValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRectValue")] != -1);
		return call<R>("getRectValue", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getStringValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getStringValue")] != -1);
		return call<R>("getStringValue", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFloatValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFloatValue")] != -1);
		return call<R>("setFloatValue", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setStringValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setStringValue")] != -1);
		return call<R>("setStringValue", forward<Args>(args)...);
	}

};

#endif
