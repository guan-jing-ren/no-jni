#ifndef org_w3c_dom_DOMException_HPP
#define org_w3c_dom_DOMException_HPP

#include "../../../jfwd_decl.hpp"

class ::org::w3c::dom::DOMException : public jObject<::org::w3c::dom::DOMException, ::java::lang::RuntimeException> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom / "DOMException";

	constexpr static Enume field_signatures{
		jField<::jshort>("DOMSTRING_SIZE_ERR"), //
		jField<::jshort>("HIERARCHY_REQUEST_ERR"), //
		jField<::jshort>("INDEX_SIZE_ERR"), //
		jField<::jshort>("INUSE_ATTRIBUTE_ERR"), //
		jField<::jshort>("INVALID_ACCESS_ERR"), //
		jField<::jshort>("INVALID_CHARACTER_ERR"), //
		jField<::jshort>("INVALID_MODIFICATION_ERR"), //
		jField<::jshort>("INVALID_STATE_ERR"), //
		jField<::jshort>("NAMESPACE_ERR"), //
		jField<::jshort>("NOT_FOUND_ERR"), //
		jField<::jshort>("NOT_SUPPORTED_ERR"), //
		jField<::jshort>("NO_DATA_ALLOWED_ERR"), //
		jField<::jshort>("NO_MODIFICATION_ALLOWED_ERR"), //
		jField<::jshort>("SYNTAX_ERR"), //
		jField<::jshort>("TYPE_MISMATCH_ERR"), //
		jField<::jshort>("VALIDATION_ERR"), //
		jField<::jshort>("WRONG_DOCUMENT_ERR"), //
		jField<::jshort>("code"), //
	};

	template<typename F = ::jshort>
	static auto DOMSTRING_SIZE_ERR() {
		static_assert(field_signatures[jField<F>("DOMSTRING_SIZE_ERR")] != -1);
		return sat<F>("DOMSTRING_SIZE_ERR");
	}

	template<typename F = ::jshort>
	static auto HIERARCHY_REQUEST_ERR() {
		static_assert(field_signatures[jField<F>("HIERARCHY_REQUEST_ERR")] != -1);
		return sat<F>("HIERARCHY_REQUEST_ERR");
	}

	template<typename F = ::jshort>
	static auto INDEX_SIZE_ERR() {
		static_assert(field_signatures[jField<F>("INDEX_SIZE_ERR")] != -1);
		return sat<F>("INDEX_SIZE_ERR");
	}

	template<typename F = ::jshort>
	static auto INUSE_ATTRIBUTE_ERR() {
		static_assert(field_signatures[jField<F>("INUSE_ATTRIBUTE_ERR")] != -1);
		return sat<F>("INUSE_ATTRIBUTE_ERR");
	}

	template<typename F = ::jshort>
	static auto INVALID_ACCESS_ERR() {
		static_assert(field_signatures[jField<F>("INVALID_ACCESS_ERR")] != -1);
		return sat<F>("INVALID_ACCESS_ERR");
	}

	template<typename F = ::jshort>
	static auto INVALID_CHARACTER_ERR() {
		static_assert(field_signatures[jField<F>("INVALID_CHARACTER_ERR")] != -1);
		return sat<F>("INVALID_CHARACTER_ERR");
	}

	template<typename F = ::jshort>
	static auto INVALID_MODIFICATION_ERR() {
		static_assert(field_signatures[jField<F>("INVALID_MODIFICATION_ERR")] != -1);
		return sat<F>("INVALID_MODIFICATION_ERR");
	}

	template<typename F = ::jshort>
	static auto INVALID_STATE_ERR() {
		static_assert(field_signatures[jField<F>("INVALID_STATE_ERR")] != -1);
		return sat<F>("INVALID_STATE_ERR");
	}

	template<typename F = ::jshort>
	static auto NAMESPACE_ERR() {
		static_assert(field_signatures[jField<F>("NAMESPACE_ERR")] != -1);
		return sat<F>("NAMESPACE_ERR");
	}

	template<typename F = ::jshort>
	static auto NOT_FOUND_ERR() {
		static_assert(field_signatures[jField<F>("NOT_FOUND_ERR")] != -1);
		return sat<F>("NOT_FOUND_ERR");
	}

	template<typename F = ::jshort>
	static auto NOT_SUPPORTED_ERR() {
		static_assert(field_signatures[jField<F>("NOT_SUPPORTED_ERR")] != -1);
		return sat<F>("NOT_SUPPORTED_ERR");
	}

	template<typename F = ::jshort>
	static auto NO_DATA_ALLOWED_ERR() {
		static_assert(field_signatures[jField<F>("NO_DATA_ALLOWED_ERR")] != -1);
		return sat<F>("NO_DATA_ALLOWED_ERR");
	}

	template<typename F = ::jshort>
	static auto NO_MODIFICATION_ALLOWED_ERR() {
		static_assert(field_signatures[jField<F>("NO_MODIFICATION_ALLOWED_ERR")] != -1);
		return sat<F>("NO_MODIFICATION_ALLOWED_ERR");
	}

	template<typename F = ::jshort>
	static auto SYNTAX_ERR() {
		static_assert(field_signatures[jField<F>("SYNTAX_ERR")] != -1);
		return sat<F>("SYNTAX_ERR");
	}

	template<typename F = ::jshort>
	static auto TYPE_MISMATCH_ERR() {
		static_assert(field_signatures[jField<F>("TYPE_MISMATCH_ERR")] != -1);
		return sat<F>("TYPE_MISMATCH_ERR");
	}

	template<typename F = ::jshort>
	static auto VALIDATION_ERR() {
		static_assert(field_signatures[jField<F>("VALIDATION_ERR")] != -1);
		return sat<F>("VALIDATION_ERR");
	}

	template<typename F = ::jshort>
	static auto WRONG_DOCUMENT_ERR() {
		static_assert(field_signatures[jField<F>("WRONG_DOCUMENT_ERR")] != -1);
		return sat<F>("WRONG_DOCUMENT_ERR");
	}

	template<typename F = ::jshort>
	auto code() const {
		static_assert(field_signatures[jField<F>("code")] != -1);
		return at<F>("code");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jshort, ::java::lang::String)>(), //
	};

};

#endif
