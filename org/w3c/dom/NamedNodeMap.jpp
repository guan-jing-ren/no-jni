#ifndef org_w3c_dom_NamedNodeMap_HPP
#define org_w3c_dom_NamedNodeMap_HPP

#include "../../../jfwd_decl.hpp"

class ::org::w3c::dom::NamedNodeMap : public jObject<::org::w3c::dom::NamedNodeMap, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom / "NamedNodeMap";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint()>("getLength"), //
		jMethod<::org::w3c::dom::Node(::java::lang::String)>("getNamedItem"), //
		jMethod<::org::w3c::dom::Node(::java::lang::String, ::java::lang::String)>("getNamedItemNS"), //
		jMethod<::org::w3c::dom::Node(::jint)>("item"), //
		jMethod<::org::w3c::dom::Node(::java::lang::String)>("removeNamedItem"), //
		jMethod<::org::w3c::dom::Node(::java::lang::String, ::java::lang::String)>("removeNamedItemNS"), //
		jMethod<::org::w3c::dom::Node(::org::w3c::dom::Node)>("setNamedItem"), //
		jMethod<::org::w3c::dom::Node(::org::w3c::dom::Node)>("setNamedItemNS"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLength")] != -1);
		return call<R>("getLength", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto getNamedItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNamedItem")] != -1);
		return call<R>("getNamedItem", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto getNamedItemNS(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNamedItemNS")] != -1);
		return call<R>("getNamedItemNS", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto item(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("item")] != -1);
		return call<R>("item", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto removeNamedItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeNamedItem")] != -1);
		return call<R>("removeNamedItem", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto removeNamedItemNS(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeNamedItemNS")] != -1);
		return call<R>("removeNamedItemNS", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto setNamedItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNamedItem")] != -1);
		return call<R>("setNamedItem", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto setNamedItemNS(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNamedItemNS")] != -1);
		return call<R>("setNamedItemNS", std::forward<Args>(args)...);
	}

};

#endif
