#ifndef org_w3c_dom_events_MutationEvent_HPP
#define org_w3c_dom_events_MutationEvent_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::events::MutationEvent : public jObject<::org::w3c::dom::events::MutationEvent, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_events / "MutationEvent";

	constexpr static Enume field_signatures{
		jField<::jshort>("ADDITION"), //
		jField<::jshort>("AT_TARGET"), //
		jField<::jshort>("BUBBLING_PHASE"), //
		jField<::jshort>("CAPTURING_PHASE"), //
		jField<::jshort>("MODIFICATION"), //
		jField<::jshort>("REMOVAL"), //
	};

	template<typename F = ::jshort>
	static auto ADDITION() {
		static_assert(field_signatures[jField<F>("ADDITION")] != -1);
		return sat<F>("ADDITION");
	}

	template<typename F = ::jshort>
	static auto AT_TARGET() {
		static_assert(field_signatures[jField<F>("AT_TARGET")] != -1);
		return sat<F>("AT_TARGET");
	}

	template<typename F = ::jshort>
	static auto BUBBLING_PHASE() {
		static_assert(field_signatures[jField<F>("BUBBLING_PHASE")] != -1);
		return sat<F>("BUBBLING_PHASE");
	}

	template<typename F = ::jshort>
	static auto CAPTURING_PHASE() {
		static_assert(field_signatures[jField<F>("CAPTURING_PHASE")] != -1);
		return sat<F>("CAPTURING_PHASE");
	}

	template<typename F = ::jshort>
	static auto MODIFICATION() {
		static_assert(field_signatures[jField<F>("MODIFICATION")] != -1);
		return sat<F>("MODIFICATION");
	}

	template<typename F = ::jshort>
	static auto REMOVAL() {
		static_assert(field_signatures[jField<F>("REMOVAL")] != -1);
		return sat<F>("REMOVAL");
	}

	constexpr static Enume method_signatures{
		jMethod<::jshort()>("getAttrChange"), //
		jMethod<::java::lang::String()>("getAttrName"), //
		jMethod<::jboolean()>("getBubbles"), //
		jMethod<::jboolean()>("getCancelable"), //
		jMethod<::org::w3c::dom::events::EventTarget()>("getCurrentTarget"), //
		jMethod<::jshort()>("getEventPhase"), //
		jMethod<::java::lang::String()>("getNewValue"), //
		jMethod<::java::lang::String()>("getPrevValue"), //
		jMethod<::org::w3c::dom::Node()>("getRelatedNode"), //
		jMethod<::org::w3c::dom::events::EventTarget()>("getTarget"), //
		jMethod<::jlong()>("getTimeStamp"), //
		jMethod<::java::lang::String()>("getType"), //
		jMethod<::jvoid(::java::lang::String, ::jboolean, ::jboolean)>("initEvent"), //
		jMethod<::jvoid(::java::lang::String, ::jboolean, ::jboolean, ::org::w3c::dom::Node, ::java::lang::String, ::java::lang::String, ::java::lang::String, ::jshort)>("initMutationEvent"), //
		jMethod<::jvoid()>("preventDefault"), //
		jMethod<::jvoid()>("stopPropagation"), //
	};

	template<typename R = ::jshort, typename... Args>
	auto getAttrChange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttrChange")] != -1);
		return call<R>("getAttrChange", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAttrName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttrName")] != -1);
		return call<R>("getAttrName", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getBubbles(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBubbles")] != -1);
		return call<R>("getBubbles", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getCancelable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCancelable")] != -1);
		return call<R>("getCancelable", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::events::EventTarget, typename... Args>
	auto getCurrentTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCurrentTarget")] != -1);
		return call<R>("getCurrentTarget", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto getEventPhase(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEventPhase")] != -1);
		return call<R>("getEventPhase", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNewValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNewValue")] != -1);
		return call<R>("getNewValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPrevValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrevValue")] != -1);
		return call<R>("getPrevValue", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto getRelatedNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRelatedNode")] != -1);
		return call<R>("getRelatedNode", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::events::EventTarget, typename... Args>
	auto getTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTarget")] != -1);
		return call<R>("getTarget", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getTimeStamp(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTimeStamp")] != -1);
		return call<R>("getTimeStamp", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto initEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initEvent")] != -1);
		return call<R>("initEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto initMutationEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initMutationEvent")] != -1);
		return call<R>("initMutationEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto preventDefault(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("preventDefault")] != -1);
		return call<R>("preventDefault", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto stopPropagation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stopPropagation")] != -1);
		return call<R>("stopPropagation", std::forward<Args>(args)...);
	}

};

#endif
