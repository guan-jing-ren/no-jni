#ifndef org_w3c_dom_events_UIEvent_HPP
#define org_w3c_dom_events_UIEvent_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::events::UIEvent : public jObject<::org::w3c::dom::events::UIEvent, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_events / "UIEvent";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean()>("getBubbles"), //
		jMethod<::jboolean()>("getCancelable"), //
		jMethod<::org::w3c::dom::events::EventTarget()>("getCurrentTarget"), //
		jMethod<::jint()>("getDetail"), //
		jMethod<::jshort()>("getEventPhase"), //
		jMethod<::org::w3c::dom::events::EventTarget()>("getTarget"), //
		jMethod<::jlong()>("getTimeStamp"), //
		jMethod<::java::lang::String()>("getType"), //
		jMethod<::org::w3c::dom::views::AbstractView()>("getView"), //
		jMethod<::jvoid(::java::lang::String, ::jboolean, ::jboolean)>("initEvent"), //
		jMethod<::jvoid(::java::lang::String, ::jboolean, ::jboolean, ::org::w3c::dom::views::AbstractView, ::jint)>("initUIEvent"), //
		jMethod<::jvoid()>("preventDefault"), //
		jMethod<::jvoid()>("stopPropagation"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto getBubbles(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBubbles")] != -1);
		return call<R>("getBubbles", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getCancelable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCancelable")] != -1);
		return call<R>("getCancelable", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::events::EventTarget, typename... Args>
	auto getCurrentTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCurrentTarget")] != -1);
		return call<R>("getCurrentTarget", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDetail(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDetail")] != -1);
		return call<R>("getDetail", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto getEventPhase(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEventPhase")] != -1);
		return call<R>("getEventPhase", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::events::EventTarget, typename... Args>
	auto getTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTarget")] != -1);
		return call<R>("getTarget", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getTimeStamp(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTimeStamp")] != -1);
		return call<R>("getTimeStamp", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::views::AbstractView, typename... Args>
	auto getView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getView")] != -1);
		return call<R>("getView", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto initEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initEvent")] != -1);
		return call<R>("initEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto initUIEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initUIEvent")] != -1);
		return call<R>("initUIEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto preventDefault(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("preventDefault")] != -1);
		return call<R>("preventDefault", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto stopPropagation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stopPropagation")] != -1);
		return call<R>("stopPropagation", std::forward<Args>(args)...);
	}

};

#endif
