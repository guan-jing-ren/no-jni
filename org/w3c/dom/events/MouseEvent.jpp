#ifndef org_w3c_dom_events_MouseEvent_HPP
#define org_w3c_dom_events_MouseEvent_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::events::MouseEvent : public jObject<::org::w3c::dom::events::MouseEvent, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_events / "MouseEvent";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean()>("getAltKey"), //
		jMethod<::jshort()>("getButton"), //
		jMethod<::jint()>("getClientX"), //
		jMethod<::jint()>("getClientY"), //
		jMethod<::jboolean()>("getCtrlKey"), //
		jMethod<::jboolean()>("getMetaKey"), //
		jMethod<::org::w3c::dom::events::EventTarget()>("getRelatedTarget"), //
		jMethod<::jint()>("getScreenX"), //
		jMethod<::jint()>("getScreenY"), //
		jMethod<::jboolean()>("getShiftKey"), //
		jMethod<::jvoid(::java::lang::String, ::jboolean, ::jboolean, ::org::w3c::dom::views::AbstractView, ::jint, ::jint, ::jint, ::jint, ::jint, ::jboolean, ::jboolean, ::jboolean, ::jboolean, ::jshort, ::org::w3c::dom::events::EventTarget)>("initMouseEvent"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto getAltKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAltKey")] != -1);
		return call<R>("getAltKey", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto getButton(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getButton")] != -1);
		return call<R>("getButton", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getClientX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClientX")] != -1);
		return call<R>("getClientX", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getClientY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClientY")] != -1);
		return call<R>("getClientY", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getCtrlKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCtrlKey")] != -1);
		return call<R>("getCtrlKey", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getMetaKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMetaKey")] != -1);
		return call<R>("getMetaKey", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::events::EventTarget, typename... Args>
	auto getRelatedTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRelatedTarget")] != -1);
		return call<R>("getRelatedTarget", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getScreenX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScreenX")] != -1);
		return call<R>("getScreenX", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getScreenY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScreenY")] != -1);
		return call<R>("getScreenY", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getShiftKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getShiftKey")] != -1);
		return call<R>("getShiftKey", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto initMouseEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initMouseEvent")] != -1);
		return call<R>("initMouseEvent", std::forward<Args>(args)...);
	}

};

#endif
