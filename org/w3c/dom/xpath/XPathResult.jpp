#ifndef org_w3c_dom_xpath_XPathResult_HPP
#define org_w3c_dom_xpath_XPathResult_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::xpath::XPathResult : public jObject<::org::w3c::dom::xpath::XPathResult, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_xpath / "XPathResult";

	constexpr static Enume field_signatures{
		jField<::jshort>("ANY_TYPE"), //
		jField<::jshort>("ANY_UNORDERED_NODE_TYPE"), //
		jField<::jshort>("BOOLEAN_TYPE"), //
		jField<::jshort>("FIRST_ORDERED_NODE_TYPE"), //
		jField<::jshort>("NUMBER_TYPE"), //
		jField<::jshort>("ORDERED_NODE_ITERATOR_TYPE"), //
		jField<::jshort>("ORDERED_NODE_SNAPSHOT_TYPE"), //
		jField<::jshort>("STRING_TYPE"), //
		jField<::jshort>("UNORDERED_NODE_ITERATOR_TYPE"), //
		jField<::jshort>("UNORDERED_NODE_SNAPSHOT_TYPE"), //
	};

	template<typename F = ::jshort>
	static auto ANY_TYPE() {
		static_assert(field_signatures[jField<F>("ANY_TYPE")] != -1);
		return sat<F>("ANY_TYPE");
	}

	template<typename F = ::jshort>
	static auto ANY_UNORDERED_NODE_TYPE() {
		static_assert(field_signatures[jField<F>("ANY_UNORDERED_NODE_TYPE")] != -1);
		return sat<F>("ANY_UNORDERED_NODE_TYPE");
	}

	template<typename F = ::jshort>
	static auto BOOLEAN_TYPE() {
		static_assert(field_signatures[jField<F>("BOOLEAN_TYPE")] != -1);
		return sat<F>("BOOLEAN_TYPE");
	}

	template<typename F = ::jshort>
	static auto FIRST_ORDERED_NODE_TYPE() {
		static_assert(field_signatures[jField<F>("FIRST_ORDERED_NODE_TYPE")] != -1);
		return sat<F>("FIRST_ORDERED_NODE_TYPE");
	}

	template<typename F = ::jshort>
	static auto NUMBER_TYPE() {
		static_assert(field_signatures[jField<F>("NUMBER_TYPE")] != -1);
		return sat<F>("NUMBER_TYPE");
	}

	template<typename F = ::jshort>
	static auto ORDERED_NODE_ITERATOR_TYPE() {
		static_assert(field_signatures[jField<F>("ORDERED_NODE_ITERATOR_TYPE")] != -1);
		return sat<F>("ORDERED_NODE_ITERATOR_TYPE");
	}

	template<typename F = ::jshort>
	static auto ORDERED_NODE_SNAPSHOT_TYPE() {
		static_assert(field_signatures[jField<F>("ORDERED_NODE_SNAPSHOT_TYPE")] != -1);
		return sat<F>("ORDERED_NODE_SNAPSHOT_TYPE");
	}

	template<typename F = ::jshort>
	static auto STRING_TYPE() {
		static_assert(field_signatures[jField<F>("STRING_TYPE")] != -1);
		return sat<F>("STRING_TYPE");
	}

	template<typename F = ::jshort>
	static auto UNORDERED_NODE_ITERATOR_TYPE() {
		static_assert(field_signatures[jField<F>("UNORDERED_NODE_ITERATOR_TYPE")] != -1);
		return sat<F>("UNORDERED_NODE_ITERATOR_TYPE");
	}

	template<typename F = ::jshort>
	static auto UNORDERED_NODE_SNAPSHOT_TYPE() {
		static_assert(field_signatures[jField<F>("UNORDERED_NODE_SNAPSHOT_TYPE")] != -1);
		return sat<F>("UNORDERED_NODE_SNAPSHOT_TYPE");
	}

	constexpr static Enume method_signatures{
		jMethod<::jboolean()>("getBooleanValue"), //
		jMethod<::jboolean()>("getInvalidIteratorState"), //
		jMethod<::jdouble()>("getNumberValue"), //
		jMethod<::jshort()>("getResultType"), //
		jMethod<::org::w3c::dom::Node()>("getSingleNodeValue"), //
		jMethod<::jint()>("getSnapshotLength"), //
		jMethod<::java::lang::String()>("getStringValue"), //
		jMethod<::org::w3c::dom::Node()>("iterateNext"), //
		jMethod<::org::w3c::dom::Node(::jint)>("snapshotItem"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto getBooleanValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBooleanValue")] != -1);
		return call<R>("getBooleanValue", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getInvalidIteratorState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInvalidIteratorState")] != -1);
		return call<R>("getInvalidIteratorState", forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getNumberValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNumberValue")] != -1);
		return call<R>("getNumberValue", forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto getResultType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getResultType")] != -1);
		return call<R>("getResultType", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto getSingleNodeValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSingleNodeValue")] != -1);
		return call<R>("getSingleNodeValue", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSnapshotLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSnapshotLength")] != -1);
		return call<R>("getSnapshotLength", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getStringValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getStringValue")] != -1);
		return call<R>("getStringValue", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto iterateNext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("iterateNext")] != -1);
		return call<R>("iterateNext", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto snapshotItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("snapshotItem")] != -1);
		return call<R>("snapshotItem", forward<Args>(args)...);
	}

};

#endif
