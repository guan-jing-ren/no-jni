#ifndef org_w3c_dom_html_HTMLHRElement_HPP
#define org_w3c_dom_html_HTMLHRElement_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::html::HTMLHRElement : public jObject<::org::w3c::dom::html::HTMLHRElement, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_html / "HTMLHRElement";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getAlign"), //
		jMethod<::jboolean()>("getNoShade"), //
		jMethod<::java::lang::String()>("getSize"), //
		jMethod<::java::lang::String()>("getWidth"), //
		jMethod<::jvoid(::java::lang::String)>("setAlign"), //
		jMethod<::jvoid(::jboolean)>("setNoShade"), //
		jMethod<::jvoid(::java::lang::String)>("setSize"), //
		jMethod<::jvoid(::java::lang::String)>("setWidth"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getAlign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAlign")] != -1);
		return call<R>("getAlign", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getNoShade(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNoShade")] != -1);
		return call<R>("getNoShade", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSize")] != -1);
		return call<R>("getSize", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAlign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setAlign")] != -1);
		return call<R>("setAlign", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNoShade(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setNoShade")] != -1);
		return call<R>("setNoShade", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSize")] != -1);
		return call<R>("setSize", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setWidth")] != -1);
		return call<R>("setWidth", forward<Args>(args)...);
	}

};

#endif
