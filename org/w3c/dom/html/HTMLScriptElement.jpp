#ifndef org_w3c_dom_html_HTMLScriptElement_HPP
#define org_w3c_dom_html_HTMLScriptElement_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::html::HTMLScriptElement : public jObject<::org::w3c::dom::html::HTMLScriptElement, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_html / "HTMLScriptElement";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getCharset"), //
		jMethod<::jboolean()>("getDefer"), //
		jMethod<::java::lang::String()>("getEvent"), //
		jMethod<::java::lang::String()>("getHtmlFor"), //
		jMethod<::java::lang::String()>("getSrc"), //
		jMethod<::java::lang::String()>("getText"), //
		jMethod<::java::lang::String()>("getType"), //
		jMethod<::jvoid(::java::lang::String)>("setCharset"), //
		jMethod<::jvoid(::jboolean)>("setDefer"), //
		jMethod<::jvoid(::java::lang::String)>("setEvent"), //
		jMethod<::jvoid(::java::lang::String)>("setHtmlFor"), //
		jMethod<::jvoid(::java::lang::String)>("setSrc"), //
		jMethod<::jvoid(::java::lang::String)>("setText"), //
		jMethod<::jvoid(::java::lang::String)>("setType"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getCharset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCharset")] != -1);
		return call<R>("getCharset", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getDefer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDefer")] != -1);
		return call<R>("getDefer", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getEvent")] != -1);
		return call<R>("getEvent", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHtmlFor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHtmlFor")] != -1);
		return call<R>("getHtmlFor", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSrc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSrc")] != -1);
		return call<R>("getSrc", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getText")] != -1);
		return call<R>("getText", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCharset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCharset")] != -1);
		return call<R>("setCharset", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDefer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDefer")] != -1);
		return call<R>("setDefer", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setEvent")] != -1);
		return call<R>("setEvent", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHtmlFor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setHtmlFor")] != -1);
		return call<R>("setHtmlFor", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSrc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSrc")] != -1);
		return call<R>("setSrc", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setText")] != -1);
		return call<R>("setText", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setType")] != -1);
		return call<R>("setType", forward<Args>(args)...);
	}

};

#endif
