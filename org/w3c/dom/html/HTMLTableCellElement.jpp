#ifndef org_w3c_dom_html_HTMLTableCellElement_HPP
#define org_w3c_dom_html_HTMLTableCellElement_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::html::HTMLTableCellElement : public jObject<::org::w3c::dom::html::HTMLTableCellElement, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_html / "HTMLTableCellElement";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getAbbr"), //
		jMethod<::java::lang::String()>("getAlign"), //
		jMethod<::java::lang::String()>("getAxis"), //
		jMethod<::java::lang::String()>("getBgColor"), //
		jMethod<::jint()>("getCellIndex"), //
		jMethod<::java::lang::String()>("getCh"), //
		jMethod<::java::lang::String()>("getChOff"), //
		jMethod<::jint()>("getColSpan"), //
		jMethod<::java::lang::String()>("getHeaders"), //
		jMethod<::java::lang::String()>("getHeight"), //
		jMethod<::jboolean()>("getNoWrap"), //
		jMethod<::jint()>("getRowSpan"), //
		jMethod<::java::lang::String()>("getScope"), //
		jMethod<::java::lang::String()>("getVAlign"), //
		jMethod<::java::lang::String()>("getWidth"), //
		jMethod<::jvoid(::java::lang::String)>("setAbbr"), //
		jMethod<::jvoid(::java::lang::String)>("setAlign"), //
		jMethod<::jvoid(::java::lang::String)>("setAxis"), //
		jMethod<::jvoid(::java::lang::String)>("setBgColor"), //
		jMethod<::jvoid(::java::lang::String)>("setCh"), //
		jMethod<::jvoid(::java::lang::String)>("setChOff"), //
		jMethod<::jvoid(::jint)>("setColSpan"), //
		jMethod<::jvoid(::java::lang::String)>("setHeaders"), //
		jMethod<::jvoid(::java::lang::String)>("setHeight"), //
		jMethod<::jvoid(::jboolean)>("setNoWrap"), //
		jMethod<::jvoid(::jint)>("setRowSpan"), //
		jMethod<::jvoid(::java::lang::String)>("setScope"), //
		jMethod<::jvoid(::java::lang::String)>("setVAlign"), //
		jMethod<::jvoid(::java::lang::String)>("setWidth"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getAbbr(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAbbr")] != -1);
		return call<R>("getAbbr", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAlign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAlign")] != -1);
		return call<R>("getAlign", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAxis(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAxis")] != -1);
		return call<R>("getAxis", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBgColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBgColor")] != -1);
		return call<R>("getBgColor", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCellIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCellIndex")] != -1);
		return call<R>("getCellIndex", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCh(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCh")] != -1);
		return call<R>("getCh", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getChOff(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getChOff")] != -1);
		return call<R>("getChOff", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getColSpan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColSpan")] != -1);
		return call<R>("getColSpan", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHeaders(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHeaders")] != -1);
		return call<R>("getHeaders", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHeight")] != -1);
		return call<R>("getHeight", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getNoWrap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNoWrap")] != -1);
		return call<R>("getNoWrap", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRowSpan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRowSpan")] != -1);
		return call<R>("getRowSpan", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getScope(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getScope")] != -1);
		return call<R>("getScope", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getVAlign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getVAlign")] != -1);
		return call<R>("getVAlign", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAbbr(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setAbbr")] != -1);
		return call<R>("setAbbr", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAlign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setAlign")] != -1);
		return call<R>("setAlign", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAxis(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setAxis")] != -1);
		return call<R>("setAxis", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBgColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBgColor")] != -1);
		return call<R>("setBgColor", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCh(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCh")] != -1);
		return call<R>("setCh", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setChOff(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setChOff")] != -1);
		return call<R>("setChOff", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColSpan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setColSpan")] != -1);
		return call<R>("setColSpan", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHeaders(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setHeaders")] != -1);
		return call<R>("setHeaders", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setHeight")] != -1);
		return call<R>("setHeight", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNoWrap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setNoWrap")] != -1);
		return call<R>("setNoWrap", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRowSpan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setRowSpan")] != -1);
		return call<R>("setRowSpan", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setScope(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setScope")] != -1);
		return call<R>("setScope", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVAlign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setVAlign")] != -1);
		return call<R>("setVAlign", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setWidth")] != -1);
		return call<R>("setWidth", forward<Args>(args)...);
	}

};

#endif
