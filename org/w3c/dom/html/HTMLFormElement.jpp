#ifndef org_w3c_dom_html_HTMLFormElement_HPP
#define org_w3c_dom_html_HTMLFormElement_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::html::HTMLFormElement : public jObject<::org::w3c::dom::html::HTMLFormElement, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_html / "HTMLFormElement";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getAcceptCharset"), //
		jMethod<::java::lang::String()>("getAction"), //
		jMethod<::org::w3c::dom::html::HTMLCollection()>("getElements"), //
		jMethod<::java::lang::String()>("getEnctype"), //
		jMethod<::jint()>("getLength"), //
		jMethod<::java::lang::String()>("getMethod"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::lang::String()>("getTarget"), //
		jMethod<::jvoid()>("reset"), //
		jMethod<::jvoid(::java::lang::String)>("setAcceptCharset"), //
		jMethod<::jvoid(::java::lang::String)>("setAction"), //
		jMethod<::jvoid(::java::lang::String)>("setEnctype"), //
		jMethod<::jvoid(::java::lang::String)>("setMethod"), //
		jMethod<::jvoid(::java::lang::String)>("setName"), //
		jMethod<::jvoid(::java::lang::String)>("setTarget"), //
		jMethod<::jvoid()>("submit"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getAcceptCharset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAcceptCharset")] != -1);
		return call<R>("getAcceptCharset", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAction")] != -1);
		return call<R>("getAction", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::html::HTMLCollection, typename... Args>
	auto getElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getElements")] != -1);
		return call<R>("getElements", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getEnctype(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEnctype")] != -1);
		return call<R>("getEnctype", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLength")] != -1);
		return call<R>("getLength", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMethod(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMethod")] != -1);
		return call<R>("getMethod", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTarget")] != -1);
		return call<R>("getTarget", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAcceptCharset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAcceptCharset")] != -1);
		return call<R>("setAcceptCharset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAction")] != -1);
		return call<R>("setAction", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEnctype(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEnctype")] != -1);
		return call<R>("setEnctype", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMethod(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMethod")] != -1);
		return call<R>("setMethod", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setName")] != -1);
		return call<R>("setName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTarget")] != -1);
		return call<R>("setTarget", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto submit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("submit")] != -1);
		return call<R>("submit", std::forward<Args>(args)...);
	}

};

#endif
