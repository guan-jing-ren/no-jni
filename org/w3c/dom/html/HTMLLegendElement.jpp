#ifndef org_w3c_dom_html_HTMLLegendElement_HPP
#define org_w3c_dom_html_HTMLLegendElement_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::html::HTMLLegendElement : public jObject<::org::w3c::dom::html::HTMLLegendElement, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_html / "HTMLLegendElement";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getAccessKey"), //
		jMethod<::java::lang::String()>("getAlign"), //
		jMethod<::org::w3c::dom::html::HTMLFormElement()>("getForm"), //
		jMethod<::jvoid(::java::lang::String)>("setAccessKey"), //
		jMethod<::jvoid(::java::lang::String)>("setAlign"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getAccessKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessKey")] != -1);
		return call<R>("getAccessKey", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAlign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAlign")] != -1);
		return call<R>("getAlign", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::html::HTMLFormElement, typename... Args>
	auto getForm(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getForm")] != -1);
		return call<R>("getForm", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAccessKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setAccessKey")] != -1);
		return call<R>("setAccessKey", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAlign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setAlign")] != -1);
		return call<R>("setAlign", forward<Args>(args)...);
	}

};

#endif
