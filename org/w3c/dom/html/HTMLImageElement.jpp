#ifndef org_w3c_dom_html_HTMLImageElement_HPP
#define org_w3c_dom_html_HTMLImageElement_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::html::HTMLImageElement : public jObject<::org::w3c::dom::html::HTMLImageElement, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_html / "HTMLImageElement";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getAlign"), //
		jMethod<::java::lang::String()>("getAlt"), //
		jMethod<::java::lang::String()>("getBorder"), //
		jMethod<::java::lang::String()>("getHeight"), //
		jMethod<::java::lang::String()>("getHspace"), //
		jMethod<::jboolean()>("getIsMap"), //
		jMethod<::java::lang::String()>("getLongDesc"), //
		jMethod<::java::lang::String()>("getLowSrc"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::lang::String()>("getSrc"), //
		jMethod<::java::lang::String()>("getUseMap"), //
		jMethod<::java::lang::String()>("getVspace"), //
		jMethod<::java::lang::String()>("getWidth"), //
		jMethod<::jvoid(::java::lang::String)>("setAlign"), //
		jMethod<::jvoid(::java::lang::String)>("setAlt"), //
		jMethod<::jvoid(::java::lang::String)>("setBorder"), //
		jMethod<::jvoid(::java::lang::String)>("setHeight"), //
		jMethod<::jvoid(::java::lang::String)>("setHspace"), //
		jMethod<::jvoid(::jboolean)>("setIsMap"), //
		jMethod<::jvoid(::java::lang::String)>("setLongDesc"), //
		jMethod<::jvoid(::java::lang::String)>("setLowSrc"), //
		jMethod<::jvoid(::java::lang::String)>("setName"), //
		jMethod<::jvoid(::java::lang::String)>("setSrc"), //
		jMethod<::jvoid(::java::lang::String)>("setUseMap"), //
		jMethod<::jvoid(::java::lang::String)>("setVspace"), //
		jMethod<::jvoid(::java::lang::String)>("setWidth"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getAlign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlign")] != -1);
		return call<R>("getAlign", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAlt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlt")] != -1);
		return call<R>("getAlt", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorder")] != -1);
		return call<R>("getBorder", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeight")] != -1);
		return call<R>("getHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHspace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHspace")] != -1);
		return call<R>("getHspace", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getIsMap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIsMap")] != -1);
		return call<R>("getIsMap", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLongDesc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLongDesc")] != -1);
		return call<R>("getLongDesc", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLowSrc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLowSrc")] != -1);
		return call<R>("getLowSrc", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSrc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSrc")] != -1);
		return call<R>("getSrc", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUseMap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUseMap")] != -1);
		return call<R>("getUseMap", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getVspace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVspace")] != -1);
		return call<R>("getVspace", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAlign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAlign")] != -1);
		return call<R>("setAlign", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAlt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAlt")] != -1);
		return call<R>("setAlt", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBorder")] != -1);
		return call<R>("setBorder", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHeight")] != -1);
		return call<R>("setHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHspace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHspace")] != -1);
		return call<R>("setHspace", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIsMap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIsMap")] != -1);
		return call<R>("setIsMap", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLongDesc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLongDesc")] != -1);
		return call<R>("setLongDesc", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLowSrc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLowSrc")] != -1);
		return call<R>("setLowSrc", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setName")] != -1);
		return call<R>("setName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSrc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSrc")] != -1);
		return call<R>("setSrc", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUseMap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUseMap")] != -1);
		return call<R>("setUseMap", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVspace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVspace")] != -1);
		return call<R>("setVspace", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setWidth")] != -1);
		return call<R>("setWidth", std::forward<Args>(args)...);
	}

};

#endif
