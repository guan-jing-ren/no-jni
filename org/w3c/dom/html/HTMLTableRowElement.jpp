#ifndef org_w3c_dom_html_HTMLTableRowElement_HPP
#define org_w3c_dom_html_HTMLTableRowElement_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::html::HTMLTableRowElement : public jObject<::org::w3c::dom::html::HTMLTableRowElement, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_html / "HTMLTableRowElement";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::jint)>("deleteCell"), //
		jMethod<::java::lang::String()>("getAlign"), //
		jMethod<::java::lang::String()>("getBgColor"), //
		jMethod<::org::w3c::dom::html::HTMLCollection()>("getCells"), //
		jMethod<::java::lang::String()>("getCh"), //
		jMethod<::java::lang::String()>("getChOff"), //
		jMethod<::java::lang::String()>("getClassName"), //
		jMethod<::java::lang::String()>("getDir"), //
		jMethod<::java::lang::String()>("getId"), //
		jMethod<::java::lang::String()>("getLang"), //
		jMethod<::jint()>("getRowIndex"), //
		jMethod<::jint()>("getSectionRowIndex"), //
		jMethod<::java::lang::String()>("getTitle"), //
		jMethod<::java::lang::String()>("getVAlign"), //
		jMethod<::org::w3c::dom::html::HTMLElement(::jint)>("insertCell"), //
		jMethod<::jvoid(::java::lang::String)>("setAlign"), //
		jMethod<::jvoid(::java::lang::String)>("setBgColor"), //
		jMethod<::jvoid(::java::lang::String)>("setCh"), //
		jMethod<::jvoid(::java::lang::String)>("setChOff"), //
		jMethod<::jvoid(::java::lang::String)>("setClassName"), //
		jMethod<::jvoid(::java::lang::String)>("setDir"), //
		jMethod<::jvoid(::java::lang::String)>("setId"), //
		jMethod<::jvoid(::java::lang::String)>("setLang"), //
		jMethod<::jvoid(::java::lang::String)>("setTitle"), //
		jMethod<::jvoid(::java::lang::String)>("setVAlign"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto deleteCell(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deleteCell")] != -1);
		return call<R>("deleteCell", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAlign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlign")] != -1);
		return call<R>("getAlign", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBgColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBgColor")] != -1);
		return call<R>("getBgColor", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::html::HTMLCollection, typename... Args>
	auto getCells(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCells")] != -1);
		return call<R>("getCells", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCh(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCh")] != -1);
		return call<R>("getCh", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getChOff(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChOff")] != -1);
		return call<R>("getChOff", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getClassName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClassName")] != -1);
		return call<R>("getClassName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDir(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDir")] != -1);
		return call<R>("getDir", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getId")] != -1);
		return call<R>("getId", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLang(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLang")] != -1);
		return call<R>("getLang", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRowIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRowIndex")] != -1);
		return call<R>("getRowIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSectionRowIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSectionRowIndex")] != -1);
		return call<R>("getSectionRowIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTitle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTitle")] != -1);
		return call<R>("getTitle", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getVAlign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVAlign")] != -1);
		return call<R>("getVAlign", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::html::HTMLElement, typename... Args>
	auto insertCell(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insertCell")] != -1);
		return call<R>("insertCell", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAlign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAlign")] != -1);
		return call<R>("setAlign", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBgColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBgColor")] != -1);
		return call<R>("setBgColor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCh(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCh")] != -1);
		return call<R>("setCh", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setChOff(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setChOff")] != -1);
		return call<R>("setChOff", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setClassName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setClassName")] != -1);
		return call<R>("setClassName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDir(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDir")] != -1);
		return call<R>("setDir", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setId")] != -1);
		return call<R>("setId", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLang(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLang")] != -1);
		return call<R>("setLang", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTitle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTitle")] != -1);
		return call<R>("setTitle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVAlign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVAlign")] != -1);
		return call<R>("setVAlign", std::forward<Args>(args)...);
	}

};

#endif
