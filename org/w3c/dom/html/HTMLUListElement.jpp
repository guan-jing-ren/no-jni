#ifndef org_w3c_dom_html_HTMLUListElement_HPP
#define org_w3c_dom_html_HTMLUListElement_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::html::HTMLUListElement : public jObject<::org::w3c::dom::html::HTMLUListElement, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_html / "HTMLUListElement";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean()>("getCompact"), //
		jMethod<::java::lang::String()>("getType"), //
		jMethod<::jvoid(::jboolean)>("setCompact"), //
		jMethod<::jvoid(::java::lang::String)>("setType"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto getCompact(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCompact")] != -1);
		return call<R>("getCompact", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCompact(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCompact")] != -1);
		return call<R>("setCompact", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setType")] != -1);
		return call<R>("setType", forward<Args>(args)...);
	}

};

#endif
