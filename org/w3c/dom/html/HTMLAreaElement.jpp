#ifndef org_w3c_dom_html_HTMLAreaElement_HPP
#define org_w3c_dom_html_HTMLAreaElement_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::html::HTMLAreaElement : public jObject<::org::w3c::dom::html::HTMLAreaElement, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_html / "HTMLAreaElement";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getAccessKey"), //
		jMethod<::java::lang::String()>("getAlt"), //
		jMethod<::java::lang::String()>("getCoords"), //
		jMethod<::java::lang::String()>("getHref"), //
		jMethod<::jboolean()>("getNoHref"), //
		jMethod<::java::lang::String()>("getShape"), //
		jMethod<::jint()>("getTabIndex"), //
		jMethod<::java::lang::String()>("getTarget"), //
		jMethod<::jvoid(::java::lang::String)>("setAccessKey"), //
		jMethod<::jvoid(::java::lang::String)>("setAlt"), //
		jMethod<::jvoid(::java::lang::String)>("setCoords"), //
		jMethod<::jvoid(::java::lang::String)>("setHref"), //
		jMethod<::jvoid(::jboolean)>("setNoHref"), //
		jMethod<::jvoid(::java::lang::String)>("setShape"), //
		jMethod<::jvoid(::jint)>("setTabIndex"), //
		jMethod<::jvoid(::java::lang::String)>("setTarget"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getAccessKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessKey")] != -1);
		return call<R>("getAccessKey", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAlt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAlt")] != -1);
		return call<R>("getAlt", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCoords(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCoords")] != -1);
		return call<R>("getCoords", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHref(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHref")] != -1);
		return call<R>("getHref", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getNoHref(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNoHref")] != -1);
		return call<R>("getNoHref", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getShape(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getShape")] != -1);
		return call<R>("getShape", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTabIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTabIndex")] != -1);
		return call<R>("getTabIndex", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTarget")] != -1);
		return call<R>("getTarget", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAccessKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setAccessKey")] != -1);
		return call<R>("setAccessKey", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAlt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setAlt")] != -1);
		return call<R>("setAlt", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCoords(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCoords")] != -1);
		return call<R>("setCoords", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHref(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setHref")] != -1);
		return call<R>("setHref", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNoHref(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setNoHref")] != -1);
		return call<R>("setNoHref", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setShape(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setShape")] != -1);
		return call<R>("setShape", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTabIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setTabIndex")] != -1);
		return call<R>("setTabIndex", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setTarget")] != -1);
		return call<R>("setTarget", forward<Args>(args)...);
	}

};

#endif
