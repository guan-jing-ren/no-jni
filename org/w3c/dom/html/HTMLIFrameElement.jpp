#ifndef org_w3c_dom_html_HTMLIFrameElement_HPP
#define org_w3c_dom_html_HTMLIFrameElement_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::html::HTMLIFrameElement : public jObject<::org::w3c::dom::html::HTMLIFrameElement, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_html / "HTMLIFrameElement";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getAlign"), //
		jMethod<::java::lang::String()>("getClassName"), //
		jMethod<::org::w3c::dom::Document()>("getContentDocument"), //
		jMethod<::java::lang::String()>("getDir"), //
		jMethod<::java::lang::String()>("getFrameBorder"), //
		jMethod<::java::lang::String()>("getHeight"), //
		jMethod<::java::lang::String()>("getId"), //
		jMethod<::java::lang::String()>("getLang"), //
		jMethod<::java::lang::String()>("getLongDesc"), //
		jMethod<::java::lang::String()>("getMarginHeight"), //
		jMethod<::java::lang::String()>("getMarginWidth"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::lang::String()>("getScrolling"), //
		jMethod<::java::lang::String()>("getSrc"), //
		jMethod<::java::lang::String()>("getTitle"), //
		jMethod<::java::lang::String()>("getWidth"), //
		jMethod<::jvoid(::java::lang::String)>("setAlign"), //
		jMethod<::jvoid(::java::lang::String)>("setClassName"), //
		jMethod<::jvoid(::java::lang::String)>("setDir"), //
		jMethod<::jvoid(::java::lang::String)>("setFrameBorder"), //
		jMethod<::jvoid(::java::lang::String)>("setHeight"), //
		jMethod<::jvoid(::java::lang::String)>("setId"), //
		jMethod<::jvoid(::java::lang::String)>("setLang"), //
		jMethod<::jvoid(::java::lang::String)>("setLongDesc"), //
		jMethod<::jvoid(::java::lang::String)>("setMarginHeight"), //
		jMethod<::jvoid(::java::lang::String)>("setMarginWidth"), //
		jMethod<::jvoid(::java::lang::String)>("setName"), //
		jMethod<::jvoid(::java::lang::String)>("setScrolling"), //
		jMethod<::jvoid(::java::lang::String)>("setSrc"), //
		jMethod<::jvoid(::java::lang::String)>("setTitle"), //
		jMethod<::jvoid(::java::lang::String)>("setWidth"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getAlign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlign")] != -1);
		return call<R>("getAlign", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getClassName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClassName")] != -1);
		return call<R>("getClassName", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Document, typename... Args>
	auto getContentDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContentDocument")] != -1);
		return call<R>("getContentDocument", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDir(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDir")] != -1);
		return call<R>("getDir", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFrameBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFrameBorder")] != -1);
		return call<R>("getFrameBorder", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeight")] != -1);
		return call<R>("getHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getId")] != -1);
		return call<R>("getId", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLang(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLang")] != -1);
		return call<R>("getLang", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLongDesc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLongDesc")] != -1);
		return call<R>("getLongDesc", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMarginHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMarginHeight")] != -1);
		return call<R>("getMarginHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMarginWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMarginWidth")] != -1);
		return call<R>("getMarginWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getScrolling(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScrolling")] != -1);
		return call<R>("getScrolling", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSrc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSrc")] != -1);
		return call<R>("getSrc", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTitle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTitle")] != -1);
		return call<R>("getTitle", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAlign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAlign")] != -1);
		return call<R>("setAlign", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setClassName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setClassName")] != -1);
		return call<R>("setClassName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDir(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDir")] != -1);
		return call<R>("setDir", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFrameBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFrameBorder")] != -1);
		return call<R>("setFrameBorder", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHeight")] != -1);
		return call<R>("setHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setId")] != -1);
		return call<R>("setId", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLang(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLang")] != -1);
		return call<R>("setLang", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLongDesc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLongDesc")] != -1);
		return call<R>("setLongDesc", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMarginHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMarginHeight")] != -1);
		return call<R>("setMarginHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMarginWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMarginWidth")] != -1);
		return call<R>("setMarginWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setName")] != -1);
		return call<R>("setName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setScrolling(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setScrolling")] != -1);
		return call<R>("setScrolling", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSrc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSrc")] != -1);
		return call<R>("setSrc", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTitle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTitle")] != -1);
		return call<R>("setTitle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setWidth")] != -1);
		return call<R>("setWidth", std::forward<Args>(args)...);
	}

};

#endif
