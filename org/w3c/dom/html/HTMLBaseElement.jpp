#ifndef org_w3c_dom_html_HTMLBaseElement_HPP
#define org_w3c_dom_html_HTMLBaseElement_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::html::HTMLBaseElement : public jObject<::org::w3c::dom::html::HTMLBaseElement, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_html / "HTMLBaseElement";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getHref"), //
		jMethod<::java::lang::String()>("getTarget"), //
		jMethod<::jvoid(::java::lang::String)>("setHref"), //
		jMethod<::jvoid(::java::lang::String)>("setTarget"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getHref(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHref")] != -1);
		return call<R>("getHref", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTarget")] != -1);
		return call<R>("getTarget", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHref(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setHref")] != -1);
		return call<R>("setHref", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setTarget")] != -1);
		return call<R>("setTarget", forward<Args>(args)...);
	}

};

#endif
