#ifndef org_w3c_dom_html_HTMLLinkElement_HPP
#define org_w3c_dom_html_HTMLLinkElement_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::html::HTMLLinkElement : public jObject<::org::w3c::dom::html::HTMLLinkElement, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_html / "HTMLLinkElement";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getCharset"), //
		jMethod<::jboolean()>("getDisabled"), //
		jMethod<::java::lang::String()>("getHref"), //
		jMethod<::java::lang::String()>("getHreflang"), //
		jMethod<::java::lang::String()>("getMedia"), //
		jMethod<::java::lang::String()>("getRel"), //
		jMethod<::java::lang::String()>("getRev"), //
		jMethod<::java::lang::String()>("getTarget"), //
		jMethod<::java::lang::String()>("getType"), //
		jMethod<::jvoid(::java::lang::String)>("setCharset"), //
		jMethod<::jvoid(::jboolean)>("setDisabled"), //
		jMethod<::jvoid(::java::lang::String)>("setHref"), //
		jMethod<::jvoid(::java::lang::String)>("setHreflang"), //
		jMethod<::jvoid(::java::lang::String)>("setMedia"), //
		jMethod<::jvoid(::java::lang::String)>("setRel"), //
		jMethod<::jvoid(::java::lang::String)>("setRev"), //
		jMethod<::jvoid(::java::lang::String)>("setTarget"), //
		jMethod<::jvoid(::java::lang::String)>("setType"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getCharset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCharset")] != -1);
		return call<R>("getCharset", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getDisabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDisabled")] != -1);
		return call<R>("getDisabled", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHref(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHref")] != -1);
		return call<R>("getHref", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHreflang(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHreflang")] != -1);
		return call<R>("getHreflang", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMedia(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMedia")] != -1);
		return call<R>("getMedia", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRel")] != -1);
		return call<R>("getRel", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRev(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRev")] != -1);
		return call<R>("getRev", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTarget")] != -1);
		return call<R>("getTarget", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCharset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCharset")] != -1);
		return call<R>("setCharset", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDisabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDisabled")] != -1);
		return call<R>("setDisabled", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHref(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setHref")] != -1);
		return call<R>("setHref", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHreflang(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setHreflang")] != -1);
		return call<R>("setHreflang", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMedia(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMedia")] != -1);
		return call<R>("setMedia", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setRel")] != -1);
		return call<R>("setRel", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRev(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setRev")] != -1);
		return call<R>("setRev", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setTarget")] != -1);
		return call<R>("setTarget", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setType")] != -1);
		return call<R>("setType", forward<Args>(args)...);
	}

};

#endif
