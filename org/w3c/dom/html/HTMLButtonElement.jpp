#ifndef org_w3c_dom_html_HTMLButtonElement_HPP
#define org_w3c_dom_html_HTMLButtonElement_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::html::HTMLButtonElement : public jObject<::org::w3c::dom::html::HTMLButtonElement, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_html / "HTMLButtonElement";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getAccessKey"), //
		jMethod<::jboolean()>("getDisabled"), //
		jMethod<::org::w3c::dom::html::HTMLFormElement()>("getForm"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jint()>("getTabIndex"), //
		jMethod<::java::lang::String()>("getType"), //
		jMethod<::java::lang::String()>("getValue"), //
		jMethod<::jvoid(::java::lang::String)>("setAccessKey"), //
		jMethod<::jvoid(::jboolean)>("setDisabled"), //
		jMethod<::jvoid(::java::lang::String)>("setName"), //
		jMethod<::jvoid(::jint)>("setTabIndex"), //
		jMethod<::jvoid(::java::lang::String)>("setValue"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getAccessKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessKey")] != -1);
		return call<R>("getAccessKey", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getDisabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDisabled")] != -1);
		return call<R>("getDisabled", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::html::HTMLFormElement, typename... Args>
	auto getForm(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getForm")] != -1);
		return call<R>("getForm", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTabIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTabIndex")] != -1);
		return call<R>("getTabIndex", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAccessKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setAccessKey")] != -1);
		return call<R>("setAccessKey", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDisabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDisabled")] != -1);
		return call<R>("setDisabled", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setName")] != -1);
		return call<R>("setName", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTabIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setTabIndex")] != -1);
		return call<R>("setTabIndex", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setValue")] != -1);
		return call<R>("setValue", forward<Args>(args)...);
	}

};

#endif
