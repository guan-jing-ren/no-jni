#ifndef org_w3c_dom_html_HTMLObjectElement_HPP
#define org_w3c_dom_html_HTMLObjectElement_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::html::HTMLObjectElement : public jObject<::org::w3c::dom::html::HTMLObjectElement, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_html / "HTMLObjectElement";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getAlign"), //
		jMethod<::java::lang::String()>("getArchive"), //
		jMethod<::java::lang::String()>("getBorder"), //
		jMethod<::java::lang::String()>("getCode"), //
		jMethod<::java::lang::String()>("getCodeBase"), //
		jMethod<::java::lang::String()>("getCodeType"), //
		jMethod<::org::w3c::dom::Document()>("getContentDocument"), //
		jMethod<::java::lang::String()>("getData"), //
		jMethod<::jboolean()>("getDeclare"), //
		jMethod<::org::w3c::dom::html::HTMLFormElement()>("getForm"), //
		jMethod<::java::lang::String()>("getHeight"), //
		jMethod<::java::lang::String()>("getHspace"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::lang::String()>("getStandby"), //
		jMethod<::jint()>("getTabIndex"), //
		jMethod<::java::lang::String()>("getType"), //
		jMethod<::java::lang::String()>("getUseMap"), //
		jMethod<::java::lang::String()>("getVspace"), //
		jMethod<::java::lang::String()>("getWidth"), //
		jMethod<::jvoid(::java::lang::String)>("setAlign"), //
		jMethod<::jvoid(::java::lang::String)>("setArchive"), //
		jMethod<::jvoid(::java::lang::String)>("setBorder"), //
		jMethod<::jvoid(::java::lang::String)>("setCode"), //
		jMethod<::jvoid(::java::lang::String)>("setCodeBase"), //
		jMethod<::jvoid(::java::lang::String)>("setCodeType"), //
		jMethod<::jvoid(::java::lang::String)>("setData"), //
		jMethod<::jvoid(::jboolean)>("setDeclare"), //
		jMethod<::jvoid(::java::lang::String)>("setHeight"), //
		jMethod<::jvoid(::java::lang::String)>("setHspace"), //
		jMethod<::jvoid(::java::lang::String)>("setName"), //
		jMethod<::jvoid(::java::lang::String)>("setStandby"), //
		jMethod<::jvoid(::jint)>("setTabIndex"), //
		jMethod<::jvoid(::java::lang::String)>("setType"), //
		jMethod<::jvoid(::java::lang::String)>("setUseMap"), //
		jMethod<::jvoid(::java::lang::String)>("setVspace"), //
		jMethod<::jvoid(::java::lang::String)>("setWidth"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getAlign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAlign")] != -1);
		return call<R>("getAlign", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getArchive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getArchive")] != -1);
		return call<R>("getArchive", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBorder")] != -1);
		return call<R>("getBorder", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCode")] != -1);
		return call<R>("getCode", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCodeBase(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCodeBase")] != -1);
		return call<R>("getCodeBase", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCodeType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCodeType")] != -1);
		return call<R>("getCodeType", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Document, typename... Args>
	auto getContentDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getContentDocument")] != -1);
		return call<R>("getContentDocument", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getData")] != -1);
		return call<R>("getData", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getDeclare(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDeclare")] != -1);
		return call<R>("getDeclare", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::html::HTMLFormElement, typename... Args>
	auto getForm(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getForm")] != -1);
		return call<R>("getForm", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHeight")] != -1);
		return call<R>("getHeight", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHspace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHspace")] != -1);
		return call<R>("getHspace", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getStandby(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getStandby")] != -1);
		return call<R>("getStandby", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTabIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTabIndex")] != -1);
		return call<R>("getTabIndex", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUseMap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUseMap")] != -1);
		return call<R>("getUseMap", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getVspace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getVspace")] != -1);
		return call<R>("getVspace", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAlign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setAlign")] != -1);
		return call<R>("setAlign", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setArchive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setArchive")] != -1);
		return call<R>("setArchive", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBorder")] != -1);
		return call<R>("setBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCode")] != -1);
		return call<R>("setCode", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCodeBase(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCodeBase")] != -1);
		return call<R>("setCodeBase", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCodeType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCodeType")] != -1);
		return call<R>("setCodeType", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setData")] != -1);
		return call<R>("setData", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDeclare(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDeclare")] != -1);
		return call<R>("setDeclare", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setHeight")] != -1);
		return call<R>("setHeight", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHspace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setHspace")] != -1);
		return call<R>("setHspace", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setName")] != -1);
		return call<R>("setName", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setStandby(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setStandby")] != -1);
		return call<R>("setStandby", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTabIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setTabIndex")] != -1);
		return call<R>("setTabIndex", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setType")] != -1);
		return call<R>("setType", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUseMap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setUseMap")] != -1);
		return call<R>("setUseMap", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVspace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setVspace")] != -1);
		return call<R>("setVspace", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setWidth")] != -1);
		return call<R>("setWidth", forward<Args>(args)...);
	}

};

#endif
