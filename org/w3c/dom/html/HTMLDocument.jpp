#ifndef org_w3c_dom_html_HTMLDocument_HPP
#define org_w3c_dom_html_HTMLDocument_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::html::HTMLDocument : public jObject<::org::w3c::dom::html::HTMLDocument, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_html / "HTMLDocument";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("close"), //
		jMethod<::org::w3c::dom::html::HTMLCollection()>("getAnchors"), //
		jMethod<::org::w3c::dom::html::HTMLCollection()>("getApplets"), //
		jMethod<::org::w3c::dom::html::HTMLElement()>("getBody"), //
		jMethod<::java::lang::String()>("getCookie"), //
		jMethod<::java::lang::String()>("getDomain"), //
		jMethod<::org::w3c::dom::NodeList(::java::lang::String)>("getElementsByName"), //
		jMethod<::org::w3c::dom::html::HTMLCollection()>("getForms"), //
		jMethod<::org::w3c::dom::html::HTMLCollection()>("getImages"), //
		jMethod<::org::w3c::dom::html::HTMLCollection()>("getLinks"), //
		jMethod<::java::lang::String()>("getReferrer"), //
		jMethod<::java::lang::String()>("getTitle"), //
		jMethod<::java::lang::String()>("getURL"), //
		jMethod<::jvoid()>("open"), //
		jMethod<::jvoid(::org::w3c::dom::html::HTMLElement)>("setBody"), //
		jMethod<::jvoid(::java::lang::String)>("setCookie"), //
		jMethod<::jvoid(::java::lang::String)>("setTitle"), //
		jMethod<::jvoid(::java::lang::String)>("write"), //
		jMethod<::jvoid(::java::lang::String)>("writeln"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("close")] != -1);
		return call<R>("close", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::html::HTMLCollection, typename... Args>
	auto getAnchors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAnchors")] != -1);
		return call<R>("getAnchors", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::html::HTMLCollection, typename... Args>
	auto getApplets(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getApplets")] != -1);
		return call<R>("getApplets", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::html::HTMLElement, typename... Args>
	auto getBody(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBody")] != -1);
		return call<R>("getBody", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCookie(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCookie")] != -1);
		return call<R>("getCookie", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDomain(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDomain")] != -1);
		return call<R>("getDomain", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::NodeList, typename... Args>
	auto getElementsByName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getElementsByName")] != -1);
		return call<R>("getElementsByName", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::html::HTMLCollection, typename... Args>
	auto getForms(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getForms")] != -1);
		return call<R>("getForms", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::html::HTMLCollection, typename... Args>
	auto getImages(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getImages")] != -1);
		return call<R>("getImages", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::html::HTMLCollection, typename... Args>
	auto getLinks(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLinks")] != -1);
		return call<R>("getLinks", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getReferrer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getReferrer")] != -1);
		return call<R>("getReferrer", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTitle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTitle")] != -1);
		return call<R>("getTitle", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getURL(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getURL")] != -1);
		return call<R>("getURL", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto open(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("open")] != -1);
		return call<R>("open", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBody(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBody")] != -1);
		return call<R>("setBody", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCookie(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCookie")] != -1);
		return call<R>("setCookie", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTitle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setTitle")] != -1);
		return call<R>("setTitle", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write")] != -1);
		return call<R>("write", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeln(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeln")] != -1);
		return call<R>("writeln", forward<Args>(args)...);
	}

};

#endif
