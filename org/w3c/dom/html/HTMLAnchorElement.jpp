#ifndef org_w3c_dom_html_HTMLAnchorElement_HPP
#define org_w3c_dom_html_HTMLAnchorElement_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::html::HTMLAnchorElement : public jObject<::org::w3c::dom::html::HTMLAnchorElement, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_html / "HTMLAnchorElement";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("blur"), //
		jMethod<::jvoid()>("focus"), //
		jMethod<::java::lang::String()>("getAccessKey"), //
		jMethod<::java::lang::String()>("getCharset"), //
		jMethod<::java::lang::String()>("getCoords"), //
		jMethod<::java::lang::String()>("getHref"), //
		jMethod<::java::lang::String()>("getHreflang"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::lang::String()>("getRel"), //
		jMethod<::java::lang::String()>("getRev"), //
		jMethod<::java::lang::String()>("getShape"), //
		jMethod<::jint()>("getTabIndex"), //
		jMethod<::java::lang::String()>("getTarget"), //
		jMethod<::java::lang::String()>("getType"), //
		jMethod<::jvoid(::java::lang::String)>("setAccessKey"), //
		jMethod<::jvoid(::java::lang::String)>("setCharset"), //
		jMethod<::jvoid(::java::lang::String)>("setCoords"), //
		jMethod<::jvoid(::java::lang::String)>("setHref"), //
		jMethod<::jvoid(::java::lang::String)>("setHreflang"), //
		jMethod<::jvoid(::java::lang::String)>("setName"), //
		jMethod<::jvoid(::java::lang::String)>("setRel"), //
		jMethod<::jvoid(::java::lang::String)>("setRev"), //
		jMethod<::jvoid(::java::lang::String)>("setShape"), //
		jMethod<::jvoid(::jint)>("setTabIndex"), //
		jMethod<::jvoid(::java::lang::String)>("setTarget"), //
		jMethod<::jvoid(::java::lang::String)>("setType"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto blur(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("blur")] != -1);
		return call<R>("blur", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto focus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("focus")] != -1);
		return call<R>("focus", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAccessKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessKey")] != -1);
		return call<R>("getAccessKey", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCharset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCharset")] != -1);
		return call<R>("getCharset", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCoords(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCoords")] != -1);
		return call<R>("getCoords", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHref(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHref")] != -1);
		return call<R>("getHref", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHreflang(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHreflang")] != -1);
		return call<R>("getHreflang", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRel")] != -1);
		return call<R>("getRel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRev(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRev")] != -1);
		return call<R>("getRev", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getShape(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getShape")] != -1);
		return call<R>("getShape", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTabIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTabIndex")] != -1);
		return call<R>("getTabIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTarget")] != -1);
		return call<R>("getTarget", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAccessKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAccessKey")] != -1);
		return call<R>("setAccessKey", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCharset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCharset")] != -1);
		return call<R>("setCharset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCoords(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCoords")] != -1);
		return call<R>("setCoords", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHref(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHref")] != -1);
		return call<R>("setHref", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHreflang(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHreflang")] != -1);
		return call<R>("setHreflang", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setName")] != -1);
		return call<R>("setName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRel")] != -1);
		return call<R>("setRel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRev(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRev")] != -1);
		return call<R>("setRev", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setShape(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setShape")] != -1);
		return call<R>("setShape", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTabIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTabIndex")] != -1);
		return call<R>("setTabIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTarget")] != -1);
		return call<R>("setTarget", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setType")] != -1);
		return call<R>("setType", std::forward<Args>(args)...);
	}

};

#endif
