#ifndef org_w3c_dom_html_HTMLTableElement_HPP
#define org_w3c_dom_html_HTMLTableElement_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::html::HTMLTableElement : public jObject<::org::w3c::dom::html::HTMLTableElement, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_html / "HTMLTableElement";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::org::w3c::dom::html::HTMLElement()>("createCaption"), //
		jMethod<::org::w3c::dom::html::HTMLElement()>("createTFoot"), //
		jMethod<::org::w3c::dom::html::HTMLElement()>("createTHead"), //
		jMethod<::jvoid()>("deleteCaption"), //
		jMethod<::jvoid(::jint)>("deleteRow"), //
		jMethod<::jvoid()>("deleteTFoot"), //
		jMethod<::jvoid()>("deleteTHead"), //
		jMethod<::java::lang::String()>("getAlign"), //
		jMethod<::java::lang::String()>("getBgColor"), //
		jMethod<::java::lang::String()>("getBorder"), //
		jMethod<::org::w3c::dom::html::HTMLTableCaptionElement()>("getCaption"), //
		jMethod<::java::lang::String()>("getCellPadding"), //
		jMethod<::java::lang::String()>("getCellSpacing"), //
		jMethod<::java::lang::String()>("getFrame"), //
		jMethod<::org::w3c::dom::html::HTMLCollection()>("getRows"), //
		jMethod<::java::lang::String()>("getRules"), //
		jMethod<::java::lang::String()>("getSummary"), //
		jMethod<::org::w3c::dom::html::HTMLCollection()>("getTBodies"), //
		jMethod<::org::w3c::dom::html::HTMLTableSectionElement()>("getTFoot"), //
		jMethod<::org::w3c::dom::html::HTMLTableSectionElement()>("getTHead"), //
		jMethod<::java::lang::String()>("getWidth"), //
		jMethod<::org::w3c::dom::html::HTMLElement(::jint)>("insertRow"), //
		jMethod<::jvoid(::java::lang::String)>("setAlign"), //
		jMethod<::jvoid(::java::lang::String)>("setBgColor"), //
		jMethod<::jvoid(::java::lang::String)>("setBorder"), //
		jMethod<::jvoid(::org::w3c::dom::html::HTMLTableCaptionElement)>("setCaption"), //
		jMethod<::jvoid(::java::lang::String)>("setCellPadding"), //
		jMethod<::jvoid(::java::lang::String)>("setCellSpacing"), //
		jMethod<::jvoid(::java::lang::String)>("setFrame"), //
		jMethod<::jvoid(::java::lang::String)>("setRules"), //
		jMethod<::jvoid(::java::lang::String)>("setSummary"), //
		jMethod<::jvoid(::org::w3c::dom::html::HTMLTableSectionElement)>("setTFoot"), //
		jMethod<::jvoid(::org::w3c::dom::html::HTMLTableSectionElement)>("setTHead"), //
		jMethod<::jvoid(::java::lang::String)>("setWidth"), //
	};

	template<typename R = ::org::w3c::dom::html::HTMLElement, typename... Args>
	auto createCaption(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createCaption")] != -1);
		return call<R>("createCaption", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::html::HTMLElement, typename... Args>
	auto createTFoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createTFoot")] != -1);
		return call<R>("createTFoot", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::html::HTMLElement, typename... Args>
	auto createTHead(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createTHead")] != -1);
		return call<R>("createTHead", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deleteCaption(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deleteCaption")] != -1);
		return call<R>("deleteCaption", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deleteRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deleteRow")] != -1);
		return call<R>("deleteRow", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deleteTFoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deleteTFoot")] != -1);
		return call<R>("deleteTFoot", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deleteTHead(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deleteTHead")] != -1);
		return call<R>("deleteTHead", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAlign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlign")] != -1);
		return call<R>("getAlign", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBgColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBgColor")] != -1);
		return call<R>("getBgColor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorder")] != -1);
		return call<R>("getBorder", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::html::HTMLTableCaptionElement, typename... Args>
	auto getCaption(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCaption")] != -1);
		return call<R>("getCaption", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCellPadding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCellPadding")] != -1);
		return call<R>("getCellPadding", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCellSpacing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCellSpacing")] != -1);
		return call<R>("getCellSpacing", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFrame(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFrame")] != -1);
		return call<R>("getFrame", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::html::HTMLCollection, typename... Args>
	auto getRows(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRows")] != -1);
		return call<R>("getRows", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRules(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRules")] != -1);
		return call<R>("getRules", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSummary(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSummary")] != -1);
		return call<R>("getSummary", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::html::HTMLCollection, typename... Args>
	auto getTBodies(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTBodies")] != -1);
		return call<R>("getTBodies", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::html::HTMLTableSectionElement, typename... Args>
	auto getTFoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTFoot")] != -1);
		return call<R>("getTFoot", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::html::HTMLTableSectionElement, typename... Args>
	auto getTHead(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTHead")] != -1);
		return call<R>("getTHead", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::html::HTMLElement, typename... Args>
	auto insertRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insertRow")] != -1);
		return call<R>("insertRow", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAlign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAlign")] != -1);
		return call<R>("setAlign", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBgColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBgColor")] != -1);
		return call<R>("setBgColor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBorder")] != -1);
		return call<R>("setBorder", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCaption(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCaption")] != -1);
		return call<R>("setCaption", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCellPadding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCellPadding")] != -1);
		return call<R>("setCellPadding", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCellSpacing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCellSpacing")] != -1);
		return call<R>("setCellSpacing", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFrame(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFrame")] != -1);
		return call<R>("setFrame", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRules(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRules")] != -1);
		return call<R>("setRules", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSummary(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSummary")] != -1);
		return call<R>("setSummary", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTFoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTFoot")] != -1);
		return call<R>("setTFoot", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTHead(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTHead")] != -1);
		return call<R>("setTHead", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setWidth")] != -1);
		return call<R>("setWidth", std::forward<Args>(args)...);
	}

};

#endif
