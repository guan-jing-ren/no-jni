#ifndef org_w3c_dom_html_HTMLFontElement_HPP
#define org_w3c_dom_html_HTMLFontElement_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::html::HTMLFontElement : public jObject<::org::w3c::dom::html::HTMLFontElement, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_html / "HTMLFontElement";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getColor"), //
		jMethod<::java::lang::String()>("getFace"), //
		jMethod<::java::lang::String()>("getSize"), //
		jMethod<::jvoid(::java::lang::String)>("setColor"), //
		jMethod<::jvoid(::java::lang::String)>("setFace"), //
		jMethod<::jvoid(::java::lang::String)>("setSize"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColor")] != -1);
		return call<R>("getColor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFace")] != -1);
		return call<R>("getFace", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return call<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setColor")] != -1);
		return call<R>("setColor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFace")] != -1);
		return call<R>("setFace", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSize")] != -1);
		return call<R>("setSize", std::forward<Args>(args)...);
	}

};

#endif
