#ifndef org_w3c_dom_html_HTMLOptGroupElement_HPP
#define org_w3c_dom_html_HTMLOptGroupElement_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::html::HTMLOptGroupElement : public jObject<::org::w3c::dom::html::HTMLOptGroupElement, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_html / "HTMLOptGroupElement";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean()>("getDisabled"), //
		jMethod<::java::lang::String()>("getLabel"), //
		jMethod<::jvoid(::jboolean)>("setDisabled"), //
		jMethod<::jvoid(::java::lang::String)>("setLabel"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto getDisabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDisabled")] != -1);
		return call<R>("getDisabled", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLabel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLabel")] != -1);
		return call<R>("getLabel", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDisabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDisabled")] != -1);
		return call<R>("setDisabled", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLabel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLabel")] != -1);
		return call<R>("setLabel", forward<Args>(args)...);
	}

};

#endif
