#ifndef org_w3c_dom_html_HTMLInputElement_HPP
#define org_w3c_dom_html_HTMLInputElement_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::html::HTMLInputElement : public jObject<::org::w3c::dom::html::HTMLInputElement, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_html / "HTMLInputElement";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("blur"), //
		jMethod<::jvoid()>("click"), //
		jMethod<::jvoid()>("focus"), //
		jMethod<::java::lang::String()>("getAccept"), //
		jMethod<::java::lang::String()>("getAccessKey"), //
		jMethod<::java::lang::String()>("getAlign"), //
		jMethod<::java::lang::String()>("getAlt"), //
		jMethod<::jboolean()>("getChecked"), //
		jMethod<::java::lang::String()>("getClassName"), //
		jMethod<::jboolean()>("getDefaultChecked"), //
		jMethod<::java::lang::String()>("getDefaultValue"), //
		jMethod<::java::lang::String()>("getDir"), //
		jMethod<::jboolean()>("getDisabled"), //
		jMethod<::org::w3c::dom::html::HTMLFormElement()>("getForm"), //
		jMethod<::java::lang::String()>("getId"), //
		jMethod<::java::lang::String()>("getLang"), //
		jMethod<::jint()>("getMaxLength"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jboolean()>("getReadOnly"), //
		jMethod<::java::lang::String()>("getSize"), //
		jMethod<::java::lang::String()>("getSrc"), //
		jMethod<::jint()>("getTabIndex"), //
		jMethod<::java::lang::String()>("getTitle"), //
		jMethod<::java::lang::String()>("getType"), //
		jMethod<::java::lang::String()>("getUseMap"), //
		jMethod<::java::lang::String()>("getValue"), //
		jMethod<::jvoid()>("select"), //
		jMethod<::jvoid(::java::lang::String)>("setAccept"), //
		jMethod<::jvoid(::java::lang::String)>("setAccessKey"), //
		jMethod<::jvoid(::java::lang::String)>("setAlign"), //
		jMethod<::jvoid(::java::lang::String)>("setAlt"), //
		jMethod<::jvoid(::jboolean)>("setChecked"), //
		jMethod<::jvoid(::java::lang::String)>("setClassName"), //
		jMethod<::jvoid(::jboolean)>("setDefaultChecked"), //
		jMethod<::jvoid(::java::lang::String)>("setDefaultValue"), //
		jMethod<::jvoid(::java::lang::String)>("setDir"), //
		jMethod<::jvoid(::jboolean)>("setDisabled"), //
		jMethod<::jvoid(::java::lang::String)>("setId"), //
		jMethod<::jvoid(::java::lang::String)>("setLang"), //
		jMethod<::jvoid(::jint)>("setMaxLength"), //
		jMethod<::jvoid(::java::lang::String)>("setName"), //
		jMethod<::jvoid(::jboolean)>("setReadOnly"), //
		jMethod<::jvoid(::java::lang::String)>("setSize"), //
		jMethod<::jvoid(::java::lang::String)>("setSrc"), //
		jMethod<::jvoid(::jint)>("setTabIndex"), //
		jMethod<::jvoid(::java::lang::String)>("setTitle"), //
		jMethod<::jvoid(::java::lang::String)>("setUseMap"), //
		jMethod<::jvoid(::java::lang::String)>("setValue"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto blur(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("blur")] != -1);
		return call<R>("blur", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto click(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("click")] != -1);
		return call<R>("click", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto focus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("focus")] != -1);
		return call<R>("focus", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAccept(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccept")] != -1);
		return call<R>("getAccept", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAccessKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessKey")] != -1);
		return call<R>("getAccessKey", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAlign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlign")] != -1);
		return call<R>("getAlign", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAlt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlt")] != -1);
		return call<R>("getAlt", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getChecked(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChecked")] != -1);
		return call<R>("getChecked", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getClassName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClassName")] != -1);
		return call<R>("getClassName", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getDefaultChecked(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultChecked")] != -1);
		return call<R>("getDefaultChecked", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDefaultValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultValue")] != -1);
		return call<R>("getDefaultValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDir(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDir")] != -1);
		return call<R>("getDir", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getDisabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisabled")] != -1);
		return call<R>("getDisabled", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::html::HTMLFormElement, typename... Args>
	auto getForm(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getForm")] != -1);
		return call<R>("getForm", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getId")] != -1);
		return call<R>("getId", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLang(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLang")] != -1);
		return call<R>("getLang", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaxLength")] != -1);
		return call<R>("getMaxLength", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getReadOnly(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReadOnly")] != -1);
		return call<R>("getReadOnly", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return call<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSrc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSrc")] != -1);
		return call<R>("getSrc", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTabIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTabIndex")] != -1);
		return call<R>("getTabIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTitle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTitle")] != -1);
		return call<R>("getTitle", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUseMap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUseMap")] != -1);
		return call<R>("getUseMap", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto select(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("select")] != -1);
		return call<R>("select", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAccept(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAccept")] != -1);
		return call<R>("setAccept", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAccessKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAccessKey")] != -1);
		return call<R>("setAccessKey", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAlign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAlign")] != -1);
		return call<R>("setAlign", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAlt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAlt")] != -1);
		return call<R>("setAlt", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setChecked(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setChecked")] != -1);
		return call<R>("setChecked", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setClassName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setClassName")] != -1);
		return call<R>("setClassName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDefaultChecked(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDefaultChecked")] != -1);
		return call<R>("setDefaultChecked", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDefaultValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDefaultValue")] != -1);
		return call<R>("setDefaultValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDir(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDir")] != -1);
		return call<R>("setDir", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDisabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDisabled")] != -1);
		return call<R>("setDisabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setId")] != -1);
		return call<R>("setId", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLang(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLang")] != -1);
		return call<R>("setLang", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaxLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMaxLength")] != -1);
		return call<R>("setMaxLength", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setName")] != -1);
		return call<R>("setName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setReadOnly(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setReadOnly")] != -1);
		return call<R>("setReadOnly", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSize")] != -1);
		return call<R>("setSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSrc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSrc")] != -1);
		return call<R>("setSrc", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTabIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTabIndex")] != -1);
		return call<R>("setTabIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTitle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTitle")] != -1);
		return call<R>("setTitle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUseMap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUseMap")] != -1);
		return call<R>("setUseMap", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setValue")] != -1);
		return call<R>("setValue", std::forward<Args>(args)...);
	}

};

#endif
