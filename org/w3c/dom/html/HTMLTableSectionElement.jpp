#ifndef org_w3c_dom_html_HTMLTableSectionElement_HPP
#define org_w3c_dom_html_HTMLTableSectionElement_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::html::HTMLTableSectionElement : public jObject<::org::w3c::dom::html::HTMLTableSectionElement, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_html / "HTMLTableSectionElement";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::jint)>("deleteRow"), //
		jMethod<::java::lang::String()>("getAlign"), //
		jMethod<::java::lang::String()>("getCh"), //
		jMethod<::java::lang::String()>("getChOff"), //
		jMethod<::org::w3c::dom::html::HTMLCollection()>("getRows"), //
		jMethod<::java::lang::String()>("getVAlign"), //
		jMethod<::org::w3c::dom::html::HTMLElement(::jint)>("insertRow"), //
		jMethod<::jvoid(::java::lang::String)>("setAlign"), //
		jMethod<::jvoid(::java::lang::String)>("setCh"), //
		jMethod<::jvoid(::java::lang::String)>("setChOff"), //
		jMethod<::jvoid(::java::lang::String)>("setVAlign"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto deleteRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("deleteRow")] != -1);
		return call<R>("deleteRow", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAlign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAlign")] != -1);
		return call<R>("getAlign", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCh(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCh")] != -1);
		return call<R>("getCh", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getChOff(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getChOff")] != -1);
		return call<R>("getChOff", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::html::HTMLCollection, typename... Args>
	auto getRows(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRows")] != -1);
		return call<R>("getRows", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getVAlign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getVAlign")] != -1);
		return call<R>("getVAlign", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::html::HTMLElement, typename... Args>
	auto insertRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("insertRow")] != -1);
		return call<R>("insertRow", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAlign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setAlign")] != -1);
		return call<R>("setAlign", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCh(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCh")] != -1);
		return call<R>("setCh", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setChOff(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setChOff")] != -1);
		return call<R>("setChOff", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVAlign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setVAlign")] != -1);
		return call<R>("setVAlign", forward<Args>(args)...);
	}

};

#endif
