#ifndef org_w3c_dom_html_HTMLModElement_HPP
#define org_w3c_dom_html_HTMLModElement_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::html::HTMLModElement : public jObject<::org::w3c::dom::html::HTMLModElement, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_html / "HTMLModElement";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getCite"), //
		jMethod<::java::lang::String()>("getDateTime"), //
		jMethod<::jvoid(::java::lang::String)>("setCite"), //
		jMethod<::jvoid(::java::lang::String)>("setDateTime"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getCite(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCite")] != -1);
		return call<R>("getCite", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDateTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDateTime")] != -1);
		return call<R>("getDateTime", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCite(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCite")] != -1);
		return call<R>("setCite", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDateTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDateTime")] != -1);
		return call<R>("setDateTime", forward<Args>(args)...);
	}

};

#endif
