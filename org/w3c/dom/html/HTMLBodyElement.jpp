#ifndef org_w3c_dom_html_HTMLBodyElement_HPP
#define org_w3c_dom_html_HTMLBodyElement_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::html::HTMLBodyElement : public jObject<::org::w3c::dom::html::HTMLBodyElement, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_html / "HTMLBodyElement";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getALink"), //
		jMethod<::java::lang::String()>("getBackground"), //
		jMethod<::java::lang::String()>("getBgColor"), //
		jMethod<::java::lang::String()>("getLink"), //
		jMethod<::java::lang::String()>("getText"), //
		jMethod<::java::lang::String()>("getVLink"), //
		jMethod<::jvoid(::java::lang::String)>("setALink"), //
		jMethod<::jvoid(::java::lang::String)>("setBackground"), //
		jMethod<::jvoid(::java::lang::String)>("setBgColor"), //
		jMethod<::jvoid(::java::lang::String)>("setLink"), //
		jMethod<::jvoid(::java::lang::String)>("setText"), //
		jMethod<::jvoid(::java::lang::String)>("setVLink"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getALink(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getALink")] != -1);
		return call<R>("getALink", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBackground")] != -1);
		return call<R>("getBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBgColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBgColor")] != -1);
		return call<R>("getBgColor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLink(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLink")] != -1);
		return call<R>("getLink", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getText")] != -1);
		return call<R>("getText", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getVLink(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVLink")] != -1);
		return call<R>("getVLink", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setALink(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setALink")] != -1);
		return call<R>("setALink", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBackground")] != -1);
		return call<R>("setBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBgColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBgColor")] != -1);
		return call<R>("setBgColor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLink(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLink")] != -1);
		return call<R>("setLink", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setText")] != -1);
		return call<R>("setText", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVLink(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVLink")] != -1);
		return call<R>("setVLink", std::forward<Args>(args)...);
	}

};

#endif
