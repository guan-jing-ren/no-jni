#ifndef org_w3c_dom_Document_HPP
#define org_w3c_dom_Document_HPP

#include "../../../jfwd_decl.hpp"

class ::org::w3c::dom::Document : public jObject<::org::w3c::dom::Document, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom / "Document";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::org::w3c::dom::Node(::org::w3c::dom::Node)>("adoptNode"), //
		jMethod<::org::w3c::dom::Node(::org::w3c::dom::Node)>("appendChild"), //
		jMethod<::org::w3c::dom::Node(::jboolean)>("cloneNode"), //
		jMethod<::jshort(::org::w3c::dom::Node)>("compareDocumentPosition"), //
		jMethod<::org::w3c::dom::Attr(::java::lang::String)>("createAttribute"), //
		jMethod<::org::w3c::dom::Attr(::java::lang::String, ::java::lang::String)>("createAttributeNS"), //
		jMethod<::org::w3c::dom::CDATASection(::java::lang::String)>("createCDATASection"), //
		jMethod<::org::w3c::dom::Comment(::java::lang::String)>("createComment"), //
		jMethod<::org::w3c::dom::DocumentFragment()>("createDocumentFragment"), //
		jMethod<::org::w3c::dom::Element(::java::lang::String)>("createElement"), //
		jMethod<::org::w3c::dom::Element(::java::lang::String, ::java::lang::String)>("createElementNS"), //
		jMethod<::org::w3c::dom::EntityReference(::java::lang::String)>("createEntityReference"), //
		jMethod<::org::w3c::dom::ProcessingInstruction(::java::lang::String, ::java::lang::String)>("createProcessingInstruction"), //
		jMethod<::org::w3c::dom::Text(::java::lang::String)>("createTextNode"), //
		jMethod<::org::w3c::dom::NamedNodeMap()>("getAttributes"), //
		jMethod<::java::lang::String()>("getBaseURI"), //
		jMethod<::org::w3c::dom::NodeList()>("getChildNodes"), //
		jMethod<::org::w3c::dom::DocumentType()>("getDoctype"), //
		jMethod<::org::w3c::dom::Element()>("getDocumentElement"), //
		jMethod<::java::lang::String()>("getDocumentURI"), //
		jMethod<::org::w3c::dom::DOMConfiguration()>("getDomConfig"), //
		jMethod<::org::w3c::dom::Element(::java::lang::String)>("getElementById"), //
		jMethod<::org::w3c::dom::NodeList(::java::lang::String)>("getElementsByTagName"), //
		jMethod<::org::w3c::dom::NodeList(::java::lang::String, ::java::lang::String)>("getElementsByTagNameNS"), //
		jMethod<::java::lang::Object(::java::lang::String, ::java::lang::String)>("getFeature"), //
		jMethod<::org::w3c::dom::Node()>("getFirstChild"), //
		jMethod<::org::w3c::dom::DOMImplementation()>("getImplementation"), //
		jMethod<::java::lang::String()>("getInputEncoding"), //
		jMethod<::org::w3c::dom::Node()>("getLastChild"), //
		jMethod<::java::lang::String()>("getLocalName"), //
		jMethod<::java::lang::String()>("getNamespaceURI"), //
		jMethod<::org::w3c::dom::Node()>("getNextSibling"), //
		jMethod<::java::lang::String()>("getNodeName"), //
		jMethod<::jshort()>("getNodeType"), //
		jMethod<::java::lang::String()>("getNodeValue"), //
		jMethod<::org::w3c::dom::Document()>("getOwnerDocument"), //
		jMethod<::org::w3c::dom::Node()>("getParentNode"), //
		jMethod<::java::lang::String()>("getPrefix"), //
		jMethod<::org::w3c::dom::Node()>("getPreviousSibling"), //
		jMethod<::jboolean()>("getStrictErrorChecking"), //
		jMethod<::java::lang::String()>("getTextContent"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getUserData"), //
		jMethod<::java::lang::String()>("getXmlEncoding"), //
		jMethod<::jboolean()>("getXmlStandalone"), //
		jMethod<::java::lang::String()>("getXmlVersion"), //
		jMethod<::jboolean()>("hasAttributes"), //
		jMethod<::jboolean()>("hasChildNodes"), //
		jMethod<::org::w3c::dom::Node(::org::w3c::dom::Node, ::jboolean)>("importNode"), //
		jMethod<::org::w3c::dom::Node(::org::w3c::dom::Node, ::org::w3c::dom::Node)>("insertBefore"), //
		jMethod<::jboolean(::java::lang::String)>("isDefaultNamespace"), //
		jMethod<::jboolean(::org::w3c::dom::Node)>("isEqualNode"), //
		jMethod<::jboolean(::org::w3c::dom::Node)>("isSameNode"), //
		jMethod<::jboolean(::java::lang::String, ::java::lang::String)>("isSupported"), //
		jMethod<::java::lang::String(::java::lang::String)>("lookupNamespaceURI"), //
		jMethod<::java::lang::String(::java::lang::String)>("lookupPrefix"), //
		jMethod<::jvoid()>("normalize"), //
		jMethod<::jvoid()>("normalizeDocument"), //
		jMethod<::org::w3c::dom::Node(::org::w3c::dom::Node)>("removeChild"), //
		jMethod<::org::w3c::dom::Node(::org::w3c::dom::Node, ::java::lang::String, ::java::lang::String)>("renameNode"), //
		jMethod<::org::w3c::dom::Node(::org::w3c::dom::Node, ::org::w3c::dom::Node)>("replaceChild"), //
		jMethod<::jvoid(::java::lang::String)>("setDocumentURI"), //
		jMethod<::jvoid(::java::lang::String)>("setNodeValue"), //
		jMethod<::jvoid(::java::lang::String)>("setPrefix"), //
		jMethod<::jvoid(::jboolean)>("setStrictErrorChecking"), //
		jMethod<::jvoid(::java::lang::String)>("setTextContent"), //
		jMethod<::java::lang::Object(::java::lang::String, ::java::lang::Object, ::org::w3c::dom::UserDataHandler)>("setUserData"), //
		jMethod<::jvoid(::jboolean)>("setXmlStandalone"), //
		jMethod<::jvoid(::java::lang::String)>("setXmlVersion"), //
	};

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto adoptNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("adoptNode")] != -1);
		return call<R>("adoptNode", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto appendChild(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("appendChild")] != -1);
		return call<R>("appendChild", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto cloneNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cloneNode")] != -1);
		return call<R>("cloneNode", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto compareDocumentPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compareDocumentPosition")] != -1);
		return call<R>("compareDocumentPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Attr, typename... Args>
	auto createAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createAttribute")] != -1);
		return call<R>("createAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Attr, typename... Args>
	auto createAttributeNS(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createAttributeNS")] != -1);
		return call<R>("createAttributeNS", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::CDATASection, typename... Args>
	auto createCDATASection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createCDATASection")] != -1);
		return call<R>("createCDATASection", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Comment, typename... Args>
	auto createComment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createComment")] != -1);
		return call<R>("createComment", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::DocumentFragment, typename... Args>
	auto createDocumentFragment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createDocumentFragment")] != -1);
		return call<R>("createDocumentFragment", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Element, typename... Args>
	auto createElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createElement")] != -1);
		return call<R>("createElement", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Element, typename... Args>
	auto createElementNS(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createElementNS")] != -1);
		return call<R>("createElementNS", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::EntityReference, typename... Args>
	auto createEntityReference(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createEntityReference")] != -1);
		return call<R>("createEntityReference", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::ProcessingInstruction, typename... Args>
	auto createProcessingInstruction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createProcessingInstruction")] != -1);
		return call<R>("createProcessingInstruction", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Text, typename... Args>
	auto createTextNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createTextNode")] != -1);
		return call<R>("createTextNode", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::NamedNodeMap, typename... Args>
	auto getAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributes")] != -1);
		return call<R>("getAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBaseURI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBaseURI")] != -1);
		return call<R>("getBaseURI", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::NodeList, typename... Args>
	auto getChildNodes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChildNodes")] != -1);
		return call<R>("getChildNodes", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::DocumentType, typename... Args>
	auto getDoctype(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDoctype")] != -1);
		return call<R>("getDoctype", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Element, typename... Args>
	auto getDocumentElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDocumentElement")] != -1);
		return call<R>("getDocumentElement", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDocumentURI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDocumentURI")] != -1);
		return call<R>("getDocumentURI", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::DOMConfiguration, typename... Args>
	auto getDomConfig(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDomConfig")] != -1);
		return call<R>("getDomConfig", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Element, typename... Args>
	auto getElementById(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getElementById")] != -1);
		return call<R>("getElementById", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::NodeList, typename... Args>
	auto getElementsByTagName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getElementsByTagName")] != -1);
		return call<R>("getElementsByTagName", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::NodeList, typename... Args>
	auto getElementsByTagNameNS(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getElementsByTagNameNS")] != -1);
		return call<R>("getElementsByTagNameNS", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getFeature(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFeature")] != -1);
		return call<R>("getFeature", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto getFirstChild(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFirstChild")] != -1);
		return call<R>("getFirstChild", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::DOMImplementation, typename... Args>
	auto getImplementation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getImplementation")] != -1);
		return call<R>("getImplementation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getInputEncoding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInputEncoding")] != -1);
		return call<R>("getInputEncoding", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto getLastChild(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLastChild")] != -1);
		return call<R>("getLastChild", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLocalName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalName")] != -1);
		return call<R>("getLocalName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNamespaceURI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNamespaceURI")] != -1);
		return call<R>("getNamespaceURI", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto getNextSibling(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNextSibling")] != -1);
		return call<R>("getNextSibling", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNodeName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNodeName")] != -1);
		return call<R>("getNodeName", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto getNodeType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNodeType")] != -1);
		return call<R>("getNodeType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNodeValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNodeValue")] != -1);
		return call<R>("getNodeValue", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Document, typename... Args>
	auto getOwnerDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOwnerDocument")] != -1);
		return call<R>("getOwnerDocument", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto getParentNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParentNode")] != -1);
		return call<R>("getParentNode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPrefix(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrefix")] != -1);
		return call<R>("getPrefix", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto getPreviousSibling(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreviousSibling")] != -1);
		return call<R>("getPreviousSibling", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getStrictErrorChecking(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStrictErrorChecking")] != -1);
		return call<R>("getStrictErrorChecking", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTextContent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextContent")] != -1);
		return call<R>("getTextContent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getUserData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUserData")] != -1);
		return call<R>("getUserData", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getXmlEncoding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getXmlEncoding")] != -1);
		return call<R>("getXmlEncoding", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getXmlStandalone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getXmlStandalone")] != -1);
		return call<R>("getXmlStandalone", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getXmlVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getXmlVersion")] != -1);
		return call<R>("getXmlVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasAttributes")] != -1);
		return call<R>("hasAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasChildNodes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasChildNodes")] != -1);
		return call<R>("hasChildNodes", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto importNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("importNode")] != -1);
		return call<R>("importNode", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto insertBefore(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insertBefore")] != -1);
		return call<R>("insertBefore", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDefaultNamespace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDefaultNamespace")] != -1);
		return call<R>("isDefaultNamespace", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEqualNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEqualNode")] != -1);
		return call<R>("isEqualNode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSameNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSameNode")] != -1);
		return call<R>("isSameNode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSupported")] != -1);
		return call<R>("isSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto lookupNamespaceURI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lookupNamespaceURI")] != -1);
		return call<R>("lookupNamespaceURI", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto lookupPrefix(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lookupPrefix")] != -1);
		return call<R>("lookupPrefix", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto normalize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("normalize")] != -1);
		return call<R>("normalize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto normalizeDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("normalizeDocument")] != -1);
		return call<R>("normalizeDocument", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto removeChild(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeChild")] != -1);
		return call<R>("removeChild", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto renameNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("renameNode")] != -1);
		return call<R>("renameNode", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto replaceChild(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("replaceChild")] != -1);
		return call<R>("replaceChild", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDocumentURI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDocumentURI")] != -1);
		return call<R>("setDocumentURI", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNodeValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNodeValue")] != -1);
		return call<R>("setNodeValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPrefix(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPrefix")] != -1);
		return call<R>("setPrefix", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setStrictErrorChecking(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setStrictErrorChecking")] != -1);
		return call<R>("setStrictErrorChecking", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTextContent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTextContent")] != -1);
		return call<R>("setTextContent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto setUserData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUserData")] != -1);
		return call<R>("setUserData", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setXmlStandalone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setXmlStandalone")] != -1);
		return call<R>("setXmlStandalone", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setXmlVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setXmlVersion")] != -1);
		return call<R>("setXmlVersion", std::forward<Args>(args)...);
	}

};

#endif
