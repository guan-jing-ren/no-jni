#ifndef org_w3c_dom_Entity_HPP
#define org_w3c_dom_Entity_HPP

#include "../../../jfwd_decl.hpp"

class ::org::w3c::dom::Entity : public jObject<::org::w3c::dom::Entity, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom / "Entity";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getInputEncoding"), //
		jMethod<::java::lang::String()>("getNotationName"), //
		jMethod<::java::lang::String()>("getPublicId"), //
		jMethod<::java::lang::String()>("getSystemId"), //
		jMethod<::java::lang::String()>("getXmlEncoding"), //
		jMethod<::java::lang::String()>("getXmlVersion"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getInputEncoding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInputEncoding")] != -1);
		return call<R>("getInputEncoding", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNotationName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNotationName")] != -1);
		return call<R>("getNotationName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPublicId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPublicId")] != -1);
		return call<R>("getPublicId", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSystemId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSystemId")] != -1);
		return call<R>("getSystemId", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getXmlEncoding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getXmlEncoding")] != -1);
		return call<R>("getXmlEncoding", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getXmlVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getXmlVersion")] != -1);
		return call<R>("getXmlVersion", forward<Args>(args)...);
	}

};

#endif
