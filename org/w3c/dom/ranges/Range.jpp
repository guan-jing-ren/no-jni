#ifndef org_w3c_dom_ranges_Range_HPP
#define org_w3c_dom_ranges_Range_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::ranges::Range : public jObject<::org::w3c::dom::ranges::Range, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_ranges / "Range";

	constexpr static Enume field_signatures{
		jField<::jshort>("END_TO_END"), //
		jField<::jshort>("END_TO_START"), //
		jField<::jshort>("START_TO_END"), //
		jField<::jshort>("START_TO_START"), //
	};

	template<typename F = ::jshort>
	static auto END_TO_END() {
		static_assert(field_signatures[jField<F>("END_TO_END")] != -1);
		return sat<F>("END_TO_END");
	}

	template<typename F = ::jshort>
	static auto END_TO_START() {
		static_assert(field_signatures[jField<F>("END_TO_START")] != -1);
		return sat<F>("END_TO_START");
	}

	template<typename F = ::jshort>
	static auto START_TO_END() {
		static_assert(field_signatures[jField<F>("START_TO_END")] != -1);
		return sat<F>("START_TO_END");
	}

	template<typename F = ::jshort>
	static auto START_TO_START() {
		static_assert(field_signatures[jField<F>("START_TO_START")] != -1);
		return sat<F>("START_TO_START");
	}

	constexpr static Enume method_signatures{
		jMethod<::org::w3c::dom::DocumentFragment()>("cloneContents"), //
		jMethod<::org::w3c::dom::ranges::Range()>("cloneRange"), //
		jMethod<::jvoid(::jboolean)>("collapse"), //
		jMethod<::jshort(::jshort, ::org::w3c::dom::ranges::Range)>("compareBoundaryPoints"), //
		jMethod<::jvoid()>("deleteContents"), //
		jMethod<::jvoid()>("detach"), //
		jMethod<::org::w3c::dom::DocumentFragment()>("extractContents"), //
		jMethod<::jboolean()>("getCollapsed"), //
		jMethod<::org::w3c::dom::Node()>("getCommonAncestorContainer"), //
		jMethod<::org::w3c::dom::Node()>("getEndContainer"), //
		jMethod<::jint()>("getEndOffset"), //
		jMethod<::org::w3c::dom::Node()>("getStartContainer"), //
		jMethod<::jint()>("getStartOffset"), //
		jMethod<::jvoid(::org::w3c::dom::Node)>("insertNode"), //
		jMethod<::jvoid(::org::w3c::dom::Node)>("selectNode"), //
		jMethod<::jvoid(::org::w3c::dom::Node)>("selectNodeContents"), //
		jMethod<::jvoid(::org::w3c::dom::Node, ::jint)>("setEnd"), //
		jMethod<::jvoid(::org::w3c::dom::Node)>("setEndAfter"), //
		jMethod<::jvoid(::org::w3c::dom::Node)>("setEndBefore"), //
		jMethod<::jvoid(::org::w3c::dom::Node, ::jint)>("setStart"), //
		jMethod<::jvoid(::org::w3c::dom::Node)>("setStartAfter"), //
		jMethod<::jvoid(::org::w3c::dom::Node)>("setStartBefore"), //
		jMethod<::jvoid(::org::w3c::dom::Node)>("surroundContents"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::org::w3c::dom::DocumentFragment, typename... Args>
	auto cloneContents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cloneContents")] != -1);
		return call<R>("cloneContents", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::ranges::Range, typename... Args>
	auto cloneRange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cloneRange")] != -1);
		return call<R>("cloneRange", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto collapse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("collapse")] != -1);
		return call<R>("collapse", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto compareBoundaryPoints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compareBoundaryPoints")] != -1);
		return call<R>("compareBoundaryPoints", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deleteContents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deleteContents")] != -1);
		return call<R>("deleteContents", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto detach(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("detach")] != -1);
		return call<R>("detach", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::DocumentFragment, typename... Args>
	auto extractContents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("extractContents")] != -1);
		return call<R>("extractContents", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getCollapsed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCollapsed")] != -1);
		return call<R>("getCollapsed", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto getCommonAncestorContainer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCommonAncestorContainer")] != -1);
		return call<R>("getCommonAncestorContainer", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto getEndContainer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEndContainer")] != -1);
		return call<R>("getEndContainer", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getEndOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEndOffset")] != -1);
		return call<R>("getEndOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto getStartContainer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStartContainer")] != -1);
		return call<R>("getStartContainer", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getStartOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStartOffset")] != -1);
		return call<R>("getStartOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insertNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insertNode")] != -1);
		return call<R>("insertNode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto selectNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("selectNode")] != -1);
		return call<R>("selectNode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto selectNodeContents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("selectNodeContents")] != -1);
		return call<R>("selectNodeContents", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEnd(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEnd")] != -1);
		return call<R>("setEnd", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEndAfter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEndAfter")] != -1);
		return call<R>("setEndAfter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEndBefore(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEndBefore")] != -1);
		return call<R>("setEndBefore", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setStart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setStart")] != -1);
		return call<R>("setStart", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setStartAfter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setStartAfter")] != -1);
		return call<R>("setStartAfter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setStartBefore(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setStartBefore")] != -1);
		return call<R>("setStartBefore", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto surroundContents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("surroundContents")] != -1);
		return call<R>("surroundContents", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
