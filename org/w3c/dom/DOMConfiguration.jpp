#ifndef org_w3c_dom_DOMConfiguration_HPP
#define org_w3c_dom_DOMConfiguration_HPP

#include "../../../jfwd_decl.hpp"

class ::org::w3c::dom::DOMConfiguration : public jObject<::org::w3c::dom::DOMConfiguration, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom / "DOMConfiguration";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::String, ::java::lang::Object)>("canSetParameter"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getParameter"), //
		jMethod<::org::w3c::dom::DOMStringList()>("getParameterNames"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object)>("setParameter"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto canSetParameter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("canSetParameter")] != -1);
		return call<R>("canSetParameter", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getParameter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getParameter")] != -1);
		return call<R>("getParameter", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::DOMStringList, typename... Args>
	auto getParameterNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getParameterNames")] != -1);
		return call<R>("getParameterNames", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setParameter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setParameter")] != -1);
		return call<R>("setParameter", forward<Args>(args)...);
	}

};

#endif
