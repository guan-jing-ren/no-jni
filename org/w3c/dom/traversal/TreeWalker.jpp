#ifndef org_w3c_dom_traversal_TreeWalker_HPP
#define org_w3c_dom_traversal_TreeWalker_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::traversal::TreeWalker : public jObject<::org::w3c::dom::traversal::TreeWalker, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_traversal / "TreeWalker";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::org::w3c::dom::Node()>("firstChild"), //
		jMethod<::org::w3c::dom::Node()>("getCurrentNode"), //
		jMethod<::jboolean()>("getExpandEntityReferences"), //
		jMethod<::org::w3c::dom::traversal::NodeFilter()>("getFilter"), //
		jMethod<::org::w3c::dom::Node()>("getRoot"), //
		jMethod<::jint()>("getWhatToShow"), //
		jMethod<::org::w3c::dom::Node()>("lastChild"), //
		jMethod<::org::w3c::dom::Node()>("nextNode"), //
		jMethod<::org::w3c::dom::Node()>("nextSibling"), //
		jMethod<::org::w3c::dom::Node()>("parentNode"), //
		jMethod<::org::w3c::dom::Node()>("previousNode"), //
		jMethod<::org::w3c::dom::Node()>("previousSibling"), //
		jMethod<::jvoid(::org::w3c::dom::Node)>("setCurrentNode"), //
	};

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto firstChild(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("firstChild")] != -1);
		return call<R>("firstChild", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto getCurrentNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCurrentNode")] != -1);
		return call<R>("getCurrentNode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getExpandEntityReferences(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExpandEntityReferences")] != -1);
		return call<R>("getExpandEntityReferences", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::traversal::NodeFilter, typename... Args>
	auto getFilter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFilter")] != -1);
		return call<R>("getFilter", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto getRoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRoot")] != -1);
		return call<R>("getRoot", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWhatToShow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWhatToShow")] != -1);
		return call<R>("getWhatToShow", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto lastChild(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lastChild")] != -1);
		return call<R>("lastChild", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto nextNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nextNode")] != -1);
		return call<R>("nextNode", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto nextSibling(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nextSibling")] != -1);
		return call<R>("nextSibling", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto parentNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parentNode")] != -1);
		return call<R>("parentNode", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto previousNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("previousNode")] != -1);
		return call<R>("previousNode", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto previousSibling(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("previousSibling")] != -1);
		return call<R>("previousSibling", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCurrentNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCurrentNode")] != -1);
		return call<R>("setCurrentNode", std::forward<Args>(args)...);
	}

};

#endif
