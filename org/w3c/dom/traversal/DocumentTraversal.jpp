#ifndef org_w3c_dom_traversal_DocumentTraversal_HPP
#define org_w3c_dom_traversal_DocumentTraversal_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::traversal::DocumentTraversal : public jObject<::org::w3c::dom::traversal::DocumentTraversal, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_traversal / "DocumentTraversal";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::org::w3c::dom::traversal::NodeIterator(::org::w3c::dom::Node, ::jint, ::org::w3c::dom::traversal::NodeFilter, ::jboolean)>("createNodeIterator"), //
		jMethod<::org::w3c::dom::traversal::TreeWalker(::org::w3c::dom::Node, ::jint, ::org::w3c::dom::traversal::NodeFilter, ::jboolean)>("createTreeWalker"), //
	};

	template<typename R = ::org::w3c::dom::traversal::NodeIterator, typename... Args>
	auto createNodeIterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createNodeIterator")] != -1);
		return call<R>("createNodeIterator", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::traversal::TreeWalker, typename... Args>
	auto createTreeWalker(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createTreeWalker")] != -1);
		return call<R>("createTreeWalker", std::forward<Args>(args)...);
	}

};

#endif
