#ifndef org_w3c_dom_traversal_NodeFilter_HPP
#define org_w3c_dom_traversal_NodeFilter_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::traversal::NodeFilter : public jObject<::org::w3c::dom::traversal::NodeFilter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_traversal / "NodeFilter";

	constexpr static Enume field_signatures{
		jField<::jshort>("FILTER_ACCEPT"), //
		jField<::jshort>("FILTER_REJECT"), //
		jField<::jshort>("FILTER_SKIP"), //
		jField<::jint>("SHOW_ALL"), //
		jField<::jint>("SHOW_ATTRIBUTE"), //
		jField<::jint>("SHOW_CDATA_SECTION"), //
		jField<::jint>("SHOW_COMMENT"), //
		jField<::jint>("SHOW_DOCUMENT"), //
		jField<::jint>("SHOW_DOCUMENT_FRAGMENT"), //
		jField<::jint>("SHOW_DOCUMENT_TYPE"), //
		jField<::jint>("SHOW_ELEMENT"), //
		jField<::jint>("SHOW_ENTITY"), //
		jField<::jint>("SHOW_ENTITY_REFERENCE"), //
		jField<::jint>("SHOW_NOTATION"), //
		jField<::jint>("SHOW_PROCESSING_INSTRUCTION"), //
		jField<::jint>("SHOW_TEXT"), //
	};

	template<typename F = ::jshort>
	static auto FILTER_ACCEPT() {
		static_assert(field_signatures[jField<F>("FILTER_ACCEPT")] != -1);
		return sat<F>("FILTER_ACCEPT");
	}

	template<typename F = ::jshort>
	static auto FILTER_REJECT() {
		static_assert(field_signatures[jField<F>("FILTER_REJECT")] != -1);
		return sat<F>("FILTER_REJECT");
	}

	template<typename F = ::jshort>
	static auto FILTER_SKIP() {
		static_assert(field_signatures[jField<F>("FILTER_SKIP")] != -1);
		return sat<F>("FILTER_SKIP");
	}

	template<typename F = ::jint>
	static auto SHOW_ALL() {
		static_assert(field_signatures[jField<F>("SHOW_ALL")] != -1);
		return sat<F>("SHOW_ALL");
	}

	template<typename F = ::jint>
	static auto SHOW_ATTRIBUTE() {
		static_assert(field_signatures[jField<F>("SHOW_ATTRIBUTE")] != -1);
		return sat<F>("SHOW_ATTRIBUTE");
	}

	template<typename F = ::jint>
	static auto SHOW_CDATA_SECTION() {
		static_assert(field_signatures[jField<F>("SHOW_CDATA_SECTION")] != -1);
		return sat<F>("SHOW_CDATA_SECTION");
	}

	template<typename F = ::jint>
	static auto SHOW_COMMENT() {
		static_assert(field_signatures[jField<F>("SHOW_COMMENT")] != -1);
		return sat<F>("SHOW_COMMENT");
	}

	template<typename F = ::jint>
	static auto SHOW_DOCUMENT() {
		static_assert(field_signatures[jField<F>("SHOW_DOCUMENT")] != -1);
		return sat<F>("SHOW_DOCUMENT");
	}

	template<typename F = ::jint>
	static auto SHOW_DOCUMENT_FRAGMENT() {
		static_assert(field_signatures[jField<F>("SHOW_DOCUMENT_FRAGMENT")] != -1);
		return sat<F>("SHOW_DOCUMENT_FRAGMENT");
	}

	template<typename F = ::jint>
	static auto SHOW_DOCUMENT_TYPE() {
		static_assert(field_signatures[jField<F>("SHOW_DOCUMENT_TYPE")] != -1);
		return sat<F>("SHOW_DOCUMENT_TYPE");
	}

	template<typename F = ::jint>
	static auto SHOW_ELEMENT() {
		static_assert(field_signatures[jField<F>("SHOW_ELEMENT")] != -1);
		return sat<F>("SHOW_ELEMENT");
	}

	template<typename F = ::jint>
	static auto SHOW_ENTITY() {
		static_assert(field_signatures[jField<F>("SHOW_ENTITY")] != -1);
		return sat<F>("SHOW_ENTITY");
	}

	template<typename F = ::jint>
	static auto SHOW_ENTITY_REFERENCE() {
		static_assert(field_signatures[jField<F>("SHOW_ENTITY_REFERENCE")] != -1);
		return sat<F>("SHOW_ENTITY_REFERENCE");
	}

	template<typename F = ::jint>
	static auto SHOW_NOTATION() {
		static_assert(field_signatures[jField<F>("SHOW_NOTATION")] != -1);
		return sat<F>("SHOW_NOTATION");
	}

	template<typename F = ::jint>
	static auto SHOW_PROCESSING_INSTRUCTION() {
		static_assert(field_signatures[jField<F>("SHOW_PROCESSING_INSTRUCTION")] != -1);
		return sat<F>("SHOW_PROCESSING_INSTRUCTION");
	}

	template<typename F = ::jint>
	static auto SHOW_TEXT() {
		static_assert(field_signatures[jField<F>("SHOW_TEXT")] != -1);
		return sat<F>("SHOW_TEXT");
	}

	constexpr static Enume method_signatures{
		jMethod<::jshort(::org::w3c::dom::Node)>("acceptNode"), //
	};

	template<typename R = ::jshort, typename... Args>
	auto acceptNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("acceptNode")] != -1);
		return call<R>("acceptNode", std::forward<Args>(args)...);
	}

};

#endif
