#ifndef org_w3c_dom_traversal_NodeIterator_HPP
#define org_w3c_dom_traversal_NodeIterator_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::traversal::NodeIterator : public jObject<::org::w3c::dom::traversal::NodeIterator, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_traversal / "NodeIterator";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("detach"), //
		jMethod<::jboolean()>("getExpandEntityReferences"), //
		jMethod<::org::w3c::dom::traversal::NodeFilter()>("getFilter"), //
		jMethod<::org::w3c::dom::Node()>("getRoot"), //
		jMethod<::jint()>("getWhatToShow"), //
		jMethod<::org::w3c::dom::Node()>("nextNode"), //
		jMethod<::org::w3c::dom::Node()>("previousNode"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto detach(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("detach")] != -1);
		return call<R>("detach", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getExpandEntityReferences(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExpandEntityReferences")] != -1);
		return call<R>("getExpandEntityReferences", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::traversal::NodeFilter, typename... Args>
	auto getFilter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFilter")] != -1);
		return call<R>("getFilter", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto getRoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRoot")] != -1);
		return call<R>("getRoot", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWhatToShow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWhatToShow")] != -1);
		return call<R>("getWhatToShow", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto nextNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nextNode")] != -1);
		return call<R>("nextNode", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto previousNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("previousNode")] != -1);
		return call<R>("previousNode", std::forward<Args>(args)...);
	}

};

#endif
