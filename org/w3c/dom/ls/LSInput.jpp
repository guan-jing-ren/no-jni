#ifndef org_w3c_dom_ls_LSInput_HPP
#define org_w3c_dom_ls_LSInput_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::ls::LSInput : public jObject<::org::w3c::dom::ls::LSInput, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_ls / "LSInput";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getBaseURI"), //
		jMethod<::java::io::InputStream()>("getByteStream"), //
		jMethod<::jboolean()>("getCertifiedText"), //
		jMethod<::java::io::Reader()>("getCharacterStream"), //
		jMethod<::java::lang::String()>("getEncoding"), //
		jMethod<::java::lang::String()>("getPublicId"), //
		jMethod<::java::lang::String()>("getStringData"), //
		jMethod<::java::lang::String()>("getSystemId"), //
		jMethod<::jvoid(::java::lang::String)>("setBaseURI"), //
		jMethod<::jvoid(::java::io::InputStream)>("setByteStream"), //
		jMethod<::jvoid(::jboolean)>("setCertifiedText"), //
		jMethod<::jvoid(::java::io::Reader)>("setCharacterStream"), //
		jMethod<::jvoid(::java::lang::String)>("setEncoding"), //
		jMethod<::jvoid(::java::lang::String)>("setPublicId"), //
		jMethod<::jvoid(::java::lang::String)>("setStringData"), //
		jMethod<::jvoid(::java::lang::String)>("setSystemId"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getBaseURI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBaseURI")] != -1);
		return call<R>("getBaseURI", forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	auto getByteStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getByteStream")] != -1);
		return call<R>("getByteStream", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getCertifiedText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCertifiedText")] != -1);
		return call<R>("getCertifiedText", forward<Args>(args)...);
	}

	template<typename R = ::java::io::Reader, typename... Args>
	auto getCharacterStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCharacterStream")] != -1);
		return call<R>("getCharacterStream", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getEncoding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getEncoding")] != -1);
		return call<R>("getEncoding", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPublicId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPublicId")] != -1);
		return call<R>("getPublicId", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getStringData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getStringData")] != -1);
		return call<R>("getStringData", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSystemId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSystemId")] != -1);
		return call<R>("getSystemId", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBaseURI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBaseURI")] != -1);
		return call<R>("setBaseURI", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setByteStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setByteStream")] != -1);
		return call<R>("setByteStream", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCertifiedText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCertifiedText")] != -1);
		return call<R>("setCertifiedText", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCharacterStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCharacterStream")] != -1);
		return call<R>("setCharacterStream", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEncoding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setEncoding")] != -1);
		return call<R>("setEncoding", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPublicId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPublicId")] != -1);
		return call<R>("setPublicId", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setStringData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setStringData")] != -1);
		return call<R>("setStringData", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSystemId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSystemId")] != -1);
		return call<R>("setSystemId", forward<Args>(args)...);
	}

};

#endif
