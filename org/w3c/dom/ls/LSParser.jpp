#ifndef org_w3c_dom_ls_LSParser_HPP
#define org_w3c_dom_ls_LSParser_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::ls::LSParser : public jObject<::org::w3c::dom::ls::LSParser, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_ls / "LSParser";

	constexpr static Enume field_signatures{
		jField<::jshort>("ACTION_APPEND_AS_CHILDREN"), //
		jField<::jshort>("ACTION_INSERT_AFTER"), //
		jField<::jshort>("ACTION_INSERT_BEFORE"), //
		jField<::jshort>("ACTION_REPLACE"), //
		jField<::jshort>("ACTION_REPLACE_CHILDREN"), //
	};

	template<typename F = ::jshort>
	static auto ACTION_APPEND_AS_CHILDREN() {
		static_assert(field_signatures[jField<F>("ACTION_APPEND_AS_CHILDREN")] != -1);
		return sat<F>("ACTION_APPEND_AS_CHILDREN");
	}

	template<typename F = ::jshort>
	static auto ACTION_INSERT_AFTER() {
		static_assert(field_signatures[jField<F>("ACTION_INSERT_AFTER")] != -1);
		return sat<F>("ACTION_INSERT_AFTER");
	}

	template<typename F = ::jshort>
	static auto ACTION_INSERT_BEFORE() {
		static_assert(field_signatures[jField<F>("ACTION_INSERT_BEFORE")] != -1);
		return sat<F>("ACTION_INSERT_BEFORE");
	}

	template<typename F = ::jshort>
	static auto ACTION_REPLACE() {
		static_assert(field_signatures[jField<F>("ACTION_REPLACE")] != -1);
		return sat<F>("ACTION_REPLACE");
	}

	template<typename F = ::jshort>
	static auto ACTION_REPLACE_CHILDREN() {
		static_assert(field_signatures[jField<F>("ACTION_REPLACE_CHILDREN")] != -1);
		return sat<F>("ACTION_REPLACE_CHILDREN");
	}

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("abort"), //
		jMethod<::jboolean()>("getAsync"), //
		jMethod<::jboolean()>("getBusy"), //
		jMethod<::org::w3c::dom::DOMConfiguration()>("getDomConfig"), //
		jMethod<::org::w3c::dom::ls::LSParserFilter()>("getFilter"), //
		jMethod<::org::w3c::dom::Document(::org::w3c::dom::ls::LSInput)>("parse"), //
		jMethod<::org::w3c::dom::Document(::java::lang::String)>("parseURI"), //
		jMethod<::org::w3c::dom::Node(::org::w3c::dom::ls::LSInput, ::org::w3c::dom::Node, ::jshort)>("parseWithContext"), //
		jMethod<::jvoid(::org::w3c::dom::ls::LSParserFilter)>("setFilter"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto abort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("abort")] != -1);
		return call<R>("abort", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getAsync(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAsync")] != -1);
		return call<R>("getAsync", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getBusy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBusy")] != -1);
		return call<R>("getBusy", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::DOMConfiguration, typename... Args>
	auto getDomConfig(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDomConfig")] != -1);
		return call<R>("getDomConfig", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::ls::LSParserFilter, typename... Args>
	auto getFilter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFilter")] != -1);
		return call<R>("getFilter", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Document, typename... Args>
	auto parse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("parse")] != -1);
		return call<R>("parse", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Document, typename... Args>
	auto parseURI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("parseURI")] != -1);
		return call<R>("parseURI", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto parseWithContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("parseWithContext")] != -1);
		return call<R>("parseWithContext", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFilter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFilter")] != -1);
		return call<R>("setFilter", forward<Args>(args)...);
	}

};

#endif
