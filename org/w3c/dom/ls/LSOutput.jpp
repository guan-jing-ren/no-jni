#ifndef org_w3c_dom_ls_LSOutput_HPP
#define org_w3c_dom_ls_LSOutput_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::ls::LSOutput : public jObject<::org::w3c::dom::ls::LSOutput, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_ls / "LSOutput";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::io::OutputStream()>("getByteStream"), //
		jMethod<::java::io::Writer()>("getCharacterStream"), //
		jMethod<::java::lang::String()>("getEncoding"), //
		jMethod<::java::lang::String()>("getSystemId"), //
		jMethod<::jvoid(::java::io::OutputStream)>("setByteStream"), //
		jMethod<::jvoid(::java::io::Writer)>("setCharacterStream"), //
		jMethod<::jvoid(::java::lang::String)>("setEncoding"), //
		jMethod<::jvoid(::java::lang::String)>("setSystemId"), //
	};

	template<typename R = ::java::io::OutputStream, typename... Args>
	auto getByteStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getByteStream")] != -1);
		return call<R>("getByteStream", forward<Args>(args)...);
	}

	template<typename R = ::java::io::Writer, typename... Args>
	auto getCharacterStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCharacterStream")] != -1);
		return call<R>("getCharacterStream", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getEncoding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getEncoding")] != -1);
		return call<R>("getEncoding", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSystemId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSystemId")] != -1);
		return call<R>("getSystemId", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setByteStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setByteStream")] != -1);
		return call<R>("setByteStream", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCharacterStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCharacterStream")] != -1);
		return call<R>("setCharacterStream", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEncoding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setEncoding")] != -1);
		return call<R>("setEncoding", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSystemId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSystemId")] != -1);
		return call<R>("setSystemId", forward<Args>(args)...);
	}

};

#endif
