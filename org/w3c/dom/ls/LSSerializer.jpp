#ifndef org_w3c_dom_ls_LSSerializer_HPP
#define org_w3c_dom_ls_LSSerializer_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::w3c::dom::ls::LSSerializer : public jObject<::org::w3c::dom::ls::LSSerializer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom_ls / "LSSerializer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::org::w3c::dom::DOMConfiguration()>("getDomConfig"), //
		jMethod<::org::w3c::dom::ls::LSSerializerFilter()>("getFilter"), //
		jMethod<::java::lang::String()>("getNewLine"), //
		jMethod<::jvoid(::org::w3c::dom::ls::LSSerializerFilter)>("setFilter"), //
		jMethod<::jvoid(::java::lang::String)>("setNewLine"), //
		jMethod<::jboolean(::org::w3c::dom::Node, ::org::w3c::dom::ls::LSOutput)>("write"), //
		jMethod<::java::lang::String(::org::w3c::dom::Node)>("writeToString"), //
		jMethod<::jboolean(::org::w3c::dom::Node, ::java::lang::String)>("writeToURI"), //
	};

	template<typename R = ::org::w3c::dom::DOMConfiguration, typename... Args>
	auto getDomConfig(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDomConfig")] != -1);
		return call<R>("getDomConfig", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::ls::LSSerializerFilter, typename... Args>
	auto getFilter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFilter")] != -1);
		return call<R>("getFilter", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNewLine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNewLine")] != -1);
		return call<R>("getNewLine", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFilter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFilter")] != -1);
		return call<R>("setFilter", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNewLine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setNewLine")] != -1);
		return call<R>("setNewLine", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write")] != -1);
		return call<R>("write", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto writeToString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeToString")] != -1);
		return call<R>("writeToString", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto writeToURI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeToURI")] != -1);
		return call<R>("writeToURI", forward<Args>(args)...);
	}

};

#endif
