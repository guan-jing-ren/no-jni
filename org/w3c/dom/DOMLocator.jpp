#ifndef org_w3c_dom_DOMLocator_HPP
#define org_w3c_dom_DOMLocator_HPP

#include "../../../jfwd_decl.hpp"

class ::org::w3c::dom::DOMLocator : public jObject<::org::w3c::dom::DOMLocator, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom / "DOMLocator";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint()>("getByteOffset"), //
		jMethod<::jint()>("getColumnNumber"), //
		jMethod<::jint()>("getLineNumber"), //
		jMethod<::org::w3c::dom::Node()>("getRelatedNode"), //
		jMethod<::java::lang::String()>("getUri"), //
		jMethod<::jint()>("getUtf16Offset"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getByteOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getByteOffset")] != -1);
		return call<R>("getByteOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getColumnNumber(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumnNumber")] != -1);
		return call<R>("getColumnNumber", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLineNumber(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineNumber")] != -1);
		return call<R>("getLineNumber", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto getRelatedNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRelatedNode")] != -1);
		return call<R>("getRelatedNode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUri(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUri")] != -1);
		return call<R>("getUri", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getUtf16Offset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUtf16Offset")] != -1);
		return call<R>("getUtf16Offset", std::forward<Args>(args)...);
	}

};

#endif
