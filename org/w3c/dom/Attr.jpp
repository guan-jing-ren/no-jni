#ifndef org_w3c_dom_Attr_HPP
#define org_w3c_dom_Attr_HPP

#include "../../../jfwd_decl.hpp"

class ::org::w3c::dom::Attr : public jObject<::org::w3c::dom::Attr, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom / "Attr";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::org::w3c::dom::Element()>("getOwnerElement"), //
		jMethod<::org::w3c::dom::TypeInfo()>("getSchemaTypeInfo"), //
		jMethod<::jboolean()>("getSpecified"), //
		jMethod<::java::lang::String()>("getValue"), //
		jMethod<::jboolean()>("isId"), //
		jMethod<::jvoid(::java::lang::String)>("setValue"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Element, typename... Args>
	auto getOwnerElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOwnerElement")] != -1);
		return call<R>("getOwnerElement", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::TypeInfo, typename... Args>
	auto getSchemaTypeInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSchemaTypeInfo")] != -1);
		return call<R>("getSchemaTypeInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getSpecified(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSpecified")] != -1);
		return call<R>("getSpecified", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isId")] != -1);
		return call<R>("isId", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setValue")] != -1);
		return call<R>("setValue", std::forward<Args>(args)...);
	}

};

#endif
