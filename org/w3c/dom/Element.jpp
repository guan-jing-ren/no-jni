#ifndef org_w3c_dom_Element_HPP
#define org_w3c_dom_Element_HPP

#include "../../../jfwd_decl.hpp"

class ::org::w3c::dom::Element : public jObject<::org::w3c::dom::Element, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_w3c_dom / "Element";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String(::java::lang::String)>("getAttribute"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::lang::String)>("getAttributeNS"), //
		jMethod<::org::w3c::dom::Attr(::java::lang::String)>("getAttributeNode"), //
		jMethod<::org::w3c::dom::Attr(::java::lang::String, ::java::lang::String)>("getAttributeNodeNS"), //
		jMethod<::org::w3c::dom::NodeList(::java::lang::String)>("getElementsByTagName"), //
		jMethod<::org::w3c::dom::NodeList(::java::lang::String, ::java::lang::String)>("getElementsByTagNameNS"), //
		jMethod<::org::w3c::dom::TypeInfo()>("getSchemaTypeInfo"), //
		jMethod<::java::lang::String()>("getTagName"), //
		jMethod<::jboolean(::java::lang::String)>("hasAttribute"), //
		jMethod<::jboolean(::java::lang::String, ::java::lang::String)>("hasAttributeNS"), //
		jMethod<::jvoid(::java::lang::String)>("removeAttribute"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("removeAttributeNS"), //
		jMethod<::org::w3c::dom::Attr(::org::w3c::dom::Attr)>("removeAttributeNode"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("setAttribute"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String)>("setAttributeNS"), //
		jMethod<::org::w3c::dom::Attr(::org::w3c::dom::Attr)>("setAttributeNode"), //
		jMethod<::org::w3c::dom::Attr(::org::w3c::dom::Attr)>("setAttributeNodeNS"), //
		jMethod<::jvoid(::java::lang::String, ::jboolean)>("setIdAttribute"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::jboolean)>("setIdAttributeNS"), //
		jMethod<::jvoid(::org::w3c::dom::Attr, ::jboolean)>("setIdAttributeNode"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttribute")] != -1);
		return call<R>("getAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAttributeNS(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributeNS")] != -1);
		return call<R>("getAttributeNS", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Attr, typename... Args>
	auto getAttributeNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributeNode")] != -1);
		return call<R>("getAttributeNode", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Attr, typename... Args>
	auto getAttributeNodeNS(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributeNodeNS")] != -1);
		return call<R>("getAttributeNodeNS", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::NodeList, typename... Args>
	auto getElementsByTagName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getElementsByTagName")] != -1);
		return call<R>("getElementsByTagName", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::NodeList, typename... Args>
	auto getElementsByTagNameNS(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getElementsByTagNameNS")] != -1);
		return call<R>("getElementsByTagNameNS", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::TypeInfo, typename... Args>
	auto getSchemaTypeInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSchemaTypeInfo")] != -1);
		return call<R>("getSchemaTypeInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTagName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTagName")] != -1);
		return call<R>("getTagName", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasAttribute")] != -1);
		return call<R>("hasAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasAttributeNS(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasAttributeNS")] != -1);
		return call<R>("hasAttributeNS", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAttribute")] != -1);
		return call<R>("removeAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAttributeNS(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAttributeNS")] != -1);
		return call<R>("removeAttributeNS", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Attr, typename... Args>
	auto removeAttributeNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAttributeNode")] != -1);
		return call<R>("removeAttributeNode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAttribute")] != -1);
		return call<R>("setAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAttributeNS(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAttributeNS")] != -1);
		return call<R>("setAttributeNS", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Attr, typename... Args>
	auto setAttributeNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAttributeNode")] != -1);
		return call<R>("setAttributeNode", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Attr, typename... Args>
	auto setAttributeNodeNS(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAttributeNodeNS")] != -1);
		return call<R>("setAttributeNodeNS", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIdAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIdAttribute")] != -1);
		return call<R>("setIdAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIdAttributeNS(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIdAttributeNS")] != -1);
		return call<R>("setIdAttributeNS", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIdAttributeNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIdAttributeNode")] != -1);
		return call<R>("setIdAttributeNode", std::forward<Args>(args)...);
	}

};

#endif
