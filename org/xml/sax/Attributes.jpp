#ifndef org_xml_sax_Attributes_HPP
#define org_xml_sax_Attributes_HPP

#include "../../../jfwd_decl.hpp"

class ::org::xml::sax::Attributes : public jObject<::org::xml::sax::Attributes, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_xml_sax / "Attributes";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint(::java::lang::String)>("getIndex"), //
		jMethod<::jint(::java::lang::String, ::java::lang::String)>("getIndex"), //
		jMethod<::jint()>("getLength"), //
		jMethod<::java::lang::String(::jint)>("getLocalName"), //
		jMethod<::java::lang::String(::jint)>("getQName"), //
		jMethod<::java::lang::String(::jint)>("getType"), //
		jMethod<::java::lang::String(::java::lang::String)>("getType"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::lang::String)>("getType"), //
		jMethod<::java::lang::String(::jint)>("getURI"), //
		jMethod<::java::lang::String(::jint)>("getValue"), //
		jMethod<::java::lang::String(::java::lang::String)>("getValue"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::lang::String)>("getValue"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIndex")] != -1);
		return call<R>("getIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLength")] != -1);
		return call<R>("getLength", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLocalName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalName")] != -1);
		return call<R>("getLocalName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getQName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getQName")] != -1);
		return call<R>("getQName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getURI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getURI")] != -1);
		return call<R>("getURI", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", std::forward<Args>(args)...);
	}

};

#endif
