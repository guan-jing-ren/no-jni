#ifndef org_xml_sax_AttributeList_HPP
#define org_xml_sax_AttributeList_HPP

#include "../../../jfwd_decl.hpp"

class ::org::xml::sax::AttributeList : public jObject<::org::xml::sax::AttributeList, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_xml_sax / "AttributeList";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint()>("getLength"), //
		jMethod<::java::lang::String(::jint)>("getName"), //
		jMethod<::java::lang::String(::jint)>("getType"), //
		jMethod<::java::lang::String(::java::lang::String)>("getType"), //
		jMethod<::java::lang::String(::jint)>("getValue"), //
		jMethod<::java::lang::String(::java::lang::String)>("getValue"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLength")] != -1);
		return call<R>("getLength", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", forward<Args>(args)...);
	}

};

#endif
