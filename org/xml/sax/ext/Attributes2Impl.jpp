#ifndef org_xml_sax_ext_Attributes2Impl_HPP
#define org_xml_sax_ext_Attributes2Impl_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::xml::sax::ext::Attributes2Impl : public jObject<::org::xml::sax::ext::Attributes2Impl, ::org::xml::sax::helpers::AttributesImpl> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_xml_sax_ext / "Attributes2Impl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::org::xml::sax::Attributes)>(), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::lang::String)>("addAttribute"), //
		jMethod<::jboolean(::jint)>("isDeclared"), //
		jMethod<::jboolean(::java::lang::String)>("isDeclared"), //
		jMethod<::jboolean(::java::lang::String, ::java::lang::String)>("isDeclared"), //
		jMethod<::jboolean(::jint)>("isSpecified"), //
		jMethod<::jboolean(::java::lang::String)>("isSpecified"), //
		jMethod<::jboolean(::java::lang::String, ::java::lang::String)>("isSpecified"), //
		jMethod<::jvoid(::jint)>("removeAttribute"), //
		jMethod<::jvoid(::org::xml::sax::Attributes)>("setAttributes"), //
		jMethod<::jvoid(::jint, ::jboolean)>("setDeclared"), //
		jMethod<::jvoid(::jint, ::jboolean)>("setSpecified"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addAttribute")] != -1);
		return call<R>("addAttribute", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDeclared(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isDeclared")] != -1);
		return call<R>("isDeclared", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSpecified(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isSpecified")] != -1);
		return call<R>("isSpecified", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeAttribute")] != -1);
		return call<R>("removeAttribute", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setAttributes")] != -1);
		return call<R>("setAttributes", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDeclared(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDeclared")] != -1);
		return call<R>("setDeclared", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSpecified(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSpecified")] != -1);
		return call<R>("setSpecified", forward<Args>(args)...);
	}

};

#endif
