#ifndef org_xml_sax_ext_Attributes2_HPP
#define org_xml_sax_ext_Attributes2_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::xml::sax::ext::Attributes2 : public jObject<::org::xml::sax::ext::Attributes2, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_xml_sax_ext / "Attributes2";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::jint)>("isDeclared"), //
		jMethod<::jboolean(::java::lang::String)>("isDeclared"), //
		jMethod<::jboolean(::java::lang::String, ::java::lang::String)>("isDeclared"), //
		jMethod<::jboolean(::jint)>("isSpecified"), //
		jMethod<::jboolean(::java::lang::String)>("isSpecified"), //
		jMethod<::jboolean(::java::lang::String, ::java::lang::String)>("isSpecified"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto isDeclared(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDeclared")] != -1);
		return call<R>("isDeclared", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSpecified(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSpecified")] != -1);
		return call<R>("isSpecified", std::forward<Args>(args)...);
	}

};

#endif
