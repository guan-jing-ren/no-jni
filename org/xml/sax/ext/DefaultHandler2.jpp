#ifndef org_xml_sax_ext_DefaultHandler2_HPP
#define org_xml_sax_ext_DefaultHandler2_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::xml::sax::ext::DefaultHandler2 : public jObject<::org::xml::sax::ext::DefaultHandler2, ::org::xml::sax::helpers::DefaultHandler> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_xml_sax_ext / "DefaultHandler2";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::lang::String)>("attributeDecl"), //
		jMethod<::jvoid(::jchar *, ::jint, ::jint)>("comment"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("elementDecl"), //
		jMethod<::jvoid()>("endCDATA"), //
		jMethod<::jvoid()>("endDTD"), //
		jMethod<::jvoid(::java::lang::String)>("endEntity"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String)>("externalEntityDecl"), //
		jMethod<::org::xml::sax::InputSource(::java::lang::String, ::java::lang::String)>("getExternalSubset"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("internalEntityDecl"), //
		jMethod<::org::xml::sax::InputSource(::java::lang::String, ::java::lang::String)>("resolveEntity"), //
		jMethod<::org::xml::sax::InputSource(::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::lang::String)>("resolveEntity"), //
		jMethod<::jvoid()>("startCDATA"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String)>("startDTD"), //
		jMethod<::jvoid(::java::lang::String)>("startEntity"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto attributeDecl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("attributeDecl")] != -1);
		return call<R>("attributeDecl", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto comment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("comment")] != -1);
		return call<R>("comment", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto elementDecl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("elementDecl")] != -1);
		return call<R>("elementDecl", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endCDATA(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("endCDATA")] != -1);
		return call<R>("endCDATA", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endDTD(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("endDTD")] != -1);
		return call<R>("endDTD", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endEntity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("endEntity")] != -1);
		return call<R>("endEntity", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto externalEntityDecl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("externalEntityDecl")] != -1);
		return call<R>("externalEntityDecl", std::forward<Args>(args)...);
	}

	template<typename R = ::org::xml::sax::InputSource, typename... Args>
	auto getExternalSubset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExternalSubset")] != -1);
		return call<R>("getExternalSubset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto internalEntityDecl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("internalEntityDecl")] != -1);
		return call<R>("internalEntityDecl", std::forward<Args>(args)...);
	}

	template<typename R = ::org::xml::sax::InputSource, typename... Args>
	auto resolveEntity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("resolveEntity")] != -1);
		return call<R>("resolveEntity", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto startCDATA(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("startCDATA")] != -1);
		return call<R>("startCDATA", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto startDTD(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("startDTD")] != -1);
		return call<R>("startDTD", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto startEntity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("startEntity")] != -1);
		return call<R>("startEntity", std::forward<Args>(args)...);
	}

};

#endif
