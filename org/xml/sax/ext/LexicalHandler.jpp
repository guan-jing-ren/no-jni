#ifndef org_xml_sax_ext_LexicalHandler_HPP
#define org_xml_sax_ext_LexicalHandler_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::xml::sax::ext::LexicalHandler : public jObject<::org::xml::sax::ext::LexicalHandler, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_xml_sax_ext / "LexicalHandler";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::jchar *, ::jint, ::jint)>("comment"), //
		jMethod<::jvoid()>("endCDATA"), //
		jMethod<::jvoid()>("endDTD"), //
		jMethod<::jvoid(::java::lang::String)>("endEntity"), //
		jMethod<::jvoid()>("startCDATA"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String)>("startDTD"), //
		jMethod<::jvoid(::java::lang::String)>("startEntity"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto comment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("comment")] != -1);
		return call<R>("comment", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endCDATA(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("endCDATA")] != -1);
		return call<R>("endCDATA", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endDTD(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("endDTD")] != -1);
		return call<R>("endDTD", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endEntity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("endEntity")] != -1);
		return call<R>("endEntity", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto startCDATA(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("startCDATA")] != -1);
		return call<R>("startCDATA", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto startDTD(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("startDTD")] != -1);
		return call<R>("startDTD", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto startEntity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("startEntity")] != -1);
		return call<R>("startEntity", std::forward<Args>(args)...);
	}

};

#endif
