#ifndef org_xml_sax_ext_Locator2Impl_HPP
#define org_xml_sax_ext_Locator2Impl_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::xml::sax::ext::Locator2Impl : public jObject<::org::xml::sax::ext::Locator2Impl, ::org::xml::sax::helpers::LocatorImpl> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_xml_sax_ext / "Locator2Impl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::org::xml::sax::Locator)>(), //
		jMethod<::java::lang::String()>("getEncoding"), //
		jMethod<::java::lang::String()>("getXMLVersion"), //
		jMethod<::jvoid(::java::lang::String)>("setEncoding"), //
		jMethod<::jvoid(::java::lang::String)>("setXMLVersion"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getEncoding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEncoding")] != -1);
		return call<R>("getEncoding", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getXMLVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getXMLVersion")] != -1);
		return call<R>("getXMLVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEncoding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEncoding")] != -1);
		return call<R>("setEncoding", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setXMLVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setXMLVersion")] != -1);
		return call<R>("setXMLVersion", std::forward<Args>(args)...);
	}

};

#endif
