#ifndef org_xml_sax_DocumentHandler_HPP
#define org_xml_sax_DocumentHandler_HPP

#include "../../../jfwd_decl.hpp"

class ::org::xml::sax::DocumentHandler : public jObject<::org::xml::sax::DocumentHandler, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_xml_sax / "DocumentHandler";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::jchar *, ::jint, ::jint)>("characters"), //
		jMethod<::jvoid()>("endDocument"), //
		jMethod<::jvoid(::java::lang::String)>("endElement"), //
		jMethod<::jvoid(::jchar *, ::jint, ::jint)>("ignorableWhitespace"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("processingInstruction"), //
		jMethod<::jvoid(::org::xml::sax::Locator)>("setDocumentLocator"), //
		jMethod<::jvoid()>("startDocument"), //
		jMethod<::jvoid(::java::lang::String, ::org::xml::sax::AttributeList)>("startElement"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto characters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("characters")] != -1);
		return call<R>("characters", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("endDocument")] != -1);
		return call<R>("endDocument", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("endElement")] != -1);
		return call<R>("endElement", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto ignorableWhitespace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ignorableWhitespace")] != -1);
		return call<R>("ignorableWhitespace", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto processingInstruction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("processingInstruction")] != -1);
		return call<R>("processingInstruction", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDocumentLocator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDocumentLocator")] != -1);
		return call<R>("setDocumentLocator", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto startDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("startDocument")] != -1);
		return call<R>("startDocument", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto startElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("startElement")] != -1);
		return call<R>("startElement", std::forward<Args>(args)...);
	}

};

#endif
