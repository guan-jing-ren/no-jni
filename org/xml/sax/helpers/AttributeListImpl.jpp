#ifndef org_xml_sax_helpers_AttributeListImpl_HPP
#define org_xml_sax_helpers_AttributeListImpl_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::xml::sax::helpers::AttributeListImpl : public jObject<::org::xml::sax::helpers::AttributeListImpl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_xml_sax_helpers / "AttributeListImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::org::xml::sax::AttributeList)>(), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String)>("addAttribute"), //
		jMethod<::jvoid()>("clear"), //
		jMethod<::jint()>("getLength"), //
		jMethod<::java::lang::String(::jint)>("getName"), //
		jMethod<::java::lang::String(::jint)>("getType"), //
		jMethod<::java::lang::String(::java::lang::String)>("getType"), //
		jMethod<::java::lang::String(::jint)>("getValue"), //
		jMethod<::java::lang::String(::java::lang::String)>("getValue"), //
		jMethod<::jvoid(::java::lang::String)>("removeAttribute"), //
		jMethod<::jvoid(::org::xml::sax::AttributeList)>("setAttributeList"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addAttribute")] != -1);
		return call<R>("addAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLength")] != -1);
		return call<R>("getLength", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAttribute")] != -1);
		return call<R>("removeAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAttributeList(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAttributeList")] != -1);
		return call<R>("setAttributeList", std::forward<Args>(args)...);
	}

};

#endif
