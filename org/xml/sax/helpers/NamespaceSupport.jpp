#ifndef org_xml_sax_helpers_NamespaceSupport_HPP
#define org_xml_sax_helpers_NamespaceSupport_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::xml::sax::helpers::NamespaceSupport : public jObject<::org::xml::sax::helpers::NamespaceSupport, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_xml_sax_helpers / "NamespaceSupport";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("NSDECL"), //
		jField<::java::lang::String>("XMLNS"), //
	};

	template<typename F = ::java::lang::String>
	static auto NSDECL() {
		static_assert(field_signatures[jField<F>("NSDECL")] != -1);
		return sat<F>("NSDECL");
	}

	template<typename F = ::java::lang::String>
	static auto XMLNS() {
		static_assert(field_signatures[jField<F>("XMLNS")] != -1);
		return sat<F>("XMLNS");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jboolean(::java::lang::String, ::java::lang::String)>("declarePrefix"), //
		jMethod<::java::util::Enumeration()>("getDeclaredPrefixes"), //
		jMethod<::java::lang::String(::java::lang::String)>("getPrefix"), //
		jMethod<::java::util::Enumeration()>("getPrefixes"), //
		jMethod<::java::util::Enumeration(::java::lang::String)>("getPrefixes"), //
		jMethod<::java::lang::String(::java::lang::String)>("getURI"), //
		jMethod<::jboolean()>("isNamespaceDeclUris"), //
		jMethod<::jvoid()>("popContext"), //
		jMethod<::java::lang::String *(::java::lang::String, ::java::lang::String *, ::jboolean)>("processName"), //
		jMethod<::jvoid()>("pushContext"), //
		jMethod<::jvoid()>("reset"), //
		jMethod<::jvoid(::jboolean)>("setNamespaceDeclUris"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto declarePrefix(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("declarePrefix")] != -1);
		return call<R>("declarePrefix", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto getDeclaredPrefixes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDeclaredPrefixes")] != -1);
		return call<R>("getDeclaredPrefixes", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPrefix(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPrefix")] != -1);
		return call<R>("getPrefix", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto getPrefixes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPrefixes")] != -1);
		return call<R>("getPrefixes", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getURI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getURI")] != -1);
		return call<R>("getURI", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isNamespaceDeclUris(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isNamespaceDeclUris")] != -1);
		return call<R>("isNamespaceDeclUris", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto popContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("popContext")] != -1);
		return call<R>("popContext", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto processName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("processName")] != -1);
		return call<R>("processName", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto pushContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("pushContext")] != -1);
		return call<R>("pushContext", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNamespaceDeclUris(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setNamespaceDeclUris")] != -1);
		return call<R>("setNamespaceDeclUris", forward<Args>(args)...);
	}

};

#endif
