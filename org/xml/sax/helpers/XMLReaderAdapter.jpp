#ifndef org_xml_sax_helpers_XMLReaderAdapter_HPP
#define org_xml_sax_helpers_XMLReaderAdapter_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::xml::sax::helpers::XMLReaderAdapter : public jObject<::org::xml::sax::helpers::XMLReaderAdapter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_xml_sax_helpers / "XMLReaderAdapter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::org::xml::sax::XMLReader)>(), //
		jMethod<::jvoid(::jchar *, ::jint, ::jint)>("characters"), //
		jMethod<::jvoid()>("endDocument"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String)>("endElement"), //
		jMethod<::jvoid(::java::lang::String)>("endPrefixMapping"), //
		jMethod<::jvoid(::jchar *, ::jint, ::jint)>("ignorableWhitespace"), //
		jMethod<::jvoid(::java::lang::String)>("parse"), //
		jMethod<::jvoid(::org::xml::sax::InputSource)>("parse"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("processingInstruction"), //
		jMethod<::jvoid(::org::xml::sax::DTDHandler)>("setDTDHandler"), //
		jMethod<::jvoid(::org::xml::sax::DocumentHandler)>("setDocumentHandler"), //
		jMethod<::jvoid(::org::xml::sax::Locator)>("setDocumentLocator"), //
		jMethod<::jvoid(::org::xml::sax::EntityResolver)>("setEntityResolver"), //
		jMethod<::jvoid(::org::xml::sax::ErrorHandler)>("setErrorHandler"), //
		jMethod<::jvoid(::java::util::Locale)>("setLocale"), //
		jMethod<::jvoid(::java::lang::String)>("skippedEntity"), //
		jMethod<::jvoid()>("startDocument"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String, ::org::xml::sax::Attributes)>("startElement"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("startPrefixMapping"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto characters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("characters")] != -1);
		return call<R>("characters", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("endDocument")] != -1);
		return call<R>("endDocument", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("endElement")] != -1);
		return call<R>("endElement", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endPrefixMapping(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("endPrefixMapping")] != -1);
		return call<R>("endPrefixMapping", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto ignorableWhitespace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("ignorableWhitespace")] != -1);
		return call<R>("ignorableWhitespace", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto parse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("parse")] != -1);
		return call<R>("parse", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto processingInstruction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("processingInstruction")] != -1);
		return call<R>("processingInstruction", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDTDHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDTDHandler")] != -1);
		return call<R>("setDTDHandler", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDocumentHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDocumentHandler")] != -1);
		return call<R>("setDocumentHandler", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDocumentLocator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDocumentLocator")] != -1);
		return call<R>("setDocumentLocator", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEntityResolver(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setEntityResolver")] != -1);
		return call<R>("setEntityResolver", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setErrorHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setErrorHandler")] != -1);
		return call<R>("setErrorHandler", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLocale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLocale")] != -1);
		return call<R>("setLocale", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto skippedEntity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("skippedEntity")] != -1);
		return call<R>("skippedEntity", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto startDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("startDocument")] != -1);
		return call<R>("startDocument", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto startElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("startElement")] != -1);
		return call<R>("startElement", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto startPrefixMapping(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("startPrefixMapping")] != -1);
		return call<R>("startPrefixMapping", forward<Args>(args)...);
	}

};

#endif
