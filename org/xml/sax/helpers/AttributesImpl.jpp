#ifndef org_xml_sax_helpers_AttributesImpl_HPP
#define org_xml_sax_helpers_AttributesImpl_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::xml::sax::helpers::AttributesImpl : public jObject<::org::xml::sax::helpers::AttributesImpl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_xml_sax_helpers / "AttributesImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::org::xml::sax::Attributes)>(), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::lang::String)>("addAttribute"), //
		jMethod<::jvoid()>("clear"), //
		jMethod<::jint(::java::lang::String)>("getIndex"), //
		jMethod<::jint(::java::lang::String, ::java::lang::String)>("getIndex"), //
		jMethod<::jint()>("getLength"), //
		jMethod<::java::lang::String(::jint)>("getLocalName"), //
		jMethod<::java::lang::String(::jint)>("getQName"), //
		jMethod<::java::lang::String(::jint)>("getType"), //
		jMethod<::java::lang::String(::java::lang::String)>("getType"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::lang::String)>("getType"), //
		jMethod<::java::lang::String(::jint)>("getURI"), //
		jMethod<::java::lang::String(::jint)>("getValue"), //
		jMethod<::java::lang::String(::java::lang::String)>("getValue"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::lang::String)>("getValue"), //
		jMethod<::jvoid(::jint)>("removeAttribute"), //
		jMethod<::jvoid(::jint, ::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::lang::String)>("setAttribute"), //
		jMethod<::jvoid(::org::xml::sax::Attributes)>("setAttributes"), //
		jMethod<::jvoid(::jint, ::java::lang::String)>("setLocalName"), //
		jMethod<::jvoid(::jint, ::java::lang::String)>("setQName"), //
		jMethod<::jvoid(::jint, ::java::lang::String)>("setType"), //
		jMethod<::jvoid(::jint, ::java::lang::String)>("setURI"), //
		jMethod<::jvoid(::jint, ::java::lang::String)>("setValue"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addAttribute")] != -1);
		return call<R>("addAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIndex")] != -1);
		return call<R>("getIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLength")] != -1);
		return call<R>("getLength", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLocalName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalName")] != -1);
		return call<R>("getLocalName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getQName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getQName")] != -1);
		return call<R>("getQName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getURI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getURI")] != -1);
		return call<R>("getURI", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAttribute")] != -1);
		return call<R>("removeAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAttribute")] != -1);
		return call<R>("setAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAttributes")] != -1);
		return call<R>("setAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLocalName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLocalName")] != -1);
		return call<R>("setLocalName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setQName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setQName")] != -1);
		return call<R>("setQName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setType")] != -1);
		return call<R>("setType", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setURI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setURI")] != -1);
		return call<R>("setURI", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setValue")] != -1);
		return call<R>("setValue", std::forward<Args>(args)...);
	}

};

#endif
