#ifndef org_xml_sax_helpers_XMLFilterImpl_HPP
#define org_xml_sax_helpers_XMLFilterImpl_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::xml::sax::helpers::XMLFilterImpl : public jObject<::org::xml::sax::helpers::XMLFilterImpl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_xml_sax_helpers / "XMLFilterImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::org::xml::sax::XMLReader)>(), //
		jMethod<::jvoid(::jchar *, ::jint, ::jint)>("characters"), //
		jMethod<::jvoid()>("endDocument"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String)>("endElement"), //
		jMethod<::jvoid(::java::lang::String)>("endPrefixMapping"), //
		jMethod<::jvoid(::org::xml::sax::SAXParseException)>("error"), //
		jMethod<::jvoid(::org::xml::sax::SAXParseException)>("fatalError"), //
		jMethod<::org::xml::sax::ContentHandler()>("getContentHandler"), //
		jMethod<::org::xml::sax::DTDHandler()>("getDTDHandler"), //
		jMethod<::org::xml::sax::EntityResolver()>("getEntityResolver"), //
		jMethod<::org::xml::sax::ErrorHandler()>("getErrorHandler"), //
		jMethod<::jboolean(::java::lang::String)>("getFeature"), //
		jMethod<::org::xml::sax::XMLReader()>("getParent"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getProperty"), //
		jMethod<::jvoid(::jchar *, ::jint, ::jint)>("ignorableWhitespace"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String)>("notationDecl"), //
		jMethod<::jvoid(::java::lang::String)>("parse"), //
		jMethod<::jvoid(::org::xml::sax::InputSource)>("parse"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("processingInstruction"), //
		jMethod<::org::xml::sax::InputSource(::java::lang::String, ::java::lang::String)>("resolveEntity"), //
		jMethod<::jvoid(::org::xml::sax::ContentHandler)>("setContentHandler"), //
		jMethod<::jvoid(::org::xml::sax::DTDHandler)>("setDTDHandler"), //
		jMethod<::jvoid(::org::xml::sax::Locator)>("setDocumentLocator"), //
		jMethod<::jvoid(::org::xml::sax::EntityResolver)>("setEntityResolver"), //
		jMethod<::jvoid(::org::xml::sax::ErrorHandler)>("setErrorHandler"), //
		jMethod<::jvoid(::java::lang::String, ::jboolean)>("setFeature"), //
		jMethod<::jvoid(::org::xml::sax::XMLReader)>("setParent"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object)>("setProperty"), //
		jMethod<::jvoid(::java::lang::String)>("skippedEntity"), //
		jMethod<::jvoid()>("startDocument"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String, ::org::xml::sax::Attributes)>("startElement"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("startPrefixMapping"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::lang::String)>("unparsedEntityDecl"), //
		jMethod<::jvoid(::org::xml::sax::SAXParseException)>("warning"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto characters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("characters")] != -1);
		return call<R>("characters", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("endDocument")] != -1);
		return call<R>("endDocument", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("endElement")] != -1);
		return call<R>("endElement", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endPrefixMapping(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("endPrefixMapping")] != -1);
		return call<R>("endPrefixMapping", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto error(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("error")] != -1);
		return call<R>("error", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fatalError(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fatalError")] != -1);
		return call<R>("fatalError", std::forward<Args>(args)...);
	}

	template<typename R = ::org::xml::sax::ContentHandler, typename... Args>
	auto getContentHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContentHandler")] != -1);
		return call<R>("getContentHandler", std::forward<Args>(args)...);
	}

	template<typename R = ::org::xml::sax::DTDHandler, typename... Args>
	auto getDTDHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDTDHandler")] != -1);
		return call<R>("getDTDHandler", std::forward<Args>(args)...);
	}

	template<typename R = ::org::xml::sax::EntityResolver, typename... Args>
	auto getEntityResolver(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEntityResolver")] != -1);
		return call<R>("getEntityResolver", std::forward<Args>(args)...);
	}

	template<typename R = ::org::xml::sax::ErrorHandler, typename... Args>
	auto getErrorHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getErrorHandler")] != -1);
		return call<R>("getErrorHandler", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getFeature(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFeature")] != -1);
		return call<R>("getFeature", std::forward<Args>(args)...);
	}

	template<typename R = ::org::xml::sax::XMLReader, typename... Args>
	auto getParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParent")] != -1);
		return call<R>("getParent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProperty")] != -1);
		return call<R>("getProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto ignorableWhitespace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ignorableWhitespace")] != -1);
		return call<R>("ignorableWhitespace", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto notationDecl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("notationDecl")] != -1);
		return call<R>("notationDecl", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto parse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parse")] != -1);
		return call<R>("parse", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto processingInstruction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("processingInstruction")] != -1);
		return call<R>("processingInstruction", std::forward<Args>(args)...);
	}

	template<typename R = ::org::xml::sax::InputSource, typename... Args>
	auto resolveEntity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("resolveEntity")] != -1);
		return call<R>("resolveEntity", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setContentHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setContentHandler")] != -1);
		return call<R>("setContentHandler", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDTDHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDTDHandler")] != -1);
		return call<R>("setDTDHandler", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDocumentLocator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDocumentLocator")] != -1);
		return call<R>("setDocumentLocator", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEntityResolver(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEntityResolver")] != -1);
		return call<R>("setEntityResolver", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setErrorHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setErrorHandler")] != -1);
		return call<R>("setErrorHandler", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFeature(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFeature")] != -1);
		return call<R>("setFeature", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setParent")] != -1);
		return call<R>("setParent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setProperty")] != -1);
		return call<R>("setProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto skippedEntity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("skippedEntity")] != -1);
		return call<R>("skippedEntity", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto startDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("startDocument")] != -1);
		return call<R>("startDocument", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto startElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("startElement")] != -1);
		return call<R>("startElement", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto startPrefixMapping(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("startPrefixMapping")] != -1);
		return call<R>("startPrefixMapping", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unparsedEntityDecl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unparsedEntityDecl")] != -1);
		return call<R>("unparsedEntityDecl", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto warning(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("warning")] != -1);
		return call<R>("warning", std::forward<Args>(args)...);
	}

};

#endif
