#ifndef org_jcp_xml_dsig_internal_DigesterOutputStream_HPP
#define org_jcp_xml_dsig_internal_DigesterOutputStream_HPP

#include "../../../../../jfwd_decl.hpp"

class ::org::jcp::xml::dsig::internal::DigesterOutputStream : public jObject<::org::jcp::xml::dsig::internal::DigesterOutputStream, ::java::io::OutputStream> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_jcp_xml_dsig_internal / "DigesterOutputStream";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::security::MessageDigest)>(), //
		jConstructor<::jvoid(::java::security::MessageDigest, ::jboolean)>(), //
		jMethod<::jvoid()>("close"), //
		jMethod<::jbyte *()>("getDigestValue"), //
		jMethod<::java::io::InputStream()>("getInputStream"), //
		jMethod<::jvoid(::jint)>("write"), //
		jMethod<::jvoid(::jbyte *, ::jint, ::jint)>("write"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("close")] != -1);
		return call<R>("close", forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getDigestValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDigestValue")] != -1);
		return call<R>("getDigestValue", forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	auto getInputStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInputStream")] != -1);
		return call<R>("getInputStream", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write")] != -1);
		return call<R>("write", forward<Args>(args)...);
	}

};

#endif
