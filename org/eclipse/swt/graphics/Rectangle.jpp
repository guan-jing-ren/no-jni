#ifndef org_eclipse_swt_graphics_Rectangle_HPP
#define org_eclipse_swt_graphics_Rectangle_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::graphics::Rectangle : public jObject<::org::eclipse::swt::graphics::Rectangle, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_graphics / "Rectangle";

	constexpr static Enume field_signatures{
		jField<::jint>("height"), //
		jField<::jint>("width"), //
		jField<::jint>("x"), //
		jField<::jint>("y"), //
	};

	template<typename F = ::jint>
	auto height() const {
		static_assert(field_signatures[jField<F>("height")] != -1);
		return at<F>("height");
	}

	template<typename F = ::jint>
	auto width() const {
		static_assert(field_signatures[jField<F>("width")] != -1);
		return at<F>("width");
	}

	template<typename F = ::jint>
	auto x() const {
		static_assert(field_signatures[jField<F>("x")] != -1);
		return at<F>("x");
	}

	template<typename F = ::jint>
	auto y() const {
		static_assert(field_signatures[jField<F>("y")] != -1);
		return at<F>("y");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint, ::jint, ::jint, ::jint)>(), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Rectangle)>("add"), //
		jMethod<::jboolean(::jint, ::jint)>("contains"), //
		jMethod<::jboolean(::org::eclipse::swt::graphics::Point)>("contains"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Rectangle)>("intersect"), //
		jMethod<::org::eclipse::swt::graphics::Rectangle(::org::eclipse::swt::graphics::Rectangle)>("intersection"), //
		jMethod<::jboolean(::jint, ::jint, ::jint, ::jint)>("intersects"), //
		jMethod<::jboolean(::org::eclipse::swt::graphics::Rectangle)>("intersects"), //
		jMethod<::jboolean()>("isEmpty"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::org::eclipse::swt::graphics::Rectangle(::org::eclipse::swt::graphics::Rectangle)>("union"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto contains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("contains")] != -1);
		return call<R>("contains", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto intersect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("intersect")] != -1);
		return call<R>("intersect", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Rectangle, typename... Args>
	auto intersection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("intersection")] != -1);
		return call<R>("intersection", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto intersects(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("intersects")] != -1);
		return call<R>("intersects", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEmpty")] != -1);
		return call<R>("isEmpty", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Rectangle, typename... Args>
	auto union_(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("union")] != -1);
		return call<R>("union", std::forward<Args>(args)...);
	}

};

#endif
