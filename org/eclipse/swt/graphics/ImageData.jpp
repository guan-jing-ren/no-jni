#ifndef org_eclipse_swt_graphics_ImageData_HPP
#define org_eclipse_swt_graphics_ImageData_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::graphics::ImageData : public jObject<::org::eclipse::swt::graphics::ImageData, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_graphics / "ImageData";

	constexpr static Enume field_signatures{
		jField<::jint>("alpha"), //
		jField<::jbyte *>("alphaData"), //
		jField<::jint>("bytesPerLine"), //
		jField<::jbyte *>("data"), //
		jField<::jint>("delayTime"), //
		jField<::jint>("depth"), //
		jField<::jint>("disposalMethod"), //
		jField<::jint>("height"), //
		jField<::jbyte *>("maskData"), //
		jField<::jint>("maskPad"), //
		jField<::org::eclipse::swt::graphics::PaletteData>("palette"), //
		jField<::jint>("scanlinePad"), //
		jField<::jint>("transparentPixel"), //
		jField<::jint>("type"), //
		jField<::jint>("width"), //
		jField<::jint>("x"), //
		jField<::jint>("y"), //
	};

	template<typename F = ::jint>
	auto alpha() const {
		static_assert(field_signatures[jField<F>("alpha")] != -1);
		return at<F>("alpha");
	}

	template<typename F = ::jbyte *>
	auto alphaData() const {
		static_assert(field_signatures[jField<F>("alphaData")] != -1);
		return at<F>("alphaData");
	}

	template<typename F = ::jint>
	auto bytesPerLine() const {
		static_assert(field_signatures[jField<F>("bytesPerLine")] != -1);
		return at<F>("bytesPerLine");
	}

	template<typename F = ::jbyte *>
	auto data() const {
		static_assert(field_signatures[jField<F>("data")] != -1);
		return at<F>("data");
	}

	template<typename F = ::jint>
	auto delayTime() const {
		static_assert(field_signatures[jField<F>("delayTime")] != -1);
		return at<F>("delayTime");
	}

	template<typename F = ::jint>
	auto depth() const {
		static_assert(field_signatures[jField<F>("depth")] != -1);
		return at<F>("depth");
	}

	template<typename F = ::jint>
	auto disposalMethod() const {
		static_assert(field_signatures[jField<F>("disposalMethod")] != -1);
		return at<F>("disposalMethod");
	}

	template<typename F = ::jint>
	auto height() const {
		static_assert(field_signatures[jField<F>("height")] != -1);
		return at<F>("height");
	}

	template<typename F = ::jbyte *>
	auto maskData() const {
		static_assert(field_signatures[jField<F>("maskData")] != -1);
		return at<F>("maskData");
	}

	template<typename F = ::jint>
	auto maskPad() const {
		static_assert(field_signatures[jField<F>("maskPad")] != -1);
		return at<F>("maskPad");
	}

	template<typename F = ::org::eclipse::swt::graphics::PaletteData>
	auto palette() const {
		static_assert(field_signatures[jField<F>("palette")] != -1);
		return at<F>("palette");
	}

	template<typename F = ::jint>
	auto scanlinePad() const {
		static_assert(field_signatures[jField<F>("scanlinePad")] != -1);
		return at<F>("scanlinePad");
	}

	template<typename F = ::jint>
	auto transparentPixel() const {
		static_assert(field_signatures[jField<F>("transparentPixel")] != -1);
		return at<F>("transparentPixel");
	}

	template<typename F = ::jint>
	auto type() const {
		static_assert(field_signatures[jField<F>("type")] != -1);
		return at<F>("type");
	}

	template<typename F = ::jint>
	auto width() const {
		static_assert(field_signatures[jField<F>("width")] != -1);
		return at<F>("width");
	}

	template<typename F = ::jint>
	auto x() const {
		static_assert(field_signatures[jField<F>("x")] != -1);
		return at<F>("x");
	}

	template<typename F = ::jint>
	auto y() const {
		static_assert(field_signatures[jField<F>("y")] != -1);
		return at<F>("y");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint, ::jint, ::jint, ::org::eclipse::swt::graphics::PaletteData)>(), //
		jConstructor<::jvoid(::jint, ::jint, ::jint, ::org::eclipse::swt::graphics::PaletteData, ::jint, ::jbyte *)>(), //
		jConstructor<::jvoid(::java::io::InputStream)>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jint(::jint, ::jint)>("getAlpha"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jbyte *, ::jint)>("getAlphas"), //
		jMethod<::jint(::jint, ::jint)>("getPixel"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jbyte *, ::jint)>("getPixels"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint *, ::jint)>("getPixels"), //
		jMethod<::org::eclipse::swt::graphics::RGB *()>("getRGBs"), //
		jMethod<::org::eclipse::swt::graphics::ImageData()>("getTransparencyMask"), //
		jMethod<::jint()>("getTransparencyType"), //
		jMethod<::org::eclipse::swt::graphics::ImageData(::jint, ::jint, ::jint, ::org::eclipse::swt::graphics::PaletteData, ::jint, ::jbyte *, ::jint, ::jbyte *, ::jbyte *, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("internal_new"), //
		jMethod<::org::eclipse::swt::graphics::ImageData(::jint, ::jint)>("scaledTo"), //
		jMethod<::jvoid(::jint, ::jint, ::jint)>("setAlpha"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jbyte *, ::jint)>("setAlphas"), //
		jMethod<::jvoid(::jint, ::jint, ::jint)>("setPixel"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jbyte *, ::jint)>("setPixels"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint *, ::jint)>("setPixels"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAlpha(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlpha")] != -1);
		return call<R>("getAlpha", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getAlphas(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlphas")] != -1);
		return call<R>("getAlphas", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPixel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPixel")] != -1);
		return call<R>("getPixel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getPixels(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPixels")] != -1);
		return call<R>("getPixels", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::RGB *, typename... Args>
	auto getRGBs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRGBs")] != -1);
		return call<R>("getRGBs", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::ImageData, typename... Args>
	auto getTransparencyMask(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransparencyMask")] != -1);
		return call<R>("getTransparencyMask", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTransparencyType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransparencyType")] != -1);
		return call<R>("getTransparencyType", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::ImageData, typename... Args>
	static auto internal_new(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("internal_new")] != -1);
		return scall<R>("internal_new", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::ImageData, typename... Args>
	auto scaledTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("scaledTo")] != -1);
		return call<R>("scaledTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAlpha(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAlpha")] != -1);
		return call<R>("setAlpha", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAlphas(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAlphas")] != -1);
		return call<R>("setAlphas", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPixel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPixel")] != -1);
		return call<R>("setPixel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPixels(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPixels")] != -1);
		return call<R>("setPixels", std::forward<Args>(args)...);
	}

};

#endif
