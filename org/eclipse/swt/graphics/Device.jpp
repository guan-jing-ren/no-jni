#ifndef org_eclipse_swt_graphics_Device_HPP
#define org_eclipse_swt_graphics_Device_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::graphics::Device : public jObject<::org::eclipse::swt::graphics::Device, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_graphics / "Device";

	constexpr static Enume field_signatures{
		jField<::jboolean>("DEBUG"), //
	};

	template<typename F = ::jboolean>
	static auto DEBUG() {
		static_assert(field_signatures[jField<F>("DEBUG")] != -1);
		return sat<F>("DEBUG");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::org::eclipse::swt::graphics::DeviceData)>(), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::org::eclipse::swt::graphics::Rectangle()>("getBounds"), //
		jMethod<::org::eclipse::swt::graphics::Rectangle()>("getClientArea"), //
		jMethod<::org::eclipse::swt::graphics::Point()>("getDPI"), //
		jMethod<::jint()>("getDepth"), //
		jMethod<::org::eclipse::swt::graphics::DeviceData()>("getDeviceData"), //
		jMethod<::org::eclipse::swt::graphics::FontData *(::java::lang::String, ::jboolean)>("getFontList"), //
		jMethod<::org::eclipse::swt::graphics::Color(::jint)>("getSystemColor"), //
		jMethod<::org::eclipse::swt::graphics::Font()>("getSystemFont"), //
		jMethod<::jboolean()>("getWarnings"), //
		jMethod<::jvoid(::jlong, ::org::eclipse::swt::graphics::GCData)>("internal_dispose_GC"), //
		jMethod<::jlong(::org::eclipse::swt::graphics::GCData)>("internal_new_GC"), //
		jMethod<::jboolean()>("isDisposed"), //
		jMethod<::jboolean(::java::lang::String)>("loadFont"), //
		jMethod<::jvoid(::jboolean)>("setWarnings"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Rectangle, typename... Args>
	auto getBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds")] != -1);
		return call<R>("getBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Rectangle, typename... Args>
	auto getClientArea(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClientArea")] != -1);
		return call<R>("getClientArea", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point, typename... Args>
	auto getDPI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDPI")] != -1);
		return call<R>("getDPI", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDepth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDepth")] != -1);
		return call<R>("getDepth", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::DeviceData, typename... Args>
	auto getDeviceData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDeviceData")] != -1);
		return call<R>("getDeviceData", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::FontData *, typename... Args>
	auto getFontList(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFontList")] != -1);
		return call<R>("getFontList", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Color, typename... Args>
	auto getSystemColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSystemColor")] != -1);
		return call<R>("getSystemColor", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Font, typename... Args>
	auto getSystemFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSystemFont")] != -1);
		return call<R>("getSystemFont", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getWarnings(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWarnings")] != -1);
		return call<R>("getWarnings", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto internal_dispose_GC(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("internal_dispose_GC")] != -1);
		return call<R>("internal_dispose_GC", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto internal_new_GC(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("internal_new_GC")] != -1);
		return call<R>("internal_new_GC", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDisposed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDisposed")] != -1);
		return call<R>("isDisposed", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto loadFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("loadFont")] != -1);
		return call<R>("loadFont", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWarnings(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setWarnings")] != -1);
		return call<R>("setWarnings", std::forward<Args>(args)...);
	}

};

#endif
