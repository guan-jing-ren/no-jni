#ifndef org_eclipse_swt_graphics_DeviceData_HPP
#define org_eclipse_swt_graphics_DeviceData_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::graphics::DeviceData : public jObject<::org::eclipse::swt::graphics::DeviceData, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_graphics / "DeviceData";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("application_class"), //
		jField<::java::lang::String>("application_name"), //
		jField<::jboolean>("debug"), //
		jField<::java::lang::String>("display_name"), //
		jField<::java::lang::Error *>("errors"), //
		jField<::java::lang::Object *>("objects"), //
		jField<::jboolean>("tracking"), //
	};

	template<typename F = ::java::lang::String>
	auto application_class() const {
		static_assert(field_signatures[jField<F>("application_class")] != -1);
		return at<F>("application_class");
	}

	template<typename F = ::java::lang::String>
	auto application_name() const {
		static_assert(field_signatures[jField<F>("application_name")] != -1);
		return at<F>("application_name");
	}

	template<typename F = ::jboolean>
	auto debug() const {
		static_assert(field_signatures[jField<F>("debug")] != -1);
		return at<F>("debug");
	}

	template<typename F = ::java::lang::String>
	auto display_name() const {
		static_assert(field_signatures[jField<F>("display_name")] != -1);
		return at<F>("display_name");
	}

	template<typename F = ::java::lang::Error *>
	auto errors() const {
		static_assert(field_signatures[jField<F>("errors")] != -1);
		return at<F>("errors");
	}

	template<typename F = ::java::lang::Object *>
	auto objects() const {
		static_assert(field_signatures[jField<F>("objects")] != -1);
		return at<F>("objects");
	}

	template<typename F = ::jboolean>
	auto tracking() const {
		static_assert(field_signatures[jField<F>("tracking")] != -1);
		return at<F>("tracking");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
	};

};

#endif
