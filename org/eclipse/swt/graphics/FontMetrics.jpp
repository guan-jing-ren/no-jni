#ifndef org_eclipse_swt_graphics_FontMetrics_HPP
#define org_eclipse_swt_graphics_FontMetrics_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::graphics::FontMetrics : public jObject<::org::eclipse::swt::graphics::FontMetrics, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_graphics / "FontMetrics";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint()>("getAscent"), //
		jMethod<::jint()>("getAverageCharWidth"), //
		jMethod<::jint()>("getDescent"), //
		jMethod<::jint()>("getHeight"), //
		jMethod<::jint()>("getLeading"), //
		jMethod<::org::eclipse::swt::graphics::FontMetrics(::jint, ::jint, ::jint, ::jint, ::jint)>("gtk_new"), //
		jMethod<::jint()>("hashCode"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAscent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAscent")] != -1);
		return call<R>("getAscent", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAverageCharWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAverageCharWidth")] != -1);
		return call<R>("getAverageCharWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDescent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDescent")] != -1);
		return call<R>("getDescent", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeight")] != -1);
		return call<R>("getHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLeading(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLeading")] != -1);
		return call<R>("getLeading", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::FontMetrics, typename... Args>
	static auto gtk_new(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("gtk_new")] != -1);
		return scall<R>("gtk_new", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

};

#endif
