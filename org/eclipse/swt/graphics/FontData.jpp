#ifndef org_eclipse_swt_graphics_FontData_HPP
#define org_eclipse_swt_graphics_FontData_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::graphics::FontData : public jObject<::org::eclipse::swt::graphics::FontData, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_graphics / "FontData";

	constexpr static Enume field_signatures{
		jField<::jfloat>("height"), //
		jField<::java::lang::String>("name"), //
		jField<::jbyte *>("string"), //
		jField<::jint>("style"), //
	};

	template<typename F = ::jfloat>
	auto height() const {
		static_assert(field_signatures[jField<F>("height")] != -1);
		return at<F>("height");
	}

	template<typename F = ::java::lang::String>
	auto name() const {
		static_assert(field_signatures[jField<F>("name")] != -1);
		return at<F>("name");
	}

	template<typename F = ::jbyte *>
	auto string() const {
		static_assert(field_signatures[jField<F>("string")] != -1);
		return at<F>("string");
	}

	template<typename F = ::jint>
	auto style() const {
		static_assert(field_signatures[jField<F>("style")] != -1);
		return at<F>("style");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::jint, ::jint)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint()>("getHeight"), //
		jMethod<::java::lang::String()>("getLocale"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jint()>("getStyle"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jvoid(::jint)>("setHeight"), //
		jMethod<::jvoid(::java::lang::String)>("setLocale"), //
		jMethod<::jvoid(::java::lang::String)>("setName"), //
		jMethod<::jvoid(::jint)>("setStyle"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeight")] != -1);
		return call<R>("getHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLocale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocale")] != -1);
		return call<R>("getLocale", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStyle")] != -1);
		return call<R>("getStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHeight")] != -1);
		return call<R>("setHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLocale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLocale")] != -1);
		return call<R>("setLocale", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setName")] != -1);
		return call<R>("setName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setStyle")] != -1);
		return call<R>("setStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
