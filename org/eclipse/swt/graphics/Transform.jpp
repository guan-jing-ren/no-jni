#ifndef org_eclipse_swt_graphics_Transform_HPP
#define org_eclipse_swt_graphics_Transform_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::graphics::Transform : public jObject<::org::eclipse::swt::graphics::Transform, ::org::eclipse::swt::graphics::Resource> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_graphics / "Transform";

	constexpr static Enume field_signatures{
		jField<::jdouble *>("handle"), //
	};

	template<typename F = ::jdouble *>
	auto handle() const {
		static_assert(field_signatures[jField<F>("handle")] != -1);
		return at<F>("handle");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::graphics::Device)>(), //
		jConstructor<::jvoid(::org::eclipse::swt::graphics::Device, ::jfloat, ::jfloat, ::jfloat, ::jfloat, ::jfloat, ::jfloat)>(), //
		jConstructor<::jvoid(::org::eclipse::swt::graphics::Device, ::jfloat *)>(), //
		jMethod<::jvoid(::jfloat *)>("getElements"), //
		jMethod<::jvoid()>("identity"), //
		jMethod<::jvoid()>("invert"), //
		jMethod<::jboolean()>("isDisposed"), //
		jMethod<::jboolean()>("isIdentity"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Transform)>("multiply"), //
		jMethod<::jvoid(::jfloat)>("rotate"), //
		jMethod<::jvoid(::jfloat, ::jfloat)>("scale"), //
		jMethod<::jvoid(::jfloat, ::jfloat, ::jfloat, ::jfloat, ::jfloat, ::jfloat)>("setElements"), //
		jMethod<::jvoid(::jfloat, ::jfloat)>("shear"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid(::jfloat *)>("transform"), //
		jMethod<::jvoid(::jfloat, ::jfloat)>("translate"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto getElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getElements")] != -1);
		return call<R>("getElements", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto identity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("identity")] != -1);
		return call<R>("identity", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto invert(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invert")] != -1);
		return call<R>("invert", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDisposed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDisposed")] != -1);
		return call<R>("isDisposed", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isIdentity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isIdentity")] != -1);
		return call<R>("isIdentity", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto multiply(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("multiply")] != -1);
		return call<R>("multiply", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto rotate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rotate")] != -1);
		return call<R>("rotate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto scale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("scale")] != -1);
		return call<R>("scale", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setElements")] != -1);
		return call<R>("setElements", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto shear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shear")] != -1);
		return call<R>("shear", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto transform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("transform")] != -1);
		return call<R>("transform", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto translate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("translate")] != -1);
		return call<R>("translate", std::forward<Args>(args)...);
	}

};

#endif
