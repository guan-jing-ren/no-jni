#ifndef org_eclipse_swt_graphics_GCData_HPP
#define org_eclipse_swt_graphics_GCData_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::graphics::GCData : public jObject<::org::eclipse::swt::graphics::GCData, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_graphics / "GCData";

	constexpr static Enume field_signatures{
		jField<::jint>("alpha"), //
		jField<::org::eclipse::swt::graphics::Pattern>("backgroundPattern"), //
		jField<::jlong>("cairo"), //
		jField<::jdouble>("cairoXoffset"), //
		jField<::jdouble>("cairoYoffset"), //
		jField<::jlong>("clipRgn"), //
		jField<::jdouble *>("clippingTransform"), //
		jField<::jlong>("context"), //
		jField<::jlong>("damageRgn"), //
		jField<::org::eclipse::swt::graphics::Device>("device"), //
		jField<::jboolean>("disposeCairo"), //
		jField<::jint>("drawFlags"), //
		jField<::jlong>("drawable"), //
		jField<::org::eclipse::swt::graphics::Font>("font"), //
		jField<::org::eclipse::swt::graphics::Pattern>("foregroundPattern"), //
		jField<::jint>("height"), //
		jField<::jdouble *>("identity"), //
		jField<::org::eclipse::swt::graphics::Image>("image"), //
		jField<::jint>("interpolation"), //
		jField<::jlong>("layout"), //
		jField<::jint>("lineCap"), //
		jField<::jfloat *>("lineDashes"), //
		jField<::jfloat>("lineDashesOffset"), //
		jField<::jint>("lineJoin"), //
		jField<::jfloat>("lineMiterLimit"), //
		jField<::jint>("lineStyle"), //
		jField<::jfloat>("lineWidth"), //
		jField<::jboolean>("realDrawable"), //
		jField<::jint>("state"), //
		jField<::java::lang::String>("string"), //
		jField<::jint>("stringHeight"), //
		jField<::jint>("stringWidth"), //
		jField<::jint>("style"), //
		jField<::jint>("width"), //
		jField<::jboolean>("xorMode"), //
	};

	template<typename F = ::jint>
	auto alpha() const {
		static_assert(field_signatures[jField<F>("alpha")] != -1);
		return at<F>("alpha");
	}

	template<typename F = ::org::eclipse::swt::graphics::Pattern>
	auto backgroundPattern() const {
		static_assert(field_signatures[jField<F>("backgroundPattern")] != -1);
		return at<F>("backgroundPattern");
	}

	template<typename F = ::jlong>
	auto cairo() const {
		static_assert(field_signatures[jField<F>("cairo")] != -1);
		return at<F>("cairo");
	}

	template<typename F = ::jdouble>
	auto cairoXoffset() const {
		static_assert(field_signatures[jField<F>("cairoXoffset")] != -1);
		return at<F>("cairoXoffset");
	}

	template<typename F = ::jdouble>
	auto cairoYoffset() const {
		static_assert(field_signatures[jField<F>("cairoYoffset")] != -1);
		return at<F>("cairoYoffset");
	}

	template<typename F = ::jlong>
	auto clipRgn() const {
		static_assert(field_signatures[jField<F>("clipRgn")] != -1);
		return at<F>("clipRgn");
	}

	template<typename F = ::jdouble *>
	auto clippingTransform() const {
		static_assert(field_signatures[jField<F>("clippingTransform")] != -1);
		return at<F>("clippingTransform");
	}

	template<typename F = ::jlong>
	auto context() const {
		static_assert(field_signatures[jField<F>("context")] != -1);
		return at<F>("context");
	}

	template<typename F = ::jlong>
	auto damageRgn() const {
		static_assert(field_signatures[jField<F>("damageRgn")] != -1);
		return at<F>("damageRgn");
	}

	template<typename F = ::org::eclipse::swt::graphics::Device>
	auto device() const {
		static_assert(field_signatures[jField<F>("device")] != -1);
		return at<F>("device");
	}

	template<typename F = ::jboolean>
	auto disposeCairo() const {
		static_assert(field_signatures[jField<F>("disposeCairo")] != -1);
		return at<F>("disposeCairo");
	}

	template<typename F = ::jint>
	auto drawFlags() const {
		static_assert(field_signatures[jField<F>("drawFlags")] != -1);
		return at<F>("drawFlags");
	}

	template<typename F = ::jlong>
	auto drawable() const {
		static_assert(field_signatures[jField<F>("drawable")] != -1);
		return at<F>("drawable");
	}

	template<typename F = ::org::eclipse::swt::graphics::Font>
	auto font() const {
		static_assert(field_signatures[jField<F>("font")] != -1);
		return at<F>("font");
	}

	template<typename F = ::org::eclipse::swt::graphics::Pattern>
	auto foregroundPattern() const {
		static_assert(field_signatures[jField<F>("foregroundPattern")] != -1);
		return at<F>("foregroundPattern");
	}

	template<typename F = ::jint>
	auto height() const {
		static_assert(field_signatures[jField<F>("height")] != -1);
		return at<F>("height");
	}

	template<typename F = ::jdouble *>
	auto identity() const {
		static_assert(field_signatures[jField<F>("identity")] != -1);
		return at<F>("identity");
	}

	template<typename F = ::org::eclipse::swt::graphics::Image>
	auto image() const {
		static_assert(field_signatures[jField<F>("image")] != -1);
		return at<F>("image");
	}

	template<typename F = ::jint>
	auto interpolation() const {
		static_assert(field_signatures[jField<F>("interpolation")] != -1);
		return at<F>("interpolation");
	}

	template<typename F = ::jlong>
	auto layout() const {
		static_assert(field_signatures[jField<F>("layout")] != -1);
		return at<F>("layout");
	}

	template<typename F = ::jint>
	auto lineCap() const {
		static_assert(field_signatures[jField<F>("lineCap")] != -1);
		return at<F>("lineCap");
	}

	template<typename F = ::jfloat *>
	auto lineDashes() const {
		static_assert(field_signatures[jField<F>("lineDashes")] != -1);
		return at<F>("lineDashes");
	}

	template<typename F = ::jfloat>
	auto lineDashesOffset() const {
		static_assert(field_signatures[jField<F>("lineDashesOffset")] != -1);
		return at<F>("lineDashesOffset");
	}

	template<typename F = ::jint>
	auto lineJoin() const {
		static_assert(field_signatures[jField<F>("lineJoin")] != -1);
		return at<F>("lineJoin");
	}

	template<typename F = ::jfloat>
	auto lineMiterLimit() const {
		static_assert(field_signatures[jField<F>("lineMiterLimit")] != -1);
		return at<F>("lineMiterLimit");
	}

	template<typename F = ::jint>
	auto lineStyle() const {
		static_assert(field_signatures[jField<F>("lineStyle")] != -1);
		return at<F>("lineStyle");
	}

	template<typename F = ::jfloat>
	auto lineWidth() const {
		static_assert(field_signatures[jField<F>("lineWidth")] != -1);
		return at<F>("lineWidth");
	}

	template<typename F = ::jboolean>
	auto realDrawable() const {
		static_assert(field_signatures[jField<F>("realDrawable")] != -1);
		return at<F>("realDrawable");
	}

	template<typename F = ::jint>
	auto state() const {
		static_assert(field_signatures[jField<F>("state")] != -1);
		return at<F>("state");
	}

	template<typename F = ::java::lang::String>
	auto string() const {
		static_assert(field_signatures[jField<F>("string")] != -1);
		return at<F>("string");
	}

	template<typename F = ::jint>
	auto stringHeight() const {
		static_assert(field_signatures[jField<F>("stringHeight")] != -1);
		return at<F>("stringHeight");
	}

	template<typename F = ::jint>
	auto stringWidth() const {
		static_assert(field_signatures[jField<F>("stringWidth")] != -1);
		return at<F>("stringWidth");
	}

	template<typename F = ::jint>
	auto style() const {
		static_assert(field_signatures[jField<F>("style")] != -1);
		return at<F>("style");
	}

	template<typename F = ::jint>
	auto width() const {
		static_assert(field_signatures[jField<F>("width")] != -1);
		return at<F>("width");
	}

	template<typename F = ::jboolean>
	auto xorMode() const {
		static_assert(field_signatures[jField<F>("xorMode")] != -1);
		return at<F>("xorMode");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
	};

};

#endif
