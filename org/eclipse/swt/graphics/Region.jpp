#ifndef org_eclipse_swt_graphics_Region_HPP
#define org_eclipse_swt_graphics_Region_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::graphics::Region : public jObject<::org::eclipse::swt::graphics::Region, ::org::eclipse::swt::graphics::Resource> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_graphics / "Region";

	constexpr static Enume field_signatures{
		jField<::jlong>("handle"), //
	};

	template<typename F = ::jlong>
	auto handle() const {
		static_assert(field_signatures[jField<F>("handle")] != -1);
		return at<F>("handle");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::org::eclipse::swt::graphics::Device)>(), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("add"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Rectangle)>("add"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Region)>("add"), //
		jMethod<::jvoid(::jint *)>("add"), //
		jMethod<::jboolean(::jint, ::jint)>("contains"), //
		jMethod<::jboolean(::org::eclipse::swt::graphics::Point)>("contains"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::org::eclipse::swt::graphics::Rectangle()>("getBounds"), //
		jMethod<::org::eclipse::swt::graphics::Region(::org::eclipse::swt::graphics::Device, ::jlong)>("gtk_new"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("intersect"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Rectangle)>("intersect"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Region)>("intersect"), //
		jMethod<::jboolean(::jint, ::jint, ::jint, ::jint)>("intersects"), //
		jMethod<::jboolean(::org::eclipse::swt::graphics::Rectangle)>("intersects"), //
		jMethod<::jboolean()>("isDisposed"), //
		jMethod<::jboolean()>("isEmpty"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("subtract"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Rectangle)>("subtract"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Region)>("subtract"), //
		jMethod<::jvoid(::jint *)>("subtract"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid(::jint, ::jint)>("translate"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Point)>("translate"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto contains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("contains")] != -1);
		return call<R>("contains", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Rectangle, typename... Args>
	auto getBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds")] != -1);
		return call<R>("getBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Region, typename... Args>
	static auto gtk_new(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("gtk_new")] != -1);
		return scall<R>("gtk_new", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto intersect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("intersect")] != -1);
		return call<R>("intersect", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto intersects(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("intersects")] != -1);
		return call<R>("intersects", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDisposed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDisposed")] != -1);
		return call<R>("isDisposed", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEmpty")] != -1);
		return call<R>("isEmpty", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto subtract(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("subtract")] != -1);
		return call<R>("subtract", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto translate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("translate")] != -1);
		return call<R>("translate", std::forward<Args>(args)...);
	}

};

#endif
