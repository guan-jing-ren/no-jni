#ifndef org_eclipse_swt_graphics_RGBA_HPP
#define org_eclipse_swt_graphics_RGBA_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::graphics::RGBA : public jObject<::org::eclipse::swt::graphics::RGBA, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_graphics / "RGBA";

	constexpr static Enume field_signatures{
		jField<::jint>("alpha"), //
		jField<::org::eclipse::swt::graphics::RGB>("rgb"), //
	};

	template<typename F = ::jint>
	auto alpha() const {
		static_assert(field_signatures[jField<F>("alpha")] != -1);
		return at<F>("alpha");
	}

	template<typename F = ::org::eclipse::swt::graphics::RGB>
	auto rgb() const {
		static_assert(field_signatures[jField<F>("rgb")] != -1);
		return at<F>("rgb");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jfloat, ::jfloat, ::jfloat, ::jfloat)>(), //
		jConstructor<::jvoid(::jint, ::jint, ::jint, ::jint)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jfloat *()>("getHSBA"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat *, typename... Args>
	auto getHSBA(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHSBA")] != -1);
		return call<R>("getHSBA", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
