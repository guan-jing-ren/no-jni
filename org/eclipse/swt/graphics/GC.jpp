#ifndef org_eclipse_swt_graphics_GC_HPP
#define org_eclipse_swt_graphics_GC_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::graphics::GC : public jObject<::org::eclipse::swt::graphics::GC, ::org::eclipse::swt::graphics::Resource> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_graphics / "GC";

	constexpr static Enume field_signatures{
		jField<::jlong>("handle"), //
	};

	template<typename F = ::jlong>
	auto handle() const {
		static_assert(field_signatures[jField<F>("handle")] != -1);
		return at<F>("handle");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::graphics::Drawable)>(), //
		jConstructor<::jvoid(::org::eclipse::swt::graphics::Drawable, ::jint)>(), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("copyArea"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jboolean)>("copyArea"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Image, ::jint, ::jint)>("copyArea"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("drawArc"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("drawFocus"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Image, ::jint, ::jint)>("drawImage"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Image, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("drawImage"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("drawLine"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("drawOval"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Path)>("drawPath"), //
		jMethod<::jvoid(::jint, ::jint)>("drawPoint"), //
		jMethod<::jvoid(::jint *)>("drawPolygon"), //
		jMethod<::jvoid(::jint *)>("drawPolyline"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("drawRectangle"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Rectangle)>("drawRectangle"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("drawRoundRectangle"), //
		jMethod<::jvoid(::java::lang::String, ::jint, ::jint)>("drawString"), //
		jMethod<::jvoid(::java::lang::String, ::jint, ::jint, ::jboolean)>("drawString"), //
		jMethod<::jvoid(::java::lang::String, ::jint, ::jint)>("drawText"), //
		jMethod<::jvoid(::java::lang::String, ::jint, ::jint, ::jint)>("drawText"), //
		jMethod<::jvoid(::java::lang::String, ::jint, ::jint, ::jboolean)>("drawText"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("fillArc"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jboolean)>("fillGradientRectangle"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("fillOval"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Path)>("fillPath"), //
		jMethod<::jvoid(::jint *)>("fillPolygon"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("fillRectangle"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Rectangle)>("fillRectangle"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("fillRoundRectangle"), //
		jMethod<::jint(::jchar)>("getAdvanceWidth"), //
		jMethod<::jboolean()>("getAdvanced"), //
		jMethod<::jint()>("getAlpha"), //
		jMethod<::jint()>("getAntialias"), //
		jMethod<::org::eclipse::swt::graphics::Color()>("getBackground"), //
		jMethod<::org::eclipse::swt::graphics::Pattern()>("getBackgroundPattern"), //
		jMethod<::jint(::jchar)>("getCharWidth"), //
		jMethod<::org::eclipse::swt::graphics::Rectangle()>("getClipping"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Region)>("getClipping"), //
		jMethod<::jint()>("getFillRule"), //
		jMethod<::org::eclipse::swt::graphics::Font()>("getFont"), //
		jMethod<::org::eclipse::swt::graphics::FontMetrics()>("getFontMetrics"), //
		jMethod<::org::eclipse::swt::graphics::Color()>("getForeground"), //
		jMethod<::org::eclipse::swt::graphics::Pattern()>("getForegroundPattern"), //
		jMethod<::org::eclipse::swt::graphics::GCData()>("getGCData"), //
		jMethod<::jint()>("getInterpolation"), //
		jMethod<::org::eclipse::swt::graphics::LineAttributes()>("getLineAttributes"), //
		jMethod<::jint()>("getLineCap"), //
		jMethod<::jint *()>("getLineDash"), //
		jMethod<::jint()>("getLineJoin"), //
		jMethod<::jint()>("getLineStyle"), //
		jMethod<::jint()>("getLineWidth"), //
		jMethod<::jint()>("getStyle"), //
		jMethod<::jint()>("getTextAntialias"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Transform)>("getTransform"), //
		jMethod<::jboolean()>("getXORMode"), //
		jMethod<::org::eclipse::swt::graphics::GC(::jlong, ::org::eclipse::swt::graphics::GCData)>("gtk_new"), //
		jMethod<::org::eclipse::swt::graphics::GC(::org::eclipse::swt::graphics::Drawable, ::org::eclipse::swt::graphics::GCData)>("gtk_new"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isClipped"), //
		jMethod<::jboolean()>("isDisposed"), //
		jMethod<::jvoid(::jboolean)>("setAdvanced"), //
		jMethod<::jvoid(::jint)>("setAlpha"), //
		jMethod<::jvoid(::jint)>("setAntialias"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Color)>("setBackground"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Pattern)>("setBackgroundPattern"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("setClipping"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Path)>("setClipping"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Rectangle)>("setClipping"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Region)>("setClipping"), //
		jMethod<::jvoid(::jint)>("setFillRule"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Font)>("setFont"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Color)>("setForeground"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Pattern)>("setForegroundPattern"), //
		jMethod<::jvoid(::jint)>("setInterpolation"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::LineAttributes)>("setLineAttributes"), //
		jMethod<::jvoid(::jint)>("setLineCap"), //
		jMethod<::jvoid(::jint *)>("setLineDash"), //
		jMethod<::jvoid(::jint)>("setLineJoin"), //
		jMethod<::jvoid(::jint)>("setLineStyle"), //
		jMethod<::jvoid(::jint)>("setLineWidth"), //
		jMethod<::jvoid(::jint)>("setTextAntialias"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Transform)>("setTransform"), //
		jMethod<::jvoid(::jboolean)>("setXORMode"), //
		jMethod<::org::eclipse::swt::graphics::Point(::java::lang::String)>("stringExtent"), //
		jMethod<::org::eclipse::swt::graphics::Point(::java::lang::String)>("textExtent"), //
		jMethod<::org::eclipse::swt::graphics::Point(::java::lang::String, ::jint)>("textExtent"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto copyArea(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("copyArea")] != -1);
		return call<R>("copyArea", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawArc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawArc")] != -1);
		return call<R>("drawArc", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawFocus")] != -1);
		return call<R>("drawFocus", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawImage")] != -1);
		return call<R>("drawImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawLine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawLine")] != -1);
		return call<R>("drawLine", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawOval(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawOval")] != -1);
		return call<R>("drawOval", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawPath")] != -1);
		return call<R>("drawPath", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawPoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawPoint")] != -1);
		return call<R>("drawPoint", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawPolygon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawPolygon")] != -1);
		return call<R>("drawPolygon", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawPolyline(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawPolyline")] != -1);
		return call<R>("drawPolyline", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawRectangle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawRectangle")] != -1);
		return call<R>("drawRectangle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawRoundRectangle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawRoundRectangle")] != -1);
		return call<R>("drawRoundRectangle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawString")] != -1);
		return call<R>("drawString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawText")] != -1);
		return call<R>("drawText", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillArc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fillArc")] != -1);
		return call<R>("fillArc", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillGradientRectangle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fillGradientRectangle")] != -1);
		return call<R>("fillGradientRectangle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillOval(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fillOval")] != -1);
		return call<R>("fillOval", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fillPath")] != -1);
		return call<R>("fillPath", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillPolygon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fillPolygon")] != -1);
		return call<R>("fillPolygon", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillRectangle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fillRectangle")] != -1);
		return call<R>("fillRectangle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillRoundRectangle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fillRoundRectangle")] != -1);
		return call<R>("fillRoundRectangle", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAdvanceWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAdvanceWidth")] != -1);
		return call<R>("getAdvanceWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getAdvanced(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAdvanced")] != -1);
		return call<R>("getAdvanced", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAlpha(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlpha")] != -1);
		return call<R>("getAlpha", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAntialias(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAntialias")] != -1);
		return call<R>("getAntialias", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Color, typename... Args>
	auto getBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBackground")] != -1);
		return call<R>("getBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Pattern, typename... Args>
	auto getBackgroundPattern(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBackgroundPattern")] != -1);
		return call<R>("getBackgroundPattern", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCharWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCharWidth")] != -1);
		return call<R>("getCharWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Rectangle, typename... Args>
	auto getClipping(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClipping")] != -1);
		return call<R>("getClipping", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getFillRule(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFillRule")] != -1);
		return call<R>("getFillRule", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Font, typename... Args>
	auto getFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFont")] != -1);
		return call<R>("getFont", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::FontMetrics, typename... Args>
	auto getFontMetrics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFontMetrics")] != -1);
		return call<R>("getFontMetrics", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Color, typename... Args>
	auto getForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getForeground")] != -1);
		return call<R>("getForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Pattern, typename... Args>
	auto getForegroundPattern(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getForegroundPattern")] != -1);
		return call<R>("getForegroundPattern", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::GCData, typename... Args>
	auto getGCData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGCData")] != -1);
		return call<R>("getGCData", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getInterpolation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInterpolation")] != -1);
		return call<R>("getInterpolation", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::LineAttributes, typename... Args>
	auto getLineAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineAttributes")] != -1);
		return call<R>("getLineAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLineCap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineCap")] != -1);
		return call<R>("getLineCap", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getLineDash(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineDash")] != -1);
		return call<R>("getLineDash", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLineJoin(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineJoin")] != -1);
		return call<R>("getLineJoin", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLineStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineStyle")] != -1);
		return call<R>("getLineStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLineWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineWidth")] != -1);
		return call<R>("getLineWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStyle")] != -1);
		return call<R>("getStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTextAntialias(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextAntialias")] != -1);
		return call<R>("getTextAntialias", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransform")] != -1);
		return call<R>("getTransform", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getXORMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getXORMode")] != -1);
		return call<R>("getXORMode", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::GC, typename... Args>
	static auto gtk_new(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("gtk_new")] != -1);
		return scall<R>("gtk_new", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isClipped(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isClipped")] != -1);
		return call<R>("isClipped", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDisposed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDisposed")] != -1);
		return call<R>("isDisposed", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAdvanced(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAdvanced")] != -1);
		return call<R>("setAdvanced", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAlpha(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAlpha")] != -1);
		return call<R>("setAlpha", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAntialias(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAntialias")] != -1);
		return call<R>("setAntialias", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBackground")] != -1);
		return call<R>("setBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackgroundPattern(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBackgroundPattern")] != -1);
		return call<R>("setBackgroundPattern", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setClipping(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setClipping")] != -1);
		return call<R>("setClipping", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFillRule(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFillRule")] != -1);
		return call<R>("setFillRule", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFont")] != -1);
		return call<R>("setFont", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setForeground")] != -1);
		return call<R>("setForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setForegroundPattern(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setForegroundPattern")] != -1);
		return call<R>("setForegroundPattern", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInterpolation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setInterpolation")] != -1);
		return call<R>("setInterpolation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLineAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLineAttributes")] != -1);
		return call<R>("setLineAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLineCap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLineCap")] != -1);
		return call<R>("setLineCap", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLineDash(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLineDash")] != -1);
		return call<R>("setLineDash", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLineJoin(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLineJoin")] != -1);
		return call<R>("setLineJoin", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLineStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLineStyle")] != -1);
		return call<R>("setLineStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLineWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLineWidth")] != -1);
		return call<R>("setLineWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTextAntialias(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTextAntialias")] != -1);
		return call<R>("setTextAntialias", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTransform")] != -1);
		return call<R>("setTransform", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setXORMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setXORMode")] != -1);
		return call<R>("setXORMode", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point, typename... Args>
	auto stringExtent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stringExtent")] != -1);
		return call<R>("stringExtent", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point, typename... Args>
	auto textExtent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("textExtent")] != -1);
		return call<R>("textExtent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
