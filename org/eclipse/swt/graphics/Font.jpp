#ifndef org_eclipse_swt_graphics_Font_HPP
#define org_eclipse_swt_graphics_Font_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::graphics::Font : public jObject<::org::eclipse::swt::graphics::Font, ::org::eclipse::swt::graphics::Resource> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_graphics / "Font";

	constexpr static Enume field_signatures{
		jField<::jlong>("handle"), //
	};

	template<typename F = ::jlong>
	auto handle() const {
		static_assert(field_signatures[jField<F>("handle")] != -1);
		return at<F>("handle");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::graphics::Device, ::java::lang::String, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::org::eclipse::swt::graphics::Device, ::org::eclipse::swt::graphics::FontData)>(), //
		jConstructor<::jvoid(::org::eclipse::swt::graphics::Device, ::org::eclipse::swt::graphics::FontData *)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::org::eclipse::swt::graphics::FontData *()>("getFontData"), //
		jMethod<::org::eclipse::swt::graphics::Font(::org::eclipse::swt::graphics::Device, ::jlong)>("gtk_new"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isDisposed"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::FontData *, typename... Args>
	auto getFontData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFontData")] != -1);
		return call<R>("getFontData", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Font, typename... Args>
	static auto gtk_new(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("gtk_new")] != -1);
		return scall<R>("gtk_new", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDisposed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDisposed")] != -1);
		return call<R>("isDisposed", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
