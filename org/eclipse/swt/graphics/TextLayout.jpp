#ifndef org_eclipse_swt_graphics_TextLayout_HPP
#define org_eclipse_swt_graphics_TextLayout_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::graphics::TextLayout : public jObject<::org::eclipse::swt::graphics::TextLayout, ::org::eclipse::swt::graphics::Resource> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_graphics / "TextLayout";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::graphics::Device)>(), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::GC, ::jint, ::jint)>("draw"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::GC, ::jint, ::jint, ::jint, ::jint, ::org::eclipse::swt::graphics::Color, ::org::eclipse::swt::graphics::Color)>("draw"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::GC, ::jint, ::jint, ::jint, ::jint, ::org::eclipse::swt::graphics::Color, ::org::eclipse::swt::graphics::Color, ::jint)>("draw"), //
		jMethod<::jint()>("getAlignment"), //
		jMethod<::jint()>("getAscent"), //
		jMethod<::org::eclipse::swt::graphics::Rectangle()>("getBounds"), //
		jMethod<::org::eclipse::swt::graphics::Rectangle(::jint, ::jint)>("getBounds"), //
		jMethod<::jint()>("getDescent"), //
		jMethod<::org::eclipse::swt::graphics::Font()>("getFont"), //
		jMethod<::jint()>("getIndent"), //
		jMethod<::jboolean()>("getJustify"), //
		jMethod<::jint(::jint)>("getLevel"), //
		jMethod<::org::eclipse::swt::graphics::Rectangle(::jint)>("getLineBounds"), //
		jMethod<::jint()>("getLineCount"), //
		jMethod<::jint(::jint)>("getLineIndex"), //
		jMethod<::org::eclipse::swt::graphics::FontMetrics(::jint)>("getLineMetrics"), //
		jMethod<::jint *()>("getLineOffsets"), //
		jMethod<::org::eclipse::swt::graphics::Point(::jint, ::jboolean)>("getLocation"), //
		jMethod<::jint(::jint, ::jint)>("getNextOffset"), //
		jMethod<::jint(::jint, ::jint, ::jint *)>("getOffset"), //
		jMethod<::jint(::org::eclipse::swt::graphics::Point, ::jint *)>("getOffset"), //
		jMethod<::jint()>("getOrientation"), //
		jMethod<::jint(::jint, ::jint)>("getPreviousOffset"), //
		jMethod<::jint *()>("getRanges"), //
		jMethod<::jint *()>("getSegments"), //
		jMethod<::jchar *()>("getSegmentsChars"), //
		jMethod<::jint()>("getSpacing"), //
		jMethod<::org::eclipse::swt::graphics::TextStyle(::jint)>("getStyle"), //
		jMethod<::org::eclipse::swt::graphics::TextStyle *()>("getStyles"), //
		jMethod<::jint *()>("getTabs"), //
		jMethod<::java::lang::String()>("getText"), //
		jMethod<::jint()>("getTextDirection"), //
		jMethod<::jint()>("getWidth"), //
		jMethod<::jint()>("getWrapIndent"), //
		jMethod<::jboolean()>("isDisposed"), //
		jMethod<::jvoid(::jint)>("setAlignment"), //
		jMethod<::jvoid(::jint)>("setAscent"), //
		jMethod<::jvoid(::jint)>("setDescent"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Font)>("setFont"), //
		jMethod<::jvoid(::jint)>("setIndent"), //
		jMethod<::jvoid(::jboolean)>("setJustify"), //
		jMethod<::jvoid(::jint)>("setOrientation"), //
		jMethod<::jvoid(::jint *)>("setSegments"), //
		jMethod<::jvoid(::jchar *)>("setSegmentsChars"), //
		jMethod<::jvoid(::jint)>("setSpacing"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::TextStyle, ::jint, ::jint)>("setStyle"), //
		jMethod<::jvoid(::jint *)>("setTabs"), //
		jMethod<::jvoid(::java::lang::String)>("setText"), //
		jMethod<::jvoid(::jint)>("setTextDirection"), //
		jMethod<::jvoid(::jint)>("setWidth"), //
		jMethod<::jvoid(::jint)>("setWrapIndent"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto draw(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("draw")] != -1);
		return call<R>("draw", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlignment")] != -1);
		return call<R>("getAlignment", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAscent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAscent")] != -1);
		return call<R>("getAscent", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Rectangle, typename... Args>
	auto getBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds")] != -1);
		return call<R>("getBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDescent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDescent")] != -1);
		return call<R>("getDescent", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Font, typename... Args>
	auto getFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFont")] != -1);
		return call<R>("getFont", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getIndent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIndent")] != -1);
		return call<R>("getIndent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getJustify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJustify")] != -1);
		return call<R>("getJustify", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLevel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLevel")] != -1);
		return call<R>("getLevel", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Rectangle, typename... Args>
	auto getLineBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineBounds")] != -1);
		return call<R>("getLineBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLineCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineCount")] != -1);
		return call<R>("getLineCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLineIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineIndex")] != -1);
		return call<R>("getLineIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::FontMetrics, typename... Args>
	auto getLineMetrics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineMetrics")] != -1);
		return call<R>("getLineMetrics", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getLineOffsets(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineOffsets")] != -1);
		return call<R>("getLineOffsets", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point, typename... Args>
	auto getLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocation")] != -1);
		return call<R>("getLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNextOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNextOffset")] != -1);
		return call<R>("getNextOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOffset")] != -1);
		return call<R>("getOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOrientation")] != -1);
		return call<R>("getOrientation", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPreviousOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreviousOffset")] != -1);
		return call<R>("getPreviousOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getRanges(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRanges")] != -1);
		return call<R>("getRanges", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getSegments(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSegments")] != -1);
		return call<R>("getSegments", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar *, typename... Args>
	auto getSegmentsChars(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSegmentsChars")] != -1);
		return call<R>("getSegmentsChars", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSpacing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSpacing")] != -1);
		return call<R>("getSpacing", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::TextStyle, typename... Args>
	auto getStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStyle")] != -1);
		return call<R>("getStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::TextStyle *, typename... Args>
	auto getStyles(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStyles")] != -1);
		return call<R>("getStyles", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getTabs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTabs")] != -1);
		return call<R>("getTabs", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getText")] != -1);
		return call<R>("getText", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTextDirection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextDirection")] != -1);
		return call<R>("getTextDirection", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWrapIndent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWrapIndent")] != -1);
		return call<R>("getWrapIndent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDisposed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDisposed")] != -1);
		return call<R>("isDisposed", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAlignment")] != -1);
		return call<R>("setAlignment", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAscent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAscent")] != -1);
		return call<R>("setAscent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDescent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDescent")] != -1);
		return call<R>("setDescent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFont")] != -1);
		return call<R>("setFont", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIndent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIndent")] != -1);
		return call<R>("setIndent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setJustify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setJustify")] != -1);
		return call<R>("setJustify", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOrientation")] != -1);
		return call<R>("setOrientation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSegments(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSegments")] != -1);
		return call<R>("setSegments", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSegmentsChars(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSegmentsChars")] != -1);
		return call<R>("setSegmentsChars", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSpacing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSpacing")] != -1);
		return call<R>("setSpacing", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setStyle")] != -1);
		return call<R>("setStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTabs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTabs")] != -1);
		return call<R>("setTabs", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setText")] != -1);
		return call<R>("setText", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTextDirection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTextDirection")] != -1);
		return call<R>("setTextDirection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setWidth")] != -1);
		return call<R>("setWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWrapIndent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setWrapIndent")] != -1);
		return call<R>("setWrapIndent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
