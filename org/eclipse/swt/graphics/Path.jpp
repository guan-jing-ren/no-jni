#ifndef org_eclipse_swt_graphics_Path_HPP
#define org_eclipse_swt_graphics_Path_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::graphics::Path : public jObject<::org::eclipse::swt::graphics::Path, ::org::eclipse::swt::graphics::Resource> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_graphics / "Path";

	constexpr static Enume field_signatures{
		jField<::jlong>("handle"), //
	};

	template<typename F = ::jlong>
	auto handle() const {
		static_assert(field_signatures[jField<F>("handle")] != -1);
		return at<F>("handle");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::graphics::Device)>(), //
		jConstructor<::jvoid(::org::eclipse::swt::graphics::Device, ::org::eclipse::swt::graphics::Path, ::jfloat)>(), //
		jConstructor<::jvoid(::org::eclipse::swt::graphics::Device, ::org::eclipse::swt::graphics::PathData)>(), //
		jMethod<::jvoid(::jfloat, ::jfloat, ::jfloat, ::jfloat, ::jfloat, ::jfloat)>("addArc"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Path)>("addPath"), //
		jMethod<::jvoid(::jfloat, ::jfloat, ::jfloat, ::jfloat)>("addRectangle"), //
		jMethod<::jvoid(::java::lang::String, ::jfloat, ::jfloat, ::org::eclipse::swt::graphics::Font)>("addString"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::jboolean(::jfloat, ::jfloat, ::org::eclipse::swt::graphics::GC, ::jboolean)>("contains"), //
		jMethod<::jvoid(::jfloat, ::jfloat, ::jfloat, ::jfloat, ::jfloat, ::jfloat)>("cubicTo"), //
		jMethod<::jvoid(::jfloat *)>("getBounds"), //
		jMethod<::jvoid(::jfloat *)>("getCurrentPoint"), //
		jMethod<::org::eclipse::swt::graphics::PathData()>("getPathData"), //
		jMethod<::jboolean()>("isDisposed"), //
		jMethod<::jvoid(::jfloat, ::jfloat)>("lineTo"), //
		jMethod<::jvoid(::jfloat, ::jfloat)>("moveTo"), //
		jMethod<::jvoid(::jfloat, ::jfloat, ::jfloat, ::jfloat)>("quadTo"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addArc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addArc")] != -1);
		return call<R>("addArc", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addPath")] != -1);
		return call<R>("addPath", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addRectangle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addRectangle")] != -1);
		return call<R>("addRectangle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addString")] != -1);
		return call<R>("addString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto contains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("contains")] != -1);
		return call<R>("contains", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto cubicTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cubicTo")] != -1);
		return call<R>("cubicTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds")] != -1);
		return call<R>("getBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getCurrentPoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCurrentPoint")] != -1);
		return call<R>("getCurrentPoint", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::PathData, typename... Args>
	auto getPathData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPathData")] != -1);
		return call<R>("getPathData", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDisposed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDisposed")] != -1);
		return call<R>("isDisposed", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto lineTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lineTo")] != -1);
		return call<R>("lineTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto moveTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("moveTo")] != -1);
		return call<R>("moveTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto quadTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("quadTo")] != -1);
		return call<R>("quadTo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
