#ifndef org_eclipse_swt_graphics_TextStyle_HPP
#define org_eclipse_swt_graphics_TextStyle_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::graphics::TextStyle : public jObject<::org::eclipse::swt::graphics::TextStyle, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_graphics / "TextStyle";

	constexpr static Enume field_signatures{
		jField<::org::eclipse::swt::graphics::Color>("background"), //
		jField<::org::eclipse::swt::graphics::Color>("borderColor"), //
		jField<::jint>("borderStyle"), //
		jField<::java::lang::Object>("data"), //
		jField<::org::eclipse::swt::graphics::Font>("font"), //
		jField<::org::eclipse::swt::graphics::Color>("foreground"), //
		jField<::org::eclipse::swt::graphics::GlyphMetrics>("metrics"), //
		jField<::jint>("rise"), //
		jField<::jboolean>("strikeout"), //
		jField<::org::eclipse::swt::graphics::Color>("strikeoutColor"), //
		jField<::jboolean>("underline"), //
		jField<::org::eclipse::swt::graphics::Color>("underlineColor"), //
		jField<::jint>("underlineStyle"), //
	};

	template<typename F = ::org::eclipse::swt::graphics::Color>
	auto background() const {
		static_assert(field_signatures[jField<F>("background")] != -1);
		return at<F>("background");
	}

	template<typename F = ::org::eclipse::swt::graphics::Color>
	auto borderColor() const {
		static_assert(field_signatures[jField<F>("borderColor")] != -1);
		return at<F>("borderColor");
	}

	template<typename F = ::jint>
	auto borderStyle() const {
		static_assert(field_signatures[jField<F>("borderStyle")] != -1);
		return at<F>("borderStyle");
	}

	template<typename F = ::java::lang::Object>
	auto data() const {
		static_assert(field_signatures[jField<F>("data")] != -1);
		return at<F>("data");
	}

	template<typename F = ::org::eclipse::swt::graphics::Font>
	auto font() const {
		static_assert(field_signatures[jField<F>("font")] != -1);
		return at<F>("font");
	}

	template<typename F = ::org::eclipse::swt::graphics::Color>
	auto foreground() const {
		static_assert(field_signatures[jField<F>("foreground")] != -1);
		return at<F>("foreground");
	}

	template<typename F = ::org::eclipse::swt::graphics::GlyphMetrics>
	auto metrics() const {
		static_assert(field_signatures[jField<F>("metrics")] != -1);
		return at<F>("metrics");
	}

	template<typename F = ::jint>
	auto rise() const {
		static_assert(field_signatures[jField<F>("rise")] != -1);
		return at<F>("rise");
	}

	template<typename F = ::jboolean>
	auto strikeout() const {
		static_assert(field_signatures[jField<F>("strikeout")] != -1);
		return at<F>("strikeout");
	}

	template<typename F = ::org::eclipse::swt::graphics::Color>
	auto strikeoutColor() const {
		static_assert(field_signatures[jField<F>("strikeoutColor")] != -1);
		return at<F>("strikeoutColor");
	}

	template<typename F = ::jboolean>
	auto underline() const {
		static_assert(field_signatures[jField<F>("underline")] != -1);
		return at<F>("underline");
	}

	template<typename F = ::org::eclipse::swt::graphics::Color>
	auto underlineColor() const {
		static_assert(field_signatures[jField<F>("underlineColor")] != -1);
		return at<F>("underlineColor");
	}

	template<typename F = ::jint>
	auto underlineStyle() const {
		static_assert(field_signatures[jField<F>("underlineStyle")] != -1);
		return at<F>("underlineStyle");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::org::eclipse::swt::graphics::Font, ::org::eclipse::swt::graphics::Color, ::org::eclipse::swt::graphics::Color)>(), //
		jConstructor<::jvoid(::org::eclipse::swt::graphics::TextStyle)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
