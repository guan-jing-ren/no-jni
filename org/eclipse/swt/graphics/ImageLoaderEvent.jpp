#ifndef org_eclipse_swt_graphics_ImageLoaderEvent_HPP
#define org_eclipse_swt_graphics_ImageLoaderEvent_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::graphics::ImageLoaderEvent : public jObject<::org::eclipse::swt::graphics::ImageLoaderEvent, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_graphics / "ImageLoaderEvent";

	constexpr static Enume field_signatures{
		jField<::jboolean>("endOfImage"), //
		jField<::org::eclipse::swt::graphics::ImageData>("imageData"), //
		jField<::jint>("incrementCount"), //
	};

	template<typename F = ::jboolean>
	auto endOfImage() const {
		static_assert(field_signatures[jField<F>("endOfImage")] != -1);
		return at<F>("endOfImage");
	}

	template<typename F = ::org::eclipse::swt::graphics::ImageData>
	auto imageData() const {
		static_assert(field_signatures[jField<F>("imageData")] != -1);
		return at<F>("imageData");
	}

	template<typename F = ::jint>
	auto incrementCount() const {
		static_assert(field_signatures[jField<F>("incrementCount")] != -1);
		return at<F>("incrementCount");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::graphics::ImageLoader, ::org::eclipse::swt::graphics::ImageData, ::jint, ::jboolean)>(), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
