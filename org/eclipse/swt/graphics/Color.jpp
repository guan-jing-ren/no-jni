#ifndef org_eclipse_swt_graphics_Color_HPP
#define org_eclipse_swt_graphics_Color_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::graphics::Color : public jObject<::org::eclipse::swt::graphics::Color, ::org::eclipse::swt::graphics::Resource> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_graphics / "Color";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::graphics::Device, ::jint, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::org::eclipse::swt::graphics::Device, ::jint, ::jint, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::org::eclipse::swt::graphics::Device, ::org::eclipse::swt::graphics::RGB)>(), //
		jConstructor<::jvoid(::org::eclipse::swt::graphics::Device, ::org::eclipse::swt::graphics::RGB, ::jint)>(), //
		jConstructor<::jvoid(::org::eclipse::swt::graphics::Device, ::org::eclipse::swt::graphics::RGBA)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint()>("getAlpha"), //
		jMethod<::jint()>("getBlue"), //
		jMethod<::jint()>("getGreen"), //
		jMethod<::org::eclipse::swt::graphics::RGB()>("getRGB"), //
		jMethod<::org::eclipse::swt::graphics::RGBA()>("getRGBA"), //
		jMethod<::jint()>("getRed"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isDisposed"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAlpha(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlpha")] != -1);
		return call<R>("getAlpha", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBlue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBlue")] != -1);
		return call<R>("getBlue", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getGreen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGreen")] != -1);
		return call<R>("getGreen", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::RGB, typename... Args>
	auto getRGB(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRGB")] != -1);
		return call<R>("getRGB", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::RGBA, typename... Args>
	auto getRGBA(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRGBA")] != -1);
		return call<R>("getRGBA", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRed")] != -1);
		return call<R>("getRed", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDisposed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDisposed")] != -1);
		return call<R>("isDisposed", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
