#ifndef org_eclipse_swt_graphics_LineAttributes_HPP
#define org_eclipse_swt_graphics_LineAttributes_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::graphics::LineAttributes : public jObject<::org::eclipse::swt::graphics::LineAttributes, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_graphics / "LineAttributes";

	constexpr static Enume field_signatures{
		jField<::jint>("cap"), //
		jField<::jfloat *>("dash"), //
		jField<::jfloat>("dashOffset"), //
		jField<::jint>("join"), //
		jField<::jfloat>("miterLimit"), //
		jField<::jint>("style"), //
		jField<::jfloat>("width"), //
	};

	template<typename F = ::jint>
	auto cap() const {
		static_assert(field_signatures[jField<F>("cap")] != -1);
		return at<F>("cap");
	}

	template<typename F = ::jfloat *>
	auto dash() const {
		static_assert(field_signatures[jField<F>("dash")] != -1);
		return at<F>("dash");
	}

	template<typename F = ::jfloat>
	auto dashOffset() const {
		static_assert(field_signatures[jField<F>("dashOffset")] != -1);
		return at<F>("dashOffset");
	}

	template<typename F = ::jint>
	auto join() const {
		static_assert(field_signatures[jField<F>("join")] != -1);
		return at<F>("join");
	}

	template<typename F = ::jfloat>
	auto miterLimit() const {
		static_assert(field_signatures[jField<F>("miterLimit")] != -1);
		return at<F>("miterLimit");
	}

	template<typename F = ::jint>
	auto style() const {
		static_assert(field_signatures[jField<F>("style")] != -1);
		return at<F>("style");
	}

	template<typename F = ::jfloat>
	auto width() const {
		static_assert(field_signatures[jField<F>("width")] != -1);
		return at<F>("width");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jfloat)>(), //
		jConstructor<::jvoid(::jfloat, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::jfloat, ::jint, ::jint, ::jint, ::jfloat *, ::jfloat, ::jfloat)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint()>("hashCode"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

};

#endif
