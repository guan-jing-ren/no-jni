#ifndef org_eclipse_swt_layout_FormLayout_HPP
#define org_eclipse_swt_layout_FormLayout_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::layout::FormLayout : public jObject<::org::eclipse::swt::layout::FormLayout, ::org::eclipse::swt::widgets::Layout> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_layout / "FormLayout";

	constexpr static Enume field_signatures{
		jField<::jint>("marginBottom"), //
		jField<::jint>("marginHeight"), //
		jField<::jint>("marginLeft"), //
		jField<::jint>("marginRight"), //
		jField<::jint>("marginTop"), //
		jField<::jint>("marginWidth"), //
		jField<::jint>("spacing"), //
	};

	template<typename F = ::jint>
	auto marginBottom() const {
		static_assert(field_signatures[jField<F>("marginBottom")] != -1);
		return at<F>("marginBottom");
	}

	template<typename F = ::jint>
	auto marginHeight() const {
		static_assert(field_signatures[jField<F>("marginHeight")] != -1);
		return at<F>("marginHeight");
	}

	template<typename F = ::jint>
	auto marginLeft() const {
		static_assert(field_signatures[jField<F>("marginLeft")] != -1);
		return at<F>("marginLeft");
	}

	template<typename F = ::jint>
	auto marginRight() const {
		static_assert(field_signatures[jField<F>("marginRight")] != -1);
		return at<F>("marginRight");
	}

	template<typename F = ::jint>
	auto marginTop() const {
		static_assert(field_signatures[jField<F>("marginTop")] != -1);
		return at<F>("marginTop");
	}

	template<typename F = ::jint>
	auto marginWidth() const {
		static_assert(field_signatures[jField<F>("marginWidth")] != -1);
		return at<F>("marginWidth");
	}

	template<typename F = ::jint>
	auto spacing() const {
		static_assert(field_signatures[jField<F>("spacing")] != -1);
		return at<F>("spacing");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
