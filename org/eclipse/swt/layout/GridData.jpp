#ifndef org_eclipse_swt_layout_GridData_HPP
#define org_eclipse_swt_layout_GridData_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::layout::GridData : public jObject<::org::eclipse::swt::layout::GridData, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_layout / "GridData";

	constexpr static Enume field_signatures{
		jField<::jint>("BEGINNING"), //
		jField<::jint>("CENTER"), //
		jField<::jint>("END"), //
		jField<::jint>("FILL"), //
		jField<::jint>("FILL_BOTH"), //
		jField<::jint>("FILL_HORIZONTAL"), //
		jField<::jint>("FILL_VERTICAL"), //
		jField<::jint>("GRAB_HORIZONTAL"), //
		jField<::jint>("GRAB_VERTICAL"), //
		jField<::jint>("HORIZONTAL_ALIGN_BEGINNING"), //
		jField<::jint>("HORIZONTAL_ALIGN_CENTER"), //
		jField<::jint>("HORIZONTAL_ALIGN_END"), //
		jField<::jint>("HORIZONTAL_ALIGN_FILL"), //
		jField<::jint>("VERTICAL_ALIGN_BEGINNING"), //
		jField<::jint>("VERTICAL_ALIGN_CENTER"), //
		jField<::jint>("VERTICAL_ALIGN_END"), //
		jField<::jint>("VERTICAL_ALIGN_FILL"), //
		jField<::jboolean>("exclude"), //
		jField<::jboolean>("grabExcessHorizontalSpace"), //
		jField<::jboolean>("grabExcessVerticalSpace"), //
		jField<::jint>("heightHint"), //
		jField<::jint>("horizontalAlignment"), //
		jField<::jint>("horizontalIndent"), //
		jField<::jint>("horizontalSpan"), //
		jField<::jint>("minimumHeight"), //
		jField<::jint>("minimumWidth"), //
		jField<::jint>("verticalAlignment"), //
		jField<::jint>("verticalIndent"), //
		jField<::jint>("verticalSpan"), //
		jField<::jint>("widthHint"), //
	};

	template<typename F = ::jint>
	static auto BEGINNING() {
		static_assert(field_signatures[jField<F>("BEGINNING")] != -1);
		return sat<F>("BEGINNING");
	}

	template<typename F = ::jint>
	static auto CENTER() {
		static_assert(field_signatures[jField<F>("CENTER")] != -1);
		return sat<F>("CENTER");
	}

	template<typename F = ::jint>
	static auto END() {
		static_assert(field_signatures[jField<F>("END")] != -1);
		return sat<F>("END");
	}

	template<typename F = ::jint>
	static auto FILL() {
		static_assert(field_signatures[jField<F>("FILL")] != -1);
		return sat<F>("FILL");
	}

	template<typename F = ::jint>
	static auto FILL_BOTH() {
		static_assert(field_signatures[jField<F>("FILL_BOTH")] != -1);
		return sat<F>("FILL_BOTH");
	}

	template<typename F = ::jint>
	static auto FILL_HORIZONTAL() {
		static_assert(field_signatures[jField<F>("FILL_HORIZONTAL")] != -1);
		return sat<F>("FILL_HORIZONTAL");
	}

	template<typename F = ::jint>
	static auto FILL_VERTICAL() {
		static_assert(field_signatures[jField<F>("FILL_VERTICAL")] != -1);
		return sat<F>("FILL_VERTICAL");
	}

	template<typename F = ::jint>
	static auto GRAB_HORIZONTAL() {
		static_assert(field_signatures[jField<F>("GRAB_HORIZONTAL")] != -1);
		return sat<F>("GRAB_HORIZONTAL");
	}

	template<typename F = ::jint>
	static auto GRAB_VERTICAL() {
		static_assert(field_signatures[jField<F>("GRAB_VERTICAL")] != -1);
		return sat<F>("GRAB_VERTICAL");
	}

	template<typename F = ::jint>
	static auto HORIZONTAL_ALIGN_BEGINNING() {
		static_assert(field_signatures[jField<F>("HORIZONTAL_ALIGN_BEGINNING")] != -1);
		return sat<F>("HORIZONTAL_ALIGN_BEGINNING");
	}

	template<typename F = ::jint>
	static auto HORIZONTAL_ALIGN_CENTER() {
		static_assert(field_signatures[jField<F>("HORIZONTAL_ALIGN_CENTER")] != -1);
		return sat<F>("HORIZONTAL_ALIGN_CENTER");
	}

	template<typename F = ::jint>
	static auto HORIZONTAL_ALIGN_END() {
		static_assert(field_signatures[jField<F>("HORIZONTAL_ALIGN_END")] != -1);
		return sat<F>("HORIZONTAL_ALIGN_END");
	}

	template<typename F = ::jint>
	static auto HORIZONTAL_ALIGN_FILL() {
		static_assert(field_signatures[jField<F>("HORIZONTAL_ALIGN_FILL")] != -1);
		return sat<F>("HORIZONTAL_ALIGN_FILL");
	}

	template<typename F = ::jint>
	static auto VERTICAL_ALIGN_BEGINNING() {
		static_assert(field_signatures[jField<F>("VERTICAL_ALIGN_BEGINNING")] != -1);
		return sat<F>("VERTICAL_ALIGN_BEGINNING");
	}

	template<typename F = ::jint>
	static auto VERTICAL_ALIGN_CENTER() {
		static_assert(field_signatures[jField<F>("VERTICAL_ALIGN_CENTER")] != -1);
		return sat<F>("VERTICAL_ALIGN_CENTER");
	}

	template<typename F = ::jint>
	static auto VERTICAL_ALIGN_END() {
		static_assert(field_signatures[jField<F>("VERTICAL_ALIGN_END")] != -1);
		return sat<F>("VERTICAL_ALIGN_END");
	}

	template<typename F = ::jint>
	static auto VERTICAL_ALIGN_FILL() {
		static_assert(field_signatures[jField<F>("VERTICAL_ALIGN_FILL")] != -1);
		return sat<F>("VERTICAL_ALIGN_FILL");
	}

	template<typename F = ::jboolean>
	auto exclude() const {
		static_assert(field_signatures[jField<F>("exclude")] != -1);
		return at<F>("exclude");
	}

	template<typename F = ::jboolean>
	auto grabExcessHorizontalSpace() const {
		static_assert(field_signatures[jField<F>("grabExcessHorizontalSpace")] != -1);
		return at<F>("grabExcessHorizontalSpace");
	}

	template<typename F = ::jboolean>
	auto grabExcessVerticalSpace() const {
		static_assert(field_signatures[jField<F>("grabExcessVerticalSpace")] != -1);
		return at<F>("grabExcessVerticalSpace");
	}

	template<typename F = ::jint>
	auto heightHint() const {
		static_assert(field_signatures[jField<F>("heightHint")] != -1);
		return at<F>("heightHint");
	}

	template<typename F = ::jint>
	auto horizontalAlignment() const {
		static_assert(field_signatures[jField<F>("horizontalAlignment")] != -1);
		return at<F>("horizontalAlignment");
	}

	template<typename F = ::jint>
	auto horizontalIndent() const {
		static_assert(field_signatures[jField<F>("horizontalIndent")] != -1);
		return at<F>("horizontalIndent");
	}

	template<typename F = ::jint>
	auto horizontalSpan() const {
		static_assert(field_signatures[jField<F>("horizontalSpan")] != -1);
		return at<F>("horizontalSpan");
	}

	template<typename F = ::jint>
	auto minimumHeight() const {
		static_assert(field_signatures[jField<F>("minimumHeight")] != -1);
		return at<F>("minimumHeight");
	}

	template<typename F = ::jint>
	auto minimumWidth() const {
		static_assert(field_signatures[jField<F>("minimumWidth")] != -1);
		return at<F>("minimumWidth");
	}

	template<typename F = ::jint>
	auto verticalAlignment() const {
		static_assert(field_signatures[jField<F>("verticalAlignment")] != -1);
		return at<F>("verticalAlignment");
	}

	template<typename F = ::jint>
	auto verticalIndent() const {
		static_assert(field_signatures[jField<F>("verticalIndent")] != -1);
		return at<F>("verticalIndent");
	}

	template<typename F = ::jint>
	auto verticalSpan() const {
		static_assert(field_signatures[jField<F>("verticalSpan")] != -1);
		return at<F>("verticalSpan");
	}

	template<typename F = ::jint>
	auto widthHint() const {
		static_assert(field_signatures[jField<F>("widthHint")] != -1);
		return at<F>("widthHint");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint)>(), //
		jConstructor<::jvoid(::jint, ::jint)>(), //
		jConstructor<::jvoid(::jint, ::jint, ::jboolean, ::jboolean)>(), //
		jConstructor<::jvoid(::jint, ::jint, ::jboolean, ::jboolean, ::jint, ::jint)>(), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
