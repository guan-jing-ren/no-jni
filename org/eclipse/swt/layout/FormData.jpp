#ifndef org_eclipse_swt_layout_FormData_HPP
#define org_eclipse_swt_layout_FormData_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::layout::FormData : public jObject<::org::eclipse::swt::layout::FormData, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_layout / "FormData";

	constexpr static Enume field_signatures{
		jField<::org::eclipse::swt::layout::FormAttachment>("bottom"), //
		jField<::jint>("height"), //
		jField<::org::eclipse::swt::layout::FormAttachment>("left"), //
		jField<::org::eclipse::swt::layout::FormAttachment>("right"), //
		jField<::org::eclipse::swt::layout::FormAttachment>("top"), //
		jField<::jint>("width"), //
	};

	template<typename F = ::org::eclipse::swt::layout::FormAttachment>
	auto bottom() const {
		static_assert(field_signatures[jField<F>("bottom")] != -1);
		return at<F>("bottom");
	}

	template<typename F = ::jint>
	auto height() const {
		static_assert(field_signatures[jField<F>("height")] != -1);
		return at<F>("height");
	}

	template<typename F = ::org::eclipse::swt::layout::FormAttachment>
	auto left() const {
		static_assert(field_signatures[jField<F>("left")] != -1);
		return at<F>("left");
	}

	template<typename F = ::org::eclipse::swt::layout::FormAttachment>
	auto right() const {
		static_assert(field_signatures[jField<F>("right")] != -1);
		return at<F>("right");
	}

	template<typename F = ::org::eclipse::swt::layout::FormAttachment>
	auto top() const {
		static_assert(field_signatures[jField<F>("top")] != -1);
		return at<F>("top");
	}

	template<typename F = ::jint>
	auto width() const {
		static_assert(field_signatures[jField<F>("width")] != -1);
		return at<F>("width");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint, ::jint)>(), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
