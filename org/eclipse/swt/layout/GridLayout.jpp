#ifndef org_eclipse_swt_layout_GridLayout_HPP
#define org_eclipse_swt_layout_GridLayout_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::layout::GridLayout : public jObject<::org::eclipse::swt::layout::GridLayout, ::org::eclipse::swt::widgets::Layout> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_layout / "GridLayout";

	constexpr static Enume field_signatures{
		jField<::jint>("horizontalSpacing"), //
		jField<::jboolean>("makeColumnsEqualWidth"), //
		jField<::jint>("marginBottom"), //
		jField<::jint>("marginHeight"), //
		jField<::jint>("marginLeft"), //
		jField<::jint>("marginRight"), //
		jField<::jint>("marginTop"), //
		jField<::jint>("marginWidth"), //
		jField<::jint>("numColumns"), //
		jField<::jint>("verticalSpacing"), //
	};

	template<typename F = ::jint>
	auto horizontalSpacing() const {
		static_assert(field_signatures[jField<F>("horizontalSpacing")] != -1);
		return at<F>("horizontalSpacing");
	}

	template<typename F = ::jboolean>
	auto makeColumnsEqualWidth() const {
		static_assert(field_signatures[jField<F>("makeColumnsEqualWidth")] != -1);
		return at<F>("makeColumnsEqualWidth");
	}

	template<typename F = ::jint>
	auto marginBottom() const {
		static_assert(field_signatures[jField<F>("marginBottom")] != -1);
		return at<F>("marginBottom");
	}

	template<typename F = ::jint>
	auto marginHeight() const {
		static_assert(field_signatures[jField<F>("marginHeight")] != -1);
		return at<F>("marginHeight");
	}

	template<typename F = ::jint>
	auto marginLeft() const {
		static_assert(field_signatures[jField<F>("marginLeft")] != -1);
		return at<F>("marginLeft");
	}

	template<typename F = ::jint>
	auto marginRight() const {
		static_assert(field_signatures[jField<F>("marginRight")] != -1);
		return at<F>("marginRight");
	}

	template<typename F = ::jint>
	auto marginTop() const {
		static_assert(field_signatures[jField<F>("marginTop")] != -1);
		return at<F>("marginTop");
	}

	template<typename F = ::jint>
	auto marginWidth() const {
		static_assert(field_signatures[jField<F>("marginWidth")] != -1);
		return at<F>("marginWidth");
	}

	template<typename F = ::jint>
	auto numColumns() const {
		static_assert(field_signatures[jField<F>("numColumns")] != -1);
		return at<F>("numColumns");
	}

	template<typename F = ::jint>
	auto verticalSpacing() const {
		static_assert(field_signatures[jField<F>("verticalSpacing")] != -1);
		return at<F>("verticalSpacing");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint, ::jboolean)>(), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
