#ifndef org_eclipse_swt_events_VerifyEvent_HPP
#define org_eclipse_swt_events_VerifyEvent_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::events::VerifyEvent : public jObject<::org::eclipse::swt::events::VerifyEvent, ::org::eclipse::swt::events::KeyEvent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_events / "VerifyEvent";

	constexpr static Enume field_signatures{
		jField<::jint>("end"), //
		jField<::jint>("start"), //
		jField<::java::lang::String>("text"), //
	};

	template<typename F = ::jint>
	auto end() const {
		static_assert(field_signatures[jField<F>("end")] != -1);
		return at<F>("end");
	}

	template<typename F = ::jint>
	auto start() const {
		static_assert(field_signatures[jField<F>("start")] != -1);
		return at<F>("start");
	}

	template<typename F = ::java::lang::String>
	auto text() const {
		static_assert(field_signatures[jField<F>("text")] != -1);
		return at<F>("text");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Event)>(), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
