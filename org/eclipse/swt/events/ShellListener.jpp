#ifndef org_eclipse_swt_events_ShellListener_HPP
#define org_eclipse_swt_events_ShellListener_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::events::ShellListener : public jObject<::org::eclipse::swt::events::ShellListener, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_events / "ShellListener";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::org::eclipse::swt::events::ShellEvent)>("shellActivated"), //
		jMethod<::jvoid(::org::eclipse::swt::events::ShellEvent)>("shellClosed"), //
		jMethod<::jvoid(::org::eclipse::swt::events::ShellEvent)>("shellDeactivated"), //
		jMethod<::jvoid(::org::eclipse::swt::events::ShellEvent)>("shellDeiconified"), //
		jMethod<::jvoid(::org::eclipse::swt::events::ShellEvent)>("shellIconified"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto shellActivated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shellActivated")] != -1);
		return call<R>("shellActivated", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto shellClosed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shellClosed")] != -1);
		return call<R>("shellClosed", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto shellDeactivated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shellDeactivated")] != -1);
		return call<R>("shellDeactivated", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto shellDeiconified(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shellDeiconified")] != -1);
		return call<R>("shellDeiconified", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto shellIconified(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shellIconified")] != -1);
		return call<R>("shellIconified", std::forward<Args>(args)...);
	}

};

#endif
