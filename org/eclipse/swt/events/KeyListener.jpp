#ifndef org_eclipse_swt_events_KeyListener_HPP
#define org_eclipse_swt_events_KeyListener_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::events::KeyListener : public jObject<::org::eclipse::swt::events::KeyListener, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_events / "KeyListener";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::org::eclipse::swt::events::KeyEvent)>("keyPressed"), //
		jMethod<::jvoid(::org::eclipse::swt::events::KeyEvent)>("keyReleased"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto keyPressed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("keyPressed")] != -1);
		return call<R>("keyPressed", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto keyReleased(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("keyReleased")] != -1);
		return call<R>("keyReleased", std::forward<Args>(args)...);
	}

};

#endif
