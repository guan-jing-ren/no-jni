#ifndef org_eclipse_swt_accessibility_AccessibleValueListener_HPP
#define org_eclipse_swt_accessibility_AccessibleValueListener_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::accessibility::AccessibleValueListener : public jObject<::org::eclipse::swt::accessibility::AccessibleValueListener, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_accessibility / "AccessibleValueListener";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleValueEvent)>("getCurrentValue"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleValueEvent)>("getMaximumValue"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleValueEvent)>("getMinimumValue"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleValueEvent)>("setCurrentValue"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto getCurrentValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCurrentValue")] != -1);
		return call<R>("getCurrentValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getMaximumValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaximumValue")] != -1);
		return call<R>("getMaximumValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getMinimumValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinimumValue")] != -1);
		return call<R>("getMinimumValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCurrentValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCurrentValue")] != -1);
		return call<R>("setCurrentValue", std::forward<Args>(args)...);
	}

};

#endif
