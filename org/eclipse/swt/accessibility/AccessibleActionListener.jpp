#ifndef org_eclipse_swt_accessibility_AccessibleActionListener_HPP
#define org_eclipse_swt_accessibility_AccessibleActionListener_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::accessibility::AccessibleActionListener : public jObject<::org::eclipse::swt::accessibility::AccessibleActionListener, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_accessibility / "AccessibleActionListener";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleActionEvent)>("doAction"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleActionEvent)>("getActionCount"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleActionEvent)>("getDescription"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleActionEvent)>("getKeyBinding"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleActionEvent)>("getName"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto doAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("doAction")] != -1);
		return call<R>("doAction", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getActionCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getActionCount")] != -1);
		return call<R>("getActionCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDescription")] != -1);
		return call<R>("getDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getKeyBinding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeyBinding")] != -1);
		return call<R>("getKeyBinding", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

};

#endif
