#ifndef org_eclipse_swt_accessibility_AccessibleTextExtendedAdapter_HPP
#define org_eclipse_swt_accessibility_AccessibleTextExtendedAdapter_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::accessibility::AccessibleTextExtendedAdapter : public jObject<::org::eclipse::swt::accessibility::AccessibleTextExtendedAdapter, ::org::eclipse::swt::accessibility::AccessibleTextAdapter> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_accessibility / "AccessibleTextExtendedAdapter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTextEvent)>("addSelection"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTextEvent)>("getCharacterCount"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTextEvent)>("getHyperlink"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTextEvent)>("getHyperlinkCount"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTextEvent)>("getHyperlinkIndex"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTextEvent)>("getOffsetAtPoint"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTextEvent)>("getRanges"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTextEvent)>("getSelection"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTextEvent)>("getSelectionCount"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTextEvent)>("getText"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTextEvent)>("getTextBounds"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTextEvent)>("getVisibleRanges"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTextEvent)>("removeSelection"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTextEvent)>("scrollText"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTextEvent)>("setCaretOffset"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTextEvent)>("setSelection"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addSelection")] != -1);
		return call<R>("addSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getCharacterCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCharacterCount")] != -1);
		return call<R>("getCharacterCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getHyperlink(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHyperlink")] != -1);
		return call<R>("getHyperlink", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getHyperlinkCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHyperlinkCount")] != -1);
		return call<R>("getHyperlinkCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getHyperlinkIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHyperlinkIndex")] != -1);
		return call<R>("getHyperlinkIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getOffsetAtPoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOffsetAtPoint")] != -1);
		return call<R>("getOffsetAtPoint", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getRanges(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRanges")] != -1);
		return call<R>("getRanges", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelection")] != -1);
		return call<R>("getSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getSelectionCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionCount")] != -1);
		return call<R>("getSelectionCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getText")] != -1);
		return call<R>("getText", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getTextBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextBounds")] != -1);
		return call<R>("getTextBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getVisibleRanges(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVisibleRanges")] != -1);
		return call<R>("getVisibleRanges", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeSelection")] != -1);
		return call<R>("removeSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto scrollText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("scrollText")] != -1);
		return call<R>("scrollText", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCaretOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCaretOffset")] != -1);
		return call<R>("setCaretOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelection")] != -1);
		return call<R>("setSelection", std::forward<Args>(args)...);
	}

};

#endif
