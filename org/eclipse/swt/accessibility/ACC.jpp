#ifndef org_eclipse_swt_accessibility_ACC_HPP
#define org_eclipse_swt_accessibility_ACC_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::accessibility::ACC : public jObject<::org::eclipse::swt::accessibility::ACC, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_accessibility / "ACC";

	constexpr static Enume field_signatures{
		jField<::jint>("CHILDID_CHILD_AT_INDEX"), //
		jField<::jint>("CHILDID_CHILD_INDEX"), //
		jField<::jint>("CHILDID_MULTIPLE"), //
		jField<::jint>("CHILDID_NONE"), //
		jField<::jint>("CHILDID_SELF"), //
		jField<::jint>("DELETE"), //
		jField<::jint>("EVENT_ACTION_CHANGED"), //
		jField<::jint>("EVENT_ATTRIBUTE_CHANGED"), //
		jField<::jint>("EVENT_DESCRIPTION_CHANGED"), //
		jField<::jint>("EVENT_DOCUMENT_LOAD_COMPLETE"), //
		jField<::jint>("EVENT_DOCUMENT_LOAD_STOPPED"), //
		jField<::jint>("EVENT_DOCUMENT_RELOAD"), //
		jField<::jint>("EVENT_HYPERLINK_ACTIVATED"), //
		jField<::jint>("EVENT_HYPERLINK_ANCHOR_COUNT_CHANGED"), //
		jField<::jint>("EVENT_HYPERLINK_END_INDEX_CHANGED"), //
		jField<::jint>("EVENT_HYPERLINK_SELECTED_LINK_CHANGED"), //
		jField<::jint>("EVENT_HYPERLINK_START_INDEX_CHANGED"), //
		jField<::jint>("EVENT_HYPERTEXT_LINK_COUNT_CHANGED"), //
		jField<::jint>("EVENT_HYPERTEXT_LINK_SELECTED"), //
		jField<::jint>("EVENT_LOCATION_CHANGED"), //
		jField<::jint>("EVENT_NAME_CHANGED"), //
		jField<::jint>("EVENT_PAGE_CHANGED"), //
		jField<::jint>("EVENT_SECTION_CHANGED"), //
		jField<::jint>("EVENT_SELECTION_CHANGED"), //
		jField<::jint>("EVENT_STATE_CHANGED"), //
		jField<::jint>("EVENT_TABLE_CAPTION_CHANGED"), //
		jField<::jint>("EVENT_TABLE_CHANGED"), //
		jField<::jint>("EVENT_TABLE_COLUMN_DESCRIPTION_CHANGED"), //
		jField<::jint>("EVENT_TABLE_COLUMN_HEADER_CHANGED"), //
		jField<::jint>("EVENT_TABLE_ROW_DESCRIPTION_CHANGED"), //
		jField<::jint>("EVENT_TABLE_ROW_HEADER_CHANGED"), //
		jField<::jint>("EVENT_TABLE_SUMMARY_CHANGED"), //
		jField<::jint>("EVENT_TEXT_ATTRIBUTE_CHANGED"), //
		jField<::jint>("EVENT_TEXT_CARET_MOVED"), //
		jField<::jint>("EVENT_TEXT_CHANGED"), //
		jField<::jint>("EVENT_TEXT_COLUMN_CHANGED"), //
		jField<::jint>("EVENT_TEXT_SELECTION_CHANGED"), //
		jField<::jint>("EVENT_VALUE_CHANGED"), //
		jField<::jint>("INSERT"), //
		jField<::java::lang::String>("OK"), //
		jField<::jint>("RELATION_CONTROLLED_BY"), //
		jField<::jint>("RELATION_CONTROLLER_FOR"), //
		jField<::jint>("RELATION_DESCRIBED_BY"), //
		jField<::jint>("RELATION_DESCRIPTION_FOR"), //
		jField<::jint>("RELATION_EMBEDDED_BY"), //
		jField<::jint>("RELATION_EMBEDS"), //
		jField<::jint>("RELATION_FLOWS_FROM"), //
		jField<::jint>("RELATION_FLOWS_TO"), //
		jField<::jint>("RELATION_LABELLED_BY"), //
		jField<::jint>("RELATION_LABEL_FOR"), //
		jField<::jint>("RELATION_MEMBER_OF"), //
		jField<::jint>("RELATION_NODE_CHILD_OF"), //
		jField<::jint>("RELATION_PARENT_WINDOW_OF"), //
		jField<::jint>("RELATION_POPUP_FOR"), //
		jField<::jint>("RELATION_SUBWINDOW_OF"), //
		jField<::jint>("ROLE_ALERT"), //
		jField<::jint>("ROLE_ANIMATION"), //
		jField<::jint>("ROLE_CALENDAR"), //
		jField<::jint>("ROLE_CANVAS"), //
		jField<::jint>("ROLE_CHECKBUTTON"), //
		jField<::jint>("ROLE_CHECKMENUITEM"), //
		jField<::jint>("ROLE_CLIENT_AREA"), //
		jField<::jint>("ROLE_CLOCK"), //
		jField<::jint>("ROLE_COLUMN"), //
		jField<::jint>("ROLE_COMBOBOX"), //
		jField<::jint>("ROLE_DATETIME"), //
		jField<::jint>("ROLE_DIALOG"), //
		jField<::jint>("ROLE_DOCUMENT"), //
		jField<::jint>("ROLE_FOOTER"), //
		jField<::jint>("ROLE_FORM"), //
		jField<::jint>("ROLE_GRAPHIC"), //
		jField<::jint>("ROLE_GROUP"), //
		jField<::jint>("ROLE_HEADER"), //
		jField<::jint>("ROLE_HEADING"), //
		jField<::jint>("ROLE_LABEL"), //
		jField<::jint>("ROLE_LINK"), //
		jField<::jint>("ROLE_LIST"), //
		jField<::jint>("ROLE_LISTITEM"), //
		jField<::jint>("ROLE_MENU"), //
		jField<::jint>("ROLE_MENUBAR"), //
		jField<::jint>("ROLE_MENUITEM"), //
		jField<::jint>("ROLE_PAGE"), //
		jField<::jint>("ROLE_PARAGRAPH"), //
		jField<::jint>("ROLE_PROGRESSBAR"), //
		jField<::jint>("ROLE_PUSHBUTTON"), //
		jField<::jint>("ROLE_RADIOBUTTON"), //
		jField<::jint>("ROLE_RADIOMENUITEM"), //
		jField<::jint>("ROLE_ROW"), //
		jField<::jint>("ROLE_SCROLLBAR"), //
		jField<::jint>("ROLE_SECTION"), //
		jField<::jint>("ROLE_SEPARATOR"), //
		jField<::jint>("ROLE_SLIDER"), //
		jField<::jint>("ROLE_SPINBUTTON"), //
		jField<::jint>("ROLE_SPLITBUTTON"), //
		jField<::jint>("ROLE_STATUSBAR"), //
		jField<::jint>("ROLE_TABFOLDER"), //
		jField<::jint>("ROLE_TABITEM"), //
		jField<::jint>("ROLE_TABLE"), //
		jField<::jint>("ROLE_TABLECELL"), //
		jField<::jint>("ROLE_TABLECOLUMN"), //
		jField<::jint>("ROLE_TABLECOLUMNHEADER"), //
		jField<::jint>("ROLE_TABLEROWHEADER"), //
		jField<::jint>("ROLE_TEXT"), //
		jField<::jint>("ROLE_TOOLBAR"), //
		jField<::jint>("ROLE_TOOLTIP"), //
		jField<::jint>("ROLE_TREE"), //
		jField<::jint>("ROLE_TREEITEM"), //
		jField<::jint>("ROLE_WINDOW"), //
		jField<::jint>("SCROLL_TYPE_ANYWHERE"), //
		jField<::jint>("SCROLL_TYPE_BOTTOM_EDGE"), //
		jField<::jint>("SCROLL_TYPE_BOTTOM_RIGHT"), //
		jField<::jint>("SCROLL_TYPE_LEFT_EDGE"), //
		jField<::jint>("SCROLL_TYPE_POINT"), //
		jField<::jint>("SCROLL_TYPE_RIGHT_EDGE"), //
		jField<::jint>("SCROLL_TYPE_TOP_EDGE"), //
		jField<::jint>("SCROLL_TYPE_TOP_LEFT"), //
		jField<::jint>("STATE_ACTIVE"), //
		jField<::jint>("STATE_BUSY"), //
		jField<::jint>("STATE_CHECKED"), //
		jField<::jint>("STATE_COLLAPSED"), //
		jField<::jint>("STATE_DISABLED"), //
		jField<::jint>("STATE_EXPANDED"), //
		jField<::jint>("STATE_FOCUSABLE"), //
		jField<::jint>("STATE_FOCUSED"), //
		jField<::jint>("STATE_HOTTRACKED"), //
		jField<::jint>("STATE_INVALID_ENTRY"), //
		jField<::jint>("STATE_INVISIBLE"), //
		jField<::jint>("STATE_LINKED"), //
		jField<::jint>("STATE_MULTILINE"), //
		jField<::jint>("STATE_MULTISELECTABLE"), //
		jField<::jint>("STATE_NORMAL"), //
		jField<::jint>("STATE_OFFSCREEN"), //
		jField<::jint>("STATE_PRESSED"), //
		jField<::jint>("STATE_READONLY"), //
		jField<::jint>("STATE_REQUIRED"), //
		jField<::jint>("STATE_SELECTABLE"), //
		jField<::jint>("STATE_SELECTED"), //
		jField<::jint>("STATE_SINGLELINE"), //
		jField<::jint>("STATE_SIZEABLE"), //
		jField<::jint>("STATE_SUPPORTS_AUTOCOMPLETION"), //
		jField<::jint>("TEXT_BOUNDARY_ALL"), //
		jField<::jint>("TEXT_BOUNDARY_CHAR"), //
		jField<::jint>("TEXT_BOUNDARY_LINE"), //
		jField<::jint>("TEXT_BOUNDARY_PARAGRAPH"), //
		jField<::jint>("TEXT_BOUNDARY_SENTENCE"), //
		jField<::jint>("TEXT_BOUNDARY_WORD"), //
		jField<::jint>("TEXT_DELETE"), //
		jField<::jint>("TEXT_INSERT"), //
		jField<::jint>("VISIBLE"), //
	};

	template<typename F = ::jint>
	static auto CHILDID_CHILD_AT_INDEX() {
		static_assert(field_signatures[jField<F>("CHILDID_CHILD_AT_INDEX")] != -1);
		return sat<F>("CHILDID_CHILD_AT_INDEX");
	}

	template<typename F = ::jint>
	static auto CHILDID_CHILD_INDEX() {
		static_assert(field_signatures[jField<F>("CHILDID_CHILD_INDEX")] != -1);
		return sat<F>("CHILDID_CHILD_INDEX");
	}

	template<typename F = ::jint>
	static auto CHILDID_MULTIPLE() {
		static_assert(field_signatures[jField<F>("CHILDID_MULTIPLE")] != -1);
		return sat<F>("CHILDID_MULTIPLE");
	}

	template<typename F = ::jint>
	static auto CHILDID_NONE() {
		static_assert(field_signatures[jField<F>("CHILDID_NONE")] != -1);
		return sat<F>("CHILDID_NONE");
	}

	template<typename F = ::jint>
	static auto CHILDID_SELF() {
		static_assert(field_signatures[jField<F>("CHILDID_SELF")] != -1);
		return sat<F>("CHILDID_SELF");
	}

	template<typename F = ::jint>
	static auto DELETE() {
		static_assert(field_signatures[jField<F>("DELETE")] != -1);
		return sat<F>("DELETE");
	}

	template<typename F = ::jint>
	static auto EVENT_ACTION_CHANGED() {
		static_assert(field_signatures[jField<F>("EVENT_ACTION_CHANGED")] != -1);
		return sat<F>("EVENT_ACTION_CHANGED");
	}

	template<typename F = ::jint>
	static auto EVENT_ATTRIBUTE_CHANGED() {
		static_assert(field_signatures[jField<F>("EVENT_ATTRIBUTE_CHANGED")] != -1);
		return sat<F>("EVENT_ATTRIBUTE_CHANGED");
	}

	template<typename F = ::jint>
	static auto EVENT_DESCRIPTION_CHANGED() {
		static_assert(field_signatures[jField<F>("EVENT_DESCRIPTION_CHANGED")] != -1);
		return sat<F>("EVENT_DESCRIPTION_CHANGED");
	}

	template<typename F = ::jint>
	static auto EVENT_DOCUMENT_LOAD_COMPLETE() {
		static_assert(field_signatures[jField<F>("EVENT_DOCUMENT_LOAD_COMPLETE")] != -1);
		return sat<F>("EVENT_DOCUMENT_LOAD_COMPLETE");
	}

	template<typename F = ::jint>
	static auto EVENT_DOCUMENT_LOAD_STOPPED() {
		static_assert(field_signatures[jField<F>("EVENT_DOCUMENT_LOAD_STOPPED")] != -1);
		return sat<F>("EVENT_DOCUMENT_LOAD_STOPPED");
	}

	template<typename F = ::jint>
	static auto EVENT_DOCUMENT_RELOAD() {
		static_assert(field_signatures[jField<F>("EVENT_DOCUMENT_RELOAD")] != -1);
		return sat<F>("EVENT_DOCUMENT_RELOAD");
	}

	template<typename F = ::jint>
	static auto EVENT_HYPERLINK_ACTIVATED() {
		static_assert(field_signatures[jField<F>("EVENT_HYPERLINK_ACTIVATED")] != -1);
		return sat<F>("EVENT_HYPERLINK_ACTIVATED");
	}

	template<typename F = ::jint>
	static auto EVENT_HYPERLINK_ANCHOR_COUNT_CHANGED() {
		static_assert(field_signatures[jField<F>("EVENT_HYPERLINK_ANCHOR_COUNT_CHANGED")] != -1);
		return sat<F>("EVENT_HYPERLINK_ANCHOR_COUNT_CHANGED");
	}

	template<typename F = ::jint>
	static auto EVENT_HYPERLINK_END_INDEX_CHANGED() {
		static_assert(field_signatures[jField<F>("EVENT_HYPERLINK_END_INDEX_CHANGED")] != -1);
		return sat<F>("EVENT_HYPERLINK_END_INDEX_CHANGED");
	}

	template<typename F = ::jint>
	static auto EVENT_HYPERLINK_SELECTED_LINK_CHANGED() {
		static_assert(field_signatures[jField<F>("EVENT_HYPERLINK_SELECTED_LINK_CHANGED")] != -1);
		return sat<F>("EVENT_HYPERLINK_SELECTED_LINK_CHANGED");
	}

	template<typename F = ::jint>
	static auto EVENT_HYPERLINK_START_INDEX_CHANGED() {
		static_assert(field_signatures[jField<F>("EVENT_HYPERLINK_START_INDEX_CHANGED")] != -1);
		return sat<F>("EVENT_HYPERLINK_START_INDEX_CHANGED");
	}

	template<typename F = ::jint>
	static auto EVENT_HYPERTEXT_LINK_COUNT_CHANGED() {
		static_assert(field_signatures[jField<F>("EVENT_HYPERTEXT_LINK_COUNT_CHANGED")] != -1);
		return sat<F>("EVENT_HYPERTEXT_LINK_COUNT_CHANGED");
	}

	template<typename F = ::jint>
	static auto EVENT_HYPERTEXT_LINK_SELECTED() {
		static_assert(field_signatures[jField<F>("EVENT_HYPERTEXT_LINK_SELECTED")] != -1);
		return sat<F>("EVENT_HYPERTEXT_LINK_SELECTED");
	}

	template<typename F = ::jint>
	static auto EVENT_LOCATION_CHANGED() {
		static_assert(field_signatures[jField<F>("EVENT_LOCATION_CHANGED")] != -1);
		return sat<F>("EVENT_LOCATION_CHANGED");
	}

	template<typename F = ::jint>
	static auto EVENT_NAME_CHANGED() {
		static_assert(field_signatures[jField<F>("EVENT_NAME_CHANGED")] != -1);
		return sat<F>("EVENT_NAME_CHANGED");
	}

	template<typename F = ::jint>
	static auto EVENT_PAGE_CHANGED() {
		static_assert(field_signatures[jField<F>("EVENT_PAGE_CHANGED")] != -1);
		return sat<F>("EVENT_PAGE_CHANGED");
	}

	template<typename F = ::jint>
	static auto EVENT_SECTION_CHANGED() {
		static_assert(field_signatures[jField<F>("EVENT_SECTION_CHANGED")] != -1);
		return sat<F>("EVENT_SECTION_CHANGED");
	}

	template<typename F = ::jint>
	static auto EVENT_SELECTION_CHANGED() {
		static_assert(field_signatures[jField<F>("EVENT_SELECTION_CHANGED")] != -1);
		return sat<F>("EVENT_SELECTION_CHANGED");
	}

	template<typename F = ::jint>
	static auto EVENT_STATE_CHANGED() {
		static_assert(field_signatures[jField<F>("EVENT_STATE_CHANGED")] != -1);
		return sat<F>("EVENT_STATE_CHANGED");
	}

	template<typename F = ::jint>
	static auto EVENT_TABLE_CAPTION_CHANGED() {
		static_assert(field_signatures[jField<F>("EVENT_TABLE_CAPTION_CHANGED")] != -1);
		return sat<F>("EVENT_TABLE_CAPTION_CHANGED");
	}

	template<typename F = ::jint>
	static auto EVENT_TABLE_CHANGED() {
		static_assert(field_signatures[jField<F>("EVENT_TABLE_CHANGED")] != -1);
		return sat<F>("EVENT_TABLE_CHANGED");
	}

	template<typename F = ::jint>
	static auto EVENT_TABLE_COLUMN_DESCRIPTION_CHANGED() {
		static_assert(field_signatures[jField<F>("EVENT_TABLE_COLUMN_DESCRIPTION_CHANGED")] != -1);
		return sat<F>("EVENT_TABLE_COLUMN_DESCRIPTION_CHANGED");
	}

	template<typename F = ::jint>
	static auto EVENT_TABLE_COLUMN_HEADER_CHANGED() {
		static_assert(field_signatures[jField<F>("EVENT_TABLE_COLUMN_HEADER_CHANGED")] != -1);
		return sat<F>("EVENT_TABLE_COLUMN_HEADER_CHANGED");
	}

	template<typename F = ::jint>
	static auto EVENT_TABLE_ROW_DESCRIPTION_CHANGED() {
		static_assert(field_signatures[jField<F>("EVENT_TABLE_ROW_DESCRIPTION_CHANGED")] != -1);
		return sat<F>("EVENT_TABLE_ROW_DESCRIPTION_CHANGED");
	}

	template<typename F = ::jint>
	static auto EVENT_TABLE_ROW_HEADER_CHANGED() {
		static_assert(field_signatures[jField<F>("EVENT_TABLE_ROW_HEADER_CHANGED")] != -1);
		return sat<F>("EVENT_TABLE_ROW_HEADER_CHANGED");
	}

	template<typename F = ::jint>
	static auto EVENT_TABLE_SUMMARY_CHANGED() {
		static_assert(field_signatures[jField<F>("EVENT_TABLE_SUMMARY_CHANGED")] != -1);
		return sat<F>("EVENT_TABLE_SUMMARY_CHANGED");
	}

	template<typename F = ::jint>
	static auto EVENT_TEXT_ATTRIBUTE_CHANGED() {
		static_assert(field_signatures[jField<F>("EVENT_TEXT_ATTRIBUTE_CHANGED")] != -1);
		return sat<F>("EVENT_TEXT_ATTRIBUTE_CHANGED");
	}

	template<typename F = ::jint>
	static auto EVENT_TEXT_CARET_MOVED() {
		static_assert(field_signatures[jField<F>("EVENT_TEXT_CARET_MOVED")] != -1);
		return sat<F>("EVENT_TEXT_CARET_MOVED");
	}

	template<typename F = ::jint>
	static auto EVENT_TEXT_CHANGED() {
		static_assert(field_signatures[jField<F>("EVENT_TEXT_CHANGED")] != -1);
		return sat<F>("EVENT_TEXT_CHANGED");
	}

	template<typename F = ::jint>
	static auto EVENT_TEXT_COLUMN_CHANGED() {
		static_assert(field_signatures[jField<F>("EVENT_TEXT_COLUMN_CHANGED")] != -1);
		return sat<F>("EVENT_TEXT_COLUMN_CHANGED");
	}

	template<typename F = ::jint>
	static auto EVENT_TEXT_SELECTION_CHANGED() {
		static_assert(field_signatures[jField<F>("EVENT_TEXT_SELECTION_CHANGED")] != -1);
		return sat<F>("EVENT_TEXT_SELECTION_CHANGED");
	}

	template<typename F = ::jint>
	static auto EVENT_VALUE_CHANGED() {
		static_assert(field_signatures[jField<F>("EVENT_VALUE_CHANGED")] != -1);
		return sat<F>("EVENT_VALUE_CHANGED");
	}

	template<typename F = ::jint>
	static auto INSERT() {
		static_assert(field_signatures[jField<F>("INSERT")] != -1);
		return sat<F>("INSERT");
	}

	template<typename F = ::java::lang::String>
	static auto OK() {
		static_assert(field_signatures[jField<F>("OK")] != -1);
		return sat<F>("OK");
	}

	template<typename F = ::jint>
	static auto RELATION_CONTROLLED_BY() {
		static_assert(field_signatures[jField<F>("RELATION_CONTROLLED_BY")] != -1);
		return sat<F>("RELATION_CONTROLLED_BY");
	}

	template<typename F = ::jint>
	static auto RELATION_CONTROLLER_FOR() {
		static_assert(field_signatures[jField<F>("RELATION_CONTROLLER_FOR")] != -1);
		return sat<F>("RELATION_CONTROLLER_FOR");
	}

	template<typename F = ::jint>
	static auto RELATION_DESCRIBED_BY() {
		static_assert(field_signatures[jField<F>("RELATION_DESCRIBED_BY")] != -1);
		return sat<F>("RELATION_DESCRIBED_BY");
	}

	template<typename F = ::jint>
	static auto RELATION_DESCRIPTION_FOR() {
		static_assert(field_signatures[jField<F>("RELATION_DESCRIPTION_FOR")] != -1);
		return sat<F>("RELATION_DESCRIPTION_FOR");
	}

	template<typename F = ::jint>
	static auto RELATION_EMBEDDED_BY() {
		static_assert(field_signatures[jField<F>("RELATION_EMBEDDED_BY")] != -1);
		return sat<F>("RELATION_EMBEDDED_BY");
	}

	template<typename F = ::jint>
	static auto RELATION_EMBEDS() {
		static_assert(field_signatures[jField<F>("RELATION_EMBEDS")] != -1);
		return sat<F>("RELATION_EMBEDS");
	}

	template<typename F = ::jint>
	static auto RELATION_FLOWS_FROM() {
		static_assert(field_signatures[jField<F>("RELATION_FLOWS_FROM")] != -1);
		return sat<F>("RELATION_FLOWS_FROM");
	}

	template<typename F = ::jint>
	static auto RELATION_FLOWS_TO() {
		static_assert(field_signatures[jField<F>("RELATION_FLOWS_TO")] != -1);
		return sat<F>("RELATION_FLOWS_TO");
	}

	template<typename F = ::jint>
	static auto RELATION_LABELLED_BY() {
		static_assert(field_signatures[jField<F>("RELATION_LABELLED_BY")] != -1);
		return sat<F>("RELATION_LABELLED_BY");
	}

	template<typename F = ::jint>
	static auto RELATION_LABEL_FOR() {
		static_assert(field_signatures[jField<F>("RELATION_LABEL_FOR")] != -1);
		return sat<F>("RELATION_LABEL_FOR");
	}

	template<typename F = ::jint>
	static auto RELATION_MEMBER_OF() {
		static_assert(field_signatures[jField<F>("RELATION_MEMBER_OF")] != -1);
		return sat<F>("RELATION_MEMBER_OF");
	}

	template<typename F = ::jint>
	static auto RELATION_NODE_CHILD_OF() {
		static_assert(field_signatures[jField<F>("RELATION_NODE_CHILD_OF")] != -1);
		return sat<F>("RELATION_NODE_CHILD_OF");
	}

	template<typename F = ::jint>
	static auto RELATION_PARENT_WINDOW_OF() {
		static_assert(field_signatures[jField<F>("RELATION_PARENT_WINDOW_OF")] != -1);
		return sat<F>("RELATION_PARENT_WINDOW_OF");
	}

	template<typename F = ::jint>
	static auto RELATION_POPUP_FOR() {
		static_assert(field_signatures[jField<F>("RELATION_POPUP_FOR")] != -1);
		return sat<F>("RELATION_POPUP_FOR");
	}

	template<typename F = ::jint>
	static auto RELATION_SUBWINDOW_OF() {
		static_assert(field_signatures[jField<F>("RELATION_SUBWINDOW_OF")] != -1);
		return sat<F>("RELATION_SUBWINDOW_OF");
	}

	template<typename F = ::jint>
	static auto ROLE_ALERT() {
		static_assert(field_signatures[jField<F>("ROLE_ALERT")] != -1);
		return sat<F>("ROLE_ALERT");
	}

	template<typename F = ::jint>
	static auto ROLE_ANIMATION() {
		static_assert(field_signatures[jField<F>("ROLE_ANIMATION")] != -1);
		return sat<F>("ROLE_ANIMATION");
	}

	template<typename F = ::jint>
	static auto ROLE_CALENDAR() {
		static_assert(field_signatures[jField<F>("ROLE_CALENDAR")] != -1);
		return sat<F>("ROLE_CALENDAR");
	}

	template<typename F = ::jint>
	static auto ROLE_CANVAS() {
		static_assert(field_signatures[jField<F>("ROLE_CANVAS")] != -1);
		return sat<F>("ROLE_CANVAS");
	}

	template<typename F = ::jint>
	static auto ROLE_CHECKBUTTON() {
		static_assert(field_signatures[jField<F>("ROLE_CHECKBUTTON")] != -1);
		return sat<F>("ROLE_CHECKBUTTON");
	}

	template<typename F = ::jint>
	static auto ROLE_CHECKMENUITEM() {
		static_assert(field_signatures[jField<F>("ROLE_CHECKMENUITEM")] != -1);
		return sat<F>("ROLE_CHECKMENUITEM");
	}

	template<typename F = ::jint>
	static auto ROLE_CLIENT_AREA() {
		static_assert(field_signatures[jField<F>("ROLE_CLIENT_AREA")] != -1);
		return sat<F>("ROLE_CLIENT_AREA");
	}

	template<typename F = ::jint>
	static auto ROLE_CLOCK() {
		static_assert(field_signatures[jField<F>("ROLE_CLOCK")] != -1);
		return sat<F>("ROLE_CLOCK");
	}

	template<typename F = ::jint>
	static auto ROLE_COLUMN() {
		static_assert(field_signatures[jField<F>("ROLE_COLUMN")] != -1);
		return sat<F>("ROLE_COLUMN");
	}

	template<typename F = ::jint>
	static auto ROLE_COMBOBOX() {
		static_assert(field_signatures[jField<F>("ROLE_COMBOBOX")] != -1);
		return sat<F>("ROLE_COMBOBOX");
	}

	template<typename F = ::jint>
	static auto ROLE_DATETIME() {
		static_assert(field_signatures[jField<F>("ROLE_DATETIME")] != -1);
		return sat<F>("ROLE_DATETIME");
	}

	template<typename F = ::jint>
	static auto ROLE_DIALOG() {
		static_assert(field_signatures[jField<F>("ROLE_DIALOG")] != -1);
		return sat<F>("ROLE_DIALOG");
	}

	template<typename F = ::jint>
	static auto ROLE_DOCUMENT() {
		static_assert(field_signatures[jField<F>("ROLE_DOCUMENT")] != -1);
		return sat<F>("ROLE_DOCUMENT");
	}

	template<typename F = ::jint>
	static auto ROLE_FOOTER() {
		static_assert(field_signatures[jField<F>("ROLE_FOOTER")] != -1);
		return sat<F>("ROLE_FOOTER");
	}

	template<typename F = ::jint>
	static auto ROLE_FORM() {
		static_assert(field_signatures[jField<F>("ROLE_FORM")] != -1);
		return sat<F>("ROLE_FORM");
	}

	template<typename F = ::jint>
	static auto ROLE_GRAPHIC() {
		static_assert(field_signatures[jField<F>("ROLE_GRAPHIC")] != -1);
		return sat<F>("ROLE_GRAPHIC");
	}

	template<typename F = ::jint>
	static auto ROLE_GROUP() {
		static_assert(field_signatures[jField<F>("ROLE_GROUP")] != -1);
		return sat<F>("ROLE_GROUP");
	}

	template<typename F = ::jint>
	static auto ROLE_HEADER() {
		static_assert(field_signatures[jField<F>("ROLE_HEADER")] != -1);
		return sat<F>("ROLE_HEADER");
	}

	template<typename F = ::jint>
	static auto ROLE_HEADING() {
		static_assert(field_signatures[jField<F>("ROLE_HEADING")] != -1);
		return sat<F>("ROLE_HEADING");
	}

	template<typename F = ::jint>
	static auto ROLE_LABEL() {
		static_assert(field_signatures[jField<F>("ROLE_LABEL")] != -1);
		return sat<F>("ROLE_LABEL");
	}

	template<typename F = ::jint>
	static auto ROLE_LINK() {
		static_assert(field_signatures[jField<F>("ROLE_LINK")] != -1);
		return sat<F>("ROLE_LINK");
	}

	template<typename F = ::jint>
	static auto ROLE_LIST() {
		static_assert(field_signatures[jField<F>("ROLE_LIST")] != -1);
		return sat<F>("ROLE_LIST");
	}

	template<typename F = ::jint>
	static auto ROLE_LISTITEM() {
		static_assert(field_signatures[jField<F>("ROLE_LISTITEM")] != -1);
		return sat<F>("ROLE_LISTITEM");
	}

	template<typename F = ::jint>
	static auto ROLE_MENU() {
		static_assert(field_signatures[jField<F>("ROLE_MENU")] != -1);
		return sat<F>("ROLE_MENU");
	}

	template<typename F = ::jint>
	static auto ROLE_MENUBAR() {
		static_assert(field_signatures[jField<F>("ROLE_MENUBAR")] != -1);
		return sat<F>("ROLE_MENUBAR");
	}

	template<typename F = ::jint>
	static auto ROLE_MENUITEM() {
		static_assert(field_signatures[jField<F>("ROLE_MENUITEM")] != -1);
		return sat<F>("ROLE_MENUITEM");
	}

	template<typename F = ::jint>
	static auto ROLE_PAGE() {
		static_assert(field_signatures[jField<F>("ROLE_PAGE")] != -1);
		return sat<F>("ROLE_PAGE");
	}

	template<typename F = ::jint>
	static auto ROLE_PARAGRAPH() {
		static_assert(field_signatures[jField<F>("ROLE_PARAGRAPH")] != -1);
		return sat<F>("ROLE_PARAGRAPH");
	}

	template<typename F = ::jint>
	static auto ROLE_PROGRESSBAR() {
		static_assert(field_signatures[jField<F>("ROLE_PROGRESSBAR")] != -1);
		return sat<F>("ROLE_PROGRESSBAR");
	}

	template<typename F = ::jint>
	static auto ROLE_PUSHBUTTON() {
		static_assert(field_signatures[jField<F>("ROLE_PUSHBUTTON")] != -1);
		return sat<F>("ROLE_PUSHBUTTON");
	}

	template<typename F = ::jint>
	static auto ROLE_RADIOBUTTON() {
		static_assert(field_signatures[jField<F>("ROLE_RADIOBUTTON")] != -1);
		return sat<F>("ROLE_RADIOBUTTON");
	}

	template<typename F = ::jint>
	static auto ROLE_RADIOMENUITEM() {
		static_assert(field_signatures[jField<F>("ROLE_RADIOMENUITEM")] != -1);
		return sat<F>("ROLE_RADIOMENUITEM");
	}

	template<typename F = ::jint>
	static auto ROLE_ROW() {
		static_assert(field_signatures[jField<F>("ROLE_ROW")] != -1);
		return sat<F>("ROLE_ROW");
	}

	template<typename F = ::jint>
	static auto ROLE_SCROLLBAR() {
		static_assert(field_signatures[jField<F>("ROLE_SCROLLBAR")] != -1);
		return sat<F>("ROLE_SCROLLBAR");
	}

	template<typename F = ::jint>
	static auto ROLE_SECTION() {
		static_assert(field_signatures[jField<F>("ROLE_SECTION")] != -1);
		return sat<F>("ROLE_SECTION");
	}

	template<typename F = ::jint>
	static auto ROLE_SEPARATOR() {
		static_assert(field_signatures[jField<F>("ROLE_SEPARATOR")] != -1);
		return sat<F>("ROLE_SEPARATOR");
	}

	template<typename F = ::jint>
	static auto ROLE_SLIDER() {
		static_assert(field_signatures[jField<F>("ROLE_SLIDER")] != -1);
		return sat<F>("ROLE_SLIDER");
	}

	template<typename F = ::jint>
	static auto ROLE_SPINBUTTON() {
		static_assert(field_signatures[jField<F>("ROLE_SPINBUTTON")] != -1);
		return sat<F>("ROLE_SPINBUTTON");
	}

	template<typename F = ::jint>
	static auto ROLE_SPLITBUTTON() {
		static_assert(field_signatures[jField<F>("ROLE_SPLITBUTTON")] != -1);
		return sat<F>("ROLE_SPLITBUTTON");
	}

	template<typename F = ::jint>
	static auto ROLE_STATUSBAR() {
		static_assert(field_signatures[jField<F>("ROLE_STATUSBAR")] != -1);
		return sat<F>("ROLE_STATUSBAR");
	}

	template<typename F = ::jint>
	static auto ROLE_TABFOLDER() {
		static_assert(field_signatures[jField<F>("ROLE_TABFOLDER")] != -1);
		return sat<F>("ROLE_TABFOLDER");
	}

	template<typename F = ::jint>
	static auto ROLE_TABITEM() {
		static_assert(field_signatures[jField<F>("ROLE_TABITEM")] != -1);
		return sat<F>("ROLE_TABITEM");
	}

	template<typename F = ::jint>
	static auto ROLE_TABLE() {
		static_assert(field_signatures[jField<F>("ROLE_TABLE")] != -1);
		return sat<F>("ROLE_TABLE");
	}

	template<typename F = ::jint>
	static auto ROLE_TABLECELL() {
		static_assert(field_signatures[jField<F>("ROLE_TABLECELL")] != -1);
		return sat<F>("ROLE_TABLECELL");
	}

	template<typename F = ::jint>
	static auto ROLE_TABLECOLUMN() {
		static_assert(field_signatures[jField<F>("ROLE_TABLECOLUMN")] != -1);
		return sat<F>("ROLE_TABLECOLUMN");
	}

	template<typename F = ::jint>
	static auto ROLE_TABLECOLUMNHEADER() {
		static_assert(field_signatures[jField<F>("ROLE_TABLECOLUMNHEADER")] != -1);
		return sat<F>("ROLE_TABLECOLUMNHEADER");
	}

	template<typename F = ::jint>
	static auto ROLE_TABLEROWHEADER() {
		static_assert(field_signatures[jField<F>("ROLE_TABLEROWHEADER")] != -1);
		return sat<F>("ROLE_TABLEROWHEADER");
	}

	template<typename F = ::jint>
	static auto ROLE_TEXT() {
		static_assert(field_signatures[jField<F>("ROLE_TEXT")] != -1);
		return sat<F>("ROLE_TEXT");
	}

	template<typename F = ::jint>
	static auto ROLE_TOOLBAR() {
		static_assert(field_signatures[jField<F>("ROLE_TOOLBAR")] != -1);
		return sat<F>("ROLE_TOOLBAR");
	}

	template<typename F = ::jint>
	static auto ROLE_TOOLTIP() {
		static_assert(field_signatures[jField<F>("ROLE_TOOLTIP")] != -1);
		return sat<F>("ROLE_TOOLTIP");
	}

	template<typename F = ::jint>
	static auto ROLE_TREE() {
		static_assert(field_signatures[jField<F>("ROLE_TREE")] != -1);
		return sat<F>("ROLE_TREE");
	}

	template<typename F = ::jint>
	static auto ROLE_TREEITEM() {
		static_assert(field_signatures[jField<F>("ROLE_TREEITEM")] != -1);
		return sat<F>("ROLE_TREEITEM");
	}

	template<typename F = ::jint>
	static auto ROLE_WINDOW() {
		static_assert(field_signatures[jField<F>("ROLE_WINDOW")] != -1);
		return sat<F>("ROLE_WINDOW");
	}

	template<typename F = ::jint>
	static auto SCROLL_TYPE_ANYWHERE() {
		static_assert(field_signatures[jField<F>("SCROLL_TYPE_ANYWHERE")] != -1);
		return sat<F>("SCROLL_TYPE_ANYWHERE");
	}

	template<typename F = ::jint>
	static auto SCROLL_TYPE_BOTTOM_EDGE() {
		static_assert(field_signatures[jField<F>("SCROLL_TYPE_BOTTOM_EDGE")] != -1);
		return sat<F>("SCROLL_TYPE_BOTTOM_EDGE");
	}

	template<typename F = ::jint>
	static auto SCROLL_TYPE_BOTTOM_RIGHT() {
		static_assert(field_signatures[jField<F>("SCROLL_TYPE_BOTTOM_RIGHT")] != -1);
		return sat<F>("SCROLL_TYPE_BOTTOM_RIGHT");
	}

	template<typename F = ::jint>
	static auto SCROLL_TYPE_LEFT_EDGE() {
		static_assert(field_signatures[jField<F>("SCROLL_TYPE_LEFT_EDGE")] != -1);
		return sat<F>("SCROLL_TYPE_LEFT_EDGE");
	}

	template<typename F = ::jint>
	static auto SCROLL_TYPE_POINT() {
		static_assert(field_signatures[jField<F>("SCROLL_TYPE_POINT")] != -1);
		return sat<F>("SCROLL_TYPE_POINT");
	}

	template<typename F = ::jint>
	static auto SCROLL_TYPE_RIGHT_EDGE() {
		static_assert(field_signatures[jField<F>("SCROLL_TYPE_RIGHT_EDGE")] != -1);
		return sat<F>("SCROLL_TYPE_RIGHT_EDGE");
	}

	template<typename F = ::jint>
	static auto SCROLL_TYPE_TOP_EDGE() {
		static_assert(field_signatures[jField<F>("SCROLL_TYPE_TOP_EDGE")] != -1);
		return sat<F>("SCROLL_TYPE_TOP_EDGE");
	}

	template<typename F = ::jint>
	static auto SCROLL_TYPE_TOP_LEFT() {
		static_assert(field_signatures[jField<F>("SCROLL_TYPE_TOP_LEFT")] != -1);
		return sat<F>("SCROLL_TYPE_TOP_LEFT");
	}

	template<typename F = ::jint>
	static auto STATE_ACTIVE() {
		static_assert(field_signatures[jField<F>("STATE_ACTIVE")] != -1);
		return sat<F>("STATE_ACTIVE");
	}

	template<typename F = ::jint>
	static auto STATE_BUSY() {
		static_assert(field_signatures[jField<F>("STATE_BUSY")] != -1);
		return sat<F>("STATE_BUSY");
	}

	template<typename F = ::jint>
	static auto STATE_CHECKED() {
		static_assert(field_signatures[jField<F>("STATE_CHECKED")] != -1);
		return sat<F>("STATE_CHECKED");
	}

	template<typename F = ::jint>
	static auto STATE_COLLAPSED() {
		static_assert(field_signatures[jField<F>("STATE_COLLAPSED")] != -1);
		return sat<F>("STATE_COLLAPSED");
	}

	template<typename F = ::jint>
	static auto STATE_DISABLED() {
		static_assert(field_signatures[jField<F>("STATE_DISABLED")] != -1);
		return sat<F>("STATE_DISABLED");
	}

	template<typename F = ::jint>
	static auto STATE_EXPANDED() {
		static_assert(field_signatures[jField<F>("STATE_EXPANDED")] != -1);
		return sat<F>("STATE_EXPANDED");
	}

	template<typename F = ::jint>
	static auto STATE_FOCUSABLE() {
		static_assert(field_signatures[jField<F>("STATE_FOCUSABLE")] != -1);
		return sat<F>("STATE_FOCUSABLE");
	}

	template<typename F = ::jint>
	static auto STATE_FOCUSED() {
		static_assert(field_signatures[jField<F>("STATE_FOCUSED")] != -1);
		return sat<F>("STATE_FOCUSED");
	}

	template<typename F = ::jint>
	static auto STATE_HOTTRACKED() {
		static_assert(field_signatures[jField<F>("STATE_HOTTRACKED")] != -1);
		return sat<F>("STATE_HOTTRACKED");
	}

	template<typename F = ::jint>
	static auto STATE_INVALID_ENTRY() {
		static_assert(field_signatures[jField<F>("STATE_INVALID_ENTRY")] != -1);
		return sat<F>("STATE_INVALID_ENTRY");
	}

	template<typename F = ::jint>
	static auto STATE_INVISIBLE() {
		static_assert(field_signatures[jField<F>("STATE_INVISIBLE")] != -1);
		return sat<F>("STATE_INVISIBLE");
	}

	template<typename F = ::jint>
	static auto STATE_LINKED() {
		static_assert(field_signatures[jField<F>("STATE_LINKED")] != -1);
		return sat<F>("STATE_LINKED");
	}

	template<typename F = ::jint>
	static auto STATE_MULTILINE() {
		static_assert(field_signatures[jField<F>("STATE_MULTILINE")] != -1);
		return sat<F>("STATE_MULTILINE");
	}

	template<typename F = ::jint>
	static auto STATE_MULTISELECTABLE() {
		static_assert(field_signatures[jField<F>("STATE_MULTISELECTABLE")] != -1);
		return sat<F>("STATE_MULTISELECTABLE");
	}

	template<typename F = ::jint>
	static auto STATE_NORMAL() {
		static_assert(field_signatures[jField<F>("STATE_NORMAL")] != -1);
		return sat<F>("STATE_NORMAL");
	}

	template<typename F = ::jint>
	static auto STATE_OFFSCREEN() {
		static_assert(field_signatures[jField<F>("STATE_OFFSCREEN")] != -1);
		return sat<F>("STATE_OFFSCREEN");
	}

	template<typename F = ::jint>
	static auto STATE_PRESSED() {
		static_assert(field_signatures[jField<F>("STATE_PRESSED")] != -1);
		return sat<F>("STATE_PRESSED");
	}

	template<typename F = ::jint>
	static auto STATE_READONLY() {
		static_assert(field_signatures[jField<F>("STATE_READONLY")] != -1);
		return sat<F>("STATE_READONLY");
	}

	template<typename F = ::jint>
	static auto STATE_REQUIRED() {
		static_assert(field_signatures[jField<F>("STATE_REQUIRED")] != -1);
		return sat<F>("STATE_REQUIRED");
	}

	template<typename F = ::jint>
	static auto STATE_SELECTABLE() {
		static_assert(field_signatures[jField<F>("STATE_SELECTABLE")] != -1);
		return sat<F>("STATE_SELECTABLE");
	}

	template<typename F = ::jint>
	static auto STATE_SELECTED() {
		static_assert(field_signatures[jField<F>("STATE_SELECTED")] != -1);
		return sat<F>("STATE_SELECTED");
	}

	template<typename F = ::jint>
	static auto STATE_SINGLELINE() {
		static_assert(field_signatures[jField<F>("STATE_SINGLELINE")] != -1);
		return sat<F>("STATE_SINGLELINE");
	}

	template<typename F = ::jint>
	static auto STATE_SIZEABLE() {
		static_assert(field_signatures[jField<F>("STATE_SIZEABLE")] != -1);
		return sat<F>("STATE_SIZEABLE");
	}

	template<typename F = ::jint>
	static auto STATE_SUPPORTS_AUTOCOMPLETION() {
		static_assert(field_signatures[jField<F>("STATE_SUPPORTS_AUTOCOMPLETION")] != -1);
		return sat<F>("STATE_SUPPORTS_AUTOCOMPLETION");
	}

	template<typename F = ::jint>
	static auto TEXT_BOUNDARY_ALL() {
		static_assert(field_signatures[jField<F>("TEXT_BOUNDARY_ALL")] != -1);
		return sat<F>("TEXT_BOUNDARY_ALL");
	}

	template<typename F = ::jint>
	static auto TEXT_BOUNDARY_CHAR() {
		static_assert(field_signatures[jField<F>("TEXT_BOUNDARY_CHAR")] != -1);
		return sat<F>("TEXT_BOUNDARY_CHAR");
	}

	template<typename F = ::jint>
	static auto TEXT_BOUNDARY_LINE() {
		static_assert(field_signatures[jField<F>("TEXT_BOUNDARY_LINE")] != -1);
		return sat<F>("TEXT_BOUNDARY_LINE");
	}

	template<typename F = ::jint>
	static auto TEXT_BOUNDARY_PARAGRAPH() {
		static_assert(field_signatures[jField<F>("TEXT_BOUNDARY_PARAGRAPH")] != -1);
		return sat<F>("TEXT_BOUNDARY_PARAGRAPH");
	}

	template<typename F = ::jint>
	static auto TEXT_BOUNDARY_SENTENCE() {
		static_assert(field_signatures[jField<F>("TEXT_BOUNDARY_SENTENCE")] != -1);
		return sat<F>("TEXT_BOUNDARY_SENTENCE");
	}

	template<typename F = ::jint>
	static auto TEXT_BOUNDARY_WORD() {
		static_assert(field_signatures[jField<F>("TEXT_BOUNDARY_WORD")] != -1);
		return sat<F>("TEXT_BOUNDARY_WORD");
	}

	template<typename F = ::jint>
	static auto TEXT_DELETE() {
		static_assert(field_signatures[jField<F>("TEXT_DELETE")] != -1);
		return sat<F>("TEXT_DELETE");
	}

	template<typename F = ::jint>
	static auto TEXT_INSERT() {
		static_assert(field_signatures[jField<F>("TEXT_INSERT")] != -1);
		return sat<F>("TEXT_INSERT");
	}

	template<typename F = ::jint>
	static auto VISIBLE() {
		static_assert(field_signatures[jField<F>("VISIBLE")] != -1);
		return sat<F>("VISIBLE");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
	};

};

#endif
