#ifndef org_eclipse_swt_accessibility_AccessibleTableCellAdapter_HPP
#define org_eclipse_swt_accessibility_AccessibleTableCellAdapter_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::accessibility::AccessibleTableCellAdapter : public jObject<::org::eclipse::swt::accessibility::AccessibleTableCellAdapter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_accessibility / "AccessibleTableCellAdapter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableCellEvent)>("getColumnHeaders"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableCellEvent)>("getColumnIndex"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableCellEvent)>("getColumnSpan"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableCellEvent)>("getRowHeaders"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableCellEvent)>("getRowIndex"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableCellEvent)>("getRowSpan"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableCellEvent)>("getTable"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableCellEvent)>("isSelected"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto getColumnHeaders(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumnHeaders")] != -1);
		return call<R>("getColumnHeaders", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getColumnIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumnIndex")] != -1);
		return call<R>("getColumnIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getColumnSpan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumnSpan")] != -1);
		return call<R>("getColumnSpan", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getRowHeaders(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRowHeaders")] != -1);
		return call<R>("getRowHeaders", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getRowIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRowIndex")] != -1);
		return call<R>("getRowIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getRowSpan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRowSpan")] != -1);
		return call<R>("getRowSpan", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getTable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTable")] != -1);
		return call<R>("getTable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto isSelected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSelected")] != -1);
		return call<R>("isSelected", std::forward<Args>(args)...);
	}

};

#endif
