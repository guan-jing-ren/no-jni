#ifndef org_eclipse_swt_accessibility_AccessibleTableEvent_HPP
#define org_eclipse_swt_accessibility_AccessibleTableEvent_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::accessibility::AccessibleTableEvent : public jObject<::org::eclipse::swt::accessibility::AccessibleTableEvent, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_accessibility / "AccessibleTableEvent";

	constexpr static Enume field_signatures{
		jField<::org::eclipse::swt::accessibility::Accessible>("accessible"), //
		jField<::org::eclipse::swt::accessibility::Accessible *>("accessibles"), //
		jField<::jint>("column"), //
		jField<::jint>("count"), //
		jField<::jboolean>("isSelected"), //
		jField<::java::lang::String>("result"), //
		jField<::jint>("row"), //
		jField<::jint *>("selected"), //
	};

	template<typename F = ::org::eclipse::swt::accessibility::Accessible>
	auto accessible() const {
		static_assert(field_signatures[jField<F>("accessible")] != -1);
		return at<F>("accessible");
	}

	template<typename F = ::org::eclipse::swt::accessibility::Accessible *>
	auto accessibles() const {
		static_assert(field_signatures[jField<F>("accessibles")] != -1);
		return at<F>("accessibles");
	}

	template<typename F = ::jint>
	auto column() const {
		static_assert(field_signatures[jField<F>("column")] != -1);
		return at<F>("column");
	}

	template<typename F = ::jint>
	auto count() const {
		static_assert(field_signatures[jField<F>("count")] != -1);
		return at<F>("count");
	}

	template<typename F = ::jboolean>
	auto isSelected() const {
		static_assert(field_signatures[jField<F>("isSelected")] != -1);
		return at<F>("isSelected");
	}

	template<typename F = ::java::lang::String>
	auto result() const {
		static_assert(field_signatures[jField<F>("result")] != -1);
		return at<F>("result");
	}

	template<typename F = ::jint>
	auto row() const {
		static_assert(field_signatures[jField<F>("row")] != -1);
		return at<F>("row");
	}

	template<typename F = ::jint *>
	auto selected() const {
		static_assert(field_signatures[jField<F>("selected")] != -1);
		return at<F>("selected");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::Object)>(), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
