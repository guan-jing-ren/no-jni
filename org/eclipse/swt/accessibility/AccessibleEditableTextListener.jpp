#ifndef org_eclipse_swt_accessibility_AccessibleEditableTextListener_HPP
#define org_eclipse_swt_accessibility_AccessibleEditableTextListener_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::accessibility::AccessibleEditableTextListener : public jObject<::org::eclipse::swt::accessibility::AccessibleEditableTextListener, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_accessibility / "AccessibleEditableTextListener";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleEditableTextEvent)>("copyText"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleEditableTextEvent)>("cutText"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleEditableTextEvent)>("pasteText"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleEditableTextEvent)>("replaceText"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTextAttributeEvent)>("setTextAttributes"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto copyText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("copyText")] != -1);
		return call<R>("copyText", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto cutText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cutText")] != -1);
		return call<R>("cutText", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto pasteText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("pasteText")] != -1);
		return call<R>("pasteText", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto replaceText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("replaceText")] != -1);
		return call<R>("replaceText", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTextAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTextAttributes")] != -1);
		return call<R>("setTextAttributes", std::forward<Args>(args)...);
	}

};

#endif
