#ifndef org_eclipse_swt_accessibility_AccessibleAttributeEvent_HPP
#define org_eclipse_swt_accessibility_AccessibleAttributeEvent_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::accessibility::AccessibleAttributeEvent : public jObject<::org::eclipse::swt::accessibility::AccessibleAttributeEvent, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_accessibility / "AccessibleAttributeEvent";

	constexpr static Enume field_signatures{
		jField<::jint>("alignment"), //
		jField<::java::lang::String *>("attributes"), //
		jField<::jint>("bottomMargin"), //
		jField<::jint>("groupCount"), //
		jField<::jint>("groupIndex"), //
		jField<::jint>("groupLevel"), //
		jField<::jint>("indent"), //
		jField<::jboolean>("justify"), //
		jField<::jint>("leftMargin"), //
		jField<::jint>("rightMargin"), //
		jField<::jint *>("tabStops"), //
		jField<::jint>("topMargin"), //
	};

	template<typename F = ::jint>
	auto alignment() const {
		static_assert(field_signatures[jField<F>("alignment")] != -1);
		return at<F>("alignment");
	}

	template<typename F = ::java::lang::String *>
	auto attributes() const {
		static_assert(field_signatures[jField<F>("attributes")] != -1);
		return at<F>("attributes");
	}

	template<typename F = ::jint>
	auto bottomMargin() const {
		static_assert(field_signatures[jField<F>("bottomMargin")] != -1);
		return at<F>("bottomMargin");
	}

	template<typename F = ::jint>
	auto groupCount() const {
		static_assert(field_signatures[jField<F>("groupCount")] != -1);
		return at<F>("groupCount");
	}

	template<typename F = ::jint>
	auto groupIndex() const {
		static_assert(field_signatures[jField<F>("groupIndex")] != -1);
		return at<F>("groupIndex");
	}

	template<typename F = ::jint>
	auto groupLevel() const {
		static_assert(field_signatures[jField<F>("groupLevel")] != -1);
		return at<F>("groupLevel");
	}

	template<typename F = ::jint>
	auto indent() const {
		static_assert(field_signatures[jField<F>("indent")] != -1);
		return at<F>("indent");
	}

	template<typename F = ::jboolean>
	auto justify() const {
		static_assert(field_signatures[jField<F>("justify")] != -1);
		return at<F>("justify");
	}

	template<typename F = ::jint>
	auto leftMargin() const {
		static_assert(field_signatures[jField<F>("leftMargin")] != -1);
		return at<F>("leftMargin");
	}

	template<typename F = ::jint>
	auto rightMargin() const {
		static_assert(field_signatures[jField<F>("rightMargin")] != -1);
		return at<F>("rightMargin");
	}

	template<typename F = ::jint *>
	auto tabStops() const {
		static_assert(field_signatures[jField<F>("tabStops")] != -1);
		return at<F>("tabStops");
	}

	template<typename F = ::jint>
	auto topMargin() const {
		static_assert(field_signatures[jField<F>("topMargin")] != -1);
		return at<F>("topMargin");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::Object)>(), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
