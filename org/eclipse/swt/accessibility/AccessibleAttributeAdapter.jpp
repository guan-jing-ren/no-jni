#ifndef org_eclipse_swt_accessibility_AccessibleAttributeAdapter_HPP
#define org_eclipse_swt_accessibility_AccessibleAttributeAdapter_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::accessibility::AccessibleAttributeAdapter : public jObject<::org::eclipse::swt::accessibility::AccessibleAttributeAdapter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_accessibility / "AccessibleAttributeAdapter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleAttributeEvent)>("getAttributes"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTextAttributeEvent)>("getTextAttributes"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto getAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributes")] != -1);
		return call<R>("getAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getTextAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextAttributes")] != -1);
		return call<R>("getTextAttributes", std::forward<Args>(args)...);
	}

};

#endif
