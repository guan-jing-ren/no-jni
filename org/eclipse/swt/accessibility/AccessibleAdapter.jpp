#ifndef org_eclipse_swt_accessibility_AccessibleAdapter_HPP
#define org_eclipse_swt_accessibility_AccessibleAdapter_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::accessibility::AccessibleAdapter : public jObject<::org::eclipse::swt::accessibility::AccessibleAdapter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_accessibility / "AccessibleAdapter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleEvent)>("getDescription"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleEvent)>("getHelp"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleEvent)>("getKeyboardShortcut"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleEvent)>("getName"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto getDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDescription")] != -1);
		return call<R>("getDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getHelp(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHelp")] != -1);
		return call<R>("getHelp", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getKeyboardShortcut(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeyboardShortcut")] != -1);
		return call<R>("getKeyboardShortcut", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

};

#endif
