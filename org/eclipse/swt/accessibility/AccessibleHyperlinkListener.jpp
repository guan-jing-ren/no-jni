#ifndef org_eclipse_swt_accessibility_AccessibleHyperlinkListener_HPP
#define org_eclipse_swt_accessibility_AccessibleHyperlinkListener_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::accessibility::AccessibleHyperlinkListener : public jObject<::org::eclipse::swt::accessibility::AccessibleHyperlinkListener, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_accessibility / "AccessibleHyperlinkListener";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleHyperlinkEvent)>("getAnchor"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleHyperlinkEvent)>("getAnchorTarget"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleHyperlinkEvent)>("getEndIndex"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleHyperlinkEvent)>("getStartIndex"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto getAnchor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAnchor")] != -1);
		return call<R>("getAnchor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getAnchorTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAnchorTarget")] != -1);
		return call<R>("getAnchorTarget", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getEndIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEndIndex")] != -1);
		return call<R>("getEndIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getStartIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStartIndex")] != -1);
		return call<R>("getStartIndex", std::forward<Args>(args)...);
	}

};

#endif
