#ifndef org_eclipse_swt_accessibility_AccessibleControlEvent_HPP
#define org_eclipse_swt_accessibility_AccessibleControlEvent_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::accessibility::AccessibleControlEvent : public jObject<::org::eclipse::swt::accessibility::AccessibleControlEvent, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_accessibility / "AccessibleControlEvent";

	constexpr static Enume field_signatures{
		jField<::org::eclipse::swt::accessibility::Accessible>("accessible"), //
		jField<::jint>("childID"), //
		jField<::java::lang::Object *>("children"), //
		jField<::jint>("detail"), //
		jField<::jint>("height"), //
		jField<::java::lang::String>("result"), //
		jField<::jint>("width"), //
		jField<::jint>("x"), //
		jField<::jint>("y"), //
	};

	template<typename F = ::org::eclipse::swt::accessibility::Accessible>
	auto accessible() const {
		static_assert(field_signatures[jField<F>("accessible")] != -1);
		return at<F>("accessible");
	}

	template<typename F = ::jint>
	auto childID() const {
		static_assert(field_signatures[jField<F>("childID")] != -1);
		return at<F>("childID");
	}

	template<typename F = ::java::lang::Object *>
	auto children() const {
		static_assert(field_signatures[jField<F>("children")] != -1);
		return at<F>("children");
	}

	template<typename F = ::jint>
	auto detail() const {
		static_assert(field_signatures[jField<F>("detail")] != -1);
		return at<F>("detail");
	}

	template<typename F = ::jint>
	auto height() const {
		static_assert(field_signatures[jField<F>("height")] != -1);
		return at<F>("height");
	}

	template<typename F = ::java::lang::String>
	auto result() const {
		static_assert(field_signatures[jField<F>("result")] != -1);
		return at<F>("result");
	}

	template<typename F = ::jint>
	auto width() const {
		static_assert(field_signatures[jField<F>("width")] != -1);
		return at<F>("width");
	}

	template<typename F = ::jint>
	auto x() const {
		static_assert(field_signatures[jField<F>("x")] != -1);
		return at<F>("x");
	}

	template<typename F = ::jint>
	auto y() const {
		static_assert(field_signatures[jField<F>("y")] != -1);
		return at<F>("y");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::Object)>(), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
