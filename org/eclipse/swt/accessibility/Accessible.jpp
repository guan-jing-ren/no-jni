#ifndef org_eclipse_swt_accessibility_Accessible_HPP
#define org_eclipse_swt_accessibility_Accessible_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::accessibility::Accessible : public jObject<::org::eclipse::swt::accessibility::Accessible, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_accessibility / "Accessible";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::accessibility::Accessible)>(), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleActionListener)>("addAccessibleActionListener"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleAttributeListener)>("addAccessibleAttributeListener"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleControlListener)>("addAccessibleControlListener"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleEditableTextListener)>("addAccessibleEditableTextListener"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleHyperlinkListener)>("addAccessibleHyperlinkListener"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleListener)>("addAccessibleListener"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableCellListener)>("addAccessibleTableCellListener"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableListener)>("addAccessibleTableListener"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTextListener)>("addAccessibleTextListener"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleValueListener)>("addAccessibleValueListener"), //
		jMethod<::jvoid(::jint, ::org::eclipse::swt::accessibility::Accessible)>("addRelation"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::org::eclipse::swt::widgets::Control()>("getControl"), //
		jMethod<::jvoid()>("internal_dispose_Accessible"), //
		jMethod<::org::eclipse::swt::accessibility::Accessible(::org::eclipse::swt::widgets::Control)>("internal_new_Accessible"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleActionListener)>("removeAccessibleActionListener"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleAttributeListener)>("removeAccessibleAttributeListener"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleControlListener)>("removeAccessibleControlListener"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleEditableTextListener)>("removeAccessibleEditableTextListener"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleHyperlinkListener)>("removeAccessibleHyperlinkListener"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleListener)>("removeAccessibleListener"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableCellListener)>("removeAccessibleTableCellListener"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableListener)>("removeAccessibleTableListener"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTextListener)>("removeAccessibleTextListener"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleValueListener)>("removeAccessibleValueListener"), //
		jMethod<::jvoid(::jint, ::org::eclipse::swt::accessibility::Accessible)>("removeRelation"), //
		jMethod<::jvoid()>("selectionChanged"), //
		jMethod<::jvoid(::jint, ::java::lang::Object)>("sendEvent"), //
		jMethod<::jvoid(::jint, ::java::lang::Object, ::jint)>("sendEvent"), //
		jMethod<::jvoid(::jint)>("setFocus"), //
		jMethod<::jvoid(::jint)>("textCaretMoved"), //
		jMethod<::jvoid(::jint, ::jint, ::jint)>("textChanged"), //
		jMethod<::jvoid()>("textSelectionChanged"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addAccessibleActionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addAccessibleActionListener")] != -1);
		return call<R>("addAccessibleActionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addAccessibleAttributeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addAccessibleAttributeListener")] != -1);
		return call<R>("addAccessibleAttributeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addAccessibleControlListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addAccessibleControlListener")] != -1);
		return call<R>("addAccessibleControlListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addAccessibleEditableTextListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addAccessibleEditableTextListener")] != -1);
		return call<R>("addAccessibleEditableTextListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addAccessibleHyperlinkListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addAccessibleHyperlinkListener")] != -1);
		return call<R>("addAccessibleHyperlinkListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addAccessibleListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addAccessibleListener")] != -1);
		return call<R>("addAccessibleListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addAccessibleTableCellListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addAccessibleTableCellListener")] != -1);
		return call<R>("addAccessibleTableCellListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addAccessibleTableListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addAccessibleTableListener")] != -1);
		return call<R>("addAccessibleTableListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addAccessibleTextListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addAccessibleTextListener")] != -1);
		return call<R>("addAccessibleTextListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addAccessibleValueListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addAccessibleValueListener")] != -1);
		return call<R>("addAccessibleValueListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addRelation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addRelation")] != -1);
		return call<R>("addRelation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Control, typename... Args>
	auto getControl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getControl")] != -1);
		return call<R>("getControl", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto internal_dispose_Accessible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("internal_dispose_Accessible")] != -1);
		return call<R>("internal_dispose_Accessible", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::accessibility::Accessible, typename... Args>
	static auto internal_new_Accessible(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("internal_new_Accessible")] != -1);
		return scall<R>("internal_new_Accessible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAccessibleActionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAccessibleActionListener")] != -1);
		return call<R>("removeAccessibleActionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAccessibleAttributeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAccessibleAttributeListener")] != -1);
		return call<R>("removeAccessibleAttributeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAccessibleControlListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAccessibleControlListener")] != -1);
		return call<R>("removeAccessibleControlListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAccessibleEditableTextListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAccessibleEditableTextListener")] != -1);
		return call<R>("removeAccessibleEditableTextListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAccessibleHyperlinkListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAccessibleHyperlinkListener")] != -1);
		return call<R>("removeAccessibleHyperlinkListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAccessibleListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAccessibleListener")] != -1);
		return call<R>("removeAccessibleListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAccessibleTableCellListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAccessibleTableCellListener")] != -1);
		return call<R>("removeAccessibleTableCellListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAccessibleTableListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAccessibleTableListener")] != -1);
		return call<R>("removeAccessibleTableListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAccessibleTextListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAccessibleTextListener")] != -1);
		return call<R>("removeAccessibleTextListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAccessibleValueListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAccessibleValueListener")] != -1);
		return call<R>("removeAccessibleValueListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeRelation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeRelation")] != -1);
		return call<R>("removeRelation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto selectionChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("selectionChanged")] != -1);
		return call<R>("selectionChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto sendEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sendEvent")] != -1);
		return call<R>("sendEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFocus")] != -1);
		return call<R>("setFocus", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto textCaretMoved(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("textCaretMoved")] != -1);
		return call<R>("textCaretMoved", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto textChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("textChanged")] != -1);
		return call<R>("textChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto textSelectionChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("textSelectionChanged")] != -1);
		return call<R>("textSelectionChanged", std::forward<Args>(args)...);
	}

};

#endif
