#ifndef org_eclipse_swt_accessibility_AccessibleControlAdapter_HPP
#define org_eclipse_swt_accessibility_AccessibleControlAdapter_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::accessibility::AccessibleControlAdapter : public jObject<::org::eclipse::swt::accessibility::AccessibleControlAdapter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_accessibility / "AccessibleControlAdapter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleControlEvent)>("getChild"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleControlEvent)>("getChildAtPoint"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleControlEvent)>("getChildCount"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleControlEvent)>("getChildren"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleControlEvent)>("getDefaultAction"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleControlEvent)>("getFocus"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleControlEvent)>("getLocation"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleControlEvent)>("getRole"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleControlEvent)>("getSelection"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleControlEvent)>("getState"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleControlEvent)>("getValue"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto getChild(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChild")] != -1);
		return call<R>("getChild", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getChildAtPoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChildAtPoint")] != -1);
		return call<R>("getChildAtPoint", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getChildCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChildCount")] != -1);
		return call<R>("getChildCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getChildren(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChildren")] != -1);
		return call<R>("getChildren", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getDefaultAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultAction")] != -1);
		return call<R>("getDefaultAction", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFocus")] != -1);
		return call<R>("getFocus", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocation")] != -1);
		return call<R>("getLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getRole(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRole")] != -1);
		return call<R>("getRole", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelection")] != -1);
		return call<R>("getSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getState")] != -1);
		return call<R>("getState", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", std::forward<Args>(args)...);
	}

};

#endif
