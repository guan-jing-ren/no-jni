#ifndef org_eclipse_swt_accessibility_AccessibleTableListener_HPP
#define org_eclipse_swt_accessibility_AccessibleTableListener_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::accessibility::AccessibleTableListener : public jObject<::org::eclipse::swt::accessibility::AccessibleTableListener, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_accessibility / "AccessibleTableListener";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableEvent)>("deselectColumn"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableEvent)>("deselectRow"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableEvent)>("getCaption"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableEvent)>("getCell"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableEvent)>("getColumn"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableEvent)>("getColumnCount"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableEvent)>("getColumnDescription"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableEvent)>("getColumnHeader"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableEvent)>("getColumnHeaderCells"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableEvent)>("getColumns"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableEvent)>("getRow"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableEvent)>("getRowCount"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableEvent)>("getRowDescription"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableEvent)>("getRowHeader"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableEvent)>("getRowHeaderCells"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableEvent)>("getRows"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableEvent)>("getSelectedCellCount"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableEvent)>("getSelectedCells"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableEvent)>("getSelectedColumnCount"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableEvent)>("getSelectedColumns"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableEvent)>("getSelectedRowCount"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableEvent)>("getSelectedRows"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableEvent)>("getSummary"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableEvent)>("getVisibleColumns"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableEvent)>("getVisibleRows"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableEvent)>("isColumnSelected"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableEvent)>("isRowSelected"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableEvent)>("selectColumn"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableEvent)>("selectRow"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableEvent)>("setSelectedColumn"), //
		jMethod<::jvoid(::org::eclipse::swt::accessibility::AccessibleTableEvent)>("setSelectedRow"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto deselectColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deselectColumn")] != -1);
		return call<R>("deselectColumn", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deselectRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deselectRow")] != -1);
		return call<R>("deselectRow", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getCaption(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCaption")] != -1);
		return call<R>("getCaption", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getCell(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCell")] != -1);
		return call<R>("getCell", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumn")] != -1);
		return call<R>("getColumn", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getColumnCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumnCount")] != -1);
		return call<R>("getColumnCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getColumnDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumnDescription")] != -1);
		return call<R>("getColumnDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getColumnHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumnHeader")] != -1);
		return call<R>("getColumnHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getColumnHeaderCells(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumnHeaderCells")] != -1);
		return call<R>("getColumnHeaderCells", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getColumns(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumns")] != -1);
		return call<R>("getColumns", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRow")] != -1);
		return call<R>("getRow", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getRowCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRowCount")] != -1);
		return call<R>("getRowCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getRowDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRowDescription")] != -1);
		return call<R>("getRowDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getRowHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRowHeader")] != -1);
		return call<R>("getRowHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getRowHeaderCells(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRowHeaderCells")] != -1);
		return call<R>("getRowHeaderCells", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getRows(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRows")] != -1);
		return call<R>("getRows", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getSelectedCellCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedCellCount")] != -1);
		return call<R>("getSelectedCellCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getSelectedCells(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedCells")] != -1);
		return call<R>("getSelectedCells", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getSelectedColumnCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedColumnCount")] != -1);
		return call<R>("getSelectedColumnCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getSelectedColumns(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedColumns")] != -1);
		return call<R>("getSelectedColumns", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getSelectedRowCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedRowCount")] != -1);
		return call<R>("getSelectedRowCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getSelectedRows(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedRows")] != -1);
		return call<R>("getSelectedRows", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getSummary(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSummary")] != -1);
		return call<R>("getSummary", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getVisibleColumns(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVisibleColumns")] != -1);
		return call<R>("getVisibleColumns", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getVisibleRows(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVisibleRows")] != -1);
		return call<R>("getVisibleRows", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto isColumnSelected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isColumnSelected")] != -1);
		return call<R>("isColumnSelected", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto isRowSelected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isRowSelected")] != -1);
		return call<R>("isRowSelected", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto selectColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("selectColumn")] != -1);
		return call<R>("selectColumn", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto selectRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("selectRow")] != -1);
		return call<R>("selectRow", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectedColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectedColumn")] != -1);
		return call<R>("setSelectedColumn", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectedRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectedRow")] != -1);
		return call<R>("setSelectedRow", std::forward<Args>(args)...);
	}

};

#endif
