#ifndef org_eclipse_swt_program_Program_HPP
#define org_eclipse_swt_program_Program_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::program::Program : public jObject<::org::eclipse::swt::program::Program, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_program / "Program";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jboolean(::java::lang::String)>("execute"), //
		jMethod<::org::eclipse::swt::program::Program(::java::lang::String)>("findProgram"), //
		jMethod<::java::lang::String *()>("getExtensions"), //
		jMethod<::org::eclipse::swt::graphics::ImageData()>("getImageData"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::org::eclipse::swt::program::Program *()>("getPrograms"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean(::java::lang::String)>("launch"), //
		jMethod<::jboolean(::java::lang::String, ::java::lang::String)>("launch"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto execute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("execute")] != -1);
		return call<R>("execute", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::program::Program, typename... Args>
	static auto findProgram(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("findProgram")] != -1);
		return scall<R>("findProgram", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	static auto getExtensions(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExtensions")] != -1);
		return scall<R>("getExtensions", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::ImageData, typename... Args>
	auto getImageData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getImageData")] != -1);
		return call<R>("getImageData", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::program::Program *, typename... Args>
	static auto getPrograms(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrograms")] != -1);
		return scall<R>("getPrograms", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto launch(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("launch")] != -1);
		return scall<R>("launch", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
