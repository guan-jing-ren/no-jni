#ifndef org_eclipse_swt_SWT_HPP
#define org_eclipse_swt_SWT_HPP

#include "../../../jfwd_decl.hpp"

class ::org::eclipse::swt::SWT : public jObject<::org::eclipse::swt::SWT, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt / "SWT";

	constexpr static Enume field_signatures{
		jField<::jint>("ABORT"), //
		jField<::jint>("ALL"), //
		jField<::jint>("ALPHA"), //
		jField<::jint>("ALT"), //
		jField<::jint>("APPLICATION_MODAL"), //
		jField<::jint>("ARROW"), //
		jField<::jint>("ARROW_DOWN"), //
		jField<::jint>("ARROW_LEFT"), //
		jField<::jint>("ARROW_RIGHT"), //
		jField<::jint>("ARROW_UP"), //
		jField<::jint>("Activate"), //
		jField<::jint>("Arm"), //
		jField<::jint>("BACKGROUND"), //
		jField<::jint>("BALLOON"), //
		jField<::jint>("BAR"), //
		jField<::jint>("BEGINNING"), //
		jField<::jint>("BITMAP"), //
		jField<::jint>("BOLD"), //
		jField<::jint>("BORDER"), //
		jField<::jint>("BORDER_DASH"), //
		jField<::jint>("BORDER_DOT"), //
		jField<::jint>("BORDER_SOLID"), //
		jField<::jint>("BOTTOM"), //
		jField<::jint>("BREAK"), //
		jField<::jchar>("BS"), //
		jField<::jint>("BUTTON1"), //
		jField<::jint>("BUTTON2"), //
		jField<::jint>("BUTTON3"), //
		jField<::jint>("BUTTON4"), //
		jField<::jint>("BUTTON5"), //
		jField<::jint>("BUTTON_MASK"), //
		jField<::jint>("CALENDAR"), //
		jField<::jint>("CANCEL"), //
		jField<::jint>("CAPS_LOCK"), //
		jField<::jint>("CAP_FLAT"), //
		jField<::jint>("CAP_ROUND"), //
		jField<::jint>("CAP_SQUARE"), //
		jField<::jint>("CASCADE"), //
		jField<::jint>("CENTER"), //
		jField<::jint>("CHANGED"), //
		jField<::jint>("CHECK"), //
		jField<::jint>("CLIP_CHILDREN"), //
		jField<::jint>("CLIP_SIBLINGS"), //
		jField<::jint>("CLOSE"), //
		jField<::jint>("COLOR_BLACK"), //
		jField<::jint>("COLOR_BLUE"), //
		jField<::jint>("COLOR_CYAN"), //
		jField<::jint>("COLOR_DARK_BLUE"), //
		jField<::jint>("COLOR_DARK_CYAN"), //
		jField<::jint>("COLOR_DARK_GRAY"), //
		jField<::jint>("COLOR_DARK_GREEN"), //
		jField<::jint>("COLOR_DARK_MAGENTA"), //
		jField<::jint>("COLOR_DARK_RED"), //
		jField<::jint>("COLOR_DARK_YELLOW"), //
		jField<::jint>("COLOR_GRAY"), //
		jField<::jint>("COLOR_GREEN"), //
		jField<::jint>("COLOR_INFO_BACKGROUND"), //
		jField<::jint>("COLOR_INFO_FOREGROUND"), //
		jField<::jint>("COLOR_LINK_FOREGROUND"), //
		jField<::jint>("COLOR_LIST_BACKGROUND"), //
		jField<::jint>("COLOR_LIST_FOREGROUND"), //
		jField<::jint>("COLOR_LIST_SELECTION"), //
		jField<::jint>("COLOR_LIST_SELECTION_TEXT"), //
		jField<::jint>("COLOR_MAGENTA"), //
		jField<::jint>("COLOR_RED"), //
		jField<::jint>("COLOR_TITLE_BACKGROUND"), //
		jField<::jint>("COLOR_TITLE_BACKGROUND_GRADIENT"), //
		jField<::jint>("COLOR_TITLE_FOREGROUND"), //
		jField<::jint>("COLOR_TITLE_INACTIVE_BACKGROUND"), //
		jField<::jint>("COLOR_TITLE_INACTIVE_BACKGROUND_GRADIENT"), //
		jField<::jint>("COLOR_TITLE_INACTIVE_FOREGROUND"), //
		jField<::jint>("COLOR_TRANSPARENT"), //
		jField<::jint>("COLOR_WHITE"), //
		jField<::jint>("COLOR_WIDGET_BACKGROUND"), //
		jField<::jint>("COLOR_WIDGET_BORDER"), //
		jField<::jint>("COLOR_WIDGET_DARK_SHADOW"), //
		jField<::jint>("COLOR_WIDGET_FOREGROUND"), //
		jField<::jint>("COLOR_WIDGET_HIGHLIGHT_SHADOW"), //
		jField<::jint>("COLOR_WIDGET_LIGHT_SHADOW"), //
		jField<::jint>("COLOR_WIDGET_NORMAL_SHADOW"), //
		jField<::jint>("COLOR_YELLOW"), //
		jField<::jint>("COMMAND"), //
		jField<::jint>("COMPOSITION_CHANGED"), //
		jField<::jint>("COMPOSITION_OFFSET"), //
		jField<::jint>("COMPOSITION_SELECTION"), //
		jField<::jint>("CONTROL"), //
		jField<::jchar>("CR"), //
		jField<::jint>("CTRL"), //
		jField<::jint>("CURSOR_APPSTARTING"), //
		jField<::jint>("CURSOR_ARROW"), //
		jField<::jint>("CURSOR_CROSS"), //
		jField<::jint>("CURSOR_HAND"), //
		jField<::jint>("CURSOR_HELP"), //
		jField<::jint>("CURSOR_IBEAM"), //
		jField<::jint>("CURSOR_NO"), //
		jField<::jint>("CURSOR_SIZEALL"), //
		jField<::jint>("CURSOR_SIZEE"), //
		jField<::jint>("CURSOR_SIZEN"), //
		jField<::jint>("CURSOR_SIZENE"), //
		jField<::jint>("CURSOR_SIZENESW"), //
		jField<::jint>("CURSOR_SIZENS"), //
		jField<::jint>("CURSOR_SIZENW"), //
		jField<::jint>("CURSOR_SIZENWSE"), //
		jField<::jint>("CURSOR_SIZES"), //
		jField<::jint>("CURSOR_SIZESE"), //
		jField<::jint>("CURSOR_SIZESW"), //
		jField<::jint>("CURSOR_SIZEW"), //
		jField<::jint>("CURSOR_SIZEWE"), //
		jField<::jint>("CURSOR_UPARROW"), //
		jField<::jint>("CURSOR_WAIT"), //
		jField<::jint>("Close"), //
		jField<::jint>("Collapse"), //
		jField<::jint>("DATE"), //
		jField<::jint>("DBCS"), //
		jField<::jint>("DEFAULT"), //
		jField<::jint>("DEFER"), //
		jField<::jchar>("DEL"), //
		jField<::jint>("DELIMITER_SELECTION"), //
		jField<::jint>("DIALOG_TRIM"), //
		jField<::jint>("DM_FILL_BACKGROUND"), //
		jField<::jint>("DM_FILL_NONE"), //
		jField<::jint>("DM_FILL_PREVIOUS"), //
		jField<::jint>("DM_UNSPECIFIED"), //
		jField<::jint>("DOUBLE_BUFFERED"), //
		jField<::jint>("DOWN"), //
		jField<::jint>("DRAG"), //
		jField<::jint>("DRAW_DELIMITER"), //
		jField<::jint>("DRAW_MNEMONIC"), //
		jField<::jint>("DRAW_TAB"), //
		jField<::jint>("DRAW_TRANSPARENT"), //
		jField<::jint>("DROP_DOWN"), //
		jField<::jint>("Deactivate"), //
		jField<::jint>("DefaultSelection"), //
		jField<::jint>("Deiconify"), //
		jField<::jint>("Dispose"), //
		jField<::jint>("DragDetect"), //
		jField<::jint>("EMBEDDED"), //
		jField<::jint>("END"), //
		jField<::jint>("ERROR"), //
		jField<::jint>("ERROR_CANNOT_BE_ZERO"), //
		jField<::jint>("ERROR_CANNOT_GET_COUNT"), //
		jField<::jint>("ERROR_CANNOT_GET_ENABLED"), //
		jField<::jint>("ERROR_CANNOT_GET_ITEM"), //
		jField<::jint>("ERROR_CANNOT_GET_ITEM_HEIGHT"), //
		jField<::jint>("ERROR_CANNOT_GET_SELECTION"), //
		jField<::jint>("ERROR_CANNOT_GET_TEXT"), //
		jField<::jint>("ERROR_CANNOT_INVERT_MATRIX"), //
		jField<::jint>("ERROR_CANNOT_SET_ENABLED"), //
		jField<::jint>("ERROR_CANNOT_SET_MENU"), //
		jField<::jint>("ERROR_CANNOT_SET_SELECTION"), //
		jField<::jint>("ERROR_CANNOT_SET_TEXT"), //
		jField<::jint>("ERROR_DEVICE_DISPOSED"), //
		jField<::jint>("ERROR_FAILED_EVALUATE"), //
		jField<::jint>("ERROR_FAILED_EXEC"), //
		jField<::jint>("ERROR_FAILED_LOAD_LIBRARY"), //
		jField<::jint>("ERROR_FUNCTION_DISPOSED"), //
		jField<::jint>("ERROR_GRAPHIC_DISPOSED"), //
		jField<::jint>("ERROR_INVALID_ARGUMENT"), //
		jField<::jint>("ERROR_INVALID_FONT"), //
		jField<::jint>("ERROR_INVALID_IMAGE"), //
		jField<::jint>("ERROR_INVALID_PARENT"), //
		jField<::jint>("ERROR_INVALID_RANGE"), //
		jField<::jint>("ERROR_INVALID_RETURN_VALUE"), //
		jField<::jint>("ERROR_INVALID_SUBCLASS"), //
		jField<::jint>("ERROR_IO"), //
		jField<::jint>("ERROR_ITEM_NOT_ADDED"), //
		jField<::jint>("ERROR_ITEM_NOT_REMOVED"), //
		jField<::jint>("ERROR_MENUITEM_NOT_CASCADE"), //
		jField<::jint>("ERROR_MENU_NOT_BAR"), //
		jField<::jint>("ERROR_MENU_NOT_DROP_DOWN"), //
		jField<::jint>("ERROR_MENU_NOT_POP_UP"), //
		jField<::jint>("ERROR_NOT_IMPLEMENTED"), //
		jField<::jint>("ERROR_NO_GRAPHICS_LIBRARY"), //
		jField<::jint>("ERROR_NO_HANDLES"), //
		jField<::jint>("ERROR_NO_MORE_CALLBACKS"), //
		jField<::jint>("ERROR_NULL_ARGUMENT"), //
		jField<::jint>("ERROR_THREAD_INVALID_ACCESS"), //
		jField<::jint>("ERROR_UNSPECIFIED"), //
		jField<::jint>("ERROR_UNSUPPORTED_DEPTH"), //
		jField<::jint>("ERROR_UNSUPPORTED_FORMAT"), //
		jField<::jint>("ERROR_WIDGET_DISPOSED"), //
		jField<::jchar>("ESC"), //
		jField<::jint>("EraseItem"), //
		jField<::jint>("Expand"), //
		jField<::jint>("F1"), //
		jField<::jint>("F10"), //
		jField<::jint>("F11"), //
		jField<::jint>("F12"), //
		jField<::jint>("F13"), //
		jField<::jint>("F14"), //
		jField<::jint>("F15"), //
		jField<::jint>("F16"), //
		jField<::jint>("F17"), //
		jField<::jint>("F18"), //
		jField<::jint>("F19"), //
		jField<::jint>("F2"), //
		jField<::jint>("F20"), //
		jField<::jint>("F3"), //
		jField<::jint>("F4"), //
		jField<::jint>("F5"), //
		jField<::jint>("F6"), //
		jField<::jint>("F7"), //
		jField<::jint>("F8"), //
		jField<::jint>("F9"), //
		jField<::jint>("FILL"), //
		jField<::jint>("FILL_EVEN_ODD"), //
		jField<::jint>("FILL_WINDING"), //
		jField<::jint>("FLAT"), //
		jField<::jint>("FLIP_TEXT_DIRECTION"), //
		jField<::jint>("FOCUSED"), //
		jField<::jint>("FOREGROUND"), //
		jField<::jint>("FULL_SELECTION"), //
		jField<::jint>("FocusIn"), //
		jField<::jint>("FocusOut"), //
		jField<::jint>("GESTURE_BEGIN"), //
		jField<::jint>("GESTURE_END"), //
		jField<::jint>("GESTURE_MAGNIFY"), //
		jField<::jint>("GESTURE_PAN"), //
		jField<::jint>("GESTURE_ROTATE"), //
		jField<::jint>("GESTURE_SWIPE"), //
		jField<::jint>("Gesture"), //
		jField<::jint>("HELP"), //
		jField<::jint>("HIDE_SELECTION"), //
		jField<::jint>("HIGH"), //
		jField<::jint>("HOME"), //
		jField<::jint>("HORIZONTAL"), //
		jField<::jint>("HOT"), //
		jField<::jint>("H_SCROLL"), //
		jField<::jint>("HardKeyDown"), //
		jField<::jint>("HardKeyUp"), //
		jField<::jint>("Help"), //
		jField<::jint>("Hide"), //
		jField<::jint>("ICON"), //
		jField<::jint>("ICON_CANCEL"), //
		jField<::jint>("ICON_ERROR"), //
		jField<::jint>("ICON_INFORMATION"), //
		jField<::jint>("ICON_QUESTION"), //
		jField<::jint>("ICON_SEARCH"), //
		jField<::jint>("ICON_WARNING"), //
		jField<::jint>("ICON_WORKING"), //
		jField<::jint>("ID_ABOUT"), //
		jField<::jint>("ID_HIDE"), //
		jField<::jint>("ID_HIDE_OTHERS"), //
		jField<::jint>("ID_PREFERENCES"), //
		jField<::jint>("ID_QUIT"), //
		jField<::jint>("ID_SHOW_ALL"), //
		jField<::jint>("IGNORE"), //
		jField<::jint>("IMAGE_BMP"), //
		jField<::jint>("IMAGE_BMP_RLE"), //
		jField<::jint>("IMAGE_COPY"), //
		jField<::jint>("IMAGE_DISABLE"), //
		jField<::jint>("IMAGE_GIF"), //
		jField<::jint>("IMAGE_GRAY"), //
		jField<::jint>("IMAGE_ICO"), //
		jField<::jint>("IMAGE_JPEG"), //
		jField<::jint>("IMAGE_OS2_BMP"), //
		jField<::jint>("IMAGE_PNG"), //
		jField<::jint>("IMAGE_TIFF"), //
		jField<::jint>("IMAGE_UNDEFINED"), //
		jField<::jint>("INDETERMINATE"), //
		jField<::jint>("INHERIT_DEFAULT"), //
		jField<::jint>("INHERIT_FORCE"), //
		jField<::jint>("INHERIT_NONE"), //
		jField<::jint>("INSERT"), //
		jField<::jint>("ITALIC"), //
		jField<::jint>("Iconify"), //
		jField<::jint>("ImeComposition"), //
		jField<::jint>("JOIN_BEVEL"), //
		jField<::jint>("JOIN_MITER"), //
		jField<::jint>("JOIN_ROUND"), //
		jField<::jint>("KEYCODE_BIT"), //
		jField<::jint>("KEYPAD"), //
		jField<::jint>("KEYPAD_0"), //
		jField<::jint>("KEYPAD_1"), //
		jField<::jint>("KEYPAD_2"), //
		jField<::jint>("KEYPAD_3"), //
		jField<::jint>("KEYPAD_4"), //
		jField<::jint>("KEYPAD_5"), //
		jField<::jint>("KEYPAD_6"), //
		jField<::jint>("KEYPAD_7"), //
		jField<::jint>("KEYPAD_8"), //
		jField<::jint>("KEYPAD_9"), //
		jField<::jint>("KEYPAD_ADD"), //
		jField<::jint>("KEYPAD_CR"), //
		jField<::jint>("KEYPAD_DECIMAL"), //
		jField<::jint>("KEYPAD_DIVIDE"), //
		jField<::jint>("KEYPAD_EQUAL"), //
		jField<::jint>("KEYPAD_MULTIPLY"), //
		jField<::jint>("KEYPAD_SUBTRACT"), //
		jField<::jint>("KEY_MASK"), //
		jField<::jint>("KeyDown"), //
		jField<::jint>("KeyUp"), //
		jField<::jint>("LAST_LINE_SELECTION"), //
		jField<::jint>("LEAD"), //
		jField<::jint>("LEFT"), //
		jField<::jint>("LEFT_TO_RIGHT"), //
		jField<::jchar>("LF"), //
		jField<::jint>("LINE_CUSTOM"), //
		jField<::jint>("LINE_DASH"), //
		jField<::jint>("LINE_DASHDOT"), //
		jField<::jint>("LINE_DASHDOTDOT"), //
		jField<::jint>("LINE_DOT"), //
		jField<::jint>("LINE_SOLID"), //
		jField<::jint>("LONG"), //
		jField<::jint>("LOW"), //
		jField<::jint>("MAX"), //
		jField<::jint>("MEDIUM"), //
		jField<::jint>("MENU"), //
		jField<::jint>("MENU_KEYBOARD"), //
		jField<::jint>("MENU_MOUSE"), //
		jField<::jint>("MIN"), //
		jField<::jint>("MIRRORED"), //
		jField<::jint>("MOD1"), //
		jField<::jint>("MOD2"), //
		jField<::jint>("MOD3"), //
		jField<::jint>("MOD4"), //
		jField<::jint>("MODELESS"), //
		jField<::jint>("MODIFIER_MASK"), //
		jField<::jint>("MOVEMENT_CHAR"), //
		jField<::jint>("MOVEMENT_CLUSTER"), //
		jField<::jint>("MOVEMENT_WORD"), //
		jField<::jint>("MOVEMENT_WORD_END"), //
		jField<::jint>("MOVEMENT_WORD_START"), //
		jField<::jint>("MOZILLA"), //
		jField<::jint>("MULTI"), //
		jField<::jint>("MeasureItem"), //
		jField<::jint>("MenuDetect"), //
		jField<::jint>("Modify"), //
		jField<::jint>("MouseDoubleClick"), //
		jField<::jint>("MouseDown"), //
		jField<::jint>("MouseEnter"), //
		jField<::jint>("MouseExit"), //
		jField<::jint>("MouseHorizontalWheel"), //
		jField<::jint>("MouseHover"), //
		jField<::jint>("MouseMove"), //
		jField<::jint>("MouseUp"), //
		jField<::jint>("MouseVerticalWheel"), //
		jField<::jint>("MouseWheel"), //
		jField<::jint>("Move"), //
		jField<::jint>("NATIVE"), //
		jField<::jint>("NO"), //
		jField<::jint>("NONE"), //
		jField<::jint>("NORMAL"), //
		jField<::jint>("NO_BACKGROUND"), //
		jField<::jint>("NO_FOCUS"), //
		jField<::jint>("NO_MERGE_PAINTS"), //
		jField<::jint>("NO_RADIO_GROUP"), //
		jField<::jint>("NO_REDRAW_RESIZE"), //
		jField<::jint>("NO_SCROLL"), //
		jField<::jint>("NO_TRIM"), //
		jField<::jint>("NULL"), //
		jField<::jint>("NUM_LOCK"), //
		jField<::jint>("None"), //
		jField<::jint>("OFF"), //
		jField<::jint>("OK"), //
		jField<::jint>("ON"), //
		jField<::jint>("ON_TOP"), //
		jField<::jint>("OPEN"), //
		jField<::jint>("OpenDocument"), //
		jField<::jint>("OrientationChange"), //
		jField<::jint>("PAGE_DOWN"), //
		jField<::jint>("PAGE_UP"), //
		jField<::jint>("PASSWORD"), //
		jField<::jint>("PATH_CLOSE"), //
		jField<::jint>("PATH_CUBIC_TO"), //
		jField<::jint>("PATH_LINE_TO"), //
		jField<::jint>("PATH_MOVE_TO"), //
		jField<::jint>("PATH_QUAD_TO"), //
		jField<::jint>("PAUSE"), //
		jField<::jint>("PAUSED"), //
		jField<::jint>("PHONETIC"), //
		jField<::jint>("POP_UP"), //
		jField<::jint>("PRIMARY_MODAL"), //
		jField<::jint>("PRINT_SCREEN"), //
		jField<::jint>("PUSH"), //
		jField<::jint>("Paint"), //
		jField<::jint>("PaintItem"), //
		jField<::jint>("PostEvent"), //
		jField<::jint>("PostExternalEventDispatch"), //
		jField<::jint>("PreEvent"), //
		jField<::jint>("PreExternalEventDispatch"), //
		jField<::jint>("RADIO"), //
		jField<::jint>("READ_ONLY"), //
		jField<::jint>("RESIZE"), //
		jField<::jint>("RETRY"), //
		jField<::jint>("RIGHT"), //
		jField<::jint>("RIGHT_TO_LEFT"), //
		jField<::jint>("ROMAN"), //
		jField<::jint>("Resize"), //
		jField<::jint>("SAVE"), //
		jField<::jint>("SCROLLBAR_OVERLAY"), //
		jField<::jint>("SCROLL_LINE"), //
		jField<::jint>("SCROLL_LOCK"), //
		jField<::jint>("SCROLL_PAGE"), //
		jField<::jint>("SEARCH"), //
		jField<::jint>("SELECTED"), //
		jField<::jint>("SEPARATOR"), //
		jField<::jint>("SEPARATOR_FILL"), //
		jField<::jint>("SHADOW_ETCHED_IN"), //
		jField<::jint>("SHADOW_ETCHED_OUT"), //
		jField<::jint>("SHADOW_IN"), //
		jField<::jint>("SHADOW_NONE"), //
		jField<::jint>("SHADOW_OUT"), //
		jField<::jint>("SHEET"), //
		jField<::jint>("SHELL_TRIM"), //
		jField<::jint>("SHIFT"), //
		jField<::jint>("SHORT"), //
		jField<::jint>("SIMPLE"), //
		jField<::jint>("SINGLE"), //
		jField<::java::lang::String>("SKIN_CLASS"), //
		jField<::java::lang::String>("SKIN_ID"), //
		jField<::jint>("SMOOTH"), //
		jField<::jchar>("SPACE"), //
		jField<::jint>("SYSTEM_MODAL"), //
		jField<::jint>("Segments"), //
		jField<::jint>("Selection"), //
		jField<::jint>("SetData"), //
		jField<::jint>("Settings"), //
		jField<::jint>("Show"), //
		jField<::jint>("Skin"), //
		jField<::jchar>("TAB"), //
		jField<::jint>("TIME"), //
		jField<::jint>("TITLE"), //
		jField<::jint>("TOGGLE"), //
		jField<::jint>("TOOL"), //
		jField<::jint>("TOP"), //
		jField<::jint>("TOUCHSTATE_DOWN"), //
		jField<::jint>("TOUCHSTATE_MOVE"), //
		jField<::jint>("TOUCHSTATE_UP"), //
		jField<::jint>("TRAIL"), //
		jField<::jint>("TRANSPARENCY_ALPHA"), //
		jField<::jint>("TRANSPARENCY_MASK"), //
		jField<::jint>("TRANSPARENCY_NONE"), //
		jField<::jint>("TRANSPARENCY_PIXEL"), //
		jField<::jint>("TRANSPARENT"), //
		jField<::jint>("TRAVERSE_ARROW_NEXT"), //
		jField<::jint>("TRAVERSE_ARROW_PREVIOUS"), //
		jField<::jint>("TRAVERSE_ESCAPE"), //
		jField<::jint>("TRAVERSE_MNEMONIC"), //
		jField<::jint>("TRAVERSE_NONE"), //
		jField<::jint>("TRAVERSE_PAGE_NEXT"), //
		jField<::jint>("TRAVERSE_PAGE_PREVIOUS"), //
		jField<::jint>("TRAVERSE_RETURN"), //
		jField<::jint>("TRAVERSE_TAB_NEXT"), //
		jField<::jint>("TRAVERSE_TAB_PREVIOUS"), //
		jField<::jint>("Touch"), //
		jField<::jint>("Traverse"), //
		jField<::jint>("UNDERLINE_DOUBLE"), //
		jField<::jint>("UNDERLINE_ERROR"), //
		jField<::jint>("UNDERLINE_LINK"), //
		jField<::jint>("UNDERLINE_SINGLE"), //
		jField<::jint>("UNDERLINE_SQUIGGLE"), //
		jField<::jint>("UP"), //
		jField<::jint>("VERTICAL"), //
		jField<::jint>("VIRTUAL"), //
		jField<::jint>("V_SCROLL"), //
		jField<::jint>("Verify"), //
		jField<::jint>("WEBKIT"), //
		jField<::jint>("WRAP"), //
		jField<::jint>("YES"), //
	};

	template<typename F = ::jint>
	static auto ABORT() {
		static_assert(field_signatures[jField<F>("ABORT")] != -1);
		return sat<F>("ABORT");
	}

	template<typename F = ::jint>
	static auto ALL() {
		static_assert(field_signatures[jField<F>("ALL")] != -1);
		return sat<F>("ALL");
	}

	template<typename F = ::jint>
	static auto ALPHA() {
		static_assert(field_signatures[jField<F>("ALPHA")] != -1);
		return sat<F>("ALPHA");
	}

	template<typename F = ::jint>
	static auto ALT() {
		static_assert(field_signatures[jField<F>("ALT")] != -1);
		return sat<F>("ALT");
	}

	template<typename F = ::jint>
	static auto APPLICATION_MODAL() {
		static_assert(field_signatures[jField<F>("APPLICATION_MODAL")] != -1);
		return sat<F>("APPLICATION_MODAL");
	}

	template<typename F = ::jint>
	static auto ARROW() {
		static_assert(field_signatures[jField<F>("ARROW")] != -1);
		return sat<F>("ARROW");
	}

	template<typename F = ::jint>
	static auto ARROW_DOWN() {
		static_assert(field_signatures[jField<F>("ARROW_DOWN")] != -1);
		return sat<F>("ARROW_DOWN");
	}

	template<typename F = ::jint>
	static auto ARROW_LEFT() {
		static_assert(field_signatures[jField<F>("ARROW_LEFT")] != -1);
		return sat<F>("ARROW_LEFT");
	}

	template<typename F = ::jint>
	static auto ARROW_RIGHT() {
		static_assert(field_signatures[jField<F>("ARROW_RIGHT")] != -1);
		return sat<F>("ARROW_RIGHT");
	}

	template<typename F = ::jint>
	static auto ARROW_UP() {
		static_assert(field_signatures[jField<F>("ARROW_UP")] != -1);
		return sat<F>("ARROW_UP");
	}

	template<typename F = ::jint>
	static auto Activate() {
		static_assert(field_signatures[jField<F>("Activate")] != -1);
		return sat<F>("Activate");
	}

	template<typename F = ::jint>
	static auto Arm() {
		static_assert(field_signatures[jField<F>("Arm")] != -1);
		return sat<F>("Arm");
	}

	template<typename F = ::jint>
	static auto BACKGROUND() {
		static_assert(field_signatures[jField<F>("BACKGROUND")] != -1);
		return sat<F>("BACKGROUND");
	}

	template<typename F = ::jint>
	static auto BALLOON() {
		static_assert(field_signatures[jField<F>("BALLOON")] != -1);
		return sat<F>("BALLOON");
	}

	template<typename F = ::jint>
	static auto BAR() {
		static_assert(field_signatures[jField<F>("BAR")] != -1);
		return sat<F>("BAR");
	}

	template<typename F = ::jint>
	static auto BEGINNING() {
		static_assert(field_signatures[jField<F>("BEGINNING")] != -1);
		return sat<F>("BEGINNING");
	}

	template<typename F = ::jint>
	static auto BITMAP() {
		static_assert(field_signatures[jField<F>("BITMAP")] != -1);
		return sat<F>("BITMAP");
	}

	template<typename F = ::jint>
	static auto BOLD() {
		static_assert(field_signatures[jField<F>("BOLD")] != -1);
		return sat<F>("BOLD");
	}

	template<typename F = ::jint>
	static auto BORDER() {
		static_assert(field_signatures[jField<F>("BORDER")] != -1);
		return sat<F>("BORDER");
	}

	template<typename F = ::jint>
	static auto BORDER_DASH() {
		static_assert(field_signatures[jField<F>("BORDER_DASH")] != -1);
		return sat<F>("BORDER_DASH");
	}

	template<typename F = ::jint>
	static auto BORDER_DOT() {
		static_assert(field_signatures[jField<F>("BORDER_DOT")] != -1);
		return sat<F>("BORDER_DOT");
	}

	template<typename F = ::jint>
	static auto BORDER_SOLID() {
		static_assert(field_signatures[jField<F>("BORDER_SOLID")] != -1);
		return sat<F>("BORDER_SOLID");
	}

	template<typename F = ::jint>
	static auto BOTTOM() {
		static_assert(field_signatures[jField<F>("BOTTOM")] != -1);
		return sat<F>("BOTTOM");
	}

	template<typename F = ::jint>
	static auto BREAK() {
		static_assert(field_signatures[jField<F>("BREAK")] != -1);
		return sat<F>("BREAK");
	}

	template<typename F = ::jchar>
	static auto BS() {
		static_assert(field_signatures[jField<F>("BS")] != -1);
		return sat<F>("BS");
	}

	template<typename F = ::jint>
	static auto BUTTON1() {
		static_assert(field_signatures[jField<F>("BUTTON1")] != -1);
		return sat<F>("BUTTON1");
	}

	template<typename F = ::jint>
	static auto BUTTON2() {
		static_assert(field_signatures[jField<F>("BUTTON2")] != -1);
		return sat<F>("BUTTON2");
	}

	template<typename F = ::jint>
	static auto BUTTON3() {
		static_assert(field_signatures[jField<F>("BUTTON3")] != -1);
		return sat<F>("BUTTON3");
	}

	template<typename F = ::jint>
	static auto BUTTON4() {
		static_assert(field_signatures[jField<F>("BUTTON4")] != -1);
		return sat<F>("BUTTON4");
	}

	template<typename F = ::jint>
	static auto BUTTON5() {
		static_assert(field_signatures[jField<F>("BUTTON5")] != -1);
		return sat<F>("BUTTON5");
	}

	template<typename F = ::jint>
	static auto BUTTON_MASK() {
		static_assert(field_signatures[jField<F>("BUTTON_MASK")] != -1);
		return sat<F>("BUTTON_MASK");
	}

	template<typename F = ::jint>
	static auto CALENDAR() {
		static_assert(field_signatures[jField<F>("CALENDAR")] != -1);
		return sat<F>("CALENDAR");
	}

	template<typename F = ::jint>
	static auto CANCEL() {
		static_assert(field_signatures[jField<F>("CANCEL")] != -1);
		return sat<F>("CANCEL");
	}

	template<typename F = ::jint>
	static auto CAPS_LOCK() {
		static_assert(field_signatures[jField<F>("CAPS_LOCK")] != -1);
		return sat<F>("CAPS_LOCK");
	}

	template<typename F = ::jint>
	static auto CAP_FLAT() {
		static_assert(field_signatures[jField<F>("CAP_FLAT")] != -1);
		return sat<F>("CAP_FLAT");
	}

	template<typename F = ::jint>
	static auto CAP_ROUND() {
		static_assert(field_signatures[jField<F>("CAP_ROUND")] != -1);
		return sat<F>("CAP_ROUND");
	}

	template<typename F = ::jint>
	static auto CAP_SQUARE() {
		static_assert(field_signatures[jField<F>("CAP_SQUARE")] != -1);
		return sat<F>("CAP_SQUARE");
	}

	template<typename F = ::jint>
	static auto CASCADE() {
		static_assert(field_signatures[jField<F>("CASCADE")] != -1);
		return sat<F>("CASCADE");
	}

	template<typename F = ::jint>
	static auto CENTER() {
		static_assert(field_signatures[jField<F>("CENTER")] != -1);
		return sat<F>("CENTER");
	}

	template<typename F = ::jint>
	static auto CHANGED() {
		static_assert(field_signatures[jField<F>("CHANGED")] != -1);
		return sat<F>("CHANGED");
	}

	template<typename F = ::jint>
	static auto CHECK() {
		static_assert(field_signatures[jField<F>("CHECK")] != -1);
		return sat<F>("CHECK");
	}

	template<typename F = ::jint>
	static auto CLIP_CHILDREN() {
		static_assert(field_signatures[jField<F>("CLIP_CHILDREN")] != -1);
		return sat<F>("CLIP_CHILDREN");
	}

	template<typename F = ::jint>
	static auto CLIP_SIBLINGS() {
		static_assert(field_signatures[jField<F>("CLIP_SIBLINGS")] != -1);
		return sat<F>("CLIP_SIBLINGS");
	}

	template<typename F = ::jint>
	static auto CLOSE() {
		static_assert(field_signatures[jField<F>("CLOSE")] != -1);
		return sat<F>("CLOSE");
	}

	template<typename F = ::jint>
	static auto COLOR_BLACK() {
		static_assert(field_signatures[jField<F>("COLOR_BLACK")] != -1);
		return sat<F>("COLOR_BLACK");
	}

	template<typename F = ::jint>
	static auto COLOR_BLUE() {
		static_assert(field_signatures[jField<F>("COLOR_BLUE")] != -1);
		return sat<F>("COLOR_BLUE");
	}

	template<typename F = ::jint>
	static auto COLOR_CYAN() {
		static_assert(field_signatures[jField<F>("COLOR_CYAN")] != -1);
		return sat<F>("COLOR_CYAN");
	}

	template<typename F = ::jint>
	static auto COLOR_DARK_BLUE() {
		static_assert(field_signatures[jField<F>("COLOR_DARK_BLUE")] != -1);
		return sat<F>("COLOR_DARK_BLUE");
	}

	template<typename F = ::jint>
	static auto COLOR_DARK_CYAN() {
		static_assert(field_signatures[jField<F>("COLOR_DARK_CYAN")] != -1);
		return sat<F>("COLOR_DARK_CYAN");
	}

	template<typename F = ::jint>
	static auto COLOR_DARK_GRAY() {
		static_assert(field_signatures[jField<F>("COLOR_DARK_GRAY")] != -1);
		return sat<F>("COLOR_DARK_GRAY");
	}

	template<typename F = ::jint>
	static auto COLOR_DARK_GREEN() {
		static_assert(field_signatures[jField<F>("COLOR_DARK_GREEN")] != -1);
		return sat<F>("COLOR_DARK_GREEN");
	}

	template<typename F = ::jint>
	static auto COLOR_DARK_MAGENTA() {
		static_assert(field_signatures[jField<F>("COLOR_DARK_MAGENTA")] != -1);
		return sat<F>("COLOR_DARK_MAGENTA");
	}

	template<typename F = ::jint>
	static auto COLOR_DARK_RED() {
		static_assert(field_signatures[jField<F>("COLOR_DARK_RED")] != -1);
		return sat<F>("COLOR_DARK_RED");
	}

	template<typename F = ::jint>
	static auto COLOR_DARK_YELLOW() {
		static_assert(field_signatures[jField<F>("COLOR_DARK_YELLOW")] != -1);
		return sat<F>("COLOR_DARK_YELLOW");
	}

	template<typename F = ::jint>
	static auto COLOR_GRAY() {
		static_assert(field_signatures[jField<F>("COLOR_GRAY")] != -1);
		return sat<F>("COLOR_GRAY");
	}

	template<typename F = ::jint>
	static auto COLOR_GREEN() {
		static_assert(field_signatures[jField<F>("COLOR_GREEN")] != -1);
		return sat<F>("COLOR_GREEN");
	}

	template<typename F = ::jint>
	static auto COLOR_INFO_BACKGROUND() {
		static_assert(field_signatures[jField<F>("COLOR_INFO_BACKGROUND")] != -1);
		return sat<F>("COLOR_INFO_BACKGROUND");
	}

	template<typename F = ::jint>
	static auto COLOR_INFO_FOREGROUND() {
		static_assert(field_signatures[jField<F>("COLOR_INFO_FOREGROUND")] != -1);
		return sat<F>("COLOR_INFO_FOREGROUND");
	}

	template<typename F = ::jint>
	static auto COLOR_LINK_FOREGROUND() {
		static_assert(field_signatures[jField<F>("COLOR_LINK_FOREGROUND")] != -1);
		return sat<F>("COLOR_LINK_FOREGROUND");
	}

	template<typename F = ::jint>
	static auto COLOR_LIST_BACKGROUND() {
		static_assert(field_signatures[jField<F>("COLOR_LIST_BACKGROUND")] != -1);
		return sat<F>("COLOR_LIST_BACKGROUND");
	}

	template<typename F = ::jint>
	static auto COLOR_LIST_FOREGROUND() {
		static_assert(field_signatures[jField<F>("COLOR_LIST_FOREGROUND")] != -1);
		return sat<F>("COLOR_LIST_FOREGROUND");
	}

	template<typename F = ::jint>
	static auto COLOR_LIST_SELECTION() {
		static_assert(field_signatures[jField<F>("COLOR_LIST_SELECTION")] != -1);
		return sat<F>("COLOR_LIST_SELECTION");
	}

	template<typename F = ::jint>
	static auto COLOR_LIST_SELECTION_TEXT() {
		static_assert(field_signatures[jField<F>("COLOR_LIST_SELECTION_TEXT")] != -1);
		return sat<F>("COLOR_LIST_SELECTION_TEXT");
	}

	template<typename F = ::jint>
	static auto COLOR_MAGENTA() {
		static_assert(field_signatures[jField<F>("COLOR_MAGENTA")] != -1);
		return sat<F>("COLOR_MAGENTA");
	}

	template<typename F = ::jint>
	static auto COLOR_RED() {
		static_assert(field_signatures[jField<F>("COLOR_RED")] != -1);
		return sat<F>("COLOR_RED");
	}

	template<typename F = ::jint>
	static auto COLOR_TITLE_BACKGROUND() {
		static_assert(field_signatures[jField<F>("COLOR_TITLE_BACKGROUND")] != -1);
		return sat<F>("COLOR_TITLE_BACKGROUND");
	}

	template<typename F = ::jint>
	static auto COLOR_TITLE_BACKGROUND_GRADIENT() {
		static_assert(field_signatures[jField<F>("COLOR_TITLE_BACKGROUND_GRADIENT")] != -1);
		return sat<F>("COLOR_TITLE_BACKGROUND_GRADIENT");
	}

	template<typename F = ::jint>
	static auto COLOR_TITLE_FOREGROUND() {
		static_assert(field_signatures[jField<F>("COLOR_TITLE_FOREGROUND")] != -1);
		return sat<F>("COLOR_TITLE_FOREGROUND");
	}

	template<typename F = ::jint>
	static auto COLOR_TITLE_INACTIVE_BACKGROUND() {
		static_assert(field_signatures[jField<F>("COLOR_TITLE_INACTIVE_BACKGROUND")] != -1);
		return sat<F>("COLOR_TITLE_INACTIVE_BACKGROUND");
	}

	template<typename F = ::jint>
	static auto COLOR_TITLE_INACTIVE_BACKGROUND_GRADIENT() {
		static_assert(field_signatures[jField<F>("COLOR_TITLE_INACTIVE_BACKGROUND_GRADIENT")] != -1);
		return sat<F>("COLOR_TITLE_INACTIVE_BACKGROUND_GRADIENT");
	}

	template<typename F = ::jint>
	static auto COLOR_TITLE_INACTIVE_FOREGROUND() {
		static_assert(field_signatures[jField<F>("COLOR_TITLE_INACTIVE_FOREGROUND")] != -1);
		return sat<F>("COLOR_TITLE_INACTIVE_FOREGROUND");
	}

	template<typename F = ::jint>
	static auto COLOR_TRANSPARENT() {
		static_assert(field_signatures[jField<F>("COLOR_TRANSPARENT")] != -1);
		return sat<F>("COLOR_TRANSPARENT");
	}

	template<typename F = ::jint>
	static auto COLOR_WHITE() {
		static_assert(field_signatures[jField<F>("COLOR_WHITE")] != -1);
		return sat<F>("COLOR_WHITE");
	}

	template<typename F = ::jint>
	static auto COLOR_WIDGET_BACKGROUND() {
		static_assert(field_signatures[jField<F>("COLOR_WIDGET_BACKGROUND")] != -1);
		return sat<F>("COLOR_WIDGET_BACKGROUND");
	}

	template<typename F = ::jint>
	static auto COLOR_WIDGET_BORDER() {
		static_assert(field_signatures[jField<F>("COLOR_WIDGET_BORDER")] != -1);
		return sat<F>("COLOR_WIDGET_BORDER");
	}

	template<typename F = ::jint>
	static auto COLOR_WIDGET_DARK_SHADOW() {
		static_assert(field_signatures[jField<F>("COLOR_WIDGET_DARK_SHADOW")] != -1);
		return sat<F>("COLOR_WIDGET_DARK_SHADOW");
	}

	template<typename F = ::jint>
	static auto COLOR_WIDGET_FOREGROUND() {
		static_assert(field_signatures[jField<F>("COLOR_WIDGET_FOREGROUND")] != -1);
		return sat<F>("COLOR_WIDGET_FOREGROUND");
	}

	template<typename F = ::jint>
	static auto COLOR_WIDGET_HIGHLIGHT_SHADOW() {
		static_assert(field_signatures[jField<F>("COLOR_WIDGET_HIGHLIGHT_SHADOW")] != -1);
		return sat<F>("COLOR_WIDGET_HIGHLIGHT_SHADOW");
	}

	template<typename F = ::jint>
	static auto COLOR_WIDGET_LIGHT_SHADOW() {
		static_assert(field_signatures[jField<F>("COLOR_WIDGET_LIGHT_SHADOW")] != -1);
		return sat<F>("COLOR_WIDGET_LIGHT_SHADOW");
	}

	template<typename F = ::jint>
	static auto COLOR_WIDGET_NORMAL_SHADOW() {
		static_assert(field_signatures[jField<F>("COLOR_WIDGET_NORMAL_SHADOW")] != -1);
		return sat<F>("COLOR_WIDGET_NORMAL_SHADOW");
	}

	template<typename F = ::jint>
	static auto COLOR_YELLOW() {
		static_assert(field_signatures[jField<F>("COLOR_YELLOW")] != -1);
		return sat<F>("COLOR_YELLOW");
	}

	template<typename F = ::jint>
	static auto COMMAND() {
		static_assert(field_signatures[jField<F>("COMMAND")] != -1);
		return sat<F>("COMMAND");
	}

	template<typename F = ::jint>
	static auto COMPOSITION_CHANGED() {
		static_assert(field_signatures[jField<F>("COMPOSITION_CHANGED")] != -1);
		return sat<F>("COMPOSITION_CHANGED");
	}

	template<typename F = ::jint>
	static auto COMPOSITION_OFFSET() {
		static_assert(field_signatures[jField<F>("COMPOSITION_OFFSET")] != -1);
		return sat<F>("COMPOSITION_OFFSET");
	}

	template<typename F = ::jint>
	static auto COMPOSITION_SELECTION() {
		static_assert(field_signatures[jField<F>("COMPOSITION_SELECTION")] != -1);
		return sat<F>("COMPOSITION_SELECTION");
	}

	template<typename F = ::jint>
	static auto CONTROL() {
		static_assert(field_signatures[jField<F>("CONTROL")] != -1);
		return sat<F>("CONTROL");
	}

	template<typename F = ::jchar>
	static auto CR() {
		static_assert(field_signatures[jField<F>("CR")] != -1);
		return sat<F>("CR");
	}

	template<typename F = ::jint>
	static auto CTRL() {
		static_assert(field_signatures[jField<F>("CTRL")] != -1);
		return sat<F>("CTRL");
	}

	template<typename F = ::jint>
	static auto CURSOR_APPSTARTING() {
		static_assert(field_signatures[jField<F>("CURSOR_APPSTARTING")] != -1);
		return sat<F>("CURSOR_APPSTARTING");
	}

	template<typename F = ::jint>
	static auto CURSOR_ARROW() {
		static_assert(field_signatures[jField<F>("CURSOR_ARROW")] != -1);
		return sat<F>("CURSOR_ARROW");
	}

	template<typename F = ::jint>
	static auto CURSOR_CROSS() {
		static_assert(field_signatures[jField<F>("CURSOR_CROSS")] != -1);
		return sat<F>("CURSOR_CROSS");
	}

	template<typename F = ::jint>
	static auto CURSOR_HAND() {
		static_assert(field_signatures[jField<F>("CURSOR_HAND")] != -1);
		return sat<F>("CURSOR_HAND");
	}

	template<typename F = ::jint>
	static auto CURSOR_HELP() {
		static_assert(field_signatures[jField<F>("CURSOR_HELP")] != -1);
		return sat<F>("CURSOR_HELP");
	}

	template<typename F = ::jint>
	static auto CURSOR_IBEAM() {
		static_assert(field_signatures[jField<F>("CURSOR_IBEAM")] != -1);
		return sat<F>("CURSOR_IBEAM");
	}

	template<typename F = ::jint>
	static auto CURSOR_NO() {
		static_assert(field_signatures[jField<F>("CURSOR_NO")] != -1);
		return sat<F>("CURSOR_NO");
	}

	template<typename F = ::jint>
	static auto CURSOR_SIZEALL() {
		static_assert(field_signatures[jField<F>("CURSOR_SIZEALL")] != -1);
		return sat<F>("CURSOR_SIZEALL");
	}

	template<typename F = ::jint>
	static auto CURSOR_SIZEE() {
		static_assert(field_signatures[jField<F>("CURSOR_SIZEE")] != -1);
		return sat<F>("CURSOR_SIZEE");
	}

	template<typename F = ::jint>
	static auto CURSOR_SIZEN() {
		static_assert(field_signatures[jField<F>("CURSOR_SIZEN")] != -1);
		return sat<F>("CURSOR_SIZEN");
	}

	template<typename F = ::jint>
	static auto CURSOR_SIZENE() {
		static_assert(field_signatures[jField<F>("CURSOR_SIZENE")] != -1);
		return sat<F>("CURSOR_SIZENE");
	}

	template<typename F = ::jint>
	static auto CURSOR_SIZENESW() {
		static_assert(field_signatures[jField<F>("CURSOR_SIZENESW")] != -1);
		return sat<F>("CURSOR_SIZENESW");
	}

	template<typename F = ::jint>
	static auto CURSOR_SIZENS() {
		static_assert(field_signatures[jField<F>("CURSOR_SIZENS")] != -1);
		return sat<F>("CURSOR_SIZENS");
	}

	template<typename F = ::jint>
	static auto CURSOR_SIZENW() {
		static_assert(field_signatures[jField<F>("CURSOR_SIZENW")] != -1);
		return sat<F>("CURSOR_SIZENW");
	}

	template<typename F = ::jint>
	static auto CURSOR_SIZENWSE() {
		static_assert(field_signatures[jField<F>("CURSOR_SIZENWSE")] != -1);
		return sat<F>("CURSOR_SIZENWSE");
	}

	template<typename F = ::jint>
	static auto CURSOR_SIZES() {
		static_assert(field_signatures[jField<F>("CURSOR_SIZES")] != -1);
		return sat<F>("CURSOR_SIZES");
	}

	template<typename F = ::jint>
	static auto CURSOR_SIZESE() {
		static_assert(field_signatures[jField<F>("CURSOR_SIZESE")] != -1);
		return sat<F>("CURSOR_SIZESE");
	}

	template<typename F = ::jint>
	static auto CURSOR_SIZESW() {
		static_assert(field_signatures[jField<F>("CURSOR_SIZESW")] != -1);
		return sat<F>("CURSOR_SIZESW");
	}

	template<typename F = ::jint>
	static auto CURSOR_SIZEW() {
		static_assert(field_signatures[jField<F>("CURSOR_SIZEW")] != -1);
		return sat<F>("CURSOR_SIZEW");
	}

	template<typename F = ::jint>
	static auto CURSOR_SIZEWE() {
		static_assert(field_signatures[jField<F>("CURSOR_SIZEWE")] != -1);
		return sat<F>("CURSOR_SIZEWE");
	}

	template<typename F = ::jint>
	static auto CURSOR_UPARROW() {
		static_assert(field_signatures[jField<F>("CURSOR_UPARROW")] != -1);
		return sat<F>("CURSOR_UPARROW");
	}

	template<typename F = ::jint>
	static auto CURSOR_WAIT() {
		static_assert(field_signatures[jField<F>("CURSOR_WAIT")] != -1);
		return sat<F>("CURSOR_WAIT");
	}

	template<typename F = ::jint>
	static auto Close() {
		static_assert(field_signatures[jField<F>("Close")] != -1);
		return sat<F>("Close");
	}

	template<typename F = ::jint>
	static auto Collapse() {
		static_assert(field_signatures[jField<F>("Collapse")] != -1);
		return sat<F>("Collapse");
	}

	template<typename F = ::jint>
	static auto DATE() {
		static_assert(field_signatures[jField<F>("DATE")] != -1);
		return sat<F>("DATE");
	}

	template<typename F = ::jint>
	static auto DBCS() {
		static_assert(field_signatures[jField<F>("DBCS")] != -1);
		return sat<F>("DBCS");
	}

	template<typename F = ::jint>
	static auto DEFAULT() {
		static_assert(field_signatures[jField<F>("DEFAULT")] != -1);
		return sat<F>("DEFAULT");
	}

	template<typename F = ::jint>
	static auto DEFER() {
		static_assert(field_signatures[jField<F>("DEFER")] != -1);
		return sat<F>("DEFER");
	}

	template<typename F = ::jchar>
	static auto DEL() {
		static_assert(field_signatures[jField<F>("DEL")] != -1);
		return sat<F>("DEL");
	}

	template<typename F = ::jint>
	static auto DELIMITER_SELECTION() {
		static_assert(field_signatures[jField<F>("DELIMITER_SELECTION")] != -1);
		return sat<F>("DELIMITER_SELECTION");
	}

	template<typename F = ::jint>
	static auto DIALOG_TRIM() {
		static_assert(field_signatures[jField<F>("DIALOG_TRIM")] != -1);
		return sat<F>("DIALOG_TRIM");
	}

	template<typename F = ::jint>
	static auto DM_FILL_BACKGROUND() {
		static_assert(field_signatures[jField<F>("DM_FILL_BACKGROUND")] != -1);
		return sat<F>("DM_FILL_BACKGROUND");
	}

	template<typename F = ::jint>
	static auto DM_FILL_NONE() {
		static_assert(field_signatures[jField<F>("DM_FILL_NONE")] != -1);
		return sat<F>("DM_FILL_NONE");
	}

	template<typename F = ::jint>
	static auto DM_FILL_PREVIOUS() {
		static_assert(field_signatures[jField<F>("DM_FILL_PREVIOUS")] != -1);
		return sat<F>("DM_FILL_PREVIOUS");
	}

	template<typename F = ::jint>
	static auto DM_UNSPECIFIED() {
		static_assert(field_signatures[jField<F>("DM_UNSPECIFIED")] != -1);
		return sat<F>("DM_UNSPECIFIED");
	}

	template<typename F = ::jint>
	static auto DOUBLE_BUFFERED() {
		static_assert(field_signatures[jField<F>("DOUBLE_BUFFERED")] != -1);
		return sat<F>("DOUBLE_BUFFERED");
	}

	template<typename F = ::jint>
	static auto DOWN() {
		static_assert(field_signatures[jField<F>("DOWN")] != -1);
		return sat<F>("DOWN");
	}

	template<typename F = ::jint>
	static auto DRAG() {
		static_assert(field_signatures[jField<F>("DRAG")] != -1);
		return sat<F>("DRAG");
	}

	template<typename F = ::jint>
	static auto DRAW_DELIMITER() {
		static_assert(field_signatures[jField<F>("DRAW_DELIMITER")] != -1);
		return sat<F>("DRAW_DELIMITER");
	}

	template<typename F = ::jint>
	static auto DRAW_MNEMONIC() {
		static_assert(field_signatures[jField<F>("DRAW_MNEMONIC")] != -1);
		return sat<F>("DRAW_MNEMONIC");
	}

	template<typename F = ::jint>
	static auto DRAW_TAB() {
		static_assert(field_signatures[jField<F>("DRAW_TAB")] != -1);
		return sat<F>("DRAW_TAB");
	}

	template<typename F = ::jint>
	static auto DRAW_TRANSPARENT() {
		static_assert(field_signatures[jField<F>("DRAW_TRANSPARENT")] != -1);
		return sat<F>("DRAW_TRANSPARENT");
	}

	template<typename F = ::jint>
	static auto DROP_DOWN() {
		static_assert(field_signatures[jField<F>("DROP_DOWN")] != -1);
		return sat<F>("DROP_DOWN");
	}

	template<typename F = ::jint>
	static auto Deactivate() {
		static_assert(field_signatures[jField<F>("Deactivate")] != -1);
		return sat<F>("Deactivate");
	}

	template<typename F = ::jint>
	static auto DefaultSelection() {
		static_assert(field_signatures[jField<F>("DefaultSelection")] != -1);
		return sat<F>("DefaultSelection");
	}

	template<typename F = ::jint>
	static auto Deiconify() {
		static_assert(field_signatures[jField<F>("Deiconify")] != -1);
		return sat<F>("Deiconify");
	}

	template<typename F = ::jint>
	static auto Dispose() {
		static_assert(field_signatures[jField<F>("Dispose")] != -1);
		return sat<F>("Dispose");
	}

	template<typename F = ::jint>
	static auto DragDetect() {
		static_assert(field_signatures[jField<F>("DragDetect")] != -1);
		return sat<F>("DragDetect");
	}

	template<typename F = ::jint>
	static auto EMBEDDED() {
		static_assert(field_signatures[jField<F>("EMBEDDED")] != -1);
		return sat<F>("EMBEDDED");
	}

	template<typename F = ::jint>
	static auto END() {
		static_assert(field_signatures[jField<F>("END")] != -1);
		return sat<F>("END");
	}

	template<typename F = ::jint>
	static auto ERROR() {
		static_assert(field_signatures[jField<F>("ERROR")] != -1);
		return sat<F>("ERROR");
	}

	template<typename F = ::jint>
	static auto ERROR_CANNOT_BE_ZERO() {
		static_assert(field_signatures[jField<F>("ERROR_CANNOT_BE_ZERO")] != -1);
		return sat<F>("ERROR_CANNOT_BE_ZERO");
	}

	template<typename F = ::jint>
	static auto ERROR_CANNOT_GET_COUNT() {
		static_assert(field_signatures[jField<F>("ERROR_CANNOT_GET_COUNT")] != -1);
		return sat<F>("ERROR_CANNOT_GET_COUNT");
	}

	template<typename F = ::jint>
	static auto ERROR_CANNOT_GET_ENABLED() {
		static_assert(field_signatures[jField<F>("ERROR_CANNOT_GET_ENABLED")] != -1);
		return sat<F>("ERROR_CANNOT_GET_ENABLED");
	}

	template<typename F = ::jint>
	static auto ERROR_CANNOT_GET_ITEM() {
		static_assert(field_signatures[jField<F>("ERROR_CANNOT_GET_ITEM")] != -1);
		return sat<F>("ERROR_CANNOT_GET_ITEM");
	}

	template<typename F = ::jint>
	static auto ERROR_CANNOT_GET_ITEM_HEIGHT() {
		static_assert(field_signatures[jField<F>("ERROR_CANNOT_GET_ITEM_HEIGHT")] != -1);
		return sat<F>("ERROR_CANNOT_GET_ITEM_HEIGHT");
	}

	template<typename F = ::jint>
	static auto ERROR_CANNOT_GET_SELECTION() {
		static_assert(field_signatures[jField<F>("ERROR_CANNOT_GET_SELECTION")] != -1);
		return sat<F>("ERROR_CANNOT_GET_SELECTION");
	}

	template<typename F = ::jint>
	static auto ERROR_CANNOT_GET_TEXT() {
		static_assert(field_signatures[jField<F>("ERROR_CANNOT_GET_TEXT")] != -1);
		return sat<F>("ERROR_CANNOT_GET_TEXT");
	}

	template<typename F = ::jint>
	static auto ERROR_CANNOT_INVERT_MATRIX() {
		static_assert(field_signatures[jField<F>("ERROR_CANNOT_INVERT_MATRIX")] != -1);
		return sat<F>("ERROR_CANNOT_INVERT_MATRIX");
	}

	template<typename F = ::jint>
	static auto ERROR_CANNOT_SET_ENABLED() {
		static_assert(field_signatures[jField<F>("ERROR_CANNOT_SET_ENABLED")] != -1);
		return sat<F>("ERROR_CANNOT_SET_ENABLED");
	}

	template<typename F = ::jint>
	static auto ERROR_CANNOT_SET_MENU() {
		static_assert(field_signatures[jField<F>("ERROR_CANNOT_SET_MENU")] != -1);
		return sat<F>("ERROR_CANNOT_SET_MENU");
	}

	template<typename F = ::jint>
	static auto ERROR_CANNOT_SET_SELECTION() {
		static_assert(field_signatures[jField<F>("ERROR_CANNOT_SET_SELECTION")] != -1);
		return sat<F>("ERROR_CANNOT_SET_SELECTION");
	}

	template<typename F = ::jint>
	static auto ERROR_CANNOT_SET_TEXT() {
		static_assert(field_signatures[jField<F>("ERROR_CANNOT_SET_TEXT")] != -1);
		return sat<F>("ERROR_CANNOT_SET_TEXT");
	}

	template<typename F = ::jint>
	static auto ERROR_DEVICE_DISPOSED() {
		static_assert(field_signatures[jField<F>("ERROR_DEVICE_DISPOSED")] != -1);
		return sat<F>("ERROR_DEVICE_DISPOSED");
	}

	template<typename F = ::jint>
	static auto ERROR_FAILED_EVALUATE() {
		static_assert(field_signatures[jField<F>("ERROR_FAILED_EVALUATE")] != -1);
		return sat<F>("ERROR_FAILED_EVALUATE");
	}

	template<typename F = ::jint>
	static auto ERROR_FAILED_EXEC() {
		static_assert(field_signatures[jField<F>("ERROR_FAILED_EXEC")] != -1);
		return sat<F>("ERROR_FAILED_EXEC");
	}

	template<typename F = ::jint>
	static auto ERROR_FAILED_LOAD_LIBRARY() {
		static_assert(field_signatures[jField<F>("ERROR_FAILED_LOAD_LIBRARY")] != -1);
		return sat<F>("ERROR_FAILED_LOAD_LIBRARY");
	}

	template<typename F = ::jint>
	static auto ERROR_FUNCTION_DISPOSED() {
		static_assert(field_signatures[jField<F>("ERROR_FUNCTION_DISPOSED")] != -1);
		return sat<F>("ERROR_FUNCTION_DISPOSED");
	}

	template<typename F = ::jint>
	static auto ERROR_GRAPHIC_DISPOSED() {
		static_assert(field_signatures[jField<F>("ERROR_GRAPHIC_DISPOSED")] != -1);
		return sat<F>("ERROR_GRAPHIC_DISPOSED");
	}

	template<typename F = ::jint>
	static auto ERROR_INVALID_ARGUMENT() {
		static_assert(field_signatures[jField<F>("ERROR_INVALID_ARGUMENT")] != -1);
		return sat<F>("ERROR_INVALID_ARGUMENT");
	}

	template<typename F = ::jint>
	static auto ERROR_INVALID_FONT() {
		static_assert(field_signatures[jField<F>("ERROR_INVALID_FONT")] != -1);
		return sat<F>("ERROR_INVALID_FONT");
	}

	template<typename F = ::jint>
	static auto ERROR_INVALID_IMAGE() {
		static_assert(field_signatures[jField<F>("ERROR_INVALID_IMAGE")] != -1);
		return sat<F>("ERROR_INVALID_IMAGE");
	}

	template<typename F = ::jint>
	static auto ERROR_INVALID_PARENT() {
		static_assert(field_signatures[jField<F>("ERROR_INVALID_PARENT")] != -1);
		return sat<F>("ERROR_INVALID_PARENT");
	}

	template<typename F = ::jint>
	static auto ERROR_INVALID_RANGE() {
		static_assert(field_signatures[jField<F>("ERROR_INVALID_RANGE")] != -1);
		return sat<F>("ERROR_INVALID_RANGE");
	}

	template<typename F = ::jint>
	static auto ERROR_INVALID_RETURN_VALUE() {
		static_assert(field_signatures[jField<F>("ERROR_INVALID_RETURN_VALUE")] != -1);
		return sat<F>("ERROR_INVALID_RETURN_VALUE");
	}

	template<typename F = ::jint>
	static auto ERROR_INVALID_SUBCLASS() {
		static_assert(field_signatures[jField<F>("ERROR_INVALID_SUBCLASS")] != -1);
		return sat<F>("ERROR_INVALID_SUBCLASS");
	}

	template<typename F = ::jint>
	static auto ERROR_IO() {
		static_assert(field_signatures[jField<F>("ERROR_IO")] != -1);
		return sat<F>("ERROR_IO");
	}

	template<typename F = ::jint>
	static auto ERROR_ITEM_NOT_ADDED() {
		static_assert(field_signatures[jField<F>("ERROR_ITEM_NOT_ADDED")] != -1);
		return sat<F>("ERROR_ITEM_NOT_ADDED");
	}

	template<typename F = ::jint>
	static auto ERROR_ITEM_NOT_REMOVED() {
		static_assert(field_signatures[jField<F>("ERROR_ITEM_NOT_REMOVED")] != -1);
		return sat<F>("ERROR_ITEM_NOT_REMOVED");
	}

	template<typename F = ::jint>
	static auto ERROR_MENUITEM_NOT_CASCADE() {
		static_assert(field_signatures[jField<F>("ERROR_MENUITEM_NOT_CASCADE")] != -1);
		return sat<F>("ERROR_MENUITEM_NOT_CASCADE");
	}

	template<typename F = ::jint>
	static auto ERROR_MENU_NOT_BAR() {
		static_assert(field_signatures[jField<F>("ERROR_MENU_NOT_BAR")] != -1);
		return sat<F>("ERROR_MENU_NOT_BAR");
	}

	template<typename F = ::jint>
	static auto ERROR_MENU_NOT_DROP_DOWN() {
		static_assert(field_signatures[jField<F>("ERROR_MENU_NOT_DROP_DOWN")] != -1);
		return sat<F>("ERROR_MENU_NOT_DROP_DOWN");
	}

	template<typename F = ::jint>
	static auto ERROR_MENU_NOT_POP_UP() {
		static_assert(field_signatures[jField<F>("ERROR_MENU_NOT_POP_UP")] != -1);
		return sat<F>("ERROR_MENU_NOT_POP_UP");
	}

	template<typename F = ::jint>
	static auto ERROR_NOT_IMPLEMENTED() {
		static_assert(field_signatures[jField<F>("ERROR_NOT_IMPLEMENTED")] != -1);
		return sat<F>("ERROR_NOT_IMPLEMENTED");
	}

	template<typename F = ::jint>
	static auto ERROR_NO_GRAPHICS_LIBRARY() {
		static_assert(field_signatures[jField<F>("ERROR_NO_GRAPHICS_LIBRARY")] != -1);
		return sat<F>("ERROR_NO_GRAPHICS_LIBRARY");
	}

	template<typename F = ::jint>
	static auto ERROR_NO_HANDLES() {
		static_assert(field_signatures[jField<F>("ERROR_NO_HANDLES")] != -1);
		return sat<F>("ERROR_NO_HANDLES");
	}

	template<typename F = ::jint>
	static auto ERROR_NO_MORE_CALLBACKS() {
		static_assert(field_signatures[jField<F>("ERROR_NO_MORE_CALLBACKS")] != -1);
		return sat<F>("ERROR_NO_MORE_CALLBACKS");
	}

	template<typename F = ::jint>
	static auto ERROR_NULL_ARGUMENT() {
		static_assert(field_signatures[jField<F>("ERROR_NULL_ARGUMENT")] != -1);
		return sat<F>("ERROR_NULL_ARGUMENT");
	}

	template<typename F = ::jint>
	static auto ERROR_THREAD_INVALID_ACCESS() {
		static_assert(field_signatures[jField<F>("ERROR_THREAD_INVALID_ACCESS")] != -1);
		return sat<F>("ERROR_THREAD_INVALID_ACCESS");
	}

	template<typename F = ::jint>
	static auto ERROR_UNSPECIFIED() {
		static_assert(field_signatures[jField<F>("ERROR_UNSPECIFIED")] != -1);
		return sat<F>("ERROR_UNSPECIFIED");
	}

	template<typename F = ::jint>
	static auto ERROR_UNSUPPORTED_DEPTH() {
		static_assert(field_signatures[jField<F>("ERROR_UNSUPPORTED_DEPTH")] != -1);
		return sat<F>("ERROR_UNSUPPORTED_DEPTH");
	}

	template<typename F = ::jint>
	static auto ERROR_UNSUPPORTED_FORMAT() {
		static_assert(field_signatures[jField<F>("ERROR_UNSUPPORTED_FORMAT")] != -1);
		return sat<F>("ERROR_UNSUPPORTED_FORMAT");
	}

	template<typename F = ::jint>
	static auto ERROR_WIDGET_DISPOSED() {
		static_assert(field_signatures[jField<F>("ERROR_WIDGET_DISPOSED")] != -1);
		return sat<F>("ERROR_WIDGET_DISPOSED");
	}

	template<typename F = ::jchar>
	static auto ESC() {
		static_assert(field_signatures[jField<F>("ESC")] != -1);
		return sat<F>("ESC");
	}

	template<typename F = ::jint>
	static auto EraseItem() {
		static_assert(field_signatures[jField<F>("EraseItem")] != -1);
		return sat<F>("EraseItem");
	}

	template<typename F = ::jint>
	static auto Expand() {
		static_assert(field_signatures[jField<F>("Expand")] != -1);
		return sat<F>("Expand");
	}

	template<typename F = ::jint>
	static auto F1() {
		static_assert(field_signatures[jField<F>("F1")] != -1);
		return sat<F>("F1");
	}

	template<typename F = ::jint>
	static auto F10() {
		static_assert(field_signatures[jField<F>("F10")] != -1);
		return sat<F>("F10");
	}

	template<typename F = ::jint>
	static auto F11() {
		static_assert(field_signatures[jField<F>("F11")] != -1);
		return sat<F>("F11");
	}

	template<typename F = ::jint>
	static auto F12() {
		static_assert(field_signatures[jField<F>("F12")] != -1);
		return sat<F>("F12");
	}

	template<typename F = ::jint>
	static auto F13() {
		static_assert(field_signatures[jField<F>("F13")] != -1);
		return sat<F>("F13");
	}

	template<typename F = ::jint>
	static auto F14() {
		static_assert(field_signatures[jField<F>("F14")] != -1);
		return sat<F>("F14");
	}

	template<typename F = ::jint>
	static auto F15() {
		static_assert(field_signatures[jField<F>("F15")] != -1);
		return sat<F>("F15");
	}

	template<typename F = ::jint>
	static auto F16() {
		static_assert(field_signatures[jField<F>("F16")] != -1);
		return sat<F>("F16");
	}

	template<typename F = ::jint>
	static auto F17() {
		static_assert(field_signatures[jField<F>("F17")] != -1);
		return sat<F>("F17");
	}

	template<typename F = ::jint>
	static auto F18() {
		static_assert(field_signatures[jField<F>("F18")] != -1);
		return sat<F>("F18");
	}

	template<typename F = ::jint>
	static auto F19() {
		static_assert(field_signatures[jField<F>("F19")] != -1);
		return sat<F>("F19");
	}

	template<typename F = ::jint>
	static auto F2() {
		static_assert(field_signatures[jField<F>("F2")] != -1);
		return sat<F>("F2");
	}

	template<typename F = ::jint>
	static auto F20() {
		static_assert(field_signatures[jField<F>("F20")] != -1);
		return sat<F>("F20");
	}

	template<typename F = ::jint>
	static auto F3() {
		static_assert(field_signatures[jField<F>("F3")] != -1);
		return sat<F>("F3");
	}

	template<typename F = ::jint>
	static auto F4() {
		static_assert(field_signatures[jField<F>("F4")] != -1);
		return sat<F>("F4");
	}

	template<typename F = ::jint>
	static auto F5() {
		static_assert(field_signatures[jField<F>("F5")] != -1);
		return sat<F>("F5");
	}

	template<typename F = ::jint>
	static auto F6() {
		static_assert(field_signatures[jField<F>("F6")] != -1);
		return sat<F>("F6");
	}

	template<typename F = ::jint>
	static auto F7() {
		static_assert(field_signatures[jField<F>("F7")] != -1);
		return sat<F>("F7");
	}

	template<typename F = ::jint>
	static auto F8() {
		static_assert(field_signatures[jField<F>("F8")] != -1);
		return sat<F>("F8");
	}

	template<typename F = ::jint>
	static auto F9() {
		static_assert(field_signatures[jField<F>("F9")] != -1);
		return sat<F>("F9");
	}

	template<typename F = ::jint>
	static auto FILL() {
		static_assert(field_signatures[jField<F>("FILL")] != -1);
		return sat<F>("FILL");
	}

	template<typename F = ::jint>
	static auto FILL_EVEN_ODD() {
		static_assert(field_signatures[jField<F>("FILL_EVEN_ODD")] != -1);
		return sat<F>("FILL_EVEN_ODD");
	}

	template<typename F = ::jint>
	static auto FILL_WINDING() {
		static_assert(field_signatures[jField<F>("FILL_WINDING")] != -1);
		return sat<F>("FILL_WINDING");
	}

	template<typename F = ::jint>
	static auto FLAT() {
		static_assert(field_signatures[jField<F>("FLAT")] != -1);
		return sat<F>("FLAT");
	}

	template<typename F = ::jint>
	static auto FLIP_TEXT_DIRECTION() {
		static_assert(field_signatures[jField<F>("FLIP_TEXT_DIRECTION")] != -1);
		return sat<F>("FLIP_TEXT_DIRECTION");
	}

	template<typename F = ::jint>
	static auto FOCUSED() {
		static_assert(field_signatures[jField<F>("FOCUSED")] != -1);
		return sat<F>("FOCUSED");
	}

	template<typename F = ::jint>
	static auto FOREGROUND() {
		static_assert(field_signatures[jField<F>("FOREGROUND")] != -1);
		return sat<F>("FOREGROUND");
	}

	template<typename F = ::jint>
	static auto FULL_SELECTION() {
		static_assert(field_signatures[jField<F>("FULL_SELECTION")] != -1);
		return sat<F>("FULL_SELECTION");
	}

	template<typename F = ::jint>
	static auto FocusIn() {
		static_assert(field_signatures[jField<F>("FocusIn")] != -1);
		return sat<F>("FocusIn");
	}

	template<typename F = ::jint>
	static auto FocusOut() {
		static_assert(field_signatures[jField<F>("FocusOut")] != -1);
		return sat<F>("FocusOut");
	}

	template<typename F = ::jint>
	static auto GESTURE_BEGIN() {
		static_assert(field_signatures[jField<F>("GESTURE_BEGIN")] != -1);
		return sat<F>("GESTURE_BEGIN");
	}

	template<typename F = ::jint>
	static auto GESTURE_END() {
		static_assert(field_signatures[jField<F>("GESTURE_END")] != -1);
		return sat<F>("GESTURE_END");
	}

	template<typename F = ::jint>
	static auto GESTURE_MAGNIFY() {
		static_assert(field_signatures[jField<F>("GESTURE_MAGNIFY")] != -1);
		return sat<F>("GESTURE_MAGNIFY");
	}

	template<typename F = ::jint>
	static auto GESTURE_PAN() {
		static_assert(field_signatures[jField<F>("GESTURE_PAN")] != -1);
		return sat<F>("GESTURE_PAN");
	}

	template<typename F = ::jint>
	static auto GESTURE_ROTATE() {
		static_assert(field_signatures[jField<F>("GESTURE_ROTATE")] != -1);
		return sat<F>("GESTURE_ROTATE");
	}

	template<typename F = ::jint>
	static auto GESTURE_SWIPE() {
		static_assert(field_signatures[jField<F>("GESTURE_SWIPE")] != -1);
		return sat<F>("GESTURE_SWIPE");
	}

	template<typename F = ::jint>
	static auto Gesture() {
		static_assert(field_signatures[jField<F>("Gesture")] != -1);
		return sat<F>("Gesture");
	}

	template<typename F = ::jint>
	static auto HELP() {
		static_assert(field_signatures[jField<F>("HELP")] != -1);
		return sat<F>("HELP");
	}

	template<typename F = ::jint>
	static auto HIDE_SELECTION() {
		static_assert(field_signatures[jField<F>("HIDE_SELECTION")] != -1);
		return sat<F>("HIDE_SELECTION");
	}

	template<typename F = ::jint>
	static auto HIGH() {
		static_assert(field_signatures[jField<F>("HIGH")] != -1);
		return sat<F>("HIGH");
	}

	template<typename F = ::jint>
	static auto HOME() {
		static_assert(field_signatures[jField<F>("HOME")] != -1);
		return sat<F>("HOME");
	}

	template<typename F = ::jint>
	static auto HORIZONTAL() {
		static_assert(field_signatures[jField<F>("HORIZONTAL")] != -1);
		return sat<F>("HORIZONTAL");
	}

	template<typename F = ::jint>
	static auto HOT() {
		static_assert(field_signatures[jField<F>("HOT")] != -1);
		return sat<F>("HOT");
	}

	template<typename F = ::jint>
	static auto H_SCROLL() {
		static_assert(field_signatures[jField<F>("H_SCROLL")] != -1);
		return sat<F>("H_SCROLL");
	}

	template<typename F = ::jint>
	static auto HardKeyDown() {
		static_assert(field_signatures[jField<F>("HardKeyDown")] != -1);
		return sat<F>("HardKeyDown");
	}

	template<typename F = ::jint>
	static auto HardKeyUp() {
		static_assert(field_signatures[jField<F>("HardKeyUp")] != -1);
		return sat<F>("HardKeyUp");
	}

	template<typename F = ::jint>
	static auto Help() {
		static_assert(field_signatures[jField<F>("Help")] != -1);
		return sat<F>("Help");
	}

	template<typename F = ::jint>
	static auto Hide() {
		static_assert(field_signatures[jField<F>("Hide")] != -1);
		return sat<F>("Hide");
	}

	template<typename F = ::jint>
	static auto ICON() {
		static_assert(field_signatures[jField<F>("ICON")] != -1);
		return sat<F>("ICON");
	}

	template<typename F = ::jint>
	static auto ICON_CANCEL() {
		static_assert(field_signatures[jField<F>("ICON_CANCEL")] != -1);
		return sat<F>("ICON_CANCEL");
	}

	template<typename F = ::jint>
	static auto ICON_ERROR() {
		static_assert(field_signatures[jField<F>("ICON_ERROR")] != -1);
		return sat<F>("ICON_ERROR");
	}

	template<typename F = ::jint>
	static auto ICON_INFORMATION() {
		static_assert(field_signatures[jField<F>("ICON_INFORMATION")] != -1);
		return sat<F>("ICON_INFORMATION");
	}

	template<typename F = ::jint>
	static auto ICON_QUESTION() {
		static_assert(field_signatures[jField<F>("ICON_QUESTION")] != -1);
		return sat<F>("ICON_QUESTION");
	}

	template<typename F = ::jint>
	static auto ICON_SEARCH() {
		static_assert(field_signatures[jField<F>("ICON_SEARCH")] != -1);
		return sat<F>("ICON_SEARCH");
	}

	template<typename F = ::jint>
	static auto ICON_WARNING() {
		static_assert(field_signatures[jField<F>("ICON_WARNING")] != -1);
		return sat<F>("ICON_WARNING");
	}

	template<typename F = ::jint>
	static auto ICON_WORKING() {
		static_assert(field_signatures[jField<F>("ICON_WORKING")] != -1);
		return sat<F>("ICON_WORKING");
	}

	template<typename F = ::jint>
	static auto ID_ABOUT() {
		static_assert(field_signatures[jField<F>("ID_ABOUT")] != -1);
		return sat<F>("ID_ABOUT");
	}

	template<typename F = ::jint>
	static auto ID_HIDE() {
		static_assert(field_signatures[jField<F>("ID_HIDE")] != -1);
		return sat<F>("ID_HIDE");
	}

	template<typename F = ::jint>
	static auto ID_HIDE_OTHERS() {
		static_assert(field_signatures[jField<F>("ID_HIDE_OTHERS")] != -1);
		return sat<F>("ID_HIDE_OTHERS");
	}

	template<typename F = ::jint>
	static auto ID_PREFERENCES() {
		static_assert(field_signatures[jField<F>("ID_PREFERENCES")] != -1);
		return sat<F>("ID_PREFERENCES");
	}

	template<typename F = ::jint>
	static auto ID_QUIT() {
		static_assert(field_signatures[jField<F>("ID_QUIT")] != -1);
		return sat<F>("ID_QUIT");
	}

	template<typename F = ::jint>
	static auto ID_SHOW_ALL() {
		static_assert(field_signatures[jField<F>("ID_SHOW_ALL")] != -1);
		return sat<F>("ID_SHOW_ALL");
	}

	template<typename F = ::jint>
	static auto IGNORE() {
		static_assert(field_signatures[jField<F>("IGNORE")] != -1);
		return sat<F>("IGNORE");
	}

	template<typename F = ::jint>
	static auto IMAGE_BMP() {
		static_assert(field_signatures[jField<F>("IMAGE_BMP")] != -1);
		return sat<F>("IMAGE_BMP");
	}

	template<typename F = ::jint>
	static auto IMAGE_BMP_RLE() {
		static_assert(field_signatures[jField<F>("IMAGE_BMP_RLE")] != -1);
		return sat<F>("IMAGE_BMP_RLE");
	}

	template<typename F = ::jint>
	static auto IMAGE_COPY() {
		static_assert(field_signatures[jField<F>("IMAGE_COPY")] != -1);
		return sat<F>("IMAGE_COPY");
	}

	template<typename F = ::jint>
	static auto IMAGE_DISABLE() {
		static_assert(field_signatures[jField<F>("IMAGE_DISABLE")] != -1);
		return sat<F>("IMAGE_DISABLE");
	}

	template<typename F = ::jint>
	static auto IMAGE_GIF() {
		static_assert(field_signatures[jField<F>("IMAGE_GIF")] != -1);
		return sat<F>("IMAGE_GIF");
	}

	template<typename F = ::jint>
	static auto IMAGE_GRAY() {
		static_assert(field_signatures[jField<F>("IMAGE_GRAY")] != -1);
		return sat<F>("IMAGE_GRAY");
	}

	template<typename F = ::jint>
	static auto IMAGE_ICO() {
		static_assert(field_signatures[jField<F>("IMAGE_ICO")] != -1);
		return sat<F>("IMAGE_ICO");
	}

	template<typename F = ::jint>
	static auto IMAGE_JPEG() {
		static_assert(field_signatures[jField<F>("IMAGE_JPEG")] != -1);
		return sat<F>("IMAGE_JPEG");
	}

	template<typename F = ::jint>
	static auto IMAGE_OS2_BMP() {
		static_assert(field_signatures[jField<F>("IMAGE_OS2_BMP")] != -1);
		return sat<F>("IMAGE_OS2_BMP");
	}

	template<typename F = ::jint>
	static auto IMAGE_PNG() {
		static_assert(field_signatures[jField<F>("IMAGE_PNG")] != -1);
		return sat<F>("IMAGE_PNG");
	}

	template<typename F = ::jint>
	static auto IMAGE_TIFF() {
		static_assert(field_signatures[jField<F>("IMAGE_TIFF")] != -1);
		return sat<F>("IMAGE_TIFF");
	}

	template<typename F = ::jint>
	static auto IMAGE_UNDEFINED() {
		static_assert(field_signatures[jField<F>("IMAGE_UNDEFINED")] != -1);
		return sat<F>("IMAGE_UNDEFINED");
	}

	template<typename F = ::jint>
	static auto INDETERMINATE() {
		static_assert(field_signatures[jField<F>("INDETERMINATE")] != -1);
		return sat<F>("INDETERMINATE");
	}

	template<typename F = ::jint>
	static auto INHERIT_DEFAULT() {
		static_assert(field_signatures[jField<F>("INHERIT_DEFAULT")] != -1);
		return sat<F>("INHERIT_DEFAULT");
	}

	template<typename F = ::jint>
	static auto INHERIT_FORCE() {
		static_assert(field_signatures[jField<F>("INHERIT_FORCE")] != -1);
		return sat<F>("INHERIT_FORCE");
	}

	template<typename F = ::jint>
	static auto INHERIT_NONE() {
		static_assert(field_signatures[jField<F>("INHERIT_NONE")] != -1);
		return sat<F>("INHERIT_NONE");
	}

	template<typename F = ::jint>
	static auto INSERT() {
		static_assert(field_signatures[jField<F>("INSERT")] != -1);
		return sat<F>("INSERT");
	}

	template<typename F = ::jint>
	static auto ITALIC() {
		static_assert(field_signatures[jField<F>("ITALIC")] != -1);
		return sat<F>("ITALIC");
	}

	template<typename F = ::jint>
	static auto Iconify() {
		static_assert(field_signatures[jField<F>("Iconify")] != -1);
		return sat<F>("Iconify");
	}

	template<typename F = ::jint>
	static auto ImeComposition() {
		static_assert(field_signatures[jField<F>("ImeComposition")] != -1);
		return sat<F>("ImeComposition");
	}

	template<typename F = ::jint>
	static auto JOIN_BEVEL() {
		static_assert(field_signatures[jField<F>("JOIN_BEVEL")] != -1);
		return sat<F>("JOIN_BEVEL");
	}

	template<typename F = ::jint>
	static auto JOIN_MITER() {
		static_assert(field_signatures[jField<F>("JOIN_MITER")] != -1);
		return sat<F>("JOIN_MITER");
	}

	template<typename F = ::jint>
	static auto JOIN_ROUND() {
		static_assert(field_signatures[jField<F>("JOIN_ROUND")] != -1);
		return sat<F>("JOIN_ROUND");
	}

	template<typename F = ::jint>
	static auto KEYCODE_BIT() {
		static_assert(field_signatures[jField<F>("KEYCODE_BIT")] != -1);
		return sat<F>("KEYCODE_BIT");
	}

	template<typename F = ::jint>
	static auto KEYPAD() {
		static_assert(field_signatures[jField<F>("KEYPAD")] != -1);
		return sat<F>("KEYPAD");
	}

	template<typename F = ::jint>
	static auto KEYPAD_0() {
		static_assert(field_signatures[jField<F>("KEYPAD_0")] != -1);
		return sat<F>("KEYPAD_0");
	}

	template<typename F = ::jint>
	static auto KEYPAD_1() {
		static_assert(field_signatures[jField<F>("KEYPAD_1")] != -1);
		return sat<F>("KEYPAD_1");
	}

	template<typename F = ::jint>
	static auto KEYPAD_2() {
		static_assert(field_signatures[jField<F>("KEYPAD_2")] != -1);
		return sat<F>("KEYPAD_2");
	}

	template<typename F = ::jint>
	static auto KEYPAD_3() {
		static_assert(field_signatures[jField<F>("KEYPAD_3")] != -1);
		return sat<F>("KEYPAD_3");
	}

	template<typename F = ::jint>
	static auto KEYPAD_4() {
		static_assert(field_signatures[jField<F>("KEYPAD_4")] != -1);
		return sat<F>("KEYPAD_4");
	}

	template<typename F = ::jint>
	static auto KEYPAD_5() {
		static_assert(field_signatures[jField<F>("KEYPAD_5")] != -1);
		return sat<F>("KEYPAD_5");
	}

	template<typename F = ::jint>
	static auto KEYPAD_6() {
		static_assert(field_signatures[jField<F>("KEYPAD_6")] != -1);
		return sat<F>("KEYPAD_6");
	}

	template<typename F = ::jint>
	static auto KEYPAD_7() {
		static_assert(field_signatures[jField<F>("KEYPAD_7")] != -1);
		return sat<F>("KEYPAD_7");
	}

	template<typename F = ::jint>
	static auto KEYPAD_8() {
		static_assert(field_signatures[jField<F>("KEYPAD_8")] != -1);
		return sat<F>("KEYPAD_8");
	}

	template<typename F = ::jint>
	static auto KEYPAD_9() {
		static_assert(field_signatures[jField<F>("KEYPAD_9")] != -1);
		return sat<F>("KEYPAD_9");
	}

	template<typename F = ::jint>
	static auto KEYPAD_ADD() {
		static_assert(field_signatures[jField<F>("KEYPAD_ADD")] != -1);
		return sat<F>("KEYPAD_ADD");
	}

	template<typename F = ::jint>
	static auto KEYPAD_CR() {
		static_assert(field_signatures[jField<F>("KEYPAD_CR")] != -1);
		return sat<F>("KEYPAD_CR");
	}

	template<typename F = ::jint>
	static auto KEYPAD_DECIMAL() {
		static_assert(field_signatures[jField<F>("KEYPAD_DECIMAL")] != -1);
		return sat<F>("KEYPAD_DECIMAL");
	}

	template<typename F = ::jint>
	static auto KEYPAD_DIVIDE() {
		static_assert(field_signatures[jField<F>("KEYPAD_DIVIDE")] != -1);
		return sat<F>("KEYPAD_DIVIDE");
	}

	template<typename F = ::jint>
	static auto KEYPAD_EQUAL() {
		static_assert(field_signatures[jField<F>("KEYPAD_EQUAL")] != -1);
		return sat<F>("KEYPAD_EQUAL");
	}

	template<typename F = ::jint>
	static auto KEYPAD_MULTIPLY() {
		static_assert(field_signatures[jField<F>("KEYPAD_MULTIPLY")] != -1);
		return sat<F>("KEYPAD_MULTIPLY");
	}

	template<typename F = ::jint>
	static auto KEYPAD_SUBTRACT() {
		static_assert(field_signatures[jField<F>("KEYPAD_SUBTRACT")] != -1);
		return sat<F>("KEYPAD_SUBTRACT");
	}

	template<typename F = ::jint>
	static auto KEY_MASK() {
		static_assert(field_signatures[jField<F>("KEY_MASK")] != -1);
		return sat<F>("KEY_MASK");
	}

	template<typename F = ::jint>
	static auto KeyDown() {
		static_assert(field_signatures[jField<F>("KeyDown")] != -1);
		return sat<F>("KeyDown");
	}

	template<typename F = ::jint>
	static auto KeyUp() {
		static_assert(field_signatures[jField<F>("KeyUp")] != -1);
		return sat<F>("KeyUp");
	}

	template<typename F = ::jint>
	static auto LAST_LINE_SELECTION() {
		static_assert(field_signatures[jField<F>("LAST_LINE_SELECTION")] != -1);
		return sat<F>("LAST_LINE_SELECTION");
	}

	template<typename F = ::jint>
	static auto LEAD() {
		static_assert(field_signatures[jField<F>("LEAD")] != -1);
		return sat<F>("LEAD");
	}

	template<typename F = ::jint>
	static auto LEFT() {
		static_assert(field_signatures[jField<F>("LEFT")] != -1);
		return sat<F>("LEFT");
	}

	template<typename F = ::jint>
	static auto LEFT_TO_RIGHT() {
		static_assert(field_signatures[jField<F>("LEFT_TO_RIGHT")] != -1);
		return sat<F>("LEFT_TO_RIGHT");
	}

	template<typename F = ::jchar>
	static auto LF() {
		static_assert(field_signatures[jField<F>("LF")] != -1);
		return sat<F>("LF");
	}

	template<typename F = ::jint>
	static auto LINE_CUSTOM() {
		static_assert(field_signatures[jField<F>("LINE_CUSTOM")] != -1);
		return sat<F>("LINE_CUSTOM");
	}

	template<typename F = ::jint>
	static auto LINE_DASH() {
		static_assert(field_signatures[jField<F>("LINE_DASH")] != -1);
		return sat<F>("LINE_DASH");
	}

	template<typename F = ::jint>
	static auto LINE_DASHDOT() {
		static_assert(field_signatures[jField<F>("LINE_DASHDOT")] != -1);
		return sat<F>("LINE_DASHDOT");
	}

	template<typename F = ::jint>
	static auto LINE_DASHDOTDOT() {
		static_assert(field_signatures[jField<F>("LINE_DASHDOTDOT")] != -1);
		return sat<F>("LINE_DASHDOTDOT");
	}

	template<typename F = ::jint>
	static auto LINE_DOT() {
		static_assert(field_signatures[jField<F>("LINE_DOT")] != -1);
		return sat<F>("LINE_DOT");
	}

	template<typename F = ::jint>
	static auto LINE_SOLID() {
		static_assert(field_signatures[jField<F>("LINE_SOLID")] != -1);
		return sat<F>("LINE_SOLID");
	}

	template<typename F = ::jint>
	static auto LONG() {
		static_assert(field_signatures[jField<F>("LONG")] != -1);
		return sat<F>("LONG");
	}

	template<typename F = ::jint>
	static auto LOW() {
		static_assert(field_signatures[jField<F>("LOW")] != -1);
		return sat<F>("LOW");
	}

	template<typename F = ::jint>
	static auto MAX() {
		static_assert(field_signatures[jField<F>("MAX")] != -1);
		return sat<F>("MAX");
	}

	template<typename F = ::jint>
	static auto MEDIUM() {
		static_assert(field_signatures[jField<F>("MEDIUM")] != -1);
		return sat<F>("MEDIUM");
	}

	template<typename F = ::jint>
	static auto MENU() {
		static_assert(field_signatures[jField<F>("MENU")] != -1);
		return sat<F>("MENU");
	}

	template<typename F = ::jint>
	static auto MENU_KEYBOARD() {
		static_assert(field_signatures[jField<F>("MENU_KEYBOARD")] != -1);
		return sat<F>("MENU_KEYBOARD");
	}

	template<typename F = ::jint>
	static auto MENU_MOUSE() {
		static_assert(field_signatures[jField<F>("MENU_MOUSE")] != -1);
		return sat<F>("MENU_MOUSE");
	}

	template<typename F = ::jint>
	static auto MIN() {
		static_assert(field_signatures[jField<F>("MIN")] != -1);
		return sat<F>("MIN");
	}

	template<typename F = ::jint>
	static auto MIRRORED() {
		static_assert(field_signatures[jField<F>("MIRRORED")] != -1);
		return sat<F>("MIRRORED");
	}

	template<typename F = ::jint>
	static auto MOD1() {
		static_assert(field_signatures[jField<F>("MOD1")] != -1);
		return sat<F>("MOD1");
	}

	template<typename F = ::jint>
	static auto MOD2() {
		static_assert(field_signatures[jField<F>("MOD2")] != -1);
		return sat<F>("MOD2");
	}

	template<typename F = ::jint>
	static auto MOD3() {
		static_assert(field_signatures[jField<F>("MOD3")] != -1);
		return sat<F>("MOD3");
	}

	template<typename F = ::jint>
	static auto MOD4() {
		static_assert(field_signatures[jField<F>("MOD4")] != -1);
		return sat<F>("MOD4");
	}

	template<typename F = ::jint>
	static auto MODELESS() {
		static_assert(field_signatures[jField<F>("MODELESS")] != -1);
		return sat<F>("MODELESS");
	}

	template<typename F = ::jint>
	static auto MODIFIER_MASK() {
		static_assert(field_signatures[jField<F>("MODIFIER_MASK")] != -1);
		return sat<F>("MODIFIER_MASK");
	}

	template<typename F = ::jint>
	static auto MOVEMENT_CHAR() {
		static_assert(field_signatures[jField<F>("MOVEMENT_CHAR")] != -1);
		return sat<F>("MOVEMENT_CHAR");
	}

	template<typename F = ::jint>
	static auto MOVEMENT_CLUSTER() {
		static_assert(field_signatures[jField<F>("MOVEMENT_CLUSTER")] != -1);
		return sat<F>("MOVEMENT_CLUSTER");
	}

	template<typename F = ::jint>
	static auto MOVEMENT_WORD() {
		static_assert(field_signatures[jField<F>("MOVEMENT_WORD")] != -1);
		return sat<F>("MOVEMENT_WORD");
	}

	template<typename F = ::jint>
	static auto MOVEMENT_WORD_END() {
		static_assert(field_signatures[jField<F>("MOVEMENT_WORD_END")] != -1);
		return sat<F>("MOVEMENT_WORD_END");
	}

	template<typename F = ::jint>
	static auto MOVEMENT_WORD_START() {
		static_assert(field_signatures[jField<F>("MOVEMENT_WORD_START")] != -1);
		return sat<F>("MOVEMENT_WORD_START");
	}

	template<typename F = ::jint>
	static auto MOZILLA() {
		static_assert(field_signatures[jField<F>("MOZILLA")] != -1);
		return sat<F>("MOZILLA");
	}

	template<typename F = ::jint>
	static auto MULTI() {
		static_assert(field_signatures[jField<F>("MULTI")] != -1);
		return sat<F>("MULTI");
	}

	template<typename F = ::jint>
	static auto MeasureItem() {
		static_assert(field_signatures[jField<F>("MeasureItem")] != -1);
		return sat<F>("MeasureItem");
	}

	template<typename F = ::jint>
	static auto MenuDetect() {
		static_assert(field_signatures[jField<F>("MenuDetect")] != -1);
		return sat<F>("MenuDetect");
	}

	template<typename F = ::jint>
	static auto Modify() {
		static_assert(field_signatures[jField<F>("Modify")] != -1);
		return sat<F>("Modify");
	}

	template<typename F = ::jint>
	static auto MouseDoubleClick() {
		static_assert(field_signatures[jField<F>("MouseDoubleClick")] != -1);
		return sat<F>("MouseDoubleClick");
	}

	template<typename F = ::jint>
	static auto MouseDown() {
		static_assert(field_signatures[jField<F>("MouseDown")] != -1);
		return sat<F>("MouseDown");
	}

	template<typename F = ::jint>
	static auto MouseEnter() {
		static_assert(field_signatures[jField<F>("MouseEnter")] != -1);
		return sat<F>("MouseEnter");
	}

	template<typename F = ::jint>
	static auto MouseExit() {
		static_assert(field_signatures[jField<F>("MouseExit")] != -1);
		return sat<F>("MouseExit");
	}

	template<typename F = ::jint>
	static auto MouseHorizontalWheel() {
		static_assert(field_signatures[jField<F>("MouseHorizontalWheel")] != -1);
		return sat<F>("MouseHorizontalWheel");
	}

	template<typename F = ::jint>
	static auto MouseHover() {
		static_assert(field_signatures[jField<F>("MouseHover")] != -1);
		return sat<F>("MouseHover");
	}

	template<typename F = ::jint>
	static auto MouseMove() {
		static_assert(field_signatures[jField<F>("MouseMove")] != -1);
		return sat<F>("MouseMove");
	}

	template<typename F = ::jint>
	static auto MouseUp() {
		static_assert(field_signatures[jField<F>("MouseUp")] != -1);
		return sat<F>("MouseUp");
	}

	template<typename F = ::jint>
	static auto MouseVerticalWheel() {
		static_assert(field_signatures[jField<F>("MouseVerticalWheel")] != -1);
		return sat<F>("MouseVerticalWheel");
	}

	template<typename F = ::jint>
	static auto MouseWheel() {
		static_assert(field_signatures[jField<F>("MouseWheel")] != -1);
		return sat<F>("MouseWheel");
	}

	template<typename F = ::jint>
	static auto Move() {
		static_assert(field_signatures[jField<F>("Move")] != -1);
		return sat<F>("Move");
	}

	template<typename F = ::jint>
	static auto NATIVE() {
		static_assert(field_signatures[jField<F>("NATIVE")] != -1);
		return sat<F>("NATIVE");
	}

	template<typename F = ::jint>
	static auto NO() {
		static_assert(field_signatures[jField<F>("NO")] != -1);
		return sat<F>("NO");
	}

	template<typename F = ::jint>
	static auto NONE() {
		static_assert(field_signatures[jField<F>("NONE")] != -1);
		return sat<F>("NONE");
	}

	template<typename F = ::jint>
	static auto NORMAL() {
		static_assert(field_signatures[jField<F>("NORMAL")] != -1);
		return sat<F>("NORMAL");
	}

	template<typename F = ::jint>
	static auto NO_BACKGROUND() {
		static_assert(field_signatures[jField<F>("NO_BACKGROUND")] != -1);
		return sat<F>("NO_BACKGROUND");
	}

	template<typename F = ::jint>
	static auto NO_FOCUS() {
		static_assert(field_signatures[jField<F>("NO_FOCUS")] != -1);
		return sat<F>("NO_FOCUS");
	}

	template<typename F = ::jint>
	static auto NO_MERGE_PAINTS() {
		static_assert(field_signatures[jField<F>("NO_MERGE_PAINTS")] != -1);
		return sat<F>("NO_MERGE_PAINTS");
	}

	template<typename F = ::jint>
	static auto NO_RADIO_GROUP() {
		static_assert(field_signatures[jField<F>("NO_RADIO_GROUP")] != -1);
		return sat<F>("NO_RADIO_GROUP");
	}

	template<typename F = ::jint>
	static auto NO_REDRAW_RESIZE() {
		static_assert(field_signatures[jField<F>("NO_REDRAW_RESIZE")] != -1);
		return sat<F>("NO_REDRAW_RESIZE");
	}

	template<typename F = ::jint>
	static auto NO_SCROLL() {
		static_assert(field_signatures[jField<F>("NO_SCROLL")] != -1);
		return sat<F>("NO_SCROLL");
	}

	template<typename F = ::jint>
	static auto NO_TRIM() {
		static_assert(field_signatures[jField<F>("NO_TRIM")] != -1);
		return sat<F>("NO_TRIM");
	}

	template<typename F = ::jint>
	static auto NULL_() {
		static_assert(field_signatures[jField<F>("NULL")] != -1);
		return sat<F>("NULL");
	}

	template<typename F = ::jint>
	static auto NUM_LOCK() {
		static_assert(field_signatures[jField<F>("NUM_LOCK")] != -1);
		return sat<F>("NUM_LOCK");
	}

	template<typename F = ::jint>
	static auto None() {
		static_assert(field_signatures[jField<F>("None")] != -1);
		return sat<F>("None");
	}

	template<typename F = ::jint>
	static auto OFF() {
		static_assert(field_signatures[jField<F>("OFF")] != -1);
		return sat<F>("OFF");
	}

	template<typename F = ::jint>
	static auto OK() {
		static_assert(field_signatures[jField<F>("OK")] != -1);
		return sat<F>("OK");
	}

	template<typename F = ::jint>
	static auto ON() {
		static_assert(field_signatures[jField<F>("ON")] != -1);
		return sat<F>("ON");
	}

	template<typename F = ::jint>
	static auto ON_TOP() {
		static_assert(field_signatures[jField<F>("ON_TOP")] != -1);
		return sat<F>("ON_TOP");
	}

	template<typename F = ::jint>
	static auto OPEN() {
		static_assert(field_signatures[jField<F>("OPEN")] != -1);
		return sat<F>("OPEN");
	}

	template<typename F = ::jint>
	static auto OpenDocument() {
		static_assert(field_signatures[jField<F>("OpenDocument")] != -1);
		return sat<F>("OpenDocument");
	}

	template<typename F = ::jint>
	static auto OrientationChange() {
		static_assert(field_signatures[jField<F>("OrientationChange")] != -1);
		return sat<F>("OrientationChange");
	}

	template<typename F = ::jint>
	static auto PAGE_DOWN() {
		static_assert(field_signatures[jField<F>("PAGE_DOWN")] != -1);
		return sat<F>("PAGE_DOWN");
	}

	template<typename F = ::jint>
	static auto PAGE_UP() {
		static_assert(field_signatures[jField<F>("PAGE_UP")] != -1);
		return sat<F>("PAGE_UP");
	}

	template<typename F = ::jint>
	static auto PASSWORD() {
		static_assert(field_signatures[jField<F>("PASSWORD")] != -1);
		return sat<F>("PASSWORD");
	}

	template<typename F = ::jint>
	static auto PATH_CLOSE() {
		static_assert(field_signatures[jField<F>("PATH_CLOSE")] != -1);
		return sat<F>("PATH_CLOSE");
	}

	template<typename F = ::jint>
	static auto PATH_CUBIC_TO() {
		static_assert(field_signatures[jField<F>("PATH_CUBIC_TO")] != -1);
		return sat<F>("PATH_CUBIC_TO");
	}

	template<typename F = ::jint>
	static auto PATH_LINE_TO() {
		static_assert(field_signatures[jField<F>("PATH_LINE_TO")] != -1);
		return sat<F>("PATH_LINE_TO");
	}

	template<typename F = ::jint>
	static auto PATH_MOVE_TO() {
		static_assert(field_signatures[jField<F>("PATH_MOVE_TO")] != -1);
		return sat<F>("PATH_MOVE_TO");
	}

	template<typename F = ::jint>
	static auto PATH_QUAD_TO() {
		static_assert(field_signatures[jField<F>("PATH_QUAD_TO")] != -1);
		return sat<F>("PATH_QUAD_TO");
	}

	template<typename F = ::jint>
	static auto PAUSE() {
		static_assert(field_signatures[jField<F>("PAUSE")] != -1);
		return sat<F>("PAUSE");
	}

	template<typename F = ::jint>
	static auto PAUSED() {
		static_assert(field_signatures[jField<F>("PAUSED")] != -1);
		return sat<F>("PAUSED");
	}

	template<typename F = ::jint>
	static auto PHONETIC() {
		static_assert(field_signatures[jField<F>("PHONETIC")] != -1);
		return sat<F>("PHONETIC");
	}

	template<typename F = ::jint>
	static auto POP_UP() {
		static_assert(field_signatures[jField<F>("POP_UP")] != -1);
		return sat<F>("POP_UP");
	}

	template<typename F = ::jint>
	static auto PRIMARY_MODAL() {
		static_assert(field_signatures[jField<F>("PRIMARY_MODAL")] != -1);
		return sat<F>("PRIMARY_MODAL");
	}

	template<typename F = ::jint>
	static auto PRINT_SCREEN() {
		static_assert(field_signatures[jField<F>("PRINT_SCREEN")] != -1);
		return sat<F>("PRINT_SCREEN");
	}

	template<typename F = ::jint>
	static auto PUSH() {
		static_assert(field_signatures[jField<F>("PUSH")] != -1);
		return sat<F>("PUSH");
	}

	template<typename F = ::jint>
	static auto Paint() {
		static_assert(field_signatures[jField<F>("Paint")] != -1);
		return sat<F>("Paint");
	}

	template<typename F = ::jint>
	static auto PaintItem() {
		static_assert(field_signatures[jField<F>("PaintItem")] != -1);
		return sat<F>("PaintItem");
	}

	template<typename F = ::jint>
	static auto PostEvent() {
		static_assert(field_signatures[jField<F>("PostEvent")] != -1);
		return sat<F>("PostEvent");
	}

	template<typename F = ::jint>
	static auto PostExternalEventDispatch() {
		static_assert(field_signatures[jField<F>("PostExternalEventDispatch")] != -1);
		return sat<F>("PostExternalEventDispatch");
	}

	template<typename F = ::jint>
	static auto PreEvent() {
		static_assert(field_signatures[jField<F>("PreEvent")] != -1);
		return sat<F>("PreEvent");
	}

	template<typename F = ::jint>
	static auto PreExternalEventDispatch() {
		static_assert(field_signatures[jField<F>("PreExternalEventDispatch")] != -1);
		return sat<F>("PreExternalEventDispatch");
	}

	template<typename F = ::jint>
	static auto RADIO() {
		static_assert(field_signatures[jField<F>("RADIO")] != -1);
		return sat<F>("RADIO");
	}

	template<typename F = ::jint>
	static auto READ_ONLY() {
		static_assert(field_signatures[jField<F>("READ_ONLY")] != -1);
		return sat<F>("READ_ONLY");
	}

	template<typename F = ::jint>
	static auto RESIZE() {
		static_assert(field_signatures[jField<F>("RESIZE")] != -1);
		return sat<F>("RESIZE");
	}

	template<typename F = ::jint>
	static auto RETRY() {
		static_assert(field_signatures[jField<F>("RETRY")] != -1);
		return sat<F>("RETRY");
	}

	template<typename F = ::jint>
	static auto RIGHT() {
		static_assert(field_signatures[jField<F>("RIGHT")] != -1);
		return sat<F>("RIGHT");
	}

	template<typename F = ::jint>
	static auto RIGHT_TO_LEFT() {
		static_assert(field_signatures[jField<F>("RIGHT_TO_LEFT")] != -1);
		return sat<F>("RIGHT_TO_LEFT");
	}

	template<typename F = ::jint>
	static auto ROMAN() {
		static_assert(field_signatures[jField<F>("ROMAN")] != -1);
		return sat<F>("ROMAN");
	}

	template<typename F = ::jint>
	static auto Resize() {
		static_assert(field_signatures[jField<F>("Resize")] != -1);
		return sat<F>("Resize");
	}

	template<typename F = ::jint>
	static auto SAVE() {
		static_assert(field_signatures[jField<F>("SAVE")] != -1);
		return sat<F>("SAVE");
	}

	template<typename F = ::jint>
	static auto SCROLLBAR_OVERLAY() {
		static_assert(field_signatures[jField<F>("SCROLLBAR_OVERLAY")] != -1);
		return sat<F>("SCROLLBAR_OVERLAY");
	}

	template<typename F = ::jint>
	static auto SCROLL_LINE() {
		static_assert(field_signatures[jField<F>("SCROLL_LINE")] != -1);
		return sat<F>("SCROLL_LINE");
	}

	template<typename F = ::jint>
	static auto SCROLL_LOCK() {
		static_assert(field_signatures[jField<F>("SCROLL_LOCK")] != -1);
		return sat<F>("SCROLL_LOCK");
	}

	template<typename F = ::jint>
	static auto SCROLL_PAGE() {
		static_assert(field_signatures[jField<F>("SCROLL_PAGE")] != -1);
		return sat<F>("SCROLL_PAGE");
	}

	template<typename F = ::jint>
	static auto SEARCH() {
		static_assert(field_signatures[jField<F>("SEARCH")] != -1);
		return sat<F>("SEARCH");
	}

	template<typename F = ::jint>
	static auto SELECTED() {
		static_assert(field_signatures[jField<F>("SELECTED")] != -1);
		return sat<F>("SELECTED");
	}

	template<typename F = ::jint>
	static auto SEPARATOR() {
		static_assert(field_signatures[jField<F>("SEPARATOR")] != -1);
		return sat<F>("SEPARATOR");
	}

	template<typename F = ::jint>
	static auto SEPARATOR_FILL() {
		static_assert(field_signatures[jField<F>("SEPARATOR_FILL")] != -1);
		return sat<F>("SEPARATOR_FILL");
	}

	template<typename F = ::jint>
	static auto SHADOW_ETCHED_IN() {
		static_assert(field_signatures[jField<F>("SHADOW_ETCHED_IN")] != -1);
		return sat<F>("SHADOW_ETCHED_IN");
	}

	template<typename F = ::jint>
	static auto SHADOW_ETCHED_OUT() {
		static_assert(field_signatures[jField<F>("SHADOW_ETCHED_OUT")] != -1);
		return sat<F>("SHADOW_ETCHED_OUT");
	}

	template<typename F = ::jint>
	static auto SHADOW_IN() {
		static_assert(field_signatures[jField<F>("SHADOW_IN")] != -1);
		return sat<F>("SHADOW_IN");
	}

	template<typename F = ::jint>
	static auto SHADOW_NONE() {
		static_assert(field_signatures[jField<F>("SHADOW_NONE")] != -1);
		return sat<F>("SHADOW_NONE");
	}

	template<typename F = ::jint>
	static auto SHADOW_OUT() {
		static_assert(field_signatures[jField<F>("SHADOW_OUT")] != -1);
		return sat<F>("SHADOW_OUT");
	}

	template<typename F = ::jint>
	static auto SHEET() {
		static_assert(field_signatures[jField<F>("SHEET")] != -1);
		return sat<F>("SHEET");
	}

	template<typename F = ::jint>
	static auto SHELL_TRIM() {
		static_assert(field_signatures[jField<F>("SHELL_TRIM")] != -1);
		return sat<F>("SHELL_TRIM");
	}

	template<typename F = ::jint>
	static auto SHIFT() {
		static_assert(field_signatures[jField<F>("SHIFT")] != -1);
		return sat<F>("SHIFT");
	}

	template<typename F = ::jint>
	static auto SHORT() {
		static_assert(field_signatures[jField<F>("SHORT")] != -1);
		return sat<F>("SHORT");
	}

	template<typename F = ::jint>
	static auto SIMPLE() {
		static_assert(field_signatures[jField<F>("SIMPLE")] != -1);
		return sat<F>("SIMPLE");
	}

	template<typename F = ::jint>
	static auto SINGLE() {
		static_assert(field_signatures[jField<F>("SINGLE")] != -1);
		return sat<F>("SINGLE");
	}

	template<typename F = ::java::lang::String>
	static auto SKIN_CLASS() {
		static_assert(field_signatures[jField<F>("SKIN_CLASS")] != -1);
		return sat<F>("SKIN_CLASS");
	}

	template<typename F = ::java::lang::String>
	static auto SKIN_ID() {
		static_assert(field_signatures[jField<F>("SKIN_ID")] != -1);
		return sat<F>("SKIN_ID");
	}

	template<typename F = ::jint>
	static auto SMOOTH() {
		static_assert(field_signatures[jField<F>("SMOOTH")] != -1);
		return sat<F>("SMOOTH");
	}

	template<typename F = ::jchar>
	static auto SPACE() {
		static_assert(field_signatures[jField<F>("SPACE")] != -1);
		return sat<F>("SPACE");
	}

	template<typename F = ::jint>
	static auto SYSTEM_MODAL() {
		static_assert(field_signatures[jField<F>("SYSTEM_MODAL")] != -1);
		return sat<F>("SYSTEM_MODAL");
	}

	template<typename F = ::jint>
	static auto Segments() {
		static_assert(field_signatures[jField<F>("Segments")] != -1);
		return sat<F>("Segments");
	}

	template<typename F = ::jint>
	static auto Selection() {
		static_assert(field_signatures[jField<F>("Selection")] != -1);
		return sat<F>("Selection");
	}

	template<typename F = ::jint>
	static auto SetData() {
		static_assert(field_signatures[jField<F>("SetData")] != -1);
		return sat<F>("SetData");
	}

	template<typename F = ::jint>
	static auto Settings() {
		static_assert(field_signatures[jField<F>("Settings")] != -1);
		return sat<F>("Settings");
	}

	template<typename F = ::jint>
	static auto Show() {
		static_assert(field_signatures[jField<F>("Show")] != -1);
		return sat<F>("Show");
	}

	template<typename F = ::jint>
	static auto Skin() {
		static_assert(field_signatures[jField<F>("Skin")] != -1);
		return sat<F>("Skin");
	}

	template<typename F = ::jchar>
	static auto TAB() {
		static_assert(field_signatures[jField<F>("TAB")] != -1);
		return sat<F>("TAB");
	}

	template<typename F = ::jint>
	static auto TIME() {
		static_assert(field_signatures[jField<F>("TIME")] != -1);
		return sat<F>("TIME");
	}

	template<typename F = ::jint>
	static auto TITLE() {
		static_assert(field_signatures[jField<F>("TITLE")] != -1);
		return sat<F>("TITLE");
	}

	template<typename F = ::jint>
	static auto TOGGLE() {
		static_assert(field_signatures[jField<F>("TOGGLE")] != -1);
		return sat<F>("TOGGLE");
	}

	template<typename F = ::jint>
	static auto TOOL() {
		static_assert(field_signatures[jField<F>("TOOL")] != -1);
		return sat<F>("TOOL");
	}

	template<typename F = ::jint>
	static auto TOP() {
		static_assert(field_signatures[jField<F>("TOP")] != -1);
		return sat<F>("TOP");
	}

	template<typename F = ::jint>
	static auto TOUCHSTATE_DOWN() {
		static_assert(field_signatures[jField<F>("TOUCHSTATE_DOWN")] != -1);
		return sat<F>("TOUCHSTATE_DOWN");
	}

	template<typename F = ::jint>
	static auto TOUCHSTATE_MOVE() {
		static_assert(field_signatures[jField<F>("TOUCHSTATE_MOVE")] != -1);
		return sat<F>("TOUCHSTATE_MOVE");
	}

	template<typename F = ::jint>
	static auto TOUCHSTATE_UP() {
		static_assert(field_signatures[jField<F>("TOUCHSTATE_UP")] != -1);
		return sat<F>("TOUCHSTATE_UP");
	}

	template<typename F = ::jint>
	static auto TRAIL() {
		static_assert(field_signatures[jField<F>("TRAIL")] != -1);
		return sat<F>("TRAIL");
	}

	template<typename F = ::jint>
	static auto TRANSPARENCY_ALPHA() {
		static_assert(field_signatures[jField<F>("TRANSPARENCY_ALPHA")] != -1);
		return sat<F>("TRANSPARENCY_ALPHA");
	}

	template<typename F = ::jint>
	static auto TRANSPARENCY_MASK() {
		static_assert(field_signatures[jField<F>("TRANSPARENCY_MASK")] != -1);
		return sat<F>("TRANSPARENCY_MASK");
	}

	template<typename F = ::jint>
	static auto TRANSPARENCY_NONE() {
		static_assert(field_signatures[jField<F>("TRANSPARENCY_NONE")] != -1);
		return sat<F>("TRANSPARENCY_NONE");
	}

	template<typename F = ::jint>
	static auto TRANSPARENCY_PIXEL() {
		static_assert(field_signatures[jField<F>("TRANSPARENCY_PIXEL")] != -1);
		return sat<F>("TRANSPARENCY_PIXEL");
	}

	template<typename F = ::jint>
	static auto TRANSPARENT() {
		static_assert(field_signatures[jField<F>("TRANSPARENT")] != -1);
		return sat<F>("TRANSPARENT");
	}

	template<typename F = ::jint>
	static auto TRAVERSE_ARROW_NEXT() {
		static_assert(field_signatures[jField<F>("TRAVERSE_ARROW_NEXT")] != -1);
		return sat<F>("TRAVERSE_ARROW_NEXT");
	}

	template<typename F = ::jint>
	static auto TRAVERSE_ARROW_PREVIOUS() {
		static_assert(field_signatures[jField<F>("TRAVERSE_ARROW_PREVIOUS")] != -1);
		return sat<F>("TRAVERSE_ARROW_PREVIOUS");
	}

	template<typename F = ::jint>
	static auto TRAVERSE_ESCAPE() {
		static_assert(field_signatures[jField<F>("TRAVERSE_ESCAPE")] != -1);
		return sat<F>("TRAVERSE_ESCAPE");
	}

	template<typename F = ::jint>
	static auto TRAVERSE_MNEMONIC() {
		static_assert(field_signatures[jField<F>("TRAVERSE_MNEMONIC")] != -1);
		return sat<F>("TRAVERSE_MNEMONIC");
	}

	template<typename F = ::jint>
	static auto TRAVERSE_NONE() {
		static_assert(field_signatures[jField<F>("TRAVERSE_NONE")] != -1);
		return sat<F>("TRAVERSE_NONE");
	}

	template<typename F = ::jint>
	static auto TRAVERSE_PAGE_NEXT() {
		static_assert(field_signatures[jField<F>("TRAVERSE_PAGE_NEXT")] != -1);
		return sat<F>("TRAVERSE_PAGE_NEXT");
	}

	template<typename F = ::jint>
	static auto TRAVERSE_PAGE_PREVIOUS() {
		static_assert(field_signatures[jField<F>("TRAVERSE_PAGE_PREVIOUS")] != -1);
		return sat<F>("TRAVERSE_PAGE_PREVIOUS");
	}

	template<typename F = ::jint>
	static auto TRAVERSE_RETURN() {
		static_assert(field_signatures[jField<F>("TRAVERSE_RETURN")] != -1);
		return sat<F>("TRAVERSE_RETURN");
	}

	template<typename F = ::jint>
	static auto TRAVERSE_TAB_NEXT() {
		static_assert(field_signatures[jField<F>("TRAVERSE_TAB_NEXT")] != -1);
		return sat<F>("TRAVERSE_TAB_NEXT");
	}

	template<typename F = ::jint>
	static auto TRAVERSE_TAB_PREVIOUS() {
		static_assert(field_signatures[jField<F>("TRAVERSE_TAB_PREVIOUS")] != -1);
		return sat<F>("TRAVERSE_TAB_PREVIOUS");
	}

	template<typename F = ::jint>
	static auto Touch() {
		static_assert(field_signatures[jField<F>("Touch")] != -1);
		return sat<F>("Touch");
	}

	template<typename F = ::jint>
	static auto Traverse() {
		static_assert(field_signatures[jField<F>("Traverse")] != -1);
		return sat<F>("Traverse");
	}

	template<typename F = ::jint>
	static auto UNDERLINE_DOUBLE() {
		static_assert(field_signatures[jField<F>("UNDERLINE_DOUBLE")] != -1);
		return sat<F>("UNDERLINE_DOUBLE");
	}

	template<typename F = ::jint>
	static auto UNDERLINE_ERROR() {
		static_assert(field_signatures[jField<F>("UNDERLINE_ERROR")] != -1);
		return sat<F>("UNDERLINE_ERROR");
	}

	template<typename F = ::jint>
	static auto UNDERLINE_LINK() {
		static_assert(field_signatures[jField<F>("UNDERLINE_LINK")] != -1);
		return sat<F>("UNDERLINE_LINK");
	}

	template<typename F = ::jint>
	static auto UNDERLINE_SINGLE() {
		static_assert(field_signatures[jField<F>("UNDERLINE_SINGLE")] != -1);
		return sat<F>("UNDERLINE_SINGLE");
	}

	template<typename F = ::jint>
	static auto UNDERLINE_SQUIGGLE() {
		static_assert(field_signatures[jField<F>("UNDERLINE_SQUIGGLE")] != -1);
		return sat<F>("UNDERLINE_SQUIGGLE");
	}

	template<typename F = ::jint>
	static auto UP() {
		static_assert(field_signatures[jField<F>("UP")] != -1);
		return sat<F>("UP");
	}

	template<typename F = ::jint>
	static auto VERTICAL() {
		static_assert(field_signatures[jField<F>("VERTICAL")] != -1);
		return sat<F>("VERTICAL");
	}

	template<typename F = ::jint>
	static auto VIRTUAL() {
		static_assert(field_signatures[jField<F>("VIRTUAL")] != -1);
		return sat<F>("VIRTUAL");
	}

	template<typename F = ::jint>
	static auto V_SCROLL() {
		static_assert(field_signatures[jField<F>("V_SCROLL")] != -1);
		return sat<F>("V_SCROLL");
	}

	template<typename F = ::jint>
	static auto Verify() {
		static_assert(field_signatures[jField<F>("Verify")] != -1);
		return sat<F>("Verify");
	}

	template<typename F = ::jint>
	static auto WEBKIT() {
		static_assert(field_signatures[jField<F>("WEBKIT")] != -1);
		return sat<F>("WEBKIT");
	}

	template<typename F = ::jint>
	static auto WRAP() {
		static_assert(field_signatures[jField<F>("WRAP")] != -1);
		return sat<F>("WRAP");
	}

	template<typename F = ::jint>
	static auto YES() {
		static_assert(field_signatures[jField<F>("YES")] != -1);
		return sat<F>("YES");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::jint)>("error"), //
		jMethod<::jvoid(::jint, ::java::lang::Throwable)>("error"), //
		jMethod<::jvoid(::jint, ::java::lang::Throwable, ::java::lang::String)>("error"), //
		jMethod<::java::lang::String(::java::lang::String)>("getMessage"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::lang::Object *)>("getMessage"), //
		jMethod<::java::lang::String()>("getPlatform"), //
		jMethod<::jint()>("getVersion"), //
		jMethod<::jboolean()>("isLoadable"), //
	};

	template<typename R = ::jvoid, typename... Args>
	static auto error(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("error")] != -1);
		return scall<R>("error", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getMessage(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMessage")] != -1);
		return scall<R>("getMessage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getPlatform(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPlatform")] != -1);
		return scall<R>("getPlatform", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getVersion(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVersion")] != -1);
		return scall<R>("getVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isLoadable(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLoadable")] != -1);
		return scall<R>("isLoadable", std::forward<Args>(args)...);
	}

};

#endif
