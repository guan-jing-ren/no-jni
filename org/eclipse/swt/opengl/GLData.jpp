#ifndef org_eclipse_swt_opengl_GLData_HPP
#define org_eclipse_swt_opengl_GLData_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::opengl::GLData : public jObject<::org::eclipse::swt::opengl::GLData, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_opengl / "GLData";

	constexpr static Enume field_signatures{
		jField<::jint>("accumAlphaSize"), //
		jField<::jint>("accumBlueSize"), //
		jField<::jint>("accumGreenSize"), //
		jField<::jint>("accumRedSize"), //
		jField<::jint>("alphaSize"), //
		jField<::jint>("blueSize"), //
		jField<::jint>("depthSize"), //
		jField<::jboolean>("doubleBuffer"), //
		jField<::jint>("greenSize"), //
		jField<::jint>("redSize"), //
		jField<::jint>("sampleBuffers"), //
		jField<::jint>("samples"), //
		jField<::org::eclipse::swt::opengl::GLCanvas>("shareContext"), //
		jField<::jint>("stencilSize"), //
		jField<::jboolean>("stereo"), //
	};

	template<typename F = ::jint>
	auto accumAlphaSize() const {
		static_assert(field_signatures[jField<F>("accumAlphaSize")] != -1);
		return at<F>("accumAlphaSize");
	}

	template<typename F = ::jint>
	auto accumBlueSize() const {
		static_assert(field_signatures[jField<F>("accumBlueSize")] != -1);
		return at<F>("accumBlueSize");
	}

	template<typename F = ::jint>
	auto accumGreenSize() const {
		static_assert(field_signatures[jField<F>("accumGreenSize")] != -1);
		return at<F>("accumGreenSize");
	}

	template<typename F = ::jint>
	auto accumRedSize() const {
		static_assert(field_signatures[jField<F>("accumRedSize")] != -1);
		return at<F>("accumRedSize");
	}

	template<typename F = ::jint>
	auto alphaSize() const {
		static_assert(field_signatures[jField<F>("alphaSize")] != -1);
		return at<F>("alphaSize");
	}

	template<typename F = ::jint>
	auto blueSize() const {
		static_assert(field_signatures[jField<F>("blueSize")] != -1);
		return at<F>("blueSize");
	}

	template<typename F = ::jint>
	auto depthSize() const {
		static_assert(field_signatures[jField<F>("depthSize")] != -1);
		return at<F>("depthSize");
	}

	template<typename F = ::jboolean>
	auto doubleBuffer() const {
		static_assert(field_signatures[jField<F>("doubleBuffer")] != -1);
		return at<F>("doubleBuffer");
	}

	template<typename F = ::jint>
	auto greenSize() const {
		static_assert(field_signatures[jField<F>("greenSize")] != -1);
		return at<F>("greenSize");
	}

	template<typename F = ::jint>
	auto redSize() const {
		static_assert(field_signatures[jField<F>("redSize")] != -1);
		return at<F>("redSize");
	}

	template<typename F = ::jint>
	auto sampleBuffers() const {
		static_assert(field_signatures[jField<F>("sampleBuffers")] != -1);
		return at<F>("sampleBuffers");
	}

	template<typename F = ::jint>
	auto samples() const {
		static_assert(field_signatures[jField<F>("samples")] != -1);
		return at<F>("samples");
	}

	template<typename F = ::org::eclipse::swt::opengl::GLCanvas>
	auto shareContext() const {
		static_assert(field_signatures[jField<F>("shareContext")] != -1);
		return at<F>("shareContext");
	}

	template<typename F = ::jint>
	auto stencilSize() const {
		static_assert(field_signatures[jField<F>("stencilSize")] != -1);
		return at<F>("stencilSize");
	}

	template<typename F = ::jboolean>
	auto stereo() const {
		static_assert(field_signatures[jField<F>("stereo")] != -1);
		return at<F>("stereo");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
