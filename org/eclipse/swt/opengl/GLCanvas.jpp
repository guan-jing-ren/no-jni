#ifndef org_eclipse_swt_opengl_GLCanvas_HPP
#define org_eclipse_swt_opengl_GLCanvas_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::opengl::GLCanvas : public jObject<::org::eclipse::swt::opengl::GLCanvas, ::org::eclipse::swt::widgets::Canvas> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_opengl / "GLCanvas";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Composite, ::jint, ::org::eclipse::swt::opengl::GLData)>(), //
		jMethod<::org::eclipse::swt::opengl::GLData()>("getGLData"), //
		jMethod<::jboolean()>("isCurrent"), //
		jMethod<::jvoid()>("setCurrent"), //
		jMethod<::jvoid()>("swapBuffers"), //
	};

	template<typename R = ::org::eclipse::swt::opengl::GLData, typename... Args>
	auto getGLData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGLData")] != -1);
		return call<R>("getGLData", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCurrent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCurrent")] != -1);
		return call<R>("isCurrent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCurrent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCurrent")] != -1);
		return call<R>("setCurrent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto swapBuffers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("swapBuffers")] != -1);
		return call<R>("swapBuffers", std::forward<Args>(args)...);
	}

};

#endif
