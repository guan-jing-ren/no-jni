#ifndef org_eclipse_swt_dnd_DropTarget_HPP
#define org_eclipse_swt_dnd_DropTarget_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::dnd::DropTarget : public jObject<::org::eclipse::swt::dnd::DropTarget, ::org::eclipse::swt::widgets::Widget> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_dnd / "DropTarget";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Control, ::jint)>(), //
		jMethod<::jvoid(::org::eclipse::swt::dnd::DropTargetListener)>("addDropListener"), //
		jMethod<::org::eclipse::swt::widgets::Control()>("getControl"), //
		jMethod<::org::eclipse::swt::dnd::DropTargetListener *()>("getDropListeners"), //
		jMethod<::org::eclipse::swt::dnd::DropTargetEffect()>("getDropTargetEffect"), //
		jMethod<::org::eclipse::swt::dnd::Transfer *()>("getTransfer"), //
		jMethod<::jvoid(::org::eclipse::swt::dnd::DropTargetListener)>("removeDropListener"), //
		jMethod<::jvoid(::org::eclipse::swt::dnd::DropTargetEffect)>("setDropTargetEffect"), //
		jMethod<::jvoid(::org::eclipse::swt::dnd::Transfer *)>("setTransfer"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addDropListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addDropListener")] != -1);
		return call<R>("addDropListener", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Control, typename... Args>
	auto getControl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getControl")] != -1);
		return call<R>("getControl", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::dnd::DropTargetListener *, typename... Args>
	auto getDropListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDropListeners")] != -1);
		return call<R>("getDropListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::dnd::DropTargetEffect, typename... Args>
	auto getDropTargetEffect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDropTargetEffect")] != -1);
		return call<R>("getDropTargetEffect", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::dnd::Transfer *, typename... Args>
	auto getTransfer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransfer")] != -1);
		return call<R>("getTransfer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeDropListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeDropListener")] != -1);
		return call<R>("removeDropListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDropTargetEffect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDropTargetEffect")] != -1);
		return call<R>("setDropTargetEffect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTransfer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTransfer")] != -1);
		return call<R>("setTransfer", std::forward<Args>(args)...);
	}

};

#endif
