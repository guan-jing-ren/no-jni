#ifndef org_eclipse_swt_dnd_DragSource_HPP
#define org_eclipse_swt_dnd_DragSource_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::dnd::DragSource : public jObject<::org::eclipse::swt::dnd::DragSource, ::org::eclipse::swt::widgets::Widget> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_dnd / "DragSource";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Control, ::jint)>(), //
		jMethod<::jvoid(::org::eclipse::swt::dnd::DragSourceListener)>("addDragListener"), //
		jMethod<::org::eclipse::swt::widgets::Control()>("getControl"), //
		jMethod<::org::eclipse::swt::dnd::DragSourceListener *()>("getDragListeners"), //
		jMethod<::org::eclipse::swt::dnd::DragSourceEffect()>("getDragSourceEffect"), //
		jMethod<::org::eclipse::swt::dnd::Transfer *()>("getTransfer"), //
		jMethod<::jvoid(::org::eclipse::swt::dnd::DragSourceListener)>("removeDragListener"), //
		jMethod<::jvoid(::org::eclipse::swt::dnd::DragSourceEffect)>("setDragSourceEffect"), //
		jMethod<::jvoid(::org::eclipse::swt::dnd::Transfer *)>("setTransfer"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addDragListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addDragListener")] != -1);
		return call<R>("addDragListener", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Control, typename... Args>
	auto getControl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getControl")] != -1);
		return call<R>("getControl", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::dnd::DragSourceListener *, typename... Args>
	auto getDragListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDragListeners")] != -1);
		return call<R>("getDragListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::dnd::DragSourceEffect, typename... Args>
	auto getDragSourceEffect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDragSourceEffect")] != -1);
		return call<R>("getDragSourceEffect", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::dnd::Transfer *, typename... Args>
	auto getTransfer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransfer")] != -1);
		return call<R>("getTransfer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeDragListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeDragListener")] != -1);
		return call<R>("removeDragListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDragSourceEffect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDragSourceEffect")] != -1);
		return call<R>("setDragSourceEffect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTransfer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTransfer")] != -1);
		return call<R>("setTransfer", std::forward<Args>(args)...);
	}

};

#endif
