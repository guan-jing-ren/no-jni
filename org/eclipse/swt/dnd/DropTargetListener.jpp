#ifndef org_eclipse_swt_dnd_DropTargetListener_HPP
#define org_eclipse_swt_dnd_DropTargetListener_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::dnd::DropTargetListener : public jObject<::org::eclipse::swt::dnd::DropTargetListener, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_dnd / "DropTargetListener";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::org::eclipse::swt::dnd::DropTargetEvent)>("dragEnter"), //
		jMethod<::jvoid(::org::eclipse::swt::dnd::DropTargetEvent)>("dragLeave"), //
		jMethod<::jvoid(::org::eclipse::swt::dnd::DropTargetEvent)>("dragOperationChanged"), //
		jMethod<::jvoid(::org::eclipse::swt::dnd::DropTargetEvent)>("dragOver"), //
		jMethod<::jvoid(::org::eclipse::swt::dnd::DropTargetEvent)>("drop"), //
		jMethod<::jvoid(::org::eclipse::swt::dnd::DropTargetEvent)>("dropAccept"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto dragEnter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dragEnter")] != -1);
		return call<R>("dragEnter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dragLeave(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dragLeave")] != -1);
		return call<R>("dragLeave", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dragOperationChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dragOperationChanged")] != -1);
		return call<R>("dragOperationChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dragOver(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dragOver")] != -1);
		return call<R>("dragOver", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drop")] != -1);
		return call<R>("drop", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dropAccept(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dropAccept")] != -1);
		return call<R>("dropAccept", std::forward<Args>(args)...);
	}

};

#endif
