#ifndef org_eclipse_swt_dnd_FileTransfer_HPP
#define org_eclipse_swt_dnd_FileTransfer_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::dnd::FileTransfer : public jObject<::org::eclipse::swt::dnd::FileTransfer, ::org::eclipse::swt::dnd::ByteArrayTransfer> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_dnd / "FileTransfer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::org::eclipse::swt::dnd::FileTransfer()>("getInstance"), //
		jMethod<::jvoid(::java::lang::Object, ::org::eclipse::swt::dnd::TransferData)>("javaToNative"), //
		jMethod<::java::lang::Object(::org::eclipse::swt::dnd::TransferData)>("nativeToJava"), //
	};

	template<typename R = ::org::eclipse::swt::dnd::FileTransfer, typename... Args>
	static auto getInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInstance")] != -1);
		return scall<R>("getInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto javaToNative(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("javaToNative")] != -1);
		return call<R>("javaToNative", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto nativeToJava(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nativeToJava")] != -1);
		return call<R>("nativeToJava", std::forward<Args>(args)...);
	}

};

#endif
