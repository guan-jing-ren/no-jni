#ifndef org_eclipse_swt_dnd_TransferData_HPP
#define org_eclipse_swt_dnd_TransferData_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::dnd::TransferData : public jObject<::org::eclipse::swt::dnd::TransferData, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_dnd / "TransferData";

	constexpr static Enume field_signatures{
		jField<::jint>("format"), //
		jField<::jint>("length"), //
		jField<::jlong>("pValue"), //
		jField<::jint>("result"), //
		jField<::jlong>("type"), //
	};

	template<typename F = ::jint>
	auto format() const {
		static_assert(field_signatures[jField<F>("format")] != -1);
		return at<F>("format");
	}

	template<typename F = ::jint>
	auto length() const {
		static_assert(field_signatures[jField<F>("length")] != -1);
		return at<F>("length");
	}

	template<typename F = ::jlong>
	auto pValue() const {
		static_assert(field_signatures[jField<F>("pValue")] != -1);
		return at<F>("pValue");
	}

	template<typename F = ::jint>
	auto result() const {
		static_assert(field_signatures[jField<F>("result")] != -1);
		return at<F>("result");
	}

	template<typename F = ::jlong>
	auto type() const {
		static_assert(field_signatures[jField<F>("type")] != -1);
		return at<F>("type");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
	};

};

#endif
