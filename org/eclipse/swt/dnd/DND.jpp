#ifndef org_eclipse_swt_dnd_DND_HPP
#define org_eclipse_swt_dnd_DND_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::dnd::DND : public jObject<::org::eclipse::swt::dnd::DND, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_dnd / "DND";

	constexpr static Enume field_signatures{
		jField<::jint>("CLIPBOARD"), //
		jField<::java::lang::String>("DRAG_SOURCE_KEY"), //
		jField<::jint>("DROP_COPY"), //
		jField<::jint>("DROP_DEFAULT"), //
		jField<::jint>("DROP_LINK"), //
		jField<::jint>("DROP_MOVE"), //
		jField<::jint>("DROP_NONE"), //
		jField<::java::lang::String>("DROP_TARGET_KEY"), //
		jField<::jint>("DROP_TARGET_MOVE"), //
		jField<::jint>("DragEnd"), //
		jField<::jint>("DragEnter"), //
		jField<::jint>("DragLeave"), //
		jField<::jint>("DragOperationChanged"), //
		jField<::jint>("DragOver"), //
		jField<::jint>("DragSetData"), //
		jField<::jint>("DragStart"), //
		jField<::jint>("Drop"), //
		jField<::jint>("DropAccept"), //
		jField<::jint>("ERROR_CANNOT_INIT_DRAG"), //
		jField<::jint>("ERROR_CANNOT_INIT_DROP"), //
		jField<::jint>("ERROR_CANNOT_SET_CLIPBOARD"), //
		jField<::jint>("ERROR_INVALID_DATA"), //
		jField<::jint>("FEEDBACK_EXPAND"), //
		jField<::jint>("FEEDBACK_INSERT_AFTER"), //
		jField<::jint>("FEEDBACK_INSERT_BEFORE"), //
		jField<::jint>("FEEDBACK_NONE"), //
		jField<::jint>("FEEDBACK_SCROLL"), //
		jField<::jint>("FEEDBACK_SELECT"), //
		jField<::jint>("SELECTION_CLIPBOARD"), //
	};

	template<typename F = ::jint>
	static auto CLIPBOARD() {
		static_assert(field_signatures[jField<F>("CLIPBOARD")] != -1);
		return sat<F>("CLIPBOARD");
	}

	template<typename F = ::java::lang::String>
	static auto DRAG_SOURCE_KEY() {
		static_assert(field_signatures[jField<F>("DRAG_SOURCE_KEY")] != -1);
		return sat<F>("DRAG_SOURCE_KEY");
	}

	template<typename F = ::jint>
	static auto DROP_COPY() {
		static_assert(field_signatures[jField<F>("DROP_COPY")] != -1);
		return sat<F>("DROP_COPY");
	}

	template<typename F = ::jint>
	static auto DROP_DEFAULT() {
		static_assert(field_signatures[jField<F>("DROP_DEFAULT")] != -1);
		return sat<F>("DROP_DEFAULT");
	}

	template<typename F = ::jint>
	static auto DROP_LINK() {
		static_assert(field_signatures[jField<F>("DROP_LINK")] != -1);
		return sat<F>("DROP_LINK");
	}

	template<typename F = ::jint>
	static auto DROP_MOVE() {
		static_assert(field_signatures[jField<F>("DROP_MOVE")] != -1);
		return sat<F>("DROP_MOVE");
	}

	template<typename F = ::jint>
	static auto DROP_NONE() {
		static_assert(field_signatures[jField<F>("DROP_NONE")] != -1);
		return sat<F>("DROP_NONE");
	}

	template<typename F = ::java::lang::String>
	static auto DROP_TARGET_KEY() {
		static_assert(field_signatures[jField<F>("DROP_TARGET_KEY")] != -1);
		return sat<F>("DROP_TARGET_KEY");
	}

	template<typename F = ::jint>
	static auto DROP_TARGET_MOVE() {
		static_assert(field_signatures[jField<F>("DROP_TARGET_MOVE")] != -1);
		return sat<F>("DROP_TARGET_MOVE");
	}

	template<typename F = ::jint>
	static auto DragEnd() {
		static_assert(field_signatures[jField<F>("DragEnd")] != -1);
		return sat<F>("DragEnd");
	}

	template<typename F = ::jint>
	static auto DragEnter() {
		static_assert(field_signatures[jField<F>("DragEnter")] != -1);
		return sat<F>("DragEnter");
	}

	template<typename F = ::jint>
	static auto DragLeave() {
		static_assert(field_signatures[jField<F>("DragLeave")] != -1);
		return sat<F>("DragLeave");
	}

	template<typename F = ::jint>
	static auto DragOperationChanged() {
		static_assert(field_signatures[jField<F>("DragOperationChanged")] != -1);
		return sat<F>("DragOperationChanged");
	}

	template<typename F = ::jint>
	static auto DragOver() {
		static_assert(field_signatures[jField<F>("DragOver")] != -1);
		return sat<F>("DragOver");
	}

	template<typename F = ::jint>
	static auto DragSetData() {
		static_assert(field_signatures[jField<F>("DragSetData")] != -1);
		return sat<F>("DragSetData");
	}

	template<typename F = ::jint>
	static auto DragStart() {
		static_assert(field_signatures[jField<F>("DragStart")] != -1);
		return sat<F>("DragStart");
	}

	template<typename F = ::jint>
	static auto Drop() {
		static_assert(field_signatures[jField<F>("Drop")] != -1);
		return sat<F>("Drop");
	}

	template<typename F = ::jint>
	static auto DropAccept() {
		static_assert(field_signatures[jField<F>("DropAccept")] != -1);
		return sat<F>("DropAccept");
	}

	template<typename F = ::jint>
	static auto ERROR_CANNOT_INIT_DRAG() {
		static_assert(field_signatures[jField<F>("ERROR_CANNOT_INIT_DRAG")] != -1);
		return sat<F>("ERROR_CANNOT_INIT_DRAG");
	}

	template<typename F = ::jint>
	static auto ERROR_CANNOT_INIT_DROP() {
		static_assert(field_signatures[jField<F>("ERROR_CANNOT_INIT_DROP")] != -1);
		return sat<F>("ERROR_CANNOT_INIT_DROP");
	}

	template<typename F = ::jint>
	static auto ERROR_CANNOT_SET_CLIPBOARD() {
		static_assert(field_signatures[jField<F>("ERROR_CANNOT_SET_CLIPBOARD")] != -1);
		return sat<F>("ERROR_CANNOT_SET_CLIPBOARD");
	}

	template<typename F = ::jint>
	static auto ERROR_INVALID_DATA() {
		static_assert(field_signatures[jField<F>("ERROR_INVALID_DATA")] != -1);
		return sat<F>("ERROR_INVALID_DATA");
	}

	template<typename F = ::jint>
	static auto FEEDBACK_EXPAND() {
		static_assert(field_signatures[jField<F>("FEEDBACK_EXPAND")] != -1);
		return sat<F>("FEEDBACK_EXPAND");
	}

	template<typename F = ::jint>
	static auto FEEDBACK_INSERT_AFTER() {
		static_assert(field_signatures[jField<F>("FEEDBACK_INSERT_AFTER")] != -1);
		return sat<F>("FEEDBACK_INSERT_AFTER");
	}

	template<typename F = ::jint>
	static auto FEEDBACK_INSERT_BEFORE() {
		static_assert(field_signatures[jField<F>("FEEDBACK_INSERT_BEFORE")] != -1);
		return sat<F>("FEEDBACK_INSERT_BEFORE");
	}

	template<typename F = ::jint>
	static auto FEEDBACK_NONE() {
		static_assert(field_signatures[jField<F>("FEEDBACK_NONE")] != -1);
		return sat<F>("FEEDBACK_NONE");
	}

	template<typename F = ::jint>
	static auto FEEDBACK_SCROLL() {
		static_assert(field_signatures[jField<F>("FEEDBACK_SCROLL")] != -1);
		return sat<F>("FEEDBACK_SCROLL");
	}

	template<typename F = ::jint>
	static auto FEEDBACK_SELECT() {
		static_assert(field_signatures[jField<F>("FEEDBACK_SELECT")] != -1);
		return sat<F>("FEEDBACK_SELECT");
	}

	template<typename F = ::jint>
	static auto SELECTION_CLIPBOARD() {
		static_assert(field_signatures[jField<F>("SELECTION_CLIPBOARD")] != -1);
		return sat<F>("SELECTION_CLIPBOARD");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::jint)>("error"), //
		jMethod<::jvoid(::jint, ::jint)>("error"), //
	};

	template<typename R = ::jvoid, typename... Args>
	static auto error(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("error")] != -1);
		return scall<R>("error", std::forward<Args>(args)...);
	}

};

#endif
