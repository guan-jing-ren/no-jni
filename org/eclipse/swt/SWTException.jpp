#ifndef org_eclipse_swt_SWTException_HPP
#define org_eclipse_swt_SWTException_HPP

#include "../../../jfwd_decl.hpp"

class ::org::eclipse::swt::SWTException : public jObject<::org::eclipse::swt::SWTException, ::java::lang::RuntimeException> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt / "SWTException";

	constexpr static Enume field_signatures{
		jField<::jint>("code"), //
		jField<::java::lang::Throwable>("throwable"), //
	};

	template<typename F = ::jint>
	auto code() const {
		static_assert(field_signatures[jField<F>("code")] != -1);
		return at<F>("code");
	}

	template<typename F = ::java::lang::Throwable>
	auto throwable() const {
		static_assert(field_signatures[jField<F>("throwable")] != -1);
		return at<F>("throwable");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint)>(), //
		jConstructor<::jvoid(::jint, ::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jMethod<::java::lang::Throwable()>("getCause"), //
		jMethod<::java::lang::String()>("getMessage"), //
		jMethod<::jvoid()>("printStackTrace"), //
	};

	template<typename R = ::java::lang::Throwable, typename... Args>
	auto getCause(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCause")] != -1);
		return call<R>("getCause", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMessage")] != -1);
		return call<R>("getMessage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto printStackTrace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("printStackTrace")] != -1);
		return call<R>("printStackTrace", std::forward<Args>(args)...);
	}

};

#endif
