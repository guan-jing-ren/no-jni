#ifndef org_eclipse_swt_custom_CTabFolder_HPP
#define org_eclipse_swt_custom_CTabFolder_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::custom::CTabFolder : public jObject<::org::eclipse::swt::custom::CTabFolder, ::org::eclipse::swt::widgets::Composite> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_custom / "CTabFolder";

	constexpr static Enume field_signatures{
		jField<::jint>("MIN_TAB_WIDTH"), //
		jField<::org::eclipse::swt::graphics::RGB>("borderInsideRGB"), //
		jField<::org::eclipse::swt::graphics::RGB>("borderMiddleRGB"), //
		jField<::org::eclipse::swt::graphics::RGB>("borderOutsideRGB"), //
		jField<::jint>("marginHeight"), //
		jField<::jint>("marginWidth"), //
	};

	template<typename F = ::jint>
	auto MIN_TAB_WIDTH() const {
		static_assert(field_signatures[jField<F>("MIN_TAB_WIDTH")] != -1);
		return at<F>("MIN_TAB_WIDTH");
	}

	template<typename F = ::org::eclipse::swt::graphics::RGB>
	static auto borderInsideRGB() {
		static_assert(field_signatures[jField<F>("borderInsideRGB")] != -1);
		return sat<F>("borderInsideRGB");
	}

	template<typename F = ::org::eclipse::swt::graphics::RGB>
	static auto borderMiddleRGB() {
		static_assert(field_signatures[jField<F>("borderMiddleRGB")] != -1);
		return sat<F>("borderMiddleRGB");
	}

	template<typename F = ::org::eclipse::swt::graphics::RGB>
	static auto borderOutsideRGB() {
		static_assert(field_signatures[jField<F>("borderOutsideRGB")] != -1);
		return sat<F>("borderOutsideRGB");
	}

	template<typename F = ::jint>
	auto marginHeight() const {
		static_assert(field_signatures[jField<F>("marginHeight")] != -1);
		return at<F>("marginHeight");
	}

	template<typename F = ::jint>
	auto marginWidth() const {
		static_assert(field_signatures[jField<F>("marginWidth")] != -1);
		return at<F>("marginWidth");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Composite, ::jint)>(), //
		jMethod<::jvoid(::org::eclipse::swt::custom::CTabFolder2Listener)>("addCTabFolder2Listener"), //
		jMethod<::jvoid(::org::eclipse::swt::custom::CTabFolderListener)>("addCTabFolderListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::SelectionListener)>("addSelectionListener"), //
		jMethod<::org::eclipse::swt::graphics::Rectangle(::jint, ::jint, ::jint, ::jint)>("computeTrim"), //
		jMethod<::jboolean()>("getBorderVisible"), //
		jMethod<::org::eclipse::swt::graphics::Rectangle()>("getClientArea"), //
		jMethod<::org::eclipse::swt::custom::CTabItem(::jint)>("getItem"), //
		jMethod<::org::eclipse::swt::custom::CTabItem(::org::eclipse::swt::graphics::Point)>("getItem"), //
		jMethod<::jint()>("getItemCount"), //
		jMethod<::org::eclipse::swt::custom::CTabItem *()>("getItems"), //
		jMethod<::jboolean()>("getMRUVisible"), //
		jMethod<::jboolean()>("getMaximizeVisible"), //
		jMethod<::jboolean()>("getMaximized"), //
		jMethod<::jboolean()>("getMinimizeVisible"), //
		jMethod<::jboolean()>("getMinimized"), //
		jMethod<::jint()>("getMinimumCharacters"), //
		jMethod<::org::eclipse::swt::custom::CTabFolderRenderer()>("getRenderer"), //
		jMethod<::org::eclipse::swt::custom::CTabItem()>("getSelection"), //
		jMethod<::org::eclipse::swt::graphics::Color()>("getSelectionBackground"), //
		jMethod<::org::eclipse::swt::graphics::Color()>("getSelectionForeground"), //
		jMethod<::jint()>("getSelectionIndex"), //
		jMethod<::jboolean()>("getSimple"), //
		jMethod<::jboolean()>("getSingle"), //
		jMethod<::jint()>("getStyle"), //
		jMethod<::jint()>("getTabHeight"), //
		jMethod<::jint()>("getTabPosition"), //
		jMethod<::org::eclipse::swt::widgets::Control()>("getTopRight"), //
		jMethod<::jint()>("getTopRightAlignment"), //
		jMethod<::jboolean()>("getUnselectedCloseVisible"), //
		jMethod<::jboolean()>("getUnselectedImageVisible"), //
		jMethod<::jint(::org::eclipse::swt::custom::CTabItem)>("indexOf"), //
		jMethod<::jvoid(::org::eclipse::swt::custom::CTabFolder2Listener)>("removeCTabFolder2Listener"), //
		jMethod<::jvoid(::org::eclipse::swt::custom::CTabFolderListener)>("removeCTabFolderListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::SelectionListener)>("removeSelectionListener"), //
		jMethod<::jvoid(::jint)>("reskin"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Color)>("setBackground"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Color *, ::jint *)>("setBackground"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Color *, ::jint *, ::jboolean)>("setBackground"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Image)>("setBackgroundImage"), //
		jMethod<::jvoid(::jboolean)>("setBorderVisible"), //
		jMethod<::jboolean()>("setFocus"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Font)>("setFont"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Color)>("setForeground"), //
		jMethod<::jvoid(::jint, ::jboolean)>("setInsertMark"), //
		jMethod<::jvoid(::org::eclipse::swt::custom::CTabItem, ::jboolean)>("setInsertMark"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::Layout)>("setLayout"), //
		jMethod<::jvoid(::jboolean)>("setMRUVisible"), //
		jMethod<::jvoid(::jboolean)>("setMaximizeVisible"), //
		jMethod<::jvoid(::jboolean)>("setMaximized"), //
		jMethod<::jvoid(::jboolean)>("setMinimizeVisible"), //
		jMethod<::jvoid(::jboolean)>("setMinimized"), //
		jMethod<::jvoid(::jint)>("setMinimumCharacters"), //
		jMethod<::jvoid(::org::eclipse::swt::custom::CTabFolderRenderer)>("setRenderer"), //
		jMethod<::jvoid(::jint)>("setSelection"), //
		jMethod<::jvoid(::org::eclipse::swt::custom::CTabItem)>("setSelection"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Color)>("setSelectionBackground"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Image)>("setSelectionBackground"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Color *, ::jint *)>("setSelectionBackground"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Color *, ::jint *, ::jboolean)>("setSelectionBackground"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Color)>("setSelectionForeground"), //
		jMethod<::jvoid(::jboolean)>("setSimple"), //
		jMethod<::jvoid(::jboolean)>("setSingle"), //
		jMethod<::jvoid(::jint)>("setTabHeight"), //
		jMethod<::jvoid(::jint)>("setTabPosition"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::Control)>("setTopRight"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::Control, ::jint)>("setTopRight"), //
		jMethod<::jvoid(::jboolean)>("setUnselectedCloseVisible"), //
		jMethod<::jvoid(::jboolean)>("setUnselectedImageVisible"), //
		jMethod<::jvoid(::org::eclipse::swt::custom::CTabItem)>("showItem"), //
		jMethod<::jvoid()>("showSelection"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addCTabFolder2Listener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addCTabFolder2Listener")] != -1);
		return call<R>("addCTabFolder2Listener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addCTabFolderListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addCTabFolderListener")] != -1);
		return call<R>("addCTabFolderListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addSelectionListener")] != -1);
		return call<R>("addSelectionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Rectangle, typename... Args>
	auto computeTrim(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("computeTrim")] != -1);
		return call<R>("computeTrim", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getBorderVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorderVisible")] != -1);
		return call<R>("getBorderVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Rectangle, typename... Args>
	auto getClientArea(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClientArea")] != -1);
		return call<R>("getClientArea", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::custom::CTabItem, typename... Args>
	auto getItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItem")] != -1);
		return call<R>("getItem", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getItemCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItemCount")] != -1);
		return call<R>("getItemCount", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::custom::CTabItem *, typename... Args>
	auto getItems(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItems")] != -1);
		return call<R>("getItems", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getMRUVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMRUVisible")] != -1);
		return call<R>("getMRUVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getMaximizeVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaximizeVisible")] != -1);
		return call<R>("getMaximizeVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getMaximized(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaximized")] != -1);
		return call<R>("getMaximized", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getMinimizeVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinimizeVisible")] != -1);
		return call<R>("getMinimizeVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getMinimized(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinimized")] != -1);
		return call<R>("getMinimized", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinimumCharacters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinimumCharacters")] != -1);
		return call<R>("getMinimumCharacters", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::custom::CTabFolderRenderer, typename... Args>
	auto getRenderer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRenderer")] != -1);
		return call<R>("getRenderer", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::custom::CTabItem, typename... Args>
	auto getSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelection")] != -1);
		return call<R>("getSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Color, typename... Args>
	auto getSelectionBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionBackground")] != -1);
		return call<R>("getSelectionBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Color, typename... Args>
	auto getSelectionForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionForeground")] != -1);
		return call<R>("getSelectionForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSelectionIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionIndex")] != -1);
		return call<R>("getSelectionIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getSimple(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSimple")] != -1);
		return call<R>("getSimple", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getSingle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSingle")] != -1);
		return call<R>("getSingle", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStyle")] != -1);
		return call<R>("getStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTabHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTabHeight")] != -1);
		return call<R>("getTabHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTabPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTabPosition")] != -1);
		return call<R>("getTabPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Control, typename... Args>
	auto getTopRight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTopRight")] != -1);
		return call<R>("getTopRight", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTopRightAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTopRightAlignment")] != -1);
		return call<R>("getTopRightAlignment", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getUnselectedCloseVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUnselectedCloseVisible")] != -1);
		return call<R>("getUnselectedCloseVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getUnselectedImageVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUnselectedImageVisible")] != -1);
		return call<R>("getUnselectedImageVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto indexOf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("indexOf")] != -1);
		return call<R>("indexOf", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeCTabFolder2Listener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeCTabFolder2Listener")] != -1);
		return call<R>("removeCTabFolder2Listener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeCTabFolderListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeCTabFolderListener")] != -1);
		return call<R>("removeCTabFolderListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeSelectionListener")] != -1);
		return call<R>("removeSelectionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reskin(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reskin")] != -1);
		return call<R>("reskin", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBackground")] != -1);
		return call<R>("setBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackgroundImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBackgroundImage")] != -1);
		return call<R>("setBackgroundImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBorderVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBorderVisible")] != -1);
		return call<R>("setBorderVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto setFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFocus")] != -1);
		return call<R>("setFocus", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFont")] != -1);
		return call<R>("setFont", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setForeground")] != -1);
		return call<R>("setForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInsertMark(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setInsertMark")] != -1);
		return call<R>("setInsertMark", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLayout")] != -1);
		return call<R>("setLayout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMRUVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMRUVisible")] != -1);
		return call<R>("setMRUVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaximizeVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMaximizeVisible")] != -1);
		return call<R>("setMaximizeVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaximized(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMaximized")] != -1);
		return call<R>("setMaximized", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMinimizeVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMinimizeVisible")] != -1);
		return call<R>("setMinimizeVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMinimized(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMinimized")] != -1);
		return call<R>("setMinimized", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMinimumCharacters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMinimumCharacters")] != -1);
		return call<R>("setMinimumCharacters", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRenderer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRenderer")] != -1);
		return call<R>("setRenderer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelection")] != -1);
		return call<R>("setSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectionBackground")] != -1);
		return call<R>("setSelectionBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectionForeground")] != -1);
		return call<R>("setSelectionForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSimple(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSimple")] != -1);
		return call<R>("setSimple", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSingle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSingle")] != -1);
		return call<R>("setSingle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTabHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTabHeight")] != -1);
		return call<R>("setTabHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTabPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTabPosition")] != -1);
		return call<R>("setTabPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTopRight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTopRight")] != -1);
		return call<R>("setTopRight", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUnselectedCloseVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUnselectedCloseVisible")] != -1);
		return call<R>("setUnselectedCloseVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUnselectedImageVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUnselectedImageVisible")] != -1);
		return call<R>("setUnselectedImageVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto showItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("showItem")] != -1);
		return call<R>("showItem", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto showSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("showSelection")] != -1);
		return call<R>("showSelection", std::forward<Args>(args)...);
	}

};

#endif
