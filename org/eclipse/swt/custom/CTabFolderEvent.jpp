#ifndef org_eclipse_swt_custom_CTabFolderEvent_HPP
#define org_eclipse_swt_custom_CTabFolderEvent_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::custom::CTabFolderEvent : public jObject<::org::eclipse::swt::custom::CTabFolderEvent, ::org::eclipse::swt::events::TypedEvent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_custom / "CTabFolderEvent";

	constexpr static Enume field_signatures{
		jField<::jboolean>("doit"), //
		jField<::jint>("height"), //
		jField<::org::eclipse::swt::widgets::Widget>("item"), //
		jField<::jint>("width"), //
		jField<::jint>("x"), //
		jField<::jint>("y"), //
	};

	template<typename F = ::jboolean>
	auto doit() const {
		static_assert(field_signatures[jField<F>("doit")] != -1);
		return at<F>("doit");
	}

	template<typename F = ::jint>
	auto height() const {
		static_assert(field_signatures[jField<F>("height")] != -1);
		return at<F>("height");
	}

	template<typename F = ::org::eclipse::swt::widgets::Widget>
	auto item() const {
		static_assert(field_signatures[jField<F>("item")] != -1);
		return at<F>("item");
	}

	template<typename F = ::jint>
	auto width() const {
		static_assert(field_signatures[jField<F>("width")] != -1);
		return at<F>("width");
	}

	template<typename F = ::jint>
	auto x() const {
		static_assert(field_signatures[jField<F>("x")] != -1);
		return at<F>("x");
	}

	template<typename F = ::jint>
	auto y() const {
		static_assert(field_signatures[jField<F>("y")] != -1);
		return at<F>("y");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
