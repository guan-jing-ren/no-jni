#ifndef org_eclipse_swt_custom_CTabFolderRenderer_HPP
#define org_eclipse_swt_custom_CTabFolderRenderer_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::custom::CTabFolderRenderer : public jObject<::org::eclipse::swt::custom::CTabFolderRenderer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_custom / "CTabFolderRenderer";

	constexpr static Enume field_signatures{
		jField<::jint>("MINIMUM_SIZE"), //
		jField<::jint>("PART_BACKGROUND"), //
		jField<::jint>("PART_BODY"), //
		jField<::jint>("PART_BORDER"), //
		jField<::jint>("PART_CHEVRON_BUTTON"), //
		jField<::jint>("PART_CLOSE_BUTTON"), //
		jField<::jint>("PART_HEADER"), //
		jField<::jint>("PART_MAX_BUTTON"), //
		jField<::jint>("PART_MIN_BUTTON"), //
	};

	template<typename F = ::jint>
	static auto MINIMUM_SIZE() {
		static_assert(field_signatures[jField<F>("MINIMUM_SIZE")] != -1);
		return sat<F>("MINIMUM_SIZE");
	}

	template<typename F = ::jint>
	static auto PART_BACKGROUND() {
		static_assert(field_signatures[jField<F>("PART_BACKGROUND")] != -1);
		return sat<F>("PART_BACKGROUND");
	}

	template<typename F = ::jint>
	static auto PART_BODY() {
		static_assert(field_signatures[jField<F>("PART_BODY")] != -1);
		return sat<F>("PART_BODY");
	}

	template<typename F = ::jint>
	static auto PART_BORDER() {
		static_assert(field_signatures[jField<F>("PART_BORDER")] != -1);
		return sat<F>("PART_BORDER");
	}

	template<typename F = ::jint>
	static auto PART_CHEVRON_BUTTON() {
		static_assert(field_signatures[jField<F>("PART_CHEVRON_BUTTON")] != -1);
		return sat<F>("PART_CHEVRON_BUTTON");
	}

	template<typename F = ::jint>
	static auto PART_CLOSE_BUTTON() {
		static_assert(field_signatures[jField<F>("PART_CLOSE_BUTTON")] != -1);
		return sat<F>("PART_CLOSE_BUTTON");
	}

	template<typename F = ::jint>
	static auto PART_HEADER() {
		static_assert(field_signatures[jField<F>("PART_HEADER")] != -1);
		return sat<F>("PART_HEADER");
	}

	template<typename F = ::jint>
	static auto PART_MAX_BUTTON() {
		static_assert(field_signatures[jField<F>("PART_MAX_BUTTON")] != -1);
		return sat<F>("PART_MAX_BUTTON");
	}

	template<typename F = ::jint>
	static auto PART_MIN_BUTTON() {
		static_assert(field_signatures[jField<F>("PART_MIN_BUTTON")] != -1);
		return sat<F>("PART_MIN_BUTTON");
	}

	constexpr static Enume method_signatures{
		cexprstr{"\0"}, //
	};

};

#endif
