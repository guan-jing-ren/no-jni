#ifndef org_eclipse_swt_custom_Bullet_HPP
#define org_eclipse_swt_custom_Bullet_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::custom::Bullet : public jObject<::org::eclipse::swt::custom::Bullet, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_custom / "Bullet";

	constexpr static Enume field_signatures{
		jField<::org::eclipse::swt::custom::StyleRange>("style"), //
		jField<::java::lang::String>("text"), //
		jField<::jint>("type"), //
	};

	template<typename F = ::org::eclipse::swt::custom::StyleRange>
	auto style() const {
		static_assert(field_signatures[jField<F>("style")] != -1);
		return at<F>("style");
	}

	template<typename F = ::java::lang::String>
	auto text() const {
		static_assert(field_signatures[jField<F>("text")] != -1);
		return at<F>("text");
	}

	template<typename F = ::jint>
	auto type() const {
		static_assert(field_signatures[jField<F>("type")] != -1);
		return at<F>("type");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint, ::org::eclipse::swt::custom::StyleRange)>(), //
		jConstructor<::jvoid(::org::eclipse::swt::custom::StyleRange)>(), //
		jMethod<::jint()>("hashCode"), //
	};

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

};

#endif
