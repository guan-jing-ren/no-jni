#ifndef org_eclipse_swt_custom_StyledText_HPP
#define org_eclipse_swt_custom_StyledText_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::custom::StyledText : public jObject<::org::eclipse::swt::custom::StyledText, ::org::eclipse::swt::widgets::Canvas> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_custom / "StyledText";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Composite, ::jint)>(), //
		jMethod<::jvoid(::org::eclipse::swt::custom::BidiSegmentListener)>("addBidiSegmentListener"), //
		jMethod<::jvoid(::org::eclipse::swt::custom::CaretListener)>("addCaretListener"), //
		jMethod<::jvoid(::org::eclipse::swt::custom::ExtendedModifyListener)>("addExtendedModifyListener"), //
		jMethod<::jvoid(::org::eclipse::swt::custom::LineBackgroundListener)>("addLineBackgroundListener"), //
		jMethod<::jvoid(::org::eclipse::swt::custom::LineStyleListener)>("addLineStyleListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::ModifyListener)>("addModifyListener"), //
		jMethod<::jvoid(::org::eclipse::swt::custom::PaintObjectListener)>("addPaintObjectListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::SelectionListener)>("addSelectionListener"), //
		jMethod<::jvoid(::org::eclipse::swt::custom::VerifyKeyListener)>("addVerifyKeyListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::VerifyListener)>("addVerifyListener"), //
		jMethod<::jvoid(::org::eclipse::swt::custom::MovementListener)>("addWordMovementListener"), //
		jMethod<::jvoid(::java::lang::String)>("append"), //
		jMethod<::org::eclipse::swt::graphics::Point(::jint, ::jint, ::jboolean)>("computeSize"), //
		jMethod<::jvoid()>("copy"), //
		jMethod<::jvoid(::jint)>("copy"), //
		jMethod<::jvoid()>("cut"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jint()>("getAlignment"), //
		jMethod<::jboolean()>("getAlwaysShowScrollBars"), //
		jMethod<::org::eclipse::swt::graphics::Color()>("getBackground"), //
		jMethod<::jint()>("getBaseline"), //
		jMethod<::jint(::jint)>("getBaseline"), //
		jMethod<::jboolean()>("getBidiColoring"), //
		jMethod<::jboolean()>("getBlockSelection"), //
		jMethod<::org::eclipse::swt::graphics::Rectangle()>("getBlockSelectionBounds"), //
		jMethod<::jint()>("getBottomMargin"), //
		jMethod<::jint()>("getCaretOffset"), //
		jMethod<::jint()>("getCharCount"), //
		jMethod<::org::eclipse::swt::custom::StyledTextContent()>("getContent"), //
		jMethod<::jboolean()>("getDoubleClickEnabled"), //
		jMethod<::jboolean()>("getDragDetect"), //
		jMethod<::jboolean()>("getEditable"), //
		jMethod<::org::eclipse::swt::graphics::Color()>("getForeground"), //
		jMethod<::jint()>("getHorizontalIndex"), //
		jMethod<::jint()>("getHorizontalPixel"), //
		jMethod<::jint()>("getIndent"), //
		jMethod<::jboolean()>("getJustify"), //
		jMethod<::jint(::jint)>("getKeyBinding"), //
		jMethod<::jint()>("getLeftMargin"), //
		jMethod<::java::lang::String(::jint)>("getLine"), //
		jMethod<::jint(::jint)>("getLineAlignment"), //
		jMethod<::jint(::jint)>("getLineAtOffset"), //
		jMethod<::org::eclipse::swt::graphics::Color(::jint)>("getLineBackground"), //
		jMethod<::org::eclipse::swt::custom::Bullet(::jint)>("getLineBullet"), //
		jMethod<::jint()>("getLineCount"), //
		jMethod<::java::lang::String()>("getLineDelimiter"), //
		jMethod<::jint()>("getLineHeight"), //
		jMethod<::jint(::jint)>("getLineHeight"), //
		jMethod<::jint(::jint)>("getLineIndent"), //
		jMethod<::jint(::jint)>("getLineIndex"), //
		jMethod<::jboolean(::jint)>("getLineJustify"), //
		jMethod<::jint(::jint)>("getLinePixel"), //
		jMethod<::jint()>("getLineSpacing"), //
		jMethod<::jint *(::jint)>("getLineTabStops"), //
		jMethod<::jint(::jint)>("getLineWrapIndent"), //
		jMethod<::org::eclipse::swt::graphics::Point(::jint)>("getLocationAtOffset"), //
		jMethod<::org::eclipse::swt::graphics::Color()>("getMarginColor"), //
		jMethod<::jint(::jint)>("getOffsetAtLine"), //
		jMethod<::jint(::org::eclipse::swt::graphics::Point)>("getOffsetAtLocation"), //
		jMethod<::jint()>("getOrientation"), //
		jMethod<::jint *()>("getRanges"), //
		jMethod<::jint *(::jint, ::jint)>("getRanges"), //
		jMethod<::jint()>("getRightMargin"), //
		jMethod<::org::eclipse::swt::graphics::Point()>("getSelection"), //
		jMethod<::org::eclipse::swt::graphics::Color()>("getSelectionBackground"), //
		jMethod<::jint()>("getSelectionCount"), //
		jMethod<::org::eclipse::swt::graphics::Color()>("getSelectionForeground"), //
		jMethod<::org::eclipse::swt::graphics::Point()>("getSelectionRange"), //
		jMethod<::jint *()>("getSelectionRanges"), //
		jMethod<::java::lang::String()>("getSelectionText"), //
		jMethod<::org::eclipse::swt::custom::StyleRange(::jint)>("getStyleRangeAtOffset"), //
		jMethod<::org::eclipse::swt::custom::StyleRange *()>("getStyleRanges"), //
		jMethod<::org::eclipse::swt::custom::StyleRange *(::jint, ::jint)>("getStyleRanges"), //
		jMethod<::org::eclipse::swt::custom::StyleRange *(::jint, ::jint, ::jboolean)>("getStyleRanges"), //
		jMethod<::org::eclipse::swt::custom::StyleRange *(::jboolean)>("getStyleRanges"), //
		jMethod<::jint *()>("getTabStops"), //
		jMethod<::jint()>("getTabs"), //
		jMethod<::java::lang::String()>("getText"), //
		jMethod<::java::lang::String(::jint, ::jint)>("getText"), //
		jMethod<::org::eclipse::swt::graphics::Rectangle(::jint, ::jint)>("getTextBounds"), //
		jMethod<::jint()>("getTextLimit"), //
		jMethod<::java::lang::String(::jint, ::jint)>("getTextRange"), //
		jMethod<::jint()>("getTopIndex"), //
		jMethod<::jint()>("getTopMargin"), //
		jMethod<::jint()>("getTopPixel"), //
		jMethod<::jboolean()>("getWordWrap"), //
		jMethod<::jint()>("getWrapIndent"), //
		jMethod<::jvoid(::java::lang::String)>("insert"), //
		jMethod<::jvoid(::jint)>("invokeAction"), //
		jMethod<::jboolean()>("isTextSelected"), //
		jMethod<::jvoid()>("paste"), //
		jMethod<::jvoid()>("print"), //
		jMethod<::java::lang::Runnable(::org::eclipse::swt::printing::Printer)>("print"), //
		jMethod<::java::lang::Runnable(::org::eclipse::swt::printing::Printer, ::org::eclipse::swt::custom::StyledTextPrintOptions)>("print"), //
		jMethod<::jvoid()>("redraw"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jboolean)>("redraw"), //
		jMethod<::jvoid(::jint, ::jint, ::jboolean)>("redrawRange"), //
		jMethod<::jvoid(::org::eclipse::swt::custom::BidiSegmentListener)>("removeBidiSegmentListener"), //
		jMethod<::jvoid(::org::eclipse::swt::custom::CaretListener)>("removeCaretListener"), //
		jMethod<::jvoid(::org::eclipse::swt::custom::ExtendedModifyListener)>("removeExtendedModifyListener"), //
		jMethod<::jvoid(::org::eclipse::swt::custom::LineBackgroundListener)>("removeLineBackgroundListener"), //
		jMethod<::jvoid(::org::eclipse::swt::custom::LineStyleListener)>("removeLineStyleListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::ModifyListener)>("removeModifyListener"), //
		jMethod<::jvoid(::org::eclipse::swt::custom::PaintObjectListener)>("removePaintObjectListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::SelectionListener)>("removeSelectionListener"), //
		jMethod<::jvoid(::org::eclipse::swt::custom::VerifyKeyListener)>("removeVerifyKeyListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::VerifyListener)>("removeVerifyListener"), //
		jMethod<::jvoid(::org::eclipse::swt::custom::MovementListener)>("removeWordMovementListener"), //
		jMethod<::jvoid(::jint, ::jint, ::org::eclipse::swt::custom::StyleRange *)>("replaceStyleRanges"), //
		jMethod<::jvoid(::jint, ::jint, ::java::lang::String)>("replaceTextRange"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jboolean)>("scroll"), //
		jMethod<::jvoid()>("selectAll"), //
		jMethod<::jvoid(::jint)>("setAlignment"), //
		jMethod<::jvoid(::jboolean)>("setAlwaysShowScrollBars"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Color)>("setBackground"), //
		jMethod<::jvoid(::jboolean)>("setBidiColoring"), //
		jMethod<::jvoid(::jboolean)>("setBlockSelection"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("setBlockSelectionBounds"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Rectangle)>("setBlockSelectionBounds"), //
		jMethod<::jvoid(::jint)>("setBottomMargin"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::Caret)>("setCaret"), //
		jMethod<::jvoid(::jint)>("setCaretOffset"), //
		jMethod<::jvoid(::org::eclipse::swt::custom::StyledTextContent)>("setContent"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Cursor)>("setCursor"), //
		jMethod<::jvoid(::jboolean)>("setDoubleClickEnabled"), //
		jMethod<::jvoid(::jboolean)>("setDragDetect"), //
		jMethod<::jvoid(::jboolean)>("setEditable"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Font)>("setFont"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Color)>("setForeground"), //
		jMethod<::jvoid(::jint)>("setHorizontalIndex"), //
		jMethod<::jvoid(::jint)>("setHorizontalPixel"), //
		jMethod<::jvoid(::jint)>("setIndent"), //
		jMethod<::jvoid(::jboolean)>("setJustify"), //
		jMethod<::jvoid(::jint, ::jint)>("setKeyBinding"), //
		jMethod<::jvoid(::jint)>("setLeftMargin"), //
		jMethod<::jvoid(::jint, ::jint, ::jint)>("setLineAlignment"), //
		jMethod<::jvoid(::jint, ::jint, ::org::eclipse::swt::graphics::Color)>("setLineBackground"), //
		jMethod<::jvoid(::jint, ::jint, ::org::eclipse::swt::custom::Bullet)>("setLineBullet"), //
		jMethod<::jvoid(::jint, ::jint, ::jint)>("setLineIndent"), //
		jMethod<::jvoid(::jint, ::jint, ::jboolean)>("setLineJustify"), //
		jMethod<::jvoid(::jint)>("setLineSpacing"), //
		jMethod<::jvoid(::jint, ::jint, ::jint *)>("setLineTabStops"), //
		jMethod<::jvoid(::jint, ::jint, ::jint)>("setLineWrapIndent"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Color)>("setMarginColor"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("setMargins"), //
		jMethod<::jvoid(::jint)>("setOrientation"), //
		jMethod<::jvoid(::jint)>("setRightMargin"), //
		jMethod<::jvoid(::jint)>("setSelection"), //
		jMethod<::jvoid(::jint, ::jint)>("setSelection"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Point)>("setSelection"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Color)>("setSelectionBackground"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Color)>("setSelectionForeground"), //
		jMethod<::jvoid(::jint, ::jint)>("setSelectionRange"), //
		jMethod<::jvoid(::org::eclipse::swt::custom::StyleRange)>("setStyleRange"), //
		jMethod<::jvoid(::jint, ::jint, ::jint *, ::org::eclipse::swt::custom::StyleRange *)>("setStyleRanges"), //
		jMethod<::jvoid(::jint *, ::org::eclipse::swt::custom::StyleRange *)>("setStyleRanges"), //
		jMethod<::jvoid(::org::eclipse::swt::custom::StyleRange *)>("setStyleRanges"), //
		jMethod<::jvoid(::jint *)>("setTabStops"), //
		jMethod<::jvoid(::jint)>("setTabs"), //
		jMethod<::jvoid(::java::lang::String)>("setText"), //
		jMethod<::jvoid(::jint)>("setTextDirection"), //
		jMethod<::jvoid(::jint)>("setTextLimit"), //
		jMethod<::jvoid(::jint)>("setTopIndex"), //
		jMethod<::jvoid(::jint)>("setTopMargin"), //
		jMethod<::jvoid(::jint)>("setTopPixel"), //
		jMethod<::jvoid(::jboolean)>("setWordWrap"), //
		jMethod<::jvoid(::jint)>("setWrapIndent"), //
		jMethod<::jvoid()>("showSelection"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addBidiSegmentListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addBidiSegmentListener")] != -1);
		return call<R>("addBidiSegmentListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addCaretListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addCaretListener")] != -1);
		return call<R>("addCaretListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addExtendedModifyListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addExtendedModifyListener")] != -1);
		return call<R>("addExtendedModifyListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addLineBackgroundListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addLineBackgroundListener")] != -1);
		return call<R>("addLineBackgroundListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addLineStyleListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addLineStyleListener")] != -1);
		return call<R>("addLineStyleListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addModifyListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addModifyListener")] != -1);
		return call<R>("addModifyListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addPaintObjectListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addPaintObjectListener")] != -1);
		return call<R>("addPaintObjectListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addSelectionListener")] != -1);
		return call<R>("addSelectionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addVerifyKeyListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addVerifyKeyListener")] != -1);
		return call<R>("addVerifyKeyListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addVerifyListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addVerifyListener")] != -1);
		return call<R>("addVerifyListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addWordMovementListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addWordMovementListener")] != -1);
		return call<R>("addWordMovementListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto append(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("append")] != -1);
		return call<R>("append", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point, typename... Args>
	auto computeSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("computeSize")] != -1);
		return call<R>("computeSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto copy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("copy")] != -1);
		return call<R>("copy", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto cut(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cut")] != -1);
		return call<R>("cut", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlignment")] != -1);
		return call<R>("getAlignment", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getAlwaysShowScrollBars(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlwaysShowScrollBars")] != -1);
		return call<R>("getAlwaysShowScrollBars", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Color, typename... Args>
	auto getBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBackground")] != -1);
		return call<R>("getBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBaseline(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBaseline")] != -1);
		return call<R>("getBaseline", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getBidiColoring(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBidiColoring")] != -1);
		return call<R>("getBidiColoring", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getBlockSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBlockSelection")] != -1);
		return call<R>("getBlockSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Rectangle, typename... Args>
	auto getBlockSelectionBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBlockSelectionBounds")] != -1);
		return call<R>("getBlockSelectionBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBottomMargin(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBottomMargin")] != -1);
		return call<R>("getBottomMargin", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCaretOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCaretOffset")] != -1);
		return call<R>("getCaretOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCharCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCharCount")] != -1);
		return call<R>("getCharCount", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::custom::StyledTextContent, typename... Args>
	auto getContent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContent")] != -1);
		return call<R>("getContent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getDoubleClickEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDoubleClickEnabled")] != -1);
		return call<R>("getDoubleClickEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getDragDetect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDragDetect")] != -1);
		return call<R>("getDragDetect", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getEditable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEditable")] != -1);
		return call<R>("getEditable", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Color, typename... Args>
	auto getForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getForeground")] != -1);
		return call<R>("getForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHorizontalIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHorizontalIndex")] != -1);
		return call<R>("getHorizontalIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHorizontalPixel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHorizontalPixel")] != -1);
		return call<R>("getHorizontalPixel", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getIndent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIndent")] != -1);
		return call<R>("getIndent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getJustify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJustify")] != -1);
		return call<R>("getJustify", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getKeyBinding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeyBinding")] != -1);
		return call<R>("getKeyBinding", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLeftMargin(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLeftMargin")] != -1);
		return call<R>("getLeftMargin", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLine")] != -1);
		return call<R>("getLine", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLineAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineAlignment")] != -1);
		return call<R>("getLineAlignment", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLineAtOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineAtOffset")] != -1);
		return call<R>("getLineAtOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Color, typename... Args>
	auto getLineBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineBackground")] != -1);
		return call<R>("getLineBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::custom::Bullet, typename... Args>
	auto getLineBullet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineBullet")] != -1);
		return call<R>("getLineBullet", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLineCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineCount")] != -1);
		return call<R>("getLineCount", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLineDelimiter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineDelimiter")] != -1);
		return call<R>("getLineDelimiter", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLineHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineHeight")] != -1);
		return call<R>("getLineHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLineIndent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineIndent")] != -1);
		return call<R>("getLineIndent", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLineIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineIndex")] != -1);
		return call<R>("getLineIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getLineJustify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineJustify")] != -1);
		return call<R>("getLineJustify", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLinePixel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLinePixel")] != -1);
		return call<R>("getLinePixel", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLineSpacing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineSpacing")] != -1);
		return call<R>("getLineSpacing", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getLineTabStops(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineTabStops")] != -1);
		return call<R>("getLineTabStops", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLineWrapIndent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineWrapIndent")] != -1);
		return call<R>("getLineWrapIndent", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point, typename... Args>
	auto getLocationAtOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocationAtOffset")] != -1);
		return call<R>("getLocationAtOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Color, typename... Args>
	auto getMarginColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMarginColor")] != -1);
		return call<R>("getMarginColor", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getOffsetAtLine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOffsetAtLine")] != -1);
		return call<R>("getOffsetAtLine", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getOffsetAtLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOffsetAtLocation")] != -1);
		return call<R>("getOffsetAtLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOrientation")] != -1);
		return call<R>("getOrientation", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getRanges(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRanges")] != -1);
		return call<R>("getRanges", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRightMargin(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRightMargin")] != -1);
		return call<R>("getRightMargin", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point, typename... Args>
	auto getSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelection")] != -1);
		return call<R>("getSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Color, typename... Args>
	auto getSelectionBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionBackground")] != -1);
		return call<R>("getSelectionBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSelectionCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionCount")] != -1);
		return call<R>("getSelectionCount", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Color, typename... Args>
	auto getSelectionForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionForeground")] != -1);
		return call<R>("getSelectionForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point, typename... Args>
	auto getSelectionRange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionRange")] != -1);
		return call<R>("getSelectionRange", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getSelectionRanges(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionRanges")] != -1);
		return call<R>("getSelectionRanges", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSelectionText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionText")] != -1);
		return call<R>("getSelectionText", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::custom::StyleRange, typename... Args>
	auto getStyleRangeAtOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStyleRangeAtOffset")] != -1);
		return call<R>("getStyleRangeAtOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::custom::StyleRange *, typename... Args>
	auto getStyleRanges(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStyleRanges")] != -1);
		return call<R>("getStyleRanges", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getTabStops(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTabStops")] != -1);
		return call<R>("getTabStops", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTabs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTabs")] != -1);
		return call<R>("getTabs", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getText")] != -1);
		return call<R>("getText", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Rectangle, typename... Args>
	auto getTextBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextBounds")] != -1);
		return call<R>("getTextBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTextLimit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextLimit")] != -1);
		return call<R>("getTextLimit", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTextRange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextRange")] != -1);
		return call<R>("getTextRange", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTopIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTopIndex")] != -1);
		return call<R>("getTopIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTopMargin(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTopMargin")] != -1);
		return call<R>("getTopMargin", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTopPixel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTopPixel")] != -1);
		return call<R>("getTopPixel", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getWordWrap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWordWrap")] != -1);
		return call<R>("getWordWrap", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWrapIndent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWrapIndent")] != -1);
		return call<R>("getWrapIndent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insert(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insert")] != -1);
		return call<R>("insert", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto invokeAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invokeAction")] != -1);
		return call<R>("invokeAction", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isTextSelected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isTextSelected")] != -1);
		return call<R>("isTextSelected", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paste(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paste")] != -1);
		return call<R>("paste", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto print(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("print")] != -1);
		return call<R>("print", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto redraw(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("redraw")] != -1);
		return call<R>("redraw", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto redrawRange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("redrawRange")] != -1);
		return call<R>("redrawRange", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeBidiSegmentListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeBidiSegmentListener")] != -1);
		return call<R>("removeBidiSegmentListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeCaretListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeCaretListener")] != -1);
		return call<R>("removeCaretListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeExtendedModifyListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeExtendedModifyListener")] != -1);
		return call<R>("removeExtendedModifyListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeLineBackgroundListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeLineBackgroundListener")] != -1);
		return call<R>("removeLineBackgroundListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeLineStyleListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeLineStyleListener")] != -1);
		return call<R>("removeLineStyleListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeModifyListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeModifyListener")] != -1);
		return call<R>("removeModifyListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removePaintObjectListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removePaintObjectListener")] != -1);
		return call<R>("removePaintObjectListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeSelectionListener")] != -1);
		return call<R>("removeSelectionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeVerifyKeyListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeVerifyKeyListener")] != -1);
		return call<R>("removeVerifyKeyListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeVerifyListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeVerifyListener")] != -1);
		return call<R>("removeVerifyListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeWordMovementListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeWordMovementListener")] != -1);
		return call<R>("removeWordMovementListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto replaceStyleRanges(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("replaceStyleRanges")] != -1);
		return call<R>("replaceStyleRanges", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto replaceTextRange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("replaceTextRange")] != -1);
		return call<R>("replaceTextRange", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto scroll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("scroll")] != -1);
		return call<R>("scroll", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto selectAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("selectAll")] != -1);
		return call<R>("selectAll", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAlignment")] != -1);
		return call<R>("setAlignment", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAlwaysShowScrollBars(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAlwaysShowScrollBars")] != -1);
		return call<R>("setAlwaysShowScrollBars", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBackground")] != -1);
		return call<R>("setBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBidiColoring(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBidiColoring")] != -1);
		return call<R>("setBidiColoring", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBlockSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBlockSelection")] != -1);
		return call<R>("setBlockSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBlockSelectionBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBlockSelectionBounds")] != -1);
		return call<R>("setBlockSelectionBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBottomMargin(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBottomMargin")] != -1);
		return call<R>("setBottomMargin", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCaret(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCaret")] != -1);
		return call<R>("setCaret", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCaretOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCaretOffset")] != -1);
		return call<R>("setCaretOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setContent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setContent")] != -1);
		return call<R>("setContent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCursor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCursor")] != -1);
		return call<R>("setCursor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDoubleClickEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDoubleClickEnabled")] != -1);
		return call<R>("setDoubleClickEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDragDetect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDragDetect")] != -1);
		return call<R>("setDragDetect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEditable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEditable")] != -1);
		return call<R>("setEditable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFont")] != -1);
		return call<R>("setFont", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setForeground")] != -1);
		return call<R>("setForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHorizontalIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHorizontalIndex")] != -1);
		return call<R>("setHorizontalIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHorizontalPixel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHorizontalPixel")] != -1);
		return call<R>("setHorizontalPixel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIndent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIndent")] != -1);
		return call<R>("setIndent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setJustify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setJustify")] != -1);
		return call<R>("setJustify", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setKeyBinding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setKeyBinding")] != -1);
		return call<R>("setKeyBinding", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLeftMargin(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLeftMargin")] != -1);
		return call<R>("setLeftMargin", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLineAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLineAlignment")] != -1);
		return call<R>("setLineAlignment", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLineBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLineBackground")] != -1);
		return call<R>("setLineBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLineBullet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLineBullet")] != -1);
		return call<R>("setLineBullet", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLineIndent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLineIndent")] != -1);
		return call<R>("setLineIndent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLineJustify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLineJustify")] != -1);
		return call<R>("setLineJustify", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLineSpacing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLineSpacing")] != -1);
		return call<R>("setLineSpacing", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLineTabStops(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLineTabStops")] != -1);
		return call<R>("setLineTabStops", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLineWrapIndent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLineWrapIndent")] != -1);
		return call<R>("setLineWrapIndent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMarginColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMarginColor")] != -1);
		return call<R>("setMarginColor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMargins(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMargins")] != -1);
		return call<R>("setMargins", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOrientation")] != -1);
		return call<R>("setOrientation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRightMargin(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRightMargin")] != -1);
		return call<R>("setRightMargin", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelection")] != -1);
		return call<R>("setSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectionBackground")] != -1);
		return call<R>("setSelectionBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectionForeground")] != -1);
		return call<R>("setSelectionForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionRange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectionRange")] != -1);
		return call<R>("setSelectionRange", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setStyleRange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setStyleRange")] != -1);
		return call<R>("setStyleRange", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setStyleRanges(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setStyleRanges")] != -1);
		return call<R>("setStyleRanges", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTabStops(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTabStops")] != -1);
		return call<R>("setTabStops", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTabs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTabs")] != -1);
		return call<R>("setTabs", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setText")] != -1);
		return call<R>("setText", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTextDirection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTextDirection")] != -1);
		return call<R>("setTextDirection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTextLimit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTextLimit")] != -1);
		return call<R>("setTextLimit", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTopIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTopIndex")] != -1);
		return call<R>("setTopIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTopMargin(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTopMargin")] != -1);
		return call<R>("setTopMargin", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTopPixel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTopPixel")] != -1);
		return call<R>("setTopPixel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWordWrap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setWordWrap")] != -1);
		return call<R>("setWordWrap", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWrapIndent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setWrapIndent")] != -1);
		return call<R>("setWrapIndent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto showSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("showSelection")] != -1);
		return call<R>("showSelection", std::forward<Args>(args)...);
	}

};

#endif
