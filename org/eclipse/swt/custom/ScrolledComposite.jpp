#ifndef org_eclipse_swt_custom_ScrolledComposite_HPP
#define org_eclipse_swt_custom_ScrolledComposite_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::custom::ScrolledComposite : public jObject<::org::eclipse::swt::custom::ScrolledComposite, ::org::eclipse::swt::widgets::Composite> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_custom / "ScrolledComposite";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Composite, ::jint)>(), //
		jMethod<::jboolean()>("getAlwaysShowScrollBars"), //
		jMethod<::org::eclipse::swt::widgets::Control()>("getContent"), //
		jMethod<::jboolean()>("getExpandHorizontal"), //
		jMethod<::jboolean()>("getExpandVertical"), //
		jMethod<::jint()>("getMinHeight"), //
		jMethod<::jint()>("getMinWidth"), //
		jMethod<::org::eclipse::swt::graphics::Point()>("getOrigin"), //
		jMethod<::jboolean()>("getShowFocusedControl"), //
		jMethod<::jvoid(::jboolean)>("setAlwaysShowScrollBars"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::Control)>("setContent"), //
		jMethod<::jvoid(::jboolean)>("setExpandHorizontal"), //
		jMethod<::jvoid(::jboolean)>("setExpandVertical"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::Layout)>("setLayout"), //
		jMethod<::jvoid(::jint)>("setMinHeight"), //
		jMethod<::jvoid(::jint, ::jint)>("setMinSize"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Point)>("setMinSize"), //
		jMethod<::jvoid(::jint)>("setMinWidth"), //
		jMethod<::jvoid(::jint, ::jint)>("setOrigin"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Point)>("setOrigin"), //
		jMethod<::jvoid(::jboolean)>("setShowFocusedControl"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::Control)>("showControl"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto getAlwaysShowScrollBars(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlwaysShowScrollBars")] != -1);
		return call<R>("getAlwaysShowScrollBars", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Control, typename... Args>
	auto getContent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContent")] != -1);
		return call<R>("getContent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getExpandHorizontal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExpandHorizontal")] != -1);
		return call<R>("getExpandHorizontal", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getExpandVertical(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExpandVertical")] != -1);
		return call<R>("getExpandVertical", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinHeight")] != -1);
		return call<R>("getMinHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinWidth")] != -1);
		return call<R>("getMinWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point, typename... Args>
	auto getOrigin(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOrigin")] != -1);
		return call<R>("getOrigin", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getShowFocusedControl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getShowFocusedControl")] != -1);
		return call<R>("getShowFocusedControl", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAlwaysShowScrollBars(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAlwaysShowScrollBars")] != -1);
		return call<R>("setAlwaysShowScrollBars", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setContent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setContent")] != -1);
		return call<R>("setContent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setExpandHorizontal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setExpandHorizontal")] != -1);
		return call<R>("setExpandHorizontal", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setExpandVertical(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setExpandVertical")] != -1);
		return call<R>("setExpandVertical", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLayout")] != -1);
		return call<R>("setLayout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMinHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMinHeight")] != -1);
		return call<R>("setMinHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMinSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMinSize")] != -1);
		return call<R>("setMinSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMinWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMinWidth")] != -1);
		return call<R>("setMinWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOrigin(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOrigin")] != -1);
		return call<R>("setOrigin", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setShowFocusedControl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setShowFocusedControl")] != -1);
		return call<R>("setShowFocusedControl", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto showControl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("showControl")] != -1);
		return call<R>("showControl", std::forward<Args>(args)...);
	}

};

#endif
