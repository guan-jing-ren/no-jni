#ifndef org_eclipse_swt_custom_TableEditor_HPP
#define org_eclipse_swt_custom_TableEditor_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::custom::TableEditor : public jObject<::org::eclipse::swt::custom::TableEditor, ::org::eclipse::swt::custom::ControlEditor> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_custom / "TableEditor";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Table)>(), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jint()>("getColumn"), //
		jMethod<::org::eclipse::swt::widgets::TableItem()>("getItem"), //
		jMethod<::jvoid()>("layout"), //
		jMethod<::jvoid(::jint)>("setColumn"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::Control)>("setEditor"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::Control, ::org::eclipse::swt::widgets::TableItem, ::jint)>("setEditor"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::TableItem)>("setItem"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumn")] != -1);
		return call<R>("getColumn", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::TableItem, typename... Args>
	auto getItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItem")] != -1);
		return call<R>("getItem", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto layout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("layout")] != -1);
		return call<R>("layout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setColumn")] != -1);
		return call<R>("setColumn", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEditor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEditor")] != -1);
		return call<R>("setEditor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setItem")] != -1);
		return call<R>("setItem", std::forward<Args>(args)...);
	}

};

#endif
