#ifndef org_eclipse_swt_custom_MovementEvent_HPP
#define org_eclipse_swt_custom_MovementEvent_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::custom::MovementEvent : public jObject<::org::eclipse::swt::custom::MovementEvent, ::org::eclipse::swt::events::TypedEvent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_custom / "MovementEvent";

	constexpr static Enume field_signatures{
		jField<::jint>("lineOffset"), //
		jField<::java::lang::String>("lineText"), //
		jField<::jint>("movement"), //
		jField<::jint>("newOffset"), //
		jField<::jint>("offset"), //
	};

	template<typename F = ::jint>
	auto lineOffset() const {
		static_assert(field_signatures[jField<F>("lineOffset")] != -1);
		return at<F>("lineOffset");
	}

	template<typename F = ::java::lang::String>
	auto lineText() const {
		static_assert(field_signatures[jField<F>("lineText")] != -1);
		return at<F>("lineText");
	}

	template<typename F = ::jint>
	auto movement() const {
		static_assert(field_signatures[jField<F>("movement")] != -1);
		return at<F>("movement");
	}

	template<typename F = ::jint>
	auto newOffset() const {
		static_assert(field_signatures[jField<F>("newOffset")] != -1);
		return at<F>("newOffset");
	}

	template<typename F = ::jint>
	auto offset() const {
		static_assert(field_signatures[jField<F>("offset")] != -1);
		return at<F>("offset");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::custom::StyledTextEvent)>(), //
	};

};

#endif
