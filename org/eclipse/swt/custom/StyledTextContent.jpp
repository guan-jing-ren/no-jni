#ifndef org_eclipse_swt_custom_StyledTextContent_HPP
#define org_eclipse_swt_custom_StyledTextContent_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::custom::StyledTextContent : public jObject<::org::eclipse::swt::custom::StyledTextContent, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_custom / "StyledTextContent";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::org::eclipse::swt::custom::TextChangeListener)>("addTextChangeListener"), //
		jMethod<::jint()>("getCharCount"), //
		jMethod<::java::lang::String(::jint)>("getLine"), //
		jMethod<::jint(::jint)>("getLineAtOffset"), //
		jMethod<::jint()>("getLineCount"), //
		jMethod<::java::lang::String()>("getLineDelimiter"), //
		jMethod<::jint(::jint)>("getOffsetAtLine"), //
		jMethod<::java::lang::String(::jint, ::jint)>("getTextRange"), //
		jMethod<::jvoid(::org::eclipse::swt::custom::TextChangeListener)>("removeTextChangeListener"), //
		jMethod<::jvoid(::jint, ::jint, ::java::lang::String)>("replaceTextRange"), //
		jMethod<::jvoid(::java::lang::String)>("setText"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addTextChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addTextChangeListener")] != -1);
		return call<R>("addTextChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCharCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCharCount")] != -1);
		return call<R>("getCharCount", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLine")] != -1);
		return call<R>("getLine", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLineAtOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineAtOffset")] != -1);
		return call<R>("getLineAtOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLineCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineCount")] != -1);
		return call<R>("getLineCount", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLineDelimiter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineDelimiter")] != -1);
		return call<R>("getLineDelimiter", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getOffsetAtLine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOffsetAtLine")] != -1);
		return call<R>("getOffsetAtLine", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTextRange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextRange")] != -1);
		return call<R>("getTextRange", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeTextChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeTextChangeListener")] != -1);
		return call<R>("removeTextChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto replaceTextRange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("replaceTextRange")] != -1);
		return call<R>("replaceTextRange", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setText")] != -1);
		return call<R>("setText", std::forward<Args>(args)...);
	}

};

#endif
