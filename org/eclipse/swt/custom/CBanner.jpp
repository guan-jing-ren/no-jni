#ifndef org_eclipse_swt_custom_CBanner_HPP
#define org_eclipse_swt_custom_CBanner_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::custom::CBanner : public jObject<::org::eclipse::swt::custom::CBanner, ::org::eclipse::swt::widgets::Composite> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_custom / "CBanner";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Composite, ::jint)>(), //
		jMethod<::org::eclipse::swt::widgets::Control()>("getBottom"), //
		jMethod<::org::eclipse::swt::graphics::Rectangle()>("getClientArea"), //
		jMethod<::org::eclipse::swt::widgets::Control()>("getLeft"), //
		jMethod<::org::eclipse::swt::widgets::Control()>("getRight"), //
		jMethod<::org::eclipse::swt::graphics::Point()>("getRightMinimumSize"), //
		jMethod<::jint()>("getRightWidth"), //
		jMethod<::jboolean()>("getSimple"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::Control)>("setBottom"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::Layout)>("setLayout"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::Control)>("setLeft"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::Control)>("setRight"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Point)>("setRightMinimumSize"), //
		jMethod<::jvoid(::jint)>("setRightWidth"), //
		jMethod<::jvoid(::jboolean)>("setSimple"), //
	};

	template<typename R = ::org::eclipse::swt::widgets::Control, typename... Args>
	auto getBottom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBottom")] != -1);
		return call<R>("getBottom", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Rectangle, typename... Args>
	auto getClientArea(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClientArea")] != -1);
		return call<R>("getClientArea", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Control, typename... Args>
	auto getLeft(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLeft")] != -1);
		return call<R>("getLeft", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Control, typename... Args>
	auto getRight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRight")] != -1);
		return call<R>("getRight", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point, typename... Args>
	auto getRightMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRightMinimumSize")] != -1);
		return call<R>("getRightMinimumSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRightWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRightWidth")] != -1);
		return call<R>("getRightWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getSimple(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSimple")] != -1);
		return call<R>("getSimple", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBottom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBottom")] != -1);
		return call<R>("setBottom", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLayout")] != -1);
		return call<R>("setLayout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLeft(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLeft")] != -1);
		return call<R>("setLeft", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRight")] != -1);
		return call<R>("setRight", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRightMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRightMinimumSize")] != -1);
		return call<R>("setRightMinimumSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRightWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRightWidth")] != -1);
		return call<R>("setRightWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSimple(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSimple")] != -1);
		return call<R>("setSimple", std::forward<Args>(args)...);
	}

};

#endif
