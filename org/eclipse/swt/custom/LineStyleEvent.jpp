#ifndef org_eclipse_swt_custom_LineStyleEvent_HPP
#define org_eclipse_swt_custom_LineStyleEvent_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::custom::LineStyleEvent : public jObject<::org::eclipse::swt::custom::LineStyleEvent, ::org::eclipse::swt::events::TypedEvent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_custom / "LineStyleEvent";

	constexpr static Enume field_signatures{
		jField<::jint>("alignment"), //
		jField<::org::eclipse::swt::custom::Bullet>("bullet"), //
		jField<::jint>("bulletIndex"), //
		jField<::jint>("indent"), //
		jField<::jboolean>("justify"), //
		jField<::jint>("lineOffset"), //
		jField<::java::lang::String>("lineText"), //
		jField<::jint *>("ranges"), //
		jField<::org::eclipse::swt::custom::StyleRange *>("styles"), //
		jField<::jint *>("tabStops"), //
		jField<::jint>("wrapIndent"), //
	};

	template<typename F = ::jint>
	auto alignment() const {
		static_assert(field_signatures[jField<F>("alignment")] != -1);
		return at<F>("alignment");
	}

	template<typename F = ::org::eclipse::swt::custom::Bullet>
	auto bullet() const {
		static_assert(field_signatures[jField<F>("bullet")] != -1);
		return at<F>("bullet");
	}

	template<typename F = ::jint>
	auto bulletIndex() const {
		static_assert(field_signatures[jField<F>("bulletIndex")] != -1);
		return at<F>("bulletIndex");
	}

	template<typename F = ::jint>
	auto indent() const {
		static_assert(field_signatures[jField<F>("indent")] != -1);
		return at<F>("indent");
	}

	template<typename F = ::jboolean>
	auto justify() const {
		static_assert(field_signatures[jField<F>("justify")] != -1);
		return at<F>("justify");
	}

	template<typename F = ::jint>
	auto lineOffset() const {
		static_assert(field_signatures[jField<F>("lineOffset")] != -1);
		return at<F>("lineOffset");
	}

	template<typename F = ::java::lang::String>
	auto lineText() const {
		static_assert(field_signatures[jField<F>("lineText")] != -1);
		return at<F>("lineText");
	}

	template<typename F = ::jint *>
	auto ranges() const {
		static_assert(field_signatures[jField<F>("ranges")] != -1);
		return at<F>("ranges");
	}

	template<typename F = ::org::eclipse::swt::custom::StyleRange *>
	auto styles() const {
		static_assert(field_signatures[jField<F>("styles")] != -1);
		return at<F>("styles");
	}

	template<typename F = ::jint *>
	auto tabStops() const {
		static_assert(field_signatures[jField<F>("tabStops")] != -1);
		return at<F>("tabStops");
	}

	template<typename F = ::jint>
	auto wrapIndent() const {
		static_assert(field_signatures[jField<F>("wrapIndent")] != -1);
		return at<F>("wrapIndent");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::custom::StyledTextEvent)>(), //
	};

};

#endif
