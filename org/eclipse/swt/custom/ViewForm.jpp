#ifndef org_eclipse_swt_custom_ViewForm_HPP
#define org_eclipse_swt_custom_ViewForm_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::custom::ViewForm : public jObject<::org::eclipse::swt::custom::ViewForm, ::org::eclipse::swt::widgets::Composite> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_custom / "ViewForm";

	constexpr static Enume field_signatures{
		jField<::org::eclipse::swt::graphics::RGB>("borderInsideRGB"), //
		jField<::org::eclipse::swt::graphics::RGB>("borderMiddleRGB"), //
		jField<::org::eclipse::swt::graphics::RGB>("borderOutsideRGB"), //
		jField<::jint>("horizontalSpacing"), //
		jField<::jint>("marginHeight"), //
		jField<::jint>("marginWidth"), //
		jField<::jint>("verticalSpacing"), //
	};

	template<typename F = ::org::eclipse::swt::graphics::RGB>
	static auto borderInsideRGB() {
		static_assert(field_signatures[jField<F>("borderInsideRGB")] != -1);
		return sat<F>("borderInsideRGB");
	}

	template<typename F = ::org::eclipse::swt::graphics::RGB>
	static auto borderMiddleRGB() {
		static_assert(field_signatures[jField<F>("borderMiddleRGB")] != -1);
		return sat<F>("borderMiddleRGB");
	}

	template<typename F = ::org::eclipse::swt::graphics::RGB>
	static auto borderOutsideRGB() {
		static_assert(field_signatures[jField<F>("borderOutsideRGB")] != -1);
		return sat<F>("borderOutsideRGB");
	}

	template<typename F = ::jint>
	auto horizontalSpacing() const {
		static_assert(field_signatures[jField<F>("horizontalSpacing")] != -1);
		return at<F>("horizontalSpacing");
	}

	template<typename F = ::jint>
	auto marginHeight() const {
		static_assert(field_signatures[jField<F>("marginHeight")] != -1);
		return at<F>("marginHeight");
	}

	template<typename F = ::jint>
	auto marginWidth() const {
		static_assert(field_signatures[jField<F>("marginWidth")] != -1);
		return at<F>("marginWidth");
	}

	template<typename F = ::jint>
	auto verticalSpacing() const {
		static_assert(field_signatures[jField<F>("verticalSpacing")] != -1);
		return at<F>("verticalSpacing");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Composite, ::jint)>(), //
		jMethod<::org::eclipse::swt::graphics::Rectangle(::jint, ::jint, ::jint, ::jint)>("computeTrim"), //
		jMethod<::org::eclipse::swt::graphics::Rectangle()>("getClientArea"), //
		jMethod<::org::eclipse::swt::widgets::Control()>("getContent"), //
		jMethod<::org::eclipse::swt::widgets::Control()>("getTopCenter"), //
		jMethod<::org::eclipse::swt::widgets::Control()>("getTopLeft"), //
		jMethod<::org::eclipse::swt::widgets::Control()>("getTopRight"), //
		jMethod<::jvoid(::jboolean)>("setBorderVisible"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::Control)>("setContent"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::Layout)>("setLayout"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::Control)>("setTopCenter"), //
		jMethod<::jvoid(::jboolean)>("setTopCenterSeparate"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::Control)>("setTopLeft"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::Control)>("setTopRight"), //
	};

	template<typename R = ::org::eclipse::swt::graphics::Rectangle, typename... Args>
	auto computeTrim(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("computeTrim")] != -1);
		return call<R>("computeTrim", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Rectangle, typename... Args>
	auto getClientArea(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClientArea")] != -1);
		return call<R>("getClientArea", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Control, typename... Args>
	auto getContent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContent")] != -1);
		return call<R>("getContent", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Control, typename... Args>
	auto getTopCenter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTopCenter")] != -1);
		return call<R>("getTopCenter", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Control, typename... Args>
	auto getTopLeft(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTopLeft")] != -1);
		return call<R>("getTopLeft", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Control, typename... Args>
	auto getTopRight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTopRight")] != -1);
		return call<R>("getTopRight", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBorderVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBorderVisible")] != -1);
		return call<R>("setBorderVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setContent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setContent")] != -1);
		return call<R>("setContent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLayout")] != -1);
		return call<R>("setLayout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTopCenter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTopCenter")] != -1);
		return call<R>("setTopCenter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTopCenterSeparate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTopCenterSeparate")] != -1);
		return call<R>("setTopCenterSeparate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTopLeft(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTopLeft")] != -1);
		return call<R>("setTopLeft", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTopRight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTopRight")] != -1);
		return call<R>("setTopRight", std::forward<Args>(args)...);
	}

};

#endif
