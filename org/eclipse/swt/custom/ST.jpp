#ifndef org_eclipse_swt_custom_ST_HPP
#define org_eclipse_swt_custom_ST_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::custom::ST : public jObject<::org::eclipse::swt::custom::ST, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_custom / "ST";

	constexpr static Enume field_signatures{
		jField<::jint>("BULLET_CUSTOM"), //
		jField<::jint>("BULLET_DOT"), //
		jField<::jint>("BULLET_LETTER_LOWER"), //
		jField<::jint>("BULLET_LETTER_UPPER"), //
		jField<::jint>("BULLET_NUMBER"), //
		jField<::jint>("BULLET_TEXT"), //
		jField<::jint>("COLUMN_NEXT"), //
		jField<::jint>("COLUMN_PREVIOUS"), //
		jField<::jint>("COPY"), //
		jField<::jint>("CUT"), //
		jField<::jint>("CaretMoved"), //
		jField<::jint>("DELETE_NEXT"), //
		jField<::jint>("DELETE_PREVIOUS"), //
		jField<::jint>("DELETE_WORD_NEXT"), //
		jField<::jint>("DELETE_WORD_PREVIOUS"), //
		jField<::jint>("ExtendedModify"), //
		jField<::jint>("LINE_DOWN"), //
		jField<::jint>("LINE_END"), //
		jField<::jint>("LINE_START"), //
		jField<::jint>("LINE_UP"), //
		jField<::jint>("LineGetBackground"), //
		jField<::jint>("LineGetSegments"), //
		jField<::jint>("LineGetStyle"), //
		jField<::jint>("PAGE_DOWN"), //
		jField<::jint>("PAGE_UP"), //
		jField<::jint>("PASTE"), //
		jField<::jint>("PaintObject"), //
		jField<::jint>("SELECT_ALL"), //
		jField<::jint>("SELECT_COLUMN_NEXT"), //
		jField<::jint>("SELECT_COLUMN_PREVIOUS"), //
		jField<::jint>("SELECT_LINE_DOWN"), //
		jField<::jint>("SELECT_LINE_END"), //
		jField<::jint>("SELECT_LINE_START"), //
		jField<::jint>("SELECT_LINE_UP"), //
		jField<::jint>("SELECT_PAGE_DOWN"), //
		jField<::jint>("SELECT_PAGE_UP"), //
		jField<::jint>("SELECT_TEXT_END"), //
		jField<::jint>("SELECT_TEXT_START"), //
		jField<::jint>("SELECT_WINDOW_END"), //
		jField<::jint>("SELECT_WINDOW_START"), //
		jField<::jint>("SELECT_WORD_NEXT"), //
		jField<::jint>("SELECT_WORD_PREVIOUS"), //
		jField<::jint>("TEXT_END"), //
		jField<::jint>("TEXT_START"), //
		jField<::jint>("TOGGLE_BLOCKSELECTION"), //
		jField<::jint>("TOGGLE_OVERWRITE"), //
		jField<::jint>("TextChanged"), //
		jField<::jint>("TextChanging"), //
		jField<::jint>("TextSet"), //
		jField<::jint>("VerifyKey"), //
		jField<::jint>("WINDOW_END"), //
		jField<::jint>("WINDOW_START"), //
		jField<::jint>("WORD_NEXT"), //
		jField<::jint>("WORD_PREVIOUS"), //
		jField<::jint>("WordNext"), //
		jField<::jint>("WordPrevious"), //
	};

	template<typename F = ::jint>
	static auto BULLET_CUSTOM() {
		static_assert(field_signatures[jField<F>("BULLET_CUSTOM")] != -1);
		return sat<F>("BULLET_CUSTOM");
	}

	template<typename F = ::jint>
	static auto BULLET_DOT() {
		static_assert(field_signatures[jField<F>("BULLET_DOT")] != -1);
		return sat<F>("BULLET_DOT");
	}

	template<typename F = ::jint>
	static auto BULLET_LETTER_LOWER() {
		static_assert(field_signatures[jField<F>("BULLET_LETTER_LOWER")] != -1);
		return sat<F>("BULLET_LETTER_LOWER");
	}

	template<typename F = ::jint>
	static auto BULLET_LETTER_UPPER() {
		static_assert(field_signatures[jField<F>("BULLET_LETTER_UPPER")] != -1);
		return sat<F>("BULLET_LETTER_UPPER");
	}

	template<typename F = ::jint>
	static auto BULLET_NUMBER() {
		static_assert(field_signatures[jField<F>("BULLET_NUMBER")] != -1);
		return sat<F>("BULLET_NUMBER");
	}

	template<typename F = ::jint>
	static auto BULLET_TEXT() {
		static_assert(field_signatures[jField<F>("BULLET_TEXT")] != -1);
		return sat<F>("BULLET_TEXT");
	}

	template<typename F = ::jint>
	static auto COLUMN_NEXT() {
		static_assert(field_signatures[jField<F>("COLUMN_NEXT")] != -1);
		return sat<F>("COLUMN_NEXT");
	}

	template<typename F = ::jint>
	static auto COLUMN_PREVIOUS() {
		static_assert(field_signatures[jField<F>("COLUMN_PREVIOUS")] != -1);
		return sat<F>("COLUMN_PREVIOUS");
	}

	template<typename F = ::jint>
	static auto COPY() {
		static_assert(field_signatures[jField<F>("COPY")] != -1);
		return sat<F>("COPY");
	}

	template<typename F = ::jint>
	static auto CUT() {
		static_assert(field_signatures[jField<F>("CUT")] != -1);
		return sat<F>("CUT");
	}

	template<typename F = ::jint>
	static auto CaretMoved() {
		static_assert(field_signatures[jField<F>("CaretMoved")] != -1);
		return sat<F>("CaretMoved");
	}

	template<typename F = ::jint>
	static auto DELETE_NEXT() {
		static_assert(field_signatures[jField<F>("DELETE_NEXT")] != -1);
		return sat<F>("DELETE_NEXT");
	}

	template<typename F = ::jint>
	static auto DELETE_PREVIOUS() {
		static_assert(field_signatures[jField<F>("DELETE_PREVIOUS")] != -1);
		return sat<F>("DELETE_PREVIOUS");
	}

	template<typename F = ::jint>
	static auto DELETE_WORD_NEXT() {
		static_assert(field_signatures[jField<F>("DELETE_WORD_NEXT")] != -1);
		return sat<F>("DELETE_WORD_NEXT");
	}

	template<typename F = ::jint>
	static auto DELETE_WORD_PREVIOUS() {
		static_assert(field_signatures[jField<F>("DELETE_WORD_PREVIOUS")] != -1);
		return sat<F>("DELETE_WORD_PREVIOUS");
	}

	template<typename F = ::jint>
	static auto ExtendedModify() {
		static_assert(field_signatures[jField<F>("ExtendedModify")] != -1);
		return sat<F>("ExtendedModify");
	}

	template<typename F = ::jint>
	static auto LINE_DOWN() {
		static_assert(field_signatures[jField<F>("LINE_DOWN")] != -1);
		return sat<F>("LINE_DOWN");
	}

	template<typename F = ::jint>
	static auto LINE_END() {
		static_assert(field_signatures[jField<F>("LINE_END")] != -1);
		return sat<F>("LINE_END");
	}

	template<typename F = ::jint>
	static auto LINE_START() {
		static_assert(field_signatures[jField<F>("LINE_START")] != -1);
		return sat<F>("LINE_START");
	}

	template<typename F = ::jint>
	static auto LINE_UP() {
		static_assert(field_signatures[jField<F>("LINE_UP")] != -1);
		return sat<F>("LINE_UP");
	}

	template<typename F = ::jint>
	static auto LineGetBackground() {
		static_assert(field_signatures[jField<F>("LineGetBackground")] != -1);
		return sat<F>("LineGetBackground");
	}

	template<typename F = ::jint>
	static auto LineGetSegments() {
		static_assert(field_signatures[jField<F>("LineGetSegments")] != -1);
		return sat<F>("LineGetSegments");
	}

	template<typename F = ::jint>
	static auto LineGetStyle() {
		static_assert(field_signatures[jField<F>("LineGetStyle")] != -1);
		return sat<F>("LineGetStyle");
	}

	template<typename F = ::jint>
	static auto PAGE_DOWN() {
		static_assert(field_signatures[jField<F>("PAGE_DOWN")] != -1);
		return sat<F>("PAGE_DOWN");
	}

	template<typename F = ::jint>
	static auto PAGE_UP() {
		static_assert(field_signatures[jField<F>("PAGE_UP")] != -1);
		return sat<F>("PAGE_UP");
	}

	template<typename F = ::jint>
	static auto PASTE() {
		static_assert(field_signatures[jField<F>("PASTE")] != -1);
		return sat<F>("PASTE");
	}

	template<typename F = ::jint>
	static auto PaintObject() {
		static_assert(field_signatures[jField<F>("PaintObject")] != -1);
		return sat<F>("PaintObject");
	}

	template<typename F = ::jint>
	static auto SELECT_ALL() {
		static_assert(field_signatures[jField<F>("SELECT_ALL")] != -1);
		return sat<F>("SELECT_ALL");
	}

	template<typename F = ::jint>
	static auto SELECT_COLUMN_NEXT() {
		static_assert(field_signatures[jField<F>("SELECT_COLUMN_NEXT")] != -1);
		return sat<F>("SELECT_COLUMN_NEXT");
	}

	template<typename F = ::jint>
	static auto SELECT_COLUMN_PREVIOUS() {
		static_assert(field_signatures[jField<F>("SELECT_COLUMN_PREVIOUS")] != -1);
		return sat<F>("SELECT_COLUMN_PREVIOUS");
	}

	template<typename F = ::jint>
	static auto SELECT_LINE_DOWN() {
		static_assert(field_signatures[jField<F>("SELECT_LINE_DOWN")] != -1);
		return sat<F>("SELECT_LINE_DOWN");
	}

	template<typename F = ::jint>
	static auto SELECT_LINE_END() {
		static_assert(field_signatures[jField<F>("SELECT_LINE_END")] != -1);
		return sat<F>("SELECT_LINE_END");
	}

	template<typename F = ::jint>
	static auto SELECT_LINE_START() {
		static_assert(field_signatures[jField<F>("SELECT_LINE_START")] != -1);
		return sat<F>("SELECT_LINE_START");
	}

	template<typename F = ::jint>
	static auto SELECT_LINE_UP() {
		static_assert(field_signatures[jField<F>("SELECT_LINE_UP")] != -1);
		return sat<F>("SELECT_LINE_UP");
	}

	template<typename F = ::jint>
	static auto SELECT_PAGE_DOWN() {
		static_assert(field_signatures[jField<F>("SELECT_PAGE_DOWN")] != -1);
		return sat<F>("SELECT_PAGE_DOWN");
	}

	template<typename F = ::jint>
	static auto SELECT_PAGE_UP() {
		static_assert(field_signatures[jField<F>("SELECT_PAGE_UP")] != -1);
		return sat<F>("SELECT_PAGE_UP");
	}

	template<typename F = ::jint>
	static auto SELECT_TEXT_END() {
		static_assert(field_signatures[jField<F>("SELECT_TEXT_END")] != -1);
		return sat<F>("SELECT_TEXT_END");
	}

	template<typename F = ::jint>
	static auto SELECT_TEXT_START() {
		static_assert(field_signatures[jField<F>("SELECT_TEXT_START")] != -1);
		return sat<F>("SELECT_TEXT_START");
	}

	template<typename F = ::jint>
	static auto SELECT_WINDOW_END() {
		static_assert(field_signatures[jField<F>("SELECT_WINDOW_END")] != -1);
		return sat<F>("SELECT_WINDOW_END");
	}

	template<typename F = ::jint>
	static auto SELECT_WINDOW_START() {
		static_assert(field_signatures[jField<F>("SELECT_WINDOW_START")] != -1);
		return sat<F>("SELECT_WINDOW_START");
	}

	template<typename F = ::jint>
	static auto SELECT_WORD_NEXT() {
		static_assert(field_signatures[jField<F>("SELECT_WORD_NEXT")] != -1);
		return sat<F>("SELECT_WORD_NEXT");
	}

	template<typename F = ::jint>
	static auto SELECT_WORD_PREVIOUS() {
		static_assert(field_signatures[jField<F>("SELECT_WORD_PREVIOUS")] != -1);
		return sat<F>("SELECT_WORD_PREVIOUS");
	}

	template<typename F = ::jint>
	static auto TEXT_END() {
		static_assert(field_signatures[jField<F>("TEXT_END")] != -1);
		return sat<F>("TEXT_END");
	}

	template<typename F = ::jint>
	static auto TEXT_START() {
		static_assert(field_signatures[jField<F>("TEXT_START")] != -1);
		return sat<F>("TEXT_START");
	}

	template<typename F = ::jint>
	static auto TOGGLE_BLOCKSELECTION() {
		static_assert(field_signatures[jField<F>("TOGGLE_BLOCKSELECTION")] != -1);
		return sat<F>("TOGGLE_BLOCKSELECTION");
	}

	template<typename F = ::jint>
	static auto TOGGLE_OVERWRITE() {
		static_assert(field_signatures[jField<F>("TOGGLE_OVERWRITE")] != -1);
		return sat<F>("TOGGLE_OVERWRITE");
	}

	template<typename F = ::jint>
	static auto TextChanged() {
		static_assert(field_signatures[jField<F>("TextChanged")] != -1);
		return sat<F>("TextChanged");
	}

	template<typename F = ::jint>
	static auto TextChanging() {
		static_assert(field_signatures[jField<F>("TextChanging")] != -1);
		return sat<F>("TextChanging");
	}

	template<typename F = ::jint>
	static auto TextSet() {
		static_assert(field_signatures[jField<F>("TextSet")] != -1);
		return sat<F>("TextSet");
	}

	template<typename F = ::jint>
	static auto VerifyKey() {
		static_assert(field_signatures[jField<F>("VerifyKey")] != -1);
		return sat<F>("VerifyKey");
	}

	template<typename F = ::jint>
	static auto WINDOW_END() {
		static_assert(field_signatures[jField<F>("WINDOW_END")] != -1);
		return sat<F>("WINDOW_END");
	}

	template<typename F = ::jint>
	static auto WINDOW_START() {
		static_assert(field_signatures[jField<F>("WINDOW_START")] != -1);
		return sat<F>("WINDOW_START");
	}

	template<typename F = ::jint>
	static auto WORD_NEXT() {
		static_assert(field_signatures[jField<F>("WORD_NEXT")] != -1);
		return sat<F>("WORD_NEXT");
	}

	template<typename F = ::jint>
	static auto WORD_PREVIOUS() {
		static_assert(field_signatures[jField<F>("WORD_PREVIOUS")] != -1);
		return sat<F>("WORD_PREVIOUS");
	}

	template<typename F = ::jint>
	static auto WordNext() {
		static_assert(field_signatures[jField<F>("WordNext")] != -1);
		return sat<F>("WordNext");
	}

	template<typename F = ::jint>
	static auto WordPrevious() {
		static_assert(field_signatures[jField<F>("WordPrevious")] != -1);
		return sat<F>("WordPrevious");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
	};

};

#endif
