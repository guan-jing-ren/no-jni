#ifndef org_eclipse_swt_custom_SashForm_HPP
#define org_eclipse_swt_custom_SashForm_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::custom::SashForm : public jObject<::org::eclipse::swt::custom::SashForm, ::org::eclipse::swt::widgets::Composite> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_custom / "SashForm";

	constexpr static Enume field_signatures{
		jField<::jint>("SASH_WIDTH"), //
	};

	template<typename F = ::jint>
	auto SASH_WIDTH() const {
		static_assert(field_signatures[jField<F>("SASH_WIDTH")] != -1);
		return at<F>("SASH_WIDTH");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Composite, ::jint)>(), //
		jMethod<::org::eclipse::swt::widgets::Control()>("getMaximizedControl"), //
		jMethod<::jint()>("getOrientation"), //
		jMethod<::jint()>("getSashWidth"), //
		jMethod<::jint()>("getStyle"), //
		jMethod<::jint *()>("getWeights"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Color)>("setBackground"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Color)>("setForeground"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::Layout)>("setLayout"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::Control)>("setMaximizedControl"), //
		jMethod<::jvoid(::jint)>("setOrientation"), //
		jMethod<::jvoid(::jint)>("setSashWidth"), //
		jMethod<::jvoid(::java::lang::String)>("setToolTipText"), //
		jMethod<::jvoid(::jint *)>("setWeights"), //
	};

	template<typename R = ::org::eclipse::swt::widgets::Control, typename... Args>
	auto getMaximizedControl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaximizedControl")] != -1);
		return call<R>("getMaximizedControl", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOrientation")] != -1);
		return call<R>("getOrientation", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSashWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSashWidth")] != -1);
		return call<R>("getSashWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStyle")] != -1);
		return call<R>("getStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getWeights(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWeights")] != -1);
		return call<R>("getWeights", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBackground")] != -1);
		return call<R>("setBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setForeground")] != -1);
		return call<R>("setForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLayout")] != -1);
		return call<R>("setLayout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaximizedControl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMaximizedControl")] != -1);
		return call<R>("setMaximizedControl", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOrientation")] != -1);
		return call<R>("setOrientation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSashWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSashWidth")] != -1);
		return call<R>("setSashWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setToolTipText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setToolTipText")] != -1);
		return call<R>("setToolTipText", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWeights(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setWeights")] != -1);
		return call<R>("setWeights", std::forward<Args>(args)...);
	}

};

#endif
