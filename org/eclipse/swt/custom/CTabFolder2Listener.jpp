#ifndef org_eclipse_swt_custom_CTabFolder2Listener_HPP
#define org_eclipse_swt_custom_CTabFolder2Listener_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::custom::CTabFolder2Listener : public jObject<::org::eclipse::swt::custom::CTabFolder2Listener, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_custom / "CTabFolder2Listener";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::org::eclipse::swt::custom::CTabFolderEvent)>("close"), //
		jMethod<::jvoid(::org::eclipse::swt::custom::CTabFolderEvent)>("maximize"), //
		jMethod<::jvoid(::org::eclipse::swt::custom::CTabFolderEvent)>("minimize"), //
		jMethod<::jvoid(::org::eclipse::swt::custom::CTabFolderEvent)>("restore"), //
		jMethod<::jvoid(::org::eclipse::swt::custom::CTabFolderEvent)>("showList"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto maximize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("maximize")] != -1);
		return call<R>("maximize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto minimize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("minimize")] != -1);
		return call<R>("minimize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto restore(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("restore")] != -1);
		return call<R>("restore", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto showList(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("showList")] != -1);
		return call<R>("showList", std::forward<Args>(args)...);
	}

};

#endif
