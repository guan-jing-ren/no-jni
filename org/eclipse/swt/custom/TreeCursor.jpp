#ifndef org_eclipse_swt_custom_TreeCursor_HPP
#define org_eclipse_swt_custom_TreeCursor_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::custom::TreeCursor : public jObject<::org::eclipse::swt::custom::TreeCursor, ::org::eclipse::swt::widgets::Canvas> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_custom / "TreeCursor";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Tree, ::jint)>(), //
		jMethod<::jvoid(::org::eclipse::swt::events::SelectionListener)>("addSelectionListener"), //
		jMethod<::org::eclipse::swt::graphics::Color()>("getBackground"), //
		jMethod<::jint()>("getColumn"), //
		jMethod<::org::eclipse::swt::graphics::Color()>("getForeground"), //
		jMethod<::org::eclipse::swt::widgets::TreeItem()>("getRow"), //
		jMethod<::jvoid(::org::eclipse::swt::events::SelectionListener)>("removeSelectionListener"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Color)>("setBackground"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Color)>("setForeground"), //
		jMethod<::jvoid(::jint, ::jint)>("setSelection"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::TreeItem, ::jint)>("setSelection"), //
		jMethod<::jvoid(::jboolean)>("setVisible"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addSelectionListener")] != -1);
		return call<R>("addSelectionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Color, typename... Args>
	auto getBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBackground")] != -1);
		return call<R>("getBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumn")] != -1);
		return call<R>("getColumn", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Color, typename... Args>
	auto getForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getForeground")] != -1);
		return call<R>("getForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::TreeItem, typename... Args>
	auto getRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRow")] != -1);
		return call<R>("getRow", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeSelectionListener")] != -1);
		return call<R>("removeSelectionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBackground")] != -1);
		return call<R>("setBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setForeground")] != -1);
		return call<R>("setForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelection")] != -1);
		return call<R>("setSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVisible")] != -1);
		return call<R>("setVisible", std::forward<Args>(args)...);
	}

};

#endif
