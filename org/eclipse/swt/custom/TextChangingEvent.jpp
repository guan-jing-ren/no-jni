#ifndef org_eclipse_swt_custom_TextChangingEvent_HPP
#define org_eclipse_swt_custom_TextChangingEvent_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::custom::TextChangingEvent : public jObject<::org::eclipse::swt::custom::TextChangingEvent, ::org::eclipse::swt::events::TypedEvent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_custom / "TextChangingEvent";

	constexpr static Enume field_signatures{
		jField<::jint>("newCharCount"), //
		jField<::jint>("newLineCount"), //
		jField<::java::lang::String>("newText"), //
		jField<::jint>("replaceCharCount"), //
		jField<::jint>("replaceLineCount"), //
		jField<::jint>("start"), //
	};

	template<typename F = ::jint>
	auto newCharCount() const {
		static_assert(field_signatures[jField<F>("newCharCount")] != -1);
		return at<F>("newCharCount");
	}

	template<typename F = ::jint>
	auto newLineCount() const {
		static_assert(field_signatures[jField<F>("newLineCount")] != -1);
		return at<F>("newLineCount");
	}

	template<typename F = ::java::lang::String>
	auto newText() const {
		static_assert(field_signatures[jField<F>("newText")] != -1);
		return at<F>("newText");
	}

	template<typename F = ::jint>
	auto replaceCharCount() const {
		static_assert(field_signatures[jField<F>("replaceCharCount")] != -1);
		return at<F>("replaceCharCount");
	}

	template<typename F = ::jint>
	auto replaceLineCount() const {
		static_assert(field_signatures[jField<F>("replaceLineCount")] != -1);
		return at<F>("replaceLineCount");
	}

	template<typename F = ::jint>
	auto start() const {
		static_assert(field_signatures[jField<F>("start")] != -1);
		return at<F>("start");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::custom::StyledTextContent)>(), //
	};

};

#endif
