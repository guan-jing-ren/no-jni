#ifndef org_eclipse_swt_custom_StyledTextPrintOptions_HPP
#define org_eclipse_swt_custom_StyledTextPrintOptions_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::custom::StyledTextPrintOptions : public jObject<::org::eclipse::swt::custom::StyledTextPrintOptions, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_custom / "StyledTextPrintOptions";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("PAGE_TAG"), //
		jField<::java::lang::String>("SEPARATOR"), //
		jField<::java::lang::String>("footer"), //
		jField<::java::lang::String>("header"), //
		jField<::java::lang::String>("jobName"), //
		jField<::java::lang::String *>("lineLabels"), //
		jField<::jboolean>("printLineBackground"), //
		jField<::jboolean>("printLineNumbers"), //
		jField<::jboolean>("printTextBackground"), //
		jField<::jboolean>("printTextFontStyle"), //
		jField<::jboolean>("printTextForeground"), //
	};

	template<typename F = ::java::lang::String>
	static auto PAGE_TAG() {
		static_assert(field_signatures[jField<F>("PAGE_TAG")] != -1);
		return sat<F>("PAGE_TAG");
	}

	template<typename F = ::java::lang::String>
	static auto SEPARATOR() {
		static_assert(field_signatures[jField<F>("SEPARATOR")] != -1);
		return sat<F>("SEPARATOR");
	}

	template<typename F = ::java::lang::String>
	auto footer() const {
		static_assert(field_signatures[jField<F>("footer")] != -1);
		return at<F>("footer");
	}

	template<typename F = ::java::lang::String>
	auto header() const {
		static_assert(field_signatures[jField<F>("header")] != -1);
		return at<F>("header");
	}

	template<typename F = ::java::lang::String>
	auto jobName() const {
		static_assert(field_signatures[jField<F>("jobName")] != -1);
		return at<F>("jobName");
	}

	template<typename F = ::java::lang::String *>
	auto lineLabels() const {
		static_assert(field_signatures[jField<F>("lineLabels")] != -1);
		return at<F>("lineLabels");
	}

	template<typename F = ::jboolean>
	auto printLineBackground() const {
		static_assert(field_signatures[jField<F>("printLineBackground")] != -1);
		return at<F>("printLineBackground");
	}

	template<typename F = ::jboolean>
	auto printLineNumbers() const {
		static_assert(field_signatures[jField<F>("printLineNumbers")] != -1);
		return at<F>("printLineNumbers");
	}

	template<typename F = ::jboolean>
	auto printTextBackground() const {
		static_assert(field_signatures[jField<F>("printTextBackground")] != -1);
		return at<F>("printTextBackground");
	}

	template<typename F = ::jboolean>
	auto printTextFontStyle() const {
		static_assert(field_signatures[jField<F>("printTextFontStyle")] != -1);
		return at<F>("printTextFontStyle");
	}

	template<typename F = ::jboolean>
	auto printTextForeground() const {
		static_assert(field_signatures[jField<F>("printTextForeground")] != -1);
		return at<F>("printTextForeground");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
	};

};

#endif
