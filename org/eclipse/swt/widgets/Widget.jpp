#ifndef org_eclipse_swt_widgets_Widget_HPP
#define org_eclipse_swt_widgets_Widget_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::widgets::Widget : public jObject<::org::eclipse::swt::widgets::Widget, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_widgets / "Widget";

	constexpr static Enume field_signatures{
		jField<::jlong>("handle"), //
	};

	template<typename F = ::jlong>
	auto handle() const {
		static_assert(field_signatures[jField<F>("handle")] != -1);
		return at<F>("handle");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Widget, ::jint)>(), //
		jMethod<::jvoid(::org::eclipse::swt::events::DisposeListener)>("addDisposeListener"), //
		jMethod<::jvoid(::jint, ::org::eclipse::swt::widgets::Listener)>("addListener"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::java::lang::Object()>("getData"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getData"), //
		jMethod<::org::eclipse::swt::widgets::Display()>("getDisplay"), //
		jMethod<::org::eclipse::swt::widgets::Listener *(::jint)>("getListeners"), //
		jMethod<::jint()>("getStyle"), //
		jMethod<::jboolean()>("isDisposed"), //
		jMethod<::jboolean(::jint)>("isListening"), //
		jMethod<::jvoid(::jint, ::org::eclipse::swt::widgets::Event)>("notifyListeners"), //
		jMethod<::jvoid(::org::eclipse::swt::events::DisposeListener)>("removeDisposeListener"), //
		jMethod<::jvoid(::jint, ::org::eclipse::swt::widgets::Listener)>("removeListener"), //
		jMethod<::jvoid(::jint)>("reskin"), //
		jMethod<::jvoid(::java::lang::Object)>("setData"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object)>("setData"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addDisposeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addDisposeListener")] != -1);
		return call<R>("addDisposeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addListener")] != -1);
		return call<R>("addListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getData")] != -1);
		return call<R>("getData", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Display, typename... Args>
	auto getDisplay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisplay")] != -1);
		return call<R>("getDisplay", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Listener *, typename... Args>
	auto getListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getListeners")] != -1);
		return call<R>("getListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStyle")] != -1);
		return call<R>("getStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDisposed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDisposed")] != -1);
		return call<R>("isDisposed", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isListening(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isListening")] != -1);
		return call<R>("isListening", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto notifyListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("notifyListeners")] != -1);
		return call<R>("notifyListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeDisposeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeDisposeListener")] != -1);
		return call<R>("removeDisposeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeListener")] != -1);
		return call<R>("removeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reskin(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reskin")] != -1);
		return call<R>("reskin", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setData")] != -1);
		return call<R>("setData", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
