#ifndef org_eclipse_swt_widgets_Text_HPP
#define org_eclipse_swt_widgets_Text_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::widgets::Text : public jObject<::org::eclipse::swt::widgets::Text, ::org::eclipse::swt::widgets::Scrollable> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_widgets / "Text";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("DELIMITER"), //
		jField<::jint>("LIMIT"), //
	};

	template<typename F = ::java::lang::String>
	static auto DELIMITER() {
		static_assert(field_signatures[jField<F>("DELIMITER")] != -1);
		return sat<F>("DELIMITER");
	}

	template<typename F = ::jint>
	static auto LIMIT() {
		static_assert(field_signatures[jField<F>("LIMIT")] != -1);
		return sat<F>("LIMIT");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Composite, ::jint)>(), //
		jMethod<::jvoid(::org::eclipse::swt::events::ModifyListener)>("addModifyListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::SegmentListener)>("addSegmentListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::SelectionListener)>("addSelectionListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::VerifyListener)>("addVerifyListener"), //
		jMethod<::jvoid(::java::lang::String)>("append"), //
		jMethod<::jvoid()>("clearSelection"), //
		jMethod<::org::eclipse::swt::graphics::Point(::jint, ::jint, ::jboolean)>("computeSize"), //
		jMethod<::org::eclipse::swt::graphics::Rectangle(::jint, ::jint, ::jint, ::jint)>("computeTrim"), //
		jMethod<::jvoid()>("copy"), //
		jMethod<::jvoid()>("cut"), //
		jMethod<::jint()>("getBorderWidth"), //
		jMethod<::jint()>("getCaretLineNumber"), //
		jMethod<::org::eclipse::swt::graphics::Point()>("getCaretLocation"), //
		jMethod<::jint()>("getCaretPosition"), //
		jMethod<::jint()>("getCharCount"), //
		jMethod<::jboolean()>("getDoubleClickEnabled"), //
		jMethod<::jchar()>("getEchoChar"), //
		jMethod<::jboolean()>("getEditable"), //
		jMethod<::jint()>("getLineCount"), //
		jMethod<::java::lang::String()>("getLineDelimiter"), //
		jMethod<::jint()>("getLineHeight"), //
		jMethod<::java::lang::String()>("getMessage"), //
		jMethod<::jint()>("getOrientation"), //
		jMethod<::org::eclipse::swt::graphics::Point()>("getSelection"), //
		jMethod<::jint()>("getSelectionCount"), //
		jMethod<::java::lang::String()>("getSelectionText"), //
		jMethod<::jint()>("getTabs"), //
		jMethod<::java::lang::String()>("getText"), //
		jMethod<::java::lang::String(::jint, ::jint)>("getText"), //
		jMethod<::jchar *()>("getTextChars"), //
		jMethod<::jint()>("getTextLimit"), //
		jMethod<::jint()>("getTopIndex"), //
		jMethod<::jint()>("getTopPixel"), //
		jMethod<::jvoid(::java::lang::String)>("insert"), //
		jMethod<::jvoid()>("paste"), //
		jMethod<::jvoid(::org::eclipse::swt::events::ModifyListener)>("removeModifyListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::SegmentListener)>("removeSegmentListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::SelectionListener)>("removeSelectionListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::VerifyListener)>("removeVerifyListener"), //
		jMethod<::jvoid()>("selectAll"), //
		jMethod<::jvoid(::jboolean)>("setDoubleClickEnabled"), //
		jMethod<::jvoid(::jchar)>("setEchoChar"), //
		jMethod<::jvoid(::jboolean)>("setEditable"), //
		jMethod<::jvoid(::java::lang::String)>("setMessage"), //
		jMethod<::jvoid(::jint)>("setOrientation"), //
		jMethod<::jvoid(::jint)>("setSelection"), //
		jMethod<::jvoid(::jint, ::jint)>("setSelection"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Point)>("setSelection"), //
		jMethod<::jvoid(::jint)>("setTabs"), //
		jMethod<::jvoid(::java::lang::String)>("setText"), //
		jMethod<::jvoid(::jchar *)>("setTextChars"), //
		jMethod<::jvoid(::jint)>("setTextLimit"), //
		jMethod<::jvoid(::jint)>("setTopIndex"), //
		jMethod<::jvoid()>("showSelection"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addModifyListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addModifyListener")] != -1);
		return call<R>("addModifyListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addSegmentListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addSegmentListener")] != -1);
		return call<R>("addSegmentListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addSelectionListener")] != -1);
		return call<R>("addSelectionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addVerifyListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addVerifyListener")] != -1);
		return call<R>("addVerifyListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto append(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("append")] != -1);
		return call<R>("append", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clearSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clearSelection")] != -1);
		return call<R>("clearSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point, typename... Args>
	auto computeSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("computeSize")] != -1);
		return call<R>("computeSize", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Rectangle, typename... Args>
	auto computeTrim(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("computeTrim")] != -1);
		return call<R>("computeTrim", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto copy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("copy")] != -1);
		return call<R>("copy", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto cut(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cut")] != -1);
		return call<R>("cut", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBorderWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorderWidth")] != -1);
		return call<R>("getBorderWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCaretLineNumber(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCaretLineNumber")] != -1);
		return call<R>("getCaretLineNumber", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point, typename... Args>
	auto getCaretLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCaretLocation")] != -1);
		return call<R>("getCaretLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCaretPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCaretPosition")] != -1);
		return call<R>("getCaretPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCharCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCharCount")] != -1);
		return call<R>("getCharCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getDoubleClickEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDoubleClickEnabled")] != -1);
		return call<R>("getDoubleClickEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto getEchoChar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEchoChar")] != -1);
		return call<R>("getEchoChar", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getEditable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEditable")] != -1);
		return call<R>("getEditable", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLineCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineCount")] != -1);
		return call<R>("getLineCount", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLineDelimiter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineDelimiter")] != -1);
		return call<R>("getLineDelimiter", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLineHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineHeight")] != -1);
		return call<R>("getLineHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMessage")] != -1);
		return call<R>("getMessage", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOrientation")] != -1);
		return call<R>("getOrientation", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point, typename... Args>
	auto getSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelection")] != -1);
		return call<R>("getSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSelectionCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionCount")] != -1);
		return call<R>("getSelectionCount", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSelectionText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionText")] != -1);
		return call<R>("getSelectionText", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTabs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTabs")] != -1);
		return call<R>("getTabs", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getText")] != -1);
		return call<R>("getText", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar *, typename... Args>
	auto getTextChars(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextChars")] != -1);
		return call<R>("getTextChars", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTextLimit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextLimit")] != -1);
		return call<R>("getTextLimit", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTopIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTopIndex")] != -1);
		return call<R>("getTopIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTopPixel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTopPixel")] != -1);
		return call<R>("getTopPixel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insert(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insert")] != -1);
		return call<R>("insert", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paste(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paste")] != -1);
		return call<R>("paste", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeModifyListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeModifyListener")] != -1);
		return call<R>("removeModifyListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeSegmentListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeSegmentListener")] != -1);
		return call<R>("removeSegmentListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeSelectionListener")] != -1);
		return call<R>("removeSelectionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeVerifyListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeVerifyListener")] != -1);
		return call<R>("removeVerifyListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto selectAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("selectAll")] != -1);
		return call<R>("selectAll", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDoubleClickEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDoubleClickEnabled")] != -1);
		return call<R>("setDoubleClickEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEchoChar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEchoChar")] != -1);
		return call<R>("setEchoChar", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEditable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEditable")] != -1);
		return call<R>("setEditable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMessage")] != -1);
		return call<R>("setMessage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOrientation")] != -1);
		return call<R>("setOrientation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelection")] != -1);
		return call<R>("setSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTabs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTabs")] != -1);
		return call<R>("setTabs", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setText")] != -1);
		return call<R>("setText", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTextChars(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTextChars")] != -1);
		return call<R>("setTextChars", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTextLimit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTextLimit")] != -1);
		return call<R>("setTextLimit", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTopIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTopIndex")] != -1);
		return call<R>("setTopIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto showSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("showSelection")] != -1);
		return call<R>("showSelection", std::forward<Args>(args)...);
	}

};

#endif
