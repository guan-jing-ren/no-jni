#ifndef org_eclipse_swt_widgets_MessageBox_HPP
#define org_eclipse_swt_widgets_MessageBox_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::widgets::MessageBox : public jObject<::org::eclipse::swt::widgets::MessageBox, ::org::eclipse::swt::widgets::Dialog> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_widgets / "MessageBox";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Shell)>(), //
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Shell, ::jint)>(), //
		jMethod<::java::lang::String()>("getMessage"), //
		jMethod<::jint()>("open"), //
		jMethod<::jvoid(::java::lang::String)>("setMessage"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMessage")] != -1);
		return call<R>("getMessage", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto open(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("open")] != -1);
		return call<R>("open", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMessage")] != -1);
		return call<R>("setMessage", std::forward<Args>(args)...);
	}

};

#endif
