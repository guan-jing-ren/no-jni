#ifndef org_eclipse_swt_widgets_MenuItem_HPP
#define org_eclipse_swt_widgets_MenuItem_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::widgets::MenuItem : public jObject<::org::eclipse::swt::widgets::MenuItem, ::org::eclipse::swt::widgets::Item> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_widgets / "MenuItem";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Menu, ::jint)>(), //
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Menu, ::jint, ::jint)>(), //
		jMethod<::jvoid(::org::eclipse::swt::events::ArmListener)>("addArmListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::HelpListener)>("addHelpListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::SelectionListener)>("addSelectionListener"), //
		jMethod<::jint()>("getAccelerator"), //
		jMethod<::jboolean()>("getEnabled"), //
		jMethod<::jint()>("getID"), //
		jMethod<::org::eclipse::swt::widgets::Menu()>("getMenu"), //
		jMethod<::org::eclipse::swt::widgets::Menu()>("getParent"), //
		jMethod<::jboolean()>("getSelection"), //
		jMethod<::java::lang::String()>("getToolTipText"), //
		jMethod<::jboolean()>("isEnabled"), //
		jMethod<::jvoid(::org::eclipse::swt::events::ArmListener)>("removeArmListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::HelpListener)>("removeHelpListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::SelectionListener)>("removeSelectionListener"), //
		jMethod<::jvoid(::jint)>("setAccelerator"), //
		jMethod<::jvoid(::jboolean)>("setEnabled"), //
		jMethod<::jvoid(::jint)>("setID"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Image)>("setImage"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::Menu)>("setMenu"), //
		jMethod<::jvoid(::jboolean)>("setSelection"), //
		jMethod<::jvoid(::java::lang::String)>("setText"), //
		jMethod<::jvoid(::java::lang::String)>("setToolTipText"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addArmListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addArmListener")] != -1);
		return call<R>("addArmListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addHelpListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addHelpListener")] != -1);
		return call<R>("addHelpListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addSelectionListener")] != -1);
		return call<R>("addSelectionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAccelerator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccelerator")] != -1);
		return call<R>("getAccelerator", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEnabled")] != -1);
		return call<R>("getEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getID")] != -1);
		return call<R>("getID", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Menu, typename... Args>
	auto getMenu(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMenu")] != -1);
		return call<R>("getMenu", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Menu, typename... Args>
	auto getParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParent")] != -1);
		return call<R>("getParent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelection")] != -1);
		return call<R>("getSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getToolTipText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getToolTipText")] != -1);
		return call<R>("getToolTipText", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEnabled")] != -1);
		return call<R>("isEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeArmListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeArmListener")] != -1);
		return call<R>("removeArmListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeHelpListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeHelpListener")] != -1);
		return call<R>("removeHelpListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeSelectionListener")] != -1);
		return call<R>("removeSelectionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAccelerator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAccelerator")] != -1);
		return call<R>("setAccelerator", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEnabled")] != -1);
		return call<R>("setEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setID")] != -1);
		return call<R>("setID", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setImage")] != -1);
		return call<R>("setImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMenu(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMenu")] != -1);
		return call<R>("setMenu", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelection")] != -1);
		return call<R>("setSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setText")] != -1);
		return call<R>("setText", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setToolTipText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setToolTipText")] != -1);
		return call<R>("setToolTipText", std::forward<Args>(args)...);
	}

};

#endif
