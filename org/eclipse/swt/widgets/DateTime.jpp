#ifndef org_eclipse_swt_widgets_DateTime_HPP
#define org_eclipse_swt_widgets_DateTime_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::widgets::DateTime : public jObject<::org::eclipse::swt::widgets::DateTime, ::org::eclipse::swt::widgets::Composite> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_widgets / "DateTime";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Composite, ::jint)>(), //
		jMethod<::jvoid(::org::eclipse::swt::events::SelectionListener)>("addSelectionListener"), //
		jMethod<::org::eclipse::swt::graphics::Point(::jint, ::jint, ::jboolean)>("computeSize"), //
		jMethod<::org::eclipse::swt::graphics::Rectangle(::jint, ::jint, ::jint, ::jint)>("computeTrim"), //
		jMethod<::jint()>("getDay"), //
		jMethod<::jint()>("getHours"), //
		jMethod<::jint()>("getMinutes"), //
		jMethod<::jint()>("getMonth"), //
		jMethod<::jint()>("getSeconds"), //
		jMethod<::jint()>("getYear"), //
		jMethod<::jvoid(::org::eclipse::swt::events::SelectionListener)>("removeSelectionListener"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Color)>("setBackground"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("setBounds"), //
		jMethod<::jvoid(::jint, ::jint, ::jint)>("setDate"), //
		jMethod<::jvoid(::jint)>("setDay"), //
		jMethod<::jvoid(::jboolean)>("setEnabled"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Font)>("setFont"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Color)>("setForeground"), //
		jMethod<::jvoid(::jint)>("setHours"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::Menu)>("setMenu"), //
		jMethod<::jvoid(::jint)>("setMinutes"), //
		jMethod<::jvoid(::jint)>("setMonth"), //
		jMethod<::jvoid(::jint)>("setSeconds"), //
		jMethod<::jvoid(::jint, ::jint, ::jint)>("setTime"), //
		jMethod<::jvoid(::jint)>("setYear"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addSelectionListener")] != -1);
		return call<R>("addSelectionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point, typename... Args>
	auto computeSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("computeSize")] != -1);
		return call<R>("computeSize", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Rectangle, typename... Args>
	auto computeTrim(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("computeTrim")] != -1);
		return call<R>("computeTrim", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDay")] != -1);
		return call<R>("getDay", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHours(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHours")] != -1);
		return call<R>("getHours", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinutes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinutes")] != -1);
		return call<R>("getMinutes", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMonth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMonth")] != -1);
		return call<R>("getMonth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSeconds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSeconds")] != -1);
		return call<R>("getSeconds", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getYear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getYear")] != -1);
		return call<R>("getYear", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeSelectionListener")] != -1);
		return call<R>("removeSelectionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBackground")] != -1);
		return call<R>("setBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBounds")] != -1);
		return call<R>("setBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDate")] != -1);
		return call<R>("setDate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDay")] != -1);
		return call<R>("setDay", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEnabled")] != -1);
		return call<R>("setEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFont")] != -1);
		return call<R>("setFont", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setForeground")] != -1);
		return call<R>("setForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHours(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHours")] != -1);
		return call<R>("setHours", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMenu(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMenu")] != -1);
		return call<R>("setMenu", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMinutes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMinutes")] != -1);
		return call<R>("setMinutes", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMonth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMonth")] != -1);
		return call<R>("setMonth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSeconds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSeconds")] != -1);
		return call<R>("setSeconds", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTime")] != -1);
		return call<R>("setTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setYear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setYear")] != -1);
		return call<R>("setYear", std::forward<Args>(args)...);
	}

};

#endif
