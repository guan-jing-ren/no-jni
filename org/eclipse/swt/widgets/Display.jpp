#ifndef org_eclipse_swt_widgets_Display_HPP
#define org_eclipse_swt_widgets_Display_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::widgets::Display : public jObject<::org::eclipse::swt::widgets::Display, ::org::eclipse::swt::graphics::Device> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_widgets / "Display";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::org::eclipse::swt::graphics::DeviceData)>(), //
		jMethod<::jvoid(::jint, ::org::eclipse::swt::widgets::Listener)>("addFilter"), //
		jMethod<::jvoid(::jint, ::org::eclipse::swt::widgets::Listener)>("addListener"), //
		jMethod<::jvoid(::java::lang::Runnable)>("asyncExec"), //
		jMethod<::jvoid()>("beep"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::jvoid(::java::lang::Runnable)>("disposeExec"), //
		jMethod<::org::eclipse::swt::widgets::Display(::java::lang::Thread)>("findDisplay"), //
		jMethod<::org::eclipse::swt::widgets::Widget(::jlong)>("findWidget"), //
		jMethod<::org::eclipse::swt::widgets::Widget(::jlong, ::jlong)>("findWidget"), //
		jMethod<::org::eclipse::swt::widgets::Widget(::org::eclipse::swt::widgets::Widget, ::jlong)>("findWidget"), //
		jMethod<::org::eclipse::swt::widgets::Shell()>("getActiveShell"), //
		jMethod<::java::lang::String()>("getAppName"), //
		jMethod<::java::lang::String()>("getAppVersion"), //
		jMethod<::org::eclipse::swt::graphics::Rectangle()>("getBounds"), //
		jMethod<::org::eclipse::swt::widgets::Display()>("getCurrent"), //
		jMethod<::org::eclipse::swt::widgets::Control()>("getCursorControl"), //
		jMethod<::org::eclipse::swt::graphics::Point()>("getCursorLocation"), //
		jMethod<::org::eclipse::swt::graphics::Point *()>("getCursorSizes"), //
		jMethod<::java::lang::Object()>("getData"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getData"), //
		jMethod<::org::eclipse::swt::widgets::Display()>("getDefault"), //
		jMethod<::jint()>("getDepth"), //
		jMethod<::jint()>("getDismissalAlignment"), //
		jMethod<::jint()>("getDoubleClickTime"), //
		jMethod<::org::eclipse::swt::widgets::Control()>("getFocusControl"), //
		jMethod<::jboolean()>("getHighContrast"), //
		jMethod<::jint()>("getIconDepth"), //
		jMethod<::org::eclipse::swt::graphics::Point *()>("getIconSizes"), //
		jMethod<::org::eclipse::swt::widgets::Menu()>("getMenuBar"), //
		jMethod<::org::eclipse::swt::widgets::Monitor *()>("getMonitors"), //
		jMethod<::org::eclipse::swt::widgets::Monitor()>("getPrimaryMonitor"), //
		jMethod<::org::eclipse::swt::widgets::Shell *()>("getShells"), //
		jMethod<::java::lang::Thread()>("getSyncThread"), //
		jMethod<::org::eclipse::swt::widgets::Synchronizer()>("getSynchronizer"), //
		jMethod<::org::eclipse::swt::graphics::Color(::jint)>("getSystemColor"), //
		jMethod<::org::eclipse::swt::graphics::Cursor(::jint)>("getSystemCursor"), //
		jMethod<::org::eclipse::swt::graphics::Image(::jint)>("getSystemImage"), //
		jMethod<::org::eclipse::swt::widgets::Menu()>("getSystemMenu"), //
		jMethod<::org::eclipse::swt::widgets::TaskBar()>("getSystemTaskBar"), //
		jMethod<::org::eclipse::swt::widgets::Tray()>("getSystemTray"), //
		jMethod<::java::lang::Thread()>("getThread"), //
		jMethod<::jboolean()>("getTouchEnabled"), //
		jMethod<::jvoid(::jlong, ::org::eclipse::swt::graphics::GCData)>("internal_dispose_GC"), //
		jMethod<::jlong(::org::eclipse::swt::graphics::GCData)>("internal_new_GC"), //
		jMethod<::org::eclipse::swt::graphics::Point(::org::eclipse::swt::widgets::Control, ::org::eclipse::swt::widgets::Control, ::jint, ::jint)>("map"), //
		jMethod<::org::eclipse::swt::graphics::Rectangle(::org::eclipse::swt::widgets::Control, ::org::eclipse::swt::widgets::Control, ::jint, ::jint, ::jint, ::jint)>("map"), //
		jMethod<::org::eclipse::swt::graphics::Point(::org::eclipse::swt::widgets::Control, ::org::eclipse::swt::widgets::Control, ::org::eclipse::swt::graphics::Point)>("map"), //
		jMethod<::org::eclipse::swt::graphics::Rectangle(::org::eclipse::swt::widgets::Control, ::org::eclipse::swt::widgets::Control, ::org::eclipse::swt::graphics::Rectangle)>("map"), //
		jMethod<::jboolean(::org::eclipse::swt::widgets::Event)>("post"), //
		jMethod<::jboolean()>("readAndDispatch"), //
		jMethod<::jvoid(::jint, ::org::eclipse::swt::widgets::Listener)>("removeFilter"), //
		jMethod<::jvoid(::jint, ::org::eclipse::swt::widgets::Listener)>("removeListener"), //
		jMethod<::jvoid()>("sendPostExternalEventDispatchEvent"), //
		jMethod<::jvoid()>("sendPreExternalEventDispatchEvent"), //
		jMethod<::jvoid(::java::lang::String)>("setAppName"), //
		jMethod<::jvoid(::java::lang::String)>("setAppVersion"), //
		jMethod<::jvoid(::jint, ::jint)>("setCursorLocation"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Point)>("setCursorLocation"), //
		jMethod<::jvoid(::java::lang::Object)>("setData"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object)>("setData"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::Synchronizer)>("setSynchronizer"), //
		jMethod<::jboolean()>("sleep"), //
		jMethod<::jvoid(::java::lang::Runnable)>("syncExec"), //
		jMethod<::jvoid(::jint, ::java::lang::Runnable)>("timerExec"), //
		jMethod<::jvoid()>("update"), //
		jMethod<::jvoid()>("wake"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addFilter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addFilter")] != -1);
		return call<R>("addFilter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addListener")] != -1);
		return call<R>("addListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto asyncExec(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("asyncExec")] != -1);
		return call<R>("asyncExec", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto beep(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("beep")] != -1);
		return call<R>("beep", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto disposeExec(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("disposeExec")] != -1);
		return call<R>("disposeExec", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Display, typename... Args>
	static auto findDisplay(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("findDisplay")] != -1);
		return scall<R>("findDisplay", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Widget, typename... Args>
	auto findWidget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("findWidget")] != -1);
		return call<R>("findWidget", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Shell, typename... Args>
	auto getActiveShell(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getActiveShell")] != -1);
		return call<R>("getActiveShell", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getAppName(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAppName")] != -1);
		return scall<R>("getAppName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getAppVersion(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAppVersion")] != -1);
		return scall<R>("getAppVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Rectangle, typename... Args>
	auto getBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds")] != -1);
		return call<R>("getBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Display, typename... Args>
	static auto getCurrent(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCurrent")] != -1);
		return scall<R>("getCurrent", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Control, typename... Args>
	auto getCursorControl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCursorControl")] != -1);
		return call<R>("getCursorControl", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point, typename... Args>
	auto getCursorLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCursorLocation")] != -1);
		return call<R>("getCursorLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point *, typename... Args>
	auto getCursorSizes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCursorSizes")] != -1);
		return call<R>("getCursorSizes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getData")] != -1);
		return call<R>("getData", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Display, typename... Args>
	static auto getDefault(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefault")] != -1);
		return scall<R>("getDefault", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDepth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDepth")] != -1);
		return call<R>("getDepth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDismissalAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDismissalAlignment")] != -1);
		return call<R>("getDismissalAlignment", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDoubleClickTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDoubleClickTime")] != -1);
		return call<R>("getDoubleClickTime", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Control, typename... Args>
	auto getFocusControl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFocusControl")] != -1);
		return call<R>("getFocusControl", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getHighContrast(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHighContrast")] != -1);
		return call<R>("getHighContrast", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getIconDepth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIconDepth")] != -1);
		return call<R>("getIconDepth", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point *, typename... Args>
	auto getIconSizes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIconSizes")] != -1);
		return call<R>("getIconSizes", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Menu, typename... Args>
	auto getMenuBar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMenuBar")] != -1);
		return call<R>("getMenuBar", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Monitor *, typename... Args>
	auto getMonitors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMonitors")] != -1);
		return call<R>("getMonitors", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Monitor, typename... Args>
	auto getPrimaryMonitor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrimaryMonitor")] != -1);
		return call<R>("getPrimaryMonitor", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Shell *, typename... Args>
	auto getShells(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getShells")] != -1);
		return call<R>("getShells", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Thread, typename... Args>
	auto getSyncThread(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSyncThread")] != -1);
		return call<R>("getSyncThread", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Synchronizer, typename... Args>
	auto getSynchronizer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSynchronizer")] != -1);
		return call<R>("getSynchronizer", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Color, typename... Args>
	auto getSystemColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSystemColor")] != -1);
		return call<R>("getSystemColor", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Cursor, typename... Args>
	auto getSystemCursor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSystemCursor")] != -1);
		return call<R>("getSystemCursor", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Image, typename... Args>
	auto getSystemImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSystemImage")] != -1);
		return call<R>("getSystemImage", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Menu, typename... Args>
	auto getSystemMenu(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSystemMenu")] != -1);
		return call<R>("getSystemMenu", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::TaskBar, typename... Args>
	auto getSystemTaskBar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSystemTaskBar")] != -1);
		return call<R>("getSystemTaskBar", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Tray, typename... Args>
	auto getSystemTray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSystemTray")] != -1);
		return call<R>("getSystemTray", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Thread, typename... Args>
	auto getThread(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getThread")] != -1);
		return call<R>("getThread", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getTouchEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTouchEnabled")] != -1);
		return call<R>("getTouchEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto internal_dispose_GC(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("internal_dispose_GC")] != -1);
		return call<R>("internal_dispose_GC", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto internal_new_GC(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("internal_new_GC")] != -1);
		return call<R>("internal_new_GC", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point, typename... Args>
	auto map(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("map")] != -1);
		return call<R>("map", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto post(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("post")] != -1);
		return call<R>("post", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto readAndDispatch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readAndDispatch")] != -1);
		return call<R>("readAndDispatch", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeFilter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeFilter")] != -1);
		return call<R>("removeFilter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeListener")] != -1);
		return call<R>("removeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto sendPostExternalEventDispatchEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sendPostExternalEventDispatchEvent")] != -1);
		return call<R>("sendPostExternalEventDispatchEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto sendPreExternalEventDispatchEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sendPreExternalEventDispatchEvent")] != -1);
		return call<R>("sendPreExternalEventDispatchEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setAppName(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAppName")] != -1);
		return scall<R>("setAppName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setAppVersion(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAppVersion")] != -1);
		return scall<R>("setAppVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCursorLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCursorLocation")] != -1);
		return call<R>("setCursorLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setData")] != -1);
		return call<R>("setData", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSynchronizer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSynchronizer")] != -1);
		return call<R>("setSynchronizer", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto sleep(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sleep")] != -1);
		return call<R>("sleep", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto syncExec(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("syncExec")] != -1);
		return call<R>("syncExec", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto timerExec(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("timerExec")] != -1);
		return call<R>("timerExec", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto update(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("update")] != -1);
		return call<R>("update", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto wake(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("wake")] != -1);
		return call<R>("wake", std::forward<Args>(args)...);
	}

};

#endif
