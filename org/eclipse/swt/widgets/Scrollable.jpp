#ifndef org_eclipse_swt_widgets_Scrollable_HPP
#define org_eclipse_swt_widgets_Scrollable_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::widgets::Scrollable : public jObject<::org::eclipse::swt::widgets::Scrollable, ::org::eclipse::swt::widgets::Control> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_widgets / "Scrollable";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Composite, ::jint)>(), //
		jMethod<::org::eclipse::swt::graphics::Rectangle(::jint, ::jint, ::jint, ::jint)>("computeTrim"), //
		jMethod<::jint()>("getBorderWidth"), //
		jMethod<::org::eclipse::swt::graphics::Rectangle()>("getClientArea"), //
		jMethod<::org::eclipse::swt::widgets::ScrollBar()>("getHorizontalBar"), //
		jMethod<::jint()>("getScrollbarsMode"), //
		jMethod<::org::eclipse::swt::widgets::ScrollBar()>("getVerticalBar"), //
	};

	template<typename R = ::org::eclipse::swt::graphics::Rectangle, typename... Args>
	auto computeTrim(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("computeTrim")] != -1);
		return call<R>("computeTrim", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBorderWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorderWidth")] != -1);
		return call<R>("getBorderWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Rectangle, typename... Args>
	auto getClientArea(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClientArea")] != -1);
		return call<R>("getClientArea", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::ScrollBar, typename... Args>
	auto getHorizontalBar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHorizontalBar")] != -1);
		return call<R>("getHorizontalBar", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getScrollbarsMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScrollbarsMode")] != -1);
		return call<R>("getScrollbarsMode", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::ScrollBar, typename... Args>
	auto getVerticalBar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVerticalBar")] != -1);
		return call<R>("getVerticalBar", std::forward<Args>(args)...);
	}

};

#endif
