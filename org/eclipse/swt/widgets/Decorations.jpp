#ifndef org_eclipse_swt_widgets_Decorations_HPP
#define org_eclipse_swt_widgets_Decorations_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::widgets::Decorations : public jObject<::org::eclipse::swt::widgets::Decorations, ::org::eclipse::swt::widgets::Canvas> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_widgets / "Decorations";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Composite, ::jint)>(), //
		jMethod<::org::eclipse::swt::widgets::Button()>("getDefaultButton"), //
		jMethod<::org::eclipse::swt::graphics::Image()>("getImage"), //
		jMethod<::org::eclipse::swt::graphics::Image *()>("getImages"), //
		jMethod<::jboolean()>("getMaximized"), //
		jMethod<::org::eclipse::swt::widgets::Menu()>("getMenuBar"), //
		jMethod<::jboolean()>("getMinimized"), //
		jMethod<::java::lang::String()>("getText"), //
		jMethod<::jboolean()>("isReparentable"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::Button)>("setDefaultButton"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Image)>("setImage"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Image *)>("setImages"), //
		jMethod<::jvoid(::jboolean)>("setMaximized"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::Menu)>("setMenuBar"), //
		jMethod<::jvoid(::jboolean)>("setMinimized"), //
		jMethod<::jvoid(::java::lang::String)>("setText"), //
	};

	template<typename R = ::org::eclipse::swt::widgets::Button, typename... Args>
	auto getDefaultButton(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultButton")] != -1);
		return call<R>("getDefaultButton", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Image, typename... Args>
	auto getImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getImage")] != -1);
		return call<R>("getImage", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Image *, typename... Args>
	auto getImages(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getImages")] != -1);
		return call<R>("getImages", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getMaximized(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaximized")] != -1);
		return call<R>("getMaximized", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Menu, typename... Args>
	auto getMenuBar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMenuBar")] != -1);
		return call<R>("getMenuBar", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getMinimized(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinimized")] != -1);
		return call<R>("getMinimized", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getText")] != -1);
		return call<R>("getText", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isReparentable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isReparentable")] != -1);
		return call<R>("isReparentable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDefaultButton(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDefaultButton")] != -1);
		return call<R>("setDefaultButton", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setImage")] != -1);
		return call<R>("setImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setImages(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setImages")] != -1);
		return call<R>("setImages", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaximized(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMaximized")] != -1);
		return call<R>("setMaximized", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMenuBar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMenuBar")] != -1);
		return call<R>("setMenuBar", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMinimized(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMinimized")] != -1);
		return call<R>("setMinimized", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setText")] != -1);
		return call<R>("setText", std::forward<Args>(args)...);
	}

};

#endif
