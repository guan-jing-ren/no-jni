#ifndef org_eclipse_swt_widgets_Shell_HPP
#define org_eclipse_swt_widgets_Shell_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::widgets::Shell : public jObject<::org::eclipse::swt::widgets::Shell, ::org::eclipse::swt::widgets::Decorations> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_widgets / "Shell";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint)>(), //
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Display)>(), //
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Display, ::jint)>(), //
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Shell)>(), //
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Shell, ::jint)>(), //
		jMethod<::jvoid(::org::eclipse::swt::events::ShellListener)>("addShellListener"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::org::eclipse::swt::graphics::Rectangle(::jint, ::jint, ::jint, ::jint)>("computeTrim"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jvoid()>("forceActive"), //
		jMethod<::jint()>("getAlpha"), //
		jMethod<::org::eclipse::swt::graphics::Rectangle()>("getBounds"), //
		jMethod<::jboolean()>("getFullScreen"), //
		jMethod<::jint()>("getImeInputMode"), //
		jMethod<::org::eclipse::swt::graphics::Point()>("getLocation"), //
		jMethod<::jboolean()>("getMaximized"), //
		jMethod<::org::eclipse::swt::graphics::Point()>("getMinimumSize"), //
		jMethod<::jboolean()>("getModified"), //
		jMethod<::org::eclipse::swt::graphics::Region()>("getRegion"), //
		jMethod<::org::eclipse::swt::widgets::Shell *()>("getShells"), //
		jMethod<::org::eclipse::swt::graphics::Point()>("getSize"), //
		jMethod<::org::eclipse::swt::widgets::ToolBar()>("getToolBar"), //
		jMethod<::jboolean()>("getVisible"), //
		jMethod<::org::eclipse::swt::widgets::Shell(::org::eclipse::swt::widgets::Display, ::jlong)>("gtk_new"), //
		jMethod<::org::eclipse::swt::widgets::Shell(::org::eclipse::swt::widgets::Display, ::jlong)>("internal_new"), //
		jMethod<::jboolean()>("isEnabled"), //
		jMethod<::jboolean()>("isVisible"), //
		jMethod<::jvoid()>("open"), //
		jMethod<::jboolean(::org::eclipse::swt::graphics::GC)>("print"), //
		jMethod<::jvoid(::org::eclipse::swt::events::ShellListener)>("removeShellListener"), //
		jMethod<::jvoid()>("setActive"), //
		jMethod<::jvoid(::jint)>("setAlpha"), //
		jMethod<::jvoid(::jboolean)>("setEnabled"), //
		jMethod<::jvoid(::jboolean)>("setFullScreen"), //
		jMethod<::jvoid(::jint)>("setImeInputMode"), //
		jMethod<::jvoid(::jboolean)>("setMaximized"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::Menu)>("setMenuBar"), //
		jMethod<::jvoid(::jboolean)>("setMinimized"), //
		jMethod<::jvoid(::jint, ::jint)>("setMinimumSize"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Point)>("setMinimumSize"), //
		jMethod<::jvoid(::jboolean)>("setModified"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Region)>("setRegion"), //
		jMethod<::jvoid(::java::lang::String)>("setText"), //
		jMethod<::jvoid(::jboolean)>("setVisible"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addShellListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addShellListener")] != -1);
		return call<R>("addShellListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Rectangle, typename... Args>
	auto computeTrim(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("computeTrim")] != -1);
		return call<R>("computeTrim", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto forceActive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("forceActive")] != -1);
		return call<R>("forceActive", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAlpha(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlpha")] != -1);
		return call<R>("getAlpha", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Rectangle, typename... Args>
	auto getBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds")] != -1);
		return call<R>("getBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getFullScreen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFullScreen")] != -1);
		return call<R>("getFullScreen", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getImeInputMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getImeInputMode")] != -1);
		return call<R>("getImeInputMode", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point, typename... Args>
	auto getLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocation")] != -1);
		return call<R>("getLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getMaximized(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaximized")] != -1);
		return call<R>("getMaximized", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point, typename... Args>
	auto getMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinimumSize")] != -1);
		return call<R>("getMinimumSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getModified(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getModified")] != -1);
		return call<R>("getModified", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Region, typename... Args>
	auto getRegion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRegion")] != -1);
		return call<R>("getRegion", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Shell *, typename... Args>
	auto getShells(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getShells")] != -1);
		return call<R>("getShells", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point, typename... Args>
	auto getSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return call<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::ToolBar, typename... Args>
	auto getToolBar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getToolBar")] != -1);
		return call<R>("getToolBar", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVisible")] != -1);
		return call<R>("getVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Shell, typename... Args>
	static auto gtk_new(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("gtk_new")] != -1);
		return scall<R>("gtk_new", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Shell, typename... Args>
	static auto internal_new(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("internal_new")] != -1);
		return scall<R>("internal_new", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEnabled")] != -1);
		return call<R>("isEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isVisible")] != -1);
		return call<R>("isVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto open(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("open")] != -1);
		return call<R>("open", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto print(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("print")] != -1);
		return call<R>("print", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeShellListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeShellListener")] != -1);
		return call<R>("removeShellListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setActive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setActive")] != -1);
		return call<R>("setActive", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAlpha(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAlpha")] != -1);
		return call<R>("setAlpha", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEnabled")] != -1);
		return call<R>("setEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFullScreen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFullScreen")] != -1);
		return call<R>("setFullScreen", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setImeInputMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setImeInputMode")] != -1);
		return call<R>("setImeInputMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaximized(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMaximized")] != -1);
		return call<R>("setMaximized", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMenuBar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMenuBar")] != -1);
		return call<R>("setMenuBar", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMinimized(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMinimized")] != -1);
		return call<R>("setMinimized", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMinimumSize")] != -1);
		return call<R>("setMinimumSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setModified(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setModified")] != -1);
		return call<R>("setModified", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRegion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRegion")] != -1);
		return call<R>("setRegion", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setText")] != -1);
		return call<R>("setText", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVisible")] != -1);
		return call<R>("setVisible", std::forward<Args>(args)...);
	}

};

#endif
