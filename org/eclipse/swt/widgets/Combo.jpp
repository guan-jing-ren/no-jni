#ifndef org_eclipse_swt_widgets_Combo_HPP
#define org_eclipse_swt_widgets_Combo_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::widgets::Combo : public jObject<::org::eclipse::swt::widgets::Combo, ::org::eclipse::swt::widgets::Composite> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_widgets / "Combo";

	constexpr static Enume field_signatures{
		jField<::jint>("LIMIT"), //
	};

	template<typename F = ::jint>
	static auto LIMIT() {
		static_assert(field_signatures[jField<F>("LIMIT")] != -1);
		return sat<F>("LIMIT");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Composite, ::jint)>(), //
		jMethod<::jvoid(::java::lang::String)>("add"), //
		jMethod<::jvoid(::java::lang::String, ::jint)>("add"), //
		jMethod<::jvoid(::org::eclipse::swt::events::ModifyListener)>("addModifyListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::SegmentListener)>("addSegmentListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::SelectionListener)>("addSelectionListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::VerifyListener)>("addVerifyListener"), //
		jMethod<::jvoid()>("clearSelection"), //
		jMethod<::org::eclipse::swt::graphics::Point(::jint, ::jint, ::jboolean)>("computeSize"), //
		jMethod<::jvoid()>("copy"), //
		jMethod<::jvoid()>("cut"), //
		jMethod<::jvoid(::jint)>("deselect"), //
		jMethod<::jvoid()>("deselectAll"), //
		jMethod<::org::eclipse::swt::graphics::Point()>("getCaretLocation"), //
		jMethod<::jint()>("getCaretPosition"), //
		jMethod<::java::lang::String(::jint)>("getItem"), //
		jMethod<::jint()>("getItemCount"), //
		jMethod<::jint()>("getItemHeight"), //
		jMethod<::java::lang::String *()>("getItems"), //
		jMethod<::jboolean()>("getListVisible"), //
		jMethod<::jint()>("getOrientation"), //
		jMethod<::org::eclipse::swt::graphics::Point()>("getSelection"), //
		jMethod<::jint()>("getSelectionIndex"), //
		jMethod<::java::lang::String()>("getText"), //
		jMethod<::jint()>("getTextHeight"), //
		jMethod<::jint()>("getTextLimit"), //
		jMethod<::jint()>("getVisibleItemCount"), //
		jMethod<::jint(::java::lang::String)>("indexOf"), //
		jMethod<::jint(::java::lang::String, ::jint)>("indexOf"), //
		jMethod<::jvoid()>("paste"), //
		jMethod<::jvoid(::jint)>("remove"), //
		jMethod<::jvoid(::jint, ::jint)>("remove"), //
		jMethod<::jvoid(::java::lang::String)>("remove"), //
		jMethod<::jvoid()>("removeAll"), //
		jMethod<::jvoid(::org::eclipse::swt::events::ModifyListener)>("removeModifyListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::SegmentListener)>("removeSegmentListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::SelectionListener)>("removeSelectionListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::VerifyListener)>("removeVerifyListener"), //
		jMethod<::jvoid(::jint)>("select"), //
		jMethod<::jvoid(::jint, ::java::lang::String)>("setItem"), //
		jMethod<::jvoid(::java::lang::String *)>("setItems"), //
		jMethod<::jvoid(::jboolean)>("setListVisible"), //
		jMethod<::jvoid(::jint)>("setOrientation"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Point)>("setSelection"), //
		jMethod<::jvoid(::java::lang::String)>("setText"), //
		jMethod<::jvoid(::jint)>("setTextLimit"), //
		jMethod<::jvoid(::jint)>("setVisibleItemCount"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addModifyListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addModifyListener")] != -1);
		return call<R>("addModifyListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addSegmentListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addSegmentListener")] != -1);
		return call<R>("addSegmentListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addSelectionListener")] != -1);
		return call<R>("addSelectionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addVerifyListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addVerifyListener")] != -1);
		return call<R>("addVerifyListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clearSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clearSelection")] != -1);
		return call<R>("clearSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point, typename... Args>
	auto computeSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("computeSize")] != -1);
		return call<R>("computeSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto copy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("copy")] != -1);
		return call<R>("copy", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto cut(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cut")] != -1);
		return call<R>("cut", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deselect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deselect")] != -1);
		return call<R>("deselect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deselectAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deselectAll")] != -1);
		return call<R>("deselectAll", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point, typename... Args>
	auto getCaretLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCaretLocation")] != -1);
		return call<R>("getCaretLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCaretPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCaretPosition")] != -1);
		return call<R>("getCaretPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItem")] != -1);
		return call<R>("getItem", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getItemCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItemCount")] != -1);
		return call<R>("getItemCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getItemHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItemHeight")] != -1);
		return call<R>("getItemHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getItems(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItems")] != -1);
		return call<R>("getItems", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getListVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getListVisible")] != -1);
		return call<R>("getListVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOrientation")] != -1);
		return call<R>("getOrientation", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point, typename... Args>
	auto getSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelection")] != -1);
		return call<R>("getSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSelectionIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionIndex")] != -1);
		return call<R>("getSelectionIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getText")] != -1);
		return call<R>("getText", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTextHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextHeight")] != -1);
		return call<R>("getTextHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTextLimit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextLimit")] != -1);
		return call<R>("getTextLimit", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getVisibleItemCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVisibleItemCount")] != -1);
		return call<R>("getVisibleItemCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto indexOf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("indexOf")] != -1);
		return call<R>("indexOf", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paste(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paste")] != -1);
		return call<R>("paste", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAll")] != -1);
		return call<R>("removeAll", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeModifyListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeModifyListener")] != -1);
		return call<R>("removeModifyListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeSegmentListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeSegmentListener")] != -1);
		return call<R>("removeSegmentListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeSelectionListener")] != -1);
		return call<R>("removeSelectionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeVerifyListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeVerifyListener")] != -1);
		return call<R>("removeVerifyListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto select(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("select")] != -1);
		return call<R>("select", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setItem")] != -1);
		return call<R>("setItem", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setItems(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setItems")] != -1);
		return call<R>("setItems", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setListVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setListVisible")] != -1);
		return call<R>("setListVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOrientation")] != -1);
		return call<R>("setOrientation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelection")] != -1);
		return call<R>("setSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setText")] != -1);
		return call<R>("setText", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTextLimit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTextLimit")] != -1);
		return call<R>("setTextLimit", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVisibleItemCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVisibleItemCount")] != -1);
		return call<R>("setVisibleItemCount", std::forward<Args>(args)...);
	}

};

#endif
