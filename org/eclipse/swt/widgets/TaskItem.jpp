#ifndef org_eclipse_swt_widgets_TaskItem_HPP
#define org_eclipse_swt_widgets_TaskItem_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::widgets::TaskItem : public jObject<::org::eclipse::swt::widgets::TaskItem, ::org::eclipse::swt::widgets::Item> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_widgets / "TaskItem";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::org::eclipse::swt::widgets::Menu()>("getMenu"), //
		jMethod<::org::eclipse::swt::graphics::Image()>("getOverlayImage"), //
		jMethod<::java::lang::String()>("getOverlayText"), //
		jMethod<::org::eclipse::swt::widgets::TaskBar()>("getParent"), //
		jMethod<::jint()>("getProgress"), //
		jMethod<::jint()>("getProgressState"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::Menu)>("setMenu"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Image)>("setOverlayImage"), //
		jMethod<::jvoid(::java::lang::String)>("setOverlayText"), //
		jMethod<::jvoid(::jint)>("setProgress"), //
		jMethod<::jvoid(::jint)>("setProgressState"), //
	};

	template<typename R = ::org::eclipse::swt::widgets::Menu, typename... Args>
	auto getMenu(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMenu")] != -1);
		return call<R>("getMenu", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Image, typename... Args>
	auto getOverlayImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOverlayImage")] != -1);
		return call<R>("getOverlayImage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getOverlayText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOverlayText")] != -1);
		return call<R>("getOverlayText", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::TaskBar, typename... Args>
	auto getParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParent")] != -1);
		return call<R>("getParent", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getProgress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProgress")] != -1);
		return call<R>("getProgress", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getProgressState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProgressState")] != -1);
		return call<R>("getProgressState", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMenu(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMenu")] != -1);
		return call<R>("setMenu", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOverlayImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOverlayImage")] != -1);
		return call<R>("setOverlayImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOverlayText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOverlayText")] != -1);
		return call<R>("setOverlayText", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setProgress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setProgress")] != -1);
		return call<R>("setProgress", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setProgressState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setProgressState")] != -1);
		return call<R>("setProgressState", std::forward<Args>(args)...);
	}

};

#endif
