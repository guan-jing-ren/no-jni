#ifndef org_eclipse_swt_widgets_ScrollBar_HPP
#define org_eclipse_swt_widgets_ScrollBar_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::widgets::ScrollBar : public jObject<::org::eclipse::swt::widgets::ScrollBar, ::org::eclipse::swt::widgets::Widget> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_widgets / "ScrollBar";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::org::eclipse::swt::events::SelectionListener)>("addSelectionListener"), //
		jMethod<::jboolean()>("getEnabled"), //
		jMethod<::jint()>("getIncrement"), //
		jMethod<::jint()>("getMaximum"), //
		jMethod<::jint()>("getMinimum"), //
		jMethod<::jint()>("getPageIncrement"), //
		jMethod<::org::eclipse::swt::widgets::Scrollable()>("getParent"), //
		jMethod<::jint()>("getSelection"), //
		jMethod<::org::eclipse::swt::graphics::Point()>("getSize"), //
		jMethod<::jint()>("getThumb"), //
		jMethod<::org::eclipse::swt::graphics::Rectangle()>("getThumbBounds"), //
		jMethod<::org::eclipse::swt::graphics::Rectangle()>("getThumbTrackBounds"), //
		jMethod<::jboolean()>("getVisible"), //
		jMethod<::jboolean()>("isEnabled"), //
		jMethod<::jboolean()>("isVisible"), //
		jMethod<::jvoid(::org::eclipse::swt::events::SelectionListener)>("removeSelectionListener"), //
		jMethod<::jvoid(::jboolean)>("setEnabled"), //
		jMethod<::jvoid(::jint)>("setIncrement"), //
		jMethod<::jvoid(::jint)>("setMaximum"), //
		jMethod<::jvoid(::jint)>("setMinimum"), //
		jMethod<::jvoid(::jint)>("setPageIncrement"), //
		jMethod<::jvoid(::jint)>("setSelection"), //
		jMethod<::jvoid(::jint)>("setThumb"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("setValues"), //
		jMethod<::jvoid(::jboolean)>("setVisible"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addSelectionListener")] != -1);
		return call<R>("addSelectionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEnabled")] != -1);
		return call<R>("getEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIncrement")] != -1);
		return call<R>("getIncrement", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaximum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaximum")] != -1);
		return call<R>("getMaximum", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinimum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinimum")] != -1);
		return call<R>("getMinimum", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPageIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPageIncrement")] != -1);
		return call<R>("getPageIncrement", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Scrollable, typename... Args>
	auto getParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParent")] != -1);
		return call<R>("getParent", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelection")] != -1);
		return call<R>("getSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point, typename... Args>
	auto getSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return call<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getThumb(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getThumb")] != -1);
		return call<R>("getThumb", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Rectangle, typename... Args>
	auto getThumbBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getThumbBounds")] != -1);
		return call<R>("getThumbBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Rectangle, typename... Args>
	auto getThumbTrackBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getThumbTrackBounds")] != -1);
		return call<R>("getThumbTrackBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVisible")] != -1);
		return call<R>("getVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEnabled")] != -1);
		return call<R>("isEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isVisible")] != -1);
		return call<R>("isVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeSelectionListener")] != -1);
		return call<R>("removeSelectionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEnabled")] != -1);
		return call<R>("setEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIncrement")] != -1);
		return call<R>("setIncrement", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaximum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMaximum")] != -1);
		return call<R>("setMaximum", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMinimum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMinimum")] != -1);
		return call<R>("setMinimum", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPageIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPageIncrement")] != -1);
		return call<R>("setPageIncrement", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelection")] != -1);
		return call<R>("setSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setThumb(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setThumb")] != -1);
		return call<R>("setThumb", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValues(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setValues")] != -1);
		return call<R>("setValues", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVisible")] != -1);
		return call<R>("setVisible", std::forward<Args>(args)...);
	}

};

#endif
