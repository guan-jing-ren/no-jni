#ifndef org_eclipse_swt_widgets_Caret_HPP
#define org_eclipse_swt_widgets_Caret_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::widgets::Caret : public jObject<::org::eclipse::swt::widgets::Caret, ::org::eclipse::swt::widgets::Widget> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_widgets / "Caret";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Canvas, ::jint)>(), //
		jMethod<::org::eclipse::swt::graphics::Rectangle()>("getBounds"), //
		jMethod<::org::eclipse::swt::graphics::Font()>("getFont"), //
		jMethod<::org::eclipse::swt::graphics::Image()>("getImage"), //
		jMethod<::org::eclipse::swt::graphics::Point()>("getLocation"), //
		jMethod<::org::eclipse::swt::widgets::Canvas()>("getParent"), //
		jMethod<::org::eclipse::swt::graphics::Point()>("getSize"), //
		jMethod<::jboolean()>("getVisible"), //
		jMethod<::jboolean()>("isVisible"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("setBounds"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Rectangle)>("setBounds"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Font)>("setFont"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Image)>("setImage"), //
		jMethod<::jvoid(::jint, ::jint)>("setLocation"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Point)>("setLocation"), //
		jMethod<::jvoid(::jint, ::jint)>("setSize"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Point)>("setSize"), //
		jMethod<::jvoid(::jboolean)>("setVisible"), //
	};

	template<typename R = ::org::eclipse::swt::graphics::Rectangle, typename... Args>
	auto getBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds")] != -1);
		return call<R>("getBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Font, typename... Args>
	auto getFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFont")] != -1);
		return call<R>("getFont", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Image, typename... Args>
	auto getImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getImage")] != -1);
		return call<R>("getImage", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point, typename... Args>
	auto getLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocation")] != -1);
		return call<R>("getLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Canvas, typename... Args>
	auto getParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParent")] != -1);
		return call<R>("getParent", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point, typename... Args>
	auto getSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return call<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVisible")] != -1);
		return call<R>("getVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isVisible")] != -1);
		return call<R>("isVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBounds")] != -1);
		return call<R>("setBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFont")] != -1);
		return call<R>("setFont", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setImage")] != -1);
		return call<R>("setImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLocation")] != -1);
		return call<R>("setLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSize")] != -1);
		return call<R>("setSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVisible")] != -1);
		return call<R>("setVisible", std::forward<Args>(args)...);
	}

};

#endif
