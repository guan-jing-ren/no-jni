#ifndef org_eclipse_swt_widgets_TaskBar_HPP
#define org_eclipse_swt_widgets_TaskBar_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::widgets::TaskBar : public jObject<::org::eclipse::swt::widgets::TaskBar, ::org::eclipse::swt::widgets::Widget> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_widgets / "TaskBar";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::org::eclipse::swt::widgets::TaskItem(::jint)>("getItem"), //
		jMethod<::org::eclipse::swt::widgets::TaskItem(::org::eclipse::swt::widgets::Shell)>("getItem"), //
		jMethod<::jint()>("getItemCount"), //
		jMethod<::org::eclipse::swt::widgets::TaskItem *()>("getItems"), //
	};

	template<typename R = ::org::eclipse::swt::widgets::TaskItem, typename... Args>
	auto getItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItem")] != -1);
		return call<R>("getItem", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getItemCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItemCount")] != -1);
		return call<R>("getItemCount", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::TaskItem *, typename... Args>
	auto getItems(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItems")] != -1);
		return call<R>("getItems", std::forward<Args>(args)...);
	}

};

#endif
