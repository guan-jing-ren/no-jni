#ifndef org_eclipse_swt_widgets_ToolTip_HPP
#define org_eclipse_swt_widgets_ToolTip_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::widgets::ToolTip : public jObject<::org::eclipse::swt::widgets::ToolTip, ::org::eclipse::swt::widgets::Widget> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_widgets / "ToolTip";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Shell, ::jint)>(), //
		jMethod<::jvoid(::org::eclipse::swt::events::SelectionListener)>("addSelectionListener"), //
		jMethod<::jboolean()>("getAutoHide"), //
		jMethod<::java::lang::String()>("getMessage"), //
		jMethod<::org::eclipse::swt::widgets::Shell()>("getParent"), //
		jMethod<::java::lang::String()>("getText"), //
		jMethod<::jboolean()>("getVisible"), //
		jMethod<::jboolean()>("isVisible"), //
		jMethod<::jvoid(::org::eclipse::swt::events::SelectionListener)>("removeSelectionListener"), //
		jMethod<::jvoid(::jboolean)>("setAutoHide"), //
		jMethod<::jvoid(::jint, ::jint)>("setLocation"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Point)>("setLocation"), //
		jMethod<::jvoid(::java::lang::String)>("setMessage"), //
		jMethod<::jvoid(::java::lang::String)>("setText"), //
		jMethod<::jvoid(::jboolean)>("setVisible"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addSelectionListener")] != -1);
		return call<R>("addSelectionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getAutoHide(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAutoHide")] != -1);
		return call<R>("getAutoHide", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMessage")] != -1);
		return call<R>("getMessage", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Shell, typename... Args>
	auto getParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParent")] != -1);
		return call<R>("getParent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getText")] != -1);
		return call<R>("getText", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVisible")] != -1);
		return call<R>("getVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isVisible")] != -1);
		return call<R>("isVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeSelectionListener")] != -1);
		return call<R>("removeSelectionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAutoHide(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAutoHide")] != -1);
		return call<R>("setAutoHide", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLocation")] != -1);
		return call<R>("setLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMessage")] != -1);
		return call<R>("setMessage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setText")] != -1);
		return call<R>("setText", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVisible")] != -1);
		return call<R>("setVisible", std::forward<Args>(args)...);
	}

};

#endif
