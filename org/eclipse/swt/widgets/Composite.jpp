#ifndef org_eclipse_swt_widgets_Composite_HPP
#define org_eclipse_swt_widgets_Composite_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::widgets::Composite : public jObject<::org::eclipse::swt::widgets::Composite, ::org::eclipse::swt::widgets::Scrollable> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_widgets / "Composite";

	constexpr static Enume field_signatures{
		jField<::jlong>("embeddedHandle"), //
	};

	template<typename F = ::jlong>
	auto embeddedHandle() const {
		static_assert(field_signatures[jField<F>("embeddedHandle")] != -1);
		return at<F>("embeddedHandle");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Composite, ::jint)>(), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::Control *)>("changed"), //
		jMethod<::org::eclipse::swt::graphics::Point(::jint, ::jint, ::jboolean)>("computeSize"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::GC, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("drawBackground"), //
		jMethod<::jint()>("getBackgroundMode"), //
		jMethod<::org::eclipse::swt::widgets::Control *()>("getChildren"), //
		jMethod<::org::eclipse::swt::graphics::Rectangle()>("getClientArea"), //
		jMethod<::org::eclipse::swt::widgets::Layout()>("getLayout"), //
		jMethod<::jboolean()>("getLayoutDeferred"), //
		jMethod<::org::eclipse::swt::widgets::Control *()>("getTabList"), //
		jMethod<::jboolean()>("isLayoutDeferred"), //
		jMethod<::jvoid()>("layout"), //
		jMethod<::jvoid(::jboolean)>("layout"), //
		jMethod<::jvoid(::jboolean, ::jboolean)>("layout"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::Control *)>("layout"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::Control *, ::jint)>("layout"), //
		jMethod<::jvoid(::jint)>("setBackgroundMode"), //
		jMethod<::jboolean()>("setFocus"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::Layout)>("setLayout"), //
		jMethod<::jvoid(::jboolean)>("setLayoutDeferred"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::Control *)>("setTabList"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto changed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("changed")] != -1);
		return call<R>("changed", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point, typename... Args>
	auto computeSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("computeSize")] != -1);
		return call<R>("computeSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawBackground")] != -1);
		return call<R>("drawBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBackgroundMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBackgroundMode")] != -1);
		return call<R>("getBackgroundMode", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Control *, typename... Args>
	auto getChildren(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChildren")] != -1);
		return call<R>("getChildren", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Rectangle, typename... Args>
	auto getClientArea(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClientArea")] != -1);
		return call<R>("getClientArea", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Layout, typename... Args>
	auto getLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLayout")] != -1);
		return call<R>("getLayout", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getLayoutDeferred(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLayoutDeferred")] != -1);
		return call<R>("getLayoutDeferred", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Control *, typename... Args>
	auto getTabList(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTabList")] != -1);
		return call<R>("getTabList", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLayoutDeferred(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLayoutDeferred")] != -1);
		return call<R>("isLayoutDeferred", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto layout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("layout")] != -1);
		return call<R>("layout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackgroundMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBackgroundMode")] != -1);
		return call<R>("setBackgroundMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto setFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFocus")] != -1);
		return call<R>("setFocus", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLayout")] != -1);
		return call<R>("setLayout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLayoutDeferred(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLayoutDeferred")] != -1);
		return call<R>("setLayoutDeferred", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTabList(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTabList")] != -1);
		return call<R>("setTabList", std::forward<Args>(args)...);
	}

};

#endif
