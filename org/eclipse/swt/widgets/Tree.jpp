#ifndef org_eclipse_swt_widgets_Tree_HPP
#define org_eclipse_swt_widgets_Tree_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::widgets::Tree : public jObject<::org::eclipse::swt::widgets::Tree, ::org::eclipse::swt::widgets::Composite> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_widgets / "Tree";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Composite, ::jint)>(), //
		jMethod<::jvoid(::org::eclipse::swt::events::SelectionListener)>("addSelectionListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::TreeListener)>("addTreeListener"), //
		jMethod<::jvoid(::jint, ::jboolean)>("clear"), //
		jMethod<::jvoid(::jboolean)>("clearAll"), //
		jMethod<::org::eclipse::swt::graphics::Point(::jint, ::jint, ::jboolean)>("computeSize"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::TreeItem)>("deselect"), //
		jMethod<::jvoid()>("deselectAll"), //
		jMethod<::org::eclipse::swt::graphics::Rectangle()>("getClientArea"), //
		jMethod<::org::eclipse::swt::widgets::TreeColumn(::jint)>("getColumn"), //
		jMethod<::jint()>("getColumnCount"), //
		jMethod<::jint *()>("getColumnOrder"), //
		jMethod<::org::eclipse::swt::widgets::TreeColumn *()>("getColumns"), //
		jMethod<::jint()>("getGridLineWidth"), //
		jMethod<::jint()>("getHeaderHeight"), //
		jMethod<::jboolean()>("getHeaderVisible"), //
		jMethod<::org::eclipse::swt::widgets::TreeItem(::jint)>("getItem"), //
		jMethod<::org::eclipse::swt::widgets::TreeItem(::org::eclipse::swt::graphics::Point)>("getItem"), //
		jMethod<::jint()>("getItemCount"), //
		jMethod<::jint()>("getItemHeight"), //
		jMethod<::org::eclipse::swt::widgets::TreeItem *()>("getItems"), //
		jMethod<::jboolean()>("getLinesVisible"), //
		jMethod<::org::eclipse::swt::widgets::TreeItem()>("getParentItem"), //
		jMethod<::org::eclipse::swt::widgets::TreeItem *()>("getSelection"), //
		jMethod<::jint()>("getSelectionCount"), //
		jMethod<::org::eclipse::swt::widgets::TreeColumn()>("getSortColumn"), //
		jMethod<::jint()>("getSortDirection"), //
		jMethod<::org::eclipse::swt::widgets::TreeItem()>("getTopItem"), //
		jMethod<::jint(::org::eclipse::swt::widgets::TreeColumn)>("indexOf"), //
		jMethod<::jint(::org::eclipse::swt::widgets::TreeItem)>("indexOf"), //
		jMethod<::jvoid()>("removeAll"), //
		jMethod<::jvoid(::org::eclipse::swt::events::SelectionListener)>("removeSelectionListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::TreeListener)>("removeTreeListener"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::TreeItem)>("select"), //
		jMethod<::jvoid()>("selectAll"), //
		jMethod<::jvoid(::jint *)>("setColumnOrder"), //
		jMethod<::jvoid(::jboolean)>("setHeaderVisible"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::TreeItem, ::jboolean)>("setInsertMark"), //
		jMethod<::jvoid(::jint)>("setItemCount"), //
		jMethod<::jvoid(::jboolean)>("setLinesVisible"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::TreeItem)>("setSelection"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::TreeItem *)>("setSelection"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::TreeColumn)>("setSortColumn"), //
		jMethod<::jvoid(::jint)>("setSortDirection"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::TreeItem)>("setTopItem"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::TreeColumn)>("showColumn"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::TreeItem)>("showItem"), //
		jMethod<::jvoid()>("showSelection"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addSelectionListener")] != -1);
		return call<R>("addSelectionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addTreeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addTreeListener")] != -1);
		return call<R>("addTreeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clearAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clearAll")] != -1);
		return call<R>("clearAll", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point, typename... Args>
	auto computeSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("computeSize")] != -1);
		return call<R>("computeSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deselect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deselect")] != -1);
		return call<R>("deselect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deselectAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deselectAll")] != -1);
		return call<R>("deselectAll", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Rectangle, typename... Args>
	auto getClientArea(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClientArea")] != -1);
		return call<R>("getClientArea", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::TreeColumn, typename... Args>
	auto getColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumn")] != -1);
		return call<R>("getColumn", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getColumnCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumnCount")] != -1);
		return call<R>("getColumnCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getColumnOrder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumnOrder")] != -1);
		return call<R>("getColumnOrder", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::TreeColumn *, typename... Args>
	auto getColumns(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumns")] != -1);
		return call<R>("getColumns", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getGridLineWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGridLineWidth")] != -1);
		return call<R>("getGridLineWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHeaderHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeaderHeight")] != -1);
		return call<R>("getHeaderHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getHeaderVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeaderVisible")] != -1);
		return call<R>("getHeaderVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::TreeItem, typename... Args>
	auto getItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItem")] != -1);
		return call<R>("getItem", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getItemCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItemCount")] != -1);
		return call<R>("getItemCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getItemHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItemHeight")] != -1);
		return call<R>("getItemHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::TreeItem *, typename... Args>
	auto getItems(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItems")] != -1);
		return call<R>("getItems", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getLinesVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLinesVisible")] != -1);
		return call<R>("getLinesVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::TreeItem, typename... Args>
	auto getParentItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParentItem")] != -1);
		return call<R>("getParentItem", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::TreeItem *, typename... Args>
	auto getSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelection")] != -1);
		return call<R>("getSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSelectionCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionCount")] != -1);
		return call<R>("getSelectionCount", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::TreeColumn, typename... Args>
	auto getSortColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSortColumn")] != -1);
		return call<R>("getSortColumn", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSortDirection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSortDirection")] != -1);
		return call<R>("getSortDirection", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::TreeItem, typename... Args>
	auto getTopItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTopItem")] != -1);
		return call<R>("getTopItem", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto indexOf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("indexOf")] != -1);
		return call<R>("indexOf", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAll")] != -1);
		return call<R>("removeAll", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeSelectionListener")] != -1);
		return call<R>("removeSelectionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeTreeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeTreeListener")] != -1);
		return call<R>("removeTreeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto select(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("select")] != -1);
		return call<R>("select", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto selectAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("selectAll")] != -1);
		return call<R>("selectAll", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColumnOrder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setColumnOrder")] != -1);
		return call<R>("setColumnOrder", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHeaderVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHeaderVisible")] != -1);
		return call<R>("setHeaderVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInsertMark(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setInsertMark")] != -1);
		return call<R>("setInsertMark", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setItemCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setItemCount")] != -1);
		return call<R>("setItemCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLinesVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLinesVisible")] != -1);
		return call<R>("setLinesVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelection")] != -1);
		return call<R>("setSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSortColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSortColumn")] != -1);
		return call<R>("setSortColumn", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSortDirection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSortDirection")] != -1);
		return call<R>("setSortDirection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTopItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTopItem")] != -1);
		return call<R>("setTopItem", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto showColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("showColumn")] != -1);
		return call<R>("showColumn", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto showItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("showItem")] != -1);
		return call<R>("showItem", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto showSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("showSelection")] != -1);
		return call<R>("showSelection", std::forward<Args>(args)...);
	}

};

#endif
