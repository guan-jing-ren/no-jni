#ifndef org_eclipse_swt_widgets_Control_HPP
#define org_eclipse_swt_widgets_Control_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::widgets::Control : public jObject<::org::eclipse::swt::widgets::Control, ::org::eclipse::swt::widgets::Widget> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_widgets / "Control";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Composite, ::jint)>(), //
		jMethod<::jvoid(::org::eclipse::swt::events::ControlListener)>("addControlListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::DragDetectListener)>("addDragDetectListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::FocusListener)>("addFocusListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::GestureListener)>("addGestureListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::HelpListener)>("addHelpListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::KeyListener)>("addKeyListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::MenuDetectListener)>("addMenuDetectListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::MouseListener)>("addMouseListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::MouseMoveListener)>("addMouseMoveListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::MouseTrackListener)>("addMouseTrackListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::MouseWheelListener)>("addMouseWheelListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::PaintListener)>("addPaintListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::TouchListener)>("addTouchListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::TraverseListener)>("addTraverseListener"), //
		jMethod<::org::eclipse::swt::graphics::Point(::jint, ::jint)>("computeSize"), //
		jMethod<::org::eclipse::swt::graphics::Point(::jint, ::jint, ::jboolean)>("computeSize"), //
		jMethod<::jboolean(::org::eclipse::swt::events::MouseEvent)>("dragDetect"), //
		jMethod<::jboolean(::org::eclipse::swt::widgets::Event)>("dragDetect"), //
		jMethod<::jboolean()>("forceFocus"), //
		jMethod<::org::eclipse::swt::accessibility::Accessible()>("getAccessible"), //
		jMethod<::org::eclipse::swt::graphics::Color()>("getBackground"), //
		jMethod<::org::eclipse::swt::graphics::Image()>("getBackgroundImage"), //
		jMethod<::jint()>("getBorderWidth"), //
		jMethod<::org::eclipse::swt::graphics::Rectangle()>("getBounds"), //
		jMethod<::org::eclipse::swt::graphics::Cursor()>("getCursor"), //
		jMethod<::jboolean()>("getDragDetect"), //
		jMethod<::jboolean()>("getEnabled"), //
		jMethod<::org::eclipse::swt::graphics::Font()>("getFont"), //
		jMethod<::org::eclipse::swt::graphics::Color()>("getForeground"), //
		jMethod<::java::lang::Object()>("getLayoutData"), //
		jMethod<::org::eclipse::swt::graphics::Point()>("getLocation"), //
		jMethod<::org::eclipse::swt::widgets::Menu()>("getMenu"), //
		jMethod<::org::eclipse::swt::widgets::Monitor()>("getMonitor"), //
		jMethod<::jint()>("getOrientation"), //
		jMethod<::org::eclipse::swt::widgets::Composite()>("getParent"), //
		jMethod<::org::eclipse::swt::graphics::Region()>("getRegion"), //
		jMethod<::org::eclipse::swt::widgets::Shell()>("getShell"), //
		jMethod<::org::eclipse::swt::graphics::Point()>("getSize"), //
		jMethod<::jint()>("getTextDirection"), //
		jMethod<::java::lang::String()>("getToolTipText"), //
		jMethod<::jboolean()>("getTouchEnabled"), //
		jMethod<::jboolean()>("getVisible"), //
		jMethod<::jvoid(::jlong, ::org::eclipse::swt::graphics::GCData)>("internal_dispose_GC"), //
		jMethod<::jlong(::org::eclipse::swt::graphics::GCData)>("internal_new_GC"), //
		jMethod<::jboolean()>("isEnabled"), //
		jMethod<::jboolean()>("isFocusControl"), //
		jMethod<::jboolean()>("isReparentable"), //
		jMethod<::jboolean()>("isVisible"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::Control)>("moveAbove"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::Control)>("moveBelow"), //
		jMethod<::jvoid()>("pack"), //
		jMethod<::jvoid(::jboolean)>("pack"), //
		jMethod<::jboolean(::org::eclipse::swt::graphics::GC)>("print"), //
		jMethod<::jvoid()>("redraw"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jboolean)>("redraw"), //
		jMethod<::jvoid(::org::eclipse::swt::events::ControlListener)>("removeControlListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::DragDetectListener)>("removeDragDetectListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::FocusListener)>("removeFocusListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::GestureListener)>("removeGestureListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::HelpListener)>("removeHelpListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::KeyListener)>("removeKeyListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::MenuDetectListener)>("removeMenuDetectListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::MouseListener)>("removeMouseListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::MouseMoveListener)>("removeMouseMoveListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::MouseTrackListener)>("removeMouseTrackListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::MouseWheelListener)>("removeMouseWheelListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::PaintListener)>("removePaintListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::TouchListener)>("removeTouchListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::TraverseListener)>("removeTraverseListener"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Color)>("setBackground"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Image)>("setBackgroundImage"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("setBounds"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Rectangle)>("setBounds"), //
		jMethod<::jvoid(::jboolean)>("setCapture"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Cursor)>("setCursor"), //
		jMethod<::jvoid(::jboolean)>("setDragDetect"), //
		jMethod<::jvoid(::jboolean)>("setEnabled"), //
		jMethod<::jboolean()>("setFocus"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Font)>("setFont"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Color)>("setForeground"), //
		jMethod<::jvoid(::java::lang::Object)>("setLayoutData"), //
		jMethod<::jvoid(::jint, ::jint)>("setLocation"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Point)>("setLocation"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::Menu)>("setMenu"), //
		jMethod<::jvoid(::jint)>("setOrientation"), //
		jMethod<::jboolean(::org::eclipse::swt::widgets::Composite)>("setParent"), //
		jMethod<::jvoid(::jboolean)>("setRedraw"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Region)>("setRegion"), //
		jMethod<::jvoid(::jint, ::jint)>("setSize"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Point)>("setSize"), //
		jMethod<::jvoid(::jint)>("setTextDirection"), //
		jMethod<::jvoid(::java::lang::String)>("setToolTipText"), //
		jMethod<::jvoid(::jboolean)>("setTouchEnabled"), //
		jMethod<::jvoid(::jboolean)>("setVisible"), //
		jMethod<::org::eclipse::swt::graphics::Point(::jint, ::jint)>("toControl"), //
		jMethod<::org::eclipse::swt::graphics::Point(::org::eclipse::swt::graphics::Point)>("toControl"), //
		jMethod<::org::eclipse::swt::graphics::Point(::jint, ::jint)>("toDisplay"), //
		jMethod<::org::eclipse::swt::graphics::Point(::org::eclipse::swt::graphics::Point)>("toDisplay"), //
		jMethod<::jboolean(::jint)>("traverse"), //
		jMethod<::jboolean(::jint, ::org::eclipse::swt::events::KeyEvent)>("traverse"), //
		jMethod<::jboolean(::jint, ::org::eclipse::swt::widgets::Event)>("traverse"), //
		jMethod<::jvoid()>("update"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addControlListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addControlListener")] != -1);
		return call<R>("addControlListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addDragDetectListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addDragDetectListener")] != -1);
		return call<R>("addDragDetectListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addFocusListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addFocusListener")] != -1);
		return call<R>("addFocusListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addGestureListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addGestureListener")] != -1);
		return call<R>("addGestureListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addHelpListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addHelpListener")] != -1);
		return call<R>("addHelpListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addKeyListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addKeyListener")] != -1);
		return call<R>("addKeyListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addMenuDetectListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addMenuDetectListener")] != -1);
		return call<R>("addMenuDetectListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addMouseListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addMouseListener")] != -1);
		return call<R>("addMouseListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addMouseMoveListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addMouseMoveListener")] != -1);
		return call<R>("addMouseMoveListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addMouseTrackListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addMouseTrackListener")] != -1);
		return call<R>("addMouseTrackListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addMouseWheelListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addMouseWheelListener")] != -1);
		return call<R>("addMouseWheelListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addPaintListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addPaintListener")] != -1);
		return call<R>("addPaintListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addTouchListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addTouchListener")] != -1);
		return call<R>("addTouchListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addTraverseListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addTraverseListener")] != -1);
		return call<R>("addTraverseListener", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point, typename... Args>
	auto computeSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("computeSize")] != -1);
		return call<R>("computeSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto dragDetect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dragDetect")] != -1);
		return call<R>("dragDetect", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto forceFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("forceFocus")] != -1);
		return call<R>("forceFocus", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::accessibility::Accessible, typename... Args>
	auto getAccessible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessible")] != -1);
		return call<R>("getAccessible", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Color, typename... Args>
	auto getBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBackground")] != -1);
		return call<R>("getBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Image, typename... Args>
	auto getBackgroundImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBackgroundImage")] != -1);
		return call<R>("getBackgroundImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBorderWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorderWidth")] != -1);
		return call<R>("getBorderWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Rectangle, typename... Args>
	auto getBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds")] != -1);
		return call<R>("getBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Cursor, typename... Args>
	auto getCursor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCursor")] != -1);
		return call<R>("getCursor", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getDragDetect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDragDetect")] != -1);
		return call<R>("getDragDetect", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEnabled")] != -1);
		return call<R>("getEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Font, typename... Args>
	auto getFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFont")] != -1);
		return call<R>("getFont", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Color, typename... Args>
	auto getForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getForeground")] != -1);
		return call<R>("getForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getLayoutData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLayoutData")] != -1);
		return call<R>("getLayoutData", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point, typename... Args>
	auto getLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocation")] != -1);
		return call<R>("getLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Menu, typename... Args>
	auto getMenu(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMenu")] != -1);
		return call<R>("getMenu", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Monitor, typename... Args>
	auto getMonitor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMonitor")] != -1);
		return call<R>("getMonitor", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOrientation")] != -1);
		return call<R>("getOrientation", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Composite, typename... Args>
	auto getParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParent")] != -1);
		return call<R>("getParent", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Region, typename... Args>
	auto getRegion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRegion")] != -1);
		return call<R>("getRegion", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Shell, typename... Args>
	auto getShell(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getShell")] != -1);
		return call<R>("getShell", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point, typename... Args>
	auto getSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return call<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTextDirection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextDirection")] != -1);
		return call<R>("getTextDirection", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getToolTipText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getToolTipText")] != -1);
		return call<R>("getToolTipText", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getTouchEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTouchEnabled")] != -1);
		return call<R>("getTouchEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVisible")] != -1);
		return call<R>("getVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto internal_dispose_GC(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("internal_dispose_GC")] != -1);
		return call<R>("internal_dispose_GC", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto internal_new_GC(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("internal_new_GC")] != -1);
		return call<R>("internal_new_GC", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEnabled")] != -1);
		return call<R>("isEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFocusControl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFocusControl")] != -1);
		return call<R>("isFocusControl", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isReparentable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isReparentable")] != -1);
		return call<R>("isReparentable", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isVisible")] != -1);
		return call<R>("isVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto moveAbove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("moveAbove")] != -1);
		return call<R>("moveAbove", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto moveBelow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("moveBelow")] != -1);
		return call<R>("moveBelow", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto pack(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("pack")] != -1);
		return call<R>("pack", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto print(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("print")] != -1);
		return call<R>("print", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto redraw(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("redraw")] != -1);
		return call<R>("redraw", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeControlListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeControlListener")] != -1);
		return call<R>("removeControlListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeDragDetectListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeDragDetectListener")] != -1);
		return call<R>("removeDragDetectListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeFocusListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeFocusListener")] != -1);
		return call<R>("removeFocusListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeGestureListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeGestureListener")] != -1);
		return call<R>("removeGestureListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeHelpListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeHelpListener")] != -1);
		return call<R>("removeHelpListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeKeyListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeKeyListener")] != -1);
		return call<R>("removeKeyListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeMenuDetectListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeMenuDetectListener")] != -1);
		return call<R>("removeMenuDetectListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeMouseListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeMouseListener")] != -1);
		return call<R>("removeMouseListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeMouseMoveListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeMouseMoveListener")] != -1);
		return call<R>("removeMouseMoveListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeMouseTrackListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeMouseTrackListener")] != -1);
		return call<R>("removeMouseTrackListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeMouseWheelListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeMouseWheelListener")] != -1);
		return call<R>("removeMouseWheelListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removePaintListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removePaintListener")] != -1);
		return call<R>("removePaintListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeTouchListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeTouchListener")] != -1);
		return call<R>("removeTouchListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeTraverseListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeTraverseListener")] != -1);
		return call<R>("removeTraverseListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBackground")] != -1);
		return call<R>("setBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackgroundImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBackgroundImage")] != -1);
		return call<R>("setBackgroundImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBounds")] != -1);
		return call<R>("setBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCapture(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCapture")] != -1);
		return call<R>("setCapture", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCursor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCursor")] != -1);
		return call<R>("setCursor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDragDetect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDragDetect")] != -1);
		return call<R>("setDragDetect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEnabled")] != -1);
		return call<R>("setEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto setFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFocus")] != -1);
		return call<R>("setFocus", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFont")] != -1);
		return call<R>("setFont", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setForeground")] != -1);
		return call<R>("setForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLayoutData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLayoutData")] != -1);
		return call<R>("setLayoutData", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLocation")] != -1);
		return call<R>("setLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMenu(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMenu")] != -1);
		return call<R>("setMenu", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOrientation")] != -1);
		return call<R>("setOrientation", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto setParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setParent")] != -1);
		return call<R>("setParent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRedraw(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRedraw")] != -1);
		return call<R>("setRedraw", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRegion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRegion")] != -1);
		return call<R>("setRegion", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSize")] != -1);
		return call<R>("setSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTextDirection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTextDirection")] != -1);
		return call<R>("setTextDirection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setToolTipText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setToolTipText")] != -1);
		return call<R>("setToolTipText", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTouchEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTouchEnabled")] != -1);
		return call<R>("setTouchEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVisible")] != -1);
		return call<R>("setVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point, typename... Args>
	auto toControl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toControl")] != -1);
		return call<R>("toControl", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point, typename... Args>
	auto toDisplay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toDisplay")] != -1);
		return call<R>("toDisplay", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto traverse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("traverse")] != -1);
		return call<R>("traverse", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto update(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("update")] != -1);
		return call<R>("update", std::forward<Args>(args)...);
	}

};

#endif
