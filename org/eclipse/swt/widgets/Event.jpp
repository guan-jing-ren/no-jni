#ifndef org_eclipse_swt_widgets_Event_HPP
#define org_eclipse_swt_widgets_Event_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::widgets::Event : public jObject<::org::eclipse::swt::widgets::Event, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_widgets / "Event";

	constexpr static Enume field_signatures{
		jField<::jint>("button"), //
		jField<::jchar>("character"), //
		jField<::jint>("count"), //
		jField<::java::lang::Object>("data"), //
		jField<::jint>("detail"), //
		jField<::org::eclipse::swt::widgets::Display>("display"), //
		jField<::jboolean>("doit"), //
		jField<::jint>("end"), //
		jField<::org::eclipse::swt::graphics::GC>("gc"), //
		jField<::jint>("height"), //
		jField<::jint>("index"), //
		jField<::org::eclipse::swt::widgets::Widget>("item"), //
		jField<::jint>("keyCode"), //
		jField<::jint>("keyLocation"), //
		jField<::jdouble>("magnification"), //
		jField<::jdouble>("rotation"), //
		jField<::jint *>("segments"), //
		jField<::jchar *>("segmentsChars"), //
		jField<::jint>("start"), //
		jField<::jint>("stateMask"), //
		jField<::java::lang::String>("text"), //
		jField<::jint>("time"), //
		jField<::org::eclipse::swt::widgets::Touch *>("touches"), //
		jField<::jint>("type"), //
		jField<::org::eclipse::swt::widgets::Widget>("widget"), //
		jField<::jint>("width"), //
		jField<::jint>("x"), //
		jField<::jint>("xDirection"), //
		jField<::jint>("y"), //
		jField<::jint>("yDirection"), //
	};

	template<typename F = ::jint>
	auto button() const {
		static_assert(field_signatures[jField<F>("button")] != -1);
		return at<F>("button");
	}

	template<typename F = ::jchar>
	auto character() const {
		static_assert(field_signatures[jField<F>("character")] != -1);
		return at<F>("character");
	}

	template<typename F = ::jint>
	auto count() const {
		static_assert(field_signatures[jField<F>("count")] != -1);
		return at<F>("count");
	}

	template<typename F = ::java::lang::Object>
	auto data() const {
		static_assert(field_signatures[jField<F>("data")] != -1);
		return at<F>("data");
	}

	template<typename F = ::jint>
	auto detail() const {
		static_assert(field_signatures[jField<F>("detail")] != -1);
		return at<F>("detail");
	}

	template<typename F = ::org::eclipse::swt::widgets::Display>
	auto display() const {
		static_assert(field_signatures[jField<F>("display")] != -1);
		return at<F>("display");
	}

	template<typename F = ::jboolean>
	auto doit() const {
		static_assert(field_signatures[jField<F>("doit")] != -1);
		return at<F>("doit");
	}

	template<typename F = ::jint>
	auto end() const {
		static_assert(field_signatures[jField<F>("end")] != -1);
		return at<F>("end");
	}

	template<typename F = ::org::eclipse::swt::graphics::GC>
	auto gc() const {
		static_assert(field_signatures[jField<F>("gc")] != -1);
		return at<F>("gc");
	}

	template<typename F = ::jint>
	auto height() const {
		static_assert(field_signatures[jField<F>("height")] != -1);
		return at<F>("height");
	}

	template<typename F = ::jint>
	auto index() const {
		static_assert(field_signatures[jField<F>("index")] != -1);
		return at<F>("index");
	}

	template<typename F = ::org::eclipse::swt::widgets::Widget>
	auto item() const {
		static_assert(field_signatures[jField<F>("item")] != -1);
		return at<F>("item");
	}

	template<typename F = ::jint>
	auto keyCode() const {
		static_assert(field_signatures[jField<F>("keyCode")] != -1);
		return at<F>("keyCode");
	}

	template<typename F = ::jint>
	auto keyLocation() const {
		static_assert(field_signatures[jField<F>("keyLocation")] != -1);
		return at<F>("keyLocation");
	}

	template<typename F = ::jdouble>
	auto magnification() const {
		static_assert(field_signatures[jField<F>("magnification")] != -1);
		return at<F>("magnification");
	}

	template<typename F = ::jdouble>
	auto rotation() const {
		static_assert(field_signatures[jField<F>("rotation")] != -1);
		return at<F>("rotation");
	}

	template<typename F = ::jint *>
	auto segments() const {
		static_assert(field_signatures[jField<F>("segments")] != -1);
		return at<F>("segments");
	}

	template<typename F = ::jchar *>
	auto segmentsChars() const {
		static_assert(field_signatures[jField<F>("segmentsChars")] != -1);
		return at<F>("segmentsChars");
	}

	template<typename F = ::jint>
	auto start() const {
		static_assert(field_signatures[jField<F>("start")] != -1);
		return at<F>("start");
	}

	template<typename F = ::jint>
	auto stateMask() const {
		static_assert(field_signatures[jField<F>("stateMask")] != -1);
		return at<F>("stateMask");
	}

	template<typename F = ::java::lang::String>
	auto text() const {
		static_assert(field_signatures[jField<F>("text")] != -1);
		return at<F>("text");
	}

	template<typename F = ::jint>
	auto time() const {
		static_assert(field_signatures[jField<F>("time")] != -1);
		return at<F>("time");
	}

	template<typename F = ::org::eclipse::swt::widgets::Touch *>
	auto touches() const {
		static_assert(field_signatures[jField<F>("touches")] != -1);
		return at<F>("touches");
	}

	template<typename F = ::jint>
	auto type() const {
		static_assert(field_signatures[jField<F>("type")] != -1);
		return at<F>("type");
	}

	template<typename F = ::org::eclipse::swt::widgets::Widget>
	auto widget() const {
		static_assert(field_signatures[jField<F>("widget")] != -1);
		return at<F>("widget");
	}

	template<typename F = ::jint>
	auto width() const {
		static_assert(field_signatures[jField<F>("width")] != -1);
		return at<F>("width");
	}

	template<typename F = ::jint>
	auto x() const {
		static_assert(field_signatures[jField<F>("x")] != -1);
		return at<F>("x");
	}

	template<typename F = ::jint>
	auto xDirection() const {
		static_assert(field_signatures[jField<F>("xDirection")] != -1);
		return at<F>("xDirection");
	}

	template<typename F = ::jint>
	auto y() const {
		static_assert(field_signatures[jField<F>("y")] != -1);
		return at<F>("y");
	}

	template<typename F = ::jint>
	auto yDirection() const {
		static_assert(field_signatures[jField<F>("yDirection")] != -1);
		return at<F>("yDirection");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::org::eclipse::swt::graphics::Rectangle()>("getBounds"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Rectangle)>("setBounds"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::org::eclipse::swt::graphics::Rectangle, typename... Args>
	auto getBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds")] != -1);
		return call<R>("getBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBounds")] != -1);
		return call<R>("setBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
