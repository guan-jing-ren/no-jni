#ifndef org_eclipse_swt_widgets_Canvas_HPP
#define org_eclipse_swt_widgets_Canvas_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::widgets::Canvas : public jObject<::org::eclipse::swt::widgets::Canvas, ::org::eclipse::swt::widgets::Composite> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_widgets / "Canvas";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Composite, ::jint)>(), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::GC, ::jint, ::jint, ::jint, ::jint)>("drawBackground"), //
		jMethod<::org::eclipse::swt::widgets::Caret()>("getCaret"), //
		jMethod<::org::eclipse::swt::widgets::IME()>("getIME"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jboolean)>("scroll"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::Caret)>("setCaret"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Font)>("setFont"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::IME)>("setIME"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto drawBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawBackground")] != -1);
		return call<R>("drawBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Caret, typename... Args>
	auto getCaret(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCaret")] != -1);
		return call<R>("getCaret", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::IME, typename... Args>
	auto getIME(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIME")] != -1);
		return call<R>("getIME", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto scroll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("scroll")] != -1);
		return call<R>("scroll", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCaret(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCaret")] != -1);
		return call<R>("setCaret", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFont")] != -1);
		return call<R>("setFont", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIME(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIME")] != -1);
		return call<R>("setIME", std::forward<Args>(args)...);
	}

};

#endif
