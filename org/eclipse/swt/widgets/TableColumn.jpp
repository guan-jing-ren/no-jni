#ifndef org_eclipse_swt_widgets_TableColumn_HPP
#define org_eclipse_swt_widgets_TableColumn_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::widgets::TableColumn : public jObject<::org::eclipse::swt::widgets::TableColumn, ::org::eclipse::swt::widgets::Item> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_widgets / "TableColumn";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Table, ::jint)>(), //
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Table, ::jint, ::jint)>(), //
		jMethod<::jvoid(::org::eclipse::swt::events::ControlListener)>("addControlListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::SelectionListener)>("addSelectionListener"), //
		jMethod<::jint()>("getAlignment"), //
		jMethod<::jboolean()>("getMoveable"), //
		jMethod<::org::eclipse::swt::widgets::Table()>("getParent"), //
		jMethod<::jboolean()>("getResizable"), //
		jMethod<::java::lang::String()>("getToolTipText"), //
		jMethod<::jint()>("getWidth"), //
		jMethod<::jvoid()>("pack"), //
		jMethod<::jvoid(::org::eclipse::swt::events::ControlListener)>("removeControlListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::SelectionListener)>("removeSelectionListener"), //
		jMethod<::jvoid(::jint)>("setAlignment"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Image)>("setImage"), //
		jMethod<::jvoid(::jboolean)>("setMoveable"), //
		jMethod<::jvoid(::jboolean)>("setResizable"), //
		jMethod<::jvoid(::java::lang::String)>("setText"), //
		jMethod<::jvoid(::java::lang::String)>("setToolTipText"), //
		jMethod<::jvoid(::jint)>("setWidth"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addControlListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addControlListener")] != -1);
		return call<R>("addControlListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addSelectionListener")] != -1);
		return call<R>("addSelectionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlignment")] != -1);
		return call<R>("getAlignment", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getMoveable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMoveable")] != -1);
		return call<R>("getMoveable", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Table, typename... Args>
	auto getParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParent")] != -1);
		return call<R>("getParent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getResizable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResizable")] != -1);
		return call<R>("getResizable", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getToolTipText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getToolTipText")] != -1);
		return call<R>("getToolTipText", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto pack(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("pack")] != -1);
		return call<R>("pack", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeControlListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeControlListener")] != -1);
		return call<R>("removeControlListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeSelectionListener")] != -1);
		return call<R>("removeSelectionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAlignment")] != -1);
		return call<R>("setAlignment", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setImage")] != -1);
		return call<R>("setImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMoveable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMoveable")] != -1);
		return call<R>("setMoveable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setResizable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setResizable")] != -1);
		return call<R>("setResizable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setText")] != -1);
		return call<R>("setText", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setToolTipText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setToolTipText")] != -1);
		return call<R>("setToolTipText", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setWidth")] != -1);
		return call<R>("setWidth", std::forward<Args>(args)...);
	}

};

#endif
