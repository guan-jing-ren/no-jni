#ifndef org_eclipse_swt_widgets_CoolBar_HPP
#define org_eclipse_swt_widgets_CoolBar_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::widgets::CoolBar : public jObject<::org::eclipse::swt::widgets::CoolBar, ::org::eclipse::swt::widgets::Composite> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_widgets / "CoolBar";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Composite, ::jint)>(), //
		jMethod<::org::eclipse::swt::graphics::Point(::jint, ::jint, ::jboolean)>("computeSize"), //
		jMethod<::org::eclipse::swt::widgets::CoolItem(::jint)>("getItem"), //
		jMethod<::jint()>("getItemCount"), //
		jMethod<::jint *()>("getItemOrder"), //
		jMethod<::org::eclipse::swt::graphics::Point *()>("getItemSizes"), //
		jMethod<::org::eclipse::swt::widgets::CoolItem *()>("getItems"), //
		jMethod<::jboolean()>("getLocked"), //
		jMethod<::jint *()>("getWrapIndices"), //
		jMethod<::jint(::org::eclipse::swt::widgets::CoolItem)>("indexOf"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Cursor)>("setCursor"), //
		jMethod<::jvoid(::jint *, ::jint *, ::org::eclipse::swt::graphics::Point *)>("setItemLayout"), //
		jMethod<::jvoid(::jboolean)>("setLocked"), //
		jMethod<::jvoid(::jint)>("setOrientation"), //
		jMethod<::jvoid(::jint *)>("setWrapIndices"), //
	};

	template<typename R = ::org::eclipse::swt::graphics::Point, typename... Args>
	auto computeSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("computeSize")] != -1);
		return call<R>("computeSize", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::CoolItem, typename... Args>
	auto getItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItem")] != -1);
		return call<R>("getItem", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getItemCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItemCount")] != -1);
		return call<R>("getItemCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getItemOrder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItemOrder")] != -1);
		return call<R>("getItemOrder", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point *, typename... Args>
	auto getItemSizes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItemSizes")] != -1);
		return call<R>("getItemSizes", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::CoolItem *, typename... Args>
	auto getItems(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItems")] != -1);
		return call<R>("getItems", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getLocked(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocked")] != -1);
		return call<R>("getLocked", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getWrapIndices(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWrapIndices")] != -1);
		return call<R>("getWrapIndices", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto indexOf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("indexOf")] != -1);
		return call<R>("indexOf", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCursor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCursor")] != -1);
		return call<R>("setCursor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setItemLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setItemLayout")] != -1);
		return call<R>("setItemLayout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLocked(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLocked")] != -1);
		return call<R>("setLocked", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOrientation")] != -1);
		return call<R>("setOrientation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWrapIndices(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setWrapIndices")] != -1);
		return call<R>("setWrapIndices", std::forward<Args>(args)...);
	}

};

#endif
