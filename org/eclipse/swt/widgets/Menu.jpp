#ifndef org_eclipse_swt_widgets_Menu_HPP
#define org_eclipse_swt_widgets_Menu_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::widgets::Menu : public jObject<::org::eclipse::swt::widgets::Menu, ::org::eclipse::swt::widgets::Widget> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_widgets / "Menu";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Control)>(), //
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Decorations, ::jint)>(), //
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Menu)>(), //
		jConstructor<::jvoid(::org::eclipse::swt::widgets::MenuItem)>(), //
		jMethod<::jvoid(::org::eclipse::swt::events::HelpListener)>("addHelpListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::MenuListener)>("addMenuListener"), //
		jMethod<::org::eclipse::swt::widgets::MenuItem()>("getDefaultItem"), //
		jMethod<::jboolean()>("getEnabled"), //
		jMethod<::org::eclipse::swt::widgets::MenuItem(::jint)>("getItem"), //
		jMethod<::jint()>("getItemCount"), //
		jMethod<::org::eclipse::swt::widgets::MenuItem *()>("getItems"), //
		jMethod<::jint()>("getOrientation"), //
		jMethod<::org::eclipse::swt::widgets::Decorations()>("getParent"), //
		jMethod<::org::eclipse::swt::widgets::MenuItem()>("getParentItem"), //
		jMethod<::org::eclipse::swt::widgets::Menu()>("getParentMenu"), //
		jMethod<::org::eclipse::swt::widgets::Shell()>("getShell"), //
		jMethod<::jboolean()>("getVisible"), //
		jMethod<::jint(::org::eclipse::swt::widgets::MenuItem)>("indexOf"), //
		jMethod<::jboolean()>("isEnabled"), //
		jMethod<::jboolean()>("isVisible"), //
		jMethod<::jvoid(::org::eclipse::swt::events::HelpListener)>("removeHelpListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::MenuListener)>("removeMenuListener"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::MenuItem)>("setDefaultItem"), //
		jMethod<::jvoid(::jboolean)>("setEnabled"), //
		jMethod<::jvoid(::jint, ::jint)>("setLocation"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Point)>("setLocation"), //
		jMethod<::jvoid(::jint)>("setOrientation"), //
		jMethod<::jvoid(::jboolean)>("setVisible"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addHelpListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addHelpListener")] != -1);
		return call<R>("addHelpListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addMenuListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addMenuListener")] != -1);
		return call<R>("addMenuListener", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::MenuItem, typename... Args>
	auto getDefaultItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultItem")] != -1);
		return call<R>("getDefaultItem", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEnabled")] != -1);
		return call<R>("getEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::MenuItem, typename... Args>
	auto getItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItem")] != -1);
		return call<R>("getItem", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getItemCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItemCount")] != -1);
		return call<R>("getItemCount", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::MenuItem *, typename... Args>
	auto getItems(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItems")] != -1);
		return call<R>("getItems", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOrientation")] != -1);
		return call<R>("getOrientation", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Decorations, typename... Args>
	auto getParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParent")] != -1);
		return call<R>("getParent", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::MenuItem, typename... Args>
	auto getParentItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParentItem")] != -1);
		return call<R>("getParentItem", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Menu, typename... Args>
	auto getParentMenu(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParentMenu")] != -1);
		return call<R>("getParentMenu", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Shell, typename... Args>
	auto getShell(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getShell")] != -1);
		return call<R>("getShell", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVisible")] != -1);
		return call<R>("getVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto indexOf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("indexOf")] != -1);
		return call<R>("indexOf", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEnabled")] != -1);
		return call<R>("isEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isVisible")] != -1);
		return call<R>("isVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeHelpListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeHelpListener")] != -1);
		return call<R>("removeHelpListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeMenuListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeMenuListener")] != -1);
		return call<R>("removeMenuListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDefaultItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDefaultItem")] != -1);
		return call<R>("setDefaultItem", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEnabled")] != -1);
		return call<R>("setEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLocation")] != -1);
		return call<R>("setLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOrientation")] != -1);
		return call<R>("setOrientation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVisible")] != -1);
		return call<R>("setVisible", std::forward<Args>(args)...);
	}

};

#endif
