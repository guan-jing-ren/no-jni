#ifndef org_eclipse_swt_widgets_Spinner_HPP
#define org_eclipse_swt_widgets_Spinner_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::widgets::Spinner : public jObject<::org::eclipse::swt::widgets::Spinner, ::org::eclipse::swt::widgets::Composite> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_widgets / "Spinner";

	constexpr static Enume field_signatures{
		jField<::jint>("LIMIT"), //
	};

	template<typename F = ::jint>
	static auto LIMIT() {
		static_assert(field_signatures[jField<F>("LIMIT")] != -1);
		return sat<F>("LIMIT");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Composite, ::jint)>(), //
		jMethod<::jvoid(::org::eclipse::swt::events::ModifyListener)>("addModifyListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::SelectionListener)>("addSelectionListener"), //
		jMethod<::org::eclipse::swt::graphics::Point(::jint, ::jint, ::jboolean)>("computeSize"), //
		jMethod<::org::eclipse::swt::graphics::Rectangle(::jint, ::jint, ::jint, ::jint)>("computeTrim"), //
		jMethod<::jvoid()>("copy"), //
		jMethod<::jvoid()>("cut"), //
		jMethod<::jint()>("getBorderWidth"), //
		jMethod<::jint()>("getDigits"), //
		jMethod<::jint()>("getIncrement"), //
		jMethod<::jint()>("getMaximum"), //
		jMethod<::jint()>("getMinimum"), //
		jMethod<::jint()>("getPageIncrement"), //
		jMethod<::jint()>("getSelection"), //
		jMethod<::java::lang::String()>("getText"), //
		jMethod<::jint()>("getTextLimit"), //
		jMethod<::jvoid()>("paste"), //
		jMethod<::jvoid(::org::eclipse::swt::events::ModifyListener)>("removeModifyListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::SelectionListener)>("removeSelectionListener"), //
		jMethod<::jvoid(::jint)>("setDigits"), //
		jMethod<::jvoid(::jint)>("setIncrement"), //
		jMethod<::jvoid(::jint)>("setMaximum"), //
		jMethod<::jvoid(::jint)>("setMinimum"), //
		jMethod<::jvoid(::jint)>("setPageIncrement"), //
		jMethod<::jvoid(::jint)>("setSelection"), //
		jMethod<::jvoid(::jint)>("setTextLimit"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("setValues"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addModifyListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addModifyListener")] != -1);
		return call<R>("addModifyListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addSelectionListener")] != -1);
		return call<R>("addSelectionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point, typename... Args>
	auto computeSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("computeSize")] != -1);
		return call<R>("computeSize", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Rectangle, typename... Args>
	auto computeTrim(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("computeTrim")] != -1);
		return call<R>("computeTrim", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto copy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("copy")] != -1);
		return call<R>("copy", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto cut(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cut")] != -1);
		return call<R>("cut", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBorderWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorderWidth")] != -1);
		return call<R>("getBorderWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDigits(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDigits")] != -1);
		return call<R>("getDigits", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIncrement")] != -1);
		return call<R>("getIncrement", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaximum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaximum")] != -1);
		return call<R>("getMaximum", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinimum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinimum")] != -1);
		return call<R>("getMinimum", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPageIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPageIncrement")] != -1);
		return call<R>("getPageIncrement", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelection")] != -1);
		return call<R>("getSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getText")] != -1);
		return call<R>("getText", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTextLimit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextLimit")] != -1);
		return call<R>("getTextLimit", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paste(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paste")] != -1);
		return call<R>("paste", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeModifyListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeModifyListener")] != -1);
		return call<R>("removeModifyListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeSelectionListener")] != -1);
		return call<R>("removeSelectionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDigits(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDigits")] != -1);
		return call<R>("setDigits", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIncrement")] != -1);
		return call<R>("setIncrement", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaximum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMaximum")] != -1);
		return call<R>("setMaximum", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMinimum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMinimum")] != -1);
		return call<R>("setMinimum", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPageIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPageIncrement")] != -1);
		return call<R>("setPageIncrement", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelection")] != -1);
		return call<R>("setSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTextLimit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTextLimit")] != -1);
		return call<R>("setTextLimit", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValues(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setValues")] != -1);
		return call<R>("setValues", std::forward<Args>(args)...);
	}

};

#endif
