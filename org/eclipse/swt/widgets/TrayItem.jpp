#ifndef org_eclipse_swt_widgets_TrayItem_HPP
#define org_eclipse_swt_widgets_TrayItem_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::widgets::TrayItem : public jObject<::org::eclipse::swt::widgets::TrayItem, ::org::eclipse::swt::widgets::Item> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_widgets / "TrayItem";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Tray, ::jint)>(), //
		jMethod<::jvoid(::org::eclipse::swt::events::MenuDetectListener)>("addMenuDetectListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::SelectionListener)>("addSelectionListener"), //
		jMethod<::org::eclipse::swt::graphics::Image()>("getHighlightImage"), //
		jMethod<::org::eclipse::swt::widgets::Tray()>("getParent"), //
		jMethod<::org::eclipse::swt::widgets::ToolTip()>("getToolTip"), //
		jMethod<::java::lang::String()>("getToolTipText"), //
		jMethod<::jboolean()>("getVisible"), //
		jMethod<::jvoid(::org::eclipse::swt::events::MenuDetectListener)>("removeMenuDetectListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::SelectionListener)>("removeSelectionListener"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Image)>("setHighlightImage"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Image)>("setImage"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::ToolTip)>("setToolTip"), //
		jMethod<::jvoid(::java::lang::String)>("setToolTipText"), //
		jMethod<::jvoid(::jboolean)>("setVisible"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addMenuDetectListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addMenuDetectListener")] != -1);
		return call<R>("addMenuDetectListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addSelectionListener")] != -1);
		return call<R>("addSelectionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Image, typename... Args>
	auto getHighlightImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHighlightImage")] != -1);
		return call<R>("getHighlightImage", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Tray, typename... Args>
	auto getParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParent")] != -1);
		return call<R>("getParent", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::ToolTip, typename... Args>
	auto getToolTip(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getToolTip")] != -1);
		return call<R>("getToolTip", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getToolTipText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getToolTipText")] != -1);
		return call<R>("getToolTipText", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVisible")] != -1);
		return call<R>("getVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeMenuDetectListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeMenuDetectListener")] != -1);
		return call<R>("removeMenuDetectListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeSelectionListener")] != -1);
		return call<R>("removeSelectionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHighlightImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHighlightImage")] != -1);
		return call<R>("setHighlightImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setImage")] != -1);
		return call<R>("setImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setToolTip(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setToolTip")] != -1);
		return call<R>("setToolTip", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setToolTipText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setToolTipText")] != -1);
		return call<R>("setToolTipText", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVisible")] != -1);
		return call<R>("setVisible", std::forward<Args>(args)...);
	}

};

#endif
