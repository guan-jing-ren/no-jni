#ifndef org_eclipse_swt_widgets_Table_HPP
#define org_eclipse_swt_widgets_Table_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::widgets::Table : public jObject<::org::eclipse::swt::widgets::Table, ::org::eclipse::swt::widgets::Composite> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_widgets / "Table";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Composite, ::jint)>(), //
		jMethod<::jvoid(::org::eclipse::swt::events::SelectionListener)>("addSelectionListener"), //
		jMethod<::jvoid(::jint)>("clear"), //
		jMethod<::jvoid(::jint, ::jint)>("clear"), //
		jMethod<::jvoid(::jint *)>("clear"), //
		jMethod<::jvoid()>("clearAll"), //
		jMethod<::org::eclipse::swt::graphics::Point(::jint, ::jint, ::jboolean)>("computeSize"), //
		jMethod<::jvoid(::jint)>("deselect"), //
		jMethod<::jvoid(::jint, ::jint)>("deselect"), //
		jMethod<::jvoid(::jint *)>("deselect"), //
		jMethod<::jvoid()>("deselectAll"), //
		jMethod<::org::eclipse::swt::graphics::Rectangle()>("getClientArea"), //
		jMethod<::org::eclipse::swt::widgets::TableColumn(::jint)>("getColumn"), //
		jMethod<::jint()>("getColumnCount"), //
		jMethod<::jint *()>("getColumnOrder"), //
		jMethod<::org::eclipse::swt::widgets::TableColumn *()>("getColumns"), //
		jMethod<::jint()>("getGridLineWidth"), //
		jMethod<::jint()>("getHeaderHeight"), //
		jMethod<::jboolean()>("getHeaderVisible"), //
		jMethod<::org::eclipse::swt::widgets::TableItem(::jint)>("getItem"), //
		jMethod<::org::eclipse::swt::widgets::TableItem(::org::eclipse::swt::graphics::Point)>("getItem"), //
		jMethod<::jint()>("getItemCount"), //
		jMethod<::jint()>("getItemHeight"), //
		jMethod<::org::eclipse::swt::widgets::TableItem *()>("getItems"), //
		jMethod<::jboolean()>("getLinesVisible"), //
		jMethod<::org::eclipse::swt::widgets::TableItem *()>("getSelection"), //
		jMethod<::jint()>("getSelectionCount"), //
		jMethod<::jint()>("getSelectionIndex"), //
		jMethod<::jint *()>("getSelectionIndices"), //
		jMethod<::org::eclipse::swt::widgets::TableColumn()>("getSortColumn"), //
		jMethod<::jint()>("getSortDirection"), //
		jMethod<::jint()>("getTopIndex"), //
		jMethod<::jint(::org::eclipse::swt::widgets::TableColumn)>("indexOf"), //
		jMethod<::jint(::org::eclipse::swt::widgets::TableItem)>("indexOf"), //
		jMethod<::jboolean(::jint)>("isSelected"), //
		jMethod<::jvoid(::jint)>("remove"), //
		jMethod<::jvoid(::jint, ::jint)>("remove"), //
		jMethod<::jvoid(::jint *)>("remove"), //
		jMethod<::jvoid()>("removeAll"), //
		jMethod<::jvoid(::org::eclipse::swt::events::SelectionListener)>("removeSelectionListener"), //
		jMethod<::jvoid(::jint)>("select"), //
		jMethod<::jvoid(::jint, ::jint)>("select"), //
		jMethod<::jvoid(::jint *)>("select"), //
		jMethod<::jvoid()>("selectAll"), //
		jMethod<::jvoid(::jint *)>("setColumnOrder"), //
		jMethod<::jvoid(::jboolean)>("setHeaderVisible"), //
		jMethod<::jvoid(::jint)>("setItemCount"), //
		jMethod<::jvoid(::jboolean)>("setLinesVisible"), //
		jMethod<::jvoid(::jboolean)>("setRedraw"), //
		jMethod<::jvoid(::jint)>("setSelection"), //
		jMethod<::jvoid(::jint, ::jint)>("setSelection"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::TableItem)>("setSelection"), //
		jMethod<::jvoid(::jint *)>("setSelection"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::TableItem *)>("setSelection"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::TableColumn)>("setSortColumn"), //
		jMethod<::jvoid(::jint)>("setSortDirection"), //
		jMethod<::jvoid(::jint)>("setTopIndex"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::TableColumn)>("showColumn"), //
		jMethod<::jvoid(::org::eclipse::swt::widgets::TableItem)>("showItem"), //
		jMethod<::jvoid()>("showSelection"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addSelectionListener")] != -1);
		return call<R>("addSelectionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clearAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clearAll")] != -1);
		return call<R>("clearAll", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point, typename... Args>
	auto computeSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("computeSize")] != -1);
		return call<R>("computeSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deselect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deselect")] != -1);
		return call<R>("deselect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deselectAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deselectAll")] != -1);
		return call<R>("deselectAll", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Rectangle, typename... Args>
	auto getClientArea(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClientArea")] != -1);
		return call<R>("getClientArea", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::TableColumn, typename... Args>
	auto getColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumn")] != -1);
		return call<R>("getColumn", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getColumnCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumnCount")] != -1);
		return call<R>("getColumnCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getColumnOrder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumnOrder")] != -1);
		return call<R>("getColumnOrder", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::TableColumn *, typename... Args>
	auto getColumns(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumns")] != -1);
		return call<R>("getColumns", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getGridLineWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGridLineWidth")] != -1);
		return call<R>("getGridLineWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHeaderHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeaderHeight")] != -1);
		return call<R>("getHeaderHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getHeaderVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeaderVisible")] != -1);
		return call<R>("getHeaderVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::TableItem, typename... Args>
	auto getItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItem")] != -1);
		return call<R>("getItem", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getItemCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItemCount")] != -1);
		return call<R>("getItemCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getItemHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItemHeight")] != -1);
		return call<R>("getItemHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::TableItem *, typename... Args>
	auto getItems(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItems")] != -1);
		return call<R>("getItems", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getLinesVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLinesVisible")] != -1);
		return call<R>("getLinesVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::TableItem *, typename... Args>
	auto getSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelection")] != -1);
		return call<R>("getSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSelectionCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionCount")] != -1);
		return call<R>("getSelectionCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSelectionIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionIndex")] != -1);
		return call<R>("getSelectionIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getSelectionIndices(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionIndices")] != -1);
		return call<R>("getSelectionIndices", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::TableColumn, typename... Args>
	auto getSortColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSortColumn")] != -1);
		return call<R>("getSortColumn", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSortDirection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSortDirection")] != -1);
		return call<R>("getSortDirection", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTopIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTopIndex")] != -1);
		return call<R>("getTopIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto indexOf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("indexOf")] != -1);
		return call<R>("indexOf", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSelected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSelected")] != -1);
		return call<R>("isSelected", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAll")] != -1);
		return call<R>("removeAll", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeSelectionListener")] != -1);
		return call<R>("removeSelectionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto select(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("select")] != -1);
		return call<R>("select", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto selectAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("selectAll")] != -1);
		return call<R>("selectAll", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColumnOrder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setColumnOrder")] != -1);
		return call<R>("setColumnOrder", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHeaderVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHeaderVisible")] != -1);
		return call<R>("setHeaderVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setItemCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setItemCount")] != -1);
		return call<R>("setItemCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLinesVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLinesVisible")] != -1);
		return call<R>("setLinesVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRedraw(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRedraw")] != -1);
		return call<R>("setRedraw", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelection")] != -1);
		return call<R>("setSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSortColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSortColumn")] != -1);
		return call<R>("setSortColumn", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSortDirection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSortDirection")] != -1);
		return call<R>("setSortDirection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTopIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTopIndex")] != -1);
		return call<R>("setTopIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto showColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("showColumn")] != -1);
		return call<R>("showColumn", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto showItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("showItem")] != -1);
		return call<R>("showItem", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto showSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("showSelection")] != -1);
		return call<R>("showSelection", std::forward<Args>(args)...);
	}

};

#endif
