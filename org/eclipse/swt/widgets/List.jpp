#ifndef org_eclipse_swt_widgets_List_HPP
#define org_eclipse_swt_widgets_List_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::widgets::List : public jObject<::org::eclipse::swt::widgets::List, ::org::eclipse::swt::widgets::Scrollable> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_widgets / "List";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Composite, ::jint)>(), //
		jMethod<::jvoid(::java::lang::String)>("add"), //
		jMethod<::jvoid(::java::lang::String, ::jint)>("add"), //
		jMethod<::jvoid(::org::eclipse::swt::events::SelectionListener)>("addSelectionListener"), //
		jMethod<::org::eclipse::swt::graphics::Point(::jint, ::jint, ::jboolean)>("computeSize"), //
		jMethod<::jvoid(::jint)>("deselect"), //
		jMethod<::jvoid(::jint, ::jint)>("deselect"), //
		jMethod<::jvoid(::jint *)>("deselect"), //
		jMethod<::jvoid()>("deselectAll"), //
		jMethod<::jint()>("getFocusIndex"), //
		jMethod<::java::lang::String(::jint)>("getItem"), //
		jMethod<::jint()>("getItemCount"), //
		jMethod<::jint()>("getItemHeight"), //
		jMethod<::java::lang::String *()>("getItems"), //
		jMethod<::java::lang::String *()>("getSelection"), //
		jMethod<::jint()>("getSelectionCount"), //
		jMethod<::jint()>("getSelectionIndex"), //
		jMethod<::jint *()>("getSelectionIndices"), //
		jMethod<::jint()>("getTopIndex"), //
		jMethod<::jint(::java::lang::String)>("indexOf"), //
		jMethod<::jint(::java::lang::String, ::jint)>("indexOf"), //
		jMethod<::jboolean(::jint)>("isSelected"), //
		jMethod<::jvoid(::jint)>("remove"), //
		jMethod<::jvoid(::jint, ::jint)>("remove"), //
		jMethod<::jvoid(::java::lang::String)>("remove"), //
		jMethod<::jvoid(::jint *)>("remove"), //
		jMethod<::jvoid()>("removeAll"), //
		jMethod<::jvoid(::org::eclipse::swt::events::SelectionListener)>("removeSelectionListener"), //
		jMethod<::jvoid(::jint)>("select"), //
		jMethod<::jvoid(::jint, ::jint)>("select"), //
		jMethod<::jvoid(::jint *)>("select"), //
		jMethod<::jvoid()>("selectAll"), //
		jMethod<::jvoid(::jint, ::java::lang::String)>("setItem"), //
		jMethod<::jvoid(::java::lang::String *)>("setItems"), //
		jMethod<::jvoid(::jint)>("setSelection"), //
		jMethod<::jvoid(::jint, ::jint)>("setSelection"), //
		jMethod<::jvoid(::jint *)>("setSelection"), //
		jMethod<::jvoid(::java::lang::String *)>("setSelection"), //
		jMethod<::jvoid(::jint)>("setTopIndex"), //
		jMethod<::jvoid()>("showSelection"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addSelectionListener")] != -1);
		return call<R>("addSelectionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point, typename... Args>
	auto computeSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("computeSize")] != -1);
		return call<R>("computeSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deselect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deselect")] != -1);
		return call<R>("deselect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deselectAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deselectAll")] != -1);
		return call<R>("deselectAll", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getFocusIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFocusIndex")] != -1);
		return call<R>("getFocusIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItem")] != -1);
		return call<R>("getItem", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getItemCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItemCount")] != -1);
		return call<R>("getItemCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getItemHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItemHeight")] != -1);
		return call<R>("getItemHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getItems(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItems")] != -1);
		return call<R>("getItems", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelection")] != -1);
		return call<R>("getSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSelectionCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionCount")] != -1);
		return call<R>("getSelectionCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSelectionIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionIndex")] != -1);
		return call<R>("getSelectionIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getSelectionIndices(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionIndices")] != -1);
		return call<R>("getSelectionIndices", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTopIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTopIndex")] != -1);
		return call<R>("getTopIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto indexOf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("indexOf")] != -1);
		return call<R>("indexOf", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSelected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSelected")] != -1);
		return call<R>("isSelected", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAll")] != -1);
		return call<R>("removeAll", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeSelectionListener")] != -1);
		return call<R>("removeSelectionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto select(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("select")] != -1);
		return call<R>("select", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto selectAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("selectAll")] != -1);
		return call<R>("selectAll", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setItem")] != -1);
		return call<R>("setItem", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setItems(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setItems")] != -1);
		return call<R>("setItems", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelection")] != -1);
		return call<R>("setSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTopIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTopIndex")] != -1);
		return call<R>("setTopIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto showSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("showSelection")] != -1);
		return call<R>("showSelection", std::forward<Args>(args)...);
	}

};

#endif
