#ifndef org_eclipse_swt_widgets_Tracker_HPP
#define org_eclipse_swt_widgets_Tracker_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::widgets::Tracker : public jObject<::org::eclipse::swt::widgets::Tracker, ::org::eclipse::swt::widgets::Widget> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_widgets / "Tracker";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Composite, ::jint)>(), //
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Display, ::jint)>(), //
		jMethod<::jvoid(::org::eclipse::swt::events::ControlListener)>("addControlListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::KeyListener)>("addKeyListener"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::org::eclipse::swt::graphics::Rectangle *()>("getRectangles"), //
		jMethod<::jboolean()>("getStippled"), //
		jMethod<::jboolean()>("open"), //
		jMethod<::jvoid(::org::eclipse::swt::events::ControlListener)>("removeControlListener"), //
		jMethod<::jvoid(::org::eclipse::swt::events::KeyListener)>("removeKeyListener"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Cursor)>("setCursor"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Rectangle *)>("setRectangles"), //
		jMethod<::jvoid(::jboolean)>("setStippled"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addControlListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addControlListener")] != -1);
		return call<R>("addControlListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addKeyListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addKeyListener")] != -1);
		return call<R>("addKeyListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Rectangle *, typename... Args>
	auto getRectangles(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRectangles")] != -1);
		return call<R>("getRectangles", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getStippled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStippled")] != -1);
		return call<R>("getStippled", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto open(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("open")] != -1);
		return call<R>("open", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeControlListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeControlListener")] != -1);
		return call<R>("removeControlListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeKeyListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeKeyListener")] != -1);
		return call<R>("removeKeyListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCursor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCursor")] != -1);
		return call<R>("setCursor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRectangles(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRectangles")] != -1);
		return call<R>("setRectangles", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setStippled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setStippled")] != -1);
		return call<R>("setStippled", std::forward<Args>(args)...);
	}

};

#endif
