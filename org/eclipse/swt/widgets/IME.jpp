#ifndef org_eclipse_swt_widgets_IME_HPP
#define org_eclipse_swt_widgets_IME_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::widgets::IME : public jObject<::org::eclipse::swt::widgets::IME, ::org::eclipse::swt::widgets::Widget> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_widgets / "IME";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Canvas, ::jint)>(), //
		jMethod<::jint()>("getCaretOffset"), //
		jMethod<::jint()>("getCommitCount"), //
		jMethod<::jint()>("getCompositionOffset"), //
		jMethod<::jint *()>("getRanges"), //
		jMethod<::org::eclipse::swt::graphics::TextStyle *()>("getStyles"), //
		jMethod<::java::lang::String()>("getText"), //
		jMethod<::jboolean()>("getWideCaret"), //
		jMethod<::jvoid(::jint)>("setCompositionOffset"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getCaretOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCaretOffset")] != -1);
		return call<R>("getCaretOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCommitCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCommitCount")] != -1);
		return call<R>("getCommitCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCompositionOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCompositionOffset")] != -1);
		return call<R>("getCompositionOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getRanges(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRanges")] != -1);
		return call<R>("getRanges", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::TextStyle *, typename... Args>
	auto getStyles(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStyles")] != -1);
		return call<R>("getStyles", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getText")] != -1);
		return call<R>("getText", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getWideCaret(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWideCaret")] != -1);
		return call<R>("getWideCaret", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCompositionOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCompositionOffset")] != -1);
		return call<R>("setCompositionOffset", std::forward<Args>(args)...);
	}

};

#endif
