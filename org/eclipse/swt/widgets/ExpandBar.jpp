#ifndef org_eclipse_swt_widgets_ExpandBar_HPP
#define org_eclipse_swt_widgets_ExpandBar_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::widgets::ExpandBar : public jObject<::org::eclipse::swt::widgets::ExpandBar, ::org::eclipse::swt::widgets::Composite> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_widgets / "ExpandBar";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Composite, ::jint)>(), //
		jMethod<::jvoid(::org::eclipse::swt::events::ExpandListener)>("addExpandListener"), //
		jMethod<::org::eclipse::swt::graphics::Point(::jint, ::jint, ::jboolean)>("computeSize"), //
		jMethod<::org::eclipse::swt::widgets::ExpandItem(::jint)>("getItem"), //
		jMethod<::jint()>("getItemCount"), //
		jMethod<::org::eclipse::swt::widgets::ExpandItem *()>("getItems"), //
		jMethod<::jint()>("getSpacing"), //
		jMethod<::jint(::org::eclipse::swt::widgets::ExpandItem)>("indexOf"), //
		jMethod<::jvoid(::org::eclipse::swt::events::ExpandListener)>("removeExpandListener"), //
		jMethod<::jvoid(::jint)>("setSpacing"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addExpandListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addExpandListener")] != -1);
		return call<R>("addExpandListener", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Point, typename... Args>
	auto computeSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("computeSize")] != -1);
		return call<R>("computeSize", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::ExpandItem, typename... Args>
	auto getItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItem")] != -1);
		return call<R>("getItem", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getItemCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItemCount")] != -1);
		return call<R>("getItemCount", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::ExpandItem *, typename... Args>
	auto getItems(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItems")] != -1);
		return call<R>("getItems", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSpacing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSpacing")] != -1);
		return call<R>("getSpacing", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto indexOf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("indexOf")] != -1);
		return call<R>("indexOf", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeExpandListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeExpandListener")] != -1);
		return call<R>("removeExpandListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSpacing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSpacing")] != -1);
		return call<R>("setSpacing", std::forward<Args>(args)...);
	}

};

#endif
