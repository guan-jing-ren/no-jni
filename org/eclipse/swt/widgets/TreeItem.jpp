#ifndef org_eclipse_swt_widgets_TreeItem_HPP
#define org_eclipse_swt_widgets_TreeItem_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::widgets::TreeItem : public jObject<::org::eclipse::swt::widgets::TreeItem, ::org::eclipse::swt::widgets::Item> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_widgets / "TreeItem";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Tree, ::jint)>(), //
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Tree, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::org::eclipse::swt::widgets::TreeItem, ::jint)>(), //
		jConstructor<::jvoid(::org::eclipse::swt::widgets::TreeItem, ::jint, ::jint)>(), //
		jMethod<::jvoid(::jint, ::jboolean)>("clear"), //
		jMethod<::jvoid(::jboolean)>("clearAll"), //
		jMethod<::org::eclipse::swt::graphics::Color()>("getBackground"), //
		jMethod<::org::eclipse::swt::graphics::Color(::jint)>("getBackground"), //
		jMethod<::org::eclipse::swt::graphics::Rectangle()>("getBounds"), //
		jMethod<::org::eclipse::swt::graphics::Rectangle(::jint)>("getBounds"), //
		jMethod<::jboolean()>("getChecked"), //
		jMethod<::jboolean()>("getExpanded"), //
		jMethod<::org::eclipse::swt::graphics::Font()>("getFont"), //
		jMethod<::org::eclipse::swt::graphics::Font(::jint)>("getFont"), //
		jMethod<::org::eclipse::swt::graphics::Color()>("getForeground"), //
		jMethod<::org::eclipse::swt::graphics::Color(::jint)>("getForeground"), //
		jMethod<::jboolean()>("getGrayed"), //
		jMethod<::org::eclipse::swt::graphics::Image()>("getImage"), //
		jMethod<::org::eclipse::swt::graphics::Image(::jint)>("getImage"), //
		jMethod<::org::eclipse::swt::graphics::Rectangle(::jint)>("getImageBounds"), //
		jMethod<::org::eclipse::swt::widgets::TreeItem(::jint)>("getItem"), //
		jMethod<::jint()>("getItemCount"), //
		jMethod<::org::eclipse::swt::widgets::TreeItem *()>("getItems"), //
		jMethod<::org::eclipse::swt::widgets::Tree()>("getParent"), //
		jMethod<::org::eclipse::swt::widgets::TreeItem()>("getParentItem"), //
		jMethod<::java::lang::String()>("getText"), //
		jMethod<::java::lang::String(::jint)>("getText"), //
		jMethod<::org::eclipse::swt::graphics::Rectangle(::jint)>("getTextBounds"), //
		jMethod<::jint(::org::eclipse::swt::widgets::TreeItem)>("indexOf"), //
		jMethod<::jvoid()>("removeAll"), //
		jMethod<::jvoid(::jint, ::org::eclipse::swt::graphics::Color)>("setBackground"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Color)>("setBackground"), //
		jMethod<::jvoid(::jboolean)>("setChecked"), //
		jMethod<::jvoid(::jboolean)>("setExpanded"), //
		jMethod<::jvoid(::jint, ::org::eclipse::swt::graphics::Font)>("setFont"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Font)>("setFont"), //
		jMethod<::jvoid(::jint, ::org::eclipse::swt::graphics::Color)>("setForeground"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Color)>("setForeground"), //
		jMethod<::jvoid(::jboolean)>("setGrayed"), //
		jMethod<::jvoid(::jint, ::org::eclipse::swt::graphics::Image)>("setImage"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Image)>("setImage"), //
		jMethod<::jvoid(::org::eclipse::swt::graphics::Image *)>("setImage"), //
		jMethod<::jvoid(::jint)>("setItemCount"), //
		jMethod<::jvoid(::jint, ::java::lang::String)>("setText"), //
		jMethod<::jvoid(::java::lang::String)>("setText"), //
		jMethod<::jvoid(::java::lang::String *)>("setText"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clearAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clearAll")] != -1);
		return call<R>("clearAll", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Color, typename... Args>
	auto getBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBackground")] != -1);
		return call<R>("getBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Rectangle, typename... Args>
	auto getBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds")] != -1);
		return call<R>("getBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getChecked(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChecked")] != -1);
		return call<R>("getChecked", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getExpanded(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExpanded")] != -1);
		return call<R>("getExpanded", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Font, typename... Args>
	auto getFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFont")] != -1);
		return call<R>("getFont", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Color, typename... Args>
	auto getForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getForeground")] != -1);
		return call<R>("getForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getGrayed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGrayed")] != -1);
		return call<R>("getGrayed", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Image, typename... Args>
	auto getImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getImage")] != -1);
		return call<R>("getImage", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Rectangle, typename... Args>
	auto getImageBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getImageBounds")] != -1);
		return call<R>("getImageBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::TreeItem, typename... Args>
	auto getItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItem")] != -1);
		return call<R>("getItem", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getItemCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItemCount")] != -1);
		return call<R>("getItemCount", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::TreeItem *, typename... Args>
	auto getItems(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItems")] != -1);
		return call<R>("getItems", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::Tree, typename... Args>
	auto getParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParent")] != -1);
		return call<R>("getParent", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::widgets::TreeItem, typename... Args>
	auto getParentItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParentItem")] != -1);
		return call<R>("getParentItem", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getText")] != -1);
		return call<R>("getText", std::forward<Args>(args)...);
	}

	template<typename R = ::org::eclipse::swt::graphics::Rectangle, typename... Args>
	auto getTextBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextBounds")] != -1);
		return call<R>("getTextBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto indexOf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("indexOf")] != -1);
		return call<R>("indexOf", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAll")] != -1);
		return call<R>("removeAll", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBackground")] != -1);
		return call<R>("setBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setChecked(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setChecked")] != -1);
		return call<R>("setChecked", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setExpanded(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setExpanded")] != -1);
		return call<R>("setExpanded", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFont")] != -1);
		return call<R>("setFont", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setForeground")] != -1);
		return call<R>("setForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGrayed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setGrayed")] != -1);
		return call<R>("setGrayed", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setImage")] != -1);
		return call<R>("setImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setItemCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setItemCount")] != -1);
		return call<R>("setItemCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setText")] != -1);
		return call<R>("setText", std::forward<Args>(args)...);
	}

};

#endif
