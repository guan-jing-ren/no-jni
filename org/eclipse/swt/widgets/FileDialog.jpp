#ifndef org_eclipse_swt_widgets_FileDialog_HPP
#define org_eclipse_swt_widgets_FileDialog_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::widgets::FileDialog : public jObject<::org::eclipse::swt::widgets::FileDialog, ::org::eclipse::swt::widgets::Dialog> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_widgets / "FileDialog";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Shell)>(), //
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Shell, ::jint)>(), //
		jMethod<::java::lang::String()>("getFileName"), //
		jMethod<::java::lang::String *()>("getFileNames"), //
		jMethod<::java::lang::String *()>("getFilterExtensions"), //
		jMethod<::jint()>("getFilterIndex"), //
		jMethod<::java::lang::String *()>("getFilterNames"), //
		jMethod<::java::lang::String()>("getFilterPath"), //
		jMethod<::jboolean()>("getOverwrite"), //
		jMethod<::java::lang::String()>("open"), //
		jMethod<::jvoid(::java::lang::String)>("setFileName"), //
		jMethod<::jvoid(::java::lang::String *)>("setFilterExtensions"), //
		jMethod<::jvoid(::jint)>("setFilterIndex"), //
		jMethod<::jvoid(::java::lang::String *)>("setFilterNames"), //
		jMethod<::jvoid(::java::lang::String)>("setFilterPath"), //
		jMethod<::jvoid(::jboolean)>("setOverwrite"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getFileName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFileName")] != -1);
		return call<R>("getFileName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getFileNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFileNames")] != -1);
		return call<R>("getFileNames", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getFilterExtensions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFilterExtensions")] != -1);
		return call<R>("getFilterExtensions", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getFilterIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFilterIndex")] != -1);
		return call<R>("getFilterIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getFilterNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFilterNames")] != -1);
		return call<R>("getFilterNames", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFilterPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFilterPath")] != -1);
		return call<R>("getFilterPath", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getOverwrite(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOverwrite")] != -1);
		return call<R>("getOverwrite", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto open(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("open")] != -1);
		return call<R>("open", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFileName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFileName")] != -1);
		return call<R>("setFileName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFilterExtensions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFilterExtensions")] != -1);
		return call<R>("setFilterExtensions", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFilterIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFilterIndex")] != -1);
		return call<R>("setFilterIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFilterNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFilterNames")] != -1);
		return call<R>("setFilterNames", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFilterPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFilterPath")] != -1);
		return call<R>("setFilterPath", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOverwrite(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOverwrite")] != -1);
		return call<R>("setOverwrite", std::forward<Args>(args)...);
	}

};

#endif
