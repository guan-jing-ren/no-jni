#ifndef org_eclipse_swt_browser_WindowEvent_HPP
#define org_eclipse_swt_browser_WindowEvent_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::browser::WindowEvent : public jObject<::org::eclipse::swt::browser::WindowEvent, ::org::eclipse::swt::events::TypedEvent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_browser / "WindowEvent";

	constexpr static Enume field_signatures{
		jField<::jboolean>("addressBar"), //
		jField<::org::eclipse::swt::browser::Browser>("browser"), //
		jField<::org::eclipse::swt::graphics::Point>("location"), //
		jField<::jboolean>("menuBar"), //
		jField<::jboolean>("required"), //
		jField<::org::eclipse::swt::graphics::Point>("size"), //
		jField<::jboolean>("statusBar"), //
		jField<::jboolean>("toolBar"), //
	};

	template<typename F = ::jboolean>
	auto addressBar() const {
		static_assert(field_signatures[jField<F>("addressBar")] != -1);
		return at<F>("addressBar");
	}

	template<typename F = ::org::eclipse::swt::browser::Browser>
	auto browser() const {
		static_assert(field_signatures[jField<F>("browser")] != -1);
		return at<F>("browser");
	}

	template<typename F = ::org::eclipse::swt::graphics::Point>
	auto location() const {
		static_assert(field_signatures[jField<F>("location")] != -1);
		return at<F>("location");
	}

	template<typename F = ::jboolean>
	auto menuBar() const {
		static_assert(field_signatures[jField<F>("menuBar")] != -1);
		return at<F>("menuBar");
	}

	template<typename F = ::jboolean>
	auto required() const {
		static_assert(field_signatures[jField<F>("required")] != -1);
		return at<F>("required");
	}

	template<typename F = ::org::eclipse::swt::graphics::Point>
	auto size() const {
		static_assert(field_signatures[jField<F>("size")] != -1);
		return at<F>("size");
	}

	template<typename F = ::jboolean>
	auto statusBar() const {
		static_assert(field_signatures[jField<F>("statusBar")] != -1);
		return at<F>("statusBar");
	}

	template<typename F = ::jboolean>
	auto toolBar() const {
		static_assert(field_signatures[jField<F>("toolBar")] != -1);
		return at<F>("toolBar");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Widget)>(), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
