#ifndef org_eclipse_swt_browser_Browser_HPP
#define org_eclipse_swt_browser_Browser_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::browser::Browser : public jObject<::org::eclipse::swt::browser::Browser, ::org::eclipse::swt::widgets::Composite> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_browser / "Browser";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::eclipse::swt::widgets::Composite, ::jint)>(), //
		jMethod<::jvoid(::org::eclipse::swt::browser::AuthenticationListener)>("addAuthenticationListener"), //
		jMethod<::jvoid(::org::eclipse::swt::browser::CloseWindowListener)>("addCloseWindowListener"), //
		jMethod<::jvoid(::org::eclipse::swt::browser::LocationListener)>("addLocationListener"), //
		jMethod<::jvoid(::org::eclipse::swt::browser::OpenWindowListener)>("addOpenWindowListener"), //
		jMethod<::jvoid(::org::eclipse::swt::browser::ProgressListener)>("addProgressListener"), //
		jMethod<::jvoid(::org::eclipse::swt::browser::StatusTextListener)>("addStatusTextListener"), //
		jMethod<::jvoid(::org::eclipse::swt::browser::TitleListener)>("addTitleListener"), //
		jMethod<::jvoid(::org::eclipse::swt::browser::VisibilityWindowListener)>("addVisibilityWindowListener"), //
		jMethod<::jboolean()>("back"), //
		jMethod<::jvoid()>("clearSessions"), //
		jMethod<::jboolean()>("close"), //
		jMethod<::java::lang::Object(::java::lang::String)>("evaluate"), //
		jMethod<::java::lang::Object(::java::lang::String, ::jboolean)>("evaluate"), //
		jMethod<::jboolean(::java::lang::String)>("execute"), //
		jMethod<::jboolean()>("forward"), //
		jMethod<::java::lang::String()>("getBrowserType"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::lang::String)>("getCookie"), //
		jMethod<::jboolean()>("getJavascriptEnabled"), //
		jMethod<::jint()>("getStyle"), //
		jMethod<::java::lang::String()>("getText"), //
		jMethod<::java::lang::String()>("getUrl"), //
		jMethod<::java::lang::Object()>("getWebBrowser"), //
		jMethod<::jboolean()>("isBackEnabled"), //
		jMethod<::jboolean()>("isFocusControl"), //
		jMethod<::jboolean()>("isForwardEnabled"), //
		jMethod<::jvoid()>("refresh"), //
		jMethod<::jvoid(::org::eclipse::swt::browser::AuthenticationListener)>("removeAuthenticationListener"), //
		jMethod<::jvoid(::org::eclipse::swt::browser::CloseWindowListener)>("removeCloseWindowListener"), //
		jMethod<::jvoid(::org::eclipse::swt::browser::LocationListener)>("removeLocationListener"), //
		jMethod<::jvoid(::org::eclipse::swt::browser::OpenWindowListener)>("removeOpenWindowListener"), //
		jMethod<::jvoid(::org::eclipse::swt::browser::ProgressListener)>("removeProgressListener"), //
		jMethod<::jvoid(::org::eclipse::swt::browser::StatusTextListener)>("removeStatusTextListener"), //
		jMethod<::jvoid(::org::eclipse::swt::browser::TitleListener)>("removeTitleListener"), //
		jMethod<::jvoid(::org::eclipse::swt::browser::VisibilityWindowListener)>("removeVisibilityWindowListener"), //
		jMethod<::jboolean(::java::lang::String, ::java::lang::String)>("setCookie"), //
		jMethod<::jvoid(::jboolean)>("setJavascriptEnabled"), //
		jMethod<::jboolean(::java::lang::String)>("setText"), //
		jMethod<::jboolean(::java::lang::String, ::jboolean)>("setText"), //
		jMethod<::jboolean(::java::lang::String)>("setUrl"), //
		jMethod<::jboolean(::java::lang::String, ::java::lang::String, ::java::lang::String *)>("setUrl"), //
		jMethod<::jvoid()>("stop"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addAuthenticationListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addAuthenticationListener")] != -1);
		return call<R>("addAuthenticationListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addCloseWindowListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addCloseWindowListener")] != -1);
		return call<R>("addCloseWindowListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addLocationListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addLocationListener")] != -1);
		return call<R>("addLocationListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addOpenWindowListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addOpenWindowListener")] != -1);
		return call<R>("addOpenWindowListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addProgressListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addProgressListener")] != -1);
		return call<R>("addProgressListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addStatusTextListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addStatusTextListener")] != -1);
		return call<R>("addStatusTextListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addTitleListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addTitleListener")] != -1);
		return call<R>("addTitleListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addVisibilityWindowListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addVisibilityWindowListener")] != -1);
		return call<R>("addVisibilityWindowListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto back(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("back")] != -1);
		return call<R>("back", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto clearSessions(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clearSessions")] != -1);
		return scall<R>("clearSessions", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto evaluate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("evaluate")] != -1);
		return call<R>("evaluate", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto execute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("execute")] != -1);
		return call<R>("execute", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto forward(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("forward")] != -1);
		return call<R>("forward", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBrowserType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBrowserType")] != -1);
		return call<R>("getBrowserType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getCookie(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCookie")] != -1);
		return scall<R>("getCookie", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getJavascriptEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJavascriptEnabled")] != -1);
		return call<R>("getJavascriptEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStyle")] != -1);
		return call<R>("getStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getText")] != -1);
		return call<R>("getText", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUrl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUrl")] != -1);
		return call<R>("getUrl", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getWebBrowser(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWebBrowser")] != -1);
		return call<R>("getWebBrowser", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isBackEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isBackEnabled")] != -1);
		return call<R>("isBackEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFocusControl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFocusControl")] != -1);
		return call<R>("isFocusControl", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isForwardEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isForwardEnabled")] != -1);
		return call<R>("isForwardEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto refresh(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("refresh")] != -1);
		return call<R>("refresh", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAuthenticationListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAuthenticationListener")] != -1);
		return call<R>("removeAuthenticationListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeCloseWindowListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeCloseWindowListener")] != -1);
		return call<R>("removeCloseWindowListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeLocationListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeLocationListener")] != -1);
		return call<R>("removeLocationListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeOpenWindowListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeOpenWindowListener")] != -1);
		return call<R>("removeOpenWindowListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeProgressListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeProgressListener")] != -1);
		return call<R>("removeProgressListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeStatusTextListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeStatusTextListener")] != -1);
		return call<R>("removeStatusTextListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeTitleListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeTitleListener")] != -1);
		return call<R>("removeTitleListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeVisibilityWindowListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeVisibilityWindowListener")] != -1);
		return call<R>("removeVisibilityWindowListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto setCookie(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCookie")] != -1);
		return scall<R>("setCookie", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setJavascriptEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setJavascriptEnabled")] != -1);
		return call<R>("setJavascriptEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto setText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setText")] != -1);
		return call<R>("setText", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto setUrl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUrl")] != -1);
		return call<R>("setUrl", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto stop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stop")] != -1);
		return call<R>("stop", std::forward<Args>(args)...);
	}

};

#endif
