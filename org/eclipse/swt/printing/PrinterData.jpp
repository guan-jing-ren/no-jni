#ifndef org_eclipse_swt_printing_PrinterData_HPP
#define org_eclipse_swt_printing_PrinterData_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::eclipse::swt::printing::PrinterData : public jObject<::org::eclipse::swt::printing::PrinterData, ::org::eclipse::swt::graphics::DeviceData> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_eclipse_swt_printing / "PrinterData";

	constexpr static Enume field_signatures{
		jField<::jint>("ALL_PAGES"), //
		jField<::jint>("DUPLEX_LONG_EDGE"), //
		jField<::jint>("DUPLEX_NONE"), //
		jField<::jint>("DUPLEX_SHORT_EDGE"), //
		jField<::jint>("LANDSCAPE"), //
		jField<::jint>("PAGE_RANGE"), //
		jField<::jint>("PORTRAIT"), //
		jField<::jint>("SELECTION"), //
		jField<::jboolean>("collate"), //
		jField<::jint>("copyCount"), //
		jField<::java::lang::String>("driver"), //
		jField<::jint>("duplex"), //
		jField<::jint>("endPage"), //
		jField<::java::lang::String>("fileName"), //
		jField<::java::lang::String>("name"), //
		jField<::jint>("orientation"), //
		jField<::jboolean>("printToFile"), //
		jField<::jint>("scope"), //
		jField<::jint>("startPage"), //
	};

	template<typename F = ::jint>
	static auto ALL_PAGES() {
		static_assert(field_signatures[jField<F>("ALL_PAGES")] != -1);
		return sat<F>("ALL_PAGES");
	}

	template<typename F = ::jint>
	static auto DUPLEX_LONG_EDGE() {
		static_assert(field_signatures[jField<F>("DUPLEX_LONG_EDGE")] != -1);
		return sat<F>("DUPLEX_LONG_EDGE");
	}

	template<typename F = ::jint>
	static auto DUPLEX_NONE() {
		static_assert(field_signatures[jField<F>("DUPLEX_NONE")] != -1);
		return sat<F>("DUPLEX_NONE");
	}

	template<typename F = ::jint>
	static auto DUPLEX_SHORT_EDGE() {
		static_assert(field_signatures[jField<F>("DUPLEX_SHORT_EDGE")] != -1);
		return sat<F>("DUPLEX_SHORT_EDGE");
	}

	template<typename F = ::jint>
	static auto LANDSCAPE() {
		static_assert(field_signatures[jField<F>("LANDSCAPE")] != -1);
		return sat<F>("LANDSCAPE");
	}

	template<typename F = ::jint>
	static auto PAGE_RANGE() {
		static_assert(field_signatures[jField<F>("PAGE_RANGE")] != -1);
		return sat<F>("PAGE_RANGE");
	}

	template<typename F = ::jint>
	static auto PORTRAIT() {
		static_assert(field_signatures[jField<F>("PORTRAIT")] != -1);
		return sat<F>("PORTRAIT");
	}

	template<typename F = ::jint>
	static auto SELECTION() {
		static_assert(field_signatures[jField<F>("SELECTION")] != -1);
		return sat<F>("SELECTION");
	}

	template<typename F = ::jboolean>
	auto collate() const {
		static_assert(field_signatures[jField<F>("collate")] != -1);
		return at<F>("collate");
	}

	template<typename F = ::jint>
	auto copyCount() const {
		static_assert(field_signatures[jField<F>("copyCount")] != -1);
		return at<F>("copyCount");
	}

	template<typename F = ::java::lang::String>
	auto driver() const {
		static_assert(field_signatures[jField<F>("driver")] != -1);
		return at<F>("driver");
	}

	template<typename F = ::jint>
	auto duplex() const {
		static_assert(field_signatures[jField<F>("duplex")] != -1);
		return at<F>("duplex");
	}

	template<typename F = ::jint>
	auto endPage() const {
		static_assert(field_signatures[jField<F>("endPage")] != -1);
		return at<F>("endPage");
	}

	template<typename F = ::java::lang::String>
	auto fileName() const {
		static_assert(field_signatures[jField<F>("fileName")] != -1);
		return at<F>("fileName");
	}

	template<typename F = ::java::lang::String>
	auto name() const {
		static_assert(field_signatures[jField<F>("name")] != -1);
		return at<F>("name");
	}

	template<typename F = ::jint>
	auto orientation() const {
		static_assert(field_signatures[jField<F>("orientation")] != -1);
		return at<F>("orientation");
	}

	template<typename F = ::jboolean>
	auto printToFile() const {
		static_assert(field_signatures[jField<F>("printToFile")] != -1);
		return at<F>("printToFile");
	}

	template<typename F = ::jint>
	auto scope() const {
		static_assert(field_signatures[jField<F>("scope")] != -1);
		return at<F>("scope");
	}

	template<typename F = ::jint>
	auto startPage() const {
		static_assert(field_signatures[jField<F>("startPage")] != -1);
		return at<F>("startPage");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String)>(), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
