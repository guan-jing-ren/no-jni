#ifndef org_omg_DynamicAny_DynEnum_HPP
#define org_omg_DynamicAny_DynEnum_HPP

#include "../../../jfwd_decl.hpp"

class ::org::omg::DynamicAny::DynEnum : public jObject<::org::omg::DynamicAny::DynEnum, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_omg_DynamicAny / "DynEnum";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("get_as_string"), //
		jMethod<::jint()>("get_as_ulong"), //
		jMethod<::jvoid(::java::lang::String)>("set_as_string"), //
		jMethod<::jvoid(::jint)>("set_as_ulong"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto get_as_string(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_as_string")] != -1);
		return call<R>("get_as_string", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_as_ulong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_as_ulong")] != -1);
		return call<R>("get_as_ulong", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_as_string(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_as_string")] != -1);
		return call<R>("set_as_string", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_as_ulong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_as_ulong")] != -1);
		return call<R>("set_as_ulong", std::forward<Args>(args)...);
	}

};

#endif
