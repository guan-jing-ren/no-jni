#ifndef org_omg_DynamicAny_DynValueBox_HPP
#define org_omg_DynamicAny_DynValueBox_HPP

#include "../../../jfwd_decl.hpp"

class ::org::omg::DynamicAny::DynValueBox : public jObject<::org::omg::DynamicAny::DynValueBox, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_omg_DynamicAny / "DynValueBox";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::org::omg::CORBA::Any()>("get_boxed_value"), //
		jMethod<::org::omg::DynamicAny::DynAny()>("get_boxed_value_as_dyn_any"), //
		jMethod<::jvoid(::org::omg::CORBA::Any)>("set_boxed_value"), //
		jMethod<::jvoid(::org::omg::DynamicAny::DynAny)>("set_boxed_value_as_dyn_any"), //
	};

	template<typename R = ::org::omg::CORBA::Any, typename... Args>
	auto get_boxed_value(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_boxed_value")] != -1);
		return call<R>("get_boxed_value", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::DynamicAny::DynAny, typename... Args>
	auto get_boxed_value_as_dyn_any(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_boxed_value_as_dyn_any")] != -1);
		return call<R>("get_boxed_value_as_dyn_any", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_boxed_value(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_boxed_value")] != -1);
		return call<R>("set_boxed_value", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_boxed_value_as_dyn_any(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_boxed_value_as_dyn_any")] != -1);
		return call<R>("set_boxed_value_as_dyn_any", std::forward<Args>(args)...);
	}

};

#endif
