#ifndef org_omg_DynamicAny_DynArrayOperations_HPP
#define org_omg_DynamicAny_DynArrayOperations_HPP

#include "../../../jfwd_decl.hpp"

class ::org::omg::DynamicAny::DynArrayOperations : public jObject<::org::omg::DynamicAny::DynArrayOperations, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_omg_DynamicAny / "DynArrayOperations";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::org::omg::CORBA::Any *()>("get_elements"), //
		jMethod<::org::omg::DynamicAny::DynAny *()>("get_elements_as_dyn_any"), //
		jMethod<::jvoid(::org::omg::CORBA::Any *)>("set_elements"), //
		jMethod<::jvoid(::org::omg::DynamicAny::DynAny *)>("set_elements_as_dyn_any"), //
	};

	template<typename R = ::org::omg::CORBA::Any *, typename... Args>
	auto get_elements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("get_elements")] != -1);
		return call<R>("get_elements", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::DynamicAny::DynAny *, typename... Args>
	auto get_elements_as_dyn_any(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("get_elements_as_dyn_any")] != -1);
		return call<R>("get_elements_as_dyn_any", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_elements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("set_elements")] != -1);
		return call<R>("set_elements", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_elements_as_dyn_any(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("set_elements_as_dyn_any")] != -1);
		return call<R>("set_elements_as_dyn_any", forward<Args>(args)...);
	}

};

#endif
