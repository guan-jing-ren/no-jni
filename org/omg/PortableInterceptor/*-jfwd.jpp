#ifndef org_omg_PortableInterceptor_JPP
#define org_omg_PortableInterceptor_JPP

namespace org::omg::PortableInterceptor { class ACTIVE; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ACTIVE> = ::org_omg_PortableInterceptor / "ACTIVE";
namespace org::omg::PortableInterceptor { class AdapterManagerIdHelper; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::AdapterManagerIdHelper> = ::org_omg_PortableInterceptor / "AdapterManagerIdHelper";
namespace org::omg::PortableInterceptor { class AdapterNameHelper; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::AdapterNameHelper> = ::org_omg_PortableInterceptor / "AdapterNameHelper";
namespace org::omg::PortableInterceptor { class AdapterStateHelper; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::AdapterStateHelper> = ::org_omg_PortableInterceptor / "AdapterStateHelper";
namespace org::omg::PortableInterceptor { class ClientRequestInfo; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ClientRequestInfo> = ::org_omg_PortableInterceptor / "ClientRequestInfo";
namespace org::omg::PortableInterceptor { class ClientRequestInfoOperations; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ClientRequestInfoOperations> = ::org_omg_PortableInterceptor / "ClientRequestInfoOperations";
namespace org::omg::PortableInterceptor { class ClientRequestInterceptor; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ClientRequestInterceptor> = ::org_omg_PortableInterceptor / "ClientRequestInterceptor";
namespace org::omg::PortableInterceptor { class ClientRequestInterceptorOperations; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ClientRequestInterceptorOperations> = ::org_omg_PortableInterceptor / "ClientRequestInterceptorOperations";
namespace org::omg::PortableInterceptor { class Current; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::Current> = ::org_omg_PortableInterceptor / "Current";
namespace org::omg::PortableInterceptor { class CurrentHelper; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::CurrentHelper> = ::org_omg_PortableInterceptor / "CurrentHelper";
namespace org::omg::PortableInterceptor { class CurrentOperations; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::CurrentOperations> = ::org_omg_PortableInterceptor / "CurrentOperations";
namespace org::omg::PortableInterceptor { class DISCARDING; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::DISCARDING> = ::org_omg_PortableInterceptor / "DISCARDING";
namespace org::omg::PortableInterceptor { class ForwardRequest; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ForwardRequest> = ::org_omg_PortableInterceptor / "ForwardRequest";
namespace org::omg::PortableInterceptor { class ForwardRequestHelper; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ForwardRequestHelper> = ::org_omg_PortableInterceptor / "ForwardRequestHelper";
namespace org::omg::PortableInterceptor { class HOLDING; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::HOLDING> = ::org_omg_PortableInterceptor / "HOLDING";
namespace org::omg::PortableInterceptor { class INACTIVE; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::INACTIVE> = ::org_omg_PortableInterceptor / "INACTIVE";
namespace org::omg::PortableInterceptor { class IORInfo; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::IORInfo> = ::org_omg_PortableInterceptor / "IORInfo";
namespace org::omg::PortableInterceptor { class IORInfoOperations; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::IORInfoOperations> = ::org_omg_PortableInterceptor / "IORInfoOperations";
namespace org::omg::PortableInterceptor { class IORInterceptor; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::IORInterceptor> = ::org_omg_PortableInterceptor / "IORInterceptor";
namespace org::omg::PortableInterceptor { class IORInterceptorOperations; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::IORInterceptorOperations> = ::org_omg_PortableInterceptor / "IORInterceptorOperations";
namespace org::omg::PortableInterceptor { class IORInterceptor_3_0; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::IORInterceptor_3_0> = ::org_omg_PortableInterceptor / "IORInterceptor_3_0";
namespace org::omg::PortableInterceptor { class IORInterceptor_3_0Helper; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::IORInterceptor_3_0Helper> = ::org_omg_PortableInterceptor / "IORInterceptor_3_0Helper";
namespace org::omg::PortableInterceptor { class IORInterceptor_3_0Holder; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::IORInterceptor_3_0Holder> = ::org_omg_PortableInterceptor / "IORInterceptor_3_0Holder";
namespace org::omg::PortableInterceptor { class IORInterceptor_3_0Operations; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::IORInterceptor_3_0Operations> = ::org_omg_PortableInterceptor / "IORInterceptor_3_0Operations";
namespace org::omg::PortableInterceptor { class Interceptor; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::Interceptor> = ::org_omg_PortableInterceptor / "Interceptor";
namespace org::omg::PortableInterceptor { class InterceptorOperations; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::InterceptorOperations> = ::org_omg_PortableInterceptor / "InterceptorOperations";
namespace org::omg::PortableInterceptor { class InvalidSlot; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::InvalidSlot> = ::org_omg_PortableInterceptor / "InvalidSlot";
namespace org::omg::PortableInterceptor { class InvalidSlotHelper; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::InvalidSlotHelper> = ::org_omg_PortableInterceptor / "InvalidSlotHelper";
namespace org::omg::PortableInterceptor { class LOCATION_FORWARD; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::LOCATION_FORWARD> = ::org_omg_PortableInterceptor / "LOCATION_FORWARD";
namespace org::omg::PortableInterceptor { class NON_EXISTENT; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::NON_EXISTENT> = ::org_omg_PortableInterceptor / "NON_EXISTENT";
namespace org::omg::PortableInterceptor { class ORBIdHelper; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ORBIdHelper> = ::org_omg_PortableInterceptor / "ORBIdHelper";
namespace org::omg::PortableInterceptor { class ORBInitInfo; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ORBInitInfo> = ::org_omg_PortableInterceptor / "ORBInitInfo";
namespace org::omg::PortableInterceptor { class ORBInitInfoOperations; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ORBInitInfoOperations> = ::org_omg_PortableInterceptor / "ORBInitInfoOperations";
namespace org::omg::PortableInterceptor { class ORBInitializer; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ORBInitializer> = ::org_omg_PortableInterceptor / "ORBInitializer";
namespace org::omg::PortableInterceptor { class ORBInitializerOperations; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ORBInitializerOperations> = ::org_omg_PortableInterceptor / "ORBInitializerOperations";
namespace org::omg::PortableInterceptor { class ObjectIdHelper; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ObjectIdHelper> = ::org_omg_PortableInterceptor / "ObjectIdHelper";
namespace org::omg::PortableInterceptor { class ObjectReferenceFactory; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ObjectReferenceFactory> = ::org_omg_PortableInterceptor / "ObjectReferenceFactory";
namespace org::omg::PortableInterceptor { class ObjectReferenceFactoryHelper; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ObjectReferenceFactoryHelper> = ::org_omg_PortableInterceptor / "ObjectReferenceFactoryHelper";
namespace org::omg::PortableInterceptor { class ObjectReferenceFactoryHolder; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ObjectReferenceFactoryHolder> = ::org_omg_PortableInterceptor / "ObjectReferenceFactoryHolder";
namespace org::omg::PortableInterceptor { class ObjectReferenceTemplate; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ObjectReferenceTemplate> = ::org_omg_PortableInterceptor / "ObjectReferenceTemplate";
namespace org::omg::PortableInterceptor { class ObjectReferenceTemplateHelper; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ObjectReferenceTemplateHelper> = ::org_omg_PortableInterceptor / "ObjectReferenceTemplateHelper";
namespace org::omg::PortableInterceptor { class ObjectReferenceTemplateHolder; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ObjectReferenceTemplateHolder> = ::org_omg_PortableInterceptor / "ObjectReferenceTemplateHolder";
namespace org::omg::PortableInterceptor { class ObjectReferenceTemplateSeqHelper; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ObjectReferenceTemplateSeqHelper> = ::org_omg_PortableInterceptor / "ObjectReferenceTemplateSeqHelper";
namespace org::omg::PortableInterceptor { class ObjectReferenceTemplateSeqHolder; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ObjectReferenceTemplateSeqHolder> = ::org_omg_PortableInterceptor / "ObjectReferenceTemplateSeqHolder";
namespace org::omg::PortableInterceptor { class PolicyFactory; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::PolicyFactory> = ::org_omg_PortableInterceptor / "PolicyFactory";
namespace org::omg::PortableInterceptor { class PolicyFactoryOperations; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::PolicyFactoryOperations> = ::org_omg_PortableInterceptor / "PolicyFactoryOperations";
namespace org::omg::PortableInterceptor { class RequestInfo; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::RequestInfo> = ::org_omg_PortableInterceptor / "RequestInfo";
namespace org::omg::PortableInterceptor { class RequestInfoOperations; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::RequestInfoOperations> = ::org_omg_PortableInterceptor / "RequestInfoOperations";
namespace org::omg::PortableInterceptor { class SUCCESSFUL; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::SUCCESSFUL> = ::org_omg_PortableInterceptor / "SUCCESSFUL";
namespace org::omg::PortableInterceptor { class SYSTEM_EXCEPTION; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::SYSTEM_EXCEPTION> = ::org_omg_PortableInterceptor / "SYSTEM_EXCEPTION";
namespace org::omg::PortableInterceptor { class ServerIdHelper; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ServerIdHelper> = ::org_omg_PortableInterceptor / "ServerIdHelper";
namespace org::omg::PortableInterceptor { class ServerRequestInfo; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ServerRequestInfo> = ::org_omg_PortableInterceptor / "ServerRequestInfo";
namespace org::omg::PortableInterceptor { class ServerRequestInfoOperations; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ServerRequestInfoOperations> = ::org_omg_PortableInterceptor / "ServerRequestInfoOperations";
namespace org::omg::PortableInterceptor { class ServerRequestInterceptor; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ServerRequestInterceptor> = ::org_omg_PortableInterceptor / "ServerRequestInterceptor";
namespace org::omg::PortableInterceptor { class ServerRequestInterceptorOperations; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ServerRequestInterceptorOperations> = ::org_omg_PortableInterceptor / "ServerRequestInterceptorOperations";
namespace org::omg::PortableInterceptor { class TRANSPORT_RETRY; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::TRANSPORT_RETRY> = ::org_omg_PortableInterceptor / "TRANSPORT_RETRY";
namespace org::omg::PortableInterceptor { class USER_EXCEPTION; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::USER_EXCEPTION> = ::org_omg_PortableInterceptor / "USER_EXCEPTION";

#endif
