#ifndef org_omg_PortableInterceptor_ORBInitInfoOperations_HPP
#define org_omg_PortableInterceptor_ORBInitInfoOperations_HPP

#include "../../../jfwd_decl.hpp"

class ::org::omg::PortableInterceptor::ORBInitInfoOperations : public jObject<::org::omg::PortableInterceptor::ORBInitInfoOperations, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_omg_PortableInterceptor / "ORBInitInfoOperations";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::org::omg::PortableInterceptor::ClientRequestInterceptor)>("add_client_request_interceptor"), //
		jMethod<::jvoid(::org::omg::PortableInterceptor::IORInterceptor)>("add_ior_interceptor"), //
		jMethod<::jvoid(::org::omg::PortableInterceptor::ServerRequestInterceptor)>("add_server_request_interceptor"), //
		jMethod<::jint()>("allocate_slot_id"), //
		jMethod<::java::lang::String *()>("arguments"), //
		jMethod<::org::omg::IOP::CodecFactory()>("codec_factory"), //
		jMethod<::java::lang::String()>("orb_id"), //
		jMethod<::jvoid(::java::lang::String, ::org::omg::CORBA::Object)>("register_initial_reference"), //
		jMethod<::jvoid(::jint, ::org::omg::PortableInterceptor::PolicyFactory)>("register_policy_factory"), //
		jMethod<::org::omg::CORBA::Object(::java::lang::String)>("resolve_initial_references"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto add_client_request_interceptor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("add_client_request_interceptor")] != -1);
		return call<R>("add_client_request_interceptor", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto add_ior_interceptor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("add_ior_interceptor")] != -1);
		return call<R>("add_ior_interceptor", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto add_server_request_interceptor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("add_server_request_interceptor")] != -1);
		return call<R>("add_server_request_interceptor", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto allocate_slot_id(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("allocate_slot_id")] != -1);
		return call<R>("allocate_slot_id", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto arguments(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("arguments")] != -1);
		return call<R>("arguments", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::IOP::CodecFactory, typename... Args>
	auto codec_factory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("codec_factory")] != -1);
		return call<R>("codec_factory", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto orb_id(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("orb_id")] != -1);
		return call<R>("orb_id", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto register_initial_reference(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("register_initial_reference")] != -1);
		return call<R>("register_initial_reference", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto register_policy_factory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("register_policy_factory")] != -1);
		return call<R>("register_policy_factory", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto resolve_initial_references(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("resolve_initial_references")] != -1);
		return call<R>("resolve_initial_references", forward<Args>(args)...);
	}

};

#endif
