#ifndef org_omg_PortableInterceptor_RequestInfo_HPP
#define org_omg_PortableInterceptor_RequestInfo_HPP

#include "../../../jfwd_decl.hpp"

class ::org::omg::PortableInterceptor::RequestInfo : public jObject<::org::omg::PortableInterceptor::RequestInfo, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_omg_PortableInterceptor / "RequestInfo";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::org::omg::CORBA::Request(::org::omg::CORBA::Context, ::java::lang::String, ::org::omg::CORBA::NVList, ::org::omg::CORBA::NamedValue)>("_create_request"), //
		jMethod<::org::omg::CORBA::Request(::org::omg::CORBA::Context, ::java::lang::String, ::org::omg::CORBA::NVList, ::org::omg::CORBA::NamedValue, ::org::omg::CORBA::ExceptionList, ::org::omg::CORBA::ContextList)>("_create_request"), //
		jMethod<::org::omg::CORBA::Object()>("_duplicate"), //
		jMethod<::org::omg::CORBA::DomainManager *()>("_get_domain_managers"), //
		jMethod<::org::omg::CORBA::Object()>("_get_interface_def"), //
		jMethod<::org::omg::CORBA::Policy(::jint)>("_get_policy"), //
		jMethod<::jint(::jint)>("_hash"), //
		jMethod<::jboolean(::java::lang::String)>("_is_a"), //
		jMethod<::jboolean(::org::omg::CORBA::Object)>("_is_equivalent"), //
		jMethod<::jboolean()>("_non_existent"), //
		jMethod<::jvoid()>("_release"), //
		jMethod<::org::omg::CORBA::Request(::java::lang::String)>("_request"), //
		jMethod<::org::omg::CORBA::Object(::org::omg::CORBA::Policy *, ::org::omg::CORBA::SetOverrideType)>("_set_policy_override"), //
		jMethod<::org::omg::Dynamic::Parameter *()>("arguments"), //
		jMethod<::java::lang::String *()>("contexts"), //
		jMethod<::org::omg::CORBA::TypeCode *()>("exceptions"), //
		jMethod<::org::omg::CORBA::Object()>("forward_reference"), //
		jMethod<::org::omg::IOP::ServiceContext(::jint)>("get_reply_service_context"), //
		jMethod<::org::omg::IOP::ServiceContext(::jint)>("get_request_service_context"), //
		jMethod<::org::omg::CORBA::Any(::jint)>("get_slot"), //
		jMethod<::java::lang::String()>("operation"), //
		jMethod<::java::lang::String *()>("operation_context"), //
		jMethod<::jshort()>("reply_status"), //
		jMethod<::jint()>("request_id"), //
		jMethod<::jboolean()>("response_expected"), //
		jMethod<::org::omg::CORBA::Any()>("result"), //
		jMethod<::jshort()>("sync_scope"), //
	};

	template<typename R = ::org::omg::CORBA::Request, typename... Args>
	auto _create_request(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_create_request")] != -1);
		return call<R>("_create_request", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto _duplicate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_duplicate")] != -1);
		return call<R>("_duplicate", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DomainManager *, typename... Args>
	auto _get_domain_managers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_get_domain_managers")] != -1);
		return call<R>("_get_domain_managers", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto _get_interface_def(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_get_interface_def")] != -1);
		return call<R>("_get_interface_def", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Policy, typename... Args>
	auto _get_policy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_get_policy")] != -1);
		return call<R>("_get_policy", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto _hash(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_hash")] != -1);
		return call<R>("_hash", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto _is_a(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_is_a")] != -1);
		return call<R>("_is_a", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto _is_equivalent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_is_equivalent")] != -1);
		return call<R>("_is_equivalent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto _non_existent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_non_existent")] != -1);
		return call<R>("_non_existent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto _release(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_release")] != -1);
		return call<R>("_release", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Request, typename... Args>
	auto _request(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_request")] != -1);
		return call<R>("_request", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto _set_policy_override(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_set_policy_override")] != -1);
		return call<R>("_set_policy_override", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::Dynamic::Parameter *, typename... Args>
	auto arguments(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("arguments")] != -1);
		return call<R>("arguments", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto contexts(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("contexts")] != -1);
		return call<R>("contexts", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TypeCode *, typename... Args>
	auto exceptions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("exceptions")] != -1);
		return call<R>("exceptions", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto forward_reference(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("forward_reference")] != -1);
		return call<R>("forward_reference", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::IOP::ServiceContext, typename... Args>
	auto get_reply_service_context(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_reply_service_context")] != -1);
		return call<R>("get_reply_service_context", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::IOP::ServiceContext, typename... Args>
	auto get_request_service_context(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_request_service_context")] != -1);
		return call<R>("get_request_service_context", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Any, typename... Args>
	auto get_slot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_slot")] != -1);
		return call<R>("get_slot", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto operation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("operation")] != -1);
		return call<R>("operation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto operation_context(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("operation_context")] != -1);
		return call<R>("operation_context", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto reply_status(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reply_status")] != -1);
		return call<R>("reply_status", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto request_id(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("request_id")] != -1);
		return call<R>("request_id", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto response_expected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("response_expected")] != -1);
		return call<R>("response_expected", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Any, typename... Args>
	auto result(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("result")] != -1);
		return call<R>("result", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto sync_scope(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sync_scope")] != -1);
		return call<R>("sync_scope", std::forward<Args>(args)...);
	}

};

#endif
