#ifndef org_omg_PortableInterceptor_ServerRequestInfoOperations_HPP
#define org_omg_PortableInterceptor_ServerRequestInfoOperations_HPP

#include "../../../jfwd_decl.hpp"

class ::org::omg::PortableInterceptor::ServerRequestInfoOperations : public jObject<::org::omg::PortableInterceptor::ServerRequestInfoOperations, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_omg_PortableInterceptor / "ServerRequestInfoOperations";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jbyte *()>("adapter_id"), //
		jMethod<::java::lang::String *()>("adapter_name"), //
		jMethod<::jvoid(::org::omg::IOP::ServiceContext, ::jboolean)>("add_reply_service_context"), //
		jMethod<::org::omg::Dynamic::Parameter *()>("arguments"), //
		jMethod<::java::lang::String *()>("contexts"), //
		jMethod<::org::omg::CORBA::TypeCode *()>("exceptions"), //
		jMethod<::org::omg::CORBA::Object()>("forward_reference"), //
		jMethod<::org::omg::IOP::ServiceContext(::jint)>("get_reply_service_context"), //
		jMethod<::org::omg::IOP::ServiceContext(::jint)>("get_request_service_context"), //
		jMethod<::org::omg::CORBA::Policy(::jint)>("get_server_policy"), //
		jMethod<::org::omg::CORBA::Any(::jint)>("get_slot"), //
		jMethod<::jbyte *()>("object_id"), //
		jMethod<::java::lang::String()>("operation"), //
		jMethod<::java::lang::String *()>("operation_context"), //
		jMethod<::java::lang::String()>("orb_id"), //
		jMethod<::jshort()>("reply_status"), //
		jMethod<::jint()>("request_id"), //
		jMethod<::jboolean()>("response_expected"), //
		jMethod<::org::omg::CORBA::Any()>("result"), //
		jMethod<::org::omg::CORBA::Any()>("sending_exception"), //
		jMethod<::java::lang::String()>("server_id"), //
		jMethod<::jvoid(::jint, ::org::omg::CORBA::Any)>("set_slot"), //
		jMethod<::jshort()>("sync_scope"), //
		jMethod<::jboolean(::java::lang::String)>("target_is_a"), //
		jMethod<::java::lang::String()>("target_most_derived_interface"), //
	};

	template<typename R = ::jbyte *, typename... Args>
	auto adapter_id(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("adapter_id")] != -1);
		return call<R>("adapter_id", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto adapter_name(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("adapter_name")] != -1);
		return call<R>("adapter_name", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto add_reply_service_context(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add_reply_service_context")] != -1);
		return call<R>("add_reply_service_context", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::Dynamic::Parameter *, typename... Args>
	auto arguments(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("arguments")] != -1);
		return call<R>("arguments", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto contexts(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("contexts")] != -1);
		return call<R>("contexts", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TypeCode *, typename... Args>
	auto exceptions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("exceptions")] != -1);
		return call<R>("exceptions", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto forward_reference(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("forward_reference")] != -1);
		return call<R>("forward_reference", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::IOP::ServiceContext, typename... Args>
	auto get_reply_service_context(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_reply_service_context")] != -1);
		return call<R>("get_reply_service_context", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::IOP::ServiceContext, typename... Args>
	auto get_request_service_context(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_request_service_context")] != -1);
		return call<R>("get_request_service_context", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Policy, typename... Args>
	auto get_server_policy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_server_policy")] != -1);
		return call<R>("get_server_policy", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Any, typename... Args>
	auto get_slot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_slot")] != -1);
		return call<R>("get_slot", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto object_id(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("object_id")] != -1);
		return call<R>("object_id", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto operation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("operation")] != -1);
		return call<R>("operation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto operation_context(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("operation_context")] != -1);
		return call<R>("operation_context", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto orb_id(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("orb_id")] != -1);
		return call<R>("orb_id", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto reply_status(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reply_status")] != -1);
		return call<R>("reply_status", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto request_id(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("request_id")] != -1);
		return call<R>("request_id", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto response_expected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("response_expected")] != -1);
		return call<R>("response_expected", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Any, typename... Args>
	auto result(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("result")] != -1);
		return call<R>("result", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Any, typename... Args>
	auto sending_exception(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sending_exception")] != -1);
		return call<R>("sending_exception", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto server_id(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("server_id")] != -1);
		return call<R>("server_id", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_slot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_slot")] != -1);
		return call<R>("set_slot", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto sync_scope(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sync_scope")] != -1);
		return call<R>("sync_scope", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto target_is_a(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("target_is_a")] != -1);
		return call<R>("target_is_a", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto target_most_derived_interface(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("target_most_derived_interface")] != -1);
		return call<R>("target_most_derived_interface", std::forward<Args>(args)...);
	}

};

#endif
