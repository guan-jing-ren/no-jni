#ifndef org_omg_PortableInterceptor_ClientRequestInfoOperations_HPP
#define org_omg_PortableInterceptor_ClientRequestInfoOperations_HPP

#include "../../../jfwd_decl.hpp"

class ::org::omg::PortableInterceptor::ClientRequestInfoOperations : public jObject<::org::omg::PortableInterceptor::ClientRequestInfoOperations, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_omg_PortableInterceptor / "ClientRequestInfoOperations";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::org::omg::IOP::ServiceContext, ::jboolean)>("add_request_service_context"), //
		jMethod<::org::omg::IOP::TaggedProfile()>("effective_profile"), //
		jMethod<::org::omg::CORBA::Object()>("effective_target"), //
		jMethod<::org::omg::IOP::TaggedComponent(::jint)>("get_effective_component"), //
		jMethod<::org::omg::IOP::TaggedComponent *(::jint)>("get_effective_components"), //
		jMethod<::org::omg::CORBA::Policy(::jint)>("get_request_policy"), //
		jMethod<::org::omg::CORBA::Any()>("received_exception"), //
		jMethod<::java::lang::String()>("received_exception_id"), //
		jMethod<::org::omg::CORBA::Object()>("target"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto add_request_service_context(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("add_request_service_context")] != -1);
		return call<R>("add_request_service_context", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::IOP::TaggedProfile, typename... Args>
	auto effective_profile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("effective_profile")] != -1);
		return call<R>("effective_profile", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto effective_target(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("effective_target")] != -1);
		return call<R>("effective_target", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::IOP::TaggedComponent, typename... Args>
	auto get_effective_component(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("get_effective_component")] != -1);
		return call<R>("get_effective_component", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::IOP::TaggedComponent *, typename... Args>
	auto get_effective_components(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("get_effective_components")] != -1);
		return call<R>("get_effective_components", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Policy, typename... Args>
	auto get_request_policy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("get_request_policy")] != -1);
		return call<R>("get_request_policy", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Any, typename... Args>
	auto received_exception(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("received_exception")] != -1);
		return call<R>("received_exception", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto received_exception_id(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("received_exception_id")] != -1);
		return call<R>("received_exception_id", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto target(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("target")] != -1);
		return call<R>("target", forward<Args>(args)...);
	}

};

#endif
