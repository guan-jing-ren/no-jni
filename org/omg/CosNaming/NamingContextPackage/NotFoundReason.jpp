#ifndef org_omg_CosNaming_NamingContextPackage_NotFoundReason_HPP
#define org_omg_CosNaming_NamingContextPackage_NotFoundReason_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::omg::CosNaming::NamingContextPackage::NotFoundReason : public jObject<::org::omg::CosNaming::NamingContextPackage::NotFoundReason, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_omg_CosNaming_NamingContextPackage / "NotFoundReason";

	constexpr static Enume field_signatures{
		jField<::jint>("_missing_node"), //
		jField<::jint>("_not_context"), //
		jField<::jint>("_not_object"), //
		jField<::org::omg::CosNaming::NamingContextPackage::NotFoundReason>("missing_node"), //
		jField<::org::omg::CosNaming::NamingContextPackage::NotFoundReason>("not_context"), //
		jField<::org::omg::CosNaming::NamingContextPackage::NotFoundReason>("not_object"), //
	};

	template<typename F = ::jint>
	static auto _missing_node() {
		static_assert(field_signatures[jField<F>("_missing_node")] != -1);
		return sat<F>("_missing_node");
	}

	template<typename F = ::jint>
	static auto _not_context() {
		static_assert(field_signatures[jField<F>("_not_context")] != -1);
		return sat<F>("_not_context");
	}

	template<typename F = ::jint>
	static auto _not_object() {
		static_assert(field_signatures[jField<F>("_not_object")] != -1);
		return sat<F>("_not_object");
	}

	template<typename F = ::org::omg::CosNaming::NamingContextPackage::NotFoundReason>
	static auto missing_node() {
		static_assert(field_signatures[jField<F>("missing_node")] != -1);
		return sat<F>("missing_node");
	}

	template<typename F = ::org::omg::CosNaming::NamingContextPackage::NotFoundReason>
	static auto not_context() {
		static_assert(field_signatures[jField<F>("not_context")] != -1);
		return sat<F>("not_context");
	}

	template<typename F = ::org::omg::CosNaming::NamingContextPackage::NotFoundReason>
	static auto not_object() {
		static_assert(field_signatures[jField<F>("not_object")] != -1);
		return sat<F>("not_object");
	}

	constexpr static Enume method_signatures{
		jMethod<::org::omg::CosNaming::NamingContextPackage::NotFoundReason(::jint)>("from_int"), //
		jMethod<::jint()>("value"), //
	};

	template<typename R = ::org::omg::CosNaming::NamingContextPackage::NotFoundReason, typename... Args>
	static auto from_int(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("from_int")] != -1);
		return scall<R>("from_int", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto value(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("value")] != -1);
		return call<R>("value", std::forward<Args>(args)...);
	}

};

#endif
