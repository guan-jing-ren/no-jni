#ifndef org_omg_CosNaming__BindingIteratorStub_HPP
#define org_omg_CosNaming__BindingIteratorStub_HPP

#include "../../../jfwd_decl.hpp"

class ::org::omg::CosNaming::_BindingIteratorStub : public jObject<::org::omg::CosNaming::_BindingIteratorStub, ::org::omg::CORBA::portable::ObjectImpl> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_omg_CosNaming / "_BindingIteratorStub";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::String *()>("_ids"), //
		jMethod<::jvoid()>("destroy"), //
		jMethod<::jboolean(::jint, ::org::omg::CosNaming::BindingListHolder)>("next_n"), //
		jMethod<::jboolean(::org::omg::CosNaming::BindingHolder)>("next_one"), //
	};

	template<typename R = ::java::lang::String *, typename... Args>
	auto _ids(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("_ids")] != -1);
		return call<R>("_ids", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto destroy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("destroy")] != -1);
		return call<R>("destroy", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto next_n(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("next_n")] != -1);
		return call<R>("next_n", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto next_one(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("next_one")] != -1);
		return call<R>("next_one", forward<Args>(args)...);
	}

};

#endif
