#ifndef org_omg_CosNaming_NamingContextOperations_HPP
#define org_omg_CosNaming_NamingContextOperations_HPP

#include "../../../jfwd_decl.hpp"

class ::org::omg::CosNaming::NamingContextOperations : public jObject<::org::omg::CosNaming::NamingContextOperations, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_omg_CosNaming / "NamingContextOperations";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::org::omg::CosNaming::NameComponent *, ::org::omg::CORBA::Object)>("bind"), //
		jMethod<::jvoid(::org::omg::CosNaming::NameComponent *, ::org::omg::CosNaming::NamingContext)>("bind_context"), //
		jMethod<::org::omg::CosNaming::NamingContext(::org::omg::CosNaming::NameComponent *)>("bind_new_context"), //
		jMethod<::jvoid()>("destroy"), //
		jMethod<::jvoid(::jint, ::org::omg::CosNaming::BindingListHolder, ::org::omg::CosNaming::BindingIteratorHolder)>("list"), //
		jMethod<::org::omg::CosNaming::NamingContext()>("new_context"), //
		jMethod<::jvoid(::org::omg::CosNaming::NameComponent *, ::org::omg::CORBA::Object)>("rebind"), //
		jMethod<::jvoid(::org::omg::CosNaming::NameComponent *, ::org::omg::CosNaming::NamingContext)>("rebind_context"), //
		jMethod<::org::omg::CORBA::Object(::org::omg::CosNaming::NameComponent *)>("resolve"), //
		jMethod<::jvoid(::org::omg::CosNaming::NameComponent *)>("unbind"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto bind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("bind")] != -1);
		return call<R>("bind", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto bind_context(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("bind_context")] != -1);
		return call<R>("bind_context", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CosNaming::NamingContext, typename... Args>
	auto bind_new_context(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("bind_new_context")] != -1);
		return call<R>("bind_new_context", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto destroy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("destroy")] != -1);
		return call<R>("destroy", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto list(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("list")] != -1);
		return call<R>("list", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CosNaming::NamingContext, typename... Args>
	auto new_context(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("new_context")] != -1);
		return call<R>("new_context", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto rebind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("rebind")] != -1);
		return call<R>("rebind", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto rebind_context(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("rebind_context")] != -1);
		return call<R>("rebind_context", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto resolve(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("resolve")] != -1);
		return call<R>("resolve", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unbind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("unbind")] != -1);
		return call<R>("unbind", forward<Args>(args)...);
	}

};

#endif
