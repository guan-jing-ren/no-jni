#ifndef org_omg_PortableServer__ServantLocatorStub_HPP
#define org_omg_PortableServer__ServantLocatorStub_HPP

#include "../../../jfwd_decl.hpp"

class ::org::omg::PortableServer::_ServantLocatorStub : public jObject<::org::omg::PortableServer::_ServantLocatorStub, ::org::omg::CORBA::portable::ObjectImpl> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_omg_PortableServer / "_ServantLocatorStub";

	constexpr static Enume field_signatures{
		jField<::java::lang::Class>("_opsClass"), //
	};

	template<typename F = ::java::lang::Class>
	static auto _opsClass() {
		static_assert(field_signatures[jField<F>("_opsClass")] != -1);
		return sat<F>("_opsClass");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::String *()>("_ids"), //
		jMethod<::jvoid(::jbyte *, ::org::omg::PortableServer::POA, ::java::lang::String, ::java::lang::Object, ::org::omg::PortableServer::Servant)>("postinvoke"), //
		jMethod<::org::omg::PortableServer::Servant(::jbyte *, ::org::omg::PortableServer::POA, ::java::lang::String, ::org::omg::PortableServer::ServantLocatorPackage::CookieHolder)>("preinvoke"), //
	};

	template<typename R = ::java::lang::String *, typename... Args>
	auto _ids(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("_ids")] != -1);
		return call<R>("_ids", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto postinvoke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("postinvoke")] != -1);
		return call<R>("postinvoke", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::Servant, typename... Args>
	auto preinvoke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("preinvoke")] != -1);
		return call<R>("preinvoke", forward<Args>(args)...);
	}

};

#endif
