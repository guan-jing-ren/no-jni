#ifndef org_omg_PortableServer_ServantActivatorPOA_HPP
#define org_omg_PortableServer_ServantActivatorPOA_HPP

#include "../../../jfwd_decl.hpp"

class ::org::omg::PortableServer::ServantActivatorPOA : public jObject<::org::omg::PortableServer::ServantActivatorPOA, ::org::omg::PortableServer::Servant> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_omg_PortableServer / "ServantActivatorPOA";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::String *(::org::omg::PortableServer::POA, ::jbyte *)>("_all_interfaces"), //
		jMethod<::org::omg::CORBA::portable::OutputStream(::java::lang::String, ::org::omg::CORBA::portable::InputStream, ::org::omg::CORBA::portable::ResponseHandler)>("_invoke"), //
		jMethod<::org::omg::PortableServer::ServantActivator()>("_this"), //
		jMethod<::org::omg::PortableServer::ServantActivator(::org::omg::CORBA::ORB)>("_this"), //
		jMethod<::jvoid(::jbyte *, ::org::omg::PortableServer::POA, ::org::omg::PortableServer::Servant, ::jboolean, ::jboolean)>("etherealize"), //
		jMethod<::org::omg::PortableServer::Servant(::jbyte *, ::org::omg::PortableServer::POA)>("incarnate"), //
	};

	template<typename R = ::java::lang::String *, typename... Args>
	auto _all_interfaces(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_all_interfaces")] != -1);
		return call<R>("_all_interfaces", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::portable::OutputStream, typename... Args>
	auto _invoke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_invoke")] != -1);
		return call<R>("_invoke", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::ServantActivator, typename... Args>
	auto _this(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_this")] != -1);
		return call<R>("_this", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto etherealize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("etherealize")] != -1);
		return call<R>("etherealize", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::Servant, typename... Args>
	auto incarnate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("incarnate")] != -1);
		return call<R>("incarnate", std::forward<Args>(args)...);
	}

};

#endif
