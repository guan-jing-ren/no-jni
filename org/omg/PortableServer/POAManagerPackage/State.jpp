#ifndef org_omg_PortableServer_POAManagerPackage_State_HPP
#define org_omg_PortableServer_POAManagerPackage_State_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::omg::PortableServer::POAManagerPackage::State : public jObject<::org::omg::PortableServer::POAManagerPackage::State, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_omg_PortableServer_POAManagerPackage / "State";

	constexpr static Enume field_signatures{
		jField<::org::omg::PortableServer::POAManagerPackage::State>("ACTIVE"), //
		jField<::org::omg::PortableServer::POAManagerPackage::State>("DISCARDING"), //
		jField<::org::omg::PortableServer::POAManagerPackage::State>("HOLDING"), //
		jField<::org::omg::PortableServer::POAManagerPackage::State>("INACTIVE"), //
		jField<::jint>("_ACTIVE"), //
		jField<::jint>("_DISCARDING"), //
		jField<::jint>("_HOLDING"), //
		jField<::jint>("_INACTIVE"), //
	};

	template<typename F = ::org::omg::PortableServer::POAManagerPackage::State>
	static auto ACTIVE() {
		static_assert(field_signatures[jField<F>("ACTIVE")] != -1);
		return sat<F>("ACTIVE");
	}

	template<typename F = ::org::omg::PortableServer::POAManagerPackage::State>
	static auto DISCARDING() {
		static_assert(field_signatures[jField<F>("DISCARDING")] != -1);
		return sat<F>("DISCARDING");
	}

	template<typename F = ::org::omg::PortableServer::POAManagerPackage::State>
	static auto HOLDING() {
		static_assert(field_signatures[jField<F>("HOLDING")] != -1);
		return sat<F>("HOLDING");
	}

	template<typename F = ::org::omg::PortableServer::POAManagerPackage::State>
	static auto INACTIVE() {
		static_assert(field_signatures[jField<F>("INACTIVE")] != -1);
		return sat<F>("INACTIVE");
	}

	template<typename F = ::jint>
	static auto _ACTIVE() {
		static_assert(field_signatures[jField<F>("_ACTIVE")] != -1);
		return sat<F>("_ACTIVE");
	}

	template<typename F = ::jint>
	static auto _DISCARDING() {
		static_assert(field_signatures[jField<F>("_DISCARDING")] != -1);
		return sat<F>("_DISCARDING");
	}

	template<typename F = ::jint>
	static auto _HOLDING() {
		static_assert(field_signatures[jField<F>("_HOLDING")] != -1);
		return sat<F>("_HOLDING");
	}

	template<typename F = ::jint>
	static auto _INACTIVE() {
		static_assert(field_signatures[jField<F>("_INACTIVE")] != -1);
		return sat<F>("_INACTIVE");
	}

	constexpr static Enume method_signatures{
		jMethod<::org::omg::PortableServer::POAManagerPackage::State(::jint)>("from_int"), //
		jMethod<::jint()>("value"), //
	};

	template<typename R = ::org::omg::PortableServer::POAManagerPackage::State, typename... Args>
	static auto from_int(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("from_int")] != -1);
		return scall<R>("from_int", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto value(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("value")] != -1);
		return call<R>("value", std::forward<Args>(args)...);
	}

};

#endif
