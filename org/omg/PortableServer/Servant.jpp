#ifndef org_omg_PortableServer_Servant_HPP
#define org_omg_PortableServer_Servant_HPP

#include "../../../jfwd_decl.hpp"

class ::org::omg::PortableServer::Servant : public jObject<::org::omg::PortableServer::Servant, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_omg_PortableServer / "Servant";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::String *(::org::omg::PortableServer::POA, ::jbyte *)>("_all_interfaces"), //
		jMethod<::org::omg::PortableServer::POA()>("_default_POA"), //
		jMethod<::org::omg::PortableServer::portable::Delegate()>("_get_delegate"), //
		jMethod<::org::omg::CORBA::Object()>("_get_interface_def"), //
		jMethod<::jboolean(::java::lang::String)>("_is_a"), //
		jMethod<::jboolean()>("_non_existent"), //
		jMethod<::jbyte *()>("_object_id"), //
		jMethod<::org::omg::CORBA::ORB()>("_orb"), //
		jMethod<::org::omg::PortableServer::POA()>("_poa"), //
		jMethod<::jvoid(::org::omg::PortableServer::portable::Delegate)>("_set_delegate"), //
		jMethod<::org::omg::CORBA::Object()>("_this_object"), //
		jMethod<::org::omg::CORBA::Object(::org::omg::CORBA::ORB)>("_this_object"), //
	};

	template<typename R = ::java::lang::String *, typename... Args>
	auto _all_interfaces(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("_all_interfaces")] != -1);
		return call<R>("_all_interfaces", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::POA, typename... Args>
	auto _default_POA(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("_default_POA")] != -1);
		return call<R>("_default_POA", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::portable::Delegate, typename... Args>
	auto _get_delegate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("_get_delegate")] != -1);
		return call<R>("_get_delegate", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto _get_interface_def(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("_get_interface_def")] != -1);
		return call<R>("_get_interface_def", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto _is_a(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("_is_a")] != -1);
		return call<R>("_is_a", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto _non_existent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("_non_existent")] != -1);
		return call<R>("_non_existent", forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto _object_id(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("_object_id")] != -1);
		return call<R>("_object_id", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::ORB, typename... Args>
	auto _orb(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("_orb")] != -1);
		return call<R>("_orb", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::POA, typename... Args>
	auto _poa(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("_poa")] != -1);
		return call<R>("_poa", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto _set_delegate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("_set_delegate")] != -1);
		return call<R>("_set_delegate", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto _this_object(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("_this_object")] != -1);
		return call<R>("_this_object", forward<Args>(args)...);
	}

};

#endif
