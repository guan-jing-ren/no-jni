#ifndef org_omg_PortableServer_portable_Delegate_HPP
#define org_omg_PortableServer_portable_Delegate_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::omg::PortableServer::portable::Delegate : public jObject<::org::omg::PortableServer::portable::Delegate, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_omg_PortableServer_portable / "Delegate";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::org::omg::PortableServer::POA(::org::omg::PortableServer::Servant)>("default_POA"), //
		jMethod<::org::omg::CORBA::Object(::org::omg::PortableServer::Servant)>("get_interface_def"), //
		jMethod<::jboolean(::org::omg::PortableServer::Servant, ::java::lang::String)>("is_a"), //
		jMethod<::jboolean(::org::omg::PortableServer::Servant)>("non_existent"), //
		jMethod<::jbyte *(::org::omg::PortableServer::Servant)>("object_id"), //
		jMethod<::org::omg::CORBA::ORB(::org::omg::PortableServer::Servant)>("orb"), //
		jMethod<::org::omg::PortableServer::POA(::org::omg::PortableServer::Servant)>("poa"), //
		jMethod<::org::omg::CORBA::Object(::org::omg::PortableServer::Servant)>("this_object"), //
	};

	template<typename R = ::org::omg::PortableServer::POA, typename... Args>
	auto default_POA(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("default_POA")] != -1);
		return call<R>("default_POA", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto get_interface_def(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("get_interface_def")] != -1);
		return call<R>("get_interface_def", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto is_a(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("is_a")] != -1);
		return call<R>("is_a", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto non_existent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("non_existent")] != -1);
		return call<R>("non_existent", forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto object_id(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("object_id")] != -1);
		return call<R>("object_id", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::ORB, typename... Args>
	auto orb(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("orb")] != -1);
		return call<R>("orb", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::POA, typename... Args>
	auto poa(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("poa")] != -1);
		return call<R>("poa", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto this_object(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("this_object")] != -1);
		return call<R>("this_object", forward<Args>(args)...);
	}

};

#endif
