#ifndef org_omg_PortableServer_POA_HPP
#define org_omg_PortableServer_POA_HPP

#include "../../../jfwd_decl.hpp"

class ::org::omg::PortableServer::POA : public jObject<::org::omg::PortableServer::POA, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_omg_PortableServer / "POA";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::org::omg::CORBA::Request(::org::omg::CORBA::Context, ::java::lang::String, ::org::omg::CORBA::NVList, ::org::omg::CORBA::NamedValue)>("_create_request"), //
		jMethod<::org::omg::CORBA::Request(::org::omg::CORBA::Context, ::java::lang::String, ::org::omg::CORBA::NVList, ::org::omg::CORBA::NamedValue, ::org::omg::CORBA::ExceptionList, ::org::omg::CORBA::ContextList)>("_create_request"), //
		jMethod<::org::omg::CORBA::Object()>("_duplicate"), //
		jMethod<::org::omg::CORBA::DomainManager *()>("_get_domain_managers"), //
		jMethod<::org::omg::CORBA::Object()>("_get_interface_def"), //
		jMethod<::org::omg::CORBA::Policy(::jint)>("_get_policy"), //
		jMethod<::jint(::jint)>("_hash"), //
		jMethod<::jboolean(::java::lang::String)>("_is_a"), //
		jMethod<::jboolean(::org::omg::CORBA::Object)>("_is_equivalent"), //
		jMethod<::jboolean()>("_non_existent"), //
		jMethod<::jvoid()>("_release"), //
		jMethod<::org::omg::CORBA::Request(::java::lang::String)>("_request"), //
		jMethod<::org::omg::CORBA::Object(::org::omg::CORBA::Policy *, ::org::omg::CORBA::SetOverrideType)>("_set_policy_override"), //
		jMethod<::jbyte *(::org::omg::PortableServer::Servant)>("activate_object"), //
		jMethod<::jvoid(::jbyte *, ::org::omg::PortableServer::Servant)>("activate_object_with_id"), //
		jMethod<::org::omg::PortableServer::POA(::java::lang::String, ::org::omg::PortableServer::POAManager, ::org::omg::CORBA::Policy *)>("create_POA"), //
		jMethod<::org::omg::PortableServer::IdAssignmentPolicy(::org::omg::PortableServer::IdAssignmentPolicyValue)>("create_id_assignment_policy"), //
		jMethod<::org::omg::PortableServer::IdUniquenessPolicy(::org::omg::PortableServer::IdUniquenessPolicyValue)>("create_id_uniqueness_policy"), //
		jMethod<::org::omg::PortableServer::ImplicitActivationPolicy(::org::omg::PortableServer::ImplicitActivationPolicyValue)>("create_implicit_activation_policy"), //
		jMethod<::org::omg::PortableServer::LifespanPolicy(::org::omg::PortableServer::LifespanPolicyValue)>("create_lifespan_policy"), //
		jMethod<::org::omg::CORBA::Object(::java::lang::String)>("create_reference"), //
		jMethod<::org::omg::CORBA::Object(::jbyte *, ::java::lang::String)>("create_reference_with_id"), //
		jMethod<::org::omg::PortableServer::RequestProcessingPolicy(::org::omg::PortableServer::RequestProcessingPolicyValue)>("create_request_processing_policy"), //
		jMethod<::org::omg::PortableServer::ServantRetentionPolicy(::org::omg::PortableServer::ServantRetentionPolicyValue)>("create_servant_retention_policy"), //
		jMethod<::org::omg::PortableServer::ThreadPolicy(::org::omg::PortableServer::ThreadPolicyValue)>("create_thread_policy"), //
		jMethod<::jvoid(::jbyte *)>("deactivate_object"), //
		jMethod<::jvoid(::jboolean, ::jboolean)>("destroy"), //
		jMethod<::org::omg::PortableServer::POA(::java::lang::String, ::jboolean)>("find_POA"), //
		jMethod<::org::omg::PortableServer::Servant()>("get_servant"), //
		jMethod<::org::omg::PortableServer::ServantManager()>("get_servant_manager"), //
		jMethod<::jbyte *()>("id"), //
		jMethod<::org::omg::CORBA::Object(::jbyte *)>("id_to_reference"), //
		jMethod<::org::omg::PortableServer::Servant(::jbyte *)>("id_to_servant"), //
		jMethod<::jbyte *(::org::omg::CORBA::Object)>("reference_to_id"), //
		jMethod<::org::omg::PortableServer::Servant(::org::omg::CORBA::Object)>("reference_to_servant"), //
		jMethod<::jbyte *(::org::omg::PortableServer::Servant)>("servant_to_id"), //
		jMethod<::org::omg::CORBA::Object(::org::omg::PortableServer::Servant)>("servant_to_reference"), //
		jMethod<::jvoid(::org::omg::PortableServer::Servant)>("set_servant"), //
		jMethod<::jvoid(::org::omg::PortableServer::ServantManager)>("set_servant_manager"), //
		jMethod<::org::omg::PortableServer::POAManager()>("the_POAManager"), //
		jMethod<::org::omg::PortableServer::AdapterActivator()>("the_activator"), //
		jMethod<::jvoid(::org::omg::PortableServer::AdapterActivator)>("the_activator"), //
		jMethod<::org::omg::PortableServer::POA *()>("the_children"), //
		jMethod<::java::lang::String()>("the_name"), //
		jMethod<::org::omg::PortableServer::POA()>("the_parent"), //
	};

	template<typename R = ::org::omg::CORBA::Request, typename... Args>
	auto _create_request(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_create_request")] != -1);
		return call<R>("_create_request", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto _duplicate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_duplicate")] != -1);
		return call<R>("_duplicate", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DomainManager *, typename... Args>
	auto _get_domain_managers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_get_domain_managers")] != -1);
		return call<R>("_get_domain_managers", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto _get_interface_def(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_get_interface_def")] != -1);
		return call<R>("_get_interface_def", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Policy, typename... Args>
	auto _get_policy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_get_policy")] != -1);
		return call<R>("_get_policy", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto _hash(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_hash")] != -1);
		return call<R>("_hash", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto _is_a(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_is_a")] != -1);
		return call<R>("_is_a", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto _is_equivalent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_is_equivalent")] != -1);
		return call<R>("_is_equivalent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto _non_existent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_non_existent")] != -1);
		return call<R>("_non_existent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto _release(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_release")] != -1);
		return call<R>("_release", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Request, typename... Args>
	auto _request(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_request")] != -1);
		return call<R>("_request", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto _set_policy_override(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_set_policy_override")] != -1);
		return call<R>("_set_policy_override", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto activate_object(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("activate_object")] != -1);
		return call<R>("activate_object", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto activate_object_with_id(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("activate_object_with_id")] != -1);
		return call<R>("activate_object_with_id", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::POA, typename... Args>
	auto create_POA(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_POA")] != -1);
		return call<R>("create_POA", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::IdAssignmentPolicy, typename... Args>
	auto create_id_assignment_policy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_id_assignment_policy")] != -1);
		return call<R>("create_id_assignment_policy", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::IdUniquenessPolicy, typename... Args>
	auto create_id_uniqueness_policy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_id_uniqueness_policy")] != -1);
		return call<R>("create_id_uniqueness_policy", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::ImplicitActivationPolicy, typename... Args>
	auto create_implicit_activation_policy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_implicit_activation_policy")] != -1);
		return call<R>("create_implicit_activation_policy", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::LifespanPolicy, typename... Args>
	auto create_lifespan_policy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_lifespan_policy")] != -1);
		return call<R>("create_lifespan_policy", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto create_reference(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_reference")] != -1);
		return call<R>("create_reference", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto create_reference_with_id(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_reference_with_id")] != -1);
		return call<R>("create_reference_with_id", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::RequestProcessingPolicy, typename... Args>
	auto create_request_processing_policy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_request_processing_policy")] != -1);
		return call<R>("create_request_processing_policy", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::ServantRetentionPolicy, typename... Args>
	auto create_servant_retention_policy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_servant_retention_policy")] != -1);
		return call<R>("create_servant_retention_policy", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::ThreadPolicy, typename... Args>
	auto create_thread_policy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_thread_policy")] != -1);
		return call<R>("create_thread_policy", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deactivate_object(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deactivate_object")] != -1);
		return call<R>("deactivate_object", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto destroy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("destroy")] != -1);
		return call<R>("destroy", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::POA, typename... Args>
	auto find_POA(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("find_POA")] != -1);
		return call<R>("find_POA", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::Servant, typename... Args>
	auto get_servant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_servant")] != -1);
		return call<R>("get_servant", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::ServantManager, typename... Args>
	auto get_servant_manager(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_servant_manager")] != -1);
		return call<R>("get_servant_manager", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto id(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("id")] != -1);
		return call<R>("id", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto id_to_reference(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("id_to_reference")] != -1);
		return call<R>("id_to_reference", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::Servant, typename... Args>
	auto id_to_servant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("id_to_servant")] != -1);
		return call<R>("id_to_servant", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto reference_to_id(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reference_to_id")] != -1);
		return call<R>("reference_to_id", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::Servant, typename... Args>
	auto reference_to_servant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reference_to_servant")] != -1);
		return call<R>("reference_to_servant", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto servant_to_id(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("servant_to_id")] != -1);
		return call<R>("servant_to_id", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto servant_to_reference(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("servant_to_reference")] != -1);
		return call<R>("servant_to_reference", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_servant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_servant")] != -1);
		return call<R>("set_servant", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_servant_manager(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_servant_manager")] != -1);
		return call<R>("set_servant_manager", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::POAManager, typename... Args>
	auto the_POAManager(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("the_POAManager")] != -1);
		return call<R>("the_POAManager", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::AdapterActivator, typename... Args>
	auto the_activator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("the_activator")] != -1);
		return call<R>("the_activator", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::POA *, typename... Args>
	auto the_children(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("the_children")] != -1);
		return call<R>("the_children", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto the_name(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("the_name")] != -1);
		return call<R>("the_name", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::POA, typename... Args>
	auto the_parent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("the_parent")] != -1);
		return call<R>("the_parent", std::forward<Args>(args)...);
	}

};

#endif
