#ifndef org_omg_PortableServer_ImplicitActivationPolicyValue_HPP
#define org_omg_PortableServer_ImplicitActivationPolicyValue_HPP

#include "../../../jfwd_decl.hpp"

class ::org::omg::PortableServer::ImplicitActivationPolicyValue : public jObject<::org::omg::PortableServer::ImplicitActivationPolicyValue, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_omg_PortableServer / "ImplicitActivationPolicyValue";

	constexpr static Enume field_signatures{
		jField<::org::omg::PortableServer::ImplicitActivationPolicyValue>("IMPLICIT_ACTIVATION"), //
		jField<::org::omg::PortableServer::ImplicitActivationPolicyValue>("NO_IMPLICIT_ACTIVATION"), //
		jField<::jint>("_IMPLICIT_ACTIVATION"), //
		jField<::jint>("_NO_IMPLICIT_ACTIVATION"), //
	};

	template<typename F = ::org::omg::PortableServer::ImplicitActivationPolicyValue>
	static auto IMPLICIT_ACTIVATION() {
		static_assert(field_signatures[jField<F>("IMPLICIT_ACTIVATION")] != -1);
		return sat<F>("IMPLICIT_ACTIVATION");
	}

	template<typename F = ::org::omg::PortableServer::ImplicitActivationPolicyValue>
	static auto NO_IMPLICIT_ACTIVATION() {
		static_assert(field_signatures[jField<F>("NO_IMPLICIT_ACTIVATION")] != -1);
		return sat<F>("NO_IMPLICIT_ACTIVATION");
	}

	template<typename F = ::jint>
	static auto _IMPLICIT_ACTIVATION() {
		static_assert(field_signatures[jField<F>("_IMPLICIT_ACTIVATION")] != -1);
		return sat<F>("_IMPLICIT_ACTIVATION");
	}

	template<typename F = ::jint>
	static auto _NO_IMPLICIT_ACTIVATION() {
		static_assert(field_signatures[jField<F>("_NO_IMPLICIT_ACTIVATION")] != -1);
		return sat<F>("_NO_IMPLICIT_ACTIVATION");
	}

	constexpr static Enume method_signatures{
		jMethod<::org::omg::PortableServer::ImplicitActivationPolicyValue(::jint)>("from_int"), //
		jMethod<::jint()>("value"), //
	};

	template<typename R = ::org::omg::PortableServer::ImplicitActivationPolicyValue, typename... Args>
	static auto from_int(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("from_int")] != -1);
		return scall<R>("from_int", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto value(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("value")] != -1);
		return call<R>("value", std::forward<Args>(args)...);
	}

};

#endif
