#ifndef org_omg_PortableServer_POAManager_HPP
#define org_omg_PortableServer_POAManager_HPP

#include "../../../jfwd_decl.hpp"

class ::org::omg::PortableServer::POAManager : public jObject<::org::omg::PortableServer::POAManager, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_omg_PortableServer / "POAManager";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::org::omg::CORBA::Request(::org::omg::CORBA::Context, ::java::lang::String, ::org::omg::CORBA::NVList, ::org::omg::CORBA::NamedValue)>("_create_request"), //
		jMethod<::org::omg::CORBA::Request(::org::omg::CORBA::Context, ::java::lang::String, ::org::omg::CORBA::NVList, ::org::omg::CORBA::NamedValue, ::org::omg::CORBA::ExceptionList, ::org::omg::CORBA::ContextList)>("_create_request"), //
		jMethod<::org::omg::CORBA::Object()>("_duplicate"), //
		jMethod<::org::omg::CORBA::DomainManager *()>("_get_domain_managers"), //
		jMethod<::org::omg::CORBA::Object()>("_get_interface_def"), //
		jMethod<::org::omg::CORBA::Policy(::jint)>("_get_policy"), //
		jMethod<::jint(::jint)>("_hash"), //
		jMethod<::jboolean(::java::lang::String)>("_is_a"), //
		jMethod<::jboolean(::org::omg::CORBA::Object)>("_is_equivalent"), //
		jMethod<::jboolean()>("_non_existent"), //
		jMethod<::jvoid()>("_release"), //
		jMethod<::org::omg::CORBA::Request(::java::lang::String)>("_request"), //
		jMethod<::org::omg::CORBA::Object(::org::omg::CORBA::Policy *, ::org::omg::CORBA::SetOverrideType)>("_set_policy_override"), //
		jMethod<::jvoid()>("activate"), //
		jMethod<::jvoid(::jboolean, ::jboolean)>("deactivate"), //
		jMethod<::jvoid(::jboolean)>("discard_requests"), //
		jMethod<::org::omg::PortableServer::POAManagerPackage::State()>("get_state"), //
		jMethod<::jvoid(::jboolean)>("hold_requests"), //
	};

	template<typename R = ::org::omg::CORBA::Request, typename... Args>
	auto _create_request(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_create_request")] != -1);
		return call<R>("_create_request", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto _duplicate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_duplicate")] != -1);
		return call<R>("_duplicate", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DomainManager *, typename... Args>
	auto _get_domain_managers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_get_domain_managers")] != -1);
		return call<R>("_get_domain_managers", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto _get_interface_def(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_get_interface_def")] != -1);
		return call<R>("_get_interface_def", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Policy, typename... Args>
	auto _get_policy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_get_policy")] != -1);
		return call<R>("_get_policy", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto _hash(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_hash")] != -1);
		return call<R>("_hash", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto _is_a(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_is_a")] != -1);
		return call<R>("_is_a", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto _is_equivalent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_is_equivalent")] != -1);
		return call<R>("_is_equivalent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto _non_existent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_non_existent")] != -1);
		return call<R>("_non_existent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto _release(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_release")] != -1);
		return call<R>("_release", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Request, typename... Args>
	auto _request(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_request")] != -1);
		return call<R>("_request", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto _set_policy_override(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_set_policy_override")] != -1);
		return call<R>("_set_policy_override", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto activate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("activate")] != -1);
		return call<R>("activate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deactivate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deactivate")] != -1);
		return call<R>("deactivate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto discard_requests(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("discard_requests")] != -1);
		return call<R>("discard_requests", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::POAManagerPackage::State, typename... Args>
	auto get_state(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_state")] != -1);
		return call<R>("get_state", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto hold_requests(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hold_requests")] != -1);
		return call<R>("hold_requests", std::forward<Args>(args)...);
	}

};

#endif
