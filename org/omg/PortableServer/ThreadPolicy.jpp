#ifndef org_omg_PortableServer_ThreadPolicy_HPP
#define org_omg_PortableServer_ThreadPolicy_HPP

#include "../../../jfwd_decl.hpp"

class ::org::omg::PortableServer::ThreadPolicy : public jObject<::org::omg::PortableServer::ThreadPolicy, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_omg_PortableServer / "ThreadPolicy";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::org::omg::PortableServer::ThreadPolicyValue()>("value"), //
	};

	template<typename R = ::org::omg::PortableServer::ThreadPolicyValue, typename... Args>
	auto value(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("value")] != -1);
		return call<R>("value", std::forward<Args>(args)...);
	}

};

#endif
