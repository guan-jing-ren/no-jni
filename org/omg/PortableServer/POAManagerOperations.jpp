#ifndef org_omg_PortableServer_POAManagerOperations_HPP
#define org_omg_PortableServer_POAManagerOperations_HPP

#include "../../../jfwd_decl.hpp"

class ::org::omg::PortableServer::POAManagerOperations : public jObject<::org::omg::PortableServer::POAManagerOperations, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_omg_PortableServer / "POAManagerOperations";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("activate"), //
		jMethod<::jvoid(::jboolean, ::jboolean)>("deactivate"), //
		jMethod<::jvoid(::jboolean)>("discard_requests"), //
		jMethod<::org::omg::PortableServer::POAManagerPackage::State()>("get_state"), //
		jMethod<::jvoid(::jboolean)>("hold_requests"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto activate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("activate")] != -1);
		return call<R>("activate", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deactivate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("deactivate")] != -1);
		return call<R>("deactivate", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto discard_requests(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("discard_requests")] != -1);
		return call<R>("discard_requests", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::POAManagerPackage::State, typename... Args>
	auto get_state(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("get_state")] != -1);
		return call<R>("get_state", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto hold_requests(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hold_requests")] != -1);
		return call<R>("hold_requests", forward<Args>(args)...);
	}

};

#endif
