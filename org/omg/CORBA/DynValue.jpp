#ifndef org_omg_CORBA_DynValue_HPP
#define org_omg_CORBA_DynValue_HPP

#include "../../../jfwd_decl.hpp"

class ::org::omg::CORBA::DynValue : public jObject<::org::omg::CORBA::DynValue, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_omg_CORBA / "DynValue";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::org::omg::CORBA::Request(::org::omg::CORBA::Context, ::java::lang::String, ::org::omg::CORBA::NVList, ::org::omg::CORBA::NamedValue)>("_create_request"), //
		jMethod<::org::omg::CORBA::Request(::org::omg::CORBA::Context, ::java::lang::String, ::org::omg::CORBA::NVList, ::org::omg::CORBA::NamedValue, ::org::omg::CORBA::ExceptionList, ::org::omg::CORBA::ContextList)>("_create_request"), //
		jMethod<::org::omg::CORBA::Object()>("_duplicate"), //
		jMethod<::org::omg::CORBA::DomainManager *()>("_get_domain_managers"), //
		jMethod<::org::omg::CORBA::Object()>("_get_interface_def"), //
		jMethod<::org::omg::CORBA::Policy(::jint)>("_get_policy"), //
		jMethod<::jint(::jint)>("_hash"), //
		jMethod<::jboolean(::java::lang::String)>("_is_a"), //
		jMethod<::jboolean(::org::omg::CORBA::Object)>("_is_equivalent"), //
		jMethod<::jboolean()>("_non_existent"), //
		jMethod<::jvoid()>("_release"), //
		jMethod<::org::omg::CORBA::Request(::java::lang::String)>("_request"), //
		jMethod<::org::omg::CORBA::Object(::org::omg::CORBA::Policy *, ::org::omg::CORBA::SetOverrideType)>("_set_policy_override"), //
		jMethod<::jvoid(::org::omg::CORBA::DynAny)>("assign"), //
		jMethod<::org::omg::CORBA::DynAny()>("copy"), //
		jMethod<::org::omg::CORBA::DynAny()>("current_component"), //
		jMethod<::org::omg::CORBA::TCKind()>("current_member_kind"), //
		jMethod<::java::lang::String()>("current_member_name"), //
		jMethod<::jvoid()>("destroy"), //
		jMethod<::jvoid(::org::omg::CORBA::Any)>("from_any"), //
		jMethod<::org::omg::CORBA::Any()>("get_any"), //
		jMethod<::jboolean()>("get_boolean"), //
		jMethod<::jchar()>("get_char"), //
		jMethod<::jdouble()>("get_double"), //
		jMethod<::jfloat()>("get_float"), //
		jMethod<::jint()>("get_long"), //
		jMethod<::jlong()>("get_longlong"), //
		jMethod<::org::omg::CORBA::NameValuePair *()>("get_members"), //
		jMethod<::jbyte()>("get_octet"), //
		jMethod<::org::omg::CORBA::Object()>("get_reference"), //
		jMethod<::jshort()>("get_short"), //
		jMethod<::java::lang::String()>("get_string"), //
		jMethod<::org::omg::CORBA::TypeCode()>("get_typecode"), //
		jMethod<::jint()>("get_ulong"), //
		jMethod<::jlong()>("get_ulonglong"), //
		jMethod<::jshort()>("get_ushort"), //
		jMethod<::java::io::Serializable()>("get_val"), //
		jMethod<::jchar()>("get_wchar"), //
		jMethod<::java::lang::String()>("get_wstring"), //
		jMethod<::jvoid(::org::omg::CORBA::Any)>("insert_any"), //
		jMethod<::jvoid(::jboolean)>("insert_boolean"), //
		jMethod<::jvoid(::jchar)>("insert_char"), //
		jMethod<::jvoid(::jdouble)>("insert_double"), //
		jMethod<::jvoid(::jfloat)>("insert_float"), //
		jMethod<::jvoid(::jint)>("insert_long"), //
		jMethod<::jvoid(::jlong)>("insert_longlong"), //
		jMethod<::jvoid(::jbyte)>("insert_octet"), //
		jMethod<::jvoid(::org::omg::CORBA::Object)>("insert_reference"), //
		jMethod<::jvoid(::jshort)>("insert_short"), //
		jMethod<::jvoid(::java::lang::String)>("insert_string"), //
		jMethod<::jvoid(::org::omg::CORBA::TypeCode)>("insert_typecode"), //
		jMethod<::jvoid(::jint)>("insert_ulong"), //
		jMethod<::jvoid(::jlong)>("insert_ulonglong"), //
		jMethod<::jvoid(::jshort)>("insert_ushort"), //
		jMethod<::jvoid(::java::io::Serializable)>("insert_val"), //
		jMethod<::jvoid(::jchar)>("insert_wchar"), //
		jMethod<::jvoid(::java::lang::String)>("insert_wstring"), //
		jMethod<::jboolean()>("next"), //
		jMethod<::jvoid()>("rewind"), //
		jMethod<::jboolean(::jint)>("seek"), //
		jMethod<::jvoid(::org::omg::CORBA::NameValuePair *)>("set_members"), //
		jMethod<::org::omg::CORBA::Any()>("to_any"), //
		jMethod<::org::omg::CORBA::TypeCode()>("type"), //
	};

	template<typename R = ::org::omg::CORBA::Request, typename... Args>
	auto _create_request(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_create_request")] != -1);
		return call<R>("_create_request", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto _duplicate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_duplicate")] != -1);
		return call<R>("_duplicate", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DomainManager *, typename... Args>
	auto _get_domain_managers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_get_domain_managers")] != -1);
		return call<R>("_get_domain_managers", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto _get_interface_def(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_get_interface_def")] != -1);
		return call<R>("_get_interface_def", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Policy, typename... Args>
	auto _get_policy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_get_policy")] != -1);
		return call<R>("_get_policy", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto _hash(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_hash")] != -1);
		return call<R>("_hash", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto _is_a(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_is_a")] != -1);
		return call<R>("_is_a", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto _is_equivalent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_is_equivalent")] != -1);
		return call<R>("_is_equivalent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto _non_existent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_non_existent")] != -1);
		return call<R>("_non_existent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto _release(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_release")] != -1);
		return call<R>("_release", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Request, typename... Args>
	auto _request(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_request")] != -1);
		return call<R>("_request", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto _set_policy_override(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_set_policy_override")] != -1);
		return call<R>("_set_policy_override", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto assign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("assign")] != -1);
		return call<R>("assign", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DynAny, typename... Args>
	auto copy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("copy")] != -1);
		return call<R>("copy", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DynAny, typename... Args>
	auto current_component(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("current_component")] != -1);
		return call<R>("current_component", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TCKind, typename... Args>
	auto current_member_kind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("current_member_kind")] != -1);
		return call<R>("current_member_kind", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto current_member_name(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("current_member_name")] != -1);
		return call<R>("current_member_name", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto destroy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("destroy")] != -1);
		return call<R>("destroy", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto from_any(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("from_any")] != -1);
		return call<R>("from_any", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Any, typename... Args>
	auto get_any(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_any")] != -1);
		return call<R>("get_any", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto get_boolean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_boolean")] != -1);
		return call<R>("get_boolean", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto get_char(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_char")] != -1);
		return call<R>("get_char", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto get_double(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_double")] != -1);
		return call<R>("get_double", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto get_float(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_float")] != -1);
		return call<R>("get_float", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_long(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_long")] != -1);
		return call<R>("get_long", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_longlong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_longlong")] != -1);
		return call<R>("get_longlong", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::NameValuePair *, typename... Args>
	auto get_members(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_members")] != -1);
		return call<R>("get_members", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto get_octet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_octet")] != -1);
		return call<R>("get_octet", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto get_reference(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_reference")] != -1);
		return call<R>("get_reference", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto get_short(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_short")] != -1);
		return call<R>("get_short", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto get_string(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_string")] != -1);
		return call<R>("get_string", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TypeCode, typename... Args>
	auto get_typecode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_typecode")] != -1);
		return call<R>("get_typecode", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_ulong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_ulong")] != -1);
		return call<R>("get_ulong", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_ulonglong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_ulonglong")] != -1);
		return call<R>("get_ulonglong", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto get_ushort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_ushort")] != -1);
		return call<R>("get_ushort", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::Serializable, typename... Args>
	auto get_val(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_val")] != -1);
		return call<R>("get_val", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto get_wchar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_wchar")] != -1);
		return call<R>("get_wchar", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto get_wstring(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_wstring")] != -1);
		return call<R>("get_wstring", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insert_any(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insert_any")] != -1);
		return call<R>("insert_any", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insert_boolean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insert_boolean")] != -1);
		return call<R>("insert_boolean", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insert_char(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insert_char")] != -1);
		return call<R>("insert_char", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insert_double(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insert_double")] != -1);
		return call<R>("insert_double", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insert_float(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insert_float")] != -1);
		return call<R>("insert_float", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insert_long(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insert_long")] != -1);
		return call<R>("insert_long", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insert_longlong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insert_longlong")] != -1);
		return call<R>("insert_longlong", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insert_octet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insert_octet")] != -1);
		return call<R>("insert_octet", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insert_reference(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insert_reference")] != -1);
		return call<R>("insert_reference", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insert_short(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insert_short")] != -1);
		return call<R>("insert_short", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insert_string(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insert_string")] != -1);
		return call<R>("insert_string", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insert_typecode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insert_typecode")] != -1);
		return call<R>("insert_typecode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insert_ulong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insert_ulong")] != -1);
		return call<R>("insert_ulong", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insert_ulonglong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insert_ulonglong")] != -1);
		return call<R>("insert_ulonglong", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insert_ushort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insert_ushort")] != -1);
		return call<R>("insert_ushort", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insert_val(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insert_val")] != -1);
		return call<R>("insert_val", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insert_wchar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insert_wchar")] != -1);
		return call<R>("insert_wchar", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insert_wstring(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insert_wstring")] != -1);
		return call<R>("insert_wstring", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto next(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("next")] != -1);
		return call<R>("next", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto rewind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rewind")] != -1);
		return call<R>("rewind", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto seek(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("seek")] != -1);
		return call<R>("seek", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_members(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_members")] != -1);
		return call<R>("set_members", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Any, typename... Args>
	auto to_any(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("to_any")] != -1);
		return call<R>("to_any", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TypeCode, typename... Args>
	auto type(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("type")] != -1);
		return call<R>("type", std::forward<Args>(args)...);
	}

};

#endif
