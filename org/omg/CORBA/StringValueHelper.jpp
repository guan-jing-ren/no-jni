#ifndef org_omg_CORBA_StringValueHelper_HPP
#define org_omg_CORBA_StringValueHelper_HPP

#include "../../../jfwd_decl.hpp"

class ::org::omg::CORBA::StringValueHelper : public jObject<::org::omg::CORBA::StringValueHelper, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_omg_CORBA / "StringValueHelper";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::String(::org::omg::CORBA::Any)>("extract"), //
		jMethod<::java::lang::String()>("get_id"), //
		jMethod<::java::lang::String()>("id"), //
		jMethod<::jvoid(::org::omg::CORBA::Any, ::java::lang::String)>("insert"), //
		jMethod<::java::lang::String(::org::omg::CORBA::portable::InputStream)>("read"), //
		jMethod<::java::io::Serializable(::org::omg::CORBA::portable::InputStream)>("read_value"), //
		jMethod<::org::omg::CORBA::TypeCode()>("type"), //
		jMethod<::jvoid(::org::omg::CORBA::portable::OutputStream, ::java::lang::String)>("write"), //
		jMethod<::jvoid(::org::omg::CORBA::portable::OutputStream, ::java::io::Serializable)>("write_value"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	static auto extract(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("extract")] != -1);
		return scall<R>("extract", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto get_id(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("get_id")] != -1);
		return call<R>("get_id", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto id(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("id")] != -1);
		return scall<R>("id", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto insert(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("insert")] != -1);
		return scall<R>("insert", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto read(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read")] != -1);
		return scall<R>("read", forward<Args>(args)...);
	}

	template<typename R = ::java::io::Serializable, typename... Args>
	auto read_value(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read_value")] != -1);
		return call<R>("read_value", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TypeCode, typename... Args>
	static auto type(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("type")] != -1);
		return scall<R>("type", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto write(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write")] != -1);
		return scall<R>("write", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_value(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write_value")] != -1);
		return call<R>("write_value", forward<Args>(args)...);
	}

};

#endif
