#ifndef org_omg_CORBA_TypeCode_HPP
#define org_omg_CORBA_TypeCode_HPP

#include "../../../jfwd_decl.hpp"

class ::org::omg::CORBA::TypeCode : public jObject<::org::omg::CORBA::TypeCode, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_omg_CORBA / "TypeCode";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::org::omg::CORBA::TypeCode()>("concrete_base_type"), //
		jMethod<::org::omg::CORBA::TypeCode()>("content_type"), //
		jMethod<::jint()>("default_index"), //
		jMethod<::org::omg::CORBA::TypeCode()>("discriminator_type"), //
		jMethod<::jboolean(::org::omg::CORBA::TypeCode)>("equal"), //
		jMethod<::jboolean(::org::omg::CORBA::TypeCode)>("equivalent"), //
		jMethod<::jshort()>("fixed_digits"), //
		jMethod<::jshort()>("fixed_scale"), //
		jMethod<::org::omg::CORBA::TypeCode()>("get_compact_typecode"), //
		jMethod<::java::lang::String()>("id"), //
		jMethod<::org::omg::CORBA::TCKind()>("kind"), //
		jMethod<::jint()>("length"), //
		jMethod<::jint()>("member_count"), //
		jMethod<::org::omg::CORBA::Any(::jint)>("member_label"), //
		jMethod<::java::lang::String(::jint)>("member_name"), //
		jMethod<::org::omg::CORBA::TypeCode(::jint)>("member_type"), //
		jMethod<::jshort(::jint)>("member_visibility"), //
		jMethod<::java::lang::String()>("name"), //
		jMethod<::jshort()>("type_modifier"), //
	};

	template<typename R = ::org::omg::CORBA::TypeCode, typename... Args>
	auto concrete_base_type(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("concrete_base_type")] != -1);
		return call<R>("concrete_base_type", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TypeCode, typename... Args>
	auto content_type(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("content_type")] != -1);
		return call<R>("content_type", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto default_index(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("default_index")] != -1);
		return call<R>("default_index", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TypeCode, typename... Args>
	auto discriminator_type(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("discriminator_type")] != -1);
		return call<R>("discriminator_type", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equal")] != -1);
		return call<R>("equal", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equivalent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equivalent")] != -1);
		return call<R>("equivalent", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto fixed_digits(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fixed_digits")] != -1);
		return call<R>("fixed_digits", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto fixed_scale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fixed_scale")] != -1);
		return call<R>("fixed_scale", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TypeCode, typename... Args>
	auto get_compact_typecode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_compact_typecode")] != -1);
		return call<R>("get_compact_typecode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto id(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("id")] != -1);
		return call<R>("id", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TCKind, typename... Args>
	auto kind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("kind")] != -1);
		return call<R>("kind", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto length(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("length")] != -1);
		return call<R>("length", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto member_count(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("member_count")] != -1);
		return call<R>("member_count", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Any, typename... Args>
	auto member_label(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("member_label")] != -1);
		return call<R>("member_label", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto member_name(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("member_name")] != -1);
		return call<R>("member_name", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TypeCode, typename... Args>
	auto member_type(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("member_type")] != -1);
		return call<R>("member_type", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto member_visibility(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("member_visibility")] != -1);
		return call<R>("member_visibility", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto name(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("name")] != -1);
		return call<R>("name", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto type_modifier(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("type_modifier")] != -1);
		return call<R>("type_modifier", std::forward<Args>(args)...);
	}

};

#endif
