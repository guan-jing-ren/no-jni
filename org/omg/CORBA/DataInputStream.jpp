#ifndef org_omg_CORBA_DataInputStream_HPP
#define org_omg_CORBA_DataInputStream_HPP

#include "../../../jfwd_decl.hpp"

class ::org::omg::CORBA::DataInputStream : public jObject<::org::omg::CORBA::DataInputStream, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_omg_CORBA / "DataInputStream";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Object()>("read_Abstract"), //
		jMethod<::org::omg::CORBA::Object()>("read_Object"), //
		jMethod<::org::omg::CORBA::TypeCode()>("read_TypeCode"), //
		jMethod<::java::io::Serializable()>("read_Value"), //
		jMethod<::org::omg::CORBA::Any()>("read_any"), //
		jMethod<::jvoid(::org::omg::CORBA::AnySeqHolder, ::jint, ::jint)>("read_any_array"), //
		jMethod<::jboolean()>("read_boolean"), //
		jMethod<::jvoid(::org::omg::CORBA::BooleanSeqHolder, ::jint, ::jint)>("read_boolean_array"), //
		jMethod<::jchar()>("read_char"), //
		jMethod<::jvoid(::org::omg::CORBA::CharSeqHolder, ::jint, ::jint)>("read_char_array"), //
		jMethod<::jdouble()>("read_double"), //
		jMethod<::jvoid(::org::omg::CORBA::DoubleSeqHolder, ::jint, ::jint)>("read_double_array"), //
		jMethod<::jfloat()>("read_float"), //
		jMethod<::jvoid(::org::omg::CORBA::FloatSeqHolder, ::jint, ::jint)>("read_float_array"), //
		jMethod<::jint()>("read_long"), //
		jMethod<::jvoid(::org::omg::CORBA::LongSeqHolder, ::jint, ::jint)>("read_long_array"), //
		jMethod<::jlong()>("read_longlong"), //
		jMethod<::jvoid(::org::omg::CORBA::LongLongSeqHolder, ::jint, ::jint)>("read_longlong_array"), //
		jMethod<::jbyte()>("read_octet"), //
		jMethod<::jvoid(::org::omg::CORBA::OctetSeqHolder, ::jint, ::jint)>("read_octet_array"), //
		jMethod<::jshort()>("read_short"), //
		jMethod<::jvoid(::org::omg::CORBA::ShortSeqHolder, ::jint, ::jint)>("read_short_array"), //
		jMethod<::java::lang::String()>("read_string"), //
		jMethod<::jint()>("read_ulong"), //
		jMethod<::jvoid(::org::omg::CORBA::ULongSeqHolder, ::jint, ::jint)>("read_ulong_array"), //
		jMethod<::jlong()>("read_ulonglong"), //
		jMethod<::jvoid(::org::omg::CORBA::ULongLongSeqHolder, ::jint, ::jint)>("read_ulonglong_array"), //
		jMethod<::jshort()>("read_ushort"), //
		jMethod<::jvoid(::org::omg::CORBA::UShortSeqHolder, ::jint, ::jint)>("read_ushort_array"), //
		jMethod<::jchar()>("read_wchar"), //
		jMethod<::jvoid(::org::omg::CORBA::WCharSeqHolder, ::jint, ::jint)>("read_wchar_array"), //
		jMethod<::java::lang::String()>("read_wstring"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto read_Abstract(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read_Abstract")] != -1);
		return call<R>("read_Abstract", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto read_Object(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read_Object")] != -1);
		return call<R>("read_Object", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TypeCode, typename... Args>
	auto read_TypeCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read_TypeCode")] != -1);
		return call<R>("read_TypeCode", forward<Args>(args)...);
	}

	template<typename R = ::java::io::Serializable, typename... Args>
	auto read_Value(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read_Value")] != -1);
		return call<R>("read_Value", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Any, typename... Args>
	auto read_any(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read_any")] != -1);
		return call<R>("read_any", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto read_any_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read_any_array")] != -1);
		return call<R>("read_any_array", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto read_boolean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read_boolean")] != -1);
		return call<R>("read_boolean", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto read_boolean_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read_boolean_array")] != -1);
		return call<R>("read_boolean_array", forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto read_char(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read_char")] != -1);
		return call<R>("read_char", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto read_char_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read_char_array")] != -1);
		return call<R>("read_char_array", forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto read_double(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read_double")] != -1);
		return call<R>("read_double", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto read_double_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read_double_array")] != -1);
		return call<R>("read_double_array", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto read_float(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read_float")] != -1);
		return call<R>("read_float", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto read_float_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read_float_array")] != -1);
		return call<R>("read_float_array", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto read_long(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read_long")] != -1);
		return call<R>("read_long", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto read_long_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read_long_array")] != -1);
		return call<R>("read_long_array", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto read_longlong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read_longlong")] != -1);
		return call<R>("read_longlong", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto read_longlong_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read_longlong_array")] != -1);
		return call<R>("read_longlong_array", forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto read_octet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read_octet")] != -1);
		return call<R>("read_octet", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto read_octet_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read_octet_array")] != -1);
		return call<R>("read_octet_array", forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto read_short(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read_short")] != -1);
		return call<R>("read_short", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto read_short_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read_short_array")] != -1);
		return call<R>("read_short_array", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto read_string(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read_string")] != -1);
		return call<R>("read_string", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto read_ulong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read_ulong")] != -1);
		return call<R>("read_ulong", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto read_ulong_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read_ulong_array")] != -1);
		return call<R>("read_ulong_array", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto read_ulonglong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read_ulonglong")] != -1);
		return call<R>("read_ulonglong", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto read_ulonglong_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read_ulonglong_array")] != -1);
		return call<R>("read_ulonglong_array", forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto read_ushort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read_ushort")] != -1);
		return call<R>("read_ushort", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto read_ushort_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read_ushort_array")] != -1);
		return call<R>("read_ushort_array", forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto read_wchar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read_wchar")] != -1);
		return call<R>("read_wchar", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto read_wchar_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read_wchar_array")] != -1);
		return call<R>("read_wchar_array", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto read_wstring(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read_wstring")] != -1);
		return call<R>("read_wstring", forward<Args>(args)...);
	}

};

#endif
