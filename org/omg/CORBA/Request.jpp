#ifndef org_omg_CORBA_Request_HPP
#define org_omg_CORBA_Request_HPP

#include "../../../jfwd_decl.hpp"

class ::org::omg::CORBA::Request : public jObject<::org::omg::CORBA::Request, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_omg_CORBA / "Request";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::org::omg::CORBA::Any()>("add_in_arg"), //
		jMethod<::org::omg::CORBA::Any()>("add_inout_arg"), //
		jMethod<::org::omg::CORBA::Any(::java::lang::String)>("add_named_in_arg"), //
		jMethod<::org::omg::CORBA::Any(::java::lang::String)>("add_named_inout_arg"), //
		jMethod<::org::omg::CORBA::Any(::java::lang::String)>("add_named_out_arg"), //
		jMethod<::org::omg::CORBA::Any()>("add_out_arg"), //
		jMethod<::org::omg::CORBA::NVList()>("arguments"), //
		jMethod<::org::omg::CORBA::ContextList()>("contexts"), //
		jMethod<::org::omg::CORBA::Context()>("ctx"), //
		jMethod<::jvoid(::org::omg::CORBA::Context)>("ctx"), //
		jMethod<::org::omg::CORBA::Environment()>("env"), //
		jMethod<::org::omg::CORBA::ExceptionList()>("exceptions"), //
		jMethod<::jvoid()>("get_response"), //
		jMethod<::jvoid()>("invoke"), //
		jMethod<::java::lang::String()>("operation"), //
		jMethod<::jboolean()>("poll_response"), //
		jMethod<::org::omg::CORBA::NamedValue()>("result"), //
		jMethod<::org::omg::CORBA::Any()>("return_value"), //
		jMethod<::jvoid()>("send_deferred"), //
		jMethod<::jvoid()>("send_oneway"), //
		jMethod<::jvoid(::org::omg::CORBA::TypeCode)>("set_return_type"), //
		jMethod<::org::omg::CORBA::Object()>("target"), //
	};

	template<typename R = ::org::omg::CORBA::Any, typename... Args>
	auto add_in_arg(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add_in_arg")] != -1);
		return call<R>("add_in_arg", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Any, typename... Args>
	auto add_inout_arg(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add_inout_arg")] != -1);
		return call<R>("add_inout_arg", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Any, typename... Args>
	auto add_named_in_arg(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add_named_in_arg")] != -1);
		return call<R>("add_named_in_arg", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Any, typename... Args>
	auto add_named_inout_arg(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add_named_inout_arg")] != -1);
		return call<R>("add_named_inout_arg", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Any, typename... Args>
	auto add_named_out_arg(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add_named_out_arg")] != -1);
		return call<R>("add_named_out_arg", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Any, typename... Args>
	auto add_out_arg(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add_out_arg")] != -1);
		return call<R>("add_out_arg", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::NVList, typename... Args>
	auto arguments(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("arguments")] != -1);
		return call<R>("arguments", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::ContextList, typename... Args>
	auto contexts(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("contexts")] != -1);
		return call<R>("contexts", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Context, typename... Args>
	auto ctx(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ctx")] != -1);
		return call<R>("ctx", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Environment, typename... Args>
	auto env(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("env")] != -1);
		return call<R>("env", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::ExceptionList, typename... Args>
	auto exceptions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("exceptions")] != -1);
		return call<R>("exceptions", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto get_response(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_response")] != -1);
		return call<R>("get_response", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto invoke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invoke")] != -1);
		return call<R>("invoke", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto operation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("operation")] != -1);
		return call<R>("operation", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto poll_response(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("poll_response")] != -1);
		return call<R>("poll_response", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::NamedValue, typename... Args>
	auto result(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("result")] != -1);
		return call<R>("result", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Any, typename... Args>
	auto return_value(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("return_value")] != -1);
		return call<R>("return_value", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto send_deferred(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("send_deferred")] != -1);
		return call<R>("send_deferred", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto send_oneway(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("send_oneway")] != -1);
		return call<R>("send_oneway", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_return_type(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_return_type")] != -1);
		return call<R>("set_return_type", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto target(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("target")] != -1);
		return call<R>("target", std::forward<Args>(args)...);
	}

};

#endif
