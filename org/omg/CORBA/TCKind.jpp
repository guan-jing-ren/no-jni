#ifndef org_omg_CORBA_TCKind_HPP
#define org_omg_CORBA_TCKind_HPP

#include "../../../jfwd_decl.hpp"

class ::org::omg::CORBA::TCKind : public jObject<::org::omg::CORBA::TCKind, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_omg_CORBA / "TCKind";

	constexpr static Enume field_signatures{
		jField<::jint>("_tk_Principal"), //
		jField<::jint>("_tk_TypeCode"), //
		jField<::jint>("_tk_abstract_interface"), //
		jField<::jint>("_tk_alias"), //
		jField<::jint>("_tk_any"), //
		jField<::jint>("_tk_array"), //
		jField<::jint>("_tk_boolean"), //
		jField<::jint>("_tk_char"), //
		jField<::jint>("_tk_double"), //
		jField<::jint>("_tk_enum"), //
		jField<::jint>("_tk_except"), //
		jField<::jint>("_tk_fixed"), //
		jField<::jint>("_tk_float"), //
		jField<::jint>("_tk_long"), //
		jField<::jint>("_tk_longdouble"), //
		jField<::jint>("_tk_longlong"), //
		jField<::jint>("_tk_native"), //
		jField<::jint>("_tk_null"), //
		jField<::jint>("_tk_objref"), //
		jField<::jint>("_tk_octet"), //
		jField<::jint>("_tk_sequence"), //
		jField<::jint>("_tk_short"), //
		jField<::jint>("_tk_string"), //
		jField<::jint>("_tk_struct"), //
		jField<::jint>("_tk_ulong"), //
		jField<::jint>("_tk_ulonglong"), //
		jField<::jint>("_tk_union"), //
		jField<::jint>("_tk_ushort"), //
		jField<::jint>("_tk_value"), //
		jField<::jint>("_tk_value_box"), //
		jField<::jint>("_tk_void"), //
		jField<::jint>("_tk_wchar"), //
		jField<::jint>("_tk_wstring"), //
		jField<::org::omg::CORBA::TCKind>("tk_Principal"), //
		jField<::org::omg::CORBA::TCKind>("tk_TypeCode"), //
		jField<::org::omg::CORBA::TCKind>("tk_abstract_interface"), //
		jField<::org::omg::CORBA::TCKind>("tk_alias"), //
		jField<::org::omg::CORBA::TCKind>("tk_any"), //
		jField<::org::omg::CORBA::TCKind>("tk_array"), //
		jField<::org::omg::CORBA::TCKind>("tk_boolean"), //
		jField<::org::omg::CORBA::TCKind>("tk_char"), //
		jField<::org::omg::CORBA::TCKind>("tk_double"), //
		jField<::org::omg::CORBA::TCKind>("tk_enum"), //
		jField<::org::omg::CORBA::TCKind>("tk_except"), //
		jField<::org::omg::CORBA::TCKind>("tk_fixed"), //
		jField<::org::omg::CORBA::TCKind>("tk_float"), //
		jField<::org::omg::CORBA::TCKind>("tk_long"), //
		jField<::org::omg::CORBA::TCKind>("tk_longdouble"), //
		jField<::org::omg::CORBA::TCKind>("tk_longlong"), //
		jField<::org::omg::CORBA::TCKind>("tk_native"), //
		jField<::org::omg::CORBA::TCKind>("tk_null"), //
		jField<::org::omg::CORBA::TCKind>("tk_objref"), //
		jField<::org::omg::CORBA::TCKind>("tk_octet"), //
		jField<::org::omg::CORBA::TCKind>("tk_sequence"), //
		jField<::org::omg::CORBA::TCKind>("tk_short"), //
		jField<::org::omg::CORBA::TCKind>("tk_string"), //
		jField<::org::omg::CORBA::TCKind>("tk_struct"), //
		jField<::org::omg::CORBA::TCKind>("tk_ulong"), //
		jField<::org::omg::CORBA::TCKind>("tk_ulonglong"), //
		jField<::org::omg::CORBA::TCKind>("tk_union"), //
		jField<::org::omg::CORBA::TCKind>("tk_ushort"), //
		jField<::org::omg::CORBA::TCKind>("tk_value"), //
		jField<::org::omg::CORBA::TCKind>("tk_value_box"), //
		jField<::org::omg::CORBA::TCKind>("tk_void"), //
		jField<::org::omg::CORBA::TCKind>("tk_wchar"), //
		jField<::org::omg::CORBA::TCKind>("tk_wstring"), //
	};

	template<typename F = ::jint>
	static auto _tk_Principal() {
		static_assert(field_signatures[jField<F>("_tk_Principal")] != -1);
		return sat<F>("_tk_Principal");
	}

	template<typename F = ::jint>
	static auto _tk_TypeCode() {
		static_assert(field_signatures[jField<F>("_tk_TypeCode")] != -1);
		return sat<F>("_tk_TypeCode");
	}

	template<typename F = ::jint>
	static auto _tk_abstract_interface() {
		static_assert(field_signatures[jField<F>("_tk_abstract_interface")] != -1);
		return sat<F>("_tk_abstract_interface");
	}

	template<typename F = ::jint>
	static auto _tk_alias() {
		static_assert(field_signatures[jField<F>("_tk_alias")] != -1);
		return sat<F>("_tk_alias");
	}

	template<typename F = ::jint>
	static auto _tk_any() {
		static_assert(field_signatures[jField<F>("_tk_any")] != -1);
		return sat<F>("_tk_any");
	}

	template<typename F = ::jint>
	static auto _tk_array() {
		static_assert(field_signatures[jField<F>("_tk_array")] != -1);
		return sat<F>("_tk_array");
	}

	template<typename F = ::jint>
	static auto _tk_boolean() {
		static_assert(field_signatures[jField<F>("_tk_boolean")] != -1);
		return sat<F>("_tk_boolean");
	}

	template<typename F = ::jint>
	static auto _tk_char() {
		static_assert(field_signatures[jField<F>("_tk_char")] != -1);
		return sat<F>("_tk_char");
	}

	template<typename F = ::jint>
	static auto _tk_double() {
		static_assert(field_signatures[jField<F>("_tk_double")] != -1);
		return sat<F>("_tk_double");
	}

	template<typename F = ::jint>
	static auto _tk_enum() {
		static_assert(field_signatures[jField<F>("_tk_enum")] != -1);
		return sat<F>("_tk_enum");
	}

	template<typename F = ::jint>
	static auto _tk_except() {
		static_assert(field_signatures[jField<F>("_tk_except")] != -1);
		return sat<F>("_tk_except");
	}

	template<typename F = ::jint>
	static auto _tk_fixed() {
		static_assert(field_signatures[jField<F>("_tk_fixed")] != -1);
		return sat<F>("_tk_fixed");
	}

	template<typename F = ::jint>
	static auto _tk_float() {
		static_assert(field_signatures[jField<F>("_tk_float")] != -1);
		return sat<F>("_tk_float");
	}

	template<typename F = ::jint>
	static auto _tk_long() {
		static_assert(field_signatures[jField<F>("_tk_long")] != -1);
		return sat<F>("_tk_long");
	}

	template<typename F = ::jint>
	static auto _tk_longdouble() {
		static_assert(field_signatures[jField<F>("_tk_longdouble")] != -1);
		return sat<F>("_tk_longdouble");
	}

	template<typename F = ::jint>
	static auto _tk_longlong() {
		static_assert(field_signatures[jField<F>("_tk_longlong")] != -1);
		return sat<F>("_tk_longlong");
	}

	template<typename F = ::jint>
	static auto _tk_native() {
		static_assert(field_signatures[jField<F>("_tk_native")] != -1);
		return sat<F>("_tk_native");
	}

	template<typename F = ::jint>
	static auto _tk_null() {
		static_assert(field_signatures[jField<F>("_tk_null")] != -1);
		return sat<F>("_tk_null");
	}

	template<typename F = ::jint>
	static auto _tk_objref() {
		static_assert(field_signatures[jField<F>("_tk_objref")] != -1);
		return sat<F>("_tk_objref");
	}

	template<typename F = ::jint>
	static auto _tk_octet() {
		static_assert(field_signatures[jField<F>("_tk_octet")] != -1);
		return sat<F>("_tk_octet");
	}

	template<typename F = ::jint>
	static auto _tk_sequence() {
		static_assert(field_signatures[jField<F>("_tk_sequence")] != -1);
		return sat<F>("_tk_sequence");
	}

	template<typename F = ::jint>
	static auto _tk_short() {
		static_assert(field_signatures[jField<F>("_tk_short")] != -1);
		return sat<F>("_tk_short");
	}

	template<typename F = ::jint>
	static auto _tk_string() {
		static_assert(field_signatures[jField<F>("_tk_string")] != -1);
		return sat<F>("_tk_string");
	}

	template<typename F = ::jint>
	static auto _tk_struct() {
		static_assert(field_signatures[jField<F>("_tk_struct")] != -1);
		return sat<F>("_tk_struct");
	}

	template<typename F = ::jint>
	static auto _tk_ulong() {
		static_assert(field_signatures[jField<F>("_tk_ulong")] != -1);
		return sat<F>("_tk_ulong");
	}

	template<typename F = ::jint>
	static auto _tk_ulonglong() {
		static_assert(field_signatures[jField<F>("_tk_ulonglong")] != -1);
		return sat<F>("_tk_ulonglong");
	}

	template<typename F = ::jint>
	static auto _tk_union() {
		static_assert(field_signatures[jField<F>("_tk_union")] != -1);
		return sat<F>("_tk_union");
	}

	template<typename F = ::jint>
	static auto _tk_ushort() {
		static_assert(field_signatures[jField<F>("_tk_ushort")] != -1);
		return sat<F>("_tk_ushort");
	}

	template<typename F = ::jint>
	static auto _tk_value() {
		static_assert(field_signatures[jField<F>("_tk_value")] != -1);
		return sat<F>("_tk_value");
	}

	template<typename F = ::jint>
	static auto _tk_value_box() {
		static_assert(field_signatures[jField<F>("_tk_value_box")] != -1);
		return sat<F>("_tk_value_box");
	}

	template<typename F = ::jint>
	static auto _tk_void() {
		static_assert(field_signatures[jField<F>("_tk_void")] != -1);
		return sat<F>("_tk_void");
	}

	template<typename F = ::jint>
	static auto _tk_wchar() {
		static_assert(field_signatures[jField<F>("_tk_wchar")] != -1);
		return sat<F>("_tk_wchar");
	}

	template<typename F = ::jint>
	static auto _tk_wstring() {
		static_assert(field_signatures[jField<F>("_tk_wstring")] != -1);
		return sat<F>("_tk_wstring");
	}

	template<typename F = ::org::omg::CORBA::TCKind>
	static auto tk_Principal() {
		static_assert(field_signatures[jField<F>("tk_Principal")] != -1);
		return sat<F>("tk_Principal");
	}

	template<typename F = ::org::omg::CORBA::TCKind>
	static auto tk_TypeCode() {
		static_assert(field_signatures[jField<F>("tk_TypeCode")] != -1);
		return sat<F>("tk_TypeCode");
	}

	template<typename F = ::org::omg::CORBA::TCKind>
	static auto tk_abstract_interface() {
		static_assert(field_signatures[jField<F>("tk_abstract_interface")] != -1);
		return sat<F>("tk_abstract_interface");
	}

	template<typename F = ::org::omg::CORBA::TCKind>
	static auto tk_alias() {
		static_assert(field_signatures[jField<F>("tk_alias")] != -1);
		return sat<F>("tk_alias");
	}

	template<typename F = ::org::omg::CORBA::TCKind>
	static auto tk_any() {
		static_assert(field_signatures[jField<F>("tk_any")] != -1);
		return sat<F>("tk_any");
	}

	template<typename F = ::org::omg::CORBA::TCKind>
	static auto tk_array() {
		static_assert(field_signatures[jField<F>("tk_array")] != -1);
		return sat<F>("tk_array");
	}

	template<typename F = ::org::omg::CORBA::TCKind>
	static auto tk_boolean() {
		static_assert(field_signatures[jField<F>("tk_boolean")] != -1);
		return sat<F>("tk_boolean");
	}

	template<typename F = ::org::omg::CORBA::TCKind>
	static auto tk_char() {
		static_assert(field_signatures[jField<F>("tk_char")] != -1);
		return sat<F>("tk_char");
	}

	template<typename F = ::org::omg::CORBA::TCKind>
	static auto tk_double() {
		static_assert(field_signatures[jField<F>("tk_double")] != -1);
		return sat<F>("tk_double");
	}

	template<typename F = ::org::omg::CORBA::TCKind>
	static auto tk_enum() {
		static_assert(field_signatures[jField<F>("tk_enum")] != -1);
		return sat<F>("tk_enum");
	}

	template<typename F = ::org::omg::CORBA::TCKind>
	static auto tk_except() {
		static_assert(field_signatures[jField<F>("tk_except")] != -1);
		return sat<F>("tk_except");
	}

	template<typename F = ::org::omg::CORBA::TCKind>
	static auto tk_fixed() {
		static_assert(field_signatures[jField<F>("tk_fixed")] != -1);
		return sat<F>("tk_fixed");
	}

	template<typename F = ::org::omg::CORBA::TCKind>
	static auto tk_float() {
		static_assert(field_signatures[jField<F>("tk_float")] != -1);
		return sat<F>("tk_float");
	}

	template<typename F = ::org::omg::CORBA::TCKind>
	static auto tk_long() {
		static_assert(field_signatures[jField<F>("tk_long")] != -1);
		return sat<F>("tk_long");
	}

	template<typename F = ::org::omg::CORBA::TCKind>
	static auto tk_longdouble() {
		static_assert(field_signatures[jField<F>("tk_longdouble")] != -1);
		return sat<F>("tk_longdouble");
	}

	template<typename F = ::org::omg::CORBA::TCKind>
	static auto tk_longlong() {
		static_assert(field_signatures[jField<F>("tk_longlong")] != -1);
		return sat<F>("tk_longlong");
	}

	template<typename F = ::org::omg::CORBA::TCKind>
	static auto tk_native() {
		static_assert(field_signatures[jField<F>("tk_native")] != -1);
		return sat<F>("tk_native");
	}

	template<typename F = ::org::omg::CORBA::TCKind>
	static auto tk_null() {
		static_assert(field_signatures[jField<F>("tk_null")] != -1);
		return sat<F>("tk_null");
	}

	template<typename F = ::org::omg::CORBA::TCKind>
	static auto tk_objref() {
		static_assert(field_signatures[jField<F>("tk_objref")] != -1);
		return sat<F>("tk_objref");
	}

	template<typename F = ::org::omg::CORBA::TCKind>
	static auto tk_octet() {
		static_assert(field_signatures[jField<F>("tk_octet")] != -1);
		return sat<F>("tk_octet");
	}

	template<typename F = ::org::omg::CORBA::TCKind>
	static auto tk_sequence() {
		static_assert(field_signatures[jField<F>("tk_sequence")] != -1);
		return sat<F>("tk_sequence");
	}

	template<typename F = ::org::omg::CORBA::TCKind>
	static auto tk_short() {
		static_assert(field_signatures[jField<F>("tk_short")] != -1);
		return sat<F>("tk_short");
	}

	template<typename F = ::org::omg::CORBA::TCKind>
	static auto tk_string() {
		static_assert(field_signatures[jField<F>("tk_string")] != -1);
		return sat<F>("tk_string");
	}

	template<typename F = ::org::omg::CORBA::TCKind>
	static auto tk_struct() {
		static_assert(field_signatures[jField<F>("tk_struct")] != -1);
		return sat<F>("tk_struct");
	}

	template<typename F = ::org::omg::CORBA::TCKind>
	static auto tk_ulong() {
		static_assert(field_signatures[jField<F>("tk_ulong")] != -1);
		return sat<F>("tk_ulong");
	}

	template<typename F = ::org::omg::CORBA::TCKind>
	static auto tk_ulonglong() {
		static_assert(field_signatures[jField<F>("tk_ulonglong")] != -1);
		return sat<F>("tk_ulonglong");
	}

	template<typename F = ::org::omg::CORBA::TCKind>
	static auto tk_union() {
		static_assert(field_signatures[jField<F>("tk_union")] != -1);
		return sat<F>("tk_union");
	}

	template<typename F = ::org::omg::CORBA::TCKind>
	static auto tk_ushort() {
		static_assert(field_signatures[jField<F>("tk_ushort")] != -1);
		return sat<F>("tk_ushort");
	}

	template<typename F = ::org::omg::CORBA::TCKind>
	static auto tk_value() {
		static_assert(field_signatures[jField<F>("tk_value")] != -1);
		return sat<F>("tk_value");
	}

	template<typename F = ::org::omg::CORBA::TCKind>
	static auto tk_value_box() {
		static_assert(field_signatures[jField<F>("tk_value_box")] != -1);
		return sat<F>("tk_value_box");
	}

	template<typename F = ::org::omg::CORBA::TCKind>
	static auto tk_void() {
		static_assert(field_signatures[jField<F>("tk_void")] != -1);
		return sat<F>("tk_void");
	}

	template<typename F = ::org::omg::CORBA::TCKind>
	static auto tk_wchar() {
		static_assert(field_signatures[jField<F>("tk_wchar")] != -1);
		return sat<F>("tk_wchar");
	}

	template<typename F = ::org::omg::CORBA::TCKind>
	static auto tk_wstring() {
		static_assert(field_signatures[jField<F>("tk_wstring")] != -1);
		return sat<F>("tk_wstring");
	}

	constexpr static Enume method_signatures{
		jMethod<::org::omg::CORBA::TCKind(::jint)>("from_int"), //
		jMethod<::jint()>("value"), //
	};

	template<typename R = ::org::omg::CORBA::TCKind, typename... Args>
	static auto from_int(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("from_int")] != -1);
		return scall<R>("from_int", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto value(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("value")] != -1);
		return call<R>("value", std::forward<Args>(args)...);
	}

};

#endif
