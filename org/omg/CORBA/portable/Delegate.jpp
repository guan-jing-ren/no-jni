#ifndef org_omg_CORBA_portable_Delegate_HPP
#define org_omg_CORBA_portable_Delegate_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::omg::CORBA::portable::Delegate : public jObject<::org::omg::CORBA::portable::Delegate, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_omg_CORBA_portable / "Delegate";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::org::omg::CORBA::Request(::org::omg::CORBA::Object, ::org::omg::CORBA::Context, ::java::lang::String, ::org::omg::CORBA::NVList, ::org::omg::CORBA::NamedValue)>("create_request"), //
		jMethod<::org::omg::CORBA::Request(::org::omg::CORBA::Object, ::org::omg::CORBA::Context, ::java::lang::String, ::org::omg::CORBA::NVList, ::org::omg::CORBA::NamedValue, ::org::omg::CORBA::ExceptionList, ::org::omg::CORBA::ContextList)>("create_request"), //
		jMethod<::org::omg::CORBA::Object(::org::omg::CORBA::Object)>("duplicate"), //
		jMethod<::jboolean(::org::omg::CORBA::Object, ::java::lang::Object)>("equals"), //
		jMethod<::org::omg::CORBA::DomainManager *(::org::omg::CORBA::Object)>("get_domain_managers"), //
		jMethod<::org::omg::CORBA::Object(::org::omg::CORBA::Object)>("get_interface_def"), //
		jMethod<::org::omg::CORBA::Policy(::org::omg::CORBA::Object, ::jint)>("get_policy"), //
		jMethod<::jint(::org::omg::CORBA::Object, ::jint)>("hash"), //
		jMethod<::jint(::org::omg::CORBA::Object)>("hashCode"), //
		jMethod<::org::omg::CORBA::portable::InputStream(::org::omg::CORBA::Object, ::org::omg::CORBA::portable::OutputStream)>("invoke"), //
		jMethod<::jboolean(::org::omg::CORBA::Object, ::java::lang::String)>("is_a"), //
		jMethod<::jboolean(::org::omg::CORBA::Object, ::org::omg::CORBA::Object)>("is_equivalent"), //
		jMethod<::jboolean(::org::omg::CORBA::Object)>("is_local"), //
		jMethod<::jboolean(::org::omg::CORBA::Object)>("non_existent"), //
		jMethod<::org::omg::CORBA::ORB(::org::omg::CORBA::Object)>("orb"), //
		jMethod<::jvoid(::org::omg::CORBA::Object)>("release"), //
		jMethod<::jvoid(::org::omg::CORBA::Object, ::org::omg::CORBA::portable::InputStream)>("releaseReply"), //
		jMethod<::org::omg::CORBA::Request(::org::omg::CORBA::Object, ::java::lang::String)>("request"), //
		jMethod<::org::omg::CORBA::portable::OutputStream(::org::omg::CORBA::Object, ::java::lang::String, ::jboolean)>("request"), //
		jMethod<::jvoid(::org::omg::CORBA::Object, ::org::omg::CORBA::portable::ServantObject)>("servant_postinvoke"), //
		jMethod<::org::omg::CORBA::portable::ServantObject(::org::omg::CORBA::Object, ::java::lang::String, ::java::lang::Class)>("servant_preinvoke"), //
		jMethod<::org::omg::CORBA::Object(::org::omg::CORBA::Object, ::org::omg::CORBA::Policy *, ::org::omg::CORBA::SetOverrideType)>("set_policy_override"), //
		jMethod<::java::lang::String(::org::omg::CORBA::Object)>("toString"), //
	};

	template<typename R = ::org::omg::CORBA::Request, typename... Args>
	auto create_request(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("create_request")] != -1);
		return call<R>("create_request", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto duplicate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("duplicate")] != -1);
		return call<R>("duplicate", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DomainManager *, typename... Args>
	auto get_domain_managers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("get_domain_managers")] != -1);
		return call<R>("get_domain_managers", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto get_interface_def(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("get_interface_def")] != -1);
		return call<R>("get_interface_def", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Policy, typename... Args>
	auto get_policy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("get_policy")] != -1);
		return call<R>("get_policy", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hash(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hash")] != -1);
		return call<R>("hash", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::portable::InputStream, typename... Args>
	auto invoke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("invoke")] != -1);
		return call<R>("invoke", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto is_a(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("is_a")] != -1);
		return call<R>("is_a", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto is_equivalent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("is_equivalent")] != -1);
		return call<R>("is_equivalent", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto is_local(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("is_local")] != -1);
		return call<R>("is_local", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto non_existent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("non_existent")] != -1);
		return call<R>("non_existent", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::ORB, typename... Args>
	auto orb(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("orb")] != -1);
		return call<R>("orb", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto release(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("release")] != -1);
		return call<R>("release", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto releaseReply(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("releaseReply")] != -1);
		return call<R>("releaseReply", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Request, typename... Args>
	auto request(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("request")] != -1);
		return call<R>("request", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto servant_postinvoke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("servant_postinvoke")] != -1);
		return call<R>("servant_postinvoke", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::portable::ServantObject, typename... Args>
	auto servant_preinvoke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("servant_preinvoke")] != -1);
		return call<R>("servant_preinvoke", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto set_policy_override(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("set_policy_override")] != -1);
		return call<R>("set_policy_override", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
