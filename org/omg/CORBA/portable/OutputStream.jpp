#ifndef org_omg_CORBA_portable_OutputStream_HPP
#define org_omg_CORBA_portable_OutputStream_HPP

#include "../../../../jfwd_decl.hpp"

class ::org::omg::CORBA::portable::OutputStream : public jObject<::org::omg::CORBA::portable::OutputStream, ::java::io::OutputStream> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_omg_CORBA_portable / "OutputStream";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::org::omg::CORBA::portable::InputStream()>("create_input_stream"), //
		jMethod<::org::omg::CORBA::ORB()>("orb"), //
		jMethod<::jvoid(::jint)>("write"), //
		jMethod<::jvoid(::org::omg::CORBA::Context, ::org::omg::CORBA::ContextList)>("write_Context"), //
		jMethod<::jvoid(::org::omg::CORBA::Object)>("write_Object"), //
		jMethod<::jvoid(::org::omg::CORBA::Principal)>("write_Principal"), //
		jMethod<::jvoid(::org::omg::CORBA::TypeCode)>("write_TypeCode"), //
		jMethod<::jvoid(::org::omg::CORBA::Any)>("write_any"), //
		jMethod<::jvoid(::jboolean)>("write_boolean"), //
		jMethod<::jvoid(::jboolean *, ::jint, ::jint)>("write_boolean_array"), //
		jMethod<::jvoid(::jchar)>("write_char"), //
		jMethod<::jvoid(::jchar *, ::jint, ::jint)>("write_char_array"), //
		jMethod<::jvoid(::jdouble)>("write_double"), //
		jMethod<::jvoid(::jdouble *, ::jint, ::jint)>("write_double_array"), //
		jMethod<::jvoid(::java::math::BigDecimal)>("write_fixed"), //
		jMethod<::jvoid(::jfloat)>("write_float"), //
		jMethod<::jvoid(::jfloat *, ::jint, ::jint)>("write_float_array"), //
		jMethod<::jvoid(::jint)>("write_long"), //
		jMethod<::jvoid(::jint *, ::jint, ::jint)>("write_long_array"), //
		jMethod<::jvoid(::jlong)>("write_longlong"), //
		jMethod<::jvoid(::jlong *, ::jint, ::jint)>("write_longlong_array"), //
		jMethod<::jvoid(::jbyte)>("write_octet"), //
		jMethod<::jvoid(::jbyte *, ::jint, ::jint)>("write_octet_array"), //
		jMethod<::jvoid(::jshort)>("write_short"), //
		jMethod<::jvoid(::jshort *, ::jint, ::jint)>("write_short_array"), //
		jMethod<::jvoid(::java::lang::String)>("write_string"), //
		jMethod<::jvoid(::jint)>("write_ulong"), //
		jMethod<::jvoid(::jint *, ::jint, ::jint)>("write_ulong_array"), //
		jMethod<::jvoid(::jlong)>("write_ulonglong"), //
		jMethod<::jvoid(::jlong *, ::jint, ::jint)>("write_ulonglong_array"), //
		jMethod<::jvoid(::jshort)>("write_ushort"), //
		jMethod<::jvoid(::jshort *, ::jint, ::jint)>("write_ushort_array"), //
		jMethod<::jvoid(::jchar)>("write_wchar"), //
		jMethod<::jvoid(::jchar *, ::jint, ::jint)>("write_wchar_array"), //
		jMethod<::jvoid(::java::lang::String)>("write_wstring"), //
	};

	template<typename R = ::org::omg::CORBA::portable::InputStream, typename... Args>
	auto create_input_stream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("create_input_stream")] != -1);
		return call<R>("create_input_stream", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::ORB, typename... Args>
	auto orb(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("orb")] != -1);
		return call<R>("orb", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write")] != -1);
		return call<R>("write", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_Context(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write_Context")] != -1);
		return call<R>("write_Context", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_Object(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write_Object")] != -1);
		return call<R>("write_Object", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_Principal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write_Principal")] != -1);
		return call<R>("write_Principal", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_TypeCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write_TypeCode")] != -1);
		return call<R>("write_TypeCode", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_any(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write_any")] != -1);
		return call<R>("write_any", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_boolean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write_boolean")] != -1);
		return call<R>("write_boolean", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_boolean_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write_boolean_array")] != -1);
		return call<R>("write_boolean_array", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_char(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write_char")] != -1);
		return call<R>("write_char", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_char_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write_char_array")] != -1);
		return call<R>("write_char_array", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_double(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write_double")] != -1);
		return call<R>("write_double", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_double_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write_double_array")] != -1);
		return call<R>("write_double_array", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_fixed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write_fixed")] != -1);
		return call<R>("write_fixed", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_float(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write_float")] != -1);
		return call<R>("write_float", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_float_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write_float_array")] != -1);
		return call<R>("write_float_array", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_long(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write_long")] != -1);
		return call<R>("write_long", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_long_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write_long_array")] != -1);
		return call<R>("write_long_array", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_longlong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write_longlong")] != -1);
		return call<R>("write_longlong", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_longlong_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write_longlong_array")] != -1);
		return call<R>("write_longlong_array", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_octet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write_octet")] != -1);
		return call<R>("write_octet", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_octet_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write_octet_array")] != -1);
		return call<R>("write_octet_array", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_short(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write_short")] != -1);
		return call<R>("write_short", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_short_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write_short_array")] != -1);
		return call<R>("write_short_array", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_string(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write_string")] != -1);
		return call<R>("write_string", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_ulong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write_ulong")] != -1);
		return call<R>("write_ulong", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_ulong_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write_ulong_array")] != -1);
		return call<R>("write_ulong_array", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_ulonglong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write_ulonglong")] != -1);
		return call<R>("write_ulonglong", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_ulonglong_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write_ulonglong_array")] != -1);
		return call<R>("write_ulonglong_array", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_ushort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write_ushort")] != -1);
		return call<R>("write_ushort", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_ushort_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write_ushort_array")] != -1);
		return call<R>("write_ushort_array", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_wchar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write_wchar")] != -1);
		return call<R>("write_wchar", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_wchar_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write_wchar_array")] != -1);
		return call<R>("write_wchar_array", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_wstring(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write_wstring")] != -1);
		return call<R>("write_wstring", forward<Args>(args)...);
	}

};

#endif
