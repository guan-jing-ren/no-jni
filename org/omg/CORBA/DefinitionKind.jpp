#ifndef org_omg_CORBA_DefinitionKind_HPP
#define org_omg_CORBA_DefinitionKind_HPP

#include "../../../jfwd_decl.hpp"

class ::org::omg::CORBA::DefinitionKind : public jObject<::org::omg::CORBA::DefinitionKind, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_omg_CORBA / "DefinitionKind";

	constexpr static Enume field_signatures{
		jField<::jint>("_dk_AbstractInterface"), //
		jField<::jint>("_dk_Alias"), //
		jField<::jint>("_dk_Array"), //
		jField<::jint>("_dk_Attribute"), //
		jField<::jint>("_dk_Constant"), //
		jField<::jint>("_dk_Enum"), //
		jField<::jint>("_dk_Exception"), //
		jField<::jint>("_dk_Fixed"), //
		jField<::jint>("_dk_Interface"), //
		jField<::jint>("_dk_Module"), //
		jField<::jint>("_dk_Native"), //
		jField<::jint>("_dk_Operation"), //
		jField<::jint>("_dk_Primitive"), //
		jField<::jint>("_dk_Repository"), //
		jField<::jint>("_dk_Sequence"), //
		jField<::jint>("_dk_String"), //
		jField<::jint>("_dk_Struct"), //
		jField<::jint>("_dk_Typedef"), //
		jField<::jint>("_dk_Union"), //
		jField<::jint>("_dk_Value"), //
		jField<::jint>("_dk_ValueBox"), //
		jField<::jint>("_dk_ValueMember"), //
		jField<::jint>("_dk_Wstring"), //
		jField<::jint>("_dk_all"), //
		jField<::jint>("_dk_none"), //
		jField<::org::omg::CORBA::DefinitionKind>("dk_AbstractInterface"), //
		jField<::org::omg::CORBA::DefinitionKind>("dk_Alias"), //
		jField<::org::omg::CORBA::DefinitionKind>("dk_Array"), //
		jField<::org::omg::CORBA::DefinitionKind>("dk_Attribute"), //
		jField<::org::omg::CORBA::DefinitionKind>("dk_Constant"), //
		jField<::org::omg::CORBA::DefinitionKind>("dk_Enum"), //
		jField<::org::omg::CORBA::DefinitionKind>("dk_Exception"), //
		jField<::org::omg::CORBA::DefinitionKind>("dk_Fixed"), //
		jField<::org::omg::CORBA::DefinitionKind>("dk_Interface"), //
		jField<::org::omg::CORBA::DefinitionKind>("dk_Module"), //
		jField<::org::omg::CORBA::DefinitionKind>("dk_Native"), //
		jField<::org::omg::CORBA::DefinitionKind>("dk_Operation"), //
		jField<::org::omg::CORBA::DefinitionKind>("dk_Primitive"), //
		jField<::org::omg::CORBA::DefinitionKind>("dk_Repository"), //
		jField<::org::omg::CORBA::DefinitionKind>("dk_Sequence"), //
		jField<::org::omg::CORBA::DefinitionKind>("dk_String"), //
		jField<::org::omg::CORBA::DefinitionKind>("dk_Struct"), //
		jField<::org::omg::CORBA::DefinitionKind>("dk_Typedef"), //
		jField<::org::omg::CORBA::DefinitionKind>("dk_Union"), //
		jField<::org::omg::CORBA::DefinitionKind>("dk_Value"), //
		jField<::org::omg::CORBA::DefinitionKind>("dk_ValueBox"), //
		jField<::org::omg::CORBA::DefinitionKind>("dk_ValueMember"), //
		jField<::org::omg::CORBA::DefinitionKind>("dk_Wstring"), //
		jField<::org::omg::CORBA::DefinitionKind>("dk_all"), //
		jField<::org::omg::CORBA::DefinitionKind>("dk_none"), //
	};

	template<typename F = ::jint>
	static auto _dk_AbstractInterface() {
		static_assert(field_signatures[jField<F>("_dk_AbstractInterface")] != -1);
		return sat<F>("_dk_AbstractInterface");
	}

	template<typename F = ::jint>
	static auto _dk_Alias() {
		static_assert(field_signatures[jField<F>("_dk_Alias")] != -1);
		return sat<F>("_dk_Alias");
	}

	template<typename F = ::jint>
	static auto _dk_Array() {
		static_assert(field_signatures[jField<F>("_dk_Array")] != -1);
		return sat<F>("_dk_Array");
	}

	template<typename F = ::jint>
	static auto _dk_Attribute() {
		static_assert(field_signatures[jField<F>("_dk_Attribute")] != -1);
		return sat<F>("_dk_Attribute");
	}

	template<typename F = ::jint>
	static auto _dk_Constant() {
		static_assert(field_signatures[jField<F>("_dk_Constant")] != -1);
		return sat<F>("_dk_Constant");
	}

	template<typename F = ::jint>
	static auto _dk_Enum() {
		static_assert(field_signatures[jField<F>("_dk_Enum")] != -1);
		return sat<F>("_dk_Enum");
	}

	template<typename F = ::jint>
	static auto _dk_Exception() {
		static_assert(field_signatures[jField<F>("_dk_Exception")] != -1);
		return sat<F>("_dk_Exception");
	}

	template<typename F = ::jint>
	static auto _dk_Fixed() {
		static_assert(field_signatures[jField<F>("_dk_Fixed")] != -1);
		return sat<F>("_dk_Fixed");
	}

	template<typename F = ::jint>
	static auto _dk_Interface() {
		static_assert(field_signatures[jField<F>("_dk_Interface")] != -1);
		return sat<F>("_dk_Interface");
	}

	template<typename F = ::jint>
	static auto _dk_Module() {
		static_assert(field_signatures[jField<F>("_dk_Module")] != -1);
		return sat<F>("_dk_Module");
	}

	template<typename F = ::jint>
	static auto _dk_Native() {
		static_assert(field_signatures[jField<F>("_dk_Native")] != -1);
		return sat<F>("_dk_Native");
	}

	template<typename F = ::jint>
	static auto _dk_Operation() {
		static_assert(field_signatures[jField<F>("_dk_Operation")] != -1);
		return sat<F>("_dk_Operation");
	}

	template<typename F = ::jint>
	static auto _dk_Primitive() {
		static_assert(field_signatures[jField<F>("_dk_Primitive")] != -1);
		return sat<F>("_dk_Primitive");
	}

	template<typename F = ::jint>
	static auto _dk_Repository() {
		static_assert(field_signatures[jField<F>("_dk_Repository")] != -1);
		return sat<F>("_dk_Repository");
	}

	template<typename F = ::jint>
	static auto _dk_Sequence() {
		static_assert(field_signatures[jField<F>("_dk_Sequence")] != -1);
		return sat<F>("_dk_Sequence");
	}

	template<typename F = ::jint>
	static auto _dk_String() {
		static_assert(field_signatures[jField<F>("_dk_String")] != -1);
		return sat<F>("_dk_String");
	}

	template<typename F = ::jint>
	static auto _dk_Struct() {
		static_assert(field_signatures[jField<F>("_dk_Struct")] != -1);
		return sat<F>("_dk_Struct");
	}

	template<typename F = ::jint>
	static auto _dk_Typedef() {
		static_assert(field_signatures[jField<F>("_dk_Typedef")] != -1);
		return sat<F>("_dk_Typedef");
	}

	template<typename F = ::jint>
	static auto _dk_Union() {
		static_assert(field_signatures[jField<F>("_dk_Union")] != -1);
		return sat<F>("_dk_Union");
	}

	template<typename F = ::jint>
	static auto _dk_Value() {
		static_assert(field_signatures[jField<F>("_dk_Value")] != -1);
		return sat<F>("_dk_Value");
	}

	template<typename F = ::jint>
	static auto _dk_ValueBox() {
		static_assert(field_signatures[jField<F>("_dk_ValueBox")] != -1);
		return sat<F>("_dk_ValueBox");
	}

	template<typename F = ::jint>
	static auto _dk_ValueMember() {
		static_assert(field_signatures[jField<F>("_dk_ValueMember")] != -1);
		return sat<F>("_dk_ValueMember");
	}

	template<typename F = ::jint>
	static auto _dk_Wstring() {
		static_assert(field_signatures[jField<F>("_dk_Wstring")] != -1);
		return sat<F>("_dk_Wstring");
	}

	template<typename F = ::jint>
	static auto _dk_all() {
		static_assert(field_signatures[jField<F>("_dk_all")] != -1);
		return sat<F>("_dk_all");
	}

	template<typename F = ::jint>
	static auto _dk_none() {
		static_assert(field_signatures[jField<F>("_dk_none")] != -1);
		return sat<F>("_dk_none");
	}

	template<typename F = ::org::omg::CORBA::DefinitionKind>
	static auto dk_AbstractInterface() {
		static_assert(field_signatures[jField<F>("dk_AbstractInterface")] != -1);
		return sat<F>("dk_AbstractInterface");
	}

	template<typename F = ::org::omg::CORBA::DefinitionKind>
	static auto dk_Alias() {
		static_assert(field_signatures[jField<F>("dk_Alias")] != -1);
		return sat<F>("dk_Alias");
	}

	template<typename F = ::org::omg::CORBA::DefinitionKind>
	static auto dk_Array() {
		static_assert(field_signatures[jField<F>("dk_Array")] != -1);
		return sat<F>("dk_Array");
	}

	template<typename F = ::org::omg::CORBA::DefinitionKind>
	static auto dk_Attribute() {
		static_assert(field_signatures[jField<F>("dk_Attribute")] != -1);
		return sat<F>("dk_Attribute");
	}

	template<typename F = ::org::omg::CORBA::DefinitionKind>
	static auto dk_Constant() {
		static_assert(field_signatures[jField<F>("dk_Constant")] != -1);
		return sat<F>("dk_Constant");
	}

	template<typename F = ::org::omg::CORBA::DefinitionKind>
	static auto dk_Enum() {
		static_assert(field_signatures[jField<F>("dk_Enum")] != -1);
		return sat<F>("dk_Enum");
	}

	template<typename F = ::org::omg::CORBA::DefinitionKind>
	static auto dk_Exception() {
		static_assert(field_signatures[jField<F>("dk_Exception")] != -1);
		return sat<F>("dk_Exception");
	}

	template<typename F = ::org::omg::CORBA::DefinitionKind>
	static auto dk_Fixed() {
		static_assert(field_signatures[jField<F>("dk_Fixed")] != -1);
		return sat<F>("dk_Fixed");
	}

	template<typename F = ::org::omg::CORBA::DefinitionKind>
	static auto dk_Interface() {
		static_assert(field_signatures[jField<F>("dk_Interface")] != -1);
		return sat<F>("dk_Interface");
	}

	template<typename F = ::org::omg::CORBA::DefinitionKind>
	static auto dk_Module() {
		static_assert(field_signatures[jField<F>("dk_Module")] != -1);
		return sat<F>("dk_Module");
	}

	template<typename F = ::org::omg::CORBA::DefinitionKind>
	static auto dk_Native() {
		static_assert(field_signatures[jField<F>("dk_Native")] != -1);
		return sat<F>("dk_Native");
	}

	template<typename F = ::org::omg::CORBA::DefinitionKind>
	static auto dk_Operation() {
		static_assert(field_signatures[jField<F>("dk_Operation")] != -1);
		return sat<F>("dk_Operation");
	}

	template<typename F = ::org::omg::CORBA::DefinitionKind>
	static auto dk_Primitive() {
		static_assert(field_signatures[jField<F>("dk_Primitive")] != -1);
		return sat<F>("dk_Primitive");
	}

	template<typename F = ::org::omg::CORBA::DefinitionKind>
	static auto dk_Repository() {
		static_assert(field_signatures[jField<F>("dk_Repository")] != -1);
		return sat<F>("dk_Repository");
	}

	template<typename F = ::org::omg::CORBA::DefinitionKind>
	static auto dk_Sequence() {
		static_assert(field_signatures[jField<F>("dk_Sequence")] != -1);
		return sat<F>("dk_Sequence");
	}

	template<typename F = ::org::omg::CORBA::DefinitionKind>
	static auto dk_String() {
		static_assert(field_signatures[jField<F>("dk_String")] != -1);
		return sat<F>("dk_String");
	}

	template<typename F = ::org::omg::CORBA::DefinitionKind>
	static auto dk_Struct() {
		static_assert(field_signatures[jField<F>("dk_Struct")] != -1);
		return sat<F>("dk_Struct");
	}

	template<typename F = ::org::omg::CORBA::DefinitionKind>
	static auto dk_Typedef() {
		static_assert(field_signatures[jField<F>("dk_Typedef")] != -1);
		return sat<F>("dk_Typedef");
	}

	template<typename F = ::org::omg::CORBA::DefinitionKind>
	static auto dk_Union() {
		static_assert(field_signatures[jField<F>("dk_Union")] != -1);
		return sat<F>("dk_Union");
	}

	template<typename F = ::org::omg::CORBA::DefinitionKind>
	static auto dk_Value() {
		static_assert(field_signatures[jField<F>("dk_Value")] != -1);
		return sat<F>("dk_Value");
	}

	template<typename F = ::org::omg::CORBA::DefinitionKind>
	static auto dk_ValueBox() {
		static_assert(field_signatures[jField<F>("dk_ValueBox")] != -1);
		return sat<F>("dk_ValueBox");
	}

	template<typename F = ::org::omg::CORBA::DefinitionKind>
	static auto dk_ValueMember() {
		static_assert(field_signatures[jField<F>("dk_ValueMember")] != -1);
		return sat<F>("dk_ValueMember");
	}

	template<typename F = ::org::omg::CORBA::DefinitionKind>
	static auto dk_Wstring() {
		static_assert(field_signatures[jField<F>("dk_Wstring")] != -1);
		return sat<F>("dk_Wstring");
	}

	template<typename F = ::org::omg::CORBA::DefinitionKind>
	static auto dk_all() {
		static_assert(field_signatures[jField<F>("dk_all")] != -1);
		return sat<F>("dk_all");
	}

	template<typename F = ::org::omg::CORBA::DefinitionKind>
	static auto dk_none() {
		static_assert(field_signatures[jField<F>("dk_none")] != -1);
		return sat<F>("dk_none");
	}

	constexpr static Enume method_signatures{
		jMethod<::org::omg::CORBA::DefinitionKind(::jint)>("from_int"), //
		jMethod<::jint()>("value"), //
	};

	template<typename R = ::org::omg::CORBA::DefinitionKind, typename... Args>
	static auto from_int(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("from_int")] != -1);
		return scall<R>("from_int", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto value(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("value")] != -1);
		return call<R>("value", forward<Args>(args)...);
	}

};

#endif
