#ifndef org_omg_CORBA_ExceptionList_HPP
#define org_omg_CORBA_ExceptionList_HPP

#include "../../../jfwd_decl.hpp"

class ::org::omg::CORBA::ExceptionList : public jObject<::org::omg::CORBA::ExceptionList, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_omg_CORBA / "ExceptionList";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::org::omg::CORBA::TypeCode)>("add"), //
		jMethod<::jint()>("count"), //
		jMethod<::org::omg::CORBA::TypeCode(::jint)>("item"), //
		jMethod<::jvoid(::jint)>("remove"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("add")] != -1);
		return call<R>("add", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto count(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("count")] != -1);
		return call<R>("count", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TypeCode, typename... Args>
	auto item(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("item")] != -1);
		return call<R>("item", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", forward<Args>(args)...);
	}

};

#endif
