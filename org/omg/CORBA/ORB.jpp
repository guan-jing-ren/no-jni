#ifndef org_omg_CORBA_ORB_HPP
#define org_omg_CORBA_ORB_HPP

#include "../../../jfwd_decl.hpp"

class ::org::omg::CORBA::ORB : public jObject<::org::omg::CORBA::ORB, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_omg_CORBA / "ORB";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::org::omg::CORBA::Object)>("connect"), //
		jMethod<::org::omg::CORBA::TypeCode(::java::lang::String, ::java::lang::String)>("create_abstract_interface_tc"), //
		jMethod<::org::omg::CORBA::TypeCode(::java::lang::String, ::java::lang::String, ::org::omg::CORBA::TypeCode)>("create_alias_tc"), //
		jMethod<::org::omg::CORBA::Any()>("create_any"), //
		jMethod<::org::omg::CORBA::TypeCode(::jint, ::org::omg::CORBA::TypeCode)>("create_array_tc"), //
		jMethod<::org::omg::CORBA::DynAny(::org::omg::CORBA::TypeCode)>("create_basic_dyn_any"), //
		jMethod<::org::omg::CORBA::ContextList()>("create_context_list"), //
		jMethod<::org::omg::CORBA::DynAny(::org::omg::CORBA::Any)>("create_dyn_any"), //
		jMethod<::org::omg::CORBA::DynArray(::org::omg::CORBA::TypeCode)>("create_dyn_array"), //
		jMethod<::org::omg::CORBA::DynEnum(::org::omg::CORBA::TypeCode)>("create_dyn_enum"), //
		jMethod<::org::omg::CORBA::DynSequence(::org::omg::CORBA::TypeCode)>("create_dyn_sequence"), //
		jMethod<::org::omg::CORBA::DynStruct(::org::omg::CORBA::TypeCode)>("create_dyn_struct"), //
		jMethod<::org::omg::CORBA::DynUnion(::org::omg::CORBA::TypeCode)>("create_dyn_union"), //
		jMethod<::org::omg::CORBA::TypeCode(::java::lang::String, ::java::lang::String, ::java::lang::String *)>("create_enum_tc"), //
		jMethod<::org::omg::CORBA::Environment()>("create_environment"), //
		jMethod<::org::omg::CORBA::ExceptionList()>("create_exception_list"), //
		jMethod<::org::omg::CORBA::TypeCode(::java::lang::String, ::java::lang::String, ::org::omg::CORBA::StructMember *)>("create_exception_tc"), //
		jMethod<::org::omg::CORBA::TypeCode(::jshort, ::jshort)>("create_fixed_tc"), //
		jMethod<::org::omg::CORBA::TypeCode(::java::lang::String, ::java::lang::String)>("create_interface_tc"), //
		jMethod<::org::omg::CORBA::NVList(::jint)>("create_list"), //
		jMethod<::org::omg::CORBA::NamedValue(::java::lang::String, ::org::omg::CORBA::Any, ::jint)>("create_named_value"), //
		jMethod<::org::omg::CORBA::TypeCode(::java::lang::String, ::java::lang::String)>("create_native_tc"), //
		jMethod<::org::omg::CORBA::NVList(::org::omg::CORBA::Object)>("create_operation_list"), //
		jMethod<::org::omg::CORBA::portable::OutputStream()>("create_output_stream"), //
		jMethod<::org::omg::CORBA::Policy(::jint, ::org::omg::CORBA::Any)>("create_policy"), //
		jMethod<::org::omg::CORBA::TypeCode(::jint, ::jint)>("create_recursive_sequence_tc"), //
		jMethod<::org::omg::CORBA::TypeCode(::java::lang::String)>("create_recursive_tc"), //
		jMethod<::org::omg::CORBA::TypeCode(::jint, ::org::omg::CORBA::TypeCode)>("create_sequence_tc"), //
		jMethod<::org::omg::CORBA::TypeCode(::jint)>("create_string_tc"), //
		jMethod<::org::omg::CORBA::TypeCode(::java::lang::String, ::java::lang::String, ::org::omg::CORBA::StructMember *)>("create_struct_tc"), //
		jMethod<::org::omg::CORBA::TypeCode(::java::lang::String, ::java::lang::String, ::org::omg::CORBA::TypeCode, ::org::omg::CORBA::UnionMember *)>("create_union_tc"), //
		jMethod<::org::omg::CORBA::TypeCode(::java::lang::String, ::java::lang::String, ::org::omg::CORBA::TypeCode)>("create_value_box_tc"), //
		jMethod<::org::omg::CORBA::TypeCode(::java::lang::String, ::java::lang::String, ::jshort, ::org::omg::CORBA::TypeCode, ::org::omg::CORBA::ValueMember *)>("create_value_tc"), //
		jMethod<::org::omg::CORBA::TypeCode(::jint)>("create_wstring_tc"), //
		jMethod<::jvoid()>("destroy"), //
		jMethod<::jvoid(::org::omg::CORBA::Object)>("disconnect"), //
		jMethod<::org::omg::CORBA::Current()>("get_current"), //
		jMethod<::org::omg::CORBA::Context()>("get_default_context"), //
		jMethod<::org::omg::CORBA::Request()>("get_next_response"), //
		jMethod<::org::omg::CORBA::TypeCode(::org::omg::CORBA::TCKind)>("get_primitive_tc"), //
		jMethod<::jboolean(::jshort, ::org::omg::CORBA::ServiceInformationHolder)>("get_service_information"), //
		jMethod<::org::omg::CORBA::ORB()>("init"), //
		jMethod<::org::omg::CORBA::ORB(::java::applet::Applet, ::java::util::Properties)>("init"), //
		jMethod<::org::omg::CORBA::ORB(::java::lang::String *, ::java::util::Properties)>("init"), //
		jMethod<::java::lang::String *()>("list_initial_services"), //
		jMethod<::java::lang::String(::org::omg::CORBA::Object)>("object_to_string"), //
		jMethod<::jvoid()>("perform_work"), //
		jMethod<::jboolean()>("poll_next_response"), //
		jMethod<::org::omg::CORBA::Object(::java::lang::String)>("resolve_initial_references"), //
		jMethod<::jvoid()>("run"), //
		jMethod<::jvoid(::org::omg::CORBA::Request *)>("send_multiple_requests_deferred"), //
		jMethod<::jvoid(::org::omg::CORBA::Request *)>("send_multiple_requests_oneway"), //
		jMethod<::jvoid(::jboolean)>("shutdown"), //
		jMethod<::org::omg::CORBA::Object(::java::lang::String)>("string_to_object"), //
		jMethod<::jboolean()>("work_pending"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto connect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("connect")] != -1);
		return call<R>("connect", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TypeCode, typename... Args>
	auto create_abstract_interface_tc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_abstract_interface_tc")] != -1);
		return call<R>("create_abstract_interface_tc", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TypeCode, typename... Args>
	auto create_alias_tc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_alias_tc")] != -1);
		return call<R>("create_alias_tc", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Any, typename... Args>
	auto create_any(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_any")] != -1);
		return call<R>("create_any", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TypeCode, typename... Args>
	auto create_array_tc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_array_tc")] != -1);
		return call<R>("create_array_tc", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DynAny, typename... Args>
	auto create_basic_dyn_any(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_basic_dyn_any")] != -1);
		return call<R>("create_basic_dyn_any", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::ContextList, typename... Args>
	auto create_context_list(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_context_list")] != -1);
		return call<R>("create_context_list", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DynAny, typename... Args>
	auto create_dyn_any(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_dyn_any")] != -1);
		return call<R>("create_dyn_any", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DynArray, typename... Args>
	auto create_dyn_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_dyn_array")] != -1);
		return call<R>("create_dyn_array", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DynEnum, typename... Args>
	auto create_dyn_enum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_dyn_enum")] != -1);
		return call<R>("create_dyn_enum", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DynSequence, typename... Args>
	auto create_dyn_sequence(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_dyn_sequence")] != -1);
		return call<R>("create_dyn_sequence", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DynStruct, typename... Args>
	auto create_dyn_struct(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_dyn_struct")] != -1);
		return call<R>("create_dyn_struct", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DynUnion, typename... Args>
	auto create_dyn_union(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_dyn_union")] != -1);
		return call<R>("create_dyn_union", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TypeCode, typename... Args>
	auto create_enum_tc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_enum_tc")] != -1);
		return call<R>("create_enum_tc", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Environment, typename... Args>
	auto create_environment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_environment")] != -1);
		return call<R>("create_environment", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::ExceptionList, typename... Args>
	auto create_exception_list(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_exception_list")] != -1);
		return call<R>("create_exception_list", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TypeCode, typename... Args>
	auto create_exception_tc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_exception_tc")] != -1);
		return call<R>("create_exception_tc", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TypeCode, typename... Args>
	auto create_fixed_tc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_fixed_tc")] != -1);
		return call<R>("create_fixed_tc", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TypeCode, typename... Args>
	auto create_interface_tc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_interface_tc")] != -1);
		return call<R>("create_interface_tc", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::NVList, typename... Args>
	auto create_list(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_list")] != -1);
		return call<R>("create_list", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::NamedValue, typename... Args>
	auto create_named_value(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_named_value")] != -1);
		return call<R>("create_named_value", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TypeCode, typename... Args>
	auto create_native_tc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_native_tc")] != -1);
		return call<R>("create_native_tc", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::NVList, typename... Args>
	auto create_operation_list(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_operation_list")] != -1);
		return call<R>("create_operation_list", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::portable::OutputStream, typename... Args>
	auto create_output_stream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_output_stream")] != -1);
		return call<R>("create_output_stream", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Policy, typename... Args>
	auto create_policy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_policy")] != -1);
		return call<R>("create_policy", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TypeCode, typename... Args>
	auto create_recursive_sequence_tc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_recursive_sequence_tc")] != -1);
		return call<R>("create_recursive_sequence_tc", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TypeCode, typename... Args>
	auto create_recursive_tc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_recursive_tc")] != -1);
		return call<R>("create_recursive_tc", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TypeCode, typename... Args>
	auto create_sequence_tc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_sequence_tc")] != -1);
		return call<R>("create_sequence_tc", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TypeCode, typename... Args>
	auto create_string_tc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_string_tc")] != -1);
		return call<R>("create_string_tc", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TypeCode, typename... Args>
	auto create_struct_tc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_struct_tc")] != -1);
		return call<R>("create_struct_tc", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TypeCode, typename... Args>
	auto create_union_tc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_union_tc")] != -1);
		return call<R>("create_union_tc", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TypeCode, typename... Args>
	auto create_value_box_tc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_value_box_tc")] != -1);
		return call<R>("create_value_box_tc", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TypeCode, typename... Args>
	auto create_value_tc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_value_tc")] != -1);
		return call<R>("create_value_tc", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TypeCode, typename... Args>
	auto create_wstring_tc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_wstring_tc")] != -1);
		return call<R>("create_wstring_tc", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto destroy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("destroy")] != -1);
		return call<R>("destroy", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto disconnect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("disconnect")] != -1);
		return call<R>("disconnect", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Current, typename... Args>
	auto get_current(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_current")] != -1);
		return call<R>("get_current", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Context, typename... Args>
	auto get_default_context(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_default_context")] != -1);
		return call<R>("get_default_context", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Request, typename... Args>
	auto get_next_response(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_next_response")] != -1);
		return call<R>("get_next_response", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TypeCode, typename... Args>
	auto get_primitive_tc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_primitive_tc")] != -1);
		return call<R>("get_primitive_tc", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto get_service_information(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_service_information")] != -1);
		return call<R>("get_service_information", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::ORB, typename... Args>
	static auto init(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("init")] != -1);
		return scall<R>("init", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto list_initial_services(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("list_initial_services")] != -1);
		return call<R>("list_initial_services", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto object_to_string(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("object_to_string")] != -1);
		return call<R>("object_to_string", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto perform_work(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("perform_work")] != -1);
		return call<R>("perform_work", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto poll_next_response(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("poll_next_response")] != -1);
		return call<R>("poll_next_response", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto resolve_initial_references(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("resolve_initial_references")] != -1);
		return call<R>("resolve_initial_references", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto run(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("run")] != -1);
		return call<R>("run", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto send_multiple_requests_deferred(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("send_multiple_requests_deferred")] != -1);
		return call<R>("send_multiple_requests_deferred", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto send_multiple_requests_oneway(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("send_multiple_requests_oneway")] != -1);
		return call<R>("send_multiple_requests_oneway", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto shutdown(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shutdown")] != -1);
		return call<R>("shutdown", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto string_to_object(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("string_to_object")] != -1);
		return call<R>("string_to_object", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto work_pending(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("work_pending")] != -1);
		return call<R>("work_pending", std::forward<Args>(args)...);
	}

};

#endif
