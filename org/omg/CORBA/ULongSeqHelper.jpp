#ifndef org_omg_CORBA_ULongSeqHelper_HPP
#define org_omg_CORBA_ULongSeqHelper_HPP

#include "../../../jfwd_decl.hpp"

class ::org::omg::CORBA::ULongSeqHelper : public jObject<::org::omg::CORBA::ULongSeqHelper, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_omg_CORBA / "ULongSeqHelper";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jint *(::org::omg::CORBA::Any)>("extract"), //
		jMethod<::java::lang::String()>("id"), //
		jMethod<::jvoid(::org::omg::CORBA::Any, ::jint *)>("insert"), //
		jMethod<::jint *(::org::omg::CORBA::portable::InputStream)>("read"), //
		jMethod<::org::omg::CORBA::TypeCode()>("type"), //
		jMethod<::jvoid(::org::omg::CORBA::portable::OutputStream, ::jint *)>("write"), //
	};

	template<typename R = ::jint *, typename... Args>
	static auto extract(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("extract")] != -1);
		return scall<R>("extract", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto id(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("id")] != -1);
		return scall<R>("id", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto insert(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("insert")] != -1);
		return scall<R>("insert", forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	static auto read(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read")] != -1);
		return scall<R>("read", forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TypeCode, typename... Args>
	static auto type(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("type")] != -1);
		return scall<R>("type", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto write(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write")] != -1);
		return scall<R>("write", forward<Args>(args)...);
	}

};

#endif
