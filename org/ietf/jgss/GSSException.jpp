#ifndef org_ietf_jgss_GSSException_HPP
#define org_ietf_jgss_GSSException_HPP

#include "../../../jfwd_decl.hpp"

class ::org::ietf::jgss::GSSException : public jObject<::org::ietf::jgss::GSSException, ::java::lang::Exception> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_ietf_jgss / "GSSException";

	constexpr static Enume field_signatures{
		jField<::jint>("BAD_BINDINGS"), //
		jField<::jint>("BAD_MECH"), //
		jField<::jint>("BAD_MIC"), //
		jField<::jint>("BAD_NAME"), //
		jField<::jint>("BAD_NAMETYPE"), //
		jField<::jint>("BAD_QOP"), //
		jField<::jint>("BAD_STATUS"), //
		jField<::jint>("CONTEXT_EXPIRED"), //
		jField<::jint>("CREDENTIALS_EXPIRED"), //
		jField<::jint>("DEFECTIVE_CREDENTIAL"), //
		jField<::jint>("DEFECTIVE_TOKEN"), //
		jField<::jint>("DUPLICATE_ELEMENT"), //
		jField<::jint>("DUPLICATE_TOKEN"), //
		jField<::jint>("FAILURE"), //
		jField<::jint>("GAP_TOKEN"), //
		jField<::jint>("NAME_NOT_MN"), //
		jField<::jint>("NO_CONTEXT"), //
		jField<::jint>("NO_CRED"), //
		jField<::jint>("OLD_TOKEN"), //
		jField<::jint>("UNAUTHORIZED"), //
		jField<::jint>("UNAVAILABLE"), //
		jField<::jint>("UNSEQ_TOKEN"), //
	};

	template<typename F = ::jint>
	static auto BAD_BINDINGS() {
		static_assert(field_signatures[jField<F>("BAD_BINDINGS")] != -1);
		return sat<F>("BAD_BINDINGS");
	}

	template<typename F = ::jint>
	static auto BAD_MECH() {
		static_assert(field_signatures[jField<F>("BAD_MECH")] != -1);
		return sat<F>("BAD_MECH");
	}

	template<typename F = ::jint>
	static auto BAD_MIC() {
		static_assert(field_signatures[jField<F>("BAD_MIC")] != -1);
		return sat<F>("BAD_MIC");
	}

	template<typename F = ::jint>
	static auto BAD_NAME() {
		static_assert(field_signatures[jField<F>("BAD_NAME")] != -1);
		return sat<F>("BAD_NAME");
	}

	template<typename F = ::jint>
	static auto BAD_NAMETYPE() {
		static_assert(field_signatures[jField<F>("BAD_NAMETYPE")] != -1);
		return sat<F>("BAD_NAMETYPE");
	}

	template<typename F = ::jint>
	static auto BAD_QOP() {
		static_assert(field_signatures[jField<F>("BAD_QOP")] != -1);
		return sat<F>("BAD_QOP");
	}

	template<typename F = ::jint>
	static auto BAD_STATUS() {
		static_assert(field_signatures[jField<F>("BAD_STATUS")] != -1);
		return sat<F>("BAD_STATUS");
	}

	template<typename F = ::jint>
	static auto CONTEXT_EXPIRED() {
		static_assert(field_signatures[jField<F>("CONTEXT_EXPIRED")] != -1);
		return sat<F>("CONTEXT_EXPIRED");
	}

	template<typename F = ::jint>
	static auto CREDENTIALS_EXPIRED() {
		static_assert(field_signatures[jField<F>("CREDENTIALS_EXPIRED")] != -1);
		return sat<F>("CREDENTIALS_EXPIRED");
	}

	template<typename F = ::jint>
	static auto DEFECTIVE_CREDENTIAL() {
		static_assert(field_signatures[jField<F>("DEFECTIVE_CREDENTIAL")] != -1);
		return sat<F>("DEFECTIVE_CREDENTIAL");
	}

	template<typename F = ::jint>
	static auto DEFECTIVE_TOKEN() {
		static_assert(field_signatures[jField<F>("DEFECTIVE_TOKEN")] != -1);
		return sat<F>("DEFECTIVE_TOKEN");
	}

	template<typename F = ::jint>
	static auto DUPLICATE_ELEMENT() {
		static_assert(field_signatures[jField<F>("DUPLICATE_ELEMENT")] != -1);
		return sat<F>("DUPLICATE_ELEMENT");
	}

	template<typename F = ::jint>
	static auto DUPLICATE_TOKEN() {
		static_assert(field_signatures[jField<F>("DUPLICATE_TOKEN")] != -1);
		return sat<F>("DUPLICATE_TOKEN");
	}

	template<typename F = ::jint>
	static auto FAILURE() {
		static_assert(field_signatures[jField<F>("FAILURE")] != -1);
		return sat<F>("FAILURE");
	}

	template<typename F = ::jint>
	static auto GAP_TOKEN() {
		static_assert(field_signatures[jField<F>("GAP_TOKEN")] != -1);
		return sat<F>("GAP_TOKEN");
	}

	template<typename F = ::jint>
	static auto NAME_NOT_MN() {
		static_assert(field_signatures[jField<F>("NAME_NOT_MN")] != -1);
		return sat<F>("NAME_NOT_MN");
	}

	template<typename F = ::jint>
	static auto NO_CONTEXT() {
		static_assert(field_signatures[jField<F>("NO_CONTEXT")] != -1);
		return sat<F>("NO_CONTEXT");
	}

	template<typename F = ::jint>
	static auto NO_CRED() {
		static_assert(field_signatures[jField<F>("NO_CRED")] != -1);
		return sat<F>("NO_CRED");
	}

	template<typename F = ::jint>
	static auto OLD_TOKEN() {
		static_assert(field_signatures[jField<F>("OLD_TOKEN")] != -1);
		return sat<F>("OLD_TOKEN");
	}

	template<typename F = ::jint>
	static auto UNAUTHORIZED() {
		static_assert(field_signatures[jField<F>("UNAUTHORIZED")] != -1);
		return sat<F>("UNAUTHORIZED");
	}

	template<typename F = ::jint>
	static auto UNAVAILABLE() {
		static_assert(field_signatures[jField<F>("UNAVAILABLE")] != -1);
		return sat<F>("UNAVAILABLE");
	}

	template<typename F = ::jint>
	static auto UNSEQ_TOKEN() {
		static_assert(field_signatures[jField<F>("UNSEQ_TOKEN")] != -1);
		return sat<F>("UNSEQ_TOKEN");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint)>(), //
		jConstructor<::jvoid(::jint, ::jint, ::java::lang::String)>(), //
		jMethod<::jint()>("getMajor"), //
		jMethod<::java::lang::String()>("getMajorString"), //
		jMethod<::java::lang::String()>("getMessage"), //
		jMethod<::jint()>("getMinor"), //
		jMethod<::java::lang::String()>("getMinorString"), //
		jMethod<::jvoid(::jint, ::java::lang::String)>("setMinor"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getMajor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMajor")] != -1);
		return call<R>("getMajor", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMajorString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMajorString")] != -1);
		return call<R>("getMajorString", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMessage")] != -1);
		return call<R>("getMessage", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinor")] != -1);
		return call<R>("getMinor", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMinorString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinorString")] != -1);
		return call<R>("getMinorString", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMinor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMinor")] != -1);
		return call<R>("setMinor", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
