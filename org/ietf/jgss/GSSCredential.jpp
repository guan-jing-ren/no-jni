#ifndef org_ietf_jgss_GSSCredential_HPP
#define org_ietf_jgss_GSSCredential_HPP

#include "../../../jfwd_decl.hpp"

class ::org::ietf::jgss::GSSCredential : public jObject<::org::ietf::jgss::GSSCredential, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_ietf_jgss / "GSSCredential";

	constexpr static Enume field_signatures{
		jField<::jint>("ACCEPT_ONLY"), //
		jField<::jint>("DEFAULT_LIFETIME"), //
		jField<::jint>("INDEFINITE_LIFETIME"), //
		jField<::jint>("INITIATE_AND_ACCEPT"), //
		jField<::jint>("INITIATE_ONLY"), //
	};

	template<typename F = ::jint>
	static auto ACCEPT_ONLY() {
		static_assert(field_signatures[jField<F>("ACCEPT_ONLY")] != -1);
		return sat<F>("ACCEPT_ONLY");
	}

	template<typename F = ::jint>
	static auto DEFAULT_LIFETIME() {
		static_assert(field_signatures[jField<F>("DEFAULT_LIFETIME")] != -1);
		return sat<F>("DEFAULT_LIFETIME");
	}

	template<typename F = ::jint>
	static auto INDEFINITE_LIFETIME() {
		static_assert(field_signatures[jField<F>("INDEFINITE_LIFETIME")] != -1);
		return sat<F>("INDEFINITE_LIFETIME");
	}

	template<typename F = ::jint>
	static auto INITIATE_AND_ACCEPT() {
		static_assert(field_signatures[jField<F>("INITIATE_AND_ACCEPT")] != -1);
		return sat<F>("INITIATE_AND_ACCEPT");
	}

	template<typename F = ::jint>
	static auto INITIATE_ONLY() {
		static_assert(field_signatures[jField<F>("INITIATE_ONLY")] != -1);
		return sat<F>("INITIATE_ONLY");
	}

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::org::ietf::jgss::GSSName, ::jint, ::jint, ::org::ietf::jgss::Oid, ::jint)>("add"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::org::ietf::jgss::Oid *()>("getMechs"), //
		jMethod<::org::ietf::jgss::GSSName()>("getName"), //
		jMethod<::org::ietf::jgss::GSSName(::org::ietf::jgss::Oid)>("getName"), //
		jMethod<::jint(::org::ietf::jgss::Oid)>("getRemainingAcceptLifetime"), //
		jMethod<::jint(::org::ietf::jgss::Oid)>("getRemainingInitLifetime"), //
		jMethod<::jint()>("getRemainingLifetime"), //
		jMethod<::jint()>("getUsage"), //
		jMethod<::jint(::org::ietf::jgss::Oid)>("getUsage"), //
		jMethod<::jint()>("hashCode"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::org::ietf::jgss::Oid *, typename... Args>
	auto getMechs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMechs")] != -1);
		return call<R>("getMechs", std::forward<Args>(args)...);
	}

	template<typename R = ::org::ietf::jgss::GSSName, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRemainingAcceptLifetime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRemainingAcceptLifetime")] != -1);
		return call<R>("getRemainingAcceptLifetime", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRemainingInitLifetime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRemainingInitLifetime")] != -1);
		return call<R>("getRemainingInitLifetime", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRemainingLifetime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRemainingLifetime")] != -1);
		return call<R>("getRemainingLifetime", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getUsage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUsage")] != -1);
		return call<R>("getUsage", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

};

#endif
