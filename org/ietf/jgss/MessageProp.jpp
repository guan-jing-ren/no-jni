#ifndef org_ietf_jgss_MessageProp_HPP
#define org_ietf_jgss_MessageProp_HPP

#include "../../../jfwd_decl.hpp"

class ::org::ietf::jgss::MessageProp : public jObject<::org::ietf::jgss::MessageProp, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::org_ietf_jgss / "MessageProp";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint, ::jboolean)>(), //
		jConstructor<::jvoid(::jboolean)>(), //
		jMethod<::jint()>("getMinorStatus"), //
		jMethod<::java::lang::String()>("getMinorString"), //
		jMethod<::jboolean()>("getPrivacy"), //
		jMethod<::jint()>("getQOP"), //
		jMethod<::jboolean()>("isDuplicateToken"), //
		jMethod<::jboolean()>("isGapToken"), //
		jMethod<::jboolean()>("isOldToken"), //
		jMethod<::jboolean()>("isUnseqToken"), //
		jMethod<::jvoid(::jboolean)>("setPrivacy"), //
		jMethod<::jvoid(::jint)>("setQOP"), //
		jMethod<::jvoid(::jboolean, ::jboolean, ::jboolean, ::jboolean, ::jint, ::java::lang::String)>("setSupplementaryStates"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getMinorStatus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinorStatus")] != -1);
		return call<R>("getMinorStatus", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMinorString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinorString")] != -1);
		return call<R>("getMinorString", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getPrivacy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrivacy")] != -1);
		return call<R>("getPrivacy", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getQOP(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getQOP")] != -1);
		return call<R>("getQOP", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDuplicateToken(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDuplicateToken")] != -1);
		return call<R>("isDuplicateToken", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isGapToken(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isGapToken")] != -1);
		return call<R>("isGapToken", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isOldToken(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isOldToken")] != -1);
		return call<R>("isOldToken", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isUnseqToken(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isUnseqToken")] != -1);
		return call<R>("isUnseqToken", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPrivacy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPrivacy")] != -1);
		return call<R>("setPrivacy", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setQOP(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setQOP")] != -1);
		return call<R>("setQOP", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSupplementaryStates(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSupplementaryStates")] != -1);
		return call<R>("setSupplementaryStates", std::forward<Args>(args)...);
	}

};

#endif
