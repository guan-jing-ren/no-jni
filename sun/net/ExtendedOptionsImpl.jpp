#ifndef sun_net_ExtendedOptionsImpl_HPP
#define sun_net_ExtendedOptionsImpl_HPP

#include "../../jfwd_decl.hpp"

class ::sun::net::ExtendedOptionsImpl : public jObject<::sun::net::ExtendedOptionsImpl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net / "ExtendedOptionsImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::net::SocketOption)>("checkGetOptionPermission"), //
		jMethod<::jvoid(::java::net::SocketOption)>("checkSetOptionPermission"), //
		jMethod<::jvoid(::java::lang::Object, ::java::lang::Class)>("checkValueType"), //
		jMethod<::jboolean()>("flowSupported"), //
		jMethod<::jvoid(::java::io::FileDescriptor, ::jdk::net::SocketFlow)>("getFlowOption"), //
		jMethod<::jvoid(::java::io::FileDescriptor, ::jdk::net::SocketFlow)>("setFlowOption"), //
	};

	template<typename R = ::jvoid, typename... Args>
	static auto checkGetOptionPermission(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkGetOptionPermission")] != -1);
		return scall<R>("checkGetOptionPermission", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto checkSetOptionPermission(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkSetOptionPermission")] != -1);
		return scall<R>("checkSetOptionPermission", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto checkValueType(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkValueType")] != -1);
		return scall<R>("checkValueType", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto flowSupported(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("flowSupported")] != -1);
		return scall<R>("flowSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto getFlowOption(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFlowOption")] != -1);
		return scall<R>("getFlowOption", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setFlowOption(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFlowOption")] != -1);
		return scall<R>("setFlowOption", std::forward<Args>(args)...);
	}

};

#endif
