#ifndef sun_net_ProgressSource$State_HPP
#define sun_net_ProgressSource$State_HPP

#include "../../jfwd_decl.hpp"

class ::sun::net::ProgressSource$State : public jObject<::sun::net::ProgressSource$State, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net / "ProgressSource$State";

	constexpr static Enume field_signatures{
		jField<::sun::net::ProgressSource$State>("CONNECTED"), //
		jField<::sun::net::ProgressSource$State>("DELETE"), //
		jField<::sun::net::ProgressSource$State>("NEW"), //
		jField<::sun::net::ProgressSource$State>("UPDATE"), //
	};

	template<typename F = ::sun::net::ProgressSource$State>
	static auto CONNECTED() {
		static_assert(field_signatures[jField<F>("CONNECTED")] != -1);
		return sat<F>("CONNECTED");
	}

	template<typename F = ::sun::net::ProgressSource$State>
	static auto DELETE() {
		static_assert(field_signatures[jField<F>("DELETE")] != -1);
		return sat<F>("DELETE");
	}

	template<typename F = ::sun::net::ProgressSource$State>
	static auto NEW() {
		static_assert(field_signatures[jField<F>("NEW")] != -1);
		return sat<F>("NEW");
	}

	template<typename F = ::sun::net::ProgressSource$State>
	static auto UPDATE() {
		static_assert(field_signatures[jField<F>("UPDATE")] != -1);
		return sat<F>("UPDATE");
	}

	constexpr static Enume method_signatures{
		jMethod<::sun::net::ProgressSource$State(::java::lang::String)>("valueOf"), //
		jMethod<::sun::net::ProgressSource$State *()>("values"), //
	};

	template<typename R = ::sun::net::ProgressSource$State, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::net::ProgressSource$State *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
