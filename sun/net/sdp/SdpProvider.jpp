#ifndef sun_net_sdp_SdpProvider_HPP
#define sun_net_sdp_SdpProvider_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::net::sdp::SdpProvider : public jObject<::sun::net::sdp::SdpProvider, ::sun::net::NetHooks$Provider> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net_sdp / "SdpProvider";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::io::FileDescriptor, ::java::net::InetAddress, ::jint)>("implBeforeTcpBind"), //
		jMethod<::jvoid(::java::io::FileDescriptor, ::java::net::InetAddress, ::jint)>("implBeforeTcpConnect"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto implBeforeTcpBind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("implBeforeTcpBind")] != -1);
		return call<R>("implBeforeTcpBind", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto implBeforeTcpConnect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("implBeforeTcpConnect")] != -1);
		return call<R>("implBeforeTcpConnect", std::forward<Args>(args)...);
	}

};

#endif
