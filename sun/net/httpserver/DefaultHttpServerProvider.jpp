#ifndef sun_net_httpserver_DefaultHttpServerProvider_HPP
#define sun_net_httpserver_DefaultHttpServerProvider_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::net::httpserver::DefaultHttpServerProvider : public jObject<::sun::net::httpserver::DefaultHttpServerProvider, ::com::sun::net::httpserver::spi::HttpServerProvider> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net_httpserver / "DefaultHttpServerProvider";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::com::sun::net::httpserver::HttpServer(::java::net::InetSocketAddress, ::jint)>("createHttpServer"), //
		jMethod<::com::sun::net::httpserver::HttpsServer(::java::net::InetSocketAddress, ::jint)>("createHttpsServer"), //
	};

	template<typename R = ::com::sun::net::httpserver::HttpServer, typename... Args>
	auto createHttpServer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createHttpServer")] != -1);
		return call<R>("createHttpServer", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::net::httpserver::HttpsServer, typename... Args>
	auto createHttpsServer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createHttpsServer")] != -1);
		return call<R>("createHttpsServer", std::forward<Args>(args)...);
	}

};

#endif
