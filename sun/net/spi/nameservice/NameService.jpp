#ifndef sun_net_spi_nameservice_NameService_HPP
#define sun_net_spi_nameservice_NameService_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::net::spi::nameservice::NameService : public jObject<::sun::net::spi::nameservice::NameService, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net_spi_nameservice / "NameService";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String(::jbyte *)>("getHostByAddr"), //
		jMethod<::java::net::InetAddress *(::java::lang::String)>("lookupAllHostAddr"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getHostByAddr(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHostByAddr")] != -1);
		return call<R>("getHostByAddr", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::InetAddress *, typename... Args>
	auto lookupAllHostAddr(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lookupAllHostAddr")] != -1);
		return call<R>("lookupAllHostAddr", std::forward<Args>(args)...);
	}

};

#endif
