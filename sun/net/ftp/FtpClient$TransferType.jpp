#ifndef sun_net_ftp_FtpClient$TransferType_HPP
#define sun_net_ftp_FtpClient$TransferType_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::net::ftp::FtpClient$TransferType : public jObject<::sun::net::ftp::FtpClient$TransferType, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net_ftp / "FtpClient$TransferType";

	constexpr static Enume field_signatures{
		jField<::sun::net::ftp::FtpClient$TransferType>("ASCII"), //
		jField<::sun::net::ftp::FtpClient$TransferType>("BINARY"), //
		jField<::sun::net::ftp::FtpClient$TransferType>("EBCDIC"), //
	};

	template<typename F = ::sun::net::ftp::FtpClient$TransferType>
	static auto ASCII_() {
		static_assert(field_signatures[jField<F>("ASCII")] != -1);
		return sat<F>("ASCII");
	}

	template<typename F = ::sun::net::ftp::FtpClient$TransferType>
	static auto BINARY() {
		static_assert(field_signatures[jField<F>("BINARY")] != -1);
		return sat<F>("BINARY");
	}

	template<typename F = ::sun::net::ftp::FtpClient$TransferType>
	static auto EBCDIC() {
		static_assert(field_signatures[jField<F>("EBCDIC")] != -1);
		return sat<F>("EBCDIC");
	}

	constexpr static Enume method_signatures{
		jMethod<::sun::net::ftp::FtpClient$TransferType(::java::lang::String)>("valueOf"), //
		jMethod<::sun::net::ftp::FtpClient$TransferType *()>("values"), //
	};

	template<typename R = ::sun::net::ftp::FtpClient$TransferType, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::net::ftp::FtpClient$TransferType *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
