#ifndef sun_net_ftp_FtpDirEntry_HPP
#define sun_net_ftp_FtpDirEntry_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::net::ftp::FtpDirEntry : public jObject<::sun::net::ftp::FtpDirEntry, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net_ftp / "FtpDirEntry";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
		jMethod<::sun::net::ftp::FtpDirEntry(::java::lang::String, ::java::lang::String)>("addFact"), //
		jMethod<::jboolean(::sun::net::ftp::FtpDirEntry$Permission)>("canExexcute"), //
		jMethod<::jboolean(::sun::net::ftp::FtpDirEntry$Permission)>("canRead"), //
		jMethod<::jboolean(::sun::net::ftp::FtpDirEntry$Permission)>("canWrite"), //
		jMethod<::java::util::Date()>("getCreated"), //
		jMethod<::java::lang::String(::java::lang::String)>("getFact"), //
		jMethod<::java::lang::String()>("getGroup"), //
		jMethod<::java::util::Date()>("getLastModified"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jlong()>("getSize"), //
		jMethod<::sun::net::ftp::FtpDirEntry$Type()>("getType"), //
		jMethod<::java::lang::String()>("getUser"), //
		jMethod<::sun::net::ftp::FtpDirEntry(::java::util::Date)>("setCreated"), //
		jMethod<::sun::net::ftp::FtpDirEntry(::java::lang::String)>("setGroup"), //
		jMethod<::sun::net::ftp::FtpDirEntry(::java::util::Date)>("setLastModified"), //
		jMethod<::sun::net::ftp::FtpDirEntry(::jboolean **)>("setPermissions"), //
		jMethod<::sun::net::ftp::FtpDirEntry(::jlong)>("setSize"), //
		jMethod<::sun::net::ftp::FtpDirEntry(::sun::net::ftp::FtpDirEntry$Type)>("setType"), //
		jMethod<::sun::net::ftp::FtpDirEntry(::java::lang::String)>("setUser"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::sun::net::ftp::FtpDirEntry, typename... Args>
	auto addFact(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addFact")] != -1);
		return call<R>("addFact", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto canExexcute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canExexcute")] != -1);
		return call<R>("canExexcute", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto canRead(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canRead")] != -1);
		return call<R>("canRead", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto canWrite(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canWrite")] != -1);
		return call<R>("canWrite", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Date, typename... Args>
	auto getCreated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCreated")] != -1);
		return call<R>("getCreated", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFact(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFact")] != -1);
		return call<R>("getFact", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getGroup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGroup")] != -1);
		return call<R>("getGroup", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Date, typename... Args>
	auto getLastModified(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLastModified")] != -1);
		return call<R>("getLastModified", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return call<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::net::ftp::FtpDirEntry$Type, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUser(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUser")] != -1);
		return call<R>("getUser", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::net::ftp::FtpDirEntry, typename... Args>
	auto setCreated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCreated")] != -1);
		return call<R>("setCreated", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::net::ftp::FtpDirEntry, typename... Args>
	auto setGroup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setGroup")] != -1);
		return call<R>("setGroup", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::net::ftp::FtpDirEntry, typename... Args>
	auto setLastModified(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLastModified")] != -1);
		return call<R>("setLastModified", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::net::ftp::FtpDirEntry, typename... Args>
	auto setPermissions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPermissions")] != -1);
		return call<R>("setPermissions", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::net::ftp::FtpDirEntry, typename... Args>
	auto setSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSize")] != -1);
		return call<R>("setSize", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::net::ftp::FtpDirEntry, typename... Args>
	auto setType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setType")] != -1);
		return call<R>("setType", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::net::ftp::FtpDirEntry, typename... Args>
	auto setUser(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUser")] != -1);
		return call<R>("setUser", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
