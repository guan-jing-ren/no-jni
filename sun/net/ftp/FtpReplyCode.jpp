#ifndef sun_net_ftp_FtpReplyCode_HPP
#define sun_net_ftp_FtpReplyCode_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::net::ftp::FtpReplyCode : public jObject<::sun::net::ftp::FtpReplyCode, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net_ftp / "FtpReplyCode";

	constexpr static Enume field_signatures{
		jField<::sun::net::ftp::FtpReplyCode>("ACTION_ABORTED"), //
		jField<::sun::net::ftp::FtpReplyCode>("BAD_SEQUENCE"), //
		jField<::sun::net::ftp::FtpReplyCode>("CANT_OPEN_DATA_CONNECTION"), //
		jField<::sun::net::ftp::FtpReplyCode>("CLOSING_DATA_CONNECTION"), //
		jField<::sun::net::ftp::FtpReplyCode>("COMMAND_OK"), //
		jField<::sun::net::ftp::FtpReplyCode>("COMMAND_UNRECOGNIZED"), //
		jField<::sun::net::ftp::FtpReplyCode>("CONNECTION_CLOSED"), //
		jField<::sun::net::ftp::FtpReplyCode>("DATA_CONNECTION_ALREADY_OPEN"), //
		jField<::sun::net::ftp::FtpReplyCode>("DATA_CONNECTION_OPEN"), //
		jField<::sun::net::ftp::FtpReplyCode>("DIRECTORY_STATUS"), //
		jField<::sun::net::ftp::FtpReplyCode>("ENTERING_EXT_PASSIVE_MODE"), //
		jField<::sun::net::ftp::FtpReplyCode>("ENTERING_PASSIVE_MODE"), //
		jField<::sun::net::ftp::FtpReplyCode>("EXCEEDED_STORAGE"), //
		jField<::sun::net::ftp::FtpReplyCode>("FAILED_SECURITY_CHECK"), //
		jField<::sun::net::ftp::FtpReplyCode>("FILE_ACTION_NOT_TAKEN"), //
		jField<::sun::net::ftp::FtpReplyCode>("FILE_ACTION_OK"), //
		jField<::sun::net::ftp::FtpReplyCode>("FILE_ACTION_PENDING"), //
		jField<::sun::net::ftp::FtpReplyCode>("FILE_NAME_NOT_ALLOWED"), //
		jField<::sun::net::ftp::FtpReplyCode>("FILE_STATUS"), //
		jField<::sun::net::ftp::FtpReplyCode>("FILE_STATUS_OK"), //
		jField<::sun::net::ftp::FtpReplyCode>("FILE_UNAVAILABLE"), //
		jField<::sun::net::ftp::FtpReplyCode>("HELP_MESSAGE"), //
		jField<::sun::net::ftp::FtpReplyCode>("INSUFFICIENT_STORAGE"), //
		jField<::sun::net::ftp::FtpReplyCode>("INVALID_PARAMETER"), //
		jField<::sun::net::ftp::FtpReplyCode>("LOGGED_IN"), //
		jField<::sun::net::ftp::FtpReplyCode>("NAME_SYSTEM_TYPE"), //
		jField<::sun::net::ftp::FtpReplyCode>("NEED_ACCOUNT"), //
		jField<::sun::net::ftp::FtpReplyCode>("NEED_ACCOUNT_FOR_STORING"), //
		jField<::sun::net::ftp::FtpReplyCode>("NEED_ADAT"), //
		jField<::sun::net::ftp::FtpReplyCode>("NEED_MORE_ADAT"), //
		jField<::sun::net::ftp::FtpReplyCode>("NEED_PASSWORD"), //
		jField<::sun::net::ftp::FtpReplyCode>("NEED_SECURITY_RESOURCE"), //
		jField<::sun::net::ftp::FtpReplyCode>("NOT_IMPLEMENTED"), //
		jField<::sun::net::ftp::FtpReplyCode>("NOT_IMPLEMENTED_FOR_PARAMETER"), //
		jField<::sun::net::ftp::FtpReplyCode>("NOT_LOGGED_IN"), //
		jField<::sun::net::ftp::FtpReplyCode>("PAGE_TYPE_UNKNOWN"), //
		jField<::sun::net::ftp::FtpReplyCode>("PATHNAME_CREATED"), //
		jField<::sun::net::ftp::FtpReplyCode>("PROTECTED_REPLY"), //
		jField<::sun::net::ftp::FtpReplyCode>("PROT_LEVEL_DENIED"), //
		jField<::sun::net::ftp::FtpReplyCode>("PROT_LEVEL_NOT_SUPPORTED_BY_SECURITY"), //
		jField<::sun::net::ftp::FtpReplyCode>("REQUEST_DENIED"), //
		jField<::sun::net::ftp::FtpReplyCode>("RESTART_MARKER"), //
		jField<::sun::net::ftp::FtpReplyCode>("SECURELY_LOGGED_IN"), //
		jField<::sun::net::ftp::FtpReplyCode>("SECURITY_EXCHANGE_COMPLETE"), //
		jField<::sun::net::ftp::FtpReplyCode>("SECURITY_EXCHANGE_OK"), //
		jField<::sun::net::ftp::FtpReplyCode>("SERVICE_CLOSING"), //
		jField<::sun::net::ftp::FtpReplyCode>("SERVICE_NOT_AVAILABLE"), //
		jField<::sun::net::ftp::FtpReplyCode>("SERVICE_READY"), //
		jField<::sun::net::ftp::FtpReplyCode>("SERVICE_READY_IN"), //
		jField<::sun::net::ftp::FtpReplyCode>("SYSTEM_STATUS"), //
		jField<::sun::net::ftp::FtpReplyCode>("UNKNOWN_ERROR"), //
		jField<::sun::net::ftp::FtpReplyCode>("UNSUPPORTED_PROT_LEVEL"), //
	};

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto ACTION_ABORTED() {
		static_assert(field_signatures[jField<F>("ACTION_ABORTED")] != -1);
		return sat<F>("ACTION_ABORTED");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto BAD_SEQUENCE() {
		static_assert(field_signatures[jField<F>("BAD_SEQUENCE")] != -1);
		return sat<F>("BAD_SEQUENCE");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto CANT_OPEN_DATA_CONNECTION() {
		static_assert(field_signatures[jField<F>("CANT_OPEN_DATA_CONNECTION")] != -1);
		return sat<F>("CANT_OPEN_DATA_CONNECTION");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto CLOSING_DATA_CONNECTION() {
		static_assert(field_signatures[jField<F>("CLOSING_DATA_CONNECTION")] != -1);
		return sat<F>("CLOSING_DATA_CONNECTION");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto COMMAND_OK() {
		static_assert(field_signatures[jField<F>("COMMAND_OK")] != -1);
		return sat<F>("COMMAND_OK");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto COMMAND_UNRECOGNIZED() {
		static_assert(field_signatures[jField<F>("COMMAND_UNRECOGNIZED")] != -1);
		return sat<F>("COMMAND_UNRECOGNIZED");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto CONNECTION_CLOSED() {
		static_assert(field_signatures[jField<F>("CONNECTION_CLOSED")] != -1);
		return sat<F>("CONNECTION_CLOSED");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto DATA_CONNECTION_ALREADY_OPEN() {
		static_assert(field_signatures[jField<F>("DATA_CONNECTION_ALREADY_OPEN")] != -1);
		return sat<F>("DATA_CONNECTION_ALREADY_OPEN");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto DATA_CONNECTION_OPEN() {
		static_assert(field_signatures[jField<F>("DATA_CONNECTION_OPEN")] != -1);
		return sat<F>("DATA_CONNECTION_OPEN");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto DIRECTORY_STATUS() {
		static_assert(field_signatures[jField<F>("DIRECTORY_STATUS")] != -1);
		return sat<F>("DIRECTORY_STATUS");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto ENTERING_EXT_PASSIVE_MODE() {
		static_assert(field_signatures[jField<F>("ENTERING_EXT_PASSIVE_MODE")] != -1);
		return sat<F>("ENTERING_EXT_PASSIVE_MODE");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto ENTERING_PASSIVE_MODE() {
		static_assert(field_signatures[jField<F>("ENTERING_PASSIVE_MODE")] != -1);
		return sat<F>("ENTERING_PASSIVE_MODE");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto EXCEEDED_STORAGE() {
		static_assert(field_signatures[jField<F>("EXCEEDED_STORAGE")] != -1);
		return sat<F>("EXCEEDED_STORAGE");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto FAILED_SECURITY_CHECK() {
		static_assert(field_signatures[jField<F>("FAILED_SECURITY_CHECK")] != -1);
		return sat<F>("FAILED_SECURITY_CHECK");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto FILE_ACTION_NOT_TAKEN() {
		static_assert(field_signatures[jField<F>("FILE_ACTION_NOT_TAKEN")] != -1);
		return sat<F>("FILE_ACTION_NOT_TAKEN");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto FILE_ACTION_OK() {
		static_assert(field_signatures[jField<F>("FILE_ACTION_OK")] != -1);
		return sat<F>("FILE_ACTION_OK");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto FILE_ACTION_PENDING() {
		static_assert(field_signatures[jField<F>("FILE_ACTION_PENDING")] != -1);
		return sat<F>("FILE_ACTION_PENDING");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto FILE_NAME_NOT_ALLOWED() {
		static_assert(field_signatures[jField<F>("FILE_NAME_NOT_ALLOWED")] != -1);
		return sat<F>("FILE_NAME_NOT_ALLOWED");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto FILE_STATUS() {
		static_assert(field_signatures[jField<F>("FILE_STATUS")] != -1);
		return sat<F>("FILE_STATUS");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto FILE_STATUS_OK() {
		static_assert(field_signatures[jField<F>("FILE_STATUS_OK")] != -1);
		return sat<F>("FILE_STATUS_OK");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto FILE_UNAVAILABLE() {
		static_assert(field_signatures[jField<F>("FILE_UNAVAILABLE")] != -1);
		return sat<F>("FILE_UNAVAILABLE");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto HELP_MESSAGE() {
		static_assert(field_signatures[jField<F>("HELP_MESSAGE")] != -1);
		return sat<F>("HELP_MESSAGE");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto INSUFFICIENT_STORAGE() {
		static_assert(field_signatures[jField<F>("INSUFFICIENT_STORAGE")] != -1);
		return sat<F>("INSUFFICIENT_STORAGE");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto INVALID_PARAMETER() {
		static_assert(field_signatures[jField<F>("INVALID_PARAMETER")] != -1);
		return sat<F>("INVALID_PARAMETER");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto LOGGED_IN() {
		static_assert(field_signatures[jField<F>("LOGGED_IN")] != -1);
		return sat<F>("LOGGED_IN");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto NAME_SYSTEM_TYPE() {
		static_assert(field_signatures[jField<F>("NAME_SYSTEM_TYPE")] != -1);
		return sat<F>("NAME_SYSTEM_TYPE");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto NEED_ACCOUNT() {
		static_assert(field_signatures[jField<F>("NEED_ACCOUNT")] != -1);
		return sat<F>("NEED_ACCOUNT");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto NEED_ACCOUNT_FOR_STORING() {
		static_assert(field_signatures[jField<F>("NEED_ACCOUNT_FOR_STORING")] != -1);
		return sat<F>("NEED_ACCOUNT_FOR_STORING");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto NEED_ADAT() {
		static_assert(field_signatures[jField<F>("NEED_ADAT")] != -1);
		return sat<F>("NEED_ADAT");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto NEED_MORE_ADAT() {
		static_assert(field_signatures[jField<F>("NEED_MORE_ADAT")] != -1);
		return sat<F>("NEED_MORE_ADAT");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto NEED_PASSWORD() {
		static_assert(field_signatures[jField<F>("NEED_PASSWORD")] != -1);
		return sat<F>("NEED_PASSWORD");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto NEED_SECURITY_RESOURCE() {
		static_assert(field_signatures[jField<F>("NEED_SECURITY_RESOURCE")] != -1);
		return sat<F>("NEED_SECURITY_RESOURCE");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto NOT_IMPLEMENTED() {
		static_assert(field_signatures[jField<F>("NOT_IMPLEMENTED")] != -1);
		return sat<F>("NOT_IMPLEMENTED");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto NOT_IMPLEMENTED_FOR_PARAMETER() {
		static_assert(field_signatures[jField<F>("NOT_IMPLEMENTED_FOR_PARAMETER")] != -1);
		return sat<F>("NOT_IMPLEMENTED_FOR_PARAMETER");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto NOT_LOGGED_IN() {
		static_assert(field_signatures[jField<F>("NOT_LOGGED_IN")] != -1);
		return sat<F>("NOT_LOGGED_IN");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto PAGE_TYPE_UNKNOWN() {
		static_assert(field_signatures[jField<F>("PAGE_TYPE_UNKNOWN")] != -1);
		return sat<F>("PAGE_TYPE_UNKNOWN");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto PATHNAME_CREATED() {
		static_assert(field_signatures[jField<F>("PATHNAME_CREATED")] != -1);
		return sat<F>("PATHNAME_CREATED");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto PROTECTED_REPLY() {
		static_assert(field_signatures[jField<F>("PROTECTED_REPLY")] != -1);
		return sat<F>("PROTECTED_REPLY");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto PROT_LEVEL_DENIED() {
		static_assert(field_signatures[jField<F>("PROT_LEVEL_DENIED")] != -1);
		return sat<F>("PROT_LEVEL_DENIED");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto PROT_LEVEL_NOT_SUPPORTED_BY_SECURITY() {
		static_assert(field_signatures[jField<F>("PROT_LEVEL_NOT_SUPPORTED_BY_SECURITY")] != -1);
		return sat<F>("PROT_LEVEL_NOT_SUPPORTED_BY_SECURITY");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto REQUEST_DENIED() {
		static_assert(field_signatures[jField<F>("REQUEST_DENIED")] != -1);
		return sat<F>("REQUEST_DENIED");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto RESTART_MARKER() {
		static_assert(field_signatures[jField<F>("RESTART_MARKER")] != -1);
		return sat<F>("RESTART_MARKER");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto SECURELY_LOGGED_IN() {
		static_assert(field_signatures[jField<F>("SECURELY_LOGGED_IN")] != -1);
		return sat<F>("SECURELY_LOGGED_IN");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto SECURITY_EXCHANGE_COMPLETE() {
		static_assert(field_signatures[jField<F>("SECURITY_EXCHANGE_COMPLETE")] != -1);
		return sat<F>("SECURITY_EXCHANGE_COMPLETE");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto SECURITY_EXCHANGE_OK() {
		static_assert(field_signatures[jField<F>("SECURITY_EXCHANGE_OK")] != -1);
		return sat<F>("SECURITY_EXCHANGE_OK");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto SERVICE_CLOSING() {
		static_assert(field_signatures[jField<F>("SERVICE_CLOSING")] != -1);
		return sat<F>("SERVICE_CLOSING");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto SERVICE_NOT_AVAILABLE() {
		static_assert(field_signatures[jField<F>("SERVICE_NOT_AVAILABLE")] != -1);
		return sat<F>("SERVICE_NOT_AVAILABLE");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto SERVICE_READY() {
		static_assert(field_signatures[jField<F>("SERVICE_READY")] != -1);
		return sat<F>("SERVICE_READY");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto SERVICE_READY_IN() {
		static_assert(field_signatures[jField<F>("SERVICE_READY_IN")] != -1);
		return sat<F>("SERVICE_READY_IN");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto SYSTEM_STATUS() {
		static_assert(field_signatures[jField<F>("SYSTEM_STATUS")] != -1);
		return sat<F>("SYSTEM_STATUS");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto UNKNOWN_ERROR() {
		static_assert(field_signatures[jField<F>("UNKNOWN_ERROR")] != -1);
		return sat<F>("UNKNOWN_ERROR");
	}

	template<typename F = ::sun::net::ftp::FtpReplyCode>
	static auto UNSUPPORTED_PROT_LEVEL() {
		static_assert(field_signatures[jField<F>("UNSUPPORTED_PROT_LEVEL")] != -1);
		return sat<F>("UNSUPPORTED_PROT_LEVEL");
	}

	constexpr static Enume method_signatures{
		jMethod<::sun::net::ftp::FtpReplyCode(::jint)>("find"), //
		jMethod<::jint()>("getValue"), //
		jMethod<::jboolean()>("isAuthentication"), //
		jMethod<::jboolean()>("isConnection"), //
		jMethod<::jboolean()>("isFileSystem"), //
		jMethod<::jboolean()>("isInformation"), //
		jMethod<::jboolean()>("isPermanentNegative"), //
		jMethod<::jboolean()>("isPositiveCompletion"), //
		jMethod<::jboolean()>("isPositiveIntermediate"), //
		jMethod<::jboolean()>("isPositivePreliminary"), //
		jMethod<::jboolean()>("isProtectedReply"), //
		jMethod<::jboolean()>("isSyntax"), //
		jMethod<::jboolean()>("isTransientNegative"), //
		jMethod<::jboolean()>("isUnspecified"), //
		jMethod<::sun::net::ftp::FtpReplyCode(::java::lang::String)>("valueOf"), //
		jMethod<::sun::net::ftp::FtpReplyCode *()>("values"), //
	};

	template<typename R = ::sun::net::ftp::FtpReplyCode, typename... Args>
	static auto find(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("find")] != -1);
		return scall<R>("find", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAuthentication(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAuthentication")] != -1);
		return call<R>("isAuthentication", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isConnection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isConnection")] != -1);
		return call<R>("isConnection", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFileSystem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFileSystem")] != -1);
		return call<R>("isFileSystem", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isInformation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isInformation")] != -1);
		return call<R>("isInformation", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPermanentNegative(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPermanentNegative")] != -1);
		return call<R>("isPermanentNegative", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPositiveCompletion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPositiveCompletion")] != -1);
		return call<R>("isPositiveCompletion", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPositiveIntermediate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPositiveIntermediate")] != -1);
		return call<R>("isPositiveIntermediate", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPositivePreliminary(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPositivePreliminary")] != -1);
		return call<R>("isPositivePreliminary", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isProtectedReply(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isProtectedReply")] != -1);
		return call<R>("isProtectedReply", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSyntax(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSyntax")] != -1);
		return call<R>("isSyntax", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isTransientNegative(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isTransientNegative")] != -1);
		return call<R>("isTransientNegative", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isUnspecified(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isUnspecified")] != -1);
		return call<R>("isUnspecified", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::net::ftp::FtpReplyCode, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::net::ftp::FtpReplyCode *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
