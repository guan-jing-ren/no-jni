#ifndef sun_net_ftp_FtpDirEntry$Type_HPP
#define sun_net_ftp_FtpDirEntry$Type_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::net::ftp::FtpDirEntry$Type : public jObject<::sun::net::ftp::FtpDirEntry$Type, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net_ftp / "FtpDirEntry$Type";

	constexpr static Enume field_signatures{
		jField<::sun::net::ftp::FtpDirEntry$Type>("CDIR"), //
		jField<::sun::net::ftp::FtpDirEntry$Type>("DIR"), //
		jField<::sun::net::ftp::FtpDirEntry$Type>("FILE"), //
		jField<::sun::net::ftp::FtpDirEntry$Type>("LINK"), //
		jField<::sun::net::ftp::FtpDirEntry$Type>("PDIR"), //
	};

	template<typename F = ::sun::net::ftp::FtpDirEntry$Type>
	static auto CDIR() {
		static_assert(field_signatures[jField<F>("CDIR")] != -1);
		return sat<F>("CDIR");
	}

	template<typename F = ::sun::net::ftp::FtpDirEntry$Type>
	static auto DIR() {
		static_assert(field_signatures[jField<F>("DIR")] != -1);
		return sat<F>("DIR");
	}

	template<typename F = ::sun::net::ftp::FtpDirEntry$Type>
	static auto FILE() {
		static_assert(field_signatures[jField<F>("FILE")] != -1);
		return sat<F>("FILE");
	}

	template<typename F = ::sun::net::ftp::FtpDirEntry$Type>
	static auto LINK() {
		static_assert(field_signatures[jField<F>("LINK")] != -1);
		return sat<F>("LINK");
	}

	template<typename F = ::sun::net::ftp::FtpDirEntry$Type>
	static auto PDIR() {
		static_assert(field_signatures[jField<F>("PDIR")] != -1);
		return sat<F>("PDIR");
	}

	constexpr static Enume method_signatures{
		jMethod<::sun::net::ftp::FtpDirEntry$Type(::java::lang::String)>("valueOf"), //
		jMethod<::sun::net::ftp::FtpDirEntry$Type *()>("values"), //
	};

	template<typename R = ::sun::net::ftp::FtpDirEntry$Type, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::net::ftp::FtpDirEntry$Type *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
