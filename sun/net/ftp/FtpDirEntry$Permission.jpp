#ifndef sun_net_ftp_FtpDirEntry$Permission_HPP
#define sun_net_ftp_FtpDirEntry$Permission_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::net::ftp::FtpDirEntry$Permission : public jObject<::sun::net::ftp::FtpDirEntry$Permission, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net_ftp / "FtpDirEntry$Permission";

	constexpr static Enume field_signatures{
		jField<::sun::net::ftp::FtpDirEntry$Permission>("GROUP"), //
		jField<::sun::net::ftp::FtpDirEntry$Permission>("OTHERS"), //
		jField<::sun::net::ftp::FtpDirEntry$Permission>("USER"), //
	};

	template<typename F = ::sun::net::ftp::FtpDirEntry$Permission>
	static auto GROUP() {
		static_assert(field_signatures[jField<F>("GROUP")] != -1);
		return sat<F>("GROUP");
	}

	template<typename F = ::sun::net::ftp::FtpDirEntry$Permission>
	static auto OTHERS() {
		static_assert(field_signatures[jField<F>("OTHERS")] != -1);
		return sat<F>("OTHERS");
	}

	template<typename F = ::sun::net::ftp::FtpDirEntry$Permission>
	static auto USER() {
		static_assert(field_signatures[jField<F>("USER")] != -1);
		return sat<F>("USER");
	}

	constexpr static Enume method_signatures{
		jMethod<::sun::net::ftp::FtpDirEntry$Permission(::java::lang::String)>("valueOf"), //
		jMethod<::sun::net::ftp::FtpDirEntry$Permission *()>("values"), //
	};

	template<typename R = ::sun::net::ftp::FtpDirEntry$Permission, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::net::ftp::FtpDirEntry$Permission *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
