#ifndef sun_net_NetHooks_HPP
#define sun_net_NetHooks_HPP

#include "../../jfwd_decl.hpp"

class ::sun::net::NetHooks : public jObject<::sun::net::NetHooks, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net / "NetHooks";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::io::FileDescriptor, ::java::net::InetAddress, ::jint)>("beforeTcpBind"), //
		jMethod<::jvoid(::java::io::FileDescriptor, ::java::net::InetAddress, ::jint)>("beforeTcpConnect"), //
	};

	template<typename R = ::jvoid, typename... Args>
	static auto beforeTcpBind(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("beforeTcpBind")] != -1);
		return scall<R>("beforeTcpBind", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto beforeTcpConnect(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("beforeTcpConnect")] != -1);
		return scall<R>("beforeTcpConnect", std::forward<Args>(args)...);
	}

};

#endif
