#ifndef sun_net_ProgressEvent_HPP
#define sun_net_ProgressEvent_HPP

#include "../../jfwd_decl.hpp"

class ::sun::net::ProgressEvent : public jObject<::sun::net::ProgressEvent, ::java::util::EventObject> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net / "ProgressEvent";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::sun::net::ProgressSource, ::java::net::URL, ::java::lang::String, ::java::lang::String, ::sun::net::ProgressSource$State, ::jlong, ::jlong)>(), //
		jMethod<::java::lang::String()>("getContentType"), //
		jMethod<::jlong()>("getExpected"), //
		jMethod<::java::lang::String()>("getMethod"), //
		jMethod<::jlong()>("getProgress"), //
		jMethod<::sun::net::ProgressSource$State()>("getState"), //
		jMethod<::java::net::URL()>("getURL"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getContentType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContentType")] != -1);
		return call<R>("getContentType", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getExpected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExpected")] != -1);
		return call<R>("getExpected", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMethod(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMethod")] != -1);
		return call<R>("getMethod", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getProgress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProgress")] != -1);
		return call<R>("getProgress", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::net::ProgressSource$State, typename... Args>
	auto getState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getState")] != -1);
		return call<R>("getState", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::URL, typename... Args>
	auto getURL(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getURL")] != -1);
		return call<R>("getURL", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
