#ifndef sun_net_TelnetOutputStream_HPP
#define sun_net_TelnetOutputStream_HPP

#include "../../jfwd_decl.hpp"

class ::sun::net::TelnetOutputStream : public jObject<::sun::net::TelnetOutputStream, ::java::io::BufferedOutputStream> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net / "TelnetOutputStream";

	constexpr static Enume field_signatures{
		jField<::jboolean>("binaryMode"), //
	};

	template<typename F = ::jboolean>
	auto binaryMode() const {
		static_assert(field_signatures[jField<F>("binaryMode")] != -1);
		return at<F>("binaryMode");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::io::OutputStream, ::jboolean)>(), //
		jMethod<::jvoid(::jboolean)>("setStickyCRLF"), //
		jMethod<::jvoid(::jint)>("write"), //
		jMethod<::jvoid(::jbyte *, ::jint, ::jint)>("write"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto setStickyCRLF(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setStickyCRLF")] != -1);
		return call<R>("setStickyCRLF", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write")] != -1);
		return call<R>("write", std::forward<Args>(args)...);
	}

};

#endif
