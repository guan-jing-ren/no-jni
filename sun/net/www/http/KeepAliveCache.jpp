#ifndef sun_net_www_http_KeepAliveCache_HPP
#define sun_net_www_http_KeepAliveCache_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::net::www::http::KeepAliveCache : public jObject<::sun::net::www::http::KeepAliveCache, ::java::util::HashMap> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net_www_http / "KeepAliveCache";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::sun::net::www::http::HttpClient(::java::net::URL, ::java::lang::Object)>("get"), //
		jMethod<::jvoid(::java::net::URL, ::java::lang::Object, ::sun::net::www::http::HttpClient)>("put"), //
		jMethod<::jvoid(::sun::net::www::http::HttpClient, ::java::lang::Object)>("remove"), //
		jMethod<::jvoid()>("run"), //
	};

	template<typename R = ::sun::net::www::http::HttpClient, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto put(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("put")] != -1);
		return call<R>("put", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto run(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("run")] != -1);
		return call<R>("run", std::forward<Args>(args)...);
	}

};

#endif
