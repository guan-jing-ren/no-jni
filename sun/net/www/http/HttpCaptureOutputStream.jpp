#ifndef sun_net_www_http_HttpCaptureOutputStream_HPP
#define sun_net_www_http_HttpCaptureOutputStream_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::net::www::http::HttpCaptureOutputStream : public jObject<::sun::net::www::http::HttpCaptureOutputStream, ::java::io::FilterOutputStream> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net_www_http / "HttpCaptureOutputStream";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::io::OutputStream, ::sun::net::www::http::HttpCapture)>(), //
		jMethod<::jvoid()>("flush"), //
		jMethod<::jvoid(::jint)>("write"), //
		jMethod<::jvoid(::jbyte *)>("write"), //
		jMethod<::jvoid(::jbyte *, ::jint, ::jint)>("write"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto flush(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("flush")] != -1);
		return call<R>("flush", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write")] != -1);
		return call<R>("write", std::forward<Args>(args)...);
	}

};

#endif
