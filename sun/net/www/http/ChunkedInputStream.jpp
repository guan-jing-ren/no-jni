#ifndef sun_net_www_http_ChunkedInputStream_HPP
#define sun_net_www_http_ChunkedInputStream_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::net::www::http::ChunkedInputStream : public jObject<::sun::net::www::http::ChunkedInputStream, ::java::io::InputStream> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net_www_http / "ChunkedInputStream";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::io::InputStream, ::sun::net::www::http::HttpClient, ::sun::net::www::MessageHeader)>(), //
		jMethod<::jint()>("available"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::jboolean()>("hurry"), //
		jMethod<::jint()>("read"), //
		jMethod<::jint(::jbyte *, ::jint, ::jint)>("read"), //
	};

	template<typename R = ::jint, typename... Args>
	auto available(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("available")] != -1);
		return call<R>("available", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hurry(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hurry")] != -1);
		return call<R>("hurry", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("read")] != -1);
		return call<R>("read", std::forward<Args>(args)...);
	}

};

#endif
