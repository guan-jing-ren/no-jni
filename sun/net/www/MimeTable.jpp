#ifndef sun_net_www_MimeTable_HPP
#define sun_net_www_MimeTable_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::net::www::MimeTable : public jObject<::sun::net::www::MimeTable, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net_www / "MimeTable";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::sun::net::www::MimeEntry)>("add"), //
		jMethod<::java::util::Enumeration()>("elements"), //
		jMethod<::sun::net::www::MimeEntry(::java::lang::String)>("find"), //
		jMethod<::sun::net::www::MimeEntry(::java::lang::String)>("findByDescription"), //
		jMethod<::sun::net::www::MimeEntry(::java::lang::String)>("findByExt"), //
		jMethod<::sun::net::www::MimeEntry(::java::lang::String)>("findByFileName"), //
		jMethod<::java::util::Properties()>("getAsProperties"), //
		jMethod<::java::lang::String(::java::lang::String)>("getContentTypeFor"), //
		jMethod<::sun::net::www::MimeTable()>("getDefaultTable"), //
		jMethod<::jint()>("getSize"), //
		jMethod<::jvoid()>("load"), //
		jMethod<::java::net::FileNameMap()>("loadTable"), //
		jMethod<::sun::net::www::MimeEntry(::java::lang::String)>("remove"), //
		jMethod<::sun::net::www::MimeEntry(::sun::net::www::MimeEntry)>("remove"), //
		jMethod<::jboolean(::java::lang::String)>("save"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto elements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("elements")] != -1);
		return call<R>("elements", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::net::www::MimeEntry, typename... Args>
	auto find(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("find")] != -1);
		return call<R>("find", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::net::www::MimeEntry, typename... Args>
	auto findByDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("findByDescription")] != -1);
		return call<R>("findByDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::net::www::MimeEntry, typename... Args>
	auto findByExt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("findByExt")] != -1);
		return call<R>("findByExt", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::net::www::MimeEntry, typename... Args>
	auto findByFileName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("findByFileName")] != -1);
		return call<R>("findByFileName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Properties, typename... Args>
	auto getAsProperties(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAsProperties")] != -1);
		return call<R>("getAsProperties", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getContentTypeFor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContentTypeFor")] != -1);
		return call<R>("getContentTypeFor", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::net::www::MimeTable, typename... Args>
	static auto getDefaultTable(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultTable")] != -1);
		return scall<R>("getDefaultTable", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return call<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto load(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("load")] != -1);
		return call<R>("load", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::FileNameMap, typename... Args>
	static auto loadTable(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("loadTable")] != -1);
		return scall<R>("loadTable", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::net::www::MimeEntry, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto save(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("save")] != -1);
		return call<R>("save", std::forward<Args>(args)...);
	}

};

#endif
