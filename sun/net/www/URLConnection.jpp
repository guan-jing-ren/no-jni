#ifndef sun_net_www_URLConnection_HPP
#define sun_net_www_URLConnection_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::net::www::URLConnection : public jObject<::sun::net::www::URLConnection, ::java::net::URLConnection> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net_www / "URLConnection";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::net::URL)>(), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("addRequestProperty"), //
		jMethod<::jboolean()>("canCache"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::jint()>("getContentLength"), //
		jMethod<::java::lang::String()>("getContentType"), //
		jMethod<::java::lang::String(::jint)>("getHeaderField"), //
		jMethod<::java::lang::String(::java::lang::String)>("getHeaderField"), //
		jMethod<::java::lang::String(::jint)>("getHeaderFieldKey"), //
		jMethod<::sun::net::www::MessageHeader()>("getProperties"), //
		jMethod<::java::util::Map()>("getRequestProperties"), //
		jMethod<::java::lang::String(::java::lang::String)>("getRequestProperty"), //
		jMethod<::jboolean(::java::lang::String)>("isProxiedHost"), //
		jMethod<::jvoid(::java::lang::String)>("setContentType"), //
		jMethod<::jvoid(::sun::net::www::MessageHeader)>("setProperties"), //
		jMethod<::jvoid(::java::lang::String)>("setProxiedHost"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("setRequestProperty"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addRequestProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addRequestProperty")] != -1);
		return call<R>("addRequestProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto canCache(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canCache")] != -1);
		return call<R>("canCache", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getContentLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContentLength")] != -1);
		return call<R>("getContentLength", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getContentType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContentType")] != -1);
		return call<R>("getContentType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHeaderField(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeaderField")] != -1);
		return call<R>("getHeaderField", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHeaderFieldKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeaderFieldKey")] != -1);
		return call<R>("getHeaderFieldKey", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::net::www::MessageHeader, typename... Args>
	auto getProperties(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProperties")] != -1);
		return call<R>("getProperties", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getRequestProperties(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRequestProperties")] != -1);
		return call<R>("getRequestProperties", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRequestProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRequestProperty")] != -1);
		return call<R>("getRequestProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isProxiedHost(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isProxiedHost")] != -1);
		return scall<R>("isProxiedHost", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setContentType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setContentType")] != -1);
		return call<R>("setContentType", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setProperties(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setProperties")] != -1);
		return call<R>("setProperties", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setProxiedHost(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setProxiedHost")] != -1);
		return scall<R>("setProxiedHost", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRequestProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRequestProperty")] != -1);
		return call<R>("setRequestProperty", std::forward<Args>(args)...);
	}

};

#endif
