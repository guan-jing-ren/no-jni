#ifndef sun_net_www_MimeEntry_HPP
#define sun_net_www_MimeEntry_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::net::www::MimeEntry : public jObject<::sun::net::www::MimeEntry, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net_www / "MimeEntry";

	constexpr static Enume field_signatures{
		jField<::jint>("LAUNCH_APPLICATION"), //
		jField<::jint>("LOAD_INTO_BROWSER"), //
		jField<::jint>("SAVE_TO_FILE"), //
		jField<::jint>("UNKNOWN"), //
	};

	template<typename F = ::jint>
	static auto LAUNCH_APPLICATION() {
		static_assert(field_signatures[jField<F>("LAUNCH_APPLICATION")] != -1);
		return sat<F>("LAUNCH_APPLICATION");
	}

	template<typename F = ::jint>
	static auto LOAD_INTO_BROWSER() {
		static_assert(field_signatures[jField<F>("LOAD_INTO_BROWSER")] != -1);
		return sat<F>("LOAD_INTO_BROWSER");
	}

	template<typename F = ::jint>
	static auto SAVE_TO_FILE() {
		static_assert(field_signatures[jField<F>("SAVE_TO_FILE")] != -1);
		return sat<F>("SAVE_TO_FILE");
	}

	template<typename F = ::jint>
	static auto UNKNOWN() {
		static_assert(field_signatures[jField<F>("UNKNOWN")] != -1);
		return sat<F>("UNKNOWN");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jint()>("getAction"), //
		jMethod<::java::lang::String()>("getDescription"), //
		jMethod<::java::lang::String *()>("getExtensions"), //
		jMethod<::java::lang::String()>("getExtensionsAsList"), //
		jMethod<::java::lang::String()>("getImageFileName"), //
		jMethod<::java::lang::String()>("getLaunchString"), //
		jMethod<::java::lang::String()>("getTempFileTemplate"), //
		jMethod<::java::lang::String()>("getType"), //
		jMethod<::java::lang::Object(::java::net::URLConnection, ::java::io::InputStream, ::sun::net::www::MimeTable)>("launch"), //
		jMethod<::jboolean(::java::lang::String)>("matches"), //
		jMethod<::jvoid(::jint)>("setAction"), //
		jMethod<::jvoid(::jint, ::java::lang::String)>("setAction"), //
		jMethod<::jvoid(::java::lang::String)>("setCommand"), //
		jMethod<::jvoid(::java::lang::String)>("setDescription"), //
		jMethod<::jvoid(::java::lang::String)>("setExtensions"), //
		jMethod<::jvoid(::java::lang::String)>("setImageFileName"), //
		jMethod<::jvoid(::java::lang::String)>("setType"), //
		jMethod<::java::lang::String()>("toProperty"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAction")] != -1);
		return call<R>("getAction", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDescription")] != -1);
		return call<R>("getDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getExtensions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExtensions")] != -1);
		return call<R>("getExtensions", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getExtensionsAsList(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExtensionsAsList")] != -1);
		return call<R>("getExtensionsAsList", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getImageFileName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getImageFileName")] != -1);
		return call<R>("getImageFileName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLaunchString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLaunchString")] != -1);
		return call<R>("getLaunchString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTempFileTemplate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTempFileTemplate")] != -1);
		return call<R>("getTempFileTemplate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto launch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("launch")] != -1);
		return call<R>("launch", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto matches(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("matches")] != -1);
		return call<R>("matches", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAction")] != -1);
		return call<R>("setAction", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCommand(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCommand")] != -1);
		return call<R>("setCommand", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDescription")] != -1);
		return call<R>("setDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setExtensions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setExtensions")] != -1);
		return call<R>("setExtensions", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setImageFileName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setImageFileName")] != -1);
		return call<R>("setImageFileName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setType")] != -1);
		return call<R>("setType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toProperty")] != -1);
		return call<R>("toProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
