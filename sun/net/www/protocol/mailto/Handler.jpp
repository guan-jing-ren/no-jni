#ifndef sun_net_www_protocol_mailto_Handler_HPP
#define sun_net_www_protocol_mailto_Handler_HPP

#include "../../../../../jfwd_decl.hpp"

class ::sun::net::www::protocol::mailto::Handler : public jObject<::sun::net::www::protocol::mailto::Handler, ::java::net::URLStreamHandler> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net_www_protocol_mailto / "Handler";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::net::URLConnection(::java::net::URL)>("openConnection"), //
		jMethod<::jvoid(::java::net::URL, ::java::lang::String, ::jint, ::jint)>("parseURL"), //
	};

	template<typename R = ::java::net::URLConnection, typename... Args>
	auto openConnection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("openConnection")] != -1);
		return call<R>("openConnection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto parseURL(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseURL")] != -1);
		return call<R>("parseURL", std::forward<Args>(args)...);
	}

};

#endif
