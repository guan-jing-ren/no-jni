#ifndef sun_net_www_protocol_mailto_MailToURLConnection_HPP
#define sun_net_www_protocol_mailto_MailToURLConnection_HPP

#include "../../../../../jfwd_decl.hpp"

class ::sun::net::www::protocol::mailto::MailToURLConnection : public jObject<::sun::net::www::protocol::mailto::MailToURLConnection, ::sun::net::www::URLConnection> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net_www_protocol_mailto / "MailToURLConnection";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("connect"), //
		jMethod<::jint()>("getConnectTimeout"), //
		jMethod<::java::io::OutputStream()>("getOutputStream"), //
		jMethod<::java::security::Permission()>("getPermission"), //
		jMethod<::jint()>("getReadTimeout"), //
		jMethod<::jvoid(::jint)>("setConnectTimeout"), //
		jMethod<::jvoid(::jint)>("setReadTimeout"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto connect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("connect")] != -1);
		return call<R>("connect", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getConnectTimeout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConnectTimeout")] != -1);
		return call<R>("getConnectTimeout", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::OutputStream, typename... Args>
	auto getOutputStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOutputStream")] != -1);
		return call<R>("getOutputStream", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::Permission, typename... Args>
	auto getPermission(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPermission")] != -1);
		return call<R>("getPermission", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getReadTimeout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReadTimeout")] != -1);
		return call<R>("getReadTimeout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setConnectTimeout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setConnectTimeout")] != -1);
		return call<R>("setConnectTimeout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setReadTimeout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setReadTimeout")] != -1);
		return call<R>("setReadTimeout", std::forward<Args>(args)...);
	}

};

#endif
