#ifndef sun_net_www_protocol_https_AbstractDelegateHttpsURLConnection_HPP
#define sun_net_www_protocol_https_AbstractDelegateHttpsURLConnection_HPP

#include "../../../../../jfwd_decl.hpp"

class ::sun::net::www::protocol::https::AbstractDelegateHttpsURLConnection : public jObject<::sun::net::www::protocol::https::AbstractDelegateHttpsURLConnection, ::sun::net::www::protocol::http::HttpURLConnection> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net_www_protocol_https / "AbstractDelegateHttpsURLConnection";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("connect"), //
		jMethod<::java::lang::String()>("getCipherSuite"), //
		jMethod<::java::security::cert::Certificate *()>("getLocalCertificates"), //
		jMethod<::javax::security::cert::X509Certificate *()>("getServerCertificateChain"), //
		jMethod<::java::security::cert::Certificate *()>("getServerCertificates"), //
		jMethod<::jboolean()>("isConnected"), //
		jMethod<::jvoid(::jboolean)>("setConnected"), //
		jMethod<::jvoid(::java::net::URL)>("setNewClient"), //
		jMethod<::jvoid(::java::net::URL, ::jboolean)>("setNewClient"), //
		jMethod<::jvoid(::java::net::URL, ::java::lang::String, ::jint)>("setProxiedClient"), //
		jMethod<::jvoid(::java::net::URL, ::java::lang::String, ::jint, ::jboolean)>("setProxiedClient"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto connect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("connect")] != -1);
		return call<R>("connect", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCipherSuite(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCipherSuite")] != -1);
		return call<R>("getCipherSuite", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::cert::Certificate *, typename... Args>
	auto getLocalCertificates(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalCertificates")] != -1);
		return call<R>("getLocalCertificates", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::security::cert::X509Certificate *, typename... Args>
	auto getServerCertificateChain(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServerCertificateChain")] != -1);
		return call<R>("getServerCertificateChain", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::cert::Certificate *, typename... Args>
	auto getServerCertificates(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServerCertificates")] != -1);
		return call<R>("getServerCertificates", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isConnected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isConnected")] != -1);
		return call<R>("isConnected", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setConnected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setConnected")] != -1);
		return call<R>("setConnected", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNewClient(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNewClient")] != -1);
		return call<R>("setNewClient", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setProxiedClient(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setProxiedClient")] != -1);
		return call<R>("setProxiedClient", std::forward<Args>(args)...);
	}

};

#endif
