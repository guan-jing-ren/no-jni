#ifndef sun_net_www_protocol_https_HttpsURLConnectionImpl_HPP
#define sun_net_www_protocol_https_HttpsURLConnectionImpl_HPP

#include "../../../../../jfwd_decl.hpp"

class ::sun::net::www::protocol::https::HttpsURLConnectionImpl : public jObject<::sun::net::www::protocol::https::HttpsURLConnectionImpl, ::javax::net::ssl::HttpsURLConnection> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net_www_protocol_https / "HttpsURLConnectionImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("addRequestProperty"), //
		jMethod<::jvoid()>("connect"), //
		jMethod<::jvoid()>("disconnect"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jboolean()>("getAllowUserInteraction"), //
		jMethod<::java::lang::String()>("getCipherSuite"), //
		jMethod<::jint()>("getConnectTimeout"), //
		jMethod<::java::lang::Object()>("getContent"), //
		jMethod<::java::lang::Object(::java::lang::Class *)>("getContent"), //
		jMethod<::java::lang::String()>("getContentEncoding"), //
		jMethod<::jint()>("getContentLength"), //
		jMethod<::jlong()>("getContentLengthLong"), //
		jMethod<::java::lang::String()>("getContentType"), //
		jMethod<::jlong()>("getDate"), //
		jMethod<::jboolean()>("getDefaultUseCaches"), //
		jMethod<::jboolean()>("getDoInput"), //
		jMethod<::jboolean()>("getDoOutput"), //
		jMethod<::java::io::InputStream()>("getErrorStream"), //
		jMethod<::jlong()>("getExpiration"), //
		jMethod<::java::lang::String(::jint)>("getHeaderField"), //
		jMethod<::java::lang::String(::java::lang::String)>("getHeaderField"), //
		jMethod<::jlong(::java::lang::String, ::jlong)>("getHeaderFieldDate"), //
		jMethod<::jint(::java::lang::String, ::jint)>("getHeaderFieldInt"), //
		jMethod<::java::lang::String(::jint)>("getHeaderFieldKey"), //
		jMethod<::jlong(::java::lang::String, ::jlong)>("getHeaderFieldLong"), //
		jMethod<::java::util::Map()>("getHeaderFields"), //
		jMethod<::jlong()>("getIfModifiedSince"), //
		jMethod<::java::io::InputStream()>("getInputStream"), //
		jMethod<::jboolean()>("getInstanceFollowRedirects"), //
		jMethod<::jlong()>("getLastModified"), //
		jMethod<::java::security::cert::Certificate *()>("getLocalCertificates"), //
		jMethod<::java::security::Principal()>("getLocalPrincipal"), //
		jMethod<::java::io::OutputStream()>("getOutputStream"), //
		jMethod<::java::security::Principal()>("getPeerPrincipal"), //
		jMethod<::java::security::Permission()>("getPermission"), //
		jMethod<::jint()>("getReadTimeout"), //
		jMethod<::java::lang::String()>("getRequestMethod"), //
		jMethod<::java::util::Map()>("getRequestProperties"), //
		jMethod<::java::lang::String(::java::lang::String)>("getRequestProperty"), //
		jMethod<::jint()>("getResponseCode"), //
		jMethod<::java::lang::String()>("getResponseMessage"), //
		jMethod<::javax::security::cert::X509Certificate *()>("getServerCertificateChain"), //
		jMethod<::java::security::cert::Certificate *()>("getServerCertificates"), //
		jMethod<::java::net::URL()>("getURL"), //
		jMethod<::jboolean()>("getUseCaches"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jvoid(::jboolean)>("setAllowUserInteraction"), //
		jMethod<::jvoid(::jint)>("setChunkedStreamingMode"), //
		jMethod<::jvoid(::jint)>("setConnectTimeout"), //
		jMethod<::jvoid(::jboolean)>("setDefaultUseCaches"), //
		jMethod<::jvoid(::jboolean)>("setDoInput"), //
		jMethod<::jvoid(::jboolean)>("setDoOutput"), //
		jMethod<::jvoid(::jint)>("setFixedLengthStreamingMode"), //
		jMethod<::jvoid(::jlong)>("setFixedLengthStreamingMode"), //
		jMethod<::jvoid(::jlong)>("setIfModifiedSince"), //
		jMethod<::jvoid(::jboolean)>("setInstanceFollowRedirects"), //
		jMethod<::jvoid(::jint)>("setReadTimeout"), //
		jMethod<::jvoid(::java::lang::String)>("setRequestMethod"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("setRequestProperty"), //
		jMethod<::jvoid(::jboolean)>("setUseCaches"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jboolean()>("usingProxy"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addRequestProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addRequestProperty")] != -1);
		return call<R>("addRequestProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto connect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("connect")] != -1);
		return call<R>("connect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto disconnect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("disconnect")] != -1);
		return call<R>("disconnect", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getAllowUserInteraction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAllowUserInteraction")] != -1);
		return call<R>("getAllowUserInteraction", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCipherSuite(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCipherSuite")] != -1);
		return call<R>("getCipherSuite", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getConnectTimeout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConnectTimeout")] != -1);
		return call<R>("getConnectTimeout", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getContent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContent")] != -1);
		return call<R>("getContent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getContentEncoding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContentEncoding")] != -1);
		return call<R>("getContentEncoding", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getContentLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContentLength")] != -1);
		return call<R>("getContentLength", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getContentLengthLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContentLengthLong")] != -1);
		return call<R>("getContentLengthLong", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getContentType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContentType")] != -1);
		return call<R>("getContentType", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDate")] != -1);
		return call<R>("getDate", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getDefaultUseCaches(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultUseCaches")] != -1);
		return call<R>("getDefaultUseCaches", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getDoInput(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDoInput")] != -1);
		return call<R>("getDoInput", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getDoOutput(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDoOutput")] != -1);
		return call<R>("getDoOutput", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	auto getErrorStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getErrorStream")] != -1);
		return call<R>("getErrorStream", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getExpiration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExpiration")] != -1);
		return call<R>("getExpiration", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHeaderField(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeaderField")] != -1);
		return call<R>("getHeaderField", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getHeaderFieldDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeaderFieldDate")] != -1);
		return call<R>("getHeaderFieldDate", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHeaderFieldInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeaderFieldInt")] != -1);
		return call<R>("getHeaderFieldInt", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHeaderFieldKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeaderFieldKey")] != -1);
		return call<R>("getHeaderFieldKey", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getHeaderFieldLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeaderFieldLong")] != -1);
		return call<R>("getHeaderFieldLong", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getHeaderFields(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeaderFields")] != -1);
		return call<R>("getHeaderFields", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getIfModifiedSince(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIfModifiedSince")] != -1);
		return call<R>("getIfModifiedSince", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	auto getInputStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInputStream")] != -1);
		return call<R>("getInputStream", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getInstanceFollowRedirects(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInstanceFollowRedirects")] != -1);
		return call<R>("getInstanceFollowRedirects", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLastModified(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLastModified")] != -1);
		return call<R>("getLastModified", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::cert::Certificate *, typename... Args>
	auto getLocalCertificates(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalCertificates")] != -1);
		return call<R>("getLocalCertificates", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::Principal, typename... Args>
	auto getLocalPrincipal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalPrincipal")] != -1);
		return call<R>("getLocalPrincipal", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::OutputStream, typename... Args>
	auto getOutputStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOutputStream")] != -1);
		return call<R>("getOutputStream", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::Principal, typename... Args>
	auto getPeerPrincipal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPeerPrincipal")] != -1);
		return call<R>("getPeerPrincipal", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::Permission, typename... Args>
	auto getPermission(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPermission")] != -1);
		return call<R>("getPermission", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getReadTimeout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReadTimeout")] != -1);
		return call<R>("getReadTimeout", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRequestMethod(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRequestMethod")] != -1);
		return call<R>("getRequestMethod", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getRequestProperties(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRequestProperties")] != -1);
		return call<R>("getRequestProperties", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRequestProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRequestProperty")] != -1);
		return call<R>("getRequestProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getResponseCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResponseCode")] != -1);
		return call<R>("getResponseCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getResponseMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResponseMessage")] != -1);
		return call<R>("getResponseMessage", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::security::cert::X509Certificate *, typename... Args>
	auto getServerCertificateChain(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServerCertificateChain")] != -1);
		return call<R>("getServerCertificateChain", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::cert::Certificate *, typename... Args>
	auto getServerCertificates(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServerCertificates")] != -1);
		return call<R>("getServerCertificates", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::URL, typename... Args>
	auto getURL(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getURL")] != -1);
		return call<R>("getURL", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getUseCaches(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUseCaches")] != -1);
		return call<R>("getUseCaches", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAllowUserInteraction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAllowUserInteraction")] != -1);
		return call<R>("setAllowUserInteraction", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setChunkedStreamingMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setChunkedStreamingMode")] != -1);
		return call<R>("setChunkedStreamingMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setConnectTimeout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setConnectTimeout")] != -1);
		return call<R>("setConnectTimeout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDefaultUseCaches(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDefaultUseCaches")] != -1);
		return call<R>("setDefaultUseCaches", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDoInput(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDoInput")] != -1);
		return call<R>("setDoInput", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDoOutput(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDoOutput")] != -1);
		return call<R>("setDoOutput", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFixedLengthStreamingMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFixedLengthStreamingMode")] != -1);
		return call<R>("setFixedLengthStreamingMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIfModifiedSince(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIfModifiedSince")] != -1);
		return call<R>("setIfModifiedSince", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInstanceFollowRedirects(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setInstanceFollowRedirects")] != -1);
		return call<R>("setInstanceFollowRedirects", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setReadTimeout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setReadTimeout")] != -1);
		return call<R>("setReadTimeout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRequestMethod(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRequestMethod")] != -1);
		return call<R>("setRequestMethod", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRequestProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRequestProperty")] != -1);
		return call<R>("setRequestProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUseCaches(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUseCaches")] != -1);
		return call<R>("setUseCaches", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto usingProxy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("usingProxy")] != -1);
		return call<R>("usingProxy", std::forward<Args>(args)...);
	}

};

#endif
