#ifndef sun_net_www_protocol_http_ntlm_NTLMAuthentication_HPP
#define sun_net_www_protocol_http_ntlm_NTLMAuthentication_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::sun::net::www::protocol::http::ntlm::NTLMAuthentication : public jObject<::sun::net::www::protocol::http::ntlm::NTLMAuthentication, ::sun::net::www::protocol::http::AuthenticationInfo> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net_www_protocol_http_ntlm / "NTLMAuthentication";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jboolean, ::java::lang::String, ::jint, ::java::net::PasswordAuthentication)>(), //
		jConstructor<::jvoid(::jboolean, ::java::net::URL, ::java::net::PasswordAuthentication)>(), //
		jMethod<::java::lang::String(::java::net::URL, ::java::lang::String)>("getHeaderValue"), //
		jMethod<::jboolean(::java::lang::String)>("isAuthorizationStale"), //
		jMethod<::jboolean(::java::net::URL)>("isTrustedSite"), //
		jMethod<::jboolean(::sun::net::www::protocol::http::HttpURLConnection, ::sun::net::www::HeaderParser, ::java::lang::String)>("setHeaders"), //
		jMethod<::jboolean()>("supportsPreemptiveAuthorization"), //
		jMethod<::jboolean()>("supportsTransparentAuth"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getHeaderValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeaderValue")] != -1);
		return call<R>("getHeaderValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAuthorizationStale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAuthorizationStale")] != -1);
		return call<R>("isAuthorizationStale", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isTrustedSite(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isTrustedSite")] != -1);
		return scall<R>("isTrustedSite", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto setHeaders(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHeaders")] != -1);
		return call<R>("setHeaders", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsPreemptiveAuthorization(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("supportsPreemptiveAuthorization")] != -1);
		return call<R>("supportsPreemptiveAuthorization", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto supportsTransparentAuth(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("supportsTransparentAuth")] != -1);
		return scall<R>("supportsTransparentAuth", std::forward<Args>(args)...);
	}

};

#endif
