#ifndef sun_net_www_protocol_http_ntlm_NTLMAuthenticationCallback_HPP
#define sun_net_www_protocol_http_ntlm_NTLMAuthenticationCallback_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::sun::net::www::protocol::http::ntlm::NTLMAuthenticationCallback : public jObject<::sun::net::www::protocol::http::ntlm::NTLMAuthenticationCallback, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net_www_protocol_http_ntlm / "NTLMAuthenticationCallback";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::sun::net::www::protocol::http::ntlm::NTLMAuthenticationCallback()>("getNTLMAuthenticationCallback"), //
		jMethod<::jboolean(::java::net::URL)>("isTrustedSite"), //
		jMethod<::jvoid(::sun::net::www::protocol::http::ntlm::NTLMAuthenticationCallback)>("setNTLMAuthenticationCallback"), //
	};

	template<typename R = ::sun::net::www::protocol::http::ntlm::NTLMAuthenticationCallback, typename... Args>
	static auto getNTLMAuthenticationCallback(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNTLMAuthenticationCallback")] != -1);
		return scall<R>("getNTLMAuthenticationCallback", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isTrustedSite(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isTrustedSite")] != -1);
		return call<R>("isTrustedSite", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setNTLMAuthenticationCallback(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNTLMAuthenticationCallback")] != -1);
		return scall<R>("setNTLMAuthenticationCallback", std::forward<Args>(args)...);
	}

};

#endif
