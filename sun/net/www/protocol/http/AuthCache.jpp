#ifndef sun_net_www_protocol_http_AuthCache_HPP
#define sun_net_www_protocol_http_AuthCache_HPP

#include "../../../../../jfwd_decl.hpp"

class ::sun::net::www::protocol::http::AuthCache : public jObject<::sun::net::www::protocol::http::AuthCache, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net_www_protocol_http / "AuthCache";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::sun::net::www::protocol::http::AuthCacheValue(::java::lang::String, ::java::lang::String)>("get"), //
		jMethod<::jvoid(::java::lang::String, ::sun::net::www::protocol::http::AuthCacheValue)>("put"), //
		jMethod<::jvoid(::java::lang::String, ::sun::net::www::protocol::http::AuthCacheValue)>("remove"), //
	};

	template<typename R = ::sun::net::www::protocol::http::AuthCacheValue, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto put(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("put")] != -1);
		return call<R>("put", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

};

#endif
