#ifndef sun_net_www_protocol_http_HttpCallerInfo_HPP
#define sun_net_www_protocol_http_HttpCallerInfo_HPP

#include "../../../../../jfwd_decl.hpp"

class ::sun::net::www::protocol::http::HttpCallerInfo : public jObject<::sun::net::www::protocol::http::HttpCallerInfo, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net_www_protocol_http / "HttpCallerInfo";

	constexpr static Enume field_signatures{
		jField<::java::net::InetAddress>("addr"), //
		jField<::java::net::Authenticator$RequestorType>("authType"), //
		jField<::java::lang::String>("host"), //
		jField<::jint>("port"), //
		jField<::java::lang::String>("prompt"), //
		jField<::java::lang::String>("protocol"), //
		jField<::java::lang::String>("scheme"), //
		jField<::java::net::URL>("url"), //
	};

	template<typename F = ::java::net::InetAddress>
	auto addr() const {
		static_assert(field_signatures[jField<F>("addr")] != -1);
		return at<F>("addr");
	}

	template<typename F = ::java::net::Authenticator$RequestorType>
	auto authType() const {
		static_assert(field_signatures[jField<F>("authType")] != -1);
		return at<F>("authType");
	}

	template<typename F = ::java::lang::String>
	auto host() const {
		static_assert(field_signatures[jField<F>("host")] != -1);
		return at<F>("host");
	}

	template<typename F = ::jint>
	auto port() const {
		static_assert(field_signatures[jField<F>("port")] != -1);
		return at<F>("port");
	}

	template<typename F = ::java::lang::String>
	auto prompt() const {
		static_assert(field_signatures[jField<F>("prompt")] != -1);
		return at<F>("prompt");
	}

	template<typename F = ::java::lang::String>
	auto protocol() const {
		static_assert(field_signatures[jField<F>("protocol")] != -1);
		return at<F>("protocol");
	}

	template<typename F = ::java::lang::String>
	auto scheme() const {
		static_assert(field_signatures[jField<F>("scheme")] != -1);
		return at<F>("scheme");
	}

	template<typename F = ::java::net::URL>
	auto url() const {
		static_assert(field_signatures[jField<F>("url")] != -1);
		return at<F>("url");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::net::URL)>(), //
		jConstructor<::jvoid(::java::net::URL, ::java::lang::String, ::jint)>(), //
		jConstructor<::jvoid(::sun::net::www::protocol::http::HttpCallerInfo, ::java::lang::String)>(), //
	};

};

#endif
