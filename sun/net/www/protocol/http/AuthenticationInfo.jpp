#ifndef sun_net_www_protocol_http_AuthenticationInfo_HPP
#define sun_net_www_protocol_http_AuthenticationInfo_HPP

#include "../../../../../jfwd_decl.hpp"

class ::sun::net::www::protocol::http::AuthenticationInfo : public jObject<::sun::net::www::protocol::http::AuthenticationInfo, ::sun::net::www::protocol::http::AuthCacheValue> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net_www_protocol_http / "AuthenticationInfo";

	constexpr static Enume field_signatures{
		jField<::jchar>("PROXY_AUTHENTICATION"), //
		jField<::jchar>("SERVER_AUTHENTICATION"), //
	};

	template<typename F = ::jchar>
	static auto PROXY_AUTHENTICATION() {
		static_assert(field_signatures[jField<F>("PROXY_AUTHENTICATION")] != -1);
		return sat<F>("PROXY_AUTHENTICATION");
	}

	template<typename F = ::jchar>
	static auto SERVER_AUTHENTICATION() {
		static_assert(field_signatures[jField<F>("SERVER_AUTHENTICATION")] != -1);
		return sat<F>("SERVER_AUTHENTICATION");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jchar, ::sun::net::www::protocol::http::AuthScheme, ::java::lang::String, ::jint, ::java::lang::String)>(), //
		jConstructor<::jvoid(::jchar, ::sun::net::www::protocol::http::AuthScheme, ::java::net::URL, ::java::lang::String)>(), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::java::net::PasswordAuthentication()>("credentials"), //
		jMethod<::sun::net::www::protocol::http::AuthCacheValue$Type()>("getAuthType"), //
		jMethod<::java::lang::String()>("getHeaderName"), //
		jMethod<::java::lang::String(::java::net::URL, ::java::lang::String)>("getHeaderValue"), //
		jMethod<::java::lang::String()>("getHost"), //
		jMethod<::java::lang::String()>("getPath"), //
		jMethod<::jint()>("getPort"), //
		jMethod<::java::lang::String()>("getProtocolScheme"), //
		jMethod<::java::lang::String()>("getRealm"), //
		jMethod<::jboolean(::java::lang::String)>("isAuthorizationStale"), //
		jMethod<::jboolean(::sun::net::www::protocol::http::HttpURLConnection, ::sun::net::www::HeaderParser, ::java::lang::String)>("setHeaders"), //
		jMethod<::jboolean()>("supportsPreemptiveAuthorization"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::PasswordAuthentication, typename... Args>
	auto credentials(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("credentials")] != -1);
		return call<R>("credentials", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::net::www::protocol::http::AuthCacheValue$Type, typename... Args>
	auto getAuthType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAuthType")] != -1);
		return call<R>("getAuthType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHeaderName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeaderName")] != -1);
		return call<R>("getHeaderName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHeaderValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeaderValue")] != -1);
		return call<R>("getHeaderValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHost(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHost")] != -1);
		return call<R>("getHost", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPath")] != -1);
		return call<R>("getPath", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPort")] != -1);
		return call<R>("getPort", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getProtocolScheme(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProtocolScheme")] != -1);
		return call<R>("getProtocolScheme", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRealm(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRealm")] != -1);
		return call<R>("getRealm", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAuthorizationStale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAuthorizationStale")] != -1);
		return call<R>("isAuthorizationStale", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto setHeaders(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHeaders")] != -1);
		return call<R>("setHeaders", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsPreemptiveAuthorization(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("supportsPreemptiveAuthorization")] != -1);
		return call<R>("supportsPreemptiveAuthorization", std::forward<Args>(args)...);
	}

};

#endif
