#ifndef sun_net_www_protocol_http_HttpURLConnection$TunnelState_HPP
#define sun_net_www_protocol_http_HttpURLConnection$TunnelState_HPP

#include "../../../../../jfwd_decl.hpp"

class ::sun::net::www::protocol::http::HttpURLConnection$TunnelState : public jObject<::sun::net::www::protocol::http::HttpURLConnection$TunnelState, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net_www_protocol_http / "HttpURLConnection$TunnelState";

	constexpr static Enume field_signatures{
		jField<::sun::net::www::protocol::http::HttpURLConnection$TunnelState>("NONE"), //
		jField<::sun::net::www::protocol::http::HttpURLConnection$TunnelState>("SETUP"), //
		jField<::sun::net::www::protocol::http::HttpURLConnection$TunnelState>("TUNNELING"), //
	};

	template<typename F = ::sun::net::www::protocol::http::HttpURLConnection$TunnelState>
	static auto NONE() {
		static_assert(field_signatures[jField<F>("NONE")] != -1);
		return sat<F>("NONE");
	}

	template<typename F = ::sun::net::www::protocol::http::HttpURLConnection$TunnelState>
	static auto SETUP() {
		static_assert(field_signatures[jField<F>("SETUP")] != -1);
		return sat<F>("SETUP");
	}

	template<typename F = ::sun::net::www::protocol::http::HttpURLConnection$TunnelState>
	static auto TUNNELING() {
		static_assert(field_signatures[jField<F>("TUNNELING")] != -1);
		return sat<F>("TUNNELING");
	}

	constexpr static Enume method_signatures{
		jMethod<::sun::net::www::protocol::http::HttpURLConnection$TunnelState(::java::lang::String)>("valueOf"), //
		jMethod<::sun::net::www::protocol::http::HttpURLConnection$TunnelState *()>("values"), //
	};

	template<typename R = ::sun::net::www::protocol::http::HttpURLConnection$TunnelState, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::net::www::protocol::http::HttpURLConnection$TunnelState *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
