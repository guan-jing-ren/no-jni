#ifndef sun_net_www_protocol_http_HttpURLConnection_HPP
#define sun_net_www_protocol_http_HttpURLConnection_HPP

#include "../../../../../jfwd_decl.hpp"

class ::sun::net::www::protocol::http::HttpURLConnection : public jObject<::sun::net::www::protocol::http::HttpURLConnection, ::java::net::HttpURLConnection> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net_www_protocol_http / "HttpURLConnection";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("userAgent"), //
	};

	template<typename F = ::java::lang::String>
	static auto userAgent() {
		static_assert(field_signatures[jField<F>("userAgent")] != -1);
		return sat<F>("userAgent");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::net::URL, ::java::lang::String, ::jint)>(), //
		jConstructor<::jvoid(::java::net::URL, ::java::net::Proxy)>(), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("addRequestProperty"), //
		jMethod<::java::lang::Object()>("authObj"), //
		jMethod<::jvoid(::java::lang::Object)>("authObj"), //
		jMethod<::jvoid()>("connect"), //
		jMethod<::jvoid()>("disconnect"), //
		jMethod<::jvoid()>("doTunneling"), //
		jMethod<::jint()>("getConnectTimeout"), //
		jMethod<::java::net::CookieHandler()>("getCookieHandler"), //
		jMethod<::java::io::InputStream()>("getErrorStream"), //
		jMethod<::java::lang::String(::jint)>("getHeaderField"), //
		jMethod<::java::lang::String(::java::lang::String)>("getHeaderField"), //
		jMethod<::java::lang::String(::jint)>("getHeaderFieldKey"), //
		jMethod<::java::util::Map()>("getHeaderFields"), //
		jMethod<::sun::util::logging::PlatformLogger()>("getHttpLogger"), //
		jMethod<::java::io::InputStream()>("getInputStream"), //
		jMethod<::java::io::OutputStream()>("getOutputStream"), //
		jMethod<::jint()>("getReadTimeout"), //
		jMethod<::java::util::Map()>("getRequestProperties"), //
		jMethod<::java::lang::String(::java::lang::String)>("getRequestProperty"), //
		jMethod<::java::io::InputStream(::java::net::URLConnection)>("openConnectionCheckRedirects"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("setAuthenticationProperty"), //
		jMethod<::jvoid(::jint)>("setConnectTimeout"), //
		jMethod<::jvoid(::sun::net::www::protocol::http::HttpAuthenticator)>("setDefaultAuthenticator"), //
		jMethod<::jvoid(::jint)>("setReadTimeout"), //
		jMethod<::jvoid(::java::lang::String)>("setRequestMethod"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("setRequestProperty"), //
		jMethod<::jvoid(::sun::net::www::protocol::http::HttpURLConnection$TunnelState)>("setTunnelState"), //
		jMethod<::jboolean()>("streaming"), //
		jMethod<::jboolean()>("usingProxy"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addRequestProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addRequestProperty")] != -1);
		return call<R>("addRequestProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto authObj(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("authObj")] != -1);
		return call<R>("authObj", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto connect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("connect")] != -1);
		return call<R>("connect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto disconnect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("disconnect")] != -1);
		return call<R>("disconnect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto doTunneling(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("doTunneling")] != -1);
		return call<R>("doTunneling", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getConnectTimeout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConnectTimeout")] != -1);
		return call<R>("getConnectTimeout", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::CookieHandler, typename... Args>
	auto getCookieHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCookieHandler")] != -1);
		return call<R>("getCookieHandler", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	auto getErrorStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getErrorStream")] != -1);
		return call<R>("getErrorStream", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHeaderField(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeaderField")] != -1);
		return call<R>("getHeaderField", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHeaderFieldKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeaderFieldKey")] != -1);
		return call<R>("getHeaderFieldKey", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getHeaderFields(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeaderFields")] != -1);
		return call<R>("getHeaderFields", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::logging::PlatformLogger, typename... Args>
	static auto getHttpLogger(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHttpLogger")] != -1);
		return scall<R>("getHttpLogger", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	auto getInputStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInputStream")] != -1);
		return call<R>("getInputStream", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::OutputStream, typename... Args>
	auto getOutputStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOutputStream")] != -1);
		return call<R>("getOutputStream", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getReadTimeout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReadTimeout")] != -1);
		return call<R>("getReadTimeout", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getRequestProperties(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRequestProperties")] != -1);
		return call<R>("getRequestProperties", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRequestProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRequestProperty")] != -1);
		return call<R>("getRequestProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	static auto openConnectionCheckRedirects(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("openConnectionCheckRedirects")] != -1);
		return scall<R>("openConnectionCheckRedirects", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAuthenticationProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAuthenticationProperty")] != -1);
		return call<R>("setAuthenticationProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setConnectTimeout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setConnectTimeout")] != -1);
		return call<R>("setConnectTimeout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setDefaultAuthenticator(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDefaultAuthenticator")] != -1);
		return scall<R>("setDefaultAuthenticator", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setReadTimeout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setReadTimeout")] != -1);
		return call<R>("setReadTimeout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRequestMethod(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRequestMethod")] != -1);
		return call<R>("setRequestMethod", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRequestProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRequestProperty")] != -1);
		return call<R>("setRequestProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTunnelState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTunnelState")] != -1);
		return call<R>("setTunnelState", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto streaming(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("streaming")] != -1);
		return call<R>("streaming", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto usingProxy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("usingProxy")] != -1);
		return call<R>("usingProxy", std::forward<Args>(args)...);
	}

};

#endif
