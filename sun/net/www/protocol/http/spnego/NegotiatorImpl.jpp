#ifndef sun_net_www_protocol_http_spnego_NegotiatorImpl_HPP
#define sun_net_www_protocol_http_spnego_NegotiatorImpl_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::sun::net::www::protocol::http::spnego::NegotiatorImpl : public jObject<::sun::net::www::protocol::http::spnego::NegotiatorImpl, ::sun::net::www::protocol::http::Negotiator> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net_www_protocol_http_spnego / "NegotiatorImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::sun::net::www::protocol::http::HttpCallerInfo)>(), //
		jMethod<::jbyte *()>("firstToken"), //
		jMethod<::jbyte *(::jbyte *)>("nextToken"), //
	};

	template<typename R = ::jbyte *, typename... Args>
	auto firstToken(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("firstToken")] != -1);
		return call<R>("firstToken", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto nextToken(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nextToken")] != -1);
		return call<R>("nextToken", std::forward<Args>(args)...);
	}

};

#endif
