#ifndef sun_net_www_protocol_http_AuthCacheValue$Type_HPP
#define sun_net_www_protocol_http_AuthCacheValue$Type_HPP

#include "../../../../../jfwd_decl.hpp"

class ::sun::net::www::protocol::http::AuthCacheValue$Type : public jObject<::sun::net::www::protocol::http::AuthCacheValue$Type, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net_www_protocol_http / "AuthCacheValue$Type";

	constexpr static Enume field_signatures{
		jField<::sun::net::www::protocol::http::AuthCacheValue$Type>("Proxy"), //
		jField<::sun::net::www::protocol::http::AuthCacheValue$Type>("Server"), //
	};

	template<typename F = ::sun::net::www::protocol::http::AuthCacheValue$Type>
	static auto Proxy() {
		static_assert(field_signatures[jField<F>("Proxy")] != -1);
		return sat<F>("Proxy");
	}

	template<typename F = ::sun::net::www::protocol::http::AuthCacheValue$Type>
	static auto Server() {
		static_assert(field_signatures[jField<F>("Server")] != -1);
		return sat<F>("Server");
	}

	constexpr static Enume method_signatures{
		jMethod<::sun::net::www::protocol::http::AuthCacheValue$Type(::java::lang::String)>("valueOf"), //
		jMethod<::sun::net::www::protocol::http::AuthCacheValue$Type *()>("values"), //
	};

	template<typename R = ::sun::net::www::protocol::http::AuthCacheValue$Type, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::net::www::protocol::http::AuthCacheValue$Type *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
