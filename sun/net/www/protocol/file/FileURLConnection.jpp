#ifndef sun_net_www_protocol_file_FileURLConnection_HPP
#define sun_net_www_protocol_file_FileURLConnection_HPP

#include "../../../../../jfwd_decl.hpp"

class ::sun::net::www::protocol::file::FileURLConnection : public jObject<::sun::net::www::protocol::file::FileURLConnection, ::sun::net::www::URLConnection> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net_www_protocol_file / "FileURLConnection";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("connect"), //
		jMethod<::jint()>("getContentLength"), //
		jMethod<::jlong()>("getContentLengthLong"), //
		jMethod<::java::lang::String(::jint)>("getHeaderField"), //
		jMethod<::java::lang::String(::java::lang::String)>("getHeaderField"), //
		jMethod<::java::lang::String(::jint)>("getHeaderFieldKey"), //
		jMethod<::java::io::InputStream()>("getInputStream"), //
		jMethod<::jlong()>("getLastModified"), //
		jMethod<::java::security::Permission()>("getPermission"), //
		jMethod<::sun::net::www::MessageHeader()>("getProperties"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto connect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("connect")] != -1);
		return call<R>("connect", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getContentLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContentLength")] != -1);
		return call<R>("getContentLength", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getContentLengthLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContentLengthLong")] != -1);
		return call<R>("getContentLengthLong", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHeaderField(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeaderField")] != -1);
		return call<R>("getHeaderField", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHeaderFieldKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeaderFieldKey")] != -1);
		return call<R>("getHeaderFieldKey", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	auto getInputStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInputStream")] != -1);
		return call<R>("getInputStream", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLastModified(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLastModified")] != -1);
		return call<R>("getLastModified", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::Permission, typename... Args>
	auto getPermission(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPermission")] != -1);
		return call<R>("getPermission", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::net::www::MessageHeader, typename... Args>
	auto getProperties(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProperties")] != -1);
		return call<R>("getProperties", std::forward<Args>(args)...);
	}

};

#endif
