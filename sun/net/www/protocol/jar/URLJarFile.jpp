#ifndef sun_net_www_protocol_jar_URLJarFile_HPP
#define sun_net_www_protocol_jar_URLJarFile_HPP

#include "../../../../../jfwd_decl.hpp"

class ::sun::net::www::protocol::jar::URLJarFile : public jObject<::sun::net::www::protocol::jar::URLJarFile, ::java::util::jar::JarFile> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net_www_protocol_jar / "URLJarFile";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::io::File)>(), //
		jConstructor<::jvoid(::java::io::File, ::sun::net::www::protocol::jar::URLJarFile$URLJarFileCloseController)>(), //
		jMethod<::jvoid()>("close"), //
		jMethod<::java::util::zip::ZipEntry(::java::lang::String)>("getEntry"), //
		jMethod<::java::util::jar::Manifest()>("getManifest"), //
		jMethod<::jvoid(::sun::net::www::protocol::jar::URLJarFileCallBack)>("setCallBack"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::zip::ZipEntry, typename... Args>
	auto getEntry(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEntry")] != -1);
		return call<R>("getEntry", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::jar::Manifest, typename... Args>
	auto getManifest(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getManifest")] != -1);
		return call<R>("getManifest", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setCallBack(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCallBack")] != -1);
		return scall<R>("setCallBack", std::forward<Args>(args)...);
	}

};

#endif
