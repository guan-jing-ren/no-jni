#ifndef sun_net_www_protocol_jar_JarURLConnection_HPP
#define sun_net_www_protocol_jar_JarURLConnection_HPP

#include "../../../../../jfwd_decl.hpp"

class ::sun::net::www::protocol::jar::JarURLConnection : public jObject<::sun::net::www::protocol::jar::JarURLConnection, ::java::net::JarURLConnection> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net_www_protocol_jar / "JarURLConnection";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::net::URL, ::sun::net::www::protocol::jar::Handler)>(), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("addRequestProperty"), //
		jMethod<::jvoid()>("connect"), //
		jMethod<::jboolean()>("getAllowUserInteraction"), //
		jMethod<::java::lang::Object()>("getContent"), //
		jMethod<::jint()>("getContentLength"), //
		jMethod<::jlong()>("getContentLengthLong"), //
		jMethod<::java::lang::String()>("getContentType"), //
		jMethod<::jboolean()>("getDefaultUseCaches"), //
		jMethod<::java::lang::String(::java::lang::String)>("getHeaderField"), //
		jMethod<::java::io::InputStream()>("getInputStream"), //
		jMethod<::java::util::jar::JarEntry()>("getJarEntry"), //
		jMethod<::java::util::jar::JarFile()>("getJarFile"), //
		jMethod<::java::security::Permission()>("getPermission"), //
		jMethod<::java::util::Map()>("getRequestProperties"), //
		jMethod<::java::lang::String(::java::lang::String)>("getRequestProperty"), //
		jMethod<::jboolean()>("getUseCaches"), //
		jMethod<::jvoid(::jboolean)>("setAllowUserInteraction"), //
		jMethod<::jvoid(::jboolean)>("setDefaultUseCaches"), //
		jMethod<::jvoid(::jlong)>("setIfModifiedSince"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("setRequestProperty"), //
		jMethod<::jvoid(::jboolean)>("setUseCaches"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addRequestProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addRequestProperty")] != -1);
		return call<R>("addRequestProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto connect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("connect")] != -1);
		return call<R>("connect", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getAllowUserInteraction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAllowUserInteraction")] != -1);
		return call<R>("getAllowUserInteraction", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getContent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContent")] != -1);
		return call<R>("getContent", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getContentLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContentLength")] != -1);
		return call<R>("getContentLength", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getContentLengthLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContentLengthLong")] != -1);
		return call<R>("getContentLengthLong", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getContentType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContentType")] != -1);
		return call<R>("getContentType", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getDefaultUseCaches(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultUseCaches")] != -1);
		return call<R>("getDefaultUseCaches", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHeaderField(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeaderField")] != -1);
		return call<R>("getHeaderField", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	auto getInputStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInputStream")] != -1);
		return call<R>("getInputStream", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::jar::JarEntry, typename... Args>
	auto getJarEntry(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJarEntry")] != -1);
		return call<R>("getJarEntry", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::jar::JarFile, typename... Args>
	auto getJarFile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJarFile")] != -1);
		return call<R>("getJarFile", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::Permission, typename... Args>
	auto getPermission(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPermission")] != -1);
		return call<R>("getPermission", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getRequestProperties(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRequestProperties")] != -1);
		return call<R>("getRequestProperties", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRequestProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRequestProperty")] != -1);
		return call<R>("getRequestProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getUseCaches(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUseCaches")] != -1);
		return call<R>("getUseCaches", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAllowUserInteraction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAllowUserInteraction")] != -1);
		return call<R>("setAllowUserInteraction", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDefaultUseCaches(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDefaultUseCaches")] != -1);
		return call<R>("setDefaultUseCaches", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIfModifiedSince(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIfModifiedSince")] != -1);
		return call<R>("setIfModifiedSince", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRequestProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRequestProperty")] != -1);
		return call<R>("setRequestProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUseCaches(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUseCaches")] != -1);
		return call<R>("setUseCaches", std::forward<Args>(args)...);
	}

};

#endif
