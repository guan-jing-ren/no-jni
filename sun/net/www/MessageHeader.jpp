#ifndef sun_net_www_MessageHeader_HPP
#define sun_net_www_MessageHeader_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::net::www::MessageHeader : public jObject<::sun::net::www::MessageHeader, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net_www / "MessageHeader";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::io::InputStream)>(), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("add"), //
		jMethod<::java::lang::String(::java::lang::String)>("canonicalID"), //
		jMethod<::java::util::Map(::java::lang::String *, ::java::util::Map)>("filterAndAddHeaders"), //
		jMethod<::jboolean(::java::lang::String)>("filterNTLMResponses"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::lang::String)>("findNextValue"), //
		jMethod<::java::lang::String(::java::lang::String)>("findValue"), //
		jMethod<::java::lang::String()>("getHeaderNamesInList"), //
		jMethod<::java::util::Map()>("getHeaders"), //
		jMethod<::java::util::Map(::java::lang::String *)>("getHeaders"), //
		jMethod<::java::lang::String(::jint)>("getKey"), //
		jMethod<::jint(::java::lang::String)>("getKey"), //
		jMethod<::java::lang::String(::jint)>("getValue"), //
		jMethod<::jvoid(::java::io::InputStream)>("mergeHeader"), //
		jMethod<::java::util::Iterator(::java::lang::String)>("multiValueIterator"), //
		jMethod<::jvoid(::java::io::InputStream)>("parseHeader"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("prepend"), //
		jMethod<::jvoid(::java::io::PrintStream)>("print"), //
		jMethod<::jvoid(::java::lang::String)>("remove"), //
		jMethod<::jvoid()>("reset"), //
		jMethod<::jvoid(::jint, ::java::lang::String, ::java::lang::String)>("set"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("set"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("setIfNotSet"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto canonicalID(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canonicalID")] != -1);
		return scall<R>("canonicalID", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto filterAndAddHeaders(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("filterAndAddHeaders")] != -1);
		return call<R>("filterAndAddHeaders", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto filterNTLMResponses(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("filterNTLMResponses")] != -1);
		return call<R>("filterNTLMResponses", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto findNextValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("findNextValue")] != -1);
		return call<R>("findNextValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto findValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("findValue")] != -1);
		return call<R>("findValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHeaderNamesInList(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeaderNamesInList")] != -1);
		return call<R>("getHeaderNamesInList", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getHeaders(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeaders")] != -1);
		return call<R>("getHeaders", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKey")] != -1);
		return call<R>("getKey", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mergeHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mergeHeader")] != -1);
		return call<R>("mergeHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto multiValueIterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("multiValueIterator")] != -1);
		return call<R>("multiValueIterator", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto parseHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseHeader")] != -1);
		return call<R>("parseHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto prepend(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("prepend")] != -1);
		return call<R>("prepend", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto print(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("print")] != -1);
		return call<R>("print", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set")] != -1);
		return call<R>("set", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIfNotSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIfNotSet")] != -1);
		return call<R>("setIfNotSet", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
