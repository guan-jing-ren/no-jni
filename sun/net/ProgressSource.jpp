#ifndef sun_net_ProgressSource_HPP
#define sun_net_ProgressSource_HPP

#include "../../jfwd_decl.hpp"

class ::sun::net::ProgressSource : public jObject<::sun::net::ProgressSource, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net / "ProgressSource";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::net::URL, ::java::lang::String)>(), //
		jConstructor<::jvoid(::java::net::URL, ::java::lang::String, ::jlong)>(), //
		jMethod<::jvoid()>("beginTracking"), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::jboolean()>("connected"), //
		jMethod<::jvoid()>("finishTracking"), //
		jMethod<::java::lang::String()>("getContentType"), //
		jMethod<::jlong()>("getExpected"), //
		jMethod<::java::lang::String()>("getMethod"), //
		jMethod<::jlong()>("getProgress"), //
		jMethod<::sun::net::ProgressSource$State()>("getState"), //
		jMethod<::java::net::URL()>("getURL"), //
		jMethod<::jvoid(::java::lang::String)>("setContentType"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid(::jlong, ::jlong)>("updateProgress"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto beginTracking(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("beginTracking")] != -1);
		return call<R>("beginTracking", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto connected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("connected")] != -1);
		return call<R>("connected", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto finishTracking(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("finishTracking")] != -1);
		return call<R>("finishTracking", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getContentType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContentType")] != -1);
		return call<R>("getContentType", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getExpected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExpected")] != -1);
		return call<R>("getExpected", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMethod(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMethod")] != -1);
		return call<R>("getMethod", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getProgress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProgress")] != -1);
		return call<R>("getProgress", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::net::ProgressSource$State, typename... Args>
	auto getState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getState")] != -1);
		return call<R>("getState", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::URL, typename... Args>
	auto getURL(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getURL")] != -1);
		return call<R>("getURL", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setContentType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setContentType")] != -1);
		return call<R>("setContentType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateProgress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateProgress")] != -1);
		return call<R>("updateProgress", std::forward<Args>(args)...);
	}

};

#endif
