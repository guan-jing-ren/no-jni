#ifndef sun_net_NetworkServer_HPP
#define sun_net_NetworkServer_HPP

#include "../../jfwd_decl.hpp"

class ::sun::net::NetworkServer : public jObject<::sun::net::NetworkServer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net / "NetworkServer";

	constexpr static Enume field_signatures{
		jField<::java::io::InputStream>("clientInput"), //
		jField<::java::io::PrintStream>("clientOutput"), //
		jField<::java::net::Socket>("clientSocket"), //
	};

	template<typename F = ::java::io::InputStream>
	auto clientInput() const {
		static_assert(field_signatures[jField<F>("clientInput")] != -1);
		return at<F>("clientInput");
	}

	template<typename F = ::java::io::PrintStream>
	auto clientOutput() const {
		static_assert(field_signatures[jField<F>("clientOutput")] != -1);
		return at<F>("clientOutput");
	}

	template<typename F = ::java::net::Socket>
	auto clientSocket() const {
		static_assert(field_signatures[jField<F>("clientSocket")] != -1);
		return at<F>("clientSocket");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jboolean()>("clientIsOpen"), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::jvoid(::java::lang::String *)>("main"), //
		jMethod<::jvoid()>("run"), //
		jMethod<::jvoid()>("serviceRequest"), //
		jMethod<::jvoid(::jint)>("startServer"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto clientIsOpen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clientIsOpen")] != -1);
		return call<R>("clientIsOpen", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto main(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("main")] != -1);
		return scall<R>("main", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto run(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("run")] != -1);
		return call<R>("run", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto serviceRequest(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("serviceRequest")] != -1);
		return call<R>("serviceRequest", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto startServer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("startServer")] != -1);
		return call<R>("startServer", std::forward<Args>(args)...);
	}

};

#endif
