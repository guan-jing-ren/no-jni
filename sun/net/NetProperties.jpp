#ifndef sun_net_NetProperties_HPP
#define sun_net_NetProperties_HPP

#include "../../jfwd_decl.hpp"

class ::sun::net::NetProperties : public jObject<::sun::net::NetProperties, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net / "NetProperties";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String(::java::lang::String)>("get"), //
		jMethod<::java::lang::Boolean(::java::lang::String)>("getBoolean"), //
		jMethod<::java::lang::Integer(::java::lang::String, ::jint)>("getInteger"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	static auto get(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return scall<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Boolean, typename... Args>
	static auto getBoolean(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBoolean")] != -1);
		return scall<R>("getBoolean", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Integer, typename... Args>
	static auto getInteger(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInteger")] != -1);
		return scall<R>("getInteger", std::forward<Args>(args)...);
	}

};

#endif
