#ifndef sun_net_idn_UCharacterEnums$ECharacterCategory_HPP
#define sun_net_idn_UCharacterEnums$ECharacterCategory_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::net::idn::UCharacterEnums$ECharacterCategory : public jObject<::sun::net::idn::UCharacterEnums$ECharacterCategory, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net_idn / "UCharacterEnums$ECharacterCategory";

	constexpr static Enume field_signatures{
		jField<::jint>("CHAR_CATEGORY_COUNT"), //
		jField<::jint>("COMBINING_SPACING_MARK"), //
		jField<::jint>("CONNECTOR_PUNCTUATION"), //
		jField<::jint>("CONTROL"), //
		jField<::jint>("CURRENCY_SYMBOL"), //
		jField<::jint>("DASH_PUNCTUATION"), //
		jField<::jint>("DECIMAL_DIGIT_NUMBER"), //
		jField<::jint>("ENCLOSING_MARK"), //
		jField<::jint>("END_PUNCTUATION"), //
		jField<::jint>("FINAL_PUNCTUATION"), //
		jField<::jint>("FINAL_QUOTE_PUNCTUATION"), //
		jField<::jint>("FORMAT"), //
		jField<::jint>("GENERAL_OTHER_TYPES"), //
		jField<::jint>("INITIAL_PUNCTUATION"), //
		jField<::jint>("INITIAL_QUOTE_PUNCTUATION"), //
		jField<::jint>("LETTER_NUMBER"), //
		jField<::jint>("LINE_SEPARATOR"), //
		jField<::jint>("LOWERCASE_LETTER"), //
		jField<::jint>("MATH_SYMBOL"), //
		jField<::jint>("MODIFIER_LETTER"), //
		jField<::jint>("MODIFIER_SYMBOL"), //
		jField<::jint>("NON_SPACING_MARK"), //
		jField<::jint>("OTHER_LETTER"), //
		jField<::jint>("OTHER_NUMBER"), //
		jField<::jint>("OTHER_PUNCTUATION"), //
		jField<::jint>("OTHER_SYMBOL"), //
		jField<::jint>("PARAGRAPH_SEPARATOR"), //
		jField<::jint>("PRIVATE_USE"), //
		jField<::jint>("SPACE_SEPARATOR"), //
		jField<::jint>("START_PUNCTUATION"), //
		jField<::jint>("SURROGATE"), //
		jField<::jint>("TITLECASE_LETTER"), //
		jField<::jint>("UNASSIGNED"), //
		jField<::jint>("UPPERCASE_LETTER"), //
	};

	template<typename F = ::jint>
	static auto CHAR_CATEGORY_COUNT() {
		static_assert(field_signatures[jField<F>("CHAR_CATEGORY_COUNT")] != -1);
		return sat<F>("CHAR_CATEGORY_COUNT");
	}

	template<typename F = ::jint>
	static auto COMBINING_SPACING_MARK() {
		static_assert(field_signatures[jField<F>("COMBINING_SPACING_MARK")] != -1);
		return sat<F>("COMBINING_SPACING_MARK");
	}

	template<typename F = ::jint>
	static auto CONNECTOR_PUNCTUATION() {
		static_assert(field_signatures[jField<F>("CONNECTOR_PUNCTUATION")] != -1);
		return sat<F>("CONNECTOR_PUNCTUATION");
	}

	template<typename F = ::jint>
	static auto CONTROL() {
		static_assert(field_signatures[jField<F>("CONTROL")] != -1);
		return sat<F>("CONTROL");
	}

	template<typename F = ::jint>
	static auto CURRENCY_SYMBOL() {
		static_assert(field_signatures[jField<F>("CURRENCY_SYMBOL")] != -1);
		return sat<F>("CURRENCY_SYMBOL");
	}

	template<typename F = ::jint>
	static auto DASH_PUNCTUATION() {
		static_assert(field_signatures[jField<F>("DASH_PUNCTUATION")] != -1);
		return sat<F>("DASH_PUNCTUATION");
	}

	template<typename F = ::jint>
	static auto DECIMAL_DIGIT_NUMBER() {
		static_assert(field_signatures[jField<F>("DECIMAL_DIGIT_NUMBER")] != -1);
		return sat<F>("DECIMAL_DIGIT_NUMBER");
	}

	template<typename F = ::jint>
	static auto ENCLOSING_MARK() {
		static_assert(field_signatures[jField<F>("ENCLOSING_MARK")] != -1);
		return sat<F>("ENCLOSING_MARK");
	}

	template<typename F = ::jint>
	static auto END_PUNCTUATION() {
		static_assert(field_signatures[jField<F>("END_PUNCTUATION")] != -1);
		return sat<F>("END_PUNCTUATION");
	}

	template<typename F = ::jint>
	static auto FINAL_PUNCTUATION() {
		static_assert(field_signatures[jField<F>("FINAL_PUNCTUATION")] != -1);
		return sat<F>("FINAL_PUNCTUATION");
	}

	template<typename F = ::jint>
	static auto FINAL_QUOTE_PUNCTUATION() {
		static_assert(field_signatures[jField<F>("FINAL_QUOTE_PUNCTUATION")] != -1);
		return sat<F>("FINAL_QUOTE_PUNCTUATION");
	}

	template<typename F = ::jint>
	static auto FORMAT() {
		static_assert(field_signatures[jField<F>("FORMAT")] != -1);
		return sat<F>("FORMAT");
	}

	template<typename F = ::jint>
	static auto GENERAL_OTHER_TYPES() {
		static_assert(field_signatures[jField<F>("GENERAL_OTHER_TYPES")] != -1);
		return sat<F>("GENERAL_OTHER_TYPES");
	}

	template<typename F = ::jint>
	static auto INITIAL_PUNCTUATION() {
		static_assert(field_signatures[jField<F>("INITIAL_PUNCTUATION")] != -1);
		return sat<F>("INITIAL_PUNCTUATION");
	}

	template<typename F = ::jint>
	static auto INITIAL_QUOTE_PUNCTUATION() {
		static_assert(field_signatures[jField<F>("INITIAL_QUOTE_PUNCTUATION")] != -1);
		return sat<F>("INITIAL_QUOTE_PUNCTUATION");
	}

	template<typename F = ::jint>
	static auto LETTER_NUMBER() {
		static_assert(field_signatures[jField<F>("LETTER_NUMBER")] != -1);
		return sat<F>("LETTER_NUMBER");
	}

	template<typename F = ::jint>
	static auto LINE_SEPARATOR() {
		static_assert(field_signatures[jField<F>("LINE_SEPARATOR")] != -1);
		return sat<F>("LINE_SEPARATOR");
	}

	template<typename F = ::jint>
	static auto LOWERCASE_LETTER() {
		static_assert(field_signatures[jField<F>("LOWERCASE_LETTER")] != -1);
		return sat<F>("LOWERCASE_LETTER");
	}

	template<typename F = ::jint>
	static auto MATH_SYMBOL() {
		static_assert(field_signatures[jField<F>("MATH_SYMBOL")] != -1);
		return sat<F>("MATH_SYMBOL");
	}

	template<typename F = ::jint>
	static auto MODIFIER_LETTER() {
		static_assert(field_signatures[jField<F>("MODIFIER_LETTER")] != -1);
		return sat<F>("MODIFIER_LETTER");
	}

	template<typename F = ::jint>
	static auto MODIFIER_SYMBOL() {
		static_assert(field_signatures[jField<F>("MODIFIER_SYMBOL")] != -1);
		return sat<F>("MODIFIER_SYMBOL");
	}

	template<typename F = ::jint>
	static auto NON_SPACING_MARK() {
		static_assert(field_signatures[jField<F>("NON_SPACING_MARK")] != -1);
		return sat<F>("NON_SPACING_MARK");
	}

	template<typename F = ::jint>
	static auto OTHER_LETTER() {
		static_assert(field_signatures[jField<F>("OTHER_LETTER")] != -1);
		return sat<F>("OTHER_LETTER");
	}

	template<typename F = ::jint>
	static auto OTHER_NUMBER() {
		static_assert(field_signatures[jField<F>("OTHER_NUMBER")] != -1);
		return sat<F>("OTHER_NUMBER");
	}

	template<typename F = ::jint>
	static auto OTHER_PUNCTUATION() {
		static_assert(field_signatures[jField<F>("OTHER_PUNCTUATION")] != -1);
		return sat<F>("OTHER_PUNCTUATION");
	}

	template<typename F = ::jint>
	static auto OTHER_SYMBOL() {
		static_assert(field_signatures[jField<F>("OTHER_SYMBOL")] != -1);
		return sat<F>("OTHER_SYMBOL");
	}

	template<typename F = ::jint>
	static auto PARAGRAPH_SEPARATOR() {
		static_assert(field_signatures[jField<F>("PARAGRAPH_SEPARATOR")] != -1);
		return sat<F>("PARAGRAPH_SEPARATOR");
	}

	template<typename F = ::jint>
	static auto PRIVATE_USE() {
		static_assert(field_signatures[jField<F>("PRIVATE_USE")] != -1);
		return sat<F>("PRIVATE_USE");
	}

	template<typename F = ::jint>
	static auto SPACE_SEPARATOR() {
		static_assert(field_signatures[jField<F>("SPACE_SEPARATOR")] != -1);
		return sat<F>("SPACE_SEPARATOR");
	}

	template<typename F = ::jint>
	static auto START_PUNCTUATION() {
		static_assert(field_signatures[jField<F>("START_PUNCTUATION")] != -1);
		return sat<F>("START_PUNCTUATION");
	}

	template<typename F = ::jint>
	static auto SURROGATE() {
		static_assert(field_signatures[jField<F>("SURROGATE")] != -1);
		return sat<F>("SURROGATE");
	}

	template<typename F = ::jint>
	static auto TITLECASE_LETTER() {
		static_assert(field_signatures[jField<F>("TITLECASE_LETTER")] != -1);
		return sat<F>("TITLECASE_LETTER");
	}

	template<typename F = ::jint>
	static auto UNASSIGNED() {
		static_assert(field_signatures[jField<F>("UNASSIGNED")] != -1);
		return sat<F>("UNASSIGNED");
	}

	template<typename F = ::jint>
	static auto UPPERCASE_LETTER() {
		static_assert(field_signatures[jField<F>("UPPERCASE_LETTER")] != -1);
		return sat<F>("UPPERCASE_LETTER");
	}

	constexpr static Enume method_signatures{
		cexprstr{"\0"}, //
	};

};

#endif
