#ifndef sun_net_idn_UCharacterEnums$ECharacterDirection_HPP
#define sun_net_idn_UCharacterEnums$ECharacterDirection_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::net::idn::UCharacterEnums$ECharacterDirection : public jObject<::sun::net::idn::UCharacterEnums$ECharacterDirection, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net_idn / "UCharacterEnums$ECharacterDirection";

	constexpr static Enume field_signatures{
		jField<::jint>("ARABIC_NUMBER"), //
		jField<::jint>("BLOCK_SEPARATOR"), //
		jField<::jint>("BOUNDARY_NEUTRAL"), //
		jField<::jint>("CHAR_DIRECTION_COUNT"), //
		jField<::jint>("COMMON_NUMBER_SEPARATOR"), //
		jField<::jbyte>("DIRECTIONALITY_ARABIC_NUMBER"), //
		jField<::jbyte>("DIRECTIONALITY_BOUNDARY_NEUTRAL"), //
		jField<::jbyte>("DIRECTIONALITY_COMMON_NUMBER_SEPARATOR"), //
		jField<::jbyte>("DIRECTIONALITY_EUROPEAN_NUMBER"), //
		jField<::jbyte>("DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR"), //
		jField<::jbyte>("DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR"), //
		jField<::jbyte>("DIRECTIONALITY_LEFT_TO_RIGHT"), //
		jField<::jbyte>("DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING"), //
		jField<::jbyte>("DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE"), //
		jField<::jbyte>("DIRECTIONALITY_NON_SPACING_MARK"), //
		jField<::jbyte>("DIRECTIONALITY_OTHER_NEUTRALS"), //
		jField<::jbyte>("DIRECTIONALITY_PARAGRAPH_SEPARATOR"), //
		jField<::jbyte>("DIRECTIONALITY_POP_DIRECTIONAL_FORMAT"), //
		jField<::jbyte>("DIRECTIONALITY_RIGHT_TO_LEFT"), //
		jField<::jbyte>("DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC"), //
		jField<::jbyte>("DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING"), //
		jField<::jbyte>("DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE"), //
		jField<::jbyte>("DIRECTIONALITY_SEGMENT_SEPARATOR"), //
		jField<::jbyte>("DIRECTIONALITY_UNDEFINED"), //
		jField<::jbyte>("DIRECTIONALITY_WHITESPACE"), //
		jField<::jint>("DIR_NON_SPACING_MARK"), //
		jField<::jint>("EUROPEAN_NUMBER"), //
		jField<::jint>("EUROPEAN_NUMBER_SEPARATOR"), //
		jField<::jint>("EUROPEAN_NUMBER_TERMINATOR"), //
		jField<::jint>("LEFT_TO_RIGHT"), //
		jField<::jint>("LEFT_TO_RIGHT_EMBEDDING"), //
		jField<::jint>("LEFT_TO_RIGHT_OVERRIDE"), //
		jField<::jint>("OTHER_NEUTRAL"), //
		jField<::jint>("POP_DIRECTIONAL_FORMAT"), //
		jField<::jint>("RIGHT_TO_LEFT"), //
		jField<::jint>("RIGHT_TO_LEFT_ARABIC"), //
		jField<::jint>("RIGHT_TO_LEFT_EMBEDDING"), //
		jField<::jint>("RIGHT_TO_LEFT_OVERRIDE"), //
		jField<::jint>("SEGMENT_SEPARATOR"), //
		jField<::jint>("WHITE_SPACE_NEUTRAL"), //
	};

	template<typename F = ::jint>
	static auto ARABIC_NUMBER() {
		static_assert(field_signatures[jField<F>("ARABIC_NUMBER")] != -1);
		return sat<F>("ARABIC_NUMBER");
	}

	template<typename F = ::jint>
	static auto BLOCK_SEPARATOR() {
		static_assert(field_signatures[jField<F>("BLOCK_SEPARATOR")] != -1);
		return sat<F>("BLOCK_SEPARATOR");
	}

	template<typename F = ::jint>
	static auto BOUNDARY_NEUTRAL() {
		static_assert(field_signatures[jField<F>("BOUNDARY_NEUTRAL")] != -1);
		return sat<F>("BOUNDARY_NEUTRAL");
	}

	template<typename F = ::jint>
	static auto CHAR_DIRECTION_COUNT() {
		static_assert(field_signatures[jField<F>("CHAR_DIRECTION_COUNT")] != -1);
		return sat<F>("CHAR_DIRECTION_COUNT");
	}

	template<typename F = ::jint>
	static auto COMMON_NUMBER_SEPARATOR() {
		static_assert(field_signatures[jField<F>("COMMON_NUMBER_SEPARATOR")] != -1);
		return sat<F>("COMMON_NUMBER_SEPARATOR");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_ARABIC_NUMBER() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_ARABIC_NUMBER")] != -1);
		return sat<F>("DIRECTIONALITY_ARABIC_NUMBER");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_BOUNDARY_NEUTRAL() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_BOUNDARY_NEUTRAL")] != -1);
		return sat<F>("DIRECTIONALITY_BOUNDARY_NEUTRAL");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_COMMON_NUMBER_SEPARATOR() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_COMMON_NUMBER_SEPARATOR")] != -1);
		return sat<F>("DIRECTIONALITY_COMMON_NUMBER_SEPARATOR");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_EUROPEAN_NUMBER() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_EUROPEAN_NUMBER")] != -1);
		return sat<F>("DIRECTIONALITY_EUROPEAN_NUMBER");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR")] != -1);
		return sat<F>("DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR")] != -1);
		return sat<F>("DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_LEFT_TO_RIGHT() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_LEFT_TO_RIGHT")] != -1);
		return sat<F>("DIRECTIONALITY_LEFT_TO_RIGHT");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING")] != -1);
		return sat<F>("DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE")] != -1);
		return sat<F>("DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_NON_SPACING_MARK() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_NON_SPACING_MARK")] != -1);
		return sat<F>("DIRECTIONALITY_NON_SPACING_MARK");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_OTHER_NEUTRALS() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_OTHER_NEUTRALS")] != -1);
		return sat<F>("DIRECTIONALITY_OTHER_NEUTRALS");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_PARAGRAPH_SEPARATOR() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_PARAGRAPH_SEPARATOR")] != -1);
		return sat<F>("DIRECTIONALITY_PARAGRAPH_SEPARATOR");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_POP_DIRECTIONAL_FORMAT() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_POP_DIRECTIONAL_FORMAT")] != -1);
		return sat<F>("DIRECTIONALITY_POP_DIRECTIONAL_FORMAT");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_RIGHT_TO_LEFT() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_RIGHT_TO_LEFT")] != -1);
		return sat<F>("DIRECTIONALITY_RIGHT_TO_LEFT");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC")] != -1);
		return sat<F>("DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING")] != -1);
		return sat<F>("DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE")] != -1);
		return sat<F>("DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_SEGMENT_SEPARATOR() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_SEGMENT_SEPARATOR")] != -1);
		return sat<F>("DIRECTIONALITY_SEGMENT_SEPARATOR");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_UNDEFINED() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_UNDEFINED")] != -1);
		return sat<F>("DIRECTIONALITY_UNDEFINED");
	}

	template<typename F = ::jbyte>
	static auto DIRECTIONALITY_WHITESPACE() {
		static_assert(field_signatures[jField<F>("DIRECTIONALITY_WHITESPACE")] != -1);
		return sat<F>("DIRECTIONALITY_WHITESPACE");
	}

	template<typename F = ::jint>
	static auto DIR_NON_SPACING_MARK() {
		static_assert(field_signatures[jField<F>("DIR_NON_SPACING_MARK")] != -1);
		return sat<F>("DIR_NON_SPACING_MARK");
	}

	template<typename F = ::jint>
	static auto EUROPEAN_NUMBER() {
		static_assert(field_signatures[jField<F>("EUROPEAN_NUMBER")] != -1);
		return sat<F>("EUROPEAN_NUMBER");
	}

	template<typename F = ::jint>
	static auto EUROPEAN_NUMBER_SEPARATOR() {
		static_assert(field_signatures[jField<F>("EUROPEAN_NUMBER_SEPARATOR")] != -1);
		return sat<F>("EUROPEAN_NUMBER_SEPARATOR");
	}

	template<typename F = ::jint>
	static auto EUROPEAN_NUMBER_TERMINATOR() {
		static_assert(field_signatures[jField<F>("EUROPEAN_NUMBER_TERMINATOR")] != -1);
		return sat<F>("EUROPEAN_NUMBER_TERMINATOR");
	}

	template<typename F = ::jint>
	static auto LEFT_TO_RIGHT() {
		static_assert(field_signatures[jField<F>("LEFT_TO_RIGHT")] != -1);
		return sat<F>("LEFT_TO_RIGHT");
	}

	template<typename F = ::jint>
	static auto LEFT_TO_RIGHT_EMBEDDING() {
		static_assert(field_signatures[jField<F>("LEFT_TO_RIGHT_EMBEDDING")] != -1);
		return sat<F>("LEFT_TO_RIGHT_EMBEDDING");
	}

	template<typename F = ::jint>
	static auto LEFT_TO_RIGHT_OVERRIDE() {
		static_assert(field_signatures[jField<F>("LEFT_TO_RIGHT_OVERRIDE")] != -1);
		return sat<F>("LEFT_TO_RIGHT_OVERRIDE");
	}

	template<typename F = ::jint>
	static auto OTHER_NEUTRAL() {
		static_assert(field_signatures[jField<F>("OTHER_NEUTRAL")] != -1);
		return sat<F>("OTHER_NEUTRAL");
	}

	template<typename F = ::jint>
	static auto POP_DIRECTIONAL_FORMAT() {
		static_assert(field_signatures[jField<F>("POP_DIRECTIONAL_FORMAT")] != -1);
		return sat<F>("POP_DIRECTIONAL_FORMAT");
	}

	template<typename F = ::jint>
	static auto RIGHT_TO_LEFT() {
		static_assert(field_signatures[jField<F>("RIGHT_TO_LEFT")] != -1);
		return sat<F>("RIGHT_TO_LEFT");
	}

	template<typename F = ::jint>
	static auto RIGHT_TO_LEFT_ARABIC() {
		static_assert(field_signatures[jField<F>("RIGHT_TO_LEFT_ARABIC")] != -1);
		return sat<F>("RIGHT_TO_LEFT_ARABIC");
	}

	template<typename F = ::jint>
	static auto RIGHT_TO_LEFT_EMBEDDING() {
		static_assert(field_signatures[jField<F>("RIGHT_TO_LEFT_EMBEDDING")] != -1);
		return sat<F>("RIGHT_TO_LEFT_EMBEDDING");
	}

	template<typename F = ::jint>
	static auto RIGHT_TO_LEFT_OVERRIDE() {
		static_assert(field_signatures[jField<F>("RIGHT_TO_LEFT_OVERRIDE")] != -1);
		return sat<F>("RIGHT_TO_LEFT_OVERRIDE");
	}

	template<typename F = ::jint>
	static auto SEGMENT_SEPARATOR() {
		static_assert(field_signatures[jField<F>("SEGMENT_SEPARATOR")] != -1);
		return sat<F>("SEGMENT_SEPARATOR");
	}

	template<typename F = ::jint>
	static auto WHITE_SPACE_NEUTRAL() {
		static_assert(field_signatures[jField<F>("WHITE_SPACE_NEUTRAL")] != -1);
		return sat<F>("WHITE_SPACE_NEUTRAL");
	}

	constexpr static Enume method_signatures{
		cexprstr{"\0"}, //
	};

};

#endif
