#ifndef sun_net_idn_StringPrep_HPP
#define sun_net_idn_StringPrep_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::net::idn::StringPrep : public jObject<::sun::net::idn::StringPrep, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net_idn / "StringPrep";

	constexpr static Enume field_signatures{
		jField<::jint>("ALLOW_UNASSIGNED"), //
		jField<::jint>("DEFAULT"), //
	};

	template<typename F = ::jint>
	static auto ALLOW_UNASSIGNED() {
		static_assert(field_signatures[jField<F>("ALLOW_UNASSIGNED")] != -1);
		return sat<F>("ALLOW_UNASSIGNED");
	}

	template<typename F = ::jint>
	static auto DEFAULT() {
		static_assert(field_signatures[jField<F>("DEFAULT")] != -1);
		return sat<F>("DEFAULT");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::io::InputStream)>(), //
		jMethod<::java::lang::StringBuffer(::sun::text::normalizer::UCharacterIterator, ::jint)>("prepare"), //
	};

	template<typename R = ::java::lang::StringBuffer, typename... Args>
	auto prepare(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("prepare")] != -1);
		return call<R>("prepare", std::forward<Args>(args)...);
	}

};

#endif
