#ifndef sun_net_ProgressListener_HPP
#define sun_net_ProgressListener_HPP

#include "../../jfwd_decl.hpp"

class ::sun::net::ProgressListener : public jObject<::sun::net::ProgressListener, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net / "ProgressListener";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::sun::net::ProgressEvent)>("progressFinish"), //
		jMethod<::jvoid(::sun::net::ProgressEvent)>("progressStart"), //
		jMethod<::jvoid(::sun::net::ProgressEvent)>("progressUpdate"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto progressFinish(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("progressFinish")] != -1);
		return call<R>("progressFinish", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto progressStart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("progressStart")] != -1);
		return call<R>("progressStart", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto progressUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("progressUpdate")] != -1);
		return call<R>("progressUpdate", std::forward<Args>(args)...);
	}

};

#endif
