#ifndef sun_net_URLCanonicalizer_HPP
#define sun_net_URLCanonicalizer_HPP

#include "../../jfwd_decl.hpp"

class ::sun::net::URLCanonicalizer : public jObject<::sun::net::URLCanonicalizer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net / "URLCanonicalizer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::String(::java::lang::String)>("canonicalize"), //
		jMethod<::jboolean(::java::lang::String)>("hasProtocolName"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto canonicalize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canonicalize")] != -1);
		return call<R>("canonicalize", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasProtocolName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasProtocolName")] != -1);
		return call<R>("hasProtocolName", std::forward<Args>(args)...);
	}

};

#endif
