#ifndef sun_net_TransferProtocolClient_HPP
#define sun_net_TransferProtocolClient_HPP

#include "../../jfwd_decl.hpp"

class ::sun::net::TransferProtocolClient : public jObject<::sun::net::TransferProtocolClient, ::sun::net::NetworkClient> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_net / "TransferProtocolClient";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::String, ::jint)>(), //
		jMethod<::java::lang::String()>("getResponseString"), //
		jMethod<::java::util::Vector()>("getResponseStrings"), //
		jMethod<::jint()>("readServerResponse"), //
		jMethod<::jvoid(::java::lang::String)>("sendServer"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getResponseString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResponseString")] != -1);
		return call<R>("getResponseString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Vector, typename... Args>
	auto getResponseStrings(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResponseStrings")] != -1);
		return call<R>("getResponseStrings", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto readServerResponse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readServerResponse")] != -1);
		return call<R>("readServerResponse", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto sendServer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sendServer")] != -1);
		return call<R>("sendServer", std::forward<Args>(args)...);
	}

};

#endif
