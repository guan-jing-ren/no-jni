#ifndef sun_misc_Regexp_HPP
#define sun_misc_Regexp_HPP

#include "../../jfwd_decl.hpp"

class ::sun::misc::Regexp : public jObject<::sun::misc::Regexp, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_misc / "Regexp";

	constexpr static Enume field_signatures{
		jField<::jboolean>("exact"), //
		jField<::java::lang::String>("exp"), //
		jField<::jboolean>("ignoreCase"), //
		jField<::java::lang::String *>("mids"), //
		jField<::java::lang::String>("prefix"), //
		jField<::jint>("prefixLen"), //
		jField<::java::lang::String>("suffix"), //
		jField<::jint>("suffixLen"), //
		jField<::jint>("totalLen"), //
	};

	template<typename F = ::jboolean>
	auto exact() const {
		static_assert(field_signatures[jField<F>("exact")] != -1);
		return at<F>("exact");
	}

	template<typename F = ::java::lang::String>
	auto exp() const {
		static_assert(field_signatures[jField<F>("exp")] != -1);
		return at<F>("exp");
	}

	template<typename F = ::jboolean>
	auto ignoreCase() const {
		static_assert(field_signatures[jField<F>("ignoreCase")] != -1);
		return at<F>("ignoreCase");
	}

	template<typename F = ::java::lang::String *>
	auto mids() const {
		static_assert(field_signatures[jField<F>("mids")] != -1);
		return at<F>("mids");
	}

	template<typename F = ::java::lang::String>
	auto prefix() const {
		static_assert(field_signatures[jField<F>("prefix")] != -1);
		return at<F>("prefix");
	}

	template<typename F = ::jint>
	auto prefixLen() const {
		static_assert(field_signatures[jField<F>("prefixLen")] != -1);
		return at<F>("prefixLen");
	}

	template<typename F = ::java::lang::String>
	auto suffix() const {
		static_assert(field_signatures[jField<F>("suffix")] != -1);
		return at<F>("suffix");
	}

	template<typename F = ::jint>
	auto suffixLen() const {
		static_assert(field_signatures[jField<F>("suffixLen")] != -1);
		return at<F>("suffixLen");
	}

	template<typename F = ::jint>
	auto totalLen() const {
		static_assert(field_signatures[jField<F>("totalLen")] != -1);
		return at<F>("totalLen");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
	};

};

#endif
