#ifndef sun_misc_PerfCounter_HPP
#define sun_misc_PerfCounter_HPP

#include "../../jfwd_decl.hpp"

class ::sun::misc::PerfCounter : public jObject<::sun::misc::PerfCounter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_misc / "PerfCounter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::jlong)>("add"), //
		jMethod<::jvoid(::jlong)>("addElapsedTimeFrom"), //
		jMethod<::jvoid(::jlong)>("addTime"), //
		jMethod<::jlong()>("get"), //
		jMethod<::sun::misc::PerfCounter()>("getD3DAvailable"), //
		jMethod<::sun::misc::PerfCounter()>("getFindClassTime"), //
		jMethod<::sun::misc::PerfCounter()>("getFindClasses"), //
		jMethod<::sun::misc::PerfCounter()>("getParentDelegationTime"), //
		jMethod<::sun::misc::PerfCounter()>("getReadClassBytesTime"), //
		jMethod<::sun::misc::PerfCounter()>("getZipFileCount"), //
		jMethod<::sun::misc::PerfCounter()>("getZipFileOpenTime"), //
		jMethod<::jvoid()>("increment"), //
		jMethod<::jvoid(::jlong)>("set"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addElapsedTimeFrom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addElapsedTimeFrom")] != -1);
		return call<R>("addElapsedTimeFrom", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addTime")] != -1);
		return call<R>("addTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::misc::PerfCounter, typename... Args>
	static auto getD3DAvailable(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getD3DAvailable")] != -1);
		return scall<R>("getD3DAvailable", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::misc::PerfCounter, typename... Args>
	static auto getFindClassTime(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFindClassTime")] != -1);
		return scall<R>("getFindClassTime", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::misc::PerfCounter, typename... Args>
	static auto getFindClasses(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFindClasses")] != -1);
		return scall<R>("getFindClasses", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::misc::PerfCounter, typename... Args>
	static auto getParentDelegationTime(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParentDelegationTime")] != -1);
		return scall<R>("getParentDelegationTime", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::misc::PerfCounter, typename... Args>
	static auto getReadClassBytesTime(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReadClassBytesTime")] != -1);
		return scall<R>("getReadClassBytesTime", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::misc::PerfCounter, typename... Args>
	static auto getZipFileCount(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getZipFileCount")] != -1);
		return scall<R>("getZipFileCount", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::misc::PerfCounter, typename... Args>
	static auto getZipFileOpenTime(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getZipFileOpenTime")] != -1);
		return scall<R>("getZipFileOpenTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto increment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("increment")] != -1);
		return call<R>("increment", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set")] != -1);
		return call<R>("set", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
