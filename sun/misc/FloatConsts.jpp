#ifndef sun_misc_FloatConsts_HPP
#define sun_misc_FloatConsts_HPP

#include "../../jfwd_decl.hpp"

class ::sun::misc::FloatConsts : public jObject<::sun::misc::FloatConsts, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_misc / "FloatConsts";

	constexpr static Enume field_signatures{
		jField<::jint>("EXP_BIAS"), //
		jField<::jint>("EXP_BIT_MASK"), //
		jField<::jint>("MAX_EXPONENT"), //
		jField<::jfloat>("MAX_VALUE"), //
		jField<::jint>("MIN_EXPONENT"), //
		jField<::jfloat>("MIN_NORMAL"), //
		jField<::jint>("MIN_SUB_EXPONENT"), //
		jField<::jfloat>("MIN_VALUE"), //
		jField<::jfloat>("NEGATIVE_INFINITY"), //
		jField<::jfloat>("NaN"), //
		jField<::jfloat>("POSITIVE_INFINITY"), //
		jField<::jint>("SIGNIFICAND_WIDTH"), //
		jField<::jint>("SIGNIF_BIT_MASK"), //
		jField<::jint>("SIGN_BIT_MASK"), //
	};

	template<typename F = ::jint>
	static auto EXP_BIAS() {
		static_assert(field_signatures[jField<F>("EXP_BIAS")] != -1);
		return sat<F>("EXP_BIAS");
	}

	template<typename F = ::jint>
	static auto EXP_BIT_MASK() {
		static_assert(field_signatures[jField<F>("EXP_BIT_MASK")] != -1);
		return sat<F>("EXP_BIT_MASK");
	}

	template<typename F = ::jint>
	static auto MAX_EXPONENT() {
		static_assert(field_signatures[jField<F>("MAX_EXPONENT")] != -1);
		return sat<F>("MAX_EXPONENT");
	}

	template<typename F = ::jfloat>
	static auto MAX_VALUE() {
		static_assert(field_signatures[jField<F>("MAX_VALUE")] != -1);
		return sat<F>("MAX_VALUE");
	}

	template<typename F = ::jint>
	static auto MIN_EXPONENT() {
		static_assert(field_signatures[jField<F>("MIN_EXPONENT")] != -1);
		return sat<F>("MIN_EXPONENT");
	}

	template<typename F = ::jfloat>
	static auto MIN_NORMAL() {
		static_assert(field_signatures[jField<F>("MIN_NORMAL")] != -1);
		return sat<F>("MIN_NORMAL");
	}

	template<typename F = ::jint>
	static auto MIN_SUB_EXPONENT() {
		static_assert(field_signatures[jField<F>("MIN_SUB_EXPONENT")] != -1);
		return sat<F>("MIN_SUB_EXPONENT");
	}

	template<typename F = ::jfloat>
	static auto MIN_VALUE() {
		static_assert(field_signatures[jField<F>("MIN_VALUE")] != -1);
		return sat<F>("MIN_VALUE");
	}

	template<typename F = ::jfloat>
	static auto NEGATIVE_INFINITY() {
		static_assert(field_signatures[jField<F>("NEGATIVE_INFINITY")] != -1);
		return sat<F>("NEGATIVE_INFINITY");
	}

	template<typename F = ::jfloat>
	static auto NaN() {
		static_assert(field_signatures[jField<F>("NaN")] != -1);
		return sat<F>("NaN");
	}

	template<typename F = ::jfloat>
	static auto POSITIVE_INFINITY() {
		static_assert(field_signatures[jField<F>("POSITIVE_INFINITY")] != -1);
		return sat<F>("POSITIVE_INFINITY");
	}

	template<typename F = ::jint>
	static auto SIGNIFICAND_WIDTH() {
		static_assert(field_signatures[jField<F>("SIGNIFICAND_WIDTH")] != -1);
		return sat<F>("SIGNIFICAND_WIDTH");
	}

	template<typename F = ::jint>
	static auto SIGNIF_BIT_MASK() {
		static_assert(field_signatures[jField<F>("SIGNIF_BIT_MASK")] != -1);
		return sat<F>("SIGNIF_BIT_MASK");
	}

	template<typename F = ::jint>
	static auto SIGN_BIT_MASK() {
		static_assert(field_signatures[jField<F>("SIGN_BIT_MASK")] != -1);
		return sat<F>("SIGN_BIT_MASK");
	}

	constexpr static Enume method_signatures{
		cexprstr{"\0"}, //
	};

};

#endif
