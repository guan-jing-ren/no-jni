#ifndef sun_misc_Unsafe_HPP
#define sun_misc_Unsafe_HPP

#include "../../jfwd_decl.hpp"

class ::sun::misc::Unsafe : public jObject<::sun::misc::Unsafe, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_misc / "Unsafe";

	constexpr static Enume field_signatures{
		jField<::jint>("ADDRESS_SIZE"), //
		jField<::jint>("ARRAY_BOOLEAN_BASE_OFFSET"), //
		jField<::jint>("ARRAY_BOOLEAN_INDEX_SCALE"), //
		jField<::jint>("ARRAY_BYTE_BASE_OFFSET"), //
		jField<::jint>("ARRAY_BYTE_INDEX_SCALE"), //
		jField<::jint>("ARRAY_CHAR_BASE_OFFSET"), //
		jField<::jint>("ARRAY_CHAR_INDEX_SCALE"), //
		jField<::jint>("ARRAY_DOUBLE_BASE_OFFSET"), //
		jField<::jint>("ARRAY_DOUBLE_INDEX_SCALE"), //
		jField<::jint>("ARRAY_FLOAT_BASE_OFFSET"), //
		jField<::jint>("ARRAY_FLOAT_INDEX_SCALE"), //
		jField<::jint>("ARRAY_INT_BASE_OFFSET"), //
		jField<::jint>("ARRAY_INT_INDEX_SCALE"), //
		jField<::jint>("ARRAY_LONG_BASE_OFFSET"), //
		jField<::jint>("ARRAY_LONG_INDEX_SCALE"), //
		jField<::jint>("ARRAY_OBJECT_BASE_OFFSET"), //
		jField<::jint>("ARRAY_OBJECT_INDEX_SCALE"), //
		jField<::jint>("ARRAY_SHORT_BASE_OFFSET"), //
		jField<::jint>("ARRAY_SHORT_INDEX_SCALE"), //
		jField<::jint>("INVALID_FIELD_OFFSET"), //
	};

	template<typename F = ::jint>
	static auto ADDRESS_SIZE() {
		static_assert(field_signatures[jField<F>("ADDRESS_SIZE")] != -1);
		return sat<F>("ADDRESS_SIZE");
	}

	template<typename F = ::jint>
	static auto ARRAY_BOOLEAN_BASE_OFFSET() {
		static_assert(field_signatures[jField<F>("ARRAY_BOOLEAN_BASE_OFFSET")] != -1);
		return sat<F>("ARRAY_BOOLEAN_BASE_OFFSET");
	}

	template<typename F = ::jint>
	static auto ARRAY_BOOLEAN_INDEX_SCALE() {
		static_assert(field_signatures[jField<F>("ARRAY_BOOLEAN_INDEX_SCALE")] != -1);
		return sat<F>("ARRAY_BOOLEAN_INDEX_SCALE");
	}

	template<typename F = ::jint>
	static auto ARRAY_BYTE_BASE_OFFSET() {
		static_assert(field_signatures[jField<F>("ARRAY_BYTE_BASE_OFFSET")] != -1);
		return sat<F>("ARRAY_BYTE_BASE_OFFSET");
	}

	template<typename F = ::jint>
	static auto ARRAY_BYTE_INDEX_SCALE() {
		static_assert(field_signatures[jField<F>("ARRAY_BYTE_INDEX_SCALE")] != -1);
		return sat<F>("ARRAY_BYTE_INDEX_SCALE");
	}

	template<typename F = ::jint>
	static auto ARRAY_CHAR_BASE_OFFSET() {
		static_assert(field_signatures[jField<F>("ARRAY_CHAR_BASE_OFFSET")] != -1);
		return sat<F>("ARRAY_CHAR_BASE_OFFSET");
	}

	template<typename F = ::jint>
	static auto ARRAY_CHAR_INDEX_SCALE() {
		static_assert(field_signatures[jField<F>("ARRAY_CHAR_INDEX_SCALE")] != -1);
		return sat<F>("ARRAY_CHAR_INDEX_SCALE");
	}

	template<typename F = ::jint>
	static auto ARRAY_DOUBLE_BASE_OFFSET() {
		static_assert(field_signatures[jField<F>("ARRAY_DOUBLE_BASE_OFFSET")] != -1);
		return sat<F>("ARRAY_DOUBLE_BASE_OFFSET");
	}

	template<typename F = ::jint>
	static auto ARRAY_DOUBLE_INDEX_SCALE() {
		static_assert(field_signatures[jField<F>("ARRAY_DOUBLE_INDEX_SCALE")] != -1);
		return sat<F>("ARRAY_DOUBLE_INDEX_SCALE");
	}

	template<typename F = ::jint>
	static auto ARRAY_FLOAT_BASE_OFFSET() {
		static_assert(field_signatures[jField<F>("ARRAY_FLOAT_BASE_OFFSET")] != -1);
		return sat<F>("ARRAY_FLOAT_BASE_OFFSET");
	}

	template<typename F = ::jint>
	static auto ARRAY_FLOAT_INDEX_SCALE() {
		static_assert(field_signatures[jField<F>("ARRAY_FLOAT_INDEX_SCALE")] != -1);
		return sat<F>("ARRAY_FLOAT_INDEX_SCALE");
	}

	template<typename F = ::jint>
	static auto ARRAY_INT_BASE_OFFSET() {
		static_assert(field_signatures[jField<F>("ARRAY_INT_BASE_OFFSET")] != -1);
		return sat<F>("ARRAY_INT_BASE_OFFSET");
	}

	template<typename F = ::jint>
	static auto ARRAY_INT_INDEX_SCALE() {
		static_assert(field_signatures[jField<F>("ARRAY_INT_INDEX_SCALE")] != -1);
		return sat<F>("ARRAY_INT_INDEX_SCALE");
	}

	template<typename F = ::jint>
	static auto ARRAY_LONG_BASE_OFFSET() {
		static_assert(field_signatures[jField<F>("ARRAY_LONG_BASE_OFFSET")] != -1);
		return sat<F>("ARRAY_LONG_BASE_OFFSET");
	}

	template<typename F = ::jint>
	static auto ARRAY_LONG_INDEX_SCALE() {
		static_assert(field_signatures[jField<F>("ARRAY_LONG_INDEX_SCALE")] != -1);
		return sat<F>("ARRAY_LONG_INDEX_SCALE");
	}

	template<typename F = ::jint>
	static auto ARRAY_OBJECT_BASE_OFFSET() {
		static_assert(field_signatures[jField<F>("ARRAY_OBJECT_BASE_OFFSET")] != -1);
		return sat<F>("ARRAY_OBJECT_BASE_OFFSET");
	}

	template<typename F = ::jint>
	static auto ARRAY_OBJECT_INDEX_SCALE() {
		static_assert(field_signatures[jField<F>("ARRAY_OBJECT_INDEX_SCALE")] != -1);
		return sat<F>("ARRAY_OBJECT_INDEX_SCALE");
	}

	template<typename F = ::jint>
	static auto ARRAY_SHORT_BASE_OFFSET() {
		static_assert(field_signatures[jField<F>("ARRAY_SHORT_BASE_OFFSET")] != -1);
		return sat<F>("ARRAY_SHORT_BASE_OFFSET");
	}

	template<typename F = ::jint>
	static auto ARRAY_SHORT_INDEX_SCALE() {
		static_assert(field_signatures[jField<F>("ARRAY_SHORT_INDEX_SCALE")] != -1);
		return sat<F>("ARRAY_SHORT_INDEX_SCALE");
	}

	template<typename F = ::jint>
	static auto INVALID_FIELD_OFFSET() {
		static_assert(field_signatures[jField<F>("INVALID_FIELD_OFFSET")] != -1);
		return sat<F>("INVALID_FIELD_OFFSET");
	}

	constexpr static Enume method_signatures{
		jMethod<::jint()>("addressSize"), //
		jMethod<::java::lang::Object(::java::lang::Class)>("allocateInstance"), //
		jMethod<::jlong(::jlong)>("allocateMemory"), //
		jMethod<::jint(::java::lang::Class)>("arrayBaseOffset"), //
		jMethod<::jint(::java::lang::Class)>("arrayIndexScale"), //
		jMethod<::jboolean(::java::lang::Object, ::jlong, ::jint, ::jint)>("compareAndSwapInt"), //
		jMethod<::jboolean(::java::lang::Object, ::jlong, ::jlong, ::jlong)>("compareAndSwapLong"), //
		jMethod<::jboolean(::java::lang::Object, ::jlong, ::java::lang::Object, ::java::lang::Object)>("compareAndSwapObject"), //
		jMethod<::jvoid(::jlong, ::jlong, ::jlong)>("copyMemory"), //
		jMethod<::jvoid(::java::lang::Object, ::jlong, ::java::lang::Object, ::jlong, ::jlong)>("copyMemory"), //
		jMethod<::java::lang::Class(::java::lang::Class, ::jbyte *, ::java::lang::Object *)>("defineAnonymousClass"), //
		jMethod<::java::lang::Class(::java::lang::String, ::jbyte *, ::jint, ::jint, ::java::lang::ClassLoader, ::java::security::ProtectionDomain)>("defineClass"), //
		jMethod<::jvoid(::java::lang::Class)>("ensureClassInitialized"), //
		jMethod<::jint(::java::lang::reflect::Field)>("fieldOffset"), //
		jMethod<::jvoid(::jlong)>("freeMemory"), //
		jMethod<::jvoid()>("fullFence"), //
		jMethod<::jlong(::jlong)>("getAddress"), //
		jMethod<::jint(::java::lang::Object, ::jlong, ::jint)>("getAndAddInt"), //
		jMethod<::jlong(::java::lang::Object, ::jlong, ::jlong)>("getAndAddLong"), //
		jMethod<::jint(::java::lang::Object, ::jlong, ::jint)>("getAndSetInt"), //
		jMethod<::jlong(::java::lang::Object, ::jlong, ::jlong)>("getAndSetLong"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::jlong, ::java::lang::Object)>("getAndSetObject"), //
		jMethod<::jboolean(::java::lang::Object, ::jint)>("getBoolean"), //
		jMethod<::jboolean(::java::lang::Object, ::jlong)>("getBoolean"), //
		jMethod<::jboolean(::java::lang::Object, ::jlong)>("getBooleanVolatile"), //
		jMethod<::jbyte(::jlong)>("getByte"), //
		jMethod<::jbyte(::java::lang::Object, ::jint)>("getByte"), //
		jMethod<::jbyte(::java::lang::Object, ::jlong)>("getByte"), //
		jMethod<::jbyte(::java::lang::Object, ::jlong)>("getByteVolatile"), //
		jMethod<::jchar(::jlong)>("getChar"), //
		jMethod<::jchar(::java::lang::Object, ::jint)>("getChar"), //
		jMethod<::jchar(::java::lang::Object, ::jlong)>("getChar"), //
		jMethod<::jchar(::java::lang::Object, ::jlong)>("getCharVolatile"), //
		jMethod<::jdouble(::jlong)>("getDouble"), //
		jMethod<::jdouble(::java::lang::Object, ::jint)>("getDouble"), //
		jMethod<::jdouble(::java::lang::Object, ::jlong)>("getDouble"), //
		jMethod<::jdouble(::java::lang::Object, ::jlong)>("getDoubleVolatile"), //
		jMethod<::jfloat(::jlong)>("getFloat"), //
		jMethod<::jfloat(::java::lang::Object, ::jint)>("getFloat"), //
		jMethod<::jfloat(::java::lang::Object, ::jlong)>("getFloat"), //
		jMethod<::jfloat(::java::lang::Object, ::jlong)>("getFloatVolatile"), //
		jMethod<::jint(::jlong)>("getInt"), //
		jMethod<::jint(::java::lang::Object, ::jint)>("getInt"), //
		jMethod<::jint(::java::lang::Object, ::jlong)>("getInt"), //
		jMethod<::jint(::java::lang::Object, ::jlong)>("getIntVolatile"), //
		jMethod<::jint(::jdouble *, ::jint)>("getLoadAverage"), //
		jMethod<::jlong(::jlong)>("getLong"), //
		jMethod<::jlong(::java::lang::Object, ::jint)>("getLong"), //
		jMethod<::jlong(::java::lang::Object, ::jlong)>("getLong"), //
		jMethod<::jlong(::java::lang::Object, ::jlong)>("getLongVolatile"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::jint)>("getObject"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::jlong)>("getObject"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::jlong)>("getObjectVolatile"), //
		jMethod<::jshort(::jlong)>("getShort"), //
		jMethod<::jshort(::java::lang::Object, ::jint)>("getShort"), //
		jMethod<::jshort(::java::lang::Object, ::jlong)>("getShort"), //
		jMethod<::jshort(::java::lang::Object, ::jlong)>("getShortVolatile"), //
		jMethod<::sun::misc::Unsafe()>("getUnsafe"), //
		jMethod<::jvoid()>("loadFence"), //
		jMethod<::jvoid(::java::lang::Object)>("monitorEnter"), //
		jMethod<::jvoid(::java::lang::Object)>("monitorExit"), //
		jMethod<::jlong(::java::lang::reflect::Field)>("objectFieldOffset"), //
		jMethod<::jint()>("pageSize"), //
		jMethod<::jvoid(::jboolean, ::jlong)>("park"), //
		jMethod<::jvoid(::jlong, ::jlong)>("putAddress"), //
		jMethod<::jvoid(::java::lang::Object, ::jint, ::jboolean)>("putBoolean"), //
		jMethod<::jvoid(::java::lang::Object, ::jlong, ::jboolean)>("putBoolean"), //
		jMethod<::jvoid(::java::lang::Object, ::jlong, ::jboolean)>("putBooleanVolatile"), //
		jMethod<::jvoid(::jlong, ::jbyte)>("putByte"), //
		jMethod<::jvoid(::java::lang::Object, ::jint, ::jbyte)>("putByte"), //
		jMethod<::jvoid(::java::lang::Object, ::jlong, ::jbyte)>("putByte"), //
		jMethod<::jvoid(::java::lang::Object, ::jlong, ::jbyte)>("putByteVolatile"), //
		jMethod<::jvoid(::jlong, ::jchar)>("putChar"), //
		jMethod<::jvoid(::java::lang::Object, ::jint, ::jchar)>("putChar"), //
		jMethod<::jvoid(::java::lang::Object, ::jlong, ::jchar)>("putChar"), //
		jMethod<::jvoid(::java::lang::Object, ::jlong, ::jchar)>("putCharVolatile"), //
		jMethod<::jvoid(::jlong, ::jdouble)>("putDouble"), //
		jMethod<::jvoid(::java::lang::Object, ::jint, ::jdouble)>("putDouble"), //
		jMethod<::jvoid(::java::lang::Object, ::jlong, ::jdouble)>("putDouble"), //
		jMethod<::jvoid(::java::lang::Object, ::jlong, ::jdouble)>("putDoubleVolatile"), //
		jMethod<::jvoid(::jlong, ::jfloat)>("putFloat"), //
		jMethod<::jvoid(::java::lang::Object, ::jint, ::jfloat)>("putFloat"), //
		jMethod<::jvoid(::java::lang::Object, ::jlong, ::jfloat)>("putFloat"), //
		jMethod<::jvoid(::java::lang::Object, ::jlong, ::jfloat)>("putFloatVolatile"), //
		jMethod<::jvoid(::jlong, ::jint)>("putInt"), //
		jMethod<::jvoid(::java::lang::Object, ::jint, ::jint)>("putInt"), //
		jMethod<::jvoid(::java::lang::Object, ::jlong, ::jint)>("putInt"), //
		jMethod<::jvoid(::java::lang::Object, ::jlong, ::jint)>("putIntVolatile"), //
		jMethod<::jvoid(::jlong, ::jlong)>("putLong"), //
		jMethod<::jvoid(::java::lang::Object, ::jint, ::jlong)>("putLong"), //
		jMethod<::jvoid(::java::lang::Object, ::jlong, ::jlong)>("putLong"), //
		jMethod<::jvoid(::java::lang::Object, ::jlong, ::jlong)>("putLongVolatile"), //
		jMethod<::jvoid(::java::lang::Object, ::jint, ::java::lang::Object)>("putObject"), //
		jMethod<::jvoid(::java::lang::Object, ::jlong, ::java::lang::Object)>("putObject"), //
		jMethod<::jvoid(::java::lang::Object, ::jlong, ::java::lang::Object)>("putObjectVolatile"), //
		jMethod<::jvoid(::java::lang::Object, ::jlong, ::jint)>("putOrderedInt"), //
		jMethod<::jvoid(::java::lang::Object, ::jlong, ::jlong)>("putOrderedLong"), //
		jMethod<::jvoid(::java::lang::Object, ::jlong, ::java::lang::Object)>("putOrderedObject"), //
		jMethod<::jvoid(::jlong, ::jshort)>("putShort"), //
		jMethod<::jvoid(::java::lang::Object, ::jint, ::jshort)>("putShort"), //
		jMethod<::jvoid(::java::lang::Object, ::jlong, ::jshort)>("putShort"), //
		jMethod<::jvoid(::java::lang::Object, ::jlong, ::jshort)>("putShortVolatile"), //
		jMethod<::jlong(::jlong, ::jlong)>("reallocateMemory"), //
		jMethod<::jvoid(::jlong, ::jlong, ::jbyte)>("setMemory"), //
		jMethod<::jvoid(::java::lang::Object, ::jlong, ::jlong, ::jbyte)>("setMemory"), //
		jMethod<::jboolean(::java::lang::Class)>("shouldBeInitialized"), //
		jMethod<::java::lang::Object(::java::lang::Class)>("staticFieldBase"), //
		jMethod<::java::lang::Object(::java::lang::reflect::Field)>("staticFieldBase"), //
		jMethod<::jlong(::java::lang::reflect::Field)>("staticFieldOffset"), //
		jMethod<::jvoid()>("storeFence"), //
		jMethod<::jvoid(::java::lang::Throwable)>("throwException"), //
		jMethod<::jboolean(::java::lang::Object)>("tryMonitorEnter"), //
		jMethod<::jvoid(::java::lang::Object)>("unpark"), //
	};

	template<typename R = ::jint, typename... Args>
	auto addressSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addressSize")] != -1);
		return call<R>("addressSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto allocateInstance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("allocateInstance")] != -1);
		return call<R>("allocateInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto allocateMemory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("allocateMemory")] != -1);
		return call<R>("allocateMemory", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto arrayBaseOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("arrayBaseOffset")] != -1);
		return call<R>("arrayBaseOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto arrayIndexScale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("arrayIndexScale")] != -1);
		return call<R>("arrayIndexScale", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto compareAndSwapInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compareAndSwapInt")] != -1);
		return call<R>("compareAndSwapInt", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto compareAndSwapLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compareAndSwapLong")] != -1);
		return call<R>("compareAndSwapLong", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto compareAndSwapObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compareAndSwapObject")] != -1);
		return call<R>("compareAndSwapObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto copyMemory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("copyMemory")] != -1);
		return call<R>("copyMemory", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto defineAnonymousClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("defineAnonymousClass")] != -1);
		return call<R>("defineAnonymousClass", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto defineClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("defineClass")] != -1);
		return call<R>("defineClass", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto ensureClassInitialized(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ensureClassInitialized")] != -1);
		return call<R>("ensureClassInitialized", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto fieldOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fieldOffset")] != -1);
		return call<R>("fieldOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto freeMemory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("freeMemory")] != -1);
		return call<R>("freeMemory", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fullFence(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fullFence")] != -1);
		return call<R>("fullFence", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAddress")] != -1);
		return call<R>("getAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAndAddInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAndAddInt")] != -1);
		return call<R>("getAndAddInt", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getAndAddLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAndAddLong")] != -1);
		return call<R>("getAndAddLong", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAndSetInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAndSetInt")] != -1);
		return call<R>("getAndSetInt", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getAndSetLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAndSetLong")] != -1);
		return call<R>("getAndSetLong", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getAndSetObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAndSetObject")] != -1);
		return call<R>("getAndSetObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getBoolean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBoolean")] != -1);
		return call<R>("getBoolean", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getBooleanVolatile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBooleanVolatile")] != -1);
		return call<R>("getBooleanVolatile", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto getByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getByte")] != -1);
		return call<R>("getByte", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto getByteVolatile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getByteVolatile")] != -1);
		return call<R>("getByteVolatile", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto getChar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChar")] != -1);
		return call<R>("getChar", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto getCharVolatile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCharVolatile")] != -1);
		return call<R>("getCharVolatile", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDouble")] != -1);
		return call<R>("getDouble", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getDoubleVolatile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDoubleVolatile")] != -1);
		return call<R>("getDoubleVolatile", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getFloat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFloat")] != -1);
		return call<R>("getFloat", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getFloatVolatile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFloatVolatile")] != -1);
		return call<R>("getFloatVolatile", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInt")] != -1);
		return call<R>("getInt", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getIntVolatile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIntVolatile")] != -1);
		return call<R>("getIntVolatile", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLoadAverage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLoadAverage")] != -1);
		return call<R>("getLoadAverage", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLong")] != -1);
		return call<R>("getLong", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLongVolatile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLongVolatile")] != -1);
		return call<R>("getLongVolatile", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObject")] != -1);
		return call<R>("getObject", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getObjectVolatile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectVolatile")] != -1);
		return call<R>("getObjectVolatile", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto getShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getShort")] != -1);
		return call<R>("getShort", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto getShortVolatile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getShortVolatile")] != -1);
		return call<R>("getShortVolatile", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::misc::Unsafe, typename... Args>
	static auto getUnsafe(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUnsafe")] != -1);
		return scall<R>("getUnsafe", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto loadFence(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("loadFence")] != -1);
		return call<R>("loadFence", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto monitorEnter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("monitorEnter")] != -1);
		return call<R>("monitorEnter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto monitorExit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("monitorExit")] != -1);
		return call<R>("monitorExit", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto objectFieldOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("objectFieldOffset")] != -1);
		return call<R>("objectFieldOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto pageSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("pageSize")] != -1);
		return call<R>("pageSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto park(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("park")] != -1);
		return call<R>("park", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putAddress")] != -1);
		return call<R>("putAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putBoolean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putBoolean")] != -1);
		return call<R>("putBoolean", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putBooleanVolatile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putBooleanVolatile")] != -1);
		return call<R>("putBooleanVolatile", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putByte")] != -1);
		return call<R>("putByte", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putByteVolatile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putByteVolatile")] != -1);
		return call<R>("putByteVolatile", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putChar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putChar")] != -1);
		return call<R>("putChar", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putCharVolatile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putCharVolatile")] != -1);
		return call<R>("putCharVolatile", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putDouble")] != -1);
		return call<R>("putDouble", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putDoubleVolatile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putDoubleVolatile")] != -1);
		return call<R>("putDoubleVolatile", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putFloat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putFloat")] != -1);
		return call<R>("putFloat", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putFloatVolatile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putFloatVolatile")] != -1);
		return call<R>("putFloatVolatile", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putInt")] != -1);
		return call<R>("putInt", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putIntVolatile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putIntVolatile")] != -1);
		return call<R>("putIntVolatile", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putLong")] != -1);
		return call<R>("putLong", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putLongVolatile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putLongVolatile")] != -1);
		return call<R>("putLongVolatile", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putObject")] != -1);
		return call<R>("putObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putObjectVolatile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putObjectVolatile")] != -1);
		return call<R>("putObjectVolatile", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putOrderedInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putOrderedInt")] != -1);
		return call<R>("putOrderedInt", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putOrderedLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putOrderedLong")] != -1);
		return call<R>("putOrderedLong", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putOrderedObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putOrderedObject")] != -1);
		return call<R>("putOrderedObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putShort")] != -1);
		return call<R>("putShort", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putShortVolatile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putShortVolatile")] != -1);
		return call<R>("putShortVolatile", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto reallocateMemory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reallocateMemory")] != -1);
		return call<R>("reallocateMemory", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMemory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMemory")] != -1);
		return call<R>("setMemory", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto shouldBeInitialized(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shouldBeInitialized")] != -1);
		return call<R>("shouldBeInitialized", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto staticFieldBase(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("staticFieldBase")] != -1);
		return call<R>("staticFieldBase", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto staticFieldOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("staticFieldOffset")] != -1);
		return call<R>("staticFieldOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto storeFence(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("storeFence")] != -1);
		return call<R>("storeFence", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto throwException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("throwException")] != -1);
		return call<R>("throwException", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto tryMonitorEnter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("tryMonitorEnter")] != -1);
		return call<R>("tryMonitorEnter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unpark(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unpark")] != -1);
		return call<R>("unpark", std::forward<Args>(args)...);
	}

};

#endif
