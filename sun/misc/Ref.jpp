#ifndef sun_misc_Ref_HPP
#define sun_misc_Ref_HPP

#include "../../jfwd_decl.hpp"

class ::sun::misc::Ref : public jObject<::sun::misc::Ref, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_misc / "Ref";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::Object)>(), //
		jMethod<::java::lang::Object()>("check"), //
		jMethod<::jvoid()>("flush"), //
		jMethod<::java::lang::Object()>("get"), //
		jMethod<::java::lang::Object()>("reconstitute"), //
		jMethod<::jvoid(::java::lang::Object)>("setThing"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto check(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("check")] != -1);
		return call<R>("check", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto flush(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("flush")] != -1);
		return call<R>("flush", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto reconstitute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reconstitute")] != -1);
		return call<R>("reconstitute", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setThing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setThing")] != -1);
		return call<R>("setThing", std::forward<Args>(args)...);
	}

};

#endif
