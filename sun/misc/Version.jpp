#ifndef sun_misc_Version_HPP
#define sun_misc_Version_HPP

#include "../../jfwd_decl.hpp"

class ::sun::misc::Version : public jObject<::sun::misc::Version, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_misc / "Version";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::String()>("getJdkSpecialVersion"), //
		jMethod<::java::lang::String()>("getJvmSpecialVersion"), //
		jMethod<::jvoid()>("init"), //
		jMethod<::jint()>("jdkBuildNumber"), //
		jMethod<::jint()>("jdkMajorVersion"), //
		jMethod<::jint()>("jdkMicroVersion"), //
		jMethod<::jint()>("jdkMinorVersion"), //
		jMethod<::java::lang::String()>("jdkSpecialVersion"), //
		jMethod<::jint()>("jdkUpdateVersion"), //
		jMethod<::jint()>("jvmBuildNumber"), //
		jMethod<::jint()>("jvmMajorVersion"), //
		jMethod<::jint()>("jvmMicroVersion"), //
		jMethod<::jint()>("jvmMinorVersion"), //
		jMethod<::java::lang::String()>("jvmSpecialVersion"), //
		jMethod<::jint()>("jvmUpdateVersion"), //
		jMethod<::jvoid()>("print"), //
		jMethod<::jvoid(::java::io::PrintStream)>("print"), //
		jMethod<::jvoid()>("println"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	static auto getJdkSpecialVersion(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJdkSpecialVersion")] != -1);
		return scall<R>("getJdkSpecialVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getJvmSpecialVersion(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJvmSpecialVersion")] != -1);
		return scall<R>("getJvmSpecialVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto init(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("init")] != -1);
		return scall<R>("init", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto jdkBuildNumber(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("jdkBuildNumber")] != -1);
		return scall<R>("jdkBuildNumber", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto jdkMajorVersion(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("jdkMajorVersion")] != -1);
		return scall<R>("jdkMajorVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto jdkMicroVersion(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("jdkMicroVersion")] != -1);
		return scall<R>("jdkMicroVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto jdkMinorVersion(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("jdkMinorVersion")] != -1);
		return scall<R>("jdkMinorVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto jdkSpecialVersion(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("jdkSpecialVersion")] != -1);
		return scall<R>("jdkSpecialVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto jdkUpdateVersion(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("jdkUpdateVersion")] != -1);
		return scall<R>("jdkUpdateVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto jvmBuildNumber(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("jvmBuildNumber")] != -1);
		return scall<R>("jvmBuildNumber", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto jvmMajorVersion(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("jvmMajorVersion")] != -1);
		return scall<R>("jvmMajorVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto jvmMicroVersion(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("jvmMicroVersion")] != -1);
		return scall<R>("jvmMicroVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto jvmMinorVersion(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("jvmMinorVersion")] != -1);
		return scall<R>("jvmMinorVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto jvmSpecialVersion(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("jvmSpecialVersion")] != -1);
		return scall<R>("jvmSpecialVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto jvmUpdateVersion(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("jvmUpdateVersion")] != -1);
		return scall<R>("jvmUpdateVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto print(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("print")] != -1);
		return scall<R>("print", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto println(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("println")] != -1);
		return scall<R>("println", std::forward<Args>(args)...);
	}

};

#endif
