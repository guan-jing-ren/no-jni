#ifndef sun_misc_IOUtils_HPP
#define sun_misc_IOUtils_HPP

#include "../../jfwd_decl.hpp"

class ::sun::misc::IOUtils : public jObject<::sun::misc::IOUtils, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_misc / "IOUtils";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jbyte *(::java::io::InputStream, ::jint, ::jboolean)>("readFully"), //
		jMethod<::jbyte *(::java::io::InputStream, ::jint)>("readNBytes"), //
	};

	template<typename R = ::jbyte *, typename... Args>
	static auto readFully(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readFully")] != -1);
		return scall<R>("readFully", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	static auto readNBytes(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readNBytes")] != -1);
		return scall<R>("readNBytes", std::forward<Args>(args)...);
	}

};

#endif
