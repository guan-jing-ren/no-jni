#ifndef sun_misc_Lock_HPP
#define sun_misc_Lock_HPP

#include "../../jfwd_decl.hpp"

class ::sun::misc::Lock : public jObject<::sun::misc::Lock, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_misc / "Lock";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid()>("lock"), //
		jMethod<::jvoid()>("unlock"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto lock(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lock")] != -1);
		return call<R>("lock", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unlock(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unlock")] != -1);
		return call<R>("unlock", std::forward<Args>(args)...);
	}

};

#endif
