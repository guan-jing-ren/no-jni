#ifndef sun_misc_ExtensionDependency_HPP
#define sun_misc_ExtensionDependency_HPP

#include "../../jfwd_decl.hpp"

class ::sun::misc::ExtensionDependency : public jObject<::sun::misc::ExtensionDependency, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_misc / "ExtensionDependency";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::sun::misc::ExtensionInstallationProvider)>("addExtensionInstallationProvider"), //
		jMethod<::jboolean(::java::util::jar::JarFile)>("checkExtensionsDependencies"), //
		jMethod<::jvoid(::sun::misc::ExtensionInstallationProvider)>("removeExtensionInstallationProvider"), //
	};

	template<typename R = ::jvoid, typename... Args>
	static auto addExtensionInstallationProvider(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addExtensionInstallationProvider")] != -1);
		return scall<R>("addExtensionInstallationProvider", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto checkExtensionsDependencies(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkExtensionsDependencies")] != -1);
		return scall<R>("checkExtensionsDependencies", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto removeExtensionInstallationProvider(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeExtensionInstallationProvider")] != -1);
		return scall<R>("removeExtensionInstallationProvider", std::forward<Args>(args)...);
	}

};

#endif
