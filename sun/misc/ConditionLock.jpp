#ifndef sun_misc_ConditionLock_HPP
#define sun_misc_ConditionLock_HPP

#include "../../jfwd_decl.hpp"

class ::sun::misc::ConditionLock : public jObject<::sun::misc::ConditionLock, ::sun::misc::Lock> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_misc / "ConditionLock";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint)>(), //
		jMethod<::jvoid(::jint)>("lockWhen"), //
		jMethod<::jvoid(::jint)>("unlockWith"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto lockWhen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lockWhen")] != -1);
		return call<R>("lockWhen", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unlockWith(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unlockWith")] != -1);
		return call<R>("unlockWith", std::forward<Args>(args)...);
	}

};

#endif
