#ifndef sun_misc_FormattedFloatingDecimal_HPP
#define sun_misc_FormattedFloatingDecimal_HPP

#include "../../jfwd_decl.hpp"

class ::sun::misc::FormattedFloatingDecimal : public jObject<::sun::misc::FormattedFloatingDecimal, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_misc / "FormattedFloatingDecimal";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jchar *()>("getExponent"), //
		jMethod<::jint()>("getExponentRounded"), //
		jMethod<::jchar *()>("getMantissa"), //
		jMethod<::sun::misc::FormattedFloatingDecimal(::jdouble, ::jint, ::sun::misc::FormattedFloatingDecimal$Form)>("valueOf"), //
	};

	template<typename R = ::jchar *, typename... Args>
	auto getExponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExponent")] != -1);
		return call<R>("getExponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getExponentRounded(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExponentRounded")] != -1);
		return call<R>("getExponentRounded", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar *, typename... Args>
	auto getMantissa(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMantissa")] != -1);
		return call<R>("getMantissa", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::misc::FormattedFloatingDecimal, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

};

#endif
