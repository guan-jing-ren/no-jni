#ifndef sun_misc_JavaUtilJarAccess_HPP
#define sun_misc_JavaUtilJarAccess_HPP

#include "../../jfwd_decl.hpp"

class ::sun::misc::JavaUtilJarAccess : public jObject<::sun::misc::JavaUtilJarAccess, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_misc / "JavaUtilJarAccess";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::util::Enumeration(::java::util::jar::JarFile)>("entries2"), //
		jMethod<::java::util::Enumeration(::java::util::jar::JarFile, ::java::security::CodeSource *)>("entryNames"), //
		jMethod<::java::security::CodeSource(::java::util::jar::JarFile, ::java::net::URL, ::java::lang::String)>("getCodeSource"), //
		jMethod<::java::security::CodeSource *(::java::util::jar::JarFile, ::java::net::URL)>("getCodeSources"), //
		jMethod<::java::util::List(::java::util::jar::JarFile)>("getManifestDigests"), //
		jMethod<::jboolean(::java::util::jar::JarFile)>("jarFileHasClassPathAttribute"), //
		jMethod<::jvoid(::java::util::jar::JarFile, ::jboolean)>("setEagerValidation"), //
	};

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto entries2(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("entries2")] != -1);
		return call<R>("entries2", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto entryNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("entryNames")] != -1);
		return call<R>("entryNames", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::CodeSource, typename... Args>
	auto getCodeSource(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCodeSource")] != -1);
		return call<R>("getCodeSource", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::CodeSource *, typename... Args>
	auto getCodeSources(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCodeSources")] != -1);
		return call<R>("getCodeSources", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getManifestDigests(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getManifestDigests")] != -1);
		return call<R>("getManifestDigests", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto jarFileHasClassPathAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("jarFileHasClassPathAttribute")] != -1);
		return call<R>("jarFileHasClassPathAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEagerValidation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEagerValidation")] != -1);
		return call<R>("setEagerValidation", std::forward<Args>(args)...);
	}

};

#endif
