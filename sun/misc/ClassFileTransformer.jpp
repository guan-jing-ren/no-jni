#ifndef sun_misc_ClassFileTransformer_HPP
#define sun_misc_ClassFileTransformer_HPP

#include "../../jfwd_decl.hpp"

class ::sun::misc::ClassFileTransformer : public jObject<::sun::misc::ClassFileTransformer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_misc / "ClassFileTransformer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::sun::misc::ClassFileTransformer)>("add"), //
		jMethod<::sun::misc::ClassFileTransformer *()>("getTransformers"), //
		jMethod<::jbyte *(::jbyte *, ::jint, ::jint)>("transform"), //
	};

	template<typename R = ::jvoid, typename... Args>
	static auto add(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return scall<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::misc::ClassFileTransformer *, typename... Args>
	static auto getTransformers(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransformers")] != -1);
		return scall<R>("getTransformers", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto transform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("transform")] != -1);
		return call<R>("transform", std::forward<Args>(args)...);
	}

};

#endif
