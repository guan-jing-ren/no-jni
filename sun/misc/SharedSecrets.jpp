#ifndef sun_misc_SharedSecrets_HPP
#define sun_misc_SharedSecrets_HPP

#include "../../jfwd_decl.hpp"

class ::sun::misc::SharedSecrets : public jObject<::sun::misc::SharedSecrets, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_misc / "SharedSecrets";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::sun::misc::JavaAWTAccess()>("getJavaAWTAccess"), //
		jMethod<::sun::misc::JavaIOAccess()>("getJavaIOAccess"), //
		jMethod<::sun::misc::JavaIOFileDescriptorAccess()>("getJavaIOFileDescriptorAccess"), //
		jMethod<::sun::misc::JavaLangAccess()>("getJavaLangAccess"), //
		jMethod<::sun::misc::JavaLangRefAccess()>("getJavaLangRefAccess"), //
		jMethod<::sun::misc::JavaNetAccess()>("getJavaNetAccess"), //
		jMethod<::sun::misc::JavaNetHttpCookieAccess()>("getJavaNetHttpCookieAccess"), //
		jMethod<::sun::misc::JavaNioAccess()>("getJavaNioAccess"), //
		jMethod<::sun::misc::JavaOISAccess()>("getJavaOISAccess"), //
		jMethod<::sun::misc::JavaObjectInputStreamAccess()>("getJavaObjectInputStreamAccess"), //
		jMethod<::sun::misc::JavaSecurityAccess()>("getJavaSecurityAccess"), //
		jMethod<::sun::misc::JavaSecurityProtectionDomainAccess()>("getJavaSecurityProtectionDomainAccess"), //
		jMethod<::sun::misc::JavaUtilZipFileAccess()>("getJavaUtilZipFileAccess"), //
		jMethod<::sun::misc::JavaUtilJarAccess()>("javaUtilJarAccess"), //
		jMethod<::jvoid(::sun::misc::JavaAWTAccess)>("setJavaAWTAccess"), //
		jMethod<::jvoid(::sun::misc::JavaIOAccess)>("setJavaIOAccess"), //
		jMethod<::jvoid(::sun::misc::JavaIOFileDescriptorAccess)>("setJavaIOFileDescriptorAccess"), //
		jMethod<::jvoid(::sun::misc::JavaLangAccess)>("setJavaLangAccess"), //
		jMethod<::jvoid(::sun::misc::JavaLangRefAccess)>("setJavaLangRefAccess"), //
		jMethod<::jvoid(::sun::misc::JavaNetAccess)>("setJavaNetAccess"), //
		jMethod<::jvoid(::sun::misc::JavaNetHttpCookieAccess)>("setJavaNetHttpCookieAccess"), //
		jMethod<::jvoid(::sun::misc::JavaNioAccess)>("setJavaNioAccess"), //
		jMethod<::jvoid(::sun::misc::JavaOISAccess)>("setJavaOISAccess"), //
		jMethod<::jvoid(::sun::misc::JavaObjectInputStreamAccess)>("setJavaObjectInputStreamAccess"), //
		jMethod<::jvoid(::sun::misc::JavaSecurityAccess)>("setJavaSecurityAccess"), //
		jMethod<::jvoid(::sun::misc::JavaSecurityProtectionDomainAccess)>("setJavaSecurityProtectionDomainAccess"), //
		jMethod<::jvoid(::sun::misc::JavaUtilJarAccess)>("setJavaUtilJarAccess"), //
		jMethod<::jvoid(::sun::misc::JavaUtilZipFileAccess)>("setJavaUtilZipFileAccess"), //
	};

	template<typename R = ::sun::misc::JavaAWTAccess, typename... Args>
	static auto getJavaAWTAccess(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJavaAWTAccess")] != -1);
		return scall<R>("getJavaAWTAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::misc::JavaIOAccess, typename... Args>
	static auto getJavaIOAccess(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJavaIOAccess")] != -1);
		return scall<R>("getJavaIOAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::misc::JavaIOFileDescriptorAccess, typename... Args>
	static auto getJavaIOFileDescriptorAccess(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJavaIOFileDescriptorAccess")] != -1);
		return scall<R>("getJavaIOFileDescriptorAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::misc::JavaLangAccess, typename... Args>
	static auto getJavaLangAccess(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJavaLangAccess")] != -1);
		return scall<R>("getJavaLangAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::misc::JavaLangRefAccess, typename... Args>
	static auto getJavaLangRefAccess(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJavaLangRefAccess")] != -1);
		return scall<R>("getJavaLangRefAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::misc::JavaNetAccess, typename... Args>
	static auto getJavaNetAccess(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJavaNetAccess")] != -1);
		return scall<R>("getJavaNetAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::misc::JavaNetHttpCookieAccess, typename... Args>
	static auto getJavaNetHttpCookieAccess(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJavaNetHttpCookieAccess")] != -1);
		return scall<R>("getJavaNetHttpCookieAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::misc::JavaNioAccess, typename... Args>
	static auto getJavaNioAccess(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJavaNioAccess")] != -1);
		return scall<R>("getJavaNioAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::misc::JavaOISAccess, typename... Args>
	static auto getJavaOISAccess(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJavaOISAccess")] != -1);
		return scall<R>("getJavaOISAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::misc::JavaObjectInputStreamAccess, typename... Args>
	static auto getJavaObjectInputStreamAccess(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJavaObjectInputStreamAccess")] != -1);
		return scall<R>("getJavaObjectInputStreamAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::misc::JavaSecurityAccess, typename... Args>
	static auto getJavaSecurityAccess(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJavaSecurityAccess")] != -1);
		return scall<R>("getJavaSecurityAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::misc::JavaSecurityProtectionDomainAccess, typename... Args>
	static auto getJavaSecurityProtectionDomainAccess(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJavaSecurityProtectionDomainAccess")] != -1);
		return scall<R>("getJavaSecurityProtectionDomainAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::misc::JavaUtilZipFileAccess, typename... Args>
	static auto getJavaUtilZipFileAccess(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJavaUtilZipFileAccess")] != -1);
		return scall<R>("getJavaUtilZipFileAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::misc::JavaUtilJarAccess, typename... Args>
	static auto javaUtilJarAccess(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("javaUtilJarAccess")] != -1);
		return scall<R>("javaUtilJarAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setJavaAWTAccess(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setJavaAWTAccess")] != -1);
		return scall<R>("setJavaAWTAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setJavaIOAccess(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setJavaIOAccess")] != -1);
		return scall<R>("setJavaIOAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setJavaIOFileDescriptorAccess(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setJavaIOFileDescriptorAccess")] != -1);
		return scall<R>("setJavaIOFileDescriptorAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setJavaLangAccess(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setJavaLangAccess")] != -1);
		return scall<R>("setJavaLangAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setJavaLangRefAccess(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setJavaLangRefAccess")] != -1);
		return scall<R>("setJavaLangRefAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setJavaNetAccess(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setJavaNetAccess")] != -1);
		return scall<R>("setJavaNetAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setJavaNetHttpCookieAccess(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setJavaNetHttpCookieAccess")] != -1);
		return scall<R>("setJavaNetHttpCookieAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setJavaNioAccess(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setJavaNioAccess")] != -1);
		return scall<R>("setJavaNioAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setJavaOISAccess(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setJavaOISAccess")] != -1);
		return scall<R>("setJavaOISAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setJavaObjectInputStreamAccess(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setJavaObjectInputStreamAccess")] != -1);
		return scall<R>("setJavaObjectInputStreamAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setJavaSecurityAccess(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setJavaSecurityAccess")] != -1);
		return scall<R>("setJavaSecurityAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setJavaSecurityProtectionDomainAccess(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setJavaSecurityProtectionDomainAccess")] != -1);
		return scall<R>("setJavaSecurityProtectionDomainAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setJavaUtilJarAccess(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setJavaUtilJarAccess")] != -1);
		return scall<R>("setJavaUtilJarAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setJavaUtilZipFileAccess(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setJavaUtilZipFileAccess")] != -1);
		return scall<R>("setJavaUtilZipFileAccess", std::forward<Args>(args)...);
	}

};

#endif
