#ifndef sun_misc_JavaLangAccess_HPP
#define sun_misc_JavaLangAccess_HPP

#include "../../jfwd_decl.hpp"

class ::sun::misc::JavaLangAccess : public jObject<::sun::misc::JavaLangAccess, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_misc / "JavaLangAccess";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::lang::Thread, ::sun::nio::ch::Interruptible)>("blockedOn"), //
		jMethod<::jboolean(::java::lang::Class, ::sun::reflect::annotation::AnnotationType, ::sun::reflect::annotation::AnnotationType)>("casAnnotationType"), //
		jMethod<::sun::reflect::annotation::AnnotationType(::java::lang::Class)>("getAnnotationType"), //
		jMethod<::sun::reflect::ConstantPool(::java::lang::Class)>("getConstantPool"), //
		jMethod<::java::util::Map(::java::lang::Class)>("getDeclaredAnnotationMap"), //
		jMethod<::java::lang::Enum *(::java::lang::Class)>("getEnumConstantsShared"), //
		jMethod<::jbyte *(::java::lang::Class)>("getRawClassAnnotations"), //
		jMethod<::jbyte *(::java::lang::Class)>("getRawClassTypeAnnotations"), //
		jMethod<::jbyte *(::java::lang::reflect::Executable)>("getRawExecutableTypeAnnotations"), //
		jMethod<::jint(::java::lang::Throwable)>("getStackTraceDepth"), //
		jMethod<::java::lang::StackTraceElement(::java::lang::Throwable, ::jint)>("getStackTraceElement"), //
		jMethod<::jvoid(::java::lang::Object)>("invokeFinalize"), //
		jMethod<::java::lang::String(::jchar *)>("newStringUnsafe"), //
		jMethod<::java::lang::Thread(::java::lang::Runnable, ::java::security::AccessControlContext)>("newThreadWithAcc"), //
		jMethod<::jvoid(::jint, ::jboolean, ::java::lang::Runnable)>("registerShutdownHook"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto blockedOn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("blockedOn")] != -1);
		return call<R>("blockedOn", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto casAnnotationType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("casAnnotationType")] != -1);
		return call<R>("casAnnotationType", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::reflect::annotation::AnnotationType, typename... Args>
	auto getAnnotationType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAnnotationType")] != -1);
		return call<R>("getAnnotationType", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::reflect::ConstantPool, typename... Args>
	auto getConstantPool(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConstantPool")] != -1);
		return call<R>("getConstantPool", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getDeclaredAnnotationMap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDeclaredAnnotationMap")] != -1);
		return call<R>("getDeclaredAnnotationMap", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Enum *, typename... Args>
	auto getEnumConstantsShared(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEnumConstantsShared")] != -1);
		return call<R>("getEnumConstantsShared", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getRawClassAnnotations(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRawClassAnnotations")] != -1);
		return call<R>("getRawClassAnnotations", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getRawClassTypeAnnotations(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRawClassTypeAnnotations")] != -1);
		return call<R>("getRawClassTypeAnnotations", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getRawExecutableTypeAnnotations(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRawExecutableTypeAnnotations")] != -1);
		return call<R>("getRawExecutableTypeAnnotations", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getStackTraceDepth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStackTraceDepth")] != -1);
		return call<R>("getStackTraceDepth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::StackTraceElement, typename... Args>
	auto getStackTraceElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStackTraceElement")] != -1);
		return call<R>("getStackTraceElement", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto invokeFinalize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invokeFinalize")] != -1);
		return call<R>("invokeFinalize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto newStringUnsafe(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newStringUnsafe")] != -1);
		return call<R>("newStringUnsafe", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Thread, typename... Args>
	auto newThreadWithAcc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newThreadWithAcc")] != -1);
		return call<R>("newThreadWithAcc", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto registerShutdownHook(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("registerShutdownHook")] != -1);
		return call<R>("registerShutdownHook", std::forward<Args>(args)...);
	}

};

#endif
