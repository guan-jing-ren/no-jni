#ifndef sun_misc_Service_HPP
#define sun_misc_Service_HPP

#include "../../jfwd_decl.hpp"

class ::sun::misc::Service : public jObject<::sun::misc::Service, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_misc / "Service";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::util::Iterator(::java::lang::Class)>("installedProviders"), //
		jMethod<::java::util::Iterator(::java::lang::Class)>("providers"), //
		jMethod<::java::util::Iterator(::java::lang::Class, ::java::lang::ClassLoader)>("providers"), //
	};

	template<typename R = ::java::util::Iterator, typename... Args>
	static auto installedProviders(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("installedProviders")] != -1);
		return scall<R>("installedProviders", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	static auto providers(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("providers")] != -1);
		return scall<R>("providers", std::forward<Args>(args)...);
	}

};

#endif
