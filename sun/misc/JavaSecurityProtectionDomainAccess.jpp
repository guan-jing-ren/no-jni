#ifndef sun_misc_JavaSecurityProtectionDomainAccess_HPP
#define sun_misc_JavaSecurityProtectionDomainAccess_HPP

#include "../../jfwd_decl.hpp"

class ::sun::misc::JavaSecurityProtectionDomainAccess : public jObject<::sun::misc::JavaSecurityProtectionDomainAccess, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_misc / "JavaSecurityProtectionDomainAccess";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::sun::misc::JavaSecurityProtectionDomainAccess$ProtectionDomainCache()>("getProtectionDomainCache"), //
		jMethod<::jboolean(::java::security::ProtectionDomain)>("getStaticPermissionsField"), //
	};

	template<typename R = ::sun::misc::JavaSecurityProtectionDomainAccess$ProtectionDomainCache, typename... Args>
	auto getProtectionDomainCache(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProtectionDomainCache")] != -1);
		return call<R>("getProtectionDomainCache", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getStaticPermissionsField(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStaticPermissionsField")] != -1);
		return call<R>("getStaticPermissionsField", std::forward<Args>(args)...);
	}

};

#endif
