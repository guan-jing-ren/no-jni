#ifndef sun_misc_Resource_HPP
#define sun_misc_Resource_HPP

#include "../../jfwd_decl.hpp"

class ::sun::misc::Resource : public jObject<::sun::misc::Resource, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_misc / "Resource";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::nio::ByteBuffer()>("getByteBuffer"), //
		jMethod<::jbyte *()>("getBytes"), //
		jMethod<::java::security::cert::Certificate *()>("getCertificates"), //
		jMethod<::java::security::CodeSigner *()>("getCodeSigners"), //
		jMethod<::java::net::URL()>("getCodeSourceURL"), //
		jMethod<::jint()>("getContentLength"), //
		jMethod<::java::io::InputStream()>("getInputStream"), //
		jMethod<::java::util::jar::Manifest()>("getManifest"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::net::URL()>("getURL"), //
	};

	template<typename R = ::java::nio::ByteBuffer, typename... Args>
	auto getByteBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getByteBuffer")] != -1);
		return call<R>("getByteBuffer", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBytes")] != -1);
		return call<R>("getBytes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::cert::Certificate *, typename... Args>
	auto getCertificates(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCertificates")] != -1);
		return call<R>("getCertificates", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::CodeSigner *, typename... Args>
	auto getCodeSigners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCodeSigners")] != -1);
		return call<R>("getCodeSigners", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::URL, typename... Args>
	auto getCodeSourceURL(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCodeSourceURL")] != -1);
		return call<R>("getCodeSourceURL", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getContentLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContentLength")] != -1);
		return call<R>("getContentLength", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	auto getInputStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInputStream")] != -1);
		return call<R>("getInputStream", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::jar::Manifest, typename... Args>
	auto getManifest(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getManifest")] != -1);
		return call<R>("getManifest", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::URL, typename... Args>
	auto getURL(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getURL")] != -1);
		return call<R>("getURL", std::forward<Args>(args)...);
	}

};

#endif
