#ifndef sun_misc_ObjectInputFilter$FilterInfo_HPP
#define sun_misc_ObjectInputFilter$FilterInfo_HPP

#include "../../jfwd_decl.hpp"

class ::sun::misc::ObjectInputFilter$FilterInfo : public jObject<::sun::misc::ObjectInputFilter$FilterInfo, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_misc / "ObjectInputFilter$FilterInfo";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jlong()>("arrayLength"), //
		jMethod<::jlong()>("depth"), //
		jMethod<::jlong()>("references"), //
		jMethod<::java::lang::Class()>("serialClass"), //
		jMethod<::jlong()>("streamBytes"), //
	};

	template<typename R = ::jlong, typename... Args>
	auto arrayLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("arrayLength")] != -1);
		return call<R>("arrayLength", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto depth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("depth")] != -1);
		return call<R>("depth", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto references(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("references")] != -1);
		return call<R>("references", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto serialClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("serialClass")] != -1);
		return call<R>("serialClass", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto streamBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("streamBytes")] != -1);
		return call<R>("streamBytes", std::forward<Args>(args)...);
	}

};

#endif
