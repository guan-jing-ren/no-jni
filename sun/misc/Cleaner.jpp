#ifndef sun_misc_Cleaner_HPP
#define sun_misc_Cleaner_HPP

#include "../../jfwd_decl.hpp"

class ::sun::misc::Cleaner : public jObject<::sun::misc::Cleaner, ::java::lang::ref::PhantomReference> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_misc / "Cleaner";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("clean"), //
		jMethod<::sun::misc::Cleaner(::java::lang::Object, ::java::lang::Runnable)>("create"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto clean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clean")] != -1);
		return call<R>("clean", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::misc::Cleaner, typename... Args>
	static auto create(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create")] != -1);
		return scall<R>("create", std::forward<Args>(args)...);
	}

};

#endif
