#ifndef sun_misc_JavaNetAccess_HPP
#define sun_misc_JavaNetAccess_HPP

#include "../../jfwd_decl.hpp"

class ::sun::misc::JavaNetAccess : public jObject<::sun::misc::JavaNetAccess, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_misc / "JavaNetAccess";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String(::java::net::InetAddress)>("getOriginalHostName"), //
		jMethod<::sun::misc::URLClassPath(::java::net::URLClassLoader)>("getURLClassPath"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getOriginalHostName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOriginalHostName")] != -1);
		return call<R>("getOriginalHostName", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::misc::URLClassPath, typename... Args>
	auto getURLClassPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getURLClassPath")] != -1);
		return call<R>("getURLClassPath", std::forward<Args>(args)...);
	}

};

#endif
