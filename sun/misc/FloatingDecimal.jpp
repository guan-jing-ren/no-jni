#ifndef sun_misc_FloatingDecimal_HPP
#define sun_misc_FloatingDecimal_HPP

#include "../../jfwd_decl.hpp"

class ::sun::misc::FloatingDecimal : public jObject<::sun::misc::FloatingDecimal, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_misc / "FloatingDecimal";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::jdouble, ::java::lang::Appendable)>("appendTo"), //
		jMethod<::jvoid(::jfloat, ::java::lang::Appendable)>("appendTo"), //
		jMethod<::sun::misc::FloatingDecimal$BinaryToASCIIConverter(::jdouble)>("getBinaryToASCIIConverter"), //
		jMethod<::jdouble(::java::lang::String)>("parseDouble"), //
		jMethod<::jfloat(::java::lang::String)>("parseFloat"), //
		jMethod<::java::lang::String(::jdouble)>("toJavaFormatString"), //
		jMethod<::java::lang::String(::jfloat)>("toJavaFormatString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	static auto appendTo(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("appendTo")] != -1);
		return scall<R>("appendTo", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::misc::FloatingDecimal$BinaryToASCIIConverter, typename... Args>
	static auto getBinaryToASCIIConverter(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBinaryToASCIIConverter")] != -1);
		return scall<R>("getBinaryToASCIIConverter", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	static auto parseDouble(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseDouble")] != -1);
		return scall<R>("parseDouble", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	static auto parseFloat(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseFloat")] != -1);
		return scall<R>("parseFloat", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto toJavaFormatString(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toJavaFormatString")] != -1);
		return scall<R>("toJavaFormatString", std::forward<Args>(args)...);
	}

};

#endif
