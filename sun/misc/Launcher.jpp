#ifndef sun_misc_Launcher_HPP
#define sun_misc_Launcher_HPP

#include "../../jfwd_decl.hpp"

class ::sun::misc::Launcher : public jObject<::sun::misc::Launcher, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_misc / "Launcher";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::sun::misc::URLClassPath()>("getBootstrapClassPath"), //
		jMethod<::java::lang::ClassLoader()>("getClassLoader"), //
		jMethod<::sun::misc::Launcher()>("getLauncher"), //
	};

	template<typename R = ::sun::misc::URLClassPath, typename... Args>
	static auto getBootstrapClassPath(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBootstrapClassPath")] != -1);
		return scall<R>("getBootstrapClassPath", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::ClassLoader, typename... Args>
	auto getClassLoader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClassLoader")] != -1);
		return call<R>("getClassLoader", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::misc::Launcher, typename... Args>
	static auto getLauncher(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLauncher")] != -1);
		return scall<R>("getLauncher", std::forward<Args>(args)...);
	}

};

#endif
