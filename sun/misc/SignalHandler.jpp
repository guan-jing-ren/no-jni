#ifndef sun_misc_SignalHandler_HPP
#define sun_misc_SignalHandler_HPP

#include "../../jfwd_decl.hpp"

class ::sun::misc::SignalHandler : public jObject<::sun::misc::SignalHandler, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_misc / "SignalHandler";

	constexpr static Enume field_signatures{
		jField<::sun::misc::SignalHandler>("SIG_DFL"), //
		jField<::sun::misc::SignalHandler>("SIG_IGN"), //
	};

	template<typename F = ::sun::misc::SignalHandler>
	static auto SIG_DFL() {
		static_assert(field_signatures[jField<F>("SIG_DFL")] != -1);
		return sat<F>("SIG_DFL");
	}

	template<typename F = ::sun::misc::SignalHandler>
	static auto SIG_IGN() {
		static_assert(field_signatures[jField<F>("SIG_IGN")] != -1);
		return sat<F>("SIG_IGN");
	}

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::sun::misc::Signal)>("handle"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto handle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handle")] != -1);
		return call<R>("handle", std::forward<Args>(args)...);
	}

};

#endif
