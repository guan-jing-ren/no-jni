#ifndef sun_misc_FDBigInteger_HPP
#define sun_misc_FDBigInteger_HPP

#include "../../jfwd_decl.hpp"

class ::sun::misc::FDBigInteger : public jObject<::sun::misc::FDBigInteger, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_misc / "FDBigInteger";

	constexpr static Enume field_signatures{
		jField<::sun::misc::FDBigInteger>("ZERO"), //
	};

	template<typename F = ::sun::misc::FDBigInteger>
	static auto ZERO() {
		static_assert(field_signatures[jField<F>("ZERO")] != -1);
		return sat<F>("ZERO");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jlong, ::jchar *, ::jint, ::jint)>(), //
		jMethod<::jint(::sun::misc::FDBigInteger, ::sun::misc::FDBigInteger)>("addAndCmp"), //
		jMethod<::jint(::sun::misc::FDBigInteger)>("cmp"), //
		jMethod<::jint(::jint, ::jint)>("cmpPow52"), //
		jMethod<::jint()>("getNormalizationBias"), //
		jMethod<::sun::misc::FDBigInteger(::sun::misc::FDBigInteger)>("leftInplaceSub"), //
		jMethod<::sun::misc::FDBigInteger(::jint)>("leftShift"), //
		jMethod<::jvoid()>("makeImmutable"), //
		jMethod<::sun::misc::FDBigInteger()>("multBy10"), //
		jMethod<::sun::misc::FDBigInteger(::jint, ::jint)>("multByPow52"), //
		jMethod<::jint(::sun::misc::FDBigInteger)>("quoRemIteration"), //
		jMethod<::sun::misc::FDBigInteger(::sun::misc::FDBigInteger)>("rightInplaceSub"), //
		jMethod<::java::math::BigInteger()>("toBigInteger"), //
		jMethod<::java::lang::String()>("toHexString"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::sun::misc::FDBigInteger(::jlong, ::jint, ::jint)>("valueOfMulPow52"), //
		jMethod<::sun::misc::FDBigInteger(::jint, ::jint)>("valueOfPow52"), //
	};

	template<typename R = ::jint, typename... Args>
	auto addAndCmp(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addAndCmp")] != -1);
		return call<R>("addAndCmp", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto cmp(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cmp")] != -1);
		return call<R>("cmp", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto cmpPow52(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cmpPow52")] != -1);
		return call<R>("cmpPow52", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNormalizationBias(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNormalizationBias")] != -1);
		return call<R>("getNormalizationBias", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::misc::FDBigInteger, typename... Args>
	auto leftInplaceSub(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("leftInplaceSub")] != -1);
		return call<R>("leftInplaceSub", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::misc::FDBigInteger, typename... Args>
	auto leftShift(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("leftShift")] != -1);
		return call<R>("leftShift", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto makeImmutable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeImmutable")] != -1);
		return call<R>("makeImmutable", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::misc::FDBigInteger, typename... Args>
	auto multBy10(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("multBy10")] != -1);
		return call<R>("multBy10", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::misc::FDBigInteger, typename... Args>
	auto multByPow52(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("multByPow52")] != -1);
		return call<R>("multByPow52", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto quoRemIteration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("quoRemIteration")] != -1);
		return call<R>("quoRemIteration", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::misc::FDBigInteger, typename... Args>
	auto rightInplaceSub(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rightInplaceSub")] != -1);
		return call<R>("rightInplaceSub", std::forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto toBigInteger(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toBigInteger")] != -1);
		return call<R>("toBigInteger", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toHexString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toHexString")] != -1);
		return call<R>("toHexString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::misc::FDBigInteger, typename... Args>
	static auto valueOfMulPow52(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOfMulPow52")] != -1);
		return scall<R>("valueOfMulPow52", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::misc::FDBigInteger, typename... Args>
	static auto valueOfPow52(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOfPow52")] != -1);
		return scall<R>("valueOfPow52", std::forward<Args>(args)...);
	}

};

#endif
