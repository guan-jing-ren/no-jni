#ifndef sun_misc_FloatingDecimal$BinaryToASCIIConverter_HPP
#define sun_misc_FloatingDecimal$BinaryToASCIIConverter_HPP

#include "../../jfwd_decl.hpp"

class ::sun::misc::FloatingDecimal$BinaryToASCIIConverter : public jObject<::sun::misc::FloatingDecimal$BinaryToASCIIConverter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_misc / "FloatingDecimal$BinaryToASCIIConverter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::lang::Appendable)>("appendTo"), //
		jMethod<::jboolean()>("decimalDigitsExact"), //
		jMethod<::jboolean()>("digitsRoundedUp"), //
		jMethod<::jint()>("getDecimalExponent"), //
		jMethod<::jint(::jchar *)>("getDigits"), //
		jMethod<::jboolean()>("isExceptional"), //
		jMethod<::jboolean()>("isNegative"), //
		jMethod<::java::lang::String()>("toJavaFormatString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto appendTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("appendTo")] != -1);
		return call<R>("appendTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto decimalDigitsExact(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("decimalDigitsExact")] != -1);
		return call<R>("decimalDigitsExact", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto digitsRoundedUp(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("digitsRoundedUp")] != -1);
		return call<R>("digitsRoundedUp", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDecimalExponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDecimalExponent")] != -1);
		return call<R>("getDecimalExponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDigits(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDigits")] != -1);
		return call<R>("getDigits", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isExceptional(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isExceptional")] != -1);
		return call<R>("isExceptional", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isNegative(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isNegative")] != -1);
		return call<R>("isNegative", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toJavaFormatString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toJavaFormatString")] != -1);
		return call<R>("toJavaFormatString", std::forward<Args>(args)...);
	}

};

#endif
