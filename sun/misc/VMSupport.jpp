#ifndef sun_misc_VMSupport_HPP
#define sun_misc_VMSupport_HPP

#include "../../jfwd_decl.hpp"

class ::sun::misc::VMSupport : public jObject<::sun::misc::VMSupport, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_misc / "VMSupport";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::util::Properties()>("getAgentProperties"), //
		jMethod<::java::lang::String()>("getVMTemporaryDirectory"), //
		jMethod<::jboolean(::java::lang::String)>("isClassPathAttributePresent"), //
		jMethod<::jbyte *()>("serializeAgentPropertiesToByteArray"), //
		jMethod<::jbyte *()>("serializePropertiesToByteArray"), //
	};

	template<typename R = ::java::util::Properties, typename... Args>
	static auto getAgentProperties(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAgentProperties")] != -1);
		return scall<R>("getAgentProperties", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getVMTemporaryDirectory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVMTemporaryDirectory")] != -1);
		return scall<R>("getVMTemporaryDirectory", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isClassPathAttributePresent(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isClassPathAttributePresent")] != -1);
		return scall<R>("isClassPathAttributePresent", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	static auto serializeAgentPropertiesToByteArray(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("serializeAgentPropertiesToByteArray")] != -1);
		return scall<R>("serializeAgentPropertiesToByteArray", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	static auto serializePropertiesToByteArray(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("serializePropertiesToByteArray")] != -1);
		return scall<R>("serializePropertiesToByteArray", std::forward<Args>(args)...);
	}

};

#endif
