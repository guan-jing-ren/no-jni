#ifndef sun_misc_InnocuousThread_HPP
#define sun_misc_InnocuousThread_HPP

#include "../../jfwd_decl.hpp"

class ::sun::misc::InnocuousThread : public jObject<::sun::misc::InnocuousThread, ::java::lang::Thread> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_misc / "InnocuousThread";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::Runnable)>(), //
		jMethod<::jvoid()>("eraseThreadLocals"), //
		jMethod<::java::lang::ClassLoader()>("getContextClassLoader"), //
		jMethod<::jvoid()>("run"), //
		jMethod<::jvoid(::java::lang::ClassLoader)>("setContextClassLoader"), //
		jMethod<::jvoid(::java::lang::Thread$UncaughtExceptionHandler)>("setUncaughtExceptionHandler"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto eraseThreadLocals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("eraseThreadLocals")] != -1);
		return call<R>("eraseThreadLocals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::ClassLoader, typename... Args>
	auto getContextClassLoader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContextClassLoader")] != -1);
		return call<R>("getContextClassLoader", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto run(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("run")] != -1);
		return call<R>("run", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setContextClassLoader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setContextClassLoader")] != -1);
		return call<R>("setContextClassLoader", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUncaughtExceptionHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUncaughtExceptionHandler")] != -1);
		return call<R>("setUncaughtExceptionHandler", std::forward<Args>(args)...);
	}

};

#endif
