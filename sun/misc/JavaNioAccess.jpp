#ifndef sun_misc_JavaNioAccess_HPP
#define sun_misc_JavaNioAccess_HPP

#include "../../jfwd_decl.hpp"

class ::sun::misc::JavaNioAccess : public jObject<::sun::misc::JavaNioAccess, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_misc / "JavaNioAccess";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::sun::misc::JavaNioAccess$BufferPool()>("getDirectBufferPool"), //
		jMethod<::java::nio::ByteBuffer(::jlong, ::jint, ::java::lang::Object)>("newDirectByteBuffer"), //
		jMethod<::jvoid(::java::nio::Buffer)>("truncate"), //
	};

	template<typename R = ::sun::misc::JavaNioAccess$BufferPool, typename... Args>
	auto getDirectBufferPool(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDirectBufferPool")] != -1);
		return call<R>("getDirectBufferPool", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::ByteBuffer, typename... Args>
	auto newDirectByteBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newDirectByteBuffer")] != -1);
		return call<R>("newDirectByteBuffer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto truncate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("truncate")] != -1);
		return call<R>("truncate", std::forward<Args>(args)...);
	}

};

#endif
