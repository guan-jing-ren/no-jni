#ifndef sun_misc_JavaNioAccess$BufferPool_HPP
#define sun_misc_JavaNioAccess$BufferPool_HPP

#include "../../jfwd_decl.hpp"

class ::sun::misc::JavaNioAccess$BufferPool : public jObject<::sun::misc::JavaNioAccess$BufferPool, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_misc / "JavaNioAccess$BufferPool";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jlong()>("getCount"), //
		jMethod<::jlong()>("getMemoryUsed"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jlong()>("getTotalCapacity"), //
	};

	template<typename R = ::jlong, typename... Args>
	auto getCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCount")] != -1);
		return call<R>("getCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getMemoryUsed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMemoryUsed")] != -1);
		return call<R>("getMemoryUsed", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getTotalCapacity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTotalCapacity")] != -1);
		return call<R>("getTotalCapacity", std::forward<Args>(args)...);
	}

};

#endif
