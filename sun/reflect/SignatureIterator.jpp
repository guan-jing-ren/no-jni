#ifndef sun_reflect_SignatureIterator_HPP
#define sun_reflect_SignatureIterator_HPP

#include "../../jfwd_decl.hpp"

class ::sun::reflect::SignatureIterator : public jObject<::sun::reflect::SignatureIterator, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_reflect / "SignatureIterator";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
		jMethod<::jboolean()>("atEnd"), //
		jMethod<::java::lang::String()>("next"), //
		jMethod<::jvoid()>("reset"), //
		jMethod<::java::lang::String()>("returnType"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto atEnd(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("atEnd")] != -1);
		return call<R>("atEnd", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto next(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("next")] != -1);
		return call<R>("next", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto returnType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("returnType")] != -1);
		return call<R>("returnType", std::forward<Args>(args)...);
	}

};

#endif
