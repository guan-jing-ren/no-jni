#ifndef sun_reflect_generics_visitor_Reifier_HPP
#define sun_reflect_generics_visitor_Reifier_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::reflect::generics::visitor::Reifier : public jObject<::sun::reflect::generics::visitor::Reifier, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_reflect_generics_visitor / "Reifier";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Object()>("getResult"), //
		jMethod<::java::lang::reflect::Type()>("getResult"), //
		jMethod<::sun::reflect::generics::visitor::Reifier(::sun::reflect::generics::factory::GenericsFactory)>("make"), //
		jMethod<::jvoid(::sun::reflect::generics::tree::ArrayTypeSignature)>("visitArrayTypeSignature"), //
		jMethod<::jvoid(::sun::reflect::generics::tree::BooleanSignature)>("visitBooleanSignature"), //
		jMethod<::jvoid(::sun::reflect::generics::tree::BottomSignature)>("visitBottomSignature"), //
		jMethod<::jvoid(::sun::reflect::generics::tree::ByteSignature)>("visitByteSignature"), //
		jMethod<::jvoid(::sun::reflect::generics::tree::CharSignature)>("visitCharSignature"), //
		jMethod<::jvoid(::sun::reflect::generics::tree::ClassTypeSignature)>("visitClassTypeSignature"), //
		jMethod<::jvoid(::sun::reflect::generics::tree::DoubleSignature)>("visitDoubleSignature"), //
		jMethod<::jvoid(::sun::reflect::generics::tree::FloatSignature)>("visitFloatSignature"), //
		jMethod<::jvoid(::sun::reflect::generics::tree::FormalTypeParameter)>("visitFormalTypeParameter"), //
		jMethod<::jvoid(::sun::reflect::generics::tree::IntSignature)>("visitIntSignature"), //
		jMethod<::jvoid(::sun::reflect::generics::tree::LongSignature)>("visitLongSignature"), //
		jMethod<::jvoid(::sun::reflect::generics::tree::ShortSignature)>("visitShortSignature"), //
		jMethod<::jvoid(::sun::reflect::generics::tree::SimpleClassTypeSignature)>("visitSimpleClassTypeSignature"), //
		jMethod<::jvoid(::sun::reflect::generics::tree::TypeVariableSignature)>("visitTypeVariableSignature"), //
		jMethod<::jvoid(::sun::reflect::generics::tree::VoidDescriptor)>("visitVoidDescriptor"), //
		jMethod<::jvoid(::sun::reflect::generics::tree::Wildcard)>("visitWildcard"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto getResult(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResult")] != -1);
		return call<R>("getResult", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::reflect::generics::visitor::Reifier, typename... Args>
	static auto make(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("make")] != -1);
		return scall<R>("make", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto visitArrayTypeSignature(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitArrayTypeSignature")] != -1);
		return call<R>("visitArrayTypeSignature", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto visitBooleanSignature(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitBooleanSignature")] != -1);
		return call<R>("visitBooleanSignature", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto visitBottomSignature(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitBottomSignature")] != -1);
		return call<R>("visitBottomSignature", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto visitByteSignature(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitByteSignature")] != -1);
		return call<R>("visitByteSignature", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto visitCharSignature(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitCharSignature")] != -1);
		return call<R>("visitCharSignature", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto visitClassTypeSignature(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitClassTypeSignature")] != -1);
		return call<R>("visitClassTypeSignature", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto visitDoubleSignature(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitDoubleSignature")] != -1);
		return call<R>("visitDoubleSignature", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto visitFloatSignature(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitFloatSignature")] != -1);
		return call<R>("visitFloatSignature", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto visitFormalTypeParameter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitFormalTypeParameter")] != -1);
		return call<R>("visitFormalTypeParameter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto visitIntSignature(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitIntSignature")] != -1);
		return call<R>("visitIntSignature", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto visitLongSignature(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitLongSignature")] != -1);
		return call<R>("visitLongSignature", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto visitShortSignature(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitShortSignature")] != -1);
		return call<R>("visitShortSignature", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto visitSimpleClassTypeSignature(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitSimpleClassTypeSignature")] != -1);
		return call<R>("visitSimpleClassTypeSignature", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto visitTypeVariableSignature(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitTypeVariableSignature")] != -1);
		return call<R>("visitTypeVariableSignature", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto visitVoidDescriptor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitVoidDescriptor")] != -1);
		return call<R>("visitVoidDescriptor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto visitWildcard(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitWildcard")] != -1);
		return call<R>("visitWildcard", std::forward<Args>(args)...);
	}

};

#endif
