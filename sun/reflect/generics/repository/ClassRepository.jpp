#ifndef sun_reflect_generics_repository_ClassRepository_HPP
#define sun_reflect_generics_repository_ClassRepository_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::reflect::generics::repository::ClassRepository : public jObject<::sun::reflect::generics::repository::ClassRepository, ::sun::reflect::generics::repository::GenericDeclRepository> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_reflect_generics_repository / "ClassRepository";

	constexpr static Enume field_signatures{
		jField<::sun::reflect::generics::repository::ClassRepository>("NONE"), //
	};

	template<typename F = ::sun::reflect::generics::repository::ClassRepository>
	static auto NONE() {
		static_assert(field_signatures[jField<F>("NONE")] != -1);
		return sat<F>("NONE");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::reflect::Type *()>("getSuperInterfaces"), //
		jMethod<::java::lang::reflect::Type()>("getSuperclass"), //
		jMethod<::sun::reflect::generics::repository::ClassRepository(::java::lang::String, ::sun::reflect::generics::factory::GenericsFactory)>("make"), //
	};

	template<typename R = ::java::lang::reflect::Type *, typename... Args>
	auto getSuperInterfaces(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSuperInterfaces")] != -1);
		return call<R>("getSuperInterfaces", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::Type, typename... Args>
	auto getSuperclass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSuperclass")] != -1);
		return call<R>("getSuperclass", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::reflect::generics::repository::ClassRepository, typename... Args>
	static auto make(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("make")] != -1);
		return scall<R>("make", std::forward<Args>(args)...);
	}

};

#endif
