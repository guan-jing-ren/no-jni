#ifndef sun_reflect_generics_repository_GenericDeclRepository_HPP
#define sun_reflect_generics_repository_GenericDeclRepository_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::reflect::generics::repository::GenericDeclRepository : public jObject<::sun::reflect::generics::repository::GenericDeclRepository, ::sun::reflect::generics::repository::AbstractRepository> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_reflect_generics_repository / "GenericDeclRepository";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::reflect::TypeVariable *()>("getTypeParameters"), //
	};

	template<typename R = ::java::lang::reflect::TypeVariable *, typename... Args>
	auto getTypeParameters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTypeParameters")] != -1);
		return call<R>("getTypeParameters", std::forward<Args>(args)...);
	}

};

#endif
