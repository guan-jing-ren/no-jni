#ifndef sun_reflect_generics_reflectiveObjects_TypeVariableImpl_HPP
#define sun_reflect_generics_reflectiveObjects_TypeVariableImpl_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::reflect::generics::reflectiveObjects::TypeVariableImpl : public jObject<::sun::reflect::generics::reflectiveObjects::TypeVariableImpl, ::sun::reflect::generics::reflectiveObjects::LazyReflectiveObjectGenerator> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_reflect_generics_reflectiveObjects / "TypeVariableImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::reflect::AnnotatedType *()>("getAnnotatedBounds"), //
		jMethod<::java::lang::annotation::Annotation(::java::lang::Class)>("getAnnotation"), //
		jMethod<::java::lang::annotation::Annotation *()>("getAnnotations"), //
		jMethod<::java::lang::annotation::Annotation *(::java::lang::Class)>("getAnnotationsByType"), //
		jMethod<::java::lang::reflect::Type *()>("getBounds"), //
		jMethod<::java::lang::annotation::Annotation(::java::lang::Class)>("getDeclaredAnnotation"), //
		jMethod<::java::lang::annotation::Annotation *()>("getDeclaredAnnotations"), //
		jMethod<::java::lang::annotation::Annotation *(::java::lang::Class)>("getDeclaredAnnotationsByType"), //
		jMethod<::java::lang::reflect::GenericDeclaration()>("getGenericDeclaration"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::sun::reflect::generics::reflectiveObjects::TypeVariableImpl(::java::lang::reflect::GenericDeclaration, ::java::lang::String, ::sun::reflect::generics::tree::FieldTypeSignature *, ::sun::reflect::generics::factory::GenericsFactory)>("make"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::AnnotatedType *, typename... Args>
	auto getAnnotatedBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAnnotatedBounds")] != -1);
		return call<R>("getAnnotatedBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::annotation::Annotation, typename... Args>
	auto getAnnotation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAnnotation")] != -1);
		return call<R>("getAnnotation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::annotation::Annotation *, typename... Args>
	auto getAnnotations(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAnnotations")] != -1);
		return call<R>("getAnnotations", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::annotation::Annotation *, typename... Args>
	auto getAnnotationsByType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAnnotationsByType")] != -1);
		return call<R>("getAnnotationsByType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::Type *, typename... Args>
	auto getBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds")] != -1);
		return call<R>("getBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::annotation::Annotation, typename... Args>
	auto getDeclaredAnnotation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDeclaredAnnotation")] != -1);
		return call<R>("getDeclaredAnnotation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::annotation::Annotation *, typename... Args>
	auto getDeclaredAnnotations(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDeclaredAnnotations")] != -1);
		return call<R>("getDeclaredAnnotations", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::annotation::Annotation *, typename... Args>
	auto getDeclaredAnnotationsByType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDeclaredAnnotationsByType")] != -1);
		return call<R>("getDeclaredAnnotationsByType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::GenericDeclaration, typename... Args>
	auto getGenericDeclaration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGenericDeclaration")] != -1);
		return call<R>("getGenericDeclaration", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::reflect::generics::reflectiveObjects::TypeVariableImpl, typename... Args>
	static auto make(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("make")] != -1);
		return scall<R>("make", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
