#ifndef sun_reflect_generics_reflectiveObjects_ParameterizedTypeImpl_HPP
#define sun_reflect_generics_reflectiveObjects_ParameterizedTypeImpl_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::reflect::generics::reflectiveObjects::ParameterizedTypeImpl : public jObject<::sun::reflect::generics::reflectiveObjects::ParameterizedTypeImpl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_reflect_generics_reflectiveObjects / "ParameterizedTypeImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::reflect::Type *()>("getActualTypeArguments"), //
		jMethod<::java::lang::reflect::Type()>("getOwnerType"), //
		jMethod<::java::lang::Class()>("getRawType"), //
		jMethod<::java::lang::reflect::Type()>("getRawType"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::sun::reflect::generics::reflectiveObjects::ParameterizedTypeImpl(::java::lang::Class, ::java::lang::reflect::Type *, ::java::lang::reflect::Type)>("make"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::Type *, typename... Args>
	auto getActualTypeArguments(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getActualTypeArguments")] != -1);
		return call<R>("getActualTypeArguments", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::Type, typename... Args>
	auto getOwnerType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOwnerType")] != -1);
		return call<R>("getOwnerType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto getRawType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRawType")] != -1);
		return call<R>("getRawType", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::reflect::generics::reflectiveObjects::ParameterizedTypeImpl, typename... Args>
	static auto make(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("make")] != -1);
		return scall<R>("make", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
