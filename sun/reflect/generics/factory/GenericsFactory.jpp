#ifndef sun_reflect_generics_factory_GenericsFactory_HPP
#define sun_reflect_generics_factory_GenericsFactory_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::reflect::generics::factory::GenericsFactory : public jObject<::sun::reflect::generics::factory::GenericsFactory, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_reflect_generics_factory / "GenericsFactory";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::reflect::TypeVariable(::java::lang::String)>("findTypeVariable"), //
		jMethod<::java::lang::reflect::Type(::java::lang::reflect::Type)>("makeArrayType"), //
		jMethod<::java::lang::reflect::Type()>("makeBool"), //
		jMethod<::java::lang::reflect::Type()>("makeByte"), //
		jMethod<::java::lang::reflect::Type()>("makeChar"), //
		jMethod<::java::lang::reflect::Type()>("makeDouble"), //
		jMethod<::java::lang::reflect::Type()>("makeFloat"), //
		jMethod<::java::lang::reflect::Type()>("makeInt"), //
		jMethod<::java::lang::reflect::Type()>("makeLong"), //
		jMethod<::java::lang::reflect::Type(::java::lang::String)>("makeNamedType"), //
		jMethod<::java::lang::reflect::ParameterizedType(::java::lang::reflect::Type, ::java::lang::reflect::Type *, ::java::lang::reflect::Type)>("makeParameterizedType"), //
		jMethod<::java::lang::reflect::Type()>("makeShort"), //
		jMethod<::java::lang::reflect::TypeVariable(::java::lang::String, ::sun::reflect::generics::tree::FieldTypeSignature *)>("makeTypeVariable"), //
		jMethod<::java::lang::reflect::Type()>("makeVoid"), //
		jMethod<::java::lang::reflect::WildcardType(::sun::reflect::generics::tree::FieldTypeSignature *, ::sun::reflect::generics::tree::FieldTypeSignature *)>("makeWildcard"), //
	};

	template<typename R = ::java::lang::reflect::TypeVariable, typename... Args>
	auto findTypeVariable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("findTypeVariable")] != -1);
		return call<R>("findTypeVariable", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::Type, typename... Args>
	auto makeArrayType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeArrayType")] != -1);
		return call<R>("makeArrayType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::Type, typename... Args>
	auto makeBool(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeBool")] != -1);
		return call<R>("makeBool", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::Type, typename... Args>
	auto makeByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeByte")] != -1);
		return call<R>("makeByte", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::Type, typename... Args>
	auto makeChar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeChar")] != -1);
		return call<R>("makeChar", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::Type, typename... Args>
	auto makeDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeDouble")] != -1);
		return call<R>("makeDouble", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::Type, typename... Args>
	auto makeFloat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeFloat")] != -1);
		return call<R>("makeFloat", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::Type, typename... Args>
	auto makeInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeInt")] != -1);
		return call<R>("makeInt", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::Type, typename... Args>
	auto makeLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeLong")] != -1);
		return call<R>("makeLong", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::Type, typename... Args>
	auto makeNamedType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeNamedType")] != -1);
		return call<R>("makeNamedType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::ParameterizedType, typename... Args>
	auto makeParameterizedType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeParameterizedType")] != -1);
		return call<R>("makeParameterizedType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::Type, typename... Args>
	auto makeShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeShort")] != -1);
		return call<R>("makeShort", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::TypeVariable, typename... Args>
	auto makeTypeVariable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeTypeVariable")] != -1);
		return call<R>("makeTypeVariable", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::Type, typename... Args>
	auto makeVoid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeVoid")] != -1);
		return call<R>("makeVoid", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::WildcardType, typename... Args>
	auto makeWildcard(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeWildcard")] != -1);
		return call<R>("makeWildcard", std::forward<Args>(args)...);
	}

};

#endif
