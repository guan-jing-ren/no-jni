#ifndef sun_reflect_generics_tree_SimpleClassTypeSignature_HPP
#define sun_reflect_generics_tree_SimpleClassTypeSignature_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::reflect::generics::tree::SimpleClassTypeSignature : public jObject<::sun::reflect::generics::tree::SimpleClassTypeSignature, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_reflect_generics_tree / "SimpleClassTypeSignature";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::sun::reflect::generics::visitor::TypeTreeVisitor)>("accept"), //
		jMethod<::jboolean()>("getDollar"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::sun::reflect::generics::tree::TypeArgument *()>("getTypeArguments"), //
		jMethod<::sun::reflect::generics::tree::SimpleClassTypeSignature(::java::lang::String, ::jboolean, ::sun::reflect::generics::tree::TypeArgument *)>("make"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto accept(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("accept")] != -1);
		return call<R>("accept", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getDollar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDollar")] != -1);
		return call<R>("getDollar", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::reflect::generics::tree::TypeArgument *, typename... Args>
	auto getTypeArguments(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTypeArguments")] != -1);
		return call<R>("getTypeArguments", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::reflect::generics::tree::SimpleClassTypeSignature, typename... Args>
	static auto make(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("make")] != -1);
		return scall<R>("make", std::forward<Args>(args)...);
	}

};

#endif
