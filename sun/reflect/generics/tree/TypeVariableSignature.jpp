#ifndef sun_reflect_generics_tree_TypeVariableSignature_HPP
#define sun_reflect_generics_tree_TypeVariableSignature_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::reflect::generics::tree::TypeVariableSignature : public jObject<::sun::reflect::generics::tree::TypeVariableSignature, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_reflect_generics_tree / "TypeVariableSignature";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::sun::reflect::generics::visitor::TypeTreeVisitor)>("accept"), //
		jMethod<::java::lang::String()>("getIdentifier"), //
		jMethod<::sun::reflect::generics::tree::TypeVariableSignature(::java::lang::String)>("make"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto accept(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("accept")] != -1);
		return call<R>("accept", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getIdentifier(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIdentifier")] != -1);
		return call<R>("getIdentifier", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::reflect::generics::tree::TypeVariableSignature, typename... Args>
	static auto make(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("make")] != -1);
		return scall<R>("make", std::forward<Args>(args)...);
	}

};

#endif
