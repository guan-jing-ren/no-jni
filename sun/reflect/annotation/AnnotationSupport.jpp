#ifndef sun_reflect_annotation_AnnotationSupport_HPP
#define sun_reflect_annotation_AnnotationSupport_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::reflect::annotation::AnnotationSupport : public jObject<::sun::reflect::annotation::AnnotationSupport, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_reflect_annotation / "AnnotationSupport";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::annotation::Annotation *(::java::util::Map, ::java::lang::Class, ::java::lang::Class)>("getAssociatedAnnotations"), //
		jMethod<::java::lang::annotation::Annotation *(::java::util::Map, ::java::lang::Class)>("getDirectlyAndIndirectlyPresent"), //
	};

	template<typename R = ::java::lang::annotation::Annotation *, typename... Args>
	static auto getAssociatedAnnotations(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAssociatedAnnotations")] != -1);
		return scall<R>("getAssociatedAnnotations", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::annotation::Annotation *, typename... Args>
	static auto getDirectlyAndIndirectlyPresent(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDirectlyAndIndirectlyPresent")] != -1);
		return scall<R>("getDirectlyAndIndirectlyPresent", std::forward<Args>(args)...);
	}

};

#endif
