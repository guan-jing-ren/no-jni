#ifndef sun_reflect_annotation_TypeAnnotation$TypeAnnotationTarget_HPP
#define sun_reflect_annotation_TypeAnnotation$TypeAnnotationTarget_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::reflect::annotation::TypeAnnotation$TypeAnnotationTarget : public jObject<::sun::reflect::annotation::TypeAnnotation$TypeAnnotationTarget, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_reflect_annotation / "TypeAnnotation$TypeAnnotationTarget";

	constexpr static Enume field_signatures{
		jField<::sun::reflect::annotation::TypeAnnotation$TypeAnnotationTarget>("CLASS_EXTENDS"), //
		jField<::sun::reflect::annotation::TypeAnnotation$TypeAnnotationTarget>("CLASS_IMPLEMENTS"), //
		jField<::sun::reflect::annotation::TypeAnnotation$TypeAnnotationTarget>("CLASS_TYPE_PARAMETER"), //
		jField<::sun::reflect::annotation::TypeAnnotation$TypeAnnotationTarget>("CLASS_TYPE_PARAMETER_BOUND"), //
		jField<::sun::reflect::annotation::TypeAnnotation$TypeAnnotationTarget>("FIELD"), //
		jField<::sun::reflect::annotation::TypeAnnotation$TypeAnnotationTarget>("METHOD_FORMAL_PARAMETER"), //
		jField<::sun::reflect::annotation::TypeAnnotation$TypeAnnotationTarget>("METHOD_RECEIVER"), //
		jField<::sun::reflect::annotation::TypeAnnotation$TypeAnnotationTarget>("METHOD_RETURN"), //
		jField<::sun::reflect::annotation::TypeAnnotation$TypeAnnotationTarget>("METHOD_TYPE_PARAMETER"), //
		jField<::sun::reflect::annotation::TypeAnnotation$TypeAnnotationTarget>("METHOD_TYPE_PARAMETER_BOUND"), //
		jField<::sun::reflect::annotation::TypeAnnotation$TypeAnnotationTarget>("THROWS"), //
	};

	template<typename F = ::sun::reflect::annotation::TypeAnnotation$TypeAnnotationTarget>
	static auto CLASS_EXTENDS() {
		static_assert(field_signatures[jField<F>("CLASS_EXTENDS")] != -1);
		return sat<F>("CLASS_EXTENDS");
	}

	template<typename F = ::sun::reflect::annotation::TypeAnnotation$TypeAnnotationTarget>
	static auto CLASS_IMPLEMENTS() {
		static_assert(field_signatures[jField<F>("CLASS_IMPLEMENTS")] != -1);
		return sat<F>("CLASS_IMPLEMENTS");
	}

	template<typename F = ::sun::reflect::annotation::TypeAnnotation$TypeAnnotationTarget>
	static auto CLASS_TYPE_PARAMETER() {
		static_assert(field_signatures[jField<F>("CLASS_TYPE_PARAMETER")] != -1);
		return sat<F>("CLASS_TYPE_PARAMETER");
	}

	template<typename F = ::sun::reflect::annotation::TypeAnnotation$TypeAnnotationTarget>
	static auto CLASS_TYPE_PARAMETER_BOUND() {
		static_assert(field_signatures[jField<F>("CLASS_TYPE_PARAMETER_BOUND")] != -1);
		return sat<F>("CLASS_TYPE_PARAMETER_BOUND");
	}

	template<typename F = ::sun::reflect::annotation::TypeAnnotation$TypeAnnotationTarget>
	static auto FIELD() {
		static_assert(field_signatures[jField<F>("FIELD")] != -1);
		return sat<F>("FIELD");
	}

	template<typename F = ::sun::reflect::annotation::TypeAnnotation$TypeAnnotationTarget>
	static auto METHOD_FORMAL_PARAMETER() {
		static_assert(field_signatures[jField<F>("METHOD_FORMAL_PARAMETER")] != -1);
		return sat<F>("METHOD_FORMAL_PARAMETER");
	}

	template<typename F = ::sun::reflect::annotation::TypeAnnotation$TypeAnnotationTarget>
	static auto METHOD_RECEIVER() {
		static_assert(field_signatures[jField<F>("METHOD_RECEIVER")] != -1);
		return sat<F>("METHOD_RECEIVER");
	}

	template<typename F = ::sun::reflect::annotation::TypeAnnotation$TypeAnnotationTarget>
	static auto METHOD_RETURN() {
		static_assert(field_signatures[jField<F>("METHOD_RETURN")] != -1);
		return sat<F>("METHOD_RETURN");
	}

	template<typename F = ::sun::reflect::annotation::TypeAnnotation$TypeAnnotationTarget>
	static auto METHOD_TYPE_PARAMETER() {
		static_assert(field_signatures[jField<F>("METHOD_TYPE_PARAMETER")] != -1);
		return sat<F>("METHOD_TYPE_PARAMETER");
	}

	template<typename F = ::sun::reflect::annotation::TypeAnnotation$TypeAnnotationTarget>
	static auto METHOD_TYPE_PARAMETER_BOUND() {
		static_assert(field_signatures[jField<F>("METHOD_TYPE_PARAMETER_BOUND")] != -1);
		return sat<F>("METHOD_TYPE_PARAMETER_BOUND");
	}

	template<typename F = ::sun::reflect::annotation::TypeAnnotation$TypeAnnotationTarget>
	static auto THROWS() {
		static_assert(field_signatures[jField<F>("THROWS")] != -1);
		return sat<F>("THROWS");
	}

	constexpr static Enume method_signatures{
		jMethod<::sun::reflect::annotation::TypeAnnotation$TypeAnnotationTarget(::java::lang::String)>("valueOf"), //
		jMethod<::sun::reflect::annotation::TypeAnnotation$TypeAnnotationTarget *()>("values"), //
	};

	template<typename R = ::sun::reflect::annotation::TypeAnnotation$TypeAnnotationTarget, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::reflect::annotation::TypeAnnotation$TypeAnnotationTarget *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
