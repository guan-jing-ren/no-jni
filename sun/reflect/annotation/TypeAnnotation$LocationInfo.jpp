#ifndef sun_reflect_annotation_TypeAnnotation$LocationInfo_HPP
#define sun_reflect_annotation_TypeAnnotation$LocationInfo_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::reflect::annotation::TypeAnnotation$LocationInfo : public jObject<::sun::reflect::annotation::TypeAnnotation$LocationInfo, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_reflect_annotation / "TypeAnnotation$LocationInfo";

	constexpr static Enume field_signatures{
		jField<::sun::reflect::annotation::TypeAnnotation$LocationInfo>("BASE_LOCATION"), //
	};

	template<typename F = ::sun::reflect::annotation::TypeAnnotation$LocationInfo>
	static auto BASE_LOCATION() {
		static_assert(field_signatures[jField<F>("BASE_LOCATION")] != -1);
		return sat<F>("BASE_LOCATION");
	}

	constexpr static Enume method_signatures{
		jMethod<::sun::reflect::annotation::TypeAnnotation *(::sun::reflect::annotation::TypeAnnotation *)>("filter"), //
		jMethod<::sun::reflect::annotation::TypeAnnotation$LocationInfo(::java::nio::ByteBuffer)>("parseLocationInfo"), //
		jMethod<::sun::reflect::annotation::TypeAnnotation$LocationInfo()>("pushArray"), //
		jMethod<::sun::reflect::annotation::TypeAnnotation$LocationInfo()>("pushInner"), //
		jMethod<::sun::reflect::annotation::TypeAnnotation$LocationInfo(::jbyte, ::jshort)>("pushLocation"), //
		jMethod<::sun::reflect::annotation::TypeAnnotation$LocationInfo(::jshort)>("pushTypeArg"), //
		jMethod<::sun::reflect::annotation::TypeAnnotation$LocationInfo()>("pushWildcard"), //
	};

	template<typename R = ::sun::reflect::annotation::TypeAnnotation *, typename... Args>
	auto filter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("filter")] != -1);
		return call<R>("filter", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::reflect::annotation::TypeAnnotation$LocationInfo, typename... Args>
	static auto parseLocationInfo(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseLocationInfo")] != -1);
		return scall<R>("parseLocationInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::reflect::annotation::TypeAnnotation$LocationInfo, typename... Args>
	auto pushArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("pushArray")] != -1);
		return call<R>("pushArray", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::reflect::annotation::TypeAnnotation$LocationInfo, typename... Args>
	auto pushInner(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("pushInner")] != -1);
		return call<R>("pushInner", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::reflect::annotation::TypeAnnotation$LocationInfo, typename... Args>
	auto pushLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("pushLocation")] != -1);
		return call<R>("pushLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::reflect::annotation::TypeAnnotation$LocationInfo, typename... Args>
	auto pushTypeArg(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("pushTypeArg")] != -1);
		return call<R>("pushTypeArg", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::reflect::annotation::TypeAnnotation$LocationInfo, typename... Args>
	auto pushWildcard(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("pushWildcard")] != -1);
		return call<R>("pushWildcard", std::forward<Args>(args)...);
	}

};

#endif
