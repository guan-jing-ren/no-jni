#ifndef sun_reflect_misc_FieldUtil_HPP
#define sun_reflect_misc_FieldUtil_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::reflect::misc::FieldUtil : public jObject<::sun::reflect::misc::FieldUtil, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_reflect_misc / "FieldUtil";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::reflect::Field *(::java::lang::Class)>("getDeclaredFields"), //
		jMethod<::java::lang::reflect::Field(::java::lang::Class, ::java::lang::String)>("getField"), //
		jMethod<::java::lang::reflect::Field *(::java::lang::Class)>("getFields"), //
	};

	template<typename R = ::java::lang::reflect::Field *, typename... Args>
	static auto getDeclaredFields(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDeclaredFields")] != -1);
		return scall<R>("getDeclaredFields", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::Field, typename... Args>
	static auto getField(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getField")] != -1);
		return scall<R>("getField", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::Field *, typename... Args>
	static auto getFields(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFields")] != -1);
		return scall<R>("getFields", std::forward<Args>(args)...);
	}

};

#endif
