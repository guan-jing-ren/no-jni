#ifndef sun_print_ServiceDialog_HPP
#define sun_print_ServiceDialog_HPP

#include "../../jfwd_decl.hpp"

class ::sun::print::ServiceDialog : public jObject<::sun::print::ServiceDialog, ::javax::swing::JDialog> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_print / "ServiceDialog";

	constexpr static Enume field_signatures{
		jField<::jint>("APPROVE"), //
		jField<::jint>("CANCEL"), //
		jField<::jint>("WAITING"), //
	};

	template<typename F = ::jint>
	static auto APPROVE() {
		static_assert(field_signatures[jField<F>("APPROVE")] != -1);
		return sat<F>("APPROVE");
	}

	template<typename F = ::jint>
	static auto CANCEL() {
		static_assert(field_signatures[jField<F>("CANCEL")] != -1);
		return sat<F>("CANCEL");
	}

	template<typename F = ::jint>
	static auto WAITING() {
		static_assert(field_signatures[jField<F>("WAITING")] != -1);
		return sat<F>("WAITING");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::GraphicsConfiguration, ::jint, ::jint, ::javax::print::PrintService, ::javax::print::DocFlavor, ::javax::print::attribute::PrintRequestAttributeSet, ::java::awt::Dialog)>(), //
		jConstructor<::jvoid(::java::awt::GraphicsConfiguration, ::jint, ::jint, ::javax::print::PrintService, ::javax::print::DocFlavor, ::javax::print::attribute::PrintRequestAttributeSet, ::java::awt::Frame)>(), //
		jConstructor<::jvoid(::java::awt::GraphicsConfiguration, ::jint, ::jint, ::javax::print::PrintService *, ::jint, ::javax::print::DocFlavor, ::javax::print::attribute::PrintRequestAttributeSet, ::java::awt::Dialog)>(), //
		jConstructor<::jvoid(::java::awt::GraphicsConfiguration, ::jint, ::jint, ::javax::print::PrintService *, ::jint, ::javax::print::DocFlavor, ::javax::print::attribute::PrintRequestAttributeSet, ::java::awt::Frame)>(), //
		jMethod<::jvoid(::java::awt::event::ActionEvent)>("actionPerformed"), //
		jMethod<::jvoid(::jint)>("dispose"), //
		jMethod<::javax::print::attribute::PrintRequestAttributeSet()>("getAttributes"), //
		jMethod<::java::lang::String(::java::lang::String)>("getMsg"), //
		jMethod<::javax::print::PrintService()>("getPrintService"), //
		jMethod<::jint()>("getStatus"), //
		jMethod<::jvoid()>("initResource"), //
		jMethod<::jvoid(::java::awt::GraphicsConfiguration)>("showNoPrintService"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto actionPerformed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("actionPerformed")] != -1);
		return call<R>("actionPerformed", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::print::attribute::PrintRequestAttributeSet, typename... Args>
	auto getAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributes")] != -1);
		return call<R>("getAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getMsg(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMsg")] != -1);
		return scall<R>("getMsg", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::print::PrintService, typename... Args>
	auto getPrintService(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrintService")] != -1);
		return call<R>("getPrintService", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getStatus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStatus")] != -1);
		return call<R>("getStatus", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto initResource(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initResource")] != -1);
		return scall<R>("initResource", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto showNoPrintService(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("showNoPrintService")] != -1);
		return scall<R>("showNoPrintService", std::forward<Args>(args)...);
	}

};

#endif
