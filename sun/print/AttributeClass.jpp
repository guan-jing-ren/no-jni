#ifndef sun_print_AttributeClass_HPP
#define sun_print_AttributeClass_HPP

#include "../../jfwd_decl.hpp"

class ::sun::print::AttributeClass : public jObject<::sun::print::AttributeClass, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_print / "AttributeClass";

	constexpr static Enume field_signatures{
		jField<::sun::print::AttributeClass>("ATTRIBUTES_CHARSET"), //
		jField<::sun::print::AttributeClass>("ATTRIBUTES_NATURAL_LANGUAGE"), //
		jField<::jint>("TAG_BOOL"), //
		jField<::jint>("TAG_CHARSET"), //
		jField<::jint>("TAG_DATE"), //
		jField<::jint>("TAG_ENUM"), //
		jField<::jint>("TAG_INT"), //
		jField<::jint>("TAG_KEYWORD"), //
		jField<::jint>("TAG_MEMBER_ATTRNAME"), //
		jField<::jint>("TAG_MIME_MEDIATYPE"), //
		jField<::jint>("TAG_NAME_LANGUAGE"), //
		jField<::jint>("TAG_NAME_WO_LANGUAGE"), //
		jField<::jint>("TAG_NATURALLANGUAGE"), //
		jField<::jint>("TAG_OCTET"), //
		jField<::jint>("TAG_RANGE_INTEGER"), //
		jField<::jint>("TAG_RESOLUTION"), //
		jField<::jint>("TAG_TEXT_LANGUAGE"), //
		jField<::jint>("TAG_TEXT_WO_LANGUAGE"), //
		jField<::jint>("TAG_UNSUPPORTED_VALUE"), //
		jField<::jint>("TAG_URI"), //
	};

	template<typename F = ::sun::print::AttributeClass>
	static auto ATTRIBUTES_CHARSET() {
		static_assert(field_signatures[jField<F>("ATTRIBUTES_CHARSET")] != -1);
		return sat<F>("ATTRIBUTES_CHARSET");
	}

	template<typename F = ::sun::print::AttributeClass>
	static auto ATTRIBUTES_NATURAL_LANGUAGE() {
		static_assert(field_signatures[jField<F>("ATTRIBUTES_NATURAL_LANGUAGE")] != -1);
		return sat<F>("ATTRIBUTES_NATURAL_LANGUAGE");
	}

	template<typename F = ::jint>
	static auto TAG_BOOL() {
		static_assert(field_signatures[jField<F>("TAG_BOOL")] != -1);
		return sat<F>("TAG_BOOL");
	}

	template<typename F = ::jint>
	static auto TAG_CHARSET() {
		static_assert(field_signatures[jField<F>("TAG_CHARSET")] != -1);
		return sat<F>("TAG_CHARSET");
	}

	template<typename F = ::jint>
	static auto TAG_DATE() {
		static_assert(field_signatures[jField<F>("TAG_DATE")] != -1);
		return sat<F>("TAG_DATE");
	}

	template<typename F = ::jint>
	static auto TAG_ENUM() {
		static_assert(field_signatures[jField<F>("TAG_ENUM")] != -1);
		return sat<F>("TAG_ENUM");
	}

	template<typename F = ::jint>
	static auto TAG_INT() {
		static_assert(field_signatures[jField<F>("TAG_INT")] != -1);
		return sat<F>("TAG_INT");
	}

	template<typename F = ::jint>
	static auto TAG_KEYWORD() {
		static_assert(field_signatures[jField<F>("TAG_KEYWORD")] != -1);
		return sat<F>("TAG_KEYWORD");
	}

	template<typename F = ::jint>
	static auto TAG_MEMBER_ATTRNAME() {
		static_assert(field_signatures[jField<F>("TAG_MEMBER_ATTRNAME")] != -1);
		return sat<F>("TAG_MEMBER_ATTRNAME");
	}

	template<typename F = ::jint>
	static auto TAG_MIME_MEDIATYPE() {
		static_assert(field_signatures[jField<F>("TAG_MIME_MEDIATYPE")] != -1);
		return sat<F>("TAG_MIME_MEDIATYPE");
	}

	template<typename F = ::jint>
	static auto TAG_NAME_LANGUAGE() {
		static_assert(field_signatures[jField<F>("TAG_NAME_LANGUAGE")] != -1);
		return sat<F>("TAG_NAME_LANGUAGE");
	}

	template<typename F = ::jint>
	static auto TAG_NAME_WO_LANGUAGE() {
		static_assert(field_signatures[jField<F>("TAG_NAME_WO_LANGUAGE")] != -1);
		return sat<F>("TAG_NAME_WO_LANGUAGE");
	}

	template<typename F = ::jint>
	static auto TAG_NATURALLANGUAGE() {
		static_assert(field_signatures[jField<F>("TAG_NATURALLANGUAGE")] != -1);
		return sat<F>("TAG_NATURALLANGUAGE");
	}

	template<typename F = ::jint>
	static auto TAG_OCTET() {
		static_assert(field_signatures[jField<F>("TAG_OCTET")] != -1);
		return sat<F>("TAG_OCTET");
	}

	template<typename F = ::jint>
	static auto TAG_RANGE_INTEGER() {
		static_assert(field_signatures[jField<F>("TAG_RANGE_INTEGER")] != -1);
		return sat<F>("TAG_RANGE_INTEGER");
	}

	template<typename F = ::jint>
	static auto TAG_RESOLUTION() {
		static_assert(field_signatures[jField<F>("TAG_RESOLUTION")] != -1);
		return sat<F>("TAG_RESOLUTION");
	}

	template<typename F = ::jint>
	static auto TAG_TEXT_LANGUAGE() {
		static_assert(field_signatures[jField<F>("TAG_TEXT_LANGUAGE")] != -1);
		return sat<F>("TAG_TEXT_LANGUAGE");
	}

	template<typename F = ::jint>
	static auto TAG_TEXT_WO_LANGUAGE() {
		static_assert(field_signatures[jField<F>("TAG_TEXT_WO_LANGUAGE")] != -1);
		return sat<F>("TAG_TEXT_WO_LANGUAGE");
	}

	template<typename F = ::jint>
	static auto TAG_UNSUPPORTED_VALUE() {
		static_assert(field_signatures[jField<F>("TAG_UNSUPPORTED_VALUE")] != -1);
		return sat<F>("TAG_UNSUPPORTED_VALUE");
	}

	template<typename F = ::jint>
	static auto TAG_URI() {
		static_assert(field_signatures[jField<F>("TAG_URI")] != -1);
		return sat<F>("TAG_URI");
	}

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint *()>("getArrayOfIntValues"), //
		jMethod<::java::lang::String *()>("getArrayOfStringValues"), //
		jMethod<::jbyte()>("getByteValue"), //
		jMethod<::jint *()>("getIntRangeValue"), //
		jMethod<::jint()>("getIntValue"), //
		jMethod<::jchar *()>("getLenChars"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::lang::Object()>("getObjectValue"), //
		jMethod<::java::lang::String()>("getStringValue"), //
		jMethod<::jbyte()>("getType"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getArrayOfIntValues(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getArrayOfIntValues")] != -1);
		return call<R>("getArrayOfIntValues", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getArrayOfStringValues(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getArrayOfStringValues")] != -1);
		return call<R>("getArrayOfStringValues", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto getByteValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getByteValue")] != -1);
		return call<R>("getByteValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getIntRangeValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIntRangeValue")] != -1);
		return call<R>("getIntRangeValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getIntValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIntValue")] != -1);
		return call<R>("getIntValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar *, typename... Args>
	auto getLenChars(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLenChars")] != -1);
		return call<R>("getLenChars", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getObjectValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectValue")] != -1);
		return call<R>("getObjectValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getStringValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStringValue")] != -1);
		return call<R>("getStringValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
