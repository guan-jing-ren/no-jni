#ifndef sun_print_SunAlternateMedia_HPP
#define sun_print_SunAlternateMedia_HPP

#include "../../jfwd_decl.hpp"

class ::sun::print::SunAlternateMedia : public jObject<::sun::print::SunAlternateMedia, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_print / "SunAlternateMedia";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::print::attribute::standard::Media)>(), //
		jMethod<::java::lang::Class()>("getCategory"), //
		jMethod<::javax::print::attribute::standard::Media()>("getMedia"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::Class, typename... Args>
	auto getCategory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCategory")] != -1);
		return call<R>("getCategory", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::print::attribute::standard::Media, typename... Args>
	auto getMedia(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMedia")] != -1);
		return call<R>("getMedia", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
