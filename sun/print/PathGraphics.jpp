#ifndef sun_print_PathGraphics_HPP
#define sun_print_PathGraphics_HPP

#include "../../jfwd_decl.hpp"

class ::sun::print::PathGraphics : public jObject<::sun::print::PathGraphics, ::sun::print::ProxyGraphics2D> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_print / "PathGraphics";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean()>("canDoRedraws"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("clearRect"), //
		jMethod<::jvoid(::java::awt::Shape)>("draw"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("drawArc"), //
		jMethod<::jvoid(::java::awt::font::GlyphVector, ::jfloat, ::jfloat)>("drawGlyphVector"), //
		jMethod<::jboolean(::java::awt::Image, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::java::awt::Color, ::java::awt::image::ImageObserver)>("drawImage"), //
		jMethod<::jboolean(::java::awt::Image, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::java::awt::image::ImageObserver)>("drawImage"), //
		jMethod<::jboolean(::java::awt::Image, ::jint, ::jint, ::jint, ::jint, ::java::awt::Color, ::java::awt::image::ImageObserver)>("drawImage"), //
		jMethod<::jboolean(::java::awt::Image, ::jint, ::jint, ::jint, ::jint, ::java::awt::image::ImageObserver)>("drawImage"), //
		jMethod<::jboolean(::java::awt::Image, ::jint, ::jint, ::java::awt::Color, ::java::awt::image::ImageObserver)>("drawImage"), //
		jMethod<::jboolean(::java::awt::Image, ::jint, ::jint, ::java::awt::image::ImageObserver)>("drawImage"), //
		jMethod<::jboolean(::java::awt::Image, ::java::awt::geom::AffineTransform, ::java::awt::image::ImageObserver)>("drawImage"), //
		jMethod<::jvoid(::java::awt::image::BufferedImage, ::java::awt::image::BufferedImageOp, ::jint, ::jint)>("drawImage"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("drawLine"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("drawOval"), //
		jMethod<::jvoid(::java::awt::Polygon)>("drawPolygon"), //
		jMethod<::jvoid(::jint *, ::jint *, ::jint)>("drawPolygon"), //
		jMethod<::jvoid(::jint *, ::jint *, ::jint)>("drawPolyline"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("drawRect"), //
		jMethod<::jvoid(::java::awt::image::RenderedImage, ::java::awt::geom::AffineTransform)>("drawRenderedImage"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("drawRoundRect"), //
		jMethod<::jvoid(::java::lang::String, ::jfloat, ::jfloat)>("drawString"), //
		jMethod<::jvoid(::java::lang::String, ::jint, ::jint)>("drawString"), //
		jMethod<::jvoid(::java::text::AttributedCharacterIterator, ::jfloat, ::jfloat)>("drawString"), //
		jMethod<::jvoid(::java::text::AttributedCharacterIterator, ::jint, ::jint)>("drawString"), //
		jMethod<::jvoid(::java::awt::Shape)>("fill"), //
		jMethod<::jvoid(::java::awt::Shape, ::java::awt::Color)>("fill"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("fillArc"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("fillOval"), //
		jMethod<::jvoid(::java::awt::Polygon)>("fillPolygon"), //
		jMethod<::jvoid(::jint *, ::jint *, ::jint)>("fillPolygon"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("fillRect"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("fillRoundRect"), //
		jMethod<::jvoid(::java::awt::geom::Rectangle2D, ::jdouble, ::jdouble, ::java::awt::Shape, ::java::awt::geom::AffineTransform)>("redrawRegion"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto canDoRedraws(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canDoRedraws")] != -1);
		return call<R>("canDoRedraws", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clearRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clearRect")] != -1);
		return call<R>("clearRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto draw(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("draw")] != -1);
		return call<R>("draw", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawArc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawArc")] != -1);
		return call<R>("drawArc", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawGlyphVector(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawGlyphVector")] != -1);
		return call<R>("drawGlyphVector", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto drawImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawImage")] != -1);
		return call<R>("drawImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawLine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawLine")] != -1);
		return call<R>("drawLine", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawOval(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawOval")] != -1);
		return call<R>("drawOval", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawPolygon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawPolygon")] != -1);
		return call<R>("drawPolygon", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawPolyline(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawPolyline")] != -1);
		return call<R>("drawPolyline", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawRect")] != -1);
		return call<R>("drawRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawRenderedImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawRenderedImage")] != -1);
		return call<R>("drawRenderedImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawRoundRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawRoundRect")] != -1);
		return call<R>("drawRoundRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawString")] != -1);
		return call<R>("drawString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fill(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fill")] != -1);
		return call<R>("fill", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillArc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fillArc")] != -1);
		return call<R>("fillArc", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillOval(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fillOval")] != -1);
		return call<R>("fillOval", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillPolygon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fillPolygon")] != -1);
		return call<R>("fillPolygon", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fillRect")] != -1);
		return call<R>("fillRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillRoundRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fillRoundRect")] != -1);
		return call<R>("fillRoundRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto redrawRegion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("redrawRegion")] != -1);
		return call<R>("redrawRegion", std::forward<Args>(args)...);
	}

};

#endif
