#ifndef sun_print_PeekGraphics_HPP
#define sun_print_PeekGraphics_HPP

#include "../../jfwd_decl.hpp"

class ::sun::print::PeekGraphics : public jObject<::sun::print::PeekGraphics, ::java::awt::Graphics2D> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_print / "PeekGraphics";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::Graphics2D, ::java::awt::print::PrinterJob)>(), //
		jMethod<::jvoid(::java::util::Map)>("addRenderingHints"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("clearRect"), //
		jMethod<::jvoid(::java::awt::Shape)>("clip"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("clipRect"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("copyArea"), //
		jMethod<::java::awt::Graphics()>("create"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jvoid(::java::awt::Shape)>("draw"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("drawArc"), //
		jMethod<::jvoid(::java::awt::font::GlyphVector, ::jfloat, ::jfloat)>("drawGlyphVector"), //
		jMethod<::jboolean(::java::awt::Image, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::java::awt::Color, ::java::awt::image::ImageObserver)>("drawImage"), //
		jMethod<::jboolean(::java::awt::Image, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::java::awt::image::ImageObserver)>("drawImage"), //
		jMethod<::jboolean(::java::awt::Image, ::jint, ::jint, ::jint, ::jint, ::java::awt::Color, ::java::awt::image::ImageObserver)>("drawImage"), //
		jMethod<::jboolean(::java::awt::Image, ::jint, ::jint, ::jint, ::jint, ::java::awt::image::ImageObserver)>("drawImage"), //
		jMethod<::jboolean(::java::awt::Image, ::jint, ::jint, ::java::awt::Color, ::java::awt::image::ImageObserver)>("drawImage"), //
		jMethod<::jboolean(::java::awt::Image, ::jint, ::jint, ::java::awt::image::ImageObserver)>("drawImage"), //
		jMethod<::jboolean(::java::awt::Image, ::java::awt::geom::AffineTransform, ::java::awt::image::ImageObserver)>("drawImage"), //
		jMethod<::jvoid(::java::awt::image::BufferedImage, ::java::awt::image::BufferedImageOp, ::jint, ::jint)>("drawImage"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("drawLine"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("drawOval"), //
		jMethod<::jvoid(::jint *, ::jint *, ::jint)>("drawPolygon"), //
		jMethod<::jvoid(::jint *, ::jint *, ::jint)>("drawPolyline"), //
		jMethod<::jvoid(::java::awt::image::renderable::RenderableImage, ::java::awt::geom::AffineTransform)>("drawRenderableImage"), //
		jMethod<::jvoid(::java::awt::image::RenderedImage, ::java::awt::geom::AffineTransform)>("drawRenderedImage"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("drawRoundRect"), //
		jMethod<::jvoid(::java::lang::String, ::jfloat, ::jfloat)>("drawString"), //
		jMethod<::jvoid(::java::lang::String, ::jint, ::jint)>("drawString"), //
		jMethod<::jvoid(::java::text::AttributedCharacterIterator, ::jfloat, ::jfloat)>("drawString"), //
		jMethod<::jvoid(::java::text::AttributedCharacterIterator, ::jint, ::jint)>("drawString"), //
		jMethod<::jvoid(::java::awt::Shape)>("fill"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("fillArc"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("fillOval"), //
		jMethod<::jvoid(::jint *, ::jint *, ::jint)>("fillPolygon"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("fillRect"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("fillRoundRect"), //
		jMethod<::jvoid()>("finalize"), //
		jMethod<::jboolean()>("getAWTDrawingOnly"), //
		jMethod<::java::awt::Color()>("getBackground"), //
		jMethod<::java::awt::Shape()>("getClip"), //
		jMethod<::java::awt::Rectangle()>("getClipBounds"), //
		jMethod<::java::awt::Color()>("getColor"), //
		jMethod<::java::awt::Composite()>("getComposite"), //
		jMethod<::java::awt::Graphics2D()>("getDelegate"), //
		jMethod<::java::awt::GraphicsConfiguration()>("getDeviceConfiguration"), //
		jMethod<::sun::java2d::Spans()>("getDrawingArea"), //
		jMethod<::java::awt::Font()>("getFont"), //
		jMethod<::java::awt::FontMetrics(::java::awt::Font)>("getFontMetrics"), //
		jMethod<::java::awt::font::FontRenderContext()>("getFontRenderContext"), //
		jMethod<::sun::print::PeekMetrics()>("getMetrics"), //
		jMethod<::java::awt::Paint()>("getPaint"), //
		jMethod<::java::awt::print::PrinterJob()>("getPrinterJob"), //
		jMethod<::java::lang::Object(::java::awt::RenderingHints$Key)>("getRenderingHint"), //
		jMethod<::java::awt::RenderingHints()>("getRenderingHints"), //
		jMethod<::java::awt::Stroke()>("getStroke"), //
		jMethod<::java::awt::geom::AffineTransform()>("getTransform"), //
		jMethod<::jboolean(::java::awt::Rectangle, ::java::awt::Shape, ::jboolean)>("hit"), //
		jMethod<::jboolean(::java::awt::Rectangle)>("hitsDrawingArea"), //
		jMethod<::jboolean(::java::awt::Image, ::jint, ::jint, ::jint, ::jint, ::jint)>("imageUpdate"), //
		jMethod<::jvoid(::jdouble)>("rotate"), //
		jMethod<::jvoid(::jdouble, ::jdouble, ::jdouble)>("rotate"), //
		jMethod<::jvoid(::jdouble, ::jdouble)>("scale"), //
		jMethod<::jvoid()>("setAWTDrawingOnly"), //
		jMethod<::jvoid(::java::awt::Color)>("setBackground"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("setClip"), //
		jMethod<::jvoid(::java::awt::Shape)>("setClip"), //
		jMethod<::jvoid(::java::awt::Color)>("setColor"), //
		jMethod<::jvoid(::java::awt::Composite)>("setComposite"), //
		jMethod<::jvoid(::java::awt::Graphics2D)>("setDelegate"), //
		jMethod<::jvoid(::java::awt::Font)>("setFont"), //
		jMethod<::jvoid(::java::awt::Paint)>("setPaint"), //
		jMethod<::jvoid()>("setPaintMode"), //
		jMethod<::jvoid(::java::awt::RenderingHints$Key, ::java::lang::Object)>("setRenderingHint"), //
		jMethod<::jvoid(::java::util::Map)>("setRenderingHints"), //
		jMethod<::jvoid(::java::awt::Stroke)>("setStroke"), //
		jMethod<::jvoid(::java::awt::geom::AffineTransform)>("setTransform"), //
		jMethod<::jvoid(::java::awt::Color)>("setXORMode"), //
		jMethod<::jvoid(::jdouble, ::jdouble)>("shear"), //
		jMethod<::jvoid(::java::awt::geom::AffineTransform)>("transform"), //
		jMethod<::jvoid(::jdouble, ::jdouble)>("translate"), //
		jMethod<::jvoid(::jint, ::jint)>("translate"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addRenderingHints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addRenderingHints")] != -1);
		return call<R>("addRenderingHints", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clearRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clearRect")] != -1);
		return call<R>("clearRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clip(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clip")] != -1);
		return call<R>("clip", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clipRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clipRect")] != -1);
		return call<R>("clipRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto copyArea(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("copyArea")] != -1);
		return call<R>("copyArea", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Graphics, typename... Args>
	auto create(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create")] != -1);
		return call<R>("create", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto draw(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("draw")] != -1);
		return call<R>("draw", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawArc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawArc")] != -1);
		return call<R>("drawArc", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawGlyphVector(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawGlyphVector")] != -1);
		return call<R>("drawGlyphVector", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto drawImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawImage")] != -1);
		return call<R>("drawImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawLine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawLine")] != -1);
		return call<R>("drawLine", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawOval(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawOval")] != -1);
		return call<R>("drawOval", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawPolygon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawPolygon")] != -1);
		return call<R>("drawPolygon", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawPolyline(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawPolyline")] != -1);
		return call<R>("drawPolyline", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawRenderableImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawRenderableImage")] != -1);
		return call<R>("drawRenderableImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawRenderedImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawRenderedImage")] != -1);
		return call<R>("drawRenderedImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawRoundRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawRoundRect")] != -1);
		return call<R>("drawRoundRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawString")] != -1);
		return call<R>("drawString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fill(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fill")] != -1);
		return call<R>("fill", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillArc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fillArc")] != -1);
		return call<R>("fillArc", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillOval(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fillOval")] != -1);
		return call<R>("fillOval", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillPolygon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fillPolygon")] != -1);
		return call<R>("fillPolygon", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fillRect")] != -1);
		return call<R>("fillRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillRoundRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fillRoundRect")] != -1);
		return call<R>("fillRoundRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto finalize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("finalize")] != -1);
		return call<R>("finalize", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getAWTDrawingOnly(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAWTDrawingOnly")] != -1);
		return call<R>("getAWTDrawingOnly", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBackground")] != -1);
		return call<R>("getBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Shape, typename... Args>
	auto getClip(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClip")] != -1);
		return call<R>("getClip", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getClipBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClipBounds")] != -1);
		return call<R>("getClipBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColor")] != -1);
		return call<R>("getColor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Composite, typename... Args>
	auto getComposite(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getComposite")] != -1);
		return call<R>("getComposite", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Graphics2D, typename... Args>
	auto getDelegate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDelegate")] != -1);
		return call<R>("getDelegate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::GraphicsConfiguration, typename... Args>
	auto getDeviceConfiguration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDeviceConfiguration")] != -1);
		return call<R>("getDeviceConfiguration", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::Spans, typename... Args>
	auto getDrawingArea(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDrawingArea")] != -1);
		return call<R>("getDrawingArea", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Font, typename... Args>
	auto getFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFont")] != -1);
		return call<R>("getFont", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::FontMetrics, typename... Args>
	auto getFontMetrics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFontMetrics")] != -1);
		return call<R>("getFontMetrics", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::font::FontRenderContext, typename... Args>
	auto getFontRenderContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFontRenderContext")] != -1);
		return call<R>("getFontRenderContext", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::print::PeekMetrics, typename... Args>
	auto getMetrics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMetrics")] != -1);
		return call<R>("getMetrics", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Paint, typename... Args>
	auto getPaint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPaint")] != -1);
		return call<R>("getPaint", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::print::PrinterJob, typename... Args>
	auto getPrinterJob(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrinterJob")] != -1);
		return call<R>("getPrinterJob", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getRenderingHint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRenderingHint")] != -1);
		return call<R>("getRenderingHint", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::RenderingHints, typename... Args>
	auto getRenderingHints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRenderingHints")] != -1);
		return call<R>("getRenderingHints", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Stroke, typename... Args>
	auto getStroke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStroke")] != -1);
		return call<R>("getStroke", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::AffineTransform, typename... Args>
	auto getTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransform")] != -1);
		return call<R>("getTransform", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hit")] != -1);
		return call<R>("hit", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hitsDrawingArea(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hitsDrawingArea")] != -1);
		return call<R>("hitsDrawingArea", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto imageUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("imageUpdate")] != -1);
		return call<R>("imageUpdate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto rotate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rotate")] != -1);
		return call<R>("rotate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto scale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("scale")] != -1);
		return call<R>("scale", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAWTDrawingOnly(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAWTDrawingOnly")] != -1);
		return call<R>("setAWTDrawingOnly", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBackground")] != -1);
		return call<R>("setBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setClip(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setClip")] != -1);
		return call<R>("setClip", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setColor")] != -1);
		return call<R>("setColor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setComposite(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setComposite")] != -1);
		return call<R>("setComposite", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDelegate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDelegate")] != -1);
		return call<R>("setDelegate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFont")] != -1);
		return call<R>("setFont", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPaint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPaint")] != -1);
		return call<R>("setPaint", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPaintMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPaintMode")] != -1);
		return call<R>("setPaintMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRenderingHint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRenderingHint")] != -1);
		return call<R>("setRenderingHint", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRenderingHints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRenderingHints")] != -1);
		return call<R>("setRenderingHints", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setStroke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setStroke")] != -1);
		return call<R>("setStroke", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTransform")] != -1);
		return call<R>("setTransform", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setXORMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setXORMode")] != -1);
		return call<R>("setXORMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto shear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shear")] != -1);
		return call<R>("shear", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto transform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("transform")] != -1);
		return call<R>("transform", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto translate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("translate")] != -1);
		return call<R>("translate", std::forward<Args>(args)...);
	}

};

#endif
