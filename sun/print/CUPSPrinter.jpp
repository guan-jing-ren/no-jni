#ifndef sun_print_CUPSPrinter_HPP
#define sun_print_CUPSPrinter_HPP

#include "../../jfwd_decl.hpp"

class ::sun::print::CUPSPrinter : public jObject<::sun::print::CUPSPrinter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_print / "CUPSPrinter";

	constexpr static Enume field_signatures{
		jField<::jint>("nPageSizes"), //
		jField<::jint>("nTrays"), //
	};

	template<typename F = ::jint>
	auto nPageSizes() const {
		static_assert(field_signatures[jField<F>("nPageSizes")] != -1);
		return at<F>("nPageSizes");
	}

	template<typename F = ::jint>
	auto nTrays() const {
		static_assert(field_signatures[jField<F>("nTrays")] != -1);
		return at<F>("nTrays");
	}

	constexpr static Enume method_signatures{
		jMethod<::jint()>("getDefaultMediaIndex"), //
		jMethod<::jint()>("getPort"), //
		jMethod<::java::lang::String()>("getServer"), //
		jMethod<::jboolean()>("isCupsRunning"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getDefaultMediaIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultMediaIndex")] != -1);
		return call<R>("getDefaultMediaIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getPort(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPort")] != -1);
		return scall<R>("getPort", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getServer(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServer")] != -1);
		return scall<R>("getServer", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isCupsRunning(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCupsRunning")] != -1);
		return scall<R>("isCupsRunning", std::forward<Args>(args)...);
	}

};

#endif
