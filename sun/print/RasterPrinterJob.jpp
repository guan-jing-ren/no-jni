#ifndef sun_print_RasterPrinterJob_HPP
#define sun_print_RasterPrinterJob_HPP

#include "../../jfwd_decl.hpp"

class ::sun::print::RasterPrinterJob : public jObject<::sun::print::RasterPrinterJob, ::java::awt::print::PrinterJob> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_print / "RasterPrinterJob";

	constexpr static Enume field_signatures{
		jField<::jboolean>("debugPrint"), //
		jField<::jboolean>("forcePDL"), //
		jField<::jboolean>("forceRaster"), //
		jField<::jboolean>("shapeTextProp"), //
	};

	template<typename F = ::jboolean>
	static auto debugPrint() {
		static_assert(field_signatures[jField<F>("debugPrint")] != -1);
		return sat<F>("debugPrint");
	}

	template<typename F = ::jboolean>
	static auto forcePDL() {
		static_assert(field_signatures[jField<F>("forcePDL")] != -1);
		return sat<F>("forcePDL");
	}

	template<typename F = ::jboolean>
	static auto forceRaster() {
		static_assert(field_signatures[jField<F>("forceRaster")] != -1);
		return sat<F>("forceRaster");
	}

	template<typename F = ::jboolean>
	static auto shapeTextProp() {
		static_assert(field_signatures[jField<F>("shapeTextProp")] != -1);
		return sat<F>("shapeTextProp");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid()>("cancel"), //
		jMethod<::jboolean()>("checkAllowedToPrintToFile"), //
		jMethod<::java::awt::print::PageFormat(::java::awt::print::PageFormat)>("defaultPage"), //
		jMethod<::jint()>("getCopies"), //
		jMethod<::java::lang::String()>("getJobName"), //
		jMethod<::javax::print::PrintService()>("getPrintService"), //
		jMethod<::java::lang::String()>("getUserName"), //
		jMethod<::jboolean()>("isCancelled"), //
		jMethod<::java::awt::print::PageFormat(::java::awt::print::PageFormat)>("pageDialog"), //
		jMethod<::java::awt::print::PageFormat(::javax::print::attribute::PrintRequestAttributeSet)>("pageDialog"), //
		jMethod<::jvoid()>("print"), //
		jMethod<::jvoid(::javax::print::attribute::PrintRequestAttributeSet)>("print"), //
		jMethod<::jboolean()>("printDialog"), //
		jMethod<::jboolean(::javax::print::attribute::PrintRequestAttributeSet)>("printDialog"), //
		jMethod<::jvoid(::java::awt::geom::AffineTransform, ::java::awt::Shape, ::java::awt::geom::Rectangle2D, ::jdouble, ::jdouble)>("saveState"), //
		jMethod<::jvoid(::jint)>("setCopies"), //
		jMethod<::jvoid(::java::lang::String)>("setJobName"), //
		jMethod<::jvoid(::java::awt::print::Pageable)>("setPageable"), //
		jMethod<::jvoid(::javax::print::PrintService)>("setPrintService"), //
		jMethod<::jvoid(::java::awt::print::Printable)>("setPrintable"), //
		jMethod<::jvoid(::java::awt::print::Printable, ::java::awt::print::PageFormat)>("setPrintable"), //
		jMethod<::java::awt::print::PageFormat(::java::awt::print::PageFormat)>("validatePage"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto cancel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cancel")] != -1);
		return call<R>("cancel", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto checkAllowedToPrintToFile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkAllowedToPrintToFile")] != -1);
		return call<R>("checkAllowedToPrintToFile", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::print::PageFormat, typename... Args>
	auto defaultPage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("defaultPage")] != -1);
		return call<R>("defaultPage", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCopies(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCopies")] != -1);
		return call<R>("getCopies", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getJobName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJobName")] != -1);
		return call<R>("getJobName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::print::PrintService, typename... Args>
	auto getPrintService(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrintService")] != -1);
		return call<R>("getPrintService", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUserName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUserName")] != -1);
		return call<R>("getUserName", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCancelled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCancelled")] != -1);
		return call<R>("isCancelled", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::print::PageFormat, typename... Args>
	auto pageDialog(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("pageDialog")] != -1);
		return call<R>("pageDialog", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto print(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("print")] != -1);
		return call<R>("print", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto printDialog(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("printDialog")] != -1);
		return call<R>("printDialog", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto saveState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("saveState")] != -1);
		return call<R>("saveState", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCopies(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCopies")] != -1);
		return call<R>("setCopies", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setJobName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setJobName")] != -1);
		return call<R>("setJobName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPageable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPageable")] != -1);
		return call<R>("setPageable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPrintService(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPrintService")] != -1);
		return call<R>("setPrintService", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPrintable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPrintable")] != -1);
		return call<R>("setPrintable", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::print::PageFormat, typename... Args>
	auto validatePage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("validatePage")] != -1);
		return call<R>("validatePage", std::forward<Args>(args)...);
	}

};

#endif
