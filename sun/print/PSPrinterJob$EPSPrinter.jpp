#ifndef sun_print_PSPrinterJob$EPSPrinter_HPP
#define sun_print_PSPrinterJob$EPSPrinter_HPP

#include "../../jfwd_decl.hpp"

class ::sun::print::PSPrinterJob$EPSPrinter : public jObject<::sun::print::PSPrinterJob$EPSPrinter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_print / "PSPrinterJob$EPSPrinter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::print::Printable, ::java::lang::String, ::java::io::PrintStream, ::jint, ::jint, ::jint, ::jint)>(), //
		jMethod<::jint()>("getNumberOfPages"), //
		jMethod<::java::awt::print::PageFormat(::jint)>("getPageFormat"), //
		jMethod<::java::awt::print::Printable(::jint)>("getPrintable"), //
		jMethod<::jvoid()>("print"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getNumberOfPages(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNumberOfPages")] != -1);
		return call<R>("getNumberOfPages", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::print::PageFormat, typename... Args>
	auto getPageFormat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPageFormat")] != -1);
		return call<R>("getPageFormat", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::print::Printable, typename... Args>
	auto getPrintable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrintable")] != -1);
		return call<R>("getPrintable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto print(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("print")] != -1);
		return call<R>("print", std::forward<Args>(args)...);
	}

};

#endif
