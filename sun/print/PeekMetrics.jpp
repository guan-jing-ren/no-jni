#ifndef sun_print_PeekMetrics_HPP
#define sun_print_PeekMetrics_HPP

#include "../../jfwd_decl.hpp"

class ::sun::print::PeekMetrics : public jObject<::sun::print::PeekMetrics, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_print / "PeekMetrics";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::awt::Graphics2D)>("clear"), //
		jMethod<::jvoid(::java::awt::Graphics2D)>("draw"), //
		jMethod<::jvoid(::java::awt::Graphics2D, ::java::awt::Image)>("drawImage"), //
		jMethod<::jvoid(::java::awt::Graphics2D, ::java::awt::image::RenderedImage)>("drawImage"), //
		jMethod<::jvoid(::java::awt::Graphics2D, ::java::awt::image::renderable::RenderableImage)>("drawImage"), //
		jMethod<::jvoid(::java::awt::Graphics2D)>("drawText"), //
		jMethod<::jvoid(::java::awt::Graphics2D, ::java::awt::font::TextLayout)>("drawText"), //
		jMethod<::jvoid(::java::awt::Graphics2D)>("fill"), //
		jMethod<::jboolean()>("hasCompositing"), //
		jMethod<::jboolean()>("hasImages"), //
		jMethod<::jboolean()>("hasNonSolidColors"), //
		jMethod<::jboolean()>("hasText"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto draw(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("draw")] != -1);
		return call<R>("draw", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawImage")] != -1);
		return call<R>("drawImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawText")] != -1);
		return call<R>("drawText", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fill(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fill")] != -1);
		return call<R>("fill", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasCompositing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasCompositing")] != -1);
		return call<R>("hasCompositing", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasImages(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasImages")] != -1);
		return call<R>("hasImages", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasNonSolidColors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasNonSolidColors")] != -1);
		return call<R>("hasNonSolidColors", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasText")] != -1);
		return call<R>("hasText", std::forward<Args>(args)...);
	}

};

#endif
