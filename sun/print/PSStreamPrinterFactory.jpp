#ifndef sun_print_PSStreamPrinterFactory_HPP
#define sun_print_PSStreamPrinterFactory_HPP

#include "../../jfwd_decl.hpp"

class ::sun::print::PSStreamPrinterFactory : public jObject<::sun::print::PSStreamPrinterFactory, ::javax::print::StreamPrintServiceFactory> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_print / "PSStreamPrinterFactory";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::String()>("getOutputFormat"), //
		jMethod<::javax::print::StreamPrintService(::java::io::OutputStream)>("getPrintService"), //
		jMethod<::javax::print::DocFlavor *()>("getSupportedDocFlavors"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getOutputFormat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOutputFormat")] != -1);
		return call<R>("getOutputFormat", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::print::StreamPrintService, typename... Args>
	auto getPrintService(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrintService")] != -1);
		return call<R>("getPrintService", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::print::DocFlavor *, typename... Args>
	auto getSupportedDocFlavors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSupportedDocFlavors")] != -1);
		return call<R>("getSupportedDocFlavors", std::forward<Args>(args)...);
	}

};

#endif
