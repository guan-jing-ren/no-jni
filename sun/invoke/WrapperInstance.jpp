#ifndef sun_invoke_WrapperInstance_HPP
#define sun_invoke_WrapperInstance_HPP

#include "../../jfwd_decl.hpp"

class ::sun::invoke::WrapperInstance : public jObject<::sun::invoke::WrapperInstance, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_invoke / "WrapperInstance";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::invoke::MethodHandle()>("getWrapperInstanceTarget"), //
		jMethod<::java::lang::Class()>("getWrapperInstanceType"), //
	};

	template<typename R = ::java::lang::invoke::MethodHandle, typename... Args>
	auto getWrapperInstanceTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWrapperInstanceTarget")] != -1);
		return call<R>("getWrapperInstanceTarget", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto getWrapperInstanceType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWrapperInstanceType")] != -1);
		return call<R>("getWrapperInstanceType", std::forward<Args>(args)...);
	}

};

#endif
