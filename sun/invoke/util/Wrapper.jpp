#ifndef sun_invoke_util_Wrapper_HPP
#define sun_invoke_util_Wrapper_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::invoke::util::Wrapper : public jObject<::sun::invoke::util::Wrapper, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_invoke_util / "Wrapper";

	constexpr static Enume field_signatures{
		jField<::sun::invoke::util::Wrapper>("BOOLEAN"), //
		jField<::sun::invoke::util::Wrapper>("BYTE"), //
		jField<::sun::invoke::util::Wrapper>("CHAR"), //
		jField<::sun::invoke::util::Wrapper>("DOUBLE"), //
		jField<::sun::invoke::util::Wrapper>("FLOAT"), //
		jField<::sun::invoke::util::Wrapper>("INT"), //
		jField<::sun::invoke::util::Wrapper>("LONG"), //
		jField<::sun::invoke::util::Wrapper>("OBJECT"), //
		jField<::sun::invoke::util::Wrapper>("SHORT"), //
		jField<::sun::invoke::util::Wrapper>("VOID"), //
	};

	template<typename F = ::sun::invoke::util::Wrapper>
	static auto BOOLEAN() {
		static_assert(field_signatures[jField<F>("BOOLEAN")] != -1);
		return sat<F>("BOOLEAN");
	}

	template<typename F = ::sun::invoke::util::Wrapper>
	static auto BYTE() {
		static_assert(field_signatures[jField<F>("BYTE")] != -1);
		return sat<F>("BYTE");
	}

	template<typename F = ::sun::invoke::util::Wrapper>
	static auto CHAR() {
		static_assert(field_signatures[jField<F>("CHAR")] != -1);
		return sat<F>("CHAR");
	}

	template<typename F = ::sun::invoke::util::Wrapper>
	static auto DOUBLE() {
		static_assert(field_signatures[jField<F>("DOUBLE")] != -1);
		return sat<F>("DOUBLE");
	}

	template<typename F = ::sun::invoke::util::Wrapper>
	static auto FLOAT() {
		static_assert(field_signatures[jField<F>("FLOAT")] != -1);
		return sat<F>("FLOAT");
	}

	template<typename F = ::sun::invoke::util::Wrapper>
	static auto INT() {
		static_assert(field_signatures[jField<F>("INT")] != -1);
		return sat<F>("INT");
	}

	template<typename F = ::sun::invoke::util::Wrapper>
	static auto LONG() {
		static_assert(field_signatures[jField<F>("LONG")] != -1);
		return sat<F>("LONG");
	}

	template<typename F = ::sun::invoke::util::Wrapper>
	static auto OBJECT() {
		static_assert(field_signatures[jField<F>("OBJECT")] != -1);
		return sat<F>("OBJECT");
	}

	template<typename F = ::sun::invoke::util::Wrapper>
	static auto SHORT() {
		static_assert(field_signatures[jField<F>("SHORT")] != -1);
		return sat<F>("SHORT");
	}

	template<typename F = ::sun::invoke::util::Wrapper>
	static auto VOID() {
		static_assert(field_signatures[jField<F>("VOID")] != -1);
		return sat<F>("VOID");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Class()>("arrayType"), //
		jMethod<::java::lang::Class(::java::lang::Class)>("asPrimitiveType"), //
		jMethod<::java::lang::Class(::java::lang::Class)>("asWrapperType"), //
		jMethod<::jchar()>("basicTypeChar"), //
		jMethod<::jchar(::java::lang::Class)>("basicTypeChar"), //
		jMethod<::jint()>("bitWidth"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Class)>("cast"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Class)>("convert"), //
		jMethod<::jvoid(::java::lang::Object, ::jint, ::java::lang::Object *, ::jint, ::jint)>("copyArrayBoxing"), //
		jMethod<::jvoid(::java::lang::Object *, ::jint, ::java::lang::Object, ::jint, ::jint)>("copyArrayUnboxing"), //
		jMethod<::java::lang::String()>("detailString"), //
		jMethod<::sun::invoke::util::Wrapper(::jchar)>("forBasicType"), //
		jMethod<::sun::invoke::util::Wrapper(::java::lang::Class)>("forBasicType"), //
		jMethod<::sun::invoke::util::Wrapper(::java::lang::Class)>("forPrimitiveType"), //
		jMethod<::sun::invoke::util::Wrapper(::java::lang::Class)>("forWrapperType"), //
		jMethod<::jboolean(::sun::invoke::util::Wrapper)>("isConvertibleFrom"), //
		jMethod<::jboolean()>("isDoubleWord"), //
		jMethod<::jboolean()>("isFloating"), //
		jMethod<::jboolean()>("isIntegral"), //
		jMethod<::jboolean()>("isNumeric"), //
		jMethod<::jboolean()>("isOther"), //
		jMethod<::jboolean(::java::lang::Class)>("isPrimitiveType"), //
		jMethod<::jboolean()>("isSigned"), //
		jMethod<::jboolean()>("isSingleWord"), //
		jMethod<::jboolean()>("isSubwordOrInt"), //
		jMethod<::jboolean()>("isUnsigned"), //
		jMethod<::jboolean(::java::lang::Class)>("isWrapperType"), //
		jMethod<::java::lang::Object(::jint)>("makeArray"), //
		jMethod<::java::lang::String()>("primitiveSimpleName"), //
		jMethod<::java::lang::Class()>("primitiveType"), //
		jMethod<::jint()>("stackSlots"), //
		jMethod<::sun::invoke::util::Wrapper(::java::lang::String)>("valueOf"), //
		jMethod<::sun::invoke::util::Wrapper *()>("values"), //
		jMethod<::java::lang::Object(::jint)>("wrap"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("wrap"), //
		jMethod<::java::lang::String()>("wrapperSimpleName"), //
		jMethod<::java::lang::Class()>("wrapperType"), //
		jMethod<::java::lang::Class(::java::lang::Class)>("wrapperType"), //
		jMethod<::java::lang::Object()>("zero"), //
		jMethod<::java::lang::Object(::java::lang::Class)>("zero"), //
	};

	template<typename R = ::java::lang::Class, typename... Args>
	auto arrayType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("arrayType")] != -1);
		return call<R>("arrayType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	static auto asPrimitiveType(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("asPrimitiveType")] != -1);
		return scall<R>("asPrimitiveType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	static auto asWrapperType(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("asWrapperType")] != -1);
		return scall<R>("asWrapperType", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto basicTypeChar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("basicTypeChar")] != -1);
		return call<R>("basicTypeChar", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto bitWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("bitWidth")] != -1);
		return call<R>("bitWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto cast(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cast")] != -1);
		return call<R>("cast", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto convert(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("convert")] != -1);
		return call<R>("convert", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto copyArrayBoxing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("copyArrayBoxing")] != -1);
		return call<R>("copyArrayBoxing", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto copyArrayUnboxing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("copyArrayUnboxing")] != -1);
		return call<R>("copyArrayUnboxing", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto detailString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("detailString")] != -1);
		return call<R>("detailString", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::invoke::util::Wrapper, typename... Args>
	static auto forBasicType(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("forBasicType")] != -1);
		return scall<R>("forBasicType", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::invoke::util::Wrapper, typename... Args>
	static auto forPrimitiveType(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("forPrimitiveType")] != -1);
		return scall<R>("forPrimitiveType", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::invoke::util::Wrapper, typename... Args>
	static auto forWrapperType(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("forWrapperType")] != -1);
		return scall<R>("forWrapperType", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isConvertibleFrom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isConvertibleFrom")] != -1);
		return call<R>("isConvertibleFrom", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDoubleWord(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDoubleWord")] != -1);
		return call<R>("isDoubleWord", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFloating(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFloating")] != -1);
		return call<R>("isFloating", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isIntegral(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isIntegral")] != -1);
		return call<R>("isIntegral", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isNumeric(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isNumeric")] != -1);
		return call<R>("isNumeric", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isOther(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isOther")] != -1);
		return call<R>("isOther", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isPrimitiveType(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPrimitiveType")] != -1);
		return scall<R>("isPrimitiveType", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSigned(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSigned")] != -1);
		return call<R>("isSigned", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSingleWord(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSingleWord")] != -1);
		return call<R>("isSingleWord", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSubwordOrInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSubwordOrInt")] != -1);
		return call<R>("isSubwordOrInt", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isUnsigned(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isUnsigned")] != -1);
		return call<R>("isUnsigned", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isWrapperType(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isWrapperType")] != -1);
		return scall<R>("isWrapperType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto makeArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeArray")] != -1);
		return call<R>("makeArray", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto primitiveSimpleName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("primitiveSimpleName")] != -1);
		return call<R>("primitiveSimpleName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto primitiveType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("primitiveType")] != -1);
		return call<R>("primitiveType", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto stackSlots(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stackSlots")] != -1);
		return call<R>("stackSlots", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::invoke::util::Wrapper, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::invoke::util::Wrapper *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto wrap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("wrap")] != -1);
		return call<R>("wrap", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto wrapperSimpleName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("wrapperSimpleName")] != -1);
		return call<R>("wrapperSimpleName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto wrapperType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("wrapperType")] != -1);
		return call<R>("wrapperType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto zero(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("zero")] != -1);
		return call<R>("zero", std::forward<Args>(args)...);
	}

};

#endif
