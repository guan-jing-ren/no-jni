#ifndef sun_invoke_util_BytecodeDescriptor_HPP
#define sun_invoke_util_BytecodeDescriptor_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::invoke::util::BytecodeDescriptor : public jObject<::sun::invoke::util::BytecodeDescriptor, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_invoke_util / "BytecodeDescriptor";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::util::List(::java::lang::String, ::java::lang::ClassLoader)>("parseMethod"), //
		jMethod<::java::lang::String(::java::lang::Class)>("unparse"), //
		jMethod<::java::lang::String(::java::lang::Object)>("unparse"), //
		jMethod<::java::lang::String(::java::lang::invoke::MethodType)>("unparse"), //
		jMethod<::java::lang::String(::java::lang::Class, ::java::util::List)>("unparseMethod"), //
	};

	template<typename R = ::java::util::List, typename... Args>
	static auto parseMethod(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseMethod")] != -1);
		return scall<R>("parseMethod", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto unparse(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unparse")] != -1);
		return scall<R>("unparse", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto unparseMethod(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unparseMethod")] != -1);
		return scall<R>("unparseMethod", std::forward<Args>(args)...);
	}

};

#endif
