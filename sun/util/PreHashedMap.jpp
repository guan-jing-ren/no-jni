#ifndef sun_util_PreHashedMap_HPP
#define sun_util_PreHashedMap_HPP

#include "../../jfwd_decl.hpp"

class ::sun::util::PreHashedMap : public jObject<::sun::util::PreHashedMap, ::java::util::AbstractMap> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_util / "PreHashedMap";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::util::Set()>("entrySet"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("get"), //
		jMethod<::java::util::Set()>("keySet"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Object)>("put"), //
		jMethod<::java::lang::Object(::java::lang::String, ::java::lang::Object)>("put"), //
	};

	template<typename R = ::java::util::Set, typename... Args>
	auto entrySet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("entrySet")] != -1);
		return call<R>("entrySet", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto keySet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("keySet")] != -1);
		return call<R>("keySet", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto put(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("put")] != -1);
		return call<R>("put", std::forward<Args>(args)...);
	}

};

#endif
