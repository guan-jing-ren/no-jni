#ifndef sun_util_resources_ParallelListResourceBundle_HPP
#define sun_util_resources_ParallelListResourceBundle_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::util::resources::ParallelListResourceBundle : public jObject<::sun::util::resources::ParallelListResourceBundle, ::java::util::ResourceBundle> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_util_resources / "ParallelListResourceBundle";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::String)>("containsKey"), //
		jMethod<::java::util::Enumeration()>("getKeys"), //
		jMethod<::java::util::Set()>("keySet"), //
		jMethod<::jvoid(::sun::util::resources::OpenListResourceBundle)>("setParallelContents"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto containsKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("containsKey")] != -1);
		return call<R>("containsKey", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto getKeys(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeys")] != -1);
		return call<R>("getKeys", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto keySet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("keySet")] != -1);
		return call<R>("keySet", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setParallelContents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setParallelContents")] != -1);
		return call<R>("setParallelContents", std::forward<Args>(args)...);
	}

};

#endif
