#ifndef sun_util_resources_LocaleData_HPP
#define sun_util_resources_LocaleData_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::util::resources::LocaleData : public jObject<::sun::util::resources::LocaleData, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_util_resources / "LocaleData";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::sun::util::locale::provider::LocaleProviderAdapter$Type)>(), //
		jMethod<::java::util::ResourceBundle(::java::util::Locale)>("getBreakIteratorInfo"), //
		jMethod<::java::util::ResourceBundle(::java::lang::String, ::java::util::Locale)>("getBundle"), //
		jMethod<::java::util::ResourceBundle(::java::util::Locale)>("getCalendarData"), //
		jMethod<::java::util::ResourceBundle(::java::util::Locale)>("getCollationData"), //
		jMethod<::sun::util::resources::OpenListResourceBundle(::java::util::Locale)>("getCurrencyNames"), //
		jMethod<::java::util::ResourceBundle(::java::util::Locale)>("getDateFormatData"), //
		jMethod<::sun::util::resources::OpenListResourceBundle(::java::util::Locale)>("getLocaleNames"), //
		jMethod<::java::util::ResourceBundle(::java::util::Locale)>("getNumberFormatData"), //
		jMethod<::sun::util::resources::TimeZoneNamesBundle(::java::util::Locale)>("getTimeZoneNames"), //
		jMethod<::jvoid(::sun::util::resources::ParallelListResourceBundle)>("setSupplementary"), //
	};

	template<typename R = ::java::util::ResourceBundle, typename... Args>
	auto getBreakIteratorInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBreakIteratorInfo")] != -1);
		return call<R>("getBreakIteratorInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::ResourceBundle, typename... Args>
	static auto getBundle(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBundle")] != -1);
		return scall<R>("getBundle", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::ResourceBundle, typename... Args>
	auto getCalendarData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCalendarData")] != -1);
		return call<R>("getCalendarData", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::ResourceBundle, typename... Args>
	auto getCollationData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCollationData")] != -1);
		return call<R>("getCollationData", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::resources::OpenListResourceBundle, typename... Args>
	auto getCurrencyNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCurrencyNames")] != -1);
		return call<R>("getCurrencyNames", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::ResourceBundle, typename... Args>
	auto getDateFormatData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDateFormatData")] != -1);
		return call<R>("getDateFormatData", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::resources::OpenListResourceBundle, typename... Args>
	auto getLocaleNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocaleNames")] != -1);
		return call<R>("getLocaleNames", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::ResourceBundle, typename... Args>
	auto getNumberFormatData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNumberFormatData")] != -1);
		return call<R>("getNumberFormatData", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::resources::TimeZoneNamesBundle, typename... Args>
	auto getTimeZoneNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTimeZoneNames")] != -1);
		return call<R>("getTimeZoneNames", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSupplementary(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSupplementary")] != -1);
		return call<R>("setSupplementary", std::forward<Args>(args)...);
	}

};

#endif
