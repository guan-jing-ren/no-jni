#ifndef sun_util_locale_LocaleMatcher_HPP
#define sun_util_locale_LocaleMatcher_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::util::locale::LocaleMatcher : public jObject<::sun::util::locale::LocaleMatcher, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_util_locale / "LocaleMatcher";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::util::List(::java::util::List, ::java::util::Collection, ::java::util::Locale$FilteringMode)>("filter"), //
		jMethod<::java::util::List(::java::util::List, ::java::util::Collection, ::java::util::Locale$FilteringMode)>("filterTags"), //
		jMethod<::java::util::Locale(::java::util::List, ::java::util::Collection)>("lookup"), //
		jMethod<::java::lang::String(::java::util::List, ::java::util::Collection)>("lookupTag"), //
		jMethod<::java::util::List(::java::util::List, ::java::util::Map)>("mapEquivalents"), //
		jMethod<::java::util::List(::java::lang::String)>("parse"), //
	};

	template<typename R = ::java::util::List, typename... Args>
	static auto filter(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("filter")] != -1);
		return scall<R>("filter", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	static auto filterTags(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("filterTags")] != -1);
		return scall<R>("filterTags", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale, typename... Args>
	static auto lookup(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lookup")] != -1);
		return scall<R>("lookup", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto lookupTag(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lookupTag")] != -1);
		return scall<R>("lookupTag", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	static auto mapEquivalents(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mapEquivalents")] != -1);
		return scall<R>("mapEquivalents", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	static auto parse(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parse")] != -1);
		return scall<R>("parse", std::forward<Args>(args)...);
	}

};

#endif
