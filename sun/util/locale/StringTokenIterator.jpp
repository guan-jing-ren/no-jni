#ifndef sun_util_locale_StringTokenIterator_HPP
#define sun_util_locale_StringTokenIterator_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::util::locale::StringTokenIterator : public jObject<::sun::util::locale::StringTokenIterator, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_util_locale / "StringTokenIterator";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String)>(), //
		jMethod<::java::lang::String()>("current"), //
		jMethod<::jint()>("currentEnd"), //
		jMethod<::jint()>("currentStart"), //
		jMethod<::java::lang::String()>("first"), //
		jMethod<::jboolean()>("hasNext"), //
		jMethod<::jboolean()>("isDone"), //
		jMethod<::java::lang::String()>("next"), //
		jMethod<::sun::util::locale::StringTokenIterator(::jint)>("setStart"), //
		jMethod<::sun::util::locale::StringTokenIterator(::java::lang::String)>("setText"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto current(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("current")] != -1);
		return call<R>("current", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto currentEnd(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("currentEnd")] != -1);
		return call<R>("currentEnd", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto currentStart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("currentStart")] != -1);
		return call<R>("currentStart", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto first(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("first")] != -1);
		return call<R>("first", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasNext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasNext")] != -1);
		return call<R>("hasNext", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDone")] != -1);
		return call<R>("isDone", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto next(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("next")] != -1);
		return call<R>("next", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::locale::StringTokenIterator, typename... Args>
	auto setStart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setStart")] != -1);
		return call<R>("setStart", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::locale::StringTokenIterator, typename... Args>
	auto setText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setText")] != -1);
		return call<R>("setText", std::forward<Args>(args)...);
	}

};

#endif
