#ifndef sun_util_locale_provider_CalendarNameProviderImpl_HPP
#define sun_util_locale_provider_CalendarNameProviderImpl_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::util::locale::provider::CalendarNameProviderImpl : public jObject<::sun::util::locale::provider::CalendarNameProviderImpl, ::java::util::spi::CalendarNameProvider> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_util_locale_provider / "CalendarNameProviderImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::sun::util::locale::provider::LocaleProviderAdapter$Type, ::java::util::Set)>(), //
		jMethod<::java::util::Set()>("getAvailableLanguageTags"), //
		jMethod<::java::util::Locale *()>("getAvailableLocales"), //
		jMethod<::java::lang::String(::java::lang::String, ::jint, ::jint, ::jint, ::java::util::Locale)>("getDisplayName"), //
		jMethod<::java::lang::String(::java::lang::String, ::jint, ::jint, ::jint, ::java::util::Locale, ::jboolean)>("getDisplayNameImpl"), //
		jMethod<::java::util::Map(::java::lang::String, ::jint, ::jint, ::java::util::Locale)>("getDisplayNames"), //
		jMethod<::java::lang::String(::java::lang::String, ::jint, ::jint, ::jint, ::java::util::Locale)>("getJavaTimeDisplayName"), //
		jMethod<::java::util::Map(::java::lang::String, ::jint, ::jint, ::java::util::Locale)>("getJavaTimeDisplayNames"), //
		jMethod<::jboolean(::java::util::Locale)>("isSupportedLocale"), //
	};

	template<typename R = ::java::util::Set, typename... Args>
	auto getAvailableLanguageTags(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAvailableLanguageTags")] != -1);
		return call<R>("getAvailableLanguageTags", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale *, typename... Args>
	auto getAvailableLocales(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAvailableLocales")] != -1);
		return call<R>("getAvailableLocales", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDisplayName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisplayName")] != -1);
		return call<R>("getDisplayName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDisplayNameImpl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisplayNameImpl")] != -1);
		return call<R>("getDisplayNameImpl", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getDisplayNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisplayNames")] != -1);
		return call<R>("getDisplayNames", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getJavaTimeDisplayName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJavaTimeDisplayName")] != -1);
		return call<R>("getJavaTimeDisplayName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getJavaTimeDisplayNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJavaTimeDisplayNames")] != -1);
		return call<R>("getJavaTimeDisplayNames", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSupportedLocale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSupportedLocale")] != -1);
		return call<R>("isSupportedLocale", std::forward<Args>(args)...);
	}

};

#endif
