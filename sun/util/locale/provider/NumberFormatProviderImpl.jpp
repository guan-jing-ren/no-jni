#ifndef sun_util_locale_provider_NumberFormatProviderImpl_HPP
#define sun_util_locale_provider_NumberFormatProviderImpl_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::util::locale::provider::NumberFormatProviderImpl : public jObject<::sun::util::locale::provider::NumberFormatProviderImpl, ::java::text::spi::NumberFormatProvider> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_util_locale_provider / "NumberFormatProviderImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::sun::util::locale::provider::LocaleProviderAdapter$Type, ::java::util::Set)>(), //
		jMethod<::java::util::Set()>("getAvailableLanguageTags"), //
		jMethod<::java::util::Locale *()>("getAvailableLocales"), //
		jMethod<::java::text::NumberFormat(::java::util::Locale)>("getCurrencyInstance"), //
		jMethod<::java::text::NumberFormat(::java::util::Locale)>("getIntegerInstance"), //
		jMethod<::java::text::NumberFormat(::java::util::Locale)>("getNumberInstance"), //
		jMethod<::java::text::NumberFormat(::java::util::Locale)>("getPercentInstance"), //
		jMethod<::jboolean(::java::util::Locale)>("isSupportedLocale"), //
	};

	template<typename R = ::java::util::Set, typename... Args>
	auto getAvailableLanguageTags(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAvailableLanguageTags")] != -1);
		return call<R>("getAvailableLanguageTags", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale *, typename... Args>
	auto getAvailableLocales(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAvailableLocales")] != -1);
		return call<R>("getAvailableLocales", std::forward<Args>(args)...);
	}

	template<typename R = ::java::text::NumberFormat, typename... Args>
	auto getCurrencyInstance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCurrencyInstance")] != -1);
		return call<R>("getCurrencyInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::java::text::NumberFormat, typename... Args>
	auto getIntegerInstance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIntegerInstance")] != -1);
		return call<R>("getIntegerInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::java::text::NumberFormat, typename... Args>
	auto getNumberInstance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNumberInstance")] != -1);
		return call<R>("getNumberInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::java::text::NumberFormat, typename... Args>
	auto getPercentInstance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPercentInstance")] != -1);
		return call<R>("getPercentInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSupportedLocale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSupportedLocale")] != -1);
		return call<R>("isSupportedLocale", std::forward<Args>(args)...);
	}

};

#endif
