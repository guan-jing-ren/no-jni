#ifndef sun_util_locale_provider_AuxLocaleProviderAdapter_HPP
#define sun_util_locale_provider_AuxLocaleProviderAdapter_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::util::locale::provider::AuxLocaleProviderAdapter : public jObject<::sun::util::locale::provider::AuxLocaleProviderAdapter, ::sun::util::locale::provider::LocaleProviderAdapter> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_util_locale_provider / "AuxLocaleProviderAdapter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::util::Locale *()>("getAvailableLocales"), //
		jMethod<::java::text::spi::BreakIteratorProvider()>("getBreakIteratorProvider"), //
		jMethod<::java::util::spi::CalendarDataProvider()>("getCalendarDataProvider"), //
		jMethod<::java::util::spi::CalendarNameProvider()>("getCalendarNameProvider"), //
		jMethod<::sun::util::spi::CalendarProvider()>("getCalendarProvider"), //
		jMethod<::java::text::spi::CollatorProvider()>("getCollatorProvider"), //
		jMethod<::java::util::spi::CurrencyNameProvider()>("getCurrencyNameProvider"), //
		jMethod<::java::text::spi::DateFormatProvider()>("getDateFormatProvider"), //
		jMethod<::java::text::spi::DateFormatSymbolsProvider()>("getDateFormatSymbolsProvider"), //
		jMethod<::java::text::spi::DecimalFormatSymbolsProvider()>("getDecimalFormatSymbolsProvider"), //
		jMethod<::java::util::spi::LocaleNameProvider()>("getLocaleNameProvider"), //
		jMethod<::sun::util::locale::provider::LocaleResources(::java::util::Locale)>("getLocaleResources"), //
		jMethod<::java::util::spi::LocaleServiceProvider(::java::lang::Class)>("getLocaleServiceProvider"), //
		jMethod<::java::text::spi::NumberFormatProvider()>("getNumberFormatProvider"), //
		jMethod<::java::util::spi::TimeZoneNameProvider()>("getTimeZoneNameProvider"), //
	};

	template<typename R = ::java::util::Locale *, typename... Args>
	auto getAvailableLocales(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAvailableLocales")] != -1);
		return call<R>("getAvailableLocales", std::forward<Args>(args)...);
	}

	template<typename R = ::java::text::spi::BreakIteratorProvider, typename... Args>
	auto getBreakIteratorProvider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBreakIteratorProvider")] != -1);
		return call<R>("getBreakIteratorProvider", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::spi::CalendarDataProvider, typename... Args>
	auto getCalendarDataProvider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCalendarDataProvider")] != -1);
		return call<R>("getCalendarDataProvider", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::spi::CalendarNameProvider, typename... Args>
	auto getCalendarNameProvider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCalendarNameProvider")] != -1);
		return call<R>("getCalendarNameProvider", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::spi::CalendarProvider, typename... Args>
	auto getCalendarProvider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCalendarProvider")] != -1);
		return call<R>("getCalendarProvider", std::forward<Args>(args)...);
	}

	template<typename R = ::java::text::spi::CollatorProvider, typename... Args>
	auto getCollatorProvider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCollatorProvider")] != -1);
		return call<R>("getCollatorProvider", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::spi::CurrencyNameProvider, typename... Args>
	auto getCurrencyNameProvider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCurrencyNameProvider")] != -1);
		return call<R>("getCurrencyNameProvider", std::forward<Args>(args)...);
	}

	template<typename R = ::java::text::spi::DateFormatProvider, typename... Args>
	auto getDateFormatProvider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDateFormatProvider")] != -1);
		return call<R>("getDateFormatProvider", std::forward<Args>(args)...);
	}

	template<typename R = ::java::text::spi::DateFormatSymbolsProvider, typename... Args>
	auto getDateFormatSymbolsProvider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDateFormatSymbolsProvider")] != -1);
		return call<R>("getDateFormatSymbolsProvider", std::forward<Args>(args)...);
	}

	template<typename R = ::java::text::spi::DecimalFormatSymbolsProvider, typename... Args>
	auto getDecimalFormatSymbolsProvider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDecimalFormatSymbolsProvider")] != -1);
		return call<R>("getDecimalFormatSymbolsProvider", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::spi::LocaleNameProvider, typename... Args>
	auto getLocaleNameProvider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocaleNameProvider")] != -1);
		return call<R>("getLocaleNameProvider", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::locale::provider::LocaleResources, typename... Args>
	auto getLocaleResources(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocaleResources")] != -1);
		return call<R>("getLocaleResources", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::spi::LocaleServiceProvider, typename... Args>
	auto getLocaleServiceProvider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocaleServiceProvider")] != -1);
		return call<R>("getLocaleServiceProvider", std::forward<Args>(args)...);
	}

	template<typename R = ::java::text::spi::NumberFormatProvider, typename... Args>
	auto getNumberFormatProvider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNumberFormatProvider")] != -1);
		return call<R>("getNumberFormatProvider", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::spi::TimeZoneNameProvider, typename... Args>
	auto getTimeZoneNameProvider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTimeZoneNameProvider")] != -1);
		return call<R>("getTimeZoneNameProvider", std::forward<Args>(args)...);
	}

};

#endif
