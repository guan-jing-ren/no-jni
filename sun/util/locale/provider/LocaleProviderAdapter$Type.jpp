#ifndef sun_util_locale_provider_LocaleProviderAdapter$Type_HPP
#define sun_util_locale_provider_LocaleProviderAdapter$Type_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::util::locale::provider::LocaleProviderAdapter$Type : public jObject<::sun::util::locale::provider::LocaleProviderAdapter$Type, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_util_locale_provider / "LocaleProviderAdapter$Type";

	constexpr static Enume field_signatures{
		jField<::sun::util::locale::provider::LocaleProviderAdapter$Type>("CLDR"), //
		jField<::sun::util::locale::provider::LocaleProviderAdapter$Type>("FALLBACK"), //
		jField<::sun::util::locale::provider::LocaleProviderAdapter$Type>("HOST"), //
		jField<::sun::util::locale::provider::LocaleProviderAdapter$Type>("JRE"), //
		jField<::sun::util::locale::provider::LocaleProviderAdapter$Type>("SPI"), //
	};

	template<typename F = ::sun::util::locale::provider::LocaleProviderAdapter$Type>
	static auto CLDR() {
		static_assert(field_signatures[jField<F>("CLDR")] != -1);
		return sat<F>("CLDR");
	}

	template<typename F = ::sun::util::locale::provider::LocaleProviderAdapter$Type>
	static auto FALLBACK() {
		static_assert(field_signatures[jField<F>("FALLBACK")] != -1);
		return sat<F>("FALLBACK");
	}

	template<typename F = ::sun::util::locale::provider::LocaleProviderAdapter$Type>
	static auto HOST() {
		static_assert(field_signatures[jField<F>("HOST")] != -1);
		return sat<F>("HOST");
	}

	template<typename F = ::sun::util::locale::provider::LocaleProviderAdapter$Type>
	static auto JRE() {
		static_assert(field_signatures[jField<F>("JRE")] != -1);
		return sat<F>("JRE");
	}

	template<typename F = ::sun::util::locale::provider::LocaleProviderAdapter$Type>
	static auto SPI() {
		static_assert(field_signatures[jField<F>("SPI")] != -1);
		return sat<F>("SPI");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getTextResourcesPackage"), //
		jMethod<::java::lang::String()>("getUtilResourcesPackage"), //
		jMethod<::sun::util::locale::provider::LocaleProviderAdapter$Type(::java::lang::String)>("valueOf"), //
		jMethod<::sun::util::locale::provider::LocaleProviderAdapter$Type *()>("values"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getTextResourcesPackage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextResourcesPackage")] != -1);
		return call<R>("getTextResourcesPackage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUtilResourcesPackage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUtilResourcesPackage")] != -1);
		return call<R>("getUtilResourcesPackage", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::locale::provider::LocaleProviderAdapter$Type, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::locale::provider::LocaleProviderAdapter$Type *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
