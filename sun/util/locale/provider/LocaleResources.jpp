#ifndef sun_util_locale_provider_LocaleResources_HPP
#define sun_util_locale_provider_LocaleResources_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::util::locale::provider::LocaleResources : public jObject<::sun::util::locale::provider::LocaleResources, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_util_locale_provider / "LocaleResources";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getCollationData"), //
		jMethod<::java::lang::String(::java::lang::String)>("getCurrencyName"), //
		jMethod<::java::lang::String(::jint, ::jint, ::java::util::Calendar)>("getDateTimePattern"), //
		jMethod<::java::lang::Object *()>("getDecimalFormatSymbolsData"), //
		jMethod<::java::lang::String(::jint, ::jint, ::java::lang::String)>("getJavaTimeDateTimePattern"), //
		jMethod<::java::util::ResourceBundle()>("getJavaTimeFormatData"), //
		jMethod<::java::lang::String(::java::lang::String)>("getLocaleName"), //
		jMethod<::java::lang::String *()>("getNumberPatterns"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getCollationData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCollationData")] != -1);
		return call<R>("getCollationData", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCurrencyName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCurrencyName")] != -1);
		return call<R>("getCurrencyName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDateTimePattern(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDateTimePattern")] != -1);
		return call<R>("getDateTimePattern", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object *, typename... Args>
	auto getDecimalFormatSymbolsData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDecimalFormatSymbolsData")] != -1);
		return call<R>("getDecimalFormatSymbolsData", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getJavaTimeDateTimePattern(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJavaTimeDateTimePattern")] != -1);
		return call<R>("getJavaTimeDateTimePattern", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::ResourceBundle, typename... Args>
	auto getJavaTimeFormatData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJavaTimeFormatData")] != -1);
		return call<R>("getJavaTimeFormatData", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLocaleName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocaleName")] != -1);
		return call<R>("getLocaleName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getNumberPatterns(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNumberPatterns")] != -1);
		return call<R>("getNumberPatterns", std::forward<Args>(args)...);
	}

};

#endif
