#ifndef sun_util_locale_provider_LocaleServiceProviderPool_HPP
#define sun_util_locale_provider_LocaleServiceProviderPool_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::util::locale::provider::LocaleServiceProviderPool : public jObject<::sun::util::locale::provider::LocaleServiceProviderPool, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_util_locale_provider / "LocaleServiceProviderPool";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::util::Locale *()>("getAllAvailableLocales"), //
		jMethod<::java::util::Locale *()>("getAvailableLocales"), //
		jMethod<::java::lang::Object(::sun::util::locale::provider::LocaleServiceProviderPool$LocalizedObjectGetter, ::java::util::Locale, ::java::lang::String, ::java::lang::Object *)>("getLocalizedObject"), //
		jMethod<::java::lang::Object(::sun::util::locale::provider::LocaleServiceProviderPool$LocalizedObjectGetter, ::java::util::Locale, ::java::lang::Object *)>("getLocalizedObject"), //
		jMethod<::sun::util::locale::provider::LocaleServiceProviderPool(::java::lang::Class)>("getPool"), //
	};

	template<typename R = ::java::util::Locale *, typename... Args>
	static auto getAllAvailableLocales(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAllAvailableLocales")] != -1);
		return scall<R>("getAllAvailableLocales", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale *, typename... Args>
	auto getAvailableLocales(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAvailableLocales")] != -1);
		return call<R>("getAvailableLocales", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getLocalizedObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalizedObject")] != -1);
		return call<R>("getLocalizedObject", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::locale::provider::LocaleServiceProviderPool, typename... Args>
	static auto getPool(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPool")] != -1);
		return scall<R>("getPool", std::forward<Args>(args)...);
	}

};

#endif
