#ifndef sun_util_locale_provider_BreakIteratorProviderImpl_HPP
#define sun_util_locale_provider_BreakIteratorProviderImpl_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::util::locale::provider::BreakIteratorProviderImpl : public jObject<::sun::util::locale::provider::BreakIteratorProviderImpl, ::java::text::spi::BreakIteratorProvider> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_util_locale_provider / "BreakIteratorProviderImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::sun::util::locale::provider::LocaleProviderAdapter$Type, ::java::util::Set)>(), //
		jMethod<::java::util::Set()>("getAvailableLanguageTags"), //
		jMethod<::java::util::Locale *()>("getAvailableLocales"), //
		jMethod<::java::text::BreakIterator(::java::util::Locale)>("getCharacterInstance"), //
		jMethod<::java::text::BreakIterator(::java::util::Locale)>("getLineInstance"), //
		jMethod<::java::text::BreakIterator(::java::util::Locale)>("getSentenceInstance"), //
		jMethod<::java::text::BreakIterator(::java::util::Locale)>("getWordInstance"), //
		jMethod<::jboolean(::java::util::Locale)>("isSupportedLocale"), //
	};

	template<typename R = ::java::util::Set, typename... Args>
	auto getAvailableLanguageTags(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAvailableLanguageTags")] != -1);
		return call<R>("getAvailableLanguageTags", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale *, typename... Args>
	auto getAvailableLocales(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAvailableLocales")] != -1);
		return call<R>("getAvailableLocales", std::forward<Args>(args)...);
	}

	template<typename R = ::java::text::BreakIterator, typename... Args>
	auto getCharacterInstance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCharacterInstance")] != -1);
		return call<R>("getCharacterInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::java::text::BreakIterator, typename... Args>
	auto getLineInstance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineInstance")] != -1);
		return call<R>("getLineInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::java::text::BreakIterator, typename... Args>
	auto getSentenceInstance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSentenceInstance")] != -1);
		return call<R>("getSentenceInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::java::text::BreakIterator, typename... Args>
	auto getWordInstance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWordInstance")] != -1);
		return call<R>("getWordInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSupportedLocale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSupportedLocale")] != -1);
		return call<R>("isSupportedLocale", std::forward<Args>(args)...);
	}

};

#endif
