#ifndef sun_util_locale_LocaleExtensions_HPP
#define sun_util_locale_LocaleExtensions_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::util::locale::LocaleExtensions : public jObject<::sun::util::locale::LocaleExtensions, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_util_locale / "LocaleExtensions";

	constexpr static Enume field_signatures{
		jField<::sun::util::locale::LocaleExtensions>("CALENDAR_JAPANESE"), //
		jField<::sun::util::locale::LocaleExtensions>("NUMBER_THAI"), //
	};

	template<typename F = ::sun::util::locale::LocaleExtensions>
	static auto CALENDAR_JAPANESE() {
		static_assert(field_signatures[jField<F>("CALENDAR_JAPANESE")] != -1);
		return sat<F>("CALENDAR_JAPANESE");
	}

	template<typename F = ::sun::util::locale::LocaleExtensions>
	static auto NUMBER_THAI() {
		static_assert(field_signatures[jField<F>("NUMBER_THAI")] != -1);
		return sat<F>("NUMBER_THAI");
	}

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::sun::util::locale::Extension(::java::lang::Character)>("getExtension"), //
		jMethod<::java::lang::String(::java::lang::Character)>("getExtensionValue"), //
		jMethod<::java::lang::String()>("getID"), //
		jMethod<::java::util::Set()>("getKeys"), //
		jMethod<::java::util::Set()>("getUnicodeLocaleAttributes"), //
		jMethod<::java::util::Set()>("getUnicodeLocaleKeys"), //
		jMethod<::java::lang::String(::java::lang::String)>("getUnicodeLocaleType"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isEmpty"), //
		jMethod<::jboolean(::jchar)>("isValidKey"), //
		jMethod<::jboolean(::java::lang::String)>("isValidUnicodeLocaleKey"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::locale::Extension, typename... Args>
	auto getExtension(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExtension")] != -1);
		return call<R>("getExtension", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getExtensionValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExtensionValue")] != -1);
		return call<R>("getExtensionValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getID")] != -1);
		return call<R>("getID", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto getKeys(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeys")] != -1);
		return call<R>("getKeys", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto getUnicodeLocaleAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUnicodeLocaleAttributes")] != -1);
		return call<R>("getUnicodeLocaleAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto getUnicodeLocaleKeys(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUnicodeLocaleKeys")] != -1);
		return call<R>("getUnicodeLocaleKeys", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUnicodeLocaleType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUnicodeLocaleType")] != -1);
		return call<R>("getUnicodeLocaleType", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEmpty")] != -1);
		return call<R>("isEmpty", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isValidKey(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isValidKey")] != -1);
		return scall<R>("isValidKey", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isValidUnicodeLocaleKey(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isValidUnicodeLocaleKey")] != -1);
		return scall<R>("isValidUnicodeLocaleKey", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
