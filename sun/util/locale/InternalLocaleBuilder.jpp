#ifndef sun_util_locale_InternalLocaleBuilder_HPP
#define sun_util_locale_InternalLocaleBuilder_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::util::locale::InternalLocaleBuilder : public jObject<::sun::util::locale::InternalLocaleBuilder, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_util_locale / "InternalLocaleBuilder";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::sun::util::locale::InternalLocaleBuilder(::java::lang::String)>("addUnicodeLocaleAttribute"), //
		jMethod<::sun::util::locale::InternalLocaleBuilder()>("clear"), //
		jMethod<::sun::util::locale::InternalLocaleBuilder()>("clearExtensions"), //
		jMethod<::sun::util::locale::BaseLocale()>("getBaseLocale"), //
		jMethod<::sun::util::locale::LocaleExtensions()>("getLocaleExtensions"), //
		jMethod<::sun::util::locale::InternalLocaleBuilder(::java::lang::String)>("removeUnicodeLocaleAttribute"), //
		jMethod<::sun::util::locale::InternalLocaleBuilder(::jchar, ::java::lang::String)>("setExtension"), //
		jMethod<::sun::util::locale::InternalLocaleBuilder(::java::lang::String)>("setExtensions"), //
		jMethod<::sun::util::locale::InternalLocaleBuilder(::java::lang::String)>("setLanguage"), //
		jMethod<::sun::util::locale::InternalLocaleBuilder(::sun::util::locale::LanguageTag)>("setLanguageTag"), //
		jMethod<::sun::util::locale::InternalLocaleBuilder(::sun::util::locale::BaseLocale, ::sun::util::locale::LocaleExtensions)>("setLocale"), //
		jMethod<::sun::util::locale::InternalLocaleBuilder(::java::lang::String)>("setRegion"), //
		jMethod<::sun::util::locale::InternalLocaleBuilder(::java::lang::String)>("setScript"), //
		jMethod<::sun::util::locale::InternalLocaleBuilder(::java::lang::String, ::java::lang::String)>("setUnicodeLocaleKeyword"), //
		jMethod<::sun::util::locale::InternalLocaleBuilder(::java::lang::String)>("setVariant"), //
	};

	template<typename R = ::sun::util::locale::InternalLocaleBuilder, typename... Args>
	auto addUnicodeLocaleAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addUnicodeLocaleAttribute")] != -1);
		return call<R>("addUnicodeLocaleAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::locale::InternalLocaleBuilder, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::locale::InternalLocaleBuilder, typename... Args>
	auto clearExtensions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clearExtensions")] != -1);
		return call<R>("clearExtensions", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::locale::BaseLocale, typename... Args>
	auto getBaseLocale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBaseLocale")] != -1);
		return call<R>("getBaseLocale", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::locale::LocaleExtensions, typename... Args>
	auto getLocaleExtensions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocaleExtensions")] != -1);
		return call<R>("getLocaleExtensions", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::locale::InternalLocaleBuilder, typename... Args>
	auto removeUnicodeLocaleAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeUnicodeLocaleAttribute")] != -1);
		return call<R>("removeUnicodeLocaleAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::locale::InternalLocaleBuilder, typename... Args>
	auto setExtension(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setExtension")] != -1);
		return call<R>("setExtension", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::locale::InternalLocaleBuilder, typename... Args>
	auto setExtensions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setExtensions")] != -1);
		return call<R>("setExtensions", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::locale::InternalLocaleBuilder, typename... Args>
	auto setLanguage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLanguage")] != -1);
		return call<R>("setLanguage", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::locale::InternalLocaleBuilder, typename... Args>
	auto setLanguageTag(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLanguageTag")] != -1);
		return call<R>("setLanguageTag", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::locale::InternalLocaleBuilder, typename... Args>
	auto setLocale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLocale")] != -1);
		return call<R>("setLocale", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::locale::InternalLocaleBuilder, typename... Args>
	auto setRegion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRegion")] != -1);
		return call<R>("setRegion", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::locale::InternalLocaleBuilder, typename... Args>
	auto setScript(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setScript")] != -1);
		return call<R>("setScript", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::locale::InternalLocaleBuilder, typename... Args>
	auto setUnicodeLocaleKeyword(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUnicodeLocaleKeyword")] != -1);
		return call<R>("setUnicodeLocaleKeyword", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::locale::InternalLocaleBuilder, typename... Args>
	auto setVariant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVariant")] != -1);
		return call<R>("setVariant", std::forward<Args>(args)...);
	}

};

#endif
