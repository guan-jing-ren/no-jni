#ifndef sun_util_locale_LanguageTag_HPP
#define sun_util_locale_LanguageTag_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::util::locale::LanguageTag : public jObject<::sun::util::locale::LanguageTag, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_util_locale / "LanguageTag";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("PRIVATEUSE"), //
		jField<::java::lang::String>("PRIVUSE_VARIANT_PREFIX"), //
		jField<::java::lang::String>("SEP"), //
		jField<::java::lang::String>("UNDETERMINED"), //
	};

	template<typename F = ::java::lang::String>
	static auto PRIVATEUSE() {
		static_assert(field_signatures[jField<F>("PRIVATEUSE")] != -1);
		return sat<F>("PRIVATEUSE");
	}

	template<typename F = ::java::lang::String>
	static auto PRIVUSE_VARIANT_PREFIX() {
		static_assert(field_signatures[jField<F>("PRIVUSE_VARIANT_PREFIX")] != -1);
		return sat<F>("PRIVUSE_VARIANT_PREFIX");
	}

	template<typename F = ::java::lang::String>
	static auto SEP() {
		static_assert(field_signatures[jField<F>("SEP")] != -1);
		return sat<F>("SEP");
	}

	template<typename F = ::java::lang::String>
	static auto UNDETERMINED() {
		static_assert(field_signatures[jField<F>("UNDETERMINED")] != -1);
		return sat<F>("UNDETERMINED");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String(::java::lang::String)>("canonicalizeExtension"), //
		jMethod<::java::lang::String(::java::lang::String)>("canonicalizeExtensionSingleton"), //
		jMethod<::java::lang::String(::java::lang::String)>("canonicalizeExtensionSubtag"), //
		jMethod<::java::lang::String(::java::lang::String)>("canonicalizeExtlang"), //
		jMethod<::java::lang::String(::java::lang::String)>("canonicalizeLanguage"), //
		jMethod<::java::lang::String(::java::lang::String)>("canonicalizePrivateuse"), //
		jMethod<::java::lang::String(::java::lang::String)>("canonicalizePrivateuseSubtag"), //
		jMethod<::java::lang::String(::java::lang::String)>("canonicalizeRegion"), //
		jMethod<::java::lang::String(::java::lang::String)>("canonicalizeScript"), //
		jMethod<::java::lang::String(::java::lang::String)>("canonicalizeVariant"), //
		jMethod<::java::util::List()>("getExtensions"), //
		jMethod<::java::util::List()>("getExtlangs"), //
		jMethod<::java::lang::String()>("getLanguage"), //
		jMethod<::java::lang::String()>("getPrivateuse"), //
		jMethod<::java::lang::String()>("getRegion"), //
		jMethod<::java::lang::String()>("getScript"), //
		jMethod<::java::util::List()>("getVariants"), //
		jMethod<::jboolean(::java::lang::String)>("isExtensionSingleton"), //
		jMethod<::jboolean(::jchar)>("isExtensionSingletonChar"), //
		jMethod<::jboolean(::java::lang::String)>("isExtensionSubtag"), //
		jMethod<::jboolean(::java::lang::String)>("isExtlang"), //
		jMethod<::jboolean(::java::lang::String)>("isLanguage"), //
		jMethod<::jboolean(::java::lang::String)>("isPrivateusePrefix"), //
		jMethod<::jboolean(::jchar)>("isPrivateusePrefixChar"), //
		jMethod<::jboolean(::java::lang::String)>("isPrivateuseSubtag"), //
		jMethod<::jboolean(::java::lang::String)>("isRegion"), //
		jMethod<::jboolean(::java::lang::String)>("isScript"), //
		jMethod<::jboolean(::java::lang::String)>("isVariant"), //
		jMethod<::sun::util::locale::LanguageTag(::java::lang::String, ::sun::util::locale::ParseStatus)>("parse"), //
		jMethod<::sun::util::locale::LanguageTag(::sun::util::locale::BaseLocale, ::sun::util::locale::LocaleExtensions)>("parseLocale"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	static auto canonicalizeExtension(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canonicalizeExtension")] != -1);
		return scall<R>("canonicalizeExtension", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto canonicalizeExtensionSingleton(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canonicalizeExtensionSingleton")] != -1);
		return scall<R>("canonicalizeExtensionSingleton", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto canonicalizeExtensionSubtag(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canonicalizeExtensionSubtag")] != -1);
		return scall<R>("canonicalizeExtensionSubtag", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto canonicalizeExtlang(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canonicalizeExtlang")] != -1);
		return scall<R>("canonicalizeExtlang", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto canonicalizeLanguage(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canonicalizeLanguage")] != -1);
		return scall<R>("canonicalizeLanguage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto canonicalizePrivateuse(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canonicalizePrivateuse")] != -1);
		return scall<R>("canonicalizePrivateuse", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto canonicalizePrivateuseSubtag(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canonicalizePrivateuseSubtag")] != -1);
		return scall<R>("canonicalizePrivateuseSubtag", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto canonicalizeRegion(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canonicalizeRegion")] != -1);
		return scall<R>("canonicalizeRegion", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto canonicalizeScript(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canonicalizeScript")] != -1);
		return scall<R>("canonicalizeScript", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto canonicalizeVariant(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canonicalizeVariant")] != -1);
		return scall<R>("canonicalizeVariant", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getExtensions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExtensions")] != -1);
		return call<R>("getExtensions", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getExtlangs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExtlangs")] != -1);
		return call<R>("getExtlangs", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLanguage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLanguage")] != -1);
		return call<R>("getLanguage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPrivateuse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrivateuse")] != -1);
		return call<R>("getPrivateuse", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRegion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRegion")] != -1);
		return call<R>("getRegion", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getScript(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScript")] != -1);
		return call<R>("getScript", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getVariants(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVariants")] != -1);
		return call<R>("getVariants", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isExtensionSingleton(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isExtensionSingleton")] != -1);
		return scall<R>("isExtensionSingleton", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isExtensionSingletonChar(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isExtensionSingletonChar")] != -1);
		return scall<R>("isExtensionSingletonChar", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isExtensionSubtag(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isExtensionSubtag")] != -1);
		return scall<R>("isExtensionSubtag", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isExtlang(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isExtlang")] != -1);
		return scall<R>("isExtlang", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isLanguage(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLanguage")] != -1);
		return scall<R>("isLanguage", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isPrivateusePrefix(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPrivateusePrefix")] != -1);
		return scall<R>("isPrivateusePrefix", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isPrivateusePrefixChar(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPrivateusePrefixChar")] != -1);
		return scall<R>("isPrivateusePrefixChar", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isPrivateuseSubtag(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPrivateuseSubtag")] != -1);
		return scall<R>("isPrivateuseSubtag", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isRegion(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isRegion")] != -1);
		return scall<R>("isRegion", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isScript(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isScript")] != -1);
		return scall<R>("isScript", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isVariant(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isVariant")] != -1);
		return scall<R>("isVariant", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::locale::LanguageTag, typename... Args>
	static auto parse(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parse")] != -1);
		return scall<R>("parse", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::locale::LanguageTag, typename... Args>
	static auto parseLocale(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseLocale")] != -1);
		return scall<R>("parseLocale", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
