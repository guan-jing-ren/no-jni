#ifndef sun_util_locale_ParseStatus_HPP
#define sun_util_locale_ParseStatus_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::util::locale::ParseStatus : public jObject<::sun::util::locale::ParseStatus, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_util_locale / "ParseStatus";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jint()>("getErrorIndex"), //
		jMethod<::java::lang::String()>("getErrorMessage"), //
		jMethod<::jint()>("getParseLength"), //
		jMethod<::jboolean()>("isError"), //
		jMethod<::jvoid()>("reset"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getErrorIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getErrorIndex")] != -1);
		return call<R>("getErrorIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getErrorMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getErrorMessage")] != -1);
		return call<R>("getErrorMessage", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getParseLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParseLength")] != -1);
		return call<R>("getParseLength", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isError(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isError")] != -1);
		return call<R>("isError", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", std::forward<Args>(args)...);
	}

};

#endif
