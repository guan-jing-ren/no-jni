#ifndef sun_util_BuddhistCalendar_HPP
#define sun_util_BuddhistCalendar_HPP

#include "../../jfwd_decl.hpp"

class ::sun::util::BuddhistCalendar : public jObject<::sun::util::BuddhistCalendar, ::java::util::GregorianCalendar> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_util / "BuddhistCalendar";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::util::Locale)>(), //
		jConstructor<::jvoid(::java::util::TimeZone)>(), //
		jConstructor<::jvoid(::java::util::TimeZone, ::java::util::Locale)>(), //
		jMethod<::jvoid(::jint, ::jint)>("add"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint(::jint)>("get"), //
		jMethod<::jint(::jint)>("getActualMaximum"), //
		jMethod<::java::lang::String()>("getCalendarType"), //
		jMethod<::java::lang::String(::jint, ::jint, ::java::util::Locale)>("getDisplayName"), //
		jMethod<::java::util::Map(::jint, ::jint, ::java::util::Locale)>("getDisplayNames"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jvoid(::jint, ::jint)>("roll"), //
		jMethod<::jvoid(::jint, ::jint)>("set"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getActualMaximum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getActualMaximum")] != -1);
		return call<R>("getActualMaximum", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCalendarType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCalendarType")] != -1);
		return call<R>("getCalendarType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDisplayName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisplayName")] != -1);
		return call<R>("getDisplayName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getDisplayNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisplayNames")] != -1);
		return call<R>("getDisplayNames", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto roll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("roll")] != -1);
		return call<R>("roll", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set")] != -1);
		return call<R>("set", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
