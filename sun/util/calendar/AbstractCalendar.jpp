#ifndef sun_util_calendar_AbstractCalendar_HPP
#define sun_util_calendar_AbstractCalendar_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::util::calendar::AbstractCalendar : public jObject<::sun::util::calendar::AbstractCalendar, ::sun::util::calendar::CalendarSystem> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_util_calendar / "AbstractCalendar";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::sun::util::calendar::CalendarDate()>("getCalendarDate"), //
		jMethod<::sun::util::calendar::CalendarDate(::jlong)>("getCalendarDate"), //
		jMethod<::sun::util::calendar::CalendarDate(::jlong, ::java::util::TimeZone)>("getCalendarDate"), //
		jMethod<::sun::util::calendar::CalendarDate(::jlong, ::sun::util::calendar::CalendarDate)>("getCalendarDate"), //
		jMethod<::jlong(::jlong, ::jint)>("getDayOfWeekDateOnOrBefore"), //
		jMethod<::sun::util::calendar::Era(::java::lang::String)>("getEra"), //
		jMethod<::sun::util::calendar::Era *()>("getEras"), //
		jMethod<::sun::util::calendar::CalendarDate(::jint, ::jint, ::sun::util::calendar::CalendarDate)>("getNthDayOfWeek"), //
		jMethod<::jlong(::sun::util::calendar::CalendarDate)>("getTime"), //
		jMethod<::jlong(::sun::util::calendar::CalendarDate)>("getTimeOfDayValue"), //
		jMethod<::jint()>("getWeekLength"), //
		jMethod<::jvoid(::sun::util::calendar::CalendarDate, ::java::lang::String)>("setEra"), //
		jMethod<::sun::util::calendar::CalendarDate(::sun::util::calendar::CalendarDate, ::jint)>("setTimeOfDay"), //
		jMethod<::jboolean(::sun::util::calendar::CalendarDate)>("validateTime"), //
	};

	template<typename R = ::sun::util::calendar::CalendarDate, typename... Args>
	auto getCalendarDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCalendarDate")] != -1);
		return call<R>("getCalendarDate", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	static auto getDayOfWeekDateOnOrBefore(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDayOfWeekDateOnOrBefore")] != -1);
		return scall<R>("getDayOfWeekDateOnOrBefore", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::calendar::Era, typename... Args>
	auto getEra(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEra")] != -1);
		return call<R>("getEra", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::calendar::Era *, typename... Args>
	auto getEras(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEras")] != -1);
		return call<R>("getEras", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::calendar::CalendarDate, typename... Args>
	auto getNthDayOfWeek(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNthDayOfWeek")] != -1);
		return call<R>("getNthDayOfWeek", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTime")] != -1);
		return call<R>("getTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getTimeOfDayValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTimeOfDayValue")] != -1);
		return call<R>("getTimeOfDayValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWeekLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWeekLength")] != -1);
		return call<R>("getWeekLength", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEra(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEra")] != -1);
		return call<R>("setEra", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::calendar::CalendarDate, typename... Args>
	auto setTimeOfDay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTimeOfDay")] != -1);
		return call<R>("setTimeOfDay", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto validateTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("validateTime")] != -1);
		return call<R>("validateTime", std::forward<Args>(args)...);
	}

};

#endif
