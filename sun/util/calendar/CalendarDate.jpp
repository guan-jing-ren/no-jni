#ifndef sun_util_calendar_CalendarDate_HPP
#define sun_util_calendar_CalendarDate_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::util::calendar::CalendarDate : public jObject<::sun::util::calendar::CalendarDate, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_util_calendar / "CalendarDate";

	constexpr static Enume field_signatures{
		jField<::jint>("FIELD_UNDEFINED"), //
		jField<::jlong>("TIME_UNDEFINED"), //
	};

	template<typename F = ::jint>
	static auto FIELD_UNDEFINED() {
		static_assert(field_signatures[jField<F>("FIELD_UNDEFINED")] != -1);
		return sat<F>("FIELD_UNDEFINED");
	}

	template<typename F = ::jlong>
	static auto TIME_UNDEFINED() {
		static_assert(field_signatures[jField<F>("TIME_UNDEFINED")] != -1);
		return sat<F>("TIME_UNDEFINED");
	}

	constexpr static Enume method_signatures{
		jMethod<::sun::util::calendar::CalendarDate(::jint, ::jint, ::jint)>("addDate"), //
		jMethod<::sun::util::calendar::CalendarDate(::jint)>("addDayOfMonth"), //
		jMethod<::sun::util::calendar::CalendarDate(::jint)>("addHours"), //
		jMethod<::sun::util::calendar::CalendarDate(::jint)>("addMillis"), //
		jMethod<::sun::util::calendar::CalendarDate(::jint)>("addMinutes"), //
		jMethod<::sun::util::calendar::CalendarDate(::jint)>("addMonth"), //
		jMethod<::sun::util::calendar::CalendarDate(::jint)>("addSeconds"), //
		jMethod<::sun::util::calendar::CalendarDate(::jint, ::jint, ::jint, ::jint)>("addTimeOfDay"), //
		jMethod<::sun::util::calendar::CalendarDate(::jint)>("addYear"), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint()>("getDayOfMonth"), //
		jMethod<::jint()>("getDayOfWeek"), //
		jMethod<::jint()>("getDaylightSaving"), //
		jMethod<::sun::util::calendar::Era()>("getEra"), //
		jMethod<::jint()>("getHours"), //
		jMethod<::jint()>("getMillis"), //
		jMethod<::jint()>("getMinutes"), //
		jMethod<::jint()>("getMonth"), //
		jMethod<::jint()>("getSeconds"), //
		jMethod<::jlong()>("getTimeOfDay"), //
		jMethod<::jint()>("getYear"), //
		jMethod<::java::util::TimeZone()>("getZone"), //
		jMethod<::jint()>("getZoneOffset"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isDaylightTime"), //
		jMethod<::jboolean()>("isLeapYear"), //
		jMethod<::jboolean()>("isNormalized"), //
		jMethod<::jboolean(::sun::util::calendar::CalendarDate)>("isSameDate"), //
		jMethod<::jboolean()>("isStandardTime"), //
		jMethod<::sun::util::calendar::CalendarDate(::jint, ::jint, ::jint)>("setDate"), //
		jMethod<::sun::util::calendar::CalendarDate(::jint)>("setDayOfMonth"), //
		jMethod<::sun::util::calendar::CalendarDate(::sun::util::calendar::Era)>("setEra"), //
		jMethod<::sun::util::calendar::CalendarDate(::jint)>("setHours"), //
		jMethod<::sun::util::calendar::CalendarDate(::jint)>("setMillis"), //
		jMethod<::sun::util::calendar::CalendarDate(::jint)>("setMinutes"), //
		jMethod<::sun::util::calendar::CalendarDate(::jint)>("setMonth"), //
		jMethod<::sun::util::calendar::CalendarDate(::jint)>("setSeconds"), //
		jMethod<::jvoid(::jboolean)>("setStandardTime"), //
		jMethod<::sun::util::calendar::CalendarDate(::jint, ::jint, ::jint, ::jint)>("setTimeOfDay"), //
		jMethod<::sun::util::calendar::CalendarDate(::jint)>("setYear"), //
		jMethod<::sun::util::calendar::CalendarDate(::java::util::TimeZone)>("setZone"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::sun::util::calendar::CalendarDate, typename... Args>
	auto addDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addDate")] != -1);
		return call<R>("addDate", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::calendar::CalendarDate, typename... Args>
	auto addDayOfMonth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addDayOfMonth")] != -1);
		return call<R>("addDayOfMonth", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::calendar::CalendarDate, typename... Args>
	auto addHours(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addHours")] != -1);
		return call<R>("addHours", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::calendar::CalendarDate, typename... Args>
	auto addMillis(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addMillis")] != -1);
		return call<R>("addMillis", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::calendar::CalendarDate, typename... Args>
	auto addMinutes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addMinutes")] != -1);
		return call<R>("addMinutes", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::calendar::CalendarDate, typename... Args>
	auto addMonth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addMonth")] != -1);
		return call<R>("addMonth", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::calendar::CalendarDate, typename... Args>
	auto addSeconds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addSeconds")] != -1);
		return call<R>("addSeconds", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::calendar::CalendarDate, typename... Args>
	auto addTimeOfDay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addTimeOfDay")] != -1);
		return call<R>("addTimeOfDay", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::calendar::CalendarDate, typename... Args>
	auto addYear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addYear")] != -1);
		return call<R>("addYear", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDayOfMonth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDayOfMonth")] != -1);
		return call<R>("getDayOfMonth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDayOfWeek(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDayOfWeek")] != -1);
		return call<R>("getDayOfWeek", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDaylightSaving(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDaylightSaving")] != -1);
		return call<R>("getDaylightSaving", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::calendar::Era, typename... Args>
	auto getEra(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEra")] != -1);
		return call<R>("getEra", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHours(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHours")] != -1);
		return call<R>("getHours", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMillis(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMillis")] != -1);
		return call<R>("getMillis", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinutes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinutes")] != -1);
		return call<R>("getMinutes", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMonth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMonth")] != -1);
		return call<R>("getMonth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSeconds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSeconds")] != -1);
		return call<R>("getSeconds", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getTimeOfDay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTimeOfDay")] != -1);
		return call<R>("getTimeOfDay", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getYear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getYear")] != -1);
		return call<R>("getYear", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::TimeZone, typename... Args>
	auto getZone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getZone")] != -1);
		return call<R>("getZone", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getZoneOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getZoneOffset")] != -1);
		return call<R>("getZoneOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDaylightTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDaylightTime")] != -1);
		return call<R>("isDaylightTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLeapYear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLeapYear")] != -1);
		return call<R>("isLeapYear", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isNormalized(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isNormalized")] != -1);
		return call<R>("isNormalized", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSameDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSameDate")] != -1);
		return call<R>("isSameDate", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isStandardTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isStandardTime")] != -1);
		return call<R>("isStandardTime", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::calendar::CalendarDate, typename... Args>
	auto setDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDate")] != -1);
		return call<R>("setDate", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::calendar::CalendarDate, typename... Args>
	auto setDayOfMonth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDayOfMonth")] != -1);
		return call<R>("setDayOfMonth", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::calendar::CalendarDate, typename... Args>
	auto setEra(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEra")] != -1);
		return call<R>("setEra", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::calendar::CalendarDate, typename... Args>
	auto setHours(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHours")] != -1);
		return call<R>("setHours", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::calendar::CalendarDate, typename... Args>
	auto setMillis(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMillis")] != -1);
		return call<R>("setMillis", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::calendar::CalendarDate, typename... Args>
	auto setMinutes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMinutes")] != -1);
		return call<R>("setMinutes", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::calendar::CalendarDate, typename... Args>
	auto setMonth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMonth")] != -1);
		return call<R>("setMonth", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::calendar::CalendarDate, typename... Args>
	auto setSeconds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSeconds")] != -1);
		return call<R>("setSeconds", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setStandardTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setStandardTime")] != -1);
		return call<R>("setStandardTime", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::calendar::CalendarDate, typename... Args>
	auto setTimeOfDay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTimeOfDay")] != -1);
		return call<R>("setTimeOfDay", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::calendar::CalendarDate, typename... Args>
	auto setYear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setYear")] != -1);
		return call<R>("setYear", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::calendar::CalendarDate, typename... Args>
	auto setZone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setZone")] != -1);
		return call<R>("setZone", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
