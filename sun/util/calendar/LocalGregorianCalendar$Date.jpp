#ifndef sun_util_calendar_LocalGregorianCalendar$Date_HPP
#define sun_util_calendar_LocalGregorianCalendar$Date_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::util::calendar::LocalGregorianCalendar$Date : public jObject<::sun::util::calendar::LocalGregorianCalendar$Date, ::sun::util::calendar::BaseCalendar$Date> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_util_calendar / "LocalGregorianCalendar$Date";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::sun::util::calendar::CalendarDate(::jint)>("addYear"), //
		jMethod<::sun::util::calendar::LocalGregorianCalendar$Date(::jint)>("addYear"), //
		jMethod<::jint()>("getNormalizedYear"), //
		jMethod<::sun::util::calendar::CalendarDate(::sun::util::calendar::Era)>("setEra"), //
		jMethod<::sun::util::calendar::LocalGregorianCalendar$Date(::sun::util::calendar::Era)>("setEra"), //
		jMethod<::jvoid(::jint)>("setNormalizedYear"), //
		jMethod<::sun::util::calendar::CalendarDate(::jint)>("setYear"), //
		jMethod<::sun::util::calendar::LocalGregorianCalendar$Date(::jint)>("setYear"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::sun::util::calendar::CalendarDate, typename... Args>
	auto addYear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addYear")] != -1);
		return call<R>("addYear", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNormalizedYear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNormalizedYear")] != -1);
		return call<R>("getNormalizedYear", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::calendar::CalendarDate, typename... Args>
	auto setEra(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEra")] != -1);
		return call<R>("setEra", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNormalizedYear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNormalizedYear")] != -1);
		return call<R>("setNormalizedYear", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::calendar::CalendarDate, typename... Args>
	auto setYear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setYear")] != -1);
		return call<R>("setYear", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
