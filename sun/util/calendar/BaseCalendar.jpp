#ifndef sun_util_calendar_BaseCalendar_HPP
#define sun_util_calendar_BaseCalendar_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::util::calendar::BaseCalendar : public jObject<::sun::util::calendar::BaseCalendar, ::sun::util::calendar::AbstractCalendar> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_util_calendar / "BaseCalendar";

	constexpr static Enume field_signatures{
		jField<::jint>("APRIL"), //
		jField<::jint>("AUGUST"), //
		jField<::jint>("DECEMBER"), //
		jField<::jint>("FEBRUARY"), //
		jField<::jint>("FRIDAY"), //
		jField<::jint>("JANUARY"), //
		jField<::jint>("JULY"), //
		jField<::jint>("JUNE"), //
		jField<::jint>("MARCH"), //
		jField<::jint>("MAY"), //
		jField<::jint>("MONDAY"), //
		jField<::jint>("NOVEMBER"), //
		jField<::jint>("OCTOBER"), //
		jField<::jint>("SATURDAY"), //
		jField<::jint>("SEPTEMBER"), //
		jField<::jint>("SUNDAY"), //
		jField<::jint>("THURSDAY"), //
		jField<::jint>("TUESDAY"), //
		jField<::jint>("WEDNESDAY"), //
	};

	template<typename F = ::jint>
	static auto APRIL() {
		static_assert(field_signatures[jField<F>("APRIL")] != -1);
		return sat<F>("APRIL");
	}

	template<typename F = ::jint>
	static auto AUGUST() {
		static_assert(field_signatures[jField<F>("AUGUST")] != -1);
		return sat<F>("AUGUST");
	}

	template<typename F = ::jint>
	static auto DECEMBER() {
		static_assert(field_signatures[jField<F>("DECEMBER")] != -1);
		return sat<F>("DECEMBER");
	}

	template<typename F = ::jint>
	static auto FEBRUARY() {
		static_assert(field_signatures[jField<F>("FEBRUARY")] != -1);
		return sat<F>("FEBRUARY");
	}

	template<typename F = ::jint>
	static auto FRIDAY() {
		static_assert(field_signatures[jField<F>("FRIDAY")] != -1);
		return sat<F>("FRIDAY");
	}

	template<typename F = ::jint>
	static auto JANUARY() {
		static_assert(field_signatures[jField<F>("JANUARY")] != -1);
		return sat<F>("JANUARY");
	}

	template<typename F = ::jint>
	static auto JULY() {
		static_assert(field_signatures[jField<F>("JULY")] != -1);
		return sat<F>("JULY");
	}

	template<typename F = ::jint>
	static auto JUNE() {
		static_assert(field_signatures[jField<F>("JUNE")] != -1);
		return sat<F>("JUNE");
	}

	template<typename F = ::jint>
	static auto MARCH() {
		static_assert(field_signatures[jField<F>("MARCH")] != -1);
		return sat<F>("MARCH");
	}

	template<typename F = ::jint>
	static auto MAY() {
		static_assert(field_signatures[jField<F>("MAY")] != -1);
		return sat<F>("MAY");
	}

	template<typename F = ::jint>
	static auto MONDAY() {
		static_assert(field_signatures[jField<F>("MONDAY")] != -1);
		return sat<F>("MONDAY");
	}

	template<typename F = ::jint>
	static auto NOVEMBER() {
		static_assert(field_signatures[jField<F>("NOVEMBER")] != -1);
		return sat<F>("NOVEMBER");
	}

	template<typename F = ::jint>
	static auto OCTOBER() {
		static_assert(field_signatures[jField<F>("OCTOBER")] != -1);
		return sat<F>("OCTOBER");
	}

	template<typename F = ::jint>
	static auto SATURDAY() {
		static_assert(field_signatures[jField<F>("SATURDAY")] != -1);
		return sat<F>("SATURDAY");
	}

	template<typename F = ::jint>
	static auto SEPTEMBER() {
		static_assert(field_signatures[jField<F>("SEPTEMBER")] != -1);
		return sat<F>("SEPTEMBER");
	}

	template<typename F = ::jint>
	static auto SUNDAY() {
		static_assert(field_signatures[jField<F>("SUNDAY")] != -1);
		return sat<F>("SUNDAY");
	}

	template<typename F = ::jint>
	static auto THURSDAY() {
		static_assert(field_signatures[jField<F>("THURSDAY")] != -1);
		return sat<F>("THURSDAY");
	}

	template<typename F = ::jint>
	static auto TUESDAY() {
		static_assert(field_signatures[jField<F>("TUESDAY")] != -1);
		return sat<F>("TUESDAY");
	}

	template<typename F = ::jint>
	static auto WEDNESDAY() {
		static_assert(field_signatures[jField<F>("WEDNESDAY")] != -1);
		return sat<F>("WEDNESDAY");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::sun::util::calendar::CalendarDate, ::jlong)>("getCalendarDateFromFixedDate"), //
		jMethod<::jint(::sun::util::calendar::CalendarDate)>("getDayOfWeek"), //
		jMethod<::jint(::jlong)>("getDayOfWeekFromFixedDate"), //
		jMethod<::jlong(::sun::util::calendar::CalendarDate)>("getDayOfYear"), //
		jMethod<::jlong(::jint, ::jint, ::jint, ::sun::util::calendar::BaseCalendar$Date)>("getFixedDate"), //
		jMethod<::jlong(::sun::util::calendar::CalendarDate)>("getFixedDate"), //
		jMethod<::jint(::sun::util::calendar::CalendarDate)>("getMonthLength"), //
		jMethod<::jint(::jlong)>("getYearFromFixedDate"), //
		jMethod<::jint(::sun::util::calendar::CalendarDate)>("getYearLength"), //
		jMethod<::jint(::sun::util::calendar::CalendarDate)>("getYearLengthInMonths"), //
		jMethod<::jboolean(::sun::util::calendar::CalendarDate)>("normalize"), //
		jMethod<::jboolean(::sun::util::calendar::CalendarDate)>("validate"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto getCalendarDateFromFixedDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCalendarDateFromFixedDate")] != -1);
		return call<R>("getCalendarDateFromFixedDate", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDayOfWeek(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDayOfWeek")] != -1);
		return call<R>("getDayOfWeek", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getDayOfWeekFromFixedDate(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDayOfWeekFromFixedDate")] != -1);
		return scall<R>("getDayOfWeekFromFixedDate", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getDayOfYear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDayOfYear")] != -1);
		return call<R>("getDayOfYear", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getFixedDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFixedDate")] != -1);
		return call<R>("getFixedDate", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMonthLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMonthLength")] != -1);
		return call<R>("getMonthLength", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getYearFromFixedDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getYearFromFixedDate")] != -1);
		return call<R>("getYearFromFixedDate", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getYearLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getYearLength")] != -1);
		return call<R>("getYearLength", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getYearLengthInMonths(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getYearLengthInMonths")] != -1);
		return call<R>("getYearLengthInMonths", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto normalize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("normalize")] != -1);
		return call<R>("normalize", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto validate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("validate")] != -1);
		return call<R>("validate", std::forward<Args>(args)...);
	}

};

#endif
