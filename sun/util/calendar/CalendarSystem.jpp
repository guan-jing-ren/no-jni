#ifndef sun_util_calendar_CalendarSystem_HPP
#define sun_util_calendar_CalendarSystem_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::util::calendar::CalendarSystem : public jObject<::sun::util::calendar::CalendarSystem, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_util_calendar / "CalendarSystem";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::sun::util::calendar::CalendarSystem(::java::lang::String)>("forName"), //
		jMethod<::sun::util::calendar::CalendarDate()>("getCalendarDate"), //
		jMethod<::sun::util::calendar::CalendarDate(::jlong)>("getCalendarDate"), //
		jMethod<::sun::util::calendar::CalendarDate(::jlong, ::java::util::TimeZone)>("getCalendarDate"), //
		jMethod<::sun::util::calendar::CalendarDate(::jlong, ::sun::util::calendar::CalendarDate)>("getCalendarDate"), //
		jMethod<::java::util::Properties()>("getCalendarProperties"), //
		jMethod<::sun::util::calendar::Era(::java::lang::String)>("getEra"), //
		jMethod<::sun::util::calendar::Era *()>("getEras"), //
		jMethod<::sun::util::calendar::Gregorian()>("getGregorianCalendar"), //
		jMethod<::jint(::sun::util::calendar::CalendarDate)>("getMonthLength"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::sun::util::calendar::CalendarDate(::jint, ::jint, ::sun::util::calendar::CalendarDate)>("getNthDayOfWeek"), //
		jMethod<::jlong(::sun::util::calendar::CalendarDate)>("getTime"), //
		jMethod<::jint()>("getWeekLength"), //
		jMethod<::jint(::sun::util::calendar::CalendarDate)>("getYearLength"), //
		jMethod<::jint(::sun::util::calendar::CalendarDate)>("getYearLengthInMonths"), //
		jMethod<::sun::util::calendar::CalendarDate()>("newCalendarDate"), //
		jMethod<::sun::util::calendar::CalendarDate(::java::util::TimeZone)>("newCalendarDate"), //
		jMethod<::jboolean(::sun::util::calendar::CalendarDate)>("normalize"), //
		jMethod<::jvoid(::sun::util::calendar::CalendarDate, ::java::lang::String)>("setEra"), //
		jMethod<::sun::util::calendar::CalendarDate(::sun::util::calendar::CalendarDate, ::jint)>("setTimeOfDay"), //
		jMethod<::jboolean(::sun::util::calendar::CalendarDate)>("validate"), //
	};

	template<typename R = ::sun::util::calendar::CalendarSystem, typename... Args>
	static auto forName(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("forName")] != -1);
		return scall<R>("forName", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::calendar::CalendarDate, typename... Args>
	auto getCalendarDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCalendarDate")] != -1);
		return call<R>("getCalendarDate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Properties, typename... Args>
	static auto getCalendarProperties(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCalendarProperties")] != -1);
		return scall<R>("getCalendarProperties", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::calendar::Era, typename... Args>
	auto getEra(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEra")] != -1);
		return call<R>("getEra", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::calendar::Era *, typename... Args>
	auto getEras(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEras")] != -1);
		return call<R>("getEras", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::calendar::Gregorian, typename... Args>
	static auto getGregorianCalendar(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGregorianCalendar")] != -1);
		return scall<R>("getGregorianCalendar", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMonthLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMonthLength")] != -1);
		return call<R>("getMonthLength", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::calendar::CalendarDate, typename... Args>
	auto getNthDayOfWeek(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNthDayOfWeek")] != -1);
		return call<R>("getNthDayOfWeek", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTime")] != -1);
		return call<R>("getTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWeekLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWeekLength")] != -1);
		return call<R>("getWeekLength", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getYearLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getYearLength")] != -1);
		return call<R>("getYearLength", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getYearLengthInMonths(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getYearLengthInMonths")] != -1);
		return call<R>("getYearLengthInMonths", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::calendar::CalendarDate, typename... Args>
	auto newCalendarDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newCalendarDate")] != -1);
		return call<R>("newCalendarDate", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto normalize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("normalize")] != -1);
		return call<R>("normalize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEra(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEra")] != -1);
		return call<R>("setEra", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::calendar::CalendarDate, typename... Args>
	auto setTimeOfDay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTimeOfDay")] != -1);
		return call<R>("setTimeOfDay", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto validate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("validate")] != -1);
		return call<R>("validate", std::forward<Args>(args)...);
	}

};

#endif
