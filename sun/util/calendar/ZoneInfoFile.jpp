#ifndef sun_util_calendar_ZoneInfoFile_HPP
#define sun_util_calendar_ZoneInfoFile_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::util::calendar::ZoneInfoFile : public jObject<::sun::util::calendar::ZoneInfoFile, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_util_calendar / "ZoneInfoFile";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::util::Map()>("getAliasMap"), //
		jMethod<::sun::util::calendar::ZoneInfo(::java::lang::String, ::jint)>("getCustomTimeZone"), //
		jMethod<::java::lang::String()>("getVersion"), //
		jMethod<::java::lang::String *()>("getZoneIds"), //
		jMethod<::java::lang::String *(::jint)>("getZoneIds"), //
		jMethod<::sun::util::calendar::ZoneInfo(::java::io::DataInput, ::java::lang::String)>("getZoneInfo"), //
		jMethod<::sun::util::calendar::ZoneInfo(::java::lang::String)>("getZoneInfo"), //
		jMethod<::jint(::java::io::DataInput)>("readOffset"), //
		jMethod<::java::lang::String(::jint)>("toCustomID"), //
		jMethod<::jboolean()>("useOldMapping"), //
	};

	template<typename R = ::java::util::Map, typename... Args>
	static auto getAliasMap(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAliasMap")] != -1);
		return scall<R>("getAliasMap", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::calendar::ZoneInfo, typename... Args>
	static auto getCustomTimeZone(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCustomTimeZone")] != -1);
		return scall<R>("getCustomTimeZone", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getVersion(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVersion")] != -1);
		return scall<R>("getVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	static auto getZoneIds(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getZoneIds")] != -1);
		return scall<R>("getZoneIds", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::calendar::ZoneInfo, typename... Args>
	static auto getZoneInfo(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getZoneInfo")] != -1);
		return scall<R>("getZoneInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto readOffset(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readOffset")] != -1);
		return scall<R>("readOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto toCustomID(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toCustomID")] != -1);
		return scall<R>("toCustomID", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto useOldMapping(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("useOldMapping")] != -1);
		return scall<R>("useOldMapping", std::forward<Args>(args)...);
	}

};

#endif
