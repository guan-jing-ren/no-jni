#ifndef sun_util_calendar_CalendarUtils_HPP
#define sun_util_calendar_CalendarUtils_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::util::calendar::CalendarUtils : public jObject<::sun::util::calendar::CalendarUtils, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_util_calendar / "CalendarUtils";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jint(::jint, ::jint)>("amod"), //
		jMethod<::jlong(::jlong, ::jlong)>("amod"), //
		jMethod<::jint(::jint, ::jint)>("floorDivide"), //
		jMethod<::jint(::jint, ::jint, ::jint *)>("floorDivide"), //
		jMethod<::jint(::jlong, ::jint, ::jint *)>("floorDivide"), //
		jMethod<::jlong(::jlong, ::jlong)>("floorDivide"), //
		jMethod<::jboolean(::jint)>("isGregorianLeapYear"), //
		jMethod<::jboolean(::jint)>("isJulianLeapYear"), //
		jMethod<::jint(::jint, ::jint)>("mod"), //
		jMethod<::jlong(::jlong, ::jlong)>("mod"), //
		jMethod<::java::lang::StringBuffer(::java::lang::StringBuffer, ::jint, ::jint)>("sprintf0d"), //
		jMethod<::java::lang::StringBuilder(::java::lang::StringBuilder, ::jint, ::jint)>("sprintf0d"), //
	};

	template<typename R = ::jint, typename... Args>
	static auto amod(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("amod")] != -1);
		return scall<R>("amod", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto floorDivide(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("floorDivide")] != -1);
		return scall<R>("floorDivide", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isGregorianLeapYear(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isGregorianLeapYear")] != -1);
		return scall<R>("isGregorianLeapYear", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isJulianLeapYear(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isJulianLeapYear")] != -1);
		return scall<R>("isJulianLeapYear", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto mod(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mod")] != -1);
		return scall<R>("mod", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::StringBuffer, typename... Args>
	static auto sprintf0d(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sprintf0d")] != -1);
		return scall<R>("sprintf0d", std::forward<Args>(args)...);
	}

};

#endif
