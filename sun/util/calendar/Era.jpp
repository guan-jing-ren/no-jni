#ifndef sun_util_calendar_Era_HPP
#define sun_util_calendar_Era_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::util::calendar::Era : public jObject<::sun::util::calendar::Era, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_util_calendar / "Era";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::jlong, ::jboolean)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::String()>("getAbbreviation"), //
		jMethod<::java::lang::String(::java::util::Locale)>("getDiaplayAbbreviation"), //
		jMethod<::java::lang::String(::java::util::Locale)>("getDisplayName"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jlong(::java::util::TimeZone)>("getSince"), //
		jMethod<::sun::util::calendar::CalendarDate()>("getSinceDate"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isLocalTime"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAbbreviation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAbbreviation")] != -1);
		return call<R>("getAbbreviation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDiaplayAbbreviation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDiaplayAbbreviation")] != -1);
		return call<R>("getDiaplayAbbreviation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDisplayName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisplayName")] != -1);
		return call<R>("getDisplayName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getSince(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSince")] != -1);
		return call<R>("getSince", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::calendar::CalendarDate, typename... Args>
	auto getSinceDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSinceDate")] != -1);
		return call<R>("getSinceDate", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLocalTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLocalTime")] != -1);
		return call<R>("isLocalTime", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
