#ifndef sun_util_logging_PlatformLogger_HPP
#define sun_util_logging_PlatformLogger_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::util::logging::PlatformLogger : public jObject<::sun::util::logging::PlatformLogger, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_util_logging / "PlatformLogger";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::lang::String)>("config"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Throwable)>("config"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object *)>("config"), //
		jMethod<::jvoid(::java::lang::String)>("fine"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Throwable)>("fine"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object *)>("fine"), //
		jMethod<::jvoid(::java::lang::String)>("finer"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Throwable)>("finer"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object *)>("finer"), //
		jMethod<::jvoid(::java::lang::String)>("finest"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Throwable)>("finest"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object *)>("finest"), //
		jMethod<::sun::util::logging::PlatformLogger(::java::lang::String)>("getLogger"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jvoid(::java::lang::String)>("info"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Throwable)>("info"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object *)>("info"), //
		jMethod<::jboolean()>("isEnabled"), //
		jMethod<::jboolean(::sun::util::logging::PlatformLogger$Level)>("isLoggable"), //
		jMethod<::sun::util::logging::PlatformLogger$Level()>("level"), //
		jMethod<::jvoid()>("redirectPlatformLoggers"), //
		jMethod<::jvoid(::sun::util::logging::PlatformLogger$Level)>("setLevel"), //
		jMethod<::jvoid(::java::lang::String)>("severe"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Throwable)>("severe"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object *)>("severe"), //
		jMethod<::jvoid(::java::lang::String)>("warning"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Throwable)>("warning"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object *)>("warning"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto config(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("config")] != -1);
		return call<R>("config", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fine")] != -1);
		return call<R>("fine", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto finer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("finer")] != -1);
		return call<R>("finer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto finest(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("finest")] != -1);
		return call<R>("finest", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::logging::PlatformLogger, typename... Args>
	static auto getLogger(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLogger")] != -1);
		return scall<R>("getLogger", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto info(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("info")] != -1);
		return call<R>("info", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEnabled")] != -1);
		return call<R>("isEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLoggable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLoggable")] != -1);
		return call<R>("isLoggable", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::logging::PlatformLogger$Level, typename... Args>
	auto level(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("level")] != -1);
		return call<R>("level", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto redirectPlatformLoggers(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("redirectPlatformLoggers")] != -1);
		return scall<R>("redirectPlatformLoggers", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLevel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLevel")] != -1);
		return call<R>("setLevel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto severe(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("severe")] != -1);
		return call<R>("severe", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto warning(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("warning")] != -1);
		return call<R>("warning", std::forward<Args>(args)...);
	}

};

#endif
