#ifndef sun_util_logging_LoggingProxy_HPP
#define sun_util_logging_LoggingProxy_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::util::logging::LoggingProxy : public jObject<::sun::util::logging::LoggingProxy, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_util_logging / "LoggingProxy";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Object(::java::lang::Object)>("getLevel"), //
		jMethod<::java::lang::String(::java::lang::Object)>("getLevelName"), //
		jMethod<::jint(::java::lang::Object)>("getLevelValue"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getLogger"), //
		jMethod<::java::lang::String(::java::lang::String)>("getLoggerLevel"), //
		jMethod<::java::util::List()>("getLoggerNames"), //
		jMethod<::java::lang::String(::java::lang::String)>("getParentLoggerName"), //
		jMethod<::java::lang::String(::java::lang::String)>("getProperty"), //
		jMethod<::jboolean(::java::lang::Object, ::java::lang::Object)>("isLoggable"), //
		jMethod<::jvoid(::java::lang::Object, ::java::lang::Object, ::java::lang::String)>("log"), //
		jMethod<::jvoid(::java::lang::Object, ::java::lang::Object, ::java::lang::String, ::java::lang::Throwable)>("log"), //
		jMethod<::jvoid(::java::lang::Object, ::java::lang::Object, ::java::lang::String, ::java::lang::Object *)>("log"), //
		jMethod<::java::lang::Object(::java::lang::String)>("parseLevel"), //
		jMethod<::jvoid(::java::lang::Object, ::java::lang::Object)>("setLevel"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("setLoggerLevel"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto getLevel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLevel")] != -1);
		return call<R>("getLevel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLevelName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLevelName")] != -1);
		return call<R>("getLevelName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLevelValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLevelValue")] != -1);
		return call<R>("getLevelValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getLogger(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLogger")] != -1);
		return call<R>("getLogger", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLoggerLevel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLoggerLevel")] != -1);
		return call<R>("getLoggerLevel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getLoggerNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLoggerNames")] != -1);
		return call<R>("getLoggerNames", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getParentLoggerName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParentLoggerName")] != -1);
		return call<R>("getParentLoggerName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProperty")] != -1);
		return call<R>("getProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLoggable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLoggable")] != -1);
		return call<R>("isLoggable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto log(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("log")] != -1);
		return call<R>("log", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto parseLevel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseLevel")] != -1);
		return call<R>("parseLevel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLevel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLevel")] != -1);
		return call<R>("setLevel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLoggerLevel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLoggerLevel")] != -1);
		return call<R>("setLoggerLevel", std::forward<Args>(args)...);
	}

};

#endif
