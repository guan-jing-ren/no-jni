#ifndef sun_util_logging_PlatformLogger$Level_HPP
#define sun_util_logging_PlatformLogger$Level_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::util::logging::PlatformLogger$Level : public jObject<::sun::util::logging::PlatformLogger$Level, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_util_logging / "PlatformLogger$Level";

	constexpr static Enume field_signatures{
		jField<::sun::util::logging::PlatformLogger$Level>("ALL"), //
		jField<::sun::util::logging::PlatformLogger$Level>("CONFIG"), //
		jField<::sun::util::logging::PlatformLogger$Level>("FINE"), //
		jField<::sun::util::logging::PlatformLogger$Level>("FINER"), //
		jField<::sun::util::logging::PlatformLogger$Level>("FINEST"), //
		jField<::sun::util::logging::PlatformLogger$Level>("INFO"), //
		jField<::sun::util::logging::PlatformLogger$Level>("OFF"), //
		jField<::sun::util::logging::PlatformLogger$Level>("SEVERE"), //
		jField<::sun::util::logging::PlatformLogger$Level>("WARNING"), //
	};

	template<typename F = ::sun::util::logging::PlatformLogger$Level>
	static auto ALL() {
		static_assert(field_signatures[jField<F>("ALL")] != -1);
		return sat<F>("ALL");
	}

	template<typename F = ::sun::util::logging::PlatformLogger$Level>
	static auto CONFIG() {
		static_assert(field_signatures[jField<F>("CONFIG")] != -1);
		return sat<F>("CONFIG");
	}

	template<typename F = ::sun::util::logging::PlatformLogger$Level>
	static auto FINE() {
		static_assert(field_signatures[jField<F>("FINE")] != -1);
		return sat<F>("FINE");
	}

	template<typename F = ::sun::util::logging::PlatformLogger$Level>
	static auto FINER() {
		static_assert(field_signatures[jField<F>("FINER")] != -1);
		return sat<F>("FINER");
	}

	template<typename F = ::sun::util::logging::PlatformLogger$Level>
	static auto FINEST() {
		static_assert(field_signatures[jField<F>("FINEST")] != -1);
		return sat<F>("FINEST");
	}

	template<typename F = ::sun::util::logging::PlatformLogger$Level>
	static auto INFO() {
		static_assert(field_signatures[jField<F>("INFO")] != -1);
		return sat<F>("INFO");
	}

	template<typename F = ::sun::util::logging::PlatformLogger$Level>
	static auto OFF() {
		static_assert(field_signatures[jField<F>("OFF")] != -1);
		return sat<F>("OFF");
	}

	template<typename F = ::sun::util::logging::PlatformLogger$Level>
	static auto SEVERE() {
		static_assert(field_signatures[jField<F>("SEVERE")] != -1);
		return sat<F>("SEVERE");
	}

	template<typename F = ::sun::util::logging::PlatformLogger$Level>
	static auto WARNING() {
		static_assert(field_signatures[jField<F>("WARNING")] != -1);
		return sat<F>("WARNING");
	}

	constexpr static Enume method_signatures{
		jMethod<::jint()>("intValue"), //
		jMethod<::sun::util::logging::PlatformLogger$Level(::java::lang::String)>("valueOf"), //
		jMethod<::sun::util::logging::PlatformLogger$Level *()>("values"), //
	};

	template<typename R = ::jint, typename... Args>
	auto intValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("intValue")] != -1);
		return call<R>("intValue", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::logging::PlatformLogger$Level, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::logging::PlatformLogger$Level *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
