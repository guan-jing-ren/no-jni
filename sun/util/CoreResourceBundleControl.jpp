#ifndef sun_util_CoreResourceBundleControl_HPP
#define sun_util_CoreResourceBundleControl_HPP

#include "../../jfwd_decl.hpp"

class ::sun::util::CoreResourceBundleControl : public jObject<::sun::util::CoreResourceBundleControl, ::java::util::ResourceBundle$Control> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_util / "CoreResourceBundleControl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::util::List(::java::lang::String, ::java::util::Locale)>("getCandidateLocales"), //
		jMethod<::sun::util::CoreResourceBundleControl()>("getRBControlInstance"), //
		jMethod<::sun::util::CoreResourceBundleControl(::java::lang::String)>("getRBControlInstance"), //
		jMethod<::jlong(::java::lang::String, ::java::util::Locale)>("getTimeToLive"), //
	};

	template<typename R = ::java::util::List, typename... Args>
	auto getCandidateLocales(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCandidateLocales")] != -1);
		return call<R>("getCandidateLocales", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::CoreResourceBundleControl, typename... Args>
	static auto getRBControlInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRBControlInstance")] != -1);
		return scall<R>("getRBControlInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getTimeToLive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTimeToLive")] != -1);
		return call<R>("getTimeToLive", std::forward<Args>(args)...);
	}

};

#endif
