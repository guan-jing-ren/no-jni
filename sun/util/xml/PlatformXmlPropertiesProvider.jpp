#ifndef sun_util_xml_PlatformXmlPropertiesProvider_HPP
#define sun_util_xml_PlatformXmlPropertiesProvider_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::util::xml::PlatformXmlPropertiesProvider : public jObject<::sun::util::xml::PlatformXmlPropertiesProvider, ::sun::util::spi::XmlPropertiesProvider> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_util_xml / "PlatformXmlPropertiesProvider";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::util::Properties, ::java::io::InputStream)>("load"), //
		jMethod<::jvoid(::java::util::Properties, ::java::io::OutputStream, ::java::lang::String, ::java::lang::String)>("store"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto load(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("load")] != -1);
		return call<R>("load", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto store(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("store")] != -1);
		return call<R>("store", std::forward<Args>(args)...);
	}

};

#endif
