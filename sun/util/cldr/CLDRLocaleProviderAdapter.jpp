#ifndef sun_util_cldr_CLDRLocaleProviderAdapter_HPP
#define sun_util_cldr_CLDRLocaleProviderAdapter_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::util::cldr::CLDRLocaleProviderAdapter : public jObject<::sun::util::cldr::CLDRLocaleProviderAdapter, ::sun::util::locale::provider::JRELocaleProviderAdapter> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_util_cldr / "CLDRLocaleProviderAdapter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::sun::util::locale::provider::LocaleProviderAdapter$Type()>("getAdapterType"), //
		jMethod<::java::util::Locale *()>("getAvailableLocales"), //
		jMethod<::java::text::spi::BreakIteratorProvider()>("getBreakIteratorProvider"), //
		jMethod<::java::text::spi::CollatorProvider()>("getCollatorProvider"), //
	};

	template<typename R = ::sun::util::locale::provider::LocaleProviderAdapter$Type, typename... Args>
	auto getAdapterType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAdapterType")] != -1);
		return call<R>("getAdapterType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale *, typename... Args>
	auto getAvailableLocales(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAvailableLocales")] != -1);
		return call<R>("getAvailableLocales", std::forward<Args>(args)...);
	}

	template<typename R = ::java::text::spi::BreakIteratorProvider, typename... Args>
	auto getBreakIteratorProvider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBreakIteratorProvider")] != -1);
		return call<R>("getBreakIteratorProvider", std::forward<Args>(args)...);
	}

	template<typename R = ::java::text::spi::CollatorProvider, typename... Args>
	auto getCollatorProvider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCollatorProvider")] != -1);
		return call<R>("getCollatorProvider", std::forward<Args>(args)...);
	}

};

#endif
