#ifndef sun_audio_AudioPlayer_HPP
#define sun_audio_AudioPlayer_HPP

#include "../../jfwd_decl.hpp"

class ::sun::audio::AudioPlayer : public jObject<::sun::audio::AudioPlayer, ::java::lang::Thread> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_audio / "AudioPlayer";

	constexpr static Enume field_signatures{
		jField<::sun::audio::AudioPlayer>("player"), //
	};

	template<typename F = ::sun::audio::AudioPlayer>
	static auto player() {
		static_assert(field_signatures[jField<F>("player")] != -1);
		return sat<F>("player");
	}

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("run"), //
		jMethod<::jvoid(::java::io::InputStream)>("start"), //
		jMethod<::jvoid(::java::io::InputStream)>("stop"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto run(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("run")] != -1);
		return call<R>("run", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto start(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("start")] != -1);
		return call<R>("start", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto stop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stop")] != -1);
		return call<R>("stop", std::forward<Args>(args)...);
	}

};

#endif
