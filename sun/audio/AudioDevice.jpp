#ifndef sun_audio_AudioDevice_HPP
#define sun_audio_AudioDevice_HPP

#include "../../jfwd_decl.hpp"

class ::sun::audio::AudioDevice : public jObject<::sun::audio::AudioDevice, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_audio / "AudioDevice";

	constexpr static Enume field_signatures{
		jField<::sun::audio::AudioDevice>("device"), //
	};

	template<typename F = ::sun::audio::AudioDevice>
	static auto device() {
		static_assert(field_signatures[jField<F>("device")] != -1);
		return sat<F>("device");
	}

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("close"), //
		jMethod<::jvoid(::java::io::InputStream)>("closeChannel"), //
		jMethod<::jvoid()>("closeStreams"), //
		jMethod<::jvoid()>("open"), //
		jMethod<::jvoid(::java::io::InputStream)>("openChannel"), //
		jMethod<::jint()>("openChannels"), //
		jMethod<::jvoid()>("play"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto closeChannel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("closeChannel")] != -1);
		return call<R>("closeChannel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto closeStreams(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("closeStreams")] != -1);
		return call<R>("closeStreams", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto open(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("open")] != -1);
		return call<R>("open", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto openChannel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("openChannel")] != -1);
		return call<R>("openChannel", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto openChannels(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("openChannels")] != -1);
		return call<R>("openChannels", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto play(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("play")] != -1);
		return call<R>("play", std::forward<Args>(args)...);
	}

};

#endif
