#ifndef sun_rmi_runtime_Log_HPP
#define sun_rmi_runtime_Log_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::rmi::runtime::Log : public jObject<::sun::rmi::runtime::Log, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_rmi_runtime / "Log";

	constexpr static Enume field_signatures{
		jField<::java::util::logging::Level>("BRIEF"), //
		jField<::java::util::logging::Level>("VERBOSE"), //
	};

	template<typename F = ::java::util::logging::Level>
	static auto BRIEF() {
		static_assert(field_signatures[jField<F>("BRIEF")] != -1);
		return sat<F>("BRIEF");
	}

	template<typename F = ::java::util::logging::Level>
	static auto VERBOSE() {
		static_assert(field_signatures[jField<F>("VERBOSE")] != -1);
		return sat<F>("VERBOSE");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::sun::rmi::runtime::Log(::java::lang::String, ::java::lang::String, ::jint)>("getLog"), //
		jMethod<::sun::rmi::runtime::Log(::java::lang::String, ::java::lang::String, ::jboolean)>("getLog"), //
		jMethod<::java::io::PrintStream()>("getPrintStream"), //
		jMethod<::jboolean(::java::util::logging::Level)>("isLoggable"), //
		jMethod<::jvoid(::java::util::logging::Level, ::java::lang::String)>("log"), //
		jMethod<::jvoid(::java::util::logging::Level, ::java::lang::String, ::java::lang::Throwable)>("log"), //
		jMethod<::jvoid(::java::io::OutputStream)>("setOutputStream"), //
	};

	template<typename R = ::sun::rmi::runtime::Log, typename... Args>
	static auto getLog(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLog")] != -1);
		return scall<R>("getLog", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::PrintStream, typename... Args>
	auto getPrintStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrintStream")] != -1);
		return call<R>("getPrintStream", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLoggable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLoggable")] != -1);
		return call<R>("isLoggable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto log(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("log")] != -1);
		return call<R>("log", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOutputStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOutputStream")] != -1);
		return call<R>("setOutputStream", std::forward<Args>(args)...);
	}

};

#endif
