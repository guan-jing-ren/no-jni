#ifndef sun_rmi_transport_Target_HPP
#define sun_rmi_transport_Target_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::rmi::transport::Target : public jObject<::sun::rmi::transport::Target, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_rmi_transport / "Target";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::rmi::Remote, ::sun::rmi::server::Dispatcher, ::java::rmi::Remote, ::java::rmi::server::ObjID, ::jboolean)>(), //
		jMethod<::java::rmi::Remote()>("getStub"), //
		jMethod<::jvoid(::java::rmi::dgc::VMID)>("vmidDead"), //
	};

	template<typename R = ::java::rmi::Remote, typename... Args>
	auto getStub(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStub")] != -1);
		return call<R>("getStub", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto vmidDead(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("vmidDead")] != -1);
		return call<R>("vmidDead", std::forward<Args>(args)...);
	}

};

#endif
