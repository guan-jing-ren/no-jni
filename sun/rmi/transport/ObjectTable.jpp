#ifndef sun_rmi_transport_ObjectTable_HPP
#define sun_rmi_transport_ObjectTable_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::rmi::transport::ObjectTable : public jObject<::sun::rmi::transport::ObjectTable, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_rmi_transport / "ObjectTable";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::rmi::Remote(::java::rmi::Remote)>("getStub"), //
		jMethod<::sun::rmi::transport::Target(::java::rmi::Remote)>("getTarget"), //
		jMethod<::jboolean(::java::rmi::Remote, ::jboolean)>("unexportObject"), //
	};

	template<typename R = ::java::rmi::Remote, typename... Args>
	static auto getStub(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStub")] != -1);
		return scall<R>("getStub", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::rmi::transport::Target, typename... Args>
	static auto getTarget(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTarget")] != -1);
		return scall<R>("getTarget", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto unexportObject(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unexportObject")] != -1);
		return scall<R>("unexportObject", std::forward<Args>(args)...);
	}

};

#endif
