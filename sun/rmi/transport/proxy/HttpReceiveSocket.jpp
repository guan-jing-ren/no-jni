#ifndef sun_rmi_transport_proxy_HttpReceiveSocket_HPP
#define sun_rmi_transport_proxy_HttpReceiveSocket_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::rmi::transport::proxy::HttpReceiveSocket : public jObject<::sun::rmi::transport::proxy::HttpReceiveSocket, ::sun::rmi::transport::proxy::WrappedSocket> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_rmi_transport_proxy / "HttpReceiveSocket";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::net::Socket, ::java::io::InputStream, ::java::io::OutputStream)>(), //
		jMethod<::jvoid()>("close"), //
		jMethod<::java::net::InetAddress()>("getInetAddress"), //
		jMethod<::java::io::InputStream()>("getInputStream"), //
		jMethod<::java::net::InetAddress()>("getLocalAddress"), //
		jMethod<::jint()>("getLocalPort"), //
		jMethod<::java::io::OutputStream()>("getOutputStream"), //
		jMethod<::jint()>("getPort"), //
		jMethod<::jint()>("getSoLinger"), //
		jMethod<::jint()>("getSoTimeout"), //
		jMethod<::jboolean()>("getTcpNoDelay"), //
		jMethod<::jboolean()>("isReusable"), //
		jMethod<::jvoid(::jboolean, ::jint)>("setSoLinger"), //
		jMethod<::jvoid(::jint)>("setSoTimeout"), //
		jMethod<::jvoid(::jboolean)>("setTcpNoDelay"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::InetAddress, typename... Args>
	auto getInetAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInetAddress")] != -1);
		return call<R>("getInetAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	auto getInputStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInputStream")] != -1);
		return call<R>("getInputStream", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::InetAddress, typename... Args>
	auto getLocalAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalAddress")] != -1);
		return call<R>("getLocalAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLocalPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalPort")] != -1);
		return call<R>("getLocalPort", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::OutputStream, typename... Args>
	auto getOutputStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOutputStream")] != -1);
		return call<R>("getOutputStream", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPort")] != -1);
		return call<R>("getPort", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSoLinger(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSoLinger")] != -1);
		return call<R>("getSoLinger", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSoTimeout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSoTimeout")] != -1);
		return call<R>("getSoTimeout", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getTcpNoDelay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTcpNoDelay")] != -1);
		return call<R>("getTcpNoDelay", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isReusable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isReusable")] != -1);
		return call<R>("isReusable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSoLinger(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSoLinger")] != -1);
		return call<R>("setSoLinger", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSoTimeout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSoTimeout")] != -1);
		return call<R>("setSoTimeout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTcpNoDelay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTcpNoDelay")] != -1);
		return call<R>("setTcpNoDelay", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
