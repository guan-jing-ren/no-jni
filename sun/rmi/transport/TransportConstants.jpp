#ifndef sun_rmi_transport_TransportConstants_HPP
#define sun_rmi_transport_TransportConstants_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::rmi::transport::TransportConstants : public jObject<::sun::rmi::transport::TransportConstants, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_rmi_transport / "TransportConstants";

	constexpr static Enume field_signatures{
		jField<::jbyte>("Call"), //
		jField<::jbyte>("DGCAck"), //
		jField<::jbyte>("ExceptionalReturn"), //
		jField<::jint>("Magic"), //
		jField<::jbyte>("MultiplexProtocol"), //
		jField<::jbyte>("NormalReturn"), //
		jField<::jbyte>("Ping"), //
		jField<::jbyte>("PingAck"), //
		jField<::jbyte>("ProtocolAck"), //
		jField<::jbyte>("ProtocolNack"), //
		jField<::jbyte>("Return"), //
		jField<::jbyte>("SingleOpProtocol"), //
		jField<::jbyte>("StreamProtocol"), //
		jField<::jshort>("Version"), //
	};

	template<typename F = ::jbyte>
	static auto Call() {
		static_assert(field_signatures[jField<F>("Call")] != -1);
		return sat<F>("Call");
	}

	template<typename F = ::jbyte>
	static auto DGCAck() {
		static_assert(field_signatures[jField<F>("DGCAck")] != -1);
		return sat<F>("DGCAck");
	}

	template<typename F = ::jbyte>
	static auto ExceptionalReturn() {
		static_assert(field_signatures[jField<F>("ExceptionalReturn")] != -1);
		return sat<F>("ExceptionalReturn");
	}

	template<typename F = ::jint>
	static auto Magic() {
		static_assert(field_signatures[jField<F>("Magic")] != -1);
		return sat<F>("Magic");
	}

	template<typename F = ::jbyte>
	static auto MultiplexProtocol() {
		static_assert(field_signatures[jField<F>("MultiplexProtocol")] != -1);
		return sat<F>("MultiplexProtocol");
	}

	template<typename F = ::jbyte>
	static auto NormalReturn() {
		static_assert(field_signatures[jField<F>("NormalReturn")] != -1);
		return sat<F>("NormalReturn");
	}

	template<typename F = ::jbyte>
	static auto Ping() {
		static_assert(field_signatures[jField<F>("Ping")] != -1);
		return sat<F>("Ping");
	}

	template<typename F = ::jbyte>
	static auto PingAck() {
		static_assert(field_signatures[jField<F>("PingAck")] != -1);
		return sat<F>("PingAck");
	}

	template<typename F = ::jbyte>
	static auto ProtocolAck() {
		static_assert(field_signatures[jField<F>("ProtocolAck")] != -1);
		return sat<F>("ProtocolAck");
	}

	template<typename F = ::jbyte>
	static auto ProtocolNack() {
		static_assert(field_signatures[jField<F>("ProtocolNack")] != -1);
		return sat<F>("ProtocolNack");
	}

	template<typename F = ::jbyte>
	static auto Return() {
		static_assert(field_signatures[jField<F>("Return")] != -1);
		return sat<F>("Return");
	}

	template<typename F = ::jbyte>
	static auto SingleOpProtocol() {
		static_assert(field_signatures[jField<F>("SingleOpProtocol")] != -1);
		return sat<F>("SingleOpProtocol");
	}

	template<typename F = ::jbyte>
	static auto StreamProtocol() {
		static_assert(field_signatures[jField<F>("StreamProtocol")] != -1);
		return sat<F>("StreamProtocol");
	}

	template<typename F = ::jshort>
	static auto Version() {
		static_assert(field_signatures[jField<F>("Version")] != -1);
		return sat<F>("Version");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
	};

};

#endif
