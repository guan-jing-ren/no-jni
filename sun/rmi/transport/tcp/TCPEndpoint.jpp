#ifndef sun_rmi_transport_tcp_TCPEndpoint_HPP
#define sun_rmi_transport_tcp_TCPEndpoint_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::rmi::transport::tcp::TCPEndpoint : public jObject<::sun::rmi::transport::tcp::TCPEndpoint, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_rmi_transport_tcp / "TCPEndpoint";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::jint)>(), //
		jConstructor<::jvoid(::java::lang::String, ::jint, ::java::rmi::server::RMIClientSocketFactory, ::java::rmi::server::RMIServerSocketFactory)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jvoid(::sun::rmi::transport::Target)>("exportObject"), //
		jMethod<::sun::rmi::transport::Channel()>("getChannel"), //
		jMethod<::java::rmi::server::RMIClientSocketFactory()>("getClientSocketFactory"), //
		jMethod<::java::lang::String()>("getHost"), //
		jMethod<::sun::rmi::transport::Transport()>("getInboundTransport"), //
		jMethod<::jint()>("getListenPort"), //
		jMethod<::sun::rmi::transport::tcp::TCPEndpoint(::jint)>("getLocalEndpoint"), //
		jMethod<::sun::rmi::transport::tcp::TCPEndpoint(::jint, ::java::rmi::server::RMIClientSocketFactory, ::java::rmi::server::RMIServerSocketFactory)>("getLocalEndpoint"), //
		jMethod<::sun::rmi::transport::Transport()>("getOutboundTransport"), //
		jMethod<::jint()>("getPort"), //
		jMethod<::java::rmi::server::RMIServerSocketFactory()>("getServerSocketFactory"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::sun::rmi::transport::tcp::TCPEndpoint(::java::io::ObjectInput)>("read"), //
		jMethod<::sun::rmi::transport::tcp::TCPEndpoint(::java::io::DataInput)>("readHostPortFormat"), //
		jMethod<::jvoid()>("shedConnectionCaches"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid(::java::io::ObjectOutput)>("write"), //
		jMethod<::jvoid(::java::io::DataOutput)>("writeHostPortFormat"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto exportObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("exportObject")] != -1);
		return call<R>("exportObject", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::rmi::transport::Channel, typename... Args>
	auto getChannel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChannel")] != -1);
		return call<R>("getChannel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::rmi::server::RMIClientSocketFactory, typename... Args>
	auto getClientSocketFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClientSocketFactory")] != -1);
		return call<R>("getClientSocketFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHost(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHost")] != -1);
		return call<R>("getHost", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::rmi::transport::Transport, typename... Args>
	auto getInboundTransport(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInboundTransport")] != -1);
		return call<R>("getInboundTransport", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getListenPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getListenPort")] != -1);
		return call<R>("getListenPort", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::rmi::transport::tcp::TCPEndpoint, typename... Args>
	static auto getLocalEndpoint(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalEndpoint")] != -1);
		return scall<R>("getLocalEndpoint", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::rmi::transport::Transport, typename... Args>
	auto getOutboundTransport(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOutboundTransport")] != -1);
		return call<R>("getOutboundTransport", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPort")] != -1);
		return call<R>("getPort", std::forward<Args>(args)...);
	}

	template<typename R = ::java::rmi::server::RMIServerSocketFactory, typename... Args>
	auto getServerSocketFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServerSocketFactory")] != -1);
		return call<R>("getServerSocketFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::rmi::transport::tcp::TCPEndpoint, typename... Args>
	static auto read(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("read")] != -1);
		return scall<R>("read", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::rmi::transport::tcp::TCPEndpoint, typename... Args>
	static auto readHostPortFormat(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readHostPortFormat")] != -1);
		return scall<R>("readHostPortFormat", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto shedConnectionCaches(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shedConnectionCaches")] != -1);
		return scall<R>("shedConnectionCaches", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write")] != -1);
		return call<R>("write", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeHostPortFormat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeHostPortFormat")] != -1);
		return call<R>("writeHostPortFormat", std::forward<Args>(args)...);
	}

};

#endif
