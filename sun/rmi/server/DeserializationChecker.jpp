#ifndef sun_rmi_server_DeserializationChecker_HPP
#define sun_rmi_server_DeserializationChecker_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::rmi::server::DeserializationChecker : public jObject<::sun::rmi::server::DeserializationChecker, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_rmi_server / "DeserializationChecker";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::lang::reflect::Method, ::java::io::ObjectStreamClass, ::jint, ::jint)>("check"), //
		jMethod<::jvoid(::java::lang::reflect::Method, ::java::lang::String *, ::jint, ::jint)>("checkProxyClass"), //
		jMethod<::jvoid(::jint)>("end"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto check(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("check")] != -1);
		return call<R>("check", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto checkProxyClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkProxyClass")] != -1);
		return call<R>("checkProxyClass", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto end(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("end")] != -1);
		return call<R>("end", std::forward<Args>(args)...);
	}

};

#endif
