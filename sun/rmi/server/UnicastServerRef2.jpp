#ifndef sun_rmi_server_UnicastServerRef2_HPP
#define sun_rmi_server_UnicastServerRef2_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::rmi::server::UnicastServerRef2 : public jObject<::sun::rmi::server::UnicastServerRef2, ::sun::rmi::server::UnicastServerRef> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_rmi_server / "UnicastServerRef2";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint, ::java::rmi::server::RMIClientSocketFactory, ::java::rmi::server::RMIServerSocketFactory)>(), //
		jConstructor<::jvoid(::jint, ::java::rmi::server::RMIClientSocketFactory, ::java::rmi::server::RMIServerSocketFactory, ::sun::misc::ObjectInputFilter)>(), //
		jConstructor<::jvoid(::sun::rmi::transport::LiveRef)>(), //
		jConstructor<::jvoid(::sun::rmi::transport::LiveRef, ::sun::misc::ObjectInputFilter)>(), //
		jMethod<::java::lang::String(::java::io::ObjectOutput)>("getRefClass"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getRefClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRefClass")] != -1);
		return call<R>("getRefClass", std::forward<Args>(args)...);
	}

};

#endif
