#ifndef sun_rmi_server_Activation$ActivationSystemImpl_Stub_HPP
#define sun_rmi_server_Activation$ActivationSystemImpl_Stub_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::rmi::server::Activation$ActivationSystemImpl_Stub : public jObject<::sun::rmi::server::Activation$ActivationSystemImpl_Stub, ::java::rmi::server::RemoteStub> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_rmi_server / "Activation$ActivationSystemImpl_Stub";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::rmi::server::RemoteRef)>(), //
		jMethod<::java::rmi::activation::ActivationMonitor(::java::rmi::activation::ActivationGroupID, ::java::rmi::activation::ActivationInstantiator, ::jlong)>("activeGroup"), //
		jMethod<::java::rmi::activation::ActivationDesc(::java::rmi::activation::ActivationID)>("getActivationDesc"), //
		jMethod<::java::rmi::activation::ActivationGroupDesc(::java::rmi::activation::ActivationGroupID)>("getActivationGroupDesc"), //
		jMethod<::java::rmi::activation::ActivationGroupID(::java::rmi::activation::ActivationGroupDesc)>("registerGroup"), //
		jMethod<::java::rmi::activation::ActivationID(::java::rmi::activation::ActivationDesc)>("registerObject"), //
		jMethod<::java::rmi::activation::ActivationDesc(::java::rmi::activation::ActivationID, ::java::rmi::activation::ActivationDesc)>("setActivationDesc"), //
		jMethod<::java::rmi::activation::ActivationGroupDesc(::java::rmi::activation::ActivationGroupID, ::java::rmi::activation::ActivationGroupDesc)>("setActivationGroupDesc"), //
		jMethod<::jvoid()>("shutdown"), //
		jMethod<::jvoid(::java::rmi::activation::ActivationGroupID)>("unregisterGroup"), //
		jMethod<::jvoid(::java::rmi::activation::ActivationID)>("unregisterObject"), //
	};

	template<typename R = ::java::rmi::activation::ActivationMonitor, typename... Args>
	auto activeGroup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("activeGroup")] != -1);
		return call<R>("activeGroup", std::forward<Args>(args)...);
	}

	template<typename R = ::java::rmi::activation::ActivationDesc, typename... Args>
	auto getActivationDesc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getActivationDesc")] != -1);
		return call<R>("getActivationDesc", std::forward<Args>(args)...);
	}

	template<typename R = ::java::rmi::activation::ActivationGroupDesc, typename... Args>
	auto getActivationGroupDesc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getActivationGroupDesc")] != -1);
		return call<R>("getActivationGroupDesc", std::forward<Args>(args)...);
	}

	template<typename R = ::java::rmi::activation::ActivationGroupID, typename... Args>
	auto registerGroup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("registerGroup")] != -1);
		return call<R>("registerGroup", std::forward<Args>(args)...);
	}

	template<typename R = ::java::rmi::activation::ActivationID, typename... Args>
	auto registerObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("registerObject")] != -1);
		return call<R>("registerObject", std::forward<Args>(args)...);
	}

	template<typename R = ::java::rmi::activation::ActivationDesc, typename... Args>
	auto setActivationDesc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setActivationDesc")] != -1);
		return call<R>("setActivationDesc", std::forward<Args>(args)...);
	}

	template<typename R = ::java::rmi::activation::ActivationGroupDesc, typename... Args>
	auto setActivationGroupDesc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setActivationGroupDesc")] != -1);
		return call<R>("setActivationGroupDesc", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto shutdown(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shutdown")] != -1);
		return call<R>("shutdown", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unregisterGroup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unregisterGroup")] != -1);
		return call<R>("unregisterGroup", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unregisterObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unregisterObject")] != -1);
		return call<R>("unregisterObject", std::forward<Args>(args)...);
	}

};

#endif
