#ifndef sun_rmi_server_MarshalInputStream_HPP
#define sun_rmi_server_MarshalInputStream_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::rmi::server::MarshalInputStream : public jObject<::sun::rmi::server::MarshalInputStream, ::java::io::ObjectInputStream> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_rmi_server / "MarshalInputStream";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::io::InputStream)>(), //
		jMethod<::jvoid()>("close"), //
		jMethod<::jvoid()>("done"), //
		jMethod<::java::lang::Runnable(::java::lang::Object)>("getDoneCallback"), //
		jMethod<::jvoid(::java::lang::Object, ::java::lang::Runnable)>("setDoneCallback"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto done(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("done")] != -1);
		return call<R>("done", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Runnable, typename... Args>
	auto getDoneCallback(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDoneCallback")] != -1);
		return call<R>("getDoneCallback", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDoneCallback(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDoneCallback")] != -1);
		return call<R>("setDoneCallback", std::forward<Args>(args)...);
	}

};

#endif
