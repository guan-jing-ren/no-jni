#ifndef sun_tools_jar_SignatureFile_HPP
#define sun_tools_jar_SignatureFile_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::tools::jar::SignatureFile : public jObject<::sun::tools::jar::SignatureFile, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_tools_jar / "SignatureFile";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::io::InputStream)>(), //
		jConstructor<::jvoid(::java::io::InputStream, ::java::lang::String)>(), //
		jConstructor<::jvoid(::sun::tools::jar::Manifest, ::java::lang::String)>(), //
		jConstructor<::jvoid(::sun::tools::jar::Manifest, ::java::lang::String *, ::java::lang::String)>(), //
		jConstructor<::jvoid(::jbyte *)>(), //
		jMethod<::jvoid(::java::lang::String)>("add"), //
		jMethod<::jvoid(::java::lang::String *)>("add"), //
		jMethod<::java::util::Enumeration()>("entries"), //
		jMethod<::sun::net::www::MessageHeader(::jint)>("entryAt"), //
		jMethod<::sun::security::pkcs::PKCS7()>("getBlock"), //
		jMethod<::java::lang::String()>("getBlockName"), //
		jMethod<::sun::net::www::MessageHeader(::java::lang::String)>("getEntry"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jvoid(::sun::security::pkcs::PKCS7)>("setBlock"), //
		jMethod<::jvoid(::java::io::OutputStream)>("stream"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto entries(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("entries")] != -1);
		return call<R>("entries", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::net::www::MessageHeader, typename... Args>
	auto entryAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("entryAt")] != -1);
		return call<R>("entryAt", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::pkcs::PKCS7, typename... Args>
	auto getBlock(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBlock")] != -1);
		return call<R>("getBlock", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBlockName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBlockName")] != -1);
		return call<R>("getBlockName", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::net::www::MessageHeader, typename... Args>
	auto getEntry(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEntry")] != -1);
		return call<R>("getEntry", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBlock(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBlock")] != -1);
		return call<R>("setBlock", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto stream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stream")] != -1);
		return call<R>("stream", std::forward<Args>(args)...);
	}

};

#endif
