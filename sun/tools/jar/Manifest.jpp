#ifndef sun_tools_jar_Manifest_HPP
#define sun_tools_jar_Manifest_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::tools::jar::Manifest : public jObject<::sun::tools::jar::Manifest, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_tools_jar / "Manifest";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::io::InputStream)>(), //
		jConstructor<::jvoid(::java::io::InputStream, ::jboolean)>(), //
		jConstructor<::jvoid(::jbyte *)>(), //
		jConstructor<::jvoid(::java::lang::String *)>(), //
		jMethod<::jvoid(::sun::net::www::MessageHeader)>("addEntry"), //
		jMethod<::jvoid(::java::io::File)>("addFile"), //
		jMethod<::jvoid(::java::io::File, ::java::lang::String *)>("addFiles"), //
		jMethod<::jvoid(::sun::net::www::MessageHeader)>("doHashes"), //
		jMethod<::java::util::Enumeration()>("entries"), //
		jMethod<::sun::net::www::MessageHeader(::jint)>("entryAt"), //
		jMethod<::sun::net::www::MessageHeader(::java::lang::String)>("getEntry"), //
		jMethod<::jboolean(::java::lang::String)>("isManifestName"), //
		jMethod<::jvoid(::java::io::OutputStream)>("stream"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addEntry(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addEntry")] != -1);
		return call<R>("addEntry", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addFile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addFile")] != -1);
		return call<R>("addFile", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addFiles(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addFiles")] != -1);
		return call<R>("addFiles", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto doHashes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("doHashes")] != -1);
		return call<R>("doHashes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto entries(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("entries")] != -1);
		return call<R>("entries", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::net::www::MessageHeader, typename... Args>
	auto entryAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("entryAt")] != -1);
		return call<R>("entryAt", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::net::www::MessageHeader, typename... Args>
	auto getEntry(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEntry")] != -1);
		return call<R>("getEntry", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isManifestName(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isManifestName")] != -1);
		return scall<R>("isManifestName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto stream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stream")] != -1);
		return call<R>("stream", std::forward<Args>(args)...);
	}

};

#endif
