#ifndef sun_applet_AppletViewer_HPP
#define sun_applet_AppletViewer_HPP

#include "../../jfwd_decl.hpp"

class ::sun::applet::AppletViewer : public jObject<::sun::applet::AppletViewer, ::java::awt::Frame> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_applet / "AppletViewer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint, ::jint, ::java::net::URL, ::java::util::Hashtable, ::java::io::PrintStream, ::sun::applet::AppletViewerFactory)>(), //
		jMethod<::java::awt::MenuItem(::java::awt::Menu, ::java::lang::String)>("addMenuItem"), //
		jMethod<::jint()>("countApplets"), //
		jMethod<::java::applet::Applet(::java::lang::String)>("getApplet"), //
		jMethod<::java::util::Enumeration()>("getApplets"), //
		jMethod<::java::applet::AudioClip(::java::net::URL)>("getAudioClip"), //
		jMethod<::java::awt::Image(::java::net::URL)>("getImage"), //
		jMethod<::java::io::InputStream(::java::lang::String)>("getStream"), //
		jMethod<::java::util::Iterator()>("getStreamKeys"), //
		jMethod<::jvoid(::java::lang::String *)>("main"), //
		jMethod<::jvoid()>("networkProperties"), //
		jMethod<::jvoid(::java::net::URL)>("parse"), //
		jMethod<::jvoid(::java::net::URL, ::java::io::PrintStream, ::sun::applet::AppletViewerFactory)>("parse"), //
		jMethod<::jvoid(::java::net::URL, ::java::lang::String)>("parse"), //
		jMethod<::jint(::java::awt::Graphics, ::java::awt::print::PageFormat, ::jint)>("print"), //
		jMethod<::jvoid(::java::io::PrintStream, ::java::util::Hashtable)>("printTag"), //
		jMethod<::jvoid(::java::awt::event::ActionEvent)>("processUserAction"), //
		jMethod<::java::lang::String(::java::io::Reader)>("scanIdentifier"), //
		jMethod<::java::util::Hashtable(::java::io::Reader)>("scanTag"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::InputStream)>("setStream"), //
		jMethod<::jvoid(::java::net::URL)>("showDocument"), //
		jMethod<::jvoid(::java::net::URL, ::java::lang::String)>("showDocument"), //
		jMethod<::jvoid(::java::lang::String)>("showStatus"), //
		jMethod<::jvoid(::java::io::Reader)>("skipSpace"), //
		jMethod<::jvoid()>("updateAtts"), //
	};

	template<typename R = ::java::awt::MenuItem, typename... Args>
	auto addMenuItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addMenuItem")] != -1);
		return call<R>("addMenuItem", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto countApplets(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("countApplets")] != -1);
		return scall<R>("countApplets", std::forward<Args>(args)...);
	}

	template<typename R = ::java::applet::Applet, typename... Args>
	auto getApplet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getApplet")] != -1);
		return call<R>("getApplet", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto getApplets(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getApplets")] != -1);
		return call<R>("getApplets", std::forward<Args>(args)...);
	}

	template<typename R = ::java::applet::AudioClip, typename... Args>
	auto getAudioClip(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAudioClip")] != -1);
		return call<R>("getAudioClip", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Image, typename... Args>
	auto getImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getImage")] != -1);
		return call<R>("getImage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	auto getStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStream")] != -1);
		return call<R>("getStream", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto getStreamKeys(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStreamKeys")] != -1);
		return call<R>("getStreamKeys", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto main(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("main")] != -1);
		return scall<R>("main", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto networkProperties(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("networkProperties")] != -1);
		return scall<R>("networkProperties", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto parse(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parse")] != -1);
		return scall<R>("parse", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto print(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("print")] != -1);
		return call<R>("print", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto printTag(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("printTag")] != -1);
		return scall<R>("printTag", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto processUserAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("processUserAction")] != -1);
		return call<R>("processUserAction", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto scanIdentifier(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("scanIdentifier")] != -1);
		return scall<R>("scanIdentifier", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Hashtable, typename... Args>
	static auto scanTag(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("scanTag")] != -1);
		return scall<R>("scanTag", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setStream")] != -1);
		return call<R>("setStream", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto showDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("showDocument")] != -1);
		return call<R>("showDocument", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto showStatus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("showStatus")] != -1);
		return call<R>("showStatus", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto skipSpace(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("skipSpace")] != -1);
		return scall<R>("skipSpace", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateAtts(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateAtts")] != -1);
		return call<R>("updateAtts", std::forward<Args>(args)...);
	}

};

#endif
