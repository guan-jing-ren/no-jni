#ifndef sun_applet_AppletAudioClip_HPP
#define sun_applet_AppletAudioClip_HPP

#include "../../jfwd_decl.hpp"

class ::sun::applet::AppletAudioClip : public jObject<::sun::applet::AppletAudioClip, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_applet / "AppletAudioClip";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::net::URL)>(), //
		jConstructor<::jvoid(::java::net::URLConnection)>(), //
		jConstructor<::jvoid(::jbyte *)>(), //
		jMethod<::jvoid()>("loop"), //
		jMethod<::jvoid()>("play"), //
		jMethod<::jvoid()>("stop"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto loop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("loop")] != -1);
		return call<R>("loop", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto play(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("play")] != -1);
		return call<R>("play", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto stop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stop")] != -1);
		return call<R>("stop", std::forward<Args>(args)...);
	}

};

#endif
