#ifndef sun_applet_AppletEventMulticaster_HPP
#define sun_applet_AppletEventMulticaster_HPP

#include "../../jfwd_decl.hpp"

class ::sun::applet::AppletEventMulticaster : public jObject<::sun::applet::AppletEventMulticaster, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_applet / "AppletEventMulticaster";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::sun::applet::AppletListener, ::sun::applet::AppletListener)>(), //
		jMethod<::sun::applet::AppletListener(::sun::applet::AppletListener, ::sun::applet::AppletListener)>("add"), //
		jMethod<::jvoid(::sun::applet::AppletEvent)>("appletStateChanged"), //
		jMethod<::sun::applet::AppletListener(::sun::applet::AppletListener, ::sun::applet::AppletListener)>("remove"), //
	};

	template<typename R = ::sun::applet::AppletListener, typename... Args>
	static auto add(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return scall<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto appletStateChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("appletStateChanged")] != -1);
		return call<R>("appletStateChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::applet::AppletListener, typename... Args>
	static auto remove(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return scall<R>("remove", std::forward<Args>(args)...);
	}

};

#endif
