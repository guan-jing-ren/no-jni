#ifndef sun_applet_AppletViewerPanel_HPP
#define sun_applet_AppletViewerPanel_HPP

#include "../../jfwd_decl.hpp"

class ::sun::applet::AppletViewerPanel : public jObject<::sun::applet::AppletViewerPanel, ::sun::applet::AppletPanel> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_applet / "AppletViewerPanel";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::applet::AppletContext()>("getAppletContext"), //
		jMethod<::java::lang::String()>("getCode"), //
		jMethod<::java::net::URL()>("getCodeBase"), //
		jMethod<::java::net::URL()>("getDocumentBase"), //
		jMethod<::jint()>("getHeight"), //
		jMethod<::java::lang::String()>("getJarFiles"), //
		jMethod<::java::lang::String(::java::lang::String)>("getParameter"), //
		jMethod<::java::lang::String()>("getSerializedObject"), //
		jMethod<::jint()>("getWidth"), //
		jMethod<::jboolean()>("hasInitialFocus"), //
	};

	template<typename R = ::java::applet::AppletContext, typename... Args>
	auto getAppletContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAppletContext")] != -1);
		return call<R>("getAppletContext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCode")] != -1);
		return call<R>("getCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::URL, typename... Args>
	auto getCodeBase(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCodeBase")] != -1);
		return call<R>("getCodeBase", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::URL, typename... Args>
	auto getDocumentBase(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDocumentBase")] != -1);
		return call<R>("getDocumentBase", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeight")] != -1);
		return call<R>("getHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getJarFiles(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJarFiles")] != -1);
		return call<R>("getJarFiles", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getParameter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParameter")] != -1);
		return call<R>("getParameter", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSerializedObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSerializedObject")] != -1);
		return call<R>("getSerializedObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasInitialFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasInitialFocus")] != -1);
		return call<R>("hasInitialFocus", std::forward<Args>(args)...);
	}

};

#endif
