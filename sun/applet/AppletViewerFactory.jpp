#ifndef sun_applet_AppletViewerFactory_HPP
#define sun_applet_AppletViewerFactory_HPP

#include "../../jfwd_decl.hpp"

class ::sun::applet::AppletViewerFactory : public jObject<::sun::applet::AppletViewerFactory, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_applet / "AppletViewerFactory";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::sun::applet::AppletViewer(::jint, ::jint, ::java::net::URL, ::java::util::Hashtable)>("createAppletViewer"), //
		jMethod<::java::awt::MenuBar()>("getBaseMenuBar"), //
		jMethod<::jboolean()>("isStandalone"), //
	};

	template<typename R = ::sun::applet::AppletViewer, typename... Args>
	auto createAppletViewer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createAppletViewer")] != -1);
		return call<R>("createAppletViewer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::MenuBar, typename... Args>
	auto getBaseMenuBar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBaseMenuBar")] != -1);
		return call<R>("getBaseMenuBar", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isStandalone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isStandalone")] != -1);
		return call<R>("isStandalone", std::forward<Args>(args)...);
	}

};

#endif
