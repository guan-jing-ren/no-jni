#ifndef sun_corba_Bridge_HPP
#define sun_corba_Bridge_HPP

#include "../../jfwd_decl.hpp"

class ::sun::corba::Bridge : public jObject<::sun::corba::Bridge, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_corba / "Bridge";

	constexpr static Enume field_signatures{
		jField<::jlong>("INVALID_FIELD_OFFSET"), //
	};

	template<typename F = ::jlong>
	static auto INVALID_FIELD_OFFSET() {
		static_assert(field_signatures[jField<F>("INVALID_FIELD_OFFSET")] != -1);
		return sat<F>("INVALID_FIELD_OFFSET");
	}

	constexpr static Enume method_signatures{
		jMethod<::sun::corba::Bridge()>("get"), //
		jMethod<::jboolean(::java::lang::Object, ::jlong)>("getBoolean"), //
		jMethod<::jbyte(::java::lang::Object, ::jlong)>("getByte"), //
		jMethod<::jchar(::java::lang::Object, ::jlong)>("getChar"), //
		jMethod<::jdouble(::java::lang::Object, ::jlong)>("getDouble"), //
		jMethod<::jfloat(::java::lang::Object, ::jlong)>("getFloat"), //
		jMethod<::jint(::java::lang::Object, ::jlong)>("getInt"), //
		jMethod<::java::lang::ClassLoader()>("getLatestUserDefinedLoader"), //
		jMethod<::jlong(::java::lang::Object, ::jlong)>("getLong"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::jlong)>("getObject"), //
		jMethod<::jshort(::java::lang::Object, ::jlong)>("getShort"), //
		jMethod<::java::lang::reflect::Constructor(::java::lang::Class, ::java::lang::reflect::Constructor)>("newConstructorForSerialization"), //
		jMethod<::jlong(::java::lang::reflect::Field)>("objectFieldOffset"), //
		jMethod<::jvoid(::java::lang::Object, ::jlong, ::jboolean)>("putBoolean"), //
		jMethod<::jvoid(::java::lang::Object, ::jlong, ::jbyte)>("putByte"), //
		jMethod<::jvoid(::java::lang::Object, ::jlong, ::jchar)>("putChar"), //
		jMethod<::jvoid(::java::lang::Object, ::jlong, ::jdouble)>("putDouble"), //
		jMethod<::jvoid(::java::lang::Object, ::jlong, ::jfloat)>("putFloat"), //
		jMethod<::jvoid(::java::lang::Object, ::jlong, ::jint)>("putInt"), //
		jMethod<::jvoid(::java::lang::Object, ::jlong, ::jlong)>("putLong"), //
		jMethod<::jvoid(::java::lang::Object, ::jlong, ::java::lang::Object)>("putObject"), //
		jMethod<::jvoid(::java::lang::Object, ::jlong, ::jshort)>("putShort"), //
		jMethod<::jvoid(::java::lang::Throwable)>("throwException"), //
	};

	template<typename R = ::sun::corba::Bridge, typename... Args>
	static auto get(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return scall<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getBoolean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBoolean")] != -1);
		return call<R>("getBoolean", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto getByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getByte")] != -1);
		return call<R>("getByte", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto getChar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChar")] != -1);
		return call<R>("getChar", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDouble")] != -1);
		return call<R>("getDouble", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getFloat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFloat")] != -1);
		return call<R>("getFloat", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInt")] != -1);
		return call<R>("getInt", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::ClassLoader, typename... Args>
	auto getLatestUserDefinedLoader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLatestUserDefinedLoader")] != -1);
		return call<R>("getLatestUserDefinedLoader", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLong")] != -1);
		return call<R>("getLong", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObject")] != -1);
		return call<R>("getObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto getShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getShort")] != -1);
		return call<R>("getShort", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::Constructor, typename... Args>
	auto newConstructorForSerialization(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newConstructorForSerialization")] != -1);
		return call<R>("newConstructorForSerialization", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto objectFieldOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("objectFieldOffset")] != -1);
		return call<R>("objectFieldOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putBoolean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putBoolean")] != -1);
		return call<R>("putBoolean", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putByte")] != -1);
		return call<R>("putByte", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putChar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putChar")] != -1);
		return call<R>("putChar", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putDouble")] != -1);
		return call<R>("putDouble", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putFloat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putFloat")] != -1);
		return call<R>("putFloat", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putInt")] != -1);
		return call<R>("putInt", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putLong")] != -1);
		return call<R>("putLong", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putObject")] != -1);
		return call<R>("putObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putShort")] != -1);
		return call<R>("putShort", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto throwException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("throwException")] != -1);
		return call<R>("throwException", std::forward<Args>(args)...);
	}

};

#endif
