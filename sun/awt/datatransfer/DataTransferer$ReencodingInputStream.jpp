#ifndef sun_awt_datatransfer_DataTransferer$ReencodingInputStream_HPP
#define sun_awt_datatransfer_DataTransferer$ReencodingInputStream_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::datatransfer::DataTransferer$ReencodingInputStream : public jObject<::sun::awt::datatransfer::DataTransferer$ReencodingInputStream, ::java::io::InputStream> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_datatransfer / "DataTransferer$ReencodingInputStream";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::sun::awt::datatransfer::DataTransferer, ::java::io::InputStream, ::jlong, ::java::lang::String, ::java::awt::datatransfer::Transferable)>(), //
		jMethod<::jint()>("available"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::jint()>("read"), //
	};

	template<typename R = ::jint, typename... Args>
	auto available(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("available")] != -1);
		return call<R>("available", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("read")] != -1);
		return call<R>("read", std::forward<Args>(args)...);
	}

};

#endif
