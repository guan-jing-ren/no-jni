#ifndef sun_awt_datatransfer_TransferableProxy_HPP
#define sun_awt_datatransfer_TransferableProxy_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::datatransfer::TransferableProxy : public jObject<::sun::awt::datatransfer::TransferableProxy, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_datatransfer / "TransferableProxy";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::datatransfer::Transferable, ::jboolean)>(), //
		jMethod<::java::lang::Object(::java::awt::datatransfer::DataFlavor)>("getTransferData"), //
		jMethod<::java::awt::datatransfer::DataFlavor *()>("getTransferDataFlavors"), //
		jMethod<::jboolean(::java::awt::datatransfer::DataFlavor)>("isDataFlavorSupported"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto getTransferData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransferData")] != -1);
		return call<R>("getTransferData", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::datatransfer::DataFlavor *, typename... Args>
	auto getTransferDataFlavors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransferDataFlavors")] != -1);
		return call<R>("getTransferDataFlavors", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDataFlavorSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDataFlavorSupported")] != -1);
		return call<R>("isDataFlavorSupported", std::forward<Args>(args)...);
	}

};

#endif
