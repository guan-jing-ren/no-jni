#ifndef sun_awt_datatransfer_SunClipboard_HPP
#define sun_awt_datatransfer_SunClipboard_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::datatransfer::SunClipboard : public jObject<::sun::awt::datatransfer::SunClipboard, ::java::awt::datatransfer::Clipboard> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_datatransfer / "SunClipboard";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
		jMethod<::jvoid(::java::awt::datatransfer::FlavorListener)>("addFlavorListener"), //
		jMethod<::jboolean()>("areFlavorListenersRegistered"), //
		jMethod<::jvoid()>("closeClipboard"), //
		jMethod<::java::awt::datatransfer::DataFlavor *()>("getAvailableDataFlavors"), //
		jMethod<::java::awt::datatransfer::Transferable(::java::lang::Object)>("getContents"), //
		jMethod<::java::lang::Object(::java::awt::datatransfer::DataFlavor)>("getData"), //
		jMethod<::java::awt::datatransfer::FlavorTable()>("getDefaultFlavorTable"), //
		jMethod<::java::awt::datatransfer::FlavorListener *()>("getFlavorListeners"), //
		jMethod<::jlong()>("getID"), //
		jMethod<::jboolean(::java::awt::datatransfer::DataFlavor)>("isDataFlavorAvailable"), //
		jMethod<::jvoid(::sun::awt::datatransfer::SunClipboard)>("openClipboard"), //
		jMethod<::jvoid(::java::beans::PropertyChangeEvent)>("propertyChange"), //
		jMethod<::jvoid(::java::awt::datatransfer::FlavorListener)>("removeFlavorListener"), //
		jMethod<::jvoid(::java::awt::datatransfer::Transferable, ::java::awt::datatransfer::ClipboardOwner)>("setContents"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addFlavorListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addFlavorListener")] != -1);
		return call<R>("addFlavorListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto areFlavorListenersRegistered(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("areFlavorListenersRegistered")] != -1);
		return call<R>("areFlavorListenersRegistered", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto closeClipboard(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("closeClipboard")] != -1);
		return call<R>("closeClipboard", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::datatransfer::DataFlavor *, typename... Args>
	auto getAvailableDataFlavors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAvailableDataFlavors")] != -1);
		return call<R>("getAvailableDataFlavors", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::datatransfer::Transferable, typename... Args>
	auto getContents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContents")] != -1);
		return call<R>("getContents", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getData")] != -1);
		return call<R>("getData", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::datatransfer::FlavorTable, typename... Args>
	static auto getDefaultFlavorTable(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultFlavorTable")] != -1);
		return scall<R>("getDefaultFlavorTable", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::datatransfer::FlavorListener *, typename... Args>
	auto getFlavorListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFlavorListeners")] != -1);
		return call<R>("getFlavorListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getID")] != -1);
		return call<R>("getID", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDataFlavorAvailable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDataFlavorAvailable")] != -1);
		return call<R>("isDataFlavorAvailable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto openClipboard(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("openClipboard")] != -1);
		return call<R>("openClipboard", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto propertyChange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("propertyChange")] != -1);
		return call<R>("propertyChange", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeFlavorListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeFlavorListener")] != -1);
		return call<R>("removeFlavorListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setContents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setContents")] != -1);
		return call<R>("setContents", std::forward<Args>(args)...);
	}

};

#endif
