#ifndef sun_awt_CausedFocusEvent_HPP
#define sun_awt_CausedFocusEvent_HPP

#include "../../jfwd_decl.hpp"

class ::sun::awt::CausedFocusEvent : public jObject<::sun::awt::CausedFocusEvent, ::java::awt::event::FocusEvent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt / "CausedFocusEvent";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::Component, ::jint, ::jboolean, ::java::awt::Component, ::sun::awt::CausedFocusEvent$Cause)>(), //
		jMethod<::sun::awt::CausedFocusEvent$Cause()>("getCause"), //
		jMethod<::java::awt::event::FocusEvent(::java::awt::event::FocusEvent, ::java::awt::Component)>("retarget"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::sun::awt::CausedFocusEvent$Cause, typename... Args>
	auto getCause(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCause")] != -1);
		return call<R>("getCause", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::FocusEvent, typename... Args>
	static auto retarget(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("retarget")] != -1);
		return scall<R>("retarget", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
