#ifndef sun_awt_OSInfo_HPP
#define sun_awt_OSInfo_HPP

#include "../../jfwd_decl.hpp"

class ::sun::awt::OSInfo : public jObject<::sun::awt::OSInfo, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt / "OSInfo";

	constexpr static Enume field_signatures{
		jField<::sun::awt::OSInfo$WindowsVersion>("WINDOWS_2000"), //
		jField<::sun::awt::OSInfo$WindowsVersion>("WINDOWS_2003"), //
		jField<::sun::awt::OSInfo$WindowsVersion>("WINDOWS_95"), //
		jField<::sun::awt::OSInfo$WindowsVersion>("WINDOWS_98"), //
		jField<::sun::awt::OSInfo$WindowsVersion>("WINDOWS_ME"), //
		jField<::sun::awt::OSInfo$WindowsVersion>("WINDOWS_UNKNOWN"), //
		jField<::sun::awt::OSInfo$WindowsVersion>("WINDOWS_VISTA"), //
		jField<::sun::awt::OSInfo$WindowsVersion>("WINDOWS_XP"), //
	};

	template<typename F = ::sun::awt::OSInfo$WindowsVersion>
	static auto WINDOWS_2000() {
		static_assert(field_signatures[jField<F>("WINDOWS_2000")] != -1);
		return sat<F>("WINDOWS_2000");
	}

	template<typename F = ::sun::awt::OSInfo$WindowsVersion>
	static auto WINDOWS_2003() {
		static_assert(field_signatures[jField<F>("WINDOWS_2003")] != -1);
		return sat<F>("WINDOWS_2003");
	}

	template<typename F = ::sun::awt::OSInfo$WindowsVersion>
	static auto WINDOWS_95() {
		static_assert(field_signatures[jField<F>("WINDOWS_95")] != -1);
		return sat<F>("WINDOWS_95");
	}

	template<typename F = ::sun::awt::OSInfo$WindowsVersion>
	static auto WINDOWS_98() {
		static_assert(field_signatures[jField<F>("WINDOWS_98")] != -1);
		return sat<F>("WINDOWS_98");
	}

	template<typename F = ::sun::awt::OSInfo$WindowsVersion>
	static auto WINDOWS_ME() {
		static_assert(field_signatures[jField<F>("WINDOWS_ME")] != -1);
		return sat<F>("WINDOWS_ME");
	}

	template<typename F = ::sun::awt::OSInfo$WindowsVersion>
	static auto WINDOWS_UNKNOWN() {
		static_assert(field_signatures[jField<F>("WINDOWS_UNKNOWN")] != -1);
		return sat<F>("WINDOWS_UNKNOWN");
	}

	template<typename F = ::sun::awt::OSInfo$WindowsVersion>
	static auto WINDOWS_VISTA() {
		static_assert(field_signatures[jField<F>("WINDOWS_VISTA")] != -1);
		return sat<F>("WINDOWS_VISTA");
	}

	template<typename F = ::sun::awt::OSInfo$WindowsVersion>
	static auto WINDOWS_XP() {
		static_assert(field_signatures[jField<F>("WINDOWS_XP")] != -1);
		return sat<F>("WINDOWS_XP");
	}

	constexpr static Enume method_signatures{
		jMethod<::sun::awt::OSInfo$OSType()>("getOSType"), //
		jMethod<::java::security::PrivilegedAction()>("getOSTypeAction"), //
		jMethod<::sun::awt::OSInfo$WindowsVersion()>("getWindowsVersion"), //
	};

	template<typename R = ::sun::awt::OSInfo$OSType, typename... Args>
	static auto getOSType(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOSType")] != -1);
		return scall<R>("getOSType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::PrivilegedAction, typename... Args>
	static auto getOSTypeAction(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOSTypeAction")] != -1);
		return scall<R>("getOSTypeAction", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::OSInfo$WindowsVersion, typename... Args>
	static auto getWindowsVersion(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWindowsVersion")] != -1);
		return scall<R>("getWindowsVersion", std::forward<Args>(args)...);
	}

};

#endif
