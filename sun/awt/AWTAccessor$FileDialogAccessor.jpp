#ifndef sun_awt_AWTAccessor$FileDialogAccessor_HPP
#define sun_awt_AWTAccessor$FileDialogAccessor_HPP

#include "../../jfwd_decl.hpp"

class ::sun::awt::AWTAccessor$FileDialogAccessor : public jObject<::sun::awt::AWTAccessor$FileDialogAccessor, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt / "AWTAccessor$FileDialogAccessor";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::awt::FileDialog)>("isMultipleMode"), //
		jMethod<::jvoid(::java::awt::FileDialog, ::java::lang::String)>("setDirectory"), //
		jMethod<::jvoid(::java::awt::FileDialog, ::java::lang::String)>("setFile"), //
		jMethod<::jvoid(::java::awt::FileDialog, ::java::io::File *)>("setFiles"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto isMultipleMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isMultipleMode")] != -1);
		return call<R>("isMultipleMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDirectory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDirectory")] != -1);
		return call<R>("setDirectory", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFile")] != -1);
		return call<R>("setFile", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFiles(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFiles")] != -1);
		return call<R>("setFiles", std::forward<Args>(args)...);
	}

};

#endif
