#ifndef sun_awt_AWTAccessor$SequencedEventAccessor_HPP
#define sun_awt_AWTAccessor$SequencedEventAccessor_HPP

#include "../../jfwd_decl.hpp"

class ::sun::awt::AWTAccessor$SequencedEventAccessor : public jObject<::sun::awt::AWTAccessor$SequencedEventAccessor, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt / "AWTAccessor$SequencedEventAccessor";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::awt::AWTEvent(::java::awt::AWTEvent)>("getNested"), //
		jMethod<::jboolean(::java::awt::AWTEvent)>("isSequencedEvent"), //
	};

	template<typename R = ::java::awt::AWTEvent, typename... Args>
	auto getNested(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNested")] != -1);
		return call<R>("getNested", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSequencedEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSequencedEvent")] != -1);
		return call<R>("isSequencedEvent", std::forward<Args>(args)...);
	}

};

#endif
