#ifndef sun_awt_AWTAccessor$WindowAccessor_HPP
#define sun_awt_AWTAccessor$WindowAccessor_HPP

#include "../../jfwd_decl.hpp"

class ::sun::awt::AWTAccessor$WindowAccessor : public jObject<::sun::awt::AWTAccessor$WindowAccessor, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt / "AWTAccessor$WindowAccessor";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::awt::geom::Point2D(::java::awt::Window, ::jdouble, ::jdouble, ::jdouble, ::jdouble)>("calculateSecurityWarningPosition"), //
		jMethod<::jfloat(::java::awt::Window)>("getOpacity"), //
		jMethod<::java::awt::Window *(::java::awt::Window)>("getOwnedWindows"), //
		jMethod<::java::awt::Dimension(::java::awt::Window)>("getSecurityWarningSize"), //
		jMethod<::java::awt::Shape(::java::awt::Window)>("getShape"), //
		jMethod<::jboolean(::java::awt::Window)>("isAutoRequestFocus"), //
		jMethod<::jboolean(::java::awt::Window)>("isTrayIconWindow"), //
		jMethod<::jvoid(::java::awt::Window, ::jboolean)>("setLWRequestStatus"), //
		jMethod<::jvoid(::java::awt::Window, ::jfloat)>("setOpacity"), //
		jMethod<::jvoid(::java::awt::Window, ::jboolean)>("setOpaque"), //
		jMethod<::jvoid(::java::awt::Window, ::java::awt::geom::Point2D, ::jfloat, ::jfloat)>("setSecurityWarningPosition"), //
		jMethod<::jvoid(::java::awt::Window, ::jint, ::jint)>("setSecurityWarningSize"), //
		jMethod<::jvoid(::java::awt::Window, ::java::awt::Shape)>("setShape"), //
		jMethod<::jvoid(::java::awt::Window, ::jboolean)>("setTrayIconWindow"), //
		jMethod<::jvoid(::java::awt::Window)>("updateWindow"), //
	};

	template<typename R = ::java::awt::geom::Point2D, typename... Args>
	auto calculateSecurityWarningPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("calculateSecurityWarningPosition")] != -1);
		return call<R>("calculateSecurityWarningPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getOpacity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOpacity")] != -1);
		return call<R>("getOpacity", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Window *, typename... Args>
	auto getOwnedWindows(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOwnedWindows")] != -1);
		return call<R>("getOwnedWindows", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getSecurityWarningSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSecurityWarningSize")] != -1);
		return call<R>("getSecurityWarningSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Shape, typename... Args>
	auto getShape(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getShape")] != -1);
		return call<R>("getShape", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAutoRequestFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAutoRequestFocus")] != -1);
		return call<R>("isAutoRequestFocus", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isTrayIconWindow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isTrayIconWindow")] != -1);
		return call<R>("isTrayIconWindow", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLWRequestStatus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLWRequestStatus")] != -1);
		return call<R>("setLWRequestStatus", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOpacity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOpacity")] != -1);
		return call<R>("setOpacity", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOpaque(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOpaque")] != -1);
		return call<R>("setOpaque", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSecurityWarningPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSecurityWarningPosition")] != -1);
		return call<R>("setSecurityWarningPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSecurityWarningSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSecurityWarningSize")] != -1);
		return call<R>("setSecurityWarningSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setShape(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setShape")] != -1);
		return call<R>("setShape", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTrayIconWindow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTrayIconWindow")] != -1);
		return call<R>("setTrayIconWindow", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateWindow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateWindow")] != -1);
		return call<R>("updateWindow", std::forward<Args>(args)...);
	}

};

#endif
