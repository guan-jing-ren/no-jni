#ifndef sun_awt_X11_WindowPropertyGetter_HPP
#define sun_awt_X11_WindowPropertyGetter_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::WindowPropertyGetter : public jObject<::sun::awt::X11::WindowPropertyGetter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "WindowPropertyGetter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jlong, ::sun::awt::X11::XAtom, ::jlong, ::jlong, ::jboolean, ::jlong)>(), //
		jConstructor<::jvoid(::jlong, ::sun::awt::X11::XAtom, ::jlong, ::jlong, ::jboolean, ::sun::awt::X11::XAtom)>(), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jint()>("execute"), //
		jMethod<::jint(::sun::awt::X11::XErrorHandler)>("execute"), //
		jMethod<::jint()>("getActualFormat"), //
		jMethod<::jlong()>("getActualType"), //
		jMethod<::jlong()>("getBytesAfter"), //
		jMethod<::jlong()>("getData"), //
		jMethod<::jint()>("getNumberOfItems"), //
		jMethod<::jboolean()>("isDisposed"), //
		jMethod<::jboolean()>("isExecuted"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto execute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("execute")] != -1);
		return call<R>("execute", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getActualFormat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getActualFormat")] != -1);
		return call<R>("getActualFormat", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getActualType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getActualType")] != -1);
		return call<R>("getActualType", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getBytesAfter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBytesAfter")] != -1);
		return call<R>("getBytesAfter", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getData")] != -1);
		return call<R>("getData", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumberOfItems(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNumberOfItems")] != -1);
		return call<R>("getNumberOfItems", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDisposed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDisposed")] != -1);
		return call<R>("isDisposed", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isExecuted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isExecuted")] != -1);
		return call<R>("isExecuted", std::forward<Args>(args)...);
	}

};

#endif
