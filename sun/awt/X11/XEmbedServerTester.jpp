#ifndef sun_awt_X11_XEmbedServerTester_HPP
#define sun_awt_X11_XEmbedServerTester_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::XEmbedServerTester : public jObject<::sun::awt::X11::XEmbedServerTester, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "XEmbedServerTester";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("dispatchEvent"), //
		jMethod<::sun::awt::X11::XEmbedServerTester(::java::awt::Rectangle *, ::jlong)>("getTester"), //
		jMethod<::jvoid()>("test1_1"), //
		jMethod<::jvoid()>("test1_2"), //
		jMethod<::jvoid()>("test1_3"), //
		jMethod<::jvoid()>("test1_4"), //
		jMethod<::jvoid()>("test1_5"), //
		jMethod<::jvoid()>("test1_6"), //
		jMethod<::jvoid()>("test1_7"), //
		jMethod<::jvoid()>("test2_5"), //
		jMethod<::jvoid()>("test2_6"), //
		jMethod<::jvoid()>("test3_1"), //
		jMethod<::jvoid()>("test3_3"), //
		jMethod<::jvoid()>("test3_4"), //
		jMethod<::jvoid()>("test3_5"), //
		jMethod<::jvoid()>("test3_6"), //
		jMethod<::jvoid()>("test4_1"), //
		jMethod<::jvoid()>("test4_2"), //
		jMethod<::jvoid()>("test4_3"), //
		jMethod<::jvoid()>("test4_4"), //
		jMethod<::jvoid()>("test6_1_1"), //
		jMethod<::jvoid()>("test6_1_2"), //
		jMethod<::jvoid()>("test6_1_3"), //
		jMethod<::jvoid()>("test6_1_4"), //
		jMethod<::jvoid()>("test6_2_1"), //
		jMethod<::jvoid()>("test6_2_2"), //
		jMethod<::jvoid()>("test6_2_3"), //
		jMethod<::jvoid()>("test6_2_4"), //
		jMethod<::jvoid()>("test7_1"), //
		jMethod<::jvoid()>("test7_2"), //
		jMethod<::jvoid()>("test9_1"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto dispatchEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispatchEvent")] != -1);
		return call<R>("dispatchEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XEmbedServerTester, typename... Args>
	static auto getTester(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTester")] != -1);
		return scall<R>("getTester", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto test1_1(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("test1_1")] != -1);
		return call<R>("test1_1", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto test1_2(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("test1_2")] != -1);
		return call<R>("test1_2", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto test1_3(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("test1_3")] != -1);
		return call<R>("test1_3", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto test1_4(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("test1_4")] != -1);
		return call<R>("test1_4", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto test1_5(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("test1_5")] != -1);
		return call<R>("test1_5", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto test1_6(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("test1_6")] != -1);
		return call<R>("test1_6", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto test1_7(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("test1_7")] != -1);
		return call<R>("test1_7", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto test2_5(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("test2_5")] != -1);
		return call<R>("test2_5", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto test2_6(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("test2_6")] != -1);
		return call<R>("test2_6", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto test3_1(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("test3_1")] != -1);
		return call<R>("test3_1", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto test3_3(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("test3_3")] != -1);
		return call<R>("test3_3", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto test3_4(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("test3_4")] != -1);
		return call<R>("test3_4", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto test3_5(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("test3_5")] != -1);
		return call<R>("test3_5", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto test3_6(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("test3_6")] != -1);
		return call<R>("test3_6", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto test4_1(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("test4_1")] != -1);
		return call<R>("test4_1", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto test4_2(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("test4_2")] != -1);
		return call<R>("test4_2", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto test4_3(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("test4_3")] != -1);
		return call<R>("test4_3", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto test4_4(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("test4_4")] != -1);
		return call<R>("test4_4", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto test6_1_1(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("test6_1_1")] != -1);
		return call<R>("test6_1_1", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto test6_1_2(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("test6_1_2")] != -1);
		return call<R>("test6_1_2", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto test6_1_3(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("test6_1_3")] != -1);
		return call<R>("test6_1_3", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto test6_1_4(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("test6_1_4")] != -1);
		return call<R>("test6_1_4", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto test6_2_1(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("test6_2_1")] != -1);
		return call<R>("test6_2_1", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto test6_2_2(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("test6_2_2")] != -1);
		return call<R>("test6_2_2", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto test6_2_3(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("test6_2_3")] != -1);
		return call<R>("test6_2_3", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto test6_2_4(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("test6_2_4")] != -1);
		return call<R>("test6_2_4", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto test7_1(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("test7_1")] != -1);
		return call<R>("test7_1", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto test7_2(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("test7_2")] != -1);
		return call<R>("test7_2", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto test9_1(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("test9_1")] != -1);
		return call<R>("test9_1", std::forward<Args>(args)...);
	}

};

#endif
