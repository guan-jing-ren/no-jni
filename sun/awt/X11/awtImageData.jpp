#ifndef sun_awt_X11_awtImageData_HPP
#define sun_awt_X11_awtImageData_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::awtImageData : public jObject<::sun::awt::X11::awtImageData, ::sun::awt::X11::XWrapperBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "awtImageData";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jlong)>(), //
		jMethod<::sun::awt::X11::XEvent()>("clone"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jint()>("getDataSize"), //
		jMethod<::jlong()>("getPData"), //
		jMethod<::jint()>("getSize"), //
		jMethod<::jint()>("get_Depth"), //
		jMethod<::jlong()>("get_clrdata"), //
		jMethod<::jlong(::jint)>("get_clrdata"), //
		jMethod<::jlong()>("get_convert"), //
		jMethod<::jlong(::jint)>("get_convert"), //
		jMethod<::sun::awt::X11::XPixmapFormatValues()>("get_wsImageFormat"), //
		jMethod<::jvoid(::jint)>("set_Depth"), //
		jMethod<::jvoid(::jlong)>("set_clrdata"), //
		jMethod<::jvoid(::jint, ::jlong)>("set_convert"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid()>("zero"), //
	};

	template<typename R = ::sun::awt::X11::XEvent, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDataSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDataSize")] != -1);
		return call<R>("getDataSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getPData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPData")] != -1);
		return call<R>("getPData", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getSize(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return scall<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_Depth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_Depth")] != -1);
		return call<R>("get_Depth", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_clrdata(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_clrdata")] != -1);
		return call<R>("get_clrdata", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_convert(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_convert")] != -1);
		return call<R>("get_convert", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XPixmapFormatValues, typename... Args>
	auto get_wsImageFormat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_wsImageFormat")] != -1);
		return call<R>("get_wsImageFormat", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_Depth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_Depth")] != -1);
		return call<R>("set_Depth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_clrdata(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_clrdata")] != -1);
		return call<R>("set_clrdata", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_convert(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_convert")] != -1);
		return call<R>("set_convert", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto zero(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("zero")] != -1);
		return call<R>("zero", std::forward<Args>(args)...);
	}

};

#endif
