#ifndef sun_awt_X11_XKeySymConstants_HPP
#define sun_awt_X11_XKeySymConstants_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::XKeySymConstants : public jObject<::sun::awt::X11::XKeySymConstants, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "XKeySymConstants";

	constexpr static Enume field_signatures{
		jField<::jlong>("DXK_acute_accent"), //
		jField<::jlong>("DXK_cedilla_accent"), //
		jField<::jlong>("DXK_circumflex_accent"), //
		jField<::jlong>("DXK_diaeresis"), //
		jField<::jlong>("DXK_grave_accent"), //
		jField<::jlong>("DXK_ring_accent"), //
		jField<::jlong>("DXK_tilde"), //
		jField<::jlong>("SunXK_Again"), //
		jField<::jlong>("SunXK_AltGraph"), //
		jField<::jlong>("SunXK_AudioLowerVolume"), //
		jField<::jlong>("SunXK_AudioMute"), //
		jField<::jlong>("SunXK_AudioRaiseVolume"), //
		jField<::jlong>("SunXK_Compose"), //
		jField<::jlong>("SunXK_Copy"), //
		jField<::jlong>("SunXK_Cut"), //
		jField<::jlong>("SunXK_F36"), //
		jField<::jlong>("SunXK_F37"), //
		jField<::jlong>("SunXK_FA_Acute"), //
		jField<::jlong>("SunXK_FA_Cedilla"), //
		jField<::jlong>("SunXK_FA_Circum"), //
		jField<::jlong>("SunXK_FA_Diaeresis"), //
		jField<::jlong>("SunXK_FA_Grave"), //
		jField<::jlong>("SunXK_FA_Tilde"), //
		jField<::jlong>("SunXK_Find"), //
		jField<::jlong>("SunXK_Front"), //
		jField<::jlong>("SunXK_Open"), //
		jField<::jlong>("SunXK_PageDown"), //
		jField<::jlong>("SunXK_PageUp"), //
		jField<::jlong>("SunXK_Paste"), //
		jField<::jlong>("SunXK_PowerSwitch"), //
		jField<::jlong>("SunXK_PowerSwitchShift"), //
		jField<::jlong>("SunXK_Print_Screen"), //
		jField<::jlong>("SunXK_Props"), //
		jField<::jlong>("SunXK_Stop"), //
		jField<::jlong>("SunXK_Sys_Req"), //
		jField<::jlong>("SunXK_Undo"), //
		jField<::jlong>("SunXK_VideoDegauss"), //
		jField<::jlong>("SunXK_VideoLowerBrightness"), //
		jField<::jlong>("SunXK_VideoRaiseBrightness"), //
		jField<::jlong>("XK_0"), //
		jField<::jlong>("XK_1"), //
		jField<::jlong>("XK_2"), //
		jField<::jlong>("XK_3"), //
		jField<::jlong>("XK_3270_AltCursor"), //
		jField<::jlong>("XK_3270_Attn"), //
		jField<::jlong>("XK_3270_BackTab"), //
		jField<::jlong>("XK_3270_ChangeScreen"), //
		jField<::jlong>("XK_3270_Copy"), //
		jField<::jlong>("XK_3270_CursorBlink"), //
		jField<::jlong>("XK_3270_CursorSelect"), //
		jField<::jlong>("XK_3270_DeleteWord"), //
		jField<::jlong>("XK_3270_Duplicate"), //
		jField<::jlong>("XK_3270_Enter"), //
		jField<::jlong>("XK_3270_EraseEOF"), //
		jField<::jlong>("XK_3270_EraseInput"), //
		jField<::jlong>("XK_3270_ExSelect"), //
		jField<::jlong>("XK_3270_FieldMark"), //
		jField<::jlong>("XK_3270_Ident"), //
		jField<::jlong>("XK_3270_Jump"), //
		jField<::jlong>("XK_3270_KeyClick"), //
		jField<::jlong>("XK_3270_Left2"), //
		jField<::jlong>("XK_3270_PA1"), //
		jField<::jlong>("XK_3270_PA2"), //
		jField<::jlong>("XK_3270_PA3"), //
		jField<::jlong>("XK_3270_Play"), //
		jField<::jlong>("XK_3270_PrintScreen"), //
		jField<::jlong>("XK_3270_Quit"), //
		jField<::jlong>("XK_3270_Record"), //
		jField<::jlong>("XK_3270_Reset"), //
		jField<::jlong>("XK_3270_Right2"), //
		jField<::jlong>("XK_3270_Rule"), //
		jField<::jlong>("XK_3270_Setup"), //
		jField<::jlong>("XK_3270_Test"), //
		jField<::jlong>("XK_4"), //
		jField<::jlong>("XK_5"), //
		jField<::jlong>("XK_6"), //
		jField<::jlong>("XK_7"), //
		jField<::jlong>("XK_8"), //
		jField<::jlong>("XK_9"), //
		jField<::jlong>("XK_A"), //
		jField<::jlong>("XK_AE"), //
		jField<::jlong>("XK_Aacute"), //
		jField<::jlong>("XK_Abreve"), //
		jField<::jlong>("XK_AccessX_Enable"), //
		jField<::jlong>("XK_AccessX_Feedback_Enable"), //
		jField<::jlong>("XK_Acircumflex"), //
		jField<::jlong>("XK_Adiaeresis"), //
		jField<::jlong>("XK_Agrave"), //
		jField<::jlong>("XK_Alt_L"), //
		jField<::jlong>("XK_Alt_R"), //
		jField<::jlong>("XK_Amacron"), //
		jField<::jlong>("XK_Aogonek"), //
		jField<::jlong>("XK_Arabic_ain"), //
		jField<::jlong>("XK_Arabic_alef"), //
		jField<::jlong>("XK_Arabic_alefmaksura"), //
		jField<::jlong>("XK_Arabic_beh"), //
		jField<::jlong>("XK_Arabic_comma"), //
		jField<::jlong>("XK_Arabic_dad"), //
		jField<::jlong>("XK_Arabic_dal"), //
		jField<::jlong>("XK_Arabic_damma"), //
		jField<::jlong>("XK_Arabic_dammatan"), //
		jField<::jlong>("XK_Arabic_fatha"), //
		jField<::jlong>("XK_Arabic_fathatan"), //
		jField<::jlong>("XK_Arabic_feh"), //
		jField<::jlong>("XK_Arabic_ghain"), //
		jField<::jlong>("XK_Arabic_ha"), //
		jField<::jlong>("XK_Arabic_hah"), //
		jField<::jlong>("XK_Arabic_hamza"), //
		jField<::jlong>("XK_Arabic_hamzaonalef"), //
		jField<::jlong>("XK_Arabic_hamzaonwaw"), //
		jField<::jlong>("XK_Arabic_hamzaonyeh"), //
		jField<::jlong>("XK_Arabic_hamzaunderalef"), //
		jField<::jlong>("XK_Arabic_heh"), //
		jField<::jlong>("XK_Arabic_jeem"), //
		jField<::jlong>("XK_Arabic_kaf"), //
		jField<::jlong>("XK_Arabic_kasra"), //
		jField<::jlong>("XK_Arabic_kasratan"), //
		jField<::jlong>("XK_Arabic_khah"), //
		jField<::jlong>("XK_Arabic_lam"), //
		jField<::jlong>("XK_Arabic_maddaonalef"), //
		jField<::jlong>("XK_Arabic_meem"), //
		jField<::jlong>("XK_Arabic_noon"), //
		jField<::jlong>("XK_Arabic_qaf"), //
		jField<::jlong>("XK_Arabic_question_mark"), //
		jField<::jlong>("XK_Arabic_ra"), //
		jField<::jlong>("XK_Arabic_sad"), //
		jField<::jlong>("XK_Arabic_seen"), //
		jField<::jlong>("XK_Arabic_semicolon"), //
		jField<::jlong>("XK_Arabic_shadda"), //
		jField<::jlong>("XK_Arabic_sheen"), //
		jField<::jlong>("XK_Arabic_sukun"), //
		jField<::jlong>("XK_Arabic_switch"), //
		jField<::jlong>("XK_Arabic_tah"), //
		jField<::jlong>("XK_Arabic_tatweel"), //
		jField<::jlong>("XK_Arabic_teh"), //
		jField<::jlong>("XK_Arabic_tehmarbuta"), //
		jField<::jlong>("XK_Arabic_thal"), //
		jField<::jlong>("XK_Arabic_theh"), //
		jField<::jlong>("XK_Arabic_waw"), //
		jField<::jlong>("XK_Arabic_yeh"), //
		jField<::jlong>("XK_Arabic_zah"), //
		jField<::jlong>("XK_Arabic_zain"), //
		jField<::jlong>("XK_Aring"), //
		jField<::jlong>("XK_Atilde"), //
		jField<::jlong>("XK_AudibleBell_Enable"), //
		jField<::jlong>("XK_B"), //
		jField<::jlong>("XK_BackSpace"), //
		jField<::jlong>("XK_Begin"), //
		jField<::jlong>("XK_BounceKeys_Enable"), //
		jField<::jlong>("XK_Break"), //
		jField<::jlong>("XK_Byelorussian_SHORTU"), //
		jField<::jlong>("XK_Byelorussian_shortu"), //
		jField<::jlong>("XK_C"), //
		jField<::jlong>("XK_Cabovedot"), //
		jField<::jlong>("XK_Cacute"), //
		jField<::jlong>("XK_Cancel"), //
		jField<::jlong>("XK_Caps_Lock"), //
		jField<::jlong>("XK_Ccaron"), //
		jField<::jlong>("XK_Ccedilla"), //
		jField<::jlong>("XK_Ccircumflex"), //
		jField<::jlong>("XK_Clear"), //
		jField<::jlong>("XK_Codeinput"), //
		jField<::jlong>("XK_ColonSign"), //
		jField<::jlong>("XK_Control_L"), //
		jField<::jlong>("XK_Control_R"), //
		jField<::jlong>("XK_CruzeiroSign"), //
		jField<::jlong>("XK_Cyrillic_A"), //
		jField<::jlong>("XK_Cyrillic_BE"), //
		jField<::jlong>("XK_Cyrillic_CHE"), //
		jField<::jlong>("XK_Cyrillic_DE"), //
		jField<::jlong>("XK_Cyrillic_DZHE"), //
		jField<::jlong>("XK_Cyrillic_E"), //
		jField<::jlong>("XK_Cyrillic_EF"), //
		jField<::jlong>("XK_Cyrillic_EL"), //
		jField<::jlong>("XK_Cyrillic_EM"), //
		jField<::jlong>("XK_Cyrillic_EN"), //
		jField<::jlong>("XK_Cyrillic_ER"), //
		jField<::jlong>("XK_Cyrillic_ES"), //
		jField<::jlong>("XK_Cyrillic_GHE"), //
		jField<::jlong>("XK_Cyrillic_HA"), //
		jField<::jlong>("XK_Cyrillic_HARDSIGN"), //
		jField<::jlong>("XK_Cyrillic_I"), //
		jField<::jlong>("XK_Cyrillic_IE"), //
		jField<::jlong>("XK_Cyrillic_IO"), //
		jField<::jlong>("XK_Cyrillic_JE"), //
		jField<::jlong>("XK_Cyrillic_KA"), //
		jField<::jlong>("XK_Cyrillic_LJE"), //
		jField<::jlong>("XK_Cyrillic_NJE"), //
		jField<::jlong>("XK_Cyrillic_O"), //
		jField<::jlong>("XK_Cyrillic_PE"), //
		jField<::jlong>("XK_Cyrillic_SHA"), //
		jField<::jlong>("XK_Cyrillic_SHCHA"), //
		jField<::jlong>("XK_Cyrillic_SHORTI"), //
		jField<::jlong>("XK_Cyrillic_SOFTSIGN"), //
		jField<::jlong>("XK_Cyrillic_TE"), //
		jField<::jlong>("XK_Cyrillic_TSE"), //
		jField<::jlong>("XK_Cyrillic_U"), //
		jField<::jlong>("XK_Cyrillic_VE"), //
		jField<::jlong>("XK_Cyrillic_YA"), //
		jField<::jlong>("XK_Cyrillic_YERU"), //
		jField<::jlong>("XK_Cyrillic_YU"), //
		jField<::jlong>("XK_Cyrillic_ZE"), //
		jField<::jlong>("XK_Cyrillic_ZHE"), //
		jField<::jlong>("XK_Cyrillic_a"), //
		jField<::jlong>("XK_Cyrillic_be"), //
		jField<::jlong>("XK_Cyrillic_che"), //
		jField<::jlong>("XK_Cyrillic_de"), //
		jField<::jlong>("XK_Cyrillic_dzhe"), //
		jField<::jlong>("XK_Cyrillic_e"), //
		jField<::jlong>("XK_Cyrillic_ef"), //
		jField<::jlong>("XK_Cyrillic_el"), //
		jField<::jlong>("XK_Cyrillic_em"), //
		jField<::jlong>("XK_Cyrillic_en"), //
		jField<::jlong>("XK_Cyrillic_er"), //
		jField<::jlong>("XK_Cyrillic_es"), //
		jField<::jlong>("XK_Cyrillic_ghe"), //
		jField<::jlong>("XK_Cyrillic_ha"), //
		jField<::jlong>("XK_Cyrillic_hardsign"), //
		jField<::jlong>("XK_Cyrillic_i"), //
		jField<::jlong>("XK_Cyrillic_ie"), //
		jField<::jlong>("XK_Cyrillic_io"), //
		jField<::jlong>("XK_Cyrillic_je"), //
		jField<::jlong>("XK_Cyrillic_ka"), //
		jField<::jlong>("XK_Cyrillic_lje"), //
		jField<::jlong>("XK_Cyrillic_nje"), //
		jField<::jlong>("XK_Cyrillic_o"), //
		jField<::jlong>("XK_Cyrillic_pe"), //
		jField<::jlong>("XK_Cyrillic_sha"), //
		jField<::jlong>("XK_Cyrillic_shcha"), //
		jField<::jlong>("XK_Cyrillic_shorti"), //
		jField<::jlong>("XK_Cyrillic_softsign"), //
		jField<::jlong>("XK_Cyrillic_te"), //
		jField<::jlong>("XK_Cyrillic_tse"), //
		jField<::jlong>("XK_Cyrillic_u"), //
		jField<::jlong>("XK_Cyrillic_ve"), //
		jField<::jlong>("XK_Cyrillic_ya"), //
		jField<::jlong>("XK_Cyrillic_yeru"), //
		jField<::jlong>("XK_Cyrillic_yu"), //
		jField<::jlong>("XK_Cyrillic_ze"), //
		jField<::jlong>("XK_Cyrillic_zhe"), //
		jField<::jlong>("XK_D"), //
		jField<::jlong>("XK_Dcaron"), //
		jField<::jlong>("XK_Delete"), //
		jField<::jlong>("XK_DongSign"), //
		jField<::jlong>("XK_Down"), //
		jField<::jlong>("XK_Dstroke"), //
		jField<::jlong>("XK_E"), //
		jField<::jlong>("XK_ENG"), //
		jField<::jlong>("XK_ETH"), //
		jField<::jlong>("XK_Eabovedot"), //
		jField<::jlong>("XK_Eacute"), //
		jField<::jlong>("XK_Ecaron"), //
		jField<::jlong>("XK_Ecircumflex"), //
		jField<::jlong>("XK_EcuSign"), //
		jField<::jlong>("XK_Ediaeresis"), //
		jField<::jlong>("XK_Egrave"), //
		jField<::jlong>("XK_Eisu_Shift"), //
		jField<::jlong>("XK_Eisu_toggle"), //
		jField<::jlong>("XK_Emacron"), //
		jField<::jlong>("XK_End"), //
		jField<::jlong>("XK_Eogonek"), //
		jField<::jlong>("XK_Escape"), //
		jField<::jlong>("XK_Eth"), //
		jField<::jlong>("XK_EuroSign"), //
		jField<::jlong>("XK_Execute"), //
		jField<::jlong>("XK_F"), //
		jField<::jlong>("XK_F1"), //
		jField<::jlong>("XK_F10"), //
		jField<::jlong>("XK_F11"), //
		jField<::jlong>("XK_F12"), //
		jField<::jlong>("XK_F13"), //
		jField<::jlong>("XK_F14"), //
		jField<::jlong>("XK_F15"), //
		jField<::jlong>("XK_F16"), //
		jField<::jlong>("XK_F17"), //
		jField<::jlong>("XK_F18"), //
		jField<::jlong>("XK_F19"), //
		jField<::jlong>("XK_F2"), //
		jField<::jlong>("XK_F20"), //
		jField<::jlong>("XK_F21"), //
		jField<::jlong>("XK_F22"), //
		jField<::jlong>("XK_F23"), //
		jField<::jlong>("XK_F24"), //
		jField<::jlong>("XK_F25"), //
		jField<::jlong>("XK_F26"), //
		jField<::jlong>("XK_F27"), //
		jField<::jlong>("XK_F28"), //
		jField<::jlong>("XK_F29"), //
		jField<::jlong>("XK_F3"), //
		jField<::jlong>("XK_F30"), //
		jField<::jlong>("XK_F31"), //
		jField<::jlong>("XK_F32"), //
		jField<::jlong>("XK_F33"), //
		jField<::jlong>("XK_F34"), //
		jField<::jlong>("XK_F35"), //
		jField<::jlong>("XK_F4"), //
		jField<::jlong>("XK_F5"), //
		jField<::jlong>("XK_F6"), //
		jField<::jlong>("XK_F7"), //
		jField<::jlong>("XK_F8"), //
		jField<::jlong>("XK_F9"), //
		jField<::jlong>("XK_FFrancSign"), //
		jField<::jlong>("XK_Find"), //
		jField<::jlong>("XK_First_Virtual_Screen"), //
		jField<::jlong>("XK_G"), //
		jField<::jlong>("XK_Gabovedot"), //
		jField<::jlong>("XK_Gbreve"), //
		jField<::jlong>("XK_Gcedilla"), //
		jField<::jlong>("XK_Gcircumflex"), //
		jField<::jlong>("XK_Greek_ALPHA"), //
		jField<::jlong>("XK_Greek_ALPHAaccent"), //
		jField<::jlong>("XK_Greek_BETA"), //
		jField<::jlong>("XK_Greek_CHI"), //
		jField<::jlong>("XK_Greek_DELTA"), //
		jField<::jlong>("XK_Greek_EPSILON"), //
		jField<::jlong>("XK_Greek_EPSILONaccent"), //
		jField<::jlong>("XK_Greek_ETA"), //
		jField<::jlong>("XK_Greek_ETAaccent"), //
		jField<::jlong>("XK_Greek_GAMMA"), //
		jField<::jlong>("XK_Greek_IOTA"), //
		jField<::jlong>("XK_Greek_IOTAaccent"), //
		jField<::jlong>("XK_Greek_IOTAdiaeresis"), //
		jField<::jlong>("XK_Greek_KAPPA"), //
		jField<::jlong>("XK_Greek_LAMBDA"), //
		jField<::jlong>("XK_Greek_LAMDA"), //
		jField<::jlong>("XK_Greek_MU"), //
		jField<::jlong>("XK_Greek_NU"), //
		jField<::jlong>("XK_Greek_OMEGA"), //
		jField<::jlong>("XK_Greek_OMEGAaccent"), //
		jField<::jlong>("XK_Greek_OMICRON"), //
		jField<::jlong>("XK_Greek_OMICRONaccent"), //
		jField<::jlong>("XK_Greek_PHI"), //
		jField<::jlong>("XK_Greek_PI"), //
		jField<::jlong>("XK_Greek_PSI"), //
		jField<::jlong>("XK_Greek_RHO"), //
		jField<::jlong>("XK_Greek_SIGMA"), //
		jField<::jlong>("XK_Greek_TAU"), //
		jField<::jlong>("XK_Greek_THETA"), //
		jField<::jlong>("XK_Greek_UPSILON"), //
		jField<::jlong>("XK_Greek_UPSILONaccent"), //
		jField<::jlong>("XK_Greek_UPSILONdieresis"), //
		jField<::jlong>("XK_Greek_XI"), //
		jField<::jlong>("XK_Greek_ZETA"), //
		jField<::jlong>("XK_Greek_accentdieresis"), //
		jField<::jlong>("XK_Greek_alpha"), //
		jField<::jlong>("XK_Greek_alphaaccent"), //
		jField<::jlong>("XK_Greek_beta"), //
		jField<::jlong>("XK_Greek_chi"), //
		jField<::jlong>("XK_Greek_delta"), //
		jField<::jlong>("XK_Greek_epsilon"), //
		jField<::jlong>("XK_Greek_epsilonaccent"), //
		jField<::jlong>("XK_Greek_eta"), //
		jField<::jlong>("XK_Greek_etaaccent"), //
		jField<::jlong>("XK_Greek_finalsmallsigma"), //
		jField<::jlong>("XK_Greek_gamma"), //
		jField<::jlong>("XK_Greek_horizbar"), //
		jField<::jlong>("XK_Greek_iota"), //
		jField<::jlong>("XK_Greek_iotaaccent"), //
		jField<::jlong>("XK_Greek_iotaaccentdieresis"), //
		jField<::jlong>("XK_Greek_iotadieresis"), //
		jField<::jlong>("XK_Greek_kappa"), //
		jField<::jlong>("XK_Greek_lambda"), //
		jField<::jlong>("XK_Greek_lamda"), //
		jField<::jlong>("XK_Greek_mu"), //
		jField<::jlong>("XK_Greek_nu"), //
		jField<::jlong>("XK_Greek_omega"), //
		jField<::jlong>("XK_Greek_omegaaccent"), //
		jField<::jlong>("XK_Greek_omicron"), //
		jField<::jlong>("XK_Greek_omicronaccent"), //
		jField<::jlong>("XK_Greek_phi"), //
		jField<::jlong>("XK_Greek_pi"), //
		jField<::jlong>("XK_Greek_psi"), //
		jField<::jlong>("XK_Greek_rho"), //
		jField<::jlong>("XK_Greek_sigma"), //
		jField<::jlong>("XK_Greek_switch"), //
		jField<::jlong>("XK_Greek_tau"), //
		jField<::jlong>("XK_Greek_theta"), //
		jField<::jlong>("XK_Greek_upsilon"), //
		jField<::jlong>("XK_Greek_upsilonaccent"), //
		jField<::jlong>("XK_Greek_upsilonaccentdieresis"), //
		jField<::jlong>("XK_Greek_upsilondieresis"), //
		jField<::jlong>("XK_Greek_xi"), //
		jField<::jlong>("XK_Greek_zeta"), //
		jField<::jlong>("XK_H"), //
		jField<::jlong>("XK_Hangul"), //
		jField<::jlong>("XK_Hangul_A"), //
		jField<::jlong>("XK_Hangul_AE"), //
		jField<::jlong>("XK_Hangul_AraeA"), //
		jField<::jlong>("XK_Hangul_AraeAE"), //
		jField<::jlong>("XK_Hangul_Banja"), //
		jField<::jlong>("XK_Hangul_Cieuc"), //
		jField<::jlong>("XK_Hangul_Codeinput"), //
		jField<::jlong>("XK_Hangul_Dikeud"), //
		jField<::jlong>("XK_Hangul_E"), //
		jField<::jlong>("XK_Hangul_EO"), //
		jField<::jlong>("XK_Hangul_EU"), //
		jField<::jlong>("XK_Hangul_End"), //
		jField<::jlong>("XK_Hangul_Hanja"), //
		jField<::jlong>("XK_Hangul_Hieuh"), //
		jField<::jlong>("XK_Hangul_I"), //
		jField<::jlong>("XK_Hangul_Ieung"), //
		jField<::jlong>("XK_Hangul_J_Cieuc"), //
		jField<::jlong>("XK_Hangul_J_Dikeud"), //
		jField<::jlong>("XK_Hangul_J_Hieuh"), //
		jField<::jlong>("XK_Hangul_J_Ieung"), //
		jField<::jlong>("XK_Hangul_J_Jieuj"), //
		jField<::jlong>("XK_Hangul_J_Khieuq"), //
		jField<::jlong>("XK_Hangul_J_Kiyeog"), //
		jField<::jlong>("XK_Hangul_J_KiyeogSios"), //
		jField<::jlong>("XK_Hangul_J_KkogjiDalrinIeung"), //
		jField<::jlong>("XK_Hangul_J_Mieum"), //
		jField<::jlong>("XK_Hangul_J_Nieun"), //
		jField<::jlong>("XK_Hangul_J_NieunHieuh"), //
		jField<::jlong>("XK_Hangul_J_NieunJieuj"), //
		jField<::jlong>("XK_Hangul_J_PanSios"), //
		jField<::jlong>("XK_Hangul_J_Phieuf"), //
		jField<::jlong>("XK_Hangul_J_Pieub"), //
		jField<::jlong>("XK_Hangul_J_PieubSios"), //
		jField<::jlong>("XK_Hangul_J_Rieul"), //
		jField<::jlong>("XK_Hangul_J_RieulHieuh"), //
		jField<::jlong>("XK_Hangul_J_RieulKiyeog"), //
		jField<::jlong>("XK_Hangul_J_RieulMieum"), //
		jField<::jlong>("XK_Hangul_J_RieulPhieuf"), //
		jField<::jlong>("XK_Hangul_J_RieulPieub"), //
		jField<::jlong>("XK_Hangul_J_RieulSios"), //
		jField<::jlong>("XK_Hangul_J_RieulTieut"), //
		jField<::jlong>("XK_Hangul_J_Sios"), //
		jField<::jlong>("XK_Hangul_J_SsangKiyeog"), //
		jField<::jlong>("XK_Hangul_J_SsangSios"), //
		jField<::jlong>("XK_Hangul_J_Tieut"), //
		jField<::jlong>("XK_Hangul_J_YeorinHieuh"), //
		jField<::jlong>("XK_Hangul_Jamo"), //
		jField<::jlong>("XK_Hangul_Jeonja"), //
		jField<::jlong>("XK_Hangul_Jieuj"), //
		jField<::jlong>("XK_Hangul_Khieuq"), //
		jField<::jlong>("XK_Hangul_Kiyeog"), //
		jField<::jlong>("XK_Hangul_KiyeogSios"), //
		jField<::jlong>("XK_Hangul_KkogjiDalrinIeung"), //
		jField<::jlong>("XK_Hangul_Mieum"), //
		jField<::jlong>("XK_Hangul_MultipleCandidate"), //
		jField<::jlong>("XK_Hangul_Nieun"), //
		jField<::jlong>("XK_Hangul_NieunHieuh"), //
		jField<::jlong>("XK_Hangul_NieunJieuj"), //
		jField<::jlong>("XK_Hangul_O"), //
		jField<::jlong>("XK_Hangul_OE"), //
		jField<::jlong>("XK_Hangul_PanSios"), //
		jField<::jlong>("XK_Hangul_Phieuf"), //
		jField<::jlong>("XK_Hangul_Pieub"), //
		jField<::jlong>("XK_Hangul_PieubSios"), //
		jField<::jlong>("XK_Hangul_PostHanja"), //
		jField<::jlong>("XK_Hangul_PreHanja"), //
		jField<::jlong>("XK_Hangul_PreviousCandidate"), //
		jField<::jlong>("XK_Hangul_Rieul"), //
		jField<::jlong>("XK_Hangul_RieulHieuh"), //
		jField<::jlong>("XK_Hangul_RieulKiyeog"), //
		jField<::jlong>("XK_Hangul_RieulMieum"), //
		jField<::jlong>("XK_Hangul_RieulPhieuf"), //
		jField<::jlong>("XK_Hangul_RieulPieub"), //
		jField<::jlong>("XK_Hangul_RieulSios"), //
		jField<::jlong>("XK_Hangul_RieulTieut"), //
		jField<::jlong>("XK_Hangul_RieulYeorinHieuh"), //
		jField<::jlong>("XK_Hangul_Romaja"), //
		jField<::jlong>("XK_Hangul_SingleCandidate"), //
		jField<::jlong>("XK_Hangul_Sios"), //
		jField<::jlong>("XK_Hangul_Special"), //
		jField<::jlong>("XK_Hangul_SsangDikeud"), //
		jField<::jlong>("XK_Hangul_SsangJieuj"), //
		jField<::jlong>("XK_Hangul_SsangKiyeog"), //
		jField<::jlong>("XK_Hangul_SsangPieub"), //
		jField<::jlong>("XK_Hangul_SsangSios"), //
		jField<::jlong>("XK_Hangul_Start"), //
		jField<::jlong>("XK_Hangul_SunkyeongeumMieum"), //
		jField<::jlong>("XK_Hangul_SunkyeongeumPhieuf"), //
		jField<::jlong>("XK_Hangul_SunkyeongeumPieub"), //
		jField<::jlong>("XK_Hangul_Tieut"), //
		jField<::jlong>("XK_Hangul_U"), //
		jField<::jlong>("XK_Hangul_WA"), //
		jField<::jlong>("XK_Hangul_WAE"), //
		jField<::jlong>("XK_Hangul_WE"), //
		jField<::jlong>("XK_Hangul_WEO"), //
		jField<::jlong>("XK_Hangul_WI"), //
		jField<::jlong>("XK_Hangul_YA"), //
		jField<::jlong>("XK_Hangul_YAE"), //
		jField<::jlong>("XK_Hangul_YE"), //
		jField<::jlong>("XK_Hangul_YEO"), //
		jField<::jlong>("XK_Hangul_YI"), //
		jField<::jlong>("XK_Hangul_YO"), //
		jField<::jlong>("XK_Hangul_YU"), //
		jField<::jlong>("XK_Hangul_YeorinHieuh"), //
		jField<::jlong>("XK_Hangul_switch"), //
		jField<::jlong>("XK_Hankaku"), //
		jField<::jlong>("XK_Hcircumflex"), //
		jField<::jlong>("XK_Hebrew_switch"), //
		jField<::jlong>("XK_Help"), //
		jField<::jlong>("XK_Henkan"), //
		jField<::jlong>("XK_Henkan_Mode"), //
		jField<::jlong>("XK_Hiragana"), //
		jField<::jlong>("XK_Hiragana_Katakana"), //
		jField<::jlong>("XK_Home"), //
		jField<::jlong>("XK_Hstroke"), //
		jField<::jlong>("XK_Hyper_L"), //
		jField<::jlong>("XK_Hyper_R"), //
		jField<::jlong>("XK_I"), //
		jField<::jlong>("XK_ISO_Center_Object"), //
		jField<::jlong>("XK_ISO_Continuous_Underline"), //
		jField<::jlong>("XK_ISO_Discontinuous_Underline"), //
		jField<::jlong>("XK_ISO_Emphasize"), //
		jField<::jlong>("XK_ISO_Enter"), //
		jField<::jlong>("XK_ISO_Fast_Cursor_Down"), //
		jField<::jlong>("XK_ISO_Fast_Cursor_Left"), //
		jField<::jlong>("XK_ISO_Fast_Cursor_Right"), //
		jField<::jlong>("XK_ISO_Fast_Cursor_Up"), //
		jField<::jlong>("XK_ISO_First_Group"), //
		jField<::jlong>("XK_ISO_First_Group_Lock"), //
		jField<::jlong>("XK_ISO_Group_Latch"), //
		jField<::jlong>("XK_ISO_Group_Lock"), //
		jField<::jlong>("XK_ISO_Group_Shift"), //
		jField<::jlong>("XK_ISO_Last_Group"), //
		jField<::jlong>("XK_ISO_Last_Group_Lock"), //
		jField<::jlong>("XK_ISO_Left_Tab"), //
		jField<::jlong>("XK_ISO_Level2_Latch"), //
		jField<::jlong>("XK_ISO_Level3_Latch"), //
		jField<::jlong>("XK_ISO_Level3_Lock"), //
		jField<::jlong>("XK_ISO_Level3_Shift"), //
		jField<::jlong>("XK_ISO_Lock"), //
		jField<::jlong>("XK_ISO_Move_Line_Down"), //
		jField<::jlong>("XK_ISO_Move_Line_Up"), //
		jField<::jlong>("XK_ISO_Next_Group"), //
		jField<::jlong>("XK_ISO_Next_Group_Lock"), //
		jField<::jlong>("XK_ISO_Partial_Line_Down"), //
		jField<::jlong>("XK_ISO_Partial_Line_Up"), //
		jField<::jlong>("XK_ISO_Partial_Space_Left"), //
		jField<::jlong>("XK_ISO_Partial_Space_Right"), //
		jField<::jlong>("XK_ISO_Prev_Group"), //
		jField<::jlong>("XK_ISO_Prev_Group_Lock"), //
		jField<::jlong>("XK_ISO_Release_Both_Margins"), //
		jField<::jlong>("XK_ISO_Release_Margin_Left"), //
		jField<::jlong>("XK_ISO_Release_Margin_Right"), //
		jField<::jlong>("XK_ISO_Set_Margin_Left"), //
		jField<::jlong>("XK_ISO_Set_Margin_Right"), //
		jField<::jlong>("XK_Iabovedot"), //
		jField<::jlong>("XK_Iacute"), //
		jField<::jlong>("XK_Icircumflex"), //
		jField<::jlong>("XK_Idiaeresis"), //
		jField<::jlong>("XK_Igrave"), //
		jField<::jlong>("XK_Imacron"), //
		jField<::jlong>("XK_Insert"), //
		jField<::jlong>("XK_Iogonek"), //
		jField<::jlong>("XK_Itilde"), //
		jField<::jlong>("XK_J"), //
		jField<::jlong>("XK_Jcircumflex"), //
		jField<::jlong>("XK_K"), //
		jField<::jlong>("XK_KP_0"), //
		jField<::jlong>("XK_KP_1"), //
		jField<::jlong>("XK_KP_2"), //
		jField<::jlong>("XK_KP_3"), //
		jField<::jlong>("XK_KP_4"), //
		jField<::jlong>("XK_KP_5"), //
		jField<::jlong>("XK_KP_6"), //
		jField<::jlong>("XK_KP_7"), //
		jField<::jlong>("XK_KP_8"), //
		jField<::jlong>("XK_KP_9"), //
		jField<::jlong>("XK_KP_Add"), //
		jField<::jlong>("XK_KP_Begin"), //
		jField<::jlong>("XK_KP_Decimal"), //
		jField<::jlong>("XK_KP_Delete"), //
		jField<::jlong>("XK_KP_Divide"), //
		jField<::jlong>("XK_KP_Down"), //
		jField<::jlong>("XK_KP_End"), //
		jField<::jlong>("XK_KP_Enter"), //
		jField<::jlong>("XK_KP_Equal"), //
		jField<::jlong>("XK_KP_F1"), //
		jField<::jlong>("XK_KP_F2"), //
		jField<::jlong>("XK_KP_F3"), //
		jField<::jlong>("XK_KP_F4"), //
		jField<::jlong>("XK_KP_Home"), //
		jField<::jlong>("XK_KP_Insert"), //
		jField<::jlong>("XK_KP_Left"), //
		jField<::jlong>("XK_KP_Multiply"), //
		jField<::jlong>("XK_KP_Next"), //
		jField<::jlong>("XK_KP_Page_Down"), //
		jField<::jlong>("XK_KP_Page_Up"), //
		jField<::jlong>("XK_KP_Prior"), //
		jField<::jlong>("XK_KP_Right"), //
		jField<::jlong>("XK_KP_Separator"), //
		jField<::jlong>("XK_KP_Space"), //
		jField<::jlong>("XK_KP_Subtract"), //
		jField<::jlong>("XK_KP_Tab"), //
		jField<::jlong>("XK_KP_Up"), //
		jField<::jlong>("XK_Kana_Lock"), //
		jField<::jlong>("XK_Kana_Shift"), //
		jField<::jlong>("XK_Kanji"), //
		jField<::jlong>("XK_Kanji_Bangou"), //
		jField<::jlong>("XK_Katakana"), //
		jField<::jlong>("XK_Kcedilla"), //
		jField<::jlong>("XK_Korean_Won"), //
		jField<::jlong>("XK_L"), //
		jField<::jlong>("XK_L1"), //
		jField<::jlong>("XK_L10"), //
		jField<::jlong>("XK_L2"), //
		jField<::jlong>("XK_L3"), //
		jField<::jlong>("XK_L4"), //
		jField<::jlong>("XK_L5"), //
		jField<::jlong>("XK_L6"), //
		jField<::jlong>("XK_L7"), //
		jField<::jlong>("XK_L8"), //
		jField<::jlong>("XK_L9"), //
		jField<::jlong>("XK_Lacute"), //
		jField<::jlong>("XK_Last_Virtual_Screen"), //
		jField<::jlong>("XK_Lcaron"), //
		jField<::jlong>("XK_Lcedilla"), //
		jField<::jlong>("XK_Left"), //
		jField<::jlong>("XK_Linefeed"), //
		jField<::jlong>("XK_LiraSign"), //
		jField<::jlong>("XK_Lstroke"), //
		jField<::jlong>("XK_M"), //
		jField<::jlong>("XK_Macedonia_DSE"), //
		jField<::jlong>("XK_Macedonia_GJE"), //
		jField<::jlong>("XK_Macedonia_KJE"), //
		jField<::jlong>("XK_Macedonia_dse"), //
		jField<::jlong>("XK_Macedonia_gje"), //
		jField<::jlong>("XK_Macedonia_kje"), //
		jField<::jlong>("XK_Mae_Koho"), //
		jField<::jlong>("XK_Massyo"), //
		jField<::jlong>("XK_Menu"), //
		jField<::jlong>("XK_Meta_L"), //
		jField<::jlong>("XK_Meta_R"), //
		jField<::jlong>("XK_MillSign"), //
		jField<::jlong>("XK_Mode_switch"), //
		jField<::jlong>("XK_MouseKeys_Accel_Enable"), //
		jField<::jlong>("XK_MouseKeys_Enable"), //
		jField<::jlong>("XK_Muhenkan"), //
		jField<::jlong>("XK_Multi_key"), //
		jField<::jlong>("XK_MultipleCandidate"), //
		jField<::jlong>("XK_N"), //
		jField<::jlong>("XK_Nacute"), //
		jField<::jlong>("XK_NairaSign"), //
		jField<::jlong>("XK_Ncaron"), //
		jField<::jlong>("XK_Ncedilla"), //
		jField<::jlong>("XK_NewSheqelSign"), //
		jField<::jlong>("XK_Next"), //
		jField<::jlong>("XK_Next_Virtual_Screen"), //
		jField<::jlong>("XK_Ntilde"), //
		jField<::jlong>("XK_Num_Lock"), //
		jField<::jlong>("XK_O"), //
		jField<::jlong>("XK_OE"), //
		jField<::jlong>("XK_Oacute"), //
		jField<::jlong>("XK_Ocircumflex"), //
		jField<::jlong>("XK_Odiaeresis"), //
		jField<::jlong>("XK_Odoubleacute"), //
		jField<::jlong>("XK_Ograve"), //
		jField<::jlong>("XK_Omacron"), //
		jField<::jlong>("XK_Ooblique"), //
		jField<::jlong>("XK_Otilde"), //
		jField<::jlong>("XK_Overlay1_Enable"), //
		jField<::jlong>("XK_Overlay2_Enable"), //
		jField<::jlong>("XK_P"), //
		jField<::jlong>("XK_Page_Down"), //
		jField<::jlong>("XK_Page_Up"), //
		jField<::jlong>("XK_Pause"), //
		jField<::jlong>("XK_PesetaSign"), //
		jField<::jlong>("XK_Pointer_Accelerate"), //
		jField<::jlong>("XK_Pointer_Button1"), //
		jField<::jlong>("XK_Pointer_Button2"), //
		jField<::jlong>("XK_Pointer_Button3"), //
		jField<::jlong>("XK_Pointer_Button4"), //
		jField<::jlong>("XK_Pointer_Button5"), //
		jField<::jlong>("XK_Pointer_Button_Dflt"), //
		jField<::jlong>("XK_Pointer_DblClick1"), //
		jField<::jlong>("XK_Pointer_DblClick2"), //
		jField<::jlong>("XK_Pointer_DblClick3"), //
		jField<::jlong>("XK_Pointer_DblClick4"), //
		jField<::jlong>("XK_Pointer_DblClick5"), //
		jField<::jlong>("XK_Pointer_DblClick_Dflt"), //
		jField<::jlong>("XK_Pointer_DfltBtnNext"), //
		jField<::jlong>("XK_Pointer_DfltBtnPrev"), //
		jField<::jlong>("XK_Pointer_Down"), //
		jField<::jlong>("XK_Pointer_DownLeft"), //
		jField<::jlong>("XK_Pointer_DownRight"), //
		jField<::jlong>("XK_Pointer_Drag1"), //
		jField<::jlong>("XK_Pointer_Drag2"), //
		jField<::jlong>("XK_Pointer_Drag3"), //
		jField<::jlong>("XK_Pointer_Drag4"), //
		jField<::jlong>("XK_Pointer_Drag5"), //
		jField<::jlong>("XK_Pointer_Drag_Dflt"), //
		jField<::jlong>("XK_Pointer_EnableKeys"), //
		jField<::jlong>("XK_Pointer_Left"), //
		jField<::jlong>("XK_Pointer_Right"), //
		jField<::jlong>("XK_Pointer_Up"), //
		jField<::jlong>("XK_Pointer_UpLeft"), //
		jField<::jlong>("XK_Pointer_UpRight"), //
		jField<::jlong>("XK_Prev_Virtual_Screen"), //
		jField<::jlong>("XK_PreviousCandidate"), //
		jField<::jlong>("XK_Print"), //
		jField<::jlong>("XK_Prior"), //
		jField<::jlong>("XK_Q"), //
		jField<::jlong>("XK_R"), //
		jField<::jlong>("XK_R1"), //
		jField<::jlong>("XK_R10"), //
		jField<::jlong>("XK_R11"), //
		jField<::jlong>("XK_R12"), //
		jField<::jlong>("XK_R13"), //
		jField<::jlong>("XK_R14"), //
		jField<::jlong>("XK_R15"), //
		jField<::jlong>("XK_R2"), //
		jField<::jlong>("XK_R3"), //
		jField<::jlong>("XK_R4"), //
		jField<::jlong>("XK_R5"), //
		jField<::jlong>("XK_R6"), //
		jField<::jlong>("XK_R7"), //
		jField<::jlong>("XK_R8"), //
		jField<::jlong>("XK_R9"), //
		jField<::jlong>("XK_Racute"), //
		jField<::jlong>("XK_Rcaron"), //
		jField<::jlong>("XK_Rcedilla"), //
		jField<::jlong>("XK_Redo"), //
		jField<::jlong>("XK_RepeatKeys_Enable"), //
		jField<::jlong>("XK_Return"), //
		jField<::jlong>("XK_Right"), //
		jField<::jlong>("XK_Romaji"), //
		jField<::jlong>("XK_RupeeSign"), //
		jField<::jlong>("XK_S"), //
		jField<::jlong>("XK_Sacute"), //
		jField<::jlong>("XK_Scaron"), //
		jField<::jlong>("XK_Scedilla"), //
		jField<::jlong>("XK_Scircumflex"), //
		jField<::jlong>("XK_Scroll_Lock"), //
		jField<::jlong>("XK_Select"), //
		jField<::jlong>("XK_Serbian_DJE"), //
		jField<::jlong>("XK_Serbian_DZE"), //
		jField<::jlong>("XK_Serbian_JE"), //
		jField<::jlong>("XK_Serbian_LJE"), //
		jField<::jlong>("XK_Serbian_NJE"), //
		jField<::jlong>("XK_Serbian_TSHE"), //
		jField<::jlong>("XK_Serbian_dje"), //
		jField<::jlong>("XK_Serbian_dze"), //
		jField<::jlong>("XK_Serbian_je"), //
		jField<::jlong>("XK_Serbian_lje"), //
		jField<::jlong>("XK_Serbian_nje"), //
		jField<::jlong>("XK_Serbian_tshe"), //
		jField<::jlong>("XK_Shift_L"), //
		jField<::jlong>("XK_Shift_Lock"), //
		jField<::jlong>("XK_Shift_R"), //
		jField<::jlong>("XK_SingleCandidate"), //
		jField<::jlong>("XK_SlowKeys_Enable"), //
		jField<::jlong>("XK_StickyKeys_Enable"), //
		jField<::jlong>("XK_Super_L"), //
		jField<::jlong>("XK_Super_R"), //
		jField<::jlong>("XK_Sys_Req"), //
		jField<::jlong>("XK_T"), //
		jField<::jlong>("XK_THORN"), //
		jField<::jlong>("XK_Tab"), //
		jField<::jlong>("XK_Tcaron"), //
		jField<::jlong>("XK_Tcedilla"), //
		jField<::jlong>("XK_Terminate_Server"), //
		jField<::jlong>("XK_Thai_baht"), //
		jField<::jlong>("XK_Thai_bobaimai"), //
		jField<::jlong>("XK_Thai_chochan"), //
		jField<::jlong>("XK_Thai_chochang"), //
		jField<::jlong>("XK_Thai_choching"), //
		jField<::jlong>("XK_Thai_chochoe"), //
		jField<::jlong>("XK_Thai_dochada"), //
		jField<::jlong>("XK_Thai_dodek"), //
		jField<::jlong>("XK_Thai_fofa"), //
		jField<::jlong>("XK_Thai_fofan"), //
		jField<::jlong>("XK_Thai_hohip"), //
		jField<::jlong>("XK_Thai_honokhuk"), //
		jField<::jlong>("XK_Thai_khokhai"), //
		jField<::jlong>("XK_Thai_khokhon"), //
		jField<::jlong>("XK_Thai_khokhuat"), //
		jField<::jlong>("XK_Thai_khokhwai"), //
		jField<::jlong>("XK_Thai_khorakhang"), //
		jField<::jlong>("XK_Thai_kokai"), //
		jField<::jlong>("XK_Thai_lakkhangyao"), //
		jField<::jlong>("XK_Thai_lekchet"), //
		jField<::jlong>("XK_Thai_lekha"), //
		jField<::jlong>("XK_Thai_lekhok"), //
		jField<::jlong>("XK_Thai_lekkao"), //
		jField<::jlong>("XK_Thai_leknung"), //
		jField<::jlong>("XK_Thai_lekpaet"), //
		jField<::jlong>("XK_Thai_leksam"), //
		jField<::jlong>("XK_Thai_leksi"), //
		jField<::jlong>("XK_Thai_leksong"), //
		jField<::jlong>("XK_Thai_leksun"), //
		jField<::jlong>("XK_Thai_lochula"), //
		jField<::jlong>("XK_Thai_loling"), //
		jField<::jlong>("XK_Thai_lu"), //
		jField<::jlong>("XK_Thai_maichattawa"), //
		jField<::jlong>("XK_Thai_maiek"), //
		jField<::jlong>("XK_Thai_maihanakat"), //
		jField<::jlong>("XK_Thai_maihanakat_maitho"), //
		jField<::jlong>("XK_Thai_maitaikhu"), //
		jField<::jlong>("XK_Thai_maitho"), //
		jField<::jlong>("XK_Thai_maitri"), //
		jField<::jlong>("XK_Thai_maiyamok"), //
		jField<::jlong>("XK_Thai_moma"), //
		jField<::jlong>("XK_Thai_ngongu"), //
		jField<::jlong>("XK_Thai_nikhahit"), //
		jField<::jlong>("XK_Thai_nonen"), //
		jField<::jlong>("XK_Thai_nonu"), //
		jField<::jlong>("XK_Thai_oang"), //
		jField<::jlong>("XK_Thai_paiyannoi"), //
		jField<::jlong>("XK_Thai_phinthu"), //
		jField<::jlong>("XK_Thai_phophan"), //
		jField<::jlong>("XK_Thai_phophung"), //
		jField<::jlong>("XK_Thai_phosamphao"), //
		jField<::jlong>("XK_Thai_popla"), //
		jField<::jlong>("XK_Thai_rorua"), //
		jField<::jlong>("XK_Thai_ru"), //
		jField<::jlong>("XK_Thai_saraa"), //
		jField<::jlong>("XK_Thai_saraaa"), //
		jField<::jlong>("XK_Thai_saraae"), //
		jField<::jlong>("XK_Thai_saraaimaimalai"), //
		jField<::jlong>("XK_Thai_saraaimaimuan"), //
		jField<::jlong>("XK_Thai_saraam"), //
		jField<::jlong>("XK_Thai_sarae"), //
		jField<::jlong>("XK_Thai_sarai"), //
		jField<::jlong>("XK_Thai_saraii"), //
		jField<::jlong>("XK_Thai_sarao"), //
		jField<::jlong>("XK_Thai_sarau"), //
		jField<::jlong>("XK_Thai_saraue"), //
		jField<::jlong>("XK_Thai_sarauee"), //
		jField<::jlong>("XK_Thai_sarauu"), //
		jField<::jlong>("XK_Thai_sorusi"), //
		jField<::jlong>("XK_Thai_sosala"), //
		jField<::jlong>("XK_Thai_soso"), //
		jField<::jlong>("XK_Thai_sosua"), //
		jField<::jlong>("XK_Thai_thanthakhat"), //
		jField<::jlong>("XK_Thai_thonangmontho"), //
		jField<::jlong>("XK_Thai_thophuthao"), //
		jField<::jlong>("XK_Thai_thothahan"), //
		jField<::jlong>("XK_Thai_thothan"), //
		jField<::jlong>("XK_Thai_thothong"), //
		jField<::jlong>("XK_Thai_thothung"), //
		jField<::jlong>("XK_Thai_topatak"), //
		jField<::jlong>("XK_Thai_totao"), //
		jField<::jlong>("XK_Thai_wowaen"), //
		jField<::jlong>("XK_Thai_yoyak"), //
		jField<::jlong>("XK_Thai_yoying"), //
		jField<::jlong>("XK_Thorn"), //
		jField<::jlong>("XK_Touroku"), //
		jField<::jlong>("XK_Tslash"), //
		jField<::jlong>("XK_U"), //
		jField<::jlong>("XK_Uacute"), //
		jField<::jlong>("XK_Ubreve"), //
		jField<::jlong>("XK_Ucircumflex"), //
		jField<::jlong>("XK_Udiaeresis"), //
		jField<::jlong>("XK_Udoubleacute"), //
		jField<::jlong>("XK_Ugrave"), //
		jField<::jlong>("XK_Ukrainian_I"), //
		jField<::jlong>("XK_Ukrainian_IE"), //
		jField<::jlong>("XK_Ukrainian_YI"), //
		jField<::jlong>("XK_Ukrainian_i"), //
		jField<::jlong>("XK_Ukrainian_ie"), //
		jField<::jlong>("XK_Ukrainian_yi"), //
		jField<::jlong>("XK_Ukranian_I"), //
		jField<::jlong>("XK_Ukranian_JE"), //
		jField<::jlong>("XK_Ukranian_YI"), //
		jField<::jlong>("XK_Ukranian_i"), //
		jField<::jlong>("XK_Ukranian_je"), //
		jField<::jlong>("XK_Ukranian_yi"), //
		jField<::jlong>("XK_Umacron"), //
		jField<::jlong>("XK_Undo"), //
		jField<::jlong>("XK_Uogonek"), //
		jField<::jlong>("XK_Up"), //
		jField<::jlong>("XK_Uring"), //
		jField<::jlong>("XK_Utilde"), //
		jField<::jlong>("XK_V"), //
		jField<::jlong>("XK_VoidSymbol"), //
		jField<::jlong>("XK_W"), //
		jField<::jlong>("XK_WonSign"), //
		jField<::jlong>("XK_X"), //
		jField<::jlong>("XK_Y"), //
		jField<::jlong>("XK_Yacute"), //
		jField<::jlong>("XK_Ydiaeresis"), //
		jField<::jlong>("XK_Z"), //
		jField<::jlong>("XK_Zabovedot"), //
		jField<::jlong>("XK_Zacute"), //
		jField<::jlong>("XK_Zcaron"), //
		jField<::jlong>("XK_Zen_Koho"), //
		jField<::jlong>("XK_Zenkaku"), //
		jField<::jlong>("XK_Zenkaku_Hankaku"), //
		jField<::jlong>("XK_a"), //
		jField<::jlong>("XK_aacute"), //
		jField<::jlong>("XK_abovedot"), //
		jField<::jlong>("XK_abreve"), //
		jField<::jlong>("XK_acircumflex"), //
		jField<::jlong>("XK_acute"), //
		jField<::jlong>("XK_adiaeresis"), //
		jField<::jlong>("XK_ae"), //
		jField<::jlong>("XK_agrave"), //
		jField<::jlong>("XK_amacron"), //
		jField<::jlong>("XK_ampersand"), //
		jField<::jlong>("XK_aogonek"), //
		jField<::jlong>("XK_apostrophe"), //
		jField<::jlong>("XK_approximate"), //
		jField<::jlong>("XK_aring"), //
		jField<::jlong>("XK_asciicircum"), //
		jField<::jlong>("XK_asciitilde"), //
		jField<::jlong>("XK_asterisk"), //
		jField<::jlong>("XK_at"), //
		jField<::jlong>("XK_atilde"), //
		jField<::jlong>("XK_b"), //
		jField<::jlong>("XK_backslash"), //
		jField<::jlong>("XK_ballotcross"), //
		jField<::jlong>("XK_bar"), //
		jField<::jlong>("XK_blank"), //
		jField<::jlong>("XK_botintegral"), //
		jField<::jlong>("XK_botleftparens"), //
		jField<::jlong>("XK_botleftsqbracket"), //
		jField<::jlong>("XK_botleftsummation"), //
		jField<::jlong>("XK_botrightparens"), //
		jField<::jlong>("XK_botrightsqbracket"), //
		jField<::jlong>("XK_botrightsummation"), //
		jField<::jlong>("XK_bott"), //
		jField<::jlong>("XK_botvertsummationconnector"), //
		jField<::jlong>("XK_braceleft"), //
		jField<::jlong>("XK_braceright"), //
		jField<::jlong>("XK_bracketleft"), //
		jField<::jlong>("XK_bracketright"), //
		jField<::jlong>("XK_breve"), //
		jField<::jlong>("XK_brokenbar"), //
		jField<::jlong>("XK_c"), //
		jField<::jlong>("XK_cabovedot"), //
		jField<::jlong>("XK_cacute"), //
		jField<::jlong>("XK_careof"), //
		jField<::jlong>("XK_caret"), //
		jField<::jlong>("XK_caron"), //
		jField<::jlong>("XK_ccaron"), //
		jField<::jlong>("XK_ccedilla"), //
		jField<::jlong>("XK_ccircumflex"), //
		jField<::jlong>("XK_cedilla"), //
		jField<::jlong>("XK_cent"), //
		jField<::jlong>("XK_checkerboard"), //
		jField<::jlong>("XK_checkmark"), //
		jField<::jlong>("XK_circle"), //
		jField<::jlong>("XK_club"), //
		jField<::jlong>("XK_colon"), //
		jField<::jlong>("XK_comma"), //
		jField<::jlong>("XK_copyright"), //
		jField<::jlong>("XK_cr"), //
		jField<::jlong>("XK_crossinglines"), //
		jField<::jlong>("XK_currency"), //
		jField<::jlong>("XK_cursor"), //
		jField<::jlong>("XK_d"), //
		jField<::jlong>("XK_dagger"), //
		jField<::jlong>("XK_dcaron"), //
		jField<::jlong>("XK_dead_abovedot"), //
		jField<::jlong>("XK_dead_abovering"), //
		jField<::jlong>("XK_dead_acute"), //
		jField<::jlong>("XK_dead_belowdot"), //
		jField<::jlong>("XK_dead_breve"), //
		jField<::jlong>("XK_dead_caron"), //
		jField<::jlong>("XK_dead_cedilla"), //
		jField<::jlong>("XK_dead_circumflex"), //
		jField<::jlong>("XK_dead_diaeresis"), //
		jField<::jlong>("XK_dead_doubleacute"), //
		jField<::jlong>("XK_dead_grave"), //
		jField<::jlong>("XK_dead_iota"), //
		jField<::jlong>("XK_dead_macron"), //
		jField<::jlong>("XK_dead_ogonek"), //
		jField<::jlong>("XK_dead_semivoiced_sound"), //
		jField<::jlong>("XK_dead_tilde"), //
		jField<::jlong>("XK_dead_voiced_sound"), //
		jField<::jlong>("XK_decimalpoint"), //
		jField<::jlong>("XK_degree"), //
		jField<::jlong>("XK_diaeresis"), //
		jField<::jlong>("XK_diamond"), //
		jField<::jlong>("XK_digitspace"), //
		jField<::jlong>("XK_division"), //
		jField<::jlong>("XK_dollar"), //
		jField<::jlong>("XK_doubbaselinedot"), //
		jField<::jlong>("XK_doubleacute"), //
		jField<::jlong>("XK_doubledagger"), //
		jField<::jlong>("XK_doublelowquotemark"), //
		jField<::jlong>("XK_downarrow"), //
		jField<::jlong>("XK_downcaret"), //
		jField<::jlong>("XK_downshoe"), //
		jField<::jlong>("XK_downstile"), //
		jField<::jlong>("XK_downtack"), //
		jField<::jlong>("XK_dstroke"), //
		jField<::jlong>("XK_e"), //
		jField<::jlong>("XK_eabovedot"), //
		jField<::jlong>("XK_eacute"), //
		jField<::jlong>("XK_ecaron"), //
		jField<::jlong>("XK_ecircumflex"), //
		jField<::jlong>("XK_ediaeresis"), //
		jField<::jlong>("XK_egrave"), //
		jField<::jlong>("XK_ellipsis"), //
		jField<::jlong>("XK_em3space"), //
		jField<::jlong>("XK_em4space"), //
		jField<::jlong>("XK_emacron"), //
		jField<::jlong>("XK_emdash"), //
		jField<::jlong>("XK_emfilledcircle"), //
		jField<::jlong>("XK_emfilledrect"), //
		jField<::jlong>("XK_emopencircle"), //
		jField<::jlong>("XK_emopenrectangle"), //
		jField<::jlong>("XK_emspace"), //
		jField<::jlong>("XK_endash"), //
		jField<::jlong>("XK_enfilledcircbullet"), //
		jField<::jlong>("XK_enfilledsqbullet"), //
		jField<::jlong>("XK_eng"), //
		jField<::jlong>("XK_enopencircbullet"), //
		jField<::jlong>("XK_enopensquarebullet"), //
		jField<::jlong>("XK_enspace"), //
		jField<::jlong>("XK_eogonek"), //
		jField<::jlong>("XK_equal"), //
		jField<::jlong>("XK_eth"), //
		jField<::jlong>("XK_exclam"), //
		jField<::jlong>("XK_exclamdown"), //
		jField<::jlong>("XK_f"), //
		jField<::jlong>("XK_femalesymbol"), //
		jField<::jlong>("XK_ff"), //
		jField<::jlong>("XK_figdash"), //
		jField<::jlong>("XK_filledlefttribullet"), //
		jField<::jlong>("XK_filledrectbullet"), //
		jField<::jlong>("XK_filledrighttribullet"), //
		jField<::jlong>("XK_filledtribulletdown"), //
		jField<::jlong>("XK_filledtribulletup"), //
		jField<::jlong>("XK_fiveeighths"), //
		jField<::jlong>("XK_fivesixths"), //
		jField<::jlong>("XK_fourfifths"), //
		jField<::jlong>("XK_function"), //
		jField<::jlong>("XK_g"), //
		jField<::jlong>("XK_gabovedot"), //
		jField<::jlong>("XK_gbreve"), //
		jField<::jlong>("XK_gcedilla"), //
		jField<::jlong>("XK_gcircumflex"), //
		jField<::jlong>("XK_grave"), //
		jField<::jlong>("XK_greater"), //
		jField<::jlong>("XK_greaterthanequal"), //
		jField<::jlong>("XK_guillemotleft"), //
		jField<::jlong>("XK_guillemotright"), //
		jField<::jlong>("XK_h"), //
		jField<::jlong>("XK_hairspace"), //
		jField<::jlong>("XK_hcircumflex"), //
		jField<::jlong>("XK_heart"), //
		jField<::jlong>("XK_hebrew_aleph"), //
		jField<::jlong>("XK_hebrew_ayin"), //
		jField<::jlong>("XK_hebrew_bet"), //
		jField<::jlong>("XK_hebrew_beth"), //
		jField<::jlong>("XK_hebrew_chet"), //
		jField<::jlong>("XK_hebrew_dalet"), //
		jField<::jlong>("XK_hebrew_daleth"), //
		jField<::jlong>("XK_hebrew_doublelowline"), //
		jField<::jlong>("XK_hebrew_finalkaph"), //
		jField<::jlong>("XK_hebrew_finalmem"), //
		jField<::jlong>("XK_hebrew_finalnun"), //
		jField<::jlong>("XK_hebrew_finalpe"), //
		jField<::jlong>("XK_hebrew_finalzade"), //
		jField<::jlong>("XK_hebrew_finalzadi"), //
		jField<::jlong>("XK_hebrew_gimel"), //
		jField<::jlong>("XK_hebrew_gimmel"), //
		jField<::jlong>("XK_hebrew_he"), //
		jField<::jlong>("XK_hebrew_het"), //
		jField<::jlong>("XK_hebrew_kaph"), //
		jField<::jlong>("XK_hebrew_kuf"), //
		jField<::jlong>("XK_hebrew_lamed"), //
		jField<::jlong>("XK_hebrew_mem"), //
		jField<::jlong>("XK_hebrew_nun"), //
		jField<::jlong>("XK_hebrew_pe"), //
		jField<::jlong>("XK_hebrew_qoph"), //
		jField<::jlong>("XK_hebrew_resh"), //
		jField<::jlong>("XK_hebrew_samech"), //
		jField<::jlong>("XK_hebrew_samekh"), //
		jField<::jlong>("XK_hebrew_shin"), //
		jField<::jlong>("XK_hebrew_taf"), //
		jField<::jlong>("XK_hebrew_taw"), //
		jField<::jlong>("XK_hebrew_tet"), //
		jField<::jlong>("XK_hebrew_teth"), //
		jField<::jlong>("XK_hebrew_waw"), //
		jField<::jlong>("XK_hebrew_yod"), //
		jField<::jlong>("XK_hebrew_zade"), //
		jField<::jlong>("XK_hebrew_zadi"), //
		jField<::jlong>("XK_hebrew_zain"), //
		jField<::jlong>("XK_hebrew_zayin"), //
		jField<::jlong>("XK_hexagram"), //
		jField<::jlong>("XK_horizconnector"), //
		jField<::jlong>("XK_horizlinescan1"), //
		jField<::jlong>("XK_horizlinescan3"), //
		jField<::jlong>("XK_horizlinescan5"), //
		jField<::jlong>("XK_horizlinescan7"), //
		jField<::jlong>("XK_horizlinescan9"), //
		jField<::jlong>("XK_hstroke"), //
		jField<::jlong>("XK_ht"), //
		jField<::jlong>("XK_hyphen"), //
		jField<::jlong>("XK_i"), //
		jField<::jlong>("XK_iacute"), //
		jField<::jlong>("XK_icircumflex"), //
		jField<::jlong>("XK_identical"), //
		jField<::jlong>("XK_idiaeresis"), //
		jField<::jlong>("XK_idotless"), //
		jField<::jlong>("XK_ifonlyif"), //
		jField<::jlong>("XK_igrave"), //
		jField<::jlong>("XK_imacron"), //
		jField<::jlong>("XK_implies"), //
		jField<::jlong>("XK_includedin"), //
		jField<::jlong>("XK_includes"), //
		jField<::jlong>("XK_infinity"), //
		jField<::jlong>("XK_integral"), //
		jField<::jlong>("XK_intersection"), //
		jField<::jlong>("XK_iogonek"), //
		jField<::jlong>("XK_itilde"), //
		jField<::jlong>("XK_j"), //
		jField<::jlong>("XK_jcircumflex"), //
		jField<::jlong>("XK_jot"), //
		jField<::jlong>("XK_k"), //
		jField<::jlong>("XK_kana_A"), //
		jField<::jlong>("XK_kana_CHI"), //
		jField<::jlong>("XK_kana_E"), //
		jField<::jlong>("XK_kana_FU"), //
		jField<::jlong>("XK_kana_HA"), //
		jField<::jlong>("XK_kana_HE"), //
		jField<::jlong>("XK_kana_HI"), //
		jField<::jlong>("XK_kana_HO"), //
		jField<::jlong>("XK_kana_HU"), //
		jField<::jlong>("XK_kana_I"), //
		jField<::jlong>("XK_kana_KA"), //
		jField<::jlong>("XK_kana_KE"), //
		jField<::jlong>("XK_kana_KI"), //
		jField<::jlong>("XK_kana_KO"), //
		jField<::jlong>("XK_kana_KU"), //
		jField<::jlong>("XK_kana_MA"), //
		jField<::jlong>("XK_kana_ME"), //
		jField<::jlong>("XK_kana_MI"), //
		jField<::jlong>("XK_kana_MO"), //
		jField<::jlong>("XK_kana_MU"), //
		jField<::jlong>("XK_kana_N"), //
		jField<::jlong>("XK_kana_NA"), //
		jField<::jlong>("XK_kana_NE"), //
		jField<::jlong>("XK_kana_NI"), //
		jField<::jlong>("XK_kana_NO"), //
		jField<::jlong>("XK_kana_NU"), //
		jField<::jlong>("XK_kana_O"), //
		jField<::jlong>("XK_kana_RA"), //
		jField<::jlong>("XK_kana_RE"), //
		jField<::jlong>("XK_kana_RI"), //
		jField<::jlong>("XK_kana_RO"), //
		jField<::jlong>("XK_kana_RU"), //
		jField<::jlong>("XK_kana_SA"), //
		jField<::jlong>("XK_kana_SE"), //
		jField<::jlong>("XK_kana_SHI"), //
		jField<::jlong>("XK_kana_SO"), //
		jField<::jlong>("XK_kana_SU"), //
		jField<::jlong>("XK_kana_TA"), //
		jField<::jlong>("XK_kana_TE"), //
		jField<::jlong>("XK_kana_TI"), //
		jField<::jlong>("XK_kana_TO"), //
		jField<::jlong>("XK_kana_TSU"), //
		jField<::jlong>("XK_kana_TU"), //
		jField<::jlong>("XK_kana_U"), //
		jField<::jlong>("XK_kana_WA"), //
		jField<::jlong>("XK_kana_WO"), //
		jField<::jlong>("XK_kana_YA"), //
		jField<::jlong>("XK_kana_YO"), //
		jField<::jlong>("XK_kana_YU"), //
		jField<::jlong>("XK_kana_a"), //
		jField<::jlong>("XK_kana_closingbracket"), //
		jField<::jlong>("XK_kana_comma"), //
		jField<::jlong>("XK_kana_conjunctive"), //
		jField<::jlong>("XK_kana_e"), //
		jField<::jlong>("XK_kana_fullstop"), //
		jField<::jlong>("XK_kana_i"), //
		jField<::jlong>("XK_kana_middledot"), //
		jField<::jlong>("XK_kana_o"), //
		jField<::jlong>("XK_kana_openingbracket"), //
		jField<::jlong>("XK_kana_switch"), //
		jField<::jlong>("XK_kana_tsu"), //
		jField<::jlong>("XK_kana_tu"), //
		jField<::jlong>("XK_kana_u"), //
		jField<::jlong>("XK_kana_ya"), //
		jField<::jlong>("XK_kana_yo"), //
		jField<::jlong>("XK_kana_yu"), //
		jField<::jlong>("XK_kappa"), //
		jField<::jlong>("XK_kcedilla"), //
		jField<::jlong>("XK_kra"), //
		jField<::jlong>("XK_l"), //
		jField<::jlong>("XK_lacute"), //
		jField<::jlong>("XK_latincross"), //
		jField<::jlong>("XK_lcaron"), //
		jField<::jlong>("XK_lcedilla"), //
		jField<::jlong>("XK_leftanglebracket"), //
		jField<::jlong>("XK_leftarrow"), //
		jField<::jlong>("XK_leftcaret"), //
		jField<::jlong>("XK_leftdoublequotemark"), //
		jField<::jlong>("XK_leftmiddlecurlybrace"), //
		jField<::jlong>("XK_leftopentriangle"), //
		jField<::jlong>("XK_leftpointer"), //
		jField<::jlong>("XK_leftradical"), //
		jField<::jlong>("XK_leftshoe"), //
		jField<::jlong>("XK_leftsinglequotemark"), //
		jField<::jlong>("XK_leftt"), //
		jField<::jlong>("XK_lefttack"), //
		jField<::jlong>("XK_less"), //
		jField<::jlong>("XK_lessthanequal"), //
		jField<::jlong>("XK_lf"), //
		jField<::jlong>("XK_logicaland"), //
		jField<::jlong>("XK_logicalor"), //
		jField<::jlong>("XK_lowleftcorner"), //
		jField<::jlong>("XK_lowrightcorner"), //
		jField<::jlong>("XK_lstroke"), //
		jField<::jlong>("XK_m"), //
		jField<::jlong>("XK_macron"), //
		jField<::jlong>("XK_malesymbol"), //
		jField<::jlong>("XK_maltesecross"), //
		jField<::jlong>("XK_marker"), //
		jField<::jlong>("XK_masculine"), //
		jField<::jlong>("XK_minus"), //
		jField<::jlong>("XK_minutes"), //
		jField<::jlong>("XK_mu"), //
		jField<::jlong>("XK_multiply"), //
		jField<::jlong>("XK_musicalflat"), //
		jField<::jlong>("XK_musicalsharp"), //
		jField<::jlong>("XK_n"), //
		jField<::jlong>("XK_nabla"), //
		jField<::jlong>("XK_nacute"), //
		jField<::jlong>("XK_ncaron"), //
		jField<::jlong>("XK_ncedilla"), //
		jField<::jlong>("XK_nl"), //
		jField<::jlong>("XK_nobreakspace"), //
		jField<::jlong>("XK_notequal"), //
		jField<::jlong>("XK_notsign"), //
		jField<::jlong>("XK_ntilde"), //
		jField<::jlong>("XK_numbersign"), //
		jField<::jlong>("XK_numerosign"), //
		jField<::jlong>("XK_o"), //
		jField<::jlong>("XK_oacute"), //
		jField<::jlong>("XK_ocircumflex"), //
		jField<::jlong>("XK_odiaeresis"), //
		jField<::jlong>("XK_odoubleacute"), //
		jField<::jlong>("XK_oe"), //
		jField<::jlong>("XK_ogonek"), //
		jField<::jlong>("XK_ograve"), //
		jField<::jlong>("XK_omacron"), //
		jField<::jlong>("XK_oneeighth"), //
		jField<::jlong>("XK_onefifth"), //
		jField<::jlong>("XK_onehalf"), //
		jField<::jlong>("XK_onequarter"), //
		jField<::jlong>("XK_onesixth"), //
		jField<::jlong>("XK_onesuperior"), //
		jField<::jlong>("XK_onethird"), //
		jField<::jlong>("XK_openrectbullet"), //
		jField<::jlong>("XK_openstar"), //
		jField<::jlong>("XK_opentribulletdown"), //
		jField<::jlong>("XK_opentribulletup"), //
		jField<::jlong>("XK_ordfeminine"), //
		jField<::jlong>("XK_oslash"), //
		jField<::jlong>("XK_otilde"), //
		jField<::jlong>("XK_overbar"), //
		jField<::jlong>("XK_overline"), //
		jField<::jlong>("XK_p"), //
		jField<::jlong>("XK_paragraph"), //
		jField<::jlong>("XK_parenleft"), //
		jField<::jlong>("XK_parenright"), //
		jField<::jlong>("XK_partialderivative"), //
		jField<::jlong>("XK_percent"), //
		jField<::jlong>("XK_period"), //
		jField<::jlong>("XK_periodcentered"), //
		jField<::jlong>("XK_phonographcopyright"), //
		jField<::jlong>("XK_plus"), //
		jField<::jlong>("XK_plusminus"), //
		jField<::jlong>("XK_prescription"), //
		jField<::jlong>("XK_prolongedsound"), //
		jField<::jlong>("XK_punctspace"), //
		jField<::jlong>("XK_q"), //
		jField<::jlong>("XK_quad"), //
		jField<::jlong>("XK_question"), //
		jField<::jlong>("XK_questiondown"), //
		jField<::jlong>("XK_quotedbl"), //
		jField<::jlong>("XK_quoteleft"), //
		jField<::jlong>("XK_quoteright"), //
		jField<::jlong>("XK_r"), //
		jField<::jlong>("XK_racute"), //
		jField<::jlong>("XK_radical"), //
		jField<::jlong>("XK_rcaron"), //
		jField<::jlong>("XK_rcedilla"), //
		jField<::jlong>("XK_registered"), //
		jField<::jlong>("XK_rightanglebracket"), //
		jField<::jlong>("XK_rightarrow"), //
		jField<::jlong>("XK_rightcaret"), //
		jField<::jlong>("XK_rightdoublequotemark"), //
		jField<::jlong>("XK_rightmiddlecurlybrace"), //
		jField<::jlong>("XK_rightmiddlesummation"), //
		jField<::jlong>("XK_rightopentriangle"), //
		jField<::jlong>("XK_rightpointer"), //
		jField<::jlong>("XK_rightshoe"), //
		jField<::jlong>("XK_rightsinglequotemark"), //
		jField<::jlong>("XK_rightt"), //
		jField<::jlong>("XK_righttack"), //
		jField<::jlong>("XK_s"), //
		jField<::jlong>("XK_sacute"), //
		jField<::jlong>("XK_scaron"), //
		jField<::jlong>("XK_scedilla"), //
		jField<::jlong>("XK_scircumflex"), //
		jField<::jlong>("XK_script_switch"), //
		jField<::jlong>("XK_seconds"), //
		jField<::jlong>("XK_section"), //
		jField<::jlong>("XK_semicolon"), //
		jField<::jlong>("XK_semivoicedsound"), //
		jField<::jlong>("XK_seveneighths"), //
		jField<::jlong>("XK_signaturemark"), //
		jField<::jlong>("XK_signifblank"), //
		jField<::jlong>("XK_similarequal"), //
		jField<::jlong>("XK_singlelowquotemark"), //
		jField<::jlong>("XK_slash"), //
		jField<::jlong>("XK_soliddiamond"), //
		jField<::jlong>("XK_space"), //
		jField<::jlong>("XK_ssharp"), //
		jField<::jlong>("XK_sterling"), //
		jField<::jlong>("XK_t"), //
		jField<::jlong>("XK_tcaron"), //
		jField<::jlong>("XK_tcedilla"), //
		jField<::jlong>("XK_telephone"), //
		jField<::jlong>("XK_telephonerecorder"), //
		jField<::jlong>("XK_therefore"), //
		jField<::jlong>("XK_thinspace"), //
		jField<::jlong>("XK_thorn"), //
		jField<::jlong>("XK_threeeighths"), //
		jField<::jlong>("XK_threefifths"), //
		jField<::jlong>("XK_threequarters"), //
		jField<::jlong>("XK_threesuperior"), //
		jField<::jlong>("XK_topintegral"), //
		jField<::jlong>("XK_topleftparens"), //
		jField<::jlong>("XK_topleftradical"), //
		jField<::jlong>("XK_topleftsqbracket"), //
		jField<::jlong>("XK_topleftsummation"), //
		jField<::jlong>("XK_toprightparens"), //
		jField<::jlong>("XK_toprightsqbracket"), //
		jField<::jlong>("XK_toprightsummation"), //
		jField<::jlong>("XK_topt"), //
		jField<::jlong>("XK_topvertsummationconnector"), //
		jField<::jlong>("XK_trademark"), //
		jField<::jlong>("XK_trademarkincircle"), //
		jField<::jlong>("XK_tslash"), //
		jField<::jlong>("XK_twofifths"), //
		jField<::jlong>("XK_twosuperior"), //
		jField<::jlong>("XK_twothirds"), //
		jField<::jlong>("XK_u"), //
		jField<::jlong>("XK_uacute"), //
		jField<::jlong>("XK_ubreve"), //
		jField<::jlong>("XK_ucircumflex"), //
		jField<::jlong>("XK_udiaeresis"), //
		jField<::jlong>("XK_udoubleacute"), //
		jField<::jlong>("XK_ugrave"), //
		jField<::jlong>("XK_umacron"), //
		jField<::jlong>("XK_underbar"), //
		jField<::jlong>("XK_underscore"), //
		jField<::jlong>("XK_union"), //
		jField<::jlong>("XK_uogonek"), //
		jField<::jlong>("XK_uparrow"), //
		jField<::jlong>("XK_upcaret"), //
		jField<::jlong>("XK_upleftcorner"), //
		jField<::jlong>("XK_uprightcorner"), //
		jField<::jlong>("XK_upshoe"), //
		jField<::jlong>("XK_upstile"), //
		jField<::jlong>("XK_uptack"), //
		jField<::jlong>("XK_uring"), //
		jField<::jlong>("XK_utilde"), //
		jField<::jlong>("XK_v"), //
		jField<::jlong>("XK_variation"), //
		jField<::jlong>("XK_vertbar"), //
		jField<::jlong>("XK_vertconnector"), //
		jField<::jlong>("XK_voicedsound"), //
		jField<::jlong>("XK_vt"), //
		jField<::jlong>("XK_w"), //
		jField<::jlong>("XK_x"), //
		jField<::jlong>("XK_y"), //
		jField<::jlong>("XK_yacute"), //
		jField<::jlong>("XK_ydiaeresis"), //
		jField<::jlong>("XK_yen"), //
		jField<::jlong>("XK_z"), //
		jField<::jlong>("XK_zabovedot"), //
		jField<::jlong>("XK_zacute"), //
		jField<::jlong>("XK_zcaron"), //
		jField<::jlong>("apXK_Copy"), //
		jField<::jlong>("apXK_Cut"), //
		jField<::jlong>("apXK_Paste"), //
		jField<::jlong>("hpXK_BackTab"), //
		jField<::jlong>("hpXK_ClearLine"), //
		jField<::jlong>("hpXK_DeleteChar"), //
		jField<::jlong>("hpXK_DeleteLine"), //
		jField<::jlong>("hpXK_IO"), //
		jField<::jlong>("hpXK_InsertChar"), //
		jField<::jlong>("hpXK_InsertLine"), //
		jField<::jlong>("hpXK_KP_BackTab"), //
		jField<::jlong>("hpXK_Modelock1"), //
		jField<::jlong>("hpXK_Modelock2"), //
		jField<::jlong>("hpXK_Reset"), //
		jField<::jlong>("hpXK_System"), //
		jField<::jlong>("hpXK_User"), //
		jField<::jlong>("hpXK_Ydiaeresis"), //
		jField<::jlong>("hpXK_block"), //
		jField<::jlong>("hpXK_guilder"), //
		jField<::jlong>("hpXK_lira"), //
		jField<::jlong>("hpXK_longminus"), //
		jField<::jlong>("hpXK_mute_acute"), //
		jField<::jlong>("hpXK_mute_asciicircum"), //
		jField<::jlong>("hpXK_mute_asciitilde"), //
		jField<::jlong>("hpXK_mute_diaeresis"), //
		jField<::jlong>("hpXK_mute_grave"), //
		jField<::jlong>("osfXK_Activate"), //
		jField<::jlong>("osfXK_AddMode"), //
		jField<::jlong>("osfXK_BackSpace"), //
		jField<::jlong>("osfXK_BackTab"), //
		jField<::jlong>("osfXK_BeginData"), //
		jField<::jlong>("osfXK_BeginLine"), //
		jField<::jlong>("osfXK_Cancel"), //
		jField<::jlong>("osfXK_Clear"), //
		jField<::jlong>("osfXK_Copy"), //
		jField<::jlong>("osfXK_Cut"), //
		jField<::jlong>("osfXK_Delete"), //
		jField<::jlong>("osfXK_Down"), //
		jField<::jlong>("osfXK_EndData"), //
		jField<::jlong>("osfXK_EndLine"), //
		jField<::jlong>("osfXK_Escape"), //
		jField<::jlong>("osfXK_Help"), //
		jField<::jlong>("osfXK_Insert"), //
		jField<::jlong>("osfXK_Left"), //
		jField<::jlong>("osfXK_Menu"), //
		jField<::jlong>("osfXK_MenuBar"), //
		jField<::jlong>("osfXK_Next"), //
		jField<::jlong>("osfXK_NextField"), //
		jField<::jlong>("osfXK_NextMenu"), //
		jField<::jlong>("osfXK_PageDown"), //
		jField<::jlong>("osfXK_PageLeft"), //
		jField<::jlong>("osfXK_PageRight"), //
		jField<::jlong>("osfXK_PageUp"), //
		jField<::jlong>("osfXK_Paste"), //
		jField<::jlong>("osfXK_PrevField"), //
		jField<::jlong>("osfXK_PrevMenu"), //
		jField<::jlong>("osfXK_PrimaryPaste"), //
		jField<::jlong>("osfXK_Prior"), //
		jField<::jlong>("osfXK_QuickPaste"), //
		jField<::jlong>("osfXK_Right"), //
		jField<::jlong>("osfXK_Select"), //
		jField<::jlong>("osfXK_Undo"), //
		jField<::jlong>("osfXK_Up"), //
	};

	template<typename F = ::jlong>
	static auto DXK_acute_accent() {
		static_assert(field_signatures[jField<F>("DXK_acute_accent")] != -1);
		return sat<F>("DXK_acute_accent");
	}

	template<typename F = ::jlong>
	static auto DXK_cedilla_accent() {
		static_assert(field_signatures[jField<F>("DXK_cedilla_accent")] != -1);
		return sat<F>("DXK_cedilla_accent");
	}

	template<typename F = ::jlong>
	static auto DXK_circumflex_accent() {
		static_assert(field_signatures[jField<F>("DXK_circumflex_accent")] != -1);
		return sat<F>("DXK_circumflex_accent");
	}

	template<typename F = ::jlong>
	static auto DXK_diaeresis() {
		static_assert(field_signatures[jField<F>("DXK_diaeresis")] != -1);
		return sat<F>("DXK_diaeresis");
	}

	template<typename F = ::jlong>
	static auto DXK_grave_accent() {
		static_assert(field_signatures[jField<F>("DXK_grave_accent")] != -1);
		return sat<F>("DXK_grave_accent");
	}

	template<typename F = ::jlong>
	static auto DXK_ring_accent() {
		static_assert(field_signatures[jField<F>("DXK_ring_accent")] != -1);
		return sat<F>("DXK_ring_accent");
	}

	template<typename F = ::jlong>
	static auto DXK_tilde() {
		static_assert(field_signatures[jField<F>("DXK_tilde")] != -1);
		return sat<F>("DXK_tilde");
	}

	template<typename F = ::jlong>
	static auto SunXK_Again() {
		static_assert(field_signatures[jField<F>("SunXK_Again")] != -1);
		return sat<F>("SunXK_Again");
	}

	template<typename F = ::jlong>
	static auto SunXK_AltGraph() {
		static_assert(field_signatures[jField<F>("SunXK_AltGraph")] != -1);
		return sat<F>("SunXK_AltGraph");
	}

	template<typename F = ::jlong>
	static auto SunXK_AudioLowerVolume() {
		static_assert(field_signatures[jField<F>("SunXK_AudioLowerVolume")] != -1);
		return sat<F>("SunXK_AudioLowerVolume");
	}

	template<typename F = ::jlong>
	static auto SunXK_AudioMute() {
		static_assert(field_signatures[jField<F>("SunXK_AudioMute")] != -1);
		return sat<F>("SunXK_AudioMute");
	}

	template<typename F = ::jlong>
	static auto SunXK_AudioRaiseVolume() {
		static_assert(field_signatures[jField<F>("SunXK_AudioRaiseVolume")] != -1);
		return sat<F>("SunXK_AudioRaiseVolume");
	}

	template<typename F = ::jlong>
	static auto SunXK_Compose() {
		static_assert(field_signatures[jField<F>("SunXK_Compose")] != -1);
		return sat<F>("SunXK_Compose");
	}

	template<typename F = ::jlong>
	static auto SunXK_Copy() {
		static_assert(field_signatures[jField<F>("SunXK_Copy")] != -1);
		return sat<F>("SunXK_Copy");
	}

	template<typename F = ::jlong>
	static auto SunXK_Cut() {
		static_assert(field_signatures[jField<F>("SunXK_Cut")] != -1);
		return sat<F>("SunXK_Cut");
	}

	template<typename F = ::jlong>
	static auto SunXK_F36() {
		static_assert(field_signatures[jField<F>("SunXK_F36")] != -1);
		return sat<F>("SunXK_F36");
	}

	template<typename F = ::jlong>
	static auto SunXK_F37() {
		static_assert(field_signatures[jField<F>("SunXK_F37")] != -1);
		return sat<F>("SunXK_F37");
	}

	template<typename F = ::jlong>
	static auto SunXK_FA_Acute() {
		static_assert(field_signatures[jField<F>("SunXK_FA_Acute")] != -1);
		return sat<F>("SunXK_FA_Acute");
	}

	template<typename F = ::jlong>
	static auto SunXK_FA_Cedilla() {
		static_assert(field_signatures[jField<F>("SunXK_FA_Cedilla")] != -1);
		return sat<F>("SunXK_FA_Cedilla");
	}

	template<typename F = ::jlong>
	static auto SunXK_FA_Circum() {
		static_assert(field_signatures[jField<F>("SunXK_FA_Circum")] != -1);
		return sat<F>("SunXK_FA_Circum");
	}

	template<typename F = ::jlong>
	static auto SunXK_FA_Diaeresis() {
		static_assert(field_signatures[jField<F>("SunXK_FA_Diaeresis")] != -1);
		return sat<F>("SunXK_FA_Diaeresis");
	}

	template<typename F = ::jlong>
	static auto SunXK_FA_Grave() {
		static_assert(field_signatures[jField<F>("SunXK_FA_Grave")] != -1);
		return sat<F>("SunXK_FA_Grave");
	}

	template<typename F = ::jlong>
	static auto SunXK_FA_Tilde() {
		static_assert(field_signatures[jField<F>("SunXK_FA_Tilde")] != -1);
		return sat<F>("SunXK_FA_Tilde");
	}

	template<typename F = ::jlong>
	static auto SunXK_Find() {
		static_assert(field_signatures[jField<F>("SunXK_Find")] != -1);
		return sat<F>("SunXK_Find");
	}

	template<typename F = ::jlong>
	static auto SunXK_Front() {
		static_assert(field_signatures[jField<F>("SunXK_Front")] != -1);
		return sat<F>("SunXK_Front");
	}

	template<typename F = ::jlong>
	static auto SunXK_Open() {
		static_assert(field_signatures[jField<F>("SunXK_Open")] != -1);
		return sat<F>("SunXK_Open");
	}

	template<typename F = ::jlong>
	static auto SunXK_PageDown() {
		static_assert(field_signatures[jField<F>("SunXK_PageDown")] != -1);
		return sat<F>("SunXK_PageDown");
	}

	template<typename F = ::jlong>
	static auto SunXK_PageUp() {
		static_assert(field_signatures[jField<F>("SunXK_PageUp")] != -1);
		return sat<F>("SunXK_PageUp");
	}

	template<typename F = ::jlong>
	static auto SunXK_Paste() {
		static_assert(field_signatures[jField<F>("SunXK_Paste")] != -1);
		return sat<F>("SunXK_Paste");
	}

	template<typename F = ::jlong>
	static auto SunXK_PowerSwitch() {
		static_assert(field_signatures[jField<F>("SunXK_PowerSwitch")] != -1);
		return sat<F>("SunXK_PowerSwitch");
	}

	template<typename F = ::jlong>
	static auto SunXK_PowerSwitchShift() {
		static_assert(field_signatures[jField<F>("SunXK_PowerSwitchShift")] != -1);
		return sat<F>("SunXK_PowerSwitchShift");
	}

	template<typename F = ::jlong>
	static auto SunXK_Print_Screen() {
		static_assert(field_signatures[jField<F>("SunXK_Print_Screen")] != -1);
		return sat<F>("SunXK_Print_Screen");
	}

	template<typename F = ::jlong>
	static auto SunXK_Props() {
		static_assert(field_signatures[jField<F>("SunXK_Props")] != -1);
		return sat<F>("SunXK_Props");
	}

	template<typename F = ::jlong>
	static auto SunXK_Stop() {
		static_assert(field_signatures[jField<F>("SunXK_Stop")] != -1);
		return sat<F>("SunXK_Stop");
	}

	template<typename F = ::jlong>
	static auto SunXK_Sys_Req() {
		static_assert(field_signatures[jField<F>("SunXK_Sys_Req")] != -1);
		return sat<F>("SunXK_Sys_Req");
	}

	template<typename F = ::jlong>
	static auto SunXK_Undo() {
		static_assert(field_signatures[jField<F>("SunXK_Undo")] != -1);
		return sat<F>("SunXK_Undo");
	}

	template<typename F = ::jlong>
	static auto SunXK_VideoDegauss() {
		static_assert(field_signatures[jField<F>("SunXK_VideoDegauss")] != -1);
		return sat<F>("SunXK_VideoDegauss");
	}

	template<typename F = ::jlong>
	static auto SunXK_VideoLowerBrightness() {
		static_assert(field_signatures[jField<F>("SunXK_VideoLowerBrightness")] != -1);
		return sat<F>("SunXK_VideoLowerBrightness");
	}

	template<typename F = ::jlong>
	static auto SunXK_VideoRaiseBrightness() {
		static_assert(field_signatures[jField<F>("SunXK_VideoRaiseBrightness")] != -1);
		return sat<F>("SunXK_VideoRaiseBrightness");
	}

	template<typename F = ::jlong>
	static auto XK_0() {
		static_assert(field_signatures[jField<F>("XK_0")] != -1);
		return sat<F>("XK_0");
	}

	template<typename F = ::jlong>
	static auto XK_1() {
		static_assert(field_signatures[jField<F>("XK_1")] != -1);
		return sat<F>("XK_1");
	}

	template<typename F = ::jlong>
	static auto XK_2() {
		static_assert(field_signatures[jField<F>("XK_2")] != -1);
		return sat<F>("XK_2");
	}

	template<typename F = ::jlong>
	static auto XK_3() {
		static_assert(field_signatures[jField<F>("XK_3")] != -1);
		return sat<F>("XK_3");
	}

	template<typename F = ::jlong>
	static auto XK_3270_AltCursor() {
		static_assert(field_signatures[jField<F>("XK_3270_AltCursor")] != -1);
		return sat<F>("XK_3270_AltCursor");
	}

	template<typename F = ::jlong>
	static auto XK_3270_Attn() {
		static_assert(field_signatures[jField<F>("XK_3270_Attn")] != -1);
		return sat<F>("XK_3270_Attn");
	}

	template<typename F = ::jlong>
	static auto XK_3270_BackTab() {
		static_assert(field_signatures[jField<F>("XK_3270_BackTab")] != -1);
		return sat<F>("XK_3270_BackTab");
	}

	template<typename F = ::jlong>
	static auto XK_3270_ChangeScreen() {
		static_assert(field_signatures[jField<F>("XK_3270_ChangeScreen")] != -1);
		return sat<F>("XK_3270_ChangeScreen");
	}

	template<typename F = ::jlong>
	static auto XK_3270_Copy() {
		static_assert(field_signatures[jField<F>("XK_3270_Copy")] != -1);
		return sat<F>("XK_3270_Copy");
	}

	template<typename F = ::jlong>
	static auto XK_3270_CursorBlink() {
		static_assert(field_signatures[jField<F>("XK_3270_CursorBlink")] != -1);
		return sat<F>("XK_3270_CursorBlink");
	}

	template<typename F = ::jlong>
	static auto XK_3270_CursorSelect() {
		static_assert(field_signatures[jField<F>("XK_3270_CursorSelect")] != -1);
		return sat<F>("XK_3270_CursorSelect");
	}

	template<typename F = ::jlong>
	static auto XK_3270_DeleteWord() {
		static_assert(field_signatures[jField<F>("XK_3270_DeleteWord")] != -1);
		return sat<F>("XK_3270_DeleteWord");
	}

	template<typename F = ::jlong>
	static auto XK_3270_Duplicate() {
		static_assert(field_signatures[jField<F>("XK_3270_Duplicate")] != -1);
		return sat<F>("XK_3270_Duplicate");
	}

	template<typename F = ::jlong>
	static auto XK_3270_Enter() {
		static_assert(field_signatures[jField<F>("XK_3270_Enter")] != -1);
		return sat<F>("XK_3270_Enter");
	}

	template<typename F = ::jlong>
	static auto XK_3270_EraseEOF() {
		static_assert(field_signatures[jField<F>("XK_3270_EraseEOF")] != -1);
		return sat<F>("XK_3270_EraseEOF");
	}

	template<typename F = ::jlong>
	static auto XK_3270_EraseInput() {
		static_assert(field_signatures[jField<F>("XK_3270_EraseInput")] != -1);
		return sat<F>("XK_3270_EraseInput");
	}

	template<typename F = ::jlong>
	static auto XK_3270_ExSelect() {
		static_assert(field_signatures[jField<F>("XK_3270_ExSelect")] != -1);
		return sat<F>("XK_3270_ExSelect");
	}

	template<typename F = ::jlong>
	static auto XK_3270_FieldMark() {
		static_assert(field_signatures[jField<F>("XK_3270_FieldMark")] != -1);
		return sat<F>("XK_3270_FieldMark");
	}

	template<typename F = ::jlong>
	static auto XK_3270_Ident() {
		static_assert(field_signatures[jField<F>("XK_3270_Ident")] != -1);
		return sat<F>("XK_3270_Ident");
	}

	template<typename F = ::jlong>
	static auto XK_3270_Jump() {
		static_assert(field_signatures[jField<F>("XK_3270_Jump")] != -1);
		return sat<F>("XK_3270_Jump");
	}

	template<typename F = ::jlong>
	static auto XK_3270_KeyClick() {
		static_assert(field_signatures[jField<F>("XK_3270_KeyClick")] != -1);
		return sat<F>("XK_3270_KeyClick");
	}

	template<typename F = ::jlong>
	static auto XK_3270_Left2() {
		static_assert(field_signatures[jField<F>("XK_3270_Left2")] != -1);
		return sat<F>("XK_3270_Left2");
	}

	template<typename F = ::jlong>
	static auto XK_3270_PA1() {
		static_assert(field_signatures[jField<F>("XK_3270_PA1")] != -1);
		return sat<F>("XK_3270_PA1");
	}

	template<typename F = ::jlong>
	static auto XK_3270_PA2() {
		static_assert(field_signatures[jField<F>("XK_3270_PA2")] != -1);
		return sat<F>("XK_3270_PA2");
	}

	template<typename F = ::jlong>
	static auto XK_3270_PA3() {
		static_assert(field_signatures[jField<F>("XK_3270_PA3")] != -1);
		return sat<F>("XK_3270_PA3");
	}

	template<typename F = ::jlong>
	static auto XK_3270_Play() {
		static_assert(field_signatures[jField<F>("XK_3270_Play")] != -1);
		return sat<F>("XK_3270_Play");
	}

	template<typename F = ::jlong>
	static auto XK_3270_PrintScreen() {
		static_assert(field_signatures[jField<F>("XK_3270_PrintScreen")] != -1);
		return sat<F>("XK_3270_PrintScreen");
	}

	template<typename F = ::jlong>
	static auto XK_3270_Quit() {
		static_assert(field_signatures[jField<F>("XK_3270_Quit")] != -1);
		return sat<F>("XK_3270_Quit");
	}

	template<typename F = ::jlong>
	static auto XK_3270_Record() {
		static_assert(field_signatures[jField<F>("XK_3270_Record")] != -1);
		return sat<F>("XK_3270_Record");
	}

	template<typename F = ::jlong>
	static auto XK_3270_Reset() {
		static_assert(field_signatures[jField<F>("XK_3270_Reset")] != -1);
		return sat<F>("XK_3270_Reset");
	}

	template<typename F = ::jlong>
	static auto XK_3270_Right2() {
		static_assert(field_signatures[jField<F>("XK_3270_Right2")] != -1);
		return sat<F>("XK_3270_Right2");
	}

	template<typename F = ::jlong>
	static auto XK_3270_Rule() {
		static_assert(field_signatures[jField<F>("XK_3270_Rule")] != -1);
		return sat<F>("XK_3270_Rule");
	}

	template<typename F = ::jlong>
	static auto XK_3270_Setup() {
		static_assert(field_signatures[jField<F>("XK_3270_Setup")] != -1);
		return sat<F>("XK_3270_Setup");
	}

	template<typename F = ::jlong>
	static auto XK_3270_Test() {
		static_assert(field_signatures[jField<F>("XK_3270_Test")] != -1);
		return sat<F>("XK_3270_Test");
	}

	template<typename F = ::jlong>
	static auto XK_4() {
		static_assert(field_signatures[jField<F>("XK_4")] != -1);
		return sat<F>("XK_4");
	}

	template<typename F = ::jlong>
	static auto XK_5() {
		static_assert(field_signatures[jField<F>("XK_5")] != -1);
		return sat<F>("XK_5");
	}

	template<typename F = ::jlong>
	static auto XK_6() {
		static_assert(field_signatures[jField<F>("XK_6")] != -1);
		return sat<F>("XK_6");
	}

	template<typename F = ::jlong>
	static auto XK_7() {
		static_assert(field_signatures[jField<F>("XK_7")] != -1);
		return sat<F>("XK_7");
	}

	template<typename F = ::jlong>
	static auto XK_8() {
		static_assert(field_signatures[jField<F>("XK_8")] != -1);
		return sat<F>("XK_8");
	}

	template<typename F = ::jlong>
	static auto XK_9() {
		static_assert(field_signatures[jField<F>("XK_9")] != -1);
		return sat<F>("XK_9");
	}

	template<typename F = ::jlong>
	static auto XK_A() {
		static_assert(field_signatures[jField<F>("XK_A")] != -1);
		return sat<F>("XK_A");
	}

	template<typename F = ::jlong>
	static auto XK_AE() {
		static_assert(field_signatures[jField<F>("XK_AE")] != -1);
		return sat<F>("XK_AE");
	}

	template<typename F = ::jlong>
	static auto XK_Aacute() {
		static_assert(field_signatures[jField<F>("XK_Aacute")] != -1);
		return sat<F>("XK_Aacute");
	}

	template<typename F = ::jlong>
	static auto XK_Abreve() {
		static_assert(field_signatures[jField<F>("XK_Abreve")] != -1);
		return sat<F>("XK_Abreve");
	}

	template<typename F = ::jlong>
	static auto XK_AccessX_Enable() {
		static_assert(field_signatures[jField<F>("XK_AccessX_Enable")] != -1);
		return sat<F>("XK_AccessX_Enable");
	}

	template<typename F = ::jlong>
	static auto XK_AccessX_Feedback_Enable() {
		static_assert(field_signatures[jField<F>("XK_AccessX_Feedback_Enable")] != -1);
		return sat<F>("XK_AccessX_Feedback_Enable");
	}

	template<typename F = ::jlong>
	static auto XK_Acircumflex() {
		static_assert(field_signatures[jField<F>("XK_Acircumflex")] != -1);
		return sat<F>("XK_Acircumflex");
	}

	template<typename F = ::jlong>
	static auto XK_Adiaeresis() {
		static_assert(field_signatures[jField<F>("XK_Adiaeresis")] != -1);
		return sat<F>("XK_Adiaeresis");
	}

	template<typename F = ::jlong>
	static auto XK_Agrave() {
		static_assert(field_signatures[jField<F>("XK_Agrave")] != -1);
		return sat<F>("XK_Agrave");
	}

	template<typename F = ::jlong>
	static auto XK_Alt_L() {
		static_assert(field_signatures[jField<F>("XK_Alt_L")] != -1);
		return sat<F>("XK_Alt_L");
	}

	template<typename F = ::jlong>
	static auto XK_Alt_R() {
		static_assert(field_signatures[jField<F>("XK_Alt_R")] != -1);
		return sat<F>("XK_Alt_R");
	}

	template<typename F = ::jlong>
	static auto XK_Amacron() {
		static_assert(field_signatures[jField<F>("XK_Amacron")] != -1);
		return sat<F>("XK_Amacron");
	}

	template<typename F = ::jlong>
	static auto XK_Aogonek() {
		static_assert(field_signatures[jField<F>("XK_Aogonek")] != -1);
		return sat<F>("XK_Aogonek");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_ain() {
		static_assert(field_signatures[jField<F>("XK_Arabic_ain")] != -1);
		return sat<F>("XK_Arabic_ain");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_alef() {
		static_assert(field_signatures[jField<F>("XK_Arabic_alef")] != -1);
		return sat<F>("XK_Arabic_alef");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_alefmaksura() {
		static_assert(field_signatures[jField<F>("XK_Arabic_alefmaksura")] != -1);
		return sat<F>("XK_Arabic_alefmaksura");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_beh() {
		static_assert(field_signatures[jField<F>("XK_Arabic_beh")] != -1);
		return sat<F>("XK_Arabic_beh");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_comma() {
		static_assert(field_signatures[jField<F>("XK_Arabic_comma")] != -1);
		return sat<F>("XK_Arabic_comma");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_dad() {
		static_assert(field_signatures[jField<F>("XK_Arabic_dad")] != -1);
		return sat<F>("XK_Arabic_dad");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_dal() {
		static_assert(field_signatures[jField<F>("XK_Arabic_dal")] != -1);
		return sat<F>("XK_Arabic_dal");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_damma() {
		static_assert(field_signatures[jField<F>("XK_Arabic_damma")] != -1);
		return sat<F>("XK_Arabic_damma");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_dammatan() {
		static_assert(field_signatures[jField<F>("XK_Arabic_dammatan")] != -1);
		return sat<F>("XK_Arabic_dammatan");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_fatha() {
		static_assert(field_signatures[jField<F>("XK_Arabic_fatha")] != -1);
		return sat<F>("XK_Arabic_fatha");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_fathatan() {
		static_assert(field_signatures[jField<F>("XK_Arabic_fathatan")] != -1);
		return sat<F>("XK_Arabic_fathatan");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_feh() {
		static_assert(field_signatures[jField<F>("XK_Arabic_feh")] != -1);
		return sat<F>("XK_Arabic_feh");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_ghain() {
		static_assert(field_signatures[jField<F>("XK_Arabic_ghain")] != -1);
		return sat<F>("XK_Arabic_ghain");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_ha() {
		static_assert(field_signatures[jField<F>("XK_Arabic_ha")] != -1);
		return sat<F>("XK_Arabic_ha");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_hah() {
		static_assert(field_signatures[jField<F>("XK_Arabic_hah")] != -1);
		return sat<F>("XK_Arabic_hah");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_hamza() {
		static_assert(field_signatures[jField<F>("XK_Arabic_hamza")] != -1);
		return sat<F>("XK_Arabic_hamza");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_hamzaonalef() {
		static_assert(field_signatures[jField<F>("XK_Arabic_hamzaonalef")] != -1);
		return sat<F>("XK_Arabic_hamzaonalef");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_hamzaonwaw() {
		static_assert(field_signatures[jField<F>("XK_Arabic_hamzaonwaw")] != -1);
		return sat<F>("XK_Arabic_hamzaonwaw");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_hamzaonyeh() {
		static_assert(field_signatures[jField<F>("XK_Arabic_hamzaonyeh")] != -1);
		return sat<F>("XK_Arabic_hamzaonyeh");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_hamzaunderalef() {
		static_assert(field_signatures[jField<F>("XK_Arabic_hamzaunderalef")] != -1);
		return sat<F>("XK_Arabic_hamzaunderalef");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_heh() {
		static_assert(field_signatures[jField<F>("XK_Arabic_heh")] != -1);
		return sat<F>("XK_Arabic_heh");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_jeem() {
		static_assert(field_signatures[jField<F>("XK_Arabic_jeem")] != -1);
		return sat<F>("XK_Arabic_jeem");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_kaf() {
		static_assert(field_signatures[jField<F>("XK_Arabic_kaf")] != -1);
		return sat<F>("XK_Arabic_kaf");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_kasra() {
		static_assert(field_signatures[jField<F>("XK_Arabic_kasra")] != -1);
		return sat<F>("XK_Arabic_kasra");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_kasratan() {
		static_assert(field_signatures[jField<F>("XK_Arabic_kasratan")] != -1);
		return sat<F>("XK_Arabic_kasratan");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_khah() {
		static_assert(field_signatures[jField<F>("XK_Arabic_khah")] != -1);
		return sat<F>("XK_Arabic_khah");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_lam() {
		static_assert(field_signatures[jField<F>("XK_Arabic_lam")] != -1);
		return sat<F>("XK_Arabic_lam");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_maddaonalef() {
		static_assert(field_signatures[jField<F>("XK_Arabic_maddaonalef")] != -1);
		return sat<F>("XK_Arabic_maddaonalef");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_meem() {
		static_assert(field_signatures[jField<F>("XK_Arabic_meem")] != -1);
		return sat<F>("XK_Arabic_meem");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_noon() {
		static_assert(field_signatures[jField<F>("XK_Arabic_noon")] != -1);
		return sat<F>("XK_Arabic_noon");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_qaf() {
		static_assert(field_signatures[jField<F>("XK_Arabic_qaf")] != -1);
		return sat<F>("XK_Arabic_qaf");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_question_mark() {
		static_assert(field_signatures[jField<F>("XK_Arabic_question_mark")] != -1);
		return sat<F>("XK_Arabic_question_mark");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_ra() {
		static_assert(field_signatures[jField<F>("XK_Arabic_ra")] != -1);
		return sat<F>("XK_Arabic_ra");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_sad() {
		static_assert(field_signatures[jField<F>("XK_Arabic_sad")] != -1);
		return sat<F>("XK_Arabic_sad");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_seen() {
		static_assert(field_signatures[jField<F>("XK_Arabic_seen")] != -1);
		return sat<F>("XK_Arabic_seen");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_semicolon() {
		static_assert(field_signatures[jField<F>("XK_Arabic_semicolon")] != -1);
		return sat<F>("XK_Arabic_semicolon");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_shadda() {
		static_assert(field_signatures[jField<F>("XK_Arabic_shadda")] != -1);
		return sat<F>("XK_Arabic_shadda");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_sheen() {
		static_assert(field_signatures[jField<F>("XK_Arabic_sheen")] != -1);
		return sat<F>("XK_Arabic_sheen");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_sukun() {
		static_assert(field_signatures[jField<F>("XK_Arabic_sukun")] != -1);
		return sat<F>("XK_Arabic_sukun");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_switch() {
		static_assert(field_signatures[jField<F>("XK_Arabic_switch")] != -1);
		return sat<F>("XK_Arabic_switch");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_tah() {
		static_assert(field_signatures[jField<F>("XK_Arabic_tah")] != -1);
		return sat<F>("XK_Arabic_tah");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_tatweel() {
		static_assert(field_signatures[jField<F>("XK_Arabic_tatweel")] != -1);
		return sat<F>("XK_Arabic_tatweel");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_teh() {
		static_assert(field_signatures[jField<F>("XK_Arabic_teh")] != -1);
		return sat<F>("XK_Arabic_teh");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_tehmarbuta() {
		static_assert(field_signatures[jField<F>("XK_Arabic_tehmarbuta")] != -1);
		return sat<F>("XK_Arabic_tehmarbuta");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_thal() {
		static_assert(field_signatures[jField<F>("XK_Arabic_thal")] != -1);
		return sat<F>("XK_Arabic_thal");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_theh() {
		static_assert(field_signatures[jField<F>("XK_Arabic_theh")] != -1);
		return sat<F>("XK_Arabic_theh");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_waw() {
		static_assert(field_signatures[jField<F>("XK_Arabic_waw")] != -1);
		return sat<F>("XK_Arabic_waw");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_yeh() {
		static_assert(field_signatures[jField<F>("XK_Arabic_yeh")] != -1);
		return sat<F>("XK_Arabic_yeh");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_zah() {
		static_assert(field_signatures[jField<F>("XK_Arabic_zah")] != -1);
		return sat<F>("XK_Arabic_zah");
	}

	template<typename F = ::jlong>
	static auto XK_Arabic_zain() {
		static_assert(field_signatures[jField<F>("XK_Arabic_zain")] != -1);
		return sat<F>("XK_Arabic_zain");
	}

	template<typename F = ::jlong>
	static auto XK_Aring() {
		static_assert(field_signatures[jField<F>("XK_Aring")] != -1);
		return sat<F>("XK_Aring");
	}

	template<typename F = ::jlong>
	static auto XK_Atilde() {
		static_assert(field_signatures[jField<F>("XK_Atilde")] != -1);
		return sat<F>("XK_Atilde");
	}

	template<typename F = ::jlong>
	static auto XK_AudibleBell_Enable() {
		static_assert(field_signatures[jField<F>("XK_AudibleBell_Enable")] != -1);
		return sat<F>("XK_AudibleBell_Enable");
	}

	template<typename F = ::jlong>
	static auto XK_B() {
		static_assert(field_signatures[jField<F>("XK_B")] != -1);
		return sat<F>("XK_B");
	}

	template<typename F = ::jlong>
	static auto XK_BackSpace() {
		static_assert(field_signatures[jField<F>("XK_BackSpace")] != -1);
		return sat<F>("XK_BackSpace");
	}

	template<typename F = ::jlong>
	static auto XK_Begin() {
		static_assert(field_signatures[jField<F>("XK_Begin")] != -1);
		return sat<F>("XK_Begin");
	}

	template<typename F = ::jlong>
	static auto XK_BounceKeys_Enable() {
		static_assert(field_signatures[jField<F>("XK_BounceKeys_Enable")] != -1);
		return sat<F>("XK_BounceKeys_Enable");
	}

	template<typename F = ::jlong>
	static auto XK_Break() {
		static_assert(field_signatures[jField<F>("XK_Break")] != -1);
		return sat<F>("XK_Break");
	}

	template<typename F = ::jlong>
	static auto XK_Byelorussian_SHORTU() {
		static_assert(field_signatures[jField<F>("XK_Byelorussian_SHORTU")] != -1);
		return sat<F>("XK_Byelorussian_SHORTU");
	}

	template<typename F = ::jlong>
	static auto XK_Byelorussian_shortu() {
		static_assert(field_signatures[jField<F>("XK_Byelorussian_shortu")] != -1);
		return sat<F>("XK_Byelorussian_shortu");
	}

	template<typename F = ::jlong>
	static auto XK_C() {
		static_assert(field_signatures[jField<F>("XK_C")] != -1);
		return sat<F>("XK_C");
	}

	template<typename F = ::jlong>
	static auto XK_Cabovedot() {
		static_assert(field_signatures[jField<F>("XK_Cabovedot")] != -1);
		return sat<F>("XK_Cabovedot");
	}

	template<typename F = ::jlong>
	static auto XK_Cacute() {
		static_assert(field_signatures[jField<F>("XK_Cacute")] != -1);
		return sat<F>("XK_Cacute");
	}

	template<typename F = ::jlong>
	static auto XK_Cancel() {
		static_assert(field_signatures[jField<F>("XK_Cancel")] != -1);
		return sat<F>("XK_Cancel");
	}

	template<typename F = ::jlong>
	static auto XK_Caps_Lock() {
		static_assert(field_signatures[jField<F>("XK_Caps_Lock")] != -1);
		return sat<F>("XK_Caps_Lock");
	}

	template<typename F = ::jlong>
	static auto XK_Ccaron() {
		static_assert(field_signatures[jField<F>("XK_Ccaron")] != -1);
		return sat<F>("XK_Ccaron");
	}

	template<typename F = ::jlong>
	static auto XK_Ccedilla() {
		static_assert(field_signatures[jField<F>("XK_Ccedilla")] != -1);
		return sat<F>("XK_Ccedilla");
	}

	template<typename F = ::jlong>
	static auto XK_Ccircumflex() {
		static_assert(field_signatures[jField<F>("XK_Ccircumflex")] != -1);
		return sat<F>("XK_Ccircumflex");
	}

	template<typename F = ::jlong>
	static auto XK_Clear() {
		static_assert(field_signatures[jField<F>("XK_Clear")] != -1);
		return sat<F>("XK_Clear");
	}

	template<typename F = ::jlong>
	static auto XK_Codeinput() {
		static_assert(field_signatures[jField<F>("XK_Codeinput")] != -1);
		return sat<F>("XK_Codeinput");
	}

	template<typename F = ::jlong>
	static auto XK_ColonSign() {
		static_assert(field_signatures[jField<F>("XK_ColonSign")] != -1);
		return sat<F>("XK_ColonSign");
	}

	template<typename F = ::jlong>
	static auto XK_Control_L() {
		static_assert(field_signatures[jField<F>("XK_Control_L")] != -1);
		return sat<F>("XK_Control_L");
	}

	template<typename F = ::jlong>
	static auto XK_Control_R() {
		static_assert(field_signatures[jField<F>("XK_Control_R")] != -1);
		return sat<F>("XK_Control_R");
	}

	template<typename F = ::jlong>
	static auto XK_CruzeiroSign() {
		static_assert(field_signatures[jField<F>("XK_CruzeiroSign")] != -1);
		return sat<F>("XK_CruzeiroSign");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_A() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_A")] != -1);
		return sat<F>("XK_Cyrillic_A");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_BE() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_BE")] != -1);
		return sat<F>("XK_Cyrillic_BE");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_CHE() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_CHE")] != -1);
		return sat<F>("XK_Cyrillic_CHE");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_DE() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_DE")] != -1);
		return sat<F>("XK_Cyrillic_DE");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_DZHE() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_DZHE")] != -1);
		return sat<F>("XK_Cyrillic_DZHE");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_E() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_E")] != -1);
		return sat<F>("XK_Cyrillic_E");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_EF() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_EF")] != -1);
		return sat<F>("XK_Cyrillic_EF");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_EL() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_EL")] != -1);
		return sat<F>("XK_Cyrillic_EL");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_EM() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_EM")] != -1);
		return sat<F>("XK_Cyrillic_EM");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_EN() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_EN")] != -1);
		return sat<F>("XK_Cyrillic_EN");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_ER() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_ER")] != -1);
		return sat<F>("XK_Cyrillic_ER");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_ES() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_ES")] != -1);
		return sat<F>("XK_Cyrillic_ES");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_GHE() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_GHE")] != -1);
		return sat<F>("XK_Cyrillic_GHE");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_HA() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_HA")] != -1);
		return sat<F>("XK_Cyrillic_HA");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_HARDSIGN() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_HARDSIGN")] != -1);
		return sat<F>("XK_Cyrillic_HARDSIGN");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_I() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_I")] != -1);
		return sat<F>("XK_Cyrillic_I");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_IE() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_IE")] != -1);
		return sat<F>("XK_Cyrillic_IE");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_IO() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_IO")] != -1);
		return sat<F>("XK_Cyrillic_IO");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_JE() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_JE")] != -1);
		return sat<F>("XK_Cyrillic_JE");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_KA() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_KA")] != -1);
		return sat<F>("XK_Cyrillic_KA");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_LJE() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_LJE")] != -1);
		return sat<F>("XK_Cyrillic_LJE");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_NJE() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_NJE")] != -1);
		return sat<F>("XK_Cyrillic_NJE");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_O() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_O")] != -1);
		return sat<F>("XK_Cyrillic_O");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_PE() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_PE")] != -1);
		return sat<F>("XK_Cyrillic_PE");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_SHA() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_SHA")] != -1);
		return sat<F>("XK_Cyrillic_SHA");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_SHCHA() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_SHCHA")] != -1);
		return sat<F>("XK_Cyrillic_SHCHA");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_SHORTI() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_SHORTI")] != -1);
		return sat<F>("XK_Cyrillic_SHORTI");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_SOFTSIGN() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_SOFTSIGN")] != -1);
		return sat<F>("XK_Cyrillic_SOFTSIGN");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_TE() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_TE")] != -1);
		return sat<F>("XK_Cyrillic_TE");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_TSE() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_TSE")] != -1);
		return sat<F>("XK_Cyrillic_TSE");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_U() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_U")] != -1);
		return sat<F>("XK_Cyrillic_U");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_VE() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_VE")] != -1);
		return sat<F>("XK_Cyrillic_VE");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_YA() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_YA")] != -1);
		return sat<F>("XK_Cyrillic_YA");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_YERU() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_YERU")] != -1);
		return sat<F>("XK_Cyrillic_YERU");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_YU() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_YU")] != -1);
		return sat<F>("XK_Cyrillic_YU");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_ZE() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_ZE")] != -1);
		return sat<F>("XK_Cyrillic_ZE");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_ZHE() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_ZHE")] != -1);
		return sat<F>("XK_Cyrillic_ZHE");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_a() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_a")] != -1);
		return sat<F>("XK_Cyrillic_a");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_be() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_be")] != -1);
		return sat<F>("XK_Cyrillic_be");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_che() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_che")] != -1);
		return sat<F>("XK_Cyrillic_che");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_de() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_de")] != -1);
		return sat<F>("XK_Cyrillic_de");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_dzhe() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_dzhe")] != -1);
		return sat<F>("XK_Cyrillic_dzhe");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_e() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_e")] != -1);
		return sat<F>("XK_Cyrillic_e");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_ef() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_ef")] != -1);
		return sat<F>("XK_Cyrillic_ef");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_el() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_el")] != -1);
		return sat<F>("XK_Cyrillic_el");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_em() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_em")] != -1);
		return sat<F>("XK_Cyrillic_em");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_en() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_en")] != -1);
		return sat<F>("XK_Cyrillic_en");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_er() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_er")] != -1);
		return sat<F>("XK_Cyrillic_er");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_es() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_es")] != -1);
		return sat<F>("XK_Cyrillic_es");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_ghe() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_ghe")] != -1);
		return sat<F>("XK_Cyrillic_ghe");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_ha() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_ha")] != -1);
		return sat<F>("XK_Cyrillic_ha");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_hardsign() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_hardsign")] != -1);
		return sat<F>("XK_Cyrillic_hardsign");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_i() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_i")] != -1);
		return sat<F>("XK_Cyrillic_i");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_ie() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_ie")] != -1);
		return sat<F>("XK_Cyrillic_ie");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_io() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_io")] != -1);
		return sat<F>("XK_Cyrillic_io");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_je() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_je")] != -1);
		return sat<F>("XK_Cyrillic_je");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_ka() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_ka")] != -1);
		return sat<F>("XK_Cyrillic_ka");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_lje() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_lje")] != -1);
		return sat<F>("XK_Cyrillic_lje");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_nje() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_nje")] != -1);
		return sat<F>("XK_Cyrillic_nje");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_o() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_o")] != -1);
		return sat<F>("XK_Cyrillic_o");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_pe() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_pe")] != -1);
		return sat<F>("XK_Cyrillic_pe");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_sha() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_sha")] != -1);
		return sat<F>("XK_Cyrillic_sha");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_shcha() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_shcha")] != -1);
		return sat<F>("XK_Cyrillic_shcha");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_shorti() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_shorti")] != -1);
		return sat<F>("XK_Cyrillic_shorti");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_softsign() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_softsign")] != -1);
		return sat<F>("XK_Cyrillic_softsign");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_te() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_te")] != -1);
		return sat<F>("XK_Cyrillic_te");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_tse() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_tse")] != -1);
		return sat<F>("XK_Cyrillic_tse");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_u() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_u")] != -1);
		return sat<F>("XK_Cyrillic_u");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_ve() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_ve")] != -1);
		return sat<F>("XK_Cyrillic_ve");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_ya() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_ya")] != -1);
		return sat<F>("XK_Cyrillic_ya");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_yeru() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_yeru")] != -1);
		return sat<F>("XK_Cyrillic_yeru");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_yu() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_yu")] != -1);
		return sat<F>("XK_Cyrillic_yu");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_ze() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_ze")] != -1);
		return sat<F>("XK_Cyrillic_ze");
	}

	template<typename F = ::jlong>
	static auto XK_Cyrillic_zhe() {
		static_assert(field_signatures[jField<F>("XK_Cyrillic_zhe")] != -1);
		return sat<F>("XK_Cyrillic_zhe");
	}

	template<typename F = ::jlong>
	static auto XK_D() {
		static_assert(field_signatures[jField<F>("XK_D")] != -1);
		return sat<F>("XK_D");
	}

	template<typename F = ::jlong>
	static auto XK_Dcaron() {
		static_assert(field_signatures[jField<F>("XK_Dcaron")] != -1);
		return sat<F>("XK_Dcaron");
	}

	template<typename F = ::jlong>
	static auto XK_Delete() {
		static_assert(field_signatures[jField<F>("XK_Delete")] != -1);
		return sat<F>("XK_Delete");
	}

	template<typename F = ::jlong>
	static auto XK_DongSign() {
		static_assert(field_signatures[jField<F>("XK_DongSign")] != -1);
		return sat<F>("XK_DongSign");
	}

	template<typename F = ::jlong>
	static auto XK_Down() {
		static_assert(field_signatures[jField<F>("XK_Down")] != -1);
		return sat<F>("XK_Down");
	}

	template<typename F = ::jlong>
	static auto XK_Dstroke() {
		static_assert(field_signatures[jField<F>("XK_Dstroke")] != -1);
		return sat<F>("XK_Dstroke");
	}

	template<typename F = ::jlong>
	static auto XK_E() {
		static_assert(field_signatures[jField<F>("XK_E")] != -1);
		return sat<F>("XK_E");
	}

	template<typename F = ::jlong>
	static auto XK_ENG() {
		static_assert(field_signatures[jField<F>("XK_ENG")] != -1);
		return sat<F>("XK_ENG");
	}

	template<typename F = ::jlong>
	static auto XK_ETH() {
		static_assert(field_signatures[jField<F>("XK_ETH")] != -1);
		return sat<F>("XK_ETH");
	}

	template<typename F = ::jlong>
	static auto XK_Eabovedot() {
		static_assert(field_signatures[jField<F>("XK_Eabovedot")] != -1);
		return sat<F>("XK_Eabovedot");
	}

	template<typename F = ::jlong>
	static auto XK_Eacute() {
		static_assert(field_signatures[jField<F>("XK_Eacute")] != -1);
		return sat<F>("XK_Eacute");
	}

	template<typename F = ::jlong>
	static auto XK_Ecaron() {
		static_assert(field_signatures[jField<F>("XK_Ecaron")] != -1);
		return sat<F>("XK_Ecaron");
	}

	template<typename F = ::jlong>
	static auto XK_Ecircumflex() {
		static_assert(field_signatures[jField<F>("XK_Ecircumflex")] != -1);
		return sat<F>("XK_Ecircumflex");
	}

	template<typename F = ::jlong>
	static auto XK_EcuSign() {
		static_assert(field_signatures[jField<F>("XK_EcuSign")] != -1);
		return sat<F>("XK_EcuSign");
	}

	template<typename F = ::jlong>
	static auto XK_Ediaeresis() {
		static_assert(field_signatures[jField<F>("XK_Ediaeresis")] != -1);
		return sat<F>("XK_Ediaeresis");
	}

	template<typename F = ::jlong>
	static auto XK_Egrave() {
		static_assert(field_signatures[jField<F>("XK_Egrave")] != -1);
		return sat<F>("XK_Egrave");
	}

	template<typename F = ::jlong>
	static auto XK_Eisu_Shift() {
		static_assert(field_signatures[jField<F>("XK_Eisu_Shift")] != -1);
		return sat<F>("XK_Eisu_Shift");
	}

	template<typename F = ::jlong>
	static auto XK_Eisu_toggle() {
		static_assert(field_signatures[jField<F>("XK_Eisu_toggle")] != -1);
		return sat<F>("XK_Eisu_toggle");
	}

	template<typename F = ::jlong>
	static auto XK_Emacron() {
		static_assert(field_signatures[jField<F>("XK_Emacron")] != -1);
		return sat<F>("XK_Emacron");
	}

	template<typename F = ::jlong>
	static auto XK_End() {
		static_assert(field_signatures[jField<F>("XK_End")] != -1);
		return sat<F>("XK_End");
	}

	template<typename F = ::jlong>
	static auto XK_Eogonek() {
		static_assert(field_signatures[jField<F>("XK_Eogonek")] != -1);
		return sat<F>("XK_Eogonek");
	}

	template<typename F = ::jlong>
	static auto XK_Escape() {
		static_assert(field_signatures[jField<F>("XK_Escape")] != -1);
		return sat<F>("XK_Escape");
	}

	template<typename F = ::jlong>
	static auto XK_Eth() {
		static_assert(field_signatures[jField<F>("XK_Eth")] != -1);
		return sat<F>("XK_Eth");
	}

	template<typename F = ::jlong>
	static auto XK_EuroSign() {
		static_assert(field_signatures[jField<F>("XK_EuroSign")] != -1);
		return sat<F>("XK_EuroSign");
	}

	template<typename F = ::jlong>
	static auto XK_Execute() {
		static_assert(field_signatures[jField<F>("XK_Execute")] != -1);
		return sat<F>("XK_Execute");
	}

	template<typename F = ::jlong>
	static auto XK_F() {
		static_assert(field_signatures[jField<F>("XK_F")] != -1);
		return sat<F>("XK_F");
	}

	template<typename F = ::jlong>
	static auto XK_F1() {
		static_assert(field_signatures[jField<F>("XK_F1")] != -1);
		return sat<F>("XK_F1");
	}

	template<typename F = ::jlong>
	static auto XK_F10() {
		static_assert(field_signatures[jField<F>("XK_F10")] != -1);
		return sat<F>("XK_F10");
	}

	template<typename F = ::jlong>
	static auto XK_F11() {
		static_assert(field_signatures[jField<F>("XK_F11")] != -1);
		return sat<F>("XK_F11");
	}

	template<typename F = ::jlong>
	static auto XK_F12() {
		static_assert(field_signatures[jField<F>("XK_F12")] != -1);
		return sat<F>("XK_F12");
	}

	template<typename F = ::jlong>
	static auto XK_F13() {
		static_assert(field_signatures[jField<F>("XK_F13")] != -1);
		return sat<F>("XK_F13");
	}

	template<typename F = ::jlong>
	static auto XK_F14() {
		static_assert(field_signatures[jField<F>("XK_F14")] != -1);
		return sat<F>("XK_F14");
	}

	template<typename F = ::jlong>
	static auto XK_F15() {
		static_assert(field_signatures[jField<F>("XK_F15")] != -1);
		return sat<F>("XK_F15");
	}

	template<typename F = ::jlong>
	static auto XK_F16() {
		static_assert(field_signatures[jField<F>("XK_F16")] != -1);
		return sat<F>("XK_F16");
	}

	template<typename F = ::jlong>
	static auto XK_F17() {
		static_assert(field_signatures[jField<F>("XK_F17")] != -1);
		return sat<F>("XK_F17");
	}

	template<typename F = ::jlong>
	static auto XK_F18() {
		static_assert(field_signatures[jField<F>("XK_F18")] != -1);
		return sat<F>("XK_F18");
	}

	template<typename F = ::jlong>
	static auto XK_F19() {
		static_assert(field_signatures[jField<F>("XK_F19")] != -1);
		return sat<F>("XK_F19");
	}

	template<typename F = ::jlong>
	static auto XK_F2() {
		static_assert(field_signatures[jField<F>("XK_F2")] != -1);
		return sat<F>("XK_F2");
	}

	template<typename F = ::jlong>
	static auto XK_F20() {
		static_assert(field_signatures[jField<F>("XK_F20")] != -1);
		return sat<F>("XK_F20");
	}

	template<typename F = ::jlong>
	static auto XK_F21() {
		static_assert(field_signatures[jField<F>("XK_F21")] != -1);
		return sat<F>("XK_F21");
	}

	template<typename F = ::jlong>
	static auto XK_F22() {
		static_assert(field_signatures[jField<F>("XK_F22")] != -1);
		return sat<F>("XK_F22");
	}

	template<typename F = ::jlong>
	static auto XK_F23() {
		static_assert(field_signatures[jField<F>("XK_F23")] != -1);
		return sat<F>("XK_F23");
	}

	template<typename F = ::jlong>
	static auto XK_F24() {
		static_assert(field_signatures[jField<F>("XK_F24")] != -1);
		return sat<F>("XK_F24");
	}

	template<typename F = ::jlong>
	static auto XK_F25() {
		static_assert(field_signatures[jField<F>("XK_F25")] != -1);
		return sat<F>("XK_F25");
	}

	template<typename F = ::jlong>
	static auto XK_F26() {
		static_assert(field_signatures[jField<F>("XK_F26")] != -1);
		return sat<F>("XK_F26");
	}

	template<typename F = ::jlong>
	static auto XK_F27() {
		static_assert(field_signatures[jField<F>("XK_F27")] != -1);
		return sat<F>("XK_F27");
	}

	template<typename F = ::jlong>
	static auto XK_F28() {
		static_assert(field_signatures[jField<F>("XK_F28")] != -1);
		return sat<F>("XK_F28");
	}

	template<typename F = ::jlong>
	static auto XK_F29() {
		static_assert(field_signatures[jField<F>("XK_F29")] != -1);
		return sat<F>("XK_F29");
	}

	template<typename F = ::jlong>
	static auto XK_F3() {
		static_assert(field_signatures[jField<F>("XK_F3")] != -1);
		return sat<F>("XK_F3");
	}

	template<typename F = ::jlong>
	static auto XK_F30() {
		static_assert(field_signatures[jField<F>("XK_F30")] != -1);
		return sat<F>("XK_F30");
	}

	template<typename F = ::jlong>
	static auto XK_F31() {
		static_assert(field_signatures[jField<F>("XK_F31")] != -1);
		return sat<F>("XK_F31");
	}

	template<typename F = ::jlong>
	static auto XK_F32() {
		static_assert(field_signatures[jField<F>("XK_F32")] != -1);
		return sat<F>("XK_F32");
	}

	template<typename F = ::jlong>
	static auto XK_F33() {
		static_assert(field_signatures[jField<F>("XK_F33")] != -1);
		return sat<F>("XK_F33");
	}

	template<typename F = ::jlong>
	static auto XK_F34() {
		static_assert(field_signatures[jField<F>("XK_F34")] != -1);
		return sat<F>("XK_F34");
	}

	template<typename F = ::jlong>
	static auto XK_F35() {
		static_assert(field_signatures[jField<F>("XK_F35")] != -1);
		return sat<F>("XK_F35");
	}

	template<typename F = ::jlong>
	static auto XK_F4() {
		static_assert(field_signatures[jField<F>("XK_F4")] != -1);
		return sat<F>("XK_F4");
	}

	template<typename F = ::jlong>
	static auto XK_F5() {
		static_assert(field_signatures[jField<F>("XK_F5")] != -1);
		return sat<F>("XK_F5");
	}

	template<typename F = ::jlong>
	static auto XK_F6() {
		static_assert(field_signatures[jField<F>("XK_F6")] != -1);
		return sat<F>("XK_F6");
	}

	template<typename F = ::jlong>
	static auto XK_F7() {
		static_assert(field_signatures[jField<F>("XK_F7")] != -1);
		return sat<F>("XK_F7");
	}

	template<typename F = ::jlong>
	static auto XK_F8() {
		static_assert(field_signatures[jField<F>("XK_F8")] != -1);
		return sat<F>("XK_F8");
	}

	template<typename F = ::jlong>
	static auto XK_F9() {
		static_assert(field_signatures[jField<F>("XK_F9")] != -1);
		return sat<F>("XK_F9");
	}

	template<typename F = ::jlong>
	static auto XK_FFrancSign() {
		static_assert(field_signatures[jField<F>("XK_FFrancSign")] != -1);
		return sat<F>("XK_FFrancSign");
	}

	template<typename F = ::jlong>
	static auto XK_Find() {
		static_assert(field_signatures[jField<F>("XK_Find")] != -1);
		return sat<F>("XK_Find");
	}

	template<typename F = ::jlong>
	static auto XK_First_Virtual_Screen() {
		static_assert(field_signatures[jField<F>("XK_First_Virtual_Screen")] != -1);
		return sat<F>("XK_First_Virtual_Screen");
	}

	template<typename F = ::jlong>
	static auto XK_G() {
		static_assert(field_signatures[jField<F>("XK_G")] != -1);
		return sat<F>("XK_G");
	}

	template<typename F = ::jlong>
	static auto XK_Gabovedot() {
		static_assert(field_signatures[jField<F>("XK_Gabovedot")] != -1);
		return sat<F>("XK_Gabovedot");
	}

	template<typename F = ::jlong>
	static auto XK_Gbreve() {
		static_assert(field_signatures[jField<F>("XK_Gbreve")] != -1);
		return sat<F>("XK_Gbreve");
	}

	template<typename F = ::jlong>
	static auto XK_Gcedilla() {
		static_assert(field_signatures[jField<F>("XK_Gcedilla")] != -1);
		return sat<F>("XK_Gcedilla");
	}

	template<typename F = ::jlong>
	static auto XK_Gcircumflex() {
		static_assert(field_signatures[jField<F>("XK_Gcircumflex")] != -1);
		return sat<F>("XK_Gcircumflex");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_ALPHA() {
		static_assert(field_signatures[jField<F>("XK_Greek_ALPHA")] != -1);
		return sat<F>("XK_Greek_ALPHA");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_ALPHAaccent() {
		static_assert(field_signatures[jField<F>("XK_Greek_ALPHAaccent")] != -1);
		return sat<F>("XK_Greek_ALPHAaccent");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_BETA() {
		static_assert(field_signatures[jField<F>("XK_Greek_BETA")] != -1);
		return sat<F>("XK_Greek_BETA");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_CHI() {
		static_assert(field_signatures[jField<F>("XK_Greek_CHI")] != -1);
		return sat<F>("XK_Greek_CHI");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_DELTA() {
		static_assert(field_signatures[jField<F>("XK_Greek_DELTA")] != -1);
		return sat<F>("XK_Greek_DELTA");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_EPSILON() {
		static_assert(field_signatures[jField<F>("XK_Greek_EPSILON")] != -1);
		return sat<F>("XK_Greek_EPSILON");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_EPSILONaccent() {
		static_assert(field_signatures[jField<F>("XK_Greek_EPSILONaccent")] != -1);
		return sat<F>("XK_Greek_EPSILONaccent");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_ETA() {
		static_assert(field_signatures[jField<F>("XK_Greek_ETA")] != -1);
		return sat<F>("XK_Greek_ETA");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_ETAaccent() {
		static_assert(field_signatures[jField<F>("XK_Greek_ETAaccent")] != -1);
		return sat<F>("XK_Greek_ETAaccent");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_GAMMA() {
		static_assert(field_signatures[jField<F>("XK_Greek_GAMMA")] != -1);
		return sat<F>("XK_Greek_GAMMA");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_IOTA() {
		static_assert(field_signatures[jField<F>("XK_Greek_IOTA")] != -1);
		return sat<F>("XK_Greek_IOTA");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_IOTAaccent() {
		static_assert(field_signatures[jField<F>("XK_Greek_IOTAaccent")] != -1);
		return sat<F>("XK_Greek_IOTAaccent");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_IOTAdiaeresis() {
		static_assert(field_signatures[jField<F>("XK_Greek_IOTAdiaeresis")] != -1);
		return sat<F>("XK_Greek_IOTAdiaeresis");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_KAPPA() {
		static_assert(field_signatures[jField<F>("XK_Greek_KAPPA")] != -1);
		return sat<F>("XK_Greek_KAPPA");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_LAMBDA() {
		static_assert(field_signatures[jField<F>("XK_Greek_LAMBDA")] != -1);
		return sat<F>("XK_Greek_LAMBDA");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_LAMDA() {
		static_assert(field_signatures[jField<F>("XK_Greek_LAMDA")] != -1);
		return sat<F>("XK_Greek_LAMDA");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_MU() {
		static_assert(field_signatures[jField<F>("XK_Greek_MU")] != -1);
		return sat<F>("XK_Greek_MU");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_NU() {
		static_assert(field_signatures[jField<F>("XK_Greek_NU")] != -1);
		return sat<F>("XK_Greek_NU");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_OMEGA() {
		static_assert(field_signatures[jField<F>("XK_Greek_OMEGA")] != -1);
		return sat<F>("XK_Greek_OMEGA");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_OMEGAaccent() {
		static_assert(field_signatures[jField<F>("XK_Greek_OMEGAaccent")] != -1);
		return sat<F>("XK_Greek_OMEGAaccent");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_OMICRON() {
		static_assert(field_signatures[jField<F>("XK_Greek_OMICRON")] != -1);
		return sat<F>("XK_Greek_OMICRON");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_OMICRONaccent() {
		static_assert(field_signatures[jField<F>("XK_Greek_OMICRONaccent")] != -1);
		return sat<F>("XK_Greek_OMICRONaccent");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_PHI() {
		static_assert(field_signatures[jField<F>("XK_Greek_PHI")] != -1);
		return sat<F>("XK_Greek_PHI");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_PI() {
		static_assert(field_signatures[jField<F>("XK_Greek_PI")] != -1);
		return sat<F>("XK_Greek_PI");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_PSI() {
		static_assert(field_signatures[jField<F>("XK_Greek_PSI")] != -1);
		return sat<F>("XK_Greek_PSI");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_RHO() {
		static_assert(field_signatures[jField<F>("XK_Greek_RHO")] != -1);
		return sat<F>("XK_Greek_RHO");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_SIGMA() {
		static_assert(field_signatures[jField<F>("XK_Greek_SIGMA")] != -1);
		return sat<F>("XK_Greek_SIGMA");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_TAU() {
		static_assert(field_signatures[jField<F>("XK_Greek_TAU")] != -1);
		return sat<F>("XK_Greek_TAU");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_THETA() {
		static_assert(field_signatures[jField<F>("XK_Greek_THETA")] != -1);
		return sat<F>("XK_Greek_THETA");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_UPSILON() {
		static_assert(field_signatures[jField<F>("XK_Greek_UPSILON")] != -1);
		return sat<F>("XK_Greek_UPSILON");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_UPSILONaccent() {
		static_assert(field_signatures[jField<F>("XK_Greek_UPSILONaccent")] != -1);
		return sat<F>("XK_Greek_UPSILONaccent");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_UPSILONdieresis() {
		static_assert(field_signatures[jField<F>("XK_Greek_UPSILONdieresis")] != -1);
		return sat<F>("XK_Greek_UPSILONdieresis");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_XI() {
		static_assert(field_signatures[jField<F>("XK_Greek_XI")] != -1);
		return sat<F>("XK_Greek_XI");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_ZETA() {
		static_assert(field_signatures[jField<F>("XK_Greek_ZETA")] != -1);
		return sat<F>("XK_Greek_ZETA");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_accentdieresis() {
		static_assert(field_signatures[jField<F>("XK_Greek_accentdieresis")] != -1);
		return sat<F>("XK_Greek_accentdieresis");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_alpha() {
		static_assert(field_signatures[jField<F>("XK_Greek_alpha")] != -1);
		return sat<F>("XK_Greek_alpha");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_alphaaccent() {
		static_assert(field_signatures[jField<F>("XK_Greek_alphaaccent")] != -1);
		return sat<F>("XK_Greek_alphaaccent");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_beta() {
		static_assert(field_signatures[jField<F>("XK_Greek_beta")] != -1);
		return sat<F>("XK_Greek_beta");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_chi() {
		static_assert(field_signatures[jField<F>("XK_Greek_chi")] != -1);
		return sat<F>("XK_Greek_chi");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_delta() {
		static_assert(field_signatures[jField<F>("XK_Greek_delta")] != -1);
		return sat<F>("XK_Greek_delta");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_epsilon() {
		static_assert(field_signatures[jField<F>("XK_Greek_epsilon")] != -1);
		return sat<F>("XK_Greek_epsilon");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_epsilonaccent() {
		static_assert(field_signatures[jField<F>("XK_Greek_epsilonaccent")] != -1);
		return sat<F>("XK_Greek_epsilonaccent");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_eta() {
		static_assert(field_signatures[jField<F>("XK_Greek_eta")] != -1);
		return sat<F>("XK_Greek_eta");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_etaaccent() {
		static_assert(field_signatures[jField<F>("XK_Greek_etaaccent")] != -1);
		return sat<F>("XK_Greek_etaaccent");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_finalsmallsigma() {
		static_assert(field_signatures[jField<F>("XK_Greek_finalsmallsigma")] != -1);
		return sat<F>("XK_Greek_finalsmallsigma");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_gamma() {
		static_assert(field_signatures[jField<F>("XK_Greek_gamma")] != -1);
		return sat<F>("XK_Greek_gamma");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_horizbar() {
		static_assert(field_signatures[jField<F>("XK_Greek_horizbar")] != -1);
		return sat<F>("XK_Greek_horizbar");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_iota() {
		static_assert(field_signatures[jField<F>("XK_Greek_iota")] != -1);
		return sat<F>("XK_Greek_iota");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_iotaaccent() {
		static_assert(field_signatures[jField<F>("XK_Greek_iotaaccent")] != -1);
		return sat<F>("XK_Greek_iotaaccent");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_iotaaccentdieresis() {
		static_assert(field_signatures[jField<F>("XK_Greek_iotaaccentdieresis")] != -1);
		return sat<F>("XK_Greek_iotaaccentdieresis");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_iotadieresis() {
		static_assert(field_signatures[jField<F>("XK_Greek_iotadieresis")] != -1);
		return sat<F>("XK_Greek_iotadieresis");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_kappa() {
		static_assert(field_signatures[jField<F>("XK_Greek_kappa")] != -1);
		return sat<F>("XK_Greek_kappa");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_lambda() {
		static_assert(field_signatures[jField<F>("XK_Greek_lambda")] != -1);
		return sat<F>("XK_Greek_lambda");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_lamda() {
		static_assert(field_signatures[jField<F>("XK_Greek_lamda")] != -1);
		return sat<F>("XK_Greek_lamda");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_mu() {
		static_assert(field_signatures[jField<F>("XK_Greek_mu")] != -1);
		return sat<F>("XK_Greek_mu");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_nu() {
		static_assert(field_signatures[jField<F>("XK_Greek_nu")] != -1);
		return sat<F>("XK_Greek_nu");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_omega() {
		static_assert(field_signatures[jField<F>("XK_Greek_omega")] != -1);
		return sat<F>("XK_Greek_omega");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_omegaaccent() {
		static_assert(field_signatures[jField<F>("XK_Greek_omegaaccent")] != -1);
		return sat<F>("XK_Greek_omegaaccent");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_omicron() {
		static_assert(field_signatures[jField<F>("XK_Greek_omicron")] != -1);
		return sat<F>("XK_Greek_omicron");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_omicronaccent() {
		static_assert(field_signatures[jField<F>("XK_Greek_omicronaccent")] != -1);
		return sat<F>("XK_Greek_omicronaccent");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_phi() {
		static_assert(field_signatures[jField<F>("XK_Greek_phi")] != -1);
		return sat<F>("XK_Greek_phi");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_pi() {
		static_assert(field_signatures[jField<F>("XK_Greek_pi")] != -1);
		return sat<F>("XK_Greek_pi");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_psi() {
		static_assert(field_signatures[jField<F>("XK_Greek_psi")] != -1);
		return sat<F>("XK_Greek_psi");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_rho() {
		static_assert(field_signatures[jField<F>("XK_Greek_rho")] != -1);
		return sat<F>("XK_Greek_rho");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_sigma() {
		static_assert(field_signatures[jField<F>("XK_Greek_sigma")] != -1);
		return sat<F>("XK_Greek_sigma");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_switch() {
		static_assert(field_signatures[jField<F>("XK_Greek_switch")] != -1);
		return sat<F>("XK_Greek_switch");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_tau() {
		static_assert(field_signatures[jField<F>("XK_Greek_tau")] != -1);
		return sat<F>("XK_Greek_tau");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_theta() {
		static_assert(field_signatures[jField<F>("XK_Greek_theta")] != -1);
		return sat<F>("XK_Greek_theta");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_upsilon() {
		static_assert(field_signatures[jField<F>("XK_Greek_upsilon")] != -1);
		return sat<F>("XK_Greek_upsilon");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_upsilonaccent() {
		static_assert(field_signatures[jField<F>("XK_Greek_upsilonaccent")] != -1);
		return sat<F>("XK_Greek_upsilonaccent");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_upsilonaccentdieresis() {
		static_assert(field_signatures[jField<F>("XK_Greek_upsilonaccentdieresis")] != -1);
		return sat<F>("XK_Greek_upsilonaccentdieresis");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_upsilondieresis() {
		static_assert(field_signatures[jField<F>("XK_Greek_upsilondieresis")] != -1);
		return sat<F>("XK_Greek_upsilondieresis");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_xi() {
		static_assert(field_signatures[jField<F>("XK_Greek_xi")] != -1);
		return sat<F>("XK_Greek_xi");
	}

	template<typename F = ::jlong>
	static auto XK_Greek_zeta() {
		static_assert(field_signatures[jField<F>("XK_Greek_zeta")] != -1);
		return sat<F>("XK_Greek_zeta");
	}

	template<typename F = ::jlong>
	static auto XK_H() {
		static_assert(field_signatures[jField<F>("XK_H")] != -1);
		return sat<F>("XK_H");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul() {
		static_assert(field_signatures[jField<F>("XK_Hangul")] != -1);
		return sat<F>("XK_Hangul");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_A() {
		static_assert(field_signatures[jField<F>("XK_Hangul_A")] != -1);
		return sat<F>("XK_Hangul_A");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_AE() {
		static_assert(field_signatures[jField<F>("XK_Hangul_AE")] != -1);
		return sat<F>("XK_Hangul_AE");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_AraeA() {
		static_assert(field_signatures[jField<F>("XK_Hangul_AraeA")] != -1);
		return sat<F>("XK_Hangul_AraeA");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_AraeAE() {
		static_assert(field_signatures[jField<F>("XK_Hangul_AraeAE")] != -1);
		return sat<F>("XK_Hangul_AraeAE");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_Banja() {
		static_assert(field_signatures[jField<F>("XK_Hangul_Banja")] != -1);
		return sat<F>("XK_Hangul_Banja");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_Cieuc() {
		static_assert(field_signatures[jField<F>("XK_Hangul_Cieuc")] != -1);
		return sat<F>("XK_Hangul_Cieuc");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_Codeinput() {
		static_assert(field_signatures[jField<F>("XK_Hangul_Codeinput")] != -1);
		return sat<F>("XK_Hangul_Codeinput");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_Dikeud() {
		static_assert(field_signatures[jField<F>("XK_Hangul_Dikeud")] != -1);
		return sat<F>("XK_Hangul_Dikeud");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_E() {
		static_assert(field_signatures[jField<F>("XK_Hangul_E")] != -1);
		return sat<F>("XK_Hangul_E");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_EO() {
		static_assert(field_signatures[jField<F>("XK_Hangul_EO")] != -1);
		return sat<F>("XK_Hangul_EO");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_EU() {
		static_assert(field_signatures[jField<F>("XK_Hangul_EU")] != -1);
		return sat<F>("XK_Hangul_EU");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_End() {
		static_assert(field_signatures[jField<F>("XK_Hangul_End")] != -1);
		return sat<F>("XK_Hangul_End");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_Hanja() {
		static_assert(field_signatures[jField<F>("XK_Hangul_Hanja")] != -1);
		return sat<F>("XK_Hangul_Hanja");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_Hieuh() {
		static_assert(field_signatures[jField<F>("XK_Hangul_Hieuh")] != -1);
		return sat<F>("XK_Hangul_Hieuh");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_I() {
		static_assert(field_signatures[jField<F>("XK_Hangul_I")] != -1);
		return sat<F>("XK_Hangul_I");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_Ieung() {
		static_assert(field_signatures[jField<F>("XK_Hangul_Ieung")] != -1);
		return sat<F>("XK_Hangul_Ieung");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_J_Cieuc() {
		static_assert(field_signatures[jField<F>("XK_Hangul_J_Cieuc")] != -1);
		return sat<F>("XK_Hangul_J_Cieuc");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_J_Dikeud() {
		static_assert(field_signatures[jField<F>("XK_Hangul_J_Dikeud")] != -1);
		return sat<F>("XK_Hangul_J_Dikeud");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_J_Hieuh() {
		static_assert(field_signatures[jField<F>("XK_Hangul_J_Hieuh")] != -1);
		return sat<F>("XK_Hangul_J_Hieuh");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_J_Ieung() {
		static_assert(field_signatures[jField<F>("XK_Hangul_J_Ieung")] != -1);
		return sat<F>("XK_Hangul_J_Ieung");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_J_Jieuj() {
		static_assert(field_signatures[jField<F>("XK_Hangul_J_Jieuj")] != -1);
		return sat<F>("XK_Hangul_J_Jieuj");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_J_Khieuq() {
		static_assert(field_signatures[jField<F>("XK_Hangul_J_Khieuq")] != -1);
		return sat<F>("XK_Hangul_J_Khieuq");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_J_Kiyeog() {
		static_assert(field_signatures[jField<F>("XK_Hangul_J_Kiyeog")] != -1);
		return sat<F>("XK_Hangul_J_Kiyeog");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_J_KiyeogSios() {
		static_assert(field_signatures[jField<F>("XK_Hangul_J_KiyeogSios")] != -1);
		return sat<F>("XK_Hangul_J_KiyeogSios");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_J_KkogjiDalrinIeung() {
		static_assert(field_signatures[jField<F>("XK_Hangul_J_KkogjiDalrinIeung")] != -1);
		return sat<F>("XK_Hangul_J_KkogjiDalrinIeung");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_J_Mieum() {
		static_assert(field_signatures[jField<F>("XK_Hangul_J_Mieum")] != -1);
		return sat<F>("XK_Hangul_J_Mieum");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_J_Nieun() {
		static_assert(field_signatures[jField<F>("XK_Hangul_J_Nieun")] != -1);
		return sat<F>("XK_Hangul_J_Nieun");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_J_NieunHieuh() {
		static_assert(field_signatures[jField<F>("XK_Hangul_J_NieunHieuh")] != -1);
		return sat<F>("XK_Hangul_J_NieunHieuh");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_J_NieunJieuj() {
		static_assert(field_signatures[jField<F>("XK_Hangul_J_NieunJieuj")] != -1);
		return sat<F>("XK_Hangul_J_NieunJieuj");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_J_PanSios() {
		static_assert(field_signatures[jField<F>("XK_Hangul_J_PanSios")] != -1);
		return sat<F>("XK_Hangul_J_PanSios");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_J_Phieuf() {
		static_assert(field_signatures[jField<F>("XK_Hangul_J_Phieuf")] != -1);
		return sat<F>("XK_Hangul_J_Phieuf");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_J_Pieub() {
		static_assert(field_signatures[jField<F>("XK_Hangul_J_Pieub")] != -1);
		return sat<F>("XK_Hangul_J_Pieub");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_J_PieubSios() {
		static_assert(field_signatures[jField<F>("XK_Hangul_J_PieubSios")] != -1);
		return sat<F>("XK_Hangul_J_PieubSios");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_J_Rieul() {
		static_assert(field_signatures[jField<F>("XK_Hangul_J_Rieul")] != -1);
		return sat<F>("XK_Hangul_J_Rieul");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_J_RieulHieuh() {
		static_assert(field_signatures[jField<F>("XK_Hangul_J_RieulHieuh")] != -1);
		return sat<F>("XK_Hangul_J_RieulHieuh");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_J_RieulKiyeog() {
		static_assert(field_signatures[jField<F>("XK_Hangul_J_RieulKiyeog")] != -1);
		return sat<F>("XK_Hangul_J_RieulKiyeog");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_J_RieulMieum() {
		static_assert(field_signatures[jField<F>("XK_Hangul_J_RieulMieum")] != -1);
		return sat<F>("XK_Hangul_J_RieulMieum");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_J_RieulPhieuf() {
		static_assert(field_signatures[jField<F>("XK_Hangul_J_RieulPhieuf")] != -1);
		return sat<F>("XK_Hangul_J_RieulPhieuf");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_J_RieulPieub() {
		static_assert(field_signatures[jField<F>("XK_Hangul_J_RieulPieub")] != -1);
		return sat<F>("XK_Hangul_J_RieulPieub");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_J_RieulSios() {
		static_assert(field_signatures[jField<F>("XK_Hangul_J_RieulSios")] != -1);
		return sat<F>("XK_Hangul_J_RieulSios");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_J_RieulTieut() {
		static_assert(field_signatures[jField<F>("XK_Hangul_J_RieulTieut")] != -1);
		return sat<F>("XK_Hangul_J_RieulTieut");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_J_Sios() {
		static_assert(field_signatures[jField<F>("XK_Hangul_J_Sios")] != -1);
		return sat<F>("XK_Hangul_J_Sios");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_J_SsangKiyeog() {
		static_assert(field_signatures[jField<F>("XK_Hangul_J_SsangKiyeog")] != -1);
		return sat<F>("XK_Hangul_J_SsangKiyeog");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_J_SsangSios() {
		static_assert(field_signatures[jField<F>("XK_Hangul_J_SsangSios")] != -1);
		return sat<F>("XK_Hangul_J_SsangSios");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_J_Tieut() {
		static_assert(field_signatures[jField<F>("XK_Hangul_J_Tieut")] != -1);
		return sat<F>("XK_Hangul_J_Tieut");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_J_YeorinHieuh() {
		static_assert(field_signatures[jField<F>("XK_Hangul_J_YeorinHieuh")] != -1);
		return sat<F>("XK_Hangul_J_YeorinHieuh");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_Jamo() {
		static_assert(field_signatures[jField<F>("XK_Hangul_Jamo")] != -1);
		return sat<F>("XK_Hangul_Jamo");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_Jeonja() {
		static_assert(field_signatures[jField<F>("XK_Hangul_Jeonja")] != -1);
		return sat<F>("XK_Hangul_Jeonja");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_Jieuj() {
		static_assert(field_signatures[jField<F>("XK_Hangul_Jieuj")] != -1);
		return sat<F>("XK_Hangul_Jieuj");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_Khieuq() {
		static_assert(field_signatures[jField<F>("XK_Hangul_Khieuq")] != -1);
		return sat<F>("XK_Hangul_Khieuq");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_Kiyeog() {
		static_assert(field_signatures[jField<F>("XK_Hangul_Kiyeog")] != -1);
		return sat<F>("XK_Hangul_Kiyeog");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_KiyeogSios() {
		static_assert(field_signatures[jField<F>("XK_Hangul_KiyeogSios")] != -1);
		return sat<F>("XK_Hangul_KiyeogSios");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_KkogjiDalrinIeung() {
		static_assert(field_signatures[jField<F>("XK_Hangul_KkogjiDalrinIeung")] != -1);
		return sat<F>("XK_Hangul_KkogjiDalrinIeung");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_Mieum() {
		static_assert(field_signatures[jField<F>("XK_Hangul_Mieum")] != -1);
		return sat<F>("XK_Hangul_Mieum");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_MultipleCandidate() {
		static_assert(field_signatures[jField<F>("XK_Hangul_MultipleCandidate")] != -1);
		return sat<F>("XK_Hangul_MultipleCandidate");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_Nieun() {
		static_assert(field_signatures[jField<F>("XK_Hangul_Nieun")] != -1);
		return sat<F>("XK_Hangul_Nieun");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_NieunHieuh() {
		static_assert(field_signatures[jField<F>("XK_Hangul_NieunHieuh")] != -1);
		return sat<F>("XK_Hangul_NieunHieuh");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_NieunJieuj() {
		static_assert(field_signatures[jField<F>("XK_Hangul_NieunJieuj")] != -1);
		return sat<F>("XK_Hangul_NieunJieuj");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_O() {
		static_assert(field_signatures[jField<F>("XK_Hangul_O")] != -1);
		return sat<F>("XK_Hangul_O");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_OE() {
		static_assert(field_signatures[jField<F>("XK_Hangul_OE")] != -1);
		return sat<F>("XK_Hangul_OE");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_PanSios() {
		static_assert(field_signatures[jField<F>("XK_Hangul_PanSios")] != -1);
		return sat<F>("XK_Hangul_PanSios");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_Phieuf() {
		static_assert(field_signatures[jField<F>("XK_Hangul_Phieuf")] != -1);
		return sat<F>("XK_Hangul_Phieuf");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_Pieub() {
		static_assert(field_signatures[jField<F>("XK_Hangul_Pieub")] != -1);
		return sat<F>("XK_Hangul_Pieub");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_PieubSios() {
		static_assert(field_signatures[jField<F>("XK_Hangul_PieubSios")] != -1);
		return sat<F>("XK_Hangul_PieubSios");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_PostHanja() {
		static_assert(field_signatures[jField<F>("XK_Hangul_PostHanja")] != -1);
		return sat<F>("XK_Hangul_PostHanja");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_PreHanja() {
		static_assert(field_signatures[jField<F>("XK_Hangul_PreHanja")] != -1);
		return sat<F>("XK_Hangul_PreHanja");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_PreviousCandidate() {
		static_assert(field_signatures[jField<F>("XK_Hangul_PreviousCandidate")] != -1);
		return sat<F>("XK_Hangul_PreviousCandidate");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_Rieul() {
		static_assert(field_signatures[jField<F>("XK_Hangul_Rieul")] != -1);
		return sat<F>("XK_Hangul_Rieul");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_RieulHieuh() {
		static_assert(field_signatures[jField<F>("XK_Hangul_RieulHieuh")] != -1);
		return sat<F>("XK_Hangul_RieulHieuh");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_RieulKiyeog() {
		static_assert(field_signatures[jField<F>("XK_Hangul_RieulKiyeog")] != -1);
		return sat<F>("XK_Hangul_RieulKiyeog");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_RieulMieum() {
		static_assert(field_signatures[jField<F>("XK_Hangul_RieulMieum")] != -1);
		return sat<F>("XK_Hangul_RieulMieum");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_RieulPhieuf() {
		static_assert(field_signatures[jField<F>("XK_Hangul_RieulPhieuf")] != -1);
		return sat<F>("XK_Hangul_RieulPhieuf");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_RieulPieub() {
		static_assert(field_signatures[jField<F>("XK_Hangul_RieulPieub")] != -1);
		return sat<F>("XK_Hangul_RieulPieub");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_RieulSios() {
		static_assert(field_signatures[jField<F>("XK_Hangul_RieulSios")] != -1);
		return sat<F>("XK_Hangul_RieulSios");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_RieulTieut() {
		static_assert(field_signatures[jField<F>("XK_Hangul_RieulTieut")] != -1);
		return sat<F>("XK_Hangul_RieulTieut");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_RieulYeorinHieuh() {
		static_assert(field_signatures[jField<F>("XK_Hangul_RieulYeorinHieuh")] != -1);
		return sat<F>("XK_Hangul_RieulYeorinHieuh");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_Romaja() {
		static_assert(field_signatures[jField<F>("XK_Hangul_Romaja")] != -1);
		return sat<F>("XK_Hangul_Romaja");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_SingleCandidate() {
		static_assert(field_signatures[jField<F>("XK_Hangul_SingleCandidate")] != -1);
		return sat<F>("XK_Hangul_SingleCandidate");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_Sios() {
		static_assert(field_signatures[jField<F>("XK_Hangul_Sios")] != -1);
		return sat<F>("XK_Hangul_Sios");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_Special() {
		static_assert(field_signatures[jField<F>("XK_Hangul_Special")] != -1);
		return sat<F>("XK_Hangul_Special");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_SsangDikeud() {
		static_assert(field_signatures[jField<F>("XK_Hangul_SsangDikeud")] != -1);
		return sat<F>("XK_Hangul_SsangDikeud");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_SsangJieuj() {
		static_assert(field_signatures[jField<F>("XK_Hangul_SsangJieuj")] != -1);
		return sat<F>("XK_Hangul_SsangJieuj");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_SsangKiyeog() {
		static_assert(field_signatures[jField<F>("XK_Hangul_SsangKiyeog")] != -1);
		return sat<F>("XK_Hangul_SsangKiyeog");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_SsangPieub() {
		static_assert(field_signatures[jField<F>("XK_Hangul_SsangPieub")] != -1);
		return sat<F>("XK_Hangul_SsangPieub");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_SsangSios() {
		static_assert(field_signatures[jField<F>("XK_Hangul_SsangSios")] != -1);
		return sat<F>("XK_Hangul_SsangSios");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_Start() {
		static_assert(field_signatures[jField<F>("XK_Hangul_Start")] != -1);
		return sat<F>("XK_Hangul_Start");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_SunkyeongeumMieum() {
		static_assert(field_signatures[jField<F>("XK_Hangul_SunkyeongeumMieum")] != -1);
		return sat<F>("XK_Hangul_SunkyeongeumMieum");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_SunkyeongeumPhieuf() {
		static_assert(field_signatures[jField<F>("XK_Hangul_SunkyeongeumPhieuf")] != -1);
		return sat<F>("XK_Hangul_SunkyeongeumPhieuf");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_SunkyeongeumPieub() {
		static_assert(field_signatures[jField<F>("XK_Hangul_SunkyeongeumPieub")] != -1);
		return sat<F>("XK_Hangul_SunkyeongeumPieub");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_Tieut() {
		static_assert(field_signatures[jField<F>("XK_Hangul_Tieut")] != -1);
		return sat<F>("XK_Hangul_Tieut");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_U() {
		static_assert(field_signatures[jField<F>("XK_Hangul_U")] != -1);
		return sat<F>("XK_Hangul_U");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_WA() {
		static_assert(field_signatures[jField<F>("XK_Hangul_WA")] != -1);
		return sat<F>("XK_Hangul_WA");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_WAE() {
		static_assert(field_signatures[jField<F>("XK_Hangul_WAE")] != -1);
		return sat<F>("XK_Hangul_WAE");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_WE() {
		static_assert(field_signatures[jField<F>("XK_Hangul_WE")] != -1);
		return sat<F>("XK_Hangul_WE");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_WEO() {
		static_assert(field_signatures[jField<F>("XK_Hangul_WEO")] != -1);
		return sat<F>("XK_Hangul_WEO");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_WI() {
		static_assert(field_signatures[jField<F>("XK_Hangul_WI")] != -1);
		return sat<F>("XK_Hangul_WI");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_YA() {
		static_assert(field_signatures[jField<F>("XK_Hangul_YA")] != -1);
		return sat<F>("XK_Hangul_YA");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_YAE() {
		static_assert(field_signatures[jField<F>("XK_Hangul_YAE")] != -1);
		return sat<F>("XK_Hangul_YAE");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_YE() {
		static_assert(field_signatures[jField<F>("XK_Hangul_YE")] != -1);
		return sat<F>("XK_Hangul_YE");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_YEO() {
		static_assert(field_signatures[jField<F>("XK_Hangul_YEO")] != -1);
		return sat<F>("XK_Hangul_YEO");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_YI() {
		static_assert(field_signatures[jField<F>("XK_Hangul_YI")] != -1);
		return sat<F>("XK_Hangul_YI");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_YO() {
		static_assert(field_signatures[jField<F>("XK_Hangul_YO")] != -1);
		return sat<F>("XK_Hangul_YO");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_YU() {
		static_assert(field_signatures[jField<F>("XK_Hangul_YU")] != -1);
		return sat<F>("XK_Hangul_YU");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_YeorinHieuh() {
		static_assert(field_signatures[jField<F>("XK_Hangul_YeorinHieuh")] != -1);
		return sat<F>("XK_Hangul_YeorinHieuh");
	}

	template<typename F = ::jlong>
	static auto XK_Hangul_switch() {
		static_assert(field_signatures[jField<F>("XK_Hangul_switch")] != -1);
		return sat<F>("XK_Hangul_switch");
	}

	template<typename F = ::jlong>
	static auto XK_Hankaku() {
		static_assert(field_signatures[jField<F>("XK_Hankaku")] != -1);
		return sat<F>("XK_Hankaku");
	}

	template<typename F = ::jlong>
	static auto XK_Hcircumflex() {
		static_assert(field_signatures[jField<F>("XK_Hcircumflex")] != -1);
		return sat<F>("XK_Hcircumflex");
	}

	template<typename F = ::jlong>
	static auto XK_Hebrew_switch() {
		static_assert(field_signatures[jField<F>("XK_Hebrew_switch")] != -1);
		return sat<F>("XK_Hebrew_switch");
	}

	template<typename F = ::jlong>
	static auto XK_Help() {
		static_assert(field_signatures[jField<F>("XK_Help")] != -1);
		return sat<F>("XK_Help");
	}

	template<typename F = ::jlong>
	static auto XK_Henkan() {
		static_assert(field_signatures[jField<F>("XK_Henkan")] != -1);
		return sat<F>("XK_Henkan");
	}

	template<typename F = ::jlong>
	static auto XK_Henkan_Mode() {
		static_assert(field_signatures[jField<F>("XK_Henkan_Mode")] != -1);
		return sat<F>("XK_Henkan_Mode");
	}

	template<typename F = ::jlong>
	static auto XK_Hiragana() {
		static_assert(field_signatures[jField<F>("XK_Hiragana")] != -1);
		return sat<F>("XK_Hiragana");
	}

	template<typename F = ::jlong>
	static auto XK_Hiragana_Katakana() {
		static_assert(field_signatures[jField<F>("XK_Hiragana_Katakana")] != -1);
		return sat<F>("XK_Hiragana_Katakana");
	}

	template<typename F = ::jlong>
	static auto XK_Home() {
		static_assert(field_signatures[jField<F>("XK_Home")] != -1);
		return sat<F>("XK_Home");
	}

	template<typename F = ::jlong>
	static auto XK_Hstroke() {
		static_assert(field_signatures[jField<F>("XK_Hstroke")] != -1);
		return sat<F>("XK_Hstroke");
	}

	template<typename F = ::jlong>
	static auto XK_Hyper_L() {
		static_assert(field_signatures[jField<F>("XK_Hyper_L")] != -1);
		return sat<F>("XK_Hyper_L");
	}

	template<typename F = ::jlong>
	static auto XK_Hyper_R() {
		static_assert(field_signatures[jField<F>("XK_Hyper_R")] != -1);
		return sat<F>("XK_Hyper_R");
	}

	template<typename F = ::jlong>
	static auto XK_I() {
		static_assert(field_signatures[jField<F>("XK_I")] != -1);
		return sat<F>("XK_I");
	}

	template<typename F = ::jlong>
	static auto XK_ISO_Center_Object() {
		static_assert(field_signatures[jField<F>("XK_ISO_Center_Object")] != -1);
		return sat<F>("XK_ISO_Center_Object");
	}

	template<typename F = ::jlong>
	static auto XK_ISO_Continuous_Underline() {
		static_assert(field_signatures[jField<F>("XK_ISO_Continuous_Underline")] != -1);
		return sat<F>("XK_ISO_Continuous_Underline");
	}

	template<typename F = ::jlong>
	static auto XK_ISO_Discontinuous_Underline() {
		static_assert(field_signatures[jField<F>("XK_ISO_Discontinuous_Underline")] != -1);
		return sat<F>("XK_ISO_Discontinuous_Underline");
	}

	template<typename F = ::jlong>
	static auto XK_ISO_Emphasize() {
		static_assert(field_signatures[jField<F>("XK_ISO_Emphasize")] != -1);
		return sat<F>("XK_ISO_Emphasize");
	}

	template<typename F = ::jlong>
	static auto XK_ISO_Enter() {
		static_assert(field_signatures[jField<F>("XK_ISO_Enter")] != -1);
		return sat<F>("XK_ISO_Enter");
	}

	template<typename F = ::jlong>
	static auto XK_ISO_Fast_Cursor_Down() {
		static_assert(field_signatures[jField<F>("XK_ISO_Fast_Cursor_Down")] != -1);
		return sat<F>("XK_ISO_Fast_Cursor_Down");
	}

	template<typename F = ::jlong>
	static auto XK_ISO_Fast_Cursor_Left() {
		static_assert(field_signatures[jField<F>("XK_ISO_Fast_Cursor_Left")] != -1);
		return sat<F>("XK_ISO_Fast_Cursor_Left");
	}

	template<typename F = ::jlong>
	static auto XK_ISO_Fast_Cursor_Right() {
		static_assert(field_signatures[jField<F>("XK_ISO_Fast_Cursor_Right")] != -1);
		return sat<F>("XK_ISO_Fast_Cursor_Right");
	}

	template<typename F = ::jlong>
	static auto XK_ISO_Fast_Cursor_Up() {
		static_assert(field_signatures[jField<F>("XK_ISO_Fast_Cursor_Up")] != -1);
		return sat<F>("XK_ISO_Fast_Cursor_Up");
	}

	template<typename F = ::jlong>
	static auto XK_ISO_First_Group() {
		static_assert(field_signatures[jField<F>("XK_ISO_First_Group")] != -1);
		return sat<F>("XK_ISO_First_Group");
	}

	template<typename F = ::jlong>
	static auto XK_ISO_First_Group_Lock() {
		static_assert(field_signatures[jField<F>("XK_ISO_First_Group_Lock")] != -1);
		return sat<F>("XK_ISO_First_Group_Lock");
	}

	template<typename F = ::jlong>
	static auto XK_ISO_Group_Latch() {
		static_assert(field_signatures[jField<F>("XK_ISO_Group_Latch")] != -1);
		return sat<F>("XK_ISO_Group_Latch");
	}

	template<typename F = ::jlong>
	static auto XK_ISO_Group_Lock() {
		static_assert(field_signatures[jField<F>("XK_ISO_Group_Lock")] != -1);
		return sat<F>("XK_ISO_Group_Lock");
	}

	template<typename F = ::jlong>
	static auto XK_ISO_Group_Shift() {
		static_assert(field_signatures[jField<F>("XK_ISO_Group_Shift")] != -1);
		return sat<F>("XK_ISO_Group_Shift");
	}

	template<typename F = ::jlong>
	static auto XK_ISO_Last_Group() {
		static_assert(field_signatures[jField<F>("XK_ISO_Last_Group")] != -1);
		return sat<F>("XK_ISO_Last_Group");
	}

	template<typename F = ::jlong>
	static auto XK_ISO_Last_Group_Lock() {
		static_assert(field_signatures[jField<F>("XK_ISO_Last_Group_Lock")] != -1);
		return sat<F>("XK_ISO_Last_Group_Lock");
	}

	template<typename F = ::jlong>
	static auto XK_ISO_Left_Tab() {
		static_assert(field_signatures[jField<F>("XK_ISO_Left_Tab")] != -1);
		return sat<F>("XK_ISO_Left_Tab");
	}

	template<typename F = ::jlong>
	static auto XK_ISO_Level2_Latch() {
		static_assert(field_signatures[jField<F>("XK_ISO_Level2_Latch")] != -1);
		return sat<F>("XK_ISO_Level2_Latch");
	}

	template<typename F = ::jlong>
	static auto XK_ISO_Level3_Latch() {
		static_assert(field_signatures[jField<F>("XK_ISO_Level3_Latch")] != -1);
		return sat<F>("XK_ISO_Level3_Latch");
	}

	template<typename F = ::jlong>
	static auto XK_ISO_Level3_Lock() {
		static_assert(field_signatures[jField<F>("XK_ISO_Level3_Lock")] != -1);
		return sat<F>("XK_ISO_Level3_Lock");
	}

	template<typename F = ::jlong>
	static auto XK_ISO_Level3_Shift() {
		static_assert(field_signatures[jField<F>("XK_ISO_Level3_Shift")] != -1);
		return sat<F>("XK_ISO_Level3_Shift");
	}

	template<typename F = ::jlong>
	static auto XK_ISO_Lock() {
		static_assert(field_signatures[jField<F>("XK_ISO_Lock")] != -1);
		return sat<F>("XK_ISO_Lock");
	}

	template<typename F = ::jlong>
	static auto XK_ISO_Move_Line_Down() {
		static_assert(field_signatures[jField<F>("XK_ISO_Move_Line_Down")] != -1);
		return sat<F>("XK_ISO_Move_Line_Down");
	}

	template<typename F = ::jlong>
	static auto XK_ISO_Move_Line_Up() {
		static_assert(field_signatures[jField<F>("XK_ISO_Move_Line_Up")] != -1);
		return sat<F>("XK_ISO_Move_Line_Up");
	}

	template<typename F = ::jlong>
	static auto XK_ISO_Next_Group() {
		static_assert(field_signatures[jField<F>("XK_ISO_Next_Group")] != -1);
		return sat<F>("XK_ISO_Next_Group");
	}

	template<typename F = ::jlong>
	static auto XK_ISO_Next_Group_Lock() {
		static_assert(field_signatures[jField<F>("XK_ISO_Next_Group_Lock")] != -1);
		return sat<F>("XK_ISO_Next_Group_Lock");
	}

	template<typename F = ::jlong>
	static auto XK_ISO_Partial_Line_Down() {
		static_assert(field_signatures[jField<F>("XK_ISO_Partial_Line_Down")] != -1);
		return sat<F>("XK_ISO_Partial_Line_Down");
	}

	template<typename F = ::jlong>
	static auto XK_ISO_Partial_Line_Up() {
		static_assert(field_signatures[jField<F>("XK_ISO_Partial_Line_Up")] != -1);
		return sat<F>("XK_ISO_Partial_Line_Up");
	}

	template<typename F = ::jlong>
	static auto XK_ISO_Partial_Space_Left() {
		static_assert(field_signatures[jField<F>("XK_ISO_Partial_Space_Left")] != -1);
		return sat<F>("XK_ISO_Partial_Space_Left");
	}

	template<typename F = ::jlong>
	static auto XK_ISO_Partial_Space_Right() {
		static_assert(field_signatures[jField<F>("XK_ISO_Partial_Space_Right")] != -1);
		return sat<F>("XK_ISO_Partial_Space_Right");
	}

	template<typename F = ::jlong>
	static auto XK_ISO_Prev_Group() {
		static_assert(field_signatures[jField<F>("XK_ISO_Prev_Group")] != -1);
		return sat<F>("XK_ISO_Prev_Group");
	}

	template<typename F = ::jlong>
	static auto XK_ISO_Prev_Group_Lock() {
		static_assert(field_signatures[jField<F>("XK_ISO_Prev_Group_Lock")] != -1);
		return sat<F>("XK_ISO_Prev_Group_Lock");
	}

	template<typename F = ::jlong>
	static auto XK_ISO_Release_Both_Margins() {
		static_assert(field_signatures[jField<F>("XK_ISO_Release_Both_Margins")] != -1);
		return sat<F>("XK_ISO_Release_Both_Margins");
	}

	template<typename F = ::jlong>
	static auto XK_ISO_Release_Margin_Left() {
		static_assert(field_signatures[jField<F>("XK_ISO_Release_Margin_Left")] != -1);
		return sat<F>("XK_ISO_Release_Margin_Left");
	}

	template<typename F = ::jlong>
	static auto XK_ISO_Release_Margin_Right() {
		static_assert(field_signatures[jField<F>("XK_ISO_Release_Margin_Right")] != -1);
		return sat<F>("XK_ISO_Release_Margin_Right");
	}

	template<typename F = ::jlong>
	static auto XK_ISO_Set_Margin_Left() {
		static_assert(field_signatures[jField<F>("XK_ISO_Set_Margin_Left")] != -1);
		return sat<F>("XK_ISO_Set_Margin_Left");
	}

	template<typename F = ::jlong>
	static auto XK_ISO_Set_Margin_Right() {
		static_assert(field_signatures[jField<F>("XK_ISO_Set_Margin_Right")] != -1);
		return sat<F>("XK_ISO_Set_Margin_Right");
	}

	template<typename F = ::jlong>
	static auto XK_Iabovedot() {
		static_assert(field_signatures[jField<F>("XK_Iabovedot")] != -1);
		return sat<F>("XK_Iabovedot");
	}

	template<typename F = ::jlong>
	static auto XK_Iacute() {
		static_assert(field_signatures[jField<F>("XK_Iacute")] != -1);
		return sat<F>("XK_Iacute");
	}

	template<typename F = ::jlong>
	static auto XK_Icircumflex() {
		static_assert(field_signatures[jField<F>("XK_Icircumflex")] != -1);
		return sat<F>("XK_Icircumflex");
	}

	template<typename F = ::jlong>
	static auto XK_Idiaeresis() {
		static_assert(field_signatures[jField<F>("XK_Idiaeresis")] != -1);
		return sat<F>("XK_Idiaeresis");
	}

	template<typename F = ::jlong>
	static auto XK_Igrave() {
		static_assert(field_signatures[jField<F>("XK_Igrave")] != -1);
		return sat<F>("XK_Igrave");
	}

	template<typename F = ::jlong>
	static auto XK_Imacron() {
		static_assert(field_signatures[jField<F>("XK_Imacron")] != -1);
		return sat<F>("XK_Imacron");
	}

	template<typename F = ::jlong>
	static auto XK_Insert() {
		static_assert(field_signatures[jField<F>("XK_Insert")] != -1);
		return sat<F>("XK_Insert");
	}

	template<typename F = ::jlong>
	static auto XK_Iogonek() {
		static_assert(field_signatures[jField<F>("XK_Iogonek")] != -1);
		return sat<F>("XK_Iogonek");
	}

	template<typename F = ::jlong>
	static auto XK_Itilde() {
		static_assert(field_signatures[jField<F>("XK_Itilde")] != -1);
		return sat<F>("XK_Itilde");
	}

	template<typename F = ::jlong>
	static auto XK_J() {
		static_assert(field_signatures[jField<F>("XK_J")] != -1);
		return sat<F>("XK_J");
	}

	template<typename F = ::jlong>
	static auto XK_Jcircumflex() {
		static_assert(field_signatures[jField<F>("XK_Jcircumflex")] != -1);
		return sat<F>("XK_Jcircumflex");
	}

	template<typename F = ::jlong>
	static auto XK_K() {
		static_assert(field_signatures[jField<F>("XK_K")] != -1);
		return sat<F>("XK_K");
	}

	template<typename F = ::jlong>
	static auto XK_KP_0() {
		static_assert(field_signatures[jField<F>("XK_KP_0")] != -1);
		return sat<F>("XK_KP_0");
	}

	template<typename F = ::jlong>
	static auto XK_KP_1() {
		static_assert(field_signatures[jField<F>("XK_KP_1")] != -1);
		return sat<F>("XK_KP_1");
	}

	template<typename F = ::jlong>
	static auto XK_KP_2() {
		static_assert(field_signatures[jField<F>("XK_KP_2")] != -1);
		return sat<F>("XK_KP_2");
	}

	template<typename F = ::jlong>
	static auto XK_KP_3() {
		static_assert(field_signatures[jField<F>("XK_KP_3")] != -1);
		return sat<F>("XK_KP_3");
	}

	template<typename F = ::jlong>
	static auto XK_KP_4() {
		static_assert(field_signatures[jField<F>("XK_KP_4")] != -1);
		return sat<F>("XK_KP_4");
	}

	template<typename F = ::jlong>
	static auto XK_KP_5() {
		static_assert(field_signatures[jField<F>("XK_KP_5")] != -1);
		return sat<F>("XK_KP_5");
	}

	template<typename F = ::jlong>
	static auto XK_KP_6() {
		static_assert(field_signatures[jField<F>("XK_KP_6")] != -1);
		return sat<F>("XK_KP_6");
	}

	template<typename F = ::jlong>
	static auto XK_KP_7() {
		static_assert(field_signatures[jField<F>("XK_KP_7")] != -1);
		return sat<F>("XK_KP_7");
	}

	template<typename F = ::jlong>
	static auto XK_KP_8() {
		static_assert(field_signatures[jField<F>("XK_KP_8")] != -1);
		return sat<F>("XK_KP_8");
	}

	template<typename F = ::jlong>
	static auto XK_KP_9() {
		static_assert(field_signatures[jField<F>("XK_KP_9")] != -1);
		return sat<F>("XK_KP_9");
	}

	template<typename F = ::jlong>
	static auto XK_KP_Add() {
		static_assert(field_signatures[jField<F>("XK_KP_Add")] != -1);
		return sat<F>("XK_KP_Add");
	}

	template<typename F = ::jlong>
	static auto XK_KP_Begin() {
		static_assert(field_signatures[jField<F>("XK_KP_Begin")] != -1);
		return sat<F>("XK_KP_Begin");
	}

	template<typename F = ::jlong>
	static auto XK_KP_Decimal() {
		static_assert(field_signatures[jField<F>("XK_KP_Decimal")] != -1);
		return sat<F>("XK_KP_Decimal");
	}

	template<typename F = ::jlong>
	static auto XK_KP_Delete() {
		static_assert(field_signatures[jField<F>("XK_KP_Delete")] != -1);
		return sat<F>("XK_KP_Delete");
	}

	template<typename F = ::jlong>
	static auto XK_KP_Divide() {
		static_assert(field_signatures[jField<F>("XK_KP_Divide")] != -1);
		return sat<F>("XK_KP_Divide");
	}

	template<typename F = ::jlong>
	static auto XK_KP_Down() {
		static_assert(field_signatures[jField<F>("XK_KP_Down")] != -1);
		return sat<F>("XK_KP_Down");
	}

	template<typename F = ::jlong>
	static auto XK_KP_End() {
		static_assert(field_signatures[jField<F>("XK_KP_End")] != -1);
		return sat<F>("XK_KP_End");
	}

	template<typename F = ::jlong>
	static auto XK_KP_Enter() {
		static_assert(field_signatures[jField<F>("XK_KP_Enter")] != -1);
		return sat<F>("XK_KP_Enter");
	}

	template<typename F = ::jlong>
	static auto XK_KP_Equal() {
		static_assert(field_signatures[jField<F>("XK_KP_Equal")] != -1);
		return sat<F>("XK_KP_Equal");
	}

	template<typename F = ::jlong>
	static auto XK_KP_F1() {
		static_assert(field_signatures[jField<F>("XK_KP_F1")] != -1);
		return sat<F>("XK_KP_F1");
	}

	template<typename F = ::jlong>
	static auto XK_KP_F2() {
		static_assert(field_signatures[jField<F>("XK_KP_F2")] != -1);
		return sat<F>("XK_KP_F2");
	}

	template<typename F = ::jlong>
	static auto XK_KP_F3() {
		static_assert(field_signatures[jField<F>("XK_KP_F3")] != -1);
		return sat<F>("XK_KP_F3");
	}

	template<typename F = ::jlong>
	static auto XK_KP_F4() {
		static_assert(field_signatures[jField<F>("XK_KP_F4")] != -1);
		return sat<F>("XK_KP_F4");
	}

	template<typename F = ::jlong>
	static auto XK_KP_Home() {
		static_assert(field_signatures[jField<F>("XK_KP_Home")] != -1);
		return sat<F>("XK_KP_Home");
	}

	template<typename F = ::jlong>
	static auto XK_KP_Insert() {
		static_assert(field_signatures[jField<F>("XK_KP_Insert")] != -1);
		return sat<F>("XK_KP_Insert");
	}

	template<typename F = ::jlong>
	static auto XK_KP_Left() {
		static_assert(field_signatures[jField<F>("XK_KP_Left")] != -1);
		return sat<F>("XK_KP_Left");
	}

	template<typename F = ::jlong>
	static auto XK_KP_Multiply() {
		static_assert(field_signatures[jField<F>("XK_KP_Multiply")] != -1);
		return sat<F>("XK_KP_Multiply");
	}

	template<typename F = ::jlong>
	static auto XK_KP_Next() {
		static_assert(field_signatures[jField<F>("XK_KP_Next")] != -1);
		return sat<F>("XK_KP_Next");
	}

	template<typename F = ::jlong>
	static auto XK_KP_Page_Down() {
		static_assert(field_signatures[jField<F>("XK_KP_Page_Down")] != -1);
		return sat<F>("XK_KP_Page_Down");
	}

	template<typename F = ::jlong>
	static auto XK_KP_Page_Up() {
		static_assert(field_signatures[jField<F>("XK_KP_Page_Up")] != -1);
		return sat<F>("XK_KP_Page_Up");
	}

	template<typename F = ::jlong>
	static auto XK_KP_Prior() {
		static_assert(field_signatures[jField<F>("XK_KP_Prior")] != -1);
		return sat<F>("XK_KP_Prior");
	}

	template<typename F = ::jlong>
	static auto XK_KP_Right() {
		static_assert(field_signatures[jField<F>("XK_KP_Right")] != -1);
		return sat<F>("XK_KP_Right");
	}

	template<typename F = ::jlong>
	static auto XK_KP_Separator() {
		static_assert(field_signatures[jField<F>("XK_KP_Separator")] != -1);
		return sat<F>("XK_KP_Separator");
	}

	template<typename F = ::jlong>
	static auto XK_KP_Space() {
		static_assert(field_signatures[jField<F>("XK_KP_Space")] != -1);
		return sat<F>("XK_KP_Space");
	}

	template<typename F = ::jlong>
	static auto XK_KP_Subtract() {
		static_assert(field_signatures[jField<F>("XK_KP_Subtract")] != -1);
		return sat<F>("XK_KP_Subtract");
	}

	template<typename F = ::jlong>
	static auto XK_KP_Tab() {
		static_assert(field_signatures[jField<F>("XK_KP_Tab")] != -1);
		return sat<F>("XK_KP_Tab");
	}

	template<typename F = ::jlong>
	static auto XK_KP_Up() {
		static_assert(field_signatures[jField<F>("XK_KP_Up")] != -1);
		return sat<F>("XK_KP_Up");
	}

	template<typename F = ::jlong>
	static auto XK_Kana_Lock() {
		static_assert(field_signatures[jField<F>("XK_Kana_Lock")] != -1);
		return sat<F>("XK_Kana_Lock");
	}

	template<typename F = ::jlong>
	static auto XK_Kana_Shift() {
		static_assert(field_signatures[jField<F>("XK_Kana_Shift")] != -1);
		return sat<F>("XK_Kana_Shift");
	}

	template<typename F = ::jlong>
	static auto XK_Kanji() {
		static_assert(field_signatures[jField<F>("XK_Kanji")] != -1);
		return sat<F>("XK_Kanji");
	}

	template<typename F = ::jlong>
	static auto XK_Kanji_Bangou() {
		static_assert(field_signatures[jField<F>("XK_Kanji_Bangou")] != -1);
		return sat<F>("XK_Kanji_Bangou");
	}

	template<typename F = ::jlong>
	static auto XK_Katakana() {
		static_assert(field_signatures[jField<F>("XK_Katakana")] != -1);
		return sat<F>("XK_Katakana");
	}

	template<typename F = ::jlong>
	static auto XK_Kcedilla() {
		static_assert(field_signatures[jField<F>("XK_Kcedilla")] != -1);
		return sat<F>("XK_Kcedilla");
	}

	template<typename F = ::jlong>
	static auto XK_Korean_Won() {
		static_assert(field_signatures[jField<F>("XK_Korean_Won")] != -1);
		return sat<F>("XK_Korean_Won");
	}

	template<typename F = ::jlong>
	static auto XK_L() {
		static_assert(field_signatures[jField<F>("XK_L")] != -1);
		return sat<F>("XK_L");
	}

	template<typename F = ::jlong>
	static auto XK_L1() {
		static_assert(field_signatures[jField<F>("XK_L1")] != -1);
		return sat<F>("XK_L1");
	}

	template<typename F = ::jlong>
	static auto XK_L10() {
		static_assert(field_signatures[jField<F>("XK_L10")] != -1);
		return sat<F>("XK_L10");
	}

	template<typename F = ::jlong>
	static auto XK_L2() {
		static_assert(field_signatures[jField<F>("XK_L2")] != -1);
		return sat<F>("XK_L2");
	}

	template<typename F = ::jlong>
	static auto XK_L3() {
		static_assert(field_signatures[jField<F>("XK_L3")] != -1);
		return sat<F>("XK_L3");
	}

	template<typename F = ::jlong>
	static auto XK_L4() {
		static_assert(field_signatures[jField<F>("XK_L4")] != -1);
		return sat<F>("XK_L4");
	}

	template<typename F = ::jlong>
	static auto XK_L5() {
		static_assert(field_signatures[jField<F>("XK_L5")] != -1);
		return sat<F>("XK_L5");
	}

	template<typename F = ::jlong>
	static auto XK_L6() {
		static_assert(field_signatures[jField<F>("XK_L6")] != -1);
		return sat<F>("XK_L6");
	}

	template<typename F = ::jlong>
	static auto XK_L7() {
		static_assert(field_signatures[jField<F>("XK_L7")] != -1);
		return sat<F>("XK_L7");
	}

	template<typename F = ::jlong>
	static auto XK_L8() {
		static_assert(field_signatures[jField<F>("XK_L8")] != -1);
		return sat<F>("XK_L8");
	}

	template<typename F = ::jlong>
	static auto XK_L9() {
		static_assert(field_signatures[jField<F>("XK_L9")] != -1);
		return sat<F>("XK_L9");
	}

	template<typename F = ::jlong>
	static auto XK_Lacute() {
		static_assert(field_signatures[jField<F>("XK_Lacute")] != -1);
		return sat<F>("XK_Lacute");
	}

	template<typename F = ::jlong>
	static auto XK_Last_Virtual_Screen() {
		static_assert(field_signatures[jField<F>("XK_Last_Virtual_Screen")] != -1);
		return sat<F>("XK_Last_Virtual_Screen");
	}

	template<typename F = ::jlong>
	static auto XK_Lcaron() {
		static_assert(field_signatures[jField<F>("XK_Lcaron")] != -1);
		return sat<F>("XK_Lcaron");
	}

	template<typename F = ::jlong>
	static auto XK_Lcedilla() {
		static_assert(field_signatures[jField<F>("XK_Lcedilla")] != -1);
		return sat<F>("XK_Lcedilla");
	}

	template<typename F = ::jlong>
	static auto XK_Left() {
		static_assert(field_signatures[jField<F>("XK_Left")] != -1);
		return sat<F>("XK_Left");
	}

	template<typename F = ::jlong>
	static auto XK_Linefeed() {
		static_assert(field_signatures[jField<F>("XK_Linefeed")] != -1);
		return sat<F>("XK_Linefeed");
	}

	template<typename F = ::jlong>
	static auto XK_LiraSign() {
		static_assert(field_signatures[jField<F>("XK_LiraSign")] != -1);
		return sat<F>("XK_LiraSign");
	}

	template<typename F = ::jlong>
	static auto XK_Lstroke() {
		static_assert(field_signatures[jField<F>("XK_Lstroke")] != -1);
		return sat<F>("XK_Lstroke");
	}

	template<typename F = ::jlong>
	static auto XK_M() {
		static_assert(field_signatures[jField<F>("XK_M")] != -1);
		return sat<F>("XK_M");
	}

	template<typename F = ::jlong>
	static auto XK_Macedonia_DSE() {
		static_assert(field_signatures[jField<F>("XK_Macedonia_DSE")] != -1);
		return sat<F>("XK_Macedonia_DSE");
	}

	template<typename F = ::jlong>
	static auto XK_Macedonia_GJE() {
		static_assert(field_signatures[jField<F>("XK_Macedonia_GJE")] != -1);
		return sat<F>("XK_Macedonia_GJE");
	}

	template<typename F = ::jlong>
	static auto XK_Macedonia_KJE() {
		static_assert(field_signatures[jField<F>("XK_Macedonia_KJE")] != -1);
		return sat<F>("XK_Macedonia_KJE");
	}

	template<typename F = ::jlong>
	static auto XK_Macedonia_dse() {
		static_assert(field_signatures[jField<F>("XK_Macedonia_dse")] != -1);
		return sat<F>("XK_Macedonia_dse");
	}

	template<typename F = ::jlong>
	static auto XK_Macedonia_gje() {
		static_assert(field_signatures[jField<F>("XK_Macedonia_gje")] != -1);
		return sat<F>("XK_Macedonia_gje");
	}

	template<typename F = ::jlong>
	static auto XK_Macedonia_kje() {
		static_assert(field_signatures[jField<F>("XK_Macedonia_kje")] != -1);
		return sat<F>("XK_Macedonia_kje");
	}

	template<typename F = ::jlong>
	static auto XK_Mae_Koho() {
		static_assert(field_signatures[jField<F>("XK_Mae_Koho")] != -1);
		return sat<F>("XK_Mae_Koho");
	}

	template<typename F = ::jlong>
	static auto XK_Massyo() {
		static_assert(field_signatures[jField<F>("XK_Massyo")] != -1);
		return sat<F>("XK_Massyo");
	}

	template<typename F = ::jlong>
	static auto XK_Menu() {
		static_assert(field_signatures[jField<F>("XK_Menu")] != -1);
		return sat<F>("XK_Menu");
	}

	template<typename F = ::jlong>
	static auto XK_Meta_L() {
		static_assert(field_signatures[jField<F>("XK_Meta_L")] != -1);
		return sat<F>("XK_Meta_L");
	}

	template<typename F = ::jlong>
	static auto XK_Meta_R() {
		static_assert(field_signatures[jField<F>("XK_Meta_R")] != -1);
		return sat<F>("XK_Meta_R");
	}

	template<typename F = ::jlong>
	static auto XK_MillSign() {
		static_assert(field_signatures[jField<F>("XK_MillSign")] != -1);
		return sat<F>("XK_MillSign");
	}

	template<typename F = ::jlong>
	static auto XK_Mode_switch() {
		static_assert(field_signatures[jField<F>("XK_Mode_switch")] != -1);
		return sat<F>("XK_Mode_switch");
	}

	template<typename F = ::jlong>
	static auto XK_MouseKeys_Accel_Enable() {
		static_assert(field_signatures[jField<F>("XK_MouseKeys_Accel_Enable")] != -1);
		return sat<F>("XK_MouseKeys_Accel_Enable");
	}

	template<typename F = ::jlong>
	static auto XK_MouseKeys_Enable() {
		static_assert(field_signatures[jField<F>("XK_MouseKeys_Enable")] != -1);
		return sat<F>("XK_MouseKeys_Enable");
	}

	template<typename F = ::jlong>
	static auto XK_Muhenkan() {
		static_assert(field_signatures[jField<F>("XK_Muhenkan")] != -1);
		return sat<F>("XK_Muhenkan");
	}

	template<typename F = ::jlong>
	static auto XK_Multi_key() {
		static_assert(field_signatures[jField<F>("XK_Multi_key")] != -1);
		return sat<F>("XK_Multi_key");
	}

	template<typename F = ::jlong>
	static auto XK_MultipleCandidate() {
		static_assert(field_signatures[jField<F>("XK_MultipleCandidate")] != -1);
		return sat<F>("XK_MultipleCandidate");
	}

	template<typename F = ::jlong>
	static auto XK_N() {
		static_assert(field_signatures[jField<F>("XK_N")] != -1);
		return sat<F>("XK_N");
	}

	template<typename F = ::jlong>
	static auto XK_Nacute() {
		static_assert(field_signatures[jField<F>("XK_Nacute")] != -1);
		return sat<F>("XK_Nacute");
	}

	template<typename F = ::jlong>
	static auto XK_NairaSign() {
		static_assert(field_signatures[jField<F>("XK_NairaSign")] != -1);
		return sat<F>("XK_NairaSign");
	}

	template<typename F = ::jlong>
	static auto XK_Ncaron() {
		static_assert(field_signatures[jField<F>("XK_Ncaron")] != -1);
		return sat<F>("XK_Ncaron");
	}

	template<typename F = ::jlong>
	static auto XK_Ncedilla() {
		static_assert(field_signatures[jField<F>("XK_Ncedilla")] != -1);
		return sat<F>("XK_Ncedilla");
	}

	template<typename F = ::jlong>
	static auto XK_NewSheqelSign() {
		static_assert(field_signatures[jField<F>("XK_NewSheqelSign")] != -1);
		return sat<F>("XK_NewSheqelSign");
	}

	template<typename F = ::jlong>
	static auto XK_Next() {
		static_assert(field_signatures[jField<F>("XK_Next")] != -1);
		return sat<F>("XK_Next");
	}

	template<typename F = ::jlong>
	static auto XK_Next_Virtual_Screen() {
		static_assert(field_signatures[jField<F>("XK_Next_Virtual_Screen")] != -1);
		return sat<F>("XK_Next_Virtual_Screen");
	}

	template<typename F = ::jlong>
	static auto XK_Ntilde() {
		static_assert(field_signatures[jField<F>("XK_Ntilde")] != -1);
		return sat<F>("XK_Ntilde");
	}

	template<typename F = ::jlong>
	static auto XK_Num_Lock() {
		static_assert(field_signatures[jField<F>("XK_Num_Lock")] != -1);
		return sat<F>("XK_Num_Lock");
	}

	template<typename F = ::jlong>
	static auto XK_O() {
		static_assert(field_signatures[jField<F>("XK_O")] != -1);
		return sat<F>("XK_O");
	}

	template<typename F = ::jlong>
	static auto XK_OE() {
		static_assert(field_signatures[jField<F>("XK_OE")] != -1);
		return sat<F>("XK_OE");
	}

	template<typename F = ::jlong>
	static auto XK_Oacute() {
		static_assert(field_signatures[jField<F>("XK_Oacute")] != -1);
		return sat<F>("XK_Oacute");
	}

	template<typename F = ::jlong>
	static auto XK_Ocircumflex() {
		static_assert(field_signatures[jField<F>("XK_Ocircumflex")] != -1);
		return sat<F>("XK_Ocircumflex");
	}

	template<typename F = ::jlong>
	static auto XK_Odiaeresis() {
		static_assert(field_signatures[jField<F>("XK_Odiaeresis")] != -1);
		return sat<F>("XK_Odiaeresis");
	}

	template<typename F = ::jlong>
	static auto XK_Odoubleacute() {
		static_assert(field_signatures[jField<F>("XK_Odoubleacute")] != -1);
		return sat<F>("XK_Odoubleacute");
	}

	template<typename F = ::jlong>
	static auto XK_Ograve() {
		static_assert(field_signatures[jField<F>("XK_Ograve")] != -1);
		return sat<F>("XK_Ograve");
	}

	template<typename F = ::jlong>
	static auto XK_Omacron() {
		static_assert(field_signatures[jField<F>("XK_Omacron")] != -1);
		return sat<F>("XK_Omacron");
	}

	template<typename F = ::jlong>
	static auto XK_Ooblique() {
		static_assert(field_signatures[jField<F>("XK_Ooblique")] != -1);
		return sat<F>("XK_Ooblique");
	}

	template<typename F = ::jlong>
	static auto XK_Otilde() {
		static_assert(field_signatures[jField<F>("XK_Otilde")] != -1);
		return sat<F>("XK_Otilde");
	}

	template<typename F = ::jlong>
	static auto XK_Overlay1_Enable() {
		static_assert(field_signatures[jField<F>("XK_Overlay1_Enable")] != -1);
		return sat<F>("XK_Overlay1_Enable");
	}

	template<typename F = ::jlong>
	static auto XK_Overlay2_Enable() {
		static_assert(field_signatures[jField<F>("XK_Overlay2_Enable")] != -1);
		return sat<F>("XK_Overlay2_Enable");
	}

	template<typename F = ::jlong>
	static auto XK_P() {
		static_assert(field_signatures[jField<F>("XK_P")] != -1);
		return sat<F>("XK_P");
	}

	template<typename F = ::jlong>
	static auto XK_Page_Down() {
		static_assert(field_signatures[jField<F>("XK_Page_Down")] != -1);
		return sat<F>("XK_Page_Down");
	}

	template<typename F = ::jlong>
	static auto XK_Page_Up() {
		static_assert(field_signatures[jField<F>("XK_Page_Up")] != -1);
		return sat<F>("XK_Page_Up");
	}

	template<typename F = ::jlong>
	static auto XK_Pause() {
		static_assert(field_signatures[jField<F>("XK_Pause")] != -1);
		return sat<F>("XK_Pause");
	}

	template<typename F = ::jlong>
	static auto XK_PesetaSign() {
		static_assert(field_signatures[jField<F>("XK_PesetaSign")] != -1);
		return sat<F>("XK_PesetaSign");
	}

	template<typename F = ::jlong>
	static auto XK_Pointer_Accelerate() {
		static_assert(field_signatures[jField<F>("XK_Pointer_Accelerate")] != -1);
		return sat<F>("XK_Pointer_Accelerate");
	}

	template<typename F = ::jlong>
	static auto XK_Pointer_Button1() {
		static_assert(field_signatures[jField<F>("XK_Pointer_Button1")] != -1);
		return sat<F>("XK_Pointer_Button1");
	}

	template<typename F = ::jlong>
	static auto XK_Pointer_Button2() {
		static_assert(field_signatures[jField<F>("XK_Pointer_Button2")] != -1);
		return sat<F>("XK_Pointer_Button2");
	}

	template<typename F = ::jlong>
	static auto XK_Pointer_Button3() {
		static_assert(field_signatures[jField<F>("XK_Pointer_Button3")] != -1);
		return sat<F>("XK_Pointer_Button3");
	}

	template<typename F = ::jlong>
	static auto XK_Pointer_Button4() {
		static_assert(field_signatures[jField<F>("XK_Pointer_Button4")] != -1);
		return sat<F>("XK_Pointer_Button4");
	}

	template<typename F = ::jlong>
	static auto XK_Pointer_Button5() {
		static_assert(field_signatures[jField<F>("XK_Pointer_Button5")] != -1);
		return sat<F>("XK_Pointer_Button5");
	}

	template<typename F = ::jlong>
	static auto XK_Pointer_Button_Dflt() {
		static_assert(field_signatures[jField<F>("XK_Pointer_Button_Dflt")] != -1);
		return sat<F>("XK_Pointer_Button_Dflt");
	}

	template<typename F = ::jlong>
	static auto XK_Pointer_DblClick1() {
		static_assert(field_signatures[jField<F>("XK_Pointer_DblClick1")] != -1);
		return sat<F>("XK_Pointer_DblClick1");
	}

	template<typename F = ::jlong>
	static auto XK_Pointer_DblClick2() {
		static_assert(field_signatures[jField<F>("XK_Pointer_DblClick2")] != -1);
		return sat<F>("XK_Pointer_DblClick2");
	}

	template<typename F = ::jlong>
	static auto XK_Pointer_DblClick3() {
		static_assert(field_signatures[jField<F>("XK_Pointer_DblClick3")] != -1);
		return sat<F>("XK_Pointer_DblClick3");
	}

	template<typename F = ::jlong>
	static auto XK_Pointer_DblClick4() {
		static_assert(field_signatures[jField<F>("XK_Pointer_DblClick4")] != -1);
		return sat<F>("XK_Pointer_DblClick4");
	}

	template<typename F = ::jlong>
	static auto XK_Pointer_DblClick5() {
		static_assert(field_signatures[jField<F>("XK_Pointer_DblClick5")] != -1);
		return sat<F>("XK_Pointer_DblClick5");
	}

	template<typename F = ::jlong>
	static auto XK_Pointer_DblClick_Dflt() {
		static_assert(field_signatures[jField<F>("XK_Pointer_DblClick_Dflt")] != -1);
		return sat<F>("XK_Pointer_DblClick_Dflt");
	}

	template<typename F = ::jlong>
	static auto XK_Pointer_DfltBtnNext() {
		static_assert(field_signatures[jField<F>("XK_Pointer_DfltBtnNext")] != -1);
		return sat<F>("XK_Pointer_DfltBtnNext");
	}

	template<typename F = ::jlong>
	static auto XK_Pointer_DfltBtnPrev() {
		static_assert(field_signatures[jField<F>("XK_Pointer_DfltBtnPrev")] != -1);
		return sat<F>("XK_Pointer_DfltBtnPrev");
	}

	template<typename F = ::jlong>
	static auto XK_Pointer_Down() {
		static_assert(field_signatures[jField<F>("XK_Pointer_Down")] != -1);
		return sat<F>("XK_Pointer_Down");
	}

	template<typename F = ::jlong>
	static auto XK_Pointer_DownLeft() {
		static_assert(field_signatures[jField<F>("XK_Pointer_DownLeft")] != -1);
		return sat<F>("XK_Pointer_DownLeft");
	}

	template<typename F = ::jlong>
	static auto XK_Pointer_DownRight() {
		static_assert(field_signatures[jField<F>("XK_Pointer_DownRight")] != -1);
		return sat<F>("XK_Pointer_DownRight");
	}

	template<typename F = ::jlong>
	static auto XK_Pointer_Drag1() {
		static_assert(field_signatures[jField<F>("XK_Pointer_Drag1")] != -1);
		return sat<F>("XK_Pointer_Drag1");
	}

	template<typename F = ::jlong>
	static auto XK_Pointer_Drag2() {
		static_assert(field_signatures[jField<F>("XK_Pointer_Drag2")] != -1);
		return sat<F>("XK_Pointer_Drag2");
	}

	template<typename F = ::jlong>
	static auto XK_Pointer_Drag3() {
		static_assert(field_signatures[jField<F>("XK_Pointer_Drag3")] != -1);
		return sat<F>("XK_Pointer_Drag3");
	}

	template<typename F = ::jlong>
	static auto XK_Pointer_Drag4() {
		static_assert(field_signatures[jField<F>("XK_Pointer_Drag4")] != -1);
		return sat<F>("XK_Pointer_Drag4");
	}

	template<typename F = ::jlong>
	static auto XK_Pointer_Drag5() {
		static_assert(field_signatures[jField<F>("XK_Pointer_Drag5")] != -1);
		return sat<F>("XK_Pointer_Drag5");
	}

	template<typename F = ::jlong>
	static auto XK_Pointer_Drag_Dflt() {
		static_assert(field_signatures[jField<F>("XK_Pointer_Drag_Dflt")] != -1);
		return sat<F>("XK_Pointer_Drag_Dflt");
	}

	template<typename F = ::jlong>
	static auto XK_Pointer_EnableKeys() {
		static_assert(field_signatures[jField<F>("XK_Pointer_EnableKeys")] != -1);
		return sat<F>("XK_Pointer_EnableKeys");
	}

	template<typename F = ::jlong>
	static auto XK_Pointer_Left() {
		static_assert(field_signatures[jField<F>("XK_Pointer_Left")] != -1);
		return sat<F>("XK_Pointer_Left");
	}

	template<typename F = ::jlong>
	static auto XK_Pointer_Right() {
		static_assert(field_signatures[jField<F>("XK_Pointer_Right")] != -1);
		return sat<F>("XK_Pointer_Right");
	}

	template<typename F = ::jlong>
	static auto XK_Pointer_Up() {
		static_assert(field_signatures[jField<F>("XK_Pointer_Up")] != -1);
		return sat<F>("XK_Pointer_Up");
	}

	template<typename F = ::jlong>
	static auto XK_Pointer_UpLeft() {
		static_assert(field_signatures[jField<F>("XK_Pointer_UpLeft")] != -1);
		return sat<F>("XK_Pointer_UpLeft");
	}

	template<typename F = ::jlong>
	static auto XK_Pointer_UpRight() {
		static_assert(field_signatures[jField<F>("XK_Pointer_UpRight")] != -1);
		return sat<F>("XK_Pointer_UpRight");
	}

	template<typename F = ::jlong>
	static auto XK_Prev_Virtual_Screen() {
		static_assert(field_signatures[jField<F>("XK_Prev_Virtual_Screen")] != -1);
		return sat<F>("XK_Prev_Virtual_Screen");
	}

	template<typename F = ::jlong>
	static auto XK_PreviousCandidate() {
		static_assert(field_signatures[jField<F>("XK_PreviousCandidate")] != -1);
		return sat<F>("XK_PreviousCandidate");
	}

	template<typename F = ::jlong>
	static auto XK_Print() {
		static_assert(field_signatures[jField<F>("XK_Print")] != -1);
		return sat<F>("XK_Print");
	}

	template<typename F = ::jlong>
	static auto XK_Prior() {
		static_assert(field_signatures[jField<F>("XK_Prior")] != -1);
		return sat<F>("XK_Prior");
	}

	template<typename F = ::jlong>
	static auto XK_Q() {
		static_assert(field_signatures[jField<F>("XK_Q")] != -1);
		return sat<F>("XK_Q");
	}

	template<typename F = ::jlong>
	static auto XK_R() {
		static_assert(field_signatures[jField<F>("XK_R")] != -1);
		return sat<F>("XK_R");
	}

	template<typename F = ::jlong>
	static auto XK_R1() {
		static_assert(field_signatures[jField<F>("XK_R1")] != -1);
		return sat<F>("XK_R1");
	}

	template<typename F = ::jlong>
	static auto XK_R10() {
		static_assert(field_signatures[jField<F>("XK_R10")] != -1);
		return sat<F>("XK_R10");
	}

	template<typename F = ::jlong>
	static auto XK_R11() {
		static_assert(field_signatures[jField<F>("XK_R11")] != -1);
		return sat<F>("XK_R11");
	}

	template<typename F = ::jlong>
	static auto XK_R12() {
		static_assert(field_signatures[jField<F>("XK_R12")] != -1);
		return sat<F>("XK_R12");
	}

	template<typename F = ::jlong>
	static auto XK_R13() {
		static_assert(field_signatures[jField<F>("XK_R13")] != -1);
		return sat<F>("XK_R13");
	}

	template<typename F = ::jlong>
	static auto XK_R14() {
		static_assert(field_signatures[jField<F>("XK_R14")] != -1);
		return sat<F>("XK_R14");
	}

	template<typename F = ::jlong>
	static auto XK_R15() {
		static_assert(field_signatures[jField<F>("XK_R15")] != -1);
		return sat<F>("XK_R15");
	}

	template<typename F = ::jlong>
	static auto XK_R2() {
		static_assert(field_signatures[jField<F>("XK_R2")] != -1);
		return sat<F>("XK_R2");
	}

	template<typename F = ::jlong>
	static auto XK_R3() {
		static_assert(field_signatures[jField<F>("XK_R3")] != -1);
		return sat<F>("XK_R3");
	}

	template<typename F = ::jlong>
	static auto XK_R4() {
		static_assert(field_signatures[jField<F>("XK_R4")] != -1);
		return sat<F>("XK_R4");
	}

	template<typename F = ::jlong>
	static auto XK_R5() {
		static_assert(field_signatures[jField<F>("XK_R5")] != -1);
		return sat<F>("XK_R5");
	}

	template<typename F = ::jlong>
	static auto XK_R6() {
		static_assert(field_signatures[jField<F>("XK_R6")] != -1);
		return sat<F>("XK_R6");
	}

	template<typename F = ::jlong>
	static auto XK_R7() {
		static_assert(field_signatures[jField<F>("XK_R7")] != -1);
		return sat<F>("XK_R7");
	}

	template<typename F = ::jlong>
	static auto XK_R8() {
		static_assert(field_signatures[jField<F>("XK_R8")] != -1);
		return sat<F>("XK_R8");
	}

	template<typename F = ::jlong>
	static auto XK_R9() {
		static_assert(field_signatures[jField<F>("XK_R9")] != -1);
		return sat<F>("XK_R9");
	}

	template<typename F = ::jlong>
	static auto XK_Racute() {
		static_assert(field_signatures[jField<F>("XK_Racute")] != -1);
		return sat<F>("XK_Racute");
	}

	template<typename F = ::jlong>
	static auto XK_Rcaron() {
		static_assert(field_signatures[jField<F>("XK_Rcaron")] != -1);
		return sat<F>("XK_Rcaron");
	}

	template<typename F = ::jlong>
	static auto XK_Rcedilla() {
		static_assert(field_signatures[jField<F>("XK_Rcedilla")] != -1);
		return sat<F>("XK_Rcedilla");
	}

	template<typename F = ::jlong>
	static auto XK_Redo() {
		static_assert(field_signatures[jField<F>("XK_Redo")] != -1);
		return sat<F>("XK_Redo");
	}

	template<typename F = ::jlong>
	static auto XK_RepeatKeys_Enable() {
		static_assert(field_signatures[jField<F>("XK_RepeatKeys_Enable")] != -1);
		return sat<F>("XK_RepeatKeys_Enable");
	}

	template<typename F = ::jlong>
	static auto XK_Return() {
		static_assert(field_signatures[jField<F>("XK_Return")] != -1);
		return sat<F>("XK_Return");
	}

	template<typename F = ::jlong>
	static auto XK_Right() {
		static_assert(field_signatures[jField<F>("XK_Right")] != -1);
		return sat<F>("XK_Right");
	}

	template<typename F = ::jlong>
	static auto XK_Romaji() {
		static_assert(field_signatures[jField<F>("XK_Romaji")] != -1);
		return sat<F>("XK_Romaji");
	}

	template<typename F = ::jlong>
	static auto XK_RupeeSign() {
		static_assert(field_signatures[jField<F>("XK_RupeeSign")] != -1);
		return sat<F>("XK_RupeeSign");
	}

	template<typename F = ::jlong>
	static auto XK_S() {
		static_assert(field_signatures[jField<F>("XK_S")] != -1);
		return sat<F>("XK_S");
	}

	template<typename F = ::jlong>
	static auto XK_Sacute() {
		static_assert(field_signatures[jField<F>("XK_Sacute")] != -1);
		return sat<F>("XK_Sacute");
	}

	template<typename F = ::jlong>
	static auto XK_Scaron() {
		static_assert(field_signatures[jField<F>("XK_Scaron")] != -1);
		return sat<F>("XK_Scaron");
	}

	template<typename F = ::jlong>
	static auto XK_Scedilla() {
		static_assert(field_signatures[jField<F>("XK_Scedilla")] != -1);
		return sat<F>("XK_Scedilla");
	}

	template<typename F = ::jlong>
	static auto XK_Scircumflex() {
		static_assert(field_signatures[jField<F>("XK_Scircumflex")] != -1);
		return sat<F>("XK_Scircumflex");
	}

	template<typename F = ::jlong>
	static auto XK_Scroll_Lock() {
		static_assert(field_signatures[jField<F>("XK_Scroll_Lock")] != -1);
		return sat<F>("XK_Scroll_Lock");
	}

	template<typename F = ::jlong>
	static auto XK_Select() {
		static_assert(field_signatures[jField<F>("XK_Select")] != -1);
		return sat<F>("XK_Select");
	}

	template<typename F = ::jlong>
	static auto XK_Serbian_DJE() {
		static_assert(field_signatures[jField<F>("XK_Serbian_DJE")] != -1);
		return sat<F>("XK_Serbian_DJE");
	}

	template<typename F = ::jlong>
	static auto XK_Serbian_DZE() {
		static_assert(field_signatures[jField<F>("XK_Serbian_DZE")] != -1);
		return sat<F>("XK_Serbian_DZE");
	}

	template<typename F = ::jlong>
	static auto XK_Serbian_JE() {
		static_assert(field_signatures[jField<F>("XK_Serbian_JE")] != -1);
		return sat<F>("XK_Serbian_JE");
	}

	template<typename F = ::jlong>
	static auto XK_Serbian_LJE() {
		static_assert(field_signatures[jField<F>("XK_Serbian_LJE")] != -1);
		return sat<F>("XK_Serbian_LJE");
	}

	template<typename F = ::jlong>
	static auto XK_Serbian_NJE() {
		static_assert(field_signatures[jField<F>("XK_Serbian_NJE")] != -1);
		return sat<F>("XK_Serbian_NJE");
	}

	template<typename F = ::jlong>
	static auto XK_Serbian_TSHE() {
		static_assert(field_signatures[jField<F>("XK_Serbian_TSHE")] != -1);
		return sat<F>("XK_Serbian_TSHE");
	}

	template<typename F = ::jlong>
	static auto XK_Serbian_dje() {
		static_assert(field_signatures[jField<F>("XK_Serbian_dje")] != -1);
		return sat<F>("XK_Serbian_dje");
	}

	template<typename F = ::jlong>
	static auto XK_Serbian_dze() {
		static_assert(field_signatures[jField<F>("XK_Serbian_dze")] != -1);
		return sat<F>("XK_Serbian_dze");
	}

	template<typename F = ::jlong>
	static auto XK_Serbian_je() {
		static_assert(field_signatures[jField<F>("XK_Serbian_je")] != -1);
		return sat<F>("XK_Serbian_je");
	}

	template<typename F = ::jlong>
	static auto XK_Serbian_lje() {
		static_assert(field_signatures[jField<F>("XK_Serbian_lje")] != -1);
		return sat<F>("XK_Serbian_lje");
	}

	template<typename F = ::jlong>
	static auto XK_Serbian_nje() {
		static_assert(field_signatures[jField<F>("XK_Serbian_nje")] != -1);
		return sat<F>("XK_Serbian_nje");
	}

	template<typename F = ::jlong>
	static auto XK_Serbian_tshe() {
		static_assert(field_signatures[jField<F>("XK_Serbian_tshe")] != -1);
		return sat<F>("XK_Serbian_tshe");
	}

	template<typename F = ::jlong>
	static auto XK_Shift_L() {
		static_assert(field_signatures[jField<F>("XK_Shift_L")] != -1);
		return sat<F>("XK_Shift_L");
	}

	template<typename F = ::jlong>
	static auto XK_Shift_Lock() {
		static_assert(field_signatures[jField<F>("XK_Shift_Lock")] != -1);
		return sat<F>("XK_Shift_Lock");
	}

	template<typename F = ::jlong>
	static auto XK_Shift_R() {
		static_assert(field_signatures[jField<F>("XK_Shift_R")] != -1);
		return sat<F>("XK_Shift_R");
	}

	template<typename F = ::jlong>
	static auto XK_SingleCandidate() {
		static_assert(field_signatures[jField<F>("XK_SingleCandidate")] != -1);
		return sat<F>("XK_SingleCandidate");
	}

	template<typename F = ::jlong>
	static auto XK_SlowKeys_Enable() {
		static_assert(field_signatures[jField<F>("XK_SlowKeys_Enable")] != -1);
		return sat<F>("XK_SlowKeys_Enable");
	}

	template<typename F = ::jlong>
	static auto XK_StickyKeys_Enable() {
		static_assert(field_signatures[jField<F>("XK_StickyKeys_Enable")] != -1);
		return sat<F>("XK_StickyKeys_Enable");
	}

	template<typename F = ::jlong>
	static auto XK_Super_L() {
		static_assert(field_signatures[jField<F>("XK_Super_L")] != -1);
		return sat<F>("XK_Super_L");
	}

	template<typename F = ::jlong>
	static auto XK_Super_R() {
		static_assert(field_signatures[jField<F>("XK_Super_R")] != -1);
		return sat<F>("XK_Super_R");
	}

	template<typename F = ::jlong>
	static auto XK_Sys_Req() {
		static_assert(field_signatures[jField<F>("XK_Sys_Req")] != -1);
		return sat<F>("XK_Sys_Req");
	}

	template<typename F = ::jlong>
	static auto XK_T() {
		static_assert(field_signatures[jField<F>("XK_T")] != -1);
		return sat<F>("XK_T");
	}

	template<typename F = ::jlong>
	static auto XK_THORN() {
		static_assert(field_signatures[jField<F>("XK_THORN")] != -1);
		return sat<F>("XK_THORN");
	}

	template<typename F = ::jlong>
	static auto XK_Tab() {
		static_assert(field_signatures[jField<F>("XK_Tab")] != -1);
		return sat<F>("XK_Tab");
	}

	template<typename F = ::jlong>
	static auto XK_Tcaron() {
		static_assert(field_signatures[jField<F>("XK_Tcaron")] != -1);
		return sat<F>("XK_Tcaron");
	}

	template<typename F = ::jlong>
	static auto XK_Tcedilla() {
		static_assert(field_signatures[jField<F>("XK_Tcedilla")] != -1);
		return sat<F>("XK_Tcedilla");
	}

	template<typename F = ::jlong>
	static auto XK_Terminate_Server() {
		static_assert(field_signatures[jField<F>("XK_Terminate_Server")] != -1);
		return sat<F>("XK_Terminate_Server");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_baht() {
		static_assert(field_signatures[jField<F>("XK_Thai_baht")] != -1);
		return sat<F>("XK_Thai_baht");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_bobaimai() {
		static_assert(field_signatures[jField<F>("XK_Thai_bobaimai")] != -1);
		return sat<F>("XK_Thai_bobaimai");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_chochan() {
		static_assert(field_signatures[jField<F>("XK_Thai_chochan")] != -1);
		return sat<F>("XK_Thai_chochan");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_chochang() {
		static_assert(field_signatures[jField<F>("XK_Thai_chochang")] != -1);
		return sat<F>("XK_Thai_chochang");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_choching() {
		static_assert(field_signatures[jField<F>("XK_Thai_choching")] != -1);
		return sat<F>("XK_Thai_choching");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_chochoe() {
		static_assert(field_signatures[jField<F>("XK_Thai_chochoe")] != -1);
		return sat<F>("XK_Thai_chochoe");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_dochada() {
		static_assert(field_signatures[jField<F>("XK_Thai_dochada")] != -1);
		return sat<F>("XK_Thai_dochada");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_dodek() {
		static_assert(field_signatures[jField<F>("XK_Thai_dodek")] != -1);
		return sat<F>("XK_Thai_dodek");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_fofa() {
		static_assert(field_signatures[jField<F>("XK_Thai_fofa")] != -1);
		return sat<F>("XK_Thai_fofa");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_fofan() {
		static_assert(field_signatures[jField<F>("XK_Thai_fofan")] != -1);
		return sat<F>("XK_Thai_fofan");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_hohip() {
		static_assert(field_signatures[jField<F>("XK_Thai_hohip")] != -1);
		return sat<F>("XK_Thai_hohip");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_honokhuk() {
		static_assert(field_signatures[jField<F>("XK_Thai_honokhuk")] != -1);
		return sat<F>("XK_Thai_honokhuk");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_khokhai() {
		static_assert(field_signatures[jField<F>("XK_Thai_khokhai")] != -1);
		return sat<F>("XK_Thai_khokhai");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_khokhon() {
		static_assert(field_signatures[jField<F>("XK_Thai_khokhon")] != -1);
		return sat<F>("XK_Thai_khokhon");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_khokhuat() {
		static_assert(field_signatures[jField<F>("XK_Thai_khokhuat")] != -1);
		return sat<F>("XK_Thai_khokhuat");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_khokhwai() {
		static_assert(field_signatures[jField<F>("XK_Thai_khokhwai")] != -1);
		return sat<F>("XK_Thai_khokhwai");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_khorakhang() {
		static_assert(field_signatures[jField<F>("XK_Thai_khorakhang")] != -1);
		return sat<F>("XK_Thai_khorakhang");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_kokai() {
		static_assert(field_signatures[jField<F>("XK_Thai_kokai")] != -1);
		return sat<F>("XK_Thai_kokai");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_lakkhangyao() {
		static_assert(field_signatures[jField<F>("XK_Thai_lakkhangyao")] != -1);
		return sat<F>("XK_Thai_lakkhangyao");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_lekchet() {
		static_assert(field_signatures[jField<F>("XK_Thai_lekchet")] != -1);
		return sat<F>("XK_Thai_lekchet");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_lekha() {
		static_assert(field_signatures[jField<F>("XK_Thai_lekha")] != -1);
		return sat<F>("XK_Thai_lekha");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_lekhok() {
		static_assert(field_signatures[jField<F>("XK_Thai_lekhok")] != -1);
		return sat<F>("XK_Thai_lekhok");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_lekkao() {
		static_assert(field_signatures[jField<F>("XK_Thai_lekkao")] != -1);
		return sat<F>("XK_Thai_lekkao");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_leknung() {
		static_assert(field_signatures[jField<F>("XK_Thai_leknung")] != -1);
		return sat<F>("XK_Thai_leknung");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_lekpaet() {
		static_assert(field_signatures[jField<F>("XK_Thai_lekpaet")] != -1);
		return sat<F>("XK_Thai_lekpaet");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_leksam() {
		static_assert(field_signatures[jField<F>("XK_Thai_leksam")] != -1);
		return sat<F>("XK_Thai_leksam");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_leksi() {
		static_assert(field_signatures[jField<F>("XK_Thai_leksi")] != -1);
		return sat<F>("XK_Thai_leksi");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_leksong() {
		static_assert(field_signatures[jField<F>("XK_Thai_leksong")] != -1);
		return sat<F>("XK_Thai_leksong");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_leksun() {
		static_assert(field_signatures[jField<F>("XK_Thai_leksun")] != -1);
		return sat<F>("XK_Thai_leksun");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_lochula() {
		static_assert(field_signatures[jField<F>("XK_Thai_lochula")] != -1);
		return sat<F>("XK_Thai_lochula");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_loling() {
		static_assert(field_signatures[jField<F>("XK_Thai_loling")] != -1);
		return sat<F>("XK_Thai_loling");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_lu() {
		static_assert(field_signatures[jField<F>("XK_Thai_lu")] != -1);
		return sat<F>("XK_Thai_lu");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_maichattawa() {
		static_assert(field_signatures[jField<F>("XK_Thai_maichattawa")] != -1);
		return sat<F>("XK_Thai_maichattawa");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_maiek() {
		static_assert(field_signatures[jField<F>("XK_Thai_maiek")] != -1);
		return sat<F>("XK_Thai_maiek");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_maihanakat() {
		static_assert(field_signatures[jField<F>("XK_Thai_maihanakat")] != -1);
		return sat<F>("XK_Thai_maihanakat");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_maihanakat_maitho() {
		static_assert(field_signatures[jField<F>("XK_Thai_maihanakat_maitho")] != -1);
		return sat<F>("XK_Thai_maihanakat_maitho");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_maitaikhu() {
		static_assert(field_signatures[jField<F>("XK_Thai_maitaikhu")] != -1);
		return sat<F>("XK_Thai_maitaikhu");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_maitho() {
		static_assert(field_signatures[jField<F>("XK_Thai_maitho")] != -1);
		return sat<F>("XK_Thai_maitho");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_maitri() {
		static_assert(field_signatures[jField<F>("XK_Thai_maitri")] != -1);
		return sat<F>("XK_Thai_maitri");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_maiyamok() {
		static_assert(field_signatures[jField<F>("XK_Thai_maiyamok")] != -1);
		return sat<F>("XK_Thai_maiyamok");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_moma() {
		static_assert(field_signatures[jField<F>("XK_Thai_moma")] != -1);
		return sat<F>("XK_Thai_moma");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_ngongu() {
		static_assert(field_signatures[jField<F>("XK_Thai_ngongu")] != -1);
		return sat<F>("XK_Thai_ngongu");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_nikhahit() {
		static_assert(field_signatures[jField<F>("XK_Thai_nikhahit")] != -1);
		return sat<F>("XK_Thai_nikhahit");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_nonen() {
		static_assert(field_signatures[jField<F>("XK_Thai_nonen")] != -1);
		return sat<F>("XK_Thai_nonen");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_nonu() {
		static_assert(field_signatures[jField<F>("XK_Thai_nonu")] != -1);
		return sat<F>("XK_Thai_nonu");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_oang() {
		static_assert(field_signatures[jField<F>("XK_Thai_oang")] != -1);
		return sat<F>("XK_Thai_oang");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_paiyannoi() {
		static_assert(field_signatures[jField<F>("XK_Thai_paiyannoi")] != -1);
		return sat<F>("XK_Thai_paiyannoi");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_phinthu() {
		static_assert(field_signatures[jField<F>("XK_Thai_phinthu")] != -1);
		return sat<F>("XK_Thai_phinthu");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_phophan() {
		static_assert(field_signatures[jField<F>("XK_Thai_phophan")] != -1);
		return sat<F>("XK_Thai_phophan");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_phophung() {
		static_assert(field_signatures[jField<F>("XK_Thai_phophung")] != -1);
		return sat<F>("XK_Thai_phophung");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_phosamphao() {
		static_assert(field_signatures[jField<F>("XK_Thai_phosamphao")] != -1);
		return sat<F>("XK_Thai_phosamphao");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_popla() {
		static_assert(field_signatures[jField<F>("XK_Thai_popla")] != -1);
		return sat<F>("XK_Thai_popla");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_rorua() {
		static_assert(field_signatures[jField<F>("XK_Thai_rorua")] != -1);
		return sat<F>("XK_Thai_rorua");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_ru() {
		static_assert(field_signatures[jField<F>("XK_Thai_ru")] != -1);
		return sat<F>("XK_Thai_ru");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_saraa() {
		static_assert(field_signatures[jField<F>("XK_Thai_saraa")] != -1);
		return sat<F>("XK_Thai_saraa");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_saraaa() {
		static_assert(field_signatures[jField<F>("XK_Thai_saraaa")] != -1);
		return sat<F>("XK_Thai_saraaa");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_saraae() {
		static_assert(field_signatures[jField<F>("XK_Thai_saraae")] != -1);
		return sat<F>("XK_Thai_saraae");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_saraaimaimalai() {
		static_assert(field_signatures[jField<F>("XK_Thai_saraaimaimalai")] != -1);
		return sat<F>("XK_Thai_saraaimaimalai");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_saraaimaimuan() {
		static_assert(field_signatures[jField<F>("XK_Thai_saraaimaimuan")] != -1);
		return sat<F>("XK_Thai_saraaimaimuan");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_saraam() {
		static_assert(field_signatures[jField<F>("XK_Thai_saraam")] != -1);
		return sat<F>("XK_Thai_saraam");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_sarae() {
		static_assert(field_signatures[jField<F>("XK_Thai_sarae")] != -1);
		return sat<F>("XK_Thai_sarae");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_sarai() {
		static_assert(field_signatures[jField<F>("XK_Thai_sarai")] != -1);
		return sat<F>("XK_Thai_sarai");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_saraii() {
		static_assert(field_signatures[jField<F>("XK_Thai_saraii")] != -1);
		return sat<F>("XK_Thai_saraii");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_sarao() {
		static_assert(field_signatures[jField<F>("XK_Thai_sarao")] != -1);
		return sat<F>("XK_Thai_sarao");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_sarau() {
		static_assert(field_signatures[jField<F>("XK_Thai_sarau")] != -1);
		return sat<F>("XK_Thai_sarau");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_saraue() {
		static_assert(field_signatures[jField<F>("XK_Thai_saraue")] != -1);
		return sat<F>("XK_Thai_saraue");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_sarauee() {
		static_assert(field_signatures[jField<F>("XK_Thai_sarauee")] != -1);
		return sat<F>("XK_Thai_sarauee");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_sarauu() {
		static_assert(field_signatures[jField<F>("XK_Thai_sarauu")] != -1);
		return sat<F>("XK_Thai_sarauu");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_sorusi() {
		static_assert(field_signatures[jField<F>("XK_Thai_sorusi")] != -1);
		return sat<F>("XK_Thai_sorusi");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_sosala() {
		static_assert(field_signatures[jField<F>("XK_Thai_sosala")] != -1);
		return sat<F>("XK_Thai_sosala");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_soso() {
		static_assert(field_signatures[jField<F>("XK_Thai_soso")] != -1);
		return sat<F>("XK_Thai_soso");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_sosua() {
		static_assert(field_signatures[jField<F>("XK_Thai_sosua")] != -1);
		return sat<F>("XK_Thai_sosua");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_thanthakhat() {
		static_assert(field_signatures[jField<F>("XK_Thai_thanthakhat")] != -1);
		return sat<F>("XK_Thai_thanthakhat");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_thonangmontho() {
		static_assert(field_signatures[jField<F>("XK_Thai_thonangmontho")] != -1);
		return sat<F>("XK_Thai_thonangmontho");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_thophuthao() {
		static_assert(field_signatures[jField<F>("XK_Thai_thophuthao")] != -1);
		return sat<F>("XK_Thai_thophuthao");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_thothahan() {
		static_assert(field_signatures[jField<F>("XK_Thai_thothahan")] != -1);
		return sat<F>("XK_Thai_thothahan");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_thothan() {
		static_assert(field_signatures[jField<F>("XK_Thai_thothan")] != -1);
		return sat<F>("XK_Thai_thothan");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_thothong() {
		static_assert(field_signatures[jField<F>("XK_Thai_thothong")] != -1);
		return sat<F>("XK_Thai_thothong");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_thothung() {
		static_assert(field_signatures[jField<F>("XK_Thai_thothung")] != -1);
		return sat<F>("XK_Thai_thothung");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_topatak() {
		static_assert(field_signatures[jField<F>("XK_Thai_topatak")] != -1);
		return sat<F>("XK_Thai_topatak");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_totao() {
		static_assert(field_signatures[jField<F>("XK_Thai_totao")] != -1);
		return sat<F>("XK_Thai_totao");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_wowaen() {
		static_assert(field_signatures[jField<F>("XK_Thai_wowaen")] != -1);
		return sat<F>("XK_Thai_wowaen");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_yoyak() {
		static_assert(field_signatures[jField<F>("XK_Thai_yoyak")] != -1);
		return sat<F>("XK_Thai_yoyak");
	}

	template<typename F = ::jlong>
	static auto XK_Thai_yoying() {
		static_assert(field_signatures[jField<F>("XK_Thai_yoying")] != -1);
		return sat<F>("XK_Thai_yoying");
	}

	template<typename F = ::jlong>
	static auto XK_Thorn() {
		static_assert(field_signatures[jField<F>("XK_Thorn")] != -1);
		return sat<F>("XK_Thorn");
	}

	template<typename F = ::jlong>
	static auto XK_Touroku() {
		static_assert(field_signatures[jField<F>("XK_Touroku")] != -1);
		return sat<F>("XK_Touroku");
	}

	template<typename F = ::jlong>
	static auto XK_Tslash() {
		static_assert(field_signatures[jField<F>("XK_Tslash")] != -1);
		return sat<F>("XK_Tslash");
	}

	template<typename F = ::jlong>
	static auto XK_U() {
		static_assert(field_signatures[jField<F>("XK_U")] != -1);
		return sat<F>("XK_U");
	}

	template<typename F = ::jlong>
	static auto XK_Uacute() {
		static_assert(field_signatures[jField<F>("XK_Uacute")] != -1);
		return sat<F>("XK_Uacute");
	}

	template<typename F = ::jlong>
	static auto XK_Ubreve() {
		static_assert(field_signatures[jField<F>("XK_Ubreve")] != -1);
		return sat<F>("XK_Ubreve");
	}

	template<typename F = ::jlong>
	static auto XK_Ucircumflex() {
		static_assert(field_signatures[jField<F>("XK_Ucircumflex")] != -1);
		return sat<F>("XK_Ucircumflex");
	}

	template<typename F = ::jlong>
	static auto XK_Udiaeresis() {
		static_assert(field_signatures[jField<F>("XK_Udiaeresis")] != -1);
		return sat<F>("XK_Udiaeresis");
	}

	template<typename F = ::jlong>
	static auto XK_Udoubleacute() {
		static_assert(field_signatures[jField<F>("XK_Udoubleacute")] != -1);
		return sat<F>("XK_Udoubleacute");
	}

	template<typename F = ::jlong>
	static auto XK_Ugrave() {
		static_assert(field_signatures[jField<F>("XK_Ugrave")] != -1);
		return sat<F>("XK_Ugrave");
	}

	template<typename F = ::jlong>
	static auto XK_Ukrainian_I() {
		static_assert(field_signatures[jField<F>("XK_Ukrainian_I")] != -1);
		return sat<F>("XK_Ukrainian_I");
	}

	template<typename F = ::jlong>
	static auto XK_Ukrainian_IE() {
		static_assert(field_signatures[jField<F>("XK_Ukrainian_IE")] != -1);
		return sat<F>("XK_Ukrainian_IE");
	}

	template<typename F = ::jlong>
	static auto XK_Ukrainian_YI() {
		static_assert(field_signatures[jField<F>("XK_Ukrainian_YI")] != -1);
		return sat<F>("XK_Ukrainian_YI");
	}

	template<typename F = ::jlong>
	static auto XK_Ukrainian_i() {
		static_assert(field_signatures[jField<F>("XK_Ukrainian_i")] != -1);
		return sat<F>("XK_Ukrainian_i");
	}

	template<typename F = ::jlong>
	static auto XK_Ukrainian_ie() {
		static_assert(field_signatures[jField<F>("XK_Ukrainian_ie")] != -1);
		return sat<F>("XK_Ukrainian_ie");
	}

	template<typename F = ::jlong>
	static auto XK_Ukrainian_yi() {
		static_assert(field_signatures[jField<F>("XK_Ukrainian_yi")] != -1);
		return sat<F>("XK_Ukrainian_yi");
	}

	template<typename F = ::jlong>
	static auto XK_Ukranian_I() {
		static_assert(field_signatures[jField<F>("XK_Ukranian_I")] != -1);
		return sat<F>("XK_Ukranian_I");
	}

	template<typename F = ::jlong>
	static auto XK_Ukranian_JE() {
		static_assert(field_signatures[jField<F>("XK_Ukranian_JE")] != -1);
		return sat<F>("XK_Ukranian_JE");
	}

	template<typename F = ::jlong>
	static auto XK_Ukranian_YI() {
		static_assert(field_signatures[jField<F>("XK_Ukranian_YI")] != -1);
		return sat<F>("XK_Ukranian_YI");
	}

	template<typename F = ::jlong>
	static auto XK_Ukranian_i() {
		static_assert(field_signatures[jField<F>("XK_Ukranian_i")] != -1);
		return sat<F>("XK_Ukranian_i");
	}

	template<typename F = ::jlong>
	static auto XK_Ukranian_je() {
		static_assert(field_signatures[jField<F>("XK_Ukranian_je")] != -1);
		return sat<F>("XK_Ukranian_je");
	}

	template<typename F = ::jlong>
	static auto XK_Ukranian_yi() {
		static_assert(field_signatures[jField<F>("XK_Ukranian_yi")] != -1);
		return sat<F>("XK_Ukranian_yi");
	}

	template<typename F = ::jlong>
	static auto XK_Umacron() {
		static_assert(field_signatures[jField<F>("XK_Umacron")] != -1);
		return sat<F>("XK_Umacron");
	}

	template<typename F = ::jlong>
	static auto XK_Undo() {
		static_assert(field_signatures[jField<F>("XK_Undo")] != -1);
		return sat<F>("XK_Undo");
	}

	template<typename F = ::jlong>
	static auto XK_Uogonek() {
		static_assert(field_signatures[jField<F>("XK_Uogonek")] != -1);
		return sat<F>("XK_Uogonek");
	}

	template<typename F = ::jlong>
	static auto XK_Up() {
		static_assert(field_signatures[jField<F>("XK_Up")] != -1);
		return sat<F>("XK_Up");
	}

	template<typename F = ::jlong>
	static auto XK_Uring() {
		static_assert(field_signatures[jField<F>("XK_Uring")] != -1);
		return sat<F>("XK_Uring");
	}

	template<typename F = ::jlong>
	static auto XK_Utilde() {
		static_assert(field_signatures[jField<F>("XK_Utilde")] != -1);
		return sat<F>("XK_Utilde");
	}

	template<typename F = ::jlong>
	static auto XK_V() {
		static_assert(field_signatures[jField<F>("XK_V")] != -1);
		return sat<F>("XK_V");
	}

	template<typename F = ::jlong>
	static auto XK_VoidSymbol() {
		static_assert(field_signatures[jField<F>("XK_VoidSymbol")] != -1);
		return sat<F>("XK_VoidSymbol");
	}

	template<typename F = ::jlong>
	static auto XK_W() {
		static_assert(field_signatures[jField<F>("XK_W")] != -1);
		return sat<F>("XK_W");
	}

	template<typename F = ::jlong>
	static auto XK_WonSign() {
		static_assert(field_signatures[jField<F>("XK_WonSign")] != -1);
		return sat<F>("XK_WonSign");
	}

	template<typename F = ::jlong>
	static auto XK_X() {
		static_assert(field_signatures[jField<F>("XK_X")] != -1);
		return sat<F>("XK_X");
	}

	template<typename F = ::jlong>
	static auto XK_Y() {
		static_assert(field_signatures[jField<F>("XK_Y")] != -1);
		return sat<F>("XK_Y");
	}

	template<typename F = ::jlong>
	static auto XK_Yacute() {
		static_assert(field_signatures[jField<F>("XK_Yacute")] != -1);
		return sat<F>("XK_Yacute");
	}

	template<typename F = ::jlong>
	static auto XK_Ydiaeresis() {
		static_assert(field_signatures[jField<F>("XK_Ydiaeresis")] != -1);
		return sat<F>("XK_Ydiaeresis");
	}

	template<typename F = ::jlong>
	static auto XK_Z() {
		static_assert(field_signatures[jField<F>("XK_Z")] != -1);
		return sat<F>("XK_Z");
	}

	template<typename F = ::jlong>
	static auto XK_Zabovedot() {
		static_assert(field_signatures[jField<F>("XK_Zabovedot")] != -1);
		return sat<F>("XK_Zabovedot");
	}

	template<typename F = ::jlong>
	static auto XK_Zacute() {
		static_assert(field_signatures[jField<F>("XK_Zacute")] != -1);
		return sat<F>("XK_Zacute");
	}

	template<typename F = ::jlong>
	static auto XK_Zcaron() {
		static_assert(field_signatures[jField<F>("XK_Zcaron")] != -1);
		return sat<F>("XK_Zcaron");
	}

	template<typename F = ::jlong>
	static auto XK_Zen_Koho() {
		static_assert(field_signatures[jField<F>("XK_Zen_Koho")] != -1);
		return sat<F>("XK_Zen_Koho");
	}

	template<typename F = ::jlong>
	static auto XK_Zenkaku() {
		static_assert(field_signatures[jField<F>("XK_Zenkaku")] != -1);
		return sat<F>("XK_Zenkaku");
	}

	template<typename F = ::jlong>
	static auto XK_Zenkaku_Hankaku() {
		static_assert(field_signatures[jField<F>("XK_Zenkaku_Hankaku")] != -1);
		return sat<F>("XK_Zenkaku_Hankaku");
	}

	template<typename F = ::jlong>
	static auto XK_a() {
		static_assert(field_signatures[jField<F>("XK_a")] != -1);
		return sat<F>("XK_a");
	}

	template<typename F = ::jlong>
	static auto XK_aacute() {
		static_assert(field_signatures[jField<F>("XK_aacute")] != -1);
		return sat<F>("XK_aacute");
	}

	template<typename F = ::jlong>
	static auto XK_abovedot() {
		static_assert(field_signatures[jField<F>("XK_abovedot")] != -1);
		return sat<F>("XK_abovedot");
	}

	template<typename F = ::jlong>
	static auto XK_abreve() {
		static_assert(field_signatures[jField<F>("XK_abreve")] != -1);
		return sat<F>("XK_abreve");
	}

	template<typename F = ::jlong>
	static auto XK_acircumflex() {
		static_assert(field_signatures[jField<F>("XK_acircumflex")] != -1);
		return sat<F>("XK_acircumflex");
	}

	template<typename F = ::jlong>
	static auto XK_acute() {
		static_assert(field_signatures[jField<F>("XK_acute")] != -1);
		return sat<F>("XK_acute");
	}

	template<typename F = ::jlong>
	static auto XK_adiaeresis() {
		static_assert(field_signatures[jField<F>("XK_adiaeresis")] != -1);
		return sat<F>("XK_adiaeresis");
	}

	template<typename F = ::jlong>
	static auto XK_ae() {
		static_assert(field_signatures[jField<F>("XK_ae")] != -1);
		return sat<F>("XK_ae");
	}

	template<typename F = ::jlong>
	static auto XK_agrave() {
		static_assert(field_signatures[jField<F>("XK_agrave")] != -1);
		return sat<F>("XK_agrave");
	}

	template<typename F = ::jlong>
	static auto XK_amacron() {
		static_assert(field_signatures[jField<F>("XK_amacron")] != -1);
		return sat<F>("XK_amacron");
	}

	template<typename F = ::jlong>
	static auto XK_ampersand() {
		static_assert(field_signatures[jField<F>("XK_ampersand")] != -1);
		return sat<F>("XK_ampersand");
	}

	template<typename F = ::jlong>
	static auto XK_aogonek() {
		static_assert(field_signatures[jField<F>("XK_aogonek")] != -1);
		return sat<F>("XK_aogonek");
	}

	template<typename F = ::jlong>
	static auto XK_apostrophe() {
		static_assert(field_signatures[jField<F>("XK_apostrophe")] != -1);
		return sat<F>("XK_apostrophe");
	}

	template<typename F = ::jlong>
	static auto XK_approximate() {
		static_assert(field_signatures[jField<F>("XK_approximate")] != -1);
		return sat<F>("XK_approximate");
	}

	template<typename F = ::jlong>
	static auto XK_aring() {
		static_assert(field_signatures[jField<F>("XK_aring")] != -1);
		return sat<F>("XK_aring");
	}

	template<typename F = ::jlong>
	static auto XK_asciicircum() {
		static_assert(field_signatures[jField<F>("XK_asciicircum")] != -1);
		return sat<F>("XK_asciicircum");
	}

	template<typename F = ::jlong>
	static auto XK_asciitilde() {
		static_assert(field_signatures[jField<F>("XK_asciitilde")] != -1);
		return sat<F>("XK_asciitilde");
	}

	template<typename F = ::jlong>
	static auto XK_asterisk() {
		static_assert(field_signatures[jField<F>("XK_asterisk")] != -1);
		return sat<F>("XK_asterisk");
	}

	template<typename F = ::jlong>
	static auto XK_at() {
		static_assert(field_signatures[jField<F>("XK_at")] != -1);
		return sat<F>("XK_at");
	}

	template<typename F = ::jlong>
	static auto XK_atilde() {
		static_assert(field_signatures[jField<F>("XK_atilde")] != -1);
		return sat<F>("XK_atilde");
	}

	template<typename F = ::jlong>
	static auto XK_b() {
		static_assert(field_signatures[jField<F>("XK_b")] != -1);
		return sat<F>("XK_b");
	}

	template<typename F = ::jlong>
	static auto XK_backslash() {
		static_assert(field_signatures[jField<F>("XK_backslash")] != -1);
		return sat<F>("XK_backslash");
	}

	template<typename F = ::jlong>
	static auto XK_ballotcross() {
		static_assert(field_signatures[jField<F>("XK_ballotcross")] != -1);
		return sat<F>("XK_ballotcross");
	}

	template<typename F = ::jlong>
	static auto XK_bar() {
		static_assert(field_signatures[jField<F>("XK_bar")] != -1);
		return sat<F>("XK_bar");
	}

	template<typename F = ::jlong>
	static auto XK_blank() {
		static_assert(field_signatures[jField<F>("XK_blank")] != -1);
		return sat<F>("XK_blank");
	}

	template<typename F = ::jlong>
	static auto XK_botintegral() {
		static_assert(field_signatures[jField<F>("XK_botintegral")] != -1);
		return sat<F>("XK_botintegral");
	}

	template<typename F = ::jlong>
	static auto XK_botleftparens() {
		static_assert(field_signatures[jField<F>("XK_botleftparens")] != -1);
		return sat<F>("XK_botleftparens");
	}

	template<typename F = ::jlong>
	static auto XK_botleftsqbracket() {
		static_assert(field_signatures[jField<F>("XK_botleftsqbracket")] != -1);
		return sat<F>("XK_botleftsqbracket");
	}

	template<typename F = ::jlong>
	static auto XK_botleftsummation() {
		static_assert(field_signatures[jField<F>("XK_botleftsummation")] != -1);
		return sat<F>("XK_botleftsummation");
	}

	template<typename F = ::jlong>
	static auto XK_botrightparens() {
		static_assert(field_signatures[jField<F>("XK_botrightparens")] != -1);
		return sat<F>("XK_botrightparens");
	}

	template<typename F = ::jlong>
	static auto XK_botrightsqbracket() {
		static_assert(field_signatures[jField<F>("XK_botrightsqbracket")] != -1);
		return sat<F>("XK_botrightsqbracket");
	}

	template<typename F = ::jlong>
	static auto XK_botrightsummation() {
		static_assert(field_signatures[jField<F>("XK_botrightsummation")] != -1);
		return sat<F>("XK_botrightsummation");
	}

	template<typename F = ::jlong>
	static auto XK_bott() {
		static_assert(field_signatures[jField<F>("XK_bott")] != -1);
		return sat<F>("XK_bott");
	}

	template<typename F = ::jlong>
	static auto XK_botvertsummationconnector() {
		static_assert(field_signatures[jField<F>("XK_botvertsummationconnector")] != -1);
		return sat<F>("XK_botvertsummationconnector");
	}

	template<typename F = ::jlong>
	static auto XK_braceleft() {
		static_assert(field_signatures[jField<F>("XK_braceleft")] != -1);
		return sat<F>("XK_braceleft");
	}

	template<typename F = ::jlong>
	static auto XK_braceright() {
		static_assert(field_signatures[jField<F>("XK_braceright")] != -1);
		return sat<F>("XK_braceright");
	}

	template<typename F = ::jlong>
	static auto XK_bracketleft() {
		static_assert(field_signatures[jField<F>("XK_bracketleft")] != -1);
		return sat<F>("XK_bracketleft");
	}

	template<typename F = ::jlong>
	static auto XK_bracketright() {
		static_assert(field_signatures[jField<F>("XK_bracketright")] != -1);
		return sat<F>("XK_bracketright");
	}

	template<typename F = ::jlong>
	static auto XK_breve() {
		static_assert(field_signatures[jField<F>("XK_breve")] != -1);
		return sat<F>("XK_breve");
	}

	template<typename F = ::jlong>
	static auto XK_brokenbar() {
		static_assert(field_signatures[jField<F>("XK_brokenbar")] != -1);
		return sat<F>("XK_brokenbar");
	}

	template<typename F = ::jlong>
	static auto XK_c() {
		static_assert(field_signatures[jField<F>("XK_c")] != -1);
		return sat<F>("XK_c");
	}

	template<typename F = ::jlong>
	static auto XK_cabovedot() {
		static_assert(field_signatures[jField<F>("XK_cabovedot")] != -1);
		return sat<F>("XK_cabovedot");
	}

	template<typename F = ::jlong>
	static auto XK_cacute() {
		static_assert(field_signatures[jField<F>("XK_cacute")] != -1);
		return sat<F>("XK_cacute");
	}

	template<typename F = ::jlong>
	static auto XK_careof() {
		static_assert(field_signatures[jField<F>("XK_careof")] != -1);
		return sat<F>("XK_careof");
	}

	template<typename F = ::jlong>
	static auto XK_caret() {
		static_assert(field_signatures[jField<F>("XK_caret")] != -1);
		return sat<F>("XK_caret");
	}

	template<typename F = ::jlong>
	static auto XK_caron() {
		static_assert(field_signatures[jField<F>("XK_caron")] != -1);
		return sat<F>("XK_caron");
	}

	template<typename F = ::jlong>
	static auto XK_ccaron() {
		static_assert(field_signatures[jField<F>("XK_ccaron")] != -1);
		return sat<F>("XK_ccaron");
	}

	template<typename F = ::jlong>
	static auto XK_ccedilla() {
		static_assert(field_signatures[jField<F>("XK_ccedilla")] != -1);
		return sat<F>("XK_ccedilla");
	}

	template<typename F = ::jlong>
	static auto XK_ccircumflex() {
		static_assert(field_signatures[jField<F>("XK_ccircumflex")] != -1);
		return sat<F>("XK_ccircumflex");
	}

	template<typename F = ::jlong>
	static auto XK_cedilla() {
		static_assert(field_signatures[jField<F>("XK_cedilla")] != -1);
		return sat<F>("XK_cedilla");
	}

	template<typename F = ::jlong>
	static auto XK_cent() {
		static_assert(field_signatures[jField<F>("XK_cent")] != -1);
		return sat<F>("XK_cent");
	}

	template<typename F = ::jlong>
	static auto XK_checkerboard() {
		static_assert(field_signatures[jField<F>("XK_checkerboard")] != -1);
		return sat<F>("XK_checkerboard");
	}

	template<typename F = ::jlong>
	static auto XK_checkmark() {
		static_assert(field_signatures[jField<F>("XK_checkmark")] != -1);
		return sat<F>("XK_checkmark");
	}

	template<typename F = ::jlong>
	static auto XK_circle() {
		static_assert(field_signatures[jField<F>("XK_circle")] != -1);
		return sat<F>("XK_circle");
	}

	template<typename F = ::jlong>
	static auto XK_club() {
		static_assert(field_signatures[jField<F>("XK_club")] != -1);
		return sat<F>("XK_club");
	}

	template<typename F = ::jlong>
	static auto XK_colon() {
		static_assert(field_signatures[jField<F>("XK_colon")] != -1);
		return sat<F>("XK_colon");
	}

	template<typename F = ::jlong>
	static auto XK_comma() {
		static_assert(field_signatures[jField<F>("XK_comma")] != -1);
		return sat<F>("XK_comma");
	}

	template<typename F = ::jlong>
	static auto XK_copyright() {
		static_assert(field_signatures[jField<F>("XK_copyright")] != -1);
		return sat<F>("XK_copyright");
	}

	template<typename F = ::jlong>
	static auto XK_cr() {
		static_assert(field_signatures[jField<F>("XK_cr")] != -1);
		return sat<F>("XK_cr");
	}

	template<typename F = ::jlong>
	static auto XK_crossinglines() {
		static_assert(field_signatures[jField<F>("XK_crossinglines")] != -1);
		return sat<F>("XK_crossinglines");
	}

	template<typename F = ::jlong>
	static auto XK_currency() {
		static_assert(field_signatures[jField<F>("XK_currency")] != -1);
		return sat<F>("XK_currency");
	}

	template<typename F = ::jlong>
	static auto XK_cursor() {
		static_assert(field_signatures[jField<F>("XK_cursor")] != -1);
		return sat<F>("XK_cursor");
	}

	template<typename F = ::jlong>
	static auto XK_d() {
		static_assert(field_signatures[jField<F>("XK_d")] != -1);
		return sat<F>("XK_d");
	}

	template<typename F = ::jlong>
	static auto XK_dagger() {
		static_assert(field_signatures[jField<F>("XK_dagger")] != -1);
		return sat<F>("XK_dagger");
	}

	template<typename F = ::jlong>
	static auto XK_dcaron() {
		static_assert(field_signatures[jField<F>("XK_dcaron")] != -1);
		return sat<F>("XK_dcaron");
	}

	template<typename F = ::jlong>
	static auto XK_dead_abovedot() {
		static_assert(field_signatures[jField<F>("XK_dead_abovedot")] != -1);
		return sat<F>("XK_dead_abovedot");
	}

	template<typename F = ::jlong>
	static auto XK_dead_abovering() {
		static_assert(field_signatures[jField<F>("XK_dead_abovering")] != -1);
		return sat<F>("XK_dead_abovering");
	}

	template<typename F = ::jlong>
	static auto XK_dead_acute() {
		static_assert(field_signatures[jField<F>("XK_dead_acute")] != -1);
		return sat<F>("XK_dead_acute");
	}

	template<typename F = ::jlong>
	static auto XK_dead_belowdot() {
		static_assert(field_signatures[jField<F>("XK_dead_belowdot")] != -1);
		return sat<F>("XK_dead_belowdot");
	}

	template<typename F = ::jlong>
	static auto XK_dead_breve() {
		static_assert(field_signatures[jField<F>("XK_dead_breve")] != -1);
		return sat<F>("XK_dead_breve");
	}

	template<typename F = ::jlong>
	static auto XK_dead_caron() {
		static_assert(field_signatures[jField<F>("XK_dead_caron")] != -1);
		return sat<F>("XK_dead_caron");
	}

	template<typename F = ::jlong>
	static auto XK_dead_cedilla() {
		static_assert(field_signatures[jField<F>("XK_dead_cedilla")] != -1);
		return sat<F>("XK_dead_cedilla");
	}

	template<typename F = ::jlong>
	static auto XK_dead_circumflex() {
		static_assert(field_signatures[jField<F>("XK_dead_circumflex")] != -1);
		return sat<F>("XK_dead_circumflex");
	}

	template<typename F = ::jlong>
	static auto XK_dead_diaeresis() {
		static_assert(field_signatures[jField<F>("XK_dead_diaeresis")] != -1);
		return sat<F>("XK_dead_diaeresis");
	}

	template<typename F = ::jlong>
	static auto XK_dead_doubleacute() {
		static_assert(field_signatures[jField<F>("XK_dead_doubleacute")] != -1);
		return sat<F>("XK_dead_doubleacute");
	}

	template<typename F = ::jlong>
	static auto XK_dead_grave() {
		static_assert(field_signatures[jField<F>("XK_dead_grave")] != -1);
		return sat<F>("XK_dead_grave");
	}

	template<typename F = ::jlong>
	static auto XK_dead_iota() {
		static_assert(field_signatures[jField<F>("XK_dead_iota")] != -1);
		return sat<F>("XK_dead_iota");
	}

	template<typename F = ::jlong>
	static auto XK_dead_macron() {
		static_assert(field_signatures[jField<F>("XK_dead_macron")] != -1);
		return sat<F>("XK_dead_macron");
	}

	template<typename F = ::jlong>
	static auto XK_dead_ogonek() {
		static_assert(field_signatures[jField<F>("XK_dead_ogonek")] != -1);
		return sat<F>("XK_dead_ogonek");
	}

	template<typename F = ::jlong>
	static auto XK_dead_semivoiced_sound() {
		static_assert(field_signatures[jField<F>("XK_dead_semivoiced_sound")] != -1);
		return sat<F>("XK_dead_semivoiced_sound");
	}

	template<typename F = ::jlong>
	static auto XK_dead_tilde() {
		static_assert(field_signatures[jField<F>("XK_dead_tilde")] != -1);
		return sat<F>("XK_dead_tilde");
	}

	template<typename F = ::jlong>
	static auto XK_dead_voiced_sound() {
		static_assert(field_signatures[jField<F>("XK_dead_voiced_sound")] != -1);
		return sat<F>("XK_dead_voiced_sound");
	}

	template<typename F = ::jlong>
	static auto XK_decimalpoint() {
		static_assert(field_signatures[jField<F>("XK_decimalpoint")] != -1);
		return sat<F>("XK_decimalpoint");
	}

	template<typename F = ::jlong>
	static auto XK_degree() {
		static_assert(field_signatures[jField<F>("XK_degree")] != -1);
		return sat<F>("XK_degree");
	}

	template<typename F = ::jlong>
	static auto XK_diaeresis() {
		static_assert(field_signatures[jField<F>("XK_diaeresis")] != -1);
		return sat<F>("XK_diaeresis");
	}

	template<typename F = ::jlong>
	static auto XK_diamond() {
		static_assert(field_signatures[jField<F>("XK_diamond")] != -1);
		return sat<F>("XK_diamond");
	}

	template<typename F = ::jlong>
	static auto XK_digitspace() {
		static_assert(field_signatures[jField<F>("XK_digitspace")] != -1);
		return sat<F>("XK_digitspace");
	}

	template<typename F = ::jlong>
	static auto XK_division() {
		static_assert(field_signatures[jField<F>("XK_division")] != -1);
		return sat<F>("XK_division");
	}

	template<typename F = ::jlong>
	static auto XK_dollar() {
		static_assert(field_signatures[jField<F>("XK_dollar")] != -1);
		return sat<F>("XK_dollar");
	}

	template<typename F = ::jlong>
	static auto XK_doubbaselinedot() {
		static_assert(field_signatures[jField<F>("XK_doubbaselinedot")] != -1);
		return sat<F>("XK_doubbaselinedot");
	}

	template<typename F = ::jlong>
	static auto XK_doubleacute() {
		static_assert(field_signatures[jField<F>("XK_doubleacute")] != -1);
		return sat<F>("XK_doubleacute");
	}

	template<typename F = ::jlong>
	static auto XK_doubledagger() {
		static_assert(field_signatures[jField<F>("XK_doubledagger")] != -1);
		return sat<F>("XK_doubledagger");
	}

	template<typename F = ::jlong>
	static auto XK_doublelowquotemark() {
		static_assert(field_signatures[jField<F>("XK_doublelowquotemark")] != -1);
		return sat<F>("XK_doublelowquotemark");
	}

	template<typename F = ::jlong>
	static auto XK_downarrow() {
		static_assert(field_signatures[jField<F>("XK_downarrow")] != -1);
		return sat<F>("XK_downarrow");
	}

	template<typename F = ::jlong>
	static auto XK_downcaret() {
		static_assert(field_signatures[jField<F>("XK_downcaret")] != -1);
		return sat<F>("XK_downcaret");
	}

	template<typename F = ::jlong>
	static auto XK_downshoe() {
		static_assert(field_signatures[jField<F>("XK_downshoe")] != -1);
		return sat<F>("XK_downshoe");
	}

	template<typename F = ::jlong>
	static auto XK_downstile() {
		static_assert(field_signatures[jField<F>("XK_downstile")] != -1);
		return sat<F>("XK_downstile");
	}

	template<typename F = ::jlong>
	static auto XK_downtack() {
		static_assert(field_signatures[jField<F>("XK_downtack")] != -1);
		return sat<F>("XK_downtack");
	}

	template<typename F = ::jlong>
	static auto XK_dstroke() {
		static_assert(field_signatures[jField<F>("XK_dstroke")] != -1);
		return sat<F>("XK_dstroke");
	}

	template<typename F = ::jlong>
	static auto XK_e() {
		static_assert(field_signatures[jField<F>("XK_e")] != -1);
		return sat<F>("XK_e");
	}

	template<typename F = ::jlong>
	static auto XK_eabovedot() {
		static_assert(field_signatures[jField<F>("XK_eabovedot")] != -1);
		return sat<F>("XK_eabovedot");
	}

	template<typename F = ::jlong>
	static auto XK_eacute() {
		static_assert(field_signatures[jField<F>("XK_eacute")] != -1);
		return sat<F>("XK_eacute");
	}

	template<typename F = ::jlong>
	static auto XK_ecaron() {
		static_assert(field_signatures[jField<F>("XK_ecaron")] != -1);
		return sat<F>("XK_ecaron");
	}

	template<typename F = ::jlong>
	static auto XK_ecircumflex() {
		static_assert(field_signatures[jField<F>("XK_ecircumflex")] != -1);
		return sat<F>("XK_ecircumflex");
	}

	template<typename F = ::jlong>
	static auto XK_ediaeresis() {
		static_assert(field_signatures[jField<F>("XK_ediaeresis")] != -1);
		return sat<F>("XK_ediaeresis");
	}

	template<typename F = ::jlong>
	static auto XK_egrave() {
		static_assert(field_signatures[jField<F>("XK_egrave")] != -1);
		return sat<F>("XK_egrave");
	}

	template<typename F = ::jlong>
	static auto XK_ellipsis() {
		static_assert(field_signatures[jField<F>("XK_ellipsis")] != -1);
		return sat<F>("XK_ellipsis");
	}

	template<typename F = ::jlong>
	static auto XK_em3space() {
		static_assert(field_signatures[jField<F>("XK_em3space")] != -1);
		return sat<F>("XK_em3space");
	}

	template<typename F = ::jlong>
	static auto XK_em4space() {
		static_assert(field_signatures[jField<F>("XK_em4space")] != -1);
		return sat<F>("XK_em4space");
	}

	template<typename F = ::jlong>
	static auto XK_emacron() {
		static_assert(field_signatures[jField<F>("XK_emacron")] != -1);
		return sat<F>("XK_emacron");
	}

	template<typename F = ::jlong>
	static auto XK_emdash() {
		static_assert(field_signatures[jField<F>("XK_emdash")] != -1);
		return sat<F>("XK_emdash");
	}

	template<typename F = ::jlong>
	static auto XK_emfilledcircle() {
		static_assert(field_signatures[jField<F>("XK_emfilledcircle")] != -1);
		return sat<F>("XK_emfilledcircle");
	}

	template<typename F = ::jlong>
	static auto XK_emfilledrect() {
		static_assert(field_signatures[jField<F>("XK_emfilledrect")] != -1);
		return sat<F>("XK_emfilledrect");
	}

	template<typename F = ::jlong>
	static auto XK_emopencircle() {
		static_assert(field_signatures[jField<F>("XK_emopencircle")] != -1);
		return sat<F>("XK_emopencircle");
	}

	template<typename F = ::jlong>
	static auto XK_emopenrectangle() {
		static_assert(field_signatures[jField<F>("XK_emopenrectangle")] != -1);
		return sat<F>("XK_emopenrectangle");
	}

	template<typename F = ::jlong>
	static auto XK_emspace() {
		static_assert(field_signatures[jField<F>("XK_emspace")] != -1);
		return sat<F>("XK_emspace");
	}

	template<typename F = ::jlong>
	static auto XK_endash() {
		static_assert(field_signatures[jField<F>("XK_endash")] != -1);
		return sat<F>("XK_endash");
	}

	template<typename F = ::jlong>
	static auto XK_enfilledcircbullet() {
		static_assert(field_signatures[jField<F>("XK_enfilledcircbullet")] != -1);
		return sat<F>("XK_enfilledcircbullet");
	}

	template<typename F = ::jlong>
	static auto XK_enfilledsqbullet() {
		static_assert(field_signatures[jField<F>("XK_enfilledsqbullet")] != -1);
		return sat<F>("XK_enfilledsqbullet");
	}

	template<typename F = ::jlong>
	static auto XK_eng() {
		static_assert(field_signatures[jField<F>("XK_eng")] != -1);
		return sat<F>("XK_eng");
	}

	template<typename F = ::jlong>
	static auto XK_enopencircbullet() {
		static_assert(field_signatures[jField<F>("XK_enopencircbullet")] != -1);
		return sat<F>("XK_enopencircbullet");
	}

	template<typename F = ::jlong>
	static auto XK_enopensquarebullet() {
		static_assert(field_signatures[jField<F>("XK_enopensquarebullet")] != -1);
		return sat<F>("XK_enopensquarebullet");
	}

	template<typename F = ::jlong>
	static auto XK_enspace() {
		static_assert(field_signatures[jField<F>("XK_enspace")] != -1);
		return sat<F>("XK_enspace");
	}

	template<typename F = ::jlong>
	static auto XK_eogonek() {
		static_assert(field_signatures[jField<F>("XK_eogonek")] != -1);
		return sat<F>("XK_eogonek");
	}

	template<typename F = ::jlong>
	static auto XK_equal() {
		static_assert(field_signatures[jField<F>("XK_equal")] != -1);
		return sat<F>("XK_equal");
	}

	template<typename F = ::jlong>
	static auto XK_eth() {
		static_assert(field_signatures[jField<F>("XK_eth")] != -1);
		return sat<F>("XK_eth");
	}

	template<typename F = ::jlong>
	static auto XK_exclam() {
		static_assert(field_signatures[jField<F>("XK_exclam")] != -1);
		return sat<F>("XK_exclam");
	}

	template<typename F = ::jlong>
	static auto XK_exclamdown() {
		static_assert(field_signatures[jField<F>("XK_exclamdown")] != -1);
		return sat<F>("XK_exclamdown");
	}

	template<typename F = ::jlong>
	static auto XK_f() {
		static_assert(field_signatures[jField<F>("XK_f")] != -1);
		return sat<F>("XK_f");
	}

	template<typename F = ::jlong>
	static auto XK_femalesymbol() {
		static_assert(field_signatures[jField<F>("XK_femalesymbol")] != -1);
		return sat<F>("XK_femalesymbol");
	}

	template<typename F = ::jlong>
	static auto XK_ff() {
		static_assert(field_signatures[jField<F>("XK_ff")] != -1);
		return sat<F>("XK_ff");
	}

	template<typename F = ::jlong>
	static auto XK_figdash() {
		static_assert(field_signatures[jField<F>("XK_figdash")] != -1);
		return sat<F>("XK_figdash");
	}

	template<typename F = ::jlong>
	static auto XK_filledlefttribullet() {
		static_assert(field_signatures[jField<F>("XK_filledlefttribullet")] != -1);
		return sat<F>("XK_filledlefttribullet");
	}

	template<typename F = ::jlong>
	static auto XK_filledrectbullet() {
		static_assert(field_signatures[jField<F>("XK_filledrectbullet")] != -1);
		return sat<F>("XK_filledrectbullet");
	}

	template<typename F = ::jlong>
	static auto XK_filledrighttribullet() {
		static_assert(field_signatures[jField<F>("XK_filledrighttribullet")] != -1);
		return sat<F>("XK_filledrighttribullet");
	}

	template<typename F = ::jlong>
	static auto XK_filledtribulletdown() {
		static_assert(field_signatures[jField<F>("XK_filledtribulletdown")] != -1);
		return sat<F>("XK_filledtribulletdown");
	}

	template<typename F = ::jlong>
	static auto XK_filledtribulletup() {
		static_assert(field_signatures[jField<F>("XK_filledtribulletup")] != -1);
		return sat<F>("XK_filledtribulletup");
	}

	template<typename F = ::jlong>
	static auto XK_fiveeighths() {
		static_assert(field_signatures[jField<F>("XK_fiveeighths")] != -1);
		return sat<F>("XK_fiveeighths");
	}

	template<typename F = ::jlong>
	static auto XK_fivesixths() {
		static_assert(field_signatures[jField<F>("XK_fivesixths")] != -1);
		return sat<F>("XK_fivesixths");
	}

	template<typename F = ::jlong>
	static auto XK_fourfifths() {
		static_assert(field_signatures[jField<F>("XK_fourfifths")] != -1);
		return sat<F>("XK_fourfifths");
	}

	template<typename F = ::jlong>
	static auto XK_function() {
		static_assert(field_signatures[jField<F>("XK_function")] != -1);
		return sat<F>("XK_function");
	}

	template<typename F = ::jlong>
	static auto XK_g() {
		static_assert(field_signatures[jField<F>("XK_g")] != -1);
		return sat<F>("XK_g");
	}

	template<typename F = ::jlong>
	static auto XK_gabovedot() {
		static_assert(field_signatures[jField<F>("XK_gabovedot")] != -1);
		return sat<F>("XK_gabovedot");
	}

	template<typename F = ::jlong>
	static auto XK_gbreve() {
		static_assert(field_signatures[jField<F>("XK_gbreve")] != -1);
		return sat<F>("XK_gbreve");
	}

	template<typename F = ::jlong>
	static auto XK_gcedilla() {
		static_assert(field_signatures[jField<F>("XK_gcedilla")] != -1);
		return sat<F>("XK_gcedilla");
	}

	template<typename F = ::jlong>
	static auto XK_gcircumflex() {
		static_assert(field_signatures[jField<F>("XK_gcircumflex")] != -1);
		return sat<F>("XK_gcircumflex");
	}

	template<typename F = ::jlong>
	static auto XK_grave() {
		static_assert(field_signatures[jField<F>("XK_grave")] != -1);
		return sat<F>("XK_grave");
	}

	template<typename F = ::jlong>
	static auto XK_greater() {
		static_assert(field_signatures[jField<F>("XK_greater")] != -1);
		return sat<F>("XK_greater");
	}

	template<typename F = ::jlong>
	static auto XK_greaterthanequal() {
		static_assert(field_signatures[jField<F>("XK_greaterthanequal")] != -1);
		return sat<F>("XK_greaterthanequal");
	}

	template<typename F = ::jlong>
	static auto XK_guillemotleft() {
		static_assert(field_signatures[jField<F>("XK_guillemotleft")] != -1);
		return sat<F>("XK_guillemotleft");
	}

	template<typename F = ::jlong>
	static auto XK_guillemotright() {
		static_assert(field_signatures[jField<F>("XK_guillemotright")] != -1);
		return sat<F>("XK_guillemotright");
	}

	template<typename F = ::jlong>
	static auto XK_h() {
		static_assert(field_signatures[jField<F>("XK_h")] != -1);
		return sat<F>("XK_h");
	}

	template<typename F = ::jlong>
	static auto XK_hairspace() {
		static_assert(field_signatures[jField<F>("XK_hairspace")] != -1);
		return sat<F>("XK_hairspace");
	}

	template<typename F = ::jlong>
	static auto XK_hcircumflex() {
		static_assert(field_signatures[jField<F>("XK_hcircumflex")] != -1);
		return sat<F>("XK_hcircumflex");
	}

	template<typename F = ::jlong>
	static auto XK_heart() {
		static_assert(field_signatures[jField<F>("XK_heart")] != -1);
		return sat<F>("XK_heart");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_aleph() {
		static_assert(field_signatures[jField<F>("XK_hebrew_aleph")] != -1);
		return sat<F>("XK_hebrew_aleph");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_ayin() {
		static_assert(field_signatures[jField<F>("XK_hebrew_ayin")] != -1);
		return sat<F>("XK_hebrew_ayin");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_bet() {
		static_assert(field_signatures[jField<F>("XK_hebrew_bet")] != -1);
		return sat<F>("XK_hebrew_bet");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_beth() {
		static_assert(field_signatures[jField<F>("XK_hebrew_beth")] != -1);
		return sat<F>("XK_hebrew_beth");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_chet() {
		static_assert(field_signatures[jField<F>("XK_hebrew_chet")] != -1);
		return sat<F>("XK_hebrew_chet");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_dalet() {
		static_assert(field_signatures[jField<F>("XK_hebrew_dalet")] != -1);
		return sat<F>("XK_hebrew_dalet");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_daleth() {
		static_assert(field_signatures[jField<F>("XK_hebrew_daleth")] != -1);
		return sat<F>("XK_hebrew_daleth");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_doublelowline() {
		static_assert(field_signatures[jField<F>("XK_hebrew_doublelowline")] != -1);
		return sat<F>("XK_hebrew_doublelowline");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_finalkaph() {
		static_assert(field_signatures[jField<F>("XK_hebrew_finalkaph")] != -1);
		return sat<F>("XK_hebrew_finalkaph");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_finalmem() {
		static_assert(field_signatures[jField<F>("XK_hebrew_finalmem")] != -1);
		return sat<F>("XK_hebrew_finalmem");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_finalnun() {
		static_assert(field_signatures[jField<F>("XK_hebrew_finalnun")] != -1);
		return sat<F>("XK_hebrew_finalnun");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_finalpe() {
		static_assert(field_signatures[jField<F>("XK_hebrew_finalpe")] != -1);
		return sat<F>("XK_hebrew_finalpe");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_finalzade() {
		static_assert(field_signatures[jField<F>("XK_hebrew_finalzade")] != -1);
		return sat<F>("XK_hebrew_finalzade");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_finalzadi() {
		static_assert(field_signatures[jField<F>("XK_hebrew_finalzadi")] != -1);
		return sat<F>("XK_hebrew_finalzadi");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_gimel() {
		static_assert(field_signatures[jField<F>("XK_hebrew_gimel")] != -1);
		return sat<F>("XK_hebrew_gimel");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_gimmel() {
		static_assert(field_signatures[jField<F>("XK_hebrew_gimmel")] != -1);
		return sat<F>("XK_hebrew_gimmel");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_he() {
		static_assert(field_signatures[jField<F>("XK_hebrew_he")] != -1);
		return sat<F>("XK_hebrew_he");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_het() {
		static_assert(field_signatures[jField<F>("XK_hebrew_het")] != -1);
		return sat<F>("XK_hebrew_het");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_kaph() {
		static_assert(field_signatures[jField<F>("XK_hebrew_kaph")] != -1);
		return sat<F>("XK_hebrew_kaph");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_kuf() {
		static_assert(field_signatures[jField<F>("XK_hebrew_kuf")] != -1);
		return sat<F>("XK_hebrew_kuf");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_lamed() {
		static_assert(field_signatures[jField<F>("XK_hebrew_lamed")] != -1);
		return sat<F>("XK_hebrew_lamed");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_mem() {
		static_assert(field_signatures[jField<F>("XK_hebrew_mem")] != -1);
		return sat<F>("XK_hebrew_mem");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_nun() {
		static_assert(field_signatures[jField<F>("XK_hebrew_nun")] != -1);
		return sat<F>("XK_hebrew_nun");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_pe() {
		static_assert(field_signatures[jField<F>("XK_hebrew_pe")] != -1);
		return sat<F>("XK_hebrew_pe");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_qoph() {
		static_assert(field_signatures[jField<F>("XK_hebrew_qoph")] != -1);
		return sat<F>("XK_hebrew_qoph");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_resh() {
		static_assert(field_signatures[jField<F>("XK_hebrew_resh")] != -1);
		return sat<F>("XK_hebrew_resh");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_samech() {
		static_assert(field_signatures[jField<F>("XK_hebrew_samech")] != -1);
		return sat<F>("XK_hebrew_samech");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_samekh() {
		static_assert(field_signatures[jField<F>("XK_hebrew_samekh")] != -1);
		return sat<F>("XK_hebrew_samekh");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_shin() {
		static_assert(field_signatures[jField<F>("XK_hebrew_shin")] != -1);
		return sat<F>("XK_hebrew_shin");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_taf() {
		static_assert(field_signatures[jField<F>("XK_hebrew_taf")] != -1);
		return sat<F>("XK_hebrew_taf");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_taw() {
		static_assert(field_signatures[jField<F>("XK_hebrew_taw")] != -1);
		return sat<F>("XK_hebrew_taw");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_tet() {
		static_assert(field_signatures[jField<F>("XK_hebrew_tet")] != -1);
		return sat<F>("XK_hebrew_tet");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_teth() {
		static_assert(field_signatures[jField<F>("XK_hebrew_teth")] != -1);
		return sat<F>("XK_hebrew_teth");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_waw() {
		static_assert(field_signatures[jField<F>("XK_hebrew_waw")] != -1);
		return sat<F>("XK_hebrew_waw");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_yod() {
		static_assert(field_signatures[jField<F>("XK_hebrew_yod")] != -1);
		return sat<F>("XK_hebrew_yod");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_zade() {
		static_assert(field_signatures[jField<F>("XK_hebrew_zade")] != -1);
		return sat<F>("XK_hebrew_zade");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_zadi() {
		static_assert(field_signatures[jField<F>("XK_hebrew_zadi")] != -1);
		return sat<F>("XK_hebrew_zadi");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_zain() {
		static_assert(field_signatures[jField<F>("XK_hebrew_zain")] != -1);
		return sat<F>("XK_hebrew_zain");
	}

	template<typename F = ::jlong>
	static auto XK_hebrew_zayin() {
		static_assert(field_signatures[jField<F>("XK_hebrew_zayin")] != -1);
		return sat<F>("XK_hebrew_zayin");
	}

	template<typename F = ::jlong>
	static auto XK_hexagram() {
		static_assert(field_signatures[jField<F>("XK_hexagram")] != -1);
		return sat<F>("XK_hexagram");
	}

	template<typename F = ::jlong>
	static auto XK_horizconnector() {
		static_assert(field_signatures[jField<F>("XK_horizconnector")] != -1);
		return sat<F>("XK_horizconnector");
	}

	template<typename F = ::jlong>
	static auto XK_horizlinescan1() {
		static_assert(field_signatures[jField<F>("XK_horizlinescan1")] != -1);
		return sat<F>("XK_horizlinescan1");
	}

	template<typename F = ::jlong>
	static auto XK_horizlinescan3() {
		static_assert(field_signatures[jField<F>("XK_horizlinescan3")] != -1);
		return sat<F>("XK_horizlinescan3");
	}

	template<typename F = ::jlong>
	static auto XK_horizlinescan5() {
		static_assert(field_signatures[jField<F>("XK_horizlinescan5")] != -1);
		return sat<F>("XK_horizlinescan5");
	}

	template<typename F = ::jlong>
	static auto XK_horizlinescan7() {
		static_assert(field_signatures[jField<F>("XK_horizlinescan7")] != -1);
		return sat<F>("XK_horizlinescan7");
	}

	template<typename F = ::jlong>
	static auto XK_horizlinescan9() {
		static_assert(field_signatures[jField<F>("XK_horizlinescan9")] != -1);
		return sat<F>("XK_horizlinescan9");
	}

	template<typename F = ::jlong>
	static auto XK_hstroke() {
		static_assert(field_signatures[jField<F>("XK_hstroke")] != -1);
		return sat<F>("XK_hstroke");
	}

	template<typename F = ::jlong>
	static auto XK_ht() {
		static_assert(field_signatures[jField<F>("XK_ht")] != -1);
		return sat<F>("XK_ht");
	}

	template<typename F = ::jlong>
	static auto XK_hyphen() {
		static_assert(field_signatures[jField<F>("XK_hyphen")] != -1);
		return sat<F>("XK_hyphen");
	}

	template<typename F = ::jlong>
	static auto XK_i() {
		static_assert(field_signatures[jField<F>("XK_i")] != -1);
		return sat<F>("XK_i");
	}

	template<typename F = ::jlong>
	static auto XK_iacute() {
		static_assert(field_signatures[jField<F>("XK_iacute")] != -1);
		return sat<F>("XK_iacute");
	}

	template<typename F = ::jlong>
	static auto XK_icircumflex() {
		static_assert(field_signatures[jField<F>("XK_icircumflex")] != -1);
		return sat<F>("XK_icircumflex");
	}

	template<typename F = ::jlong>
	static auto XK_identical() {
		static_assert(field_signatures[jField<F>("XK_identical")] != -1);
		return sat<F>("XK_identical");
	}

	template<typename F = ::jlong>
	static auto XK_idiaeresis() {
		static_assert(field_signatures[jField<F>("XK_idiaeresis")] != -1);
		return sat<F>("XK_idiaeresis");
	}

	template<typename F = ::jlong>
	static auto XK_idotless() {
		static_assert(field_signatures[jField<F>("XK_idotless")] != -1);
		return sat<F>("XK_idotless");
	}

	template<typename F = ::jlong>
	static auto XK_ifonlyif() {
		static_assert(field_signatures[jField<F>("XK_ifonlyif")] != -1);
		return sat<F>("XK_ifonlyif");
	}

	template<typename F = ::jlong>
	static auto XK_igrave() {
		static_assert(field_signatures[jField<F>("XK_igrave")] != -1);
		return sat<F>("XK_igrave");
	}

	template<typename F = ::jlong>
	static auto XK_imacron() {
		static_assert(field_signatures[jField<F>("XK_imacron")] != -1);
		return sat<F>("XK_imacron");
	}

	template<typename F = ::jlong>
	static auto XK_implies() {
		static_assert(field_signatures[jField<F>("XK_implies")] != -1);
		return sat<F>("XK_implies");
	}

	template<typename F = ::jlong>
	static auto XK_includedin() {
		static_assert(field_signatures[jField<F>("XK_includedin")] != -1);
		return sat<F>("XK_includedin");
	}

	template<typename F = ::jlong>
	static auto XK_includes() {
		static_assert(field_signatures[jField<F>("XK_includes")] != -1);
		return sat<F>("XK_includes");
	}

	template<typename F = ::jlong>
	static auto XK_infinity() {
		static_assert(field_signatures[jField<F>("XK_infinity")] != -1);
		return sat<F>("XK_infinity");
	}

	template<typename F = ::jlong>
	static auto XK_integral() {
		static_assert(field_signatures[jField<F>("XK_integral")] != -1);
		return sat<F>("XK_integral");
	}

	template<typename F = ::jlong>
	static auto XK_intersection() {
		static_assert(field_signatures[jField<F>("XK_intersection")] != -1);
		return sat<F>("XK_intersection");
	}

	template<typename F = ::jlong>
	static auto XK_iogonek() {
		static_assert(field_signatures[jField<F>("XK_iogonek")] != -1);
		return sat<F>("XK_iogonek");
	}

	template<typename F = ::jlong>
	static auto XK_itilde() {
		static_assert(field_signatures[jField<F>("XK_itilde")] != -1);
		return sat<F>("XK_itilde");
	}

	template<typename F = ::jlong>
	static auto XK_j() {
		static_assert(field_signatures[jField<F>("XK_j")] != -1);
		return sat<F>("XK_j");
	}

	template<typename F = ::jlong>
	static auto XK_jcircumflex() {
		static_assert(field_signatures[jField<F>("XK_jcircumflex")] != -1);
		return sat<F>("XK_jcircumflex");
	}

	template<typename F = ::jlong>
	static auto XK_jot() {
		static_assert(field_signatures[jField<F>("XK_jot")] != -1);
		return sat<F>("XK_jot");
	}

	template<typename F = ::jlong>
	static auto XK_k() {
		static_assert(field_signatures[jField<F>("XK_k")] != -1);
		return sat<F>("XK_k");
	}

	template<typename F = ::jlong>
	static auto XK_kana_A() {
		static_assert(field_signatures[jField<F>("XK_kana_A")] != -1);
		return sat<F>("XK_kana_A");
	}

	template<typename F = ::jlong>
	static auto XK_kana_CHI() {
		static_assert(field_signatures[jField<F>("XK_kana_CHI")] != -1);
		return sat<F>("XK_kana_CHI");
	}

	template<typename F = ::jlong>
	static auto XK_kana_E() {
		static_assert(field_signatures[jField<F>("XK_kana_E")] != -1);
		return sat<F>("XK_kana_E");
	}

	template<typename F = ::jlong>
	static auto XK_kana_FU() {
		static_assert(field_signatures[jField<F>("XK_kana_FU")] != -1);
		return sat<F>("XK_kana_FU");
	}

	template<typename F = ::jlong>
	static auto XK_kana_HA() {
		static_assert(field_signatures[jField<F>("XK_kana_HA")] != -1);
		return sat<F>("XK_kana_HA");
	}

	template<typename F = ::jlong>
	static auto XK_kana_HE() {
		static_assert(field_signatures[jField<F>("XK_kana_HE")] != -1);
		return sat<F>("XK_kana_HE");
	}

	template<typename F = ::jlong>
	static auto XK_kana_HI() {
		static_assert(field_signatures[jField<F>("XK_kana_HI")] != -1);
		return sat<F>("XK_kana_HI");
	}

	template<typename F = ::jlong>
	static auto XK_kana_HO() {
		static_assert(field_signatures[jField<F>("XK_kana_HO")] != -1);
		return sat<F>("XK_kana_HO");
	}

	template<typename F = ::jlong>
	static auto XK_kana_HU() {
		static_assert(field_signatures[jField<F>("XK_kana_HU")] != -1);
		return sat<F>("XK_kana_HU");
	}

	template<typename F = ::jlong>
	static auto XK_kana_I() {
		static_assert(field_signatures[jField<F>("XK_kana_I")] != -1);
		return sat<F>("XK_kana_I");
	}

	template<typename F = ::jlong>
	static auto XK_kana_KA() {
		static_assert(field_signatures[jField<F>("XK_kana_KA")] != -1);
		return sat<F>("XK_kana_KA");
	}

	template<typename F = ::jlong>
	static auto XK_kana_KE() {
		static_assert(field_signatures[jField<F>("XK_kana_KE")] != -1);
		return sat<F>("XK_kana_KE");
	}

	template<typename F = ::jlong>
	static auto XK_kana_KI() {
		static_assert(field_signatures[jField<F>("XK_kana_KI")] != -1);
		return sat<F>("XK_kana_KI");
	}

	template<typename F = ::jlong>
	static auto XK_kana_KO() {
		static_assert(field_signatures[jField<F>("XK_kana_KO")] != -1);
		return sat<F>("XK_kana_KO");
	}

	template<typename F = ::jlong>
	static auto XK_kana_KU() {
		static_assert(field_signatures[jField<F>("XK_kana_KU")] != -1);
		return sat<F>("XK_kana_KU");
	}

	template<typename F = ::jlong>
	static auto XK_kana_MA() {
		static_assert(field_signatures[jField<F>("XK_kana_MA")] != -1);
		return sat<F>("XK_kana_MA");
	}

	template<typename F = ::jlong>
	static auto XK_kana_ME() {
		static_assert(field_signatures[jField<F>("XK_kana_ME")] != -1);
		return sat<F>("XK_kana_ME");
	}

	template<typename F = ::jlong>
	static auto XK_kana_MI() {
		static_assert(field_signatures[jField<F>("XK_kana_MI")] != -1);
		return sat<F>("XK_kana_MI");
	}

	template<typename F = ::jlong>
	static auto XK_kana_MO() {
		static_assert(field_signatures[jField<F>("XK_kana_MO")] != -1);
		return sat<F>("XK_kana_MO");
	}

	template<typename F = ::jlong>
	static auto XK_kana_MU() {
		static_assert(field_signatures[jField<F>("XK_kana_MU")] != -1);
		return sat<F>("XK_kana_MU");
	}

	template<typename F = ::jlong>
	static auto XK_kana_N() {
		static_assert(field_signatures[jField<F>("XK_kana_N")] != -1);
		return sat<F>("XK_kana_N");
	}

	template<typename F = ::jlong>
	static auto XK_kana_NA() {
		static_assert(field_signatures[jField<F>("XK_kana_NA")] != -1);
		return sat<F>("XK_kana_NA");
	}

	template<typename F = ::jlong>
	static auto XK_kana_NE() {
		static_assert(field_signatures[jField<F>("XK_kana_NE")] != -1);
		return sat<F>("XK_kana_NE");
	}

	template<typename F = ::jlong>
	static auto XK_kana_NI() {
		static_assert(field_signatures[jField<F>("XK_kana_NI")] != -1);
		return sat<F>("XK_kana_NI");
	}

	template<typename F = ::jlong>
	static auto XK_kana_NO() {
		static_assert(field_signatures[jField<F>("XK_kana_NO")] != -1);
		return sat<F>("XK_kana_NO");
	}

	template<typename F = ::jlong>
	static auto XK_kana_NU() {
		static_assert(field_signatures[jField<F>("XK_kana_NU")] != -1);
		return sat<F>("XK_kana_NU");
	}

	template<typename F = ::jlong>
	static auto XK_kana_O() {
		static_assert(field_signatures[jField<F>("XK_kana_O")] != -1);
		return sat<F>("XK_kana_O");
	}

	template<typename F = ::jlong>
	static auto XK_kana_RA() {
		static_assert(field_signatures[jField<F>("XK_kana_RA")] != -1);
		return sat<F>("XK_kana_RA");
	}

	template<typename F = ::jlong>
	static auto XK_kana_RE() {
		static_assert(field_signatures[jField<F>("XK_kana_RE")] != -1);
		return sat<F>("XK_kana_RE");
	}

	template<typename F = ::jlong>
	static auto XK_kana_RI() {
		static_assert(field_signatures[jField<F>("XK_kana_RI")] != -1);
		return sat<F>("XK_kana_RI");
	}

	template<typename F = ::jlong>
	static auto XK_kana_RO() {
		static_assert(field_signatures[jField<F>("XK_kana_RO")] != -1);
		return sat<F>("XK_kana_RO");
	}

	template<typename F = ::jlong>
	static auto XK_kana_RU() {
		static_assert(field_signatures[jField<F>("XK_kana_RU")] != -1);
		return sat<F>("XK_kana_RU");
	}

	template<typename F = ::jlong>
	static auto XK_kana_SA() {
		static_assert(field_signatures[jField<F>("XK_kana_SA")] != -1);
		return sat<F>("XK_kana_SA");
	}

	template<typename F = ::jlong>
	static auto XK_kana_SE() {
		static_assert(field_signatures[jField<F>("XK_kana_SE")] != -1);
		return sat<F>("XK_kana_SE");
	}

	template<typename F = ::jlong>
	static auto XK_kana_SHI() {
		static_assert(field_signatures[jField<F>("XK_kana_SHI")] != -1);
		return sat<F>("XK_kana_SHI");
	}

	template<typename F = ::jlong>
	static auto XK_kana_SO() {
		static_assert(field_signatures[jField<F>("XK_kana_SO")] != -1);
		return sat<F>("XK_kana_SO");
	}

	template<typename F = ::jlong>
	static auto XK_kana_SU() {
		static_assert(field_signatures[jField<F>("XK_kana_SU")] != -1);
		return sat<F>("XK_kana_SU");
	}

	template<typename F = ::jlong>
	static auto XK_kana_TA() {
		static_assert(field_signatures[jField<F>("XK_kana_TA")] != -1);
		return sat<F>("XK_kana_TA");
	}

	template<typename F = ::jlong>
	static auto XK_kana_TE() {
		static_assert(field_signatures[jField<F>("XK_kana_TE")] != -1);
		return sat<F>("XK_kana_TE");
	}

	template<typename F = ::jlong>
	static auto XK_kana_TI() {
		static_assert(field_signatures[jField<F>("XK_kana_TI")] != -1);
		return sat<F>("XK_kana_TI");
	}

	template<typename F = ::jlong>
	static auto XK_kana_TO() {
		static_assert(field_signatures[jField<F>("XK_kana_TO")] != -1);
		return sat<F>("XK_kana_TO");
	}

	template<typename F = ::jlong>
	static auto XK_kana_TSU() {
		static_assert(field_signatures[jField<F>("XK_kana_TSU")] != -1);
		return sat<F>("XK_kana_TSU");
	}

	template<typename F = ::jlong>
	static auto XK_kana_TU() {
		static_assert(field_signatures[jField<F>("XK_kana_TU")] != -1);
		return sat<F>("XK_kana_TU");
	}

	template<typename F = ::jlong>
	static auto XK_kana_U() {
		static_assert(field_signatures[jField<F>("XK_kana_U")] != -1);
		return sat<F>("XK_kana_U");
	}

	template<typename F = ::jlong>
	static auto XK_kana_WA() {
		static_assert(field_signatures[jField<F>("XK_kana_WA")] != -1);
		return sat<F>("XK_kana_WA");
	}

	template<typename F = ::jlong>
	static auto XK_kana_WO() {
		static_assert(field_signatures[jField<F>("XK_kana_WO")] != -1);
		return sat<F>("XK_kana_WO");
	}

	template<typename F = ::jlong>
	static auto XK_kana_YA() {
		static_assert(field_signatures[jField<F>("XK_kana_YA")] != -1);
		return sat<F>("XK_kana_YA");
	}

	template<typename F = ::jlong>
	static auto XK_kana_YO() {
		static_assert(field_signatures[jField<F>("XK_kana_YO")] != -1);
		return sat<F>("XK_kana_YO");
	}

	template<typename F = ::jlong>
	static auto XK_kana_YU() {
		static_assert(field_signatures[jField<F>("XK_kana_YU")] != -1);
		return sat<F>("XK_kana_YU");
	}

	template<typename F = ::jlong>
	static auto XK_kana_a() {
		static_assert(field_signatures[jField<F>("XK_kana_a")] != -1);
		return sat<F>("XK_kana_a");
	}

	template<typename F = ::jlong>
	static auto XK_kana_closingbracket() {
		static_assert(field_signatures[jField<F>("XK_kana_closingbracket")] != -1);
		return sat<F>("XK_kana_closingbracket");
	}

	template<typename F = ::jlong>
	static auto XK_kana_comma() {
		static_assert(field_signatures[jField<F>("XK_kana_comma")] != -1);
		return sat<F>("XK_kana_comma");
	}

	template<typename F = ::jlong>
	static auto XK_kana_conjunctive() {
		static_assert(field_signatures[jField<F>("XK_kana_conjunctive")] != -1);
		return sat<F>("XK_kana_conjunctive");
	}

	template<typename F = ::jlong>
	static auto XK_kana_e() {
		static_assert(field_signatures[jField<F>("XK_kana_e")] != -1);
		return sat<F>("XK_kana_e");
	}

	template<typename F = ::jlong>
	static auto XK_kana_fullstop() {
		static_assert(field_signatures[jField<F>("XK_kana_fullstop")] != -1);
		return sat<F>("XK_kana_fullstop");
	}

	template<typename F = ::jlong>
	static auto XK_kana_i() {
		static_assert(field_signatures[jField<F>("XK_kana_i")] != -1);
		return sat<F>("XK_kana_i");
	}

	template<typename F = ::jlong>
	static auto XK_kana_middledot() {
		static_assert(field_signatures[jField<F>("XK_kana_middledot")] != -1);
		return sat<F>("XK_kana_middledot");
	}

	template<typename F = ::jlong>
	static auto XK_kana_o() {
		static_assert(field_signatures[jField<F>("XK_kana_o")] != -1);
		return sat<F>("XK_kana_o");
	}

	template<typename F = ::jlong>
	static auto XK_kana_openingbracket() {
		static_assert(field_signatures[jField<F>("XK_kana_openingbracket")] != -1);
		return sat<F>("XK_kana_openingbracket");
	}

	template<typename F = ::jlong>
	static auto XK_kana_switch() {
		static_assert(field_signatures[jField<F>("XK_kana_switch")] != -1);
		return sat<F>("XK_kana_switch");
	}

	template<typename F = ::jlong>
	static auto XK_kana_tsu() {
		static_assert(field_signatures[jField<F>("XK_kana_tsu")] != -1);
		return sat<F>("XK_kana_tsu");
	}

	template<typename F = ::jlong>
	static auto XK_kana_tu() {
		static_assert(field_signatures[jField<F>("XK_kana_tu")] != -1);
		return sat<F>("XK_kana_tu");
	}

	template<typename F = ::jlong>
	static auto XK_kana_u() {
		static_assert(field_signatures[jField<F>("XK_kana_u")] != -1);
		return sat<F>("XK_kana_u");
	}

	template<typename F = ::jlong>
	static auto XK_kana_ya() {
		static_assert(field_signatures[jField<F>("XK_kana_ya")] != -1);
		return sat<F>("XK_kana_ya");
	}

	template<typename F = ::jlong>
	static auto XK_kana_yo() {
		static_assert(field_signatures[jField<F>("XK_kana_yo")] != -1);
		return sat<F>("XK_kana_yo");
	}

	template<typename F = ::jlong>
	static auto XK_kana_yu() {
		static_assert(field_signatures[jField<F>("XK_kana_yu")] != -1);
		return sat<F>("XK_kana_yu");
	}

	template<typename F = ::jlong>
	static auto XK_kappa() {
		static_assert(field_signatures[jField<F>("XK_kappa")] != -1);
		return sat<F>("XK_kappa");
	}

	template<typename F = ::jlong>
	static auto XK_kcedilla() {
		static_assert(field_signatures[jField<F>("XK_kcedilla")] != -1);
		return sat<F>("XK_kcedilla");
	}

	template<typename F = ::jlong>
	static auto XK_kra() {
		static_assert(field_signatures[jField<F>("XK_kra")] != -1);
		return sat<F>("XK_kra");
	}

	template<typename F = ::jlong>
	static auto XK_l() {
		static_assert(field_signatures[jField<F>("XK_l")] != -1);
		return sat<F>("XK_l");
	}

	template<typename F = ::jlong>
	static auto XK_lacute() {
		static_assert(field_signatures[jField<F>("XK_lacute")] != -1);
		return sat<F>("XK_lacute");
	}

	template<typename F = ::jlong>
	static auto XK_latincross() {
		static_assert(field_signatures[jField<F>("XK_latincross")] != -1);
		return sat<F>("XK_latincross");
	}

	template<typename F = ::jlong>
	static auto XK_lcaron() {
		static_assert(field_signatures[jField<F>("XK_lcaron")] != -1);
		return sat<F>("XK_lcaron");
	}

	template<typename F = ::jlong>
	static auto XK_lcedilla() {
		static_assert(field_signatures[jField<F>("XK_lcedilla")] != -1);
		return sat<F>("XK_lcedilla");
	}

	template<typename F = ::jlong>
	static auto XK_leftanglebracket() {
		static_assert(field_signatures[jField<F>("XK_leftanglebracket")] != -1);
		return sat<F>("XK_leftanglebracket");
	}

	template<typename F = ::jlong>
	static auto XK_leftarrow() {
		static_assert(field_signatures[jField<F>("XK_leftarrow")] != -1);
		return sat<F>("XK_leftarrow");
	}

	template<typename F = ::jlong>
	static auto XK_leftcaret() {
		static_assert(field_signatures[jField<F>("XK_leftcaret")] != -1);
		return sat<F>("XK_leftcaret");
	}

	template<typename F = ::jlong>
	static auto XK_leftdoublequotemark() {
		static_assert(field_signatures[jField<F>("XK_leftdoublequotemark")] != -1);
		return sat<F>("XK_leftdoublequotemark");
	}

	template<typename F = ::jlong>
	static auto XK_leftmiddlecurlybrace() {
		static_assert(field_signatures[jField<F>("XK_leftmiddlecurlybrace")] != -1);
		return sat<F>("XK_leftmiddlecurlybrace");
	}

	template<typename F = ::jlong>
	static auto XK_leftopentriangle() {
		static_assert(field_signatures[jField<F>("XK_leftopentriangle")] != -1);
		return sat<F>("XK_leftopentriangle");
	}

	template<typename F = ::jlong>
	static auto XK_leftpointer() {
		static_assert(field_signatures[jField<F>("XK_leftpointer")] != -1);
		return sat<F>("XK_leftpointer");
	}

	template<typename F = ::jlong>
	static auto XK_leftradical() {
		static_assert(field_signatures[jField<F>("XK_leftradical")] != -1);
		return sat<F>("XK_leftradical");
	}

	template<typename F = ::jlong>
	static auto XK_leftshoe() {
		static_assert(field_signatures[jField<F>("XK_leftshoe")] != -1);
		return sat<F>("XK_leftshoe");
	}

	template<typename F = ::jlong>
	static auto XK_leftsinglequotemark() {
		static_assert(field_signatures[jField<F>("XK_leftsinglequotemark")] != -1);
		return sat<F>("XK_leftsinglequotemark");
	}

	template<typename F = ::jlong>
	static auto XK_leftt() {
		static_assert(field_signatures[jField<F>("XK_leftt")] != -1);
		return sat<F>("XK_leftt");
	}

	template<typename F = ::jlong>
	static auto XK_lefttack() {
		static_assert(field_signatures[jField<F>("XK_lefttack")] != -1);
		return sat<F>("XK_lefttack");
	}

	template<typename F = ::jlong>
	static auto XK_less() {
		static_assert(field_signatures[jField<F>("XK_less")] != -1);
		return sat<F>("XK_less");
	}

	template<typename F = ::jlong>
	static auto XK_lessthanequal() {
		static_assert(field_signatures[jField<F>("XK_lessthanequal")] != -1);
		return sat<F>("XK_lessthanequal");
	}

	template<typename F = ::jlong>
	static auto XK_lf() {
		static_assert(field_signatures[jField<F>("XK_lf")] != -1);
		return sat<F>("XK_lf");
	}

	template<typename F = ::jlong>
	static auto XK_logicaland() {
		static_assert(field_signatures[jField<F>("XK_logicaland")] != -1);
		return sat<F>("XK_logicaland");
	}

	template<typename F = ::jlong>
	static auto XK_logicalor() {
		static_assert(field_signatures[jField<F>("XK_logicalor")] != -1);
		return sat<F>("XK_logicalor");
	}

	template<typename F = ::jlong>
	static auto XK_lowleftcorner() {
		static_assert(field_signatures[jField<F>("XK_lowleftcorner")] != -1);
		return sat<F>("XK_lowleftcorner");
	}

	template<typename F = ::jlong>
	static auto XK_lowrightcorner() {
		static_assert(field_signatures[jField<F>("XK_lowrightcorner")] != -1);
		return sat<F>("XK_lowrightcorner");
	}

	template<typename F = ::jlong>
	static auto XK_lstroke() {
		static_assert(field_signatures[jField<F>("XK_lstroke")] != -1);
		return sat<F>("XK_lstroke");
	}

	template<typename F = ::jlong>
	static auto XK_m() {
		static_assert(field_signatures[jField<F>("XK_m")] != -1);
		return sat<F>("XK_m");
	}

	template<typename F = ::jlong>
	static auto XK_macron() {
		static_assert(field_signatures[jField<F>("XK_macron")] != -1);
		return sat<F>("XK_macron");
	}

	template<typename F = ::jlong>
	static auto XK_malesymbol() {
		static_assert(field_signatures[jField<F>("XK_malesymbol")] != -1);
		return sat<F>("XK_malesymbol");
	}

	template<typename F = ::jlong>
	static auto XK_maltesecross() {
		static_assert(field_signatures[jField<F>("XK_maltesecross")] != -1);
		return sat<F>("XK_maltesecross");
	}

	template<typename F = ::jlong>
	static auto XK_marker() {
		static_assert(field_signatures[jField<F>("XK_marker")] != -1);
		return sat<F>("XK_marker");
	}

	template<typename F = ::jlong>
	static auto XK_masculine() {
		static_assert(field_signatures[jField<F>("XK_masculine")] != -1);
		return sat<F>("XK_masculine");
	}

	template<typename F = ::jlong>
	static auto XK_minus() {
		static_assert(field_signatures[jField<F>("XK_minus")] != -1);
		return sat<F>("XK_minus");
	}

	template<typename F = ::jlong>
	static auto XK_minutes() {
		static_assert(field_signatures[jField<F>("XK_minutes")] != -1);
		return sat<F>("XK_minutes");
	}

	template<typename F = ::jlong>
	static auto XK_mu() {
		static_assert(field_signatures[jField<F>("XK_mu")] != -1);
		return sat<F>("XK_mu");
	}

	template<typename F = ::jlong>
	static auto XK_multiply() {
		static_assert(field_signatures[jField<F>("XK_multiply")] != -1);
		return sat<F>("XK_multiply");
	}

	template<typename F = ::jlong>
	static auto XK_musicalflat() {
		static_assert(field_signatures[jField<F>("XK_musicalflat")] != -1);
		return sat<F>("XK_musicalflat");
	}

	template<typename F = ::jlong>
	static auto XK_musicalsharp() {
		static_assert(field_signatures[jField<F>("XK_musicalsharp")] != -1);
		return sat<F>("XK_musicalsharp");
	}

	template<typename F = ::jlong>
	static auto XK_n() {
		static_assert(field_signatures[jField<F>("XK_n")] != -1);
		return sat<F>("XK_n");
	}

	template<typename F = ::jlong>
	static auto XK_nabla() {
		static_assert(field_signatures[jField<F>("XK_nabla")] != -1);
		return sat<F>("XK_nabla");
	}

	template<typename F = ::jlong>
	static auto XK_nacute() {
		static_assert(field_signatures[jField<F>("XK_nacute")] != -1);
		return sat<F>("XK_nacute");
	}

	template<typename F = ::jlong>
	static auto XK_ncaron() {
		static_assert(field_signatures[jField<F>("XK_ncaron")] != -1);
		return sat<F>("XK_ncaron");
	}

	template<typename F = ::jlong>
	static auto XK_ncedilla() {
		static_assert(field_signatures[jField<F>("XK_ncedilla")] != -1);
		return sat<F>("XK_ncedilla");
	}

	template<typename F = ::jlong>
	static auto XK_nl() {
		static_assert(field_signatures[jField<F>("XK_nl")] != -1);
		return sat<F>("XK_nl");
	}

	template<typename F = ::jlong>
	static auto XK_nobreakspace() {
		static_assert(field_signatures[jField<F>("XK_nobreakspace")] != -1);
		return sat<F>("XK_nobreakspace");
	}

	template<typename F = ::jlong>
	static auto XK_notequal() {
		static_assert(field_signatures[jField<F>("XK_notequal")] != -1);
		return sat<F>("XK_notequal");
	}

	template<typename F = ::jlong>
	static auto XK_notsign() {
		static_assert(field_signatures[jField<F>("XK_notsign")] != -1);
		return sat<F>("XK_notsign");
	}

	template<typename F = ::jlong>
	static auto XK_ntilde() {
		static_assert(field_signatures[jField<F>("XK_ntilde")] != -1);
		return sat<F>("XK_ntilde");
	}

	template<typename F = ::jlong>
	static auto XK_numbersign() {
		static_assert(field_signatures[jField<F>("XK_numbersign")] != -1);
		return sat<F>("XK_numbersign");
	}

	template<typename F = ::jlong>
	static auto XK_numerosign() {
		static_assert(field_signatures[jField<F>("XK_numerosign")] != -1);
		return sat<F>("XK_numerosign");
	}

	template<typename F = ::jlong>
	static auto XK_o() {
		static_assert(field_signatures[jField<F>("XK_o")] != -1);
		return sat<F>("XK_o");
	}

	template<typename F = ::jlong>
	static auto XK_oacute() {
		static_assert(field_signatures[jField<F>("XK_oacute")] != -1);
		return sat<F>("XK_oacute");
	}

	template<typename F = ::jlong>
	static auto XK_ocircumflex() {
		static_assert(field_signatures[jField<F>("XK_ocircumflex")] != -1);
		return sat<F>("XK_ocircumflex");
	}

	template<typename F = ::jlong>
	static auto XK_odiaeresis() {
		static_assert(field_signatures[jField<F>("XK_odiaeresis")] != -1);
		return sat<F>("XK_odiaeresis");
	}

	template<typename F = ::jlong>
	static auto XK_odoubleacute() {
		static_assert(field_signatures[jField<F>("XK_odoubleacute")] != -1);
		return sat<F>("XK_odoubleacute");
	}

	template<typename F = ::jlong>
	static auto XK_oe() {
		static_assert(field_signatures[jField<F>("XK_oe")] != -1);
		return sat<F>("XK_oe");
	}

	template<typename F = ::jlong>
	static auto XK_ogonek() {
		static_assert(field_signatures[jField<F>("XK_ogonek")] != -1);
		return sat<F>("XK_ogonek");
	}

	template<typename F = ::jlong>
	static auto XK_ograve() {
		static_assert(field_signatures[jField<F>("XK_ograve")] != -1);
		return sat<F>("XK_ograve");
	}

	template<typename F = ::jlong>
	static auto XK_omacron() {
		static_assert(field_signatures[jField<F>("XK_omacron")] != -1);
		return sat<F>("XK_omacron");
	}

	template<typename F = ::jlong>
	static auto XK_oneeighth() {
		static_assert(field_signatures[jField<F>("XK_oneeighth")] != -1);
		return sat<F>("XK_oneeighth");
	}

	template<typename F = ::jlong>
	static auto XK_onefifth() {
		static_assert(field_signatures[jField<F>("XK_onefifth")] != -1);
		return sat<F>("XK_onefifth");
	}

	template<typename F = ::jlong>
	static auto XK_onehalf() {
		static_assert(field_signatures[jField<F>("XK_onehalf")] != -1);
		return sat<F>("XK_onehalf");
	}

	template<typename F = ::jlong>
	static auto XK_onequarter() {
		static_assert(field_signatures[jField<F>("XK_onequarter")] != -1);
		return sat<F>("XK_onequarter");
	}

	template<typename F = ::jlong>
	static auto XK_onesixth() {
		static_assert(field_signatures[jField<F>("XK_onesixth")] != -1);
		return sat<F>("XK_onesixth");
	}

	template<typename F = ::jlong>
	static auto XK_onesuperior() {
		static_assert(field_signatures[jField<F>("XK_onesuperior")] != -1);
		return sat<F>("XK_onesuperior");
	}

	template<typename F = ::jlong>
	static auto XK_onethird() {
		static_assert(field_signatures[jField<F>("XK_onethird")] != -1);
		return sat<F>("XK_onethird");
	}

	template<typename F = ::jlong>
	static auto XK_openrectbullet() {
		static_assert(field_signatures[jField<F>("XK_openrectbullet")] != -1);
		return sat<F>("XK_openrectbullet");
	}

	template<typename F = ::jlong>
	static auto XK_openstar() {
		static_assert(field_signatures[jField<F>("XK_openstar")] != -1);
		return sat<F>("XK_openstar");
	}

	template<typename F = ::jlong>
	static auto XK_opentribulletdown() {
		static_assert(field_signatures[jField<F>("XK_opentribulletdown")] != -1);
		return sat<F>("XK_opentribulletdown");
	}

	template<typename F = ::jlong>
	static auto XK_opentribulletup() {
		static_assert(field_signatures[jField<F>("XK_opentribulletup")] != -1);
		return sat<F>("XK_opentribulletup");
	}

	template<typename F = ::jlong>
	static auto XK_ordfeminine() {
		static_assert(field_signatures[jField<F>("XK_ordfeminine")] != -1);
		return sat<F>("XK_ordfeminine");
	}

	template<typename F = ::jlong>
	static auto XK_oslash() {
		static_assert(field_signatures[jField<F>("XK_oslash")] != -1);
		return sat<F>("XK_oslash");
	}

	template<typename F = ::jlong>
	static auto XK_otilde() {
		static_assert(field_signatures[jField<F>("XK_otilde")] != -1);
		return sat<F>("XK_otilde");
	}

	template<typename F = ::jlong>
	static auto XK_overbar() {
		static_assert(field_signatures[jField<F>("XK_overbar")] != -1);
		return sat<F>("XK_overbar");
	}

	template<typename F = ::jlong>
	static auto XK_overline() {
		static_assert(field_signatures[jField<F>("XK_overline")] != -1);
		return sat<F>("XK_overline");
	}

	template<typename F = ::jlong>
	static auto XK_p() {
		static_assert(field_signatures[jField<F>("XK_p")] != -1);
		return sat<F>("XK_p");
	}

	template<typename F = ::jlong>
	static auto XK_paragraph() {
		static_assert(field_signatures[jField<F>("XK_paragraph")] != -1);
		return sat<F>("XK_paragraph");
	}

	template<typename F = ::jlong>
	static auto XK_parenleft() {
		static_assert(field_signatures[jField<F>("XK_parenleft")] != -1);
		return sat<F>("XK_parenleft");
	}

	template<typename F = ::jlong>
	static auto XK_parenright() {
		static_assert(field_signatures[jField<F>("XK_parenright")] != -1);
		return sat<F>("XK_parenright");
	}

	template<typename F = ::jlong>
	static auto XK_partialderivative() {
		static_assert(field_signatures[jField<F>("XK_partialderivative")] != -1);
		return sat<F>("XK_partialderivative");
	}

	template<typename F = ::jlong>
	static auto XK_percent() {
		static_assert(field_signatures[jField<F>("XK_percent")] != -1);
		return sat<F>("XK_percent");
	}

	template<typename F = ::jlong>
	static auto XK_period() {
		static_assert(field_signatures[jField<F>("XK_period")] != -1);
		return sat<F>("XK_period");
	}

	template<typename F = ::jlong>
	static auto XK_periodcentered() {
		static_assert(field_signatures[jField<F>("XK_periodcentered")] != -1);
		return sat<F>("XK_periodcentered");
	}

	template<typename F = ::jlong>
	static auto XK_phonographcopyright() {
		static_assert(field_signatures[jField<F>("XK_phonographcopyright")] != -1);
		return sat<F>("XK_phonographcopyright");
	}

	template<typename F = ::jlong>
	static auto XK_plus() {
		static_assert(field_signatures[jField<F>("XK_plus")] != -1);
		return sat<F>("XK_plus");
	}

	template<typename F = ::jlong>
	static auto XK_plusminus() {
		static_assert(field_signatures[jField<F>("XK_plusminus")] != -1);
		return sat<F>("XK_plusminus");
	}

	template<typename F = ::jlong>
	static auto XK_prescription() {
		static_assert(field_signatures[jField<F>("XK_prescription")] != -1);
		return sat<F>("XK_prescription");
	}

	template<typename F = ::jlong>
	static auto XK_prolongedsound() {
		static_assert(field_signatures[jField<F>("XK_prolongedsound")] != -1);
		return sat<F>("XK_prolongedsound");
	}

	template<typename F = ::jlong>
	static auto XK_punctspace() {
		static_assert(field_signatures[jField<F>("XK_punctspace")] != -1);
		return sat<F>("XK_punctspace");
	}

	template<typename F = ::jlong>
	static auto XK_q() {
		static_assert(field_signatures[jField<F>("XK_q")] != -1);
		return sat<F>("XK_q");
	}

	template<typename F = ::jlong>
	static auto XK_quad() {
		static_assert(field_signatures[jField<F>("XK_quad")] != -1);
		return sat<F>("XK_quad");
	}

	template<typename F = ::jlong>
	static auto XK_question() {
		static_assert(field_signatures[jField<F>("XK_question")] != -1);
		return sat<F>("XK_question");
	}

	template<typename F = ::jlong>
	static auto XK_questiondown() {
		static_assert(field_signatures[jField<F>("XK_questiondown")] != -1);
		return sat<F>("XK_questiondown");
	}

	template<typename F = ::jlong>
	static auto XK_quotedbl() {
		static_assert(field_signatures[jField<F>("XK_quotedbl")] != -1);
		return sat<F>("XK_quotedbl");
	}

	template<typename F = ::jlong>
	static auto XK_quoteleft() {
		static_assert(field_signatures[jField<F>("XK_quoteleft")] != -1);
		return sat<F>("XK_quoteleft");
	}

	template<typename F = ::jlong>
	static auto XK_quoteright() {
		static_assert(field_signatures[jField<F>("XK_quoteright")] != -1);
		return sat<F>("XK_quoteright");
	}

	template<typename F = ::jlong>
	static auto XK_r() {
		static_assert(field_signatures[jField<F>("XK_r")] != -1);
		return sat<F>("XK_r");
	}

	template<typename F = ::jlong>
	static auto XK_racute() {
		static_assert(field_signatures[jField<F>("XK_racute")] != -1);
		return sat<F>("XK_racute");
	}

	template<typename F = ::jlong>
	static auto XK_radical() {
		static_assert(field_signatures[jField<F>("XK_radical")] != -1);
		return sat<F>("XK_radical");
	}

	template<typename F = ::jlong>
	static auto XK_rcaron() {
		static_assert(field_signatures[jField<F>("XK_rcaron")] != -1);
		return sat<F>("XK_rcaron");
	}

	template<typename F = ::jlong>
	static auto XK_rcedilla() {
		static_assert(field_signatures[jField<F>("XK_rcedilla")] != -1);
		return sat<F>("XK_rcedilla");
	}

	template<typename F = ::jlong>
	static auto XK_registered() {
		static_assert(field_signatures[jField<F>("XK_registered")] != -1);
		return sat<F>("XK_registered");
	}

	template<typename F = ::jlong>
	static auto XK_rightanglebracket() {
		static_assert(field_signatures[jField<F>("XK_rightanglebracket")] != -1);
		return sat<F>("XK_rightanglebracket");
	}

	template<typename F = ::jlong>
	static auto XK_rightarrow() {
		static_assert(field_signatures[jField<F>("XK_rightarrow")] != -1);
		return sat<F>("XK_rightarrow");
	}

	template<typename F = ::jlong>
	static auto XK_rightcaret() {
		static_assert(field_signatures[jField<F>("XK_rightcaret")] != -1);
		return sat<F>("XK_rightcaret");
	}

	template<typename F = ::jlong>
	static auto XK_rightdoublequotemark() {
		static_assert(field_signatures[jField<F>("XK_rightdoublequotemark")] != -1);
		return sat<F>("XK_rightdoublequotemark");
	}

	template<typename F = ::jlong>
	static auto XK_rightmiddlecurlybrace() {
		static_assert(field_signatures[jField<F>("XK_rightmiddlecurlybrace")] != -1);
		return sat<F>("XK_rightmiddlecurlybrace");
	}

	template<typename F = ::jlong>
	static auto XK_rightmiddlesummation() {
		static_assert(field_signatures[jField<F>("XK_rightmiddlesummation")] != -1);
		return sat<F>("XK_rightmiddlesummation");
	}

	template<typename F = ::jlong>
	static auto XK_rightopentriangle() {
		static_assert(field_signatures[jField<F>("XK_rightopentriangle")] != -1);
		return sat<F>("XK_rightopentriangle");
	}

	template<typename F = ::jlong>
	static auto XK_rightpointer() {
		static_assert(field_signatures[jField<F>("XK_rightpointer")] != -1);
		return sat<F>("XK_rightpointer");
	}

	template<typename F = ::jlong>
	static auto XK_rightshoe() {
		static_assert(field_signatures[jField<F>("XK_rightshoe")] != -1);
		return sat<F>("XK_rightshoe");
	}

	template<typename F = ::jlong>
	static auto XK_rightsinglequotemark() {
		static_assert(field_signatures[jField<F>("XK_rightsinglequotemark")] != -1);
		return sat<F>("XK_rightsinglequotemark");
	}

	template<typename F = ::jlong>
	static auto XK_rightt() {
		static_assert(field_signatures[jField<F>("XK_rightt")] != -1);
		return sat<F>("XK_rightt");
	}

	template<typename F = ::jlong>
	static auto XK_righttack() {
		static_assert(field_signatures[jField<F>("XK_righttack")] != -1);
		return sat<F>("XK_righttack");
	}

	template<typename F = ::jlong>
	static auto XK_s() {
		static_assert(field_signatures[jField<F>("XK_s")] != -1);
		return sat<F>("XK_s");
	}

	template<typename F = ::jlong>
	static auto XK_sacute() {
		static_assert(field_signatures[jField<F>("XK_sacute")] != -1);
		return sat<F>("XK_sacute");
	}

	template<typename F = ::jlong>
	static auto XK_scaron() {
		static_assert(field_signatures[jField<F>("XK_scaron")] != -1);
		return sat<F>("XK_scaron");
	}

	template<typename F = ::jlong>
	static auto XK_scedilla() {
		static_assert(field_signatures[jField<F>("XK_scedilla")] != -1);
		return sat<F>("XK_scedilla");
	}

	template<typename F = ::jlong>
	static auto XK_scircumflex() {
		static_assert(field_signatures[jField<F>("XK_scircumflex")] != -1);
		return sat<F>("XK_scircumflex");
	}

	template<typename F = ::jlong>
	static auto XK_script_switch() {
		static_assert(field_signatures[jField<F>("XK_script_switch")] != -1);
		return sat<F>("XK_script_switch");
	}

	template<typename F = ::jlong>
	static auto XK_seconds() {
		static_assert(field_signatures[jField<F>("XK_seconds")] != -1);
		return sat<F>("XK_seconds");
	}

	template<typename F = ::jlong>
	static auto XK_section() {
		static_assert(field_signatures[jField<F>("XK_section")] != -1);
		return sat<F>("XK_section");
	}

	template<typename F = ::jlong>
	static auto XK_semicolon() {
		static_assert(field_signatures[jField<F>("XK_semicolon")] != -1);
		return sat<F>("XK_semicolon");
	}

	template<typename F = ::jlong>
	static auto XK_semivoicedsound() {
		static_assert(field_signatures[jField<F>("XK_semivoicedsound")] != -1);
		return sat<F>("XK_semivoicedsound");
	}

	template<typename F = ::jlong>
	static auto XK_seveneighths() {
		static_assert(field_signatures[jField<F>("XK_seveneighths")] != -1);
		return sat<F>("XK_seveneighths");
	}

	template<typename F = ::jlong>
	static auto XK_signaturemark() {
		static_assert(field_signatures[jField<F>("XK_signaturemark")] != -1);
		return sat<F>("XK_signaturemark");
	}

	template<typename F = ::jlong>
	static auto XK_signifblank() {
		static_assert(field_signatures[jField<F>("XK_signifblank")] != -1);
		return sat<F>("XK_signifblank");
	}

	template<typename F = ::jlong>
	static auto XK_similarequal() {
		static_assert(field_signatures[jField<F>("XK_similarequal")] != -1);
		return sat<F>("XK_similarequal");
	}

	template<typename F = ::jlong>
	static auto XK_singlelowquotemark() {
		static_assert(field_signatures[jField<F>("XK_singlelowquotemark")] != -1);
		return sat<F>("XK_singlelowquotemark");
	}

	template<typename F = ::jlong>
	static auto XK_slash() {
		static_assert(field_signatures[jField<F>("XK_slash")] != -1);
		return sat<F>("XK_slash");
	}

	template<typename F = ::jlong>
	static auto XK_soliddiamond() {
		static_assert(field_signatures[jField<F>("XK_soliddiamond")] != -1);
		return sat<F>("XK_soliddiamond");
	}

	template<typename F = ::jlong>
	static auto XK_space() {
		static_assert(field_signatures[jField<F>("XK_space")] != -1);
		return sat<F>("XK_space");
	}

	template<typename F = ::jlong>
	static auto XK_ssharp() {
		static_assert(field_signatures[jField<F>("XK_ssharp")] != -1);
		return sat<F>("XK_ssharp");
	}

	template<typename F = ::jlong>
	static auto XK_sterling() {
		static_assert(field_signatures[jField<F>("XK_sterling")] != -1);
		return sat<F>("XK_sterling");
	}

	template<typename F = ::jlong>
	static auto XK_t() {
		static_assert(field_signatures[jField<F>("XK_t")] != -1);
		return sat<F>("XK_t");
	}

	template<typename F = ::jlong>
	static auto XK_tcaron() {
		static_assert(field_signatures[jField<F>("XK_tcaron")] != -1);
		return sat<F>("XK_tcaron");
	}

	template<typename F = ::jlong>
	static auto XK_tcedilla() {
		static_assert(field_signatures[jField<F>("XK_tcedilla")] != -1);
		return sat<F>("XK_tcedilla");
	}

	template<typename F = ::jlong>
	static auto XK_telephone() {
		static_assert(field_signatures[jField<F>("XK_telephone")] != -1);
		return sat<F>("XK_telephone");
	}

	template<typename F = ::jlong>
	static auto XK_telephonerecorder() {
		static_assert(field_signatures[jField<F>("XK_telephonerecorder")] != -1);
		return sat<F>("XK_telephonerecorder");
	}

	template<typename F = ::jlong>
	static auto XK_therefore() {
		static_assert(field_signatures[jField<F>("XK_therefore")] != -1);
		return sat<F>("XK_therefore");
	}

	template<typename F = ::jlong>
	static auto XK_thinspace() {
		static_assert(field_signatures[jField<F>("XK_thinspace")] != -1);
		return sat<F>("XK_thinspace");
	}

	template<typename F = ::jlong>
	static auto XK_thorn() {
		static_assert(field_signatures[jField<F>("XK_thorn")] != -1);
		return sat<F>("XK_thorn");
	}

	template<typename F = ::jlong>
	static auto XK_threeeighths() {
		static_assert(field_signatures[jField<F>("XK_threeeighths")] != -1);
		return sat<F>("XK_threeeighths");
	}

	template<typename F = ::jlong>
	static auto XK_threefifths() {
		static_assert(field_signatures[jField<F>("XK_threefifths")] != -1);
		return sat<F>("XK_threefifths");
	}

	template<typename F = ::jlong>
	static auto XK_threequarters() {
		static_assert(field_signatures[jField<F>("XK_threequarters")] != -1);
		return sat<F>("XK_threequarters");
	}

	template<typename F = ::jlong>
	static auto XK_threesuperior() {
		static_assert(field_signatures[jField<F>("XK_threesuperior")] != -1);
		return sat<F>("XK_threesuperior");
	}

	template<typename F = ::jlong>
	static auto XK_topintegral() {
		static_assert(field_signatures[jField<F>("XK_topintegral")] != -1);
		return sat<F>("XK_topintegral");
	}

	template<typename F = ::jlong>
	static auto XK_topleftparens() {
		static_assert(field_signatures[jField<F>("XK_topleftparens")] != -1);
		return sat<F>("XK_topleftparens");
	}

	template<typename F = ::jlong>
	static auto XK_topleftradical() {
		static_assert(field_signatures[jField<F>("XK_topleftradical")] != -1);
		return sat<F>("XK_topleftradical");
	}

	template<typename F = ::jlong>
	static auto XK_topleftsqbracket() {
		static_assert(field_signatures[jField<F>("XK_topleftsqbracket")] != -1);
		return sat<F>("XK_topleftsqbracket");
	}

	template<typename F = ::jlong>
	static auto XK_topleftsummation() {
		static_assert(field_signatures[jField<F>("XK_topleftsummation")] != -1);
		return sat<F>("XK_topleftsummation");
	}

	template<typename F = ::jlong>
	static auto XK_toprightparens() {
		static_assert(field_signatures[jField<F>("XK_toprightparens")] != -1);
		return sat<F>("XK_toprightparens");
	}

	template<typename F = ::jlong>
	static auto XK_toprightsqbracket() {
		static_assert(field_signatures[jField<F>("XK_toprightsqbracket")] != -1);
		return sat<F>("XK_toprightsqbracket");
	}

	template<typename F = ::jlong>
	static auto XK_toprightsummation() {
		static_assert(field_signatures[jField<F>("XK_toprightsummation")] != -1);
		return sat<F>("XK_toprightsummation");
	}

	template<typename F = ::jlong>
	static auto XK_topt() {
		static_assert(field_signatures[jField<F>("XK_topt")] != -1);
		return sat<F>("XK_topt");
	}

	template<typename F = ::jlong>
	static auto XK_topvertsummationconnector() {
		static_assert(field_signatures[jField<F>("XK_topvertsummationconnector")] != -1);
		return sat<F>("XK_topvertsummationconnector");
	}

	template<typename F = ::jlong>
	static auto XK_trademark() {
		static_assert(field_signatures[jField<F>("XK_trademark")] != -1);
		return sat<F>("XK_trademark");
	}

	template<typename F = ::jlong>
	static auto XK_trademarkincircle() {
		static_assert(field_signatures[jField<F>("XK_trademarkincircle")] != -1);
		return sat<F>("XK_trademarkincircle");
	}

	template<typename F = ::jlong>
	static auto XK_tslash() {
		static_assert(field_signatures[jField<F>("XK_tslash")] != -1);
		return sat<F>("XK_tslash");
	}

	template<typename F = ::jlong>
	static auto XK_twofifths() {
		static_assert(field_signatures[jField<F>("XK_twofifths")] != -1);
		return sat<F>("XK_twofifths");
	}

	template<typename F = ::jlong>
	static auto XK_twosuperior() {
		static_assert(field_signatures[jField<F>("XK_twosuperior")] != -1);
		return sat<F>("XK_twosuperior");
	}

	template<typename F = ::jlong>
	static auto XK_twothirds() {
		static_assert(field_signatures[jField<F>("XK_twothirds")] != -1);
		return sat<F>("XK_twothirds");
	}

	template<typename F = ::jlong>
	static auto XK_u() {
		static_assert(field_signatures[jField<F>("XK_u")] != -1);
		return sat<F>("XK_u");
	}

	template<typename F = ::jlong>
	static auto XK_uacute() {
		static_assert(field_signatures[jField<F>("XK_uacute")] != -1);
		return sat<F>("XK_uacute");
	}

	template<typename F = ::jlong>
	static auto XK_ubreve() {
		static_assert(field_signatures[jField<F>("XK_ubreve")] != -1);
		return sat<F>("XK_ubreve");
	}

	template<typename F = ::jlong>
	static auto XK_ucircumflex() {
		static_assert(field_signatures[jField<F>("XK_ucircumflex")] != -1);
		return sat<F>("XK_ucircumflex");
	}

	template<typename F = ::jlong>
	static auto XK_udiaeresis() {
		static_assert(field_signatures[jField<F>("XK_udiaeresis")] != -1);
		return sat<F>("XK_udiaeresis");
	}

	template<typename F = ::jlong>
	static auto XK_udoubleacute() {
		static_assert(field_signatures[jField<F>("XK_udoubleacute")] != -1);
		return sat<F>("XK_udoubleacute");
	}

	template<typename F = ::jlong>
	static auto XK_ugrave() {
		static_assert(field_signatures[jField<F>("XK_ugrave")] != -1);
		return sat<F>("XK_ugrave");
	}

	template<typename F = ::jlong>
	static auto XK_umacron() {
		static_assert(field_signatures[jField<F>("XK_umacron")] != -1);
		return sat<F>("XK_umacron");
	}

	template<typename F = ::jlong>
	static auto XK_underbar() {
		static_assert(field_signatures[jField<F>("XK_underbar")] != -1);
		return sat<F>("XK_underbar");
	}

	template<typename F = ::jlong>
	static auto XK_underscore() {
		static_assert(field_signatures[jField<F>("XK_underscore")] != -1);
		return sat<F>("XK_underscore");
	}

	template<typename F = ::jlong>
	static auto XK_union() {
		static_assert(field_signatures[jField<F>("XK_union")] != -1);
		return sat<F>("XK_union");
	}

	template<typename F = ::jlong>
	static auto XK_uogonek() {
		static_assert(field_signatures[jField<F>("XK_uogonek")] != -1);
		return sat<F>("XK_uogonek");
	}

	template<typename F = ::jlong>
	static auto XK_uparrow() {
		static_assert(field_signatures[jField<F>("XK_uparrow")] != -1);
		return sat<F>("XK_uparrow");
	}

	template<typename F = ::jlong>
	static auto XK_upcaret() {
		static_assert(field_signatures[jField<F>("XK_upcaret")] != -1);
		return sat<F>("XK_upcaret");
	}

	template<typename F = ::jlong>
	static auto XK_upleftcorner() {
		static_assert(field_signatures[jField<F>("XK_upleftcorner")] != -1);
		return sat<F>("XK_upleftcorner");
	}

	template<typename F = ::jlong>
	static auto XK_uprightcorner() {
		static_assert(field_signatures[jField<F>("XK_uprightcorner")] != -1);
		return sat<F>("XK_uprightcorner");
	}

	template<typename F = ::jlong>
	static auto XK_upshoe() {
		static_assert(field_signatures[jField<F>("XK_upshoe")] != -1);
		return sat<F>("XK_upshoe");
	}

	template<typename F = ::jlong>
	static auto XK_upstile() {
		static_assert(field_signatures[jField<F>("XK_upstile")] != -1);
		return sat<F>("XK_upstile");
	}

	template<typename F = ::jlong>
	static auto XK_uptack() {
		static_assert(field_signatures[jField<F>("XK_uptack")] != -1);
		return sat<F>("XK_uptack");
	}

	template<typename F = ::jlong>
	static auto XK_uring() {
		static_assert(field_signatures[jField<F>("XK_uring")] != -1);
		return sat<F>("XK_uring");
	}

	template<typename F = ::jlong>
	static auto XK_utilde() {
		static_assert(field_signatures[jField<F>("XK_utilde")] != -1);
		return sat<F>("XK_utilde");
	}

	template<typename F = ::jlong>
	static auto XK_v() {
		static_assert(field_signatures[jField<F>("XK_v")] != -1);
		return sat<F>("XK_v");
	}

	template<typename F = ::jlong>
	static auto XK_variation() {
		static_assert(field_signatures[jField<F>("XK_variation")] != -1);
		return sat<F>("XK_variation");
	}

	template<typename F = ::jlong>
	static auto XK_vertbar() {
		static_assert(field_signatures[jField<F>("XK_vertbar")] != -1);
		return sat<F>("XK_vertbar");
	}

	template<typename F = ::jlong>
	static auto XK_vertconnector() {
		static_assert(field_signatures[jField<F>("XK_vertconnector")] != -1);
		return sat<F>("XK_vertconnector");
	}

	template<typename F = ::jlong>
	static auto XK_voicedsound() {
		static_assert(field_signatures[jField<F>("XK_voicedsound")] != -1);
		return sat<F>("XK_voicedsound");
	}

	template<typename F = ::jlong>
	static auto XK_vt() {
		static_assert(field_signatures[jField<F>("XK_vt")] != -1);
		return sat<F>("XK_vt");
	}

	template<typename F = ::jlong>
	static auto XK_w() {
		static_assert(field_signatures[jField<F>("XK_w")] != -1);
		return sat<F>("XK_w");
	}

	template<typename F = ::jlong>
	static auto XK_x() {
		static_assert(field_signatures[jField<F>("XK_x")] != -1);
		return sat<F>("XK_x");
	}

	template<typename F = ::jlong>
	static auto XK_y() {
		static_assert(field_signatures[jField<F>("XK_y")] != -1);
		return sat<F>("XK_y");
	}

	template<typename F = ::jlong>
	static auto XK_yacute() {
		static_assert(field_signatures[jField<F>("XK_yacute")] != -1);
		return sat<F>("XK_yacute");
	}

	template<typename F = ::jlong>
	static auto XK_ydiaeresis() {
		static_assert(field_signatures[jField<F>("XK_ydiaeresis")] != -1);
		return sat<F>("XK_ydiaeresis");
	}

	template<typename F = ::jlong>
	static auto XK_yen() {
		static_assert(field_signatures[jField<F>("XK_yen")] != -1);
		return sat<F>("XK_yen");
	}

	template<typename F = ::jlong>
	static auto XK_z() {
		static_assert(field_signatures[jField<F>("XK_z")] != -1);
		return sat<F>("XK_z");
	}

	template<typename F = ::jlong>
	static auto XK_zabovedot() {
		static_assert(field_signatures[jField<F>("XK_zabovedot")] != -1);
		return sat<F>("XK_zabovedot");
	}

	template<typename F = ::jlong>
	static auto XK_zacute() {
		static_assert(field_signatures[jField<F>("XK_zacute")] != -1);
		return sat<F>("XK_zacute");
	}

	template<typename F = ::jlong>
	static auto XK_zcaron() {
		static_assert(field_signatures[jField<F>("XK_zcaron")] != -1);
		return sat<F>("XK_zcaron");
	}

	template<typename F = ::jlong>
	static auto apXK_Copy() {
		static_assert(field_signatures[jField<F>("apXK_Copy")] != -1);
		return sat<F>("apXK_Copy");
	}

	template<typename F = ::jlong>
	static auto apXK_Cut() {
		static_assert(field_signatures[jField<F>("apXK_Cut")] != -1);
		return sat<F>("apXK_Cut");
	}

	template<typename F = ::jlong>
	static auto apXK_Paste() {
		static_assert(field_signatures[jField<F>("apXK_Paste")] != -1);
		return sat<F>("apXK_Paste");
	}

	template<typename F = ::jlong>
	static auto hpXK_BackTab() {
		static_assert(field_signatures[jField<F>("hpXK_BackTab")] != -1);
		return sat<F>("hpXK_BackTab");
	}

	template<typename F = ::jlong>
	static auto hpXK_ClearLine() {
		static_assert(field_signatures[jField<F>("hpXK_ClearLine")] != -1);
		return sat<F>("hpXK_ClearLine");
	}

	template<typename F = ::jlong>
	static auto hpXK_DeleteChar() {
		static_assert(field_signatures[jField<F>("hpXK_DeleteChar")] != -1);
		return sat<F>("hpXK_DeleteChar");
	}

	template<typename F = ::jlong>
	static auto hpXK_DeleteLine() {
		static_assert(field_signatures[jField<F>("hpXK_DeleteLine")] != -1);
		return sat<F>("hpXK_DeleteLine");
	}

	template<typename F = ::jlong>
	static auto hpXK_IO() {
		static_assert(field_signatures[jField<F>("hpXK_IO")] != -1);
		return sat<F>("hpXK_IO");
	}

	template<typename F = ::jlong>
	static auto hpXK_InsertChar() {
		static_assert(field_signatures[jField<F>("hpXK_InsertChar")] != -1);
		return sat<F>("hpXK_InsertChar");
	}

	template<typename F = ::jlong>
	static auto hpXK_InsertLine() {
		static_assert(field_signatures[jField<F>("hpXK_InsertLine")] != -1);
		return sat<F>("hpXK_InsertLine");
	}

	template<typename F = ::jlong>
	static auto hpXK_KP_BackTab() {
		static_assert(field_signatures[jField<F>("hpXK_KP_BackTab")] != -1);
		return sat<F>("hpXK_KP_BackTab");
	}

	template<typename F = ::jlong>
	static auto hpXK_Modelock1() {
		static_assert(field_signatures[jField<F>("hpXK_Modelock1")] != -1);
		return sat<F>("hpXK_Modelock1");
	}

	template<typename F = ::jlong>
	static auto hpXK_Modelock2() {
		static_assert(field_signatures[jField<F>("hpXK_Modelock2")] != -1);
		return sat<F>("hpXK_Modelock2");
	}

	template<typename F = ::jlong>
	static auto hpXK_Reset() {
		static_assert(field_signatures[jField<F>("hpXK_Reset")] != -1);
		return sat<F>("hpXK_Reset");
	}

	template<typename F = ::jlong>
	static auto hpXK_System() {
		static_assert(field_signatures[jField<F>("hpXK_System")] != -1);
		return sat<F>("hpXK_System");
	}

	template<typename F = ::jlong>
	static auto hpXK_User() {
		static_assert(field_signatures[jField<F>("hpXK_User")] != -1);
		return sat<F>("hpXK_User");
	}

	template<typename F = ::jlong>
	static auto hpXK_Ydiaeresis() {
		static_assert(field_signatures[jField<F>("hpXK_Ydiaeresis")] != -1);
		return sat<F>("hpXK_Ydiaeresis");
	}

	template<typename F = ::jlong>
	static auto hpXK_block() {
		static_assert(field_signatures[jField<F>("hpXK_block")] != -1);
		return sat<F>("hpXK_block");
	}

	template<typename F = ::jlong>
	static auto hpXK_guilder() {
		static_assert(field_signatures[jField<F>("hpXK_guilder")] != -1);
		return sat<F>("hpXK_guilder");
	}

	template<typename F = ::jlong>
	static auto hpXK_lira() {
		static_assert(field_signatures[jField<F>("hpXK_lira")] != -1);
		return sat<F>("hpXK_lira");
	}

	template<typename F = ::jlong>
	static auto hpXK_longminus() {
		static_assert(field_signatures[jField<F>("hpXK_longminus")] != -1);
		return sat<F>("hpXK_longminus");
	}

	template<typename F = ::jlong>
	static auto hpXK_mute_acute() {
		static_assert(field_signatures[jField<F>("hpXK_mute_acute")] != -1);
		return sat<F>("hpXK_mute_acute");
	}

	template<typename F = ::jlong>
	static auto hpXK_mute_asciicircum() {
		static_assert(field_signatures[jField<F>("hpXK_mute_asciicircum")] != -1);
		return sat<F>("hpXK_mute_asciicircum");
	}

	template<typename F = ::jlong>
	static auto hpXK_mute_asciitilde() {
		static_assert(field_signatures[jField<F>("hpXK_mute_asciitilde")] != -1);
		return sat<F>("hpXK_mute_asciitilde");
	}

	template<typename F = ::jlong>
	static auto hpXK_mute_diaeresis() {
		static_assert(field_signatures[jField<F>("hpXK_mute_diaeresis")] != -1);
		return sat<F>("hpXK_mute_diaeresis");
	}

	template<typename F = ::jlong>
	static auto hpXK_mute_grave() {
		static_assert(field_signatures[jField<F>("hpXK_mute_grave")] != -1);
		return sat<F>("hpXK_mute_grave");
	}

	template<typename F = ::jlong>
	static auto osfXK_Activate() {
		static_assert(field_signatures[jField<F>("osfXK_Activate")] != -1);
		return sat<F>("osfXK_Activate");
	}

	template<typename F = ::jlong>
	static auto osfXK_AddMode() {
		static_assert(field_signatures[jField<F>("osfXK_AddMode")] != -1);
		return sat<F>("osfXK_AddMode");
	}

	template<typename F = ::jlong>
	static auto osfXK_BackSpace() {
		static_assert(field_signatures[jField<F>("osfXK_BackSpace")] != -1);
		return sat<F>("osfXK_BackSpace");
	}

	template<typename F = ::jlong>
	static auto osfXK_BackTab() {
		static_assert(field_signatures[jField<F>("osfXK_BackTab")] != -1);
		return sat<F>("osfXK_BackTab");
	}

	template<typename F = ::jlong>
	static auto osfXK_BeginData() {
		static_assert(field_signatures[jField<F>("osfXK_BeginData")] != -1);
		return sat<F>("osfXK_BeginData");
	}

	template<typename F = ::jlong>
	static auto osfXK_BeginLine() {
		static_assert(field_signatures[jField<F>("osfXK_BeginLine")] != -1);
		return sat<F>("osfXK_BeginLine");
	}

	template<typename F = ::jlong>
	static auto osfXK_Cancel() {
		static_assert(field_signatures[jField<F>("osfXK_Cancel")] != -1);
		return sat<F>("osfXK_Cancel");
	}

	template<typename F = ::jlong>
	static auto osfXK_Clear() {
		static_assert(field_signatures[jField<F>("osfXK_Clear")] != -1);
		return sat<F>("osfXK_Clear");
	}

	template<typename F = ::jlong>
	static auto osfXK_Copy() {
		static_assert(field_signatures[jField<F>("osfXK_Copy")] != -1);
		return sat<F>("osfXK_Copy");
	}

	template<typename F = ::jlong>
	static auto osfXK_Cut() {
		static_assert(field_signatures[jField<F>("osfXK_Cut")] != -1);
		return sat<F>("osfXK_Cut");
	}

	template<typename F = ::jlong>
	static auto osfXK_Delete() {
		static_assert(field_signatures[jField<F>("osfXK_Delete")] != -1);
		return sat<F>("osfXK_Delete");
	}

	template<typename F = ::jlong>
	static auto osfXK_Down() {
		static_assert(field_signatures[jField<F>("osfXK_Down")] != -1);
		return sat<F>("osfXK_Down");
	}

	template<typename F = ::jlong>
	static auto osfXK_EndData() {
		static_assert(field_signatures[jField<F>("osfXK_EndData")] != -1);
		return sat<F>("osfXK_EndData");
	}

	template<typename F = ::jlong>
	static auto osfXK_EndLine() {
		static_assert(field_signatures[jField<F>("osfXK_EndLine")] != -1);
		return sat<F>("osfXK_EndLine");
	}

	template<typename F = ::jlong>
	static auto osfXK_Escape() {
		static_assert(field_signatures[jField<F>("osfXK_Escape")] != -1);
		return sat<F>("osfXK_Escape");
	}

	template<typename F = ::jlong>
	static auto osfXK_Help() {
		static_assert(field_signatures[jField<F>("osfXK_Help")] != -1);
		return sat<F>("osfXK_Help");
	}

	template<typename F = ::jlong>
	static auto osfXK_Insert() {
		static_assert(field_signatures[jField<F>("osfXK_Insert")] != -1);
		return sat<F>("osfXK_Insert");
	}

	template<typename F = ::jlong>
	static auto osfXK_Left() {
		static_assert(field_signatures[jField<F>("osfXK_Left")] != -1);
		return sat<F>("osfXK_Left");
	}

	template<typename F = ::jlong>
	static auto osfXK_Menu() {
		static_assert(field_signatures[jField<F>("osfXK_Menu")] != -1);
		return sat<F>("osfXK_Menu");
	}

	template<typename F = ::jlong>
	static auto osfXK_MenuBar() {
		static_assert(field_signatures[jField<F>("osfXK_MenuBar")] != -1);
		return sat<F>("osfXK_MenuBar");
	}

	template<typename F = ::jlong>
	static auto osfXK_Next() {
		static_assert(field_signatures[jField<F>("osfXK_Next")] != -1);
		return sat<F>("osfXK_Next");
	}

	template<typename F = ::jlong>
	static auto osfXK_NextField() {
		static_assert(field_signatures[jField<F>("osfXK_NextField")] != -1);
		return sat<F>("osfXK_NextField");
	}

	template<typename F = ::jlong>
	static auto osfXK_NextMenu() {
		static_assert(field_signatures[jField<F>("osfXK_NextMenu")] != -1);
		return sat<F>("osfXK_NextMenu");
	}

	template<typename F = ::jlong>
	static auto osfXK_PageDown() {
		static_assert(field_signatures[jField<F>("osfXK_PageDown")] != -1);
		return sat<F>("osfXK_PageDown");
	}

	template<typename F = ::jlong>
	static auto osfXK_PageLeft() {
		static_assert(field_signatures[jField<F>("osfXK_PageLeft")] != -1);
		return sat<F>("osfXK_PageLeft");
	}

	template<typename F = ::jlong>
	static auto osfXK_PageRight() {
		static_assert(field_signatures[jField<F>("osfXK_PageRight")] != -1);
		return sat<F>("osfXK_PageRight");
	}

	template<typename F = ::jlong>
	static auto osfXK_PageUp() {
		static_assert(field_signatures[jField<F>("osfXK_PageUp")] != -1);
		return sat<F>("osfXK_PageUp");
	}

	template<typename F = ::jlong>
	static auto osfXK_Paste() {
		static_assert(field_signatures[jField<F>("osfXK_Paste")] != -1);
		return sat<F>("osfXK_Paste");
	}

	template<typename F = ::jlong>
	static auto osfXK_PrevField() {
		static_assert(field_signatures[jField<F>("osfXK_PrevField")] != -1);
		return sat<F>("osfXK_PrevField");
	}

	template<typename F = ::jlong>
	static auto osfXK_PrevMenu() {
		static_assert(field_signatures[jField<F>("osfXK_PrevMenu")] != -1);
		return sat<F>("osfXK_PrevMenu");
	}

	template<typename F = ::jlong>
	static auto osfXK_PrimaryPaste() {
		static_assert(field_signatures[jField<F>("osfXK_PrimaryPaste")] != -1);
		return sat<F>("osfXK_PrimaryPaste");
	}

	template<typename F = ::jlong>
	static auto osfXK_Prior() {
		static_assert(field_signatures[jField<F>("osfXK_Prior")] != -1);
		return sat<F>("osfXK_Prior");
	}

	template<typename F = ::jlong>
	static auto osfXK_QuickPaste() {
		static_assert(field_signatures[jField<F>("osfXK_QuickPaste")] != -1);
		return sat<F>("osfXK_QuickPaste");
	}

	template<typename F = ::jlong>
	static auto osfXK_Right() {
		static_assert(field_signatures[jField<F>("osfXK_Right")] != -1);
		return sat<F>("osfXK_Right");
	}

	template<typename F = ::jlong>
	static auto osfXK_Select() {
		static_assert(field_signatures[jField<F>("osfXK_Select")] != -1);
		return sat<F>("osfXK_Select");
	}

	template<typename F = ::jlong>
	static auto osfXK_Undo() {
		static_assert(field_signatures[jField<F>("osfXK_Undo")] != -1);
		return sat<F>("osfXK_Undo");
	}

	template<typename F = ::jlong>
	static auto osfXK_Up() {
		static_assert(field_signatures[jField<F>("osfXK_Up")] != -1);
		return sat<F>("osfXK_Up");
	}

	constexpr static Enume method_signatures{
		cexprstr{"\0"}, //
	};

};

#endif
