#ifndef sun_awt_X11_XBaseWindow_HPP
#define sun_awt_X11_XBaseWindow_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::XBaseWindow : public jObject<::sun::awt::X11::XBaseWindow, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "XBaseWindow";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("BACKGROUND_PIXMAP"), //
		jField<::java::lang::String>("BACKING_STORE"), //
		jField<::java::lang::String>("BIT_GRAVITY"), //
		jField<::java::lang::String>("BORDER_PIXEL"), //
		jField<::java::lang::String>("BOUNDS"), //
		jField<::java::lang::String>("COLORMAP"), //
		jField<::java::lang::String>("DELAYED"), //
		jField<::java::lang::String>("DEPTH"), //
		jField<::java::lang::String>("EMBEDDED"), //
		jField<::java::lang::String>("EVENT_MASK"), //
		jField<::java::lang::String>("OVERRIDE_REDIRECT"), //
		jField<::java::lang::String>("PARENT"), //
		jField<::java::lang::String>("PARENT_WINDOW"), //
		jField<::java::lang::String>("SAVE_UNDER"), //
		jField<::java::lang::String>("VALUE_MASK"), //
		jField<::java::lang::String>("VISIBLE"), //
		jField<::java::lang::String>("VISUAL"), //
		jField<::java::lang::String>("VISUAL_CLASS"), //
	};

	template<typename F = ::java::lang::String>
	static auto BACKGROUND_PIXMAP() {
		static_assert(field_signatures[jField<F>("BACKGROUND_PIXMAP")] != -1);
		return sat<F>("BACKGROUND_PIXMAP");
	}

	template<typename F = ::java::lang::String>
	static auto BACKING_STORE() {
		static_assert(field_signatures[jField<F>("BACKING_STORE")] != -1);
		return sat<F>("BACKING_STORE");
	}

	template<typename F = ::java::lang::String>
	static auto BIT_GRAVITY() {
		static_assert(field_signatures[jField<F>("BIT_GRAVITY")] != -1);
		return sat<F>("BIT_GRAVITY");
	}

	template<typename F = ::java::lang::String>
	static auto BORDER_PIXEL() {
		static_assert(field_signatures[jField<F>("BORDER_PIXEL")] != -1);
		return sat<F>("BORDER_PIXEL");
	}

	template<typename F = ::java::lang::String>
	static auto BOUNDS() {
		static_assert(field_signatures[jField<F>("BOUNDS")] != -1);
		return sat<F>("BOUNDS");
	}

	template<typename F = ::java::lang::String>
	static auto COLORMAP() {
		static_assert(field_signatures[jField<F>("COLORMAP")] != -1);
		return sat<F>("COLORMAP");
	}

	template<typename F = ::java::lang::String>
	static auto DELAYED() {
		static_assert(field_signatures[jField<F>("DELAYED")] != -1);
		return sat<F>("DELAYED");
	}

	template<typename F = ::java::lang::String>
	static auto DEPTH() {
		static_assert(field_signatures[jField<F>("DEPTH")] != -1);
		return sat<F>("DEPTH");
	}

	template<typename F = ::java::lang::String>
	static auto EMBEDDED() {
		static_assert(field_signatures[jField<F>("EMBEDDED")] != -1);
		return sat<F>("EMBEDDED");
	}

	template<typename F = ::java::lang::String>
	static auto EVENT_MASK() {
		static_assert(field_signatures[jField<F>("EVENT_MASK")] != -1);
		return sat<F>("EVENT_MASK");
	}

	template<typename F = ::java::lang::String>
	static auto OVERRIDE_REDIRECT() {
		static_assert(field_signatures[jField<F>("OVERRIDE_REDIRECT")] != -1);
		return sat<F>("OVERRIDE_REDIRECT");
	}

	template<typename F = ::java::lang::String>
	static auto PARENT() {
		static_assert(field_signatures[jField<F>("PARENT")] != -1);
		return sat<F>("PARENT");
	}

	template<typename F = ::java::lang::String>
	static auto PARENT_WINDOW() {
		static_assert(field_signatures[jField<F>("PARENT_WINDOW")] != -1);
		return sat<F>("PARENT_WINDOW");
	}

	template<typename F = ::java::lang::String>
	static auto SAVE_UNDER() {
		static_assert(field_signatures[jField<F>("SAVE_UNDER")] != -1);
		return sat<F>("SAVE_UNDER");
	}

	template<typename F = ::java::lang::String>
	static auto VALUE_MASK() {
		static_assert(field_signatures[jField<F>("VALUE_MASK")] != -1);
		return sat<F>("VALUE_MASK");
	}

	template<typename F = ::java::lang::String>
	static auto VISIBLE() {
		static_assert(field_signatures[jField<F>("VISIBLE")] != -1);
		return sat<F>("VISIBLE");
	}

	template<typename F = ::java::lang::String>
	static auto VISUAL() {
		static_assert(field_signatures[jField<F>("VISUAL")] != -1);
		return sat<F>("VISUAL");
	}

	template<typename F = ::java::lang::String>
	static auto VISUAL_CLASS() {
		static_assert(field_signatures[jField<F>("VISUAL_CLASS")] != -1);
		return sat<F>("VISUAL_CLASS");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::sun::awt::X11::XCreateWindowParams)>(), //
		jMethod<::jboolean()>("checkInitialised"), //
		jMethod<::jboolean(::jint, ::jint)>("contains"), //
		jMethod<::jboolean(::jint, ::jint)>("containsGlobal"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("dispatchEvent"), //
		jMethod<::jint()>("getAbsoluteX"), //
		jMethod<::jint()>("getAbsoluteY"), //
		jMethod<::java::awt::Rectangle()>("getBounds"), //
		jMethod<::java::util::Set()>("getChildren"), //
		jMethod<::jlong()>("getContentWindow"), //
		jMethod<::sun::awt::X11::XBaseWindow()>("getContentXWindow"), //
		jMethod<::sun::awt::X11::XCreateWindowParams()>("getDelayedParams"), //
		jMethod<::sun::awt::X11::XSizeHints()>("getHints"), //
		jMethod<::sun::awt::X11::XBaseWindow()>("getParentWindow"), //
		jMethod<::java::awt::Dimension()>("getSize"), //
		jMethod<::sun::awt::X11::XWindowPeer()>("getToplevelXWindow"), //
		jMethod<::sun::awt::X11::XWMHints()>("getWMHints"), //
		jMethod<::jlong()>("getWindow"), //
		jMethod<::jboolean()>("grabInput"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleButtonPressRelease"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleClientMessage"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleConfigureNotifyEvent"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleCreateNotify"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleDestroyNotify"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleExposeEvent"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleKeyPress"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleKeyRelease"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleMapNotifyEvent"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleMotionNotify"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handlePropertyNotify"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleReparentNotifyEvent"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleUnmapNotifyEvent"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleVisibilityEvent"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleXCrossingEvent"), //
		jMethod<::jboolean()>("isMinSizeSet"), //
		jMethod<::jvoid(::jlong, ::jint, ::jint, ::jint, ::jint)>("setSizeHints"), //
		jMethod<::jvoid(::sun::awt::X11::XWMHints)>("setWMHints"), //
		jMethod<::jvoid()>("toFront"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jlong()>("xGetInputFocus"), //
		jMethod<::jvoid()>("xRequestFocus"), //
		jMethod<::jvoid(::jlong)>("xRequestFocus"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("xSetBounds"), //
		jMethod<::jvoid(::java::awt::Rectangle)>("xSetBounds"), //
		jMethod<::jvoid(::jboolean)>("xSetVisible"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto checkInitialised(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkInitialised")] != -1);
		return call<R>("checkInitialised", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto contains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("contains")] != -1);
		return call<R>("contains", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto containsGlobal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("containsGlobal")] != -1);
		return call<R>("containsGlobal", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispatchEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispatchEvent")] != -1);
		return call<R>("dispatchEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAbsoluteX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAbsoluteX")] != -1);
		return call<R>("getAbsoluteX", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAbsoluteY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAbsoluteY")] != -1);
		return call<R>("getAbsoluteY", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds")] != -1);
		return call<R>("getBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto getChildren(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChildren")] != -1);
		return call<R>("getChildren", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getContentWindow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContentWindow")] != -1);
		return call<R>("getContentWindow", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XBaseWindow, typename... Args>
	auto getContentXWindow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContentXWindow")] != -1);
		return call<R>("getContentXWindow", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XCreateWindowParams, typename... Args>
	auto getDelayedParams(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDelayedParams")] != -1);
		return call<R>("getDelayedParams", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XSizeHints, typename... Args>
	auto getHints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHints")] != -1);
		return call<R>("getHints", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XBaseWindow, typename... Args>
	auto getParentWindow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParentWindow")] != -1);
		return call<R>("getParentWindow", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return call<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XWindowPeer, typename... Args>
	auto getToplevelXWindow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getToplevelXWindow")] != -1);
		return call<R>("getToplevelXWindow", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XWMHints, typename... Args>
	auto getWMHints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWMHints")] != -1);
		return call<R>("getWMHints", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getWindow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWindow")] != -1);
		return call<R>("getWindow", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto grabInput(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("grabInput")] != -1);
		return call<R>("grabInput", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleButtonPressRelease(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleButtonPressRelease")] != -1);
		return call<R>("handleButtonPressRelease", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleClientMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleClientMessage")] != -1);
		return call<R>("handleClientMessage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleConfigureNotifyEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleConfigureNotifyEvent")] != -1);
		return call<R>("handleConfigureNotifyEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleCreateNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleCreateNotify")] != -1);
		return call<R>("handleCreateNotify", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleDestroyNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleDestroyNotify")] != -1);
		return call<R>("handleDestroyNotify", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleExposeEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleExposeEvent")] != -1);
		return call<R>("handleExposeEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleKeyPress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleKeyPress")] != -1);
		return call<R>("handleKeyPress", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleKeyRelease(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleKeyRelease")] != -1);
		return call<R>("handleKeyRelease", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleMapNotifyEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleMapNotifyEvent")] != -1);
		return call<R>("handleMapNotifyEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleMotionNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleMotionNotify")] != -1);
		return call<R>("handleMotionNotify", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handlePropertyNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handlePropertyNotify")] != -1);
		return call<R>("handlePropertyNotify", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleReparentNotifyEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleReparentNotifyEvent")] != -1);
		return call<R>("handleReparentNotifyEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleUnmapNotifyEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleUnmapNotifyEvent")] != -1);
		return call<R>("handleUnmapNotifyEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleVisibilityEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleVisibilityEvent")] != -1);
		return call<R>("handleVisibilityEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleXCrossingEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleXCrossingEvent")] != -1);
		return call<R>("handleXCrossingEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isMinSizeSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isMinSizeSet")] != -1);
		return call<R>("isMinSizeSet", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSizeHints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSizeHints")] != -1);
		return call<R>("setSizeHints", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWMHints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setWMHints")] != -1);
		return call<R>("setWMHints", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto toFront(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toFront")] != -1);
		return call<R>("toFront", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	static auto xGetInputFocus(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("xGetInputFocus")] != -1);
		return scall<R>("xGetInputFocus", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto xRequestFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("xRequestFocus")] != -1);
		return call<R>("xRequestFocus", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto xSetBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("xSetBounds")] != -1);
		return call<R>("xSetBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto xSetVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("xSetVisible")] != -1);
		return call<R>("xSetVisible", std::forward<Args>(args)...);
	}

};

#endif
