#ifndef sun_awt_X11_Visual_HPP
#define sun_awt_X11_Visual_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::Visual : public jObject<::sun::awt::X11::Visual, ::sun::awt::X11::XWrapperBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "Visual";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jlong)>(), //
		jMethod<::sun::awt::X11::XEvent()>("clone"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jint()>("getDataSize"), //
		jMethod<::jlong()>("getPData"), //
		jMethod<::jint()>("getSize"), //
		jMethod<::jint()>("get_bits_per_rgb"), //
		jMethod<::jlong()>("get_blue_mask"), //
		jMethod<::jint()>("get_class"), //
		jMethod<::jlong()>("get_ext_data"), //
		jMethod<::sun::awt::X11::XExtData(::jint)>("get_ext_data"), //
		jMethod<::jlong()>("get_green_mask"), //
		jMethod<::jint()>("get_map_entries"), //
		jMethod<::jlong()>("get_red_mask"), //
		jMethod<::jlong()>("get_visualid"), //
		jMethod<::jvoid(::jint)>("set_bits_per_rgb"), //
		jMethod<::jvoid(::jlong)>("set_blue_mask"), //
		jMethod<::jvoid(::jint)>("set_class"), //
		jMethod<::jvoid(::jlong)>("set_ext_data"), //
		jMethod<::jvoid(::jlong)>("set_green_mask"), //
		jMethod<::jvoid(::jint)>("set_map_entries"), //
		jMethod<::jvoid(::jlong)>("set_red_mask"), //
		jMethod<::jvoid(::jlong)>("set_visualid"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid()>("zero"), //
	};

	template<typename R = ::sun::awt::X11::XEvent, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDataSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDataSize")] != -1);
		return call<R>("getDataSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getPData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPData")] != -1);
		return call<R>("getPData", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getSize(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return scall<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_bits_per_rgb(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_bits_per_rgb")] != -1);
		return call<R>("get_bits_per_rgb", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_blue_mask(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_blue_mask")] != -1);
		return call<R>("get_blue_mask", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_class(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_class")] != -1);
		return call<R>("get_class", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_ext_data(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_ext_data")] != -1);
		return call<R>("get_ext_data", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_green_mask(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_green_mask")] != -1);
		return call<R>("get_green_mask", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_map_entries(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_map_entries")] != -1);
		return call<R>("get_map_entries", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_red_mask(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_red_mask")] != -1);
		return call<R>("get_red_mask", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_visualid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_visualid")] != -1);
		return call<R>("get_visualid", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_bits_per_rgb(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_bits_per_rgb")] != -1);
		return call<R>("set_bits_per_rgb", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_blue_mask(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_blue_mask")] != -1);
		return call<R>("set_blue_mask", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_class(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_class")] != -1);
		return call<R>("set_class", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_ext_data(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_ext_data")] != -1);
		return call<R>("set_ext_data", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_green_mask(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_green_mask")] != -1);
		return call<R>("set_green_mask", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_map_entries(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_map_entries")] != -1);
		return call<R>("set_map_entries", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_red_mask(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_red_mask")] != -1);
		return call<R>("set_red_mask", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_visualid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_visualid")] != -1);
		return call<R>("set_visualid", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto zero(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("zero")] != -1);
		return call<R>("zero", std::forward<Args>(args)...);
	}

};

#endif
