#ifndef sun_awt_X11_XEmbedCanvasPeer_HPP
#define sun_awt_X11_XEmbedCanvasPeer_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::XEmbedCanvasPeer : public jObject<::sun::awt::X11::XEmbedCanvasPeer, ::sun::awt::X11::XCanvasPeer> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "XEmbedCanvasPeer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("disableBackgroundErase"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("dispatchEvent"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::java::awt::GraphicsConfiguration(::java::awt::GraphicsConfiguration)>("getAppropriateGraphicsConfiguration"), //
		jMethod<::java::awt::Dimension()>("getMinimumSize"), //
		jMethod<::java::awt::Dimension()>("getPreferredSize"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleClientMessage"), //
		jMethod<::jvoid(::java::awt::AWTEvent)>("handleEvent"), //
		jMethod<::jboolean()>("isFocusable"), //
		jMethod<::jvoid(::sun::awt::ModalityEvent)>("modalityPopped"), //
		jMethod<::jvoid(::sun::awt::ModalityEvent)>("modalityPushed"), //
		jMethod<::jboolean(::java::awt::event::KeyEvent)>("postProcessKeyEvent"), //
		jMethod<::jboolean(::jlong, ::jint)>("processXEmbedDnDEvent"), //
		jMethod<::jvoid()>("removeXEmbedDropTarget"), //
		jMethod<::jvoid()>("setXEmbedDropTarget"), //
		jMethod<::jvoid(::java::awt::event::WindowEvent)>("windowGainedFocus"), //
		jMethod<::jvoid(::java::awt::event::WindowEvent)>("windowLostFocus"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto disableBackgroundErase(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("disableBackgroundErase")] != -1);
		return call<R>("disableBackgroundErase", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispatchEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispatchEvent")] != -1);
		return call<R>("dispatchEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::GraphicsConfiguration, typename... Args>
	auto getAppropriateGraphicsConfiguration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAppropriateGraphicsConfiguration")] != -1);
		return call<R>("getAppropriateGraphicsConfiguration", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinimumSize")] != -1);
		return call<R>("getMinimumSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreferredSize")] != -1);
		return call<R>("getPreferredSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleClientMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleClientMessage")] != -1);
		return call<R>("handleClientMessage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleEvent")] != -1);
		return call<R>("handleEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFocusable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFocusable")] != -1);
		return call<R>("isFocusable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto modalityPopped(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("modalityPopped")] != -1);
		return call<R>("modalityPopped", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto modalityPushed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("modalityPushed")] != -1);
		return call<R>("modalityPushed", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto postProcessKeyEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("postProcessKeyEvent")] != -1);
		return call<R>("postProcessKeyEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto processXEmbedDnDEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("processXEmbedDnDEvent")] != -1);
		return call<R>("processXEmbedDnDEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeXEmbedDropTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeXEmbedDropTarget")] != -1);
		return call<R>("removeXEmbedDropTarget", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setXEmbedDropTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setXEmbedDropTarget")] != -1);
		return call<R>("setXEmbedDropTarget", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto windowGainedFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("windowGainedFocus")] != -1);
		return call<R>("windowGainedFocus", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto windowLostFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("windowLostFocus")] != -1);
		return call<R>("windowLostFocus", std::forward<Args>(args)...);
	}

};

#endif
