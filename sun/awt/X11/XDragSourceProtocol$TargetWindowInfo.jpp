#ifndef sun_awt_X11_XDragSourceProtocol$TargetWindowInfo_HPP
#define sun_awt_X11_XDragSourceProtocol$TargetWindowInfo_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::XDragSourceProtocol$TargetWindowInfo : public jObject<::sun::awt::X11::XDragSourceProtocol$TargetWindowInfo, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "XDragSourceProtocol$TargetWindowInfo";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jlong, ::jint)>(), //
		jMethod<::jint()>("getProtocolVersion"), //
		jMethod<::jlong()>("getProxyWindow"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getProtocolVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProtocolVersion")] != -1);
		return call<R>("getProtocolVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getProxyWindow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProxyWindow")] != -1);
		return call<R>("getProxyWindow", std::forward<Args>(args)...);
	}

};

#endif
