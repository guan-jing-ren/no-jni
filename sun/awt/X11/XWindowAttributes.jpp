#ifndef sun_awt_X11_XWindowAttributes_HPP
#define sun_awt_X11_XWindowAttributes_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::XWindowAttributes : public jObject<::sun::awt::X11::XWindowAttributes, ::sun::awt::X11::XWrapperBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "XWindowAttributes";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jlong)>(), //
		jMethod<::sun::awt::X11::XEvent()>("clone"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jint()>("getDataSize"), //
		jMethod<::jlong()>("getPData"), //
		jMethod<::jint()>("getSize"), //
		jMethod<::jlong()>("get_all_event_masks"), //
		jMethod<::jlong()>("get_backing_pixel"), //
		jMethod<::jlong()>("get_backing_planes"), //
		jMethod<::jint()>("get_backing_store"), //
		jMethod<::jint()>("get_bit_gravity"), //
		jMethod<::jint()>("get_border_width"), //
		jMethod<::jint()>("get_class"), //
		jMethod<::jlong()>("get_colormap"), //
		jMethod<::jint()>("get_depth"), //
		jMethod<::jlong()>("get_do_not_propagate_mask"), //
		jMethod<::jint()>("get_height"), //
		jMethod<::jboolean()>("get_map_installed"), //
		jMethod<::jint()>("get_map_state"), //
		jMethod<::jboolean()>("get_override_redirect"), //
		jMethod<::jlong()>("get_root"), //
		jMethod<::jboolean()>("get_save_under"), //
		jMethod<::jlong()>("get_screen"), //
		jMethod<::sun::awt::X11::Screen(::jint)>("get_screen"), //
		jMethod<::jlong()>("get_visual"), //
		jMethod<::sun::awt::X11::Visual(::jint)>("get_visual"), //
		jMethod<::jint()>("get_width"), //
		jMethod<::jint()>("get_win_gravity"), //
		jMethod<::jint()>("get_x"), //
		jMethod<::jint()>("get_y"), //
		jMethod<::jlong()>("get_your_event_mask"), //
		jMethod<::jvoid(::jlong)>("set_all_event_masks"), //
		jMethod<::jvoid(::jlong)>("set_backing_pixel"), //
		jMethod<::jvoid(::jlong)>("set_backing_planes"), //
		jMethod<::jvoid(::jint)>("set_backing_store"), //
		jMethod<::jvoid(::jint)>("set_bit_gravity"), //
		jMethod<::jvoid(::jint)>("set_border_width"), //
		jMethod<::jvoid(::jint)>("set_class"), //
		jMethod<::jvoid(::jlong)>("set_colormap"), //
		jMethod<::jvoid(::jint)>("set_depth"), //
		jMethod<::jvoid(::jlong)>("set_do_not_propagate_mask"), //
		jMethod<::jvoid(::jint)>("set_height"), //
		jMethod<::jvoid(::jboolean)>("set_map_installed"), //
		jMethod<::jvoid(::jint)>("set_map_state"), //
		jMethod<::jvoid(::jboolean)>("set_override_redirect"), //
		jMethod<::jvoid(::jlong)>("set_root"), //
		jMethod<::jvoid(::jboolean)>("set_save_under"), //
		jMethod<::jvoid(::jlong)>("set_screen"), //
		jMethod<::jvoid(::jlong)>("set_visual"), //
		jMethod<::jvoid(::jint)>("set_width"), //
		jMethod<::jvoid(::jint)>("set_win_gravity"), //
		jMethod<::jvoid(::jint)>("set_x"), //
		jMethod<::jvoid(::jint)>("set_y"), //
		jMethod<::jvoid(::jlong)>("set_your_event_mask"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid()>("zero"), //
	};

	template<typename R = ::sun::awt::X11::XEvent, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDataSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDataSize")] != -1);
		return call<R>("getDataSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getPData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPData")] != -1);
		return call<R>("getPData", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getSize(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return scall<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_all_event_masks(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_all_event_masks")] != -1);
		return call<R>("get_all_event_masks", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_backing_pixel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_backing_pixel")] != -1);
		return call<R>("get_backing_pixel", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_backing_planes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_backing_planes")] != -1);
		return call<R>("get_backing_planes", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_backing_store(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_backing_store")] != -1);
		return call<R>("get_backing_store", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_bit_gravity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_bit_gravity")] != -1);
		return call<R>("get_bit_gravity", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_border_width(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_border_width")] != -1);
		return call<R>("get_border_width", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_class(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_class")] != -1);
		return call<R>("get_class", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_colormap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_colormap")] != -1);
		return call<R>("get_colormap", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_depth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_depth")] != -1);
		return call<R>("get_depth", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_do_not_propagate_mask(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_do_not_propagate_mask")] != -1);
		return call<R>("get_do_not_propagate_mask", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_height(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_height")] != -1);
		return call<R>("get_height", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto get_map_installed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_map_installed")] != -1);
		return call<R>("get_map_installed", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_map_state(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_map_state")] != -1);
		return call<R>("get_map_state", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto get_override_redirect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_override_redirect")] != -1);
		return call<R>("get_override_redirect", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_root(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_root")] != -1);
		return call<R>("get_root", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto get_save_under(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_save_under")] != -1);
		return call<R>("get_save_under", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_screen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_screen")] != -1);
		return call<R>("get_screen", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_visual(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_visual")] != -1);
		return call<R>("get_visual", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_width(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_width")] != -1);
		return call<R>("get_width", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_win_gravity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_win_gravity")] != -1);
		return call<R>("get_win_gravity", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_x(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_x")] != -1);
		return call<R>("get_x", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_y(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_y")] != -1);
		return call<R>("get_y", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_your_event_mask(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_your_event_mask")] != -1);
		return call<R>("get_your_event_mask", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_all_event_masks(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_all_event_masks")] != -1);
		return call<R>("set_all_event_masks", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_backing_pixel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_backing_pixel")] != -1);
		return call<R>("set_backing_pixel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_backing_planes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_backing_planes")] != -1);
		return call<R>("set_backing_planes", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_backing_store(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_backing_store")] != -1);
		return call<R>("set_backing_store", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_bit_gravity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_bit_gravity")] != -1);
		return call<R>("set_bit_gravity", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_border_width(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_border_width")] != -1);
		return call<R>("set_border_width", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_class(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_class")] != -1);
		return call<R>("set_class", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_colormap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_colormap")] != -1);
		return call<R>("set_colormap", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_depth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_depth")] != -1);
		return call<R>("set_depth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_do_not_propagate_mask(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_do_not_propagate_mask")] != -1);
		return call<R>("set_do_not_propagate_mask", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_height(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_height")] != -1);
		return call<R>("set_height", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_map_installed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_map_installed")] != -1);
		return call<R>("set_map_installed", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_map_state(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_map_state")] != -1);
		return call<R>("set_map_state", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_override_redirect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_override_redirect")] != -1);
		return call<R>("set_override_redirect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_root(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_root")] != -1);
		return call<R>("set_root", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_save_under(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_save_under")] != -1);
		return call<R>("set_save_under", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_screen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_screen")] != -1);
		return call<R>("set_screen", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_visual(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_visual")] != -1);
		return call<R>("set_visual", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_width(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_width")] != -1);
		return call<R>("set_width", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_win_gravity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_win_gravity")] != -1);
		return call<R>("set_win_gravity", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_x(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_x")] != -1);
		return call<R>("set_x", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_y(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_y")] != -1);
		return call<R>("set_y", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_your_event_mask(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_your_event_mask")] != -1);
		return call<R>("set_your_event_mask", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto zero(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("zero")] != -1);
		return call<R>("zero", std::forward<Args>(args)...);
	}

};

#endif
