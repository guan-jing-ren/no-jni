#ifndef sun_awt_X11_Depth_HPP
#define sun_awt_X11_Depth_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::Depth : public jObject<::sun::awt::X11::Depth, ::sun::awt::X11::XWrapperBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "Depth";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jlong)>(), //
		jMethod<::sun::awt::X11::XEvent()>("clone"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jint()>("getDataSize"), //
		jMethod<::jlong()>("getPData"), //
		jMethod<::jint()>("getSize"), //
		jMethod<::jint()>("get_depth"), //
		jMethod<::jint()>("get_nvisuals"), //
		jMethod<::jlong()>("get_visuals"), //
		jMethod<::sun::awt::X11::Visual(::jint)>("get_visuals"), //
		jMethod<::jvoid(::jint)>("set_depth"), //
		jMethod<::jvoid(::jint)>("set_nvisuals"), //
		jMethod<::jvoid(::jlong)>("set_visuals"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid()>("zero"), //
	};

	template<typename R = ::sun::awt::X11::XEvent, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDataSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDataSize")] != -1);
		return call<R>("getDataSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getPData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPData")] != -1);
		return call<R>("getPData", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getSize(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return scall<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_depth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_depth")] != -1);
		return call<R>("get_depth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_nvisuals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_nvisuals")] != -1);
		return call<R>("get_nvisuals", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_visuals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_visuals")] != -1);
		return call<R>("get_visuals", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_depth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_depth")] != -1);
		return call<R>("set_depth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_nvisuals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_nvisuals")] != -1);
		return call<R>("set_nvisuals", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_visuals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_visuals")] != -1);
		return call<R>("set_visuals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto zero(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("zero")] != -1);
		return call<R>("zero", std::forward<Args>(args)...);
	}

};

#endif
