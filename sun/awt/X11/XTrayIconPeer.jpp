#ifndef sun_awt_X11_XTrayIconPeer_HPP
#define sun_awt_X11_XTrayIconPeer_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::XTrayIconPeer : public jObject<::sun::awt::X11::XTrayIconPeer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "XTrayIconPeer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String)>("displayMessage"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::java::lang::String()>("getActionCommand"), //
		jMethod<::java::awt::Rectangle()>("getBounds"), //
		jMethod<::java::lang::String()>("getTooltipString"), //
		jMethod<::jboolean()>("isDisposed"), //
		jMethod<::jvoid(::java::lang::String)>("setToolTip"), //
		jMethod<::jvoid(::jint, ::jint)>("showPopupMenu"), //
		jMethod<::jvoid(::java::awt::Window)>("suppressWarningString"), //
		jMethod<::jvoid()>("updateImage"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto displayMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("displayMessage")] != -1);
		return call<R>("displayMessage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getActionCommand(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getActionCommand")] != -1);
		return call<R>("getActionCommand", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds")] != -1);
		return call<R>("getBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTooltipString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTooltipString")] != -1);
		return call<R>("getTooltipString", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDisposed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDisposed")] != -1);
		return call<R>("isDisposed", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setToolTip(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setToolTip")] != -1);
		return call<R>("setToolTip", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto showPopupMenu(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("showPopupMenu")] != -1);
		return call<R>("showPopupMenu", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto suppressWarningString(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("suppressWarningString")] != -1);
		return scall<R>("suppressWarningString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateImage")] != -1);
		return call<R>("updateImage", std::forward<Args>(args)...);
	}

};

#endif
