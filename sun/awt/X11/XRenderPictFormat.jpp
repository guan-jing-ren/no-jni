#ifndef sun_awt_X11_XRenderPictFormat_HPP
#define sun_awt_X11_XRenderPictFormat_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::XRenderPictFormat : public jObject<::sun::awt::X11::XRenderPictFormat, ::sun::awt::X11::XWrapperBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "XRenderPictFormat";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jlong)>(), //
		jMethod<::sun::awt::X11::XEvent()>("clone"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jint()>("getDataSize"), //
		jMethod<::jlong()>("getPData"), //
		jMethod<::jint()>("getSize"), //
		jMethod<::jlong()>("get_colormap"), //
		jMethod<::jint()>("get_depth"), //
		jMethod<::sun::awt::X11::XRenderDirectFormat()>("get_direct"), //
		jMethod<::jlong()>("get_id"), //
		jMethod<::jint()>("get_type"), //
		jMethod<::jvoid(::jlong)>("set_colormap"), //
		jMethod<::jvoid(::jint)>("set_depth"), //
		jMethod<::jvoid(::jlong)>("set_id"), //
		jMethod<::jvoid(::jint)>("set_type"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid()>("zero"), //
	};

	template<typename R = ::sun::awt::X11::XEvent, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDataSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDataSize")] != -1);
		return call<R>("getDataSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getPData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPData")] != -1);
		return call<R>("getPData", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getSize(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return scall<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_colormap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_colormap")] != -1);
		return call<R>("get_colormap", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_depth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_depth")] != -1);
		return call<R>("get_depth", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XRenderDirectFormat, typename... Args>
	auto get_direct(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_direct")] != -1);
		return call<R>("get_direct", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_id(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_id")] != -1);
		return call<R>("get_id", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_type(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_type")] != -1);
		return call<R>("get_type", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_colormap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_colormap")] != -1);
		return call<R>("set_colormap", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_depth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_depth")] != -1);
		return call<R>("set_depth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_id(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_id")] != -1);
		return call<R>("set_id", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_type(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_type")] != -1);
		return call<R>("set_type", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto zero(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("zero")] != -1);
		return call<R>("zero", std::forward<Args>(args)...);
	}

};

#endif
