#ifndef sun_awt_X11_InfoWindow$Balloon_HPP
#define sun_awt_X11_InfoWindow$Balloon_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::InfoWindow$Balloon : public jObject<::sun::awt::X11::InfoWindow$Balloon, ::sun::awt::X11::InfoWindow> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "InfoWindow$Balloon";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::Frame, ::java::lang::Object, ::sun::awt::X11::InfoWindow$Balloon$LiveArguments)>(), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String)>("display"), //
		jMethod<::jvoid()>("dispose"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto display(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("display")] != -1);
		return call<R>("display", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

};

#endif
