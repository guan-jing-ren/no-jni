#ifndef sun_awt_X11_XUtilConstants_HPP
#define sun_awt_X11_XUtilConstants_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::XUtilConstants : public jObject<::sun::awt::X11::XUtilConstants, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "XUtilConstants";

	constexpr static Enume field_signatures{
		jField<::jlong>("AllHints"), //
		jField<::jint>("AllValues"), //
		jField<::jint>("BitmapFileInvalid"), //
		jField<::jint>("BitmapNoMemory"), //
		jField<::jint>("BitmapOpenFailed"), //
		jField<::jint>("BitmapSuccess"), //
		jField<::jint>("DontCareState"), //
		jField<::jint>("HeightValue"), //
		jField<::jlong>("IconMaskHint"), //
		jField<::jlong>("IconPixmapHint"), //
		jField<::jlong>("IconPositionHint"), //
		jField<::jlong>("IconWindowHint"), //
		jField<::jint>("IconicState"), //
		jField<::jint>("InactiveState"), //
		jField<::jlong>("InputHint"), //
		jField<::jint>("NoValue"), //
		jField<::jint>("NormalState"), //
		jField<::jlong>("PAllHints"), //
		jField<::jlong>("PAspect"), //
		jField<::jlong>("PBaseSize"), //
		jField<::jlong>("PMaxSize"), //
		jField<::jlong>("PMinSize"), //
		jField<::jlong>("PPosition"), //
		jField<::jlong>("PResizeInc"), //
		jField<::jlong>("PSize"), //
		jField<::jlong>("PWinGravity"), //
		jField<::jint>("RectangleIn"), //
		jField<::jint>("RectangleOut"), //
		jField<::jint>("RectanglePart"), //
		jField<::jlong>("StateHint"), //
		jField<::jlong>("USPosition"), //
		jField<::jlong>("USSize"), //
		jField<::jint>("VisualAllMask"), //
		jField<::jint>("VisualBitsPerRGBMask"), //
		jField<::jint>("VisualBlueMaskMask"), //
		jField<::jint>("VisualClassMask"), //
		jField<::jint>("VisualColormapSizeMask"), //
		jField<::jint>("VisualDepthMask"), //
		jField<::jint>("VisualGreenMaskMask"), //
		jField<::jint>("VisualIDMask"), //
		jField<::jint>("VisualNoMask"), //
		jField<::jint>("VisualRedMaskMask"), //
		jField<::jint>("VisualScreenMask"), //
		jField<::jint>("WidthValue"), //
		jField<::jlong>("WindowGroupHint"), //
		jField<::jint>("WithdrawnState"), //
		jField<::jint>("XCNOENT"), //
		jField<::jint>("XCNOMEM"), //
		jField<::jint>("XCSUCCESS"), //
		jField<::jint>("XConverterNotFound"), //
		jField<::jint>("XLocaleNotSupported"), //
		jField<::jint>("XNegative"), //
		jField<::jint>("XNoMemory"), //
		jField<::jlong>("XUrgencyHint"), //
		jField<::jint>("XValue"), //
		jField<::jint>("YNegative"), //
		jField<::jint>("YValue"), //
		jField<::jint>("ZoomState"), //
	};

	template<typename F = ::jlong>
	static auto AllHints() {
		static_assert(field_signatures[jField<F>("AllHints")] != -1);
		return sat<F>("AllHints");
	}

	template<typename F = ::jint>
	static auto AllValues() {
		static_assert(field_signatures[jField<F>("AllValues")] != -1);
		return sat<F>("AllValues");
	}

	template<typename F = ::jint>
	static auto BitmapFileInvalid() {
		static_assert(field_signatures[jField<F>("BitmapFileInvalid")] != -1);
		return sat<F>("BitmapFileInvalid");
	}

	template<typename F = ::jint>
	static auto BitmapNoMemory() {
		static_assert(field_signatures[jField<F>("BitmapNoMemory")] != -1);
		return sat<F>("BitmapNoMemory");
	}

	template<typename F = ::jint>
	static auto BitmapOpenFailed() {
		static_assert(field_signatures[jField<F>("BitmapOpenFailed")] != -1);
		return sat<F>("BitmapOpenFailed");
	}

	template<typename F = ::jint>
	static auto BitmapSuccess() {
		static_assert(field_signatures[jField<F>("BitmapSuccess")] != -1);
		return sat<F>("BitmapSuccess");
	}

	template<typename F = ::jint>
	static auto DontCareState() {
		static_assert(field_signatures[jField<F>("DontCareState")] != -1);
		return sat<F>("DontCareState");
	}

	template<typename F = ::jint>
	static auto HeightValue() {
		static_assert(field_signatures[jField<F>("HeightValue")] != -1);
		return sat<F>("HeightValue");
	}

	template<typename F = ::jlong>
	static auto IconMaskHint() {
		static_assert(field_signatures[jField<F>("IconMaskHint")] != -1);
		return sat<F>("IconMaskHint");
	}

	template<typename F = ::jlong>
	static auto IconPixmapHint() {
		static_assert(field_signatures[jField<F>("IconPixmapHint")] != -1);
		return sat<F>("IconPixmapHint");
	}

	template<typename F = ::jlong>
	static auto IconPositionHint() {
		static_assert(field_signatures[jField<F>("IconPositionHint")] != -1);
		return sat<F>("IconPositionHint");
	}

	template<typename F = ::jlong>
	static auto IconWindowHint() {
		static_assert(field_signatures[jField<F>("IconWindowHint")] != -1);
		return sat<F>("IconWindowHint");
	}

	template<typename F = ::jint>
	static auto IconicState() {
		static_assert(field_signatures[jField<F>("IconicState")] != -1);
		return sat<F>("IconicState");
	}

	template<typename F = ::jint>
	static auto InactiveState() {
		static_assert(field_signatures[jField<F>("InactiveState")] != -1);
		return sat<F>("InactiveState");
	}

	template<typename F = ::jlong>
	static auto InputHint() {
		static_assert(field_signatures[jField<F>("InputHint")] != -1);
		return sat<F>("InputHint");
	}

	template<typename F = ::jint>
	static auto NoValue() {
		static_assert(field_signatures[jField<F>("NoValue")] != -1);
		return sat<F>("NoValue");
	}

	template<typename F = ::jint>
	static auto NormalState() {
		static_assert(field_signatures[jField<F>("NormalState")] != -1);
		return sat<F>("NormalState");
	}

	template<typename F = ::jlong>
	static auto PAllHints() {
		static_assert(field_signatures[jField<F>("PAllHints")] != -1);
		return sat<F>("PAllHints");
	}

	template<typename F = ::jlong>
	static auto PAspect() {
		static_assert(field_signatures[jField<F>("PAspect")] != -1);
		return sat<F>("PAspect");
	}

	template<typename F = ::jlong>
	static auto PBaseSize() {
		static_assert(field_signatures[jField<F>("PBaseSize")] != -1);
		return sat<F>("PBaseSize");
	}

	template<typename F = ::jlong>
	static auto PMaxSize() {
		static_assert(field_signatures[jField<F>("PMaxSize")] != -1);
		return sat<F>("PMaxSize");
	}

	template<typename F = ::jlong>
	static auto PMinSize() {
		static_assert(field_signatures[jField<F>("PMinSize")] != -1);
		return sat<F>("PMinSize");
	}

	template<typename F = ::jlong>
	static auto PPosition() {
		static_assert(field_signatures[jField<F>("PPosition")] != -1);
		return sat<F>("PPosition");
	}

	template<typename F = ::jlong>
	static auto PResizeInc() {
		static_assert(field_signatures[jField<F>("PResizeInc")] != -1);
		return sat<F>("PResizeInc");
	}

	template<typename F = ::jlong>
	static auto PSize() {
		static_assert(field_signatures[jField<F>("PSize")] != -1);
		return sat<F>("PSize");
	}

	template<typename F = ::jlong>
	static auto PWinGravity() {
		static_assert(field_signatures[jField<F>("PWinGravity")] != -1);
		return sat<F>("PWinGravity");
	}

	template<typename F = ::jint>
	static auto RectangleIn() {
		static_assert(field_signatures[jField<F>("RectangleIn")] != -1);
		return sat<F>("RectangleIn");
	}

	template<typename F = ::jint>
	static auto RectangleOut() {
		static_assert(field_signatures[jField<F>("RectangleOut")] != -1);
		return sat<F>("RectangleOut");
	}

	template<typename F = ::jint>
	static auto RectanglePart() {
		static_assert(field_signatures[jField<F>("RectanglePart")] != -1);
		return sat<F>("RectanglePart");
	}

	template<typename F = ::jlong>
	static auto StateHint() {
		static_assert(field_signatures[jField<F>("StateHint")] != -1);
		return sat<F>("StateHint");
	}

	template<typename F = ::jlong>
	static auto USPosition() {
		static_assert(field_signatures[jField<F>("USPosition")] != -1);
		return sat<F>("USPosition");
	}

	template<typename F = ::jlong>
	static auto USSize() {
		static_assert(field_signatures[jField<F>("USSize")] != -1);
		return sat<F>("USSize");
	}

	template<typename F = ::jint>
	static auto VisualAllMask() {
		static_assert(field_signatures[jField<F>("VisualAllMask")] != -1);
		return sat<F>("VisualAllMask");
	}

	template<typename F = ::jint>
	static auto VisualBitsPerRGBMask() {
		static_assert(field_signatures[jField<F>("VisualBitsPerRGBMask")] != -1);
		return sat<F>("VisualBitsPerRGBMask");
	}

	template<typename F = ::jint>
	static auto VisualBlueMaskMask() {
		static_assert(field_signatures[jField<F>("VisualBlueMaskMask")] != -1);
		return sat<F>("VisualBlueMaskMask");
	}

	template<typename F = ::jint>
	static auto VisualClassMask() {
		static_assert(field_signatures[jField<F>("VisualClassMask")] != -1);
		return sat<F>("VisualClassMask");
	}

	template<typename F = ::jint>
	static auto VisualColormapSizeMask() {
		static_assert(field_signatures[jField<F>("VisualColormapSizeMask")] != -1);
		return sat<F>("VisualColormapSizeMask");
	}

	template<typename F = ::jint>
	static auto VisualDepthMask() {
		static_assert(field_signatures[jField<F>("VisualDepthMask")] != -1);
		return sat<F>("VisualDepthMask");
	}

	template<typename F = ::jint>
	static auto VisualGreenMaskMask() {
		static_assert(field_signatures[jField<F>("VisualGreenMaskMask")] != -1);
		return sat<F>("VisualGreenMaskMask");
	}

	template<typename F = ::jint>
	static auto VisualIDMask() {
		static_assert(field_signatures[jField<F>("VisualIDMask")] != -1);
		return sat<F>("VisualIDMask");
	}

	template<typename F = ::jint>
	static auto VisualNoMask() {
		static_assert(field_signatures[jField<F>("VisualNoMask")] != -1);
		return sat<F>("VisualNoMask");
	}

	template<typename F = ::jint>
	static auto VisualRedMaskMask() {
		static_assert(field_signatures[jField<F>("VisualRedMaskMask")] != -1);
		return sat<F>("VisualRedMaskMask");
	}

	template<typename F = ::jint>
	static auto VisualScreenMask() {
		static_assert(field_signatures[jField<F>("VisualScreenMask")] != -1);
		return sat<F>("VisualScreenMask");
	}

	template<typename F = ::jint>
	static auto WidthValue() {
		static_assert(field_signatures[jField<F>("WidthValue")] != -1);
		return sat<F>("WidthValue");
	}

	template<typename F = ::jlong>
	static auto WindowGroupHint() {
		static_assert(field_signatures[jField<F>("WindowGroupHint")] != -1);
		return sat<F>("WindowGroupHint");
	}

	template<typename F = ::jint>
	static auto WithdrawnState() {
		static_assert(field_signatures[jField<F>("WithdrawnState")] != -1);
		return sat<F>("WithdrawnState");
	}

	template<typename F = ::jint>
	static auto XCNOENT() {
		static_assert(field_signatures[jField<F>("XCNOENT")] != -1);
		return sat<F>("XCNOENT");
	}

	template<typename F = ::jint>
	static auto XCNOMEM() {
		static_assert(field_signatures[jField<F>("XCNOMEM")] != -1);
		return sat<F>("XCNOMEM");
	}

	template<typename F = ::jint>
	static auto XCSUCCESS() {
		static_assert(field_signatures[jField<F>("XCSUCCESS")] != -1);
		return sat<F>("XCSUCCESS");
	}

	template<typename F = ::jint>
	static auto XConverterNotFound() {
		static_assert(field_signatures[jField<F>("XConverterNotFound")] != -1);
		return sat<F>("XConverterNotFound");
	}

	template<typename F = ::jint>
	static auto XLocaleNotSupported() {
		static_assert(field_signatures[jField<F>("XLocaleNotSupported")] != -1);
		return sat<F>("XLocaleNotSupported");
	}

	template<typename F = ::jint>
	static auto XNegative() {
		static_assert(field_signatures[jField<F>("XNegative")] != -1);
		return sat<F>("XNegative");
	}

	template<typename F = ::jint>
	static auto XNoMemory() {
		static_assert(field_signatures[jField<F>("XNoMemory")] != -1);
		return sat<F>("XNoMemory");
	}

	template<typename F = ::jlong>
	static auto XUrgencyHint() {
		static_assert(field_signatures[jField<F>("XUrgencyHint")] != -1);
		return sat<F>("XUrgencyHint");
	}

	template<typename F = ::jint>
	static auto XValue() {
		static_assert(field_signatures[jField<F>("XValue")] != -1);
		return sat<F>("XValue");
	}

	template<typename F = ::jint>
	static auto YNegative() {
		static_assert(field_signatures[jField<F>("YNegative")] != -1);
		return sat<F>("YNegative");
	}

	template<typename F = ::jint>
	static auto YValue() {
		static_assert(field_signatures[jField<F>("YValue")] != -1);
		return sat<F>("YValue");
	}

	template<typename F = ::jint>
	static auto ZoomState() {
		static_assert(field_signatures[jField<F>("ZoomState")] != -1);
		return sat<F>("ZoomState");
	}

	constexpr static Enume method_signatures{
		cexprstr{"\0"}, //
	};

};

#endif
