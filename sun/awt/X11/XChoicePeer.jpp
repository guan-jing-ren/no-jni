#ifndef sun_awt_X11_XChoicePeer_HPP
#define sun_awt_X11_XChoicePeer_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::XChoicePeer : public jObject<::sun::awt::X11::XChoicePeer, ::sun::awt::X11::XComponentPeer> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "XChoicePeer";

	constexpr static Enume field_signatures{
		jField<::jint>("BORDER_WIDTH"), //
		jField<::jint>("ITEM_MARGIN"), //
		jField<::jint>("SCROLLBAR_WIDTH"), //
		jField<::jint>("TEXT_SPACE"), //
	};

	template<typename F = ::jint>
	static auto BORDER_WIDTH() {
		static_assert(field_signatures[jField<F>("BORDER_WIDTH")] != -1);
		return sat<F>("BORDER_WIDTH");
	}

	template<typename F = ::jint>
	static auto ITEM_MARGIN() {
		static_assert(field_signatures[jField<F>("ITEM_MARGIN")] != -1);
		return sat<F>("ITEM_MARGIN");
	}

	template<typename F = ::jint>
	static auto SCROLLBAR_WIDTH() {
		static_assert(field_signatures[jField<F>("SCROLLBAR_WIDTH")] != -1);
		return sat<F>("SCROLLBAR_WIDTH");
	}

	template<typename F = ::jint>
	static auto TEXT_SPACE() {
		static_assert(field_signatures[jField<F>("TEXT_SPACE")] != -1);
		return sat<F>("TEXT_SPACE");
	}

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::lang::String, ::jint)>("add"), //
		jMethod<::jvoid(::java::lang::String, ::jint)>("addItem"), //
		jMethod<::jvoid(::sun::awt::X11::XChoicePeerListener)>("addXChoicePeerListener"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jvoid(::java::awt::event::FocusEvent)>("focusGained"), //
		jMethod<::jvoid(::java::awt::event::FocusEvent)>("focusLost"), //
		jMethod<::java::awt::Dimension()>("getMinimumSize"), //
		jMethod<::jboolean(::java::awt::event::MouseEvent)>("handleMouseEventByChoice"), //
		jMethod<::jboolean()>("handlesWheelScrolling"), //
		jMethod<::jboolean()>("isFocusable"), //
		jMethod<::jboolean()>("isUnfurled"), //
		jMethod<::jvoid(::java::awt::event::KeyEvent)>("keyPressed"), //
		jMethod<::jvoid()>("layout"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mouseDragged"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mousePressed"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mouseReleased"), //
		jMethod<::jvoid(::jint)>("remove"), //
		jMethod<::jvoid()>("removeAll"), //
		jMethod<::jvoid()>("removeXChoicePeerListener"), //
		jMethod<::jvoid(::jint)>("select"), //
		jMethod<::jvoid(::java::awt::Component)>("setAlignUnder"), //
		jMethod<::jvoid(::java::awt::Color)>("setBackground"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint)>("setBounds"), //
		jMethod<::jvoid(::jboolean)>("setDrawSelectedItem"), //
		jMethod<::jvoid(::jboolean)>("setEnabled"), //
		jMethod<::jvoid(::java::awt::Font)>("setFont"), //
		jMethod<::jvoid(::java::awt::Color)>("setForeground"), //
		jMethod<::jvoid(::jint, ::jint)>("stateChangedICCCM"), //
		jMethod<::jvoid(::jint, ::jint)>("stateChangedJava"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addItem")] != -1);
		return call<R>("addItem", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addXChoicePeerListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addXChoicePeerListener")] != -1);
		return call<R>("addXChoicePeerListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto focusGained(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("focusGained")] != -1);
		return call<R>("focusGained", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto focusLost(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("focusLost")] != -1);
		return call<R>("focusLost", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinimumSize")] != -1);
		return call<R>("getMinimumSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto handleMouseEventByChoice(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleMouseEventByChoice")] != -1);
		return call<R>("handleMouseEventByChoice", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto handlesWheelScrolling(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handlesWheelScrolling")] != -1);
		return call<R>("handlesWheelScrolling", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFocusable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFocusable")] != -1);
		return call<R>("isFocusable", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isUnfurled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isUnfurled")] != -1);
		return call<R>("isUnfurled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto keyPressed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("keyPressed")] != -1);
		return call<R>("keyPressed", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto layout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("layout")] != -1);
		return call<R>("layout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mouseDragged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mouseDragged")] != -1);
		return call<R>("mouseDragged", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mousePressed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mousePressed")] != -1);
		return call<R>("mousePressed", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mouseReleased(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mouseReleased")] != -1);
		return call<R>("mouseReleased", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAll")] != -1);
		return call<R>("removeAll", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeXChoicePeerListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeXChoicePeerListener")] != -1);
		return call<R>("removeXChoicePeerListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto select(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("select")] != -1);
		return call<R>("select", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAlignUnder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAlignUnder")] != -1);
		return call<R>("setAlignUnder", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBackground")] != -1);
		return call<R>("setBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBounds")] != -1);
		return call<R>("setBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDrawSelectedItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDrawSelectedItem")] != -1);
		return call<R>("setDrawSelectedItem", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEnabled")] != -1);
		return call<R>("setEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFont")] != -1);
		return call<R>("setFont", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setForeground")] != -1);
		return call<R>("setForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto stateChangedICCCM(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stateChangedICCCM")] != -1);
		return call<R>("stateChangedICCCM", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto stateChangedJava(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stateChangedJava")] != -1);
		return call<R>("stateChangedJava", std::forward<Args>(args)...);
	}

};

#endif
