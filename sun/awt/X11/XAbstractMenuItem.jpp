#ifndef sun_awt_X11_XAbstractMenuItem_HPP
#define sun_awt_X11_XAbstractMenuItem_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::XAbstractMenuItem : public jObject<::sun::awt::X11::XAbstractMenuItem, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "XAbstractMenuItem";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint(::java::awt::Graphics)>("getHeight"), //
		jMethod<::java::lang::String()>("getLabel"), //
		jMethod<::jint(::java::awt::Graphics)>("getShortcutWidth"), //
		jMethod<::jint(::java::awt::Graphics)>("getWidth"), //
		jMethod<::jvoid(::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::jboolean)>("paint"), //
		jMethod<::jvoid(::sun::awt::X11::XMenuPeer)>("setMenuPeer"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeight")] != -1);
		return call<R>("getHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLabel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLabel")] != -1);
		return call<R>("getLabel", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getShortcutWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getShortcutWidth")] != -1);
		return call<R>("getShortcutWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMenuPeer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMenuPeer")] != -1);
		return call<R>("setMenuPeer", std::forward<Args>(args)...);
	}

};

#endif
