#ifndef sun_awt_X11_XKeyEvent_HPP
#define sun_awt_X11_XKeyEvent_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::XKeyEvent : public jObject<::sun::awt::X11::XKeyEvent, ::sun::awt::X11::XWrapperBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "XKeyEvent";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jlong)>(), //
		jMethod<::sun::awt::X11::XEvent()>("clone"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jint()>("getDataSize"), //
		jMethod<::jlong()>("getPData"), //
		jMethod<::jint()>("getSize"), //
		jMethod<::jlong()>("get_display"), //
		jMethod<::jint()>("get_keycode"), //
		jMethod<::jlong()>("get_root"), //
		jMethod<::jboolean()>("get_same_screen"), //
		jMethod<::jboolean()>("get_send_event"), //
		jMethod<::jlong()>("get_serial"), //
		jMethod<::jint()>("get_state"), //
		jMethod<::jlong()>("get_subwindow"), //
		jMethod<::jlong()>("get_time"), //
		jMethod<::jint()>("get_type"), //
		jMethod<::jlong()>("get_window"), //
		jMethod<::jint()>("get_x"), //
		jMethod<::jint()>("get_x_root"), //
		jMethod<::jint()>("get_y"), //
		jMethod<::jint()>("get_y_root"), //
		jMethod<::jvoid(::jlong)>("set_display"), //
		jMethod<::jvoid(::jint)>("set_keycode"), //
		jMethod<::jvoid(::jlong)>("set_root"), //
		jMethod<::jvoid(::jboolean)>("set_same_screen"), //
		jMethod<::jvoid(::jboolean)>("set_send_event"), //
		jMethod<::jvoid(::jlong)>("set_serial"), //
		jMethod<::jvoid(::jint)>("set_state"), //
		jMethod<::jvoid(::jlong)>("set_subwindow"), //
		jMethod<::jvoid(::jlong)>("set_time"), //
		jMethod<::jvoid(::jint)>("set_type"), //
		jMethod<::jvoid(::jlong)>("set_window"), //
		jMethod<::jvoid(::jint)>("set_x"), //
		jMethod<::jvoid(::jint)>("set_x_root"), //
		jMethod<::jvoid(::jint)>("set_y"), //
		jMethod<::jvoid(::jint)>("set_y_root"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid()>("zero"), //
	};

	template<typename R = ::sun::awt::X11::XEvent, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDataSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDataSize")] != -1);
		return call<R>("getDataSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getPData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPData")] != -1);
		return call<R>("getPData", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getSize(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return scall<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_display(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_display")] != -1);
		return call<R>("get_display", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_keycode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_keycode")] != -1);
		return call<R>("get_keycode", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_root(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_root")] != -1);
		return call<R>("get_root", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto get_same_screen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_same_screen")] != -1);
		return call<R>("get_same_screen", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto get_send_event(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_send_event")] != -1);
		return call<R>("get_send_event", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_serial(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_serial")] != -1);
		return call<R>("get_serial", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_state(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_state")] != -1);
		return call<R>("get_state", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_subwindow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_subwindow")] != -1);
		return call<R>("get_subwindow", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_time(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_time")] != -1);
		return call<R>("get_time", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_type(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_type")] != -1);
		return call<R>("get_type", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_window(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_window")] != -1);
		return call<R>("get_window", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_x(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_x")] != -1);
		return call<R>("get_x", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_x_root(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_x_root")] != -1);
		return call<R>("get_x_root", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_y(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_y")] != -1);
		return call<R>("get_y", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_y_root(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_y_root")] != -1);
		return call<R>("get_y_root", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_display(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_display")] != -1);
		return call<R>("set_display", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_keycode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_keycode")] != -1);
		return call<R>("set_keycode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_root(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_root")] != -1);
		return call<R>("set_root", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_same_screen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_same_screen")] != -1);
		return call<R>("set_same_screen", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_send_event(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_send_event")] != -1);
		return call<R>("set_send_event", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_serial(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_serial")] != -1);
		return call<R>("set_serial", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_state(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_state")] != -1);
		return call<R>("set_state", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_subwindow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_subwindow")] != -1);
		return call<R>("set_subwindow", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_time(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_time")] != -1);
		return call<R>("set_time", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_type(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_type")] != -1);
		return call<R>("set_type", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_window(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_window")] != -1);
		return call<R>("set_window", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_x(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_x")] != -1);
		return call<R>("set_x", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_x_root(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_x_root")] != -1);
		return call<R>("set_x_root", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_y(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_y")] != -1);
		return call<R>("set_y", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_y_root(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_y_root")] != -1);
		return call<R>("set_y_root", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto zero(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("zero")] != -1);
		return call<R>("zero", std::forward<Args>(args)...);
	}

};

#endif
