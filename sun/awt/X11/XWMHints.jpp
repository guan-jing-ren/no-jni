#ifndef sun_awt_X11_XWMHints_HPP
#define sun_awt_X11_XWMHints_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::XWMHints : public jObject<::sun::awt::X11::XWMHints, ::sun::awt::X11::XWrapperBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "XWMHints";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jlong)>(), //
		jMethod<::sun::awt::X11::XEvent()>("clone"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jint()>("getDataSize"), //
		jMethod<::jlong()>("getPData"), //
		jMethod<::jint()>("getSize"), //
		jMethod<::jlong()>("get_flags"), //
		jMethod<::jlong()>("get_icon_mask"), //
		jMethod<::jlong()>("get_icon_pixmap"), //
		jMethod<::jlong(::jint)>("get_icon_pixmap"), //
		jMethod<::jlong()>("get_icon_window"), //
		jMethod<::jint()>("get_icon_x"), //
		jMethod<::jint()>("get_icon_y"), //
		jMethod<::jint()>("get_initial_state"), //
		jMethod<::jboolean()>("get_input"), //
		jMethod<::jlong()>("get_window_group"), //
		jMethod<::jvoid(::jlong)>("set_flags"), //
		jMethod<::jvoid(::jlong)>("set_icon_mask"), //
		jMethod<::jvoid(::jlong)>("set_icon_pixmap"), //
		jMethod<::jvoid(::jlong)>("set_icon_window"), //
		jMethod<::jvoid(::jint)>("set_icon_x"), //
		jMethod<::jvoid(::jint)>("set_icon_y"), //
		jMethod<::jvoid(::jint)>("set_initial_state"), //
		jMethod<::jvoid(::jboolean)>("set_input"), //
		jMethod<::jvoid(::jlong)>("set_window_group"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid()>("zero"), //
	};

	template<typename R = ::sun::awt::X11::XEvent, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDataSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDataSize")] != -1);
		return call<R>("getDataSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getPData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPData")] != -1);
		return call<R>("getPData", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getSize(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return scall<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_flags(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_flags")] != -1);
		return call<R>("get_flags", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_icon_mask(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_icon_mask")] != -1);
		return call<R>("get_icon_mask", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_icon_pixmap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_icon_pixmap")] != -1);
		return call<R>("get_icon_pixmap", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_icon_window(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_icon_window")] != -1);
		return call<R>("get_icon_window", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_icon_x(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_icon_x")] != -1);
		return call<R>("get_icon_x", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_icon_y(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_icon_y")] != -1);
		return call<R>("get_icon_y", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_initial_state(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_initial_state")] != -1);
		return call<R>("get_initial_state", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto get_input(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_input")] != -1);
		return call<R>("get_input", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_window_group(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_window_group")] != -1);
		return call<R>("get_window_group", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_flags(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_flags")] != -1);
		return call<R>("set_flags", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_icon_mask(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_icon_mask")] != -1);
		return call<R>("set_icon_mask", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_icon_pixmap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_icon_pixmap")] != -1);
		return call<R>("set_icon_pixmap", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_icon_window(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_icon_window")] != -1);
		return call<R>("set_icon_window", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_icon_x(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_icon_x")] != -1);
		return call<R>("set_icon_x", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_icon_y(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_icon_y")] != -1);
		return call<R>("set_icon_y", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_initial_state(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_initial_state")] != -1);
		return call<R>("set_initial_state", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_input(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_input")] != -1);
		return call<R>("set_input", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_window_group(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_window_group")] != -1);
		return call<R>("set_window_group", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto zero(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("zero")] != -1);
		return call<R>("zero", std::forward<Args>(args)...);
	}

};

#endif
