#ifndef sun_awt_X11_XConfigureEvent_HPP
#define sun_awt_X11_XConfigureEvent_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::XConfigureEvent : public jObject<::sun::awt::X11::XConfigureEvent, ::sun::awt::X11::XWrapperBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "XConfigureEvent";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jlong)>(), //
		jMethod<::sun::awt::X11::XEvent()>("clone"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jint()>("getDataSize"), //
		jMethod<::jlong()>("getPData"), //
		jMethod<::jint()>("getSize"), //
		jMethod<::jlong()>("get_above"), //
		jMethod<::jint()>("get_border_width"), //
		jMethod<::jlong()>("get_display"), //
		jMethod<::jlong()>("get_event"), //
		jMethod<::jint()>("get_height"), //
		jMethod<::jboolean()>("get_override_redirect"), //
		jMethod<::jboolean()>("get_send_event"), //
		jMethod<::jlong()>("get_serial"), //
		jMethod<::jint()>("get_type"), //
		jMethod<::jint()>("get_width"), //
		jMethod<::jlong()>("get_window"), //
		jMethod<::jint()>("get_x"), //
		jMethod<::jint()>("get_y"), //
		jMethod<::jvoid(::jlong)>("set_above"), //
		jMethod<::jvoid(::jint)>("set_border_width"), //
		jMethod<::jvoid(::jlong)>("set_display"), //
		jMethod<::jvoid(::jlong)>("set_event"), //
		jMethod<::jvoid(::jint)>("set_height"), //
		jMethod<::jvoid(::jboolean)>("set_override_redirect"), //
		jMethod<::jvoid(::jboolean)>("set_send_event"), //
		jMethod<::jvoid(::jlong)>("set_serial"), //
		jMethod<::jvoid(::jint)>("set_type"), //
		jMethod<::jvoid(::jint)>("set_width"), //
		jMethod<::jvoid(::jlong)>("set_window"), //
		jMethod<::jvoid(::jint)>("set_x"), //
		jMethod<::jvoid(::jint)>("set_y"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid()>("zero"), //
	};

	template<typename R = ::sun::awt::X11::XEvent, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDataSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDataSize")] != -1);
		return call<R>("getDataSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getPData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPData")] != -1);
		return call<R>("getPData", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getSize(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return scall<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_above(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_above")] != -1);
		return call<R>("get_above", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_border_width(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_border_width")] != -1);
		return call<R>("get_border_width", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_display(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_display")] != -1);
		return call<R>("get_display", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_event(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_event")] != -1);
		return call<R>("get_event", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_height(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_height")] != -1);
		return call<R>("get_height", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto get_override_redirect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_override_redirect")] != -1);
		return call<R>("get_override_redirect", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto get_send_event(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_send_event")] != -1);
		return call<R>("get_send_event", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_serial(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_serial")] != -1);
		return call<R>("get_serial", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_type(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_type")] != -1);
		return call<R>("get_type", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_width(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_width")] != -1);
		return call<R>("get_width", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_window(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_window")] != -1);
		return call<R>("get_window", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_x(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_x")] != -1);
		return call<R>("get_x", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_y(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_y")] != -1);
		return call<R>("get_y", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_above(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_above")] != -1);
		return call<R>("set_above", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_border_width(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_border_width")] != -1);
		return call<R>("set_border_width", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_display(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_display")] != -1);
		return call<R>("set_display", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_event(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_event")] != -1);
		return call<R>("set_event", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_height(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_height")] != -1);
		return call<R>("set_height", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_override_redirect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_override_redirect")] != -1);
		return call<R>("set_override_redirect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_send_event(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_send_event")] != -1);
		return call<R>("set_send_event", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_serial(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_serial")] != -1);
		return call<R>("set_serial", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_type(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_type")] != -1);
		return call<R>("set_type", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_width(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_width")] != -1);
		return call<R>("set_width", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_window(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_window")] != -1);
		return call<R>("set_window", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_x(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_x")] != -1);
		return call<R>("set_x", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_y(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_y")] != -1);
		return call<R>("set_y", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto zero(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("zero")] != -1);
		return call<R>("zero", std::forward<Args>(args)...);
	}

};

#endif
