#ifndef sun_awt_X11_XMenuItemPeer_HPP
#define sun_awt_X11_XMenuItemPeer_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::XMenuItemPeer : public jObject<::sun::awt::X11::XMenuItemPeer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "XMenuItemPeer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("disable"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jvoid()>("enable"), //
		jMethod<::jvoid(::jboolean)>("setEnabled"), //
		jMethod<::jvoid(::java::awt::Font)>("setFont"), //
		jMethod<::jvoid(::java::lang::String)>("setLabel"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto disable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("disable")] != -1);
		return call<R>("disable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto enable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("enable")] != -1);
		return call<R>("enable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEnabled")] != -1);
		return call<R>("setEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFont")] != -1);
		return call<R>("setFont", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLabel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLabel")] != -1);
		return call<R>("setLabel", std::forward<Args>(args)...);
	}

};

#endif
