#ifndef sun_awt_X11_PropMwmHints_HPP
#define sun_awt_X11_PropMwmHints_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::PropMwmHints : public jObject<::sun::awt::X11::PropMwmHints, ::sun::awt::X11::XWrapperBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "PropMwmHints";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jlong)>(), //
		jMethod<::sun::awt::X11::XEvent()>("clone"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jint()>("getDataSize"), //
		jMethod<::jlong()>("getPData"), //
		jMethod<::jint()>("getSize"), //
		jMethod<::jlong()>("get_decorations"), //
		jMethod<::jlong()>("get_flags"), //
		jMethod<::jlong()>("get_functions"), //
		jMethod<::jlong()>("get_inputMode"), //
		jMethod<::jlong()>("get_status"), //
		jMethod<::jvoid(::jlong)>("set_decorations"), //
		jMethod<::jvoid(::jlong)>("set_flags"), //
		jMethod<::jvoid(::jlong)>("set_functions"), //
		jMethod<::jvoid(::jlong)>("set_inputMode"), //
		jMethod<::jvoid(::jlong)>("set_status"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid()>("zero"), //
	};

	template<typename R = ::sun::awt::X11::XEvent, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDataSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDataSize")] != -1);
		return call<R>("getDataSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getPData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPData")] != -1);
		return call<R>("getPData", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getSize(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return scall<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_decorations(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_decorations")] != -1);
		return call<R>("get_decorations", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_flags(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_flags")] != -1);
		return call<R>("get_flags", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_functions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_functions")] != -1);
		return call<R>("get_functions", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_inputMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_inputMode")] != -1);
		return call<R>("get_inputMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_status(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_status")] != -1);
		return call<R>("get_status", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_decorations(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_decorations")] != -1);
		return call<R>("set_decorations", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_flags(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_flags")] != -1);
		return call<R>("set_flags", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_functions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_functions")] != -1);
		return call<R>("set_functions", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_inputMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_inputMode")] != -1);
		return call<R>("set_inputMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_status(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_status")] != -1);
		return call<R>("set_status", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto zero(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("zero")] != -1);
		return call<R>("zero", std::forward<Args>(args)...);
	}

};

#endif
