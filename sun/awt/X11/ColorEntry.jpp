#ifndef sun_awt_X11_ColorEntry_HPP
#define sun_awt_X11_ColorEntry_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::ColorEntry : public jObject<::sun::awt::X11::ColorEntry, ::sun::awt::X11::XWrapperBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "ColorEntry";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jlong)>(), //
		jMethod<::sun::awt::X11::XEvent()>("clone"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jint()>("getDataSize"), //
		jMethod<::jlong()>("getPData"), //
		jMethod<::jint()>("getSize"), //
		jMethod<::jbyte()>("get_b"), //
		jMethod<::jbyte()>("get_flags"), //
		jMethod<::jbyte()>("get_g"), //
		jMethod<::jbyte()>("get_r"), //
		jMethod<::jvoid(::jbyte)>("set_b"), //
		jMethod<::jvoid(::jbyte)>("set_flags"), //
		jMethod<::jvoid(::jbyte)>("set_g"), //
		jMethod<::jvoid(::jbyte)>("set_r"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid()>("zero"), //
	};

	template<typename R = ::sun::awt::X11::XEvent, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDataSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDataSize")] != -1);
		return call<R>("getDataSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getPData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPData")] != -1);
		return call<R>("getPData", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getSize(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return scall<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto get_b(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_b")] != -1);
		return call<R>("get_b", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto get_flags(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_flags")] != -1);
		return call<R>("get_flags", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto get_g(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_g")] != -1);
		return call<R>("get_g", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto get_r(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_r")] != -1);
		return call<R>("get_r", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_b(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_b")] != -1);
		return call<R>("set_b", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_flags(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_flags")] != -1);
		return call<R>("set_flags", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_g(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_g")] != -1);
		return call<R>("set_g", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_r(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_r")] != -1);
		return call<R>("set_r", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto zero(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("zero")] != -1);
		return call<R>("zero", std::forward<Args>(args)...);
	}

};

#endif
