#ifndef sun_awt_X11_ColorData_HPP
#define sun_awt_X11_ColorData_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::ColorData : public jObject<::sun::awt::X11::ColorData, ::sun::awt::X11::XWrapperBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "ColorData";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jlong)>(), //
		jMethod<::sun::awt::X11::XEvent()>("clone"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jint()>("getDataSize"), //
		jMethod<::jlong()>("getPData"), //
		jMethod<::jint()>("getSize"), //
		jMethod<::jlong()>("get_awt_Colors"), //
		jMethod<::sun::awt::X11::ColorEntry(::jint)>("get_awt_Colors"), //
		jMethod<::jlong()>("get_awt_icmLUT"), //
		jMethod<::jint(::jint)>("get_awt_icmLUT"), //
		jMethod<::jlong()>("get_awt_icmLUT2Colors"), //
		jMethod<::jbyte(::jint)>("get_awt_icmLUT2Colors"), //
		jMethod<::jint()>("get_awt_numICMcolors"), //
		jMethod<::jlong()>("get_img_clr_tbl"), //
		jMethod<::jbyte(::jint)>("get_img_clr_tbl"), //
		jMethod<::jlong()>("get_img_grays"), //
		jMethod<::jbyte(::jint)>("get_img_grays"), //
		jMethod<::jlong()>("get_img_oda_blue"), //
		jMethod<::jbyte(::jint)>("get_img_oda_blue"), //
		jMethod<::jlong()>("get_img_oda_green"), //
		jMethod<::jbyte(::jint)>("get_img_oda_green"), //
		jMethod<::jlong()>("get_img_oda_red"), //
		jMethod<::jbyte(::jint)>("get_img_oda_red"), //
		jMethod<::jlong()>("get_pGrayInverseLutData"), //
		jMethod<::jint(::jint)>("get_pGrayInverseLutData"), //
		jMethod<::jint()>("get_screendata"), //
		jMethod<::jvoid(::jlong)>("set_awt_Colors"), //
		jMethod<::jvoid(::jlong)>("set_awt_icmLUT"), //
		jMethod<::jvoid(::jlong)>("set_awt_icmLUT2Colors"), //
		jMethod<::jvoid(::jint)>("set_awt_numICMcolors"), //
		jMethod<::jvoid(::jlong)>("set_img_clr_tbl"), //
		jMethod<::jvoid(::jlong)>("set_img_grays"), //
		jMethod<::jvoid(::jlong)>("set_img_oda_blue"), //
		jMethod<::jvoid(::jlong)>("set_img_oda_green"), //
		jMethod<::jvoid(::jlong)>("set_img_oda_red"), //
		jMethod<::jvoid(::jlong)>("set_pGrayInverseLutData"), //
		jMethod<::jvoid(::jint)>("set_screendata"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid()>("zero"), //
	};

	template<typename R = ::sun::awt::X11::XEvent, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDataSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDataSize")] != -1);
		return call<R>("getDataSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getPData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPData")] != -1);
		return call<R>("getPData", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getSize(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return scall<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_awt_Colors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_awt_Colors")] != -1);
		return call<R>("get_awt_Colors", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_awt_icmLUT(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_awt_icmLUT")] != -1);
		return call<R>("get_awt_icmLUT", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_awt_icmLUT2Colors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_awt_icmLUT2Colors")] != -1);
		return call<R>("get_awt_icmLUT2Colors", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_awt_numICMcolors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_awt_numICMcolors")] != -1);
		return call<R>("get_awt_numICMcolors", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_img_clr_tbl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_img_clr_tbl")] != -1);
		return call<R>("get_img_clr_tbl", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_img_grays(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_img_grays")] != -1);
		return call<R>("get_img_grays", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_img_oda_blue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_img_oda_blue")] != -1);
		return call<R>("get_img_oda_blue", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_img_oda_green(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_img_oda_green")] != -1);
		return call<R>("get_img_oda_green", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_img_oda_red(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_img_oda_red")] != -1);
		return call<R>("get_img_oda_red", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_pGrayInverseLutData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_pGrayInverseLutData")] != -1);
		return call<R>("get_pGrayInverseLutData", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_screendata(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_screendata")] != -1);
		return call<R>("get_screendata", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_awt_Colors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_awt_Colors")] != -1);
		return call<R>("set_awt_Colors", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_awt_icmLUT(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_awt_icmLUT")] != -1);
		return call<R>("set_awt_icmLUT", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_awt_icmLUT2Colors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_awt_icmLUT2Colors")] != -1);
		return call<R>("set_awt_icmLUT2Colors", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_awt_numICMcolors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_awt_numICMcolors")] != -1);
		return call<R>("set_awt_numICMcolors", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_img_clr_tbl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_img_clr_tbl")] != -1);
		return call<R>("set_img_clr_tbl", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_img_grays(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_img_grays")] != -1);
		return call<R>("set_img_grays", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_img_oda_blue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_img_oda_blue")] != -1);
		return call<R>("set_img_oda_blue", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_img_oda_green(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_img_oda_green")] != -1);
		return call<R>("set_img_oda_green", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_img_oda_red(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_img_oda_red")] != -1);
		return call<R>("set_img_oda_red", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_pGrayInverseLutData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_pGrayInverseLutData")] != -1);
		return call<R>("set_pGrayInverseLutData", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_screendata(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_screendata")] != -1);
		return call<R>("set_screendata", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto zero(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("zero")] != -1);
		return call<R>("zero", std::forward<Args>(args)...);
	}

};

#endif
