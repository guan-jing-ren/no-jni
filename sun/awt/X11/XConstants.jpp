#ifndef sun_awt_X11_XConstants_HPP
#define sun_awt_X11_XConstants_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::XConstants : public jObject<::sun::awt::X11::XConstants, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "XConstants";

	constexpr static Enume field_signatures{
		jField<::jint>("ALL_BUTTONS_MASK"), //
		jField<::jint>("Above"), //
		jField<::jlong>("AllTemporary"), //
		jField<::jint>("AllocAll"), //
		jField<::jint>("AllocNone"), //
		jField<::jint>("AllowExposures"), //
		jField<::jint>("AlreadyGrabbed"), //
		jField<::jint>("Always"), //
		jField<::jlong>("AnyButton"), //
		jField<::jlong>("AnyKey"), //
		jField<::jint>("AnyModifier"), //
		jField<::jlong>("AnyPropertyType"), //
		jField<::jint>("ArcChord"), //
		jField<::jint>("ArcPieSlice"), //
		jField<::jint>("AsyncBoth"), //
		jField<::jint>("AsyncKeyboard"), //
		jField<::jint>("AsyncPointer"), //
		jField<::jint>("AutoRepeatModeDefault"), //
		jField<::jint>("AutoRepeatModeOff"), //
		jField<::jint>("AutoRepeatModeOn"), //
		jField<::jint>("BadAccess"), //
		jField<::jint>("BadAlloc"), //
		jField<::jint>("BadAtom"), //
		jField<::jint>("BadColor"), //
		jField<::jint>("BadCursor"), //
		jField<::jint>("BadDrawable"), //
		jField<::jint>("BadFont"), //
		jField<::jint>("BadGC"), //
		jField<::jint>("BadIDChoice"), //
		jField<::jint>("BadImplementation"), //
		jField<::jint>("BadLength"), //
		jField<::jint>("BadMatch"), //
		jField<::jint>("BadName"), //
		jField<::jint>("BadPixmap"), //
		jField<::jint>("BadRequest"), //
		jField<::jint>("BadValue"), //
		jField<::jint>("BadWindow"), //
		jField<::jint>("Below"), //
		jField<::jint>("BottomIf"), //
		jField<::jlong>("Button1MotionMask"), //
		jField<::jlong>("Button2MotionMask"), //
		jField<::jlong>("Button3MotionMask"), //
		jField<::jlong>("Button4MotionMask"), //
		jField<::jlong>("Button5MotionMask"), //
		jField<::jlong>("ButtonMotionMask"), //
		jField<::jint>("ButtonPress"), //
		jField<::jlong>("ButtonPressMask"), //
		jField<::jint>("ButtonRelease"), //
		jField<::jlong>("ButtonReleaseMask"), //
		jField<::jlong>("CWBackPixel"), //
		jField<::jlong>("CWBackPixmap"), //
		jField<::jlong>("CWBackingPixel"), //
		jField<::jlong>("CWBackingPlanes"), //
		jField<::jlong>("CWBackingStore"), //
		jField<::jlong>("CWBitGravity"), //
		jField<::jlong>("CWBorderPixel"), //
		jField<::jlong>("CWBorderPixmap"), //
		jField<::jint>("CWBorderWidth"), //
		jField<::jlong>("CWColormap"), //
		jField<::jlong>("CWCursor"), //
		jField<::jlong>("CWDontPropagate"), //
		jField<::jlong>("CWEventMask"), //
		jField<::jint>("CWHeight"), //
		jField<::jlong>("CWOverrideRedirect"), //
		jField<::jlong>("CWSaveUnder"), //
		jField<::jint>("CWSibling"), //
		jField<::jint>("CWStackMode"), //
		jField<::jint>("CWWidth"), //
		jField<::jlong>("CWWinGravity"), //
		jField<::jint>("CWX"), //
		jField<::jint>("CWY"), //
		jField<::jint>("CapButt"), //
		jField<::jint>("CapNotLast"), //
		jField<::jint>("CapProjecting"), //
		jField<::jint>("CapRound"), //
		jField<::jint>("CenterGravity"), //
		jField<::jint>("CirculateNotify"), //
		jField<::jint>("CirculateRequest"), //
		jField<::jint>("ClientMessage"), //
		jField<::jint>("ClipByChildren"), //
		jField<::jlong>("ColormapChangeMask"), //
		jField<::jint>("ColormapInstalled"), //
		jField<::jint>("ColormapNotify"), //
		jField<::jint>("ColormapUninstalled"), //
		jField<::jint>("Complex"), //
		jField<::jint>("ConfigureNotify"), //
		jField<::jint>("ConfigureRequest"), //
		jField<::jint>("ControlMapIndex"), //
		jField<::jint>("ControlMask"), //
		jField<::jint>("Convex"), //
		jField<::jint>("CoordModeOrigin"), //
		jField<::jint>("CoordModePrevious"), //
		jField<::jlong>("CopyFromParent"), //
		jField<::jint>("CreateNotify"), //
		jField<::jlong>("CurrentTime"), //
		jField<::jint>("CursorShape"), //
		jField<::jint>("DefaultBlanking"), //
		jField<::jint>("DefaultExposures"), //
		jField<::jint>("DestroyAll"), //
		jField<::jint>("DestroyNotify"), //
		jField<::jint>("DirectColor"), //
		jField<::jint>("DisableAccess"), //
		jField<::jint>("DisableScreenInterval"), //
		jField<::jint>("DisableScreenSaver"), //
		jField<::jint>("DoBlue"), //
		jField<::jint>("DoGreen"), //
		jField<::jint>("DoRed"), //
		jField<::jint>("DontAllowExposures"), //
		jField<::jint>("DontPreferBlanking"), //
		jField<::jint>("EastGravity"), //
		jField<::jint>("EnableAccess"), //
		jField<::jint>("EnterNotify"), //
		jField<::jlong>("EnterWindowMask"), //
		jField<::jint>("EvenOddRule"), //
		jField<::jint>("Expose"), //
		jField<::jlong>("ExposureMask"), //
		jField<::jint>("FamilyChaos"), //
		jField<::jint>("FamilyDECnet"), //
		jField<::jint>("FamilyInternet"), //
		jField<::jint>("FillOpaqueStippled"), //
		jField<::jint>("FillSolid"), //
		jField<::jint>("FillStippled"), //
		jField<::jint>("FillTiled"), //
		jField<::jint>("FirstExtensionError"), //
		jField<::jlong>("FocusChangeMask"), //
		jField<::jint>("FocusIn"), //
		jField<::jint>("FocusOut"), //
		jField<::jint>("FontChange"), //
		jField<::jint>("FontLeftToRight"), //
		jField<::jint>("FontRightToLeft"), //
		jField<::jint>("ForgetGravity"), //
		jField<::jlong>("GCArcMode"), //
		jField<::jlong>("GCBackground"), //
		jField<::jlong>("GCCapStyle"), //
		jField<::jlong>("GCClipMask"), //
		jField<::jlong>("GCClipXOrigin"), //
		jField<::jlong>("GCClipYOrigin"), //
		jField<::jlong>("GCDashList"), //
		jField<::jlong>("GCDashOffset"), //
		jField<::jlong>("GCFillRule"), //
		jField<::jlong>("GCFillStyle"), //
		jField<::jlong>("GCFont"), //
		jField<::jlong>("GCForeground"), //
		jField<::jlong>("GCFunction"), //
		jField<::jlong>("GCGraphicsExposures"), //
		jField<::jlong>("GCJoinStyle"), //
		jField<::jint>("GCLastBit"), //
		jField<::jlong>("GCLineStyle"), //
		jField<::jlong>("GCLineWidth"), //
		jField<::jlong>("GCPlaneMask"), //
		jField<::jlong>("GCStipple"), //
		jField<::jlong>("GCSubwindowMode"), //
		jField<::jlong>("GCTile"), //
		jField<::jlong>("GCTileStipXOrigin"), //
		jField<::jlong>("GCTileStipYOrigin"), //
		jField<::jint>("GXand"), //
		jField<::jint>("GXandInverted"), //
		jField<::jint>("GXandReverse"), //
		jField<::jint>("GXclear"), //
		jField<::jint>("GXcopy"), //
		jField<::jint>("GXcopyInverted"), //
		jField<::jint>("GXequiv"), //
		jField<::jint>("GXinvert"), //
		jField<::jint>("GXnand"), //
		jField<::jint>("GXnoop"), //
		jField<::jint>("GXnor"), //
		jField<::jint>("GXor"), //
		jField<::jint>("GXorInverted"), //
		jField<::jint>("GXorReverse"), //
		jField<::jint>("GXset"), //
		jField<::jint>("GXxor"), //
		jField<::jint>("GrabFrozen"), //
		jField<::jint>("GrabInvalidTime"), //
		jField<::jint>("GrabModeAsync"), //
		jField<::jint>("GrabModeSync"), //
		jField<::jint>("GrabNotViewable"), //
		jField<::jint>("GrabSuccess"), //
		jField<::jint>("GraphicsExpose"), //
		jField<::jint>("GravityNotify"), //
		jField<::jint>("GrayScale"), //
		jField<::jint>("HostDelete"), //
		jField<::jint>("HostInsert"), //
		jField<::jint>("IncludeInferiors"), //
		jField<::jlong>("InputFocus"), //
		jField<::jint>("InputOnly"), //
		jField<::jint>("InputOutput"), //
		jField<::jint>("IsUnmapped"), //
		jField<::jint>("IsUnviewable"), //
		jField<::jint>("IsViewable"), //
		jField<::jint>("JoinBevel"), //
		jField<::jint>("JoinMiter"), //
		jField<::jint>("JoinRound"), //
		jField<::jlong>("KBAutoRepeatMode"), //
		jField<::jlong>("KBBellDuration"), //
		jField<::jlong>("KBBellPercent"), //
		jField<::jlong>("KBBellPitch"), //
		jField<::jlong>("KBKey"), //
		jField<::jlong>("KBKeyClickPercent"), //
		jField<::jlong>("KBLed"), //
		jField<::jlong>("KBLedMode"), //
		jField<::jint>("KeyPress"), //
		jField<::jlong>("KeyPressMask"), //
		jField<::jint>("KeyRelease"), //
		jField<::jlong>("KeyReleaseMask"), //
		jField<::jint>("KeymapNotify"), //
		jField<::jlong>("KeymapStateMask"), //
		jField<::jint>("LASTEvent"), //
		jField<::jint>("LSBFirst"), //
		jField<::jint>("LastExtensionError"), //
		jField<::jint>("LeaveNotify"), //
		jField<::jlong>("LeaveWindowMask"), //
		jField<::jint>("LedModeOff"), //
		jField<::jint>("LedModeOn"), //
		jField<::jint>("LineDoubleDash"), //
		jField<::jint>("LineOnOffDash"), //
		jField<::jint>("LineSolid"), //
		jField<::jint>("LockMapIndex"), //
		jField<::jint>("LockMask"), //
		jField<::jint>("LowerHighest"), //
		jField<::jint>("MAX_BUTTONS"), //
		jField<::jint>("MSBFirst"), //
		jField<::jint>("MapNotify"), //
		jField<::jint>("MapRequest"), //
		jField<::jint>("MappingBusy"), //
		jField<::jint>("MappingFailed"), //
		jField<::jint>("MappingKeyboard"), //
		jField<::jint>("MappingModifier"), //
		jField<::jint>("MappingNotify"), //
		jField<::jint>("MappingPointer"), //
		jField<::jint>("MappingSuccess"), //
		jField<::jint>("Mod1MapIndex"), //
		jField<::jint>("Mod1Mask"), //
		jField<::jint>("Mod2MapIndex"), //
		jField<::jint>("Mod2Mask"), //
		jField<::jint>("Mod3MapIndex"), //
		jField<::jint>("Mod3Mask"), //
		jField<::jint>("Mod4MapIndex"), //
		jField<::jint>("Mod4Mask"), //
		jField<::jint>("Mod5MapIndex"), //
		jField<::jint>("Mod5Mask"), //
		jField<::jint>("MotionNotify"), //
		jField<::jlong>("NoEventMask"), //
		jField<::jint>("NoExpose"), //
		jField<::jlong>("NoSymbol"), //
		jField<::jint>("Nonconvex"), //
		jField<::jlong>("None"), //
		jField<::jint>("NorthEastGravity"), //
		jField<::jint>("NorthGravity"), //
		jField<::jint>("NorthWestGravity"), //
		jField<::jint>("NotUseful"), //
		jField<::jint>("NotifyAncestor"), //
		jField<::jint>("NotifyDetailNone"), //
		jField<::jint>("NotifyGrab"), //
		jField<::jint>("NotifyHint"), //
		jField<::jint>("NotifyInferior"), //
		jField<::jint>("NotifyNonlinear"), //
		jField<::jint>("NotifyNonlinearVirtual"), //
		jField<::jint>("NotifyNormal"), //
		jField<::jint>("NotifyPointer"), //
		jField<::jint>("NotifyPointerRoot"), //
		jField<::jint>("NotifyUngrab"), //
		jField<::jint>("NotifyVirtual"), //
		jField<::jint>("NotifyWhileGrabbed"), //
		jField<::jint>("Opposite"), //
		jField<::jlong>("OwnerGrabButtonMask"), //
		jField<::jlong>("ParentRelative"), //
		jField<::jint>("PlaceOnBottom"), //
		jField<::jint>("PlaceOnTop"), //
		jField<::jlong>("PointerMotionHintMask"), //
		jField<::jlong>("PointerMotionMask"), //
		jField<::jlong>("PointerRoot"), //
		jField<::jlong>("PointerWindow"), //
		jField<::jint>("PreferBlanking"), //
		jField<::jint>("PropModeAppend"), //
		jField<::jint>("PropModePrepend"), //
		jField<::jint>("PropModeReplace"), //
		jField<::jlong>("PropertyChangeMask"), //
		jField<::jint>("PropertyDelete"), //
		jField<::jint>("PropertyNewValue"), //
		jField<::jint>("PropertyNotify"), //
		jField<::jint>("PseudoColor"), //
		jField<::jint>("QueuedAfterFlush"), //
		jField<::jint>("QueuedAfterReading"), //
		jField<::jint>("QueuedAlready"), //
		jField<::jint>("RaiseLowest"), //
		jField<::jint>("ReparentNotify"), //
		jField<::jint>("ReplayKeyboard"), //
		jField<::jint>("ReplayPointer"), //
		jField<::jlong>("ResizeRedirectMask"), //
		jField<::jint>("ResizeRequest"), //
		jField<::jint>("RetainPermanent"), //
		jField<::jint>("RetainTemporary"), //
		jField<::jint>("RevertToNone"), //
		jField<::jint>("RevertToParent"), //
		jField<::jint>("RevertToPointerRoot"), //
		jField<::jint>("ScreenSaverActive"), //
		jField<::jint>("ScreenSaverReset"), //
		jField<::jint>("SelectionClear"), //
		jField<::jint>("SelectionNotify"), //
		jField<::jint>("SelectionRequest"), //
		jField<::jint>("SetModeDelete"), //
		jField<::jint>("SetModeInsert"), //
		jField<::jint>("ShiftMapIndex"), //
		jField<::jint>("ShiftMask"), //
		jField<::jint>("SouthEastGravity"), //
		jField<::jint>("SouthGravity"), //
		jField<::jint>("SouthWestGravity"), //
		jField<::jint>("StaticColor"), //
		jField<::jint>("StaticGravity"), //
		jField<::jint>("StaticGray"), //
		jField<::jint>("StippleShape"), //
		jField<::jlong>("StructureNotifyMask"), //
		jField<::jlong>("SubstructureNotifyMask"), //
		jField<::jlong>("SubstructureRedirectMask"), //
		jField<::jint>("Success"), //
		jField<::jint>("SyncBoth"), //
		jField<::jint>("SyncKeyboard"), //
		jField<::jint>("SyncPointer"), //
		jField<::jint>("TileShape"), //
		jField<::jint>("TopIf"), //
		jField<::jint>("TrueColor"), //
		jField<::jint>("UnmapGravity"), //
		jField<::jint>("UnmapNotify"), //
		jField<::jint>("Unsorted"), //
		jField<::jlong>("VisibilityChangeMask"), //
		jField<::jint>("VisibilityFullyObscured"), //
		jField<::jint>("VisibilityNotify"), //
		jField<::jint>("VisibilityPartiallyObscured"), //
		jField<::jint>("VisibilityUnobscured"), //
		jField<::jint>("WestGravity"), //
		jField<::jint>("WhenMapped"), //
		jField<::jint>("WindingRule"), //
		jField<::jint>("XYBitmap"), //
		jField<::jint>("XYPixmap"), //
		jField<::jint>("X_PROTOCOL"), //
		jField<::jint>("X_PROTOCOL_REVISION"), //
		jField<::jlong>("XkbGroupStateMask"), //
		jField<::jlong>("XkbKeySymsMask"), //
		jField<::jlong>("XkbKeyTypesMask"), //
		jField<::jint>("XkbMapNotify"), //
		jField<::jlong>("XkbMapNotifyMask"), //
		jField<::jlong>("XkbModifierMapMask"), //
		jField<::jint>("XkbNewKeyboardNotify"), //
		jField<::jlong>("XkbNewKeyboardNotifyMask"), //
		jField<::jint>("XkbStateNotify"), //
		jField<::jlong>("XkbStateNotifyMask"), //
		jField<::jint>("XkbUseCoreKbd"), //
		jField<::jlong>("XkbVirtualModsMask"), //
		jField<::jint>("YSorted"), //
		jField<::jint>("YXBanded"), //
		jField<::jint>("YXSorted"), //
		jField<::jint>("ZPixmap"), //
		jField<::jint *>("buttons"), //
	};

	template<typename F = ::jint>
	static auto ALL_BUTTONS_MASK() {
		static_assert(field_signatures[jField<F>("ALL_BUTTONS_MASK")] != -1);
		return sat<F>("ALL_BUTTONS_MASK");
	}

	template<typename F = ::jint>
	static auto Above() {
		static_assert(field_signatures[jField<F>("Above")] != -1);
		return sat<F>("Above");
	}

	template<typename F = ::jlong>
	static auto AllTemporary() {
		static_assert(field_signatures[jField<F>("AllTemporary")] != -1);
		return sat<F>("AllTemporary");
	}

	template<typename F = ::jint>
	static auto AllocAll() {
		static_assert(field_signatures[jField<F>("AllocAll")] != -1);
		return sat<F>("AllocAll");
	}

	template<typename F = ::jint>
	static auto AllocNone() {
		static_assert(field_signatures[jField<F>("AllocNone")] != -1);
		return sat<F>("AllocNone");
	}

	template<typename F = ::jint>
	static auto AllowExposures() {
		static_assert(field_signatures[jField<F>("AllowExposures")] != -1);
		return sat<F>("AllowExposures");
	}

	template<typename F = ::jint>
	static auto AlreadyGrabbed() {
		static_assert(field_signatures[jField<F>("AlreadyGrabbed")] != -1);
		return sat<F>("AlreadyGrabbed");
	}

	template<typename F = ::jint>
	static auto Always() {
		static_assert(field_signatures[jField<F>("Always")] != -1);
		return sat<F>("Always");
	}

	template<typename F = ::jlong>
	static auto AnyButton() {
		static_assert(field_signatures[jField<F>("AnyButton")] != -1);
		return sat<F>("AnyButton");
	}

	template<typename F = ::jlong>
	static auto AnyKey() {
		static_assert(field_signatures[jField<F>("AnyKey")] != -1);
		return sat<F>("AnyKey");
	}

	template<typename F = ::jint>
	static auto AnyModifier() {
		static_assert(field_signatures[jField<F>("AnyModifier")] != -1);
		return sat<F>("AnyModifier");
	}

	template<typename F = ::jlong>
	static auto AnyPropertyType() {
		static_assert(field_signatures[jField<F>("AnyPropertyType")] != -1);
		return sat<F>("AnyPropertyType");
	}

	template<typename F = ::jint>
	static auto ArcChord() {
		static_assert(field_signatures[jField<F>("ArcChord")] != -1);
		return sat<F>("ArcChord");
	}

	template<typename F = ::jint>
	static auto ArcPieSlice() {
		static_assert(field_signatures[jField<F>("ArcPieSlice")] != -1);
		return sat<F>("ArcPieSlice");
	}

	template<typename F = ::jint>
	static auto AsyncBoth() {
		static_assert(field_signatures[jField<F>("AsyncBoth")] != -1);
		return sat<F>("AsyncBoth");
	}

	template<typename F = ::jint>
	static auto AsyncKeyboard() {
		static_assert(field_signatures[jField<F>("AsyncKeyboard")] != -1);
		return sat<F>("AsyncKeyboard");
	}

	template<typename F = ::jint>
	static auto AsyncPointer() {
		static_assert(field_signatures[jField<F>("AsyncPointer")] != -1);
		return sat<F>("AsyncPointer");
	}

	template<typename F = ::jint>
	static auto AutoRepeatModeDefault() {
		static_assert(field_signatures[jField<F>("AutoRepeatModeDefault")] != -1);
		return sat<F>("AutoRepeatModeDefault");
	}

	template<typename F = ::jint>
	static auto AutoRepeatModeOff() {
		static_assert(field_signatures[jField<F>("AutoRepeatModeOff")] != -1);
		return sat<F>("AutoRepeatModeOff");
	}

	template<typename F = ::jint>
	static auto AutoRepeatModeOn() {
		static_assert(field_signatures[jField<F>("AutoRepeatModeOn")] != -1);
		return sat<F>("AutoRepeatModeOn");
	}

	template<typename F = ::jint>
	static auto BadAccess() {
		static_assert(field_signatures[jField<F>("BadAccess")] != -1);
		return sat<F>("BadAccess");
	}

	template<typename F = ::jint>
	static auto BadAlloc() {
		static_assert(field_signatures[jField<F>("BadAlloc")] != -1);
		return sat<F>("BadAlloc");
	}

	template<typename F = ::jint>
	static auto BadAtom() {
		static_assert(field_signatures[jField<F>("BadAtom")] != -1);
		return sat<F>("BadAtom");
	}

	template<typename F = ::jint>
	static auto BadColor() {
		static_assert(field_signatures[jField<F>("BadColor")] != -1);
		return sat<F>("BadColor");
	}

	template<typename F = ::jint>
	static auto BadCursor() {
		static_assert(field_signatures[jField<F>("BadCursor")] != -1);
		return sat<F>("BadCursor");
	}

	template<typename F = ::jint>
	static auto BadDrawable() {
		static_assert(field_signatures[jField<F>("BadDrawable")] != -1);
		return sat<F>("BadDrawable");
	}

	template<typename F = ::jint>
	static auto BadFont() {
		static_assert(field_signatures[jField<F>("BadFont")] != -1);
		return sat<F>("BadFont");
	}

	template<typename F = ::jint>
	static auto BadGC() {
		static_assert(field_signatures[jField<F>("BadGC")] != -1);
		return sat<F>("BadGC");
	}

	template<typename F = ::jint>
	static auto BadIDChoice() {
		static_assert(field_signatures[jField<F>("BadIDChoice")] != -1);
		return sat<F>("BadIDChoice");
	}

	template<typename F = ::jint>
	static auto BadImplementation() {
		static_assert(field_signatures[jField<F>("BadImplementation")] != -1);
		return sat<F>("BadImplementation");
	}

	template<typename F = ::jint>
	static auto BadLength() {
		static_assert(field_signatures[jField<F>("BadLength")] != -1);
		return sat<F>("BadLength");
	}

	template<typename F = ::jint>
	static auto BadMatch() {
		static_assert(field_signatures[jField<F>("BadMatch")] != -1);
		return sat<F>("BadMatch");
	}

	template<typename F = ::jint>
	static auto BadName() {
		static_assert(field_signatures[jField<F>("BadName")] != -1);
		return sat<F>("BadName");
	}

	template<typename F = ::jint>
	static auto BadPixmap() {
		static_assert(field_signatures[jField<F>("BadPixmap")] != -1);
		return sat<F>("BadPixmap");
	}

	template<typename F = ::jint>
	static auto BadRequest() {
		static_assert(field_signatures[jField<F>("BadRequest")] != -1);
		return sat<F>("BadRequest");
	}

	template<typename F = ::jint>
	static auto BadValue() {
		static_assert(field_signatures[jField<F>("BadValue")] != -1);
		return sat<F>("BadValue");
	}

	template<typename F = ::jint>
	static auto BadWindow() {
		static_assert(field_signatures[jField<F>("BadWindow")] != -1);
		return sat<F>("BadWindow");
	}

	template<typename F = ::jint>
	static auto Below() {
		static_assert(field_signatures[jField<F>("Below")] != -1);
		return sat<F>("Below");
	}

	template<typename F = ::jint>
	static auto BottomIf() {
		static_assert(field_signatures[jField<F>("BottomIf")] != -1);
		return sat<F>("BottomIf");
	}

	template<typename F = ::jlong>
	static auto Button1MotionMask() {
		static_assert(field_signatures[jField<F>("Button1MotionMask")] != -1);
		return sat<F>("Button1MotionMask");
	}

	template<typename F = ::jlong>
	static auto Button2MotionMask() {
		static_assert(field_signatures[jField<F>("Button2MotionMask")] != -1);
		return sat<F>("Button2MotionMask");
	}

	template<typename F = ::jlong>
	static auto Button3MotionMask() {
		static_assert(field_signatures[jField<F>("Button3MotionMask")] != -1);
		return sat<F>("Button3MotionMask");
	}

	template<typename F = ::jlong>
	static auto Button4MotionMask() {
		static_assert(field_signatures[jField<F>("Button4MotionMask")] != -1);
		return sat<F>("Button4MotionMask");
	}

	template<typename F = ::jlong>
	static auto Button5MotionMask() {
		static_assert(field_signatures[jField<F>("Button5MotionMask")] != -1);
		return sat<F>("Button5MotionMask");
	}

	template<typename F = ::jlong>
	static auto ButtonMotionMask() {
		static_assert(field_signatures[jField<F>("ButtonMotionMask")] != -1);
		return sat<F>("ButtonMotionMask");
	}

	template<typename F = ::jint>
	static auto ButtonPress() {
		static_assert(field_signatures[jField<F>("ButtonPress")] != -1);
		return sat<F>("ButtonPress");
	}

	template<typename F = ::jlong>
	static auto ButtonPressMask() {
		static_assert(field_signatures[jField<F>("ButtonPressMask")] != -1);
		return sat<F>("ButtonPressMask");
	}

	template<typename F = ::jint>
	static auto ButtonRelease() {
		static_assert(field_signatures[jField<F>("ButtonRelease")] != -1);
		return sat<F>("ButtonRelease");
	}

	template<typename F = ::jlong>
	static auto ButtonReleaseMask() {
		static_assert(field_signatures[jField<F>("ButtonReleaseMask")] != -1);
		return sat<F>("ButtonReleaseMask");
	}

	template<typename F = ::jlong>
	static auto CWBackPixel() {
		static_assert(field_signatures[jField<F>("CWBackPixel")] != -1);
		return sat<F>("CWBackPixel");
	}

	template<typename F = ::jlong>
	static auto CWBackPixmap() {
		static_assert(field_signatures[jField<F>("CWBackPixmap")] != -1);
		return sat<F>("CWBackPixmap");
	}

	template<typename F = ::jlong>
	static auto CWBackingPixel() {
		static_assert(field_signatures[jField<F>("CWBackingPixel")] != -1);
		return sat<F>("CWBackingPixel");
	}

	template<typename F = ::jlong>
	static auto CWBackingPlanes() {
		static_assert(field_signatures[jField<F>("CWBackingPlanes")] != -1);
		return sat<F>("CWBackingPlanes");
	}

	template<typename F = ::jlong>
	static auto CWBackingStore() {
		static_assert(field_signatures[jField<F>("CWBackingStore")] != -1);
		return sat<F>("CWBackingStore");
	}

	template<typename F = ::jlong>
	static auto CWBitGravity() {
		static_assert(field_signatures[jField<F>("CWBitGravity")] != -1);
		return sat<F>("CWBitGravity");
	}

	template<typename F = ::jlong>
	static auto CWBorderPixel() {
		static_assert(field_signatures[jField<F>("CWBorderPixel")] != -1);
		return sat<F>("CWBorderPixel");
	}

	template<typename F = ::jlong>
	static auto CWBorderPixmap() {
		static_assert(field_signatures[jField<F>("CWBorderPixmap")] != -1);
		return sat<F>("CWBorderPixmap");
	}

	template<typename F = ::jint>
	static auto CWBorderWidth() {
		static_assert(field_signatures[jField<F>("CWBorderWidth")] != -1);
		return sat<F>("CWBorderWidth");
	}

	template<typename F = ::jlong>
	static auto CWColormap() {
		static_assert(field_signatures[jField<F>("CWColormap")] != -1);
		return sat<F>("CWColormap");
	}

	template<typename F = ::jlong>
	static auto CWCursor() {
		static_assert(field_signatures[jField<F>("CWCursor")] != -1);
		return sat<F>("CWCursor");
	}

	template<typename F = ::jlong>
	static auto CWDontPropagate() {
		static_assert(field_signatures[jField<F>("CWDontPropagate")] != -1);
		return sat<F>("CWDontPropagate");
	}

	template<typename F = ::jlong>
	static auto CWEventMask() {
		static_assert(field_signatures[jField<F>("CWEventMask")] != -1);
		return sat<F>("CWEventMask");
	}

	template<typename F = ::jint>
	static auto CWHeight() {
		static_assert(field_signatures[jField<F>("CWHeight")] != -1);
		return sat<F>("CWHeight");
	}

	template<typename F = ::jlong>
	static auto CWOverrideRedirect() {
		static_assert(field_signatures[jField<F>("CWOverrideRedirect")] != -1);
		return sat<F>("CWOverrideRedirect");
	}

	template<typename F = ::jlong>
	static auto CWSaveUnder() {
		static_assert(field_signatures[jField<F>("CWSaveUnder")] != -1);
		return sat<F>("CWSaveUnder");
	}

	template<typename F = ::jint>
	static auto CWSibling() {
		static_assert(field_signatures[jField<F>("CWSibling")] != -1);
		return sat<F>("CWSibling");
	}

	template<typename F = ::jint>
	static auto CWStackMode() {
		static_assert(field_signatures[jField<F>("CWStackMode")] != -1);
		return sat<F>("CWStackMode");
	}

	template<typename F = ::jint>
	static auto CWWidth() {
		static_assert(field_signatures[jField<F>("CWWidth")] != -1);
		return sat<F>("CWWidth");
	}

	template<typename F = ::jlong>
	static auto CWWinGravity() {
		static_assert(field_signatures[jField<F>("CWWinGravity")] != -1);
		return sat<F>("CWWinGravity");
	}

	template<typename F = ::jint>
	static auto CWX() {
		static_assert(field_signatures[jField<F>("CWX")] != -1);
		return sat<F>("CWX");
	}

	template<typename F = ::jint>
	static auto CWY() {
		static_assert(field_signatures[jField<F>("CWY")] != -1);
		return sat<F>("CWY");
	}

	template<typename F = ::jint>
	static auto CapButt() {
		static_assert(field_signatures[jField<F>("CapButt")] != -1);
		return sat<F>("CapButt");
	}

	template<typename F = ::jint>
	static auto CapNotLast() {
		static_assert(field_signatures[jField<F>("CapNotLast")] != -1);
		return sat<F>("CapNotLast");
	}

	template<typename F = ::jint>
	static auto CapProjecting() {
		static_assert(field_signatures[jField<F>("CapProjecting")] != -1);
		return sat<F>("CapProjecting");
	}

	template<typename F = ::jint>
	static auto CapRound() {
		static_assert(field_signatures[jField<F>("CapRound")] != -1);
		return sat<F>("CapRound");
	}

	template<typename F = ::jint>
	static auto CenterGravity() {
		static_assert(field_signatures[jField<F>("CenterGravity")] != -1);
		return sat<F>("CenterGravity");
	}

	template<typename F = ::jint>
	static auto CirculateNotify() {
		static_assert(field_signatures[jField<F>("CirculateNotify")] != -1);
		return sat<F>("CirculateNotify");
	}

	template<typename F = ::jint>
	static auto CirculateRequest() {
		static_assert(field_signatures[jField<F>("CirculateRequest")] != -1);
		return sat<F>("CirculateRequest");
	}

	template<typename F = ::jint>
	static auto ClientMessage() {
		static_assert(field_signatures[jField<F>("ClientMessage")] != -1);
		return sat<F>("ClientMessage");
	}

	template<typename F = ::jint>
	static auto ClipByChildren() {
		static_assert(field_signatures[jField<F>("ClipByChildren")] != -1);
		return sat<F>("ClipByChildren");
	}

	template<typename F = ::jlong>
	static auto ColormapChangeMask() {
		static_assert(field_signatures[jField<F>("ColormapChangeMask")] != -1);
		return sat<F>("ColormapChangeMask");
	}

	template<typename F = ::jint>
	static auto ColormapInstalled() {
		static_assert(field_signatures[jField<F>("ColormapInstalled")] != -1);
		return sat<F>("ColormapInstalled");
	}

	template<typename F = ::jint>
	static auto ColormapNotify() {
		static_assert(field_signatures[jField<F>("ColormapNotify")] != -1);
		return sat<F>("ColormapNotify");
	}

	template<typename F = ::jint>
	static auto ColormapUninstalled() {
		static_assert(field_signatures[jField<F>("ColormapUninstalled")] != -1);
		return sat<F>("ColormapUninstalled");
	}

	template<typename F = ::jint>
	static auto Complex() {
		static_assert(field_signatures[jField<F>("Complex")] != -1);
		return sat<F>("Complex");
	}

	template<typename F = ::jint>
	static auto ConfigureNotify() {
		static_assert(field_signatures[jField<F>("ConfigureNotify")] != -1);
		return sat<F>("ConfigureNotify");
	}

	template<typename F = ::jint>
	static auto ConfigureRequest() {
		static_assert(field_signatures[jField<F>("ConfigureRequest")] != -1);
		return sat<F>("ConfigureRequest");
	}

	template<typename F = ::jint>
	static auto ControlMapIndex() {
		static_assert(field_signatures[jField<F>("ControlMapIndex")] != -1);
		return sat<F>("ControlMapIndex");
	}

	template<typename F = ::jint>
	static auto ControlMask() {
		static_assert(field_signatures[jField<F>("ControlMask")] != -1);
		return sat<F>("ControlMask");
	}

	template<typename F = ::jint>
	static auto Convex() {
		static_assert(field_signatures[jField<F>("Convex")] != -1);
		return sat<F>("Convex");
	}

	template<typename F = ::jint>
	static auto CoordModeOrigin() {
		static_assert(field_signatures[jField<F>("CoordModeOrigin")] != -1);
		return sat<F>("CoordModeOrigin");
	}

	template<typename F = ::jint>
	static auto CoordModePrevious() {
		static_assert(field_signatures[jField<F>("CoordModePrevious")] != -1);
		return sat<F>("CoordModePrevious");
	}

	template<typename F = ::jlong>
	static auto CopyFromParent() {
		static_assert(field_signatures[jField<F>("CopyFromParent")] != -1);
		return sat<F>("CopyFromParent");
	}

	template<typename F = ::jint>
	static auto CreateNotify() {
		static_assert(field_signatures[jField<F>("CreateNotify")] != -1);
		return sat<F>("CreateNotify");
	}

	template<typename F = ::jlong>
	static auto CurrentTime() {
		static_assert(field_signatures[jField<F>("CurrentTime")] != -1);
		return sat<F>("CurrentTime");
	}

	template<typename F = ::jint>
	static auto CursorShape() {
		static_assert(field_signatures[jField<F>("CursorShape")] != -1);
		return sat<F>("CursorShape");
	}

	template<typename F = ::jint>
	static auto DefaultBlanking() {
		static_assert(field_signatures[jField<F>("DefaultBlanking")] != -1);
		return sat<F>("DefaultBlanking");
	}

	template<typename F = ::jint>
	static auto DefaultExposures() {
		static_assert(field_signatures[jField<F>("DefaultExposures")] != -1);
		return sat<F>("DefaultExposures");
	}

	template<typename F = ::jint>
	static auto DestroyAll() {
		static_assert(field_signatures[jField<F>("DestroyAll")] != -1);
		return sat<F>("DestroyAll");
	}

	template<typename F = ::jint>
	static auto DestroyNotify() {
		static_assert(field_signatures[jField<F>("DestroyNotify")] != -1);
		return sat<F>("DestroyNotify");
	}

	template<typename F = ::jint>
	static auto DirectColor() {
		static_assert(field_signatures[jField<F>("DirectColor")] != -1);
		return sat<F>("DirectColor");
	}

	template<typename F = ::jint>
	static auto DisableAccess() {
		static_assert(field_signatures[jField<F>("DisableAccess")] != -1);
		return sat<F>("DisableAccess");
	}

	template<typename F = ::jint>
	static auto DisableScreenInterval() {
		static_assert(field_signatures[jField<F>("DisableScreenInterval")] != -1);
		return sat<F>("DisableScreenInterval");
	}

	template<typename F = ::jint>
	static auto DisableScreenSaver() {
		static_assert(field_signatures[jField<F>("DisableScreenSaver")] != -1);
		return sat<F>("DisableScreenSaver");
	}

	template<typename F = ::jint>
	static auto DoBlue() {
		static_assert(field_signatures[jField<F>("DoBlue")] != -1);
		return sat<F>("DoBlue");
	}

	template<typename F = ::jint>
	static auto DoGreen() {
		static_assert(field_signatures[jField<F>("DoGreen")] != -1);
		return sat<F>("DoGreen");
	}

	template<typename F = ::jint>
	static auto DoRed() {
		static_assert(field_signatures[jField<F>("DoRed")] != -1);
		return sat<F>("DoRed");
	}

	template<typename F = ::jint>
	static auto DontAllowExposures() {
		static_assert(field_signatures[jField<F>("DontAllowExposures")] != -1);
		return sat<F>("DontAllowExposures");
	}

	template<typename F = ::jint>
	static auto DontPreferBlanking() {
		static_assert(field_signatures[jField<F>("DontPreferBlanking")] != -1);
		return sat<F>("DontPreferBlanking");
	}

	template<typename F = ::jint>
	static auto EastGravity() {
		static_assert(field_signatures[jField<F>("EastGravity")] != -1);
		return sat<F>("EastGravity");
	}

	template<typename F = ::jint>
	static auto EnableAccess() {
		static_assert(field_signatures[jField<F>("EnableAccess")] != -1);
		return sat<F>("EnableAccess");
	}

	template<typename F = ::jint>
	static auto EnterNotify() {
		static_assert(field_signatures[jField<F>("EnterNotify")] != -1);
		return sat<F>("EnterNotify");
	}

	template<typename F = ::jlong>
	static auto EnterWindowMask() {
		static_assert(field_signatures[jField<F>("EnterWindowMask")] != -1);
		return sat<F>("EnterWindowMask");
	}

	template<typename F = ::jint>
	static auto EvenOddRule() {
		static_assert(field_signatures[jField<F>("EvenOddRule")] != -1);
		return sat<F>("EvenOddRule");
	}

	template<typename F = ::jint>
	static auto Expose() {
		static_assert(field_signatures[jField<F>("Expose")] != -1);
		return sat<F>("Expose");
	}

	template<typename F = ::jlong>
	static auto ExposureMask() {
		static_assert(field_signatures[jField<F>("ExposureMask")] != -1);
		return sat<F>("ExposureMask");
	}

	template<typename F = ::jint>
	static auto FamilyChaos() {
		static_assert(field_signatures[jField<F>("FamilyChaos")] != -1);
		return sat<F>("FamilyChaos");
	}

	template<typename F = ::jint>
	static auto FamilyDECnet() {
		static_assert(field_signatures[jField<F>("FamilyDECnet")] != -1);
		return sat<F>("FamilyDECnet");
	}

	template<typename F = ::jint>
	static auto FamilyInternet() {
		static_assert(field_signatures[jField<F>("FamilyInternet")] != -1);
		return sat<F>("FamilyInternet");
	}

	template<typename F = ::jint>
	static auto FillOpaqueStippled() {
		static_assert(field_signatures[jField<F>("FillOpaqueStippled")] != -1);
		return sat<F>("FillOpaqueStippled");
	}

	template<typename F = ::jint>
	static auto FillSolid() {
		static_assert(field_signatures[jField<F>("FillSolid")] != -1);
		return sat<F>("FillSolid");
	}

	template<typename F = ::jint>
	static auto FillStippled() {
		static_assert(field_signatures[jField<F>("FillStippled")] != -1);
		return sat<F>("FillStippled");
	}

	template<typename F = ::jint>
	static auto FillTiled() {
		static_assert(field_signatures[jField<F>("FillTiled")] != -1);
		return sat<F>("FillTiled");
	}

	template<typename F = ::jint>
	static auto FirstExtensionError() {
		static_assert(field_signatures[jField<F>("FirstExtensionError")] != -1);
		return sat<F>("FirstExtensionError");
	}

	template<typename F = ::jlong>
	static auto FocusChangeMask() {
		static_assert(field_signatures[jField<F>("FocusChangeMask")] != -1);
		return sat<F>("FocusChangeMask");
	}

	template<typename F = ::jint>
	static auto FocusIn() {
		static_assert(field_signatures[jField<F>("FocusIn")] != -1);
		return sat<F>("FocusIn");
	}

	template<typename F = ::jint>
	static auto FocusOut() {
		static_assert(field_signatures[jField<F>("FocusOut")] != -1);
		return sat<F>("FocusOut");
	}

	template<typename F = ::jint>
	static auto FontChange() {
		static_assert(field_signatures[jField<F>("FontChange")] != -1);
		return sat<F>("FontChange");
	}

	template<typename F = ::jint>
	static auto FontLeftToRight() {
		static_assert(field_signatures[jField<F>("FontLeftToRight")] != -1);
		return sat<F>("FontLeftToRight");
	}

	template<typename F = ::jint>
	static auto FontRightToLeft() {
		static_assert(field_signatures[jField<F>("FontRightToLeft")] != -1);
		return sat<F>("FontRightToLeft");
	}

	template<typename F = ::jint>
	static auto ForgetGravity() {
		static_assert(field_signatures[jField<F>("ForgetGravity")] != -1);
		return sat<F>("ForgetGravity");
	}

	template<typename F = ::jlong>
	static auto GCArcMode() {
		static_assert(field_signatures[jField<F>("GCArcMode")] != -1);
		return sat<F>("GCArcMode");
	}

	template<typename F = ::jlong>
	static auto GCBackground() {
		static_assert(field_signatures[jField<F>("GCBackground")] != -1);
		return sat<F>("GCBackground");
	}

	template<typename F = ::jlong>
	static auto GCCapStyle() {
		static_assert(field_signatures[jField<F>("GCCapStyle")] != -1);
		return sat<F>("GCCapStyle");
	}

	template<typename F = ::jlong>
	static auto GCClipMask() {
		static_assert(field_signatures[jField<F>("GCClipMask")] != -1);
		return sat<F>("GCClipMask");
	}

	template<typename F = ::jlong>
	static auto GCClipXOrigin() {
		static_assert(field_signatures[jField<F>("GCClipXOrigin")] != -1);
		return sat<F>("GCClipXOrigin");
	}

	template<typename F = ::jlong>
	static auto GCClipYOrigin() {
		static_assert(field_signatures[jField<F>("GCClipYOrigin")] != -1);
		return sat<F>("GCClipYOrigin");
	}

	template<typename F = ::jlong>
	static auto GCDashList() {
		static_assert(field_signatures[jField<F>("GCDashList")] != -1);
		return sat<F>("GCDashList");
	}

	template<typename F = ::jlong>
	static auto GCDashOffset() {
		static_assert(field_signatures[jField<F>("GCDashOffset")] != -1);
		return sat<F>("GCDashOffset");
	}

	template<typename F = ::jlong>
	static auto GCFillRule() {
		static_assert(field_signatures[jField<F>("GCFillRule")] != -1);
		return sat<F>("GCFillRule");
	}

	template<typename F = ::jlong>
	static auto GCFillStyle() {
		static_assert(field_signatures[jField<F>("GCFillStyle")] != -1);
		return sat<F>("GCFillStyle");
	}

	template<typename F = ::jlong>
	static auto GCFont() {
		static_assert(field_signatures[jField<F>("GCFont")] != -1);
		return sat<F>("GCFont");
	}

	template<typename F = ::jlong>
	static auto GCForeground() {
		static_assert(field_signatures[jField<F>("GCForeground")] != -1);
		return sat<F>("GCForeground");
	}

	template<typename F = ::jlong>
	static auto GCFunction() {
		static_assert(field_signatures[jField<F>("GCFunction")] != -1);
		return sat<F>("GCFunction");
	}

	template<typename F = ::jlong>
	static auto GCGraphicsExposures() {
		static_assert(field_signatures[jField<F>("GCGraphicsExposures")] != -1);
		return sat<F>("GCGraphicsExposures");
	}

	template<typename F = ::jlong>
	static auto GCJoinStyle() {
		static_assert(field_signatures[jField<F>("GCJoinStyle")] != -1);
		return sat<F>("GCJoinStyle");
	}

	template<typename F = ::jint>
	static auto GCLastBit() {
		static_assert(field_signatures[jField<F>("GCLastBit")] != -1);
		return sat<F>("GCLastBit");
	}

	template<typename F = ::jlong>
	static auto GCLineStyle() {
		static_assert(field_signatures[jField<F>("GCLineStyle")] != -1);
		return sat<F>("GCLineStyle");
	}

	template<typename F = ::jlong>
	static auto GCLineWidth() {
		static_assert(field_signatures[jField<F>("GCLineWidth")] != -1);
		return sat<F>("GCLineWidth");
	}

	template<typename F = ::jlong>
	static auto GCPlaneMask() {
		static_assert(field_signatures[jField<F>("GCPlaneMask")] != -1);
		return sat<F>("GCPlaneMask");
	}

	template<typename F = ::jlong>
	static auto GCStipple() {
		static_assert(field_signatures[jField<F>("GCStipple")] != -1);
		return sat<F>("GCStipple");
	}

	template<typename F = ::jlong>
	static auto GCSubwindowMode() {
		static_assert(field_signatures[jField<F>("GCSubwindowMode")] != -1);
		return sat<F>("GCSubwindowMode");
	}

	template<typename F = ::jlong>
	static auto GCTile() {
		static_assert(field_signatures[jField<F>("GCTile")] != -1);
		return sat<F>("GCTile");
	}

	template<typename F = ::jlong>
	static auto GCTileStipXOrigin() {
		static_assert(field_signatures[jField<F>("GCTileStipXOrigin")] != -1);
		return sat<F>("GCTileStipXOrigin");
	}

	template<typename F = ::jlong>
	static auto GCTileStipYOrigin() {
		static_assert(field_signatures[jField<F>("GCTileStipYOrigin")] != -1);
		return sat<F>("GCTileStipYOrigin");
	}

	template<typename F = ::jint>
	static auto GXand() {
		static_assert(field_signatures[jField<F>("GXand")] != -1);
		return sat<F>("GXand");
	}

	template<typename F = ::jint>
	static auto GXandInverted() {
		static_assert(field_signatures[jField<F>("GXandInverted")] != -1);
		return sat<F>("GXandInverted");
	}

	template<typename F = ::jint>
	static auto GXandReverse() {
		static_assert(field_signatures[jField<F>("GXandReverse")] != -1);
		return sat<F>("GXandReverse");
	}

	template<typename F = ::jint>
	static auto GXclear() {
		static_assert(field_signatures[jField<F>("GXclear")] != -1);
		return sat<F>("GXclear");
	}

	template<typename F = ::jint>
	static auto GXcopy() {
		static_assert(field_signatures[jField<F>("GXcopy")] != -1);
		return sat<F>("GXcopy");
	}

	template<typename F = ::jint>
	static auto GXcopyInverted() {
		static_assert(field_signatures[jField<F>("GXcopyInverted")] != -1);
		return sat<F>("GXcopyInverted");
	}

	template<typename F = ::jint>
	static auto GXequiv() {
		static_assert(field_signatures[jField<F>("GXequiv")] != -1);
		return sat<F>("GXequiv");
	}

	template<typename F = ::jint>
	static auto GXinvert() {
		static_assert(field_signatures[jField<F>("GXinvert")] != -1);
		return sat<F>("GXinvert");
	}

	template<typename F = ::jint>
	static auto GXnand() {
		static_assert(field_signatures[jField<F>("GXnand")] != -1);
		return sat<F>("GXnand");
	}

	template<typename F = ::jint>
	static auto GXnoop() {
		static_assert(field_signatures[jField<F>("GXnoop")] != -1);
		return sat<F>("GXnoop");
	}

	template<typename F = ::jint>
	static auto GXnor() {
		static_assert(field_signatures[jField<F>("GXnor")] != -1);
		return sat<F>("GXnor");
	}

	template<typename F = ::jint>
	static auto GXor() {
		static_assert(field_signatures[jField<F>("GXor")] != -1);
		return sat<F>("GXor");
	}

	template<typename F = ::jint>
	static auto GXorInverted() {
		static_assert(field_signatures[jField<F>("GXorInverted")] != -1);
		return sat<F>("GXorInverted");
	}

	template<typename F = ::jint>
	static auto GXorReverse() {
		static_assert(field_signatures[jField<F>("GXorReverse")] != -1);
		return sat<F>("GXorReverse");
	}

	template<typename F = ::jint>
	static auto GXset() {
		static_assert(field_signatures[jField<F>("GXset")] != -1);
		return sat<F>("GXset");
	}

	template<typename F = ::jint>
	static auto GXxor() {
		static_assert(field_signatures[jField<F>("GXxor")] != -1);
		return sat<F>("GXxor");
	}

	template<typename F = ::jint>
	static auto GrabFrozen() {
		static_assert(field_signatures[jField<F>("GrabFrozen")] != -1);
		return sat<F>("GrabFrozen");
	}

	template<typename F = ::jint>
	static auto GrabInvalidTime() {
		static_assert(field_signatures[jField<F>("GrabInvalidTime")] != -1);
		return sat<F>("GrabInvalidTime");
	}

	template<typename F = ::jint>
	static auto GrabModeAsync() {
		static_assert(field_signatures[jField<F>("GrabModeAsync")] != -1);
		return sat<F>("GrabModeAsync");
	}

	template<typename F = ::jint>
	static auto GrabModeSync() {
		static_assert(field_signatures[jField<F>("GrabModeSync")] != -1);
		return sat<F>("GrabModeSync");
	}

	template<typename F = ::jint>
	static auto GrabNotViewable() {
		static_assert(field_signatures[jField<F>("GrabNotViewable")] != -1);
		return sat<F>("GrabNotViewable");
	}

	template<typename F = ::jint>
	static auto GrabSuccess() {
		static_assert(field_signatures[jField<F>("GrabSuccess")] != -1);
		return sat<F>("GrabSuccess");
	}

	template<typename F = ::jint>
	static auto GraphicsExpose() {
		static_assert(field_signatures[jField<F>("GraphicsExpose")] != -1);
		return sat<F>("GraphicsExpose");
	}

	template<typename F = ::jint>
	static auto GravityNotify() {
		static_assert(field_signatures[jField<F>("GravityNotify")] != -1);
		return sat<F>("GravityNotify");
	}

	template<typename F = ::jint>
	static auto GrayScale() {
		static_assert(field_signatures[jField<F>("GrayScale")] != -1);
		return sat<F>("GrayScale");
	}

	template<typename F = ::jint>
	static auto HostDelete() {
		static_assert(field_signatures[jField<F>("HostDelete")] != -1);
		return sat<F>("HostDelete");
	}

	template<typename F = ::jint>
	static auto HostInsert() {
		static_assert(field_signatures[jField<F>("HostInsert")] != -1);
		return sat<F>("HostInsert");
	}

	template<typename F = ::jint>
	static auto IncludeInferiors() {
		static_assert(field_signatures[jField<F>("IncludeInferiors")] != -1);
		return sat<F>("IncludeInferiors");
	}

	template<typename F = ::jlong>
	static auto InputFocus() {
		static_assert(field_signatures[jField<F>("InputFocus")] != -1);
		return sat<F>("InputFocus");
	}

	template<typename F = ::jint>
	static auto InputOnly() {
		static_assert(field_signatures[jField<F>("InputOnly")] != -1);
		return sat<F>("InputOnly");
	}

	template<typename F = ::jint>
	static auto InputOutput() {
		static_assert(field_signatures[jField<F>("InputOutput")] != -1);
		return sat<F>("InputOutput");
	}

	template<typename F = ::jint>
	static auto IsUnmapped() {
		static_assert(field_signatures[jField<F>("IsUnmapped")] != -1);
		return sat<F>("IsUnmapped");
	}

	template<typename F = ::jint>
	static auto IsUnviewable() {
		static_assert(field_signatures[jField<F>("IsUnviewable")] != -1);
		return sat<F>("IsUnviewable");
	}

	template<typename F = ::jint>
	static auto IsViewable() {
		static_assert(field_signatures[jField<F>("IsViewable")] != -1);
		return sat<F>("IsViewable");
	}

	template<typename F = ::jint>
	static auto JoinBevel() {
		static_assert(field_signatures[jField<F>("JoinBevel")] != -1);
		return sat<F>("JoinBevel");
	}

	template<typename F = ::jint>
	static auto JoinMiter() {
		static_assert(field_signatures[jField<F>("JoinMiter")] != -1);
		return sat<F>("JoinMiter");
	}

	template<typename F = ::jint>
	static auto JoinRound() {
		static_assert(field_signatures[jField<F>("JoinRound")] != -1);
		return sat<F>("JoinRound");
	}

	template<typename F = ::jlong>
	static auto KBAutoRepeatMode() {
		static_assert(field_signatures[jField<F>("KBAutoRepeatMode")] != -1);
		return sat<F>("KBAutoRepeatMode");
	}

	template<typename F = ::jlong>
	static auto KBBellDuration() {
		static_assert(field_signatures[jField<F>("KBBellDuration")] != -1);
		return sat<F>("KBBellDuration");
	}

	template<typename F = ::jlong>
	static auto KBBellPercent() {
		static_assert(field_signatures[jField<F>("KBBellPercent")] != -1);
		return sat<F>("KBBellPercent");
	}

	template<typename F = ::jlong>
	static auto KBBellPitch() {
		static_assert(field_signatures[jField<F>("KBBellPitch")] != -1);
		return sat<F>("KBBellPitch");
	}

	template<typename F = ::jlong>
	static auto KBKey() {
		static_assert(field_signatures[jField<F>("KBKey")] != -1);
		return sat<F>("KBKey");
	}

	template<typename F = ::jlong>
	static auto KBKeyClickPercent() {
		static_assert(field_signatures[jField<F>("KBKeyClickPercent")] != -1);
		return sat<F>("KBKeyClickPercent");
	}

	template<typename F = ::jlong>
	static auto KBLed() {
		static_assert(field_signatures[jField<F>("KBLed")] != -1);
		return sat<F>("KBLed");
	}

	template<typename F = ::jlong>
	static auto KBLedMode() {
		static_assert(field_signatures[jField<F>("KBLedMode")] != -1);
		return sat<F>("KBLedMode");
	}

	template<typename F = ::jint>
	static auto KeyPress() {
		static_assert(field_signatures[jField<F>("KeyPress")] != -1);
		return sat<F>("KeyPress");
	}

	template<typename F = ::jlong>
	static auto KeyPressMask() {
		static_assert(field_signatures[jField<F>("KeyPressMask")] != -1);
		return sat<F>("KeyPressMask");
	}

	template<typename F = ::jint>
	static auto KeyRelease() {
		static_assert(field_signatures[jField<F>("KeyRelease")] != -1);
		return sat<F>("KeyRelease");
	}

	template<typename F = ::jlong>
	static auto KeyReleaseMask() {
		static_assert(field_signatures[jField<F>("KeyReleaseMask")] != -1);
		return sat<F>("KeyReleaseMask");
	}

	template<typename F = ::jint>
	static auto KeymapNotify() {
		static_assert(field_signatures[jField<F>("KeymapNotify")] != -1);
		return sat<F>("KeymapNotify");
	}

	template<typename F = ::jlong>
	static auto KeymapStateMask() {
		static_assert(field_signatures[jField<F>("KeymapStateMask")] != -1);
		return sat<F>("KeymapStateMask");
	}

	template<typename F = ::jint>
	static auto LASTEvent() {
		static_assert(field_signatures[jField<F>("LASTEvent")] != -1);
		return sat<F>("LASTEvent");
	}

	template<typename F = ::jint>
	static auto LSBFirst() {
		static_assert(field_signatures[jField<F>("LSBFirst")] != -1);
		return sat<F>("LSBFirst");
	}

	template<typename F = ::jint>
	static auto LastExtensionError() {
		static_assert(field_signatures[jField<F>("LastExtensionError")] != -1);
		return sat<F>("LastExtensionError");
	}

	template<typename F = ::jint>
	static auto LeaveNotify() {
		static_assert(field_signatures[jField<F>("LeaveNotify")] != -1);
		return sat<F>("LeaveNotify");
	}

	template<typename F = ::jlong>
	static auto LeaveWindowMask() {
		static_assert(field_signatures[jField<F>("LeaveWindowMask")] != -1);
		return sat<F>("LeaveWindowMask");
	}

	template<typename F = ::jint>
	static auto LedModeOff() {
		static_assert(field_signatures[jField<F>("LedModeOff")] != -1);
		return sat<F>("LedModeOff");
	}

	template<typename F = ::jint>
	static auto LedModeOn() {
		static_assert(field_signatures[jField<F>("LedModeOn")] != -1);
		return sat<F>("LedModeOn");
	}

	template<typename F = ::jint>
	static auto LineDoubleDash() {
		static_assert(field_signatures[jField<F>("LineDoubleDash")] != -1);
		return sat<F>("LineDoubleDash");
	}

	template<typename F = ::jint>
	static auto LineOnOffDash() {
		static_assert(field_signatures[jField<F>("LineOnOffDash")] != -1);
		return sat<F>("LineOnOffDash");
	}

	template<typename F = ::jint>
	static auto LineSolid() {
		static_assert(field_signatures[jField<F>("LineSolid")] != -1);
		return sat<F>("LineSolid");
	}

	template<typename F = ::jint>
	static auto LockMapIndex() {
		static_assert(field_signatures[jField<F>("LockMapIndex")] != -1);
		return sat<F>("LockMapIndex");
	}

	template<typename F = ::jint>
	static auto LockMask() {
		static_assert(field_signatures[jField<F>("LockMask")] != -1);
		return sat<F>("LockMask");
	}

	template<typename F = ::jint>
	static auto LowerHighest() {
		static_assert(field_signatures[jField<F>("LowerHighest")] != -1);
		return sat<F>("LowerHighest");
	}

	template<typename F = ::jint>
	static auto MAX_BUTTONS() {
		static_assert(field_signatures[jField<F>("MAX_BUTTONS")] != -1);
		return sat<F>("MAX_BUTTONS");
	}

	template<typename F = ::jint>
	static auto MSBFirst() {
		static_assert(field_signatures[jField<F>("MSBFirst")] != -1);
		return sat<F>("MSBFirst");
	}

	template<typename F = ::jint>
	static auto MapNotify() {
		static_assert(field_signatures[jField<F>("MapNotify")] != -1);
		return sat<F>("MapNotify");
	}

	template<typename F = ::jint>
	static auto MapRequest() {
		static_assert(field_signatures[jField<F>("MapRequest")] != -1);
		return sat<F>("MapRequest");
	}

	template<typename F = ::jint>
	static auto MappingBusy() {
		static_assert(field_signatures[jField<F>("MappingBusy")] != -1);
		return sat<F>("MappingBusy");
	}

	template<typename F = ::jint>
	static auto MappingFailed() {
		static_assert(field_signatures[jField<F>("MappingFailed")] != -1);
		return sat<F>("MappingFailed");
	}

	template<typename F = ::jint>
	static auto MappingKeyboard() {
		static_assert(field_signatures[jField<F>("MappingKeyboard")] != -1);
		return sat<F>("MappingKeyboard");
	}

	template<typename F = ::jint>
	static auto MappingModifier() {
		static_assert(field_signatures[jField<F>("MappingModifier")] != -1);
		return sat<F>("MappingModifier");
	}

	template<typename F = ::jint>
	static auto MappingNotify() {
		static_assert(field_signatures[jField<F>("MappingNotify")] != -1);
		return sat<F>("MappingNotify");
	}

	template<typename F = ::jint>
	static auto MappingPointer() {
		static_assert(field_signatures[jField<F>("MappingPointer")] != -1);
		return sat<F>("MappingPointer");
	}

	template<typename F = ::jint>
	static auto MappingSuccess() {
		static_assert(field_signatures[jField<F>("MappingSuccess")] != -1);
		return sat<F>("MappingSuccess");
	}

	template<typename F = ::jint>
	static auto Mod1MapIndex() {
		static_assert(field_signatures[jField<F>("Mod1MapIndex")] != -1);
		return sat<F>("Mod1MapIndex");
	}

	template<typename F = ::jint>
	static auto Mod1Mask() {
		static_assert(field_signatures[jField<F>("Mod1Mask")] != -1);
		return sat<F>("Mod1Mask");
	}

	template<typename F = ::jint>
	static auto Mod2MapIndex() {
		static_assert(field_signatures[jField<F>("Mod2MapIndex")] != -1);
		return sat<F>("Mod2MapIndex");
	}

	template<typename F = ::jint>
	static auto Mod2Mask() {
		static_assert(field_signatures[jField<F>("Mod2Mask")] != -1);
		return sat<F>("Mod2Mask");
	}

	template<typename F = ::jint>
	static auto Mod3MapIndex() {
		static_assert(field_signatures[jField<F>("Mod3MapIndex")] != -1);
		return sat<F>("Mod3MapIndex");
	}

	template<typename F = ::jint>
	static auto Mod3Mask() {
		static_assert(field_signatures[jField<F>("Mod3Mask")] != -1);
		return sat<F>("Mod3Mask");
	}

	template<typename F = ::jint>
	static auto Mod4MapIndex() {
		static_assert(field_signatures[jField<F>("Mod4MapIndex")] != -1);
		return sat<F>("Mod4MapIndex");
	}

	template<typename F = ::jint>
	static auto Mod4Mask() {
		static_assert(field_signatures[jField<F>("Mod4Mask")] != -1);
		return sat<F>("Mod4Mask");
	}

	template<typename F = ::jint>
	static auto Mod5MapIndex() {
		static_assert(field_signatures[jField<F>("Mod5MapIndex")] != -1);
		return sat<F>("Mod5MapIndex");
	}

	template<typename F = ::jint>
	static auto Mod5Mask() {
		static_assert(field_signatures[jField<F>("Mod5Mask")] != -1);
		return sat<F>("Mod5Mask");
	}

	template<typename F = ::jint>
	static auto MotionNotify() {
		static_assert(field_signatures[jField<F>("MotionNotify")] != -1);
		return sat<F>("MotionNotify");
	}

	template<typename F = ::jlong>
	static auto NoEventMask() {
		static_assert(field_signatures[jField<F>("NoEventMask")] != -1);
		return sat<F>("NoEventMask");
	}

	template<typename F = ::jint>
	static auto NoExpose() {
		static_assert(field_signatures[jField<F>("NoExpose")] != -1);
		return sat<F>("NoExpose");
	}

	template<typename F = ::jlong>
	static auto NoSymbol() {
		static_assert(field_signatures[jField<F>("NoSymbol")] != -1);
		return sat<F>("NoSymbol");
	}

	template<typename F = ::jint>
	static auto Nonconvex() {
		static_assert(field_signatures[jField<F>("Nonconvex")] != -1);
		return sat<F>("Nonconvex");
	}

	template<typename F = ::jlong>
	static auto None() {
		static_assert(field_signatures[jField<F>("None")] != -1);
		return sat<F>("None");
	}

	template<typename F = ::jint>
	static auto NorthEastGravity() {
		static_assert(field_signatures[jField<F>("NorthEastGravity")] != -1);
		return sat<F>("NorthEastGravity");
	}

	template<typename F = ::jint>
	static auto NorthGravity() {
		static_assert(field_signatures[jField<F>("NorthGravity")] != -1);
		return sat<F>("NorthGravity");
	}

	template<typename F = ::jint>
	static auto NorthWestGravity() {
		static_assert(field_signatures[jField<F>("NorthWestGravity")] != -1);
		return sat<F>("NorthWestGravity");
	}

	template<typename F = ::jint>
	static auto NotUseful() {
		static_assert(field_signatures[jField<F>("NotUseful")] != -1);
		return sat<F>("NotUseful");
	}

	template<typename F = ::jint>
	static auto NotifyAncestor() {
		static_assert(field_signatures[jField<F>("NotifyAncestor")] != -1);
		return sat<F>("NotifyAncestor");
	}

	template<typename F = ::jint>
	static auto NotifyDetailNone() {
		static_assert(field_signatures[jField<F>("NotifyDetailNone")] != -1);
		return sat<F>("NotifyDetailNone");
	}

	template<typename F = ::jint>
	static auto NotifyGrab() {
		static_assert(field_signatures[jField<F>("NotifyGrab")] != -1);
		return sat<F>("NotifyGrab");
	}

	template<typename F = ::jint>
	static auto NotifyHint() {
		static_assert(field_signatures[jField<F>("NotifyHint")] != -1);
		return sat<F>("NotifyHint");
	}

	template<typename F = ::jint>
	static auto NotifyInferior() {
		static_assert(field_signatures[jField<F>("NotifyInferior")] != -1);
		return sat<F>("NotifyInferior");
	}

	template<typename F = ::jint>
	static auto NotifyNonlinear() {
		static_assert(field_signatures[jField<F>("NotifyNonlinear")] != -1);
		return sat<F>("NotifyNonlinear");
	}

	template<typename F = ::jint>
	static auto NotifyNonlinearVirtual() {
		static_assert(field_signatures[jField<F>("NotifyNonlinearVirtual")] != -1);
		return sat<F>("NotifyNonlinearVirtual");
	}

	template<typename F = ::jint>
	static auto NotifyNormal() {
		static_assert(field_signatures[jField<F>("NotifyNormal")] != -1);
		return sat<F>("NotifyNormal");
	}

	template<typename F = ::jint>
	static auto NotifyPointer() {
		static_assert(field_signatures[jField<F>("NotifyPointer")] != -1);
		return sat<F>("NotifyPointer");
	}

	template<typename F = ::jint>
	static auto NotifyPointerRoot() {
		static_assert(field_signatures[jField<F>("NotifyPointerRoot")] != -1);
		return sat<F>("NotifyPointerRoot");
	}

	template<typename F = ::jint>
	static auto NotifyUngrab() {
		static_assert(field_signatures[jField<F>("NotifyUngrab")] != -1);
		return sat<F>("NotifyUngrab");
	}

	template<typename F = ::jint>
	static auto NotifyVirtual() {
		static_assert(field_signatures[jField<F>("NotifyVirtual")] != -1);
		return sat<F>("NotifyVirtual");
	}

	template<typename F = ::jint>
	static auto NotifyWhileGrabbed() {
		static_assert(field_signatures[jField<F>("NotifyWhileGrabbed")] != -1);
		return sat<F>("NotifyWhileGrabbed");
	}

	template<typename F = ::jint>
	static auto Opposite() {
		static_assert(field_signatures[jField<F>("Opposite")] != -1);
		return sat<F>("Opposite");
	}

	template<typename F = ::jlong>
	static auto OwnerGrabButtonMask() {
		static_assert(field_signatures[jField<F>("OwnerGrabButtonMask")] != -1);
		return sat<F>("OwnerGrabButtonMask");
	}

	template<typename F = ::jlong>
	static auto ParentRelative() {
		static_assert(field_signatures[jField<F>("ParentRelative")] != -1);
		return sat<F>("ParentRelative");
	}

	template<typename F = ::jint>
	static auto PlaceOnBottom() {
		static_assert(field_signatures[jField<F>("PlaceOnBottom")] != -1);
		return sat<F>("PlaceOnBottom");
	}

	template<typename F = ::jint>
	static auto PlaceOnTop() {
		static_assert(field_signatures[jField<F>("PlaceOnTop")] != -1);
		return sat<F>("PlaceOnTop");
	}

	template<typename F = ::jlong>
	static auto PointerMotionHintMask() {
		static_assert(field_signatures[jField<F>("PointerMotionHintMask")] != -1);
		return sat<F>("PointerMotionHintMask");
	}

	template<typename F = ::jlong>
	static auto PointerMotionMask() {
		static_assert(field_signatures[jField<F>("PointerMotionMask")] != -1);
		return sat<F>("PointerMotionMask");
	}

	template<typename F = ::jlong>
	static auto PointerRoot() {
		static_assert(field_signatures[jField<F>("PointerRoot")] != -1);
		return sat<F>("PointerRoot");
	}

	template<typename F = ::jlong>
	static auto PointerWindow() {
		static_assert(field_signatures[jField<F>("PointerWindow")] != -1);
		return sat<F>("PointerWindow");
	}

	template<typename F = ::jint>
	static auto PreferBlanking() {
		static_assert(field_signatures[jField<F>("PreferBlanking")] != -1);
		return sat<F>("PreferBlanking");
	}

	template<typename F = ::jint>
	static auto PropModeAppend() {
		static_assert(field_signatures[jField<F>("PropModeAppend")] != -1);
		return sat<F>("PropModeAppend");
	}

	template<typename F = ::jint>
	static auto PropModePrepend() {
		static_assert(field_signatures[jField<F>("PropModePrepend")] != -1);
		return sat<F>("PropModePrepend");
	}

	template<typename F = ::jint>
	static auto PropModeReplace() {
		static_assert(field_signatures[jField<F>("PropModeReplace")] != -1);
		return sat<F>("PropModeReplace");
	}

	template<typename F = ::jlong>
	static auto PropertyChangeMask() {
		static_assert(field_signatures[jField<F>("PropertyChangeMask")] != -1);
		return sat<F>("PropertyChangeMask");
	}

	template<typename F = ::jint>
	static auto PropertyDelete() {
		static_assert(field_signatures[jField<F>("PropertyDelete")] != -1);
		return sat<F>("PropertyDelete");
	}

	template<typename F = ::jint>
	static auto PropertyNewValue() {
		static_assert(field_signatures[jField<F>("PropertyNewValue")] != -1);
		return sat<F>("PropertyNewValue");
	}

	template<typename F = ::jint>
	static auto PropertyNotify() {
		static_assert(field_signatures[jField<F>("PropertyNotify")] != -1);
		return sat<F>("PropertyNotify");
	}

	template<typename F = ::jint>
	static auto PseudoColor() {
		static_assert(field_signatures[jField<F>("PseudoColor")] != -1);
		return sat<F>("PseudoColor");
	}

	template<typename F = ::jint>
	static auto QueuedAfterFlush() {
		static_assert(field_signatures[jField<F>("QueuedAfterFlush")] != -1);
		return sat<F>("QueuedAfterFlush");
	}

	template<typename F = ::jint>
	static auto QueuedAfterReading() {
		static_assert(field_signatures[jField<F>("QueuedAfterReading")] != -1);
		return sat<F>("QueuedAfterReading");
	}

	template<typename F = ::jint>
	static auto QueuedAlready() {
		static_assert(field_signatures[jField<F>("QueuedAlready")] != -1);
		return sat<F>("QueuedAlready");
	}

	template<typename F = ::jint>
	static auto RaiseLowest() {
		static_assert(field_signatures[jField<F>("RaiseLowest")] != -1);
		return sat<F>("RaiseLowest");
	}

	template<typename F = ::jint>
	static auto ReparentNotify() {
		static_assert(field_signatures[jField<F>("ReparentNotify")] != -1);
		return sat<F>("ReparentNotify");
	}

	template<typename F = ::jint>
	static auto ReplayKeyboard() {
		static_assert(field_signatures[jField<F>("ReplayKeyboard")] != -1);
		return sat<F>("ReplayKeyboard");
	}

	template<typename F = ::jint>
	static auto ReplayPointer() {
		static_assert(field_signatures[jField<F>("ReplayPointer")] != -1);
		return sat<F>("ReplayPointer");
	}

	template<typename F = ::jlong>
	static auto ResizeRedirectMask() {
		static_assert(field_signatures[jField<F>("ResizeRedirectMask")] != -1);
		return sat<F>("ResizeRedirectMask");
	}

	template<typename F = ::jint>
	static auto ResizeRequest() {
		static_assert(field_signatures[jField<F>("ResizeRequest")] != -1);
		return sat<F>("ResizeRequest");
	}

	template<typename F = ::jint>
	static auto RetainPermanent() {
		static_assert(field_signatures[jField<F>("RetainPermanent")] != -1);
		return sat<F>("RetainPermanent");
	}

	template<typename F = ::jint>
	static auto RetainTemporary() {
		static_assert(field_signatures[jField<F>("RetainTemporary")] != -1);
		return sat<F>("RetainTemporary");
	}

	template<typename F = ::jint>
	static auto RevertToNone() {
		static_assert(field_signatures[jField<F>("RevertToNone")] != -1);
		return sat<F>("RevertToNone");
	}

	template<typename F = ::jint>
	static auto RevertToParent() {
		static_assert(field_signatures[jField<F>("RevertToParent")] != -1);
		return sat<F>("RevertToParent");
	}

	template<typename F = ::jint>
	static auto RevertToPointerRoot() {
		static_assert(field_signatures[jField<F>("RevertToPointerRoot")] != -1);
		return sat<F>("RevertToPointerRoot");
	}

	template<typename F = ::jint>
	static auto ScreenSaverActive() {
		static_assert(field_signatures[jField<F>("ScreenSaverActive")] != -1);
		return sat<F>("ScreenSaverActive");
	}

	template<typename F = ::jint>
	static auto ScreenSaverReset() {
		static_assert(field_signatures[jField<F>("ScreenSaverReset")] != -1);
		return sat<F>("ScreenSaverReset");
	}

	template<typename F = ::jint>
	static auto SelectionClear() {
		static_assert(field_signatures[jField<F>("SelectionClear")] != -1);
		return sat<F>("SelectionClear");
	}

	template<typename F = ::jint>
	static auto SelectionNotify() {
		static_assert(field_signatures[jField<F>("SelectionNotify")] != -1);
		return sat<F>("SelectionNotify");
	}

	template<typename F = ::jint>
	static auto SelectionRequest() {
		static_assert(field_signatures[jField<F>("SelectionRequest")] != -1);
		return sat<F>("SelectionRequest");
	}

	template<typename F = ::jint>
	static auto SetModeDelete() {
		static_assert(field_signatures[jField<F>("SetModeDelete")] != -1);
		return sat<F>("SetModeDelete");
	}

	template<typename F = ::jint>
	static auto SetModeInsert() {
		static_assert(field_signatures[jField<F>("SetModeInsert")] != -1);
		return sat<F>("SetModeInsert");
	}

	template<typename F = ::jint>
	static auto ShiftMapIndex() {
		static_assert(field_signatures[jField<F>("ShiftMapIndex")] != -1);
		return sat<F>("ShiftMapIndex");
	}

	template<typename F = ::jint>
	static auto ShiftMask() {
		static_assert(field_signatures[jField<F>("ShiftMask")] != -1);
		return sat<F>("ShiftMask");
	}

	template<typename F = ::jint>
	static auto SouthEastGravity() {
		static_assert(field_signatures[jField<F>("SouthEastGravity")] != -1);
		return sat<F>("SouthEastGravity");
	}

	template<typename F = ::jint>
	static auto SouthGravity() {
		static_assert(field_signatures[jField<F>("SouthGravity")] != -1);
		return sat<F>("SouthGravity");
	}

	template<typename F = ::jint>
	static auto SouthWestGravity() {
		static_assert(field_signatures[jField<F>("SouthWestGravity")] != -1);
		return sat<F>("SouthWestGravity");
	}

	template<typename F = ::jint>
	static auto StaticColor() {
		static_assert(field_signatures[jField<F>("StaticColor")] != -1);
		return sat<F>("StaticColor");
	}

	template<typename F = ::jint>
	static auto StaticGravity() {
		static_assert(field_signatures[jField<F>("StaticGravity")] != -1);
		return sat<F>("StaticGravity");
	}

	template<typename F = ::jint>
	static auto StaticGray() {
		static_assert(field_signatures[jField<F>("StaticGray")] != -1);
		return sat<F>("StaticGray");
	}

	template<typename F = ::jint>
	static auto StippleShape() {
		static_assert(field_signatures[jField<F>("StippleShape")] != -1);
		return sat<F>("StippleShape");
	}

	template<typename F = ::jlong>
	static auto StructureNotifyMask() {
		static_assert(field_signatures[jField<F>("StructureNotifyMask")] != -1);
		return sat<F>("StructureNotifyMask");
	}

	template<typename F = ::jlong>
	static auto SubstructureNotifyMask() {
		static_assert(field_signatures[jField<F>("SubstructureNotifyMask")] != -1);
		return sat<F>("SubstructureNotifyMask");
	}

	template<typename F = ::jlong>
	static auto SubstructureRedirectMask() {
		static_assert(field_signatures[jField<F>("SubstructureRedirectMask")] != -1);
		return sat<F>("SubstructureRedirectMask");
	}

	template<typename F = ::jint>
	static auto Success() {
		static_assert(field_signatures[jField<F>("Success")] != -1);
		return sat<F>("Success");
	}

	template<typename F = ::jint>
	static auto SyncBoth() {
		static_assert(field_signatures[jField<F>("SyncBoth")] != -1);
		return sat<F>("SyncBoth");
	}

	template<typename F = ::jint>
	static auto SyncKeyboard() {
		static_assert(field_signatures[jField<F>("SyncKeyboard")] != -1);
		return sat<F>("SyncKeyboard");
	}

	template<typename F = ::jint>
	static auto SyncPointer() {
		static_assert(field_signatures[jField<F>("SyncPointer")] != -1);
		return sat<F>("SyncPointer");
	}

	template<typename F = ::jint>
	static auto TileShape() {
		static_assert(field_signatures[jField<F>("TileShape")] != -1);
		return sat<F>("TileShape");
	}

	template<typename F = ::jint>
	static auto TopIf() {
		static_assert(field_signatures[jField<F>("TopIf")] != -1);
		return sat<F>("TopIf");
	}

	template<typename F = ::jint>
	static auto TrueColor() {
		static_assert(field_signatures[jField<F>("TrueColor")] != -1);
		return sat<F>("TrueColor");
	}

	template<typename F = ::jint>
	static auto UnmapGravity() {
		static_assert(field_signatures[jField<F>("UnmapGravity")] != -1);
		return sat<F>("UnmapGravity");
	}

	template<typename F = ::jint>
	static auto UnmapNotify() {
		static_assert(field_signatures[jField<F>("UnmapNotify")] != -1);
		return sat<F>("UnmapNotify");
	}

	template<typename F = ::jint>
	static auto Unsorted() {
		static_assert(field_signatures[jField<F>("Unsorted")] != -1);
		return sat<F>("Unsorted");
	}

	template<typename F = ::jlong>
	static auto VisibilityChangeMask() {
		static_assert(field_signatures[jField<F>("VisibilityChangeMask")] != -1);
		return sat<F>("VisibilityChangeMask");
	}

	template<typename F = ::jint>
	static auto VisibilityFullyObscured() {
		static_assert(field_signatures[jField<F>("VisibilityFullyObscured")] != -1);
		return sat<F>("VisibilityFullyObscured");
	}

	template<typename F = ::jint>
	static auto VisibilityNotify() {
		static_assert(field_signatures[jField<F>("VisibilityNotify")] != -1);
		return sat<F>("VisibilityNotify");
	}

	template<typename F = ::jint>
	static auto VisibilityPartiallyObscured() {
		static_assert(field_signatures[jField<F>("VisibilityPartiallyObscured")] != -1);
		return sat<F>("VisibilityPartiallyObscured");
	}

	template<typename F = ::jint>
	static auto VisibilityUnobscured() {
		static_assert(field_signatures[jField<F>("VisibilityUnobscured")] != -1);
		return sat<F>("VisibilityUnobscured");
	}

	template<typename F = ::jint>
	static auto WestGravity() {
		static_assert(field_signatures[jField<F>("WestGravity")] != -1);
		return sat<F>("WestGravity");
	}

	template<typename F = ::jint>
	static auto WhenMapped() {
		static_assert(field_signatures[jField<F>("WhenMapped")] != -1);
		return sat<F>("WhenMapped");
	}

	template<typename F = ::jint>
	static auto WindingRule() {
		static_assert(field_signatures[jField<F>("WindingRule")] != -1);
		return sat<F>("WindingRule");
	}

	template<typename F = ::jint>
	static auto XYBitmap() {
		static_assert(field_signatures[jField<F>("XYBitmap")] != -1);
		return sat<F>("XYBitmap");
	}

	template<typename F = ::jint>
	static auto XYPixmap() {
		static_assert(field_signatures[jField<F>("XYPixmap")] != -1);
		return sat<F>("XYPixmap");
	}

	template<typename F = ::jint>
	static auto X_PROTOCOL() {
		static_assert(field_signatures[jField<F>("X_PROTOCOL")] != -1);
		return sat<F>("X_PROTOCOL");
	}

	template<typename F = ::jint>
	static auto X_PROTOCOL_REVISION() {
		static_assert(field_signatures[jField<F>("X_PROTOCOL_REVISION")] != -1);
		return sat<F>("X_PROTOCOL_REVISION");
	}

	template<typename F = ::jlong>
	static auto XkbGroupStateMask() {
		static_assert(field_signatures[jField<F>("XkbGroupStateMask")] != -1);
		return sat<F>("XkbGroupStateMask");
	}

	template<typename F = ::jlong>
	static auto XkbKeySymsMask() {
		static_assert(field_signatures[jField<F>("XkbKeySymsMask")] != -1);
		return sat<F>("XkbKeySymsMask");
	}

	template<typename F = ::jlong>
	static auto XkbKeyTypesMask() {
		static_assert(field_signatures[jField<F>("XkbKeyTypesMask")] != -1);
		return sat<F>("XkbKeyTypesMask");
	}

	template<typename F = ::jint>
	static auto XkbMapNotify() {
		static_assert(field_signatures[jField<F>("XkbMapNotify")] != -1);
		return sat<F>("XkbMapNotify");
	}

	template<typename F = ::jlong>
	static auto XkbMapNotifyMask() {
		static_assert(field_signatures[jField<F>("XkbMapNotifyMask")] != -1);
		return sat<F>("XkbMapNotifyMask");
	}

	template<typename F = ::jlong>
	static auto XkbModifierMapMask() {
		static_assert(field_signatures[jField<F>("XkbModifierMapMask")] != -1);
		return sat<F>("XkbModifierMapMask");
	}

	template<typename F = ::jint>
	static auto XkbNewKeyboardNotify() {
		static_assert(field_signatures[jField<F>("XkbNewKeyboardNotify")] != -1);
		return sat<F>("XkbNewKeyboardNotify");
	}

	template<typename F = ::jlong>
	static auto XkbNewKeyboardNotifyMask() {
		static_assert(field_signatures[jField<F>("XkbNewKeyboardNotifyMask")] != -1);
		return sat<F>("XkbNewKeyboardNotifyMask");
	}

	template<typename F = ::jint>
	static auto XkbStateNotify() {
		static_assert(field_signatures[jField<F>("XkbStateNotify")] != -1);
		return sat<F>("XkbStateNotify");
	}

	template<typename F = ::jlong>
	static auto XkbStateNotifyMask() {
		static_assert(field_signatures[jField<F>("XkbStateNotifyMask")] != -1);
		return sat<F>("XkbStateNotifyMask");
	}

	template<typename F = ::jint>
	static auto XkbUseCoreKbd() {
		static_assert(field_signatures[jField<F>("XkbUseCoreKbd")] != -1);
		return sat<F>("XkbUseCoreKbd");
	}

	template<typename F = ::jlong>
	static auto XkbVirtualModsMask() {
		static_assert(field_signatures[jField<F>("XkbVirtualModsMask")] != -1);
		return sat<F>("XkbVirtualModsMask");
	}

	template<typename F = ::jint>
	static auto YSorted() {
		static_assert(field_signatures[jField<F>("YSorted")] != -1);
		return sat<F>("YSorted");
	}

	template<typename F = ::jint>
	static auto YXBanded() {
		static_assert(field_signatures[jField<F>("YXBanded")] != -1);
		return sat<F>("YXBanded");
	}

	template<typename F = ::jint>
	static auto YXSorted() {
		static_assert(field_signatures[jField<F>("YXSorted")] != -1);
		return sat<F>("YXSorted");
	}

	template<typename F = ::jint>
	static auto ZPixmap() {
		static_assert(field_signatures[jField<F>("ZPixmap")] != -1);
		return sat<F>("ZPixmap");
	}

	template<typename F = ::jint *>
	static auto buttons() {
		static_assert(field_signatures[jField<F>("buttons")] != -1);
		return sat<F>("buttons");
	}

	constexpr static Enume method_signatures{
		cexprstr{"\0"}, //
	};

};

#endif
