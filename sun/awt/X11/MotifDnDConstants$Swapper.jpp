#ifndef sun_awt_X11_MotifDnDConstants$Swapper_HPP
#define sun_awt_X11_MotifDnDConstants$Swapper_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::MotifDnDConstants$Swapper : public jObject<::sun::awt::X11::MotifDnDConstants$Swapper, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "MotifDnDConstants$Swapper";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint(::jlong, ::jbyte)>("getInt"), //
		jMethod<::jshort(::jlong, ::jbyte)>("getShort"), //
		jMethod<::jint(::jint)>("swap"), //
		jMethod<::jshort(::jshort)>("swap"), //
	};

	template<typename R = ::jint, typename... Args>
	static auto getInt(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInt")] != -1);
		return scall<R>("getInt", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	static auto getShort(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getShort")] != -1);
		return scall<R>("getShort", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto swap(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("swap")] != -1);
		return scall<R>("swap", std::forward<Args>(args)...);
	}

};

#endif
