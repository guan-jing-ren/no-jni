#ifndef sun_awt_X11_XAtom_HPP
#define sun_awt_X11_XAtom_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::XAtom : public jObject<::sun::awt::X11::XAtom, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "XAtom";

	constexpr static Enume field_signatures{
		jField<::jlong>("XA_ARC"), //
		jField<::jlong>("XA_ATOM"), //
		jField<::jlong>("XA_BITMAP"), //
		jField<::jlong>("XA_CAP_HEIGHT"), //
		jField<::jlong>("XA_CARDINAL"), //
		jField<::jlong>("XA_COLORMAP"), //
		jField<::jlong>("XA_COPYRIGHT"), //
		jField<::jlong>("XA_CURSOR"), //
		jField<::jlong>("XA_CUT_BUFFER0"), //
		jField<::jlong>("XA_CUT_BUFFER1"), //
		jField<::jlong>("XA_CUT_BUFFER2"), //
		jField<::jlong>("XA_CUT_BUFFER3"), //
		jField<::jlong>("XA_CUT_BUFFER4"), //
		jField<::jlong>("XA_CUT_BUFFER5"), //
		jField<::jlong>("XA_CUT_BUFFER6"), //
		jField<::jlong>("XA_CUT_BUFFER7"), //
		jField<::jlong>("XA_DRAWABLE"), //
		jField<::jlong>("XA_END_SPACE"), //
		jField<::jlong>("XA_FAMILY_NAME"), //
		jField<::jlong>("XA_FONT"), //
		jField<::jlong>("XA_FONT_NAME"), //
		jField<::jlong>("XA_FULL_NAME"), //
		jField<::jlong>("XA_INTEGER"), //
		jField<::jlong>("XA_ITALIC_ANGLE"), //
		jField<::jlong>("XA_LAST_PREDEFINED"), //
		jField<::jlong>("XA_MAX_SPACE"), //
		jField<::jlong>("XA_MIN_SPACE"), //
		jField<::jlong>("XA_NORM_SPACE"), //
		jField<::jlong>("XA_NOTICE"), //
		jField<::jlong>("XA_PIXMAP"), //
		jField<::jlong>("XA_POINT"), //
		jField<::jlong>("XA_POINT_SIZE"), //
		jField<::jlong>("XA_PRIMARY"), //
		jField<::jlong>("XA_QUAD_WIDTH"), //
		jField<::jlong>("XA_RECTANGLE"), //
		jField<::jlong>("XA_RESOLUTION"), //
		jField<::jlong>("XA_RESOURCE_MANAGER"), //
		jField<::jlong>("XA_RGB_BEST_MAP"), //
		jField<::jlong>("XA_RGB_BLUE_MAP"), //
		jField<::jlong>("XA_RGB_COLOR_MAP"), //
		jField<::jlong>("XA_RGB_DEFAULT_MAP"), //
		jField<::jlong>("XA_RGB_GRAY_MAP"), //
		jField<::jlong>("XA_RGB_GREEN_MAP"), //
		jField<::jlong>("XA_RGB_RED_MAP"), //
		jField<::jlong>("XA_SECONDARY"), //
		jField<::jlong>("XA_STRIKEOUT_ASCENT"), //
		jField<::jlong>("XA_STRIKEOUT_DESCENT"), //
		jField<::jlong>("XA_STRING"), //
		jField<::jlong>("XA_SUBSCRIPT_X"), //
		jField<::jlong>("XA_SUBSCRIPT_Y"), //
		jField<::jlong>("XA_SUPERSCRIPT_X"), //
		jField<::jlong>("XA_SUPERSCRIPT_Y"), //
		jField<::jlong>("XA_UNDERLINE_POSITION"), //
		jField<::jlong>("XA_UNDERLINE_THICKNESS"), //
		jField<::jlong>("XA_VISUALID"), //
		jField<::jlong>("XA_WEIGHT"), //
		jField<::jlong>("XA_WINDOW"), //
		jField<::jlong>("XA_WM_CLASS"), //
		jField<::jlong>("XA_WM_CLIENT_MACHINE"), //
		jField<::jlong>("XA_WM_COMMAND"), //
		jField<::jlong>("XA_WM_HINTS"), //
		jField<::jlong>("XA_WM_ICON_NAME"), //
		jField<::jlong>("XA_WM_ICON_SIZE"), //
		jField<::jlong>("XA_WM_NAME"), //
		jField<::jlong>("XA_WM_NORMAL_HINTS"), //
		jField<::jlong>("XA_WM_SIZE_HINTS"), //
		jField<::jlong>("XA_WM_TRANSIENT_FOR"), //
		jField<::jlong>("XA_WM_ZOOM_HINTS"), //
		jField<::jlong>("XA_X_HEIGHT"), //
	};

	template<typename F = ::jlong>
	static auto XA_ARC() {
		static_assert(field_signatures[jField<F>("XA_ARC")] != -1);
		return sat<F>("XA_ARC");
	}

	template<typename F = ::jlong>
	static auto XA_ATOM() {
		static_assert(field_signatures[jField<F>("XA_ATOM")] != -1);
		return sat<F>("XA_ATOM");
	}

	template<typename F = ::jlong>
	static auto XA_BITMAP() {
		static_assert(field_signatures[jField<F>("XA_BITMAP")] != -1);
		return sat<F>("XA_BITMAP");
	}

	template<typename F = ::jlong>
	static auto XA_CAP_HEIGHT() {
		static_assert(field_signatures[jField<F>("XA_CAP_HEIGHT")] != -1);
		return sat<F>("XA_CAP_HEIGHT");
	}

	template<typename F = ::jlong>
	static auto XA_CARDINAL() {
		static_assert(field_signatures[jField<F>("XA_CARDINAL")] != -1);
		return sat<F>("XA_CARDINAL");
	}

	template<typename F = ::jlong>
	static auto XA_COLORMAP() {
		static_assert(field_signatures[jField<F>("XA_COLORMAP")] != -1);
		return sat<F>("XA_COLORMAP");
	}

	template<typename F = ::jlong>
	static auto XA_COPYRIGHT() {
		static_assert(field_signatures[jField<F>("XA_COPYRIGHT")] != -1);
		return sat<F>("XA_COPYRIGHT");
	}

	template<typename F = ::jlong>
	static auto XA_CURSOR() {
		static_assert(field_signatures[jField<F>("XA_CURSOR")] != -1);
		return sat<F>("XA_CURSOR");
	}

	template<typename F = ::jlong>
	static auto XA_CUT_BUFFER0() {
		static_assert(field_signatures[jField<F>("XA_CUT_BUFFER0")] != -1);
		return sat<F>("XA_CUT_BUFFER0");
	}

	template<typename F = ::jlong>
	static auto XA_CUT_BUFFER1() {
		static_assert(field_signatures[jField<F>("XA_CUT_BUFFER1")] != -1);
		return sat<F>("XA_CUT_BUFFER1");
	}

	template<typename F = ::jlong>
	static auto XA_CUT_BUFFER2() {
		static_assert(field_signatures[jField<F>("XA_CUT_BUFFER2")] != -1);
		return sat<F>("XA_CUT_BUFFER2");
	}

	template<typename F = ::jlong>
	static auto XA_CUT_BUFFER3() {
		static_assert(field_signatures[jField<F>("XA_CUT_BUFFER3")] != -1);
		return sat<F>("XA_CUT_BUFFER3");
	}

	template<typename F = ::jlong>
	static auto XA_CUT_BUFFER4() {
		static_assert(field_signatures[jField<F>("XA_CUT_BUFFER4")] != -1);
		return sat<F>("XA_CUT_BUFFER4");
	}

	template<typename F = ::jlong>
	static auto XA_CUT_BUFFER5() {
		static_assert(field_signatures[jField<F>("XA_CUT_BUFFER5")] != -1);
		return sat<F>("XA_CUT_BUFFER5");
	}

	template<typename F = ::jlong>
	static auto XA_CUT_BUFFER6() {
		static_assert(field_signatures[jField<F>("XA_CUT_BUFFER6")] != -1);
		return sat<F>("XA_CUT_BUFFER6");
	}

	template<typename F = ::jlong>
	static auto XA_CUT_BUFFER7() {
		static_assert(field_signatures[jField<F>("XA_CUT_BUFFER7")] != -1);
		return sat<F>("XA_CUT_BUFFER7");
	}

	template<typename F = ::jlong>
	static auto XA_DRAWABLE() {
		static_assert(field_signatures[jField<F>("XA_DRAWABLE")] != -1);
		return sat<F>("XA_DRAWABLE");
	}

	template<typename F = ::jlong>
	static auto XA_END_SPACE() {
		static_assert(field_signatures[jField<F>("XA_END_SPACE")] != -1);
		return sat<F>("XA_END_SPACE");
	}

	template<typename F = ::jlong>
	static auto XA_FAMILY_NAME() {
		static_assert(field_signatures[jField<F>("XA_FAMILY_NAME")] != -1);
		return sat<F>("XA_FAMILY_NAME");
	}

	template<typename F = ::jlong>
	static auto XA_FONT() {
		static_assert(field_signatures[jField<F>("XA_FONT")] != -1);
		return sat<F>("XA_FONT");
	}

	template<typename F = ::jlong>
	static auto XA_FONT_NAME() {
		static_assert(field_signatures[jField<F>("XA_FONT_NAME")] != -1);
		return sat<F>("XA_FONT_NAME");
	}

	template<typename F = ::jlong>
	static auto XA_FULL_NAME() {
		static_assert(field_signatures[jField<F>("XA_FULL_NAME")] != -1);
		return sat<F>("XA_FULL_NAME");
	}

	template<typename F = ::jlong>
	static auto XA_INTEGER() {
		static_assert(field_signatures[jField<F>("XA_INTEGER")] != -1);
		return sat<F>("XA_INTEGER");
	}

	template<typename F = ::jlong>
	static auto XA_ITALIC_ANGLE() {
		static_assert(field_signatures[jField<F>("XA_ITALIC_ANGLE")] != -1);
		return sat<F>("XA_ITALIC_ANGLE");
	}

	template<typename F = ::jlong>
	static auto XA_LAST_PREDEFINED() {
		static_assert(field_signatures[jField<F>("XA_LAST_PREDEFINED")] != -1);
		return sat<F>("XA_LAST_PREDEFINED");
	}

	template<typename F = ::jlong>
	static auto XA_MAX_SPACE() {
		static_assert(field_signatures[jField<F>("XA_MAX_SPACE")] != -1);
		return sat<F>("XA_MAX_SPACE");
	}

	template<typename F = ::jlong>
	static auto XA_MIN_SPACE() {
		static_assert(field_signatures[jField<F>("XA_MIN_SPACE")] != -1);
		return sat<F>("XA_MIN_SPACE");
	}

	template<typename F = ::jlong>
	static auto XA_NORM_SPACE() {
		static_assert(field_signatures[jField<F>("XA_NORM_SPACE")] != -1);
		return sat<F>("XA_NORM_SPACE");
	}

	template<typename F = ::jlong>
	static auto XA_NOTICE() {
		static_assert(field_signatures[jField<F>("XA_NOTICE")] != -1);
		return sat<F>("XA_NOTICE");
	}

	template<typename F = ::jlong>
	static auto XA_PIXMAP() {
		static_assert(field_signatures[jField<F>("XA_PIXMAP")] != -1);
		return sat<F>("XA_PIXMAP");
	}

	template<typename F = ::jlong>
	static auto XA_POINT() {
		static_assert(field_signatures[jField<F>("XA_POINT")] != -1);
		return sat<F>("XA_POINT");
	}

	template<typename F = ::jlong>
	static auto XA_POINT_SIZE() {
		static_assert(field_signatures[jField<F>("XA_POINT_SIZE")] != -1);
		return sat<F>("XA_POINT_SIZE");
	}

	template<typename F = ::jlong>
	static auto XA_PRIMARY() {
		static_assert(field_signatures[jField<F>("XA_PRIMARY")] != -1);
		return sat<F>("XA_PRIMARY");
	}

	template<typename F = ::jlong>
	static auto XA_QUAD_WIDTH() {
		static_assert(field_signatures[jField<F>("XA_QUAD_WIDTH")] != -1);
		return sat<F>("XA_QUAD_WIDTH");
	}

	template<typename F = ::jlong>
	static auto XA_RECTANGLE() {
		static_assert(field_signatures[jField<F>("XA_RECTANGLE")] != -1);
		return sat<F>("XA_RECTANGLE");
	}

	template<typename F = ::jlong>
	static auto XA_RESOLUTION() {
		static_assert(field_signatures[jField<F>("XA_RESOLUTION")] != -1);
		return sat<F>("XA_RESOLUTION");
	}

	template<typename F = ::jlong>
	static auto XA_RESOURCE_MANAGER() {
		static_assert(field_signatures[jField<F>("XA_RESOURCE_MANAGER")] != -1);
		return sat<F>("XA_RESOURCE_MANAGER");
	}

	template<typename F = ::jlong>
	static auto XA_RGB_BEST_MAP() {
		static_assert(field_signatures[jField<F>("XA_RGB_BEST_MAP")] != -1);
		return sat<F>("XA_RGB_BEST_MAP");
	}

	template<typename F = ::jlong>
	static auto XA_RGB_BLUE_MAP() {
		static_assert(field_signatures[jField<F>("XA_RGB_BLUE_MAP")] != -1);
		return sat<F>("XA_RGB_BLUE_MAP");
	}

	template<typename F = ::jlong>
	static auto XA_RGB_COLOR_MAP() {
		static_assert(field_signatures[jField<F>("XA_RGB_COLOR_MAP")] != -1);
		return sat<F>("XA_RGB_COLOR_MAP");
	}

	template<typename F = ::jlong>
	static auto XA_RGB_DEFAULT_MAP() {
		static_assert(field_signatures[jField<F>("XA_RGB_DEFAULT_MAP")] != -1);
		return sat<F>("XA_RGB_DEFAULT_MAP");
	}

	template<typename F = ::jlong>
	static auto XA_RGB_GRAY_MAP() {
		static_assert(field_signatures[jField<F>("XA_RGB_GRAY_MAP")] != -1);
		return sat<F>("XA_RGB_GRAY_MAP");
	}

	template<typename F = ::jlong>
	static auto XA_RGB_GREEN_MAP() {
		static_assert(field_signatures[jField<F>("XA_RGB_GREEN_MAP")] != -1);
		return sat<F>("XA_RGB_GREEN_MAP");
	}

	template<typename F = ::jlong>
	static auto XA_RGB_RED_MAP() {
		static_assert(field_signatures[jField<F>("XA_RGB_RED_MAP")] != -1);
		return sat<F>("XA_RGB_RED_MAP");
	}

	template<typename F = ::jlong>
	static auto XA_SECONDARY() {
		static_assert(field_signatures[jField<F>("XA_SECONDARY")] != -1);
		return sat<F>("XA_SECONDARY");
	}

	template<typename F = ::jlong>
	static auto XA_STRIKEOUT_ASCENT() {
		static_assert(field_signatures[jField<F>("XA_STRIKEOUT_ASCENT")] != -1);
		return sat<F>("XA_STRIKEOUT_ASCENT");
	}

	template<typename F = ::jlong>
	static auto XA_STRIKEOUT_DESCENT() {
		static_assert(field_signatures[jField<F>("XA_STRIKEOUT_DESCENT")] != -1);
		return sat<F>("XA_STRIKEOUT_DESCENT");
	}

	template<typename F = ::jlong>
	static auto XA_STRING() {
		static_assert(field_signatures[jField<F>("XA_STRING")] != -1);
		return sat<F>("XA_STRING");
	}

	template<typename F = ::jlong>
	static auto XA_SUBSCRIPT_X() {
		static_assert(field_signatures[jField<F>("XA_SUBSCRIPT_X")] != -1);
		return sat<F>("XA_SUBSCRIPT_X");
	}

	template<typename F = ::jlong>
	static auto XA_SUBSCRIPT_Y() {
		static_assert(field_signatures[jField<F>("XA_SUBSCRIPT_Y")] != -1);
		return sat<F>("XA_SUBSCRIPT_Y");
	}

	template<typename F = ::jlong>
	static auto XA_SUPERSCRIPT_X() {
		static_assert(field_signatures[jField<F>("XA_SUPERSCRIPT_X")] != -1);
		return sat<F>("XA_SUPERSCRIPT_X");
	}

	template<typename F = ::jlong>
	static auto XA_SUPERSCRIPT_Y() {
		static_assert(field_signatures[jField<F>("XA_SUPERSCRIPT_Y")] != -1);
		return sat<F>("XA_SUPERSCRIPT_Y");
	}

	template<typename F = ::jlong>
	static auto XA_UNDERLINE_POSITION() {
		static_assert(field_signatures[jField<F>("XA_UNDERLINE_POSITION")] != -1);
		return sat<F>("XA_UNDERLINE_POSITION");
	}

	template<typename F = ::jlong>
	static auto XA_UNDERLINE_THICKNESS() {
		static_assert(field_signatures[jField<F>("XA_UNDERLINE_THICKNESS")] != -1);
		return sat<F>("XA_UNDERLINE_THICKNESS");
	}

	template<typename F = ::jlong>
	static auto XA_VISUALID() {
		static_assert(field_signatures[jField<F>("XA_VISUALID")] != -1);
		return sat<F>("XA_VISUALID");
	}

	template<typename F = ::jlong>
	static auto XA_WEIGHT() {
		static_assert(field_signatures[jField<F>("XA_WEIGHT")] != -1);
		return sat<F>("XA_WEIGHT");
	}

	template<typename F = ::jlong>
	static auto XA_WINDOW() {
		static_assert(field_signatures[jField<F>("XA_WINDOW")] != -1);
		return sat<F>("XA_WINDOW");
	}

	template<typename F = ::jlong>
	static auto XA_WM_CLASS() {
		static_assert(field_signatures[jField<F>("XA_WM_CLASS")] != -1);
		return sat<F>("XA_WM_CLASS");
	}

	template<typename F = ::jlong>
	static auto XA_WM_CLIENT_MACHINE() {
		static_assert(field_signatures[jField<F>("XA_WM_CLIENT_MACHINE")] != -1);
		return sat<F>("XA_WM_CLIENT_MACHINE");
	}

	template<typename F = ::jlong>
	static auto XA_WM_COMMAND() {
		static_assert(field_signatures[jField<F>("XA_WM_COMMAND")] != -1);
		return sat<F>("XA_WM_COMMAND");
	}

	template<typename F = ::jlong>
	static auto XA_WM_HINTS() {
		static_assert(field_signatures[jField<F>("XA_WM_HINTS")] != -1);
		return sat<F>("XA_WM_HINTS");
	}

	template<typename F = ::jlong>
	static auto XA_WM_ICON_NAME() {
		static_assert(field_signatures[jField<F>("XA_WM_ICON_NAME")] != -1);
		return sat<F>("XA_WM_ICON_NAME");
	}

	template<typename F = ::jlong>
	static auto XA_WM_ICON_SIZE() {
		static_assert(field_signatures[jField<F>("XA_WM_ICON_SIZE")] != -1);
		return sat<F>("XA_WM_ICON_SIZE");
	}

	template<typename F = ::jlong>
	static auto XA_WM_NAME() {
		static_assert(field_signatures[jField<F>("XA_WM_NAME")] != -1);
		return sat<F>("XA_WM_NAME");
	}

	template<typename F = ::jlong>
	static auto XA_WM_NORMAL_HINTS() {
		static_assert(field_signatures[jField<F>("XA_WM_NORMAL_HINTS")] != -1);
		return sat<F>("XA_WM_NORMAL_HINTS");
	}

	template<typename F = ::jlong>
	static auto XA_WM_SIZE_HINTS() {
		static_assert(field_signatures[jField<F>("XA_WM_SIZE_HINTS")] != -1);
		return sat<F>("XA_WM_SIZE_HINTS");
	}

	template<typename F = ::jlong>
	static auto XA_WM_TRANSIENT_FOR() {
		static_assert(field_signatures[jField<F>("XA_WM_TRANSIENT_FOR")] != -1);
		return sat<F>("XA_WM_TRANSIENT_FOR");
	}

	template<typename F = ::jlong>
	static auto XA_WM_ZOOM_HINTS() {
		static_assert(field_signatures[jField<F>("XA_WM_ZOOM_HINTS")] != -1);
		return sat<F>("XA_WM_ZOOM_HINTS");
	}

	template<typename F = ::jlong>
	static auto XA_X_HEIGHT() {
		static_assert(field_signatures[jField<F>("XA_X_HEIGHT")] != -1);
		return sat<F>("XA_X_HEIGHT");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jlong, ::jlong)>(), //
		jConstructor<::jvoid(::java::lang::String, ::jboolean)>(), //
		jMethod<::jvoid(::jlong)>("DeleteProperty"), //
		jMethod<::jvoid(::sun::awt::X11::XBaseWindow)>("DeleteProperty"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::sun::awt::X11::XAtom(::java::lang::String)>("get"), //
		jMethod<::jlong(::jlong, ::jlong)>("get32Property"), //
		jMethod<::jboolean(::jlong, ::jlong, ::jint)>("getAtomData"), //
		jMethod<::jboolean(::jlong, ::jlong, ::jlong, ::jint)>("getAtomData"), //
		jMethod<::jbyte *(::jlong, ::jlong)>("getByteArrayProperty"), //
		jMethod<::jlong(::sun::awt::X11::XBaseWindow)>("getCard32Property"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::lang::String(::jlong)>("getProperty"), //
		jMethod<::jlong(::jlong)>("getWindowProperty"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jvoid(::jboolean)>("intern"), //
		jMethod<::jboolean()>("isInterned"), //
		jMethod<::jvoid(::jlong, ::jlong, ::jint)>("setAtomData"), //
		jMethod<::jvoid(::jlong, ::jlong, ::jlong, ::jint)>("setAtomData"), //
		jMethod<::jvoid(::jlong, ::jlong, ::jbyte *)>("setAtomData"), //
		jMethod<::jvoid(::jlong, ::jlong, ::jlong, ::jint)>("setAtomData8"), //
		jMethod<::jvoid(::sun::awt::X11::XBaseWindow, ::sun::awt::X11::XAtomList)>("setAtomListProperty"), //
		jMethod<::jvoid(::sun::awt::X11::XBaseWindow, ::sun::awt::X11::XAtom *)>("setAtomListProperty"), //
		jMethod<::jvoid(::jlong, ::jlong)>("setCard32Property"), //
		jMethod<::jvoid(::sun::awt::X11::XBaseWindow, ::jlong)>("setCard32Property"), //
		jMethod<::jvoid(::jlong, ::java::lang::String)>("setProperty"), //
		jMethod<::jvoid(::jlong, ::java::lang::String)>("setProperty8"), //
		jMethod<::jvoid(::jlong, ::java::lang::String)>("setPropertyUTF8"), //
		jMethod<::jvoid(::jlong, ::java::lang::String, ::jlong)>("setValues"), //
		jMethod<::jvoid(::jlong, ::jlong)>("setWindowProperty"), //
		jMethod<::jvoid(::sun::awt::X11::XBaseWindow, ::sun::awt::X11::XBaseWindow)>("setWindowProperty"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto DeleteProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("DeleteProperty")] != -1);
		return call<R>("DeleteProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XAtom, typename... Args>
	static auto get(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return scall<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get32Property(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get32Property")] != -1);
		return call<R>("get32Property", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getAtomData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAtomData")] != -1);
		return call<R>("getAtomData", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getByteArrayProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getByteArrayProperty")] != -1);
		return call<R>("getByteArrayProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getCard32Property(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCard32Property")] != -1);
		return call<R>("getCard32Property", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProperty")] != -1);
		return call<R>("getProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getWindowProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWindowProperty")] != -1);
		return call<R>("getWindowProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto intern(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("intern")] != -1);
		return call<R>("intern", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isInterned(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isInterned")] != -1);
		return call<R>("isInterned", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAtomData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAtomData")] != -1);
		return call<R>("setAtomData", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAtomData8(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAtomData8")] != -1);
		return call<R>("setAtomData8", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAtomListProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAtomListProperty")] != -1);
		return call<R>("setAtomListProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCard32Property(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCard32Property")] != -1);
		return call<R>("setCard32Property", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setProperty")] != -1);
		return call<R>("setProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setProperty8(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setProperty8")] != -1);
		return call<R>("setProperty8", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPropertyUTF8(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPropertyUTF8")] != -1);
		return call<R>("setPropertyUTF8", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValues(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setValues")] != -1);
		return call<R>("setValues", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWindowProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setWindowProperty")] != -1);
		return call<R>("setWindowProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
