#ifndef sun_awt_X11_XQueryTree_HPP
#define sun_awt_X11_XQueryTree_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::XQueryTree : public jObject<::sun::awt::X11::XQueryTree, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "XQueryTree";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jlong)>(), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jint()>("execute"), //
		jMethod<::jint(::sun::awt::X11::XErrorHandler)>("execute"), //
		jMethod<::jlong()>("get_children"), //
		jMethod<::jint()>("get_nchildren"), //
		jMethod<::jlong()>("get_parent"), //
		jMethod<::jlong()>("get_root"), //
		jMethod<::jlong()>("get_w"), //
		jMethod<::jboolean()>("isDisposed"), //
		jMethod<::jboolean()>("isExecuted"), //
		jMethod<::jvoid(::jlong)>("set_children"), //
		jMethod<::jvoid(::jint)>("set_nchildren"), //
		jMethod<::jvoid(::jlong)>("set_parent"), //
		jMethod<::jvoid(::jlong)>("set_root"), //
		jMethod<::jvoid(::jlong)>("set_w"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto execute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("execute")] != -1);
		return call<R>("execute", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_children(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_children")] != -1);
		return call<R>("get_children", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_nchildren(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_nchildren")] != -1);
		return call<R>("get_nchildren", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_parent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_parent")] != -1);
		return call<R>("get_parent", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_root(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_root")] != -1);
		return call<R>("get_root", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_w(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_w")] != -1);
		return call<R>("get_w", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDisposed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDisposed")] != -1);
		return call<R>("isDisposed", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isExecuted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isExecuted")] != -1);
		return call<R>("isExecuted", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_children(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_children")] != -1);
		return call<R>("set_children", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_nchildren(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_nchildren")] != -1);
		return call<R>("set_nchildren", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_parent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_parent")] != -1);
		return call<R>("set_parent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_root(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_root")] != -1);
		return call<R>("set_root", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_w(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_w")] != -1);
		return call<R>("set_w", std::forward<Args>(args)...);
	}

};

#endif
