#ifndef sun_awt_X11_XButtonPeer_HPP
#define sun_awt_X11_XButtonPeer_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::XButtonPeer : public jObject<::sun::awt::X11::XButtonPeer, ::sun::awt::X11::XComponentPeer> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "XButtonPeer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::Button)>(), //
		jMethod<::jvoid(::jlong, ::jint)>("action"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jvoid(::java::awt::event::FocusEvent)>("focusGained"), //
		jMethod<::jvoid(::java::awt::event::FocusEvent)>("focusLost"), //
		jMethod<::java::awt::Dimension()>("getMinimumSize"), //
		jMethod<::jboolean()>("isFocusable"), //
		jMethod<::java::awt::Dimension()>("minimumSize"), //
		jMethod<::jvoid(::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintBorder"), //
		jMethod<::jvoid(::java::awt::Color)>("setBackground"), //
		jMethod<::jvoid(::java::lang::String)>("setLabel"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto action(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("action")] != -1);
		return call<R>("action", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto focusGained(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("focusGained")] != -1);
		return call<R>("focusGained", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto focusLost(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("focusLost")] != -1);
		return call<R>("focusLost", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinimumSize")] != -1);
		return call<R>("getMinimumSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFocusable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFocusable")] != -1);
		return call<R>("isFocusable", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto minimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("minimumSize")] != -1);
		return call<R>("minimumSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paintBorder")] != -1);
		return call<R>("paintBorder", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBackground")] != -1);
		return call<R>("setBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLabel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLabel")] != -1);
		return call<R>("setLabel", std::forward<Args>(args)...);
	}

};

#endif
