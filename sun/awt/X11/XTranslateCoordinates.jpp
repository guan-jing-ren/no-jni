#ifndef sun_awt_X11_XTranslateCoordinates_HPP
#define sun_awt_X11_XTranslateCoordinates_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::XTranslateCoordinates : public jObject<::sun::awt::X11::XTranslateCoordinates, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "XTranslateCoordinates";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jlong, ::jlong, ::jint, ::jint)>(), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jint()>("execute"), //
		jMethod<::jint(::sun::awt::X11::XErrorHandler)>("execute"), //
		jMethod<::jlong()>("get_child"), //
		jMethod<::jlong()>("get_dest_w"), //
		jMethod<::jint()>("get_dest_x"), //
		jMethod<::jint()>("get_dest_y"), //
		jMethod<::jlong()>("get_scr_w"), //
		jMethod<::jint()>("get_src_x"), //
		jMethod<::jint()>("get_src_y"), //
		jMethod<::jboolean()>("isDisposed"), //
		jMethod<::jboolean()>("isExecuted"), //
		jMethod<::jvoid(::jlong)>("set_child"), //
		jMethod<::jvoid(::jlong)>("set_dest_w"), //
		jMethod<::jvoid(::jint)>("set_dest_x"), //
		jMethod<::jvoid(::jint)>("set_dest_y"), //
		jMethod<::jvoid(::jlong)>("set_scr_w"), //
		jMethod<::jvoid(::jint)>("set_src_x"), //
		jMethod<::jvoid(::jint)>("set_src_y"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto execute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("execute")] != -1);
		return call<R>("execute", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_child(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_child")] != -1);
		return call<R>("get_child", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_dest_w(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_dest_w")] != -1);
		return call<R>("get_dest_w", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_dest_x(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_dest_x")] != -1);
		return call<R>("get_dest_x", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_dest_y(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_dest_y")] != -1);
		return call<R>("get_dest_y", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_scr_w(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_scr_w")] != -1);
		return call<R>("get_scr_w", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_src_x(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_src_x")] != -1);
		return call<R>("get_src_x", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_src_y(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_src_y")] != -1);
		return call<R>("get_src_y", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDisposed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDisposed")] != -1);
		return call<R>("isDisposed", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isExecuted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isExecuted")] != -1);
		return call<R>("isExecuted", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_child(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_child")] != -1);
		return call<R>("set_child", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_dest_w(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_dest_w")] != -1);
		return call<R>("set_dest_w", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_dest_x(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_dest_x")] != -1);
		return call<R>("set_dest_x", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_dest_y(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_dest_y")] != -1);
		return call<R>("set_dest_y", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_scr_w(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_scr_w")] != -1);
		return call<R>("set_scr_w", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_src_x(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_src_x")] != -1);
		return call<R>("set_src_x", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_src_y(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_src_y")] != -1);
		return call<R>("set_src_y", std::forward<Args>(args)...);
	}

};

#endif
