#ifndef sun_awt_X11_XEmbeddedFramePeer_HPP
#define sun_awt_X11_XEmbeddedFramePeer_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::XEmbeddedFramePeer : public jObject<::sun::awt::X11::XEmbeddedFramePeer, ::sun::awt::X11::XFramePeer> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "XEmbeddedFramePeer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::sun::awt::EmbeddedFrame)>(), //
		jMethod<::jvoid()>("addDropTarget"), //
		jMethod<::jvoid(::sun::awt::X11::ToplevelStateListener)>("addToplevelStateListener"), //
		jMethod<::jvoid(::java::awt::Rectangle)>("checkIfOnNewScreen"), //
		jMethod<::jvoid()>("displayChanged"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jvoid(::jboolean)>("emulateActivation"), //
		jMethod<::jint()>("getAbsoluteX"), //
		jMethod<::jint()>("getAbsoluteY"), //
		jMethod<::java::awt::Rectangle()>("getBounds"), //
		jMethod<::java::awt::Rectangle()>("getBoundsPrivate"), //
		jMethod<::jlong()>("getContentWindow"), //
		jMethod<::java::awt::Graphics()>("getGraphics"), //
		jMethod<::jint()>("getHeight"), //
		jMethod<::java::awt::Insets()>("getInsets"), //
		jMethod<::java::awt::Point()>("getLocation"), //
		jMethod<::java::awt::Point()>("getLocationOnScreen"), //
		jMethod<::sun::awt::X11::PropMwmHints()>("getMWMHints"), //
		jMethod<::sun::awt::X11::XAtomList()>("getNETWMState"), //
		jMethod<::sun::awt::X11::XWindowPeer()>("getOwnerPeer"), //
		jMethod<::jlong()>("getShell"), //
		jMethod<::java::awt::Dimension()>("getSize"), //
		jMethod<::jint()>("getState"), //
		jMethod<::java::awt::Dimension()>("getTargetMinimumSize"), //
		jMethod<::jint()>("getWidth"), //
		jMethod<::jint()>("getX"), //
		jMethod<::jint()>("getY"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleButtonPressRelease"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleClientMessage"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleConfigureNotifyEvent"), //
		jMethod<::jvoid()>("handleDeiconify"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleFocusEvent"), //
		jMethod<::jvoid()>("handleIconify"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleMapNotifyEvent"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleMotionNotify"), //
		jMethod<::jvoid(::sun::awt::X11::WindowDimensions)>("handleMoved"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handlePropertyNotify"), //
		jMethod<::jvoid()>("handleQuit"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleReparentNotifyEvent"), //
		jMethod<::jvoid(::jint, ::jint)>("handleStateChange"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleUnmapNotifyEvent"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleVisibilityEvent"), //
		jMethod<::jvoid(::jlong)>("handleWindowFocusIn"), //
		jMethod<::jvoid(::jlong)>("handleWindowFocusInSync"), //
		jMethod<::jvoid()>("handleWindowFocusIn_Dispatch"), //
		jMethod<::jvoid(::java::awt::Window, ::jlong)>("handleWindowFocusOut"), //
		jMethod<::jvoid(::java::awt::Window, ::jlong)>("handleWindowFocusOutSync"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleXCrossingEvent"), //
		jMethod<::java::awt::Insets()>("insets"), //
		jMethod<::jboolean()>("isGrabbed"), //
		jMethod<::jvoid()>("paletteChanged"), //
		jMethod<::jvoid(::sun::awt::X11::XCreateWindowParams)>("preInit"), //
		jMethod<::jvoid(::java::awt::Graphics)>("print"), //
		jMethod<::jvoid(::java::util::List)>("recursivelySetIcon"), //
		jMethod<::jvoid()>("removeDropTarget"), //
		jMethod<::jvoid(::sun::awt::X11::ToplevelStateListener)>("removeToplevelStateListener"), //
		jMethod<::jvoid()>("repositionSecurityWarning"), //
		jMethod<::jboolean()>("requestWindowFocus"), //
		jMethod<::jboolean(::jlong, ::jboolean)>("requestWindowFocus"), //
		jMethod<::jboolean(::sun::awt::X11::XWindowPeer)>("requestWindowFocus"), //
		jMethod<::jvoid(::sun::awt::X11::WindowDimensions, ::jint, ::jboolean)>("reshape"), //
		jMethod<::jvoid()>("revalidate"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint)>("setBounds"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("setBoundsPrivate"), //
		jMethod<::jvoid(::jboolean)>("setFullScreenExclusiveModeState"), //
		jMethod<::jvoid(::jboolean)>("setGrab"), //
		jMethod<::jvoid(::sun::awt::X11::PropMwmHints)>("setMWMHints"), //
		jMethod<::jvoid(::java::awt::Rectangle)>("setMaximizedBounds"), //
		jMethod<::jvoid(::java::awt::MenuBar)>("setMenuBar"), //
		jMethod<::jvoid(::java::awt::Dialog, ::jboolean)>("setModalBlocked"), //
		jMethod<::jvoid(::java::awt::Dialog, ::jboolean, ::java::util::Vector)>("setModalBlocked"), //
		jMethod<::jvoid(::sun::awt::X11::XAtomList)>("setNETWMState"), //
		jMethod<::jvoid(::jfloat)>("setOpacity"), //
		jMethod<::jvoid(::jboolean)>("setOpaque"), //
		jMethod<::jvoid(::jboolean)>("setResizable"), //
		jMethod<::jvoid(::java::awt::Rectangle)>("setShellBounds"), //
		jMethod<::jvoid(::java::awt::Rectangle)>("setShellPosition"), //
		jMethod<::jvoid(::java::awt::Rectangle)>("setShellSize"), //
		jMethod<::jvoid(::jint)>("setState"), //
		jMethod<::jvoid(::java::lang::String)>("setTitle"), //
		jMethod<::jvoid(::jboolean)>("setVisible"), //
		jMethod<::jvoid(::jboolean)>("synthesizeFocusInOut"), //
		jMethod<::jvoid()>("toBack"), //
		jMethod<::jvoid()>("toFront"), //
		jMethod<::jvoid()>("updateAlwaysOnTopState"), //
		jMethod<::jvoid()>("updateFocusableWindowState"), //
		jMethod<::jvoid()>("updateIconImages"), //
		jMethod<::jvoid()>("updateMinimumSize"), //
		jMethod<::jvoid()>("updateSecurityWarningVisibility"), //
		jMethod<::jvoid()>("updateWindow"), //
		jMethod<::jvoid(::jboolean)>("xSetVisible"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addDropTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addDropTarget")] != -1);
		return call<R>("addDropTarget", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addToplevelStateListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addToplevelStateListener")] != -1);
		return call<R>("addToplevelStateListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto checkIfOnNewScreen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkIfOnNewScreen")] != -1);
		return call<R>("checkIfOnNewScreen", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto displayChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("displayChanged")] != -1);
		return call<R>("displayChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto emulateActivation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("emulateActivation")] != -1);
		return call<R>("emulateActivation", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAbsoluteX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAbsoluteX")] != -1);
		return call<R>("getAbsoluteX", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAbsoluteY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAbsoluteY")] != -1);
		return call<R>("getAbsoluteY", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds")] != -1);
		return call<R>("getBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getBoundsPrivate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBoundsPrivate")] != -1);
		return call<R>("getBoundsPrivate", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getContentWindow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContentWindow")] != -1);
		return call<R>("getContentWindow", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Graphics, typename... Args>
	auto getGraphics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGraphics")] != -1);
		return call<R>("getGraphics", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeight")] != -1);
		return call<R>("getHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Insets, typename... Args>
	auto getInsets(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInsets")] != -1);
		return call<R>("getInsets", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Point, typename... Args>
	auto getLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocation")] != -1);
		return call<R>("getLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Point, typename... Args>
	auto getLocationOnScreen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocationOnScreen")] != -1);
		return call<R>("getLocationOnScreen", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::PropMwmHints, typename... Args>
	auto getMWMHints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMWMHints")] != -1);
		return call<R>("getMWMHints", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XAtomList, typename... Args>
	auto getNETWMState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNETWMState")] != -1);
		return call<R>("getNETWMState", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XWindowPeer, typename... Args>
	auto getOwnerPeer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOwnerPeer")] != -1);
		return call<R>("getOwnerPeer", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getShell(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getShell")] != -1);
		return call<R>("getShell", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return call<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getState")] != -1);
		return call<R>("getState", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getTargetMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTargetMinimumSize")] != -1);
		return call<R>("getTargetMinimumSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getX")] != -1);
		return call<R>("getX", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getY")] != -1);
		return call<R>("getY", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleButtonPressRelease(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleButtonPressRelease")] != -1);
		return call<R>("handleButtonPressRelease", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleClientMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleClientMessage")] != -1);
		return call<R>("handleClientMessage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleConfigureNotifyEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleConfigureNotifyEvent")] != -1);
		return call<R>("handleConfigureNotifyEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleDeiconify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleDeiconify")] != -1);
		return call<R>("handleDeiconify", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleFocusEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleFocusEvent")] != -1);
		return call<R>("handleFocusEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleIconify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleIconify")] != -1);
		return call<R>("handleIconify", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleMapNotifyEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleMapNotifyEvent")] != -1);
		return call<R>("handleMapNotifyEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleMotionNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleMotionNotify")] != -1);
		return call<R>("handleMotionNotify", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleMoved(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleMoved")] != -1);
		return call<R>("handleMoved", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handlePropertyNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handlePropertyNotify")] != -1);
		return call<R>("handlePropertyNotify", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleQuit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleQuit")] != -1);
		return call<R>("handleQuit", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleReparentNotifyEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleReparentNotifyEvent")] != -1);
		return call<R>("handleReparentNotifyEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleStateChange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleStateChange")] != -1);
		return call<R>("handleStateChange", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleUnmapNotifyEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleUnmapNotifyEvent")] != -1);
		return call<R>("handleUnmapNotifyEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleVisibilityEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleVisibilityEvent")] != -1);
		return call<R>("handleVisibilityEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleWindowFocusIn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleWindowFocusIn")] != -1);
		return call<R>("handleWindowFocusIn", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleWindowFocusInSync(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleWindowFocusInSync")] != -1);
		return call<R>("handleWindowFocusInSync", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleWindowFocusIn_Dispatch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleWindowFocusIn_Dispatch")] != -1);
		return call<R>("handleWindowFocusIn_Dispatch", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleWindowFocusOut(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleWindowFocusOut")] != -1);
		return call<R>("handleWindowFocusOut", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleWindowFocusOutSync(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleWindowFocusOutSync")] != -1);
		return call<R>("handleWindowFocusOutSync", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleXCrossingEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleXCrossingEvent")] != -1);
		return call<R>("handleXCrossingEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Insets, typename... Args>
	auto insets(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insets")] != -1);
		return call<R>("insets", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isGrabbed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isGrabbed")] != -1);
		return call<R>("isGrabbed", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paletteChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paletteChanged")] != -1);
		return call<R>("paletteChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto preInit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("preInit")] != -1);
		return call<R>("preInit", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto print(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("print")] != -1);
		return call<R>("print", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto recursivelySetIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("recursivelySetIcon")] != -1);
		return call<R>("recursivelySetIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeDropTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeDropTarget")] != -1);
		return call<R>("removeDropTarget", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeToplevelStateListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeToplevelStateListener")] != -1);
		return call<R>("removeToplevelStateListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto repositionSecurityWarning(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("repositionSecurityWarning")] != -1);
		return call<R>("repositionSecurityWarning", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto requestWindowFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("requestWindowFocus")] != -1);
		return call<R>("requestWindowFocus", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reshape(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reshape")] != -1);
		return call<R>("reshape", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto revalidate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("revalidate")] != -1);
		return call<R>("revalidate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBounds")] != -1);
		return call<R>("setBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBoundsPrivate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBoundsPrivate")] != -1);
		return call<R>("setBoundsPrivate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFullScreenExclusiveModeState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFullScreenExclusiveModeState")] != -1);
		return call<R>("setFullScreenExclusiveModeState", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGrab(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setGrab")] != -1);
		return call<R>("setGrab", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMWMHints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMWMHints")] != -1);
		return call<R>("setMWMHints", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaximizedBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMaximizedBounds")] != -1);
		return call<R>("setMaximizedBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMenuBar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMenuBar")] != -1);
		return call<R>("setMenuBar", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setModalBlocked(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setModalBlocked")] != -1);
		return call<R>("setModalBlocked", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNETWMState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNETWMState")] != -1);
		return call<R>("setNETWMState", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOpacity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOpacity")] != -1);
		return call<R>("setOpacity", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOpaque(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOpaque")] != -1);
		return call<R>("setOpaque", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setResizable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setResizable")] != -1);
		return call<R>("setResizable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setShellBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setShellBounds")] != -1);
		return call<R>("setShellBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setShellPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setShellPosition")] != -1);
		return call<R>("setShellPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setShellSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setShellSize")] != -1);
		return call<R>("setShellSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setState")] != -1);
		return call<R>("setState", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTitle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTitle")] != -1);
		return call<R>("setTitle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVisible")] != -1);
		return call<R>("setVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto synthesizeFocusInOut(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("synthesizeFocusInOut")] != -1);
		return call<R>("synthesizeFocusInOut", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto toBack(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toBack")] != -1);
		return call<R>("toBack", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto toFront(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toFront")] != -1);
		return call<R>("toFront", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateAlwaysOnTopState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateAlwaysOnTopState")] != -1);
		return call<R>("updateAlwaysOnTopState", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateFocusableWindowState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateFocusableWindowState")] != -1);
		return call<R>("updateFocusableWindowState", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateIconImages(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateIconImages")] != -1);
		return call<R>("updateIconImages", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateMinimumSize")] != -1);
		return call<R>("updateMinimumSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateSecurityWarningVisibility(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateSecurityWarningVisibility")] != -1);
		return call<R>("updateSecurityWarningVisibility", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateWindow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateWindow")] != -1);
		return call<R>("updateWindow", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto xSetVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("xSetVisible")] != -1);
		return call<R>("xSetVisible", std::forward<Args>(args)...);
	}

};

#endif
