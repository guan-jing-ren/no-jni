#ifndef sun_awt_X11_XCreateWindowParams_HPP
#define sun_awt_X11_XCreateWindowParams_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::XCreateWindowParams : public jObject<::sun::awt::X11::XCreateWindowParams, ::java::util::HashMap> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "XCreateWindowParams";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::Object *)>(), //
		jMethod<::sun::awt::X11::XCreateWindowParams(::java::lang::Object, ::jint)>("add"), //
		jMethod<::sun::awt::X11::XCreateWindowParams(::java::lang::Object, ::jlong)>("add"), //
		jMethod<::sun::awt::X11::XCreateWindowParams(::java::lang::Object, ::java::lang::Object)>("add"), //
		jMethod<::sun::awt::X11::XCreateWindowParams(::java::lang::Object)>("delete"), //
		jMethod<::sun::awt::X11::XCreateWindowParams(::java::lang::Object, ::jint)>("putIfNull"), //
		jMethod<::sun::awt::X11::XCreateWindowParams(::java::lang::Object, ::jlong)>("putIfNull"), //
		jMethod<::sun::awt::X11::XCreateWindowParams(::java::lang::Object, ::java::lang::Object)>("putIfNull"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::sun::awt::X11::XCreateWindowParams, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XCreateWindowParams, typename... Args>
	auto delete_(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("delete")] != -1);
		return call<R>("delete", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XCreateWindowParams, typename... Args>
	auto putIfNull(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putIfNull")] != -1);
		return call<R>("putIfNull", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
