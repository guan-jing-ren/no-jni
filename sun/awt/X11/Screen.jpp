#ifndef sun_awt_X11_Screen_HPP
#define sun_awt_X11_Screen_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::Screen : public jObject<::sun::awt::X11::Screen, ::sun::awt::X11::XWrapperBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "Screen";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jlong)>(), //
		jMethod<::sun::awt::X11::XEvent()>("clone"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jint()>("getDataSize"), //
		jMethod<::jlong()>("getPData"), //
		jMethod<::jint()>("getSize"), //
		jMethod<::jint()>("get_backing_store"), //
		jMethod<::jlong()>("get_black_pixel"), //
		jMethod<::jlong()>("get_cmap"), //
		jMethod<::jlong()>("get_default_gc"), //
		jMethod<::jlong()>("get_depths"), //
		jMethod<::sun::awt::X11::Depth(::jint)>("get_depths"), //
		jMethod<::jlong()>("get_display"), //
		jMethod<::jlong(::jint)>("get_display"), //
		jMethod<::jlong()>("get_ext_data"), //
		jMethod<::sun::awt::X11::XExtData(::jint)>("get_ext_data"), //
		jMethod<::jint()>("get_height"), //
		jMethod<::jint()>("get_max_maps"), //
		jMethod<::jint()>("get_mheight"), //
		jMethod<::jint()>("get_min_maps"), //
		jMethod<::jint()>("get_mwidth"), //
		jMethod<::jint()>("get_ndepths"), //
		jMethod<::jlong()>("get_root"), //
		jMethod<::jint()>("get_root_depth"), //
		jMethod<::jlong()>("get_root_input_mask"), //
		jMethod<::jlong()>("get_root_visual"), //
		jMethod<::sun::awt::X11::Visual(::jint)>("get_root_visual"), //
		jMethod<::jboolean()>("get_save_unders"), //
		jMethod<::jlong()>("get_white_pixel"), //
		jMethod<::jint()>("get_width"), //
		jMethod<::jvoid(::jint)>("set_backing_store"), //
		jMethod<::jvoid(::jlong)>("set_black_pixel"), //
		jMethod<::jvoid(::jlong)>("set_cmap"), //
		jMethod<::jvoid(::jlong)>("set_default_gc"), //
		jMethod<::jvoid(::jlong)>("set_depths"), //
		jMethod<::jvoid(::jlong)>("set_display"), //
		jMethod<::jvoid(::jlong)>("set_ext_data"), //
		jMethod<::jvoid(::jint)>("set_height"), //
		jMethod<::jvoid(::jint)>("set_max_maps"), //
		jMethod<::jvoid(::jint)>("set_mheight"), //
		jMethod<::jvoid(::jint)>("set_min_maps"), //
		jMethod<::jvoid(::jint)>("set_mwidth"), //
		jMethod<::jvoid(::jint)>("set_ndepths"), //
		jMethod<::jvoid(::jlong)>("set_root"), //
		jMethod<::jvoid(::jint)>("set_root_depth"), //
		jMethod<::jvoid(::jlong)>("set_root_input_mask"), //
		jMethod<::jvoid(::jlong)>("set_root_visual"), //
		jMethod<::jvoid(::jboolean)>("set_save_unders"), //
		jMethod<::jvoid(::jlong)>("set_white_pixel"), //
		jMethod<::jvoid(::jint)>("set_width"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid()>("zero"), //
	};

	template<typename R = ::sun::awt::X11::XEvent, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDataSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDataSize")] != -1);
		return call<R>("getDataSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getPData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPData")] != -1);
		return call<R>("getPData", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getSize(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return scall<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_backing_store(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_backing_store")] != -1);
		return call<R>("get_backing_store", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_black_pixel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_black_pixel")] != -1);
		return call<R>("get_black_pixel", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_cmap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_cmap")] != -1);
		return call<R>("get_cmap", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_default_gc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_default_gc")] != -1);
		return call<R>("get_default_gc", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_depths(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_depths")] != -1);
		return call<R>("get_depths", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_display(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_display")] != -1);
		return call<R>("get_display", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_ext_data(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_ext_data")] != -1);
		return call<R>("get_ext_data", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_height(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_height")] != -1);
		return call<R>("get_height", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_max_maps(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_max_maps")] != -1);
		return call<R>("get_max_maps", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_mheight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_mheight")] != -1);
		return call<R>("get_mheight", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_min_maps(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_min_maps")] != -1);
		return call<R>("get_min_maps", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_mwidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_mwidth")] != -1);
		return call<R>("get_mwidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_ndepths(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_ndepths")] != -1);
		return call<R>("get_ndepths", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_root(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_root")] != -1);
		return call<R>("get_root", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_root_depth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_root_depth")] != -1);
		return call<R>("get_root_depth", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_root_input_mask(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_root_input_mask")] != -1);
		return call<R>("get_root_input_mask", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_root_visual(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_root_visual")] != -1);
		return call<R>("get_root_visual", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto get_save_unders(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_save_unders")] != -1);
		return call<R>("get_save_unders", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_white_pixel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_white_pixel")] != -1);
		return call<R>("get_white_pixel", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_width(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_width")] != -1);
		return call<R>("get_width", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_backing_store(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_backing_store")] != -1);
		return call<R>("set_backing_store", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_black_pixel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_black_pixel")] != -1);
		return call<R>("set_black_pixel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_cmap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_cmap")] != -1);
		return call<R>("set_cmap", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_default_gc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_default_gc")] != -1);
		return call<R>("set_default_gc", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_depths(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_depths")] != -1);
		return call<R>("set_depths", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_display(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_display")] != -1);
		return call<R>("set_display", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_ext_data(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_ext_data")] != -1);
		return call<R>("set_ext_data", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_height(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_height")] != -1);
		return call<R>("set_height", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_max_maps(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_max_maps")] != -1);
		return call<R>("set_max_maps", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_mheight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_mheight")] != -1);
		return call<R>("set_mheight", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_min_maps(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_min_maps")] != -1);
		return call<R>("set_min_maps", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_mwidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_mwidth")] != -1);
		return call<R>("set_mwidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_ndepths(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_ndepths")] != -1);
		return call<R>("set_ndepths", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_root(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_root")] != -1);
		return call<R>("set_root", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_root_depth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_root_depth")] != -1);
		return call<R>("set_root_depth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_root_input_mask(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_root_input_mask")] != -1);
		return call<R>("set_root_input_mask", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_root_visual(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_root_visual")] != -1);
		return call<R>("set_root_visual", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_save_unders(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_save_unders")] != -1);
		return call<R>("set_save_unders", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_white_pixel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_white_pixel")] != -1);
		return call<R>("set_white_pixel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_width(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_width")] != -1);
		return call<R>("set_width", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto zero(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("zero")] != -1);
		return call<R>("zero", std::forward<Args>(args)...);
	}

};

#endif
