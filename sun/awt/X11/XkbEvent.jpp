#ifndef sun_awt_X11_XkbEvent_HPP
#define sun_awt_X11_XkbEvent_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::XkbEvent : public jObject<::sun::awt::X11::XkbEvent, ::sun::awt::X11::XWrapperBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "XkbEvent";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jlong)>(), //
		jMethod<::sun::awt::X11::XEvent()>("clone"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jint()>("getDataSize"), //
		jMethod<::jlong()>("getPData"), //
		jMethod<::jint()>("getSize"), //
		jMethod<::sun::awt::X11::XkbAccessXNotifyEvent()>("get_accessx"), //
		jMethod<::sun::awt::X11::XkbAnyEvent()>("get_any"), //
		jMethod<::sun::awt::X11::XkbBellNotifyEvent()>("get_bell"), //
		jMethod<::sun::awt::X11::XkbCompatMapNotifyEvent()>("get_compat"), //
		jMethod<::sun::awt::X11::XEvent()>("get_core"), //
		jMethod<::sun::awt::X11::XkbControlsNotifyEvent()>("get_ctrls"), //
		jMethod<::sun::awt::X11::XkbExtensionDeviceNotifyEvent()>("get_device"), //
		jMethod<::sun::awt::X11::XkbIndicatorNotifyEvent()>("get_indicators"), //
		jMethod<::sun::awt::X11::XkbMapNotifyEvent()>("get_map"), //
		jMethod<::sun::awt::X11::XkbActionMessageEvent()>("get_message"), //
		jMethod<::sun::awt::X11::XkbNamesNotifyEvent()>("get_names"), //
		jMethod<::sun::awt::X11::XkbNewKeyboardNotifyEvent()>("get_new_kbd"), //
		jMethod<::sun::awt::X11::XkbStateNotifyEvent()>("get_state"), //
		jMethod<::jint()>("get_type"), //
		jMethod<::jvoid(::jint)>("set_type"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid()>("zero"), //
	};

	template<typename R = ::sun::awt::X11::XEvent, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDataSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDataSize")] != -1);
		return call<R>("getDataSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getPData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPData")] != -1);
		return call<R>("getPData", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getSize(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return scall<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XkbAccessXNotifyEvent, typename... Args>
	auto get_accessx(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_accessx")] != -1);
		return call<R>("get_accessx", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XkbAnyEvent, typename... Args>
	auto get_any(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_any")] != -1);
		return call<R>("get_any", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XkbBellNotifyEvent, typename... Args>
	auto get_bell(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_bell")] != -1);
		return call<R>("get_bell", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XkbCompatMapNotifyEvent, typename... Args>
	auto get_compat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_compat")] != -1);
		return call<R>("get_compat", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XEvent, typename... Args>
	auto get_core(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_core")] != -1);
		return call<R>("get_core", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XkbControlsNotifyEvent, typename... Args>
	auto get_ctrls(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_ctrls")] != -1);
		return call<R>("get_ctrls", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XkbExtensionDeviceNotifyEvent, typename... Args>
	auto get_device(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_device")] != -1);
		return call<R>("get_device", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XkbIndicatorNotifyEvent, typename... Args>
	auto get_indicators(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_indicators")] != -1);
		return call<R>("get_indicators", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XkbMapNotifyEvent, typename... Args>
	auto get_map(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_map")] != -1);
		return call<R>("get_map", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XkbActionMessageEvent, typename... Args>
	auto get_message(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_message")] != -1);
		return call<R>("get_message", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XkbNamesNotifyEvent, typename... Args>
	auto get_names(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_names")] != -1);
		return call<R>("get_names", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XkbNewKeyboardNotifyEvent, typename... Args>
	auto get_new_kbd(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_new_kbd")] != -1);
		return call<R>("get_new_kbd", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XkbStateNotifyEvent, typename... Args>
	auto get_state(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_state")] != -1);
		return call<R>("get_state", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_type(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_type")] != -1);
		return call<R>("get_type", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_type(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_type")] != -1);
		return call<R>("set_type", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto zero(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("zero")] != -1);
		return call<R>("zero", std::forward<Args>(args)...);
	}

};

#endif
