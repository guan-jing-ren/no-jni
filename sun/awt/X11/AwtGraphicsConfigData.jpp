#ifndef sun_awt_X11_AwtGraphicsConfigData_HPP
#define sun_awt_X11_AwtGraphicsConfigData_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::AwtGraphicsConfigData : public jObject<::sun::awt::X11::AwtGraphicsConfigData, ::sun::awt::X11::XWrapperBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "AwtGraphicsConfigData";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jlong)>(), //
		jMethod<::sun::awt::X11::XEvent()>("clone"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jint()>("getDataSize"), //
		jMethod<::jlong()>("getPData"), //
		jMethod<::jint()>("getSize"), //
		jMethod<::jlong()>("get_AwtColorMatch"), //
		jMethod<::jlong(::jint)>("get_AwtColorMatch"), //
		jMethod<::jlong()>("get_awtImage"), //
		jMethod<::sun::awt::X11::awtImageData(::jint)>("get_awtImage"), //
		jMethod<::jlong()>("get_awt_cmap"), //
		jMethod<::jint()>("get_awt_depth"), //
		jMethod<::jint()>("get_awt_num_colors"), //
		jMethod<::sun::awt::X11::XVisualInfo()>("get_awt_visInfo"), //
		jMethod<::jlong()>("get_color_data"), //
		jMethod<::sun::awt::X11::ColorData(::jint)>("get_color_data"), //
		jMethod<::jlong()>("get_glxInfo"), //
		jMethod<::jlong(::jint)>("get_glxInfo"), //
		jMethod<::jint()>("get_isTranslucencySupported"), //
		jMethod<::jlong()>("get_monoImage"), //
		jMethod<::jlong(::jint)>("get_monoImage"), //
		jMethod<::jlong()>("get_monoPixmap"), //
		jMethod<::jlong()>("get_monoPixmapGC"), //
		jMethod<::jint()>("get_monoPixmapHeight"), //
		jMethod<::jint()>("get_monoPixmapWidth"), //
		jMethod<::jint()>("get_pixelStride"), //
		jMethod<::sun::awt::X11::XRenderPictFormat()>("get_renderPictFormat"), //
		jMethod<::jvoid(::jlong)>("set_AwtColorMatch"), //
		jMethod<::jvoid(::jlong)>("set_awtImage"), //
		jMethod<::jvoid(::jlong)>("set_awt_cmap"), //
		jMethod<::jvoid(::jint)>("set_awt_depth"), //
		jMethod<::jvoid(::jint)>("set_awt_num_colors"), //
		jMethod<::jvoid(::jlong)>("set_color_data"), //
		jMethod<::jvoid(::jlong)>("set_glxInfo"), //
		jMethod<::jvoid(::jint)>("set_isTranslucencySupported"), //
		jMethod<::jvoid(::jlong)>("set_monoImage"), //
		jMethod<::jvoid(::jlong)>("set_monoPixmap"), //
		jMethod<::jvoid(::jlong)>("set_monoPixmapGC"), //
		jMethod<::jvoid(::jint)>("set_monoPixmapHeight"), //
		jMethod<::jvoid(::jint)>("set_monoPixmapWidth"), //
		jMethod<::jvoid(::jint)>("set_pixelStride"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid()>("zero"), //
	};

	template<typename R = ::sun::awt::X11::XEvent, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDataSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDataSize")] != -1);
		return call<R>("getDataSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getPData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPData")] != -1);
		return call<R>("getPData", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getSize(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return scall<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_AwtColorMatch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_AwtColorMatch")] != -1);
		return call<R>("get_AwtColorMatch", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_awtImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_awtImage")] != -1);
		return call<R>("get_awtImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_awt_cmap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_awt_cmap")] != -1);
		return call<R>("get_awt_cmap", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_awt_depth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_awt_depth")] != -1);
		return call<R>("get_awt_depth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_awt_num_colors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_awt_num_colors")] != -1);
		return call<R>("get_awt_num_colors", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XVisualInfo, typename... Args>
	auto get_awt_visInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_awt_visInfo")] != -1);
		return call<R>("get_awt_visInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_color_data(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_color_data")] != -1);
		return call<R>("get_color_data", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_glxInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_glxInfo")] != -1);
		return call<R>("get_glxInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_isTranslucencySupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_isTranslucencySupported")] != -1);
		return call<R>("get_isTranslucencySupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_monoImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_monoImage")] != -1);
		return call<R>("get_monoImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_monoPixmap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_monoPixmap")] != -1);
		return call<R>("get_monoPixmap", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_monoPixmapGC(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_monoPixmapGC")] != -1);
		return call<R>("get_monoPixmapGC", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_monoPixmapHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_monoPixmapHeight")] != -1);
		return call<R>("get_monoPixmapHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_monoPixmapWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_monoPixmapWidth")] != -1);
		return call<R>("get_monoPixmapWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_pixelStride(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_pixelStride")] != -1);
		return call<R>("get_pixelStride", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XRenderPictFormat, typename... Args>
	auto get_renderPictFormat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_renderPictFormat")] != -1);
		return call<R>("get_renderPictFormat", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_AwtColorMatch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_AwtColorMatch")] != -1);
		return call<R>("set_AwtColorMatch", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_awtImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_awtImage")] != -1);
		return call<R>("set_awtImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_awt_cmap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_awt_cmap")] != -1);
		return call<R>("set_awt_cmap", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_awt_depth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_awt_depth")] != -1);
		return call<R>("set_awt_depth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_awt_num_colors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_awt_num_colors")] != -1);
		return call<R>("set_awt_num_colors", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_color_data(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_color_data")] != -1);
		return call<R>("set_color_data", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_glxInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_glxInfo")] != -1);
		return call<R>("set_glxInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_isTranslucencySupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_isTranslucencySupported")] != -1);
		return call<R>("set_isTranslucencySupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_monoImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_monoImage")] != -1);
		return call<R>("set_monoImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_monoPixmap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_monoPixmap")] != -1);
		return call<R>("set_monoPixmap", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_monoPixmapGC(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_monoPixmapGC")] != -1);
		return call<R>("set_monoPixmapGC", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_monoPixmapHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_monoPixmapHeight")] != -1);
		return call<R>("set_monoPixmapHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_monoPixmapWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_monoPixmapWidth")] != -1);
		return call<R>("set_monoPixmapWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_pixelStride(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_pixelStride")] != -1);
		return call<R>("set_pixelStride", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto zero(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("zero")] != -1);
		return call<R>("zero", std::forward<Args>(args)...);
	}

};

#endif
