#ifndef sun_awt_X11_XDataTransferer_HPP
#define sun_awt_X11_XDataTransferer_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::XDataTransferer : public jObject<::sun::awt::X11::XDataTransferer, ::sun::awt::datatransfer::DataTransferer> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "XDataTransferer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getDefaultUnicodeEncoding"), //
		jMethod<::java::util::LinkedHashSet(::java::awt::datatransfer::DataFlavor)>("getPlatformMappingsForFlavor"), //
		jMethod<::java::util::LinkedHashSet(::java::lang::String)>("getPlatformMappingsForNative"), //
		jMethod<::sun::awt::datatransfer::ToolkitThreadBlockedHandler()>("getToolkitThreadBlockedHandler"), //
		jMethod<::jboolean(::jlong)>("isFileFormat"), //
		jMethod<::jboolean(::jlong)>("isImageFormat"), //
		jMethod<::jboolean(::jlong)>("isLocaleDependentTextFormat"), //
		jMethod<::jboolean(::jlong)>("isTextFormat"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getDefaultUnicodeEncoding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultUnicodeEncoding")] != -1);
		return call<R>("getDefaultUnicodeEncoding", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::LinkedHashSet, typename... Args>
	auto getPlatformMappingsForFlavor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPlatformMappingsForFlavor")] != -1);
		return call<R>("getPlatformMappingsForFlavor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::LinkedHashSet, typename... Args>
	auto getPlatformMappingsForNative(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPlatformMappingsForNative")] != -1);
		return call<R>("getPlatformMappingsForNative", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::datatransfer::ToolkitThreadBlockedHandler, typename... Args>
	auto getToolkitThreadBlockedHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getToolkitThreadBlockedHandler")] != -1);
		return call<R>("getToolkitThreadBlockedHandler", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFileFormat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFileFormat")] != -1);
		return call<R>("isFileFormat", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isImageFormat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isImageFormat")] != -1);
		return call<R>("isImageFormat", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLocaleDependentTextFormat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLocaleDependentTextFormat")] != -1);
		return call<R>("isLocaleDependentTextFormat", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isTextFormat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isTextFormat")] != -1);
		return call<R>("isTextFormat", std::forward<Args>(args)...);
	}

};

#endif
