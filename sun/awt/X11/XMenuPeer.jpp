#ifndef sun_awt_X11_XMenuPeer_HPP
#define sun_awt_X11_XMenuPeer_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::XMenuPeer : public jObject<::sun::awt::X11::XMenuPeer, ::sun::awt::X11::XMenuItemPeer> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "XMenuPeer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::awt::MenuItem)>("addItem"), //
		jMethod<::jvoid()>("addSeparator"), //
		jMethod<::jvoid(::jint)>("delItem"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jvoid(::java::awt::Font)>("setFont"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addItem")] != -1);
		return call<R>("addItem", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addSeparator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addSeparator")] != -1);
		return call<R>("addSeparator", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto delItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("delItem")] != -1);
		return call<R>("delItem", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFont")] != -1);
		return call<R>("setFont", std::forward<Args>(args)...);
	}

};

#endif
