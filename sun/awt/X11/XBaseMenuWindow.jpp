#ifndef sun_awt_X11_XBaseMenuWindow_HPP
#define sun_awt_X11_XBaseMenuWindow_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::XBaseMenuWindow : public jObject<::sun::awt::X11::XBaseMenuWindow, ::sun::awt::X11::XWindow> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "XBaseMenuWindow";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::awt::MenuItem)>("addItem"), //
		jMethod<::jvoid(::jint)>("delItem"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("doLayout"), //
		jMethod<::java::awt::image::ColorModel()>("getColorModel"), //
		jMethod<::java::awt::image::ColorModel(::jint)>("getColorModel"), //
		jMethod<::java::awt::Component()>("getEventSource"), //
		jMethod<::java::awt::FontMetrics(::java::awt::Font)>("getFontMetrics"), //
		jMethod<::java::awt::Graphics()>("getGraphics"), //
		jMethod<::java::awt::GraphicsConfiguration()>("getGraphicsConfiguration"), //
		jMethod<::sun::awt::X11::AwtGraphicsConfigData()>("getGraphicsConfigurationData"), //
		jMethod<::java::awt::Point()>("getLocationOnScreen"), //
		jMethod<::sun::awt::X11::PropMwmHints()>("getMWMHints"), //
		jMethod<::sun::java2d::SurfaceData()>("getSurfaceData"), //
		jMethod<::java::lang::Object()>("getTarget"), //
		jMethod<::java::awt::Rectangle()>("getTargetBounds"), //
		jMethod<::java::awt::Color()>("getWinBackground"), //
		jMethod<::jboolean()>("grabInput"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleButtonPressRelease"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleConfigureNotifyEvent"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleExposeEvent"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleKeyPress"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleKeyRelease"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleMapNotifyEvent"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleMotionNotify"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handlePropertyNotify"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleUnmapNotifyEvent"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleXCrossingEvent"), //
		jMethod<::jboolean()>("isEmbedded"), //
		jMethod<::jboolean()>("isMouseAbove"), //
		jMethod<::jvoid()>("layout"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paint"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("popup"), //
		jMethod<::jvoid(::java::awt::AWTEvent)>("postEventToEventQueue"), //
		jMethod<::jvoid(::jint, ::jlong, ::jint, ::jint, ::jint, ::jint, ::jlong, ::jint, ::jlong, ::jint, ::jint)>("postKeyEvent"), //
		jMethod<::jvoid(::java::awt::Component, ::jint, ::jint, ::jint, ::jint)>("postPaintEvent"), //
		jMethod<::jvoid(::java::util::Vector)>("reloadItems"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("reshape"), //
		jMethod<::jvoid(::java::awt::Rectangle)>("reshape"), //
		jMethod<::jvoid(::java::awt::Color)>("setBackground"), //
		jMethod<::jvoid(::jboolean)>("setFullScreenExclusiveModeState"), //
		jMethod<::jvoid(::sun::awt::X11::PropMwmHints)>("setMWMHints"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addItem")] != -1);
		return call<R>("addItem", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto delItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("delItem")] != -1);
		return call<R>("delItem", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto doLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("doLayout")] != -1);
		return call<R>("doLayout", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::ColorModel, typename... Args>
	auto getColorModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColorModel")] != -1);
		return call<R>("getColorModel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getEventSource(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEventSource")] != -1);
		return call<R>("getEventSource", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::FontMetrics, typename... Args>
	auto getFontMetrics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFontMetrics")] != -1);
		return call<R>("getFontMetrics", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Graphics, typename... Args>
	auto getGraphics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGraphics")] != -1);
		return call<R>("getGraphics", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::GraphicsConfiguration, typename... Args>
	auto getGraphicsConfiguration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGraphicsConfiguration")] != -1);
		return call<R>("getGraphicsConfiguration", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::AwtGraphicsConfigData, typename... Args>
	auto getGraphicsConfigurationData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGraphicsConfigurationData")] != -1);
		return call<R>("getGraphicsConfigurationData", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Point, typename... Args>
	auto getLocationOnScreen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocationOnScreen")] != -1);
		return call<R>("getLocationOnScreen", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::PropMwmHints, typename... Args>
	auto getMWMHints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMWMHints")] != -1);
		return call<R>("getMWMHints", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::SurfaceData, typename... Args>
	auto getSurfaceData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSurfaceData")] != -1);
		return call<R>("getSurfaceData", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTarget")] != -1);
		return call<R>("getTarget", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getTargetBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTargetBounds")] != -1);
		return call<R>("getTargetBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getWinBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWinBackground")] != -1);
		return call<R>("getWinBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto grabInput(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("grabInput")] != -1);
		return call<R>("grabInput", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleButtonPressRelease(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleButtonPressRelease")] != -1);
		return call<R>("handleButtonPressRelease", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleConfigureNotifyEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleConfigureNotifyEvent")] != -1);
		return call<R>("handleConfigureNotifyEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleExposeEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleExposeEvent")] != -1);
		return call<R>("handleExposeEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleKeyPress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleKeyPress")] != -1);
		return call<R>("handleKeyPress", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleKeyRelease(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleKeyRelease")] != -1);
		return call<R>("handleKeyRelease", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleMapNotifyEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleMapNotifyEvent")] != -1);
		return call<R>("handleMapNotifyEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleMotionNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleMotionNotify")] != -1);
		return call<R>("handleMotionNotify", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handlePropertyNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handlePropertyNotify")] != -1);
		return call<R>("handlePropertyNotify", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleUnmapNotifyEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleUnmapNotifyEvent")] != -1);
		return call<R>("handleUnmapNotifyEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleXCrossingEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleXCrossingEvent")] != -1);
		return call<R>("handleXCrossingEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEmbedded(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEmbedded")] != -1);
		return call<R>("isEmbedded", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isMouseAbove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isMouseAbove")] != -1);
		return call<R>("isMouseAbove", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto layout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("layout")] != -1);
		return call<R>("layout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto popup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("popup")] != -1);
		return call<R>("popup", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto postEventToEventQueue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("postEventToEventQueue")] != -1);
		return call<R>("postEventToEventQueue", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto postKeyEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("postKeyEvent")] != -1);
		return call<R>("postKeyEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto postPaintEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("postPaintEvent")] != -1);
		return call<R>("postPaintEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reloadItems(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reloadItems")] != -1);
		return call<R>("reloadItems", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reshape(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reshape")] != -1);
		return call<R>("reshape", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBackground")] != -1);
		return call<R>("setBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFullScreenExclusiveModeState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFullScreenExclusiveModeState")] != -1);
		return call<R>("setFullScreenExclusiveModeState", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMWMHints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMWMHints")] != -1);
		return call<R>("setMWMHints", std::forward<Args>(args)...);
	}

};

#endif
