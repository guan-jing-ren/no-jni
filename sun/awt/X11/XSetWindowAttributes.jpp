#ifndef sun_awt_X11_XSetWindowAttributes_HPP
#define sun_awt_X11_XSetWindowAttributes_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::XSetWindowAttributes : public jObject<::sun::awt::X11::XSetWindowAttributes, ::sun::awt::X11::XWrapperBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "XSetWindowAttributes";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jlong)>(), //
		jMethod<::sun::awt::X11::XEvent()>("clone"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jint()>("getDataSize"), //
		jMethod<::jlong()>("getPData"), //
		jMethod<::jint()>("getSize"), //
		jMethod<::jlong()>("get_background_pixel"), //
		jMethod<::jlong()>("get_background_pixmap"), //
		jMethod<::jlong()>("get_backing_pixel"), //
		jMethod<::jlong()>("get_backing_planes"), //
		jMethod<::jint()>("get_backing_store"), //
		jMethod<::jint()>("get_bit_gravity"), //
		jMethod<::jlong()>("get_border_pixel"), //
		jMethod<::jlong()>("get_border_pixmap"), //
		jMethod<::jlong()>("get_colormap"), //
		jMethod<::jlong()>("get_cursor"), //
		jMethod<::jlong()>("get_do_not_propagate_mask"), //
		jMethod<::jlong()>("get_event_mask"), //
		jMethod<::jboolean()>("get_override_redirect"), //
		jMethod<::jboolean()>("get_save_under"), //
		jMethod<::jint()>("get_win_gravity"), //
		jMethod<::jvoid(::jlong)>("set_background_pixel"), //
		jMethod<::jvoid(::jlong)>("set_background_pixmap"), //
		jMethod<::jvoid(::jlong)>("set_backing_pixel"), //
		jMethod<::jvoid(::jlong)>("set_backing_planes"), //
		jMethod<::jvoid(::jint)>("set_backing_store"), //
		jMethod<::jvoid(::jint)>("set_bit_gravity"), //
		jMethod<::jvoid(::jlong)>("set_border_pixel"), //
		jMethod<::jvoid(::jlong)>("set_border_pixmap"), //
		jMethod<::jvoid(::jlong)>("set_colormap"), //
		jMethod<::jvoid(::jlong)>("set_cursor"), //
		jMethod<::jvoid(::jlong)>("set_do_not_propagate_mask"), //
		jMethod<::jvoid(::jlong)>("set_event_mask"), //
		jMethod<::jvoid(::jboolean)>("set_override_redirect"), //
		jMethod<::jvoid(::jboolean)>("set_save_under"), //
		jMethod<::jvoid(::jint)>("set_win_gravity"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid()>("zero"), //
	};

	template<typename R = ::sun::awt::X11::XEvent, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDataSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDataSize")] != -1);
		return call<R>("getDataSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getPData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPData")] != -1);
		return call<R>("getPData", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getSize(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return scall<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_background_pixel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_background_pixel")] != -1);
		return call<R>("get_background_pixel", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_background_pixmap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_background_pixmap")] != -1);
		return call<R>("get_background_pixmap", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_backing_pixel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_backing_pixel")] != -1);
		return call<R>("get_backing_pixel", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_backing_planes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_backing_planes")] != -1);
		return call<R>("get_backing_planes", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_backing_store(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_backing_store")] != -1);
		return call<R>("get_backing_store", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_bit_gravity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_bit_gravity")] != -1);
		return call<R>("get_bit_gravity", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_border_pixel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_border_pixel")] != -1);
		return call<R>("get_border_pixel", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_border_pixmap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_border_pixmap")] != -1);
		return call<R>("get_border_pixmap", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_colormap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_colormap")] != -1);
		return call<R>("get_colormap", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_cursor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_cursor")] != -1);
		return call<R>("get_cursor", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_do_not_propagate_mask(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_do_not_propagate_mask")] != -1);
		return call<R>("get_do_not_propagate_mask", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_event_mask(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_event_mask")] != -1);
		return call<R>("get_event_mask", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto get_override_redirect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_override_redirect")] != -1);
		return call<R>("get_override_redirect", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto get_save_under(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_save_under")] != -1);
		return call<R>("get_save_under", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_win_gravity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_win_gravity")] != -1);
		return call<R>("get_win_gravity", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_background_pixel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_background_pixel")] != -1);
		return call<R>("set_background_pixel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_background_pixmap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_background_pixmap")] != -1);
		return call<R>("set_background_pixmap", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_backing_pixel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_backing_pixel")] != -1);
		return call<R>("set_backing_pixel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_backing_planes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_backing_planes")] != -1);
		return call<R>("set_backing_planes", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_backing_store(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_backing_store")] != -1);
		return call<R>("set_backing_store", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_bit_gravity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_bit_gravity")] != -1);
		return call<R>("set_bit_gravity", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_border_pixel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_border_pixel")] != -1);
		return call<R>("set_border_pixel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_border_pixmap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_border_pixmap")] != -1);
		return call<R>("set_border_pixmap", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_colormap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_colormap")] != -1);
		return call<R>("set_colormap", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_cursor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_cursor")] != -1);
		return call<R>("set_cursor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_do_not_propagate_mask(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_do_not_propagate_mask")] != -1);
		return call<R>("set_do_not_propagate_mask", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_event_mask(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_event_mask")] != -1);
		return call<R>("set_event_mask", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_override_redirect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_override_redirect")] != -1);
		return call<R>("set_override_redirect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_save_under(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_save_under")] != -1);
		return call<R>("set_save_under", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_win_gravity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_win_gravity")] != -1);
		return call<R>("set_win_gravity", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto zero(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("zero")] != -1);
		return call<R>("zero", std::forward<Args>(args)...);
	}

};

#endif
