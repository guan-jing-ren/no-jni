#ifndef sun_awt_X11_XEvent_HPP
#define sun_awt_X11_XEvent_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::XEvent : public jObject<::sun::awt::X11::XEvent, ::sun::awt::X11::XWrapperBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "XEvent";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jlong)>(), //
		jMethod<::sun::awt::X11::XEvent()>("clone"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jint()>("getDataSize"), //
		jMethod<::jlong()>("getPData"), //
		jMethod<::jint()>("getSize"), //
		jMethod<::jlong()>("get_pad"), //
		jMethod<::jlong(::jint)>("get_pad"), //
		jMethod<::jint()>("get_type"), //
		jMethod<::sun::awt::X11::XAnyEvent()>("get_xany"), //
		jMethod<::sun::awt::X11::XButtonEvent()>("get_xbutton"), //
		jMethod<::sun::awt::X11::XCirculateEvent()>("get_xcirculate"), //
		jMethod<::sun::awt::X11::XCirculateRequestEvent()>("get_xcirculaterequest"), //
		jMethod<::sun::awt::X11::XClientMessageEvent()>("get_xclient"), //
		jMethod<::sun::awt::X11::XColormapEvent()>("get_xcolormap"), //
		jMethod<::sun::awt::X11::XConfigureEvent()>("get_xconfigure"), //
		jMethod<::sun::awt::X11::XConfigureRequestEvent()>("get_xconfigurerequest"), //
		jMethod<::sun::awt::X11::XCreateWindowEvent()>("get_xcreatewindow"), //
		jMethod<::sun::awt::X11::XCrossingEvent()>("get_xcrossing"), //
		jMethod<::sun::awt::X11::XDestroyWindowEvent()>("get_xdestroywindow"), //
		jMethod<::sun::awt::X11::XErrorEvent()>("get_xerror"), //
		jMethod<::sun::awt::X11::XExposeEvent()>("get_xexpose"), //
		jMethod<::sun::awt::X11::XFocusChangeEvent()>("get_xfocus"), //
		jMethod<::sun::awt::X11::XGraphicsExposeEvent()>("get_xgraphicsexpose"), //
		jMethod<::sun::awt::X11::XGravityEvent()>("get_xgravity"), //
		jMethod<::sun::awt::X11::XKeyEvent()>("get_xkey"), //
		jMethod<::sun::awt::X11::XKeymapEvent()>("get_xkeymap"), //
		jMethod<::sun::awt::X11::XMapEvent()>("get_xmap"), //
		jMethod<::sun::awt::X11::XMappingEvent()>("get_xmapping"), //
		jMethod<::sun::awt::X11::XMapRequestEvent()>("get_xmaprequest"), //
		jMethod<::sun::awt::X11::XMotionEvent()>("get_xmotion"), //
		jMethod<::sun::awt::X11::XNoExposeEvent()>("get_xnoexpose"), //
		jMethod<::sun::awt::X11::XPropertyEvent()>("get_xproperty"), //
		jMethod<::sun::awt::X11::XReparentEvent()>("get_xreparent"), //
		jMethod<::sun::awt::X11::XResizeRequestEvent()>("get_xresizerequest"), //
		jMethod<::sun::awt::X11::XSelectionEvent()>("get_xselection"), //
		jMethod<::sun::awt::X11::XSelectionClearEvent()>("get_xselectionclear"), //
		jMethod<::sun::awt::X11::XSelectionRequestEvent()>("get_xselectionrequest"), //
		jMethod<::sun::awt::X11::XUnmapEvent()>("get_xunmap"), //
		jMethod<::sun::awt::X11::XVisibilityEvent()>("get_xvisibility"), //
		jMethod<::jvoid(::jint, ::jlong)>("set_pad"), //
		jMethod<::jvoid(::jint)>("set_type"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid()>("zero"), //
	};

	template<typename R = ::sun::awt::X11::XEvent, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDataSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDataSize")] != -1);
		return call<R>("getDataSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getPData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPData")] != -1);
		return call<R>("getPData", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getSize(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return scall<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_pad(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_pad")] != -1);
		return call<R>("get_pad", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_type(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_type")] != -1);
		return call<R>("get_type", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XAnyEvent, typename... Args>
	auto get_xany(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_xany")] != -1);
		return call<R>("get_xany", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XButtonEvent, typename... Args>
	auto get_xbutton(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_xbutton")] != -1);
		return call<R>("get_xbutton", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XCirculateEvent, typename... Args>
	auto get_xcirculate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_xcirculate")] != -1);
		return call<R>("get_xcirculate", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XCirculateRequestEvent, typename... Args>
	auto get_xcirculaterequest(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_xcirculaterequest")] != -1);
		return call<R>("get_xcirculaterequest", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XClientMessageEvent, typename... Args>
	auto get_xclient(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_xclient")] != -1);
		return call<R>("get_xclient", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XColormapEvent, typename... Args>
	auto get_xcolormap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_xcolormap")] != -1);
		return call<R>("get_xcolormap", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XConfigureEvent, typename... Args>
	auto get_xconfigure(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_xconfigure")] != -1);
		return call<R>("get_xconfigure", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XConfigureRequestEvent, typename... Args>
	auto get_xconfigurerequest(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_xconfigurerequest")] != -1);
		return call<R>("get_xconfigurerequest", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XCreateWindowEvent, typename... Args>
	auto get_xcreatewindow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_xcreatewindow")] != -1);
		return call<R>("get_xcreatewindow", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XCrossingEvent, typename... Args>
	auto get_xcrossing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_xcrossing")] != -1);
		return call<R>("get_xcrossing", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XDestroyWindowEvent, typename... Args>
	auto get_xdestroywindow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_xdestroywindow")] != -1);
		return call<R>("get_xdestroywindow", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XErrorEvent, typename... Args>
	auto get_xerror(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_xerror")] != -1);
		return call<R>("get_xerror", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XExposeEvent, typename... Args>
	auto get_xexpose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_xexpose")] != -1);
		return call<R>("get_xexpose", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XFocusChangeEvent, typename... Args>
	auto get_xfocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_xfocus")] != -1);
		return call<R>("get_xfocus", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XGraphicsExposeEvent, typename... Args>
	auto get_xgraphicsexpose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_xgraphicsexpose")] != -1);
		return call<R>("get_xgraphicsexpose", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XGravityEvent, typename... Args>
	auto get_xgravity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_xgravity")] != -1);
		return call<R>("get_xgravity", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XKeyEvent, typename... Args>
	auto get_xkey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_xkey")] != -1);
		return call<R>("get_xkey", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XKeymapEvent, typename... Args>
	auto get_xkeymap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_xkeymap")] != -1);
		return call<R>("get_xkeymap", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XMapEvent, typename... Args>
	auto get_xmap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_xmap")] != -1);
		return call<R>("get_xmap", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XMappingEvent, typename... Args>
	auto get_xmapping(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_xmapping")] != -1);
		return call<R>("get_xmapping", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XMapRequestEvent, typename... Args>
	auto get_xmaprequest(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_xmaprequest")] != -1);
		return call<R>("get_xmaprequest", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XMotionEvent, typename... Args>
	auto get_xmotion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_xmotion")] != -1);
		return call<R>("get_xmotion", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XNoExposeEvent, typename... Args>
	auto get_xnoexpose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_xnoexpose")] != -1);
		return call<R>("get_xnoexpose", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XPropertyEvent, typename... Args>
	auto get_xproperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_xproperty")] != -1);
		return call<R>("get_xproperty", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XReparentEvent, typename... Args>
	auto get_xreparent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_xreparent")] != -1);
		return call<R>("get_xreparent", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XResizeRequestEvent, typename... Args>
	auto get_xresizerequest(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_xresizerequest")] != -1);
		return call<R>("get_xresizerequest", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XSelectionEvent, typename... Args>
	auto get_xselection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_xselection")] != -1);
		return call<R>("get_xselection", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XSelectionClearEvent, typename... Args>
	auto get_xselectionclear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_xselectionclear")] != -1);
		return call<R>("get_xselectionclear", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XSelectionRequestEvent, typename... Args>
	auto get_xselectionrequest(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_xselectionrequest")] != -1);
		return call<R>("get_xselectionrequest", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XUnmapEvent, typename... Args>
	auto get_xunmap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_xunmap")] != -1);
		return call<R>("get_xunmap", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::XVisibilityEvent, typename... Args>
	auto get_xvisibility(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_xvisibility")] != -1);
		return call<R>("get_xvisibility", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_pad(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_pad")] != -1);
		return call<R>("set_pad", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_type(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_type")] != -1);
		return call<R>("set_type", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto zero(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("zero")] != -1);
		return call<R>("zero", std::forward<Args>(args)...);
	}

};

#endif
