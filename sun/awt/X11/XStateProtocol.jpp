#ifndef sun_awt_X11_XStateProtocol_HPP
#define sun_awt_X11_XStateProtocol_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::XStateProtocol : public jObject<::sun::awt::X11::XStateProtocol, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "XStateProtocol";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint(::sun::awt::X11::XWindowPeer)>("getState"), //
		jMethod<::jboolean(::sun::awt::X11::XPropertyEvent)>("isStateChange"), //
		jMethod<::jvoid(::sun::awt::X11::XWindowPeer, ::jint)>("setState"), //
		jMethod<::jboolean(::jint)>("supportsState"), //
		jMethod<::jvoid(::sun::awt::X11::XWindowPeer)>("unshadeKludge"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getState")] != -1);
		return call<R>("getState", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isStateChange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isStateChange")] != -1);
		return call<R>("isStateChange", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setState")] != -1);
		return call<R>("setState", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("supportsState")] != -1);
		return call<R>("supportsState", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unshadeKludge(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unshadeKludge")] != -1);
		return call<R>("unshadeKludge", std::forward<Args>(args)...);
	}

};

#endif
