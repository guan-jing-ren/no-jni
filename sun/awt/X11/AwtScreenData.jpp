#ifndef sun_awt_X11_AwtScreenData_HPP
#define sun_awt_X11_AwtScreenData_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::AwtScreenData : public jObject<::sun::awt::X11::AwtScreenData, ::sun::awt::X11::XWrapperBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "AwtScreenData";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jlong)>(), //
		jMethod<::sun::awt::X11::XEvent()>("clone"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jint()>("getDataSize"), //
		jMethod<::jlong()>("getPData"), //
		jMethod<::jint()>("getSize"), //
		jMethod<::jlong()>("get_blackpixel"), //
		jMethod<::jlong()>("get_configs"), //
		jMethod<::jlong(::jint)>("get_configs"), //
		jMethod<::jlong()>("get_defaultConfig"), //
		jMethod<::sun::awt::X11::AwtGraphicsConfigData(::jint)>("get_defaultConfig"), //
		jMethod<::jint()>("get_numConfigs"), //
		jMethod<::jlong()>("get_root"), //
		jMethod<::jlong()>("get_whitepixel"), //
		jMethod<::jvoid(::jlong)>("set_blackpixel"), //
		jMethod<::jvoid(::jlong)>("set_configs"), //
		jMethod<::jvoid(::jlong)>("set_defaultConfig"), //
		jMethod<::jvoid(::jint)>("set_numConfigs"), //
		jMethod<::jvoid(::jlong)>("set_root"), //
		jMethod<::jvoid(::jlong)>("set_whitepixel"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid()>("zero"), //
	};

	template<typename R = ::sun::awt::X11::XEvent, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDataSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDataSize")] != -1);
		return call<R>("getDataSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getPData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPData")] != -1);
		return call<R>("getPData", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getSize(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return scall<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_blackpixel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_blackpixel")] != -1);
		return call<R>("get_blackpixel", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_configs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_configs")] != -1);
		return call<R>("get_configs", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_defaultConfig(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_defaultConfig")] != -1);
		return call<R>("get_defaultConfig", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_numConfigs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_numConfigs")] != -1);
		return call<R>("get_numConfigs", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_root(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_root")] != -1);
		return call<R>("get_root", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_whitepixel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_whitepixel")] != -1);
		return call<R>("get_whitepixel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_blackpixel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_blackpixel")] != -1);
		return call<R>("set_blackpixel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_configs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_configs")] != -1);
		return call<R>("set_configs", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_defaultConfig(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_defaultConfig")] != -1);
		return call<R>("set_defaultConfig", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_numConfigs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_numConfigs")] != -1);
		return call<R>("set_numConfigs", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_root(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_root")] != -1);
		return call<R>("set_root", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_whitepixel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_whitepixel")] != -1);
		return call<R>("set_whitepixel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto zero(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("zero")] != -1);
		return call<R>("zero", std::forward<Args>(args)...);
	}

};

#endif
