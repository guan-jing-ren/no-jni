#ifndef sun_awt_X11_XComponentPeer_HPP
#define sun_awt_X11_XComponentPeer_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::XComponentPeer : public jObject<::sun::awt::X11::XComponentPeer, ::sun::awt::X11::XWindow> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "XComponentPeer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::awt::dnd::DropTarget)>("addDropTarget"), //
		jMethod<::jvoid(::sun::java2d::pipe::Region)>("applyShape"), //
		jMethod<::jvoid()>("beginLayout"), //
		jMethod<::jvoid()>("beginValidate"), //
		jMethod<::jboolean()>("canDetermineObscurity"), //
		jMethod<::jint(::java::awt::Image, ::jint, ::jint, ::java::awt::image::ImageObserver)>("checkImage"), //
		jMethod<::jvoid(::java::awt::event::PaintEvent)>("coalescePaintEvent"), //
		jMethod<::jvoid(::jint, ::java::awt::BufferCapabilities)>("createBuffers"), //
		jMethod<::java::awt::Image(::jint, ::jint)>("createImage"), //
		jMethod<::java::awt::Image(::java::awt::image::ImageProducer)>("createImage"), //
		jMethod<::java::awt::image::VolatileImage(::jint, ::jint)>("createVolatileImage"), //
		jMethod<::jvoid()>("destroyBuffers"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("doLayout"), //
		jMethod<::jvoid(::java::awt::Graphics, ::java::awt::Color *, ::jint, ::jint, ::jint, ::jint, ::jboolean)>("draw3DOval"), //
		jMethod<::jvoid(::java::awt::Graphics, ::java::awt::Color *, ::jint, ::jint, ::jint, ::jint, ::jboolean)>("draw3DRect"), //
		jMethod<::jvoid(::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::jboolean)>("drawMotif3DRect"), //
		jMethod<::jvoid()>("endLayout"), //
		jMethod<::jvoid()>("endValidate"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::java::awt::BufferCapabilities$FlipContents)>("flip"), //
		jMethod<::jvoid(::java::awt::event::FocusEvent)>("focusGained"), //
		jMethod<::jvoid(::java::awt::event::FocusEvent)>("focusLost"), //
		jMethod<::java::awt::Image()>("getBackBuffer"), //
		jMethod<::java::awt::BufferCapabilities()>("getBackBufferCaps"), //
		jMethod<::java::awt::image::ColorModel()>("getColorModel"), //
		jMethod<::java::awt::image::ColorModel(::jint)>("getColorModel"), //
		jMethod<::java::awt::Component()>("getEventSource"), //
		jMethod<::java::awt::Font()>("getFont"), //
		jMethod<::java::awt::FontMetrics(::java::awt::Font)>("getFontMetrics"), //
		jMethod<::java::awt::Color *()>("getGUIcolors"), //
		jMethod<::java::awt::Graphics()>("getGraphics"), //
		jMethod<::java::awt::GraphicsConfiguration()>("getGraphicsConfiguration"), //
		jMethod<::sun::awt::X11::AwtGraphicsConfigData()>("getGraphicsConfigurationData"), //
		jMethod<::java::awt::Insets()>("getInsets"), //
		jMethod<::java::awt::Point()>("getLocationOnScreen"), //
		jMethod<::sun::awt::X11::PropMwmHints()>("getMWMHints"), //
		jMethod<::java::awt::Dimension()>("getMinimumSize"), //
		jMethod<::java::awt::Dimension()>("getPreferredSize"), //
		jMethod<::sun::java2d::SurfaceData()>("getSurfaceData"), //
		jMethod<::java::lang::Object()>("getTarget"), //
		jMethod<::java::awt::Rectangle()>("getTargetBounds"), //
		jMethod<::java::awt::Color()>("getWinBackground"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleButtonPressRelease"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleConfigureNotifyEvent"), //
		jMethod<::jvoid(::java::awt::AWTEvent)>("handleEvent"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleExposeEvent"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleKeyPress"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleKeyRelease"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleMapNotifyEvent"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleMotionNotify"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handlePropertyNotify"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleUnmapNotifyEvent"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleXCrossingEvent"), //
		jMethod<::jboolean()>("handlesWheelScrolling"), //
		jMethod<::jboolean()>("hasFocus"), //
		jMethod<::jvoid()>("hide"), //
		jMethod<::java::awt::Insets()>("insets"), //
		jMethod<::jboolean()>("isEmbedded"), //
		jMethod<::jboolean()>("isEnabled"), //
		jMethod<::jboolean()>("isFocusable"), //
		jMethod<::jboolean()>("isMouseAbove"), //
		jMethod<::jboolean()>("isObscured"), //
		jMethod<::jboolean()>("isPaintPending"), //
		jMethod<::jboolean()>("isReparentSupported"), //
		jMethod<::jvoid()>("layout"), //
		jMethod<::java::awt::Dimension()>("minimumSize"), //
		jMethod<::jvoid(::jboolean)>("notifyTextComponentChange"), //
		jMethod<::jvoid(::java::awt::Cursor)>("pSetCursor"), //
		jMethod<::jvoid(::java::awt::Cursor, ::jboolean)>("pSetCursor"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paint"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("popup"), //
		jMethod<::jvoid(::java::awt::AWTEvent)>("postEventToEventQueue"), //
		jMethod<::jvoid(::jint, ::jlong, ::jint, ::jint, ::jint, ::jint, ::jlong, ::jint, ::jlong, ::jint, ::jint)>("postKeyEvent"), //
		jMethod<::jvoid(::java::awt::Component, ::jint, ::jint, ::jint, ::jint)>("postPaintEvent"), //
		jMethod<::java::awt::Dimension()>("preferredSize"), //
		jMethod<::jboolean(::java::awt::Image, ::jint, ::jint, ::java::awt::image::ImageObserver)>("prepareImage"), //
		jMethod<::jvoid(::java::awt::Graphics)>("print"), //
		jMethod<::jvoid(::java::awt::dnd::DropTarget)>("removeDropTarget"), //
		jMethod<::jvoid(::java::awt::peer::ContainerPeer)>("reparent"), //
		jMethod<::jboolean(::java::awt::Component, ::jboolean, ::jboolean, ::jlong, ::sun::awt::CausedFocusEvent$Cause)>("requestFocus"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("reshape"), //
		jMethod<::jvoid(::java::awt::Rectangle)>("reshape"), //
		jMethod<::jvoid(::java::awt::Color)>("setBackground"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint)>("setBounds"), //
		jMethod<::jvoid(::jint)>("setBoundsOperation"), //
		jMethod<::jvoid(::jboolean)>("setEnabled"), //
		jMethod<::jvoid(::java::awt::Font)>("setFont"), //
		jMethod<::jvoid(::java::awt::Color)>("setForeground"), //
		jMethod<::jvoid(::jboolean)>("setFullScreenExclusiveModeState"), //
		jMethod<::jvoid(::sun::awt::X11::PropMwmHints)>("setMWMHints"), //
		jMethod<::jvoid(::jboolean)>("setVisible"), //
		jMethod<::jvoid(::java::awt::peer::ComponentPeer)>("setZOrder"), //
		jMethod<::jvoid()>("updateCursorImmediately"), //
		jMethod<::jboolean(::java::awt::GraphicsConfiguration)>("updateGraphicsData"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addDropTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addDropTarget")] != -1);
		return call<R>("addDropTarget", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto applyShape(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("applyShape")] != -1);
		return call<R>("applyShape", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto beginLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("beginLayout")] != -1);
		return call<R>("beginLayout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto beginValidate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("beginValidate")] != -1);
		return call<R>("beginValidate", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto canDetermineObscurity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canDetermineObscurity")] != -1);
		return call<R>("canDetermineObscurity", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto checkImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkImage")] != -1);
		return call<R>("checkImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto coalescePaintEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("coalescePaintEvent")] != -1);
		return call<R>("coalescePaintEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto createBuffers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createBuffers")] != -1);
		return call<R>("createBuffers", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Image, typename... Args>
	auto createImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createImage")] != -1);
		return call<R>("createImage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::VolatileImage, typename... Args>
	auto createVolatileImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createVolatileImage")] != -1);
		return call<R>("createVolatileImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto destroyBuffers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("destroyBuffers")] != -1);
		return call<R>("destroyBuffers", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto doLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("doLayout")] != -1);
		return call<R>("doLayout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto draw3DOval(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("draw3DOval")] != -1);
		return call<R>("draw3DOval", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto draw3DRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("draw3DRect")] != -1);
		return call<R>("draw3DRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawMotif3DRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawMotif3DRect")] != -1);
		return call<R>("drawMotif3DRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("endLayout")] != -1);
		return call<R>("endLayout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endValidate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("endValidate")] != -1);
		return call<R>("endValidate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto flip(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("flip")] != -1);
		return call<R>("flip", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto focusGained(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("focusGained")] != -1);
		return call<R>("focusGained", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto focusLost(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("focusLost")] != -1);
		return call<R>("focusLost", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Image, typename... Args>
	auto getBackBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBackBuffer")] != -1);
		return call<R>("getBackBuffer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::BufferCapabilities, typename... Args>
	auto getBackBufferCaps(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBackBufferCaps")] != -1);
		return call<R>("getBackBufferCaps", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::ColorModel, typename... Args>
	auto getColorModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColorModel")] != -1);
		return call<R>("getColorModel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getEventSource(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEventSource")] != -1);
		return call<R>("getEventSource", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Font, typename... Args>
	auto getFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFont")] != -1);
		return call<R>("getFont", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::FontMetrics, typename... Args>
	auto getFontMetrics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFontMetrics")] != -1);
		return call<R>("getFontMetrics", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color *, typename... Args>
	auto getGUIcolors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGUIcolors")] != -1);
		return call<R>("getGUIcolors", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Graphics, typename... Args>
	auto getGraphics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGraphics")] != -1);
		return call<R>("getGraphics", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::GraphicsConfiguration, typename... Args>
	auto getGraphicsConfiguration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGraphicsConfiguration")] != -1);
		return call<R>("getGraphicsConfiguration", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::AwtGraphicsConfigData, typename... Args>
	auto getGraphicsConfigurationData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGraphicsConfigurationData")] != -1);
		return call<R>("getGraphicsConfigurationData", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Insets, typename... Args>
	auto getInsets(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInsets")] != -1);
		return call<R>("getInsets", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Point, typename... Args>
	auto getLocationOnScreen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocationOnScreen")] != -1);
		return call<R>("getLocationOnScreen", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11::PropMwmHints, typename... Args>
	auto getMWMHints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMWMHints")] != -1);
		return call<R>("getMWMHints", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinimumSize")] != -1);
		return call<R>("getMinimumSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreferredSize")] != -1);
		return call<R>("getPreferredSize", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::SurfaceData, typename... Args>
	auto getSurfaceData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSurfaceData")] != -1);
		return call<R>("getSurfaceData", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTarget")] != -1);
		return call<R>("getTarget", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getTargetBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTargetBounds")] != -1);
		return call<R>("getTargetBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getWinBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWinBackground")] != -1);
		return call<R>("getWinBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleButtonPressRelease(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleButtonPressRelease")] != -1);
		return call<R>("handleButtonPressRelease", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleConfigureNotifyEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleConfigureNotifyEvent")] != -1);
		return call<R>("handleConfigureNotifyEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleEvent")] != -1);
		return call<R>("handleEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleExposeEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleExposeEvent")] != -1);
		return call<R>("handleExposeEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleKeyPress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleKeyPress")] != -1);
		return call<R>("handleKeyPress", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleKeyRelease(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleKeyRelease")] != -1);
		return call<R>("handleKeyRelease", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleMapNotifyEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleMapNotifyEvent")] != -1);
		return call<R>("handleMapNotifyEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleMotionNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleMotionNotify")] != -1);
		return call<R>("handleMotionNotify", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handlePropertyNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handlePropertyNotify")] != -1);
		return call<R>("handlePropertyNotify", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleUnmapNotifyEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleUnmapNotifyEvent")] != -1);
		return call<R>("handleUnmapNotifyEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleXCrossingEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleXCrossingEvent")] != -1);
		return call<R>("handleXCrossingEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto handlesWheelScrolling(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handlesWheelScrolling")] != -1);
		return call<R>("handlesWheelScrolling", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasFocus")] != -1);
		return call<R>("hasFocus", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto hide(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hide")] != -1);
		return call<R>("hide", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Insets, typename... Args>
	auto insets(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insets")] != -1);
		return call<R>("insets", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEmbedded(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEmbedded")] != -1);
		return call<R>("isEmbedded", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEnabled")] != -1);
		return call<R>("isEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFocusable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFocusable")] != -1);
		return call<R>("isFocusable", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isMouseAbove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isMouseAbove")] != -1);
		return call<R>("isMouseAbove", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isObscured(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isObscured")] != -1);
		return call<R>("isObscured", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPaintPending(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPaintPending")] != -1);
		return call<R>("isPaintPending", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isReparentSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isReparentSupported")] != -1);
		return call<R>("isReparentSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto layout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("layout")] != -1);
		return call<R>("layout", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto minimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("minimumSize")] != -1);
		return call<R>("minimumSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto notifyTextComponentChange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("notifyTextComponentChange")] != -1);
		return call<R>("notifyTextComponentChange", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto pSetCursor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("pSetCursor")] != -1);
		return call<R>("pSetCursor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto popup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("popup")] != -1);
		return call<R>("popup", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto postEventToEventQueue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("postEventToEventQueue")] != -1);
		return call<R>("postEventToEventQueue", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto postKeyEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("postKeyEvent")] != -1);
		return call<R>("postKeyEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto postPaintEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("postPaintEvent")] != -1);
		return call<R>("postPaintEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto preferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("preferredSize")] != -1);
		return call<R>("preferredSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto prepareImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("prepareImage")] != -1);
		return call<R>("prepareImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto print(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("print")] != -1);
		return call<R>("print", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeDropTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeDropTarget")] != -1);
		return call<R>("removeDropTarget", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reparent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reparent")] != -1);
		return call<R>("reparent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto requestFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("requestFocus")] != -1);
		return call<R>("requestFocus", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reshape(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reshape")] != -1);
		return call<R>("reshape", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBackground")] != -1);
		return call<R>("setBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBounds")] != -1);
		return call<R>("setBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBoundsOperation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBoundsOperation")] != -1);
		return call<R>("setBoundsOperation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEnabled")] != -1);
		return call<R>("setEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFont")] != -1);
		return call<R>("setFont", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setForeground")] != -1);
		return call<R>("setForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFullScreenExclusiveModeState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFullScreenExclusiveModeState")] != -1);
		return call<R>("setFullScreenExclusiveModeState", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMWMHints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMWMHints")] != -1);
		return call<R>("setMWMHints", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVisible")] != -1);
		return call<R>("setVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setZOrder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setZOrder")] != -1);
		return call<R>("setZOrder", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateCursorImmediately(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateCursorImmediately")] != -1);
		return call<R>("updateCursorImmediately", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto updateGraphicsData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateGraphicsData")] != -1);
		return call<R>("updateGraphicsData", std::forward<Args>(args)...);
	}

};

#endif
