#ifndef sun_awt_X11_XkbExtensionDeviceNotifyEvent_HPP
#define sun_awt_X11_XkbExtensionDeviceNotifyEvent_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::XkbExtensionDeviceNotifyEvent : public jObject<::sun::awt::X11::XkbExtensionDeviceNotifyEvent, ::sun::awt::X11::XWrapperBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "XkbExtensionDeviceNotifyEvent";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jlong)>(), //
		jMethod<::sun::awt::X11::XEvent()>("clone"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jint()>("getDataSize"), //
		jMethod<::jlong()>("getPData"), //
		jMethod<::jint()>("getSize"), //
		jMethod<::jint()>("get_device"), //
		jMethod<::jlong()>("get_display"), //
		jMethod<::jint()>("get_first_btn"), //
		jMethod<::jint()>("get_led_class"), //
		jMethod<::jint()>("get_led_id"), //
		jMethod<::jint()>("get_led_state"), //
		jMethod<::jint()>("get_leds_defined"), //
		jMethod<::jint()>("get_num_btns"), //
		jMethod<::jint()>("get_reason"), //
		jMethod<::jboolean()>("get_send_event"), //
		jMethod<::jlong()>("get_serial"), //
		jMethod<::jint()>("get_supported"), //
		jMethod<::jlong()>("get_time"), //
		jMethod<::jint()>("get_type"), //
		jMethod<::jint()>("get_unsupported"), //
		jMethod<::jint()>("get_xkb_type"), //
		jMethod<::jvoid(::jint)>("set_device"), //
		jMethod<::jvoid(::jlong)>("set_display"), //
		jMethod<::jvoid(::jint)>("set_first_btn"), //
		jMethod<::jvoid(::jint)>("set_led_class"), //
		jMethod<::jvoid(::jint)>("set_led_id"), //
		jMethod<::jvoid(::jint)>("set_led_state"), //
		jMethod<::jvoid(::jint)>("set_leds_defined"), //
		jMethod<::jvoid(::jint)>("set_num_btns"), //
		jMethod<::jvoid(::jint)>("set_reason"), //
		jMethod<::jvoid(::jboolean)>("set_send_event"), //
		jMethod<::jvoid(::jlong)>("set_serial"), //
		jMethod<::jvoid(::jint)>("set_supported"), //
		jMethod<::jvoid(::jlong)>("set_time"), //
		jMethod<::jvoid(::jint)>("set_type"), //
		jMethod<::jvoid(::jint)>("set_unsupported"), //
		jMethod<::jvoid(::jint)>("set_xkb_type"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid()>("zero"), //
	};

	template<typename R = ::sun::awt::X11::XEvent, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDataSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDataSize")] != -1);
		return call<R>("getDataSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getPData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPData")] != -1);
		return call<R>("getPData", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getSize(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return scall<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_device(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_device")] != -1);
		return call<R>("get_device", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_display(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_display")] != -1);
		return call<R>("get_display", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_first_btn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_first_btn")] != -1);
		return call<R>("get_first_btn", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_led_class(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_led_class")] != -1);
		return call<R>("get_led_class", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_led_id(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_led_id")] != -1);
		return call<R>("get_led_id", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_led_state(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_led_state")] != -1);
		return call<R>("get_led_state", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_leds_defined(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_leds_defined")] != -1);
		return call<R>("get_leds_defined", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_num_btns(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_num_btns")] != -1);
		return call<R>("get_num_btns", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_reason(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_reason")] != -1);
		return call<R>("get_reason", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto get_send_event(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_send_event")] != -1);
		return call<R>("get_send_event", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_serial(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_serial")] != -1);
		return call<R>("get_serial", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_supported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_supported")] != -1);
		return call<R>("get_supported", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto get_time(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_time")] != -1);
		return call<R>("get_time", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_type(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_type")] != -1);
		return call<R>("get_type", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_unsupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_unsupported")] != -1);
		return call<R>("get_unsupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_xkb_type(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_xkb_type")] != -1);
		return call<R>("get_xkb_type", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_device(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_device")] != -1);
		return call<R>("set_device", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_display(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_display")] != -1);
		return call<R>("set_display", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_first_btn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_first_btn")] != -1);
		return call<R>("set_first_btn", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_led_class(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_led_class")] != -1);
		return call<R>("set_led_class", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_led_id(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_led_id")] != -1);
		return call<R>("set_led_id", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_led_state(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_led_state")] != -1);
		return call<R>("set_led_state", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_leds_defined(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_leds_defined")] != -1);
		return call<R>("set_leds_defined", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_num_btns(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_num_btns")] != -1);
		return call<R>("set_num_btns", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_reason(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_reason")] != -1);
		return call<R>("set_reason", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_send_event(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_send_event")] != -1);
		return call<R>("set_send_event", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_serial(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_serial")] != -1);
		return call<R>("set_serial", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_supported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_supported")] != -1);
		return call<R>("set_supported", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_time(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_time")] != -1);
		return call<R>("set_time", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_type(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_type")] != -1);
		return call<R>("set_type", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_unsupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_unsupported")] != -1);
		return call<R>("set_unsupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_xkb_type(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_xkb_type")] != -1);
		return call<R>("set_xkb_type", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto zero(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("zero")] != -1);
		return call<R>("zero", std::forward<Args>(args)...);
	}

};

#endif
