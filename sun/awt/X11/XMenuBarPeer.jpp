#ifndef sun_awt_X11_XMenuBarPeer_HPP
#define sun_awt_X11_XMenuBarPeer_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::XMenuBarPeer : public jObject<::sun::awt::X11::XMenuBarPeer, ::sun::awt::X11::XBaseMenuWindow> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "XMenuBarPeer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::awt::Menu)>("addHelpMenu"), //
		jMethod<::jvoid(::java::awt::Menu)>("addMenu"), //
		jMethod<::jvoid(::jint)>("delMenu"), //
		jMethod<::jvoid(::sun::awt::X11::XEvent)>("handleKeyPress"), //
		jMethod<::jvoid(::java::awt::Frame)>("init"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paintPeer"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("reshape"), //
		jMethod<::jvoid(::java::awt::Font)>("setFont"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addHelpMenu(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addHelpMenu")] != -1);
		return call<R>("addHelpMenu", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addMenu(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addMenu")] != -1);
		return call<R>("addMenu", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto delMenu(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("delMenu")] != -1);
		return call<R>("delMenu", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleKeyPress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleKeyPress")] != -1);
		return call<R>("handleKeyPress", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto init(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("init")] != -1);
		return call<R>("init", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintPeer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paintPeer")] != -1);
		return call<R>("paintPeer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reshape(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reshape")] != -1);
		return call<R>("reshape", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFont")] != -1);
		return call<R>("setFont", std::forward<Args>(args)...);
	}

};

#endif
