#ifndef sun_awt_X11_XLayerProtocol_HPP
#define sun_awt_X11_XLayerProtocol_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::XLayerProtocol : public jObject<::sun::awt::X11::XLayerProtocol, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "XLayerProtocol";

	constexpr static Enume field_signatures{
		jField<::jint>("LAYER_ALWAYS_ON_TOP"), //
		jField<::jint>("LAYER_NORMAL"), //
	};

	template<typename F = ::jint>
	static auto LAYER_ALWAYS_ON_TOP() {
		static_assert(field_signatures[jField<F>("LAYER_ALWAYS_ON_TOP")] != -1);
		return sat<F>("LAYER_ALWAYS_ON_TOP");
	}

	template<typename F = ::jint>
	static auto LAYER_NORMAL() {
		static_assert(field_signatures[jField<F>("LAYER_NORMAL")] != -1);
		return sat<F>("LAYER_NORMAL");
	}

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::sun::awt::X11::XWindowPeer, ::jint)>("setLayer"), //
		jMethod<::jboolean(::jint)>("supportsLayer"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto setLayer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLayer")] != -1);
		return call<R>("setLayer", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsLayer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("supportsLayer")] != -1);
		return call<R>("supportsLayer", std::forward<Args>(args)...);
	}

};

#endif
