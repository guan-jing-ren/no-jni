#ifndef sun_awt_X11_XProtocolConstants_HPP
#define sun_awt_X11_XProtocolConstants_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::X11::XProtocolConstants : public jObject<::sun::awt::X11::XProtocolConstants, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_X11 / "XProtocolConstants";

	constexpr static Enume field_signatures{
		jField<::jint>("X_AllocColor"), //
		jField<::jint>("X_AllocColorCells"), //
		jField<::jint>("X_AllocColorPlanes"), //
		jField<::jint>("X_AllocNamedColor"), //
		jField<::jint>("X_AllowEvents"), //
		jField<::jint>("X_Bell"), //
		jField<::jint>("X_ChangeActivePointerGrab"), //
		jField<::jint>("X_ChangeGC"), //
		jField<::jint>("X_ChangeHosts"), //
		jField<::jint>("X_ChangeKeyboardControl"), //
		jField<::jint>("X_ChangeKeyboardMapping"), //
		jField<::jint>("X_ChangePointerControl"), //
		jField<::jint>("X_ChangeProperty"), //
		jField<::jint>("X_ChangeSaveSet"), //
		jField<::jint>("X_ChangeWindowAttributes"), //
		jField<::jint>("X_CirculateWindow"), //
		jField<::jint>("X_ClearArea"), //
		jField<::jint>("X_CloseFont"), //
		jField<::jint>("X_ConfigureWindow"), //
		jField<::jint>("X_ConvertSelection"), //
		jField<::jint>("X_CopyArea"), //
		jField<::jint>("X_CopyColormapAndFree"), //
		jField<::jint>("X_CopyGC"), //
		jField<::jint>("X_CopyPlane"), //
		jField<::jint>("X_CreateColormap"), //
		jField<::jint>("X_CreateCursor"), //
		jField<::jint>("X_CreateGC"), //
		jField<::jint>("X_CreateGlyphCursor"), //
		jField<::jint>("X_CreatePixmap"), //
		jField<::jint>("X_CreateWindow"), //
		jField<::jint>("X_DeleteProperty"), //
		jField<::jint>("X_DestroySubwindows"), //
		jField<::jint>("X_DestroyWindow"), //
		jField<::jint>("X_Error"), //
		jField<::jint>("X_FillPoly"), //
		jField<::jint>("X_ForceScreenSaver"), //
		jField<::jint>("X_FreeColormap"), //
		jField<::jint>("X_FreeColors"), //
		jField<::jint>("X_FreeCursor"), //
		jField<::jint>("X_FreeGC"), //
		jField<::jint>("X_FreePixmap"), //
		jField<::jint>("X_GetAtomName"), //
		jField<::jint>("X_GetFontPath"), //
		jField<::jint>("X_GetGeometry"), //
		jField<::jint>("X_GetImage"), //
		jField<::jint>("X_GetInputFocus"), //
		jField<::jint>("X_GetKeyboardControl"), //
		jField<::jint>("X_GetKeyboardMapping"), //
		jField<::jint>("X_GetModifierMapping"), //
		jField<::jint>("X_GetMotionEvents"), //
		jField<::jint>("X_GetPointerControl"), //
		jField<::jint>("X_GetPointerMapping"), //
		jField<::jint>("X_GetProperty"), //
		jField<::jint>("X_GetScreenSaver"), //
		jField<::jint>("X_GetSelectionOwner"), //
		jField<::jint>("X_GetWindowAttributes"), //
		jField<::jint>("X_GrabButton"), //
		jField<::jint>("X_GrabKey"), //
		jField<::jint>("X_GrabKeyboard"), //
		jField<::jint>("X_GrabPointer"), //
		jField<::jint>("X_GrabServer"), //
		jField<::jint>("X_ImageText16"), //
		jField<::jint>("X_ImageText8"), //
		jField<::jint>("X_InstallColormap"), //
		jField<::jint>("X_InternAtom"), //
		jField<::jint>("X_KillClient"), //
		jField<::jint>("X_ListExtensions"), //
		jField<::jint>("X_ListFonts"), //
		jField<::jint>("X_ListFontsWithInfo"), //
		jField<::jint>("X_ListHosts"), //
		jField<::jint>("X_ListInstalledColormaps"), //
		jField<::jint>("X_ListProperties"), //
		jField<::jint>("X_LookupColor"), //
		jField<::jint>("X_MapSubwindows"), //
		jField<::jint>("X_MapWindow"), //
		jField<::jint>("X_NoOperation"), //
		jField<::jint>("X_OpenFont"), //
		jField<::jint>("X_PolyArc"), //
		jField<::jint>("X_PolyFillArc"), //
		jField<::jint>("X_PolyFillRectangle"), //
		jField<::jint>("X_PolyLine"), //
		jField<::jint>("X_PolyPoint"), //
		jField<::jint>("X_PolyRectangle"), //
		jField<::jint>("X_PolySegment"), //
		jField<::jint>("X_PolyText16"), //
		jField<::jint>("X_PolyText8"), //
		jField<::jint>("X_PutImage"), //
		jField<::jint>("X_QueryBestSize"), //
		jField<::jint>("X_QueryColors"), //
		jField<::jint>("X_QueryExtension"), //
		jField<::jint>("X_QueryFont"), //
		jField<::jint>("X_QueryKeymap"), //
		jField<::jint>("X_QueryPointer"), //
		jField<::jint>("X_QueryTextExtents"), //
		jField<::jint>("X_QueryTree"), //
		jField<::jint>("X_RecolorCursor"), //
		jField<::jint>("X_ReparentWindow"), //
		jField<::jint>("X_Reply"), //
		jField<::jint>("X_RotateProperties"), //
		jField<::jint>("X_SendEvent"), //
		jField<::jint>("X_SetAccessControl"), //
		jField<::jint>("X_SetClipRectangles"), //
		jField<::jint>("X_SetCloseDownMode"), //
		jField<::jint>("X_SetDashes"), //
		jField<::jint>("X_SetFontPath"), //
		jField<::jint>("X_SetInputFocus"), //
		jField<::jint>("X_SetModifierMapping"), //
		jField<::jint>("X_SetPointerMapping"), //
		jField<::jint>("X_SetScreenSaver"), //
		jField<::jint>("X_SetSelectionOwner"), //
		jField<::jint>("X_StoreColors"), //
		jField<::jint>("X_StoreNamedColor"), //
		jField<::jint>("X_TranslateCoords"), //
		jField<::jint>("X_UngrabButton"), //
		jField<::jint>("X_UngrabKey"), //
		jField<::jint>("X_UngrabKeyboard"), //
		jField<::jint>("X_UngrabPointer"), //
		jField<::jint>("X_UngrabServer"), //
		jField<::jint>("X_UninstallColormap"), //
		jField<::jint>("X_UnmapSubwindows"), //
		jField<::jint>("X_UnmapWindow"), //
		jField<::jint>("X_WarpPointer"), //
	};

	template<typename F = ::jint>
	static auto X_AllocColor() {
		static_assert(field_signatures[jField<F>("X_AllocColor")] != -1);
		return sat<F>("X_AllocColor");
	}

	template<typename F = ::jint>
	static auto X_AllocColorCells() {
		static_assert(field_signatures[jField<F>("X_AllocColorCells")] != -1);
		return sat<F>("X_AllocColorCells");
	}

	template<typename F = ::jint>
	static auto X_AllocColorPlanes() {
		static_assert(field_signatures[jField<F>("X_AllocColorPlanes")] != -1);
		return sat<F>("X_AllocColorPlanes");
	}

	template<typename F = ::jint>
	static auto X_AllocNamedColor() {
		static_assert(field_signatures[jField<F>("X_AllocNamedColor")] != -1);
		return sat<F>("X_AllocNamedColor");
	}

	template<typename F = ::jint>
	static auto X_AllowEvents() {
		static_assert(field_signatures[jField<F>("X_AllowEvents")] != -1);
		return sat<F>("X_AllowEvents");
	}

	template<typename F = ::jint>
	static auto X_Bell() {
		static_assert(field_signatures[jField<F>("X_Bell")] != -1);
		return sat<F>("X_Bell");
	}

	template<typename F = ::jint>
	static auto X_ChangeActivePointerGrab() {
		static_assert(field_signatures[jField<F>("X_ChangeActivePointerGrab")] != -1);
		return sat<F>("X_ChangeActivePointerGrab");
	}

	template<typename F = ::jint>
	static auto X_ChangeGC() {
		static_assert(field_signatures[jField<F>("X_ChangeGC")] != -1);
		return sat<F>("X_ChangeGC");
	}

	template<typename F = ::jint>
	static auto X_ChangeHosts() {
		static_assert(field_signatures[jField<F>("X_ChangeHosts")] != -1);
		return sat<F>("X_ChangeHosts");
	}

	template<typename F = ::jint>
	static auto X_ChangeKeyboardControl() {
		static_assert(field_signatures[jField<F>("X_ChangeKeyboardControl")] != -1);
		return sat<F>("X_ChangeKeyboardControl");
	}

	template<typename F = ::jint>
	static auto X_ChangeKeyboardMapping() {
		static_assert(field_signatures[jField<F>("X_ChangeKeyboardMapping")] != -1);
		return sat<F>("X_ChangeKeyboardMapping");
	}

	template<typename F = ::jint>
	static auto X_ChangePointerControl() {
		static_assert(field_signatures[jField<F>("X_ChangePointerControl")] != -1);
		return sat<F>("X_ChangePointerControl");
	}

	template<typename F = ::jint>
	static auto X_ChangeProperty() {
		static_assert(field_signatures[jField<F>("X_ChangeProperty")] != -1);
		return sat<F>("X_ChangeProperty");
	}

	template<typename F = ::jint>
	static auto X_ChangeSaveSet() {
		static_assert(field_signatures[jField<F>("X_ChangeSaveSet")] != -1);
		return sat<F>("X_ChangeSaveSet");
	}

	template<typename F = ::jint>
	static auto X_ChangeWindowAttributes() {
		static_assert(field_signatures[jField<F>("X_ChangeWindowAttributes")] != -1);
		return sat<F>("X_ChangeWindowAttributes");
	}

	template<typename F = ::jint>
	static auto X_CirculateWindow() {
		static_assert(field_signatures[jField<F>("X_CirculateWindow")] != -1);
		return sat<F>("X_CirculateWindow");
	}

	template<typename F = ::jint>
	static auto X_ClearArea() {
		static_assert(field_signatures[jField<F>("X_ClearArea")] != -1);
		return sat<F>("X_ClearArea");
	}

	template<typename F = ::jint>
	static auto X_CloseFont() {
		static_assert(field_signatures[jField<F>("X_CloseFont")] != -1);
		return sat<F>("X_CloseFont");
	}

	template<typename F = ::jint>
	static auto X_ConfigureWindow() {
		static_assert(field_signatures[jField<F>("X_ConfigureWindow")] != -1);
		return sat<F>("X_ConfigureWindow");
	}

	template<typename F = ::jint>
	static auto X_ConvertSelection() {
		static_assert(field_signatures[jField<F>("X_ConvertSelection")] != -1);
		return sat<F>("X_ConvertSelection");
	}

	template<typename F = ::jint>
	static auto X_CopyArea() {
		static_assert(field_signatures[jField<F>("X_CopyArea")] != -1);
		return sat<F>("X_CopyArea");
	}

	template<typename F = ::jint>
	static auto X_CopyColormapAndFree() {
		static_assert(field_signatures[jField<F>("X_CopyColormapAndFree")] != -1);
		return sat<F>("X_CopyColormapAndFree");
	}

	template<typename F = ::jint>
	static auto X_CopyGC() {
		static_assert(field_signatures[jField<F>("X_CopyGC")] != -1);
		return sat<F>("X_CopyGC");
	}

	template<typename F = ::jint>
	static auto X_CopyPlane() {
		static_assert(field_signatures[jField<F>("X_CopyPlane")] != -1);
		return sat<F>("X_CopyPlane");
	}

	template<typename F = ::jint>
	static auto X_CreateColormap() {
		static_assert(field_signatures[jField<F>("X_CreateColormap")] != -1);
		return sat<F>("X_CreateColormap");
	}

	template<typename F = ::jint>
	static auto X_CreateCursor() {
		static_assert(field_signatures[jField<F>("X_CreateCursor")] != -1);
		return sat<F>("X_CreateCursor");
	}

	template<typename F = ::jint>
	static auto X_CreateGC() {
		static_assert(field_signatures[jField<F>("X_CreateGC")] != -1);
		return sat<F>("X_CreateGC");
	}

	template<typename F = ::jint>
	static auto X_CreateGlyphCursor() {
		static_assert(field_signatures[jField<F>("X_CreateGlyphCursor")] != -1);
		return sat<F>("X_CreateGlyphCursor");
	}

	template<typename F = ::jint>
	static auto X_CreatePixmap() {
		static_assert(field_signatures[jField<F>("X_CreatePixmap")] != -1);
		return sat<F>("X_CreatePixmap");
	}

	template<typename F = ::jint>
	static auto X_CreateWindow() {
		static_assert(field_signatures[jField<F>("X_CreateWindow")] != -1);
		return sat<F>("X_CreateWindow");
	}

	template<typename F = ::jint>
	static auto X_DeleteProperty() {
		static_assert(field_signatures[jField<F>("X_DeleteProperty")] != -1);
		return sat<F>("X_DeleteProperty");
	}

	template<typename F = ::jint>
	static auto X_DestroySubwindows() {
		static_assert(field_signatures[jField<F>("X_DestroySubwindows")] != -1);
		return sat<F>("X_DestroySubwindows");
	}

	template<typename F = ::jint>
	static auto X_DestroyWindow() {
		static_assert(field_signatures[jField<F>("X_DestroyWindow")] != -1);
		return sat<F>("X_DestroyWindow");
	}

	template<typename F = ::jint>
	static auto X_Error() {
		static_assert(field_signatures[jField<F>("X_Error")] != -1);
		return sat<F>("X_Error");
	}

	template<typename F = ::jint>
	static auto X_FillPoly() {
		static_assert(field_signatures[jField<F>("X_FillPoly")] != -1);
		return sat<F>("X_FillPoly");
	}

	template<typename F = ::jint>
	static auto X_ForceScreenSaver() {
		static_assert(field_signatures[jField<F>("X_ForceScreenSaver")] != -1);
		return sat<F>("X_ForceScreenSaver");
	}

	template<typename F = ::jint>
	static auto X_FreeColormap() {
		static_assert(field_signatures[jField<F>("X_FreeColormap")] != -1);
		return sat<F>("X_FreeColormap");
	}

	template<typename F = ::jint>
	static auto X_FreeColors() {
		static_assert(field_signatures[jField<F>("X_FreeColors")] != -1);
		return sat<F>("X_FreeColors");
	}

	template<typename F = ::jint>
	static auto X_FreeCursor() {
		static_assert(field_signatures[jField<F>("X_FreeCursor")] != -1);
		return sat<F>("X_FreeCursor");
	}

	template<typename F = ::jint>
	static auto X_FreeGC() {
		static_assert(field_signatures[jField<F>("X_FreeGC")] != -1);
		return sat<F>("X_FreeGC");
	}

	template<typename F = ::jint>
	static auto X_FreePixmap() {
		static_assert(field_signatures[jField<F>("X_FreePixmap")] != -1);
		return sat<F>("X_FreePixmap");
	}

	template<typename F = ::jint>
	static auto X_GetAtomName() {
		static_assert(field_signatures[jField<F>("X_GetAtomName")] != -1);
		return sat<F>("X_GetAtomName");
	}

	template<typename F = ::jint>
	static auto X_GetFontPath() {
		static_assert(field_signatures[jField<F>("X_GetFontPath")] != -1);
		return sat<F>("X_GetFontPath");
	}

	template<typename F = ::jint>
	static auto X_GetGeometry() {
		static_assert(field_signatures[jField<F>("X_GetGeometry")] != -1);
		return sat<F>("X_GetGeometry");
	}

	template<typename F = ::jint>
	static auto X_GetImage() {
		static_assert(field_signatures[jField<F>("X_GetImage")] != -1);
		return sat<F>("X_GetImage");
	}

	template<typename F = ::jint>
	static auto X_GetInputFocus() {
		static_assert(field_signatures[jField<F>("X_GetInputFocus")] != -1);
		return sat<F>("X_GetInputFocus");
	}

	template<typename F = ::jint>
	static auto X_GetKeyboardControl() {
		static_assert(field_signatures[jField<F>("X_GetKeyboardControl")] != -1);
		return sat<F>("X_GetKeyboardControl");
	}

	template<typename F = ::jint>
	static auto X_GetKeyboardMapping() {
		static_assert(field_signatures[jField<F>("X_GetKeyboardMapping")] != -1);
		return sat<F>("X_GetKeyboardMapping");
	}

	template<typename F = ::jint>
	static auto X_GetModifierMapping() {
		static_assert(field_signatures[jField<F>("X_GetModifierMapping")] != -1);
		return sat<F>("X_GetModifierMapping");
	}

	template<typename F = ::jint>
	static auto X_GetMotionEvents() {
		static_assert(field_signatures[jField<F>("X_GetMotionEvents")] != -1);
		return sat<F>("X_GetMotionEvents");
	}

	template<typename F = ::jint>
	static auto X_GetPointerControl() {
		static_assert(field_signatures[jField<F>("X_GetPointerControl")] != -1);
		return sat<F>("X_GetPointerControl");
	}

	template<typename F = ::jint>
	static auto X_GetPointerMapping() {
		static_assert(field_signatures[jField<F>("X_GetPointerMapping")] != -1);
		return sat<F>("X_GetPointerMapping");
	}

	template<typename F = ::jint>
	static auto X_GetProperty() {
		static_assert(field_signatures[jField<F>("X_GetProperty")] != -1);
		return sat<F>("X_GetProperty");
	}

	template<typename F = ::jint>
	static auto X_GetScreenSaver() {
		static_assert(field_signatures[jField<F>("X_GetScreenSaver")] != -1);
		return sat<F>("X_GetScreenSaver");
	}

	template<typename F = ::jint>
	static auto X_GetSelectionOwner() {
		static_assert(field_signatures[jField<F>("X_GetSelectionOwner")] != -1);
		return sat<F>("X_GetSelectionOwner");
	}

	template<typename F = ::jint>
	static auto X_GetWindowAttributes() {
		static_assert(field_signatures[jField<F>("X_GetWindowAttributes")] != -1);
		return sat<F>("X_GetWindowAttributes");
	}

	template<typename F = ::jint>
	static auto X_GrabButton() {
		static_assert(field_signatures[jField<F>("X_GrabButton")] != -1);
		return sat<F>("X_GrabButton");
	}

	template<typename F = ::jint>
	static auto X_GrabKey() {
		static_assert(field_signatures[jField<F>("X_GrabKey")] != -1);
		return sat<F>("X_GrabKey");
	}

	template<typename F = ::jint>
	static auto X_GrabKeyboard() {
		static_assert(field_signatures[jField<F>("X_GrabKeyboard")] != -1);
		return sat<F>("X_GrabKeyboard");
	}

	template<typename F = ::jint>
	static auto X_GrabPointer() {
		static_assert(field_signatures[jField<F>("X_GrabPointer")] != -1);
		return sat<F>("X_GrabPointer");
	}

	template<typename F = ::jint>
	static auto X_GrabServer() {
		static_assert(field_signatures[jField<F>("X_GrabServer")] != -1);
		return sat<F>("X_GrabServer");
	}

	template<typename F = ::jint>
	static auto X_ImageText16() {
		static_assert(field_signatures[jField<F>("X_ImageText16")] != -1);
		return sat<F>("X_ImageText16");
	}

	template<typename F = ::jint>
	static auto X_ImageText8() {
		static_assert(field_signatures[jField<F>("X_ImageText8")] != -1);
		return sat<F>("X_ImageText8");
	}

	template<typename F = ::jint>
	static auto X_InstallColormap() {
		static_assert(field_signatures[jField<F>("X_InstallColormap")] != -1);
		return sat<F>("X_InstallColormap");
	}

	template<typename F = ::jint>
	static auto X_InternAtom() {
		static_assert(field_signatures[jField<F>("X_InternAtom")] != -1);
		return sat<F>("X_InternAtom");
	}

	template<typename F = ::jint>
	static auto X_KillClient() {
		static_assert(field_signatures[jField<F>("X_KillClient")] != -1);
		return sat<F>("X_KillClient");
	}

	template<typename F = ::jint>
	static auto X_ListExtensions() {
		static_assert(field_signatures[jField<F>("X_ListExtensions")] != -1);
		return sat<F>("X_ListExtensions");
	}

	template<typename F = ::jint>
	static auto X_ListFonts() {
		static_assert(field_signatures[jField<F>("X_ListFonts")] != -1);
		return sat<F>("X_ListFonts");
	}

	template<typename F = ::jint>
	static auto X_ListFontsWithInfo() {
		static_assert(field_signatures[jField<F>("X_ListFontsWithInfo")] != -1);
		return sat<F>("X_ListFontsWithInfo");
	}

	template<typename F = ::jint>
	static auto X_ListHosts() {
		static_assert(field_signatures[jField<F>("X_ListHosts")] != -1);
		return sat<F>("X_ListHosts");
	}

	template<typename F = ::jint>
	static auto X_ListInstalledColormaps() {
		static_assert(field_signatures[jField<F>("X_ListInstalledColormaps")] != -1);
		return sat<F>("X_ListInstalledColormaps");
	}

	template<typename F = ::jint>
	static auto X_ListProperties() {
		static_assert(field_signatures[jField<F>("X_ListProperties")] != -1);
		return sat<F>("X_ListProperties");
	}

	template<typename F = ::jint>
	static auto X_LookupColor() {
		static_assert(field_signatures[jField<F>("X_LookupColor")] != -1);
		return sat<F>("X_LookupColor");
	}

	template<typename F = ::jint>
	static auto X_MapSubwindows() {
		static_assert(field_signatures[jField<F>("X_MapSubwindows")] != -1);
		return sat<F>("X_MapSubwindows");
	}

	template<typename F = ::jint>
	static auto X_MapWindow() {
		static_assert(field_signatures[jField<F>("X_MapWindow")] != -1);
		return sat<F>("X_MapWindow");
	}

	template<typename F = ::jint>
	static auto X_NoOperation() {
		static_assert(field_signatures[jField<F>("X_NoOperation")] != -1);
		return sat<F>("X_NoOperation");
	}

	template<typename F = ::jint>
	static auto X_OpenFont() {
		static_assert(field_signatures[jField<F>("X_OpenFont")] != -1);
		return sat<F>("X_OpenFont");
	}

	template<typename F = ::jint>
	static auto X_PolyArc() {
		static_assert(field_signatures[jField<F>("X_PolyArc")] != -1);
		return sat<F>("X_PolyArc");
	}

	template<typename F = ::jint>
	static auto X_PolyFillArc() {
		static_assert(field_signatures[jField<F>("X_PolyFillArc")] != -1);
		return sat<F>("X_PolyFillArc");
	}

	template<typename F = ::jint>
	static auto X_PolyFillRectangle() {
		static_assert(field_signatures[jField<F>("X_PolyFillRectangle")] != -1);
		return sat<F>("X_PolyFillRectangle");
	}

	template<typename F = ::jint>
	static auto X_PolyLine() {
		static_assert(field_signatures[jField<F>("X_PolyLine")] != -1);
		return sat<F>("X_PolyLine");
	}

	template<typename F = ::jint>
	static auto X_PolyPoint() {
		static_assert(field_signatures[jField<F>("X_PolyPoint")] != -1);
		return sat<F>("X_PolyPoint");
	}

	template<typename F = ::jint>
	static auto X_PolyRectangle() {
		static_assert(field_signatures[jField<F>("X_PolyRectangle")] != -1);
		return sat<F>("X_PolyRectangle");
	}

	template<typename F = ::jint>
	static auto X_PolySegment() {
		static_assert(field_signatures[jField<F>("X_PolySegment")] != -1);
		return sat<F>("X_PolySegment");
	}

	template<typename F = ::jint>
	static auto X_PolyText16() {
		static_assert(field_signatures[jField<F>("X_PolyText16")] != -1);
		return sat<F>("X_PolyText16");
	}

	template<typename F = ::jint>
	static auto X_PolyText8() {
		static_assert(field_signatures[jField<F>("X_PolyText8")] != -1);
		return sat<F>("X_PolyText8");
	}

	template<typename F = ::jint>
	static auto X_PutImage() {
		static_assert(field_signatures[jField<F>("X_PutImage")] != -1);
		return sat<F>("X_PutImage");
	}

	template<typename F = ::jint>
	static auto X_QueryBestSize() {
		static_assert(field_signatures[jField<F>("X_QueryBestSize")] != -1);
		return sat<F>("X_QueryBestSize");
	}

	template<typename F = ::jint>
	static auto X_QueryColors() {
		static_assert(field_signatures[jField<F>("X_QueryColors")] != -1);
		return sat<F>("X_QueryColors");
	}

	template<typename F = ::jint>
	static auto X_QueryExtension() {
		static_assert(field_signatures[jField<F>("X_QueryExtension")] != -1);
		return sat<F>("X_QueryExtension");
	}

	template<typename F = ::jint>
	static auto X_QueryFont() {
		static_assert(field_signatures[jField<F>("X_QueryFont")] != -1);
		return sat<F>("X_QueryFont");
	}

	template<typename F = ::jint>
	static auto X_QueryKeymap() {
		static_assert(field_signatures[jField<F>("X_QueryKeymap")] != -1);
		return sat<F>("X_QueryKeymap");
	}

	template<typename F = ::jint>
	static auto X_QueryPointer() {
		static_assert(field_signatures[jField<F>("X_QueryPointer")] != -1);
		return sat<F>("X_QueryPointer");
	}

	template<typename F = ::jint>
	static auto X_QueryTextExtents() {
		static_assert(field_signatures[jField<F>("X_QueryTextExtents")] != -1);
		return sat<F>("X_QueryTextExtents");
	}

	template<typename F = ::jint>
	static auto X_QueryTree() {
		static_assert(field_signatures[jField<F>("X_QueryTree")] != -1);
		return sat<F>("X_QueryTree");
	}

	template<typename F = ::jint>
	static auto X_RecolorCursor() {
		static_assert(field_signatures[jField<F>("X_RecolorCursor")] != -1);
		return sat<F>("X_RecolorCursor");
	}

	template<typename F = ::jint>
	static auto X_ReparentWindow() {
		static_assert(field_signatures[jField<F>("X_ReparentWindow")] != -1);
		return sat<F>("X_ReparentWindow");
	}

	template<typename F = ::jint>
	static auto X_Reply() {
		static_assert(field_signatures[jField<F>("X_Reply")] != -1);
		return sat<F>("X_Reply");
	}

	template<typename F = ::jint>
	static auto X_RotateProperties() {
		static_assert(field_signatures[jField<F>("X_RotateProperties")] != -1);
		return sat<F>("X_RotateProperties");
	}

	template<typename F = ::jint>
	static auto X_SendEvent() {
		static_assert(field_signatures[jField<F>("X_SendEvent")] != -1);
		return sat<F>("X_SendEvent");
	}

	template<typename F = ::jint>
	static auto X_SetAccessControl() {
		static_assert(field_signatures[jField<F>("X_SetAccessControl")] != -1);
		return sat<F>("X_SetAccessControl");
	}

	template<typename F = ::jint>
	static auto X_SetClipRectangles() {
		static_assert(field_signatures[jField<F>("X_SetClipRectangles")] != -1);
		return sat<F>("X_SetClipRectangles");
	}

	template<typename F = ::jint>
	static auto X_SetCloseDownMode() {
		static_assert(field_signatures[jField<F>("X_SetCloseDownMode")] != -1);
		return sat<F>("X_SetCloseDownMode");
	}

	template<typename F = ::jint>
	static auto X_SetDashes() {
		static_assert(field_signatures[jField<F>("X_SetDashes")] != -1);
		return sat<F>("X_SetDashes");
	}

	template<typename F = ::jint>
	static auto X_SetFontPath() {
		static_assert(field_signatures[jField<F>("X_SetFontPath")] != -1);
		return sat<F>("X_SetFontPath");
	}

	template<typename F = ::jint>
	static auto X_SetInputFocus() {
		static_assert(field_signatures[jField<F>("X_SetInputFocus")] != -1);
		return sat<F>("X_SetInputFocus");
	}

	template<typename F = ::jint>
	static auto X_SetModifierMapping() {
		static_assert(field_signatures[jField<F>("X_SetModifierMapping")] != -1);
		return sat<F>("X_SetModifierMapping");
	}

	template<typename F = ::jint>
	static auto X_SetPointerMapping() {
		static_assert(field_signatures[jField<F>("X_SetPointerMapping")] != -1);
		return sat<F>("X_SetPointerMapping");
	}

	template<typename F = ::jint>
	static auto X_SetScreenSaver() {
		static_assert(field_signatures[jField<F>("X_SetScreenSaver")] != -1);
		return sat<F>("X_SetScreenSaver");
	}

	template<typename F = ::jint>
	static auto X_SetSelectionOwner() {
		static_assert(field_signatures[jField<F>("X_SetSelectionOwner")] != -1);
		return sat<F>("X_SetSelectionOwner");
	}

	template<typename F = ::jint>
	static auto X_StoreColors() {
		static_assert(field_signatures[jField<F>("X_StoreColors")] != -1);
		return sat<F>("X_StoreColors");
	}

	template<typename F = ::jint>
	static auto X_StoreNamedColor() {
		static_assert(field_signatures[jField<F>("X_StoreNamedColor")] != -1);
		return sat<F>("X_StoreNamedColor");
	}

	template<typename F = ::jint>
	static auto X_TranslateCoords() {
		static_assert(field_signatures[jField<F>("X_TranslateCoords")] != -1);
		return sat<F>("X_TranslateCoords");
	}

	template<typename F = ::jint>
	static auto X_UngrabButton() {
		static_assert(field_signatures[jField<F>("X_UngrabButton")] != -1);
		return sat<F>("X_UngrabButton");
	}

	template<typename F = ::jint>
	static auto X_UngrabKey() {
		static_assert(field_signatures[jField<F>("X_UngrabKey")] != -1);
		return sat<F>("X_UngrabKey");
	}

	template<typename F = ::jint>
	static auto X_UngrabKeyboard() {
		static_assert(field_signatures[jField<F>("X_UngrabKeyboard")] != -1);
		return sat<F>("X_UngrabKeyboard");
	}

	template<typename F = ::jint>
	static auto X_UngrabPointer() {
		static_assert(field_signatures[jField<F>("X_UngrabPointer")] != -1);
		return sat<F>("X_UngrabPointer");
	}

	template<typename F = ::jint>
	static auto X_UngrabServer() {
		static_assert(field_signatures[jField<F>("X_UngrabServer")] != -1);
		return sat<F>("X_UngrabServer");
	}

	template<typename F = ::jint>
	static auto X_UninstallColormap() {
		static_assert(field_signatures[jField<F>("X_UninstallColormap")] != -1);
		return sat<F>("X_UninstallColormap");
	}

	template<typename F = ::jint>
	static auto X_UnmapSubwindows() {
		static_assert(field_signatures[jField<F>("X_UnmapSubwindows")] != -1);
		return sat<F>("X_UnmapSubwindows");
	}

	template<typename F = ::jint>
	static auto X_UnmapWindow() {
		static_assert(field_signatures[jField<F>("X_UnmapWindow")] != -1);
		return sat<F>("X_UnmapWindow");
	}

	template<typename F = ::jint>
	static auto X_WarpPointer() {
		static_assert(field_signatures[jField<F>("X_WarpPointer")] != -1);
		return sat<F>("X_WarpPointer");
	}

	constexpr static Enume method_signatures{
		cexprstr{"\0"}, //
	};

};

#endif
