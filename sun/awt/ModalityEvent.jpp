#ifndef sun_awt_ModalityEvent_HPP
#define sun_awt_ModalityEvent_HPP

#include "../../jfwd_decl.hpp"

class ::sun::awt::ModalityEvent : public jObject<::sun::awt::ModalityEvent, ::java::awt::AWTEvent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt / "ModalityEvent";

	constexpr static Enume field_signatures{
		jField<::jint>("MODALITY_POPPED"), //
		jField<::jint>("MODALITY_PUSHED"), //
	};

	template<typename F = ::jint>
	static auto MODALITY_POPPED() {
		static_assert(field_signatures[jField<F>("MODALITY_POPPED")] != -1);
		return sat<F>("MODALITY_POPPED");
	}

	template<typename F = ::jint>
	static auto MODALITY_PUSHED() {
		static_assert(field_signatures[jField<F>("MODALITY_PUSHED")] != -1);
		return sat<F>("MODALITY_PUSHED");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::Object, ::sun::awt::ModalityListener, ::jint)>(), //
		jMethod<::jvoid()>("dispatch"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto dispatch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispatch")] != -1);
		return call<R>("dispatch", std::forward<Args>(args)...);
	}

};

#endif
