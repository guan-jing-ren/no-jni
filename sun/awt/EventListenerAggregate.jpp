#ifndef sun_awt_EventListenerAggregate_HPP
#define sun_awt_EventListenerAggregate_HPP

#include "../../jfwd_decl.hpp"

class ::sun::awt::EventListenerAggregate : public jObject<::sun::awt::EventListenerAggregate, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt / "EventListenerAggregate";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::Class)>(), //
		jMethod<::jvoid(::java::util::EventListener)>("add"), //
		jMethod<::java::util::EventListener *()>("getListenersCopy"), //
		jMethod<::java::util::EventListener *()>("getListenersInternal"), //
		jMethod<::jboolean()>("isEmpty"), //
		jMethod<::jboolean(::java::util::EventListener)>("remove"), //
		jMethod<::jint()>("size"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::EventListener *, typename... Args>
	auto getListenersCopy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getListenersCopy")] != -1);
		return call<R>("getListenersCopy", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::EventListener *, typename... Args>
	auto getListenersInternal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getListenersInternal")] != -1);
		return call<R>("getListenersInternal", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEmpty")] != -1);
		return call<R>("isEmpty", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto size(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("size")] != -1);
		return call<R>("size", std::forward<Args>(args)...);
	}

};

#endif
