#ifndef sun_awt_PeerEvent_HPP
#define sun_awt_PeerEvent_HPP

#include "../../jfwd_decl.hpp"

class ::sun::awt::PeerEvent : public jObject<::sun::awt::PeerEvent, ::java::awt::event::InvocationEvent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt / "PeerEvent";

	constexpr static Enume field_signatures{
		jField<::jlong>("LOW_PRIORITY_EVENT"), //
		jField<::jlong>("PRIORITY_EVENT"), //
		jField<::jlong>("ULTIMATE_PRIORITY_EVENT"), //
	};

	template<typename F = ::jlong>
	static auto LOW_PRIORITY_EVENT() {
		static_assert(field_signatures[jField<F>("LOW_PRIORITY_EVENT")] != -1);
		return sat<F>("LOW_PRIORITY_EVENT");
	}

	template<typename F = ::jlong>
	static auto PRIORITY_EVENT() {
		static_assert(field_signatures[jField<F>("PRIORITY_EVENT")] != -1);
		return sat<F>("PRIORITY_EVENT");
	}

	template<typename F = ::jlong>
	static auto ULTIMATE_PRIORITY_EVENT() {
		static_assert(field_signatures[jField<F>("ULTIMATE_PRIORITY_EVENT")] != -1);
		return sat<F>("ULTIMATE_PRIORITY_EVENT");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::Object, ::java::lang::Runnable, ::jlong)>(), //
		jConstructor<::jvoid(::java::lang::Object, ::java::lang::Runnable, ::java::lang::Object, ::jboolean, ::jlong)>(), //
		jMethod<::sun::awt::PeerEvent(::sun::awt::PeerEvent)>("coalesceEvents"), //
		jMethod<::jlong()>("getFlags"), //
	};

	template<typename R = ::sun::awt::PeerEvent, typename... Args>
	auto coalesceEvents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("coalesceEvents")] != -1);
		return call<R>("coalesceEvents", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getFlags(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFlags")] != -1);
		return call<R>("getFlags", std::forward<Args>(args)...);
	}

};

#endif
