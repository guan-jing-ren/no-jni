#ifndef sun_awt_geom_Crossings_HPP
#define sun_awt_geom_Crossings_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::geom::Crossings : public jObject<::sun::awt::geom::Crossings, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_geom / "Crossings";

	constexpr static Enume field_signatures{
		jField<::jboolean>("debug"), //
	};

	template<typename F = ::jboolean>
	static auto debug() {
		static_assert(field_signatures[jField<F>("debug")] != -1);
		return sat<F>("debug");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jdouble, ::jdouble, ::jdouble, ::jdouble)>(), //
		jMethod<::jboolean(::jdouble, ::jdouble, ::jdouble *)>("accumulateCubic"), //
		jMethod<::jboolean(::jdouble, ::jdouble, ::jdouble, ::jdouble)>("accumulateLine"), //
		jMethod<::jboolean(::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jint)>("accumulateLine"), //
		jMethod<::jboolean(::jdouble, ::jdouble, ::jdouble *)>("accumulateQuad"), //
		jMethod<::jboolean(::jdouble, ::jdouble)>("covers"), //
		jMethod<::sun::awt::geom::Crossings(::java::awt::geom::PathIterator, ::jdouble, ::jdouble, ::jdouble, ::jdouble)>("findCrossings"), //
		jMethod<::sun::awt::geom::Crossings(::java::util::Vector, ::jdouble, ::jdouble, ::jdouble, ::jdouble)>("findCrossings"), //
		jMethod<::jdouble()>("getXHi"), //
		jMethod<::jdouble()>("getXLo"), //
		jMethod<::jdouble()>("getYHi"), //
		jMethod<::jdouble()>("getYLo"), //
		jMethod<::jboolean()>("isEmpty"), //
		jMethod<::jvoid()>("print"), //
		jMethod<::jvoid(::jdouble, ::jdouble, ::jint)>("record"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto accumulateCubic(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("accumulateCubic")] != -1);
		return call<R>("accumulateCubic", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto accumulateLine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("accumulateLine")] != -1);
		return call<R>("accumulateLine", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto accumulateQuad(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("accumulateQuad")] != -1);
		return call<R>("accumulateQuad", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto covers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("covers")] != -1);
		return call<R>("covers", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::geom::Crossings, typename... Args>
	static auto findCrossings(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("findCrossings")] != -1);
		return scall<R>("findCrossings", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getXHi(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getXHi")] != -1);
		return call<R>("getXHi", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getXLo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getXLo")] != -1);
		return call<R>("getXLo", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getYHi(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getYHi")] != -1);
		return call<R>("getYHi", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getYLo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getYLo")] != -1);
		return call<R>("getYLo", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEmpty")] != -1);
		return call<R>("isEmpty", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto print(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("print")] != -1);
		return call<R>("print", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto record(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("record")] != -1);
		return call<R>("record", std::forward<Args>(args)...);
	}

};

#endif
