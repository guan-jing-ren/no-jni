#ifndef sun_awt_geom_Curve_HPP
#define sun_awt_geom_Curve_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::geom::Curve : public jObject<::sun::awt::geom::Curve, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_geom / "Curve";

	constexpr static Enume field_signatures{
		jField<::jint>("DECREASING"), //
		jField<::jint>("INCREASING"), //
		jField<::jint>("RECT_INTERSECTS"), //
		jField<::jdouble>("TMIN"), //
	};

	template<typename F = ::jint>
	static auto DECREASING() {
		static_assert(field_signatures[jField<F>("DECREASING")] != -1);
		return sat<F>("DECREASING");
	}

	template<typename F = ::jint>
	static auto INCREASING() {
		static_assert(field_signatures[jField<F>("INCREASING")] != -1);
		return sat<F>("INCREASING");
	}

	template<typename F = ::jint>
	static auto RECT_INTERSECTS() {
		static_assert(field_signatures[jField<F>("RECT_INTERSECTS")] != -1);
		return sat<F>("RECT_INTERSECTS");
	}

	template<typename F = ::jdouble>
	static auto TMIN() {
		static_assert(field_signatures[jField<F>("TMIN")] != -1);
		return sat<F>("TMIN");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint)>(), //
		jMethod<::jdouble(::jdouble)>("TforY"), //
		jMethod<::jdouble(::jdouble)>("XforT"), //
		jMethod<::jdouble(::jdouble)>("XforY"), //
		jMethod<::jdouble(::jdouble)>("YforT"), //
		jMethod<::jboolean(::sun::awt::geom::Crossings)>("accumulateCrossings"), //
		jMethod<::jint(::sun::awt::geom::Curve, ::jdouble *)>("compareTo"), //
		jMethod<::java::lang::String()>("controlPointString"), //
		jMethod<::jint(::jdouble, ::jdouble)>("crossingsFor"), //
		jMethod<::jdouble(::jdouble, ::jint)>("dXforT"), //
		jMethod<::jdouble(::jdouble, ::jint)>("dYforT"), //
		jMethod<::jlong(::jdouble, ::jdouble)>("diffbits"), //
		jMethod<::jvoid(::java::awt::geom::Rectangle2D)>("enlarge"), //
		jMethod<::jboolean(::jdouble, ::jdouble)>("fairlyClose"), //
		jMethod<::jboolean(::sun::awt::geom::Curve, ::jdouble *, ::jdouble, ::jint, ::jint, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble)>("findIntersect"), //
		jMethod<::jint()>("getDirection"), //
		jMethod<::jint()>("getOrder"), //
		jMethod<::sun::awt::geom::Curve()>("getReversedCurve"), //
		jMethod<::jint(::jdouble *)>("getSegment"), //
		jMethod<::sun::awt::geom::Curve(::jdouble, ::jdouble)>("getSubCurve"), //
		jMethod<::sun::awt::geom::Curve(::jdouble, ::jdouble, ::jint)>("getSubCurve"), //
		jMethod<::sun::awt::geom::Curve(::jint)>("getWithDirection"), //
		jMethod<::jdouble()>("getX0"), //
		jMethod<::jdouble()>("getX1"), //
		jMethod<::jdouble()>("getXBot"), //
		jMethod<::jdouble()>("getXMax"), //
		jMethod<::jdouble()>("getXMin"), //
		jMethod<::jdouble()>("getXTop"), //
		jMethod<::jdouble()>("getY0"), //
		jMethod<::jdouble()>("getY1"), //
		jMethod<::jdouble()>("getYBot"), //
		jMethod<::jdouble()>("getYTop"), //
		jMethod<::jvoid(::java::util::Vector, ::jdouble, ::jdouble, ::jdouble *)>("insertCubic"), //
		jMethod<::jvoid(::java::util::Vector, ::jdouble, ::jdouble, ::jdouble, ::jdouble)>("insertLine"), //
		jMethod<::jvoid(::java::util::Vector, ::jdouble, ::jdouble)>("insertMove"), //
		jMethod<::jvoid(::java::util::Vector, ::jdouble, ::jdouble, ::jdouble *)>("insertQuad"), //
		jMethod<::jdouble(::jdouble)>("next"), //
		jMethod<::jdouble(::jdouble, ::jdouble)>("nextVertical"), //
		jMethod<::jint(::jdouble, ::jdouble)>("orderof"), //
		jMethod<::jint(::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jint)>("pointCrossingsForCubic"), //
		jMethod<::jint(::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble)>("pointCrossingsForLine"), //
		jMethod<::jint(::java::awt::geom::PathIterator, ::jdouble, ::jdouble)>("pointCrossingsForPath"), //
		jMethod<::jint(::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jint)>("pointCrossingsForQuad"), //
		jMethod<::jdouble(::jdouble)>("prev"), //
		jMethod<::jint(::jint, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jint)>("rectCrossingsForCubic"), //
		jMethod<::jint(::jint, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble)>("rectCrossingsForLine"), //
		jMethod<::jint(::java::awt::geom::PathIterator, ::jdouble, ::jdouble, ::jdouble, ::jdouble)>("rectCrossingsForPath"), //
		jMethod<::jint(::jint, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jint)>("rectCrossingsForQuad"), //
		jMethod<::jdouble(::jdouble, ::jdouble, ::jdouble)>("refineTforY"), //
		jMethod<::jdouble(::jdouble)>("round"), //
		jMethod<::jlong(::jdouble, ::jdouble)>("signeddiffbits"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jdouble, typename... Args>
	auto TforY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("TforY")] != -1);
		return call<R>("TforY", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto XforT(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("XforT")] != -1);
		return call<R>("XforT", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto XforY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("XforY")] != -1);
		return call<R>("XforY", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto YforT(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("YforT")] != -1);
		return call<R>("YforT", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto accumulateCrossings(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("accumulateCrossings")] != -1);
		return call<R>("accumulateCrossings", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto compareTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compareTo")] != -1);
		return call<R>("compareTo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto controlPointString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("controlPointString")] != -1);
		return call<R>("controlPointString", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto crossingsFor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("crossingsFor")] != -1);
		return call<R>("crossingsFor", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto dXforT(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dXforT")] != -1);
		return call<R>("dXforT", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto dYforT(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dYforT")] != -1);
		return call<R>("dYforT", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	static auto diffbits(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("diffbits")] != -1);
		return scall<R>("diffbits", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto enlarge(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("enlarge")] != -1);
		return call<R>("enlarge", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto fairlyClose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fairlyClose")] != -1);
		return call<R>("fairlyClose", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto findIntersect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("findIntersect")] != -1);
		return call<R>("findIntersect", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDirection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDirection")] != -1);
		return call<R>("getDirection", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getOrder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOrder")] != -1);
		return call<R>("getOrder", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::geom::Curve, typename... Args>
	auto getReversedCurve(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReversedCurve")] != -1);
		return call<R>("getReversedCurve", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSegment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSegment")] != -1);
		return call<R>("getSegment", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::geom::Curve, typename... Args>
	auto getSubCurve(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSubCurve")] != -1);
		return call<R>("getSubCurve", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::geom::Curve, typename... Args>
	auto getWithDirection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWithDirection")] != -1);
		return call<R>("getWithDirection", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getX0(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getX0")] != -1);
		return call<R>("getX0", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getX1(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getX1")] != -1);
		return call<R>("getX1", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getXBot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getXBot")] != -1);
		return call<R>("getXBot", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getXMax(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getXMax")] != -1);
		return call<R>("getXMax", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getXMin(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getXMin")] != -1);
		return call<R>("getXMin", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getXTop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getXTop")] != -1);
		return call<R>("getXTop", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getY0(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getY0")] != -1);
		return call<R>("getY0", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getY1(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getY1")] != -1);
		return call<R>("getY1", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getYBot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getYBot")] != -1);
		return call<R>("getYBot", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getYTop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getYTop")] != -1);
		return call<R>("getYTop", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto insertCubic(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insertCubic")] != -1);
		return scall<R>("insertCubic", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto insertLine(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insertLine")] != -1);
		return scall<R>("insertLine", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto insertMove(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insertMove")] != -1);
		return scall<R>("insertMove", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto insertQuad(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insertQuad")] != -1);
		return scall<R>("insertQuad", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	static auto next(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("next")] != -1);
		return scall<R>("next", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto nextVertical(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nextVertical")] != -1);
		return call<R>("nextVertical", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto orderof(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("orderof")] != -1);
		return scall<R>("orderof", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto pointCrossingsForCubic(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("pointCrossingsForCubic")] != -1);
		return scall<R>("pointCrossingsForCubic", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto pointCrossingsForLine(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("pointCrossingsForLine")] != -1);
		return scall<R>("pointCrossingsForLine", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto pointCrossingsForPath(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("pointCrossingsForPath")] != -1);
		return scall<R>("pointCrossingsForPath", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto pointCrossingsForQuad(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("pointCrossingsForQuad")] != -1);
		return scall<R>("pointCrossingsForQuad", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	static auto prev(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("prev")] != -1);
		return scall<R>("prev", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto rectCrossingsForCubic(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rectCrossingsForCubic")] != -1);
		return scall<R>("rectCrossingsForCubic", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto rectCrossingsForLine(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rectCrossingsForLine")] != -1);
		return scall<R>("rectCrossingsForLine", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto rectCrossingsForPath(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rectCrossingsForPath")] != -1);
		return scall<R>("rectCrossingsForPath", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto rectCrossingsForQuad(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rectCrossingsForQuad")] != -1);
		return scall<R>("rectCrossingsForQuad", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto refineTforY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("refineTforY")] != -1);
		return call<R>("refineTforY", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	static auto round(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("round")] != -1);
		return scall<R>("round", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	static auto signeddiffbits(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("signeddiffbits")] != -1);
		return scall<R>("signeddiffbits", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
