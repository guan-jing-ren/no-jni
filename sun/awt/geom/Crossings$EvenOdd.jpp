#ifndef sun_awt_geom_Crossings$EvenOdd_HPP
#define sun_awt_geom_Crossings$EvenOdd_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::geom::Crossings$EvenOdd : public jObject<::sun::awt::geom::Crossings$EvenOdd, ::sun::awt::geom::Crossings> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_geom / "Crossings$EvenOdd";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jdouble, ::jdouble, ::jdouble, ::jdouble)>(), //
		jMethod<::jboolean(::jdouble, ::jdouble)>("covers"), //
		jMethod<::jvoid(::jdouble, ::jdouble, ::jint)>("record"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto covers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("covers")] != -1);
		return call<R>("covers", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto record(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("record")] != -1);
		return call<R>("record", std::forward<Args>(args)...);
	}

};

#endif
