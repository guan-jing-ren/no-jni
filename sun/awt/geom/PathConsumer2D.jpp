#ifndef sun_awt_geom_PathConsumer2D_HPP
#define sun_awt_geom_PathConsumer2D_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::geom::PathConsumer2D : public jObject<::sun::awt::geom::PathConsumer2D, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_geom / "PathConsumer2D";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("closePath"), //
		jMethod<::jvoid(::jfloat, ::jfloat, ::jfloat, ::jfloat, ::jfloat, ::jfloat)>("curveTo"), //
		jMethod<::jlong()>("getNativeConsumer"), //
		jMethod<::jvoid(::jfloat, ::jfloat)>("lineTo"), //
		jMethod<::jvoid(::jfloat, ::jfloat)>("moveTo"), //
		jMethod<::jvoid()>("pathDone"), //
		jMethod<::jvoid(::jfloat, ::jfloat, ::jfloat, ::jfloat)>("quadTo"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto closePath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("closePath")] != -1);
		return call<R>("closePath", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto curveTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("curveTo")] != -1);
		return call<R>("curveTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getNativeConsumer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNativeConsumer")] != -1);
		return call<R>("getNativeConsumer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto lineTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lineTo")] != -1);
		return call<R>("lineTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto moveTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("moveTo")] != -1);
		return call<R>("moveTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto pathDone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("pathDone")] != -1);
		return call<R>("pathDone", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto quadTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("quadTo")] != -1);
		return call<R>("quadTo", std::forward<Args>(args)...);
	}

};

#endif
