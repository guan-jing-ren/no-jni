#ifndef sun_awt_WindowClosingListener_HPP
#define sun_awt_WindowClosingListener_HPP

#include "../../jfwd_decl.hpp"

class ::sun::awt::WindowClosingListener : public jObject<::sun::awt::WindowClosingListener, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt / "WindowClosingListener";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::RuntimeException(::java::awt::event::WindowEvent)>("windowClosingDelivered"), //
		jMethod<::java::lang::RuntimeException(::java::awt::event::WindowEvent)>("windowClosingNotify"), //
	};

	template<typename R = ::java::lang::RuntimeException, typename... Args>
	auto windowClosingDelivered(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("windowClosingDelivered")] != -1);
		return call<R>("windowClosingDelivered", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::RuntimeException, typename... Args>
	auto windowClosingNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("windowClosingNotify")] != -1);
		return call<R>("windowClosingNotify", std::forward<Args>(args)...);
	}

};

#endif
