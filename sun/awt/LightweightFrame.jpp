#ifndef sun_awt_LightweightFrame_HPP
#define sun_awt_LightweightFrame_HPP

#include "../../jfwd_decl.hpp"

class ::sun::awt::LightweightFrame : public jObject<::sun::awt::LightweightFrame, ::java::awt::Frame> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt / "LightweightFrame";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::awt::dnd::DropTarget)>("addDropTarget"), //
		jMethod<::jvoid()>("addNotify"), //
		jMethod<::java::awt::dnd::DragGestureRecognizer(::java::lang::Class, ::java::awt::dnd::DragSource, ::java::awt::Component, ::jint, ::java::awt::dnd::DragGestureListener)>("createDragGestureRecognizer"), //
		jMethod<::java::awt::dnd::peer::DragSourceContextPeer(::java::awt::dnd::DragGestureEvent)>("createDragSourceContextPeer"), //
		jMethod<::jvoid(::jboolean)>("emulateActivation"), //
		jMethod<::java::awt::Graphics()>("getGraphics"), //
		jMethod<::java::awt::Rectangle()>("getHostBounds"), //
		jMethod<::java::awt::Container()>("getParent"), //
		jMethod<::jint()>("getScaleFactor"), //
		jMethod<::jvoid()>("grabFocus"), //
		jMethod<::jboolean()>("isResizable"), //
		jMethod<::jvoid(::jint)>("notifyDisplayChanged"), //
		jMethod<::jvoid(::java::awt::MenuComponent)>("remove"), //
		jMethod<::jvoid(::java::awt::dnd::DropTarget)>("removeDropTarget"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("setHostBounds"), //
		jMethod<::jvoid(::java::awt::Image)>("setIconImage"), //
		jMethod<::jvoid(::java::util::List)>("setIconImages"), //
		jMethod<::jvoid(::java::awt::MenuBar)>("setMenuBar"), //
		jMethod<::jvoid(::jboolean)>("setResizable"), //
		jMethod<::jvoid(::java::lang::String)>("setTitle"), //
		jMethod<::jvoid()>("toBack"), //
		jMethod<::jvoid()>("toFront"), //
		jMethod<::jvoid()>("ungrabFocus"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addDropTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addDropTarget")] != -1);
		return call<R>("addDropTarget", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addNotify")] != -1);
		return call<R>("addNotify", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::dnd::DragGestureRecognizer, typename... Args>
	auto createDragGestureRecognizer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createDragGestureRecognizer")] != -1);
		return call<R>("createDragGestureRecognizer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::dnd::peer::DragSourceContextPeer, typename... Args>
	auto createDragSourceContextPeer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createDragSourceContextPeer")] != -1);
		return call<R>("createDragSourceContextPeer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto emulateActivation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("emulateActivation")] != -1);
		return call<R>("emulateActivation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Graphics, typename... Args>
	auto getGraphics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGraphics")] != -1);
		return call<R>("getGraphics", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getHostBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHostBounds")] != -1);
		return call<R>("getHostBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Container, typename... Args>
	auto getParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParent")] != -1);
		return call<R>("getParent", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getScaleFactor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScaleFactor")] != -1);
		return call<R>("getScaleFactor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto grabFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("grabFocus")] != -1);
		return call<R>("grabFocus", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isResizable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isResizable")] != -1);
		return call<R>("isResizable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto notifyDisplayChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("notifyDisplayChanged")] != -1);
		return call<R>("notifyDisplayChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeDropTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeDropTarget")] != -1);
		return call<R>("removeDropTarget", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHostBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHostBounds")] != -1);
		return call<R>("setHostBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIconImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIconImage")] != -1);
		return call<R>("setIconImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIconImages(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIconImages")] != -1);
		return call<R>("setIconImages", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMenuBar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMenuBar")] != -1);
		return call<R>("setMenuBar", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setResizable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setResizable")] != -1);
		return call<R>("setResizable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTitle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTitle")] != -1);
		return call<R>("setTitle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto toBack(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toBack")] != -1);
		return call<R>("toBack", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto toFront(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toFront")] != -1);
		return call<R>("toFront", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto ungrabFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ungrabFocus")] != -1);
		return call<R>("ungrabFocus", std::forward<Args>(args)...);
	}

};

#endif
