#ifndef sun_awt_CausedFocusEvent$Cause_HPP
#define sun_awt_CausedFocusEvent$Cause_HPP

#include "../../jfwd_decl.hpp"

class ::sun::awt::CausedFocusEvent$Cause : public jObject<::sun::awt::CausedFocusEvent$Cause, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt / "CausedFocusEvent$Cause";

	constexpr static Enume field_signatures{
		jField<::sun::awt::CausedFocusEvent$Cause>("ACTIVATION"), //
		jField<::sun::awt::CausedFocusEvent$Cause>("AUTOMATIC_TRAVERSE"), //
		jField<::sun::awt::CausedFocusEvent$Cause>("CLEAR_GLOBAL_FOCUS_OWNER"), //
		jField<::sun::awt::CausedFocusEvent$Cause>("MANUAL_REQUEST"), //
		jField<::sun::awt::CausedFocusEvent$Cause>("MOUSE_EVENT"), //
		jField<::sun::awt::CausedFocusEvent$Cause>("NATIVE_SYSTEM"), //
		jField<::sun::awt::CausedFocusEvent$Cause>("RETARGETED"), //
		jField<::sun::awt::CausedFocusEvent$Cause>("ROLLBACK"), //
		jField<::sun::awt::CausedFocusEvent$Cause>("TRAVERSAL"), //
		jField<::sun::awt::CausedFocusEvent$Cause>("TRAVERSAL_BACKWARD"), //
		jField<::sun::awt::CausedFocusEvent$Cause>("TRAVERSAL_DOWN"), //
		jField<::sun::awt::CausedFocusEvent$Cause>("TRAVERSAL_FORWARD"), //
		jField<::sun::awt::CausedFocusEvent$Cause>("TRAVERSAL_UP"), //
		jField<::sun::awt::CausedFocusEvent$Cause>("UNKNOWN"), //
	};

	template<typename F = ::sun::awt::CausedFocusEvent$Cause>
	static auto ACTIVATION() {
		static_assert(field_signatures[jField<F>("ACTIVATION")] != -1);
		return sat<F>("ACTIVATION");
	}

	template<typename F = ::sun::awt::CausedFocusEvent$Cause>
	static auto AUTOMATIC_TRAVERSE() {
		static_assert(field_signatures[jField<F>("AUTOMATIC_TRAVERSE")] != -1);
		return sat<F>("AUTOMATIC_TRAVERSE");
	}

	template<typename F = ::sun::awt::CausedFocusEvent$Cause>
	static auto CLEAR_GLOBAL_FOCUS_OWNER() {
		static_assert(field_signatures[jField<F>("CLEAR_GLOBAL_FOCUS_OWNER")] != -1);
		return sat<F>("CLEAR_GLOBAL_FOCUS_OWNER");
	}

	template<typename F = ::sun::awt::CausedFocusEvent$Cause>
	static auto MANUAL_REQUEST() {
		static_assert(field_signatures[jField<F>("MANUAL_REQUEST")] != -1);
		return sat<F>("MANUAL_REQUEST");
	}

	template<typename F = ::sun::awt::CausedFocusEvent$Cause>
	static auto MOUSE_EVENT() {
		static_assert(field_signatures[jField<F>("MOUSE_EVENT")] != -1);
		return sat<F>("MOUSE_EVENT");
	}

	template<typename F = ::sun::awt::CausedFocusEvent$Cause>
	static auto NATIVE_SYSTEM() {
		static_assert(field_signatures[jField<F>("NATIVE_SYSTEM")] != -1);
		return sat<F>("NATIVE_SYSTEM");
	}

	template<typename F = ::sun::awt::CausedFocusEvent$Cause>
	static auto RETARGETED() {
		static_assert(field_signatures[jField<F>("RETARGETED")] != -1);
		return sat<F>("RETARGETED");
	}

	template<typename F = ::sun::awt::CausedFocusEvent$Cause>
	static auto ROLLBACK() {
		static_assert(field_signatures[jField<F>("ROLLBACK")] != -1);
		return sat<F>("ROLLBACK");
	}

	template<typename F = ::sun::awt::CausedFocusEvent$Cause>
	static auto TRAVERSAL() {
		static_assert(field_signatures[jField<F>("TRAVERSAL")] != -1);
		return sat<F>("TRAVERSAL");
	}

	template<typename F = ::sun::awt::CausedFocusEvent$Cause>
	static auto TRAVERSAL_BACKWARD() {
		static_assert(field_signatures[jField<F>("TRAVERSAL_BACKWARD")] != -1);
		return sat<F>("TRAVERSAL_BACKWARD");
	}

	template<typename F = ::sun::awt::CausedFocusEvent$Cause>
	static auto TRAVERSAL_DOWN() {
		static_assert(field_signatures[jField<F>("TRAVERSAL_DOWN")] != -1);
		return sat<F>("TRAVERSAL_DOWN");
	}

	template<typename F = ::sun::awt::CausedFocusEvent$Cause>
	static auto TRAVERSAL_FORWARD() {
		static_assert(field_signatures[jField<F>("TRAVERSAL_FORWARD")] != -1);
		return sat<F>("TRAVERSAL_FORWARD");
	}

	template<typename F = ::sun::awt::CausedFocusEvent$Cause>
	static auto TRAVERSAL_UP() {
		static_assert(field_signatures[jField<F>("TRAVERSAL_UP")] != -1);
		return sat<F>("TRAVERSAL_UP");
	}

	template<typename F = ::sun::awt::CausedFocusEvent$Cause>
	static auto UNKNOWN() {
		static_assert(field_signatures[jField<F>("UNKNOWN")] != -1);
		return sat<F>("UNKNOWN");
	}

	constexpr static Enume method_signatures{
		jMethod<::sun::awt::CausedFocusEvent$Cause(::java::lang::String)>("valueOf"), //
		jMethod<::sun::awt::CausedFocusEvent$Cause *()>("values"), //
	};

	template<typename R = ::sun::awt::CausedFocusEvent$Cause, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::CausedFocusEvent$Cause *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
