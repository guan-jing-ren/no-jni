#ifndef sun_awt_SunGraphicsCallback$PrintHeavyweightComponentsCallback_HPP
#define sun_awt_SunGraphicsCallback$PrintHeavyweightComponentsCallback_HPP

#include "../../jfwd_decl.hpp"

class ::sun::awt::SunGraphicsCallback$PrintHeavyweightComponentsCallback : public jObject<::sun::awt::SunGraphicsCallback$PrintHeavyweightComponentsCallback, ::sun::awt::SunGraphicsCallback> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt / "SunGraphicsCallback$PrintHeavyweightComponentsCallback";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::sun::awt::SunGraphicsCallback$PrintHeavyweightComponentsCallback()>("getInstance"), //
		jMethod<::jvoid(::java::awt::Component, ::java::awt::Graphics)>("run"), //
	};

	template<typename R = ::sun::awt::SunGraphicsCallback$PrintHeavyweightComponentsCallback, typename... Args>
	static auto getInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInstance")] != -1);
		return scall<R>("getInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto run(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("run")] != -1);
		return call<R>("run", std::forward<Args>(args)...);
	}

};

#endif
