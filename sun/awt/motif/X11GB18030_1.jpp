#ifndef sun_awt_motif_X11GB18030_1_HPP
#define sun_awt_motif_X11GB18030_1_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::motif::X11GB18030_1 : public jObject<::sun::awt::motif::X11GB18030_1, ::java::nio::charset::Charset> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_motif / "X11GB18030_1";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jboolean(::java::nio::charset::Charset)>("contains"), //
		jMethod<::java::nio::charset::CharsetDecoder()>("newDecoder"), //
		jMethod<::java::nio::charset::CharsetEncoder()>("newEncoder"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto contains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("contains")] != -1);
		return call<R>("contains", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::charset::CharsetDecoder, typename... Args>
	auto newDecoder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newDecoder")] != -1);
		return call<R>("newDecoder", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::charset::CharsetEncoder, typename... Args>
	auto newEncoder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newEncoder")] != -1);
		return call<R>("newEncoder", std::forward<Args>(args)...);
	}

};

#endif
