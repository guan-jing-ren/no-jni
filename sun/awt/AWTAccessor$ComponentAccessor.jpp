#ifndef sun_awt_AWTAccessor$ComponentAccessor_HPP
#define sun_awt_AWTAccessor$ComponentAccessor_HPP

#include "../../jfwd_decl.hpp"

class ::sun::awt::AWTAccessor$ComponentAccessor : public jObject<::sun::awt::AWTAccessor$ComponentAccessor, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt / "AWTAccessor$ComponentAccessor";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::awt::Component)>("canBeFocusOwner"), //
		jMethod<::java::security::AccessControlContext(::java::awt::Component)>("getAccessControlContext"), //
		jMethod<::sun::awt::AppContext(::java::awt::Component)>("getAppContext"), //
		jMethod<::java::awt::Color(::java::awt::Component)>("getBackground"), //
		jMethod<::jboolean(::java::awt::Component)>("getBackgroundEraseDisabled"), //
		jMethod<::java::awt::Rectangle(::java::awt::Component)>("getBounds"), //
		jMethod<::java::awt::Cursor(::java::awt::Component)>("getCursor"), //
		jMethod<::java::awt::Font(::java::awt::Component)>("getFont"), //
		jMethod<::java::awt::Color(::java::awt::Component)>("getForeground"), //
		jMethod<::jint(::java::awt::Component)>("getHeight"), //
		jMethod<::jboolean(::java::awt::Component)>("getIgnoreRepaint"), //
		jMethod<::java::awt::Point(::java::awt::Component)>("getLocation"), //
		jMethod<::java::awt::Container(::java::awt::Component)>("getParent"), //
		jMethod<::java::awt::peer::ComponentPeer(::java::awt::Component)>("getPeer"), //
		jMethod<::jint(::java::awt::Component)>("getWidth"), //
		jMethod<::jint(::java::awt::Component)>("getX"), //
		jMethod<::jint(::java::awt::Component)>("getY"), //
		jMethod<::jboolean(::java::awt::Component)>("isDisplayable"), //
		jMethod<::jboolean(::java::awt::Component)>("isEnabled"), //
		jMethod<::jboolean(::java::awt::Component)>("isLightweight"), //
		jMethod<::jboolean(::java::awt::Component)>("isVisible"), //
		jMethod<::jvoid(::java::awt::Component, ::java::awt::AWTEvent)>("processEvent"), //
		jMethod<::jboolean(::java::awt::Component, ::sun::awt::CausedFocusEvent$Cause)>("requestFocus"), //
		jMethod<::jvoid(::java::awt::Component)>("revalidateSynchronously"), //
		jMethod<::jvoid(::java::awt::Component, ::sun::awt::AppContext)>("setAppContext"), //
		jMethod<::jvoid(::java::awt::Component, ::java::awt::Color)>("setBackground"), //
		jMethod<::jvoid(::java::awt::Component, ::jboolean)>("setBackgroundEraseDisabled"), //
		jMethod<::jvoid(::java::awt::Component, ::java::awt::GraphicsConfiguration)>("setGraphicsConfiguration"), //
		jMethod<::jvoid(::java::awt::Component, ::jint, ::jint)>("setLocation"), //
		jMethod<::jvoid(::java::awt::Component, ::java::awt::Shape)>("setMixingCutoutShape"), //
		jMethod<::jvoid(::java::awt::Component, ::java::awt::Container)>("setParent"), //
		jMethod<::jvoid(::java::awt::Component, ::java::awt::peer::ComponentPeer)>("setPeer"), //
		jMethod<::jvoid(::sun::awt::RequestFocusController)>("setRequestFocusController"), //
		jMethod<::jvoid(::java::awt::Component, ::jint, ::jint)>("setSize"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto canBeFocusOwner(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canBeFocusOwner")] != -1);
		return call<R>("canBeFocusOwner", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::AccessControlContext, typename... Args>
	auto getAccessControlContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessControlContext")] != -1);
		return call<R>("getAccessControlContext", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::AppContext, typename... Args>
	auto getAppContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAppContext")] != -1);
		return call<R>("getAppContext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBackground")] != -1);
		return call<R>("getBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getBackgroundEraseDisabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBackgroundEraseDisabled")] != -1);
		return call<R>("getBackgroundEraseDisabled", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds")] != -1);
		return call<R>("getBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Cursor, typename... Args>
	auto getCursor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCursor")] != -1);
		return call<R>("getCursor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Font, typename... Args>
	auto getFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFont")] != -1);
		return call<R>("getFont", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getForeground")] != -1);
		return call<R>("getForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeight")] != -1);
		return call<R>("getHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getIgnoreRepaint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIgnoreRepaint")] != -1);
		return call<R>("getIgnoreRepaint", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Point, typename... Args>
	auto getLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocation")] != -1);
		return call<R>("getLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Container, typename... Args>
	auto getParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParent")] != -1);
		return call<R>("getParent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::peer::ComponentPeer, typename... Args>
	auto getPeer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPeer")] != -1);
		return call<R>("getPeer", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getX")] != -1);
		return call<R>("getX", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getY")] != -1);
		return call<R>("getY", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDisplayable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDisplayable")] != -1);
		return call<R>("isDisplayable", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEnabled")] != -1);
		return call<R>("isEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLightweight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLightweight")] != -1);
		return call<R>("isLightweight", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isVisible")] != -1);
		return call<R>("isVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto processEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("processEvent")] != -1);
		return call<R>("processEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto requestFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("requestFocus")] != -1);
		return call<R>("requestFocus", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto revalidateSynchronously(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("revalidateSynchronously")] != -1);
		return call<R>("revalidateSynchronously", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAppContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAppContext")] != -1);
		return call<R>("setAppContext", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBackground")] != -1);
		return call<R>("setBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackgroundEraseDisabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBackgroundEraseDisabled")] != -1);
		return call<R>("setBackgroundEraseDisabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGraphicsConfiguration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setGraphicsConfiguration")] != -1);
		return call<R>("setGraphicsConfiguration", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLocation")] != -1);
		return call<R>("setLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMixingCutoutShape(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMixingCutoutShape")] != -1);
		return call<R>("setMixingCutoutShape", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setParent")] != -1);
		return call<R>("setParent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPeer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPeer")] != -1);
		return call<R>("setPeer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRequestFocusController(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRequestFocusController")] != -1);
		return call<R>("setRequestFocusController", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSize")] != -1);
		return call<R>("setSize", std::forward<Args>(args)...);
	}

};

#endif
