#ifndef sun_awt_X11GraphicsConfig_HPP
#define sun_awt_X11GraphicsConfig_HPP

#include "../../jfwd_decl.hpp"

class ::sun::awt::X11GraphicsConfig : public jObject<::sun::awt::X11GraphicsConfig, ::java::awt::GraphicsConfiguration> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt / "X11GraphicsConfig";

	constexpr static Enume field_signatures{
		jField<::sun::java2d::loops::RenderLoops>("solidloops"), //
	};

	template<typename F = ::sun::java2d::loops::RenderLoops>
	auto solidloops() const {
		static_assert(field_signatures[jField<F>("solidloops")] != -1);
		return at<F>("solidloops");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::awt::image::ComponentColorModel()>("createABGRCCM"), //
		jMethod<::java::awt::Image(::java::awt::Component, ::jint, ::jint)>("createAcceleratedImage"), //
		jMethod<::jlong(::sun::awt::X11ComponentPeer, ::jint, ::java::awt::BufferCapabilities)>("createBackBuffer"), //
		jMethod<::java::awt::image::VolatileImage(::java::awt::Component, ::jlong)>("createBackBufferImage"), //
		jMethod<::java::awt::image::DirectColorModel(::jint, ::jint, ::jint, ::jint, ::jboolean)>("createDCM32"), //
		jMethod<::sun::java2d::SurfaceData(::sun::awt::X11ComponentPeer)>("createSurfaceData"), //
		jMethod<::jvoid(::jlong)>("destroyBackBuffer"), //
		jMethod<::jvoid(::sun::awt::X11ComponentPeer, ::java::awt::Component, ::java::awt::image::VolatileImage, ::jint, ::jint, ::jint, ::jint, ::java::awt::BufferCapabilities$FlipContents)>("flip"), //
		jMethod<::jlong()>("getAData"), //
		jMethod<::jint()>("getBitsPerPixel"), //
		jMethod<::java::awt::Rectangle()>("getBounds"), //
		jMethod<::java::awt::BufferCapabilities()>("getBufferCapabilities"), //
		jMethod<::java::awt::image::ColorModel()>("getColorModel"), //
		jMethod<::java::awt::image::ColorModel(::jint)>("getColorModel"), //
		jMethod<::jint()>("getColormap"), //
		jMethod<::sun::awt::X11GraphicsConfig(::sun::awt::X11GraphicsDevice, ::jint, ::jint, ::jint, ::jint)>("getConfig"), //
		jMethod<::sun::awt::X11GraphicsConfig(::sun::awt::X11GraphicsDevice, ::jint, ::jint, ::jint, ::jboolean)>("getConfig"), //
		jMethod<::java::awt::geom::AffineTransform()>("getDefaultTransform"), //
		jMethod<::jint()>("getDepth"), //
		jMethod<::java::awt::GraphicsDevice()>("getDevice"), //
		jMethod<::java::awt::ImageCapabilities()>("getImageCapabilities"), //
		jMethod<::java::awt::geom::AffineTransform()>("getNormalizingTransform"), //
		jMethod<::java::lang::Object()>("getProxyKey"), //
		jMethod<::sun::java2d::loops::RenderLoops(::sun::java2d::loops::SurfaceType)>("getSolidLoops"), //
		jMethod<::sun::java2d::loops::SurfaceType()>("getSurfaceType"), //
		jMethod<::jint()>("getVisual"), //
		jMethod<::jboolean()>("isDoubleBuffered"), //
		jMethod<::jboolean()>("isTranslucencyCapable"), //
		jMethod<::java::awt::Rectangle(::jint)>("pGetBounds"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::awt::image::ComponentColorModel, typename... Args>
	static auto createABGRCCM(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createABGRCCM")] != -1);
		return scall<R>("createABGRCCM", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Image, typename... Args>
	auto createAcceleratedImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createAcceleratedImage")] != -1);
		return call<R>("createAcceleratedImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto createBackBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createBackBuffer")] != -1);
		return call<R>("createBackBuffer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::VolatileImage, typename... Args>
	auto createBackBufferImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createBackBufferImage")] != -1);
		return call<R>("createBackBufferImage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::DirectColorModel, typename... Args>
	static auto createDCM32(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createDCM32")] != -1);
		return scall<R>("createDCM32", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::SurfaceData, typename... Args>
	auto createSurfaceData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createSurfaceData")] != -1);
		return call<R>("createSurfaceData", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto destroyBackBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("destroyBackBuffer")] != -1);
		return call<R>("destroyBackBuffer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto flip(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("flip")] != -1);
		return call<R>("flip", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getAData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAData")] != -1);
		return call<R>("getAData", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBitsPerPixel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBitsPerPixel")] != -1);
		return call<R>("getBitsPerPixel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds")] != -1);
		return call<R>("getBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::BufferCapabilities, typename... Args>
	auto getBufferCapabilities(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBufferCapabilities")] != -1);
		return call<R>("getBufferCapabilities", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::ColorModel, typename... Args>
	auto getColorModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColorModel")] != -1);
		return call<R>("getColorModel", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getColormap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColormap")] != -1);
		return call<R>("getColormap", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11GraphicsConfig, typename... Args>
	static auto getConfig(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConfig")] != -1);
		return scall<R>("getConfig", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::AffineTransform, typename... Args>
	auto getDefaultTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultTransform")] != -1);
		return call<R>("getDefaultTransform", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDepth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDepth")] != -1);
		return call<R>("getDepth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::GraphicsDevice, typename... Args>
	auto getDevice(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDevice")] != -1);
		return call<R>("getDevice", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::ImageCapabilities, typename... Args>
	auto getImageCapabilities(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getImageCapabilities")] != -1);
		return call<R>("getImageCapabilities", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::AffineTransform, typename... Args>
	auto getNormalizingTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNormalizingTransform")] != -1);
		return call<R>("getNormalizingTransform", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getProxyKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProxyKey")] != -1);
		return call<R>("getProxyKey", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::loops::RenderLoops, typename... Args>
	auto getSolidLoops(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSolidLoops")] != -1);
		return call<R>("getSolidLoops", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::loops::SurfaceType, typename... Args>
	auto getSurfaceType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSurfaceType")] != -1);
		return call<R>("getSurfaceType", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getVisual(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVisual")] != -1);
		return call<R>("getVisual", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDoubleBuffered(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDoubleBuffered")] != -1);
		return call<R>("isDoubleBuffered", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isTranslucencyCapable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isTranslucencyCapable")] != -1);
		return call<R>("isTranslucencyCapable", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto pGetBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("pGetBounds")] != -1);
		return call<R>("pGetBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
