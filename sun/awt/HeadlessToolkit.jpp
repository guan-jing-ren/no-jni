#ifndef sun_awt_HeadlessToolkit_HPP
#define sun_awt_HeadlessToolkit_HPP

#include "../../jfwd_decl.hpp"

class ::sun::awt::HeadlessToolkit : public jObject<::sun::awt::HeadlessToolkit, ::java::awt::Toolkit> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt / "HeadlessToolkit";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::Toolkit)>(), //
		jMethod<::jvoid(::java::awt::event::AWTEventListener, ::jlong)>("addAWTEventListener"), //
		jMethod<::jvoid(::java::lang::String, ::java::beans::PropertyChangeListener)>("addPropertyChangeListener"), //
		jMethod<::jboolean()>("areExtraMouseButtonsEnabled"), //
		jMethod<::jvoid()>("beep"), //
		jMethod<::jint(::java::awt::Image, ::jint, ::jint, ::java::awt::image::ImageObserver)>("checkImage"), //
		jMethod<::java::awt::peer::ButtonPeer(::java::awt::Button)>("createButton"), //
		jMethod<::java::awt::peer::CanvasPeer(::java::awt::Canvas)>("createCanvas"), //
		jMethod<::java::awt::peer::CheckboxPeer(::java::awt::Checkbox)>("createCheckbox"), //
		jMethod<::java::awt::peer::CheckboxMenuItemPeer(::java::awt::CheckboxMenuItem)>("createCheckboxMenuItem"), //
		jMethod<::java::awt::peer::ChoicePeer(::java::awt::Choice)>("createChoice"), //
		jMethod<::java::awt::Cursor(::java::awt::Image, ::java::awt::Point, ::java::lang::String)>("createCustomCursor"), //
		jMethod<::java::awt::peer::DesktopPeer(::java::awt::Desktop)>("createDesktopPeer"), //
		jMethod<::java::awt::peer::DialogPeer(::java::awt::Dialog)>("createDialog"), //
		jMethod<::java::awt::dnd::DragGestureRecognizer(::java::lang::Class, ::java::awt::dnd::DragSource, ::java::awt::Component, ::jint, ::java::awt::dnd::DragGestureListener)>("createDragGestureRecognizer"), //
		jMethod<::java::awt::dnd::peer::DragSourceContextPeer(::java::awt::dnd::DragGestureEvent)>("createDragSourceContextPeer"), //
		jMethod<::java::awt::peer::FileDialogPeer(::java::awt::FileDialog)>("createFileDialog"), //
		jMethod<::java::awt::peer::FramePeer(::java::awt::Frame)>("createFrame"), //
		jMethod<::java::awt::Image(::java::awt::image::ImageProducer)>("createImage"), //
		jMethod<::java::awt::Image(::java::lang::String)>("createImage"), //
		jMethod<::java::awt::Image(::java::net::URL)>("createImage"), //
		jMethod<::java::awt::Image(::jbyte *)>("createImage"), //
		jMethod<::java::awt::Image(::jbyte *, ::jint, ::jint)>("createImage"), //
		jMethod<::java::awt::peer::LabelPeer(::java::awt::Label)>("createLabel"), //
		jMethod<::java::awt::peer::ListPeer(::java::awt::List)>("createList"), //
		jMethod<::java::awt::peer::MenuPeer(::java::awt::Menu)>("createMenu"), //
		jMethod<::java::awt::peer::MenuBarPeer(::java::awt::MenuBar)>("createMenuBar"), //
		jMethod<::java::awt::peer::MenuItemPeer(::java::awt::MenuItem)>("createMenuItem"), //
		jMethod<::java::awt::peer::PanelPeer(::java::awt::Panel)>("createPanel"), //
		jMethod<::java::awt::peer::PopupMenuPeer(::java::awt::PopupMenu)>("createPopupMenu"), //
		jMethod<::java::awt::peer::RobotPeer(::java::awt::Robot, ::java::awt::GraphicsDevice)>("createRobot"), //
		jMethod<::java::awt::peer::ScrollPanePeer(::java::awt::ScrollPane)>("createScrollPane"), //
		jMethod<::java::awt::peer::ScrollbarPeer(::java::awt::Scrollbar)>("createScrollbar"), //
		jMethod<::java::awt::peer::SystemTrayPeer(::java::awt::SystemTray)>("createSystemTray"), //
		jMethod<::java::awt::peer::TextAreaPeer(::java::awt::TextArea)>("createTextArea"), //
		jMethod<::java::awt::peer::TextFieldPeer(::java::awt::TextField)>("createTextField"), //
		jMethod<::java::awt::peer::TrayIconPeer(::java::awt::TrayIcon)>("createTrayIcon"), //
		jMethod<::java::awt::peer::WindowPeer(::java::awt::Window)>("createWindow"), //
		jMethod<::java::awt::event::AWTEventListener *()>("getAWTEventListeners"), //
		jMethod<::java::awt::event::AWTEventListener *(::jlong)>("getAWTEventListeners"), //
		jMethod<::java::awt::Dimension(::jint, ::jint)>("getBestCursorSize"), //
		jMethod<::java::awt::image::ColorModel()>("getColorModel"), //
		jMethod<::sun::awt::datatransfer::DataTransferer()>("getDataTransferer"), //
		jMethod<::java::lang::String *()>("getFontList"), //
		jMethod<::java::awt::FontMetrics(::java::awt::Font)>("getFontMetrics"), //
		jMethod<::java::awt::peer::FontPeer(::java::lang::String, ::jint)>("getFontPeer"), //
		jMethod<::sun::awt::GlobalCursorManager()>("getGlobalCursorManager"), //
		jMethod<::java::awt::Image(::java::lang::String)>("getImage"), //
		jMethod<::java::awt::Image(::java::net::URL)>("getImage"), //
		jMethod<::java::awt::peer::KeyboardFocusManagerPeer()>("getKeyboardFocusManagerPeer"), //
		jMethod<::jboolean(::jint)>("getLockingKeyState"), //
		jMethod<::jint()>("getMaximumCursorColors"), //
		jMethod<::jint()>("getMenuShortcutKeyMask"), //
		jMethod<::java::awt::PrintJob(::java::awt::Frame, ::java::lang::String, ::java::awt::JobAttributes, ::java::awt::PageAttributes)>("getPrintJob"), //
		jMethod<::java::awt::PrintJob(::java::awt::Frame, ::java::lang::String, ::java::util::Properties)>("getPrintJob"), //
		jMethod<::jint()>("getScreenHeight"), //
		jMethod<::java::awt::Insets(::java::awt::GraphicsConfiguration)>("getScreenInsets"), //
		jMethod<::jint()>("getScreenResolution"), //
		jMethod<::java::awt::Dimension()>("getScreenSize"), //
		jMethod<::jint()>("getScreenWidth"), //
		jMethod<::java::awt::datatransfer::Clipboard()>("getSystemClipboard"), //
		jMethod<::java::awt::EventQueue()>("getSystemEventQueueImpl"), //
		jMethod<::java::awt::Toolkit()>("getUnderlyingToolkit"), //
		jMethod<::jboolean()>("isAlwaysOnTopSupported"), //
		jMethod<::jboolean()>("isDesktopSupported"), //
		jMethod<::jboolean()>("isDynamicLayoutActive"), //
		jMethod<::jboolean(::java::awt::Dialog$ModalExclusionType)>("isModalExclusionTypeSupported"), //
		jMethod<::jboolean(::java::awt::Dialog$ModalityType)>("isModalityTypeSupported"), //
		jMethod<::jboolean()>("isTraySupported"), //
		jMethod<::java::util::Map(::java::awt::im::InputMethodHighlight)>("mapInputMethodHighlight"), //
		jMethod<::jboolean(::java::awt::Image, ::jint, ::jint, ::java::awt::image::ImageObserver)>("prepareImage"), //
		jMethod<::jvoid(::java::awt::event::AWTEventListener)>("removeAWTEventListener"), //
		jMethod<::jvoid(::java::lang::String, ::java::beans::PropertyChangeListener)>("removePropertyChangeListener"), //
		jMethod<::jvoid(::jboolean)>("setDynamicLayout"), //
		jMethod<::jvoid(::jint, ::jboolean)>("setLockingKeyState"), //
		jMethod<::jvoid()>("sync"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addAWTEventListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addAWTEventListener")] != -1);
		return call<R>("addAWTEventListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addPropertyChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addPropertyChangeListener")] != -1);
		return call<R>("addPropertyChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto areExtraMouseButtonsEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("areExtraMouseButtonsEnabled")] != -1);
		return call<R>("areExtraMouseButtonsEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto beep(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("beep")] != -1);
		return call<R>("beep", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto checkImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkImage")] != -1);
		return call<R>("checkImage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::peer::ButtonPeer, typename... Args>
	auto createButton(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createButton")] != -1);
		return call<R>("createButton", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::peer::CanvasPeer, typename... Args>
	auto createCanvas(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createCanvas")] != -1);
		return call<R>("createCanvas", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::peer::CheckboxPeer, typename... Args>
	auto createCheckbox(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createCheckbox")] != -1);
		return call<R>("createCheckbox", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::peer::CheckboxMenuItemPeer, typename... Args>
	auto createCheckboxMenuItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createCheckboxMenuItem")] != -1);
		return call<R>("createCheckboxMenuItem", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::peer::ChoicePeer, typename... Args>
	auto createChoice(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createChoice")] != -1);
		return call<R>("createChoice", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Cursor, typename... Args>
	auto createCustomCursor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createCustomCursor")] != -1);
		return call<R>("createCustomCursor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::peer::DesktopPeer, typename... Args>
	auto createDesktopPeer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createDesktopPeer")] != -1);
		return call<R>("createDesktopPeer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::peer::DialogPeer, typename... Args>
	auto createDialog(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createDialog")] != -1);
		return call<R>("createDialog", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::dnd::DragGestureRecognizer, typename... Args>
	auto createDragGestureRecognizer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createDragGestureRecognizer")] != -1);
		return call<R>("createDragGestureRecognizer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::dnd::peer::DragSourceContextPeer, typename... Args>
	auto createDragSourceContextPeer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createDragSourceContextPeer")] != -1);
		return call<R>("createDragSourceContextPeer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::peer::FileDialogPeer, typename... Args>
	auto createFileDialog(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createFileDialog")] != -1);
		return call<R>("createFileDialog", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::peer::FramePeer, typename... Args>
	auto createFrame(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createFrame")] != -1);
		return call<R>("createFrame", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Image, typename... Args>
	auto createImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createImage")] != -1);
		return call<R>("createImage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::peer::LabelPeer, typename... Args>
	auto createLabel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createLabel")] != -1);
		return call<R>("createLabel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::peer::ListPeer, typename... Args>
	auto createList(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createList")] != -1);
		return call<R>("createList", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::peer::MenuPeer, typename... Args>
	auto createMenu(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createMenu")] != -1);
		return call<R>("createMenu", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::peer::MenuBarPeer, typename... Args>
	auto createMenuBar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createMenuBar")] != -1);
		return call<R>("createMenuBar", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::peer::MenuItemPeer, typename... Args>
	auto createMenuItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createMenuItem")] != -1);
		return call<R>("createMenuItem", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::peer::PanelPeer, typename... Args>
	auto createPanel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createPanel")] != -1);
		return call<R>("createPanel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::peer::PopupMenuPeer, typename... Args>
	auto createPopupMenu(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createPopupMenu")] != -1);
		return call<R>("createPopupMenu", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::peer::RobotPeer, typename... Args>
	auto createRobot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createRobot")] != -1);
		return call<R>("createRobot", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::peer::ScrollPanePeer, typename... Args>
	auto createScrollPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createScrollPane")] != -1);
		return call<R>("createScrollPane", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::peer::ScrollbarPeer, typename... Args>
	auto createScrollbar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createScrollbar")] != -1);
		return call<R>("createScrollbar", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::peer::SystemTrayPeer, typename... Args>
	auto createSystemTray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createSystemTray")] != -1);
		return call<R>("createSystemTray", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::peer::TextAreaPeer, typename... Args>
	auto createTextArea(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createTextArea")] != -1);
		return call<R>("createTextArea", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::peer::TextFieldPeer, typename... Args>
	auto createTextField(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createTextField")] != -1);
		return call<R>("createTextField", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::peer::TrayIconPeer, typename... Args>
	auto createTrayIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createTrayIcon")] != -1);
		return call<R>("createTrayIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::peer::WindowPeer, typename... Args>
	auto createWindow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createWindow")] != -1);
		return call<R>("createWindow", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::AWTEventListener *, typename... Args>
	auto getAWTEventListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAWTEventListeners")] != -1);
		return call<R>("getAWTEventListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getBestCursorSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBestCursorSize")] != -1);
		return call<R>("getBestCursorSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::ColorModel, typename... Args>
	auto getColorModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColorModel")] != -1);
		return call<R>("getColorModel", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::datatransfer::DataTransferer, typename... Args>
	auto getDataTransferer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDataTransferer")] != -1);
		return call<R>("getDataTransferer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getFontList(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFontList")] != -1);
		return call<R>("getFontList", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::FontMetrics, typename... Args>
	auto getFontMetrics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFontMetrics")] != -1);
		return call<R>("getFontMetrics", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::peer::FontPeer, typename... Args>
	auto getFontPeer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFontPeer")] != -1);
		return call<R>("getFontPeer", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::GlobalCursorManager, typename... Args>
	auto getGlobalCursorManager(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGlobalCursorManager")] != -1);
		return call<R>("getGlobalCursorManager", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Image, typename... Args>
	auto getImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getImage")] != -1);
		return call<R>("getImage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::peer::KeyboardFocusManagerPeer, typename... Args>
	auto getKeyboardFocusManagerPeer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeyboardFocusManagerPeer")] != -1);
		return call<R>("getKeyboardFocusManagerPeer", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getLockingKeyState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLockingKeyState")] != -1);
		return call<R>("getLockingKeyState", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaximumCursorColors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaximumCursorColors")] != -1);
		return call<R>("getMaximumCursorColors", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMenuShortcutKeyMask(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMenuShortcutKeyMask")] != -1);
		return call<R>("getMenuShortcutKeyMask", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::PrintJob, typename... Args>
	auto getPrintJob(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrintJob")] != -1);
		return call<R>("getPrintJob", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getScreenHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScreenHeight")] != -1);
		return call<R>("getScreenHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Insets, typename... Args>
	auto getScreenInsets(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScreenInsets")] != -1);
		return call<R>("getScreenInsets", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getScreenResolution(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScreenResolution")] != -1);
		return call<R>("getScreenResolution", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getScreenSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScreenSize")] != -1);
		return call<R>("getScreenSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getScreenWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScreenWidth")] != -1);
		return call<R>("getScreenWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::datatransfer::Clipboard, typename... Args>
	auto getSystemClipboard(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSystemClipboard")] != -1);
		return call<R>("getSystemClipboard", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::EventQueue, typename... Args>
	auto getSystemEventQueueImpl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSystemEventQueueImpl")] != -1);
		return call<R>("getSystemEventQueueImpl", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Toolkit, typename... Args>
	auto getUnderlyingToolkit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUnderlyingToolkit")] != -1);
		return call<R>("getUnderlyingToolkit", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAlwaysOnTopSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAlwaysOnTopSupported")] != -1);
		return call<R>("isAlwaysOnTopSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDesktopSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDesktopSupported")] != -1);
		return call<R>("isDesktopSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDynamicLayoutActive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDynamicLayoutActive")] != -1);
		return call<R>("isDynamicLayoutActive", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isModalExclusionTypeSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isModalExclusionTypeSupported")] != -1);
		return call<R>("isModalExclusionTypeSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isModalityTypeSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isModalityTypeSupported")] != -1);
		return call<R>("isModalityTypeSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isTraySupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isTraySupported")] != -1);
		return call<R>("isTraySupported", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto mapInputMethodHighlight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mapInputMethodHighlight")] != -1);
		return call<R>("mapInputMethodHighlight", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto prepareImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("prepareImage")] != -1);
		return call<R>("prepareImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAWTEventListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAWTEventListener")] != -1);
		return call<R>("removeAWTEventListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removePropertyChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removePropertyChangeListener")] != -1);
		return call<R>("removePropertyChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDynamicLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDynamicLayout")] != -1);
		return call<R>("setDynamicLayout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLockingKeyState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLockingKeyState")] != -1);
		return call<R>("setLockingKeyState", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto sync(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sync")] != -1);
		return call<R>("sync", std::forward<Args>(args)...);
	}

};

#endif
