#ifndef sun_awt_SunHints_HPP
#define sun_awt_SunHints_HPP

#include "../../jfwd_decl.hpp"

class ::sun::awt::SunHints : public jObject<::sun::awt::SunHints, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt / "SunHints";

	constexpr static Enume field_signatures{
		jField<::jint>("INTKEY_AATEXT_LCD_CONTRAST"), //
		jField<::jint>("INTKEY_ALPHA_INTERPOLATION"), //
		jField<::jint>("INTKEY_ANTIALIASING"), //
		jField<::jint>("INTKEY_COLOR_RENDERING"), //
		jField<::jint>("INTKEY_DITHERING"), //
		jField<::jint>("INTKEY_FRACTIONALMETRICS"), //
		jField<::jint>("INTKEY_INTERPOLATION"), //
		jField<::jint>("INTKEY_RENDERING"), //
		jField<::jint>("INTKEY_RESOLUTION_VARIANT"), //
		jField<::jint>("INTKEY_STROKE_CONTROL"), //
		jField<::jint>("INTKEY_TEXT_ANTIALIASING"), //
		jField<::jint>("INTVAL_ALPHA_INTERPOLATION_DEFAULT"), //
		jField<::jint>("INTVAL_ALPHA_INTERPOLATION_QUALITY"), //
		jField<::jint>("INTVAL_ALPHA_INTERPOLATION_SPEED"), //
		jField<::jint>("INTVAL_ANTIALIAS_DEFAULT"), //
		jField<::jint>("INTVAL_ANTIALIAS_OFF"), //
		jField<::jint>("INTVAL_ANTIALIAS_ON"), //
		jField<::jint>("INTVAL_COLOR_RENDER_DEFAULT"), //
		jField<::jint>("INTVAL_COLOR_RENDER_QUALITY"), //
		jField<::jint>("INTVAL_COLOR_RENDER_SPEED"), //
		jField<::jint>("INTVAL_DITHER_DEFAULT"), //
		jField<::jint>("INTVAL_DITHER_DISABLE"), //
		jField<::jint>("INTVAL_DITHER_ENABLE"), //
		jField<::jint>("INTVAL_FRACTIONALMETRICS_DEFAULT"), //
		jField<::jint>("INTVAL_FRACTIONALMETRICS_OFF"), //
		jField<::jint>("INTVAL_FRACTIONALMETRICS_ON"), //
		jField<::jint>("INTVAL_INTERPOLATION_BICUBIC"), //
		jField<::jint>("INTVAL_INTERPOLATION_BILINEAR"), //
		jField<::jint>("INTVAL_INTERPOLATION_NEAREST_NEIGHBOR"), //
		jField<::jint>("INTVAL_RENDER_DEFAULT"), //
		jField<::jint>("INTVAL_RENDER_QUALITY"), //
		jField<::jint>("INTVAL_RENDER_SPEED"), //
		jField<::jint>("INTVAL_RESOLUTION_VARIANT_DEFAULT"), //
		jField<::jint>("INTVAL_RESOLUTION_VARIANT_OFF"), //
		jField<::jint>("INTVAL_RESOLUTION_VARIANT_ON"), //
		jField<::jint>("INTVAL_STROKE_DEFAULT"), //
		jField<::jint>("INTVAL_STROKE_NORMALIZE"), //
		jField<::jint>("INTVAL_STROKE_PURE"), //
		jField<::jint>("INTVAL_TEXT_ANTIALIAS_DEFAULT"), //
		jField<::jint>("INTVAL_TEXT_ANTIALIAS_GASP"), //
		jField<::jint>("INTVAL_TEXT_ANTIALIAS_LCD_HBGR"), //
		jField<::jint>("INTVAL_TEXT_ANTIALIAS_LCD_HRGB"), //
		jField<::jint>("INTVAL_TEXT_ANTIALIAS_LCD_VBGR"), //
		jField<::jint>("INTVAL_TEXT_ANTIALIAS_LCD_VRGB"), //
		jField<::jint>("INTVAL_TEXT_ANTIALIAS_OFF"), //
		jField<::jint>("INTVAL_TEXT_ANTIALIAS_ON"), //
		jField<::sun::awt::SunHints$Key>("KEY_ALPHA_INTERPOLATION"), //
		jField<::sun::awt::SunHints$Key>("KEY_ANTIALIASING"), //
		jField<::sun::awt::SunHints$Key>("KEY_COLOR_RENDERING"), //
		jField<::sun::awt::SunHints$Key>("KEY_DITHERING"), //
		jField<::sun::awt::SunHints$Key>("KEY_FRACTIONALMETRICS"), //
		jField<::sun::awt::SunHints$Key>("KEY_INTERPOLATION"), //
		jField<::sun::awt::SunHints$Key>("KEY_RENDERING"), //
		jField<::sun::awt::SunHints$Key>("KEY_RESOLUTION_VARIANT"), //
		jField<::sun::awt::SunHints$Key>("KEY_STROKE_CONTROL"), //
		jField<::sun::awt::SunHints$Key>("KEY_TEXT_ANTIALIASING"), //
		jField<::java::awt::RenderingHints$Key>("KEY_TEXT_ANTIALIAS_LCD_CONTRAST"), //
		jField<::java::lang::Object>("VALUE_ALPHA_INTERPOLATION_DEFAULT"), //
		jField<::java::lang::Object>("VALUE_ALPHA_INTERPOLATION_QUALITY"), //
		jField<::java::lang::Object>("VALUE_ALPHA_INTERPOLATION_SPEED"), //
		jField<::java::lang::Object>("VALUE_ANTIALIAS_DEFAULT"), //
		jField<::java::lang::Object>("VALUE_ANTIALIAS_OFF"), //
		jField<::java::lang::Object>("VALUE_ANTIALIAS_ON"), //
		jField<::java::lang::Object>("VALUE_COLOR_RENDER_DEFAULT"), //
		jField<::java::lang::Object>("VALUE_COLOR_RENDER_QUALITY"), //
		jField<::java::lang::Object>("VALUE_COLOR_RENDER_SPEED"), //
		jField<::java::lang::Object>("VALUE_DITHER_DEFAULT"), //
		jField<::java::lang::Object>("VALUE_DITHER_DISABLE"), //
		jField<::java::lang::Object>("VALUE_DITHER_ENABLE"), //
		jField<::java::lang::Object>("VALUE_FRACTIONALMETRICS_DEFAULT"), //
		jField<::java::lang::Object>("VALUE_FRACTIONALMETRICS_OFF"), //
		jField<::java::lang::Object>("VALUE_FRACTIONALMETRICS_ON"), //
		jField<::java::lang::Object>("VALUE_INTERPOLATION_BICUBIC"), //
		jField<::java::lang::Object>("VALUE_INTERPOLATION_BILINEAR"), //
		jField<::java::lang::Object>("VALUE_INTERPOLATION_NEAREST_NEIGHBOR"), //
		jField<::java::lang::Object>("VALUE_RENDER_DEFAULT"), //
		jField<::java::lang::Object>("VALUE_RENDER_QUALITY"), //
		jField<::java::lang::Object>("VALUE_RENDER_SPEED"), //
		jField<::java::lang::Object>("VALUE_RESOLUTION_VARIANT_DEFAULT"), //
		jField<::java::lang::Object>("VALUE_RESOLUTION_VARIANT_OFF"), //
		jField<::java::lang::Object>("VALUE_RESOLUTION_VARIANT_ON"), //
		jField<::java::lang::Object>("VALUE_STROKE_DEFAULT"), //
		jField<::java::lang::Object>("VALUE_STROKE_NORMALIZE"), //
		jField<::java::lang::Object>("VALUE_STROKE_PURE"), //
		jField<::java::lang::Object>("VALUE_TEXT_ANTIALIAS_DEFAULT"), //
		jField<::java::lang::Object>("VALUE_TEXT_ANTIALIAS_GASP"), //
		jField<::java::lang::Object>("VALUE_TEXT_ANTIALIAS_LCD_HBGR"), //
		jField<::java::lang::Object>("VALUE_TEXT_ANTIALIAS_LCD_HRGB"), //
		jField<::java::lang::Object>("VALUE_TEXT_ANTIALIAS_LCD_VBGR"), //
		jField<::java::lang::Object>("VALUE_TEXT_ANTIALIAS_LCD_VRGB"), //
		jField<::java::lang::Object>("VALUE_TEXT_ANTIALIAS_OFF"), //
		jField<::java::lang::Object>("VALUE_TEXT_ANTIALIAS_ON"), //
	};

	template<typename F = ::jint>
	static auto INTKEY_AATEXT_LCD_CONTRAST() {
		static_assert(field_signatures[jField<F>("INTKEY_AATEXT_LCD_CONTRAST")] != -1);
		return sat<F>("INTKEY_AATEXT_LCD_CONTRAST");
	}

	template<typename F = ::jint>
	static auto INTKEY_ALPHA_INTERPOLATION() {
		static_assert(field_signatures[jField<F>("INTKEY_ALPHA_INTERPOLATION")] != -1);
		return sat<F>("INTKEY_ALPHA_INTERPOLATION");
	}

	template<typename F = ::jint>
	static auto INTKEY_ANTIALIASING() {
		static_assert(field_signatures[jField<F>("INTKEY_ANTIALIASING")] != -1);
		return sat<F>("INTKEY_ANTIALIASING");
	}

	template<typename F = ::jint>
	static auto INTKEY_COLOR_RENDERING() {
		static_assert(field_signatures[jField<F>("INTKEY_COLOR_RENDERING")] != -1);
		return sat<F>("INTKEY_COLOR_RENDERING");
	}

	template<typename F = ::jint>
	static auto INTKEY_DITHERING() {
		static_assert(field_signatures[jField<F>("INTKEY_DITHERING")] != -1);
		return sat<F>("INTKEY_DITHERING");
	}

	template<typename F = ::jint>
	static auto INTKEY_FRACTIONALMETRICS() {
		static_assert(field_signatures[jField<F>("INTKEY_FRACTIONALMETRICS")] != -1);
		return sat<F>("INTKEY_FRACTIONALMETRICS");
	}

	template<typename F = ::jint>
	static auto INTKEY_INTERPOLATION() {
		static_assert(field_signatures[jField<F>("INTKEY_INTERPOLATION")] != -1);
		return sat<F>("INTKEY_INTERPOLATION");
	}

	template<typename F = ::jint>
	static auto INTKEY_RENDERING() {
		static_assert(field_signatures[jField<F>("INTKEY_RENDERING")] != -1);
		return sat<F>("INTKEY_RENDERING");
	}

	template<typename F = ::jint>
	static auto INTKEY_RESOLUTION_VARIANT() {
		static_assert(field_signatures[jField<F>("INTKEY_RESOLUTION_VARIANT")] != -1);
		return sat<F>("INTKEY_RESOLUTION_VARIANT");
	}

	template<typename F = ::jint>
	static auto INTKEY_STROKE_CONTROL() {
		static_assert(field_signatures[jField<F>("INTKEY_STROKE_CONTROL")] != -1);
		return sat<F>("INTKEY_STROKE_CONTROL");
	}

	template<typename F = ::jint>
	static auto INTKEY_TEXT_ANTIALIASING() {
		static_assert(field_signatures[jField<F>("INTKEY_TEXT_ANTIALIASING")] != -1);
		return sat<F>("INTKEY_TEXT_ANTIALIASING");
	}

	template<typename F = ::jint>
	static auto INTVAL_ALPHA_INTERPOLATION_DEFAULT() {
		static_assert(field_signatures[jField<F>("INTVAL_ALPHA_INTERPOLATION_DEFAULT")] != -1);
		return sat<F>("INTVAL_ALPHA_INTERPOLATION_DEFAULT");
	}

	template<typename F = ::jint>
	static auto INTVAL_ALPHA_INTERPOLATION_QUALITY() {
		static_assert(field_signatures[jField<F>("INTVAL_ALPHA_INTERPOLATION_QUALITY")] != -1);
		return sat<F>("INTVAL_ALPHA_INTERPOLATION_QUALITY");
	}

	template<typename F = ::jint>
	static auto INTVAL_ALPHA_INTERPOLATION_SPEED() {
		static_assert(field_signatures[jField<F>("INTVAL_ALPHA_INTERPOLATION_SPEED")] != -1);
		return sat<F>("INTVAL_ALPHA_INTERPOLATION_SPEED");
	}

	template<typename F = ::jint>
	static auto INTVAL_ANTIALIAS_DEFAULT() {
		static_assert(field_signatures[jField<F>("INTVAL_ANTIALIAS_DEFAULT")] != -1);
		return sat<F>("INTVAL_ANTIALIAS_DEFAULT");
	}

	template<typename F = ::jint>
	static auto INTVAL_ANTIALIAS_OFF() {
		static_assert(field_signatures[jField<F>("INTVAL_ANTIALIAS_OFF")] != -1);
		return sat<F>("INTVAL_ANTIALIAS_OFF");
	}

	template<typename F = ::jint>
	static auto INTVAL_ANTIALIAS_ON() {
		static_assert(field_signatures[jField<F>("INTVAL_ANTIALIAS_ON")] != -1);
		return sat<F>("INTVAL_ANTIALIAS_ON");
	}

	template<typename F = ::jint>
	static auto INTVAL_COLOR_RENDER_DEFAULT() {
		static_assert(field_signatures[jField<F>("INTVAL_COLOR_RENDER_DEFAULT")] != -1);
		return sat<F>("INTVAL_COLOR_RENDER_DEFAULT");
	}

	template<typename F = ::jint>
	static auto INTVAL_COLOR_RENDER_QUALITY() {
		static_assert(field_signatures[jField<F>("INTVAL_COLOR_RENDER_QUALITY")] != -1);
		return sat<F>("INTVAL_COLOR_RENDER_QUALITY");
	}

	template<typename F = ::jint>
	static auto INTVAL_COLOR_RENDER_SPEED() {
		static_assert(field_signatures[jField<F>("INTVAL_COLOR_RENDER_SPEED")] != -1);
		return sat<F>("INTVAL_COLOR_RENDER_SPEED");
	}

	template<typename F = ::jint>
	static auto INTVAL_DITHER_DEFAULT() {
		static_assert(field_signatures[jField<F>("INTVAL_DITHER_DEFAULT")] != -1);
		return sat<F>("INTVAL_DITHER_DEFAULT");
	}

	template<typename F = ::jint>
	static auto INTVAL_DITHER_DISABLE() {
		static_assert(field_signatures[jField<F>("INTVAL_DITHER_DISABLE")] != -1);
		return sat<F>("INTVAL_DITHER_DISABLE");
	}

	template<typename F = ::jint>
	static auto INTVAL_DITHER_ENABLE() {
		static_assert(field_signatures[jField<F>("INTVAL_DITHER_ENABLE")] != -1);
		return sat<F>("INTVAL_DITHER_ENABLE");
	}

	template<typename F = ::jint>
	static auto INTVAL_FRACTIONALMETRICS_DEFAULT() {
		static_assert(field_signatures[jField<F>("INTVAL_FRACTIONALMETRICS_DEFAULT")] != -1);
		return sat<F>("INTVAL_FRACTIONALMETRICS_DEFAULT");
	}

	template<typename F = ::jint>
	static auto INTVAL_FRACTIONALMETRICS_OFF() {
		static_assert(field_signatures[jField<F>("INTVAL_FRACTIONALMETRICS_OFF")] != -1);
		return sat<F>("INTVAL_FRACTIONALMETRICS_OFF");
	}

	template<typename F = ::jint>
	static auto INTVAL_FRACTIONALMETRICS_ON() {
		static_assert(field_signatures[jField<F>("INTVAL_FRACTIONALMETRICS_ON")] != -1);
		return sat<F>("INTVAL_FRACTIONALMETRICS_ON");
	}

	template<typename F = ::jint>
	static auto INTVAL_INTERPOLATION_BICUBIC() {
		static_assert(field_signatures[jField<F>("INTVAL_INTERPOLATION_BICUBIC")] != -1);
		return sat<F>("INTVAL_INTERPOLATION_BICUBIC");
	}

	template<typename F = ::jint>
	static auto INTVAL_INTERPOLATION_BILINEAR() {
		static_assert(field_signatures[jField<F>("INTVAL_INTERPOLATION_BILINEAR")] != -1);
		return sat<F>("INTVAL_INTERPOLATION_BILINEAR");
	}

	template<typename F = ::jint>
	static auto INTVAL_INTERPOLATION_NEAREST_NEIGHBOR() {
		static_assert(field_signatures[jField<F>("INTVAL_INTERPOLATION_NEAREST_NEIGHBOR")] != -1);
		return sat<F>("INTVAL_INTERPOLATION_NEAREST_NEIGHBOR");
	}

	template<typename F = ::jint>
	static auto INTVAL_RENDER_DEFAULT() {
		static_assert(field_signatures[jField<F>("INTVAL_RENDER_DEFAULT")] != -1);
		return sat<F>("INTVAL_RENDER_DEFAULT");
	}

	template<typename F = ::jint>
	static auto INTVAL_RENDER_QUALITY() {
		static_assert(field_signatures[jField<F>("INTVAL_RENDER_QUALITY")] != -1);
		return sat<F>("INTVAL_RENDER_QUALITY");
	}

	template<typename F = ::jint>
	static auto INTVAL_RENDER_SPEED() {
		static_assert(field_signatures[jField<F>("INTVAL_RENDER_SPEED")] != -1);
		return sat<F>("INTVAL_RENDER_SPEED");
	}

	template<typename F = ::jint>
	static auto INTVAL_RESOLUTION_VARIANT_DEFAULT() {
		static_assert(field_signatures[jField<F>("INTVAL_RESOLUTION_VARIANT_DEFAULT")] != -1);
		return sat<F>("INTVAL_RESOLUTION_VARIANT_DEFAULT");
	}

	template<typename F = ::jint>
	static auto INTVAL_RESOLUTION_VARIANT_OFF() {
		static_assert(field_signatures[jField<F>("INTVAL_RESOLUTION_VARIANT_OFF")] != -1);
		return sat<F>("INTVAL_RESOLUTION_VARIANT_OFF");
	}

	template<typename F = ::jint>
	static auto INTVAL_RESOLUTION_VARIANT_ON() {
		static_assert(field_signatures[jField<F>("INTVAL_RESOLUTION_VARIANT_ON")] != -1);
		return sat<F>("INTVAL_RESOLUTION_VARIANT_ON");
	}

	template<typename F = ::jint>
	static auto INTVAL_STROKE_DEFAULT() {
		static_assert(field_signatures[jField<F>("INTVAL_STROKE_DEFAULT")] != -1);
		return sat<F>("INTVAL_STROKE_DEFAULT");
	}

	template<typename F = ::jint>
	static auto INTVAL_STROKE_NORMALIZE() {
		static_assert(field_signatures[jField<F>("INTVAL_STROKE_NORMALIZE")] != -1);
		return sat<F>("INTVAL_STROKE_NORMALIZE");
	}

	template<typename F = ::jint>
	static auto INTVAL_STROKE_PURE() {
		static_assert(field_signatures[jField<F>("INTVAL_STROKE_PURE")] != -1);
		return sat<F>("INTVAL_STROKE_PURE");
	}

	template<typename F = ::jint>
	static auto INTVAL_TEXT_ANTIALIAS_DEFAULT() {
		static_assert(field_signatures[jField<F>("INTVAL_TEXT_ANTIALIAS_DEFAULT")] != -1);
		return sat<F>("INTVAL_TEXT_ANTIALIAS_DEFAULT");
	}

	template<typename F = ::jint>
	static auto INTVAL_TEXT_ANTIALIAS_GASP() {
		static_assert(field_signatures[jField<F>("INTVAL_TEXT_ANTIALIAS_GASP")] != -1);
		return sat<F>("INTVAL_TEXT_ANTIALIAS_GASP");
	}

	template<typename F = ::jint>
	static auto INTVAL_TEXT_ANTIALIAS_LCD_HBGR() {
		static_assert(field_signatures[jField<F>("INTVAL_TEXT_ANTIALIAS_LCD_HBGR")] != -1);
		return sat<F>("INTVAL_TEXT_ANTIALIAS_LCD_HBGR");
	}

	template<typename F = ::jint>
	static auto INTVAL_TEXT_ANTIALIAS_LCD_HRGB() {
		static_assert(field_signatures[jField<F>("INTVAL_TEXT_ANTIALIAS_LCD_HRGB")] != -1);
		return sat<F>("INTVAL_TEXT_ANTIALIAS_LCD_HRGB");
	}

	template<typename F = ::jint>
	static auto INTVAL_TEXT_ANTIALIAS_LCD_VBGR() {
		static_assert(field_signatures[jField<F>("INTVAL_TEXT_ANTIALIAS_LCD_VBGR")] != -1);
		return sat<F>("INTVAL_TEXT_ANTIALIAS_LCD_VBGR");
	}

	template<typename F = ::jint>
	static auto INTVAL_TEXT_ANTIALIAS_LCD_VRGB() {
		static_assert(field_signatures[jField<F>("INTVAL_TEXT_ANTIALIAS_LCD_VRGB")] != -1);
		return sat<F>("INTVAL_TEXT_ANTIALIAS_LCD_VRGB");
	}

	template<typename F = ::jint>
	static auto INTVAL_TEXT_ANTIALIAS_OFF() {
		static_assert(field_signatures[jField<F>("INTVAL_TEXT_ANTIALIAS_OFF")] != -1);
		return sat<F>("INTVAL_TEXT_ANTIALIAS_OFF");
	}

	template<typename F = ::jint>
	static auto INTVAL_TEXT_ANTIALIAS_ON() {
		static_assert(field_signatures[jField<F>("INTVAL_TEXT_ANTIALIAS_ON")] != -1);
		return sat<F>("INTVAL_TEXT_ANTIALIAS_ON");
	}

	template<typename F = ::sun::awt::SunHints$Key>
	static auto KEY_ALPHA_INTERPOLATION() {
		static_assert(field_signatures[jField<F>("KEY_ALPHA_INTERPOLATION")] != -1);
		return sat<F>("KEY_ALPHA_INTERPOLATION");
	}

	template<typename F = ::sun::awt::SunHints$Key>
	static auto KEY_ANTIALIASING() {
		static_assert(field_signatures[jField<F>("KEY_ANTIALIASING")] != -1);
		return sat<F>("KEY_ANTIALIASING");
	}

	template<typename F = ::sun::awt::SunHints$Key>
	static auto KEY_COLOR_RENDERING() {
		static_assert(field_signatures[jField<F>("KEY_COLOR_RENDERING")] != -1);
		return sat<F>("KEY_COLOR_RENDERING");
	}

	template<typename F = ::sun::awt::SunHints$Key>
	static auto KEY_DITHERING() {
		static_assert(field_signatures[jField<F>("KEY_DITHERING")] != -1);
		return sat<F>("KEY_DITHERING");
	}

	template<typename F = ::sun::awt::SunHints$Key>
	static auto KEY_FRACTIONALMETRICS() {
		static_assert(field_signatures[jField<F>("KEY_FRACTIONALMETRICS")] != -1);
		return sat<F>("KEY_FRACTIONALMETRICS");
	}

	template<typename F = ::sun::awt::SunHints$Key>
	static auto KEY_INTERPOLATION() {
		static_assert(field_signatures[jField<F>("KEY_INTERPOLATION")] != -1);
		return sat<F>("KEY_INTERPOLATION");
	}

	template<typename F = ::sun::awt::SunHints$Key>
	static auto KEY_RENDERING() {
		static_assert(field_signatures[jField<F>("KEY_RENDERING")] != -1);
		return sat<F>("KEY_RENDERING");
	}

	template<typename F = ::sun::awt::SunHints$Key>
	static auto KEY_RESOLUTION_VARIANT() {
		static_assert(field_signatures[jField<F>("KEY_RESOLUTION_VARIANT")] != -1);
		return sat<F>("KEY_RESOLUTION_VARIANT");
	}

	template<typename F = ::sun::awt::SunHints$Key>
	static auto KEY_STROKE_CONTROL() {
		static_assert(field_signatures[jField<F>("KEY_STROKE_CONTROL")] != -1);
		return sat<F>("KEY_STROKE_CONTROL");
	}

	template<typename F = ::sun::awt::SunHints$Key>
	static auto KEY_TEXT_ANTIALIASING() {
		static_assert(field_signatures[jField<F>("KEY_TEXT_ANTIALIASING")] != -1);
		return sat<F>("KEY_TEXT_ANTIALIASING");
	}

	template<typename F = ::java::awt::RenderingHints$Key>
	static auto KEY_TEXT_ANTIALIAS_LCD_CONTRAST() {
		static_assert(field_signatures[jField<F>("KEY_TEXT_ANTIALIAS_LCD_CONTRAST")] != -1);
		return sat<F>("KEY_TEXT_ANTIALIAS_LCD_CONTRAST");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_ALPHA_INTERPOLATION_DEFAULT() {
		static_assert(field_signatures[jField<F>("VALUE_ALPHA_INTERPOLATION_DEFAULT")] != -1);
		return sat<F>("VALUE_ALPHA_INTERPOLATION_DEFAULT");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_ALPHA_INTERPOLATION_QUALITY() {
		static_assert(field_signatures[jField<F>("VALUE_ALPHA_INTERPOLATION_QUALITY")] != -1);
		return sat<F>("VALUE_ALPHA_INTERPOLATION_QUALITY");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_ALPHA_INTERPOLATION_SPEED() {
		static_assert(field_signatures[jField<F>("VALUE_ALPHA_INTERPOLATION_SPEED")] != -1);
		return sat<F>("VALUE_ALPHA_INTERPOLATION_SPEED");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_ANTIALIAS_DEFAULT() {
		static_assert(field_signatures[jField<F>("VALUE_ANTIALIAS_DEFAULT")] != -1);
		return sat<F>("VALUE_ANTIALIAS_DEFAULT");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_ANTIALIAS_OFF() {
		static_assert(field_signatures[jField<F>("VALUE_ANTIALIAS_OFF")] != -1);
		return sat<F>("VALUE_ANTIALIAS_OFF");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_ANTIALIAS_ON() {
		static_assert(field_signatures[jField<F>("VALUE_ANTIALIAS_ON")] != -1);
		return sat<F>("VALUE_ANTIALIAS_ON");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_COLOR_RENDER_DEFAULT() {
		static_assert(field_signatures[jField<F>("VALUE_COLOR_RENDER_DEFAULT")] != -1);
		return sat<F>("VALUE_COLOR_RENDER_DEFAULT");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_COLOR_RENDER_QUALITY() {
		static_assert(field_signatures[jField<F>("VALUE_COLOR_RENDER_QUALITY")] != -1);
		return sat<F>("VALUE_COLOR_RENDER_QUALITY");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_COLOR_RENDER_SPEED() {
		static_assert(field_signatures[jField<F>("VALUE_COLOR_RENDER_SPEED")] != -1);
		return sat<F>("VALUE_COLOR_RENDER_SPEED");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_DITHER_DEFAULT() {
		static_assert(field_signatures[jField<F>("VALUE_DITHER_DEFAULT")] != -1);
		return sat<F>("VALUE_DITHER_DEFAULT");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_DITHER_DISABLE() {
		static_assert(field_signatures[jField<F>("VALUE_DITHER_DISABLE")] != -1);
		return sat<F>("VALUE_DITHER_DISABLE");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_DITHER_ENABLE() {
		static_assert(field_signatures[jField<F>("VALUE_DITHER_ENABLE")] != -1);
		return sat<F>("VALUE_DITHER_ENABLE");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_FRACTIONALMETRICS_DEFAULT() {
		static_assert(field_signatures[jField<F>("VALUE_FRACTIONALMETRICS_DEFAULT")] != -1);
		return sat<F>("VALUE_FRACTIONALMETRICS_DEFAULT");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_FRACTIONALMETRICS_OFF() {
		static_assert(field_signatures[jField<F>("VALUE_FRACTIONALMETRICS_OFF")] != -1);
		return sat<F>("VALUE_FRACTIONALMETRICS_OFF");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_FRACTIONALMETRICS_ON() {
		static_assert(field_signatures[jField<F>("VALUE_FRACTIONALMETRICS_ON")] != -1);
		return sat<F>("VALUE_FRACTIONALMETRICS_ON");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_INTERPOLATION_BICUBIC() {
		static_assert(field_signatures[jField<F>("VALUE_INTERPOLATION_BICUBIC")] != -1);
		return sat<F>("VALUE_INTERPOLATION_BICUBIC");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_INTERPOLATION_BILINEAR() {
		static_assert(field_signatures[jField<F>("VALUE_INTERPOLATION_BILINEAR")] != -1);
		return sat<F>("VALUE_INTERPOLATION_BILINEAR");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_INTERPOLATION_NEAREST_NEIGHBOR() {
		static_assert(field_signatures[jField<F>("VALUE_INTERPOLATION_NEAREST_NEIGHBOR")] != -1);
		return sat<F>("VALUE_INTERPOLATION_NEAREST_NEIGHBOR");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_RENDER_DEFAULT() {
		static_assert(field_signatures[jField<F>("VALUE_RENDER_DEFAULT")] != -1);
		return sat<F>("VALUE_RENDER_DEFAULT");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_RENDER_QUALITY() {
		static_assert(field_signatures[jField<F>("VALUE_RENDER_QUALITY")] != -1);
		return sat<F>("VALUE_RENDER_QUALITY");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_RENDER_SPEED() {
		static_assert(field_signatures[jField<F>("VALUE_RENDER_SPEED")] != -1);
		return sat<F>("VALUE_RENDER_SPEED");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_RESOLUTION_VARIANT_DEFAULT() {
		static_assert(field_signatures[jField<F>("VALUE_RESOLUTION_VARIANT_DEFAULT")] != -1);
		return sat<F>("VALUE_RESOLUTION_VARIANT_DEFAULT");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_RESOLUTION_VARIANT_OFF() {
		static_assert(field_signatures[jField<F>("VALUE_RESOLUTION_VARIANT_OFF")] != -1);
		return sat<F>("VALUE_RESOLUTION_VARIANT_OFF");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_RESOLUTION_VARIANT_ON() {
		static_assert(field_signatures[jField<F>("VALUE_RESOLUTION_VARIANT_ON")] != -1);
		return sat<F>("VALUE_RESOLUTION_VARIANT_ON");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_STROKE_DEFAULT() {
		static_assert(field_signatures[jField<F>("VALUE_STROKE_DEFAULT")] != -1);
		return sat<F>("VALUE_STROKE_DEFAULT");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_STROKE_NORMALIZE() {
		static_assert(field_signatures[jField<F>("VALUE_STROKE_NORMALIZE")] != -1);
		return sat<F>("VALUE_STROKE_NORMALIZE");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_STROKE_PURE() {
		static_assert(field_signatures[jField<F>("VALUE_STROKE_PURE")] != -1);
		return sat<F>("VALUE_STROKE_PURE");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_TEXT_ANTIALIAS_DEFAULT() {
		static_assert(field_signatures[jField<F>("VALUE_TEXT_ANTIALIAS_DEFAULT")] != -1);
		return sat<F>("VALUE_TEXT_ANTIALIAS_DEFAULT");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_TEXT_ANTIALIAS_GASP() {
		static_assert(field_signatures[jField<F>("VALUE_TEXT_ANTIALIAS_GASP")] != -1);
		return sat<F>("VALUE_TEXT_ANTIALIAS_GASP");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_TEXT_ANTIALIAS_LCD_HBGR() {
		static_assert(field_signatures[jField<F>("VALUE_TEXT_ANTIALIAS_LCD_HBGR")] != -1);
		return sat<F>("VALUE_TEXT_ANTIALIAS_LCD_HBGR");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_TEXT_ANTIALIAS_LCD_HRGB() {
		static_assert(field_signatures[jField<F>("VALUE_TEXT_ANTIALIAS_LCD_HRGB")] != -1);
		return sat<F>("VALUE_TEXT_ANTIALIAS_LCD_HRGB");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_TEXT_ANTIALIAS_LCD_VBGR() {
		static_assert(field_signatures[jField<F>("VALUE_TEXT_ANTIALIAS_LCD_VBGR")] != -1);
		return sat<F>("VALUE_TEXT_ANTIALIAS_LCD_VBGR");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_TEXT_ANTIALIAS_LCD_VRGB() {
		static_assert(field_signatures[jField<F>("VALUE_TEXT_ANTIALIAS_LCD_VRGB")] != -1);
		return sat<F>("VALUE_TEXT_ANTIALIAS_LCD_VRGB");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_TEXT_ANTIALIAS_OFF() {
		static_assert(field_signatures[jField<F>("VALUE_TEXT_ANTIALIAS_OFF")] != -1);
		return sat<F>("VALUE_TEXT_ANTIALIAS_OFF");
	}

	template<typename F = ::java::lang::Object>
	static auto VALUE_TEXT_ANTIALIAS_ON() {
		static_assert(field_signatures[jField<F>("VALUE_TEXT_ANTIALIAS_ON")] != -1);
		return sat<F>("VALUE_TEXT_ANTIALIAS_ON");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
	};

};

#endif
