#ifndef sun_awt_FcFontManager_HPP
#define sun_awt_FcFontManager_HPP

#include "../../jfwd_decl.hpp"

class ::sun::awt::FcFontManager : public jObject<::sun::awt::FcFontManager, ::sun::font::SunFontManager> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt / "FcFontManager";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::sun::awt::FontConfiguration(::jboolean, ::jboolean)>("createFontConfiguration"), //
		jMethod<::sun::font::FontConfigManager()>("getFontConfigManager"), //
	};

	template<typename R = ::sun::awt::FontConfiguration, typename... Args>
	auto createFontConfiguration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createFontConfiguration")] != -1);
		return call<R>("createFontConfiguration", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::font::FontConfigManager, typename... Args>
	auto getFontConfigManager(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFontConfigManager")] != -1);
		return call<R>("getFontConfigManager", std::forward<Args>(args)...);
	}

};

#endif
