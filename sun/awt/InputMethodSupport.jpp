#ifndef sun_awt_InputMethodSupport_HPP
#define sun_awt_InputMethodSupport_HPP

#include "../../jfwd_decl.hpp"

class ::sun::awt::InputMethodSupport : public jObject<::sun::awt::InputMethodSupport, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt / "InputMethodSupport";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::awt::Window(::java::lang::String, ::sun::awt::im::InputContext)>("createInputMethodWindow"), //
		jMethod<::jboolean()>("enableInputMethodsForTextComponent"), //
		jMethod<::java::util::Locale()>("getDefaultKeyboardLocale"), //
		jMethod<::java::awt::im::spi::InputMethodDescriptor()>("getInputMethodAdapterDescriptor"), //
	};

	template<typename R = ::java::awt::Window, typename... Args>
	auto createInputMethodWindow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createInputMethodWindow")] != -1);
		return call<R>("createInputMethodWindow", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto enableInputMethodsForTextComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("enableInputMethodsForTextComponent")] != -1);
		return call<R>("enableInputMethodsForTextComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale, typename... Args>
	auto getDefaultKeyboardLocale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultKeyboardLocale")] != -1);
		return call<R>("getDefaultKeyboardLocale", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::im::spi::InputMethodDescriptor, typename... Args>
	auto getInputMethodAdapterDescriptor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInputMethodAdapterDescriptor")] != -1);
		return call<R>("getInputMethodAdapterDescriptor", std::forward<Args>(args)...);
	}

};

#endif
