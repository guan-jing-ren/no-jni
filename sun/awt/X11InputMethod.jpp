#ifndef sun_awt_X11InputMethod_HPP
#define sun_awt_X11InputMethod_HPP

#include "../../jfwd_decl.hpp"

class ::sun::awt::X11InputMethod : public jObject<::sun::awt::X11InputMethod, ::sun::awt::im::InputMethodAdapter> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt / "X11InputMethod";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid()>("activate"), //
		jMethod<::jvoid(::jboolean)>("deactivate"), //
		jMethod<::jvoid()>("disableInputMethod"), //
		jMethod<::jvoid(::java::awt::AWTEvent)>("dispatchEvent"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jvoid()>("endComposition"), //
		jMethod<::java::lang::Object()>("getControlObject"), //
		jMethod<::java::util::Locale()>("getLocale"), //
		jMethod<::java::lang::String()>("getNativeInputMethodInfo"), //
		jMethod<::jvoid()>("hideWindows"), //
		jMethod<::jboolean()>("isCompositionEnabled"), //
		jMethod<::java::util::Map(::java::awt::im::InputMethodHighlight)>("mapInputMethodHighlight"), //
		jMethod<::jvoid()>("removeNotify"), //
		jMethod<::jvoid(::java::lang::Character$Subset *)>("setCharacterSubsets"), //
		jMethod<::jvoid(::jboolean)>("setCompositionEnabled"), //
		jMethod<::jvoid(::java::awt::im::spi::InputMethodContext)>("setInputMethodContext"), //
		jMethod<::jboolean(::java::util::Locale)>("setLocale"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto activate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("activate")] != -1);
		return call<R>("activate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deactivate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deactivate")] != -1);
		return call<R>("deactivate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto disableInputMethod(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("disableInputMethod")] != -1);
		return call<R>("disableInputMethod", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispatchEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispatchEvent")] != -1);
		return call<R>("dispatchEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endComposition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("endComposition")] != -1);
		return call<R>("endComposition", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getControlObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getControlObject")] != -1);
		return call<R>("getControlObject", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale, typename... Args>
	auto getLocale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocale")] != -1);
		return call<R>("getLocale", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNativeInputMethodInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNativeInputMethodInfo")] != -1);
		return call<R>("getNativeInputMethodInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto hideWindows(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hideWindows")] != -1);
		return call<R>("hideWindows", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCompositionEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCompositionEnabled")] != -1);
		return call<R>("isCompositionEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	static auto mapInputMethodHighlight(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mapInputMethodHighlight")] != -1);
		return scall<R>("mapInputMethodHighlight", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeNotify")] != -1);
		return call<R>("removeNotify", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCharacterSubsets(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCharacterSubsets")] != -1);
		return call<R>("setCharacterSubsets", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCompositionEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCompositionEnabled")] != -1);
		return call<R>("setCompositionEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInputMethodContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setInputMethodContext")] != -1);
		return call<R>("setInputMethodContext", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto setLocale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLocale")] != -1);
		return call<R>("setLocale", std::forward<Args>(args)...);
	}

};

#endif
