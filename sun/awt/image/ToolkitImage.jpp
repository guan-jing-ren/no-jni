#ifndef sun_awt_image_ToolkitImage_HPP
#define sun_awt_image_ToolkitImage_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::image::ToolkitImage : public jObject<::sun::awt::image::ToolkitImage, ::java::awt::Image> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_image / "ToolkitImage";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::image::ImageProducer)>(), //
		jMethod<::jint(::java::awt::image::ImageObserver)>("check"), //
		jMethod<::jvoid()>("flush"), //
		jMethod<::java::awt::image::BufferedImage()>("getBufferedImage"), //
		jMethod<::java::awt::image::ColorModel()>("getColorModel"), //
		jMethod<::java::awt::Graphics()>("getGraphics"), //
		jMethod<::jint()>("getHeight"), //
		jMethod<::jint(::java::awt::image::ImageObserver)>("getHeight"), //
		jMethod<::sun::awt::image::ImageRepresentation()>("getImageRep"), //
		jMethod<::java::lang::Object(::java::lang::String, ::java::awt::image::ImageObserver)>("getProperty"), //
		jMethod<::java::awt::image::ImageProducer()>("getSource"), //
		jMethod<::jint()>("getWidth"), //
		jMethod<::jint(::java::awt::image::ImageObserver)>("getWidth"), //
		jMethod<::jboolean()>("hasError"), //
		jMethod<::jvoid(::java::awt::image::ImageObserver)>("preload"), //
		jMethod<::jvoid(::jfloat)>("setAccelerationPriority"), //
	};

	template<typename R = ::jint, typename... Args>
	auto check(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("check")] != -1);
		return call<R>("check", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto flush(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("flush")] != -1);
		return call<R>("flush", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::BufferedImage, typename... Args>
	auto getBufferedImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBufferedImage")] != -1);
		return call<R>("getBufferedImage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::ColorModel, typename... Args>
	auto getColorModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColorModel")] != -1);
		return call<R>("getColorModel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Graphics, typename... Args>
	auto getGraphics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGraphics")] != -1);
		return call<R>("getGraphics", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeight")] != -1);
		return call<R>("getHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::image::ImageRepresentation, typename... Args>
	auto getImageRep(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getImageRep")] != -1);
		return call<R>("getImageRep", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProperty")] != -1);
		return call<R>("getProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::ImageProducer, typename... Args>
	auto getSource(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSource")] != -1);
		return call<R>("getSource", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasError(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasError")] != -1);
		return call<R>("hasError", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto preload(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("preload")] != -1);
		return call<R>("preload", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAccelerationPriority(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAccelerationPriority")] != -1);
		return call<R>("setAccelerationPriority", std::forward<Args>(args)...);
	}

};

#endif
