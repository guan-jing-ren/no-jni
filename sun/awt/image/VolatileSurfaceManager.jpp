#ifndef sun_awt_image_VolatileSurfaceManager_HPP
#define sun_awt_image_VolatileSurfaceManager_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::image::VolatileSurfaceManager : public jObject<::sun::awt::image::VolatileSurfaceManager, ::sun::awt::image::SurfaceManager> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_image / "VolatileSurfaceManager";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("acceleratedSurfaceLost"), //
		jMethod<::jboolean()>("contentsLost"), //
		jMethod<::jvoid()>("displayChanged"), //
		jMethod<::jvoid()>("flush"), //
		jMethod<::java::awt::ImageCapabilities(::java::awt::GraphicsConfiguration)>("getCapabilities"), //
		jMethod<::sun::java2d::SurfaceData()>("getPrimarySurfaceData"), //
		jMethod<::jvoid()>("initContents"), //
		jMethod<::jvoid()>("initialize"), //
		jMethod<::jvoid()>("paletteChanged"), //
		jMethod<::sun::java2d::SurfaceData()>("restoreContents"), //
		jMethod<::jint(::java::awt::GraphicsConfiguration)>("validate"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto acceleratedSurfaceLost(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("acceleratedSurfaceLost")] != -1);
		return call<R>("acceleratedSurfaceLost", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto contentsLost(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("contentsLost")] != -1);
		return call<R>("contentsLost", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto displayChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("displayChanged")] != -1);
		return call<R>("displayChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto flush(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("flush")] != -1);
		return call<R>("flush", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::ImageCapabilities, typename... Args>
	auto getCapabilities(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCapabilities")] != -1);
		return call<R>("getCapabilities", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::SurfaceData, typename... Args>
	auto getPrimarySurfaceData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrimarySurfaceData")] != -1);
		return call<R>("getPrimarySurfaceData", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto initContents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initContents")] != -1);
		return call<R>("initContents", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto initialize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initialize")] != -1);
		return call<R>("initialize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paletteChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paletteChanged")] != -1);
		return call<R>("paletteChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::SurfaceData, typename... Args>
	auto restoreContents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("restoreContents")] != -1);
		return call<R>("restoreContents", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto validate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("validate")] != -1);
		return call<R>("validate", std::forward<Args>(args)...);
	}

};

#endif
