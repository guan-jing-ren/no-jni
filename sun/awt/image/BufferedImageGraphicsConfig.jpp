#ifndef sun_awt_image_BufferedImageGraphicsConfig_HPP
#define sun_awt_image_BufferedImageGraphicsConfig_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::image::BufferedImageGraphicsConfig : public jObject<::sun::awt::image::BufferedImageGraphicsConfig, ::java::awt::GraphicsConfiguration> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_image / "BufferedImageGraphicsConfig";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::image::BufferedImage, ::java::awt::Component)>(), //
		jMethod<::java::awt::image::BufferedImage(::jint, ::jint)>("createCompatibleImage"), //
		jMethod<::java::awt::Rectangle()>("getBounds"), //
		jMethod<::java::awt::image::ColorModel()>("getColorModel"), //
		jMethod<::java::awt::image::ColorModel(::jint)>("getColorModel"), //
		jMethod<::sun::awt::image::BufferedImageGraphicsConfig(::java::awt::image::BufferedImage)>("getConfig"), //
		jMethod<::java::awt::geom::AffineTransform()>("getDefaultTransform"), //
		jMethod<::java::awt::GraphicsDevice()>("getDevice"), //
		jMethod<::java::awt::geom::AffineTransform()>("getNormalizingTransform"), //
	};

	template<typename R = ::java::awt::image::BufferedImage, typename... Args>
	auto createCompatibleImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createCompatibleImage")] != -1);
		return call<R>("createCompatibleImage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds")] != -1);
		return call<R>("getBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::ColorModel, typename... Args>
	auto getColorModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColorModel")] != -1);
		return call<R>("getColorModel", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::image::BufferedImageGraphicsConfig, typename... Args>
	static auto getConfig(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConfig")] != -1);
		return scall<R>("getConfig", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::AffineTransform, typename... Args>
	auto getDefaultTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultTransform")] != -1);
		return call<R>("getDefaultTransform", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::GraphicsDevice, typename... Args>
	auto getDevice(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDevice")] != -1);
		return call<R>("getDevice", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::AffineTransform, typename... Args>
	auto getNormalizingTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNormalizingTransform")] != -1);
		return call<R>("getNormalizingTransform", std::forward<Args>(args)...);
	}

};

#endif
