#ifndef sun_awt_image_PNGImageDecoder$Chromaticities_HPP
#define sun_awt_image_PNGImageDecoder$Chromaticities_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::image::PNGImageDecoder$Chromaticities : public jObject<::sun::awt::image::PNGImageDecoder$Chromaticities, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_image / "PNGImageDecoder$Chromaticities";

	constexpr static Enume field_signatures{
		jField<::jfloat>("blueX"), //
		jField<::jfloat>("blueY"), //
		jField<::jfloat>("greenX"), //
		jField<::jfloat>("greenY"), //
		jField<::jfloat>("redX"), //
		jField<::jfloat>("redY"), //
		jField<::jfloat>("whiteX"), //
		jField<::jfloat>("whiteY"), //
	};

	template<typename F = ::jfloat>
	auto blueX() const {
		static_assert(field_signatures[jField<F>("blueX")] != -1);
		return at<F>("blueX");
	}

	template<typename F = ::jfloat>
	auto blueY() const {
		static_assert(field_signatures[jField<F>("blueY")] != -1);
		return at<F>("blueY");
	}

	template<typename F = ::jfloat>
	auto greenX() const {
		static_assert(field_signatures[jField<F>("greenX")] != -1);
		return at<F>("greenX");
	}

	template<typename F = ::jfloat>
	auto greenY() const {
		static_assert(field_signatures[jField<F>("greenY")] != -1);
		return at<F>("greenY");
	}

	template<typename F = ::jfloat>
	auto redX() const {
		static_assert(field_signatures[jField<F>("redX")] != -1);
		return at<F>("redX");
	}

	template<typename F = ::jfloat>
	auto redY() const {
		static_assert(field_signatures[jField<F>("redY")] != -1);
		return at<F>("redY");
	}

	template<typename F = ::jfloat>
	auto whiteX() const {
		static_assert(field_signatures[jField<F>("whiteX")] != -1);
		return at<F>("whiteX");
	}

	template<typename F = ::jfloat>
	auto whiteY() const {
		static_assert(field_signatures[jField<F>("whiteY")] != -1);
		return at<F>("whiteY");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
