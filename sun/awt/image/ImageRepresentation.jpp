#ifndef sun_awt_image_ImageRepresentation_HPP
#define sun_awt_image_ImageRepresentation_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::image::ImageRepresentation : public jObject<::sun::awt::image::ImageRepresentation, ::sun::awt::image::ImageWatched> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_image / "ImageRepresentation";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::sun::awt::image::ToolkitImage, ::java::awt::image::ColorModel, ::jboolean)>(), //
		jMethod<::jint(::java::awt::image::ImageObserver)>("check"), //
		jMethod<::jboolean(::java::awt::Graphics, ::sun::awt::image::ToolkitImage, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::java::awt::Color, ::java::awt::image::ImageObserver)>("drawToBufImage"), //
		jMethod<::jboolean(::java::awt::Graphics, ::sun::awt::image::ToolkitImage, ::jint, ::jint, ::jint, ::jint, ::java::awt::Color, ::java::awt::image::ImageObserver)>("drawToBufImage"), //
		jMethod<::jboolean(::java::awt::Graphics, ::sun::awt::image::ToolkitImage, ::jint, ::jint, ::java::awt::Color, ::java::awt::image::ImageObserver)>("drawToBufImage"), //
		jMethod<::jboolean(::java::awt::Graphics, ::sun::awt::image::ToolkitImage, ::java::awt::geom::AffineTransform, ::java::awt::image::ImageObserver)>("drawToBufImage"), //
		jMethod<::jint()>("getHeight"), //
		jMethod<::java::awt::image::BufferedImage()>("getOpaqueRGBImage"), //
		jMethod<::jint()>("getWidth"), //
		jMethod<::jvoid(::jint)>("imageComplete"), //
		jMethod<::jvoid()>("notifyWatcherListEmpty"), //
		jMethod<::jboolean(::java::awt::image::ImageObserver)>("prepare"), //
		jMethod<::jvoid(::jint)>("reconstruct"), //
		jMethod<::jvoid(::jfloat)>("setAccelerationPriority"), //
		jMethod<::jvoid(::java::awt::image::ColorModel)>("setColorModel"), //
		jMethod<::jvoid(::jint, ::jint)>("setDimensions"), //
		jMethod<::jvoid(::jint)>("setHints"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::java::awt::image::ColorModel, ::jbyte *, ::jint, ::jint)>("setPixels"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::java::awt::image::ColorModel, ::jint *, ::jint, ::jint)>("setPixels"), //
		jMethod<::jvoid(::java::util::Hashtable)>("setProperties"), //
	};

	template<typename R = ::jint, typename... Args>
	auto check(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("check")] != -1);
		return call<R>("check", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto drawToBufImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawToBufImage")] != -1);
		return call<R>("drawToBufImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeight")] != -1);
		return call<R>("getHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::BufferedImage, typename... Args>
	auto getOpaqueRGBImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOpaqueRGBImage")] != -1);
		return call<R>("getOpaqueRGBImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto imageComplete(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("imageComplete")] != -1);
		return call<R>("imageComplete", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto notifyWatcherListEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("notifyWatcherListEmpty")] != -1);
		return call<R>("notifyWatcherListEmpty", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto prepare(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("prepare")] != -1);
		return call<R>("prepare", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reconstruct(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reconstruct")] != -1);
		return call<R>("reconstruct", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAccelerationPriority(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAccelerationPriority")] != -1);
		return call<R>("setAccelerationPriority", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColorModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setColorModel")] != -1);
		return call<R>("setColorModel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDimensions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDimensions")] != -1);
		return call<R>("setDimensions", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHints")] != -1);
		return call<R>("setHints", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPixels(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPixels")] != -1);
		return call<R>("setPixels", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setProperties(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setProperties")] != -1);
		return call<R>("setProperties", std::forward<Args>(args)...);
	}

};

#endif
