#ifndef sun_awt_image_SunVolatileImage_HPP
#define sun_awt_image_SunVolatileImage_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::image::SunVolatileImage : public jObject<::sun::awt::image::SunVolatileImage, ::java::awt::image::VolatileImage> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_image / "SunVolatileImage";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::Component, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::java::awt::Component, ::jint, ::jint, ::java::lang::Object)>(), //
		jConstructor<::jvoid(::java::awt::GraphicsConfiguration, ::jint, ::jint, ::jint, ::java::awt::ImageCapabilities)>(), //
		jMethod<::jboolean()>("contentsLost"), //
		jMethod<::java::awt::Graphics2D()>("createGraphics"), //
		jMethod<::java::awt::image::BufferedImage()>("getBackupImage"), //
		jMethod<::java::awt::ImageCapabilities()>("getCapabilities"), //
		jMethod<::java::awt::Component()>("getComponent"), //
		jMethod<::sun::java2d::Surface()>("getDestSurface"), //
		jMethod<::jint()>("getForcedAccelSurfaceType"), //
		jMethod<::java::awt::GraphicsConfiguration()>("getGraphicsConfig"), //
		jMethod<::jint()>("getHeight"), //
		jMethod<::jint(::java::awt::image::ImageObserver)>("getHeight"), //
		jMethod<::java::lang::Object(::java::lang::String, ::java::awt::image::ImageObserver)>("getProperty"), //
		jMethod<::java::awt::image::BufferedImage()>("getSnapshot"), //
		jMethod<::jint()>("getWidth"), //
		jMethod<::jint(::java::awt::image::ImageObserver)>("getWidth"), //
		jMethod<::jvoid()>("updateGraphicsConfig"), //
		jMethod<::jint(::java::awt::GraphicsConfiguration)>("validate"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto contentsLost(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("contentsLost")] != -1);
		return call<R>("contentsLost", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Graphics2D, typename... Args>
	auto createGraphics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createGraphics")] != -1);
		return call<R>("createGraphics", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::BufferedImage, typename... Args>
	auto getBackupImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBackupImage")] != -1);
		return call<R>("getBackupImage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::ImageCapabilities, typename... Args>
	auto getCapabilities(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCapabilities")] != -1);
		return call<R>("getCapabilities", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getComponent")] != -1);
		return call<R>("getComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::Surface, typename... Args>
	auto getDestSurface(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDestSurface")] != -1);
		return call<R>("getDestSurface", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getForcedAccelSurfaceType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getForcedAccelSurfaceType")] != -1);
		return call<R>("getForcedAccelSurfaceType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::GraphicsConfiguration, typename... Args>
	auto getGraphicsConfig(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGraphicsConfig")] != -1);
		return call<R>("getGraphicsConfig", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeight")] != -1);
		return call<R>("getHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProperty")] != -1);
		return call<R>("getProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::BufferedImage, typename... Args>
	auto getSnapshot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSnapshot")] != -1);
		return call<R>("getSnapshot", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateGraphicsConfig(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateGraphicsConfig")] != -1);
		return call<R>("updateGraphicsConfig", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto validate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("validate")] != -1);
		return call<R>("validate", std::forward<Args>(args)...);
	}

};

#endif
