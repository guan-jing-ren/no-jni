#ifndef sun_awt_image_VSyncedBSManager_HPP
#define sun_awt_image_VSyncedBSManager_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::image::VSyncedBSManager : public jObject<::sun::awt::image::VSyncedBSManager, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_image / "VSyncedBSManager";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::awt::image::BufferStrategy)>("releaseVsync"), //
		jMethod<::jboolean(::java::awt::image::BufferStrategy)>("vsyncAllowed"), //
	};

	template<typename R = ::jvoid, typename... Args>
	static auto releaseVsync(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("releaseVsync")] != -1);
		return scall<R>("releaseVsync", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto vsyncAllowed(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("vsyncAllowed")] != -1);
		return scall<R>("vsyncAllowed", std::forward<Args>(args)...);
	}

};

#endif
