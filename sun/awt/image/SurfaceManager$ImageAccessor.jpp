#ifndef sun_awt_image_SurfaceManager$ImageAccessor_HPP
#define sun_awt_image_SurfaceManager$ImageAccessor_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::image::SurfaceManager$ImageAccessor : public jObject<::sun::awt::image::SurfaceManager$ImageAccessor, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_image / "SurfaceManager$ImageAccessor";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::sun::awt::image::SurfaceManager(::java::awt::Image)>("getSurfaceManager"), //
		jMethod<::jvoid(::java::awt::Image, ::sun::awt::image::SurfaceManager)>("setSurfaceManager"), //
	};

	template<typename R = ::sun::awt::image::SurfaceManager, typename... Args>
	auto getSurfaceManager(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSurfaceManager")] != -1);
		return call<R>("getSurfaceManager", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSurfaceManager(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSurfaceManager")] != -1);
		return call<R>("setSurfaceManager", std::forward<Args>(args)...);
	}

};

#endif
