#ifndef sun_awt_image_ImageWatched_HPP
#define sun_awt_image_ImageWatched_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::image::ImageWatched : public jObject<::sun::awt::image::ImageWatched, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_image / "ImageWatched";

	constexpr static Enume field_signatures{
		jField<::sun::awt::image::ImageWatched$Link>("endlink"), //
		jField<::sun::awt::image::ImageWatched$Link>("watcherList"), //
	};

	template<typename F = ::sun::awt::image::ImageWatched$Link>
	static auto endlink() {
		static_assert(field_signatures[jField<F>("endlink")] != -1);
		return sat<F>("endlink");
	}

	template<typename F = ::sun::awt::image::ImageWatched$Link>
	auto watcherList() const {
		static_assert(field_signatures[jField<F>("watcherList")] != -1);
		return at<F>("watcherList");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::awt::image::ImageObserver)>("addWatcher"), //
		jMethod<::jboolean(::java::awt::image::ImageObserver)>("isWatcher"), //
		jMethod<::jboolean()>("isWatcherListEmpty"), //
		jMethod<::jvoid(::java::awt::Image, ::jint, ::jint, ::jint, ::jint, ::jint)>("newInfo"), //
		jMethod<::jvoid(::java::awt::image::ImageObserver)>("removeWatcher"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addWatcher(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addWatcher")] != -1);
		return call<R>("addWatcher", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isWatcher(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isWatcher")] != -1);
		return call<R>("isWatcher", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isWatcherListEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isWatcherListEmpty")] != -1);
		return call<R>("isWatcherListEmpty", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto newInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newInfo")] != -1);
		return call<R>("newInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeWatcher(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeWatcher")] != -1);
		return call<R>("removeWatcher", std::forward<Args>(args)...);
	}

};

#endif
