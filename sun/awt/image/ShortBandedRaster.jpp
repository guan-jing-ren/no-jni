#ifndef sun_awt_image_ShortBandedRaster_HPP
#define sun_awt_image_ShortBandedRaster_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::image::ShortBandedRaster : public jObject<::sun::awt::image::ShortBandedRaster, ::sun::awt::image::SunWritableRaster> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_image / "ShortBandedRaster";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::image::SampleModel, ::java::awt::Point)>(), //
		jConstructor<::jvoid(::java::awt::image::SampleModel, ::java::awt::image::DataBuffer, ::java::awt::Point)>(), //
		jConstructor<::jvoid(::java::awt::image::SampleModel, ::java::awt::image::DataBuffer, ::java::awt::Rectangle, ::java::awt::Point, ::sun::awt::image::ShortBandedRaster)>(), //
		jMethod<::java::awt::image::Raster(::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint *)>("createChild"), //
		jMethod<::java::awt::image::WritableRaster()>("createCompatibleWritableRaster"), //
		jMethod<::java::awt::image::WritableRaster(::jint, ::jint)>("createCompatibleWritableRaster"), //
		jMethod<::java::awt::image::WritableRaster(::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint *)>("createWritableChild"), //
		jMethod<::java::lang::Object(::jint, ::jint, ::jint, ::jint, ::java::lang::Object)>("getDataElements"), //
		jMethod<::java::lang::Object(::jint, ::jint, ::java::lang::Object)>("getDataElements"), //
		jMethod<::jint(::jint)>("getDataOffset"), //
		jMethod<::jint *()>("getDataOffsets"), //
		jMethod<::jshort **()>("getDataStorage"), //
		jMethod<::jshort *(::jint)>("getDataStorage"), //
		jMethod<::jint()>("getPixelStride"), //
		jMethod<::jint()>("getScanlineStride"), //
		jMethod<::jshort *(::jint, ::jint, ::jint, ::jint, ::jint, ::jshort *)>("getShortData"), //
		jMethod<::jshort *(::jint, ::jint, ::jint, ::jint, ::jshort *)>("getShortData"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jshort *)>("putShortData"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jshort *)>("putShortData"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::java::lang::Object)>("setDataElements"), //
		jMethod<::jvoid(::jint, ::jint, ::java::awt::image::Raster)>("setDataElements"), //
		jMethod<::jvoid(::jint, ::jint, ::java::lang::Object)>("setDataElements"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::awt::image::Raster, typename... Args>
	auto createChild(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createChild")] != -1);
		return call<R>("createChild", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::WritableRaster, typename... Args>
	auto createCompatibleWritableRaster(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createCompatibleWritableRaster")] != -1);
		return call<R>("createCompatibleWritableRaster", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::WritableRaster, typename... Args>
	auto createWritableChild(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createWritableChild")] != -1);
		return call<R>("createWritableChild", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getDataElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDataElements")] != -1);
		return call<R>("getDataElements", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDataOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDataOffset")] != -1);
		return call<R>("getDataOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getDataOffsets(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDataOffsets")] != -1);
		return call<R>("getDataOffsets", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort **, typename... Args>
	auto getDataStorage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDataStorage")] != -1);
		return call<R>("getDataStorage", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPixelStride(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPixelStride")] != -1);
		return call<R>("getPixelStride", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getScanlineStride(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScanlineStride")] != -1);
		return call<R>("getScanlineStride", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort *, typename... Args>
	auto getShortData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getShortData")] != -1);
		return call<R>("getShortData", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putShortData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putShortData")] != -1);
		return call<R>("putShortData", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDataElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDataElements")] != -1);
		return call<R>("setDataElements", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
