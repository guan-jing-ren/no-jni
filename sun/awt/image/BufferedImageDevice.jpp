#ifndef sun_awt_image_BufferedImageDevice_HPP
#define sun_awt_image_BufferedImageDevice_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::image::BufferedImageDevice : public jObject<::sun::awt::image::BufferedImageDevice, ::java::awt::GraphicsDevice> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_image / "BufferedImageDevice";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::sun::awt::image::BufferedImageGraphicsConfig)>(), //
		jMethod<::java::awt::GraphicsConfiguration *()>("getConfigurations"), //
		jMethod<::java::awt::GraphicsConfiguration()>("getDefaultConfiguration"), //
		jMethod<::java::lang::String()>("getIDstring"), //
		jMethod<::jint()>("getType"), //
	};

	template<typename R = ::java::awt::GraphicsConfiguration *, typename... Args>
	auto getConfigurations(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConfigurations")] != -1);
		return call<R>("getConfigurations", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::GraphicsConfiguration, typename... Args>
	auto getDefaultConfiguration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultConfiguration")] != -1);
		return call<R>("getDefaultConfiguration", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getIDstring(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIDstring")] != -1);
		return call<R>("getIDstring", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

};

#endif
