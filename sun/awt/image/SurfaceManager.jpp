#ifndef sun_awt_image_SurfaceManager_HPP
#define sun_awt_image_SurfaceManager_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::image::SurfaceManager : public jObject<::sun::awt::image::SurfaceManager, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_image / "SurfaceManager";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid()>("acceleratedSurfaceLost"), //
		jMethod<::jvoid()>("flush"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("getCacheData"), //
		jMethod<::java::awt::ImageCapabilities(::java::awt::GraphicsConfiguration)>("getCapabilities"), //
		jMethod<::jint(::java::awt::Image)>("getImageScale"), //
		jMethod<::sun::awt::image::SurfaceManager(::java::awt::Image)>("getManager"), //
		jMethod<::sun::java2d::SurfaceData()>("getPrimarySurfaceData"), //
		jMethod<::sun::java2d::SurfaceData()>("restoreContents"), //
		jMethod<::jvoid(::jfloat)>("setAccelerationPriority"), //
		jMethod<::jvoid(::java::lang::Object, ::java::lang::Object)>("setCacheData"), //
		jMethod<::jvoid(::sun::awt::image::SurfaceManager$ImageAccessor)>("setImageAccessor"), //
		jMethod<::jvoid(::java::awt::Image, ::sun::awt::image::SurfaceManager)>("setManager"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto acceleratedSurfaceLost(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("acceleratedSurfaceLost")] != -1);
		return call<R>("acceleratedSurfaceLost", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto flush(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("flush")] != -1);
		return call<R>("flush", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getCacheData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCacheData")] != -1);
		return call<R>("getCacheData", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::ImageCapabilities, typename... Args>
	auto getCapabilities(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCapabilities")] != -1);
		return call<R>("getCapabilities", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getImageScale(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getImageScale")] != -1);
		return scall<R>("getImageScale", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::image::SurfaceManager, typename... Args>
	static auto getManager(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getManager")] != -1);
		return scall<R>("getManager", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::SurfaceData, typename... Args>
	auto getPrimarySurfaceData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrimarySurfaceData")] != -1);
		return call<R>("getPrimarySurfaceData", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::SurfaceData, typename... Args>
	auto restoreContents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("restoreContents")] != -1);
		return call<R>("restoreContents", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAccelerationPriority(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAccelerationPriority")] != -1);
		return call<R>("setAccelerationPriority", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCacheData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCacheData")] != -1);
		return call<R>("setCacheData", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setImageAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setImageAccessor")] != -1);
		return scall<R>("setImageAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setManager(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setManager")] != -1);
		return scall<R>("setManager", std::forward<Args>(args)...);
	}

};

#endif
