#ifndef sun_awt_image_ImageWatched$Link_HPP
#define sun_awt_image_ImageWatched$Link_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::image::ImageWatched$Link : public jObject<::sun::awt::image::ImageWatched$Link, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_image / "ImageWatched$Link";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jboolean(::java::awt::image::ImageObserver)>("isWatcher"), //
		jMethod<::jboolean(::java::awt::Image, ::jint, ::jint, ::jint, ::jint, ::jint)>("newInfo"), //
		jMethod<::sun::awt::image::ImageWatched$Link(::java::awt::image::ImageObserver)>("removeWatcher"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto isWatcher(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isWatcher")] != -1);
		return call<R>("isWatcher", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto newInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newInfo")] != -1);
		return call<R>("newInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::image::ImageWatched$Link, typename... Args>
	auto removeWatcher(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeWatcher")] != -1);
		return call<R>("removeWatcher", std::forward<Args>(args)...);
	}

};

#endif
