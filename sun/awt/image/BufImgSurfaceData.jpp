#ifndef sun_awt_image_BufImgSurfaceData_HPP
#define sun_awt_image_BufImgSurfaceData_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::image::BufImgSurfaceData : public jObject<::sun::awt::image::BufImgSurfaceData, ::sun::java2d::SurfaceData> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_image / "BufImgSurfaceData";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::image::DataBuffer, ::java::awt::image::BufferedImage, ::sun::java2d::loops::SurfaceType)>(), //
		jMethod<::sun::java2d::SurfaceData(::java::awt::image::BufferedImage)>("createData"), //
		jMethod<::sun::java2d::SurfaceData(::java::awt::image::Raster, ::java::awt::image::ColorModel)>("createData"), //
		jMethod<::sun::java2d::SurfaceData(::java::awt::image::BufferedImage, ::sun::java2d::loops::SurfaceType, ::jint)>("createDataBC"), //
		jMethod<::sun::java2d::SurfaceData(::java::awt::image::BufferedImage, ::sun::java2d::loops::SurfaceType)>("createDataBP"), //
		jMethod<::sun::java2d::SurfaceData(::java::awt::image::BufferedImage, ::sun::java2d::loops::SurfaceType)>("createDataIC"), //
		jMethod<::sun::java2d::SurfaceData(::java::awt::image::BufferedImage, ::sun::java2d::loops::SurfaceType, ::java::awt::image::IndexColorModel)>("createDataSC"), //
		jMethod<::java::awt::Rectangle()>("getBounds"), //
		jMethod<::java::lang::Object()>("getDestination"), //
		jMethod<::java::awt::GraphicsConfiguration()>("getDeviceConfiguration"), //
		jMethod<::java::awt::image::Raster(::jint, ::jint, ::jint, ::jint)>("getRaster"), //
		jMethod<::sun::java2d::loops::RenderLoops(::sun::java2d::SunGraphics2D)>("getRenderLoops"), //
		jMethod<::sun::java2d::SurfaceData()>("getReplacement"), //
		jMethod<::sun::java2d::loops::RenderLoops(::sun::java2d::loops::SurfaceType)>("getSolidLoops"), //
		jMethod<::jvoid()>("initSolidLoops"), //
	};

	template<typename R = ::sun::java2d::SurfaceData, typename... Args>
	static auto createData(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createData")] != -1);
		return scall<R>("createData", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::SurfaceData, typename... Args>
	static auto createDataBC(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createDataBC")] != -1);
		return scall<R>("createDataBC", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::SurfaceData, typename... Args>
	static auto createDataBP(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createDataBP")] != -1);
		return scall<R>("createDataBP", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::SurfaceData, typename... Args>
	static auto createDataIC(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createDataIC")] != -1);
		return scall<R>("createDataIC", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::SurfaceData, typename... Args>
	static auto createDataSC(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createDataSC")] != -1);
		return scall<R>("createDataSC", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds")] != -1);
		return call<R>("getBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getDestination(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDestination")] != -1);
		return call<R>("getDestination", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::GraphicsConfiguration, typename... Args>
	auto getDeviceConfiguration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDeviceConfiguration")] != -1);
		return call<R>("getDeviceConfiguration", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::Raster, typename... Args>
	auto getRaster(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRaster")] != -1);
		return call<R>("getRaster", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::loops::RenderLoops, typename... Args>
	auto getRenderLoops(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRenderLoops")] != -1);
		return call<R>("getRenderLoops", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::SurfaceData, typename... Args>
	auto getReplacement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReplacement")] != -1);
		return call<R>("getReplacement", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::loops::RenderLoops, typename... Args>
	static auto getSolidLoops(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSolidLoops")] != -1);
		return scall<R>("getSolidLoops", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto initSolidLoops(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initSolidLoops")] != -1);
		return call<R>("initSolidLoops", std::forward<Args>(args)...);
	}

};

#endif
