#ifndef sun_awt_image_ImageCache_HPP
#define sun_awt_image_ImageCache_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::image::ImageCache : public jObject<::sun::awt::image::ImageCache, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_image / "ImageCache";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("flush"), //
		jMethod<::java::awt::Image(::sun::awt::image::ImageCache$PixelsKey)>("getImage"), //
		jMethod<::sun::awt::image::ImageCache()>("getInstance"), //
		jMethod<::jvoid(::sun::awt::image::ImageCache$PixelsKey, ::java::awt::Image)>("setImage"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto flush(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("flush")] != -1);
		return call<R>("flush", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Image, typename... Args>
	auto getImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getImage")] != -1);
		return call<R>("getImage", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::image::ImageCache, typename... Args>
	static auto getInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInstance")] != -1);
		return scall<R>("getInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setImage")] != -1);
		return call<R>("setImage", std::forward<Args>(args)...);
	}

};

#endif
