#ifndef sun_awt_OSInfo$OSType_HPP
#define sun_awt_OSInfo$OSType_HPP

#include "../../jfwd_decl.hpp"

class ::sun::awt::OSInfo$OSType : public jObject<::sun::awt::OSInfo$OSType, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt / "OSInfo$OSType";

	constexpr static Enume field_signatures{
		jField<::sun::awt::OSInfo$OSType>("LINUX"), //
		jField<::sun::awt::OSInfo$OSType>("MACOSX"), //
		jField<::sun::awt::OSInfo$OSType>("SOLARIS"), //
		jField<::sun::awt::OSInfo$OSType>("UNKNOWN"), //
		jField<::sun::awt::OSInfo$OSType>("WINDOWS"), //
	};

	template<typename F = ::sun::awt::OSInfo$OSType>
	static auto LINUX() {
		static_assert(field_signatures[jField<F>("LINUX")] != -1);
		return sat<F>("LINUX");
	}

	template<typename F = ::sun::awt::OSInfo$OSType>
	static auto MACOSX() {
		static_assert(field_signatures[jField<F>("MACOSX")] != -1);
		return sat<F>("MACOSX");
	}

	template<typename F = ::sun::awt::OSInfo$OSType>
	static auto SOLARIS() {
		static_assert(field_signatures[jField<F>("SOLARIS")] != -1);
		return sat<F>("SOLARIS");
	}

	template<typename F = ::sun::awt::OSInfo$OSType>
	static auto UNKNOWN() {
		static_assert(field_signatures[jField<F>("UNKNOWN")] != -1);
		return sat<F>("UNKNOWN");
	}

	template<typename F = ::sun::awt::OSInfo$OSType>
	static auto WINDOWS() {
		static_assert(field_signatures[jField<F>("WINDOWS")] != -1);
		return sat<F>("WINDOWS");
	}

	constexpr static Enume method_signatures{
		jMethod<::sun::awt::OSInfo$OSType(::java::lang::String)>("valueOf"), //
		jMethod<::sun::awt::OSInfo$OSType *()>("values"), //
	};

	template<typename R = ::sun::awt::OSInfo$OSType, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::OSInfo$OSType *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
