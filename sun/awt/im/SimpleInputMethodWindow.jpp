#ifndef sun_awt_im_SimpleInputMethodWindow_HPP
#define sun_awt_im_SimpleInputMethodWindow_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::im::SimpleInputMethodWindow : public jObject<::sun::awt::im::SimpleInputMethodWindow, ::java::awt::Frame> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_im / "SimpleInputMethodWindow";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::sun::awt::im::InputContext)>(), //
		jMethod<::java::awt::im::InputContext()>("getInputContext"), //
		jMethod<::jvoid(::sun::awt::im::InputContext)>("setInputContext"), //
	};

	template<typename R = ::java::awt::im::InputContext, typename... Args>
	auto getInputContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInputContext")] != -1);
		return call<R>("getInputContext", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInputContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setInputContext")] != -1);
		return call<R>("setInputContext", std::forward<Args>(args)...);
	}

};

#endif
