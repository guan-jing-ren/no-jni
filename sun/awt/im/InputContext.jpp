#ifndef sun_awt_im_InputContext_HPP
#define sun_awt_im_InputContext_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::im::InputContext : public jObject<::sun::awt::im::InputContext, ::java::awt::im::InputContext> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_im / "InputContext";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::awt::event::ComponentEvent)>("componentHidden"), //
		jMethod<::jvoid(::java::awt::event::ComponentEvent)>("componentMoved"), //
		jMethod<::jvoid(::java::awt::event::ComponentEvent)>("componentResized"), //
		jMethod<::jvoid(::java::awt::event::ComponentEvent)>("componentShown"), //
		jMethod<::jvoid()>("disableNativeIM"), //
		jMethod<::jvoid(::java::awt::AWTEvent)>("dispatchEvent"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jvoid()>("endComposition"), //
		jMethod<::java::lang::Object()>("getInputMethodControlObject"), //
		jMethod<::java::lang::String()>("getInputMethodInfo"), //
		jMethod<::java::util::Locale()>("getLocale"), //
		jMethod<::jboolean()>("isCompositionEnabled"), //
		jMethod<::jvoid()>("reconvert"), //
		jMethod<::jvoid(::java::awt::Component)>("removeNotify"), //
		jMethod<::jboolean(::java::util::Locale)>("selectInputMethod"), //
		jMethod<::jvoid(::java::lang::Character$Subset *)>("setCharacterSubsets"), //
		jMethod<::jvoid(::jboolean)>("setCompositionEnabled"), //
		jMethod<::jvoid(::java::awt::event::WindowEvent)>("windowActivated"), //
		jMethod<::jvoid(::java::awt::event::WindowEvent)>("windowClosed"), //
		jMethod<::jvoid(::java::awt::event::WindowEvent)>("windowClosing"), //
		jMethod<::jvoid(::java::awt::event::WindowEvent)>("windowDeactivated"), //
		jMethod<::jvoid(::java::awt::event::WindowEvent)>("windowDeiconified"), //
		jMethod<::jvoid(::java::awt::event::WindowEvent)>("windowIconified"), //
		jMethod<::jvoid(::java::awt::event::WindowEvent)>("windowOpened"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto componentHidden(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("componentHidden")] != -1);
		return call<R>("componentHidden", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto componentMoved(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("componentMoved")] != -1);
		return call<R>("componentMoved", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto componentResized(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("componentResized")] != -1);
		return call<R>("componentResized", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto componentShown(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("componentShown")] != -1);
		return call<R>("componentShown", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto disableNativeIM(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("disableNativeIM")] != -1);
		return call<R>("disableNativeIM", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispatchEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispatchEvent")] != -1);
		return call<R>("dispatchEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endComposition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("endComposition")] != -1);
		return call<R>("endComposition", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getInputMethodControlObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInputMethodControlObject")] != -1);
		return call<R>("getInputMethodControlObject", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getInputMethodInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInputMethodInfo")] != -1);
		return call<R>("getInputMethodInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale, typename... Args>
	auto getLocale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocale")] != -1);
		return call<R>("getLocale", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCompositionEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCompositionEnabled")] != -1);
		return call<R>("isCompositionEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reconvert(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reconvert")] != -1);
		return call<R>("reconvert", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeNotify")] != -1);
		return call<R>("removeNotify", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto selectInputMethod(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("selectInputMethod")] != -1);
		return call<R>("selectInputMethod", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCharacterSubsets(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCharacterSubsets")] != -1);
		return call<R>("setCharacterSubsets", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCompositionEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCompositionEnabled")] != -1);
		return call<R>("setCompositionEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto windowActivated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("windowActivated")] != -1);
		return call<R>("windowActivated", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto windowClosed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("windowClosed")] != -1);
		return call<R>("windowClosed", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto windowClosing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("windowClosing")] != -1);
		return call<R>("windowClosing", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto windowDeactivated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("windowDeactivated")] != -1);
		return call<R>("windowDeactivated", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto windowDeiconified(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("windowDeiconified")] != -1);
		return call<R>("windowDeiconified", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto windowIconified(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("windowIconified")] != -1);
		return call<R>("windowIconified", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto windowOpened(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("windowOpened")] != -1);
		return call<R>("windowOpened", std::forward<Args>(args)...);
	}

};

#endif
