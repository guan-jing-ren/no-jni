#ifndef sun_awt_im_InputMethodAdapter_HPP
#define sun_awt_im_InputMethodAdapter_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::im::InputMethodAdapter : public jObject<::sun::awt::im::InputMethodAdapter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_im / "InputMethodAdapter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid()>("disableInputMethod"), //
		jMethod<::java::lang::String()>("getNativeInputMethodInfo"), //
		jMethod<::jvoid(::java::awt::Rectangle)>("notifyClientWindowChange"), //
		jMethod<::jvoid()>("reconvert"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto disableInputMethod(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("disableInputMethod")] != -1);
		return call<R>("disableInputMethod", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNativeInputMethodInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNativeInputMethodInfo")] != -1);
		return call<R>("getNativeInputMethodInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto notifyClientWindowChange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("notifyClientWindowChange")] != -1);
		return call<R>("notifyClientWindowChange", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reconvert(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reconvert")] != -1);
		return call<R>("reconvert", std::forward<Args>(args)...);
	}

};

#endif
