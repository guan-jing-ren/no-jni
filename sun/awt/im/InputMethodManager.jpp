#ifndef sun_awt_im_InputMethodManager_HPP
#define sun_awt_im_InputMethodManager_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::im::InputMethodManager : public jObject<::sun::awt::im::InputMethodManager, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_im / "InputMethodManager";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::sun::awt::im::InputMethodManager()>("getInstance"), //
		jMethod<::java::lang::String()>("getTriggerMenuString"), //
		jMethod<::jvoid(::java::awt::Component)>("notifyChangeRequest"), //
		jMethod<::jvoid(::java::awt::Component)>("notifyChangeRequestByHotKey"), //
	};

	template<typename R = ::sun::awt::im::InputMethodManager, typename... Args>
	static auto getInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInstance")] != -1);
		return scall<R>("getInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTriggerMenuString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTriggerMenuString")] != -1);
		return call<R>("getTriggerMenuString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto notifyChangeRequest(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("notifyChangeRequest")] != -1);
		return call<R>("notifyChangeRequest", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto notifyChangeRequestByHotKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("notifyChangeRequestByHotKey")] != -1);
		return call<R>("notifyChangeRequestByHotKey", std::forward<Args>(args)...);
	}

};

#endif
