#ifndef sun_awt_X11GraphicsEnvironment_HPP
#define sun_awt_X11GraphicsEnvironment_HPP

#include "../../jfwd_decl.hpp"

class ::sun::awt::X11GraphicsEnvironment : public jObject<::sun::awt::X11GraphicsEnvironment, ::sun::java2d::SunGraphicsEnvironment> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt / "X11GraphicsEnvironment";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::awt::Point()>("getCenterPoint"), //
		jMethod<::java::lang::String()>("getDefaultFontFaceName"), //
		jMethod<::java::awt::GraphicsDevice()>("getDefaultScreenDevice"), //
		jMethod<::java::awt::Rectangle()>("getMaximumWindowBounds"), //
		jMethod<::jboolean()>("isDisplayLocal"), //
		jMethod<::jboolean()>("isGLXAvailable"), //
		jMethod<::jboolean()>("isGLXVerbose"), //
		jMethod<::jboolean()>("isXRenderAvailable"), //
		jMethod<::jboolean()>("isXRenderVerbose"), //
		jMethod<::jvoid()>("paletteChanged"), //
		jMethod<::jboolean()>("runningXinerama"), //
	};

	template<typename R = ::java::awt::Point, typename... Args>
	auto getCenterPoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCenterPoint")] != -1);
		return call<R>("getCenterPoint", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDefaultFontFaceName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultFontFaceName")] != -1);
		return call<R>("getDefaultFontFaceName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::GraphicsDevice, typename... Args>
	auto getDefaultScreenDevice(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultScreenDevice")] != -1);
		return call<R>("getDefaultScreenDevice", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getMaximumWindowBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaximumWindowBounds")] != -1);
		return call<R>("getMaximumWindowBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDisplayLocal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDisplayLocal")] != -1);
		return call<R>("isDisplayLocal", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isGLXAvailable(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isGLXAvailable")] != -1);
		return scall<R>("isGLXAvailable", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isGLXVerbose(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isGLXVerbose")] != -1);
		return scall<R>("isGLXVerbose", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isXRenderAvailable(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isXRenderAvailable")] != -1);
		return scall<R>("isXRenderAvailable", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isXRenderVerbose(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isXRenderVerbose")] != -1);
		return scall<R>("isXRenderVerbose", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paletteChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paletteChanged")] != -1);
		return call<R>("paletteChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto runningXinerama(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("runningXinerama")] != -1);
		return call<R>("runningXinerama", std::forward<Args>(args)...);
	}

};

#endif
