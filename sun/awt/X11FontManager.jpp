#ifndef sun_awt_X11FontManager_HPP
#define sun_awt_X11FontManager_HPP

#include "../../jfwd_decl.hpp"

class ::sun::awt::X11FontManager : public jObject<::sun::awt::X11FontManager, ::sun::awt::FcFontManager> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt / "X11FontManager";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::sun::awt::FontConfiguration(::jboolean, ::jboolean)>("createFontConfiguration"), //
		jMethod<::java::lang::String(::java::lang::String)>("getFileNameFromPlatformName"), //
		jMethod<::java::lang::String(::java::lang::String)>("getFileNameFromXLFD"), //
		jMethod<::sun::awt::X11FontManager()>("getInstance"), //
		jMethod<::jvoid()>("loadFonts"), //
	};

	template<typename R = ::sun::awt::FontConfiguration, typename... Args>
	auto createFontConfiguration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createFontConfiguration")] != -1);
		return call<R>("createFontConfiguration", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFileNameFromPlatformName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFileNameFromPlatformName")] != -1);
		return call<R>("getFileNameFromPlatformName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFileNameFromXLFD(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFileNameFromXLFD")] != -1);
		return call<R>("getFileNameFromXLFD", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11FontManager, typename... Args>
	static auto getInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInstance")] != -1);
		return scall<R>("getInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto loadFonts(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("loadFonts")] != -1);
		return call<R>("loadFonts", std::forward<Args>(args)...);
	}

};

#endif
