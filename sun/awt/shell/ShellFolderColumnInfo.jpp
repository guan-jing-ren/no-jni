#ifndef sun_awt_shell_ShellFolderColumnInfo_HPP
#define sun_awt_shell_ShellFolderColumnInfo_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::shell::ShellFolderColumnInfo : public jObject<::sun::awt::shell::ShellFolderColumnInfo, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_shell / "ShellFolderColumnInfo";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::jint, ::jint, ::jboolean)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::Integer, ::java::lang::Integer, ::jboolean, ::javax::swing::SortOrder, ::java::util::Comparator)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::Integer, ::java::lang::Integer, ::jboolean, ::javax::swing::SortOrder, ::java::util::Comparator, ::jboolean)>(), //
		jMethod<::java::lang::Integer()>("getAlignment"), //
		jMethod<::java::util::Comparator()>("getComparator"), //
		jMethod<::javax::swing::SortOrder()>("getSortOrder"), //
		jMethod<::java::lang::String()>("getTitle"), //
		jMethod<::java::lang::Integer()>("getWidth"), //
		jMethod<::jboolean()>("isCompareByColumn"), //
		jMethod<::jboolean()>("isVisible"), //
		jMethod<::jvoid(::java::lang::Integer)>("setAlignment"), //
		jMethod<::jvoid(::java::util::Comparator)>("setComparator"), //
		jMethod<::jvoid(::jboolean)>("setCompareByColumn"), //
		jMethod<::jvoid(::javax::swing::SortOrder)>("setSortOrder"), //
		jMethod<::jvoid(::java::lang::String)>("setTitle"), //
		jMethod<::jvoid(::jboolean)>("setVisible"), //
		jMethod<::jvoid(::java::lang::Integer)>("setWidth"), //
	};

	template<typename R = ::java::lang::Integer, typename... Args>
	auto getAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlignment")] != -1);
		return call<R>("getAlignment", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Comparator, typename... Args>
	auto getComparator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getComparator")] != -1);
		return call<R>("getComparator", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::SortOrder, typename... Args>
	auto getSortOrder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSortOrder")] != -1);
		return call<R>("getSortOrder", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTitle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTitle")] != -1);
		return call<R>("getTitle", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Integer, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCompareByColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCompareByColumn")] != -1);
		return call<R>("isCompareByColumn", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isVisible")] != -1);
		return call<R>("isVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAlignment")] != -1);
		return call<R>("setAlignment", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setComparator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setComparator")] != -1);
		return call<R>("setComparator", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCompareByColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCompareByColumn")] != -1);
		return call<R>("setCompareByColumn", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSortOrder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSortOrder")] != -1);
		return call<R>("setSortOrder", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTitle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTitle")] != -1);
		return call<R>("setTitle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVisible")] != -1);
		return call<R>("setVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setWidth")] != -1);
		return call<R>("setWidth", std::forward<Args>(args)...);
	}

};

#endif
