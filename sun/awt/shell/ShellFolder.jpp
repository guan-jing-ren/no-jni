#ifndef sun_awt_shell_ShellFolder_HPP
#define sun_awt_shell_ShellFolder_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::shell::ShellFolder : public jObject<::sun::awt::shell::ShellFolder, ::java::io::File> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_shell / "ShellFolder";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean()>("canRead"), //
		jMethod<::jboolean()>("canWrite"), //
		jMethod<::jint(::java::io::File)>("compareTo"), //
		jMethod<::jint(::java::lang::Object)>("compareTo"), //
		jMethod<::jboolean()>("createNewFile"), //
		jMethod<::jboolean()>("delete"), //
		jMethod<::jvoid()>("deleteOnExit"), //
		jMethod<::jboolean()>("exists"), //
		jMethod<::java::lang::Object(::java::lang::String)>("get"), //
		jMethod<::java::io::File()>("getAbsoluteFile"), //
		jMethod<::java::lang::String()>("getDisplayName"), //
		jMethod<::java::lang::String()>("getExecutableType"), //
		jMethod<::java::lang::Object(::jint)>("getFolderColumnValue"), //
		jMethod<::java::lang::Object(::java::io::File, ::jint)>("getFolderColumnValue"), //
		jMethod<::sun::awt::shell::ShellFolderColumnInfo *()>("getFolderColumns"), //
		jMethod<::sun::awt::shell::ShellFolderColumnInfo *(::java::io::File)>("getFolderColumns"), //
		jMethod<::java::lang::String()>("getFolderType"), //
		jMethod<::java::awt::Image(::jboolean)>("getIcon"), //
		jMethod<::sun::awt::shell::ShellFolder()>("getLinkLocation"), //
		jMethod<::java::io::File(::java::io::File)>("getNormalizedFile"), //
		jMethod<::java::lang::String()>("getParent"), //
		jMethod<::java::io::File()>("getParentFile"), //
		jMethod<::sun::awt::shell::ShellFolder(::java::io::File)>("getShellFolder"), //
		jMethod<::java::lang::Object(::java::util::concurrent::Callable)>("invoke"), //
		jMethod<::java::lang::Object(::java::util::concurrent::Callable, ::java::lang::Class)>("invoke"), //
		jMethod<::jboolean()>("isAbsolute"), //
		jMethod<::jboolean(::java::io::File)>("isComputerNode"), //
		jMethod<::jboolean()>("isDirectory"), //
		jMethod<::jboolean()>("isFile"), //
		jMethod<::jboolean()>("isFileSystem"), //
		jMethod<::jboolean(::java::io::File)>("isFileSystemRoot"), //
		jMethod<::jboolean()>("isLink"), //
		jMethod<::jlong()>("lastModified"), //
		jMethod<::jlong()>("length"), //
		jMethod<::java::io::File *()>("listFiles"), //
		jMethod<::java::io::File *(::jboolean)>("listFiles"), //
		jMethod<::jboolean()>("mkdir"), //
		jMethod<::jboolean()>("mkdirs"), //
		jMethod<::jboolean(::java::io::File)>("renameTo"), //
		jMethod<::jboolean(::jlong)>("setLastModified"), //
		jMethod<::jboolean()>("setReadOnly"), //
		jMethod<::jvoid(::java::util::List)>("sort"), //
		jMethod<::jvoid(::java::util::List)>("sortChildren"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto canRead(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canRead")] != -1);
		return call<R>("canRead", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto canWrite(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canWrite")] != -1);
		return call<R>("canWrite", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto compareTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compareTo")] != -1);
		return call<R>("compareTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto createNewFile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createNewFile")] != -1);
		return call<R>("createNewFile", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto delete_(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("delete")] != -1);
		return call<R>("delete", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deleteOnExit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deleteOnExit")] != -1);
		return call<R>("deleteOnExit", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto exists(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("exists")] != -1);
		return call<R>("exists", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	static auto get(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return scall<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::File, typename... Args>
	auto getAbsoluteFile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAbsoluteFile")] != -1);
		return call<R>("getAbsoluteFile", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDisplayName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisplayName")] != -1);
		return call<R>("getDisplayName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getExecutableType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExecutableType")] != -1);
		return call<R>("getExecutableType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getFolderColumnValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFolderColumnValue")] != -1);
		return call<R>("getFolderColumnValue", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::shell::ShellFolderColumnInfo *, typename... Args>
	auto getFolderColumns(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFolderColumns")] != -1);
		return call<R>("getFolderColumns", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFolderType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFolderType")] != -1);
		return call<R>("getFolderType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Image, typename... Args>
	auto getIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIcon")] != -1);
		return call<R>("getIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::shell::ShellFolder, typename... Args>
	auto getLinkLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLinkLocation")] != -1);
		return call<R>("getLinkLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::File, typename... Args>
	static auto getNormalizedFile(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNormalizedFile")] != -1);
		return scall<R>("getNormalizedFile", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParent")] != -1);
		return call<R>("getParent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::File, typename... Args>
	auto getParentFile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParentFile")] != -1);
		return call<R>("getParentFile", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::shell::ShellFolder, typename... Args>
	static auto getShellFolder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getShellFolder")] != -1);
		return scall<R>("getShellFolder", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	static auto invoke(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invoke")] != -1);
		return scall<R>("invoke", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAbsolute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAbsolute")] != -1);
		return call<R>("isAbsolute", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isComputerNode(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isComputerNode")] != -1);
		return scall<R>("isComputerNode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDirectory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDirectory")] != -1);
		return call<R>("isDirectory", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFile")] != -1);
		return call<R>("isFile", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFileSystem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFileSystem")] != -1);
		return call<R>("isFileSystem", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isFileSystemRoot(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFileSystemRoot")] != -1);
		return scall<R>("isFileSystemRoot", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLink(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLink")] != -1);
		return call<R>("isLink", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto lastModified(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lastModified")] != -1);
		return call<R>("lastModified", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto length(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("length")] != -1);
		return call<R>("length", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::File *, typename... Args>
	auto listFiles(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("listFiles")] != -1);
		return call<R>("listFiles", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto mkdir(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mkdir")] != -1);
		return call<R>("mkdir", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto mkdirs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mkdirs")] != -1);
		return call<R>("mkdirs", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto renameTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("renameTo")] != -1);
		return call<R>("renameTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto setLastModified(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLastModified")] != -1);
		return call<R>("setLastModified", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto setReadOnly(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setReadOnly")] != -1);
		return call<R>("setReadOnly", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto sort(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sort")] != -1);
		return scall<R>("sort", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto sortChildren(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sortChildren")] != -1);
		return call<R>("sortChildren", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
