#ifndef sun_awt_ScrollPaneWheelScroller_HPP
#define sun_awt_ScrollPaneWheelScroller_HPP

#include "../../jfwd_decl.hpp"

class ::sun::awt::ScrollPaneWheelScroller : public jObject<::sun::awt::ScrollPaneWheelScroller, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt / "ScrollPaneWheelScroller";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::awt::Adjustable(::java::awt::ScrollPane)>("getAdjustableToScroll"), //
		jMethod<::jint(::java::awt::Adjustable, ::java::awt::event::MouseWheelEvent)>("getIncrementFromAdjustable"), //
		jMethod<::jvoid(::java::awt::ScrollPane, ::java::awt::event::MouseWheelEvent)>("handleWheelScrolling"), //
		jMethod<::jvoid(::java::awt::Adjustable, ::jint)>("scrollAdjustable"), //
	};

	template<typename R = ::java::awt::Adjustable, typename... Args>
	static auto getAdjustableToScroll(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAdjustableToScroll")] != -1);
		return scall<R>("getAdjustableToScroll", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getIncrementFromAdjustable(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIncrementFromAdjustable")] != -1);
		return scall<R>("getIncrementFromAdjustable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto handleWheelScrolling(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleWheelScrolling")] != -1);
		return scall<R>("handleWheelScrolling", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto scrollAdjustable(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("scrollAdjustable")] != -1);
		return scall<R>("scrollAdjustable", std::forward<Args>(args)...);
	}

};

#endif
