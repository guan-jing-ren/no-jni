#ifndef sun_awt_X11GraphicsDevice_HPP
#define sun_awt_X11GraphicsDevice_HPP

#include "../../jfwd_decl.hpp"

class ::sun::awt::X11GraphicsDevice : public jObject<::sun::awt::X11GraphicsDevice, ::java::awt::GraphicsDevice> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt / "X11GraphicsDevice";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint)>(), //
		jMethod<::jvoid(::sun::awt::DisplayChangedListener)>("addDisplayChangedListener"), //
		jMethod<::jvoid()>("displayChanged"), //
		jMethod<::jint(::jint, ::jint)>("getConfigColormap"), //
		jMethod<::jint(::jint, ::jint)>("getConfigDepth"), //
		jMethod<::jint(::jint, ::jint)>("getConfigVisualId"), //
		jMethod<::java::awt::GraphicsConfiguration *()>("getConfigurations"), //
		jMethod<::java::awt::GraphicsConfiguration()>("getDefaultConfiguration"), //
		jMethod<::jlong()>("getDisplay"), //
		jMethod<::java::awt::DisplayMode()>("getDisplayMode"), //
		jMethod<::java::awt::DisplayMode *()>("getDisplayModes"), //
		jMethod<::java::lang::String()>("getIDstring"), //
		jMethod<::jint(::jint)>("getNumConfigs"), //
		jMethod<::java::lang::Object(::sun::java2d::loops::SurfaceType)>("getProxyKeyFor"), //
		jMethod<::jint()>("getScreen"), //
		jMethod<::jint()>("getType"), //
		jMethod<::jboolean()>("isDBESupported"), //
		jMethod<::jboolean()>("isDisplayChangeSupported"), //
		jMethod<::jboolean()>("isFullScreenSupported"), //
		jMethod<::jvoid()>("paletteChanged"), //
		jMethod<::jvoid(::sun::awt::DisplayChangedListener)>("removeDisplayChangedListener"), //
		jMethod<::jvoid(::java::awt::DisplayMode)>("setDisplayMode"), //
		jMethod<::jvoid(::java::awt::Window)>("setFullScreenWindow"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addDisplayChangedListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addDisplayChangedListener")] != -1);
		return call<R>("addDisplayChangedListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto displayChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("displayChanged")] != -1);
		return call<R>("displayChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getConfigColormap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConfigColormap")] != -1);
		return call<R>("getConfigColormap", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getConfigDepth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConfigDepth")] != -1);
		return call<R>("getConfigDepth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getConfigVisualId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConfigVisualId")] != -1);
		return call<R>("getConfigVisualId", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::GraphicsConfiguration *, typename... Args>
	auto getConfigurations(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConfigurations")] != -1);
		return call<R>("getConfigurations", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::GraphicsConfiguration, typename... Args>
	auto getDefaultConfiguration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultConfiguration")] != -1);
		return call<R>("getDefaultConfiguration", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getDisplay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisplay")] != -1);
		return call<R>("getDisplay", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::DisplayMode, typename... Args>
	auto getDisplayMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisplayMode")] != -1);
		return call<R>("getDisplayMode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::DisplayMode *, typename... Args>
	auto getDisplayModes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisplayModes")] != -1);
		return call<R>("getDisplayModes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getIDstring(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIDstring")] != -1);
		return call<R>("getIDstring", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumConfigs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNumConfigs")] != -1);
		return call<R>("getNumConfigs", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getProxyKeyFor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProxyKeyFor")] != -1);
		return call<R>("getProxyKeyFor", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getScreen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScreen")] != -1);
		return call<R>("getScreen", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isDBESupported(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDBESupported")] != -1);
		return scall<R>("isDBESupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDisplayChangeSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDisplayChangeSupported")] != -1);
		return call<R>("isDisplayChangeSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFullScreenSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFullScreenSupported")] != -1);
		return call<R>("isFullScreenSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paletteChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paletteChanged")] != -1);
		return call<R>("paletteChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeDisplayChangedListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeDisplayChangedListener")] != -1);
		return call<R>("removeDisplayChangedListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDisplayMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDisplayMode")] != -1);
		return call<R>("setDisplayMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFullScreenWindow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFullScreenWindow")] != -1);
		return call<R>("setFullScreenWindow", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
