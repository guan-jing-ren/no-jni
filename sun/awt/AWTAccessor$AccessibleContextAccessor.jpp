#ifndef sun_awt_AWTAccessor$AccessibleContextAccessor_HPP
#define sun_awt_AWTAccessor$AccessibleContextAccessor_HPP

#include "../../jfwd_decl.hpp"

class ::sun::awt::AWTAccessor$AccessibleContextAccessor : public jObject<::sun::awt::AWTAccessor$AccessibleContextAccessor, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt / "AWTAccessor$AccessibleContextAccessor";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::sun::awt::AppContext(::javax::accessibility::AccessibleContext)>("getAppContext"), //
		jMethod<::jvoid(::javax::accessibility::AccessibleContext, ::sun::awt::AppContext)>("setAppContext"), //
	};

	template<typename R = ::sun::awt::AppContext, typename... Args>
	auto getAppContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAppContext")] != -1);
		return call<R>("getAppContext", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAppContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAppContext")] != -1);
		return call<R>("setAppContext", std::forward<Args>(args)...);
	}

};

#endif
