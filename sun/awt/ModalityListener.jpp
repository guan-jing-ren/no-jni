#ifndef sun_awt_ModalityListener_HPP
#define sun_awt_ModalityListener_HPP

#include "../../jfwd_decl.hpp"

class ::sun::awt::ModalityListener : public jObject<::sun::awt::ModalityListener, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt / "ModalityListener";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::sun::awt::ModalityEvent)>("modalityPopped"), //
		jMethod<::jvoid(::sun::awt::ModalityEvent)>("modalityPushed"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto modalityPopped(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("modalityPopped")] != -1);
		return call<R>("modalityPopped", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto modalityPushed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("modalityPushed")] != -1);
		return call<R>("modalityPushed", std::forward<Args>(args)...);
	}

};

#endif
