#ifndef sun_awt_EmbeddedFrame_HPP
#define sun_awt_EmbeddedFrame_HPP

#include "../../jfwd_decl.hpp"

class ::sun::awt::EmbeddedFrame : public jObject<::sun::awt::EmbeddedFrame, ::java::awt::Frame> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt / "EmbeddedFrame";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("addNotify"), //
		jMethod<::jboolean(::java::awt::event::KeyEvent)>("dispatchKeyEvent"), //
		jMethod<::java::applet::Applet(::java::awt::Component)>("getAppletIfAncestorOf"), //
		jMethod<::java::awt::Cursor()>("getCursor"), //
		jMethod<::java::awt::Container()>("getParent"), //
		jMethod<::jvoid()>("hide"), //
		jMethod<::jboolean()>("isCursorAllowed"), //
		jMethod<::jboolean()>("isResizable"), //
		jMethod<::jvoid(::java::awt::Dialog, ::jboolean)>("notifyModalBlocked"), //
		jMethod<::jvoid(::java::beans::PropertyChangeEvent)>("propertyChange"), //
		jMethod<::jvoid(::java::awt::AWTKeyStroke)>("registerAccelerator"), //
		jMethod<::jvoid()>("registerListeners"), //
		jMethod<::jvoid(::java::awt::MenuComponent)>("remove"), //
		jMethod<::jvoid(::jboolean)>("setCursorAllowed"), //
		jMethod<::jvoid(::java::awt::Image)>("setIconImage"), //
		jMethod<::jvoid(::java::util::List)>("setIconImages"), //
		jMethod<::jvoid(::java::awt::MenuBar)>("setMenuBar"), //
		jMethod<::jvoid(::jboolean)>("setResizable"), //
		jMethod<::jvoid(::java::lang::String)>("setTitle"), //
		jMethod<::jvoid()>("show"), //
		jMethod<::jboolean()>("supportsXEmbed"), //
		jMethod<::jvoid(::jboolean)>("synthesizeWindowActivation"), //
		jMethod<::jvoid()>("toBack"), //
		jMethod<::jvoid()>("toFront"), //
		jMethod<::jboolean(::jboolean)>("traverseIn"), //
		jMethod<::jvoid(::java::awt::AWTKeyStroke)>("unregisterAccelerator"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addNotify")] != -1);
		return call<R>("addNotify", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto dispatchKeyEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispatchKeyEvent")] != -1);
		return call<R>("dispatchKeyEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::applet::Applet, typename... Args>
	static auto getAppletIfAncestorOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAppletIfAncestorOf")] != -1);
		return scall<R>("getAppletIfAncestorOf", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Cursor, typename... Args>
	auto getCursor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCursor")] != -1);
		return call<R>("getCursor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Container, typename... Args>
	auto getParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParent")] != -1);
		return call<R>("getParent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto hide(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hide")] != -1);
		return call<R>("hide", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCursorAllowed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCursorAllowed")] != -1);
		return call<R>("isCursorAllowed", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isResizable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isResizable")] != -1);
		return call<R>("isResizable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto notifyModalBlocked(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("notifyModalBlocked")] != -1);
		return call<R>("notifyModalBlocked", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto propertyChange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("propertyChange")] != -1);
		return call<R>("propertyChange", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto registerAccelerator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("registerAccelerator")] != -1);
		return call<R>("registerAccelerator", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto registerListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("registerListeners")] != -1);
		return call<R>("registerListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCursorAllowed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCursorAllowed")] != -1);
		return call<R>("setCursorAllowed", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIconImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIconImage")] != -1);
		return call<R>("setIconImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIconImages(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIconImages")] != -1);
		return call<R>("setIconImages", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMenuBar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMenuBar")] != -1);
		return call<R>("setMenuBar", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setResizable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setResizable")] != -1);
		return call<R>("setResizable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTitle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTitle")] != -1);
		return call<R>("setTitle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto show(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("show")] != -1);
		return call<R>("show", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsXEmbed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("supportsXEmbed")] != -1);
		return call<R>("supportsXEmbed", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto synthesizeWindowActivation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("synthesizeWindowActivation")] != -1);
		return call<R>("synthesizeWindowActivation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto toBack(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toBack")] != -1);
		return call<R>("toBack", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto toFront(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toFront")] != -1);
		return call<R>("toFront", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto traverseIn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("traverseIn")] != -1);
		return call<R>("traverseIn", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unregisterAccelerator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unregisterAccelerator")] != -1);
		return call<R>("unregisterAccelerator", std::forward<Args>(args)...);
	}

};

#endif
