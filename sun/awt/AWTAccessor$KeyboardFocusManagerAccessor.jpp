#ifndef sun_awt_AWTAccessor$KeyboardFocusManagerAccessor_HPP
#define sun_awt_AWTAccessor$KeyboardFocusManagerAccessor_HPP

#include "../../jfwd_decl.hpp"

class ::sun::awt::AWTAccessor$KeyboardFocusManagerAccessor : public jObject<::sun::awt::AWTAccessor$KeyboardFocusManagerAccessor, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt / "AWTAccessor$KeyboardFocusManagerAccessor";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::awt::Container()>("getCurrentFocusCycleRoot"), //
		jMethod<::java::awt::KeyboardFocusManager(::sun::awt::AppContext)>("getCurrentKeyboardFocusManager"), //
		jMethod<::jboolean(::java::awt::Component, ::java::awt::Component, ::jboolean, ::jboolean, ::jlong)>("processSynchronousLightweightTransfer"), //
		jMethod<::jvoid(::java::awt::Component)>("removeLastFocusRequest"), //
		jMethod<::jvoid(::java::awt::Window, ::java::awt::Component)>("setMostRecentFocusOwner"), //
		jMethod<::jint(::java::awt::Component, ::java::awt::Component, ::jboolean, ::jboolean, ::jlong, ::sun::awt::CausedFocusEvent$Cause)>("shouldNativelyFocusHeavyweight"), //
	};

	template<typename R = ::java::awt::Container, typename... Args>
	auto getCurrentFocusCycleRoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCurrentFocusCycleRoot")] != -1);
		return call<R>("getCurrentFocusCycleRoot", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::KeyboardFocusManager, typename... Args>
	auto getCurrentKeyboardFocusManager(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCurrentKeyboardFocusManager")] != -1);
		return call<R>("getCurrentKeyboardFocusManager", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto processSynchronousLightweightTransfer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("processSynchronousLightweightTransfer")] != -1);
		return call<R>("processSynchronousLightweightTransfer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeLastFocusRequest(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeLastFocusRequest")] != -1);
		return call<R>("removeLastFocusRequest", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMostRecentFocusOwner(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMostRecentFocusOwner")] != -1);
		return call<R>("setMostRecentFocusOwner", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto shouldNativelyFocusHeavyweight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shouldNativelyFocusHeavyweight")] != -1);
		return call<R>("shouldNativelyFocusHeavyweight", std::forward<Args>(args)...);
	}

};

#endif
