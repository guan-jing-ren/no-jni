#ifndef sun_awt_X11ComponentPeer_HPP
#define sun_awt_X11ComponentPeer_HPP

#include "../../jfwd_decl.hpp"

class ::sun::awt::X11ComponentPeer : public jObject<::sun::awt::X11ComponentPeer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt / "X11ComponentPeer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::awt::Rectangle()>("getBounds"), //
		jMethod<::java::awt::image::ColorModel()>("getColorModel"), //
		jMethod<::jlong()>("getContentWindow"), //
		jMethod<::java::awt::Graphics()>("getGraphics"), //
		jMethod<::java::awt::GraphicsConfiguration()>("getGraphicsConfiguration"), //
		jMethod<::sun::java2d::SurfaceData()>("getSurfaceData"), //
		jMethod<::java::lang::Object()>("getTarget"), //
		jMethod<::jlong()>("getWindow"), //
		jMethod<::jvoid(::jboolean)>("setFullScreenExclusiveModeState"), //
	};

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds")] != -1);
		return call<R>("getBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::ColorModel, typename... Args>
	auto getColorModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColorModel")] != -1);
		return call<R>("getColorModel", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getContentWindow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContentWindow")] != -1);
		return call<R>("getContentWindow", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Graphics, typename... Args>
	auto getGraphics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGraphics")] != -1);
		return call<R>("getGraphics", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::GraphicsConfiguration, typename... Args>
	auto getGraphicsConfiguration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGraphicsConfiguration")] != -1);
		return call<R>("getGraphicsConfiguration", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::SurfaceData, typename... Args>
	auto getSurfaceData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSurfaceData")] != -1);
		return call<R>("getSurfaceData", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTarget")] != -1);
		return call<R>("getTarget", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getWindow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWindow")] != -1);
		return call<R>("getWindow", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFullScreenExclusiveModeState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFullScreenExclusiveModeState")] != -1);
		return call<R>("setFullScreenExclusiveModeState", std::forward<Args>(args)...);
	}

};

#endif
