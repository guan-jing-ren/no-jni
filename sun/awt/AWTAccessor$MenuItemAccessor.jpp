#ifndef sun_awt_AWTAccessor$MenuItemAccessor_HPP
#define sun_awt_AWTAccessor$MenuItemAccessor_HPP

#include "../../jfwd_decl.hpp"

class ::sun::awt::AWTAccessor$MenuItemAccessor : public jObject<::sun::awt::AWTAccessor$MenuItemAccessor, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt / "AWTAccessor$MenuItemAccessor";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String(::java::awt::MenuItem)>("getActionCommandImpl"), //
		jMethod<::java::lang::String(::java::awt::MenuItem)>("getLabel"), //
		jMethod<::java::awt::MenuShortcut(::java::awt::MenuItem)>("getShortcut"), //
		jMethod<::jboolean(::java::awt::MenuItem)>("isEnabled"), //
		jMethod<::jboolean(::java::awt::MenuItem)>("isItemEnabled"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getActionCommandImpl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getActionCommandImpl")] != -1);
		return call<R>("getActionCommandImpl", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLabel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLabel")] != -1);
		return call<R>("getLabel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::MenuShortcut, typename... Args>
	auto getShortcut(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getShortcut")] != -1);
		return call<R>("getShortcut", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEnabled")] != -1);
		return call<R>("isEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isItemEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isItemEnabled")] != -1);
		return call<R>("isItemEnabled", std::forward<Args>(args)...);
	}

};

#endif
