#ifndef sun_awt_AWTAccessor$AWTEventAccessor_HPP
#define sun_awt_AWTAccessor$AWTEventAccessor_HPP

#include "../../jfwd_decl.hpp"

class ::sun::awt::AWTAccessor$AWTEventAccessor : public jObject<::sun::awt::AWTAccessor$AWTEventAccessor, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt / "AWTAccessor$AWTEventAccessor";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::security::AccessControlContext(::java::awt::AWTEvent)>("getAccessControlContext"), //
		jMethod<::jbyte *(::java::awt::AWTEvent)>("getBData"), //
		jMethod<::jboolean(::java::awt::AWTEvent)>("isSystemGenerated"), //
		jMethod<::jvoid(::java::awt::AWTEvent, ::jbyte *)>("setBData"), //
		jMethod<::jvoid(::java::awt::AWTEvent)>("setPosted"), //
		jMethod<::jvoid(::java::awt::AWTEvent)>("setSystemGenerated"), //
	};

	template<typename R = ::java::security::AccessControlContext, typename... Args>
	auto getAccessControlContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessControlContext")] != -1);
		return call<R>("getAccessControlContext", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getBData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBData")] != -1);
		return call<R>("getBData", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSystemGenerated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSystemGenerated")] != -1);
		return call<R>("isSystemGenerated", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBData")] != -1);
		return call<R>("setBData", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPosted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPosted")] != -1);
		return call<R>("setPosted", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSystemGenerated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSystemGenerated")] != -1);
		return call<R>("setSystemGenerated", std::forward<Args>(args)...);
	}

};

#endif
