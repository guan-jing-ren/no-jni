#ifndef sun_awt_AWTAccessor_HPP
#define sun_awt_AWTAccessor_HPP

#include "../../jfwd_decl.hpp"

class ::sun::awt::AWTAccessor : public jObject<::sun::awt::AWTAccessor, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt / "AWTAccessor";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::sun::awt::AWTAccessor$AWTEventAccessor()>("getAWTEventAccessor"), //
		jMethod<::sun::awt::AWTAccessor$AccessibleContextAccessor()>("getAccessibleContextAccessor"), //
		jMethod<::sun::awt::AWTAccessor$CheckboxMenuItemAccessor()>("getCheckboxMenuItemAccessor"), //
		jMethod<::sun::awt::AWTAccessor$ClientPropertyKeyAccessor()>("getClientPropertyKeyAccessor"), //
		jMethod<::sun::awt::AWTAccessor$ComponentAccessor()>("getComponentAccessor"), //
		jMethod<::sun::awt::AWTAccessor$ContainerAccessor()>("getContainerAccessor"), //
		jMethod<::sun::awt::AWTAccessor$CursorAccessor()>("getCursorAccessor"), //
		jMethod<::sun::awt::AWTAccessor$DefaultKeyboardFocusManagerAccessor()>("getDefaultKeyboardFocusManagerAccessor"), //
		jMethod<::sun::awt::AWTAccessor$EventQueueAccessor()>("getEventQueueAccessor"), //
		jMethod<::sun::awt::AWTAccessor$FileDialogAccessor()>("getFileDialogAccessor"), //
		jMethod<::sun::awt::AWTAccessor$FrameAccessor()>("getFrameAccessor"), //
		jMethod<::sun::awt::AWTAccessor$InputEventAccessor()>("getInputEventAccessor"), //
		jMethod<::sun::awt::AWTAccessor$InvocationEventAccessor()>("getInvocationEventAccessor"), //
		jMethod<::sun::awt::AWTAccessor$KeyEventAccessor()>("getKeyEventAccessor"), //
		jMethod<::sun::awt::AWTAccessor$KeyboardFocusManagerAccessor()>("getKeyboardFocusManagerAccessor"), //
		jMethod<::sun::awt::AWTAccessor$MenuAccessor()>("getMenuAccessor"), //
		jMethod<::sun::awt::AWTAccessor$MenuBarAccessor()>("getMenuBarAccessor"), //
		jMethod<::sun::awt::AWTAccessor$MenuComponentAccessor()>("getMenuComponentAccessor"), //
		jMethod<::sun::awt::AWTAccessor$MenuItemAccessor()>("getMenuItemAccessor"), //
		jMethod<::sun::awt::AWTAccessor$PopupMenuAccessor()>("getPopupMenuAccessor"), //
		jMethod<::sun::awt::AWTAccessor$ScrollPaneAdjustableAccessor()>("getScrollPaneAdjustableAccessor"), //
		jMethod<::sun::awt::AWTAccessor$SequencedEventAccessor()>("getSequencedEventAccessor"), //
		jMethod<::sun::awt::AWTAccessor$SystemColorAccessor()>("getSystemColorAccessor"), //
		jMethod<::sun::awt::AWTAccessor$SystemTrayAccessor()>("getSystemTrayAccessor"), //
		jMethod<::sun::awt::AWTAccessor$ToolkitAccessor()>("getToolkitAccessor"), //
		jMethod<::sun::awt::AWTAccessor$TrayIconAccessor()>("getTrayIconAccessor"), //
		jMethod<::sun::awt::AWTAccessor$WindowAccessor()>("getWindowAccessor"), //
		jMethod<::jvoid(::sun::awt::AWTAccessor$AWTEventAccessor)>("setAWTEventAccessor"), //
		jMethod<::jvoid(::sun::awt::AWTAccessor$AccessibleContextAccessor)>("setAccessibleContextAccessor"), //
		jMethod<::jvoid(::sun::awt::AWTAccessor$CheckboxMenuItemAccessor)>("setCheckboxMenuItemAccessor"), //
		jMethod<::jvoid(::sun::awt::AWTAccessor$ClientPropertyKeyAccessor)>("setClientPropertyKeyAccessor"), //
		jMethod<::jvoid(::sun::awt::AWTAccessor$ComponentAccessor)>("setComponentAccessor"), //
		jMethod<::jvoid(::sun::awt::AWTAccessor$ContainerAccessor)>("setContainerAccessor"), //
		jMethod<::jvoid(::sun::awt::AWTAccessor$CursorAccessor)>("setCursorAccessor"), //
		jMethod<::jvoid(::sun::awt::AWTAccessor$DefaultKeyboardFocusManagerAccessor)>("setDefaultKeyboardFocusManagerAccessor"), //
		jMethod<::jvoid(::sun::awt::AWTAccessor$EventQueueAccessor)>("setEventQueueAccessor"), //
		jMethod<::jvoid(::sun::awt::AWTAccessor$FileDialogAccessor)>("setFileDialogAccessor"), //
		jMethod<::jvoid(::sun::awt::AWTAccessor$FrameAccessor)>("setFrameAccessor"), //
		jMethod<::jvoid(::sun::awt::AWTAccessor$InputEventAccessor)>("setInputEventAccessor"), //
		jMethod<::jvoid(::sun::awt::AWTAccessor$InvocationEventAccessor)>("setInvocationEventAccessor"), //
		jMethod<::jvoid(::sun::awt::AWTAccessor$KeyEventAccessor)>("setKeyEventAccessor"), //
		jMethod<::jvoid(::sun::awt::AWTAccessor$KeyboardFocusManagerAccessor)>("setKeyboardFocusManagerAccessor"), //
		jMethod<::jvoid(::sun::awt::AWTAccessor$MenuAccessor)>("setMenuAccessor"), //
		jMethod<::jvoid(::sun::awt::AWTAccessor$MenuBarAccessor)>("setMenuBarAccessor"), //
		jMethod<::jvoid(::sun::awt::AWTAccessor$MenuComponentAccessor)>("setMenuComponentAccessor"), //
		jMethod<::jvoid(::sun::awt::AWTAccessor$MenuItemAccessor)>("setMenuItemAccessor"), //
		jMethod<::jvoid(::sun::awt::AWTAccessor$PopupMenuAccessor)>("setPopupMenuAccessor"), //
		jMethod<::jvoid(::sun::awt::AWTAccessor$ScrollPaneAdjustableAccessor)>("setScrollPaneAdjustableAccessor"), //
		jMethod<::jvoid(::sun::awt::AWTAccessor$SequencedEventAccessor)>("setSequencedEventAccessor"), //
		jMethod<::jvoid(::sun::awt::AWTAccessor$SystemColorAccessor)>("setSystemColorAccessor"), //
		jMethod<::jvoid(::sun::awt::AWTAccessor$SystemTrayAccessor)>("setSystemTrayAccessor"), //
		jMethod<::jvoid(::sun::awt::AWTAccessor$ToolkitAccessor)>("setToolkitAccessor"), //
		jMethod<::jvoid(::sun::awt::AWTAccessor$TrayIconAccessor)>("setTrayIconAccessor"), //
		jMethod<::jvoid(::sun::awt::AWTAccessor$WindowAccessor)>("setWindowAccessor"), //
	};

	template<typename R = ::sun::awt::AWTAccessor$AWTEventAccessor, typename... Args>
	static auto getAWTEventAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAWTEventAccessor")] != -1);
		return scall<R>("getAWTEventAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::AWTAccessor$AccessibleContextAccessor, typename... Args>
	static auto getAccessibleContextAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleContextAccessor")] != -1);
		return scall<R>("getAccessibleContextAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::AWTAccessor$CheckboxMenuItemAccessor, typename... Args>
	static auto getCheckboxMenuItemAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCheckboxMenuItemAccessor")] != -1);
		return scall<R>("getCheckboxMenuItemAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::AWTAccessor$ClientPropertyKeyAccessor, typename... Args>
	static auto getClientPropertyKeyAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClientPropertyKeyAccessor")] != -1);
		return scall<R>("getClientPropertyKeyAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::AWTAccessor$ComponentAccessor, typename... Args>
	static auto getComponentAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getComponentAccessor")] != -1);
		return scall<R>("getComponentAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::AWTAccessor$ContainerAccessor, typename... Args>
	static auto getContainerAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContainerAccessor")] != -1);
		return scall<R>("getContainerAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::AWTAccessor$CursorAccessor, typename... Args>
	static auto getCursorAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCursorAccessor")] != -1);
		return scall<R>("getCursorAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::AWTAccessor$DefaultKeyboardFocusManagerAccessor, typename... Args>
	static auto getDefaultKeyboardFocusManagerAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultKeyboardFocusManagerAccessor")] != -1);
		return scall<R>("getDefaultKeyboardFocusManagerAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::AWTAccessor$EventQueueAccessor, typename... Args>
	static auto getEventQueueAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEventQueueAccessor")] != -1);
		return scall<R>("getEventQueueAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::AWTAccessor$FileDialogAccessor, typename... Args>
	static auto getFileDialogAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFileDialogAccessor")] != -1);
		return scall<R>("getFileDialogAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::AWTAccessor$FrameAccessor, typename... Args>
	static auto getFrameAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFrameAccessor")] != -1);
		return scall<R>("getFrameAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::AWTAccessor$InputEventAccessor, typename... Args>
	static auto getInputEventAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInputEventAccessor")] != -1);
		return scall<R>("getInputEventAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::AWTAccessor$InvocationEventAccessor, typename... Args>
	static auto getInvocationEventAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInvocationEventAccessor")] != -1);
		return scall<R>("getInvocationEventAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::AWTAccessor$KeyEventAccessor, typename... Args>
	static auto getKeyEventAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeyEventAccessor")] != -1);
		return scall<R>("getKeyEventAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::AWTAccessor$KeyboardFocusManagerAccessor, typename... Args>
	static auto getKeyboardFocusManagerAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeyboardFocusManagerAccessor")] != -1);
		return scall<R>("getKeyboardFocusManagerAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::AWTAccessor$MenuAccessor, typename... Args>
	static auto getMenuAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMenuAccessor")] != -1);
		return scall<R>("getMenuAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::AWTAccessor$MenuBarAccessor, typename... Args>
	static auto getMenuBarAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMenuBarAccessor")] != -1);
		return scall<R>("getMenuBarAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::AWTAccessor$MenuComponentAccessor, typename... Args>
	static auto getMenuComponentAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMenuComponentAccessor")] != -1);
		return scall<R>("getMenuComponentAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::AWTAccessor$MenuItemAccessor, typename... Args>
	static auto getMenuItemAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMenuItemAccessor")] != -1);
		return scall<R>("getMenuItemAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::AWTAccessor$PopupMenuAccessor, typename... Args>
	static auto getPopupMenuAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPopupMenuAccessor")] != -1);
		return scall<R>("getPopupMenuAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::AWTAccessor$ScrollPaneAdjustableAccessor, typename... Args>
	static auto getScrollPaneAdjustableAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScrollPaneAdjustableAccessor")] != -1);
		return scall<R>("getScrollPaneAdjustableAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::AWTAccessor$SequencedEventAccessor, typename... Args>
	static auto getSequencedEventAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSequencedEventAccessor")] != -1);
		return scall<R>("getSequencedEventAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::AWTAccessor$SystemColorAccessor, typename... Args>
	static auto getSystemColorAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSystemColorAccessor")] != -1);
		return scall<R>("getSystemColorAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::AWTAccessor$SystemTrayAccessor, typename... Args>
	static auto getSystemTrayAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSystemTrayAccessor")] != -1);
		return scall<R>("getSystemTrayAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::AWTAccessor$ToolkitAccessor, typename... Args>
	static auto getToolkitAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getToolkitAccessor")] != -1);
		return scall<R>("getToolkitAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::AWTAccessor$TrayIconAccessor, typename... Args>
	static auto getTrayIconAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTrayIconAccessor")] != -1);
		return scall<R>("getTrayIconAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::AWTAccessor$WindowAccessor, typename... Args>
	static auto getWindowAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWindowAccessor")] != -1);
		return scall<R>("getWindowAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setAWTEventAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAWTEventAccessor")] != -1);
		return scall<R>("setAWTEventAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setAccessibleContextAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAccessibleContextAccessor")] != -1);
		return scall<R>("setAccessibleContextAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setCheckboxMenuItemAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCheckboxMenuItemAccessor")] != -1);
		return scall<R>("setCheckboxMenuItemAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setClientPropertyKeyAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setClientPropertyKeyAccessor")] != -1);
		return scall<R>("setClientPropertyKeyAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setComponentAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setComponentAccessor")] != -1);
		return scall<R>("setComponentAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setContainerAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setContainerAccessor")] != -1);
		return scall<R>("setContainerAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setCursorAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCursorAccessor")] != -1);
		return scall<R>("setCursorAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setDefaultKeyboardFocusManagerAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDefaultKeyboardFocusManagerAccessor")] != -1);
		return scall<R>("setDefaultKeyboardFocusManagerAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setEventQueueAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEventQueueAccessor")] != -1);
		return scall<R>("setEventQueueAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setFileDialogAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFileDialogAccessor")] != -1);
		return scall<R>("setFileDialogAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setFrameAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFrameAccessor")] != -1);
		return scall<R>("setFrameAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setInputEventAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setInputEventAccessor")] != -1);
		return scall<R>("setInputEventAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setInvocationEventAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setInvocationEventAccessor")] != -1);
		return scall<R>("setInvocationEventAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setKeyEventAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setKeyEventAccessor")] != -1);
		return scall<R>("setKeyEventAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setKeyboardFocusManagerAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setKeyboardFocusManagerAccessor")] != -1);
		return scall<R>("setKeyboardFocusManagerAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setMenuAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMenuAccessor")] != -1);
		return scall<R>("setMenuAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setMenuBarAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMenuBarAccessor")] != -1);
		return scall<R>("setMenuBarAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setMenuComponentAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMenuComponentAccessor")] != -1);
		return scall<R>("setMenuComponentAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setMenuItemAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMenuItemAccessor")] != -1);
		return scall<R>("setMenuItemAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setPopupMenuAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPopupMenuAccessor")] != -1);
		return scall<R>("setPopupMenuAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setScrollPaneAdjustableAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setScrollPaneAdjustableAccessor")] != -1);
		return scall<R>("setScrollPaneAdjustableAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setSequencedEventAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSequencedEventAccessor")] != -1);
		return scall<R>("setSequencedEventAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setSystemColorAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSystemColorAccessor")] != -1);
		return scall<R>("setSystemColorAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setSystemTrayAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSystemTrayAccessor")] != -1);
		return scall<R>("setSystemTrayAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setToolkitAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setToolkitAccessor")] != -1);
		return scall<R>("setToolkitAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setTrayIconAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTrayIconAccessor")] != -1);
		return scall<R>("setTrayIconAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setWindowAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setWindowAccessor")] != -1);
		return scall<R>("setWindowAccessor", std::forward<Args>(args)...);
	}

};

#endif
