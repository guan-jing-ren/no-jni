#ifndef sun_awt_dnd_SunDropTargetContextPeer_HPP
#define sun_awt_dnd_SunDropTargetContextPeer_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::dnd::SunDropTargetContextPeer : public jObject<::sun::awt::dnd::SunDropTargetContextPeer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_dnd / "SunDropTargetContextPeer";

	constexpr static Enume field_signatures{
		jField<::jboolean>("DISPATCH_SYNC"), //
	};

	template<typename F = ::jboolean>
	static auto DISPATCH_SYNC() {
		static_assert(field_signatures[jField<F>("DISPATCH_SYNC")] != -1);
		return sat<F>("DISPATCH_SYNC");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::jint)>("acceptDrag"), //
		jMethod<::jvoid(::jint)>("acceptDrop"), //
		jMethod<::jvoid(::jboolean)>("dropComplete"), //
		jMethod<::java::awt::dnd::DropTarget()>("getDropTarget"), //
		jMethod<::jint()>("getTargetActions"), //
		jMethod<::java::lang::Object(::java::awt::datatransfer::DataFlavor)>("getTransferData"), //
		jMethod<::java::awt::datatransfer::DataFlavor *()>("getTransferDataFlavors"), //
		jMethod<::java::awt::datatransfer::Transferable()>("getTransferable"), //
		jMethod<::jboolean(::java::awt::datatransfer::DataFlavor)>("isDataFlavorSupported"), //
		jMethod<::jboolean()>("isTransferableJVMLocal"), //
		jMethod<::jvoid()>("rejectDrag"), //
		jMethod<::jvoid()>("rejectDrop"), //
		jMethod<::jvoid(::java::awt::datatransfer::Transferable)>("setCurrentJVMLocalSourceTransferable"), //
		jMethod<::jvoid(::jint)>("setTargetActions"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto acceptDrag(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("acceptDrag")] != -1);
		return call<R>("acceptDrag", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto acceptDrop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("acceptDrop")] != -1);
		return call<R>("acceptDrop", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dropComplete(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dropComplete")] != -1);
		return call<R>("dropComplete", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::dnd::DropTarget, typename... Args>
	auto getDropTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDropTarget")] != -1);
		return call<R>("getDropTarget", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTargetActions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTargetActions")] != -1);
		return call<R>("getTargetActions", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getTransferData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransferData")] != -1);
		return call<R>("getTransferData", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::datatransfer::DataFlavor *, typename... Args>
	auto getTransferDataFlavors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransferDataFlavors")] != -1);
		return call<R>("getTransferDataFlavors", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::datatransfer::Transferable, typename... Args>
	auto getTransferable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransferable")] != -1);
		return call<R>("getTransferable", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDataFlavorSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDataFlavorSupported")] != -1);
		return call<R>("isDataFlavorSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isTransferableJVMLocal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isTransferableJVMLocal")] != -1);
		return call<R>("isTransferableJVMLocal", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto rejectDrag(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rejectDrag")] != -1);
		return call<R>("rejectDrag", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto rejectDrop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rejectDrop")] != -1);
		return call<R>("rejectDrop", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setCurrentJVMLocalSourceTransferable(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCurrentJVMLocalSourceTransferable")] != -1);
		return scall<R>("setCurrentJVMLocalSourceTransferable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTargetActions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTargetActions")] != -1);
		return call<R>("setTargetActions", std::forward<Args>(args)...);
	}

};

#endif
