#ifndef sun_awt_dnd_SunDragSourceContextPeer_HPP
#define sun_awt_dnd_SunDragSourceContextPeer_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::dnd::SunDragSourceContextPeer : public jObject<::sun::awt::dnd::SunDragSourceContextPeer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_dnd / "SunDragSourceContextPeer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::dnd::DragGestureEvent)>(), //
		jMethod<::jvoid()>("checkDragDropInProgress"), //
		jMethod<::jboolean(::java::awt::AWTEvent)>("checkEvent"), //
		jMethod<::jint(::jint, ::jint)>("convertModifiersToDropAction"), //
		jMethod<::java::awt::Cursor()>("getCursor"), //
		jMethod<::java::awt::Image()>("getDragImage"), //
		jMethod<::java::awt::Point()>("getDragImageOffset"), //
		jMethod<::jvoid()>("quitSecondaryEventLoop"), //
		jMethod<::jvoid(::java::awt::Cursor)>("setCursor"), //
		jMethod<::jvoid(::jboolean)>("setDragDropInProgress"), //
		jMethod<::jvoid(::java::awt::dnd::DragSourceContext, ::java::awt::Cursor, ::java::awt::Image, ::java::awt::Point)>("startDrag"), //
		jMethod<::jvoid()>("startSecondaryEventLoop"), //
		jMethod<::jvoid()>("transferablesFlavorsChanged"), //
	};

	template<typename R = ::jvoid, typename... Args>
	static auto checkDragDropInProgress(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkDragDropInProgress")] != -1);
		return scall<R>("checkDragDropInProgress", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto checkEvent(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkEvent")] != -1);
		return scall<R>("checkEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto convertModifiersToDropAction(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("convertModifiersToDropAction")] != -1);
		return scall<R>("convertModifiersToDropAction", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Cursor, typename... Args>
	auto getCursor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCursor")] != -1);
		return call<R>("getCursor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Image, typename... Args>
	auto getDragImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDragImage")] != -1);
		return call<R>("getDragImage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Point, typename... Args>
	auto getDragImageOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDragImageOffset")] != -1);
		return call<R>("getDragImageOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto quitSecondaryEventLoop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("quitSecondaryEventLoop")] != -1);
		return call<R>("quitSecondaryEventLoop", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCursor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCursor")] != -1);
		return call<R>("setCursor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setDragDropInProgress(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDragDropInProgress")] != -1);
		return scall<R>("setDragDropInProgress", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto startDrag(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("startDrag")] != -1);
		return call<R>("startDrag", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto startSecondaryEventLoop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("startSecondaryEventLoop")] != -1);
		return call<R>("startSecondaryEventLoop", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto transferablesFlavorsChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("transferablesFlavorsChanged")] != -1);
		return call<R>("transferablesFlavorsChanged", std::forward<Args>(args)...);
	}

};

#endif
