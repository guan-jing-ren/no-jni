#ifndef sun_awt_windows_ThemeReader_HPP
#define sun_awt_windows_ThemeReader_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::awt::windows::ThemeReader : public jObject<::sun::awt::windows::ThemeReader, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt_windows / "ThemeReader";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jboolean(::java::lang::String, ::jint, ::jint, ::jint)>("getBoolean"), //
		jMethod<::java::awt::Color(::java::lang::String, ::jint, ::jint, ::jint)>("getColor"), //
		jMethod<::jint(::java::lang::String, ::jint, ::jint, ::jint)>("getEnum"), //
		jMethod<::jint(::java::lang::String, ::jint, ::jint, ::jint)>("getInt"), //
		jMethod<::java::awt::Dimension(::java::lang::String, ::jint, ::jint)>("getPartSize"), //
		jMethod<::java::awt::Point(::java::lang::String, ::jint, ::jint, ::jint)>("getPoint"), //
		jMethod<::java::awt::Dimension(::java::lang::String, ::jint, ::jint, ::jint)>("getPosition"), //
		jMethod<::jboolean(::java::lang::String, ::jint)>("getSysBoolean"), //
		jMethod<::java::awt::Insets(::java::lang::String, ::jint, ::jint, ::jint, ::jint)>("getThemeBackgroundContentMargins"), //
		jMethod<::java::awt::Insets(::java::lang::String, ::jint, ::jint, ::jint)>("getThemeMargins"), //
		jMethod<::jlong(::java::lang::String, ::jint, ::jint, ::jint, ::jint)>("getThemeTransitionDuration"), //
		jMethod<::jboolean()>("isGetThemeTransitionDurationDefined"), //
		jMethod<::jboolean(::java::lang::String, ::jint, ::jint)>("isThemePartDefined"), //
		jMethod<::jboolean()>("isThemed"), //
		jMethod<::jboolean()>("isXPStyleEnabled"), //
		jMethod<::jvoid(::jint *, ::java::lang::String, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("paintBackground"), //
	};

	template<typename R = ::jboolean, typename... Args>
	static auto getBoolean(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBoolean")] != -1);
		return scall<R>("getBoolean", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	static auto getColor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColor")] != -1);
		return scall<R>("getColor", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getEnum(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEnum")] != -1);
		return scall<R>("getEnum", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getInt(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInt")] != -1);
		return scall<R>("getInt", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	static auto getPartSize(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPartSize")] != -1);
		return scall<R>("getPartSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Point, typename... Args>
	static auto getPoint(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPoint")] != -1);
		return scall<R>("getPoint", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	static auto getPosition(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPosition")] != -1);
		return scall<R>("getPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto getSysBoolean(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSysBoolean")] != -1);
		return scall<R>("getSysBoolean", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Insets, typename... Args>
	static auto getThemeBackgroundContentMargins(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getThemeBackgroundContentMargins")] != -1);
		return scall<R>("getThemeBackgroundContentMargins", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Insets, typename... Args>
	static auto getThemeMargins(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getThemeMargins")] != -1);
		return scall<R>("getThemeMargins", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	static auto getThemeTransitionDuration(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getThemeTransitionDuration")] != -1);
		return scall<R>("getThemeTransitionDuration", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isGetThemeTransitionDurationDefined(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isGetThemeTransitionDurationDefined")] != -1);
		return scall<R>("isGetThemeTransitionDurationDefined", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isThemePartDefined(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isThemePartDefined")] != -1);
		return scall<R>("isThemePartDefined", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isThemed(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isThemed")] != -1);
		return scall<R>("isThemed", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isXPStyleEnabled(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isXPStyleEnabled")] != -1);
		return scall<R>("isXPStyleEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto paintBackground(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paintBackground")] != -1);
		return scall<R>("paintBackground", std::forward<Args>(args)...);
	}

};

#endif
