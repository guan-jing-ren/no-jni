#ifndef sun_awt_PlatformFont_HPP
#define sun_awt_PlatformFont_HPP

#include "../../jfwd_decl.hpp"

class ::sun::awt::PlatformFont : public jObject<::sun::awt::PlatformFont, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_awt / "PlatformFont";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::jint)>(), //
		jMethod<::java::lang::Object *(::jchar *, ::jint, ::jint)>("makeConvertedMultiFontChars"), //
		jMethod<::java::lang::Object *(::java::lang::String)>("makeConvertedMultiFontString"), //
		jMethod<::sun::awt::CharsetString *(::java::lang::String)>("makeMultiCharsetString"), //
		jMethod<::sun::awt::CharsetString *(::java::lang::String, ::jboolean)>("makeMultiCharsetString"), //
		jMethod<::sun::awt::CharsetString *(::jchar *, ::jint, ::jint)>("makeMultiCharsetString"), //
		jMethod<::sun::awt::CharsetString *(::jchar *, ::jint, ::jint, ::jboolean)>("makeMultiCharsetString"), //
		jMethod<::jboolean()>("mightHaveMultiFontMetrics"), //
	};

	template<typename R = ::java::lang::Object *, typename... Args>
	auto makeConvertedMultiFontChars(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeConvertedMultiFontChars")] != -1);
		return call<R>("makeConvertedMultiFontChars", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object *, typename... Args>
	auto makeConvertedMultiFontString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeConvertedMultiFontString")] != -1);
		return call<R>("makeConvertedMultiFontString", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::CharsetString *, typename... Args>
	auto makeMultiCharsetString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeMultiCharsetString")] != -1);
		return call<R>("makeMultiCharsetString", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto mightHaveMultiFontMetrics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mightHaveMultiFontMetrics")] != -1);
		return call<R>("mightHaveMultiFontMetrics", std::forward<Args>(args)...);
	}

};

#endif
