#ifndef sun_management_ManagementFactoryHelper_HPP
#define sun_management_ManagementFactoryHelper_HPP

#include "../../jfwd_decl.hpp"

class ::sun::management::ManagementFactoryHelper : public jObject<::sun::management::ManagementFactoryHelper, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_management / "ManagementFactoryHelper";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::util::List()>("getBufferPoolMXBeans"), //
		jMethod<::java::lang::management::ClassLoadingMXBean()>("getClassLoadingMXBean"), //
		jMethod<::java::lang::management::CompilationMXBean()>("getCompilationMXBean"), //
		jMethod<::com::sun::management::DiagnosticCommandMBean()>("getDiagnosticCommandMBean"), //
		jMethod<::com::sun::management::HotSpotDiagnosticMXBean()>("getDiagnosticMXBean"), //
		jMethod<::java::util::List()>("getGarbageCollectorMXBeans"), //
		jMethod<::sun::management::HotspotClassLoadingMBean()>("getHotspotClassLoadingMBean"), //
		jMethod<::sun::management::HotspotCompilationMBean()>("getHotspotCompilationMBean"), //
		jMethod<::sun::management::HotspotMemoryMBean()>("getHotspotMemoryMBean"), //
		jMethod<::sun::management::HotspotRuntimeMBean()>("getHotspotRuntimeMBean"), //
		jMethod<::sun::management::HotspotThreadMBean()>("getHotspotThreadMBean"), //
		jMethod<::java::lang::management::MemoryMXBean()>("getMemoryMXBean"), //
		jMethod<::java::util::List()>("getMemoryManagerMXBeans"), //
		jMethod<::java::util::List()>("getMemoryPoolMXBeans"), //
		jMethod<::java::lang::management::OperatingSystemMXBean()>("getOperatingSystemMXBean"), //
		jMethod<::java::util::HashMap()>("getPlatformDynamicMBeans"), //
		jMethod<::java::lang::management::PlatformLoggingMXBean()>("getPlatformLoggingMXBean"), //
		jMethod<::java::lang::management::RuntimeMXBean()>("getRuntimeMXBean"), //
		jMethod<::java::lang::management::ThreadMXBean()>("getThreadMXBean"), //
		jMethod<::jboolean(::jint)>("isThreadRunningNative"), //
		jMethod<::jboolean(::jint)>("isThreadSuspended"), //
		jMethod<::java::lang::Thread$State(::jint)>("toThreadState"), //
	};

	template<typename R = ::java::util::List, typename... Args>
	static auto getBufferPoolMXBeans(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBufferPoolMXBeans")] != -1);
		return scall<R>("getBufferPoolMXBeans", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::management::ClassLoadingMXBean, typename... Args>
	static auto getClassLoadingMXBean(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClassLoadingMXBean")] != -1);
		return scall<R>("getClassLoadingMXBean", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::management::CompilationMXBean, typename... Args>
	static auto getCompilationMXBean(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCompilationMXBean")] != -1);
		return scall<R>("getCompilationMXBean", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::management::DiagnosticCommandMBean, typename... Args>
	static auto getDiagnosticCommandMBean(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDiagnosticCommandMBean")] != -1);
		return scall<R>("getDiagnosticCommandMBean", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::management::HotSpotDiagnosticMXBean, typename... Args>
	static auto getDiagnosticMXBean(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDiagnosticMXBean")] != -1);
		return scall<R>("getDiagnosticMXBean", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	static auto getGarbageCollectorMXBeans(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGarbageCollectorMXBeans")] != -1);
		return scall<R>("getGarbageCollectorMXBeans", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::management::HotspotClassLoadingMBean, typename... Args>
	static auto getHotspotClassLoadingMBean(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHotspotClassLoadingMBean")] != -1);
		return scall<R>("getHotspotClassLoadingMBean", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::management::HotspotCompilationMBean, typename... Args>
	static auto getHotspotCompilationMBean(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHotspotCompilationMBean")] != -1);
		return scall<R>("getHotspotCompilationMBean", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::management::HotspotMemoryMBean, typename... Args>
	static auto getHotspotMemoryMBean(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHotspotMemoryMBean")] != -1);
		return scall<R>("getHotspotMemoryMBean", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::management::HotspotRuntimeMBean, typename... Args>
	static auto getHotspotRuntimeMBean(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHotspotRuntimeMBean")] != -1);
		return scall<R>("getHotspotRuntimeMBean", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::management::HotspotThreadMBean, typename... Args>
	static auto getHotspotThreadMBean(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHotspotThreadMBean")] != -1);
		return scall<R>("getHotspotThreadMBean", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::management::MemoryMXBean, typename... Args>
	static auto getMemoryMXBean(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMemoryMXBean")] != -1);
		return scall<R>("getMemoryMXBean", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	static auto getMemoryManagerMXBeans(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMemoryManagerMXBeans")] != -1);
		return scall<R>("getMemoryManagerMXBeans", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	static auto getMemoryPoolMXBeans(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMemoryPoolMXBeans")] != -1);
		return scall<R>("getMemoryPoolMXBeans", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::management::OperatingSystemMXBean, typename... Args>
	static auto getOperatingSystemMXBean(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOperatingSystemMXBean")] != -1);
		return scall<R>("getOperatingSystemMXBean", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::HashMap, typename... Args>
	static auto getPlatformDynamicMBeans(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPlatformDynamicMBeans")] != -1);
		return scall<R>("getPlatformDynamicMBeans", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::management::PlatformLoggingMXBean, typename... Args>
	static auto getPlatformLoggingMXBean(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPlatformLoggingMXBean")] != -1);
		return scall<R>("getPlatformLoggingMXBean", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::management::RuntimeMXBean, typename... Args>
	static auto getRuntimeMXBean(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRuntimeMXBean")] != -1);
		return scall<R>("getRuntimeMXBean", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::management::ThreadMXBean, typename... Args>
	static auto getThreadMXBean(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getThreadMXBean")] != -1);
		return scall<R>("getThreadMXBean", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isThreadRunningNative(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isThreadRunningNative")] != -1);
		return scall<R>("isThreadRunningNative", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isThreadSuspended(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isThreadSuspended")] != -1);
		return scall<R>("isThreadSuspended", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Thread$State, typename... Args>
	static auto toThreadState(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toThreadState")] != -1);
		return scall<R>("toThreadState", std::forward<Args>(args)...);
	}

};

#endif
