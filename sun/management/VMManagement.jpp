#ifndef sun_management_VMManagement_HPP
#define sun_management_VMManagement_HPP

#include "../../jfwd_decl.hpp"

class ::sun::management::VMManagement : public jObject<::sun::management::VMManagement, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_management / "VMManagement";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint()>("getAvailableProcessors"), //
		jMethod<::java::lang::String()>("getBootClassPath"), //
		jMethod<::jlong()>("getClassInitializationTime"), //
		jMethod<::jlong()>("getClassLoadingTime"), //
		jMethod<::java::lang::String()>("getClassPath"), //
		jMethod<::jlong()>("getClassVerificationTime"), //
		jMethod<::java::lang::String()>("getCompilerName"), //
		jMethod<::jint()>("getDaemonThreadCount"), //
		jMethod<::jlong()>("getInitializedClassCount"), //
		jMethod<::java::util::List(::java::lang::String)>("getInternalCounters"), //
		jMethod<::java::lang::String()>("getLibraryPath"), //
		jMethod<::jint()>("getLiveThreadCount"), //
		jMethod<::jint()>("getLoadedClassCount"), //
		jMethod<::jlong()>("getLoadedClassSize"), //
		jMethod<::java::lang::String()>("getManagementVersion"), //
		jMethod<::jlong()>("getMethodDataSize"), //
		jMethod<::java::lang::String()>("getOsArch"), //
		jMethod<::java::lang::String()>("getOsName"), //
		jMethod<::java::lang::String()>("getOsVersion"), //
		jMethod<::jint()>("getPeakThreadCount"), //
		jMethod<::jlong()>("getSafepointCount"), //
		jMethod<::jlong()>("getSafepointSyncTime"), //
		jMethod<::jlong()>("getStartupTime"), //
		jMethod<::jlong()>("getTotalApplicationNonStoppedTime"), //
		jMethod<::jlong()>("getTotalClassCount"), //
		jMethod<::jlong()>("getTotalCompileTime"), //
		jMethod<::jlong()>("getTotalSafepointTime"), //
		jMethod<::jlong()>("getTotalThreadCount"), //
		jMethod<::jlong()>("getUnloadedClassCount"), //
		jMethod<::jlong()>("getUnloadedClassSize"), //
		jMethod<::jlong()>("getUptime"), //
		jMethod<::jboolean()>("getVerboseClass"), //
		jMethod<::jboolean()>("getVerboseGC"), //
		jMethod<::java::util::List()>("getVmArguments"), //
		jMethod<::java::lang::String()>("getVmId"), //
		jMethod<::java::lang::String()>("getVmName"), //
		jMethod<::java::lang::String()>("getVmSpecName"), //
		jMethod<::java::lang::String()>("getVmSpecVendor"), //
		jMethod<::java::lang::String()>("getVmSpecVersion"), //
		jMethod<::java::lang::String()>("getVmVendor"), //
		jMethod<::java::lang::String()>("getVmVersion"), //
		jMethod<::jboolean()>("isBootClassPathSupported"), //
		jMethod<::jboolean()>("isCompilationTimeMonitoringSupported"), //
		jMethod<::jboolean()>("isCurrentThreadCpuTimeSupported"), //
		jMethod<::jboolean()>("isGcNotificationSupported"), //
		jMethod<::jboolean()>("isObjectMonitorUsageSupported"), //
		jMethod<::jboolean()>("isOtherThreadCpuTimeSupported"), //
		jMethod<::jboolean()>("isRemoteDiagnosticCommandsSupported"), //
		jMethod<::jboolean()>("isSynchronizerUsageSupported"), //
		jMethod<::jboolean()>("isThreadAllocatedMemoryEnabled"), //
		jMethod<::jboolean()>("isThreadAllocatedMemorySupported"), //
		jMethod<::jboolean()>("isThreadContentionMonitoringEnabled"), //
		jMethod<::jboolean()>("isThreadContentionMonitoringSupported"), //
		jMethod<::jboolean()>("isThreadCpuTimeEnabled"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getAvailableProcessors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAvailableProcessors")] != -1);
		return call<R>("getAvailableProcessors", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBootClassPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBootClassPath")] != -1);
		return call<R>("getBootClassPath", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getClassInitializationTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClassInitializationTime")] != -1);
		return call<R>("getClassInitializationTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getClassLoadingTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClassLoadingTime")] != -1);
		return call<R>("getClassLoadingTime", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getClassPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClassPath")] != -1);
		return call<R>("getClassPath", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getClassVerificationTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClassVerificationTime")] != -1);
		return call<R>("getClassVerificationTime", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCompilerName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCompilerName")] != -1);
		return call<R>("getCompilerName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDaemonThreadCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDaemonThreadCount")] != -1);
		return call<R>("getDaemonThreadCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getInitializedClassCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInitializedClassCount")] != -1);
		return call<R>("getInitializedClassCount", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getInternalCounters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInternalCounters")] != -1);
		return call<R>("getInternalCounters", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLibraryPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLibraryPath")] != -1);
		return call<R>("getLibraryPath", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLiveThreadCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLiveThreadCount")] != -1);
		return call<R>("getLiveThreadCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLoadedClassCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLoadedClassCount")] != -1);
		return call<R>("getLoadedClassCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLoadedClassSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLoadedClassSize")] != -1);
		return call<R>("getLoadedClassSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getManagementVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getManagementVersion")] != -1);
		return call<R>("getManagementVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getMethodDataSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMethodDataSize")] != -1);
		return call<R>("getMethodDataSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getOsArch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOsArch")] != -1);
		return call<R>("getOsArch", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getOsName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOsName")] != -1);
		return call<R>("getOsName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getOsVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOsVersion")] != -1);
		return call<R>("getOsVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPeakThreadCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPeakThreadCount")] != -1);
		return call<R>("getPeakThreadCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getSafepointCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSafepointCount")] != -1);
		return call<R>("getSafepointCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getSafepointSyncTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSafepointSyncTime")] != -1);
		return call<R>("getSafepointSyncTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getStartupTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStartupTime")] != -1);
		return call<R>("getStartupTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getTotalApplicationNonStoppedTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTotalApplicationNonStoppedTime")] != -1);
		return call<R>("getTotalApplicationNonStoppedTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getTotalClassCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTotalClassCount")] != -1);
		return call<R>("getTotalClassCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getTotalCompileTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTotalCompileTime")] != -1);
		return call<R>("getTotalCompileTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getTotalSafepointTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTotalSafepointTime")] != -1);
		return call<R>("getTotalSafepointTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getTotalThreadCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTotalThreadCount")] != -1);
		return call<R>("getTotalThreadCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getUnloadedClassCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUnloadedClassCount")] != -1);
		return call<R>("getUnloadedClassCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getUnloadedClassSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUnloadedClassSize")] != -1);
		return call<R>("getUnloadedClassSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getUptime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUptime")] != -1);
		return call<R>("getUptime", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getVerboseClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVerboseClass")] != -1);
		return call<R>("getVerboseClass", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getVerboseGC(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVerboseGC")] != -1);
		return call<R>("getVerboseGC", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getVmArguments(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVmArguments")] != -1);
		return call<R>("getVmArguments", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getVmId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVmId")] != -1);
		return call<R>("getVmId", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getVmName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVmName")] != -1);
		return call<R>("getVmName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getVmSpecName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVmSpecName")] != -1);
		return call<R>("getVmSpecName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getVmSpecVendor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVmSpecVendor")] != -1);
		return call<R>("getVmSpecVendor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getVmSpecVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVmSpecVersion")] != -1);
		return call<R>("getVmSpecVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getVmVendor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVmVendor")] != -1);
		return call<R>("getVmVendor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getVmVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVmVersion")] != -1);
		return call<R>("getVmVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isBootClassPathSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isBootClassPathSupported")] != -1);
		return call<R>("isBootClassPathSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCompilationTimeMonitoringSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCompilationTimeMonitoringSupported")] != -1);
		return call<R>("isCompilationTimeMonitoringSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCurrentThreadCpuTimeSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCurrentThreadCpuTimeSupported")] != -1);
		return call<R>("isCurrentThreadCpuTimeSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isGcNotificationSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isGcNotificationSupported")] != -1);
		return call<R>("isGcNotificationSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isObjectMonitorUsageSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isObjectMonitorUsageSupported")] != -1);
		return call<R>("isObjectMonitorUsageSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isOtherThreadCpuTimeSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isOtherThreadCpuTimeSupported")] != -1);
		return call<R>("isOtherThreadCpuTimeSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRemoteDiagnosticCommandsSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isRemoteDiagnosticCommandsSupported")] != -1);
		return call<R>("isRemoteDiagnosticCommandsSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSynchronizerUsageSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSynchronizerUsageSupported")] != -1);
		return call<R>("isSynchronizerUsageSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isThreadAllocatedMemoryEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isThreadAllocatedMemoryEnabled")] != -1);
		return call<R>("isThreadAllocatedMemoryEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isThreadAllocatedMemorySupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isThreadAllocatedMemorySupported")] != -1);
		return call<R>("isThreadAllocatedMemorySupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isThreadContentionMonitoringEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isThreadContentionMonitoringEnabled")] != -1);
		return call<R>("isThreadContentionMonitoringEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isThreadContentionMonitoringSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isThreadContentionMonitoringSupported")] != -1);
		return call<R>("isThreadContentionMonitoringSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isThreadCpuTimeEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isThreadCpuTimeEnabled")] != -1);
		return call<R>("isThreadCpuTimeEnabled", std::forward<Args>(args)...);
	}

};

#endif
