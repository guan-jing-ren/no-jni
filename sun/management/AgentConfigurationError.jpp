#ifndef sun_management_AgentConfigurationError_HPP
#define sun_management_AgentConfigurationError_HPP

#include "../../jfwd_decl.hpp"

class ::sun::management::AgentConfigurationError : public jObject<::sun::management::AgentConfigurationError, ::java::lang::Error> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_management / "AgentConfigurationError";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("ACCESS_FILE_NOT_FOUND"), //
		jField<::java::lang::String>("ACCESS_FILE_NOT_READABLE"), //
		jField<::java::lang::String>("ACCESS_FILE_NOT_SET"), //
		jField<::java::lang::String>("ACCESS_FILE_READ_FAILED"), //
		jField<::java::lang::String>("AGENT_CLASS_ACCESS_DENIED"), //
		jField<::java::lang::String>("AGENT_CLASS_FAILED"), //
		jField<::java::lang::String>("AGENT_CLASS_INVALID"), //
		jField<::java::lang::String>("AGENT_CLASS_NOT_FOUND"), //
		jField<::java::lang::String>("AGENT_CLASS_PREMAIN_NOT_FOUND"), //
		jField<::java::lang::String>("AGENT_EXCEPTION"), //
		jField<::java::lang::String>("CONFIG_FILE_ACCESS_DENIED"), //
		jField<::java::lang::String>("CONFIG_FILE_CLOSE_FAILED"), //
		jField<::java::lang::String>("CONFIG_FILE_NOT_FOUND"), //
		jField<::java::lang::String>("CONFIG_FILE_OPEN_FAILED"), //
		jField<::java::lang::String>("CONNECTOR_SERVER_IO_ERROR"), //
		jField<::java::lang::String>("EXPORT_ADDRESS_FAILED"), //
		jField<::java::lang::String>("FILE_ACCESS_NOT_RESTRICTED"), //
		jField<::java::lang::String>("FILE_NOT_FOUND"), //
		jField<::java::lang::String>("FILE_NOT_READABLE"), //
		jField<::java::lang::String>("FILE_NOT_SET"), //
		jField<::java::lang::String>("FILE_READ_FAILED"), //
		jField<::java::lang::String>("INVALID_JMXREMOTE_PORT"), //
		jField<::java::lang::String>("INVALID_JMXREMOTE_RMI_PORT"), //
		jField<::java::lang::String>("INVALID_OPTION"), //
		jField<::java::lang::String>("INVALID_SNMP_PORT"), //
		jField<::java::lang::String>("INVALID_SNMP_TRAP_PORT"), //
		jField<::java::lang::String>("INVALID_STATE"), //
		jField<::java::lang::String>("PASSWORD_FILE_ACCESS_NOT_RESTRICTED"), //
		jField<::java::lang::String>("PASSWORD_FILE_NOT_FOUND"), //
		jField<::java::lang::String>("PASSWORD_FILE_NOT_READABLE"), //
		jField<::java::lang::String>("PASSWORD_FILE_NOT_SET"), //
		jField<::java::lang::String>("PASSWORD_FILE_READ_FAILED"), //
		jField<::java::lang::String>("SNMP_ACL_FILE_ACCESS_NOT_RESTRICTED"), //
		jField<::java::lang::String>("SNMP_ACL_FILE_NOT_FOUND"), //
		jField<::java::lang::String>("SNMP_ACL_FILE_NOT_READABLE"), //
		jField<::java::lang::String>("SNMP_ACL_FILE_NOT_SET"), //
		jField<::java::lang::String>("SNMP_ACL_FILE_READ_FAILED"), //
		jField<::java::lang::String>("SNMP_ADAPTOR_START_FAILED"), //
		jField<::java::lang::String>("SNMP_MIB_INIT_FAILED"), //
		jField<::java::lang::String>("UNKNOWN_SNMP_INTERFACE"), //
	};

	template<typename F = ::java::lang::String>
	static auto ACCESS_FILE_NOT_FOUND() {
		static_assert(field_signatures[jField<F>("ACCESS_FILE_NOT_FOUND")] != -1);
		return sat<F>("ACCESS_FILE_NOT_FOUND");
	}

	template<typename F = ::java::lang::String>
	static auto ACCESS_FILE_NOT_READABLE() {
		static_assert(field_signatures[jField<F>("ACCESS_FILE_NOT_READABLE")] != -1);
		return sat<F>("ACCESS_FILE_NOT_READABLE");
	}

	template<typename F = ::java::lang::String>
	static auto ACCESS_FILE_NOT_SET() {
		static_assert(field_signatures[jField<F>("ACCESS_FILE_NOT_SET")] != -1);
		return sat<F>("ACCESS_FILE_NOT_SET");
	}

	template<typename F = ::java::lang::String>
	static auto ACCESS_FILE_READ_FAILED() {
		static_assert(field_signatures[jField<F>("ACCESS_FILE_READ_FAILED")] != -1);
		return sat<F>("ACCESS_FILE_READ_FAILED");
	}

	template<typename F = ::java::lang::String>
	static auto AGENT_CLASS_ACCESS_DENIED() {
		static_assert(field_signatures[jField<F>("AGENT_CLASS_ACCESS_DENIED")] != -1);
		return sat<F>("AGENT_CLASS_ACCESS_DENIED");
	}

	template<typename F = ::java::lang::String>
	static auto AGENT_CLASS_FAILED() {
		static_assert(field_signatures[jField<F>("AGENT_CLASS_FAILED")] != -1);
		return sat<F>("AGENT_CLASS_FAILED");
	}

	template<typename F = ::java::lang::String>
	static auto AGENT_CLASS_INVALID() {
		static_assert(field_signatures[jField<F>("AGENT_CLASS_INVALID")] != -1);
		return sat<F>("AGENT_CLASS_INVALID");
	}

	template<typename F = ::java::lang::String>
	static auto AGENT_CLASS_NOT_FOUND() {
		static_assert(field_signatures[jField<F>("AGENT_CLASS_NOT_FOUND")] != -1);
		return sat<F>("AGENT_CLASS_NOT_FOUND");
	}

	template<typename F = ::java::lang::String>
	static auto AGENT_CLASS_PREMAIN_NOT_FOUND() {
		static_assert(field_signatures[jField<F>("AGENT_CLASS_PREMAIN_NOT_FOUND")] != -1);
		return sat<F>("AGENT_CLASS_PREMAIN_NOT_FOUND");
	}

	template<typename F = ::java::lang::String>
	static auto AGENT_EXCEPTION() {
		static_assert(field_signatures[jField<F>("AGENT_EXCEPTION")] != -1);
		return sat<F>("AGENT_EXCEPTION");
	}

	template<typename F = ::java::lang::String>
	static auto CONFIG_FILE_ACCESS_DENIED() {
		static_assert(field_signatures[jField<F>("CONFIG_FILE_ACCESS_DENIED")] != -1);
		return sat<F>("CONFIG_FILE_ACCESS_DENIED");
	}

	template<typename F = ::java::lang::String>
	static auto CONFIG_FILE_CLOSE_FAILED() {
		static_assert(field_signatures[jField<F>("CONFIG_FILE_CLOSE_FAILED")] != -1);
		return sat<F>("CONFIG_FILE_CLOSE_FAILED");
	}

	template<typename F = ::java::lang::String>
	static auto CONFIG_FILE_NOT_FOUND() {
		static_assert(field_signatures[jField<F>("CONFIG_FILE_NOT_FOUND")] != -1);
		return sat<F>("CONFIG_FILE_NOT_FOUND");
	}

	template<typename F = ::java::lang::String>
	static auto CONFIG_FILE_OPEN_FAILED() {
		static_assert(field_signatures[jField<F>("CONFIG_FILE_OPEN_FAILED")] != -1);
		return sat<F>("CONFIG_FILE_OPEN_FAILED");
	}

	template<typename F = ::java::lang::String>
	static auto CONNECTOR_SERVER_IO_ERROR() {
		static_assert(field_signatures[jField<F>("CONNECTOR_SERVER_IO_ERROR")] != -1);
		return sat<F>("CONNECTOR_SERVER_IO_ERROR");
	}

	template<typename F = ::java::lang::String>
	static auto EXPORT_ADDRESS_FAILED() {
		static_assert(field_signatures[jField<F>("EXPORT_ADDRESS_FAILED")] != -1);
		return sat<F>("EXPORT_ADDRESS_FAILED");
	}

	template<typename F = ::java::lang::String>
	static auto FILE_ACCESS_NOT_RESTRICTED() {
		static_assert(field_signatures[jField<F>("FILE_ACCESS_NOT_RESTRICTED")] != -1);
		return sat<F>("FILE_ACCESS_NOT_RESTRICTED");
	}

	template<typename F = ::java::lang::String>
	static auto FILE_NOT_FOUND() {
		static_assert(field_signatures[jField<F>("FILE_NOT_FOUND")] != -1);
		return sat<F>("FILE_NOT_FOUND");
	}

	template<typename F = ::java::lang::String>
	static auto FILE_NOT_READABLE() {
		static_assert(field_signatures[jField<F>("FILE_NOT_READABLE")] != -1);
		return sat<F>("FILE_NOT_READABLE");
	}

	template<typename F = ::java::lang::String>
	static auto FILE_NOT_SET() {
		static_assert(field_signatures[jField<F>("FILE_NOT_SET")] != -1);
		return sat<F>("FILE_NOT_SET");
	}

	template<typename F = ::java::lang::String>
	static auto FILE_READ_FAILED() {
		static_assert(field_signatures[jField<F>("FILE_READ_FAILED")] != -1);
		return sat<F>("FILE_READ_FAILED");
	}

	template<typename F = ::java::lang::String>
	static auto INVALID_JMXREMOTE_PORT() {
		static_assert(field_signatures[jField<F>("INVALID_JMXREMOTE_PORT")] != -1);
		return sat<F>("INVALID_JMXREMOTE_PORT");
	}

	template<typename F = ::java::lang::String>
	static auto INVALID_JMXREMOTE_RMI_PORT() {
		static_assert(field_signatures[jField<F>("INVALID_JMXREMOTE_RMI_PORT")] != -1);
		return sat<F>("INVALID_JMXREMOTE_RMI_PORT");
	}

	template<typename F = ::java::lang::String>
	static auto INVALID_OPTION() {
		static_assert(field_signatures[jField<F>("INVALID_OPTION")] != -1);
		return sat<F>("INVALID_OPTION");
	}

	template<typename F = ::java::lang::String>
	static auto INVALID_SNMP_PORT() {
		static_assert(field_signatures[jField<F>("INVALID_SNMP_PORT")] != -1);
		return sat<F>("INVALID_SNMP_PORT");
	}

	template<typename F = ::java::lang::String>
	static auto INVALID_SNMP_TRAP_PORT() {
		static_assert(field_signatures[jField<F>("INVALID_SNMP_TRAP_PORT")] != -1);
		return sat<F>("INVALID_SNMP_TRAP_PORT");
	}

	template<typename F = ::java::lang::String>
	static auto INVALID_STATE() {
		static_assert(field_signatures[jField<F>("INVALID_STATE")] != -1);
		return sat<F>("INVALID_STATE");
	}

	template<typename F = ::java::lang::String>
	static auto PASSWORD_FILE_ACCESS_NOT_RESTRICTED() {
		static_assert(field_signatures[jField<F>("PASSWORD_FILE_ACCESS_NOT_RESTRICTED")] != -1);
		return sat<F>("PASSWORD_FILE_ACCESS_NOT_RESTRICTED");
	}

	template<typename F = ::java::lang::String>
	static auto PASSWORD_FILE_NOT_FOUND() {
		static_assert(field_signatures[jField<F>("PASSWORD_FILE_NOT_FOUND")] != -1);
		return sat<F>("PASSWORD_FILE_NOT_FOUND");
	}

	template<typename F = ::java::lang::String>
	static auto PASSWORD_FILE_NOT_READABLE() {
		static_assert(field_signatures[jField<F>("PASSWORD_FILE_NOT_READABLE")] != -1);
		return sat<F>("PASSWORD_FILE_NOT_READABLE");
	}

	template<typename F = ::java::lang::String>
	static auto PASSWORD_FILE_NOT_SET() {
		static_assert(field_signatures[jField<F>("PASSWORD_FILE_NOT_SET")] != -1);
		return sat<F>("PASSWORD_FILE_NOT_SET");
	}

	template<typename F = ::java::lang::String>
	static auto PASSWORD_FILE_READ_FAILED() {
		static_assert(field_signatures[jField<F>("PASSWORD_FILE_READ_FAILED")] != -1);
		return sat<F>("PASSWORD_FILE_READ_FAILED");
	}

	template<typename F = ::java::lang::String>
	static auto SNMP_ACL_FILE_ACCESS_NOT_RESTRICTED() {
		static_assert(field_signatures[jField<F>("SNMP_ACL_FILE_ACCESS_NOT_RESTRICTED")] != -1);
		return sat<F>("SNMP_ACL_FILE_ACCESS_NOT_RESTRICTED");
	}

	template<typename F = ::java::lang::String>
	static auto SNMP_ACL_FILE_NOT_FOUND() {
		static_assert(field_signatures[jField<F>("SNMP_ACL_FILE_NOT_FOUND")] != -1);
		return sat<F>("SNMP_ACL_FILE_NOT_FOUND");
	}

	template<typename F = ::java::lang::String>
	static auto SNMP_ACL_FILE_NOT_READABLE() {
		static_assert(field_signatures[jField<F>("SNMP_ACL_FILE_NOT_READABLE")] != -1);
		return sat<F>("SNMP_ACL_FILE_NOT_READABLE");
	}

	template<typename F = ::java::lang::String>
	static auto SNMP_ACL_FILE_NOT_SET() {
		static_assert(field_signatures[jField<F>("SNMP_ACL_FILE_NOT_SET")] != -1);
		return sat<F>("SNMP_ACL_FILE_NOT_SET");
	}

	template<typename F = ::java::lang::String>
	static auto SNMP_ACL_FILE_READ_FAILED() {
		static_assert(field_signatures[jField<F>("SNMP_ACL_FILE_READ_FAILED")] != -1);
		return sat<F>("SNMP_ACL_FILE_READ_FAILED");
	}

	template<typename F = ::java::lang::String>
	static auto SNMP_ADAPTOR_START_FAILED() {
		static_assert(field_signatures[jField<F>("SNMP_ADAPTOR_START_FAILED")] != -1);
		return sat<F>("SNMP_ADAPTOR_START_FAILED");
	}

	template<typename F = ::java::lang::String>
	static auto SNMP_MIB_INIT_FAILED() {
		static_assert(field_signatures[jField<F>("SNMP_MIB_INIT_FAILED")] != -1);
		return sat<F>("SNMP_MIB_INIT_FAILED");
	}

	template<typename F = ::java::lang::String>
	static auto UNKNOWN_SNMP_INTERFACE() {
		static_assert(field_signatures[jField<F>("UNKNOWN_SNMP_INTERFACE")] != -1);
		return sat<F>("UNKNOWN_SNMP_INTERFACE");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::Throwable)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::Throwable, ::java::lang::String *)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String *)>(), //
		jMethod<::java::lang::String()>("getError"), //
		jMethod<::java::lang::String *()>("getParams"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getError(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getError")] != -1);
		return call<R>("getError", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getParams(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParams")] != -1);
		return call<R>("getParams", std::forward<Args>(args)...);
	}

};

#endif
