#ifndef sun_management_VMOptionCompositeData_HPP
#define sun_management_VMOptionCompositeData_HPP

#include "../../jfwd_decl.hpp"

class ::sun::management::VMOptionCompositeData : public jObject<::sun::management::VMOptionCompositeData, ::sun::management::LazyCompositeData> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_management / "VMOptionCompositeData";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String(::javax::management::openmbean::CompositeData)>("getName"), //
		jMethod<::com::sun::management::VMOption$Origin(::javax::management::openmbean::CompositeData)>("getOrigin"), //
		jMethod<::com::sun::management::VMOption()>("getVMOption"), //
		jMethod<::java::lang::String(::javax::management::openmbean::CompositeData)>("getValue"), //
		jMethod<::jboolean(::javax::management::openmbean::CompositeData)>("isWriteable"), //
		jMethod<::javax::management::openmbean::CompositeData(::com::sun::management::VMOption)>("toCompositeData"), //
		jMethod<::jvoid(::javax::management::openmbean::CompositeData)>("validateCompositeData"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	static auto getName(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return scall<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::management::VMOption$Origin, typename... Args>
	static auto getOrigin(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOrigin")] != -1);
		return scall<R>("getOrigin", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::management::VMOption, typename... Args>
	auto getVMOption(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVMOption")] != -1);
		return call<R>("getVMOption", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getValue(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValue")] != -1);
		return scall<R>("getValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isWriteable(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isWriteable")] != -1);
		return scall<R>("isWriteable", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::openmbean::CompositeData, typename... Args>
	static auto toCompositeData(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toCompositeData")] != -1);
		return scall<R>("toCompositeData", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto validateCompositeData(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("validateCompositeData")] != -1);
		return scall<R>("validateCompositeData", std::forward<Args>(args)...);
	}

};

#endif
