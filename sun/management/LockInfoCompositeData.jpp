#ifndef sun_management_LockInfoCompositeData_HPP
#define sun_management_LockInfoCompositeData_HPP

#include "../../jfwd_decl.hpp"

class ::sun::management::LockInfoCompositeData : public jObject<::sun::management::LockInfoCompositeData, ::sun::management::LazyCompositeData> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_management / "LockInfoCompositeData";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::management::LockInfo()>("getLockInfo"), //
		jMethod<::javax::management::openmbean::CompositeData(::java::lang::management::LockInfo)>("toCompositeData"), //
		jMethod<::java::lang::management::LockInfo(::javax::management::openmbean::CompositeData)>("toLockInfo"), //
	};

	template<typename R = ::java::lang::management::LockInfo, typename... Args>
	auto getLockInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLockInfo")] != -1);
		return call<R>("getLockInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::openmbean::CompositeData, typename... Args>
	static auto toCompositeData(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toCompositeData")] != -1);
		return scall<R>("toCompositeData", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::management::LockInfo, typename... Args>
	static auto toLockInfo(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toLockInfo")] != -1);
		return scall<R>("toLockInfo", std::forward<Args>(args)...);
	}

};

#endif
