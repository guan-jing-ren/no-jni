#ifndef sun_management_jmxremote_ConnectorBootstrap$DefaultValues_HPP
#define sun_management_jmxremote_ConnectorBootstrap$DefaultValues_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::management::jmxremote::ConnectorBootstrap$DefaultValues : public jObject<::sun::management::jmxremote::ConnectorBootstrap$DefaultValues, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_management_jmxremote / "ConnectorBootstrap$DefaultValues";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("ACCESS_FILE_NAME"), //
		jField<::java::lang::String>("CONFIG_FILE_NAME"), //
		jField<::java::lang::String>("PASSWORD_FILE_NAME"), //
		jField<::java::lang::String>("PORT"), //
		jField<::java::lang::String>("SSL_NEED_CLIENT_AUTH"), //
		jField<::java::lang::String>("USE_AUTHENTICATION"), //
		jField<::java::lang::String>("USE_LOCAL_ONLY"), //
		jField<::java::lang::String>("USE_REGISTRY_SSL"), //
		jField<::java::lang::String>("USE_SSL"), //
	};

	template<typename F = ::java::lang::String>
	static auto ACCESS_FILE_NAME() {
		static_assert(field_signatures[jField<F>("ACCESS_FILE_NAME")] != -1);
		return sat<F>("ACCESS_FILE_NAME");
	}

	template<typename F = ::java::lang::String>
	static auto CONFIG_FILE_NAME() {
		static_assert(field_signatures[jField<F>("CONFIG_FILE_NAME")] != -1);
		return sat<F>("CONFIG_FILE_NAME");
	}

	template<typename F = ::java::lang::String>
	static auto PASSWORD_FILE_NAME() {
		static_assert(field_signatures[jField<F>("PASSWORD_FILE_NAME")] != -1);
		return sat<F>("PASSWORD_FILE_NAME");
	}

	template<typename F = ::java::lang::String>
	static auto PORT() {
		static_assert(field_signatures[jField<F>("PORT")] != -1);
		return sat<F>("PORT");
	}

	template<typename F = ::java::lang::String>
	static auto SSL_NEED_CLIENT_AUTH() {
		static_assert(field_signatures[jField<F>("SSL_NEED_CLIENT_AUTH")] != -1);
		return sat<F>("SSL_NEED_CLIENT_AUTH");
	}

	template<typename F = ::java::lang::String>
	static auto USE_AUTHENTICATION() {
		static_assert(field_signatures[jField<F>("USE_AUTHENTICATION")] != -1);
		return sat<F>("USE_AUTHENTICATION");
	}

	template<typename F = ::java::lang::String>
	static auto USE_LOCAL_ONLY() {
		static_assert(field_signatures[jField<F>("USE_LOCAL_ONLY")] != -1);
		return sat<F>("USE_LOCAL_ONLY");
	}

	template<typename F = ::java::lang::String>
	static auto USE_REGISTRY_SSL() {
		static_assert(field_signatures[jField<F>("USE_REGISTRY_SSL")] != -1);
		return sat<F>("USE_REGISTRY_SSL");
	}

	template<typename F = ::java::lang::String>
	static auto USE_SSL() {
		static_assert(field_signatures[jField<F>("USE_SSL")] != -1);
		return sat<F>("USE_SSL");
	}

	constexpr static Enume method_signatures{
		cexprstr{"\0"}, //
	};

};

#endif
