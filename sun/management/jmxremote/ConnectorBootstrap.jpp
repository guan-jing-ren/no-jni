#ifndef sun_management_jmxremote_ConnectorBootstrap_HPP
#define sun_management_jmxremote_ConnectorBootstrap_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::management::jmxremote::ConnectorBootstrap : public jObject<::sun::management::jmxremote::ConnectorBootstrap, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_management_jmxremote / "ConnectorBootstrap";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::javax::management::remote::JMXConnectorServer()>("initialize"), //
		jMethod<::javax::management::remote::JMXConnectorServer(::java::lang::String, ::java::util::Properties)>("initialize"), //
		jMethod<::javax::management::remote::JMXConnectorServer()>("startLocalConnectorServer"), //
		jMethod<::javax::management::remote::JMXConnectorServer(::java::lang::String, ::java::util::Properties)>("startRemoteConnectorServer"), //
		jMethod<::jvoid()>("unexportRegistry"), //
	};

	template<typename R = ::javax::management::remote::JMXConnectorServer, typename... Args>
	static auto initialize(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initialize")] != -1);
		return scall<R>("initialize", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::remote::JMXConnectorServer, typename... Args>
	static auto startLocalConnectorServer(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("startLocalConnectorServer")] != -1);
		return scall<R>("startLocalConnectorServer", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::remote::JMXConnectorServer, typename... Args>
	static auto startRemoteConnectorServer(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("startRemoteConnectorServer")] != -1);
		return scall<R>("startRemoteConnectorServer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto unexportRegistry(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unexportRegistry")] != -1);
		return scall<R>("unexportRegistry", std::forward<Args>(args)...);
	}

};

#endif
