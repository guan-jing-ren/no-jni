#ifndef sun_management_HotspotThreadMBean_HPP
#define sun_management_HotspotThreadMBean_HPP

#include "../../jfwd_decl.hpp"

class ::sun::management::HotspotThreadMBean : public jObject<::sun::management::HotspotThreadMBean, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_management / "HotspotThreadMBean";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint()>("getInternalThreadCount"), //
		jMethod<::java::util::Map()>("getInternalThreadCpuTimes"), //
		jMethod<::java::util::List()>("getInternalThreadingCounters"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getInternalThreadCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInternalThreadCount")] != -1);
		return call<R>("getInternalThreadCount", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getInternalThreadCpuTimes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInternalThreadCpuTimes")] != -1);
		return call<R>("getInternalThreadCpuTimes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getInternalThreadingCounters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInternalThreadingCounters")] != -1);
		return call<R>("getInternalThreadingCounters", std::forward<Args>(args)...);
	}

};

#endif
