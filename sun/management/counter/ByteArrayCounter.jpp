#ifndef sun_management_counter_ByteArrayCounter_HPP
#define sun_management_counter_ByteArrayCounter_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::management::counter::ByteArrayCounter : public jObject<::sun::management::counter::ByteArrayCounter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_management_counter / "ByteArrayCounter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jbyte *()>("byteArrayValue"), //
		jMethod<::jbyte(::jint)>("byteAt"), //
	};

	template<typename R = ::jbyte *, typename... Args>
	auto byteArrayValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("byteArrayValue")] != -1);
		return call<R>("byteArrayValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto byteAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("byteAt")] != -1);
		return call<R>("byteAt", std::forward<Args>(args)...);
	}

};

#endif
