#ifndef sun_management_GcInfoCompositeData_HPP
#define sun_management_GcInfoCompositeData_HPP

#include "../../jfwd_decl.hpp"

class ::sun::management::GcInfoCompositeData : public jObject<::sun::management::GcInfoCompositeData, ::sun::management::LazyCompositeData> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_management / "GcInfoCompositeData";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::management::GcInfo, ::sun::management::GcInfoBuilder, ::java::lang::Object *)>(), //
		jMethod<::java::util::Map(::java::lang::Object)>("cast"), //
		jMethod<::jlong(::javax::management::openmbean::CompositeData)>("getEndTime"), //
		jMethod<::com::sun::management::GcInfo()>("getGcInfo"), //
		jMethod<::jlong(::javax::management::openmbean::CompositeData)>("getId"), //
		jMethod<::java::util::Map(::javax::management::openmbean::CompositeData)>("getMemoryUsageAfterGc"), //
		jMethod<::java::util::Map(::javax::management::openmbean::CompositeData)>("getMemoryUsageBeforeGc"), //
		jMethod<::jlong(::javax::management::openmbean::CompositeData)>("getStartTime"), //
		jMethod<::javax::management::openmbean::CompositeData(::com::sun::management::GcInfo)>("toCompositeData"), //
		jMethod<::jvoid(::javax::management::openmbean::CompositeData)>("validateCompositeData"), //
	};

	template<typename R = ::java::util::Map, typename... Args>
	static auto cast(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cast")] != -1);
		return scall<R>("cast", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	static auto getEndTime(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEndTime")] != -1);
		return scall<R>("getEndTime", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::management::GcInfo, typename... Args>
	auto getGcInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGcInfo")] != -1);
		return call<R>("getGcInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	static auto getId(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getId")] != -1);
		return scall<R>("getId", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	static auto getMemoryUsageAfterGc(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMemoryUsageAfterGc")] != -1);
		return scall<R>("getMemoryUsageAfterGc", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	static auto getMemoryUsageBeforeGc(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMemoryUsageBeforeGc")] != -1);
		return scall<R>("getMemoryUsageBeforeGc", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	static auto getStartTime(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStartTime")] != -1);
		return scall<R>("getStartTime", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::openmbean::CompositeData, typename... Args>
	static auto toCompositeData(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toCompositeData")] != -1);
		return scall<R>("toCompositeData", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto validateCompositeData(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("validateCompositeData")] != -1);
		return scall<R>("validateCompositeData", std::forward<Args>(args)...);
	}

};

#endif
