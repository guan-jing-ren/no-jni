#ifndef sun_management_MemoryNotifInfoCompositeData_HPP
#define sun_management_MemoryNotifInfoCompositeData_HPP

#include "../../jfwd_decl.hpp"

class ::sun::management::MemoryNotifInfoCompositeData : public jObject<::sun::management::MemoryNotifInfoCompositeData, ::sun::management::LazyCompositeData> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_management / "MemoryNotifInfoCompositeData";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jlong(::javax::management::openmbean::CompositeData)>("getCount"), //
		jMethod<::java::lang::management::MemoryNotificationInfo()>("getMemoryNotifInfo"), //
		jMethod<::java::lang::String(::javax::management::openmbean::CompositeData)>("getPoolName"), //
		jMethod<::java::lang::management::MemoryUsage(::javax::management::openmbean::CompositeData)>("getUsage"), //
		jMethod<::javax::management::openmbean::CompositeData(::java::lang::management::MemoryNotificationInfo)>("toCompositeData"), //
		jMethod<::jvoid(::javax::management::openmbean::CompositeData)>("validateCompositeData"), //
	};

	template<typename R = ::jlong, typename... Args>
	static auto getCount(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCount")] != -1);
		return scall<R>("getCount", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::management::MemoryNotificationInfo, typename... Args>
	auto getMemoryNotifInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMemoryNotifInfo")] != -1);
		return call<R>("getMemoryNotifInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getPoolName(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPoolName")] != -1);
		return scall<R>("getPoolName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::management::MemoryUsage, typename... Args>
	static auto getUsage(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUsage")] != -1);
		return scall<R>("getUsage", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::openmbean::CompositeData, typename... Args>
	static auto toCompositeData(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toCompositeData")] != -1);
		return scall<R>("toCompositeData", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto validateCompositeData(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("validateCompositeData")] != -1);
		return scall<R>("validateCompositeData", std::forward<Args>(args)...);
	}

};

#endif
