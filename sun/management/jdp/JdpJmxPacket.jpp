#ifndef sun_management_jdp_JdpJmxPacket_HPP
#define sun_management_jdp_JdpJmxPacket_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::management::jdp::JdpJmxPacket : public jObject<::sun::management::jdp::JdpJmxPacket, ::sun::management::jdp::JdpGenericPacket> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_management_jdp / "JdpJmxPacket";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("BROADCAST_INTERVAL_KEY"), //
		jField<::java::lang::String>("INSTANCE_NAME_KEY"), //
		jField<::java::lang::String>("JMX_SERVICE_URL_KEY"), //
		jField<::java::lang::String>("MAIN_CLASS_KEY"), //
		jField<::java::lang::String>("PROCESS_ID_KEY"), //
		jField<::java::lang::String>("RMI_HOSTNAME_KEY"), //
		jField<::java::lang::String>("UUID_KEY"), //
	};

	template<typename F = ::java::lang::String>
	static auto BROADCAST_INTERVAL_KEY() {
		static_assert(field_signatures[jField<F>("BROADCAST_INTERVAL_KEY")] != -1);
		return sat<F>("BROADCAST_INTERVAL_KEY");
	}

	template<typename F = ::java::lang::String>
	static auto INSTANCE_NAME_KEY() {
		static_assert(field_signatures[jField<F>("INSTANCE_NAME_KEY")] != -1);
		return sat<F>("INSTANCE_NAME_KEY");
	}

	template<typename F = ::java::lang::String>
	static auto JMX_SERVICE_URL_KEY() {
		static_assert(field_signatures[jField<F>("JMX_SERVICE_URL_KEY")] != -1);
		return sat<F>("JMX_SERVICE_URL_KEY");
	}

	template<typename F = ::java::lang::String>
	static auto MAIN_CLASS_KEY() {
		static_assert(field_signatures[jField<F>("MAIN_CLASS_KEY")] != -1);
		return sat<F>("MAIN_CLASS_KEY");
	}

	template<typename F = ::java::lang::String>
	static auto PROCESS_ID_KEY() {
		static_assert(field_signatures[jField<F>("PROCESS_ID_KEY")] != -1);
		return sat<F>("PROCESS_ID_KEY");
	}

	template<typename F = ::java::lang::String>
	static auto RMI_HOSTNAME_KEY() {
		static_assert(field_signatures[jField<F>("RMI_HOSTNAME_KEY")] != -1);
		return sat<F>("RMI_HOSTNAME_KEY");
	}

	template<typename F = ::java::lang::String>
	static auto UUID_KEY() {
		static_assert(field_signatures[jField<F>("UUID_KEY")] != -1);
		return sat<F>("UUID_KEY");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::util::UUID, ::java::lang::String)>(), //
		jConstructor<::jvoid(::jbyte *)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::String()>("getBroadcastInterval"), //
		jMethod<::java::util::UUID()>("getId"), //
		jMethod<::java::lang::String()>("getInstanceName"), //
		jMethod<::java::lang::String()>("getJmxServiceUrl"), //
		jMethod<::java::lang::String()>("getMainClass"), //
		jMethod<::jbyte *()>("getPacketData"), //
		jMethod<::java::lang::String()>("getProcessId"), //
		jMethod<::java::lang::String()>("getRmiHostname"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jvoid(::java::lang::String)>("setBroadcastInterval"), //
		jMethod<::jvoid(::java::lang::String)>("setInstanceName"), //
		jMethod<::jvoid(::java::lang::String)>("setMainClass"), //
		jMethod<::jvoid(::java::lang::String)>("setProcessId"), //
		jMethod<::jvoid(::java::lang::String)>("setRmiHostname"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBroadcastInterval(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBroadcastInterval")] != -1);
		return call<R>("getBroadcastInterval", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::UUID, typename... Args>
	auto getId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getId")] != -1);
		return call<R>("getId", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getInstanceName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInstanceName")] != -1);
		return call<R>("getInstanceName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getJmxServiceUrl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJmxServiceUrl")] != -1);
		return call<R>("getJmxServiceUrl", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMainClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMainClass")] != -1);
		return call<R>("getMainClass", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getPacketData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPacketData")] != -1);
		return call<R>("getPacketData", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getProcessId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProcessId")] != -1);
		return call<R>("getProcessId", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRmiHostname(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRmiHostname")] != -1);
		return call<R>("getRmiHostname", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBroadcastInterval(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBroadcastInterval")] != -1);
		return call<R>("setBroadcastInterval", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInstanceName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setInstanceName")] != -1);
		return call<R>("setInstanceName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMainClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMainClass")] != -1);
		return call<R>("setMainClass", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setProcessId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setProcessId")] != -1);
		return call<R>("setProcessId", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRmiHostname(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRmiHostname")] != -1);
		return call<R>("setRmiHostname", std::forward<Args>(args)...);
	}

};

#endif
