#ifndef sun_management_jdp_JdpPacketWriter_HPP
#define sun_management_jdp_JdpPacketWriter_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::management::jdp::JdpPacketWriter : public jObject<::sun::management::jdp::JdpPacketWriter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_management_jdp / "JdpPacketWriter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::lang::String)>("addEntry"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("addEntry"), //
		jMethod<::jbyte *()>("getPacketBytes"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addEntry(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addEntry")] != -1);
		return call<R>("addEntry", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getPacketBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPacketBytes")] != -1);
		return call<R>("getPacketBytes", std::forward<Args>(args)...);
	}

};

#endif
