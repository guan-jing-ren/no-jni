#ifndef sun_management_jdp_JdpBroadcaster_HPP
#define sun_management_jdp_JdpBroadcaster_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::management::jdp::JdpBroadcaster : public jObject<::sun::management::jdp::JdpBroadcaster, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_management_jdp / "JdpBroadcaster";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::net::InetAddress, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::java::net::InetAddress, ::java::net::InetAddress, ::jint, ::jint)>(), //
		jMethod<::jvoid(::sun::management::jdp::JdpPacket)>("sendPacket"), //
		jMethod<::jvoid()>("shutdown"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto sendPacket(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sendPacket")] != -1);
		return call<R>("sendPacket", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto shutdown(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shutdown")] != -1);
		return call<R>("shutdown", std::forward<Args>(args)...);
	}

};

#endif
