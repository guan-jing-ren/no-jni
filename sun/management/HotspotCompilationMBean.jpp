#ifndef sun_management_HotspotCompilationMBean_HPP
#define sun_management_HotspotCompilationMBean_HPP

#include "../../jfwd_decl.hpp"

class ::sun::management::HotspotCompilationMBean : public jObject<::sun::management::HotspotCompilationMBean, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_management / "HotspotCompilationMBean";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jlong()>("getBailoutCompileCount"), //
		jMethod<::jlong()>("getCompiledMethodCodeSize"), //
		jMethod<::jlong()>("getCompiledMethodSize"), //
		jMethod<::jint()>("getCompilerThreadCount"), //
		jMethod<::java::util::List()>("getCompilerThreadStats"), //
		jMethod<::sun::management::MethodInfo()>("getFailedCompile"), //
		jMethod<::java::util::List()>("getInternalCompilerCounters"), //
		jMethod<::sun::management::MethodInfo()>("getInvalidatedCompile"), //
		jMethod<::jlong()>("getInvalidatedCompileCount"), //
		jMethod<::sun::management::MethodInfo()>("getLastCompile"), //
		jMethod<::jlong()>("getTotalCompileCount"), //
	};

	template<typename R = ::jlong, typename... Args>
	auto getBailoutCompileCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBailoutCompileCount")] != -1);
		return call<R>("getBailoutCompileCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getCompiledMethodCodeSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCompiledMethodCodeSize")] != -1);
		return call<R>("getCompiledMethodCodeSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getCompiledMethodSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCompiledMethodSize")] != -1);
		return call<R>("getCompiledMethodSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCompilerThreadCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCompilerThreadCount")] != -1);
		return call<R>("getCompilerThreadCount", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getCompilerThreadStats(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCompilerThreadStats")] != -1);
		return call<R>("getCompilerThreadStats", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::management::MethodInfo, typename... Args>
	auto getFailedCompile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFailedCompile")] != -1);
		return call<R>("getFailedCompile", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getInternalCompilerCounters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInternalCompilerCounters")] != -1);
		return call<R>("getInternalCompilerCounters", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::management::MethodInfo, typename... Args>
	auto getInvalidatedCompile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInvalidatedCompile")] != -1);
		return call<R>("getInvalidatedCompile", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getInvalidatedCompileCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInvalidatedCompileCount")] != -1);
		return call<R>("getInvalidatedCompileCount", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::management::MethodInfo, typename... Args>
	auto getLastCompile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLastCompile")] != -1);
		return call<R>("getLastCompile", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getTotalCompileCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTotalCompileCount")] != -1);
		return call<R>("getTotalCompileCount", std::forward<Args>(args)...);
	}

};

#endif
