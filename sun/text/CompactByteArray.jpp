#ifndef sun_text_CompactByteArray_HPP
#define sun_text_CompactByteArray_HPP

#include "../../jfwd_decl.hpp"

class ::sun::text::CompactByteArray : public jObject<::sun::text::CompactByteArray, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_text / "CompactByteArray";

	constexpr static Enume field_signatures{
		jField<::jint>("UNICODECOUNT"), //
	};

	template<typename F = ::jint>
	static auto UNICODECOUNT() {
		static_assert(field_signatures[jField<F>("UNICODECOUNT")] != -1);
		return sat<F>("UNICODECOUNT");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jbyte)>(), //
		jConstructor<::jvoid(::jshort *, ::jbyte *)>(), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jvoid()>("compact"), //
		jMethod<::jbyte(::jchar)>("elementAt"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jshort *()>("getIndexArray"), //
		jMethod<::jbyte *()>("getStringArray"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jvoid(::jchar, ::jbyte)>("setElementAt"), //
		jMethod<::jvoid(::jchar, ::jchar, ::jbyte)>("setElementAt"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto compact(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compact")] != -1);
		return call<R>("compact", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto elementAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("elementAt")] != -1);
		return call<R>("elementAt", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort *, typename... Args>
	auto getIndexArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIndexArray")] != -1);
		return call<R>("getIndexArray", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getStringArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStringArray")] != -1);
		return call<R>("getStringArray", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setElementAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setElementAt")] != -1);
		return call<R>("setElementAt", std::forward<Args>(args)...);
	}

};

#endif
