#ifndef sun_text_normalizer_UCharacterIterator_HPP
#define sun_text_normalizer_UCharacterIterator_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::text::normalizer::UCharacterIterator : public jObject<::sun::text::normalizer::UCharacterIterator, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_text_normalizer / "UCharacterIterator";

	constexpr static Enume field_signatures{
		jField<::jint>("DONE"), //
	};

	template<typename F = ::jint>
	static auto DONE() {
		static_assert(field_signatures[jField<F>("DONE")] != -1);
		return sat<F>("DONE");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jint()>("current"), //
		jMethod<::jint()>("getIndex"), //
		jMethod<::sun::text::normalizer::UCharacterIterator(::java::lang::String)>("getInstance"), //
		jMethod<::sun::text::normalizer::UCharacterIterator(::java::lang::StringBuffer)>("getInstance"), //
		jMethod<::sun::text::normalizer::UCharacterIterator(::java::text::CharacterIterator)>("getInstance"), //
		jMethod<::jint()>("getLength"), //
		jMethod<::java::lang::String()>("getText"), //
		jMethod<::jint(::jchar *)>("getText"), //
		jMethod<::jint(::jchar *, ::jint)>("getText"), //
		jMethod<::jint(::jint)>("moveIndex"), //
		jMethod<::jint()>("next"), //
		jMethod<::jint()>("nextCodePoint"), //
		jMethod<::jint()>("previous"), //
		jMethod<::jvoid(::jint)>("setIndex"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto current(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("current")] != -1);
		return call<R>("current", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIndex")] != -1);
		return call<R>("getIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::text::normalizer::UCharacterIterator, typename... Args>
	static auto getInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInstance")] != -1);
		return scall<R>("getInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLength")] != -1);
		return call<R>("getLength", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getText")] != -1);
		return call<R>("getText", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto moveIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("moveIndex")] != -1);
		return call<R>("moveIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto next(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("next")] != -1);
		return call<R>("next", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto nextCodePoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nextCodePoint")] != -1);
		return call<R>("nextCodePoint", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto previous(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("previous")] != -1);
		return call<R>("previous", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIndex")] != -1);
		return call<R>("setIndex", std::forward<Args>(args)...);
	}

};

#endif
