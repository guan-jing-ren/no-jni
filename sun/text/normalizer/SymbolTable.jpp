#ifndef sun_text_normalizer_SymbolTable_HPP
#define sun_text_normalizer_SymbolTable_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::text::normalizer::SymbolTable : public jObject<::sun::text::normalizer::SymbolTable, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_text_normalizer / "SymbolTable";

	constexpr static Enume field_signatures{
		jField<::jchar>("SYMBOL_REF"), //
	};

	template<typename F = ::jchar>
	static auto SYMBOL_REF() {
		static_assert(field_signatures[jField<F>("SYMBOL_REF")] != -1);
		return sat<F>("SYMBOL_REF");
	}

	constexpr static Enume method_signatures{
		jMethod<::jchar *(::java::lang::String)>("lookup"), //
		jMethod<::sun::text::normalizer::UnicodeMatcher(::jint)>("lookupMatcher"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::text::ParsePosition, ::jint)>("parseReference"), //
	};

	template<typename R = ::jchar *, typename... Args>
	auto lookup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lookup")] != -1);
		return call<R>("lookup", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::text::normalizer::UnicodeMatcher, typename... Args>
	auto lookupMatcher(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lookupMatcher")] != -1);
		return call<R>("lookupMatcher", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto parseReference(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseReference")] != -1);
		return call<R>("parseReference", std::forward<Args>(args)...);
	}

};

#endif
