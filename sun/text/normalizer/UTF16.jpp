#ifndef sun_text_normalizer_UTF16_HPP
#define sun_text_normalizer_UTF16_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::text::normalizer::UTF16 : public jObject<::sun::text::normalizer::UTF16, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_text_normalizer / "UTF16";

	constexpr static Enume field_signatures{
		jField<::jint>("CODEPOINT_MAX_VALUE"), //
		jField<::jint>("CODEPOINT_MIN_VALUE"), //
		jField<::jint>("LEAD_SURROGATE_MAX_VALUE"), //
		jField<::jint>("LEAD_SURROGATE_MIN_VALUE"), //
		jField<::jint>("SUPPLEMENTARY_MIN_VALUE"), //
		jField<::jint>("SURROGATE_MIN_VALUE"), //
		jField<::jint>("TRAIL_SURROGATE_MAX_VALUE"), //
		jField<::jint>("TRAIL_SURROGATE_MIN_VALUE"), //
	};

	template<typename F = ::jint>
	static auto CODEPOINT_MAX_VALUE() {
		static_assert(field_signatures[jField<F>("CODEPOINT_MAX_VALUE")] != -1);
		return sat<F>("CODEPOINT_MAX_VALUE");
	}

	template<typename F = ::jint>
	static auto CODEPOINT_MIN_VALUE() {
		static_assert(field_signatures[jField<F>("CODEPOINT_MIN_VALUE")] != -1);
		return sat<F>("CODEPOINT_MIN_VALUE");
	}

	template<typename F = ::jint>
	static auto LEAD_SURROGATE_MAX_VALUE() {
		static_assert(field_signatures[jField<F>("LEAD_SURROGATE_MAX_VALUE")] != -1);
		return sat<F>("LEAD_SURROGATE_MAX_VALUE");
	}

	template<typename F = ::jint>
	static auto LEAD_SURROGATE_MIN_VALUE() {
		static_assert(field_signatures[jField<F>("LEAD_SURROGATE_MIN_VALUE")] != -1);
		return sat<F>("LEAD_SURROGATE_MIN_VALUE");
	}

	template<typename F = ::jint>
	static auto SUPPLEMENTARY_MIN_VALUE() {
		static_assert(field_signatures[jField<F>("SUPPLEMENTARY_MIN_VALUE")] != -1);
		return sat<F>("SUPPLEMENTARY_MIN_VALUE");
	}

	template<typename F = ::jint>
	static auto SURROGATE_MIN_VALUE() {
		static_assert(field_signatures[jField<F>("SURROGATE_MIN_VALUE")] != -1);
		return sat<F>("SURROGATE_MIN_VALUE");
	}

	template<typename F = ::jint>
	static auto TRAIL_SURROGATE_MAX_VALUE() {
		static_assert(field_signatures[jField<F>("TRAIL_SURROGATE_MAX_VALUE")] != -1);
		return sat<F>("TRAIL_SURROGATE_MAX_VALUE");
	}

	template<typename F = ::jint>
	static auto TRAIL_SURROGATE_MIN_VALUE() {
		static_assert(field_signatures[jField<F>("TRAIL_SURROGATE_MIN_VALUE")] != -1);
		return sat<F>("TRAIL_SURROGATE_MIN_VALUE");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::StringBuffer(::java::lang::StringBuffer, ::jint)>("append"), //
		jMethod<::jint(::java::lang::String, ::jint)>("charAt"), //
		jMethod<::jint(::jchar *, ::jint, ::jint, ::jint)>("charAt"), //
		jMethod<::jint(::jint)>("getCharCount"), //
		jMethod<::jchar(::jint)>("getLeadSurrogate"), //
		jMethod<::jchar(::jint)>("getTrailSurrogate"), //
		jMethod<::jboolean(::jchar)>("isLeadSurrogate"), //
		jMethod<::jboolean(::jchar)>("isSurrogate"), //
		jMethod<::jboolean(::jchar)>("isTrailSurrogate"), //
		jMethod<::jint(::jchar *, ::jint, ::jint, ::jint, ::jint)>("moveCodePointOffset"), //
		jMethod<::java::lang::String(::jint)>("valueOf"), //
	};

	template<typename R = ::java::lang::StringBuffer, typename... Args>
	static auto append(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("append")] != -1);
		return scall<R>("append", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto charAt(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("charAt")] != -1);
		return scall<R>("charAt", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getCharCount(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCharCount")] != -1);
		return scall<R>("getCharCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	static auto getLeadSurrogate(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLeadSurrogate")] != -1);
		return scall<R>("getLeadSurrogate", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	static auto getTrailSurrogate(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTrailSurrogate")] != -1);
		return scall<R>("getTrailSurrogate", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isLeadSurrogate(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLeadSurrogate")] != -1);
		return scall<R>("isLeadSurrogate", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isSurrogate(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSurrogate")] != -1);
		return scall<R>("isSurrogate", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isTrailSurrogate(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isTrailSurrogate")] != -1);
		return scall<R>("isTrailSurrogate", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto moveCodePointOffset(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("moveCodePointOffset")] != -1);
		return scall<R>("moveCodePointOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

};

#endif
