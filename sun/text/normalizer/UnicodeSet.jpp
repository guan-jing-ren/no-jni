#ifndef sun_text_normalizer_UnicodeSet_HPP
#define sun_text_normalizer_UnicodeSet_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::text::normalizer::UnicodeSet : public jObject<::sun::text::normalizer::UnicodeSet, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_text_normalizer / "UnicodeSet";

	constexpr static Enume field_signatures{
		jField<::jint>("IGNORE_SPACE"), //
		jField<::jint>("MAX_VALUE"), //
		jField<::jint>("MIN_VALUE"), //
	};

	template<typename F = ::jint>
	static auto IGNORE_SPACE() {
		static_assert(field_signatures[jField<F>("IGNORE_SPACE")] != -1);
		return sat<F>("IGNORE_SPACE");
	}

	template<typename F = ::jint>
	static auto MAX_VALUE() {
		static_assert(field_signatures[jField<F>("MAX_VALUE")] != -1);
		return sat<F>("MAX_VALUE");
	}

	template<typename F = ::jint>
	static auto MIN_VALUE() {
		static_assert(field_signatures[jField<F>("MIN_VALUE")] != -1);
		return sat<F>("MIN_VALUE");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint, ::jint)>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jMethod<::java::lang::StringBuffer(::java::lang::StringBuffer, ::jboolean, ::jboolean)>("_generatePattern"), //
		jMethod<::sun::text::normalizer::UnicodeSet(::jint)>("add"), //
		jMethod<::sun::text::normalizer::UnicodeSet(::java::lang::String)>("add"), //
		jMethod<::sun::text::normalizer::UnicodeSet(::sun::text::normalizer::UnicodeSet)>("addAll"), //
		jMethod<::sun::text::normalizer::UnicodeSet(::java::lang::String)>("applyPattern"), //
		jMethod<::sun::text::normalizer::UnicodeSet(::java::lang::String, ::java::lang::String, ::sun::text::normalizer::SymbolTable)>("applyPropertyAlias"), //
		jMethod<::sun::text::normalizer::UnicodeSet()>("clear"), //
		jMethod<::sun::text::normalizer::UnicodeSet()>("complement"), //
		jMethod<::sun::text::normalizer::UnicodeSet(::jint, ::jint)>("complement"), //
		jMethod<::jboolean(::jint)>("contains"), //
		jMethod<::jint()>("getRangeCount"), //
		jMethod<::jint(::jint)>("getRangeEnd"), //
		jMethod<::jint(::jint)>("getRangeStart"), //
		jMethod<::sun::text::normalizer::UnicodeSet(::sun::text::normalizer::UnicodeSet)>("removeAll"), //
		jMethod<::sun::text::normalizer::UnicodeSet(::sun::text::normalizer::UnicodeSet)>("retainAll"), //
		jMethod<::sun::text::normalizer::UnicodeSet(::sun::text::normalizer::UnicodeSet)>("set"), //
	};

	template<typename R = ::java::lang::StringBuffer, typename... Args>
	auto _generatePattern(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_generatePattern")] != -1);
		return call<R>("_generatePattern", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::text::normalizer::UnicodeSet, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::text::normalizer::UnicodeSet, typename... Args>
	auto addAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addAll")] != -1);
		return call<R>("addAll", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::text::normalizer::UnicodeSet, typename... Args>
	auto applyPattern(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("applyPattern")] != -1);
		return call<R>("applyPattern", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::text::normalizer::UnicodeSet, typename... Args>
	auto applyPropertyAlias(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("applyPropertyAlias")] != -1);
		return call<R>("applyPropertyAlias", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::text::normalizer::UnicodeSet, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::text::normalizer::UnicodeSet, typename... Args>
	auto complement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("complement")] != -1);
		return call<R>("complement", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto contains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("contains")] != -1);
		return call<R>("contains", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRangeCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRangeCount")] != -1);
		return call<R>("getRangeCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRangeEnd(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRangeEnd")] != -1);
		return call<R>("getRangeEnd", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRangeStart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRangeStart")] != -1);
		return call<R>("getRangeStart", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::text::normalizer::UnicodeSet, typename... Args>
	auto removeAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAll")] != -1);
		return call<R>("removeAll", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::text::normalizer::UnicodeSet, typename... Args>
	auto retainAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("retainAll")] != -1);
		return call<R>("retainAll", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::text::normalizer::UnicodeSet, typename... Args>
	auto set(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set")] != -1);
		return call<R>("set", std::forward<Args>(args)...);
	}

};

#endif
