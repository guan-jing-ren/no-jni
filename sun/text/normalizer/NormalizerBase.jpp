#ifndef sun_text_normalizer_NormalizerBase_HPP
#define sun_text_normalizer_NormalizerBase_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::text::normalizer::NormalizerBase : public jObject<::sun::text::normalizer::NormalizerBase, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_text_normalizer / "NormalizerBase";

	constexpr static Enume field_signatures{
		jField<::jint>("DONE"), //
		jField<::sun::text::normalizer::NormalizerBase$QuickCheckResult>("MAYBE"), //
		jField<::sun::text::normalizer::NormalizerBase$Mode>("NFC"), //
		jField<::sun::text::normalizer::NormalizerBase$Mode>("NFD"), //
		jField<::sun::text::normalizer::NormalizerBase$Mode>("NFKC"), //
		jField<::sun::text::normalizer::NormalizerBase$Mode>("NFKD"), //
		jField<::sun::text::normalizer::NormalizerBase$QuickCheckResult>("NO"), //
		jField<::sun::text::normalizer::NormalizerBase$Mode>("NONE"), //
		jField<::jint>("UNICODE_3_2"), //
		jField<::jint>("UNICODE_3_2_0_ORIGINAL"), //
		jField<::jint>("UNICODE_LATEST"), //
		jField<::sun::text::normalizer::NormalizerBase$QuickCheckResult>("YES"), //
	};

	template<typename F = ::jint>
	static auto DONE() {
		static_assert(field_signatures[jField<F>("DONE")] != -1);
		return sat<F>("DONE");
	}

	template<typename F = ::sun::text::normalizer::NormalizerBase$QuickCheckResult>
	static auto MAYBE() {
		static_assert(field_signatures[jField<F>("MAYBE")] != -1);
		return sat<F>("MAYBE");
	}

	template<typename F = ::sun::text::normalizer::NormalizerBase$Mode>
	static auto NFC() {
		static_assert(field_signatures[jField<F>("NFC")] != -1);
		return sat<F>("NFC");
	}

	template<typename F = ::sun::text::normalizer::NormalizerBase$Mode>
	static auto NFD() {
		static_assert(field_signatures[jField<F>("NFD")] != -1);
		return sat<F>("NFD");
	}

	template<typename F = ::sun::text::normalizer::NormalizerBase$Mode>
	static auto NFKC() {
		static_assert(field_signatures[jField<F>("NFKC")] != -1);
		return sat<F>("NFKC");
	}

	template<typename F = ::sun::text::normalizer::NormalizerBase$Mode>
	static auto NFKD() {
		static_assert(field_signatures[jField<F>("NFKD")] != -1);
		return sat<F>("NFKD");
	}

	template<typename F = ::sun::text::normalizer::NormalizerBase$QuickCheckResult>
	static auto NO() {
		static_assert(field_signatures[jField<F>("NO")] != -1);
		return sat<F>("NO");
	}

	template<typename F = ::sun::text::normalizer::NormalizerBase$Mode>
	static auto NONE() {
		static_assert(field_signatures[jField<F>("NONE")] != -1);
		return sat<F>("NONE");
	}

	template<typename F = ::jint>
	static auto UNICODE_3_2() {
		static_assert(field_signatures[jField<F>("UNICODE_3_2")] != -1);
		return sat<F>("UNICODE_3_2");
	}

	template<typename F = ::jint>
	static auto UNICODE_3_2_0_ORIGINAL() {
		static_assert(field_signatures[jField<F>("UNICODE_3_2_0_ORIGINAL")] != -1);
		return sat<F>("UNICODE_3_2_0_ORIGINAL");
	}

	template<typename F = ::jint>
	static auto UNICODE_LATEST() {
		static_assert(field_signatures[jField<F>("UNICODE_LATEST")] != -1);
		return sat<F>("UNICODE_LATEST");
	}

	template<typename F = ::sun::text::normalizer::NormalizerBase$QuickCheckResult>
	static auto YES() {
		static_assert(field_signatures[jField<F>("YES")] != -1);
		return sat<F>("YES");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::sun::text::normalizer::NormalizerBase$Mode)>(), //
		jConstructor<::jvoid(::java::lang::String, ::sun::text::normalizer::NormalizerBase$Mode, ::jint)>(), //
		jConstructor<::jvoid(::java::text::CharacterIterator, ::sun::text::normalizer::NormalizerBase$Mode)>(), //
		jConstructor<::jvoid(::java::text::CharacterIterator, ::sun::text::normalizer::NormalizerBase$Mode, ::jint)>(), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::java::lang::String(::java::lang::String, ::jboolean, ::jint)>("compose"), //
		jMethod<::jint()>("current"), //
		jMethod<::java::lang::String(::java::lang::String, ::jboolean)>("decompose"), //
		jMethod<::java::lang::String(::java::lang::String, ::jboolean, ::jint)>("decompose"), //
		jMethod<::jint()>("endIndex"), //
		jMethod<::jint()>("getBeginIndex"), //
		jMethod<::jint()>("getEndIndex"), //
		jMethod<::jint()>("getIndex"), //
		jMethod<::sun::text::normalizer::NormalizerBase$Mode()>("getMode"), //
		jMethod<::jboolean(::jint, ::sun::text::normalizer::NormalizerBase$Mode)>("isNFSkippable"), //
		jMethod<::jboolean(::java::lang::String, ::java::text::Normalizer$Form)>("isNormalized"), //
		jMethod<::jboolean(::java::lang::String, ::java::text::Normalizer$Form, ::jint)>("isNormalized"), //
		jMethod<::jint()>("next"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::text::Normalizer$Form)>("normalize"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::text::Normalizer$Form, ::jint)>("normalize"), //
		jMethod<::jint(::jchar *, ::jint, ::jint, ::jchar *, ::jint, ::jint, ::sun::text::normalizer::NormalizerBase$Mode, ::jint)>("normalize"), //
		jMethod<::jint()>("previous"), //
		jMethod<::jvoid()>("reset"), //
		jMethod<::jint(::jint)>("setIndex"), //
		jMethod<::jvoid(::jint)>("setIndexOnly"), //
		jMethod<::jvoid(::sun::text::normalizer::NormalizerBase$Mode)>("setMode"), //
		jMethod<::jvoid(::java::lang::String)>("setText"), //
		jMethod<::jvoid(::java::text::CharacterIterator)>("setText"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto compose(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compose")] != -1);
		return scall<R>("compose", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto current(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("current")] != -1);
		return call<R>("current", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto decompose(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("decompose")] != -1);
		return scall<R>("decompose", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto endIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("endIndex")] != -1);
		return call<R>("endIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBeginIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBeginIndex")] != -1);
		return call<R>("getBeginIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getEndIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEndIndex")] != -1);
		return call<R>("getEndIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIndex")] != -1);
		return call<R>("getIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::text::normalizer::NormalizerBase$Mode, typename... Args>
	auto getMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMode")] != -1);
		return call<R>("getMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isNFSkippable(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isNFSkippable")] != -1);
		return scall<R>("isNFSkippable", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isNormalized(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isNormalized")] != -1);
		return scall<R>("isNormalized", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto next(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("next")] != -1);
		return call<R>("next", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto normalize(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("normalize")] != -1);
		return scall<R>("normalize", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto previous(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("previous")] != -1);
		return call<R>("previous", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto setIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIndex")] != -1);
		return call<R>("setIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIndexOnly(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIndexOnly")] != -1);
		return call<R>("setIndexOnly", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMode")] != -1);
		return call<R>("setMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setText")] != -1);
		return call<R>("setText", std::forward<Args>(args)...);
	}

};

#endif
