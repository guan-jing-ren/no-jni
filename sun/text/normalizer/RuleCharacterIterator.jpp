#ifndef sun_text_normalizer_RuleCharacterIterator_HPP
#define sun_text_normalizer_RuleCharacterIterator_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::text::normalizer::RuleCharacterIterator : public jObject<::sun::text::normalizer::RuleCharacterIterator, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_text_normalizer / "RuleCharacterIterator";

	constexpr static Enume field_signatures{
		jField<::jint>("DONE"), //
		jField<::jint>("PARSE_ESCAPES"), //
		jField<::jint>("PARSE_VARIABLES"), //
		jField<::jint>("SKIP_WHITESPACE"), //
	};

	template<typename F = ::jint>
	static auto DONE() {
		static_assert(field_signatures[jField<F>("DONE")] != -1);
		return sat<F>("DONE");
	}

	template<typename F = ::jint>
	static auto PARSE_ESCAPES() {
		static_assert(field_signatures[jField<F>("PARSE_ESCAPES")] != -1);
		return sat<F>("PARSE_ESCAPES");
	}

	template<typename F = ::jint>
	static auto PARSE_VARIABLES() {
		static_assert(field_signatures[jField<F>("PARSE_VARIABLES")] != -1);
		return sat<F>("PARSE_VARIABLES");
	}

	template<typename F = ::jint>
	static auto SKIP_WHITESPACE() {
		static_assert(field_signatures[jField<F>("SKIP_WHITESPACE")] != -1);
		return sat<F>("SKIP_WHITESPACE");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::sun::text::normalizer::SymbolTable, ::java::text::ParsePosition)>(), //
		jMethod<::jboolean()>("atEnd"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("getPos"), //
		jMethod<::jboolean()>("inVariable"), //
		jMethod<::jboolean()>("isEscaped"), //
		jMethod<::jvoid(::jint)>("jumpahead"), //
		jMethod<::java::lang::String()>("lookahead"), //
		jMethod<::jint(::jint)>("next"), //
		jMethod<::jvoid(::java::lang::Object)>("setPos"), //
		jMethod<::jvoid(::jint)>("skipIgnored"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto atEnd(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("atEnd")] != -1);
		return call<R>("atEnd", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getPos(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPos")] != -1);
		return call<R>("getPos", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto inVariable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("inVariable")] != -1);
		return call<R>("inVariable", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEscaped(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEscaped")] != -1);
		return call<R>("isEscaped", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto jumpahead(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("jumpahead")] != -1);
		return call<R>("jumpahead", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto lookahead(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lookahead")] != -1);
		return call<R>("lookahead", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto next(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("next")] != -1);
		return call<R>("next", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPos(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPos")] != -1);
		return call<R>("setPos", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto skipIgnored(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("skipIgnored")] != -1);
		return call<R>("skipIgnored", std::forward<Args>(args)...);
	}

};

#endif
