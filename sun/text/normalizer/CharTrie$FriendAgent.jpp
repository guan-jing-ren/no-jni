#ifndef sun_text_normalizer_CharTrie$FriendAgent_HPP
#define sun_text_normalizer_CharTrie$FriendAgent_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::text::normalizer::CharTrie$FriendAgent : public jObject<::sun::text::normalizer::CharTrie$FriendAgent, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_text_normalizer / "CharTrie$FriendAgent";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::sun::text::normalizer::CharTrie)>(), //
		jMethod<::jchar *()>("getPrivateData"), //
		jMethod<::jchar *()>("getPrivateIndex"), //
		jMethod<::jint()>("getPrivateInitialValue"), //
	};

	template<typename R = ::jchar *, typename... Args>
	auto getPrivateData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrivateData")] != -1);
		return call<R>("getPrivateData", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar *, typename... Args>
	auto getPrivateIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrivateIndex")] != -1);
		return call<R>("getPrivateIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPrivateInitialValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrivateInitialValue")] != -1);
		return call<R>("getPrivateInitialValue", std::forward<Args>(args)...);
	}

};

#endif
