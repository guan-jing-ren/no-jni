#ifndef sun_text_normalizer_RangeValueIterator$Element_HPP
#define sun_text_normalizer_RangeValueIterator$Element_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::text::normalizer::RangeValueIterator$Element : public jObject<::sun::text::normalizer::RangeValueIterator$Element, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_text_normalizer / "RangeValueIterator$Element";

	constexpr static Enume field_signatures{
		jField<::jint>("limit"), //
		jField<::jint>("start"), //
		jField<::jint>("value"), //
	};

	template<typename F = ::jint>
	auto limit() const {
		static_assert(field_signatures[jField<F>("limit")] != -1);
		return at<F>("limit");
	}

	template<typename F = ::jint>
	auto start() const {
		static_assert(field_signatures[jField<F>("start")] != -1);
		return at<F>("start");
	}

	template<typename F = ::jint>
	auto value() const {
		static_assert(field_signatures[jField<F>("value")] != -1);
		return at<F>("value");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
	};

};

#endif
