#ifndef sun_text_normalizer_IntTrie_HPP
#define sun_text_normalizer_IntTrie_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::text::normalizer::IntTrie : public jObject<::sun::text::normalizer::IntTrie, ::sun::text::normalizer::Trie> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_text_normalizer / "IntTrie";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::io::InputStream, ::sun::text::normalizer::Trie$DataManipulate)>(), //
		jMethod<::jint(::jint)>("getCodePointValue"), //
		jMethod<::jint(::jchar)>("getLeadValue"), //
		jMethod<::jint(::jint, ::jchar)>("getTrailValue"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getCodePointValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCodePointValue")] != -1);
		return call<R>("getCodePointValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLeadValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLeadValue")] != -1);
		return call<R>("getLeadValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTrailValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTrailValue")] != -1);
		return call<R>("getTrailValue", std::forward<Args>(args)...);
	}

};

#endif
