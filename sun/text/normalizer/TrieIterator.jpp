#ifndef sun_text_normalizer_TrieIterator_HPP
#define sun_text_normalizer_TrieIterator_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::text::normalizer::TrieIterator : public jObject<::sun::text::normalizer::TrieIterator, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_text_normalizer / "TrieIterator";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::sun::text::normalizer::Trie)>(), //
		jMethod<::jboolean(::sun::text::normalizer::RangeValueIterator$Element)>("next"), //
		jMethod<::jvoid()>("reset"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto next(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("next")] != -1);
		return call<R>("next", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", std::forward<Args>(args)...);
	}

};

#endif
