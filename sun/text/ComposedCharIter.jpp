#ifndef sun_text_ComposedCharIter_HPP
#define sun_text_ComposedCharIter_HPP

#include "../../jfwd_decl.hpp"

class ::sun::text::ComposedCharIter : public jObject<::sun::text::ComposedCharIter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_text / "ComposedCharIter";

	constexpr static Enume field_signatures{
		jField<::jint>("DONE"), //
	};

	template<typename F = ::jint>
	static auto DONE() {
		static_assert(field_signatures[jField<F>("DONE")] != -1);
		return sat<F>("DONE");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::String()>("decomposition"), //
		jMethod<::jint()>("next"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto decomposition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("decomposition")] != -1);
		return call<R>("decomposition", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto next(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("next")] != -1);
		return call<R>("next", std::forward<Args>(args)...);
	}

};

#endif
