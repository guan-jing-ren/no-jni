#ifndef sun_text_CollatorUtilities_HPP
#define sun_text_CollatorUtilities_HPP

#include "../../jfwd_decl.hpp"

class ::sun::text::CollatorUtilities : public jObject<::sun::text::CollatorUtilities, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_text / "CollatorUtilities";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jint(::sun::text::normalizer::NormalizerBase$Mode)>("toLegacyMode"), //
		jMethod<::sun::text::normalizer::NormalizerBase$Mode(::jint)>("toNormalizerMode"), //
	};

	template<typename R = ::jint, typename... Args>
	static auto toLegacyMode(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toLegacyMode")] != -1);
		return scall<R>("toLegacyMode", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::text::normalizer::NormalizerBase$Mode, typename... Args>
	static auto toNormalizerMode(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toNormalizerMode")] != -1);
		return scall<R>("toNormalizerMode", std::forward<Args>(args)...);
	}

};

#endif
