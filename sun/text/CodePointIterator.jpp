#ifndef sun_text_CodePointIterator_HPP
#define sun_text_CodePointIterator_HPP

#include "../../jfwd_decl.hpp"

class ::sun::text::CodePointIterator : public jObject<::sun::text::CodePointIterator, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_text / "CodePointIterator";

	constexpr static Enume field_signatures{
		jField<::jint>("DONE"), //
	};

	template<typename F = ::jint>
	static auto DONE() {
		static_assert(field_signatures[jField<F>("DONE")] != -1);
		return sat<F>("DONE");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jint()>("charIndex"), //
		jMethod<::sun::text::CodePointIterator(::java::lang::CharSequence)>("create"), //
		jMethod<::sun::text::CodePointIterator(::java::text::CharacterIterator)>("create"), //
		jMethod<::sun::text::CodePointIterator(::jchar *)>("create"), //
		jMethod<::sun::text::CodePointIterator(::jchar *, ::jint, ::jint)>("create"), //
		jMethod<::jint()>("next"), //
		jMethod<::jint()>("prev"), //
		jMethod<::jvoid()>("setToLimit"), //
		jMethod<::jvoid()>("setToStart"), //
	};

	template<typename R = ::jint, typename... Args>
	auto charIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("charIndex")] != -1);
		return call<R>("charIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::text::CodePointIterator, typename... Args>
	static auto create(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create")] != -1);
		return scall<R>("create", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto next(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("next")] != -1);
		return call<R>("next", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto prev(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("prev")] != -1);
		return call<R>("prev", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setToLimit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setToLimit")] != -1);
		return call<R>("setToLimit", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setToStart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setToStart")] != -1);
		return call<R>("setToStart", std::forward<Args>(args)...);
	}

};

#endif
