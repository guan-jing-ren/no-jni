#ifndef sun_text_bidi_BidiBase_HPP
#define sun_text_bidi_BidiBase_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::text::bidi::BidiBase : public jObject<::sun::text::bidi::BidiBase, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_text_bidi / "BidiBase";

	constexpr static Enume field_signatures{
		jField<::jshort>("DO_MIRRORING"), //
		jField<::jbyte>("INTERNAL_LEVEL_DEFAULT_LTR"), //
		jField<::jbyte>("INTERNAL_LEVEL_DEFAULT_RTL"), //
		jField<::jbyte>("INTERNAL_LEVEL_OVERRIDE"), //
		jField<::jint>("MAP_NOWHERE"), //
		jField<::jbyte>("MAX_EXPLICIT_LEVEL"), //
		jField<::jbyte>("MIXED"), //
		jField<::jint>("length"), //
	};

	template<typename F = ::jshort>
	static auto DO_MIRRORING() {
		static_assert(field_signatures[jField<F>("DO_MIRRORING")] != -1);
		return sat<F>("DO_MIRRORING");
	}

	template<typename F = ::jbyte>
	static auto INTERNAL_LEVEL_DEFAULT_LTR() {
		static_assert(field_signatures[jField<F>("INTERNAL_LEVEL_DEFAULT_LTR")] != -1);
		return sat<F>("INTERNAL_LEVEL_DEFAULT_LTR");
	}

	template<typename F = ::jbyte>
	static auto INTERNAL_LEVEL_DEFAULT_RTL() {
		static_assert(field_signatures[jField<F>("INTERNAL_LEVEL_DEFAULT_RTL")] != -1);
		return sat<F>("INTERNAL_LEVEL_DEFAULT_RTL");
	}

	template<typename F = ::jbyte>
	static auto INTERNAL_LEVEL_OVERRIDE() {
		static_assert(field_signatures[jField<F>("INTERNAL_LEVEL_OVERRIDE")] != -1);
		return sat<F>("INTERNAL_LEVEL_OVERRIDE");
	}

	template<typename F = ::jint>
	static auto MAP_NOWHERE() {
		static_assert(field_signatures[jField<F>("MAP_NOWHERE")] != -1);
		return sat<F>("MAP_NOWHERE");
	}

	template<typename F = ::jbyte>
	static auto MAX_EXPLICIT_LEVEL() {
		static_assert(field_signatures[jField<F>("MAX_EXPLICIT_LEVEL")] != -1);
		return sat<F>("MAX_EXPLICIT_LEVEL");
	}

	template<typename F = ::jbyte>
	static auto MIXED() {
		static_assert(field_signatures[jField<F>("MIXED")] != -1);
		return sat<F>("MIXED");
	}

	template<typename F = ::jint>
	auto length() const {
		static_assert(field_signatures[jField<F>("length")] != -1);
		return at<F>("length");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint, ::jint)>(), //
		jConstructor<::jvoid(::jchar *, ::jint, ::jbyte *, ::jint, ::jint, ::jint)>(), //
		jMethod<::jboolean()>("baseIsLeftToRight"), //
		jMethod<::jint()>("countRuns"), //
		jMethod<::jint()>("getBaseLevel"), //
		jMethod<::jint()>("getLength"), //
		jMethod<::jbyte(::jint)>("getLevelAt"), //
		jMethod<::jbyte()>("getParaLevel"), //
		jMethod<::jint(::jint)>("getParagraphIndex"), //
		jMethod<::jint(::jint)>("getRunLevel"), //
		jMethod<::jint(::jint)>("getRunLimit"), //
		jMethod<::jint(::jint)>("getRunStart"), //
		jMethod<::jboolean()>("isLeftToRight"), //
		jMethod<::jboolean()>("isMixed"), //
		jMethod<::jboolean()>("isRightToLeft"), //
		jMethod<::jvoid(::jbyte *, ::jint, ::java::lang::Object *, ::jint, ::jint)>("reorderVisually"), //
		jMethod<::jboolean(::jchar *, ::jint, ::jint)>("requiresBidi"), //
		jMethod<::java::text::Bidi(::java::text::Bidi, ::sun::text::bidi::BidiBase, ::java::text::Bidi, ::sun::text::bidi::BidiBase, ::jint, ::jint)>("setLine"), //
		jMethod<::jvoid(::java::text::AttributedCharacterIterator)>("setPara"), //
		jMethod<::jvoid(::jchar *, ::jbyte, ::jbyte *)>("setPara"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid(::jint, ::jint, ::jint)>("verifyIndex"), //
		jMethod<::jvoid(::jint, ::jint, ::jint)>("verifyRange"), //
		jMethod<::jvoid()>("verifyValidPara"), //
		jMethod<::jvoid()>("verifyValidParaOrLine"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto baseIsLeftToRight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("baseIsLeftToRight")] != -1);
		return call<R>("baseIsLeftToRight", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto countRuns(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("countRuns")] != -1);
		return call<R>("countRuns", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBaseLevel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBaseLevel")] != -1);
		return call<R>("getBaseLevel", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLength")] != -1);
		return call<R>("getLength", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto getLevelAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLevelAt")] != -1);
		return call<R>("getLevelAt", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto getParaLevel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParaLevel")] != -1);
		return call<R>("getParaLevel", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getParagraphIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParagraphIndex")] != -1);
		return call<R>("getParagraphIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRunLevel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRunLevel")] != -1);
		return call<R>("getRunLevel", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRunLimit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRunLimit")] != -1);
		return call<R>("getRunLimit", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRunStart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRunStart")] != -1);
		return call<R>("getRunStart", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLeftToRight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLeftToRight")] != -1);
		return call<R>("isLeftToRight", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isMixed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isMixed")] != -1);
		return call<R>("isMixed", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRightToLeft(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isRightToLeft")] != -1);
		return call<R>("isRightToLeft", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto reorderVisually(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reorderVisually")] != -1);
		return scall<R>("reorderVisually", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto requiresBidi(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("requiresBidi")] != -1);
		return scall<R>("requiresBidi", std::forward<Args>(args)...);
	}

	template<typename R = ::java::text::Bidi, typename... Args>
	auto setLine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLine")] != -1);
		return call<R>("setLine", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPara(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPara")] != -1);
		return call<R>("setPara", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto verifyIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("verifyIndex")] != -1);
		return call<R>("verifyIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto verifyRange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("verifyRange")] != -1);
		return call<R>("verifyRange", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto verifyValidPara(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("verifyValidPara")] != -1);
		return call<R>("verifyValidPara", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto verifyValidParaOrLine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("verifyValidParaOrLine")] != -1);
		return call<R>("verifyValidParaOrLine", std::forward<Args>(args)...);
	}

};

#endif
