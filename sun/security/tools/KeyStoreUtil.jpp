#ifndef sun_security_tools_KeyStoreUtil_HPP
#define sun_security_tools_KeyStoreUtil_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::tools::KeyStoreUtil : public jObject<::sun::security::tools::KeyStoreUtil, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_tools / "KeyStoreUtil";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::security::KeyStore()>("getCacertsKeyStore"), //
		jMethod<::jchar *(::java::lang::String, ::java::lang::String, ::java::util::ResourceBundle)>("getPassWithModifier"), //
		jMethod<::jboolean(::java::lang::String)>("isWindowsKeyStore"), //
		jMethod<::java::lang::String(::java::lang::String)>("niceStoreTypeName"), //
	};

	template<typename R = ::java::security::KeyStore, typename... Args>
	static auto getCacertsKeyStore(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCacertsKeyStore")] != -1);
		return scall<R>("getCacertsKeyStore", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar *, typename... Args>
	static auto getPassWithModifier(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPassWithModifier")] != -1);
		return scall<R>("getPassWithModifier", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isWindowsKeyStore(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isWindowsKeyStore")] != -1);
		return scall<R>("isWindowsKeyStore", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto niceStoreTypeName(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("niceStoreTypeName")] != -1);
		return scall<R>("niceStoreTypeName", std::forward<Args>(args)...);
	}

};

#endif
