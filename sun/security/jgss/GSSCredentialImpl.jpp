#ifndef sun_security_jgss_GSSCredentialImpl_HPP
#define sun_security_jgss_GSSCredentialImpl_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::jgss::GSSCredentialImpl : public jObject<::sun::security::jgss::GSSCredentialImpl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_jgss / "GSSCredentialImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::sun::security::jgss::GSSManagerImpl, ::sun::security::jgss::spi::GSSCredentialSpi)>(), //
		jMethod<::jvoid(::org::ietf::jgss::GSSName, ::jint, ::jint, ::org::ietf::jgss::Oid, ::jint)>("add"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::sun::security::jgss::spi::GSSCredentialSpi(::org::ietf::jgss::Oid, ::jboolean)>("getElement"), //
		jMethod<::org::ietf::jgss::Oid *()>("getMechs"), //
		jMethod<::org::ietf::jgss::GSSName()>("getName"), //
		jMethod<::org::ietf::jgss::GSSName(::org::ietf::jgss::Oid)>("getName"), //
		jMethod<::jint(::org::ietf::jgss::Oid)>("getRemainingAcceptLifetime"), //
		jMethod<::jint(::org::ietf::jgss::Oid)>("getRemainingInitLifetime"), //
		jMethod<::jint()>("getRemainingLifetime"), //
		jMethod<::jint()>("getUsage"), //
		jMethod<::jint(::org::ietf::jgss::Oid)>("getUsage"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::org::ietf::jgss::GSSCredential(::org::ietf::jgss::GSSName)>("impersonate"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::jgss::spi::GSSCredentialSpi, typename... Args>
	auto getElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getElement")] != -1);
		return call<R>("getElement", std::forward<Args>(args)...);
	}

	template<typename R = ::org::ietf::jgss::Oid *, typename... Args>
	auto getMechs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMechs")] != -1);
		return call<R>("getMechs", std::forward<Args>(args)...);
	}

	template<typename R = ::org::ietf::jgss::GSSName, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRemainingAcceptLifetime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRemainingAcceptLifetime")] != -1);
		return call<R>("getRemainingAcceptLifetime", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRemainingInitLifetime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRemainingInitLifetime")] != -1);
		return call<R>("getRemainingInitLifetime", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRemainingLifetime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRemainingLifetime")] != -1);
		return call<R>("getRemainingLifetime", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getUsage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUsage")] != -1);
		return call<R>("getUsage", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::org::ietf::jgss::GSSCredential, typename... Args>
	auto impersonate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("impersonate")] != -1);
		return call<R>("impersonate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
