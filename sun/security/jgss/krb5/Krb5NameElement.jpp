#ifndef sun_security_jgss_krb5_Krb5NameElement_HPP
#define sun_security_jgss_krb5_Krb5NameElement_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::security::jgss::krb5::Krb5NameElement : public jObject<::sun::security::jgss::krb5::Krb5NameElement, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_jgss_krb5 / "Krb5NameElement";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jboolean(::sun::security::jgss::spi::GSSNameSpi)>("equals"), //
		jMethod<::jbyte *()>("export"), //
		jMethod<::org::ietf::jgss::Oid()>("getGSSNameType"), //
		jMethod<::sun::security::krb5::PrincipalName()>("getKrb5PrincipalName"), //
		jMethod<::org::ietf::jgss::Oid()>("getMechanism"), //
		jMethod<::java::security::Provider()>("getProvider"), //
		jMethod<::org::ietf::jgss::Oid()>("getStringNameType"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isAnonymousName"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto export_(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("export")] != -1);
		return call<R>("export", std::forward<Args>(args)...);
	}

	template<typename R = ::org::ietf::jgss::Oid, typename... Args>
	auto getGSSNameType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGSSNameType")] != -1);
		return call<R>("getGSSNameType", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::krb5::PrincipalName, typename... Args>
	auto getKrb5PrincipalName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKrb5PrincipalName")] != -1);
		return call<R>("getKrb5PrincipalName", std::forward<Args>(args)...);
	}

	template<typename R = ::org::ietf::jgss::Oid, typename... Args>
	auto getMechanism(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMechanism")] != -1);
		return call<R>("getMechanism", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::Provider, typename... Args>
	auto getProvider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProvider")] != -1);
		return call<R>("getProvider", std::forward<Args>(args)...);
	}

	template<typename R = ::org::ietf::jgss::Oid, typename... Args>
	auto getStringNameType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStringNameType")] != -1);
		return call<R>("getStringNameType", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAnonymousName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAnonymousName")] != -1);
		return call<R>("isAnonymousName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
