#ifndef sun_security_jgss_krb5_Krb5AcceptCredential_HPP
#define sun_security_jgss_krb5_Krb5AcceptCredential_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::security::jgss::krb5::Krb5AcceptCredential : public jObject<::sun::security::jgss::krb5::Krb5AcceptCredential, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_jgss_krb5 / "Krb5AcceptCredential";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("destroy"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jint()>("getAcceptLifetime"), //
		jMethod<::jint()>("getInitLifetime"), //
		jMethod<::sun::security::krb5::EncryptionKey *(::sun::security::krb5::PrincipalName)>("getKrb5EncryptionKeys"), //
		jMethod<::org::ietf::jgss::Oid()>("getMechanism"), //
		jMethod<::sun::security::jgss::spi::GSSNameSpi()>("getName"), //
		jMethod<::java::security::Provider()>("getProvider"), //
		jMethod<::sun::security::jgss::spi::GSSCredentialSpi(::sun::security::jgss::spi::GSSNameSpi)>("impersonate"), //
		jMethod<::jboolean()>("isAcceptorCredential"), //
		jMethod<::jboolean()>("isInitiatorCredential"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto destroy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("destroy")] != -1);
		return call<R>("destroy", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAcceptLifetime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAcceptLifetime")] != -1);
		return call<R>("getAcceptLifetime", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getInitLifetime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInitLifetime")] != -1);
		return call<R>("getInitLifetime", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::krb5::EncryptionKey *, typename... Args>
	auto getKrb5EncryptionKeys(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKrb5EncryptionKeys")] != -1);
		return call<R>("getKrb5EncryptionKeys", std::forward<Args>(args)...);
	}

	template<typename R = ::org::ietf::jgss::Oid, typename... Args>
	auto getMechanism(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMechanism")] != -1);
		return call<R>("getMechanism", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::jgss::spi::GSSNameSpi, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::Provider, typename... Args>
	auto getProvider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProvider")] != -1);
		return call<R>("getProvider", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::jgss::spi::GSSCredentialSpi, typename... Args>
	auto impersonate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("impersonate")] != -1);
		return call<R>("impersonate", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAcceptorCredential(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAcceptorCredential")] != -1);
		return call<R>("isAcceptorCredential", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isInitiatorCredential(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isInitiatorCredential")] != -1);
		return call<R>("isInitiatorCredential", std::forward<Args>(args)...);
	}

};

#endif
