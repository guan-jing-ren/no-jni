#ifndef sun_security_jgss_wrapper_GSSCredElement_HPP
#define sun_security_jgss_wrapper_GSSCredElement_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::security::jgss::wrapper::GSSCredElement : public jObject<::sun::security::jgss::wrapper::GSSCredElement, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_jgss_wrapper / "GSSCredElement";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jint()>("getAcceptLifetime"), //
		jMethod<::jint()>("getInitLifetime"), //
		jMethod<::org::ietf::jgss::Oid()>("getMechanism"), //
		jMethod<::sun::security::jgss::spi::GSSNameSpi()>("getName"), //
		jMethod<::sun::security::jgss::wrapper::GSSNameElement()>("getName"), //
		jMethod<::java::security::Provider()>("getProvider"), //
		jMethod<::sun::security::jgss::spi::GSSCredentialSpi(::sun::security::jgss::spi::GSSNameSpi)>("impersonate"), //
		jMethod<::jboolean()>("isAcceptorCredential"), //
		jMethod<::jboolean()>("isInitiatorCredential"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAcceptLifetime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAcceptLifetime")] != -1);
		return call<R>("getAcceptLifetime", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getInitLifetime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInitLifetime")] != -1);
		return call<R>("getInitLifetime", std::forward<Args>(args)...);
	}

	template<typename R = ::org::ietf::jgss::Oid, typename... Args>
	auto getMechanism(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMechanism")] != -1);
		return call<R>("getMechanism", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::jgss::spi::GSSNameSpi, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::Provider, typename... Args>
	auto getProvider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProvider")] != -1);
		return call<R>("getProvider", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::jgss::spi::GSSCredentialSpi, typename... Args>
	auto impersonate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("impersonate")] != -1);
		return call<R>("impersonate", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAcceptorCredential(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAcceptorCredential")] != -1);
		return call<R>("isAcceptorCredential", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isInitiatorCredential(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isInitiatorCredential")] != -1);
		return call<R>("isInitiatorCredential", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
