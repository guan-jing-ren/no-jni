#ifndef sun_security_jgss_GSSNameImpl_HPP
#define sun_security_jgss_GSSNameImpl_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::jgss::GSSNameImpl : public jObject<::sun::security::jgss::GSSNameImpl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_jgss / "GSSNameImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::org::ietf::jgss::GSSName(::org::ietf::jgss::Oid)>("canonicalize"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jboolean(::org::ietf::jgss::GSSName)>("equals"), //
		jMethod<::jbyte *()>("export"), //
		jMethod<::sun::security::jgss::spi::GSSNameSpi(::org::ietf::jgss::Oid)>("getElement"), //
		jMethod<::org::ietf::jgss::Oid()>("getStringNameType"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isAnonymous"), //
		jMethod<::jboolean()>("isMN"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::org::ietf::jgss::GSSName, typename... Args>
	auto canonicalize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canonicalize")] != -1);
		return call<R>("canonicalize", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto export_(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("export")] != -1);
		return call<R>("export", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::jgss::spi::GSSNameSpi, typename... Args>
	auto getElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getElement")] != -1);
		return call<R>("getElement", std::forward<Args>(args)...);
	}

	template<typename R = ::org::ietf::jgss::Oid, typename... Args>
	auto getStringNameType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStringNameType")] != -1);
		return call<R>("getStringNameType", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAnonymous(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAnonymous")] != -1);
		return call<R>("isAnonymous", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isMN(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isMN")] != -1);
		return call<R>("isMN", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
