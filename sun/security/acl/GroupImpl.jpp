#ifndef sun_security_acl_GroupImpl_HPP
#define sun_security_acl_GroupImpl_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::acl::GroupImpl : public jObject<::sun::security::acl::GroupImpl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_acl / "GroupImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
		jMethod<::jboolean(::java::security::Principal)>("addMember"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jboolean(::java::security::acl::Group)>("equals"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean(::java::security::Principal)>("isMember"), //
		jMethod<::java::util::Enumeration()>("members"), //
		jMethod<::jboolean(::java::security::Principal)>("removeMember"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto addMember(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addMember")] != -1);
		return call<R>("addMember", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isMember(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isMember")] != -1);
		return call<R>("isMember", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto members(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("members")] != -1);
		return call<R>("members", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto removeMember(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeMember")] != -1);
		return call<R>("removeMember", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
