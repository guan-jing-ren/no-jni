#ifndef sun_security_acl_AclImpl_HPP
#define sun_security_acl_AclImpl_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::acl::AclImpl : public jObject<::sun::security::acl::AclImpl, ::sun::security::acl::OwnerImpl> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_acl / "AclImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::security::Principal, ::java::lang::String)>(), //
		jMethod<::jboolean(::java::security::Principal, ::java::security::acl::AclEntry)>("addEntry"), //
		jMethod<::jboolean(::java::security::Principal, ::java::security::acl::Permission)>("checkPermission"), //
		jMethod<::java::util::Enumeration()>("entries"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::util::Enumeration(::java::security::Principal)>("getPermissions"), //
		jMethod<::jboolean(::java::security::Principal, ::java::security::acl::AclEntry)>("removeEntry"), //
		jMethod<::jvoid(::java::security::Principal, ::java::lang::String)>("setName"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto addEntry(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addEntry")] != -1);
		return call<R>("addEntry", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto checkPermission(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkPermission")] != -1);
		return call<R>("checkPermission", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto entries(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("entries")] != -1);
		return call<R>("entries", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto getPermissions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPermissions")] != -1);
		return call<R>("getPermissions", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto removeEntry(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeEntry")] != -1);
		return call<R>("removeEntry", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setName")] != -1);
		return call<R>("setName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
