#ifndef sun_security_rsa_RSACore_HPP
#define sun_security_rsa_RSACore_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::rsa::RSACore : public jObject<::sun::security::rsa::RSACore, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_rsa / "RSACore";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jbyte *(::jbyte *, ::jint, ::jint)>("convert"), //
		jMethod<::jint(::java::math::BigInteger)>("getByteLength"), //
		jMethod<::jint(::java::security::interfaces::RSAKey)>("getByteLength"), //
		jMethod<::jbyte *(::jbyte *, ::java::security::interfaces::RSAPrivateKey)>("rsa"), //
		jMethod<::jbyte *(::jbyte *, ::java::security::interfaces::RSAPrivateKey, ::jboolean)>("rsa"), //
		jMethod<::jbyte *(::jbyte *, ::java::security::interfaces::RSAPublicKey)>("rsa"), //
	};

	template<typename R = ::jbyte *, typename... Args>
	static auto convert(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("convert")] != -1);
		return scall<R>("convert", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getByteLength(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getByteLength")] != -1);
		return scall<R>("getByteLength", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	static auto rsa(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rsa")] != -1);
		return scall<R>("rsa", std::forward<Args>(args)...);
	}

};

#endif
