#ifndef sun_security_rsa_RSAPublicKeyImpl_HPP
#define sun_security_rsa_RSAPublicKeyImpl_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::rsa::RSAPublicKeyImpl : public jObject<::sun::security::rsa::RSAPublicKeyImpl, ::sun::security::x509::X509Key> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_rsa / "RSAPublicKeyImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::math::BigInteger, ::java::math::BigInteger)>(), //
		jConstructor<::jvoid(::jbyte *)>(), //
		jMethod<::java::lang::String()>("getAlgorithm"), //
		jMethod<::java::math::BigInteger()>("getModulus"), //
		jMethod<::java::math::BigInteger()>("getPublicExponent"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getAlgorithm(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlgorithm")] != -1);
		return call<R>("getAlgorithm", std::forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto getModulus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getModulus")] != -1);
		return call<R>("getModulus", std::forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto getPublicExponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPublicExponent")] != -1);
		return call<R>("getPublicExponent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
