#ifndef sun_security_util_KeyUtil_HPP
#define sun_security_util_KeyUtil_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::util::KeyUtil : public jObject<::sun::security::util::KeyUtil, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_util / "KeyUtil";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jbyte *(::jint, ::jint, ::java::security::SecureRandom, ::jbyte *, ::jboolean)>("checkTlsPreMasterSecretKey"), //
		jMethod<::jint(::java::security::Key)>("getKeySize"), //
		jMethod<::jboolean(::java::lang::String)>("isOracleJCEProvider"), //
		jMethod<::jbyte *(::jbyte *)>("trimZeroes"), //
		jMethod<::jvoid(::java::security::Key)>("validate"), //
		jMethod<::jvoid(::java::security::spec::KeySpec)>("validate"), //
	};

	template<typename R = ::jbyte *, typename... Args>
	static auto checkTlsPreMasterSecretKey(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkTlsPreMasterSecretKey")] != -1);
		return scall<R>("checkTlsPreMasterSecretKey", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getKeySize(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeySize")] != -1);
		return scall<R>("getKeySize", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isOracleJCEProvider(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isOracleJCEProvider")] != -1);
		return scall<R>("isOracleJCEProvider", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	static auto trimZeroes(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("trimZeroes")] != -1);
		return scall<R>("trimZeroes", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto validate(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("validate")] != -1);
		return scall<R>("validate", std::forward<Args>(args)...);
	}

};

#endif
