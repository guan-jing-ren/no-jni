#ifndef sun_security_util_Cache_HPP
#define sun_security_util_Cache_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::util::Cache : public jObject<::sun::security::util::Cache, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_util / "Cache";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::sun::security::util::Cache$CacheVisitor)>("accept"), //
		jMethod<::jvoid()>("clear"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("get"), //
		jMethod<::sun::security::util::Cache(::jint)>("newHardMemoryCache"), //
		jMethod<::sun::security::util::Cache(::jint, ::jint)>("newHardMemoryCache"), //
		jMethod<::sun::security::util::Cache()>("newNullCache"), //
		jMethod<::sun::security::util::Cache(::jint)>("newSoftMemoryCache"), //
		jMethod<::sun::security::util::Cache(::jint, ::jint)>("newSoftMemoryCache"), //
		jMethod<::jvoid(::java::lang::Object, ::java::lang::Object)>("put"), //
		jMethod<::jvoid(::java::lang::Object)>("remove"), //
		jMethod<::jvoid(::jint)>("setCapacity"), //
		jMethod<::jvoid(::jint)>("setTimeout"), //
		jMethod<::jint()>("size"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto accept(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("accept")] != -1);
		return call<R>("accept", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::util::Cache, typename... Args>
	static auto newHardMemoryCache(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newHardMemoryCache")] != -1);
		return scall<R>("newHardMemoryCache", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::util::Cache, typename... Args>
	static auto newNullCache(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newNullCache")] != -1);
		return scall<R>("newNullCache", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::util::Cache, typename... Args>
	static auto newSoftMemoryCache(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newSoftMemoryCache")] != -1);
		return scall<R>("newSoftMemoryCache", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto put(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("put")] != -1);
		return call<R>("put", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCapacity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCapacity")] != -1);
		return call<R>("setCapacity", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTimeout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTimeout")] != -1);
		return call<R>("setTimeout", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto size(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("size")] != -1);
		return call<R>("size", std::forward<Args>(args)...);
	}

};

#endif
