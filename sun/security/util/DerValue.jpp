#ifndef sun_security_util_DerValue_HPP
#define sun_security_util_DerValue_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::util::DerValue : public jObject<::sun::security::util::DerValue, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_util / "DerValue";

	constexpr static Enume field_signatures{
		jField<::jbyte>("TAG_APPLICATION"), //
		jField<::jbyte>("TAG_CONTEXT"), //
		jField<::jbyte>("TAG_PRIVATE"), //
		jField<::jbyte>("TAG_UNIVERSAL"), //
		jField<::sun::security::util::DerInputStream>("data"), //
		jField<::jbyte>("tag"), //
		jField<::jbyte>("tag_BMPString"), //
		jField<::jbyte>("tag_BitString"), //
		jField<::jbyte>("tag_Boolean"), //
		jField<::jbyte>("tag_Enumerated"), //
		jField<::jbyte>("tag_GeneralString"), //
		jField<::jbyte>("tag_GeneralizedTime"), //
		jField<::jbyte>("tag_IA5String"), //
		jField<::jbyte>("tag_Integer"), //
		jField<::jbyte>("tag_Null"), //
		jField<::jbyte>("tag_ObjectId"), //
		jField<::jbyte>("tag_OctetString"), //
		jField<::jbyte>("tag_PrintableString"), //
		jField<::jbyte>("tag_Sequence"), //
		jField<::jbyte>("tag_SequenceOf"), //
		jField<::jbyte>("tag_Set"), //
		jField<::jbyte>("tag_SetOf"), //
		jField<::jbyte>("tag_T61String"), //
		jField<::jbyte>("tag_UTF8String"), //
		jField<::jbyte>("tag_UniversalString"), //
		jField<::jbyte>("tag_UtcTime"), //
	};

	template<typename F = ::jbyte>
	static auto TAG_APPLICATION() {
		static_assert(field_signatures[jField<F>("TAG_APPLICATION")] != -1);
		return sat<F>("TAG_APPLICATION");
	}

	template<typename F = ::jbyte>
	static auto TAG_CONTEXT() {
		static_assert(field_signatures[jField<F>("TAG_CONTEXT")] != -1);
		return sat<F>("TAG_CONTEXT");
	}

	template<typename F = ::jbyte>
	static auto TAG_PRIVATE() {
		static_assert(field_signatures[jField<F>("TAG_PRIVATE")] != -1);
		return sat<F>("TAG_PRIVATE");
	}

	template<typename F = ::jbyte>
	static auto TAG_UNIVERSAL() {
		static_assert(field_signatures[jField<F>("TAG_UNIVERSAL")] != -1);
		return sat<F>("TAG_UNIVERSAL");
	}

	template<typename F = ::sun::security::util::DerInputStream>
	auto data() const {
		static_assert(field_signatures[jField<F>("data")] != -1);
		return at<F>("data");
	}

	template<typename F = ::jbyte>
	auto tag() const {
		static_assert(field_signatures[jField<F>("tag")] != -1);
		return at<F>("tag");
	}

	template<typename F = ::jbyte>
	static auto tag_BMPString() {
		static_assert(field_signatures[jField<F>("tag_BMPString")] != -1);
		return sat<F>("tag_BMPString");
	}

	template<typename F = ::jbyte>
	static auto tag_BitString() {
		static_assert(field_signatures[jField<F>("tag_BitString")] != -1);
		return sat<F>("tag_BitString");
	}

	template<typename F = ::jbyte>
	static auto tag_Boolean() {
		static_assert(field_signatures[jField<F>("tag_Boolean")] != -1);
		return sat<F>("tag_Boolean");
	}

	template<typename F = ::jbyte>
	static auto tag_Enumerated() {
		static_assert(field_signatures[jField<F>("tag_Enumerated")] != -1);
		return sat<F>("tag_Enumerated");
	}

	template<typename F = ::jbyte>
	static auto tag_GeneralString() {
		static_assert(field_signatures[jField<F>("tag_GeneralString")] != -1);
		return sat<F>("tag_GeneralString");
	}

	template<typename F = ::jbyte>
	static auto tag_GeneralizedTime() {
		static_assert(field_signatures[jField<F>("tag_GeneralizedTime")] != -1);
		return sat<F>("tag_GeneralizedTime");
	}

	template<typename F = ::jbyte>
	static auto tag_IA5String() {
		static_assert(field_signatures[jField<F>("tag_IA5String")] != -1);
		return sat<F>("tag_IA5String");
	}

	template<typename F = ::jbyte>
	static auto tag_Integer() {
		static_assert(field_signatures[jField<F>("tag_Integer")] != -1);
		return sat<F>("tag_Integer");
	}

	template<typename F = ::jbyte>
	static auto tag_Null() {
		static_assert(field_signatures[jField<F>("tag_Null")] != -1);
		return sat<F>("tag_Null");
	}

	template<typename F = ::jbyte>
	static auto tag_ObjectId() {
		static_assert(field_signatures[jField<F>("tag_ObjectId")] != -1);
		return sat<F>("tag_ObjectId");
	}

	template<typename F = ::jbyte>
	static auto tag_OctetString() {
		static_assert(field_signatures[jField<F>("tag_OctetString")] != -1);
		return sat<F>("tag_OctetString");
	}

	template<typename F = ::jbyte>
	static auto tag_PrintableString() {
		static_assert(field_signatures[jField<F>("tag_PrintableString")] != -1);
		return sat<F>("tag_PrintableString");
	}

	template<typename F = ::jbyte>
	static auto tag_Sequence() {
		static_assert(field_signatures[jField<F>("tag_Sequence")] != -1);
		return sat<F>("tag_Sequence");
	}

	template<typename F = ::jbyte>
	static auto tag_SequenceOf() {
		static_assert(field_signatures[jField<F>("tag_SequenceOf")] != -1);
		return sat<F>("tag_SequenceOf");
	}

	template<typename F = ::jbyte>
	static auto tag_Set() {
		static_assert(field_signatures[jField<F>("tag_Set")] != -1);
		return sat<F>("tag_Set");
	}

	template<typename F = ::jbyte>
	static auto tag_SetOf() {
		static_assert(field_signatures[jField<F>("tag_SetOf")] != -1);
		return sat<F>("tag_SetOf");
	}

	template<typename F = ::jbyte>
	static auto tag_T61String() {
		static_assert(field_signatures[jField<F>("tag_T61String")] != -1);
		return sat<F>("tag_T61String");
	}

	template<typename F = ::jbyte>
	static auto tag_UTF8String() {
		static_assert(field_signatures[jField<F>("tag_UTF8String")] != -1);
		return sat<F>("tag_UTF8String");
	}

	template<typename F = ::jbyte>
	static auto tag_UniversalString() {
		static_assert(field_signatures[jField<F>("tag_UniversalString")] != -1);
		return sat<F>("tag_UniversalString");
	}

	template<typename F = ::jbyte>
	static auto tag_UtcTime() {
		static_assert(field_signatures[jField<F>("tag_UtcTime")] != -1);
		return sat<F>("tag_UtcTime");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jbyte, ::java::lang::String)>(), //
		jConstructor<::jvoid(::jbyte, ::jbyte *)>(), //
		jConstructor<::jvoid(::java::io::InputStream)>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::jbyte *)>(), //
		jConstructor<::jvoid(::jbyte *, ::jint, ::jint)>(), //
		jMethod<::jbyte(::jbyte, ::jboolean, ::jbyte)>("createTag"), //
		jMethod<::jvoid(::sun::security::util::DerOutputStream)>("encode"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jboolean(::sun::security::util::DerValue)>("equals"), //
		jMethod<::java::lang::String()>("getAsString"), //
		jMethod<::java::lang::String()>("getBMPString"), //
		jMethod<::java::math::BigInteger()>("getBigInteger"), //
		jMethod<::jbyte *()>("getBitString"), //
		jMethod<::jbyte *(::jboolean)>("getBitString"), //
		jMethod<::jboolean()>("getBoolean"), //
		jMethod<::sun::security::util::DerInputStream()>("getData"), //
		jMethod<::jbyte *()>("getDataBytes"), //
		jMethod<::jint()>("getEnumerated"), //
		jMethod<::java::lang::String()>("getGeneralString"), //
		jMethod<::java::util::Date()>("getGeneralizedTime"), //
		jMethod<::java::lang::String()>("getIA5String"), //
		jMethod<::jint()>("getInteger"), //
		jMethod<::sun::security::util::ObjectIdentifier()>("getOID"), //
		jMethod<::jbyte *()>("getOctetString"), //
		jMethod<::java::math::BigInteger()>("getPositiveBigInteger"), //
		jMethod<::java::lang::String()>("getPrintableString"), //
		jMethod<::java::lang::String()>("getT61String"), //
		jMethod<::jbyte()>("getTag"), //
		jMethod<::java::util::Date()>("getUTCTime"), //
		jMethod<::java::lang::String()>("getUTF8String"), //
		jMethod<::sun::security::util::BitArray()>("getUnalignedBitString"), //
		jMethod<::sun::security::util::BitArray(::jboolean)>("getUnalignedBitString"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isApplication"), //
		jMethod<::jboolean()>("isConstructed"), //
		jMethod<::jboolean(::jbyte)>("isConstructed"), //
		jMethod<::jboolean()>("isContextSpecific"), //
		jMethod<::jboolean(::jbyte)>("isContextSpecific"), //
		jMethod<::jboolean(::jchar)>("isPrintableStringChar"), //
		jMethod<::jboolean()>("isUniversal"), //
		jMethod<::jint()>("length"), //
		jMethod<::jvoid(::jbyte)>("resetTag"), //
		jMethod<::jbyte *()>("toByteArray"), //
		jMethod<::sun::security::util::DerInputStream()>("toDerInputStream"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jbyte, typename... Args>
	static auto createTag(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createTag")] != -1);
		return scall<R>("createTag", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto encode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("encode")] != -1);
		return call<R>("encode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAsString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAsString")] != -1);
		return call<R>("getAsString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBMPString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBMPString")] != -1);
		return call<R>("getBMPString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto getBigInteger(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBigInteger")] != -1);
		return call<R>("getBigInteger", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getBitString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBitString")] != -1);
		return call<R>("getBitString", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getBoolean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBoolean")] != -1);
		return call<R>("getBoolean", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::util::DerInputStream, typename... Args>
	auto getData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getData")] != -1);
		return call<R>("getData", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getDataBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDataBytes")] != -1);
		return call<R>("getDataBytes", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getEnumerated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEnumerated")] != -1);
		return call<R>("getEnumerated", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getGeneralString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGeneralString")] != -1);
		return call<R>("getGeneralString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Date, typename... Args>
	auto getGeneralizedTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGeneralizedTime")] != -1);
		return call<R>("getGeneralizedTime", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getIA5String(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIA5String")] != -1);
		return call<R>("getIA5String", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getInteger(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInteger")] != -1);
		return call<R>("getInteger", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::util::ObjectIdentifier, typename... Args>
	auto getOID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOID")] != -1);
		return call<R>("getOID", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getOctetString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOctetString")] != -1);
		return call<R>("getOctetString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto getPositiveBigInteger(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPositiveBigInteger")] != -1);
		return call<R>("getPositiveBigInteger", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPrintableString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrintableString")] != -1);
		return call<R>("getPrintableString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getT61String(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getT61String")] != -1);
		return call<R>("getT61String", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto getTag(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTag")] != -1);
		return call<R>("getTag", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Date, typename... Args>
	auto getUTCTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUTCTime")] != -1);
		return call<R>("getUTCTime", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUTF8String(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUTF8String")] != -1);
		return call<R>("getUTF8String", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::util::BitArray, typename... Args>
	auto getUnalignedBitString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUnalignedBitString")] != -1);
		return call<R>("getUnalignedBitString", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isApplication(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isApplication")] != -1);
		return call<R>("isApplication", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isConstructed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isConstructed")] != -1);
		return call<R>("isConstructed", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isContextSpecific(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isContextSpecific")] != -1);
		return call<R>("isContextSpecific", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isPrintableStringChar(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPrintableStringChar")] != -1);
		return scall<R>("isPrintableStringChar", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isUniversal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isUniversal")] != -1);
		return call<R>("isUniversal", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto length(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("length")] != -1);
		return call<R>("length", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto resetTag(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("resetTag")] != -1);
		return call<R>("resetTag", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto toByteArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toByteArray")] != -1);
		return call<R>("toByteArray", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::util::DerInputStream, typename... Args>
	auto toDerInputStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toDerInputStream")] != -1);
		return call<R>("toDerInputStream", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
