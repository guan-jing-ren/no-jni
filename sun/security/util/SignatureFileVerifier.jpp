#ifndef sun_security_util_SignatureFileVerifier_HPP
#define sun_security_util_SignatureFileVerifier_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::util::SignatureFileVerifier : public jObject<::sun::security::util::SignatureFileVerifier, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_util / "SignatureFileVerifier";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::util::ArrayList, ::sun::security::util::ManifestDigester, ::java::lang::String, ::jbyte *)>(), //
		jMethod<::jboolean(::java::lang::String)>("isBlockOrSF"), //
		jMethod<::jboolean(::java::lang::String)>("isSigningRelated"), //
		jMethod<::jboolean(::java::lang::String)>("needSignatureFile"), //
		jMethod<::jboolean()>("needSignatureFileBytes"), //
		jMethod<::jvoid(::java::util::Hashtable, ::java::util::List)>("process"), //
		jMethod<::jvoid(::jbyte *)>("setSignatureFile"), //
	};

	template<typename R = ::jboolean, typename... Args>
	static auto isBlockOrSF(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isBlockOrSF")] != -1);
		return scall<R>("isBlockOrSF", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isSigningRelated(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSigningRelated")] != -1);
		return scall<R>("isSigningRelated", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto needSignatureFile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("needSignatureFile")] != -1);
		return call<R>("needSignatureFile", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto needSignatureFileBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("needSignatureFileBytes")] != -1);
		return call<R>("needSignatureFileBytes", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto process(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("process")] != -1);
		return call<R>("process", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSignatureFile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSignatureFile")] != -1);
		return call<R>("setSignatureFile", std::forward<Args>(args)...);
	}

};

#endif
