#ifndef sun_security_util_SecurityConstants$AWT_HPP
#define sun_security_util_SecurityConstants$AWT_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::util::SecurityConstants$AWT : public jObject<::sun::security::util::SecurityConstants$AWT, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_util / "SecurityConstants$AWT";

	constexpr static Enume field_signatures{
		jField<::java::security::Permission>("ACCESS_CLIPBOARD_PERMISSION"), //
		jField<::java::security::Permission>("ACCESS_SYSTEM_TRAY_PERMISSION"), //
		jField<::java::security::Permission>("ALL_AWT_EVENTS_PERMISSION"), //
		jField<::java::security::Permission>("CHECK_AWT_EVENTQUEUE_PERMISSION"), //
		jField<::java::security::Permission>("CREATE_ROBOT_PERMISSION"), //
		jField<::java::security::Permission>("READ_DISPLAY_PIXELS_PERMISSION"), //
		jField<::java::security::Permission>("SET_WINDOW_ALWAYS_ON_TOP_PERMISSION"), //
		jField<::java::security::Permission>("TOOLKIT_MODALITY_PERMISSION"), //
		jField<::java::security::Permission>("TOPLEVEL_WINDOW_PERMISSION"), //
		jField<::java::security::Permission>("WATCH_MOUSE_PERMISSION"), //
	};

	template<typename F = ::java::security::Permission>
	static auto ACCESS_CLIPBOARD_PERMISSION() {
		static_assert(field_signatures[jField<F>("ACCESS_CLIPBOARD_PERMISSION")] != -1);
		return sat<F>("ACCESS_CLIPBOARD_PERMISSION");
	}

	template<typename F = ::java::security::Permission>
	static auto ACCESS_SYSTEM_TRAY_PERMISSION() {
		static_assert(field_signatures[jField<F>("ACCESS_SYSTEM_TRAY_PERMISSION")] != -1);
		return sat<F>("ACCESS_SYSTEM_TRAY_PERMISSION");
	}

	template<typename F = ::java::security::Permission>
	static auto ALL_AWT_EVENTS_PERMISSION() {
		static_assert(field_signatures[jField<F>("ALL_AWT_EVENTS_PERMISSION")] != -1);
		return sat<F>("ALL_AWT_EVENTS_PERMISSION");
	}

	template<typename F = ::java::security::Permission>
	static auto CHECK_AWT_EVENTQUEUE_PERMISSION() {
		static_assert(field_signatures[jField<F>("CHECK_AWT_EVENTQUEUE_PERMISSION")] != -1);
		return sat<F>("CHECK_AWT_EVENTQUEUE_PERMISSION");
	}

	template<typename F = ::java::security::Permission>
	static auto CREATE_ROBOT_PERMISSION() {
		static_assert(field_signatures[jField<F>("CREATE_ROBOT_PERMISSION")] != -1);
		return sat<F>("CREATE_ROBOT_PERMISSION");
	}

	template<typename F = ::java::security::Permission>
	static auto READ_DISPLAY_PIXELS_PERMISSION() {
		static_assert(field_signatures[jField<F>("READ_DISPLAY_PIXELS_PERMISSION")] != -1);
		return sat<F>("READ_DISPLAY_PIXELS_PERMISSION");
	}

	template<typename F = ::java::security::Permission>
	static auto SET_WINDOW_ALWAYS_ON_TOP_PERMISSION() {
		static_assert(field_signatures[jField<F>("SET_WINDOW_ALWAYS_ON_TOP_PERMISSION")] != -1);
		return sat<F>("SET_WINDOW_ALWAYS_ON_TOP_PERMISSION");
	}

	template<typename F = ::java::security::Permission>
	static auto TOOLKIT_MODALITY_PERMISSION() {
		static_assert(field_signatures[jField<F>("TOOLKIT_MODALITY_PERMISSION")] != -1);
		return sat<F>("TOOLKIT_MODALITY_PERMISSION");
	}

	template<typename F = ::java::security::Permission>
	static auto TOPLEVEL_WINDOW_PERMISSION() {
		static_assert(field_signatures[jField<F>("TOPLEVEL_WINDOW_PERMISSION")] != -1);
		return sat<F>("TOPLEVEL_WINDOW_PERMISSION");
	}

	template<typename F = ::java::security::Permission>
	static auto WATCH_MOUSE_PERMISSION() {
		static_assert(field_signatures[jField<F>("WATCH_MOUSE_PERMISSION")] != -1);
		return sat<F>("WATCH_MOUSE_PERMISSION");
	}

	constexpr static Enume method_signatures{
		cexprstr{"\0"}, //
	};

};

#endif
