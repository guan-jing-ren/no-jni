#ifndef sun_security_util_ManifestDigester_HPP
#define sun_security_util_ManifestDigester_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::util::ManifestDigester : public jObject<::sun::security::util::ManifestDigester, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_util / "ManifestDigester";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("MF_MAIN_ATTRS"), //
	};

	template<typename F = ::java::lang::String>
	static auto MF_MAIN_ATTRS() {
		static_assert(field_signatures[jField<F>("MF_MAIN_ATTRS")] != -1);
		return sat<F>("MF_MAIN_ATTRS");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jbyte *)>(), //
		jMethod<::sun::security::util::ManifestDigester$Entry(::java::lang::String, ::jboolean)>("get"), //
		jMethod<::jbyte *(::java::security::MessageDigest)>("manifestDigest"), //
	};

	template<typename R = ::sun::security::util::ManifestDigester$Entry, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto manifestDigest(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("manifestDigest")] != -1);
		return call<R>("manifestDigest", std::forward<Args>(args)...);
	}

};

#endif
