#ifndef sun_security_util_PolicyUtil_HPP
#define sun_security_util_PolicyUtil_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::util::PolicyUtil : public jObject<::sun::security::util::PolicyUtil, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_util / "PolicyUtil";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::io::InputStream(::java::net::URL)>("getInputStream"), //
		jMethod<::java::security::KeyStore(::java::net::URL, ::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::lang::String, ::sun::security::util::Debug)>("getKeyStore"), //
	};

	template<typename R = ::java::io::InputStream, typename... Args>
	static auto getInputStream(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInputStream")] != -1);
		return scall<R>("getInputStream", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::KeyStore, typename... Args>
	static auto getKeyStore(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeyStore")] != -1);
		return scall<R>("getKeyStore", std::forward<Args>(args)...);
	}

};

#endif
