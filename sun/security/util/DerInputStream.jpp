#ifndef sun_security_util_DerInputStream_HPP
#define sun_security_util_DerInputStream_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::util::DerInputStream : public jObject<::sun::security::util::DerInputStream, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_util / "DerInputStream";

	constexpr static Enume field_signatures{
		jField<::jbyte>("tag"), //
	};

	template<typename F = ::jbyte>
	auto tag() const {
		static_assert(field_signatures[jField<F>("tag")] != -1);
		return at<F>("tag");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jbyte *)>(), //
		jConstructor<::jvoid(::jbyte *, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::jbyte *, ::jint, ::jint, ::jboolean)>(), //
		jMethod<::jint()>("available"), //
		jMethod<::java::lang::String()>("getBMPString"), //
		jMethod<::java::math::BigInteger()>("getBigInteger"), //
		jMethod<::jbyte *()>("getBitString"), //
		jMethod<::jvoid(::jbyte *)>("getBytes"), //
		jMethod<::sun::security::util::DerValue()>("getDerValue"), //
		jMethod<::jint()>("getEnumerated"), //
		jMethod<::java::lang::String()>("getGeneralString"), //
		jMethod<::java::util::Date()>("getGeneralizedTime"), //
		jMethod<::java::lang::String()>("getIA5String"), //
		jMethod<::jint()>("getInteger"), //
		jMethod<::jvoid()>("getNull"), //
		jMethod<::sun::security::util::ObjectIdentifier()>("getOID"), //
		jMethod<::jbyte *()>("getOctetString"), //
		jMethod<::java::math::BigInteger()>("getPositiveBigInteger"), //
		jMethod<::java::lang::String()>("getPrintableString"), //
		jMethod<::sun::security::util::DerValue *(::jint)>("getSequence"), //
		jMethod<::sun::security::util::DerValue *(::jint)>("getSet"), //
		jMethod<::sun::security::util::DerValue *(::jint, ::jboolean)>("getSet"), //
		jMethod<::java::lang::String()>("getT61String"), //
		jMethod<::java::util::Date()>("getUTCTime"), //
		jMethod<::java::lang::String()>("getUTF8String"), //
		jMethod<::sun::security::util::BitArray()>("getUnalignedBitString"), //
		jMethod<::jvoid(::jint)>("mark"), //
		jMethod<::jint()>("peekByte"), //
		jMethod<::jvoid()>("reset"), //
		jMethod<::sun::security::util::DerInputStream(::jint, ::jboolean)>("subStream"), //
		jMethod<::jbyte *()>("toByteArray"), //
	};

	template<typename R = ::jint, typename... Args>
	auto available(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("available")] != -1);
		return call<R>("available", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBMPString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBMPString")] != -1);
		return call<R>("getBMPString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto getBigInteger(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBigInteger")] != -1);
		return call<R>("getBigInteger", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getBitString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBitString")] != -1);
		return call<R>("getBitString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBytes")] != -1);
		return call<R>("getBytes", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::util::DerValue, typename... Args>
	auto getDerValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDerValue")] != -1);
		return call<R>("getDerValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getEnumerated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEnumerated")] != -1);
		return call<R>("getEnumerated", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getGeneralString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGeneralString")] != -1);
		return call<R>("getGeneralString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Date, typename... Args>
	auto getGeneralizedTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGeneralizedTime")] != -1);
		return call<R>("getGeneralizedTime", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getIA5String(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIA5String")] != -1);
		return call<R>("getIA5String", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getInteger(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInteger")] != -1);
		return call<R>("getInteger", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getNull(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNull")] != -1);
		return call<R>("getNull", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::util::ObjectIdentifier, typename... Args>
	auto getOID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOID")] != -1);
		return call<R>("getOID", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getOctetString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOctetString")] != -1);
		return call<R>("getOctetString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto getPositiveBigInteger(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPositiveBigInteger")] != -1);
		return call<R>("getPositiveBigInteger", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPrintableString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrintableString")] != -1);
		return call<R>("getPrintableString", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::util::DerValue *, typename... Args>
	auto getSequence(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSequence")] != -1);
		return call<R>("getSequence", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::util::DerValue *, typename... Args>
	auto getSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSet")] != -1);
		return call<R>("getSet", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getT61String(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getT61String")] != -1);
		return call<R>("getT61String", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Date, typename... Args>
	auto getUTCTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUTCTime")] != -1);
		return call<R>("getUTCTime", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUTF8String(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUTF8String")] != -1);
		return call<R>("getUTF8String", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::util::BitArray, typename... Args>
	auto getUnalignedBitString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUnalignedBitString")] != -1);
		return call<R>("getUnalignedBitString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mark(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mark")] != -1);
		return call<R>("mark", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto peekByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("peekByte")] != -1);
		return call<R>("peekByte", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::util::DerInputStream, typename... Args>
	auto subStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("subStream")] != -1);
		return call<R>("subStream", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto toByteArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toByteArray")] != -1);
		return call<R>("toByteArray", std::forward<Args>(args)...);
	}

};

#endif
