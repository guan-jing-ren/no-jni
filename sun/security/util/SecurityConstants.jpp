#ifndef sun_security_util_SecurityConstants_HPP
#define sun_security_util_SecurityConstants_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::util::SecurityConstants : public jObject<::sun::security::util::SecurityConstants, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_util / "SecurityConstants";

	constexpr static Enume field_signatures{
		jField<::java::security::AllPermission>("ALL_PERMISSION"), //
		jField<::java::lang::RuntimePermission>("CHECK_MEMBER_ACCESS_PERMISSION"), //
		jField<::java::security::SecurityPermission>("CREATE_ACC_PERMISSION"), //
		jField<::java::lang::RuntimePermission>("CREATE_CLASSLOADER_PERMISSION"), //
		jField<::java::lang::String>("FILE_DELETE_ACTION"), //
		jField<::java::lang::String>("FILE_EXECUTE_ACTION"), //
		jField<::java::lang::String>("FILE_READLINK_ACTION"), //
		jField<::java::lang::String>("FILE_READ_ACTION"), //
		jField<::java::lang::String>("FILE_WRITE_ACTION"), //
		jField<::java::lang::RuntimePermission>("GET_CLASSLOADER_PERMISSION"), //
		jField<::java::security::SecurityPermission>("GET_COMBINER_PERMISSION"), //
		jField<::java::net::NetPermission>("GET_COOKIEHANDLER_PERMISSION"), //
		jField<::java::lang::RuntimePermission>("GET_PD_PERMISSION"), //
		jField<::java::security::SecurityPermission>("GET_POLICY_PERMISSION"), //
		jField<::java::net::NetPermission>("GET_PROXYSELECTOR_PERMISSION"), //
		jField<::java::net::NetPermission>("GET_RESPONSECACHE_PERMISSION"), //
		jField<::java::lang::RuntimePermission>("GET_STACK_TRACE_PERMISSION"), //
		jField<::java::net::SocketPermission>("LOCAL_LISTEN_PERMISSION"), //
		jField<::java::lang::RuntimePermission>("MODIFY_THREADGROUP_PERMISSION"), //
		jField<::java::lang::RuntimePermission>("MODIFY_THREAD_PERMISSION"), //
		jField<::java::lang::String>("PROPERTY_READ_ACTION"), //
		jField<::java::lang::String>("PROPERTY_RW_ACTION"), //
		jField<::java::lang::String>("PROPERTY_WRITE_ACTION"), //
		jField<::java::net::NetPermission>("SET_COOKIEHANDLER_PERMISSION"), //
		jField<::java::net::NetPermission>("SET_PROXYSELECTOR_PERMISSION"), //
		jField<::java::net::NetPermission>("SET_RESPONSECACHE_PERMISSION"), //
		jField<::java::lang::String>("SOCKET_ACCEPT_ACTION"), //
		jField<::java::lang::String>("SOCKET_CONNECT_ACCEPT_ACTION"), //
		jField<::java::lang::String>("SOCKET_CONNECT_ACTION"), //
		jField<::java::lang::String>("SOCKET_LISTEN_ACTION"), //
		jField<::java::lang::String>("SOCKET_RESOLVE_ACTION"), //
		jField<::java::net::NetPermission>("SPECIFY_HANDLER_PERMISSION"), //
		jField<::java::lang::RuntimePermission>("STOP_THREAD_PERMISSION"), //
	};

	template<typename F = ::java::security::AllPermission>
	static auto ALL_PERMISSION() {
		static_assert(field_signatures[jField<F>("ALL_PERMISSION")] != -1);
		return sat<F>("ALL_PERMISSION");
	}

	template<typename F = ::java::lang::RuntimePermission>
	static auto CHECK_MEMBER_ACCESS_PERMISSION() {
		static_assert(field_signatures[jField<F>("CHECK_MEMBER_ACCESS_PERMISSION")] != -1);
		return sat<F>("CHECK_MEMBER_ACCESS_PERMISSION");
	}

	template<typename F = ::java::security::SecurityPermission>
	static auto CREATE_ACC_PERMISSION() {
		static_assert(field_signatures[jField<F>("CREATE_ACC_PERMISSION")] != -1);
		return sat<F>("CREATE_ACC_PERMISSION");
	}

	template<typename F = ::java::lang::RuntimePermission>
	static auto CREATE_CLASSLOADER_PERMISSION() {
		static_assert(field_signatures[jField<F>("CREATE_CLASSLOADER_PERMISSION")] != -1);
		return sat<F>("CREATE_CLASSLOADER_PERMISSION");
	}

	template<typename F = ::java::lang::String>
	static auto FILE_DELETE_ACTION() {
		static_assert(field_signatures[jField<F>("FILE_DELETE_ACTION")] != -1);
		return sat<F>("FILE_DELETE_ACTION");
	}

	template<typename F = ::java::lang::String>
	static auto FILE_EXECUTE_ACTION() {
		static_assert(field_signatures[jField<F>("FILE_EXECUTE_ACTION")] != -1);
		return sat<F>("FILE_EXECUTE_ACTION");
	}

	template<typename F = ::java::lang::String>
	static auto FILE_READLINK_ACTION() {
		static_assert(field_signatures[jField<F>("FILE_READLINK_ACTION")] != -1);
		return sat<F>("FILE_READLINK_ACTION");
	}

	template<typename F = ::java::lang::String>
	static auto FILE_READ_ACTION() {
		static_assert(field_signatures[jField<F>("FILE_READ_ACTION")] != -1);
		return sat<F>("FILE_READ_ACTION");
	}

	template<typename F = ::java::lang::String>
	static auto FILE_WRITE_ACTION() {
		static_assert(field_signatures[jField<F>("FILE_WRITE_ACTION")] != -1);
		return sat<F>("FILE_WRITE_ACTION");
	}

	template<typename F = ::java::lang::RuntimePermission>
	static auto GET_CLASSLOADER_PERMISSION() {
		static_assert(field_signatures[jField<F>("GET_CLASSLOADER_PERMISSION")] != -1);
		return sat<F>("GET_CLASSLOADER_PERMISSION");
	}

	template<typename F = ::java::security::SecurityPermission>
	static auto GET_COMBINER_PERMISSION() {
		static_assert(field_signatures[jField<F>("GET_COMBINER_PERMISSION")] != -1);
		return sat<F>("GET_COMBINER_PERMISSION");
	}

	template<typename F = ::java::net::NetPermission>
	static auto GET_COOKIEHANDLER_PERMISSION() {
		static_assert(field_signatures[jField<F>("GET_COOKIEHANDLER_PERMISSION")] != -1);
		return sat<F>("GET_COOKIEHANDLER_PERMISSION");
	}

	template<typename F = ::java::lang::RuntimePermission>
	static auto GET_PD_PERMISSION() {
		static_assert(field_signatures[jField<F>("GET_PD_PERMISSION")] != -1);
		return sat<F>("GET_PD_PERMISSION");
	}

	template<typename F = ::java::security::SecurityPermission>
	static auto GET_POLICY_PERMISSION() {
		static_assert(field_signatures[jField<F>("GET_POLICY_PERMISSION")] != -1);
		return sat<F>("GET_POLICY_PERMISSION");
	}

	template<typename F = ::java::net::NetPermission>
	static auto GET_PROXYSELECTOR_PERMISSION() {
		static_assert(field_signatures[jField<F>("GET_PROXYSELECTOR_PERMISSION")] != -1);
		return sat<F>("GET_PROXYSELECTOR_PERMISSION");
	}

	template<typename F = ::java::net::NetPermission>
	static auto GET_RESPONSECACHE_PERMISSION() {
		static_assert(field_signatures[jField<F>("GET_RESPONSECACHE_PERMISSION")] != -1);
		return sat<F>("GET_RESPONSECACHE_PERMISSION");
	}

	template<typename F = ::java::lang::RuntimePermission>
	static auto GET_STACK_TRACE_PERMISSION() {
		static_assert(field_signatures[jField<F>("GET_STACK_TRACE_PERMISSION")] != -1);
		return sat<F>("GET_STACK_TRACE_PERMISSION");
	}

	template<typename F = ::java::net::SocketPermission>
	static auto LOCAL_LISTEN_PERMISSION() {
		static_assert(field_signatures[jField<F>("LOCAL_LISTEN_PERMISSION")] != -1);
		return sat<F>("LOCAL_LISTEN_PERMISSION");
	}

	template<typename F = ::java::lang::RuntimePermission>
	static auto MODIFY_THREADGROUP_PERMISSION() {
		static_assert(field_signatures[jField<F>("MODIFY_THREADGROUP_PERMISSION")] != -1);
		return sat<F>("MODIFY_THREADGROUP_PERMISSION");
	}

	template<typename F = ::java::lang::RuntimePermission>
	static auto MODIFY_THREAD_PERMISSION() {
		static_assert(field_signatures[jField<F>("MODIFY_THREAD_PERMISSION")] != -1);
		return sat<F>("MODIFY_THREAD_PERMISSION");
	}

	template<typename F = ::java::lang::String>
	static auto PROPERTY_READ_ACTION() {
		static_assert(field_signatures[jField<F>("PROPERTY_READ_ACTION")] != -1);
		return sat<F>("PROPERTY_READ_ACTION");
	}

	template<typename F = ::java::lang::String>
	static auto PROPERTY_RW_ACTION() {
		static_assert(field_signatures[jField<F>("PROPERTY_RW_ACTION")] != -1);
		return sat<F>("PROPERTY_RW_ACTION");
	}

	template<typename F = ::java::lang::String>
	static auto PROPERTY_WRITE_ACTION() {
		static_assert(field_signatures[jField<F>("PROPERTY_WRITE_ACTION")] != -1);
		return sat<F>("PROPERTY_WRITE_ACTION");
	}

	template<typename F = ::java::net::NetPermission>
	static auto SET_COOKIEHANDLER_PERMISSION() {
		static_assert(field_signatures[jField<F>("SET_COOKIEHANDLER_PERMISSION")] != -1);
		return sat<F>("SET_COOKIEHANDLER_PERMISSION");
	}

	template<typename F = ::java::net::NetPermission>
	static auto SET_PROXYSELECTOR_PERMISSION() {
		static_assert(field_signatures[jField<F>("SET_PROXYSELECTOR_PERMISSION")] != -1);
		return sat<F>("SET_PROXYSELECTOR_PERMISSION");
	}

	template<typename F = ::java::net::NetPermission>
	static auto SET_RESPONSECACHE_PERMISSION() {
		static_assert(field_signatures[jField<F>("SET_RESPONSECACHE_PERMISSION")] != -1);
		return sat<F>("SET_RESPONSECACHE_PERMISSION");
	}

	template<typename F = ::java::lang::String>
	static auto SOCKET_ACCEPT_ACTION() {
		static_assert(field_signatures[jField<F>("SOCKET_ACCEPT_ACTION")] != -1);
		return sat<F>("SOCKET_ACCEPT_ACTION");
	}

	template<typename F = ::java::lang::String>
	static auto SOCKET_CONNECT_ACCEPT_ACTION() {
		static_assert(field_signatures[jField<F>("SOCKET_CONNECT_ACCEPT_ACTION")] != -1);
		return sat<F>("SOCKET_CONNECT_ACCEPT_ACTION");
	}

	template<typename F = ::java::lang::String>
	static auto SOCKET_CONNECT_ACTION() {
		static_assert(field_signatures[jField<F>("SOCKET_CONNECT_ACTION")] != -1);
		return sat<F>("SOCKET_CONNECT_ACTION");
	}

	template<typename F = ::java::lang::String>
	static auto SOCKET_LISTEN_ACTION() {
		static_assert(field_signatures[jField<F>("SOCKET_LISTEN_ACTION")] != -1);
		return sat<F>("SOCKET_LISTEN_ACTION");
	}

	template<typename F = ::java::lang::String>
	static auto SOCKET_RESOLVE_ACTION() {
		static_assert(field_signatures[jField<F>("SOCKET_RESOLVE_ACTION")] != -1);
		return sat<F>("SOCKET_RESOLVE_ACTION");
	}

	template<typename F = ::java::net::NetPermission>
	static auto SPECIFY_HANDLER_PERMISSION() {
		static_assert(field_signatures[jField<F>("SPECIFY_HANDLER_PERMISSION")] != -1);
		return sat<F>("SPECIFY_HANDLER_PERMISSION");
	}

	template<typename F = ::java::lang::RuntimePermission>
	static auto STOP_THREAD_PERMISSION() {
		static_assert(field_signatures[jField<F>("STOP_THREAD_PERMISSION")] != -1);
		return sat<F>("STOP_THREAD_PERMISSION");
	}

	constexpr static Enume method_signatures{
		cexprstr{"\0"}, //
	};

};

#endif
