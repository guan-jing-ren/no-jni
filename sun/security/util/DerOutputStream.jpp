#ifndef sun_security_util_DerOutputStream_HPP
#define sun_security_util_DerOutputStream_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::util::DerOutputStream : public jObject<::sun::security::util::DerOutputStream, ::java::io::ByteArrayOutputStream> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_util / "DerOutputStream";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint)>(), //
		jMethod<::jvoid(::java::io::OutputStream)>("derEncode"), //
		jMethod<::jvoid(::java::lang::String)>("putBMPString"), //
		jMethod<::jvoid(::jbyte *)>("putBitString"), //
		jMethod<::jvoid(::jboolean)>("putBoolean"), //
		jMethod<::jvoid(::sun::security::util::DerValue)>("putDerValue"), //
		jMethod<::jvoid(::jint)>("putEnumerated"), //
		jMethod<::jvoid(::java::lang::String)>("putGeneralString"), //
		jMethod<::jvoid(::java::util::Date)>("putGeneralizedTime"), //
		jMethod<::jvoid(::java::lang::String)>("putIA5String"), //
		jMethod<::jvoid(::jint)>("putInteger"), //
		jMethod<::jvoid(::java::lang::Integer)>("putInteger"), //
		jMethod<::jvoid(::java::math::BigInteger)>("putInteger"), //
		jMethod<::jvoid(::jint)>("putLength"), //
		jMethod<::jvoid()>("putNull"), //
		jMethod<::jvoid(::sun::security::util::ObjectIdentifier)>("putOID"), //
		jMethod<::jvoid(::jbyte *)>("putOctetString"), //
		jMethod<::jvoid(::jbyte, ::sun::security::util::DerEncoder *)>("putOrderedSet"), //
		jMethod<::jvoid(::jbyte, ::sun::security::util::DerEncoder *)>("putOrderedSetOf"), //
		jMethod<::jvoid(::java::lang::String)>("putPrintableString"), //
		jMethod<::jvoid(::sun::security::util::DerValue *)>("putSequence"), //
		jMethod<::jvoid(::sun::security::util::DerValue *)>("putSet"), //
		jMethod<::jvoid(::java::lang::String)>("putT61String"), //
		jMethod<::jvoid(::jbyte, ::jboolean, ::jbyte)>("putTag"), //
		jMethod<::jvoid(::sun::security::util::BitArray)>("putTruncatedUnalignedBitString"), //
		jMethod<::jvoid(::java::util::Date)>("putUTCTime"), //
		jMethod<::jvoid(::java::lang::String)>("putUTF8String"), //
		jMethod<::jvoid(::sun::security::util::BitArray)>("putUnalignedBitString"), //
		jMethod<::jvoid(::jbyte, ::sun::security::util::DerOutputStream)>("write"), //
		jMethod<::jvoid(::jbyte, ::jbyte *)>("write"), //
		jMethod<::jvoid(::jbyte, ::sun::security::util::DerOutputStream)>("writeImplicit"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto derEncode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("derEncode")] != -1);
		return call<R>("derEncode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putBMPString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putBMPString")] != -1);
		return call<R>("putBMPString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putBitString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putBitString")] != -1);
		return call<R>("putBitString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putBoolean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putBoolean")] != -1);
		return call<R>("putBoolean", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putDerValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putDerValue")] != -1);
		return call<R>("putDerValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putEnumerated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putEnumerated")] != -1);
		return call<R>("putEnumerated", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putGeneralString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putGeneralString")] != -1);
		return call<R>("putGeneralString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putGeneralizedTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putGeneralizedTime")] != -1);
		return call<R>("putGeneralizedTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putIA5String(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putIA5String")] != -1);
		return call<R>("putIA5String", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putInteger(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putInteger")] != -1);
		return call<R>("putInteger", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putLength")] != -1);
		return call<R>("putLength", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putNull(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putNull")] != -1);
		return call<R>("putNull", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putOID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putOID")] != -1);
		return call<R>("putOID", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putOctetString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putOctetString")] != -1);
		return call<R>("putOctetString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putOrderedSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putOrderedSet")] != -1);
		return call<R>("putOrderedSet", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putOrderedSetOf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putOrderedSetOf")] != -1);
		return call<R>("putOrderedSetOf", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putPrintableString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putPrintableString")] != -1);
		return call<R>("putPrintableString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putSequence(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putSequence")] != -1);
		return call<R>("putSequence", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putSet")] != -1);
		return call<R>("putSet", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putT61String(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putT61String")] != -1);
		return call<R>("putT61String", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putTag(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putTag")] != -1);
		return call<R>("putTag", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putTruncatedUnalignedBitString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putTruncatedUnalignedBitString")] != -1);
		return call<R>("putTruncatedUnalignedBitString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putUTCTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putUTCTime")] != -1);
		return call<R>("putUTCTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putUTF8String(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putUTF8String")] != -1);
		return call<R>("putUTF8String", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putUnalignedBitString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putUnalignedBitString")] != -1);
		return call<R>("putUnalignedBitString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write")] != -1);
		return call<R>("write", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeImplicit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeImplicit")] != -1);
		return call<R>("writeImplicit", std::forward<Args>(args)...);
	}

};

#endif
