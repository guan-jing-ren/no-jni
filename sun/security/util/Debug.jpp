#ifndef sun_security_util_Debug_HPP
#define sun_security_util_Debug_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::util::Debug : public jObject<::sun::security::util::Debug, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_util / "Debug";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid()>("Help"), //
		jMethod<::sun::security::util::Debug(::java::lang::String)>("getInstance"), //
		jMethod<::sun::security::util::Debug(::java::lang::String, ::java::lang::String)>("getInstance"), //
		jMethod<::jboolean(::java::lang::String)>("isOn"), //
		jMethod<::jvoid()>("println"), //
		jMethod<::jvoid(::java::lang::String)>("println"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("println"), //
		jMethod<::java::lang::String(::java::math::BigInteger)>("toHexString"), //
		jMethod<::java::lang::String(::jbyte *)>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	static auto Help(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("Help")] != -1);
		return scall<R>("Help", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::util::Debug, typename... Args>
	static auto getInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInstance")] != -1);
		return scall<R>("getInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isOn(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isOn")] != -1);
		return scall<R>("isOn", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto println(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("println")] != -1);
		return call<R>("println", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto toHexString(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toHexString")] != -1);
		return scall<R>("toHexString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto toString(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return scall<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
