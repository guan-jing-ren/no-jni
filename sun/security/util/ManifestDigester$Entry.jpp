#ifndef sun_security_util_ManifestDigester$Entry_HPP
#define sun_security_util_ManifestDigester$Entry_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::util::ManifestDigester$Entry : public jObject<::sun::security::util::ManifestDigester$Entry, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_util / "ManifestDigester$Entry";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint, ::jint, ::jint, ::jbyte *)>(), //
		jMethod<::jbyte *(::java::security::MessageDigest)>("digest"), //
		jMethod<::jbyte *(::java::security::MessageDigest)>("digestWorkaround"), //
	};

	template<typename R = ::jbyte *, typename... Args>
	auto digest(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("digest")] != -1);
		return call<R>("digest", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto digestWorkaround(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("digestWorkaround")] != -1);
		return call<R>("digestWorkaround", std::forward<Args>(args)...);
	}

};

#endif
