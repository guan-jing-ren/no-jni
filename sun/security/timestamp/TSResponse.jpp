#ifndef sun_security_timestamp_TSResponse_HPP
#define sun_security_timestamp_TSResponse_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::timestamp::TSResponse : public jObject<::sun::security::timestamp::TSResponse, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_timestamp / "TSResponse";

	constexpr static Enume field_signatures{
		jField<::jint>("ADD_INFO_NOT_AVAILABLE"), //
		jField<::jint>("BAD_ALG"), //
		jField<::jint>("BAD_DATA_FORMAT"), //
		jField<::jint>("BAD_REQUEST"), //
		jField<::jint>("GRANTED"), //
		jField<::jint>("GRANTED_WITH_MODS"), //
		jField<::jint>("REJECTION"), //
		jField<::jint>("REVOCATION_NOTIFICATION"), //
		jField<::jint>("REVOCATION_WARNING"), //
		jField<::jint>("SYSTEM_FAILURE"), //
		jField<::jint>("TIME_NOT_AVAILABLE"), //
		jField<::jint>("UNACCEPTED_EXTENSION"), //
		jField<::jint>("UNACCEPTED_POLICY"), //
		jField<::jint>("WAITING"), //
	};

	template<typename F = ::jint>
	static auto ADD_INFO_NOT_AVAILABLE() {
		static_assert(field_signatures[jField<F>("ADD_INFO_NOT_AVAILABLE")] != -1);
		return sat<F>("ADD_INFO_NOT_AVAILABLE");
	}

	template<typename F = ::jint>
	static auto BAD_ALG() {
		static_assert(field_signatures[jField<F>("BAD_ALG")] != -1);
		return sat<F>("BAD_ALG");
	}

	template<typename F = ::jint>
	static auto BAD_DATA_FORMAT() {
		static_assert(field_signatures[jField<F>("BAD_DATA_FORMAT")] != -1);
		return sat<F>("BAD_DATA_FORMAT");
	}

	template<typename F = ::jint>
	static auto BAD_REQUEST() {
		static_assert(field_signatures[jField<F>("BAD_REQUEST")] != -1);
		return sat<F>("BAD_REQUEST");
	}

	template<typename F = ::jint>
	static auto GRANTED() {
		static_assert(field_signatures[jField<F>("GRANTED")] != -1);
		return sat<F>("GRANTED");
	}

	template<typename F = ::jint>
	static auto GRANTED_WITH_MODS() {
		static_assert(field_signatures[jField<F>("GRANTED_WITH_MODS")] != -1);
		return sat<F>("GRANTED_WITH_MODS");
	}

	template<typename F = ::jint>
	static auto REJECTION() {
		static_assert(field_signatures[jField<F>("REJECTION")] != -1);
		return sat<F>("REJECTION");
	}

	template<typename F = ::jint>
	static auto REVOCATION_NOTIFICATION() {
		static_assert(field_signatures[jField<F>("REVOCATION_NOTIFICATION")] != -1);
		return sat<F>("REVOCATION_NOTIFICATION");
	}

	template<typename F = ::jint>
	static auto REVOCATION_WARNING() {
		static_assert(field_signatures[jField<F>("REVOCATION_WARNING")] != -1);
		return sat<F>("REVOCATION_WARNING");
	}

	template<typename F = ::jint>
	static auto SYSTEM_FAILURE() {
		static_assert(field_signatures[jField<F>("SYSTEM_FAILURE")] != -1);
		return sat<F>("SYSTEM_FAILURE");
	}

	template<typename F = ::jint>
	static auto TIME_NOT_AVAILABLE() {
		static_assert(field_signatures[jField<F>("TIME_NOT_AVAILABLE")] != -1);
		return sat<F>("TIME_NOT_AVAILABLE");
	}

	template<typename F = ::jint>
	static auto UNACCEPTED_EXTENSION() {
		static_assert(field_signatures[jField<F>("UNACCEPTED_EXTENSION")] != -1);
		return sat<F>("UNACCEPTED_EXTENSION");
	}

	template<typename F = ::jint>
	static auto UNACCEPTED_POLICY() {
		static_assert(field_signatures[jField<F>("UNACCEPTED_POLICY")] != -1);
		return sat<F>("UNACCEPTED_POLICY");
	}

	template<typename F = ::jint>
	static auto WAITING() {
		static_assert(field_signatures[jField<F>("WAITING")] != -1);
		return sat<F>("WAITING");
	}

	constexpr static Enume method_signatures{
		jMethod<::jbyte *()>("getEncodedToken"), //
		jMethod<::java::lang::String()>("getFailureCodeAsText"), //
		jMethod<::jboolean *()>("getFailureInfo"), //
		jMethod<::jint()>("getStatusCode"), //
		jMethod<::java::lang::String()>("getStatusCodeAsText"), //
		jMethod<::java::lang::String *()>("getStatusMessages"), //
		jMethod<::sun::security::timestamp::TimestampToken()>("getTimestampToken"), //
		jMethod<::sun::security::pkcs::PKCS7()>("getToken"), //
	};

	template<typename R = ::jbyte *, typename... Args>
	auto getEncodedToken(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEncodedToken")] != -1);
		return call<R>("getEncodedToken", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFailureCodeAsText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFailureCodeAsText")] != -1);
		return call<R>("getFailureCodeAsText", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean *, typename... Args>
	auto getFailureInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFailureInfo")] != -1);
		return call<R>("getFailureInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getStatusCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStatusCode")] != -1);
		return call<R>("getStatusCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getStatusCodeAsText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStatusCodeAsText")] != -1);
		return call<R>("getStatusCodeAsText", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getStatusMessages(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStatusMessages")] != -1);
		return call<R>("getStatusMessages", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::timestamp::TimestampToken, typename... Args>
	auto getTimestampToken(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTimestampToken")] != -1);
		return call<R>("getTimestampToken", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::pkcs::PKCS7, typename... Args>
	auto getToken(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getToken")] != -1);
		return call<R>("getToken", std::forward<Args>(args)...);
	}

};

#endif
