#ifndef sun_security_timestamp_TimestampToken_HPP
#define sun_security_timestamp_TimestampToken_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::timestamp::TimestampToken : public jObject<::sun::security::timestamp::TimestampToken, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_timestamp / "TimestampToken";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jbyte *)>(), //
		jMethod<::java::util::Date()>("getDate"), //
		jMethod<::sun::security::x509::AlgorithmId()>("getHashAlgorithm"), //
		jMethod<::jbyte *()>("getHashedMessage"), //
		jMethod<::java::math::BigInteger()>("getNonce"), //
		jMethod<::java::lang::String()>("getPolicyID"), //
		jMethod<::java::math::BigInteger()>("getSerialNumber"), //
	};

	template<typename R = ::java::util::Date, typename... Args>
	auto getDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDate")] != -1);
		return call<R>("getDate", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::x509::AlgorithmId, typename... Args>
	auto getHashAlgorithm(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHashAlgorithm")] != -1);
		return call<R>("getHashAlgorithm", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getHashedMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHashedMessage")] != -1);
		return call<R>("getHashedMessage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto getNonce(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNonce")] != -1);
		return call<R>("getNonce", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPolicyID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPolicyID")] != -1);
		return call<R>("getPolicyID", std::forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto getSerialNumber(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSerialNumber")] != -1);
		return call<R>("getSerialNumber", std::forward<Args>(args)...);
	}

};

#endif
