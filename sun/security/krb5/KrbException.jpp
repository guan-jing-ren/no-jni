#ifndef sun_security_krb5_KrbException_HPP
#define sun_security_krb5_KrbException_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::krb5::KrbException : public jObject<::sun::security::krb5::KrbException, ::java::lang::Exception> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_krb5 / "KrbException";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint)>(), //
		jConstructor<::jvoid(::jint, ::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::Throwable)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::String(::jint)>("errorMessage"), //
		jMethod<::java::lang::String()>("getMessage"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::String()>("krbErrorMessage"), //
		jMethod<::jint()>("returnCode"), //
		jMethod<::java::lang::String()>("returnCodeMessage"), //
		jMethod<::java::lang::String()>("returnCodeSymbol"), //
		jMethod<::java::lang::String(::jint)>("returnCodeSymbol"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto errorMessage(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("errorMessage")] != -1);
		return scall<R>("errorMessage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMessage")] != -1);
		return call<R>("getMessage", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto krbErrorMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("krbErrorMessage")] != -1);
		return call<R>("krbErrorMessage", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto returnCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("returnCode")] != -1);
		return call<R>("returnCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto returnCodeMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("returnCodeMessage")] != -1);
		return call<R>("returnCodeMessage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto returnCodeSymbol(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("returnCodeSymbol")] != -1);
		return call<R>("returnCodeSymbol", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
