#ifndef sun_security_krb5_Config_HPP
#define sun_security_krb5_Config_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::krb5::Config : public jObject<::sun::security::krb5::Config, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_krb5 / "Config";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint *(::java::lang::String)>("defaultEtype"), //
		jMethod<::jboolean(::java::lang::String *)>("exists"), //
		jMethod<::java::lang::String(::java::lang::String *)>("get"), //
		jMethod<::java::lang::String(::java::lang::String *)>("getAll"), //
		jMethod<::jboolean(::java::lang::String *)>("getBooleanValue"), //
		jMethod<::java::lang::String()>("getDefaultRealm"), //
		jMethod<::sun::security::krb5::Config()>("getInstance"), //
		jMethod<::jint(::java::lang::String *)>("getIntValue"), //
		jMethod<::java::lang::String(::java::lang::String)>("getKDCList"), //
		jMethod<::jint(::java::lang::String)>("getType"), //
		jMethod<::jvoid()>("listTable"), //
		jMethod<::jvoid()>("refresh"), //
		jMethod<::jvoid(::java::lang::String)>("resetDefaultRealm"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jboolean()>("useAddresses"), //
	};

	template<typename R = ::jint *, typename... Args>
	auto defaultEtype(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("defaultEtype")] != -1);
		return call<R>("defaultEtype", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto exists(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("exists")] != -1);
		return call<R>("exists", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAll")] != -1);
		return call<R>("getAll", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getBooleanValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBooleanValue")] != -1);
		return call<R>("getBooleanValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDefaultRealm(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultRealm")] != -1);
		return call<R>("getDefaultRealm", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::krb5::Config, typename... Args>
	static auto getInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInstance")] != -1);
		return scall<R>("getInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getIntValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIntValue")] != -1);
		return call<R>("getIntValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getKDCList(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKDCList")] != -1);
		return call<R>("getKDCList", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getType(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return scall<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto listTable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("listTable")] != -1);
		return call<R>("listTable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto refresh(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("refresh")] != -1);
		return scall<R>("refresh", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto resetDefaultRealm(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("resetDefaultRealm")] != -1);
		return call<R>("resetDefaultRealm", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto useAddresses(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("useAddresses")] != -1);
		return call<R>("useAddresses", std::forward<Args>(args)...);
	}

};

#endif
