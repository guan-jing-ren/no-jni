#ifndef sun_security_krb5_KrbCred_HPP
#define sun_security_krb5_KrbCred_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::krb5::KrbCred : public jObject<::sun::security::krb5::KrbCred, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_krb5 / "KrbCred";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::sun::security::krb5::Credentials, ::sun::security::krb5::Credentials, ::sun::security::krb5::EncryptionKey)>(), //
		jConstructor<::jvoid(::jbyte *, ::sun::security::krb5::EncryptionKey)>(), //
		jMethod<::sun::security::krb5::Credentials *()>("getDelegatedCreds"), //
		jMethod<::jbyte *()>("getMessage"), //
	};

	template<typename R = ::sun::security::krb5::Credentials *, typename... Args>
	auto getDelegatedCreds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDelegatedCreds")] != -1);
		return call<R>("getDelegatedCreds", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMessage")] != -1);
		return call<R>("getMessage", std::forward<Args>(args)...);
	}

};

#endif
