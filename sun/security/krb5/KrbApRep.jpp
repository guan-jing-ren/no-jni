#ifndef sun_security_krb5_KrbApRep_HPP
#define sun_security_krb5_KrbApRep_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::krb5::KrbApRep : public jObject<::sun::security::krb5::KrbApRep, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_krb5 / "KrbApRep";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::sun::security::krb5::KrbApReq, ::jboolean, ::sun::security::krb5::EncryptionKey)>(), //
		jConstructor<::jvoid(::jbyte *, ::sun::security::krb5::Credentials, ::sun::security::krb5::KrbApReq)>(), //
		jMethod<::jbyte *()>("getMessage"), //
		jMethod<::java::lang::Integer()>("getSeqNumber"), //
		jMethod<::sun::security::krb5::EncryptionKey()>("getSubKey"), //
	};

	template<typename R = ::jbyte *, typename... Args>
	auto getMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMessage")] != -1);
		return call<R>("getMessage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Integer, typename... Args>
	auto getSeqNumber(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSeqNumber")] != -1);
		return call<R>("getSeqNumber", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::krb5::EncryptionKey, typename... Args>
	auto getSubKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSubKey")] != -1);
		return call<R>("getSubKey", std::forward<Args>(args)...);
	}

};

#endif
