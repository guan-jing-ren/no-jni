#ifndef sun_security_krb5_Credentials_HPP
#define sun_security_krb5_Credentials_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::krb5::Credentials : public jObject<::sun::security::krb5::Credentials, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_krb5 / "Credentials";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jbyte *, ::java::lang::String, ::java::lang::String, ::jbyte *, ::jint, ::jboolean *, ::java::util::Date, ::java::util::Date, ::java::util::Date, ::java::util::Date, ::java::net::InetAddress *)>(), //
		jMethod<::sun::security::krb5::Credentials()>("acquireDefaultCreds"), //
		jMethod<::sun::security::krb5::Credentials(::sun::security::krb5::PrincipalName, ::sun::security::krb5::Credentials)>("acquireS4U2selfCreds"), //
		jMethod<::sun::security::krb5::Credentials(::java::lang::String, ::sun::security::krb5::Credentials)>("acquireServiceCreds"), //
		jMethod<::sun::security::krb5::Credentials(::sun::security::krb5::PrincipalName, ::java::lang::String)>("acquireTGTFromCache"), //
		jMethod<::jboolean()>("checkDelegate"), //
		jMethod<::java::util::Date()>("getAuthTime"), //
		jMethod<::sun::security::krb5::PrincipalName()>("getClient"), //
		jMethod<::java::net::InetAddress *()>("getClientAddresses"), //
		jMethod<::jbyte *()>("getEncoded"), //
		jMethod<::java::util::Date()>("getEndTime"), //
		jMethod<::jboolean *()>("getFlags"), //
		jMethod<::java::util::Date()>("getRenewTill"), //
		jMethod<::sun::security::krb5::PrincipalName()>("getServer"), //
		jMethod<::sun::security::krb5::EncryptionKey()>("getServiceKey"), //
		jMethod<::sun::security::krb5::EncryptionKey()>("getSessionKey"), //
		jMethod<::java::util::Date()>("getStartTime"), //
		jMethod<::jboolean()>("isForwardable"), //
		jMethod<::jboolean()>("isRenewable"), //
		jMethod<::jvoid(::sun::security::krb5::Credentials)>("printDebug"), //
		jMethod<::sun::security::krb5::Credentials()>("renew"), //
		jMethod<::jvoid()>("resetDelegate"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::sun::security::krb5::Credentials, typename... Args>
	static auto acquireDefaultCreds(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("acquireDefaultCreds")] != -1);
		return scall<R>("acquireDefaultCreds", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::krb5::Credentials, typename... Args>
	static auto acquireS4U2selfCreds(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("acquireS4U2selfCreds")] != -1);
		return scall<R>("acquireS4U2selfCreds", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::krb5::Credentials, typename... Args>
	static auto acquireServiceCreds(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("acquireServiceCreds")] != -1);
		return scall<R>("acquireServiceCreds", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::krb5::Credentials, typename... Args>
	static auto acquireTGTFromCache(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("acquireTGTFromCache")] != -1);
		return scall<R>("acquireTGTFromCache", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto checkDelegate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkDelegate")] != -1);
		return call<R>("checkDelegate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Date, typename... Args>
	auto getAuthTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAuthTime")] != -1);
		return call<R>("getAuthTime", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::krb5::PrincipalName, typename... Args>
	auto getClient(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClient")] != -1);
		return call<R>("getClient", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::InetAddress *, typename... Args>
	auto getClientAddresses(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClientAddresses")] != -1);
		return call<R>("getClientAddresses", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getEncoded(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEncoded")] != -1);
		return call<R>("getEncoded", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Date, typename... Args>
	auto getEndTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEndTime")] != -1);
		return call<R>("getEndTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean *, typename... Args>
	auto getFlags(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFlags")] != -1);
		return call<R>("getFlags", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Date, typename... Args>
	auto getRenewTill(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRenewTill")] != -1);
		return call<R>("getRenewTill", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::krb5::PrincipalName, typename... Args>
	auto getServer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServer")] != -1);
		return call<R>("getServer", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::krb5::EncryptionKey, typename... Args>
	auto getServiceKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServiceKey")] != -1);
		return call<R>("getServiceKey", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::krb5::EncryptionKey, typename... Args>
	auto getSessionKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSessionKey")] != -1);
		return call<R>("getSessionKey", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Date, typename... Args>
	auto getStartTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStartTime")] != -1);
		return call<R>("getStartTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isForwardable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isForwardable")] != -1);
		return call<R>("isForwardable", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRenewable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isRenewable")] != -1);
		return call<R>("isRenewable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto printDebug(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("printDebug")] != -1);
		return scall<R>("printDebug", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::krb5::Credentials, typename... Args>
	auto renew(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("renew")] != -1);
		return call<R>("renew", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto resetDelegate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("resetDelegate")] != -1);
		return call<R>("resetDelegate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
