#ifndef sun_security_krb5_PrincipalName_HPP
#define sun_security_krb5_PrincipalName_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::krb5::PrincipalName : public jObject<::sun::security::krb5::PrincipalName, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_krb5 / "PrincipalName";

	constexpr static Enume field_signatures{
		jField<::jint>("KRB_NT_PRINCIPAL"), //
		jField<::jint>("KRB_NT_SRV_HST"), //
		jField<::jint>("KRB_NT_SRV_INST"), //
		jField<::jint>("KRB_NT_SRV_XHST"), //
		jField<::jint>("KRB_NT_UID"), //
		jField<::jint>("KRB_NT_UNKNOWN"), //
		jField<::jchar>("NAME_COMPONENT_SEPARATOR"), //
		jField<::java::lang::String>("NAME_COMPONENT_SEPARATOR_STR"), //
		jField<::jchar>("NAME_REALM_SEPARATOR"), //
		jField<::java::lang::String>("NAME_REALM_SEPARATOR_STR"), //
		jField<::jchar>("REALM_COMPONENT_SEPARATOR"), //
		jField<::java::lang::String>("REALM_COMPONENT_SEPARATOR_STR"), //
		jField<::jint>("TGS_DEFAULT_NT"), //
		jField<::java::lang::String>("TGS_DEFAULT_SRV_NAME"), //
	};

	template<typename F = ::jint>
	static auto KRB_NT_PRINCIPAL() {
		static_assert(field_signatures[jField<F>("KRB_NT_PRINCIPAL")] != -1);
		return sat<F>("KRB_NT_PRINCIPAL");
	}

	template<typename F = ::jint>
	static auto KRB_NT_SRV_HST() {
		static_assert(field_signatures[jField<F>("KRB_NT_SRV_HST")] != -1);
		return sat<F>("KRB_NT_SRV_HST");
	}

	template<typename F = ::jint>
	static auto KRB_NT_SRV_INST() {
		static_assert(field_signatures[jField<F>("KRB_NT_SRV_INST")] != -1);
		return sat<F>("KRB_NT_SRV_INST");
	}

	template<typename F = ::jint>
	static auto KRB_NT_SRV_XHST() {
		static_assert(field_signatures[jField<F>("KRB_NT_SRV_XHST")] != -1);
		return sat<F>("KRB_NT_SRV_XHST");
	}

	template<typename F = ::jint>
	static auto KRB_NT_UID() {
		static_assert(field_signatures[jField<F>("KRB_NT_UID")] != -1);
		return sat<F>("KRB_NT_UID");
	}

	template<typename F = ::jint>
	static auto KRB_NT_UNKNOWN() {
		static_assert(field_signatures[jField<F>("KRB_NT_UNKNOWN")] != -1);
		return sat<F>("KRB_NT_UNKNOWN");
	}

	template<typename F = ::jchar>
	static auto NAME_COMPONENT_SEPARATOR() {
		static_assert(field_signatures[jField<F>("NAME_COMPONENT_SEPARATOR")] != -1);
		return sat<F>("NAME_COMPONENT_SEPARATOR");
	}

	template<typename F = ::java::lang::String>
	static auto NAME_COMPONENT_SEPARATOR_STR() {
		static_assert(field_signatures[jField<F>("NAME_COMPONENT_SEPARATOR_STR")] != -1);
		return sat<F>("NAME_COMPONENT_SEPARATOR_STR");
	}

	template<typename F = ::jchar>
	static auto NAME_REALM_SEPARATOR() {
		static_assert(field_signatures[jField<F>("NAME_REALM_SEPARATOR")] != -1);
		return sat<F>("NAME_REALM_SEPARATOR");
	}

	template<typename F = ::java::lang::String>
	static auto NAME_REALM_SEPARATOR_STR() {
		static_assert(field_signatures[jField<F>("NAME_REALM_SEPARATOR_STR")] != -1);
		return sat<F>("NAME_REALM_SEPARATOR_STR");
	}

	template<typename F = ::jchar>
	static auto REALM_COMPONENT_SEPARATOR() {
		static_assert(field_signatures[jField<F>("REALM_COMPONENT_SEPARATOR")] != -1);
		return sat<F>("REALM_COMPONENT_SEPARATOR");
	}

	template<typename F = ::java::lang::String>
	static auto REALM_COMPONENT_SEPARATOR_STR() {
		static_assert(field_signatures[jField<F>("REALM_COMPONENT_SEPARATOR_STR")] != -1);
		return sat<F>("REALM_COMPONENT_SEPARATOR_STR");
	}

	template<typename F = ::jint>
	static auto TGS_DEFAULT_NT() {
		static_assert(field_signatures[jField<F>("TGS_DEFAULT_NT")] != -1);
		return sat<F>("TGS_DEFAULT_NT");
	}

	template<typename F = ::java::lang::String>
	static auto TGS_DEFAULT_SRV_NAME() {
		static_assert(field_signatures[jField<F>("TGS_DEFAULT_SRV_NAME")] != -1);
		return sat<F>("TGS_DEFAULT_SRV_NAME");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint, ::java::lang::String *, ::sun::security::krb5::Realm)>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::jint)>(), //
		jConstructor<::jvoid(::java::lang::String, ::jint, ::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String)>(), //
		jConstructor<::jvoid(::sun::security::util::DerValue, ::sun::security::krb5::Realm)>(), //
		jConstructor<::jvoid(::java::lang::String *, ::java::lang::String)>(), //
		jMethod<::jbyte *()>("asn1Encode"), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::String()>("getInstanceComponent"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::lang::String()>("getNameString"), //
		jMethod<::java::lang::String *()>("getNameStrings"), //
		jMethod<::jint()>("getNameType"), //
		jMethod<::java::lang::String()>("getPrincipalNameAsString"), //
		jMethod<::sun::security::krb5::Realm()>("getRealm"), //
		jMethod<::java::lang::String()>("getRealmAsString"), //
		jMethod<::java::lang::String()>("getRealmString"), //
		jMethod<::java::lang::String()>("getSalt"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isRealmDeduced"), //
		jMethod<::jboolean(::sun::security::krb5::PrincipalName)>("match"), //
		jMethod<::sun::security::krb5::PrincipalName(::sun::security::util::DerInputStream, ::jbyte, ::jboolean, ::sun::security::krb5::Realm)>("parse"), //
		jMethod<::sun::security::krb5::PrincipalName(::java::lang::String, ::java::lang::String)>("tgsService"), //
		jMethod<::jbyte **()>("toByteArray"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jbyte *, typename... Args>
	auto asn1Encode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("asn1Encode")] != -1);
		return call<R>("asn1Encode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getInstanceComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInstanceComponent")] != -1);
		return call<R>("getInstanceComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNameString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNameString")] != -1);
		return call<R>("getNameString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getNameStrings(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNameStrings")] != -1);
		return call<R>("getNameStrings", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNameType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNameType")] != -1);
		return call<R>("getNameType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPrincipalNameAsString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrincipalNameAsString")] != -1);
		return call<R>("getPrincipalNameAsString", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::krb5::Realm, typename... Args>
	auto getRealm(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRealm")] != -1);
		return call<R>("getRealm", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRealmAsString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRealmAsString")] != -1);
		return call<R>("getRealmAsString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRealmString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRealmString")] != -1);
		return call<R>("getRealmString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSalt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSalt")] != -1);
		return call<R>("getSalt", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRealmDeduced(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isRealmDeduced")] != -1);
		return call<R>("isRealmDeduced", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto match(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("match")] != -1);
		return call<R>("match", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::krb5::PrincipalName, typename... Args>
	static auto parse(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parse")] != -1);
		return scall<R>("parse", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::krb5::PrincipalName, typename... Args>
	static auto tgsService(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("tgsService")] != -1);
		return scall<R>("tgsService", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte **, typename... Args>
	auto toByteArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toByteArray")] != -1);
		return call<R>("toByteArray", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
