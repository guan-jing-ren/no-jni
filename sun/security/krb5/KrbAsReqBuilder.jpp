#ifndef sun_security_krb5_KrbAsReqBuilder_HPP
#define sun_security_krb5_KrbAsReqBuilder_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::krb5::KrbAsReqBuilder : public jObject<::sun::security::krb5::KrbAsReqBuilder, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_krb5 / "KrbAsReqBuilder";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::sun::security::krb5::PrincipalName, ::javax::security::auth::kerberos::KeyTab)>(), //
		jConstructor<::jvoid(::sun::security::krb5::PrincipalName, ::jchar *)>(), //
		jMethod<::sun::security::krb5::KrbAsReqBuilder()>("action"), //
		jMethod<::jvoid()>("destroy"), //
		jMethod<::sun::security::krb5::Credentials()>("getCreds"), //
		jMethod<::sun::security::krb5::EncryptionKey *(::jboolean)>("getKeys"), //
		jMethod<::jvoid(::sun::security::krb5::PrincipalName)>("setTarget"), //
	};

	template<typename R = ::sun::security::krb5::KrbAsReqBuilder, typename... Args>
	auto action(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("action")] != -1);
		return call<R>("action", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto destroy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("destroy")] != -1);
		return call<R>("destroy", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::krb5::Credentials, typename... Args>
	auto getCreds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCreds")] != -1);
		return call<R>("getCreds", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::krb5::EncryptionKey *, typename... Args>
	auto getKeys(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeys")] != -1);
		return call<R>("getKeys", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTarget")] != -1);
		return call<R>("setTarget", std::forward<Args>(args)...);
	}

};

#endif
