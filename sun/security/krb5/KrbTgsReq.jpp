#ifndef sun_security_krb5_KrbTgsReq_HPP
#define sun_security_krb5_KrbTgsReq_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::krb5::KrbTgsReq : public jObject<::sun::security::krb5::KrbTgsReq, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_krb5 / "KrbTgsReq";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::sun::security::krb5::Credentials, ::sun::security::krb5::PrincipalName)>(), //
		jMethod<::sun::security::krb5::KrbTgsRep()>("getReply"), //
		jMethod<::jvoid()>("send"), //
		jMethod<::sun::security::krb5::Credentials()>("sendAndGetCreds"), //
	};

	template<typename R = ::sun::security::krb5::KrbTgsRep, typename... Args>
	auto getReply(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReply")] != -1);
		return call<R>("getReply", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto send(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("send")] != -1);
		return call<R>("send", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::krb5::Credentials, typename... Args>
	auto sendAndGetCreds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sendAndGetCreds")] != -1);
		return call<R>("sendAndGetCreds", std::forward<Args>(args)...);
	}

};

#endif
