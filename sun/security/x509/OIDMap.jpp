#ifndef sun_security_x509_OIDMap_HPP
#define sun_security_x509_OIDMap_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::x509::OIDMap : public jObject<::sun::security::x509::OIDMap, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_x509 / "OIDMap";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::Class)>("addAttribute"), //
		jMethod<::java::lang::Class(::java::lang::String)>("getClass"), //
		jMethod<::java::lang::Class(::sun::security::util::ObjectIdentifier)>("getClass"), //
		jMethod<::java::lang::String(::sun::security::util::ObjectIdentifier)>("getName"), //
		jMethod<::sun::security::util::ObjectIdentifier(::java::lang::String)>("getOID"), //
	};

	template<typename R = ::jvoid, typename... Args>
	static auto addAttribute(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addAttribute")] != -1);
		return scall<R>("addAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	static auto getClass(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClass")] != -1);
		return scall<R>("getClass", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getName(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return scall<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::util::ObjectIdentifier, typename... Args>
	static auto getOID(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOID")] != -1);
		return scall<R>("getOID", std::forward<Args>(args)...);
	}

};

#endif
