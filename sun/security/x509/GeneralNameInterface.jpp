#ifndef sun_security_x509_GeneralNameInterface_HPP
#define sun_security_x509_GeneralNameInterface_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::x509::GeneralNameInterface : public jObject<::sun::security::x509::GeneralNameInterface, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_x509 / "GeneralNameInterface";

	constexpr static Enume field_signatures{
		jField<::jint>("NAME_ANY"), //
		jField<::jint>("NAME_DIFF_TYPE"), //
		jField<::jint>("NAME_DIRECTORY"), //
		jField<::jint>("NAME_DNS"), //
		jField<::jint>("NAME_EDI"), //
		jField<::jint>("NAME_IP"), //
		jField<::jint>("NAME_MATCH"), //
		jField<::jint>("NAME_NARROWS"), //
		jField<::jint>("NAME_OID"), //
		jField<::jint>("NAME_RFC822"), //
		jField<::jint>("NAME_SAME_TYPE"), //
		jField<::jint>("NAME_URI"), //
		jField<::jint>("NAME_WIDENS"), //
		jField<::jint>("NAME_X400"), //
	};

	template<typename F = ::jint>
	static auto NAME_ANY() {
		static_assert(field_signatures[jField<F>("NAME_ANY")] != -1);
		return sat<F>("NAME_ANY");
	}

	template<typename F = ::jint>
	static auto NAME_DIFF_TYPE() {
		static_assert(field_signatures[jField<F>("NAME_DIFF_TYPE")] != -1);
		return sat<F>("NAME_DIFF_TYPE");
	}

	template<typename F = ::jint>
	static auto NAME_DIRECTORY() {
		static_assert(field_signatures[jField<F>("NAME_DIRECTORY")] != -1);
		return sat<F>("NAME_DIRECTORY");
	}

	template<typename F = ::jint>
	static auto NAME_DNS() {
		static_assert(field_signatures[jField<F>("NAME_DNS")] != -1);
		return sat<F>("NAME_DNS");
	}

	template<typename F = ::jint>
	static auto NAME_EDI() {
		static_assert(field_signatures[jField<F>("NAME_EDI")] != -1);
		return sat<F>("NAME_EDI");
	}

	template<typename F = ::jint>
	static auto NAME_IP() {
		static_assert(field_signatures[jField<F>("NAME_IP")] != -1);
		return sat<F>("NAME_IP");
	}

	template<typename F = ::jint>
	static auto NAME_MATCH() {
		static_assert(field_signatures[jField<F>("NAME_MATCH")] != -1);
		return sat<F>("NAME_MATCH");
	}

	template<typename F = ::jint>
	static auto NAME_NARROWS() {
		static_assert(field_signatures[jField<F>("NAME_NARROWS")] != -1);
		return sat<F>("NAME_NARROWS");
	}

	template<typename F = ::jint>
	static auto NAME_OID() {
		static_assert(field_signatures[jField<F>("NAME_OID")] != -1);
		return sat<F>("NAME_OID");
	}

	template<typename F = ::jint>
	static auto NAME_RFC822() {
		static_assert(field_signatures[jField<F>("NAME_RFC822")] != -1);
		return sat<F>("NAME_RFC822");
	}

	template<typename F = ::jint>
	static auto NAME_SAME_TYPE() {
		static_assert(field_signatures[jField<F>("NAME_SAME_TYPE")] != -1);
		return sat<F>("NAME_SAME_TYPE");
	}

	template<typename F = ::jint>
	static auto NAME_URI() {
		static_assert(field_signatures[jField<F>("NAME_URI")] != -1);
		return sat<F>("NAME_URI");
	}

	template<typename F = ::jint>
	static auto NAME_WIDENS() {
		static_assert(field_signatures[jField<F>("NAME_WIDENS")] != -1);
		return sat<F>("NAME_WIDENS");
	}

	template<typename F = ::jint>
	static auto NAME_X400() {
		static_assert(field_signatures[jField<F>("NAME_X400")] != -1);
		return sat<F>("NAME_X400");
	}

	constexpr static Enume method_signatures{
		jMethod<::jint(::sun::security::x509::GeneralNameInterface)>("constrains"), //
		jMethod<::jvoid(::sun::security::util::DerOutputStream)>("encode"), //
		jMethod<::jint()>("getType"), //
		jMethod<::jint()>("subtreeDepth"), //
	};

	template<typename R = ::jint, typename... Args>
	auto constrains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("constrains")] != -1);
		return call<R>("constrains", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto encode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("encode")] != -1);
		return call<R>("encode", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto subtreeDepth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("subtreeDepth")] != -1);
		return call<R>("subtreeDepth", std::forward<Args>(args)...);
	}

};

#endif
