#ifndef sun_security_x509_PKIXExtensions_HPP
#define sun_security_x509_PKIXExtensions_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::x509::PKIXExtensions : public jObject<::sun::security::x509::PKIXExtensions, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_x509 / "PKIXExtensions";

	constexpr static Enume field_signatures{
		jField<::sun::security::util::ObjectIdentifier>("AuthInfoAccess_Id"), //
		jField<::sun::security::util::ObjectIdentifier>("AuthorityKey_Id"), //
		jField<::sun::security::util::ObjectIdentifier>("BasicConstraints_Id"), //
		jField<::sun::security::util::ObjectIdentifier>("CRLDistributionPoints_Id"), //
		jField<::sun::security::util::ObjectIdentifier>("CRLNumber_Id"), //
		jField<::sun::security::util::ObjectIdentifier>("CertificateIssuer_Id"), //
		jField<::sun::security::util::ObjectIdentifier>("CertificatePolicies_Id"), //
		jField<::sun::security::util::ObjectIdentifier>("DeltaCRLIndicator_Id"), //
		jField<::sun::security::util::ObjectIdentifier>("ExtendedKeyUsage_Id"), //
		jField<::sun::security::util::ObjectIdentifier>("FreshestCRL_Id"), //
		jField<::sun::security::util::ObjectIdentifier>("HoldInstructionCode_Id"), //
		jField<::sun::security::util::ObjectIdentifier>("InhibitAnyPolicy_Id"), //
		jField<::sun::security::util::ObjectIdentifier>("InvalidityDate_Id"), //
		jField<::sun::security::util::ObjectIdentifier>("IssuerAlternativeName_Id"), //
		jField<::sun::security::util::ObjectIdentifier>("IssuingDistributionPoint_Id"), //
		jField<::sun::security::util::ObjectIdentifier>("KeyUsage_Id"), //
		jField<::sun::security::util::ObjectIdentifier>("NameConstraints_Id"), //
		jField<::sun::security::util::ObjectIdentifier>("OCSPNoCheck_Id"), //
		jField<::sun::security::util::ObjectIdentifier>("OCSPNonce_Id"), //
		jField<::sun::security::util::ObjectIdentifier>("PolicyConstraints_Id"), //
		jField<::sun::security::util::ObjectIdentifier>("PolicyMappings_Id"), //
		jField<::sun::security::util::ObjectIdentifier>("PrivateKeyUsage_Id"), //
		jField<::sun::security::util::ObjectIdentifier>("ReasonCode_Id"), //
		jField<::sun::security::util::ObjectIdentifier>("SubjectAlternativeName_Id"), //
		jField<::sun::security::util::ObjectIdentifier>("SubjectDirectoryAttributes_Id"), //
		jField<::sun::security::util::ObjectIdentifier>("SubjectInfoAccess_Id"), //
		jField<::sun::security::util::ObjectIdentifier>("SubjectKey_Id"), //
	};

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto AuthInfoAccess_Id() {
		static_assert(field_signatures[jField<F>("AuthInfoAccess_Id")] != -1);
		return sat<F>("AuthInfoAccess_Id");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto AuthorityKey_Id() {
		static_assert(field_signatures[jField<F>("AuthorityKey_Id")] != -1);
		return sat<F>("AuthorityKey_Id");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto BasicConstraints_Id() {
		static_assert(field_signatures[jField<F>("BasicConstraints_Id")] != -1);
		return sat<F>("BasicConstraints_Id");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto CRLDistributionPoints_Id() {
		static_assert(field_signatures[jField<F>("CRLDistributionPoints_Id")] != -1);
		return sat<F>("CRLDistributionPoints_Id");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto CRLNumber_Id() {
		static_assert(field_signatures[jField<F>("CRLNumber_Id")] != -1);
		return sat<F>("CRLNumber_Id");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto CertificateIssuer_Id() {
		static_assert(field_signatures[jField<F>("CertificateIssuer_Id")] != -1);
		return sat<F>("CertificateIssuer_Id");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto CertificatePolicies_Id() {
		static_assert(field_signatures[jField<F>("CertificatePolicies_Id")] != -1);
		return sat<F>("CertificatePolicies_Id");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto DeltaCRLIndicator_Id() {
		static_assert(field_signatures[jField<F>("DeltaCRLIndicator_Id")] != -1);
		return sat<F>("DeltaCRLIndicator_Id");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto ExtendedKeyUsage_Id() {
		static_assert(field_signatures[jField<F>("ExtendedKeyUsage_Id")] != -1);
		return sat<F>("ExtendedKeyUsage_Id");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto FreshestCRL_Id() {
		static_assert(field_signatures[jField<F>("FreshestCRL_Id")] != -1);
		return sat<F>("FreshestCRL_Id");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto HoldInstructionCode_Id() {
		static_assert(field_signatures[jField<F>("HoldInstructionCode_Id")] != -1);
		return sat<F>("HoldInstructionCode_Id");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto InhibitAnyPolicy_Id() {
		static_assert(field_signatures[jField<F>("InhibitAnyPolicy_Id")] != -1);
		return sat<F>("InhibitAnyPolicy_Id");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto InvalidityDate_Id() {
		static_assert(field_signatures[jField<F>("InvalidityDate_Id")] != -1);
		return sat<F>("InvalidityDate_Id");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto IssuerAlternativeName_Id() {
		static_assert(field_signatures[jField<F>("IssuerAlternativeName_Id")] != -1);
		return sat<F>("IssuerAlternativeName_Id");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto IssuingDistributionPoint_Id() {
		static_assert(field_signatures[jField<F>("IssuingDistributionPoint_Id")] != -1);
		return sat<F>("IssuingDistributionPoint_Id");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto KeyUsage_Id() {
		static_assert(field_signatures[jField<F>("KeyUsage_Id")] != -1);
		return sat<F>("KeyUsage_Id");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto NameConstraints_Id() {
		static_assert(field_signatures[jField<F>("NameConstraints_Id")] != -1);
		return sat<F>("NameConstraints_Id");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto OCSPNoCheck_Id() {
		static_assert(field_signatures[jField<F>("OCSPNoCheck_Id")] != -1);
		return sat<F>("OCSPNoCheck_Id");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto OCSPNonce_Id() {
		static_assert(field_signatures[jField<F>("OCSPNonce_Id")] != -1);
		return sat<F>("OCSPNonce_Id");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto PolicyConstraints_Id() {
		static_assert(field_signatures[jField<F>("PolicyConstraints_Id")] != -1);
		return sat<F>("PolicyConstraints_Id");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto PolicyMappings_Id() {
		static_assert(field_signatures[jField<F>("PolicyMappings_Id")] != -1);
		return sat<F>("PolicyMappings_Id");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto PrivateKeyUsage_Id() {
		static_assert(field_signatures[jField<F>("PrivateKeyUsage_Id")] != -1);
		return sat<F>("PrivateKeyUsage_Id");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto ReasonCode_Id() {
		static_assert(field_signatures[jField<F>("ReasonCode_Id")] != -1);
		return sat<F>("ReasonCode_Id");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto SubjectAlternativeName_Id() {
		static_assert(field_signatures[jField<F>("SubjectAlternativeName_Id")] != -1);
		return sat<F>("SubjectAlternativeName_Id");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto SubjectDirectoryAttributes_Id() {
		static_assert(field_signatures[jField<F>("SubjectDirectoryAttributes_Id")] != -1);
		return sat<F>("SubjectDirectoryAttributes_Id");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto SubjectInfoAccess_Id() {
		static_assert(field_signatures[jField<F>("SubjectInfoAccess_Id")] != -1);
		return sat<F>("SubjectInfoAccess_Id");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto SubjectKey_Id() {
		static_assert(field_signatures[jField<F>("SubjectKey_Id")] != -1);
		return sat<F>("SubjectKey_Id");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
	};

};

#endif
