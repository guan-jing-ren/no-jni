#ifndef sun_security_x509_AlgorithmId_HPP
#define sun_security_x509_AlgorithmId_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::x509::AlgorithmId : public jObject<::sun::security::x509::AlgorithmId, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_x509 / "AlgorithmId";

	constexpr static Enume field_signatures{
		jField<::sun::security::util::ObjectIdentifier>("AES_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("DH_PKIX_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("DH_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("DSA_OIW_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("DSA_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("ECDH_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("EC_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("MD2_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("MD5_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("RSAEncryption_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("RSA_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("SHA224_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("SHA256_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("SHA384_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("SHA512_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("SHA_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("md2WithRSAEncryption_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("md5WithRSAEncryption_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("pbeWithMD5AndDES_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("pbeWithMD5AndRC2_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("pbeWithSHA1AndDES_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("pbeWithSHA1AndDESede_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("pbeWithSHA1AndRC2_40_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("pbeWithSHA1AndRC2_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("sha1WithDSA_OIW_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("sha1WithDSA_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("sha1WithECDSA_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("sha1WithRSAEncryption_OIW_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("sha1WithRSAEncryption_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("sha224WithDSA_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("sha224WithECDSA_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("sha224WithRSAEncryption_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("sha256WithDSA_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("sha256WithECDSA_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("sha256WithRSAEncryption_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("sha384WithECDSA_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("sha384WithRSAEncryption_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("sha512WithECDSA_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("sha512WithRSAEncryption_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("shaWithDSA_OIW_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("specifiedWithECDSA_oid"), //
	};

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto AES_oid() {
		static_assert(field_signatures[jField<F>("AES_oid")] != -1);
		return sat<F>("AES_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto DH_PKIX_oid() {
		static_assert(field_signatures[jField<F>("DH_PKIX_oid")] != -1);
		return sat<F>("DH_PKIX_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto DH_oid() {
		static_assert(field_signatures[jField<F>("DH_oid")] != -1);
		return sat<F>("DH_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto DSA_OIW_oid() {
		static_assert(field_signatures[jField<F>("DSA_OIW_oid")] != -1);
		return sat<F>("DSA_OIW_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto DSA_oid() {
		static_assert(field_signatures[jField<F>("DSA_oid")] != -1);
		return sat<F>("DSA_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto ECDH_oid() {
		static_assert(field_signatures[jField<F>("ECDH_oid")] != -1);
		return sat<F>("ECDH_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto EC_oid() {
		static_assert(field_signatures[jField<F>("EC_oid")] != -1);
		return sat<F>("EC_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto MD2_oid() {
		static_assert(field_signatures[jField<F>("MD2_oid")] != -1);
		return sat<F>("MD2_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto MD5_oid() {
		static_assert(field_signatures[jField<F>("MD5_oid")] != -1);
		return sat<F>("MD5_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto RSAEncryption_oid() {
		static_assert(field_signatures[jField<F>("RSAEncryption_oid")] != -1);
		return sat<F>("RSAEncryption_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto RSA_oid() {
		static_assert(field_signatures[jField<F>("RSA_oid")] != -1);
		return sat<F>("RSA_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto SHA224_oid() {
		static_assert(field_signatures[jField<F>("SHA224_oid")] != -1);
		return sat<F>("SHA224_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto SHA256_oid() {
		static_assert(field_signatures[jField<F>("SHA256_oid")] != -1);
		return sat<F>("SHA256_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto SHA384_oid() {
		static_assert(field_signatures[jField<F>("SHA384_oid")] != -1);
		return sat<F>("SHA384_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto SHA512_oid() {
		static_assert(field_signatures[jField<F>("SHA512_oid")] != -1);
		return sat<F>("SHA512_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto SHA_oid() {
		static_assert(field_signatures[jField<F>("SHA_oid")] != -1);
		return sat<F>("SHA_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto md2WithRSAEncryption_oid() {
		static_assert(field_signatures[jField<F>("md2WithRSAEncryption_oid")] != -1);
		return sat<F>("md2WithRSAEncryption_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto md5WithRSAEncryption_oid() {
		static_assert(field_signatures[jField<F>("md5WithRSAEncryption_oid")] != -1);
		return sat<F>("md5WithRSAEncryption_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto pbeWithMD5AndDES_oid() {
		static_assert(field_signatures[jField<F>("pbeWithMD5AndDES_oid")] != -1);
		return sat<F>("pbeWithMD5AndDES_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto pbeWithMD5AndRC2_oid() {
		static_assert(field_signatures[jField<F>("pbeWithMD5AndRC2_oid")] != -1);
		return sat<F>("pbeWithMD5AndRC2_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto pbeWithSHA1AndDES_oid() {
		static_assert(field_signatures[jField<F>("pbeWithSHA1AndDES_oid")] != -1);
		return sat<F>("pbeWithSHA1AndDES_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto pbeWithSHA1AndDESede_oid() {
		static_assert(field_signatures[jField<F>("pbeWithSHA1AndDESede_oid")] != -1);
		return sat<F>("pbeWithSHA1AndDESede_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto pbeWithSHA1AndRC2_40_oid() {
		static_assert(field_signatures[jField<F>("pbeWithSHA1AndRC2_40_oid")] != -1);
		return sat<F>("pbeWithSHA1AndRC2_40_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto pbeWithSHA1AndRC2_oid() {
		static_assert(field_signatures[jField<F>("pbeWithSHA1AndRC2_oid")] != -1);
		return sat<F>("pbeWithSHA1AndRC2_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto sha1WithDSA_OIW_oid() {
		static_assert(field_signatures[jField<F>("sha1WithDSA_OIW_oid")] != -1);
		return sat<F>("sha1WithDSA_OIW_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto sha1WithDSA_oid() {
		static_assert(field_signatures[jField<F>("sha1WithDSA_oid")] != -1);
		return sat<F>("sha1WithDSA_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto sha1WithECDSA_oid() {
		static_assert(field_signatures[jField<F>("sha1WithECDSA_oid")] != -1);
		return sat<F>("sha1WithECDSA_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto sha1WithRSAEncryption_OIW_oid() {
		static_assert(field_signatures[jField<F>("sha1WithRSAEncryption_OIW_oid")] != -1);
		return sat<F>("sha1WithRSAEncryption_OIW_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto sha1WithRSAEncryption_oid() {
		static_assert(field_signatures[jField<F>("sha1WithRSAEncryption_oid")] != -1);
		return sat<F>("sha1WithRSAEncryption_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto sha224WithDSA_oid() {
		static_assert(field_signatures[jField<F>("sha224WithDSA_oid")] != -1);
		return sat<F>("sha224WithDSA_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto sha224WithECDSA_oid() {
		static_assert(field_signatures[jField<F>("sha224WithECDSA_oid")] != -1);
		return sat<F>("sha224WithECDSA_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto sha224WithRSAEncryption_oid() {
		static_assert(field_signatures[jField<F>("sha224WithRSAEncryption_oid")] != -1);
		return sat<F>("sha224WithRSAEncryption_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto sha256WithDSA_oid() {
		static_assert(field_signatures[jField<F>("sha256WithDSA_oid")] != -1);
		return sat<F>("sha256WithDSA_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto sha256WithECDSA_oid() {
		static_assert(field_signatures[jField<F>("sha256WithECDSA_oid")] != -1);
		return sat<F>("sha256WithECDSA_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto sha256WithRSAEncryption_oid() {
		static_assert(field_signatures[jField<F>("sha256WithRSAEncryption_oid")] != -1);
		return sat<F>("sha256WithRSAEncryption_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto sha384WithECDSA_oid() {
		static_assert(field_signatures[jField<F>("sha384WithECDSA_oid")] != -1);
		return sat<F>("sha384WithECDSA_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto sha384WithRSAEncryption_oid() {
		static_assert(field_signatures[jField<F>("sha384WithRSAEncryption_oid")] != -1);
		return sat<F>("sha384WithRSAEncryption_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto sha512WithECDSA_oid() {
		static_assert(field_signatures[jField<F>("sha512WithECDSA_oid")] != -1);
		return sat<F>("sha512WithECDSA_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto sha512WithRSAEncryption_oid() {
		static_assert(field_signatures[jField<F>("sha512WithRSAEncryption_oid")] != -1);
		return sat<F>("sha512WithRSAEncryption_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto shaWithDSA_OIW_oid() {
		static_assert(field_signatures[jField<F>("shaWithDSA_OIW_oid")] != -1);
		return sat<F>("shaWithDSA_OIW_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto specifiedWithECDSA_oid() {
		static_assert(field_signatures[jField<F>("specifiedWithECDSA_oid")] != -1);
		return sat<F>("specifiedWithECDSA_oid");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::sun::security::util::ObjectIdentifier)>(), //
		jConstructor<::jvoid(::sun::security::util::ObjectIdentifier, ::java::security::AlgorithmParameters)>(), //
		jMethod<::jvoid(::java::io::OutputStream)>("derEncode"), //
		jMethod<::jbyte *()>("encode"), //
		jMethod<::jvoid(::sun::security::util::DerOutputStream)>("encode"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jboolean(::sun::security::util::ObjectIdentifier)>("equals"), //
		jMethod<::jboolean(::sun::security::x509::AlgorithmId)>("equals"), //
		jMethod<::sun::security::x509::AlgorithmId(::java::lang::String)>("get"), //
		jMethod<::sun::security::x509::AlgorithmId(::java::security::AlgorithmParameters)>("get"), //
		jMethod<::sun::security::x509::AlgorithmId(::java::lang::String)>("getAlgorithmId"), //
		jMethod<::java::lang::String(::java::lang::String)>("getDigAlgFromSigAlg"), //
		jMethod<::java::lang::String(::java::lang::String)>("getEncAlgFromSigAlg"), //
		jMethod<::jbyte *()>("getEncodedParams"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::sun::security::util::ObjectIdentifier()>("getOID"), //
		jMethod<::java::security::AlgorithmParameters()>("getParameters"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::lang::String)>("makeSigAlg"), //
		jMethod<::sun::security::x509::AlgorithmId(::sun::security::util::DerValue)>("parse"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto derEncode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("derEncode")] != -1);
		return call<R>("derEncode", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto encode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("encode")] != -1);
		return call<R>("encode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::x509::AlgorithmId, typename... Args>
	static auto get(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return scall<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::x509::AlgorithmId, typename... Args>
	static auto getAlgorithmId(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlgorithmId")] != -1);
		return scall<R>("getAlgorithmId", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getDigAlgFromSigAlg(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDigAlgFromSigAlg")] != -1);
		return scall<R>("getDigAlgFromSigAlg", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getEncAlgFromSigAlg(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEncAlgFromSigAlg")] != -1);
		return scall<R>("getEncAlgFromSigAlg", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getEncodedParams(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEncodedParams")] != -1);
		return call<R>("getEncodedParams", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::util::ObjectIdentifier, typename... Args>
	auto getOID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOID")] != -1);
		return call<R>("getOID", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::AlgorithmParameters, typename... Args>
	auto getParameters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParameters")] != -1);
		return call<R>("getParameters", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto makeSigAlg(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeSigAlg")] != -1);
		return scall<R>("makeSigAlg", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::x509::AlgorithmId, typename... Args>
	static auto parse(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parse")] != -1);
		return scall<R>("parse", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
