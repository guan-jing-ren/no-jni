#ifndef sun_security_x509_AVA_HPP
#define sun_security_x509_AVA_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::x509::AVA : public jObject<::sun::security::x509::AVA, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_x509 / "AVA";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::sun::security::util::ObjectIdentifier, ::sun::security::util::DerValue)>(), //
		jMethod<::jvoid(::java::io::OutputStream)>("derEncode"), //
		jMethod<::jvoid(::sun::security::util::DerOutputStream)>("encode"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::sun::security::util::DerValue()>("getDerValue"), //
		jMethod<::sun::security::util::ObjectIdentifier()>("getObjectIdentifier"), //
		jMethod<::java::lang::String()>("getValueString"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::String()>("toRFC1779String"), //
		jMethod<::java::lang::String(::java::util::Map)>("toRFC1779String"), //
		jMethod<::java::lang::String()>("toRFC2253CanonicalString"), //
		jMethod<::java::lang::String()>("toRFC2253String"), //
		jMethod<::java::lang::String(::java::util::Map)>("toRFC2253String"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto derEncode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("derEncode")] != -1);
		return call<R>("derEncode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto encode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("encode")] != -1);
		return call<R>("encode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::util::DerValue, typename... Args>
	auto getDerValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDerValue")] != -1);
		return call<R>("getDerValue", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::util::ObjectIdentifier, typename... Args>
	auto getObjectIdentifier(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectIdentifier")] != -1);
		return call<R>("getObjectIdentifier", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getValueString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValueString")] != -1);
		return call<R>("getValueString", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toRFC1779String(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toRFC1779String")] != -1);
		return call<R>("toRFC1779String", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toRFC2253CanonicalString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toRFC2253CanonicalString")] != -1);
		return call<R>("toRFC2253CanonicalString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toRFC2253String(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toRFC2253String")] != -1);
		return call<R>("toRFC2253String", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
