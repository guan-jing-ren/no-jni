#ifndef sun_security_x509_X509CRLEntryImpl_HPP
#define sun_security_x509_X509CRLEntryImpl_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::x509::X509CRLEntryImpl : public jObject<::sun::security::x509::X509CRLEntryImpl, ::java::security::cert::X509CRLEntry> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_x509 / "X509CRLEntryImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::math::BigInteger, ::java::util::Date)>(), //
		jConstructor<::jvoid(::java::math::BigInteger, ::java::util::Date, ::sun::security::x509::CRLExtensions)>(), //
		jConstructor<::jvoid(::sun::security::util::DerValue)>(), //
		jConstructor<::jvoid(::jbyte *)>(), //
		jMethod<::jint(::java::lang::Object)>("compareTo"), //
		jMethod<::jint(::sun::security::x509::X509CRLEntryImpl)>("compareTo"), //
		jMethod<::jvoid(::sun::security::util::DerOutputStream)>("encode"), //
		jMethod<::javax::security::auth::x500::X500Principal()>("getCertificateIssuer"), //
		jMethod<::java::util::Set()>("getCriticalExtensionOIDs"), //
		jMethod<::jbyte *()>("getEncoded"), //
		jMethod<::sun::security::x509::Extension(::sun::security::util::ObjectIdentifier)>("getExtension"), //
		jMethod<::jbyte *(::java::lang::String)>("getExtensionValue"), //
		jMethod<::java::util::Map()>("getExtensions"), //
		jMethod<::java::util::Set()>("getNonCriticalExtensionOIDs"), //
		jMethod<::java::lang::Integer()>("getReasonCode"), //
		jMethod<::java::util::Date()>("getRevocationDate"), //
		jMethod<::java::security::cert::CRLReason()>("getRevocationReason"), //
		jMethod<::java::security::cert::CRLReason(::java::security::cert::X509CRLEntry)>("getRevocationReason"), //
		jMethod<::java::math::BigInteger()>("getSerialNumber"), //
		jMethod<::jboolean()>("hasExtensions"), //
		jMethod<::jboolean()>("hasUnsupportedCriticalExtension"), //
		jMethod<::sun::security::x509::X509CRLEntryImpl(::java::security::cert::X509CRLEntry)>("toImpl"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jint, typename... Args>
	auto compareTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compareTo")] != -1);
		return call<R>("compareTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto encode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("encode")] != -1);
		return call<R>("encode", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::security::auth::x500::X500Principal, typename... Args>
	auto getCertificateIssuer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCertificateIssuer")] != -1);
		return call<R>("getCertificateIssuer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto getCriticalExtensionOIDs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCriticalExtensionOIDs")] != -1);
		return call<R>("getCriticalExtensionOIDs", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getEncoded(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEncoded")] != -1);
		return call<R>("getEncoded", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::x509::Extension, typename... Args>
	auto getExtension(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExtension")] != -1);
		return call<R>("getExtension", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getExtensionValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExtensionValue")] != -1);
		return call<R>("getExtensionValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getExtensions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExtensions")] != -1);
		return call<R>("getExtensions", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto getNonCriticalExtensionOIDs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNonCriticalExtensionOIDs")] != -1);
		return call<R>("getNonCriticalExtensionOIDs", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Integer, typename... Args>
	auto getReasonCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReasonCode")] != -1);
		return call<R>("getReasonCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Date, typename... Args>
	auto getRevocationDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRevocationDate")] != -1);
		return call<R>("getRevocationDate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::cert::CRLReason, typename... Args>
	auto getRevocationReason(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRevocationReason")] != -1);
		return call<R>("getRevocationReason", std::forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto getSerialNumber(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSerialNumber")] != -1);
		return call<R>("getSerialNumber", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasExtensions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasExtensions")] != -1);
		return call<R>("hasExtensions", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasUnsupportedCriticalExtension(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasUnsupportedCriticalExtension")] != -1);
		return call<R>("hasUnsupportedCriticalExtension", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::x509::X509CRLEntryImpl, typename... Args>
	static auto toImpl(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toImpl")] != -1);
		return scall<R>("toImpl", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
