#ifndef sun_security_x509_ReasonFlags_HPP
#define sun_security_x509_ReasonFlags_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::x509::ReasonFlags : public jObject<::sun::security::x509::ReasonFlags, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_x509 / "ReasonFlags";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("AA_COMPROMISE"), //
		jField<::java::lang::String>("AFFILIATION_CHANGED"), //
		jField<::java::lang::String>("CA_COMPROMISE"), //
		jField<::java::lang::String>("CERTIFICATE_HOLD"), //
		jField<::java::lang::String>("CESSATION_OF_OPERATION"), //
		jField<::java::lang::String>("KEY_COMPROMISE"), //
		jField<::java::lang::String>("PRIVILEGE_WITHDRAWN"), //
		jField<::java::lang::String>("SUPERSEDED"), //
		jField<::java::lang::String>("UNUSED"), //
	};

	template<typename F = ::java::lang::String>
	static auto AA_COMPROMISE() {
		static_assert(field_signatures[jField<F>("AA_COMPROMISE")] != -1);
		return sat<F>("AA_COMPROMISE");
	}

	template<typename F = ::java::lang::String>
	static auto AFFILIATION_CHANGED() {
		static_assert(field_signatures[jField<F>("AFFILIATION_CHANGED")] != -1);
		return sat<F>("AFFILIATION_CHANGED");
	}

	template<typename F = ::java::lang::String>
	static auto CA_COMPROMISE() {
		static_assert(field_signatures[jField<F>("CA_COMPROMISE")] != -1);
		return sat<F>("CA_COMPROMISE");
	}

	template<typename F = ::java::lang::String>
	static auto CERTIFICATE_HOLD() {
		static_assert(field_signatures[jField<F>("CERTIFICATE_HOLD")] != -1);
		return sat<F>("CERTIFICATE_HOLD");
	}

	template<typename F = ::java::lang::String>
	static auto CESSATION_OF_OPERATION() {
		static_assert(field_signatures[jField<F>("CESSATION_OF_OPERATION")] != -1);
		return sat<F>("CESSATION_OF_OPERATION");
	}

	template<typename F = ::java::lang::String>
	static auto KEY_COMPROMISE() {
		static_assert(field_signatures[jField<F>("KEY_COMPROMISE")] != -1);
		return sat<F>("KEY_COMPROMISE");
	}

	template<typename F = ::java::lang::String>
	static auto PRIVILEGE_WITHDRAWN() {
		static_assert(field_signatures[jField<F>("PRIVILEGE_WITHDRAWN")] != -1);
		return sat<F>("PRIVILEGE_WITHDRAWN");
	}

	template<typename F = ::java::lang::String>
	static auto SUPERSEDED() {
		static_assert(field_signatures[jField<F>("SUPERSEDED")] != -1);
		return sat<F>("SUPERSEDED");
	}

	template<typename F = ::java::lang::String>
	static auto UNUSED() {
		static_assert(field_signatures[jField<F>("UNUSED")] != -1);
		return sat<F>("UNUSED");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::sun::security::util::BitArray)>(), //
		jConstructor<::jvoid(::sun::security::util::DerInputStream)>(), //
		jConstructor<::jvoid(::sun::security::util::DerValue)>(), //
		jConstructor<::jvoid(::jbyte *)>(), //
		jConstructor<::jvoid(::jboolean *)>(), //
		jMethod<::jvoid(::java::lang::String)>("delete"), //
		jMethod<::jvoid(::sun::security::util::DerOutputStream)>("encode"), //
		jMethod<::java::lang::Object(::java::lang::String)>("get"), //
		jMethod<::java::util::Enumeration()>("getElements"), //
		jMethod<::jboolean *()>("getFlags"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object)>("set"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto delete_(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("delete")] != -1);
		return call<R>("delete", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto encode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("encode")] != -1);
		return call<R>("encode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto getElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getElements")] != -1);
		return call<R>("getElements", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean *, typename... Args>
	auto getFlags(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFlags")] != -1);
		return call<R>("getFlags", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set")] != -1);
		return call<R>("set", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
