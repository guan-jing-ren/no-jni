#ifndef sun_security_x509_X500Name_HPP
#define sun_security_x509_X500Name_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::x509::X500Name : public jObject<::sun::security::x509::X500Name, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_x509 / "X500Name";

	constexpr static Enume field_signatures{
		jField<::sun::security::util::ObjectIdentifier>("DNQUALIFIER_OID"), //
		jField<::sun::security::util::ObjectIdentifier>("DOMAIN_COMPONENT_OID"), //
		jField<::sun::security::util::ObjectIdentifier>("GENERATIONQUALIFIER_OID"), //
		jField<::sun::security::util::ObjectIdentifier>("GIVENNAME_OID"), //
		jField<::sun::security::util::ObjectIdentifier>("INITIALS_OID"), //
		jField<::sun::security::util::ObjectIdentifier>("SERIALNUMBER_OID"), //
		jField<::sun::security::util::ObjectIdentifier>("SURNAME_OID"), //
		jField<::sun::security::util::ObjectIdentifier>("commonName_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("countryName_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("ipAddress_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("localityName_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("orgName_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("orgUnitName_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("stateName_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("streetAddress_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("title_oid"), //
		jField<::sun::security::util::ObjectIdentifier>("userid_oid"), //
	};

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto DNQUALIFIER_OID() {
		static_assert(field_signatures[jField<F>("DNQUALIFIER_OID")] != -1);
		return sat<F>("DNQUALIFIER_OID");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto DOMAIN_COMPONENT_OID() {
		static_assert(field_signatures[jField<F>("DOMAIN_COMPONENT_OID")] != -1);
		return sat<F>("DOMAIN_COMPONENT_OID");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto GENERATIONQUALIFIER_OID() {
		static_assert(field_signatures[jField<F>("GENERATIONQUALIFIER_OID")] != -1);
		return sat<F>("GENERATIONQUALIFIER_OID");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto GIVENNAME_OID() {
		static_assert(field_signatures[jField<F>("GIVENNAME_OID")] != -1);
		return sat<F>("GIVENNAME_OID");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto INITIALS_OID() {
		static_assert(field_signatures[jField<F>("INITIALS_OID")] != -1);
		return sat<F>("INITIALS_OID");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto SERIALNUMBER_OID() {
		static_assert(field_signatures[jField<F>("SERIALNUMBER_OID")] != -1);
		return sat<F>("SERIALNUMBER_OID");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto SURNAME_OID() {
		static_assert(field_signatures[jField<F>("SURNAME_OID")] != -1);
		return sat<F>("SURNAME_OID");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto commonName_oid() {
		static_assert(field_signatures[jField<F>("commonName_oid")] != -1);
		return sat<F>("commonName_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto countryName_oid() {
		static_assert(field_signatures[jField<F>("countryName_oid")] != -1);
		return sat<F>("countryName_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto ipAddress_oid() {
		static_assert(field_signatures[jField<F>("ipAddress_oid")] != -1);
		return sat<F>("ipAddress_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto localityName_oid() {
		static_assert(field_signatures[jField<F>("localityName_oid")] != -1);
		return sat<F>("localityName_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto orgName_oid() {
		static_assert(field_signatures[jField<F>("orgName_oid")] != -1);
		return sat<F>("orgName_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto orgUnitName_oid() {
		static_assert(field_signatures[jField<F>("orgUnitName_oid")] != -1);
		return sat<F>("orgUnitName_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto stateName_oid() {
		static_assert(field_signatures[jField<F>("stateName_oid")] != -1);
		return sat<F>("stateName_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto streetAddress_oid() {
		static_assert(field_signatures[jField<F>("streetAddress_oid")] != -1);
		return sat<F>("streetAddress_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto title_oid() {
		static_assert(field_signatures[jField<F>("title_oid")] != -1);
		return sat<F>("title_oid");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto userid_oid() {
		static_assert(field_signatures[jField<F>("userid_oid")] != -1);
		return sat<F>("userid_oid");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::util::Map)>(), //
		jConstructor<::jvoid(::sun::security::util::DerInputStream)>(), //
		jConstructor<::jvoid(::sun::security::util::DerValue)>(), //
		jConstructor<::jvoid(::jbyte *)>(), //
		jConstructor<::jvoid(::sun::security::x509::RDN *)>(), //
		jMethod<::java::util::List()>("allAvas"), //
		jMethod<::sun::security::x509::X500Name(::javax::security::auth::x500::X500Principal)>("asX500Name"), //
		jMethod<::javax::security::auth::x500::X500Principal()>("asX500Principal"), //
		jMethod<::jint()>("avaSize"), //
		jMethod<::sun::security::x509::X500Name(::sun::security::x509::X500Name)>("commonAncestor"), //
		jMethod<::jint(::sun::security::x509::GeneralNameInterface)>("constrains"), //
		jMethod<::jvoid(::sun::security::util::DerOutputStream)>("emit"), //
		jMethod<::jvoid(::sun::security::util::DerOutputStream)>("encode"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::sun::security::util::DerValue(::sun::security::util::ObjectIdentifier)>("findMostSpecificAttribute"), //
		jMethod<::java::lang::String()>("getCommonName"), //
		jMethod<::java::lang::String()>("getCountry"), //
		jMethod<::java::lang::String()>("getDNQualifier"), //
		jMethod<::java::lang::String()>("getDomain"), //
		jMethod<::jbyte *()>("getEncoded"), //
		jMethod<::jbyte *()>("getEncodedInternal"), //
		jMethod<::java::lang::String()>("getGeneration"), //
		jMethod<::java::lang::String()>("getGivenName"), //
		jMethod<::java::lang::String()>("getIP"), //
		jMethod<::java::lang::String()>("getInitials"), //
		jMethod<::java::lang::String()>("getLocality"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::lang::String()>("getOrganization"), //
		jMethod<::java::lang::String()>("getOrganizationalUnit"), //
		jMethod<::java::lang::String()>("getRFC1779Name"), //
		jMethod<::java::lang::String(::java::util::Map)>("getRFC1779Name"), //
		jMethod<::java::lang::String()>("getRFC2253CanonicalName"), //
		jMethod<::java::lang::String()>("getRFC2253Name"), //
		jMethod<::java::lang::String(::java::util::Map)>("getRFC2253Name"), //
		jMethod<::java::lang::String()>("getState"), //
		jMethod<::java::lang::String()>("getSurname"), //
		jMethod<::jint()>("getType"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isEmpty"), //
		jMethod<::java::util::List()>("rdns"), //
		jMethod<::jint()>("size"), //
		jMethod<::jint()>("subtreeDepth"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::util::List, typename... Args>
	auto allAvas(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("allAvas")] != -1);
		return call<R>("allAvas", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::x509::X500Name, typename... Args>
	static auto asX500Name(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("asX500Name")] != -1);
		return scall<R>("asX500Name", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::security::auth::x500::X500Principal, typename... Args>
	auto asX500Principal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("asX500Principal")] != -1);
		return call<R>("asX500Principal", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto avaSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("avaSize")] != -1);
		return call<R>("avaSize", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::x509::X500Name, typename... Args>
	auto commonAncestor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("commonAncestor")] != -1);
		return call<R>("commonAncestor", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto constrains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("constrains")] != -1);
		return call<R>("constrains", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto emit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("emit")] != -1);
		return call<R>("emit", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto encode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("encode")] != -1);
		return call<R>("encode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::util::DerValue, typename... Args>
	auto findMostSpecificAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("findMostSpecificAttribute")] != -1);
		return call<R>("findMostSpecificAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCommonName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCommonName")] != -1);
		return call<R>("getCommonName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCountry(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCountry")] != -1);
		return call<R>("getCountry", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDNQualifier(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDNQualifier")] != -1);
		return call<R>("getDNQualifier", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDomain(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDomain")] != -1);
		return call<R>("getDomain", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getEncoded(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEncoded")] != -1);
		return call<R>("getEncoded", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getEncodedInternal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEncodedInternal")] != -1);
		return call<R>("getEncodedInternal", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getGeneration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGeneration")] != -1);
		return call<R>("getGeneration", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getGivenName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGivenName")] != -1);
		return call<R>("getGivenName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getIP(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIP")] != -1);
		return call<R>("getIP", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getInitials(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInitials")] != -1);
		return call<R>("getInitials", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLocality(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocality")] != -1);
		return call<R>("getLocality", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getOrganization(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOrganization")] != -1);
		return call<R>("getOrganization", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getOrganizationalUnit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOrganizationalUnit")] != -1);
		return call<R>("getOrganizationalUnit", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRFC1779Name(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRFC1779Name")] != -1);
		return call<R>("getRFC1779Name", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRFC2253CanonicalName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRFC2253CanonicalName")] != -1);
		return call<R>("getRFC2253CanonicalName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRFC2253Name(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRFC2253Name")] != -1);
		return call<R>("getRFC2253Name", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getState")] != -1);
		return call<R>("getState", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSurname(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSurname")] != -1);
		return call<R>("getSurname", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEmpty")] != -1);
		return call<R>("isEmpty", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto rdns(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rdns")] != -1);
		return call<R>("rdns", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto size(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("size")] != -1);
		return call<R>("size", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto subtreeDepth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("subtreeDepth")] != -1);
		return call<R>("subtreeDepth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
