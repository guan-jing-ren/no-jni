#ifndef sun_security_x509_GeneralSubtrees_HPP
#define sun_security_x509_GeneralSubtrees_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::x509::GeneralSubtrees : public jObject<::sun::security::x509::GeneralSubtrees, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_x509 / "GeneralSubtrees";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::sun::security::util::DerValue)>(), //
		jMethod<::jvoid(::sun::security::x509::GeneralSubtree)>("add"), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jboolean(::sun::security::x509::GeneralSubtree)>("contains"), //
		jMethod<::jvoid(::sun::security::util::DerOutputStream)>("encode"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::sun::security::x509::GeneralSubtree(::jint)>("get"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::sun::security::x509::GeneralSubtrees(::sun::security::x509::GeneralSubtrees)>("intersect"), //
		jMethod<::java::util::Iterator()>("iterator"), //
		jMethod<::jvoid(::sun::security::x509::GeneralSubtrees)>("reduce"), //
		jMethod<::jvoid(::jint)>("remove"), //
		jMethod<::jint()>("size"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::util::List()>("trees"), //
		jMethod<::jvoid(::sun::security::x509::GeneralSubtrees)>("union"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto contains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("contains")] != -1);
		return call<R>("contains", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto encode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("encode")] != -1);
		return call<R>("encode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::x509::GeneralSubtree, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::x509::GeneralSubtrees, typename... Args>
	auto intersect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("intersect")] != -1);
		return call<R>("intersect", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto iterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("iterator")] != -1);
		return call<R>("iterator", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reduce(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reduce")] != -1);
		return call<R>("reduce", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto size(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("size")] != -1);
		return call<R>("size", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto trees(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("trees")] != -1);
		return call<R>("trees", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto union_(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("union")] != -1);
		return call<R>("union", std::forward<Args>(args)...);
	}

};

#endif
