#ifndef sun_security_x509_OIDName_HPP
#define sun_security_x509_OIDName_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::x509::OIDName : public jObject<::sun::security::x509::OIDName, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_x509 / "OIDName";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::sun::security::util::DerValue)>(), //
		jConstructor<::jvoid(::sun::security::util::ObjectIdentifier)>(), //
		jMethod<::jint(::sun::security::x509::GeneralNameInterface)>("constrains"), //
		jMethod<::jvoid(::sun::security::util::DerOutputStream)>("encode"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::sun::security::util::ObjectIdentifier()>("getOID"), //
		jMethod<::jint()>("getType"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jint()>("subtreeDepth"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jint, typename... Args>
	auto constrains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("constrains")] != -1);
		return call<R>("constrains", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto encode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("encode")] != -1);
		return call<R>("encode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::util::ObjectIdentifier, typename... Args>
	auto getOID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOID")] != -1);
		return call<R>("getOID", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto subtreeDepth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("subtreeDepth")] != -1);
		return call<R>("subtreeDepth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
