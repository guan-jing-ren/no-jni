#ifndef sun_security_jca_GetInstance$Instance_HPP
#define sun_security_jca_GetInstance$Instance_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::jca::GetInstance$Instance : public jObject<::sun::security::jca::GetInstance$Instance, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_jca / "GetInstance$Instance";

	constexpr static Enume field_signatures{
		jField<::java::lang::Object>("impl"), //
		jField<::java::security::Provider>("provider"), //
	};

	template<typename F = ::java::lang::Object>
	auto impl() const {
		static_assert(field_signatures[jField<F>("impl")] != -1);
		return at<F>("impl");
	}

	template<typename F = ::java::security::Provider>
	auto provider() const {
		static_assert(field_signatures[jField<F>("provider")] != -1);
		return at<F>("provider");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Object *()>("toArray"), //
	};

	template<typename R = ::java::lang::Object *, typename... Args>
	auto toArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toArray")] != -1);
		return call<R>("toArray", std::forward<Args>(args)...);
	}

};

#endif
