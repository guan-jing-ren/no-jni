#ifndef sun_security_jca_JCAUtil_HPP
#define sun_security_jca_JCAUtil_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::jca::JCAUtil : public jObject<::sun::security::jca::JCAUtil, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_jca / "JCAUtil";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::security::SecureRandom()>("getSecureRandom"), //
		jMethod<::jint(::jint)>("getTempArraySize"), //
	};

	template<typename R = ::java::security::SecureRandom, typename... Args>
	static auto getSecureRandom(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSecureRandom")] != -1);
		return scall<R>("getSecureRandom", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getTempArraySize(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTempArraySize")] != -1);
		return scall<R>("getTempArraySize", std::forward<Args>(args)...);
	}

};

#endif
