#ifndef sun_security_pkcs_EncryptedPrivateKeyInfo_HPP
#define sun_security_pkcs_EncryptedPrivateKeyInfo_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::pkcs::EncryptedPrivateKeyInfo : public jObject<::sun::security::pkcs::EncryptedPrivateKeyInfo, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_pkcs / "EncryptedPrivateKeyInfo";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::sun::security::x509::AlgorithmId, ::jbyte *)>(), //
		jConstructor<::jvoid(::jbyte *)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::sun::security::x509::AlgorithmId()>("getAlgorithm"), //
		jMethod<::jbyte *()>("getEncoded"), //
		jMethod<::jbyte *()>("getEncryptedData"), //
		jMethod<::jint()>("hashCode"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::x509::AlgorithmId, typename... Args>
	auto getAlgorithm(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlgorithm")] != -1);
		return call<R>("getAlgorithm", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getEncoded(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEncoded")] != -1);
		return call<R>("getEncoded", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getEncryptedData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEncryptedData")] != -1);
		return call<R>("getEncryptedData", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

};

#endif
