#ifndef sun_security_pkcs_PKCS9Attributes_HPP
#define sun_security_pkcs_PKCS9Attributes_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::pkcs::PKCS9Attributes : public jObject<::sun::security::pkcs::PKCS9Attributes, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_pkcs / "PKCS9Attributes";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::sun::security::util::DerInputStream)>(), //
		jConstructor<::jvoid(::sun::security::util::DerInputStream, ::jboolean)>(), //
		jConstructor<::jvoid(::sun::security::pkcs::PKCS9Attribute *)>(), //
		jConstructor<::jvoid(::sun::security::util::ObjectIdentifier *, ::sun::security::util::DerInputStream)>(), //
		jMethod<::jvoid(::jbyte, ::java::io::OutputStream)>("encode"), //
		jMethod<::sun::security::pkcs::PKCS9Attribute(::java::lang::String)>("getAttribute"), //
		jMethod<::sun::security::pkcs::PKCS9Attribute(::sun::security::util::ObjectIdentifier)>("getAttribute"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getAttributeValue"), //
		jMethod<::java::lang::Object(::sun::security::util::ObjectIdentifier)>("getAttributeValue"), //
		jMethod<::sun::security::pkcs::PKCS9Attribute *()>("getAttributes"), //
		jMethod<::jbyte *()>("getDerEncoding"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto encode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("encode")] != -1);
		return call<R>("encode", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::pkcs::PKCS9Attribute, typename... Args>
	auto getAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttribute")] != -1);
		return call<R>("getAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getAttributeValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributeValue")] != -1);
		return call<R>("getAttributeValue", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::pkcs::PKCS9Attribute *, typename... Args>
	auto getAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributes")] != -1);
		return call<R>("getAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getDerEncoding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDerEncoding")] != -1);
		return call<R>("getDerEncoding", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
