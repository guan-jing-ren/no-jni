#ifndef sun_security_pkcs_PKCS9Attribute_HPP
#define sun_security_pkcs_PKCS9Attribute_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::pkcs::PKCS9Attribute : public jObject<::sun::security::pkcs::PKCS9Attribute, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_pkcs / "PKCS9Attribute";

	constexpr static Enume field_signatures{
		jField<::sun::security::util::ObjectIdentifier>("CHALLENGE_PASSWORD_OID"), //
		jField<::java::lang::String>("CHALLENGE_PASSWORD_STR"), //
		jField<::sun::security::util::ObjectIdentifier>("CONTENT_TYPE_OID"), //
		jField<::java::lang::String>("CONTENT_TYPE_STR"), //
		jField<::sun::security::util::ObjectIdentifier>("COUNTERSIGNATURE_OID"), //
		jField<::java::lang::String>("COUNTERSIGNATURE_STR"), //
		jField<::sun::security::util::ObjectIdentifier>("EMAIL_ADDRESS_OID"), //
		jField<::java::lang::String>("EMAIL_ADDRESS_STR"), //
		jField<::sun::security::util::ObjectIdentifier>("EXTENDED_CERTIFICATE_ATTRIBUTES_OID"), //
		jField<::java::lang::String>("EXTENDED_CERTIFICATE_ATTRIBUTES_STR"), //
		jField<::sun::security::util::ObjectIdentifier>("EXTENSION_REQUEST_OID"), //
		jField<::java::lang::String>("EXTENSION_REQUEST_STR"), //
		jField<::sun::security::util::ObjectIdentifier>("ISSUER_SERIALNUMBER_OID"), //
		jField<::java::lang::String>("ISSUER_SERIALNUMBER_STR"), //
		jField<::sun::security::util::ObjectIdentifier>("MESSAGE_DIGEST_OID"), //
		jField<::java::lang::String>("MESSAGE_DIGEST_STR"), //
		jField<::sun::security::util::ObjectIdentifier>("SIGNATURE_TIMESTAMP_TOKEN_OID"), //
		jField<::java::lang::String>("SIGNATURE_TIMESTAMP_TOKEN_STR"), //
		jField<::sun::security::util::ObjectIdentifier>("SIGNING_CERTIFICATE_OID"), //
		jField<::java::lang::String>("SIGNING_CERTIFICATE_STR"), //
		jField<::sun::security::util::ObjectIdentifier>("SIGNING_TIME_OID"), //
		jField<::java::lang::String>("SIGNING_TIME_STR"), //
		jField<::sun::security::util::ObjectIdentifier>("SMIME_CAPABILITY_OID"), //
		jField<::java::lang::String>("SMIME_CAPABILITY_STR"), //
		jField<::sun::security::util::ObjectIdentifier>("UNSTRUCTURED_ADDRESS_OID"), //
		jField<::java::lang::String>("UNSTRUCTURED_ADDRESS_STR"), //
		jField<::sun::security::util::ObjectIdentifier>("UNSTRUCTURED_NAME_OID"), //
		jField<::java::lang::String>("UNSTRUCTURED_NAME_STR"), //
	};

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto CHALLENGE_PASSWORD_OID() {
		static_assert(field_signatures[jField<F>("CHALLENGE_PASSWORD_OID")] != -1);
		return sat<F>("CHALLENGE_PASSWORD_OID");
	}

	template<typename F = ::java::lang::String>
	static auto CHALLENGE_PASSWORD_STR() {
		static_assert(field_signatures[jField<F>("CHALLENGE_PASSWORD_STR")] != -1);
		return sat<F>("CHALLENGE_PASSWORD_STR");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto CONTENT_TYPE_OID() {
		static_assert(field_signatures[jField<F>("CONTENT_TYPE_OID")] != -1);
		return sat<F>("CONTENT_TYPE_OID");
	}

	template<typename F = ::java::lang::String>
	static auto CONTENT_TYPE_STR() {
		static_assert(field_signatures[jField<F>("CONTENT_TYPE_STR")] != -1);
		return sat<F>("CONTENT_TYPE_STR");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto COUNTERSIGNATURE_OID() {
		static_assert(field_signatures[jField<F>("COUNTERSIGNATURE_OID")] != -1);
		return sat<F>("COUNTERSIGNATURE_OID");
	}

	template<typename F = ::java::lang::String>
	static auto COUNTERSIGNATURE_STR() {
		static_assert(field_signatures[jField<F>("COUNTERSIGNATURE_STR")] != -1);
		return sat<F>("COUNTERSIGNATURE_STR");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto EMAIL_ADDRESS_OID() {
		static_assert(field_signatures[jField<F>("EMAIL_ADDRESS_OID")] != -1);
		return sat<F>("EMAIL_ADDRESS_OID");
	}

	template<typename F = ::java::lang::String>
	static auto EMAIL_ADDRESS_STR() {
		static_assert(field_signatures[jField<F>("EMAIL_ADDRESS_STR")] != -1);
		return sat<F>("EMAIL_ADDRESS_STR");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto EXTENDED_CERTIFICATE_ATTRIBUTES_OID() {
		static_assert(field_signatures[jField<F>("EXTENDED_CERTIFICATE_ATTRIBUTES_OID")] != -1);
		return sat<F>("EXTENDED_CERTIFICATE_ATTRIBUTES_OID");
	}

	template<typename F = ::java::lang::String>
	static auto EXTENDED_CERTIFICATE_ATTRIBUTES_STR() {
		static_assert(field_signatures[jField<F>("EXTENDED_CERTIFICATE_ATTRIBUTES_STR")] != -1);
		return sat<F>("EXTENDED_CERTIFICATE_ATTRIBUTES_STR");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto EXTENSION_REQUEST_OID() {
		static_assert(field_signatures[jField<F>("EXTENSION_REQUEST_OID")] != -1);
		return sat<F>("EXTENSION_REQUEST_OID");
	}

	template<typename F = ::java::lang::String>
	static auto EXTENSION_REQUEST_STR() {
		static_assert(field_signatures[jField<F>("EXTENSION_REQUEST_STR")] != -1);
		return sat<F>("EXTENSION_REQUEST_STR");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto ISSUER_SERIALNUMBER_OID() {
		static_assert(field_signatures[jField<F>("ISSUER_SERIALNUMBER_OID")] != -1);
		return sat<F>("ISSUER_SERIALNUMBER_OID");
	}

	template<typename F = ::java::lang::String>
	static auto ISSUER_SERIALNUMBER_STR() {
		static_assert(field_signatures[jField<F>("ISSUER_SERIALNUMBER_STR")] != -1);
		return sat<F>("ISSUER_SERIALNUMBER_STR");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto MESSAGE_DIGEST_OID() {
		static_assert(field_signatures[jField<F>("MESSAGE_DIGEST_OID")] != -1);
		return sat<F>("MESSAGE_DIGEST_OID");
	}

	template<typename F = ::java::lang::String>
	static auto MESSAGE_DIGEST_STR() {
		static_assert(field_signatures[jField<F>("MESSAGE_DIGEST_STR")] != -1);
		return sat<F>("MESSAGE_DIGEST_STR");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto SIGNATURE_TIMESTAMP_TOKEN_OID() {
		static_assert(field_signatures[jField<F>("SIGNATURE_TIMESTAMP_TOKEN_OID")] != -1);
		return sat<F>("SIGNATURE_TIMESTAMP_TOKEN_OID");
	}

	template<typename F = ::java::lang::String>
	static auto SIGNATURE_TIMESTAMP_TOKEN_STR() {
		static_assert(field_signatures[jField<F>("SIGNATURE_TIMESTAMP_TOKEN_STR")] != -1);
		return sat<F>("SIGNATURE_TIMESTAMP_TOKEN_STR");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto SIGNING_CERTIFICATE_OID() {
		static_assert(field_signatures[jField<F>("SIGNING_CERTIFICATE_OID")] != -1);
		return sat<F>("SIGNING_CERTIFICATE_OID");
	}

	template<typename F = ::java::lang::String>
	static auto SIGNING_CERTIFICATE_STR() {
		static_assert(field_signatures[jField<F>("SIGNING_CERTIFICATE_STR")] != -1);
		return sat<F>("SIGNING_CERTIFICATE_STR");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto SIGNING_TIME_OID() {
		static_assert(field_signatures[jField<F>("SIGNING_TIME_OID")] != -1);
		return sat<F>("SIGNING_TIME_OID");
	}

	template<typename F = ::java::lang::String>
	static auto SIGNING_TIME_STR() {
		static_assert(field_signatures[jField<F>("SIGNING_TIME_STR")] != -1);
		return sat<F>("SIGNING_TIME_STR");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto SMIME_CAPABILITY_OID() {
		static_assert(field_signatures[jField<F>("SMIME_CAPABILITY_OID")] != -1);
		return sat<F>("SMIME_CAPABILITY_OID");
	}

	template<typename F = ::java::lang::String>
	static auto SMIME_CAPABILITY_STR() {
		static_assert(field_signatures[jField<F>("SMIME_CAPABILITY_STR")] != -1);
		return sat<F>("SMIME_CAPABILITY_STR");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto UNSTRUCTURED_ADDRESS_OID() {
		static_assert(field_signatures[jField<F>("UNSTRUCTURED_ADDRESS_OID")] != -1);
		return sat<F>("UNSTRUCTURED_ADDRESS_OID");
	}

	template<typename F = ::java::lang::String>
	static auto UNSTRUCTURED_ADDRESS_STR() {
		static_assert(field_signatures[jField<F>("UNSTRUCTURED_ADDRESS_STR")] != -1);
		return sat<F>("UNSTRUCTURED_ADDRESS_STR");
	}

	template<typename F = ::sun::security::util::ObjectIdentifier>
	static auto UNSTRUCTURED_NAME_OID() {
		static_assert(field_signatures[jField<F>("UNSTRUCTURED_NAME_OID")] != -1);
		return sat<F>("UNSTRUCTURED_NAME_OID");
	}

	template<typename F = ::java::lang::String>
	static auto UNSTRUCTURED_NAME_STR() {
		static_assert(field_signatures[jField<F>("UNSTRUCTURED_NAME_STR")] != -1);
		return sat<F>("UNSTRUCTURED_NAME_STR");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::java::lang::Object)>(), //
		jConstructor<::jvoid(::sun::security::util::DerValue)>(), //
		jConstructor<::jvoid(::sun::security::util::ObjectIdentifier, ::java::lang::Object)>(), //
		jMethod<::jvoid(::java::io::OutputStream)>("derEncode"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::lang::String(::sun::security::util::ObjectIdentifier)>("getName"), //
		jMethod<::sun::security::util::ObjectIdentifier()>("getOID"), //
		jMethod<::sun::security::util::ObjectIdentifier(::java::lang::String)>("getOID"), //
		jMethod<::java::lang::Object()>("getValue"), //
		jMethod<::jboolean()>("isKnown"), //
		jMethod<::jboolean()>("isSingleValued"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto derEncode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("derEncode")] != -1);
		return call<R>("derEncode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::util::ObjectIdentifier, typename... Args>
	auto getOID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOID")] != -1);
		return call<R>("getOID", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isKnown(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isKnown")] != -1);
		return call<R>("isKnown", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSingleValued(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSingleValued")] != -1);
		return call<R>("isSingleValued", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
