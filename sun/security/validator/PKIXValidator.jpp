#ifndef sun_security_validator_PKIXValidator_HPP
#define sun_security_validator_PKIXValidator_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::validator::PKIXValidator : public jObject<::sun::security::validator::PKIXValidator, ::sun::security::validator::Validator> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_validator / "PKIXValidator";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint()>("getCertPathLength"), //
		jMethod<::java::security::cert::PKIXBuilderParameters()>("getParameters"), //
		jMethod<::java::util::Collection()>("getTrustedCertificates"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getCertPathLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCertPathLength")] != -1);
		return call<R>("getCertPathLength", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::cert::PKIXBuilderParameters, typename... Args>
	auto getParameters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParameters")] != -1);
		return call<R>("getParameters", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Collection, typename... Args>
	auto getTrustedCertificates(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTrustedCertificates")] != -1);
		return call<R>("getTrustedCertificates", std::forward<Args>(args)...);
	}

};

#endif
