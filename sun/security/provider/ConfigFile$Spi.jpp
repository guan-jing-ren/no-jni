#ifndef sun_security_provider_ConfigFile$Spi_HPP
#define sun_security_provider_ConfigFile$Spi_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::provider::ConfigFile$Spi : public jObject<::sun::security::provider::ConfigFile$Spi, ::javax::security::auth::login::ConfigurationSpi> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_provider / "ConfigFile$Spi";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::net::URI)>(), //
		jConstructor<::jvoid(::javax::security::auth::login::Configuration$Parameters)>(), //
		jMethod<::javax::security::auth::login::AppConfigurationEntry *(::java::lang::String)>("engineGetAppConfigurationEntry"), //
		jMethod<::jvoid()>("engineRefresh"), //
	};

	template<typename R = ::javax::security::auth::login::AppConfigurationEntry *, typename... Args>
	auto engineGetAppConfigurationEntry(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("engineGetAppConfigurationEntry")] != -1);
		return call<R>("engineGetAppConfigurationEntry", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto engineRefresh(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("engineRefresh")] != -1);
		return call<R>("engineRefresh", std::forward<Args>(args)...);
	}

};

#endif
