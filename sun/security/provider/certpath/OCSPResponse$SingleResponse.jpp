#ifndef sun_security_provider_certpath_OCSPResponse$SingleResponse_HPP
#define sun_security_provider_certpath_OCSPResponse$SingleResponse_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::security::provider::certpath::OCSPResponse$SingleResponse : public jObject<::sun::security::provider::certpath::OCSPResponse$SingleResponse, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_provider_certpath / "OCSPResponse$SingleResponse";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::sun::security::provider::certpath::CertId()>("getCertId"), //
		jMethod<::sun::security::provider::certpath::OCSP$RevocationStatus$CertStatus()>("getCertStatus"), //
		jMethod<::java::util::Date()>("getNextUpdate"), //
		jMethod<::java::security::cert::CRLReason()>("getRevocationReason"), //
		jMethod<::java::util::Date()>("getRevocationTime"), //
		jMethod<::java::util::Map()>("getSingleExtensions"), //
		jMethod<::java::util::Date()>("getThisUpdate"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::sun::security::provider::certpath::CertId, typename... Args>
	auto getCertId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCertId")] != -1);
		return call<R>("getCertId", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::provider::certpath::OCSP$RevocationStatus$CertStatus, typename... Args>
	auto getCertStatus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCertStatus")] != -1);
		return call<R>("getCertStatus", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Date, typename... Args>
	auto getNextUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNextUpdate")] != -1);
		return call<R>("getNextUpdate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::cert::CRLReason, typename... Args>
	auto getRevocationReason(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRevocationReason")] != -1);
		return call<R>("getRevocationReason", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Date, typename... Args>
	auto getRevocationTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRevocationTime")] != -1);
		return call<R>("getRevocationTime", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getSingleExtensions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSingleExtensions")] != -1);
		return call<R>("getSingleExtensions", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Date, typename... Args>
	auto getThisUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getThisUpdate")] != -1);
		return call<R>("getThisUpdate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
