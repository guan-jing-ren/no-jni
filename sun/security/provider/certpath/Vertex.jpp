#ifndef sun_security_provider_certpath_Vertex_HPP
#define sun_security_provider_certpath_Vertex_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::security::provider::certpath::Vertex : public jObject<::sun::security::provider::certpath::Vertex, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_provider_certpath / "Vertex";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("certToString"), //
		jMethod<::java::security::cert::X509Certificate()>("getCertificate"), //
		jMethod<::jint()>("getIndex"), //
		jMethod<::java::lang::Throwable()>("getThrowable"), //
		jMethod<::java::lang::String()>("indexToString"), //
		jMethod<::java::lang::String()>("moreToString"), //
		jMethod<::java::lang::String()>("throwableToString"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto certToString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("certToString")] != -1);
		return call<R>("certToString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::cert::X509Certificate, typename... Args>
	auto getCertificate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCertificate")] != -1);
		return call<R>("getCertificate", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIndex")] != -1);
		return call<R>("getIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Throwable, typename... Args>
	auto getThrowable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getThrowable")] != -1);
		return call<R>("getThrowable", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto indexToString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("indexToString")] != -1);
		return call<R>("indexToString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto moreToString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("moreToString")] != -1);
		return call<R>("moreToString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto throwableToString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("throwableToString")] != -1);
		return call<R>("throwableToString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
