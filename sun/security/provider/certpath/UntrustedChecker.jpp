#ifndef sun_security_provider_certpath_UntrustedChecker_HPP
#define sun_security_provider_certpath_UntrustedChecker_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::security::provider::certpath::UntrustedChecker : public jObject<::sun::security::provider::certpath::UntrustedChecker, ::java::security::cert::PKIXCertPathChecker> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_provider_certpath / "UntrustedChecker";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::security::cert::Certificate, ::java::util::Collection)>("check"), //
		jMethod<::java::util::Set()>("getSupportedExtensions"), //
		jMethod<::jvoid(::jboolean)>("init"), //
		jMethod<::jboolean()>("isForwardCheckingSupported"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto check(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("check")] != -1);
		return call<R>("check", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto getSupportedExtensions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSupportedExtensions")] != -1);
		return call<R>("getSupportedExtensions", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto init(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("init")] != -1);
		return call<R>("init", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isForwardCheckingSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isForwardCheckingSupported")] != -1);
		return call<R>("isForwardCheckingSupported", std::forward<Args>(args)...);
	}

};

#endif
