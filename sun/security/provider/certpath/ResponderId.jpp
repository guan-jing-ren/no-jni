#ifndef sun_security_provider_certpath_ResponderId_HPP
#define sun_security_provider_certpath_ResponderId_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::security::provider::certpath::ResponderId : public jObject<::sun::security::provider::certpath::ResponderId, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_provider_certpath / "ResponderId";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::security::PublicKey)>(), //
		jConstructor<::jvoid(::javax::security::auth::x500::X500Principal)>(), //
		jConstructor<::jvoid(::jbyte *)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jbyte *()>("getEncoded"), //
		jMethod<::sun::security::x509::KeyIdentifier()>("getKeyIdentifier"), //
		jMethod<::javax::security::auth::x500::X500Principal()>("getResponderName"), //
		jMethod<::sun::security::provider::certpath::ResponderId$Type()>("getType"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jint()>("length"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getEncoded(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEncoded")] != -1);
		return call<R>("getEncoded", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::x509::KeyIdentifier, typename... Args>
	auto getKeyIdentifier(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeyIdentifier")] != -1);
		return call<R>("getKeyIdentifier", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::security::auth::x500::X500Principal, typename... Args>
	auto getResponderName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResponderName")] != -1);
		return call<R>("getResponderName", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::provider::certpath::ResponderId$Type, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto length(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("length")] != -1);
		return call<R>("length", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
