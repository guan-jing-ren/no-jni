#ifndef sun_security_provider_certpath_ssl_SSLServerCertStoreHelper_HPP
#define sun_security_provider_certpath_ssl_SSLServerCertStoreHelper_HPP

#include "../../../../../jfwd_decl.hpp"

class ::sun::security::provider::certpath::ssl::SSLServerCertStoreHelper : public jObject<::sun::security::provider::certpath::ssl::SSLServerCertStoreHelper, ::sun::security::provider::certpath::CertStoreHelper> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_provider_certpath_ssl / "SSLServerCertStoreHelper";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::security::cert::CertStore(::java::net::URI)>("getCertStore"), //
		jMethod<::jboolean(::java::security::cert::CertStoreException)>("isCausedByNetworkIssue"), //
		jMethod<::java::security::cert::X509CRLSelector(::java::security::cert::X509CRLSelector, ::java::util::Collection, ::java::lang::String)>("wrap"), //
		jMethod<::java::security::cert::X509CertSelector(::java::security::cert::X509CertSelector, ::javax::security::auth::x500::X500Principal, ::java::lang::String)>("wrap"), //
	};

	template<typename R = ::java::security::cert::CertStore, typename... Args>
	auto getCertStore(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCertStore")] != -1);
		return call<R>("getCertStore", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCausedByNetworkIssue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCausedByNetworkIssue")] != -1);
		return call<R>("isCausedByNetworkIssue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::cert::X509CRLSelector, typename... Args>
	auto wrap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("wrap")] != -1);
		return call<R>("wrap", std::forward<Args>(args)...);
	}

};

#endif
