#ifndef sun_security_provider_certpath_OCSPResponse$ResponseStatus_HPP
#define sun_security_provider_certpath_OCSPResponse$ResponseStatus_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::security::provider::certpath::OCSPResponse$ResponseStatus : public jObject<::sun::security::provider::certpath::OCSPResponse$ResponseStatus, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_provider_certpath / "OCSPResponse$ResponseStatus";

	constexpr static Enume field_signatures{
		jField<::sun::security::provider::certpath::OCSPResponse$ResponseStatus>("INTERNAL_ERROR"), //
		jField<::sun::security::provider::certpath::OCSPResponse$ResponseStatus>("MALFORMED_REQUEST"), //
		jField<::sun::security::provider::certpath::OCSPResponse$ResponseStatus>("SIG_REQUIRED"), //
		jField<::sun::security::provider::certpath::OCSPResponse$ResponseStatus>("SUCCESSFUL"), //
		jField<::sun::security::provider::certpath::OCSPResponse$ResponseStatus>("TRY_LATER"), //
		jField<::sun::security::provider::certpath::OCSPResponse$ResponseStatus>("UNAUTHORIZED"), //
		jField<::sun::security::provider::certpath::OCSPResponse$ResponseStatus>("UNUSED"), //
	};

	template<typename F = ::sun::security::provider::certpath::OCSPResponse$ResponseStatus>
	static auto INTERNAL_ERROR() {
		static_assert(field_signatures[jField<F>("INTERNAL_ERROR")] != -1);
		return sat<F>("INTERNAL_ERROR");
	}

	template<typename F = ::sun::security::provider::certpath::OCSPResponse$ResponseStatus>
	static auto MALFORMED_REQUEST() {
		static_assert(field_signatures[jField<F>("MALFORMED_REQUEST")] != -1);
		return sat<F>("MALFORMED_REQUEST");
	}

	template<typename F = ::sun::security::provider::certpath::OCSPResponse$ResponseStatus>
	static auto SIG_REQUIRED() {
		static_assert(field_signatures[jField<F>("SIG_REQUIRED")] != -1);
		return sat<F>("SIG_REQUIRED");
	}

	template<typename F = ::sun::security::provider::certpath::OCSPResponse$ResponseStatus>
	static auto SUCCESSFUL() {
		static_assert(field_signatures[jField<F>("SUCCESSFUL")] != -1);
		return sat<F>("SUCCESSFUL");
	}

	template<typename F = ::sun::security::provider::certpath::OCSPResponse$ResponseStatus>
	static auto TRY_LATER() {
		static_assert(field_signatures[jField<F>("TRY_LATER")] != -1);
		return sat<F>("TRY_LATER");
	}

	template<typename F = ::sun::security::provider::certpath::OCSPResponse$ResponseStatus>
	static auto UNAUTHORIZED() {
		static_assert(field_signatures[jField<F>("UNAUTHORIZED")] != -1);
		return sat<F>("UNAUTHORIZED");
	}

	template<typename F = ::sun::security::provider::certpath::OCSPResponse$ResponseStatus>
	static auto UNUSED() {
		static_assert(field_signatures[jField<F>("UNUSED")] != -1);
		return sat<F>("UNUSED");
	}

	constexpr static Enume method_signatures{
		jMethod<::sun::security::provider::certpath::OCSPResponse$ResponseStatus(::java::lang::String)>("valueOf"), //
		jMethod<::sun::security::provider::certpath::OCSPResponse$ResponseStatus *()>("values"), //
	};

	template<typename R = ::sun::security::provider::certpath::OCSPResponse$ResponseStatus, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::security::provider::certpath::OCSPResponse$ResponseStatus *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
