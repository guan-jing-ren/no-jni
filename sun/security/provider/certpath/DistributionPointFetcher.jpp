#ifndef sun_security_provider_certpath_DistributionPointFetcher_HPP
#define sun_security_provider_certpath_DistributionPointFetcher_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::security::provider::certpath::DistributionPointFetcher : public jObject<::sun::security::provider::certpath::DistributionPointFetcher, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_provider_certpath / "DistributionPointFetcher";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::util::Collection(::java::security::cert::X509CRLSelector, ::jboolean, ::java::security::PublicKey, ::java::lang::String, ::java::util::List, ::jboolean *, ::java::util::Set, ::java::util::Date)>("getCRLs"), //
		jMethod<::java::util::Collection(::java::security::cert::X509CRLSelector, ::jboolean, ::java::security::PublicKey, ::java::lang::String, ::java::util::List, ::jboolean *, ::java::util::Set, ::java::util::Date, ::java::lang::String)>("getCRLs"), //
		jMethod<::java::util::Collection(::java::security::cert::X509CRLSelector, ::jboolean, ::java::security::PublicKey, ::java::security::cert::X509Certificate, ::java::lang::String, ::java::util::List, ::jboolean *, ::java::util::Set, ::java::util::Date, ::java::lang::String)>("getCRLs"), //
	};

	template<typename R = ::java::util::Collection, typename... Args>
	static auto getCRLs(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCRLs")] != -1);
		return scall<R>("getCRLs", std::forward<Args>(args)...);
	}

};

#endif
