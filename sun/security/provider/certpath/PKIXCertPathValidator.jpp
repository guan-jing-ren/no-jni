#ifndef sun_security_provider_certpath_PKIXCertPathValidator_HPP
#define sun_security_provider_certpath_PKIXCertPathValidator_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::security::provider::certpath::PKIXCertPathValidator : public jObject<::sun::security::provider::certpath::PKIXCertPathValidator, ::java::security::cert::CertPathValidatorSpi> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_provider_certpath / "PKIXCertPathValidator";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::security::cert::CertPathChecker()>("engineGetRevocationChecker"), //
		jMethod<::java::security::cert::CertPathValidatorResult(::java::security::cert::CertPath, ::java::security::cert::CertPathParameters)>("engineValidate"), //
	};

	template<typename R = ::java::security::cert::CertPathChecker, typename... Args>
	auto engineGetRevocationChecker(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("engineGetRevocationChecker")] != -1);
		return call<R>("engineGetRevocationChecker", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::cert::CertPathValidatorResult, typename... Args>
	auto engineValidate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("engineValidate")] != -1);
		return call<R>("engineValidate", std::forward<Args>(args)...);
	}

};

#endif
