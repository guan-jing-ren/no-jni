#ifndef sun_security_provider_DSAPrivateKey_HPP
#define sun_security_provider_DSAPrivateKey_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::provider::DSAPrivateKey : public jObject<::sun::security::provider::DSAPrivateKey, ::sun::security::pkcs::PKCS8Key> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_provider / "DSAPrivateKey";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::math::BigInteger, ::java::math::BigInteger, ::java::math::BigInteger, ::java::math::BigInteger)>(), //
		jConstructor<::jvoid(::jbyte *)>(), //
		jMethod<::java::security::interfaces::DSAParams()>("getParams"), //
		jMethod<::java::math::BigInteger()>("getX"), //
	};

	template<typename R = ::java::security::interfaces::DSAParams, typename... Args>
	auto getParams(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParams")] != -1);
		return call<R>("getParams", std::forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto getX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getX")] != -1);
		return call<R>("getX", std::forward<Args>(args)...);
	}

};

#endif
