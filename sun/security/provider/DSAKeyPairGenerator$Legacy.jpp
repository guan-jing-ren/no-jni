#ifndef sun_security_provider_DSAKeyPairGenerator$Legacy_HPP
#define sun_security_provider_DSAKeyPairGenerator$Legacy_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::provider::DSAKeyPairGenerator$Legacy : public jObject<::sun::security::provider::DSAKeyPairGenerator$Legacy, ::sun::security::provider::DSAKeyPairGenerator> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_provider / "DSAKeyPairGenerator$Legacy";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::security::KeyPair()>("generateKeyPair"), //
		jMethod<::jvoid(::jint, ::java::security::SecureRandom)>("initialize"), //
		jMethod<::jvoid(::jint, ::jboolean, ::java::security::SecureRandom)>("initialize"), //
		jMethod<::jvoid(::java::security::interfaces::DSAParams, ::java::security::SecureRandom)>("initialize"), //
		jMethod<::jvoid(::java::security::spec::AlgorithmParameterSpec, ::java::security::SecureRandom)>("initialize"), //
	};

	template<typename R = ::java::security::KeyPair, typename... Args>
	auto generateKeyPair(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("generateKeyPair")] != -1);
		return call<R>("generateKeyPair", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto initialize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initialize")] != -1);
		return call<R>("initialize", std::forward<Args>(args)...);
	}

};

#endif
