#ifndef sun_security_provider_PolicyParser$PermissionEntry_HPP
#define sun_security_provider_PolicyParser$PermissionEntry_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::provider::PolicyParser$PermissionEntry : public jObject<::sun::security::provider::PolicyParser$PermissionEntry, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_provider / "PolicyParser$PermissionEntry";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("action"), //
		jField<::java::lang::String>("name"), //
		jField<::java::lang::String>("permission"), //
		jField<::java::lang::String>("signedBy"), //
	};

	template<typename F = ::java::lang::String>
	auto action() const {
		static_assert(field_signatures[jField<F>("action")] != -1);
		return at<F>("action");
	}

	template<typename F = ::java::lang::String>
	auto name() const {
		static_assert(field_signatures[jField<F>("name")] != -1);
		return at<F>("name");
	}

	template<typename F = ::java::lang::String>
	auto permission() const {
		static_assert(field_signatures[jField<F>("permission")] != -1);
		return at<F>("permission");
	}

	template<typename F = ::java::lang::String>
	auto signedBy() const {
		static_assert(field_signatures[jField<F>("signedBy")] != -1);
		return at<F>("signedBy");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jvoid(::java::io::PrintWriter)>("write"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write")] != -1);
		return call<R>("write", std::forward<Args>(args)...);
	}

};

#endif
