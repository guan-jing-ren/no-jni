#ifndef sun_security_provider_PolicyFile_HPP
#define sun_security_provider_PolicyFile_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::provider::PolicyFile : public jObject<::sun::security::provider::PolicyFile, ::java::security::Policy> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_provider / "PolicyFile";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::net::URL)>(), //
		jMethod<::java::security::PermissionCollection(::java::security::CodeSource)>("getPermissions"), //
		jMethod<::java::security::PermissionCollection(::java::security::ProtectionDomain)>("getPermissions"), //
		jMethod<::jboolean(::java::security::ProtectionDomain, ::java::security::Permission)>("implies"), //
		jMethod<::jvoid()>("refresh"), //
	};

	template<typename R = ::java::security::PermissionCollection, typename... Args>
	auto getPermissions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPermissions")] != -1);
		return call<R>("getPermissions", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto implies(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("implies")] != -1);
		return call<R>("implies", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto refresh(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("refresh")] != -1);
		return call<R>("refresh", std::forward<Args>(args)...);
	}

};

#endif
