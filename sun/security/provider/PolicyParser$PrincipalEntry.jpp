#ifndef sun_security_provider_PolicyParser$PrincipalEntry_HPP
#define sun_security_provider_PolicyParser$PrincipalEntry_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::provider::PolicyParser$PrincipalEntry : public jObject<::sun::security::provider::PolicyParser$PrincipalEntry, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_provider / "PolicyParser$PrincipalEntry";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("REPLACE_NAME"), //
		jField<::java::lang::String>("WILDCARD_CLASS"), //
		jField<::java::lang::String>("WILDCARD_NAME"), //
	};

	template<typename F = ::java::lang::String>
	static auto REPLACE_NAME() {
		static_assert(field_signatures[jField<F>("REPLACE_NAME")] != -1);
		return sat<F>("REPLACE_NAME");
	}

	template<typename F = ::java::lang::String>
	static auto WILDCARD_CLASS() {
		static_assert(field_signatures[jField<F>("WILDCARD_CLASS")] != -1);
		return sat<F>("WILDCARD_CLASS");
	}

	template<typename F = ::java::lang::String>
	static auto WILDCARD_NAME() {
		static_assert(field_signatures[jField<F>("WILDCARD_NAME")] != -1);
		return sat<F>("WILDCARD_NAME");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::String()>("getDisplayClass"), //
		jMethod<::java::lang::String()>("getDisplayName"), //
		jMethod<::java::lang::String(::jboolean)>("getDisplayName"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::lang::String()>("getPrincipalClass"), //
		jMethod<::java::lang::String()>("getPrincipalName"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid(::java::io::PrintWriter)>("write"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDisplayClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisplayClass")] != -1);
		return call<R>("getDisplayClass", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDisplayName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisplayName")] != -1);
		return call<R>("getDisplayName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPrincipalClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrincipalClass")] != -1);
		return call<R>("getPrincipalClass", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPrincipalName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrincipalName")] != -1);
		return call<R>("getPrincipalName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write")] != -1);
		return call<R>("write", std::forward<Args>(args)...);
	}

};

#endif
