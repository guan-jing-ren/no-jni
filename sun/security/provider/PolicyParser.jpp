#ifndef sun_security_provider_PolicyParser_HPP
#define sun_security_provider_PolicyParser_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::provider::PolicyParser : public jObject<::sun::security::provider::PolicyParser, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_provider / "PolicyParser";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jboolean)>(), //
		jMethod<::jvoid(::sun::security::provider::PolicyParser$GrantEntry)>("add"), //
		jMethod<::java::util::Collection()>("getDomainEntries"), //
		jMethod<::java::lang::String()>("getKeyStoreProvider"), //
		jMethod<::java::lang::String()>("getKeyStoreType"), //
		jMethod<::java::lang::String()>("getKeyStoreUrl"), //
		jMethod<::java::lang::String()>("getStorePassURL"), //
		jMethod<::java::util::Enumeration()>("grantElements"), //
		jMethod<::jvoid(::java::lang::String *)>("main"), //
		jMethod<::jvoid(::java::io::Reader)>("read"), //
		jMethod<::jboolean(::sun::security::provider::PolicyParser$GrantEntry)>("remove"), //
		jMethod<::jvoid(::sun::security::provider::PolicyParser$GrantEntry, ::sun::security::provider::PolicyParser$GrantEntry)>("replace"), //
		jMethod<::jvoid(::java::lang::String)>("setKeyStoreProvider"), //
		jMethod<::jvoid(::java::lang::String)>("setKeyStoreType"), //
		jMethod<::jvoid(::java::lang::String)>("setKeyStoreUrl"), //
		jMethod<::jvoid(::java::lang::String)>("setStorePassURL"), //
		jMethod<::jvoid(::java::io::Writer)>("write"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Collection, typename... Args>
	auto getDomainEntries(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDomainEntries")] != -1);
		return call<R>("getDomainEntries", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getKeyStoreProvider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeyStoreProvider")] != -1);
		return call<R>("getKeyStoreProvider", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getKeyStoreType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeyStoreType")] != -1);
		return call<R>("getKeyStoreType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getKeyStoreUrl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeyStoreUrl")] != -1);
		return call<R>("getKeyStoreUrl", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getStorePassURL(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStorePassURL")] != -1);
		return call<R>("getStorePassURL", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto grantElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("grantElements")] != -1);
		return call<R>("grantElements", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto main(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("main")] != -1);
		return scall<R>("main", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("read")] != -1);
		return call<R>("read", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto replace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("replace")] != -1);
		return call<R>("replace", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setKeyStoreProvider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setKeyStoreProvider")] != -1);
		return call<R>("setKeyStoreProvider", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setKeyStoreType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setKeyStoreType")] != -1);
		return call<R>("setKeyStoreType", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setKeyStoreUrl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setKeyStoreUrl")] != -1);
		return call<R>("setKeyStoreUrl", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setStorePassURL(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setStorePassURL")] != -1);
		return call<R>("setStorePassURL", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write")] != -1);
		return call<R>("write", std::forward<Args>(args)...);
	}

};

#endif
