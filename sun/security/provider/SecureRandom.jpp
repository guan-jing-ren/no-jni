#ifndef sun_security_provider_SecureRandom_HPP
#define sun_security_provider_SecureRandom_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::security::provider::SecureRandom : public jObject<::sun::security::provider::SecureRandom, ::java::security::SecureRandomSpi> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_security_provider / "SecureRandom";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jbyte *(::jint)>("engineGenerateSeed"), //
		jMethod<::jvoid(::jbyte *)>("engineNextBytes"), //
		jMethod<::jvoid(::jbyte *)>("engineSetSeed"), //
	};

	template<typename R = ::jbyte *, typename... Args>
	auto engineGenerateSeed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("engineGenerateSeed")] != -1);
		return call<R>("engineGenerateSeed", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto engineNextBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("engineNextBytes")] != -1);
		return call<R>("engineNextBytes", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto engineSetSeed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("engineSetSeed")] != -1);
		return call<R>("engineSetSeed", std::forward<Args>(args)...);
	}

};

#endif
