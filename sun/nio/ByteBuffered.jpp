#ifndef sun_nio_ByteBuffered_HPP
#define sun_nio_ByteBuffered_HPP

#include "../../jfwd_decl.hpp"

class ::sun::nio::ByteBuffered : public jObject<::sun::nio::ByteBuffered, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_nio / "ByteBuffered";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::nio::ByteBuffer()>("getByteBuffer"), //
	};

	template<typename R = ::java::nio::ByteBuffer, typename... Args>
	auto getByteBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getByteBuffer")] != -1);
		return call<R>("getByteBuffer", std::forward<Args>(args)...);
	}

};

#endif
