#ifndef sun_nio_ch_InheritedChannel$InheritedSocketChannelImpl_HPP
#define sun_nio_ch_InheritedChannel$InheritedSocketChannelImpl_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::nio::ch::InheritedChannel$InheritedSocketChannelImpl : public jObject<::sun::nio::ch::InheritedChannel$InheritedSocketChannelImpl, ::sun::nio::ch::SocketChannelImpl> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_nio_ch / "InheritedChannel$InheritedSocketChannelImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::nio::channels::SocketChannel(::java::net::SocketAddress)>("bind"), //
		jMethod<::jboolean(::java::net::SocketAddress)>("connect"), //
		jMethod<::jboolean()>("finishConnect"), //
		jMethod<::java::io::FileDescriptor()>("getFD"), //
		jMethod<::jint()>("getFDVal"), //
		jMethod<::java::net::SocketAddress()>("getLocalAddress"), //
		jMethod<::java::lang::Object(::java::net::SocketOption)>("getOption"), //
		jMethod<::java::net::SocketAddress()>("getRemoteAddress"), //
		jMethod<::jboolean()>("isConnected"), //
		jMethod<::jboolean()>("isConnectionPending"), //
		jMethod<::jboolean()>("isInputOpen"), //
		jMethod<::jboolean()>("isOutputOpen"), //
		jMethod<::jvoid()>("kill"), //
		jMethod<::java::net::InetSocketAddress()>("localAddress"), //
		jMethod<::jint(::java::nio::ByteBuffer)>("read"), //
		jMethod<::jlong(::java::nio::ByteBuffer *, ::jint, ::jint)>("read"), //
		jMethod<::java::net::SocketAddress()>("remoteAddress"), //
		jMethod<::java::nio::channels::SocketChannel(::java::net::SocketOption, ::java::lang::Object)>("setOption"), //
		jMethod<::java::nio::channels::SocketChannel()>("shutdownInput"), //
		jMethod<::java::nio::channels::SocketChannel()>("shutdownOutput"), //
		jMethod<::java::net::Socket()>("socket"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid(::jint, ::sun::nio::ch::SelectionKeyImpl)>("translateAndSetInterestOps"), //
		jMethod<::jboolean(::jint, ::sun::nio::ch::SelectionKeyImpl)>("translateAndSetReadyOps"), //
		jMethod<::jboolean(::jint, ::sun::nio::ch::SelectionKeyImpl)>("translateAndUpdateReadyOps"), //
		jMethod<::jboolean(::jint, ::jint, ::sun::nio::ch::SelectionKeyImpl)>("translateReadyOps"), //
		jMethod<::jint(::java::nio::ByteBuffer)>("write"), //
		jMethod<::jlong(::java::nio::ByteBuffer *, ::jint, ::jint)>("write"), //
	};

	template<typename R = ::java::nio::channels::SocketChannel, typename... Args>
	auto bind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("bind")] != -1);
		return call<R>("bind", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto connect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("connect")] != -1);
		return call<R>("connect", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto finishConnect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("finishConnect")] != -1);
		return call<R>("finishConnect", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::FileDescriptor, typename... Args>
	auto getFD(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFD")] != -1);
		return call<R>("getFD", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getFDVal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFDVal")] != -1);
		return call<R>("getFDVal", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::SocketAddress, typename... Args>
	auto getLocalAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalAddress")] != -1);
		return call<R>("getLocalAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getOption(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOption")] != -1);
		return call<R>("getOption", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::SocketAddress, typename... Args>
	auto getRemoteAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRemoteAddress")] != -1);
		return call<R>("getRemoteAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isConnected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isConnected")] != -1);
		return call<R>("isConnected", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isConnectionPending(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isConnectionPending")] != -1);
		return call<R>("isConnectionPending", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isInputOpen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isInputOpen")] != -1);
		return call<R>("isInputOpen", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isOutputOpen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isOutputOpen")] != -1);
		return call<R>("isOutputOpen", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto kill(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("kill")] != -1);
		return call<R>("kill", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::InetSocketAddress, typename... Args>
	auto localAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("localAddress")] != -1);
		return call<R>("localAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("read")] != -1);
		return call<R>("read", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::SocketAddress, typename... Args>
	auto remoteAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remoteAddress")] != -1);
		return call<R>("remoteAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::SocketChannel, typename... Args>
	auto setOption(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOption")] != -1);
		return call<R>("setOption", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::SocketChannel, typename... Args>
	auto shutdownInput(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shutdownInput")] != -1);
		return call<R>("shutdownInput", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::SocketChannel, typename... Args>
	auto shutdownOutput(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shutdownOutput")] != -1);
		return call<R>("shutdownOutput", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::Socket, typename... Args>
	auto socket(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("socket")] != -1);
		return call<R>("socket", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto translateAndSetInterestOps(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("translateAndSetInterestOps")] != -1);
		return call<R>("translateAndSetInterestOps", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto translateAndSetReadyOps(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("translateAndSetReadyOps")] != -1);
		return call<R>("translateAndSetReadyOps", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto translateAndUpdateReadyOps(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("translateAndUpdateReadyOps")] != -1);
		return call<R>("translateAndUpdateReadyOps", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto translateReadyOps(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("translateReadyOps")] != -1);
		return call<R>("translateReadyOps", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write")] != -1);
		return call<R>("write", std::forward<Args>(args)...);
	}

};

#endif
