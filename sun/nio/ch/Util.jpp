#ifndef sun_nio_ch_Util_HPP
#define sun_nio_ch_Util_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::nio::ch::Util : public jObject<::sun::nio::ch::Util, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_nio_ch / "Util";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::nio::ByteBuffer(::jint)>("getTemporaryDirectBuffer"), //
		jMethod<::jvoid(::java::nio::ByteBuffer)>("releaseTemporaryDirectBuffer"), //
	};

	template<typename R = ::java::nio::ByteBuffer, typename... Args>
	static auto getTemporaryDirectBuffer(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTemporaryDirectBuffer")] != -1);
		return scall<R>("getTemporaryDirectBuffer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto releaseTemporaryDirectBuffer(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("releaseTemporaryDirectBuffer")] != -1);
		return scall<R>("releaseTemporaryDirectBuffer", std::forward<Args>(args)...);
	}

};

#endif
