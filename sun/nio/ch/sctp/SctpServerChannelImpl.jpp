#ifndef sun_nio_ch_sctp_SctpServerChannelImpl_HPP
#define sun_nio_ch_sctp_SctpServerChannelImpl_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::nio::ch::sctp::SctpServerChannelImpl : public jObject<::sun::nio::ch::sctp::SctpServerChannelImpl, ::com::sun::nio::sctp::SctpServerChannel> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_nio_ch_sctp / "SctpServerChannelImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::nio::channels::spi::SelectorProvider)>(), //
		jMethod<::com::sun::nio::sctp::SctpChannel()>("accept"), //
		jMethod<::com::sun::nio::sctp::SctpServerChannel(::java::net::SocketAddress, ::jint)>("bind"), //
		jMethod<::com::sun::nio::sctp::SctpServerChannel(::java::net::InetAddress)>("bindAddress"), //
		jMethod<::java::util::Set()>("getAllLocalAddresses"), //
		jMethod<::java::io::FileDescriptor()>("getFD"), //
		jMethod<::jint()>("getFDVal"), //
		jMethod<::java::lang::Object(::com::sun::nio::sctp::SctpSocketOption)>("getOption"), //
		jMethod<::jvoid()>("implCloseSelectableChannel"), //
		jMethod<::jvoid()>("kill"), //
		jMethod<::com::sun::nio::sctp::SctpServerChannel(::com::sun::nio::sctp::SctpSocketOption, ::java::lang::Object)>("setOption"), //
		jMethod<::java::util::Set()>("supportedOptions"), //
		jMethod<::jvoid(::jint, ::sun::nio::ch::SelectionKeyImpl)>("translateAndSetInterestOps"), //
		jMethod<::jboolean(::jint, ::sun::nio::ch::SelectionKeyImpl)>("translateAndSetReadyOps"), //
		jMethod<::jboolean(::jint, ::sun::nio::ch::SelectionKeyImpl)>("translateAndUpdateReadyOps"), //
		jMethod<::com::sun::nio::sctp::SctpServerChannel(::java::net::InetAddress)>("unbindAddress"), //
	};

	template<typename R = ::com::sun::nio::sctp::SctpChannel, typename... Args>
	auto accept(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("accept")] != -1);
		return call<R>("accept", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::nio::sctp::SctpServerChannel, typename... Args>
	auto bind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("bind")] != -1);
		return call<R>("bind", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::nio::sctp::SctpServerChannel, typename... Args>
	auto bindAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("bindAddress")] != -1);
		return call<R>("bindAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto getAllLocalAddresses(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAllLocalAddresses")] != -1);
		return call<R>("getAllLocalAddresses", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::FileDescriptor, typename... Args>
	auto getFD(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFD")] != -1);
		return call<R>("getFD", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getFDVal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFDVal")] != -1);
		return call<R>("getFDVal", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getOption(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOption")] != -1);
		return call<R>("getOption", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto implCloseSelectableChannel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("implCloseSelectableChannel")] != -1);
		return call<R>("implCloseSelectableChannel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto kill(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("kill")] != -1);
		return call<R>("kill", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::nio::sctp::SctpServerChannel, typename... Args>
	auto setOption(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOption")] != -1);
		return call<R>("setOption", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto supportedOptions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("supportedOptions")] != -1);
		return call<R>("supportedOptions", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto translateAndSetInterestOps(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("translateAndSetInterestOps")] != -1);
		return call<R>("translateAndSetInterestOps", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto translateAndSetReadyOps(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("translateAndSetReadyOps")] != -1);
		return call<R>("translateAndSetReadyOps", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto translateAndUpdateReadyOps(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("translateAndUpdateReadyOps")] != -1);
		return call<R>("translateAndUpdateReadyOps", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::nio::sctp::SctpServerChannel, typename... Args>
	auto unbindAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unbindAddress")] != -1);
		return call<R>("unbindAddress", std::forward<Args>(args)...);
	}

};

#endif
