#ifndef sun_nio_ch_LinuxAsynchronousChannelProvider_HPP
#define sun_nio_ch_LinuxAsynchronousChannelProvider_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::nio::ch::LinuxAsynchronousChannelProvider : public jObject<::sun::nio::ch::LinuxAsynchronousChannelProvider, ::java::nio::channels::spi::AsynchronousChannelProvider> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_nio_ch / "LinuxAsynchronousChannelProvider";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::nio::channels::AsynchronousChannelGroup(::jint, ::java::util::concurrent::ThreadFactory)>("openAsynchronousChannelGroup"), //
		jMethod<::java::nio::channels::AsynchronousChannelGroup(::java::util::concurrent::ExecutorService, ::jint)>("openAsynchronousChannelGroup"), //
		jMethod<::java::nio::channels::AsynchronousServerSocketChannel(::java::nio::channels::AsynchronousChannelGroup)>("openAsynchronousServerSocketChannel"), //
		jMethod<::java::nio::channels::AsynchronousSocketChannel(::java::nio::channels::AsynchronousChannelGroup)>("openAsynchronousSocketChannel"), //
	};

	template<typename R = ::java::nio::channels::AsynchronousChannelGroup, typename... Args>
	auto openAsynchronousChannelGroup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("openAsynchronousChannelGroup")] != -1);
		return call<R>("openAsynchronousChannelGroup", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::AsynchronousServerSocketChannel, typename... Args>
	auto openAsynchronousServerSocketChannel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("openAsynchronousServerSocketChannel")] != -1);
		return call<R>("openAsynchronousServerSocketChannel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::AsynchronousSocketChannel, typename... Args>
	auto openAsynchronousSocketChannel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("openAsynchronousSocketChannel")] != -1);
		return call<R>("openAsynchronousSocketChannel", std::forward<Args>(args)...);
	}

};

#endif
