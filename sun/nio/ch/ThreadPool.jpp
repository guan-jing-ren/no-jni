#ifndef sun_nio_ch_ThreadPool_HPP
#define sun_nio_ch_ThreadPool_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::nio::ch::ThreadPool : public jObject<::sun::nio::ch::ThreadPool, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_nio_ch / "ThreadPool";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::sun::nio::ch::ThreadPool(::java::util::concurrent::ExecutorService, ::jint)>("wrap"), //
	};

	template<typename R = ::sun::nio::ch::ThreadPool, typename... Args>
	static auto wrap(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("wrap")] != -1);
		return scall<R>("wrap", std::forward<Args>(args)...);
	}

};

#endif
