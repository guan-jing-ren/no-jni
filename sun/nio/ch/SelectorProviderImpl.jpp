#ifndef sun_nio_ch_SelectorProviderImpl_HPP
#define sun_nio_ch_SelectorProviderImpl_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::nio::ch::SelectorProviderImpl : public jObject<::sun::nio::ch::SelectorProviderImpl, ::java::nio::channels::spi::SelectorProvider> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_nio_ch / "SelectorProviderImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::nio::channels::DatagramChannel()>("openDatagramChannel"), //
		jMethod<::java::nio::channels::DatagramChannel(::java::net::ProtocolFamily)>("openDatagramChannel"), //
		jMethod<::java::nio::channels::Pipe()>("openPipe"), //
		jMethod<::java::nio::channels::spi::AbstractSelector()>("openSelector"), //
		jMethod<::java::nio::channels::ServerSocketChannel()>("openServerSocketChannel"), //
		jMethod<::java::nio::channels::SocketChannel()>("openSocketChannel"), //
	};

	template<typename R = ::java::nio::channels::DatagramChannel, typename... Args>
	auto openDatagramChannel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("openDatagramChannel")] != -1);
		return call<R>("openDatagramChannel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::Pipe, typename... Args>
	auto openPipe(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("openPipe")] != -1);
		return call<R>("openPipe", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::spi::AbstractSelector, typename... Args>
	auto openSelector(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("openSelector")] != -1);
		return call<R>("openSelector", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::ServerSocketChannel, typename... Args>
	auto openServerSocketChannel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("openServerSocketChannel")] != -1);
		return call<R>("openServerSocketChannel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::SocketChannel, typename... Args>
	auto openSocketChannel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("openSocketChannel")] != -1);
		return call<R>("openSocketChannel", std::forward<Args>(args)...);
	}

};

#endif
