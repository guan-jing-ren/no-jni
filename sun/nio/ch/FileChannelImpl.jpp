#ifndef sun_nio_ch_FileChannelImpl_HPP
#define sun_nio_ch_FileChannelImpl_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::nio::ch::FileChannelImpl : public jObject<::sun::nio::ch::FileChannelImpl, ::java::nio::channels::FileChannel> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_nio_ch / "FileChannelImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::jboolean)>("force"), //
		jMethod<::sun::misc::JavaNioAccess$BufferPool()>("getMappedBufferPool"), //
		jMethod<::java::nio::channels::FileLock(::jlong, ::jlong, ::jboolean)>("lock"), //
		jMethod<::java::nio::MappedByteBuffer(::java::nio::channels::FileChannel$MapMode, ::jlong, ::jlong)>("map"), //
		jMethod<::java::nio::channels::FileChannel(::java::io::FileDescriptor, ::java::lang::String, ::jboolean, ::jboolean, ::java::lang::Object)>("open"), //
		jMethod<::java::nio::channels::FileChannel(::java::io::FileDescriptor, ::java::lang::String, ::jboolean, ::jboolean, ::jboolean, ::java::lang::Object)>("open"), //
		jMethod<::jlong()>("position"), //
		jMethod<::java::nio::channels::FileChannel(::jlong)>("position"), //
		jMethod<::java::nio::channels::SeekableByteChannel(::jlong)>("position"), //
		jMethod<::jint(::java::nio::ByteBuffer)>("read"), //
		jMethod<::jint(::java::nio::ByteBuffer, ::jlong)>("read"), //
		jMethod<::jlong(::java::nio::ByteBuffer *, ::jint, ::jint)>("read"), //
		jMethod<::jlong()>("size"), //
		jMethod<::jlong(::java::nio::channels::ReadableByteChannel, ::jlong, ::jlong)>("transferFrom"), //
		jMethod<::jlong(::jlong, ::jlong, ::java::nio::channels::WritableByteChannel)>("transferTo"), //
		jMethod<::java::nio::channels::FileChannel(::jlong)>("truncate"), //
		jMethod<::java::nio::channels::SeekableByteChannel(::jlong)>("truncate"), //
		jMethod<::java::nio::channels::FileLock(::jlong, ::jlong, ::jboolean)>("tryLock"), //
		jMethod<::jint(::java::nio::ByteBuffer)>("write"), //
		jMethod<::jint(::java::nio::ByteBuffer, ::jlong)>("write"), //
		jMethod<::jlong(::java::nio::ByteBuffer *, ::jint, ::jint)>("write"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto force(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("force")] != -1);
		return call<R>("force", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::misc::JavaNioAccess$BufferPool, typename... Args>
	static auto getMappedBufferPool(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMappedBufferPool")] != -1);
		return scall<R>("getMappedBufferPool", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::FileLock, typename... Args>
	auto lock(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lock")] != -1);
		return call<R>("lock", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::MappedByteBuffer, typename... Args>
	auto map(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("map")] != -1);
		return call<R>("map", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::FileChannel, typename... Args>
	static auto open(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("open")] != -1);
		return scall<R>("open", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto position(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("position")] != -1);
		return call<R>("position", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("read")] != -1);
		return call<R>("read", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto size(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("size")] != -1);
		return call<R>("size", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto transferFrom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("transferFrom")] != -1);
		return call<R>("transferFrom", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto transferTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("transferTo")] != -1);
		return call<R>("transferTo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::FileChannel, typename... Args>
	auto truncate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("truncate")] != -1);
		return call<R>("truncate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::FileLock, typename... Args>
	auto tryLock(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("tryLock")] != -1);
		return call<R>("tryLock", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write")] != -1);
		return call<R>("write", std::forward<Args>(args)...);
	}

};

#endif
