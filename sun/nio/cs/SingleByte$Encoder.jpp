#ifndef sun_nio_cs_SingleByte$Encoder_HPP
#define sun_nio_cs_SingleByte$Encoder_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::nio::cs::SingleByte$Encoder : public jObject<::sun::nio::cs::SingleByte$Encoder, ::java::nio::charset::CharsetEncoder> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_nio_cs / "SingleByte$Encoder";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::nio::charset::Charset, ::jchar *, ::jchar *)>(), //
		jMethod<::jboolean(::jchar)>("canEncode"), //
		jMethod<::jint(::jchar)>("encode"), //
		jMethod<::jint(::jchar *, ::jint, ::jint, ::jbyte *)>("encode"), //
		jMethod<::jboolean(::jbyte *)>("isLegalReplacement"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto canEncode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canEncode")] != -1);
		return call<R>("canEncode", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto encode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("encode")] != -1);
		return call<R>("encode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLegalReplacement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLegalReplacement")] != -1);
		return call<R>("isLegalReplacement", std::forward<Args>(args)...);
	}

};

#endif
