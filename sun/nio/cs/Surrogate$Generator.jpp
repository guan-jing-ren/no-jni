#ifndef sun_nio_cs_Surrogate$Generator_HPP
#define sun_nio_cs_Surrogate$Generator_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::nio::cs::Surrogate$Generator : public jObject<::sun::nio::cs::Surrogate$Generator, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_nio_cs / "Surrogate$Generator";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::nio::charset::CoderResult()>("error"), //
		jMethod<::jint(::jint, ::jint, ::java::nio::CharBuffer)>("generate"), //
		jMethod<::jint(::jint, ::jint, ::jchar *, ::jint, ::jint)>("generate"), //
	};

	template<typename R = ::java::nio::charset::CoderResult, typename... Args>
	auto error(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("error")] != -1);
		return call<R>("error", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto generate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("generate")] != -1);
		return call<R>("generate", std::forward<Args>(args)...);
	}

};

#endif
