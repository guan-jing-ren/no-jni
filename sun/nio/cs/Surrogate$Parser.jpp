#ifndef sun_nio_cs_Surrogate$Parser_HPP
#define sun_nio_cs_Surrogate$Parser_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::nio::cs::Surrogate$Parser : public jObject<::sun::nio::cs::Surrogate$Parser, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_nio_cs / "Surrogate$Parser";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jint()>("character"), //
		jMethod<::java::nio::charset::CoderResult()>("error"), //
		jMethod<::jint()>("increment"), //
		jMethod<::jboolean()>("isPair"), //
		jMethod<::jint(::jchar, ::java::nio::CharBuffer)>("parse"), //
		jMethod<::jint(::jchar, ::jchar *, ::jint, ::jint)>("parse"), //
		jMethod<::java::nio::charset::CoderResult()>("unmappableResult"), //
	};

	template<typename R = ::jint, typename... Args>
	auto character(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("character")] != -1);
		return call<R>("character", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::charset::CoderResult, typename... Args>
	auto error(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("error")] != -1);
		return call<R>("error", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto increment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("increment")] != -1);
		return call<R>("increment", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPair(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPair")] != -1);
		return call<R>("isPair", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto parse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parse")] != -1);
		return call<R>("parse", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::charset::CoderResult, typename... Args>
	auto unmappableResult(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unmappableResult")] != -1);
		return call<R>("unmappableResult", std::forward<Args>(args)...);
	}

};

#endif
