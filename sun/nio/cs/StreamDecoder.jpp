#ifndef sun_nio_cs_StreamDecoder_HPP
#define sun_nio_cs_StreamDecoder_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::nio::cs::StreamDecoder : public jObject<::sun::nio::cs::StreamDecoder, ::java::io::Reader> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_nio_cs / "StreamDecoder";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("close"), //
		jMethod<::sun::nio::cs::StreamDecoder(::java::nio::channels::ReadableByteChannel, ::java::nio::charset::CharsetDecoder, ::jint)>("forDecoder"), //
		jMethod<::sun::nio::cs::StreamDecoder(::java::io::InputStream, ::java::lang::Object, ::java::lang::String)>("forInputStreamReader"), //
		jMethod<::sun::nio::cs::StreamDecoder(::java::io::InputStream, ::java::lang::Object, ::java::nio::charset::Charset)>("forInputStreamReader"), //
		jMethod<::sun::nio::cs::StreamDecoder(::java::io::InputStream, ::java::lang::Object, ::java::nio::charset::CharsetDecoder)>("forInputStreamReader"), //
		jMethod<::java::lang::String()>("getEncoding"), //
		jMethod<::jint()>("read"), //
		jMethod<::jint(::jchar *, ::jint, ::jint)>("read"), //
		jMethod<::jboolean()>("ready"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::nio::cs::StreamDecoder, typename... Args>
	static auto forDecoder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("forDecoder")] != -1);
		return scall<R>("forDecoder", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::nio::cs::StreamDecoder, typename... Args>
	static auto forInputStreamReader(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("forInputStreamReader")] != -1);
		return scall<R>("forInputStreamReader", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getEncoding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEncoding")] != -1);
		return call<R>("getEncoding", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("read")] != -1);
		return call<R>("read", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto ready(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ready")] != -1);
		return call<R>("ready", std::forward<Args>(args)...);
	}

};

#endif
