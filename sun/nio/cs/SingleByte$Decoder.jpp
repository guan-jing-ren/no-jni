#ifndef sun_nio_cs_SingleByte$Decoder_HPP
#define sun_nio_cs_SingleByte$Decoder_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::nio::cs::SingleByte$Decoder : public jObject<::sun::nio::cs::SingleByte$Decoder, ::java::nio::charset::CharsetDecoder> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_nio_cs / "SingleByte$Decoder";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::nio::charset::Charset, ::jchar *)>(), //
		jMethod<::jchar(::jint)>("decode"), //
		jMethod<::jint(::jbyte *, ::jint, ::jint, ::jchar *)>("decode"), //
	};

	template<typename R = ::jchar, typename... Args>
	auto decode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("decode")] != -1);
		return call<R>("decode", std::forward<Args>(args)...);
	}

};

#endif
