#ifndef sun_nio_cs_ThreadLocalCoders_HPP
#define sun_nio_cs_ThreadLocalCoders_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::nio::cs::ThreadLocalCoders : public jObject<::sun::nio::cs::ThreadLocalCoders, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_nio_cs / "ThreadLocalCoders";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::nio::charset::CharsetDecoder(::java::lang::Object)>("decoderFor"), //
		jMethod<::java::nio::charset::CharsetEncoder(::java::lang::Object)>("encoderFor"), //
	};

	template<typename R = ::java::nio::charset::CharsetDecoder, typename... Args>
	static auto decoderFor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("decoderFor")] != -1);
		return scall<R>("decoderFor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::charset::CharsetEncoder, typename... Args>
	static auto encoderFor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("encoderFor")] != -1);
		return scall<R>("encoderFor", std::forward<Args>(args)...);
	}

};

#endif
