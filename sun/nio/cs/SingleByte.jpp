#ifndef sun_nio_cs_SingleByte_HPP
#define sun_nio_cs_SingleByte_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::nio::cs::SingleByte : public jObject<::sun::nio::cs::SingleByte, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_nio_cs / "SingleByte";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::jchar *, ::jchar *, ::jchar *, ::jchar *)>("initC2B"), //
	};

	template<typename R = ::jvoid, typename... Args>
	static auto initC2B(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initC2B")] != -1);
		return scall<R>("initC2B", std::forward<Args>(args)...);
	}

};

#endif
