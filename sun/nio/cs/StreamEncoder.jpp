#ifndef sun_nio_cs_StreamEncoder_HPP
#define sun_nio_cs_StreamEncoder_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::nio::cs::StreamEncoder : public jObject<::sun::nio::cs::StreamEncoder, ::java::io::Writer> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_nio_cs / "StreamEncoder";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("close"), //
		jMethod<::jvoid()>("flush"), //
		jMethod<::jvoid()>("flushBuffer"), //
		jMethod<::sun::nio::cs::StreamEncoder(::java::nio::channels::WritableByteChannel, ::java::nio::charset::CharsetEncoder, ::jint)>("forEncoder"), //
		jMethod<::sun::nio::cs::StreamEncoder(::java::io::OutputStream, ::java::lang::Object, ::java::lang::String)>("forOutputStreamWriter"), //
		jMethod<::sun::nio::cs::StreamEncoder(::java::io::OutputStream, ::java::lang::Object, ::java::nio::charset::Charset)>("forOutputStreamWriter"), //
		jMethod<::sun::nio::cs::StreamEncoder(::java::io::OutputStream, ::java::lang::Object, ::java::nio::charset::CharsetEncoder)>("forOutputStreamWriter"), //
		jMethod<::java::lang::String()>("getEncoding"), //
		jMethod<::jvoid(::jint)>("write"), //
		jMethod<::jvoid(::java::lang::String, ::jint, ::jint)>("write"), //
		jMethod<::jvoid(::jchar *, ::jint, ::jint)>("write"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto flush(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("flush")] != -1);
		return call<R>("flush", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto flushBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("flushBuffer")] != -1);
		return call<R>("flushBuffer", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::nio::cs::StreamEncoder, typename... Args>
	static auto forEncoder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("forEncoder")] != -1);
		return scall<R>("forEncoder", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::nio::cs::StreamEncoder, typename... Args>
	static auto forOutputStreamWriter(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("forOutputStreamWriter")] != -1);
		return scall<R>("forOutputStreamWriter", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getEncoding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEncoding")] != -1);
		return call<R>("getEncoding", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write")] != -1);
		return call<R>("write", std::forward<Args>(args)...);
	}

};

#endif
