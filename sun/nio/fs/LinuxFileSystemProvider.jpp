#ifndef sun_nio_fs_LinuxFileSystemProvider_HPP
#define sun_nio_fs_LinuxFileSystemProvider_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::nio::fs::LinuxFileSystemProvider : public jObject<::sun::nio::fs::LinuxFileSystemProvider, ::sun::nio::fs::UnixFileSystemProvider> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_nio_fs / "LinuxFileSystemProvider";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::nio::file::attribute::FileAttributeView(::java::nio::file::Path, ::java::lang::Class, ::java::nio::file::LinkOption *)>("getFileAttributeView"), //
		jMethod<::sun::nio::fs::DynamicFileAttributeView(::java::nio::file::Path, ::java::lang::String, ::java::nio::file::LinkOption *)>("getFileAttributeView"), //
		jMethod<::java::nio::file::attribute::BasicFileAttributes(::java::nio::file::Path, ::java::lang::Class, ::java::nio::file::LinkOption *)>("readAttributes"), //
	};

	template<typename R = ::java::nio::file::attribute::FileAttributeView, typename... Args>
	auto getFileAttributeView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFileAttributeView")] != -1);
		return call<R>("getFileAttributeView", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::file::attribute::BasicFileAttributes, typename... Args>
	auto readAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readAttributes")] != -1);
		return call<R>("readAttributes", std::forward<Args>(args)...);
	}

};

#endif
