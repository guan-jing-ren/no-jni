#ifndef sun_font_ExtendedTextLabel_HPP
#define sun_font_ExtendedTextLabel_HPP

#include "../../jfwd_decl.hpp"

class ::sun::font::ExtendedTextLabel : public jObject<::sun::font::ExtendedTextLabel, ::sun::font::TextLabel> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_font / "ExtendedTextLabel";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::sun::font::TextLineComponent(::jfloat *, ::jint, ::jboolean *)>("applyJustificationDeltas"), //
		jMethod<::jboolean(::jint)>("caretAtOffsetIsValid"), //
		jMethod<::jfloat(::jint, ::jint)>("getAdvanceBetween"), //
		jMethod<::jfloat(::jint)>("getCharAdvance"), //
		jMethod<::java::awt::geom::Rectangle2D(::jint)>("getCharVisualBounds"), //
		jMethod<::java::awt::geom::Rectangle2D(::jint, ::jfloat, ::jfloat)>("getCharVisualBounds"), //
		jMethod<::jfloat(::jint)>("getCharX"), //
		jMethod<::jfloat(::jint)>("getCharY"), //
		jMethod<::sun::font::CoreMetrics()>("getCoreMetrics"), //
		jMethod<::jvoid(::java::awt::font::GlyphJustificationInfo *, ::jint, ::jint, ::jint)>("getJustificationInfos"), //
		jMethod<::jint(::jint, ::jfloat)>("getLineBreakIndex"), //
		jMethod<::jint()>("getNumCharacters"), //
		jMethod<::jint()>("getNumJustificationInfos"), //
		jMethod<::sun::font::TextLineComponent(::jint, ::jint, ::jint)>("getSubset"), //
		jMethod<::jint(::jint)>("logicalToVisual"), //
		jMethod<::jint(::jint)>("visualToLogical"), //
	};

	template<typename R = ::sun::font::TextLineComponent, typename... Args>
	auto applyJustificationDeltas(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("applyJustificationDeltas")] != -1);
		return call<R>("applyJustificationDeltas", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto caretAtOffsetIsValid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("caretAtOffsetIsValid")] != -1);
		return call<R>("caretAtOffsetIsValid", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getAdvanceBetween(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAdvanceBetween")] != -1);
		return call<R>("getAdvanceBetween", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getCharAdvance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCharAdvance")] != -1);
		return call<R>("getCharAdvance", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Rectangle2D, typename... Args>
	auto getCharVisualBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCharVisualBounds")] != -1);
		return call<R>("getCharVisualBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getCharX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCharX")] != -1);
		return call<R>("getCharX", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getCharY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCharY")] != -1);
		return call<R>("getCharY", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::font::CoreMetrics, typename... Args>
	auto getCoreMetrics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCoreMetrics")] != -1);
		return call<R>("getCoreMetrics", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getJustificationInfos(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJustificationInfos")] != -1);
		return call<R>("getJustificationInfos", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLineBreakIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineBreakIndex")] != -1);
		return call<R>("getLineBreakIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumCharacters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNumCharacters")] != -1);
		return call<R>("getNumCharacters", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumJustificationInfos(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNumJustificationInfos")] != -1);
		return call<R>("getNumJustificationInfos", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::font::TextLineComponent, typename... Args>
	auto getSubset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSubset")] != -1);
		return call<R>("getSubset", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto logicalToVisual(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("logicalToVisual")] != -1);
		return call<R>("logicalToVisual", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto visualToLogical(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visualToLogical")] != -1);
		return call<R>("visualToLogical", std::forward<Args>(args)...);
	}

};

#endif
