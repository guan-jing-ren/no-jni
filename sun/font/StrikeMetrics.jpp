#ifndef sun_font_StrikeMetrics_HPP
#define sun_font_StrikeMetrics_HPP

#include "../../jfwd_decl.hpp"

class ::sun::font::StrikeMetrics : public jObject<::sun::font::StrikeMetrics, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_font / "StrikeMetrics";

	constexpr static Enume field_signatures{
		jField<::jfloat>("ascentX"), //
		jField<::jfloat>("ascentY"), //
		jField<::jfloat>("baselineX"), //
		jField<::jfloat>("baselineY"), //
		jField<::jfloat>("descentX"), //
		jField<::jfloat>("descentY"), //
		jField<::jfloat>("leadingX"), //
		jField<::jfloat>("leadingY"), //
		jField<::jfloat>("maxAdvanceX"), //
		jField<::jfloat>("maxAdvanceY"), //
	};

	template<typename F = ::jfloat>
	auto ascentX() const {
		static_assert(field_signatures[jField<F>("ascentX")] != -1);
		return at<F>("ascentX");
	}

	template<typename F = ::jfloat>
	auto ascentY() const {
		static_assert(field_signatures[jField<F>("ascentY")] != -1);
		return at<F>("ascentY");
	}

	template<typename F = ::jfloat>
	auto baselineX() const {
		static_assert(field_signatures[jField<F>("baselineX")] != -1);
		return at<F>("baselineX");
	}

	template<typename F = ::jfloat>
	auto baselineY() const {
		static_assert(field_signatures[jField<F>("baselineY")] != -1);
		return at<F>("baselineY");
	}

	template<typename F = ::jfloat>
	auto descentX() const {
		static_assert(field_signatures[jField<F>("descentX")] != -1);
		return at<F>("descentX");
	}

	template<typename F = ::jfloat>
	auto descentY() const {
		static_assert(field_signatures[jField<F>("descentY")] != -1);
		return at<F>("descentY");
	}

	template<typename F = ::jfloat>
	auto leadingX() const {
		static_assert(field_signatures[jField<F>("leadingX")] != -1);
		return at<F>("leadingX");
	}

	template<typename F = ::jfloat>
	auto leadingY() const {
		static_assert(field_signatures[jField<F>("leadingY")] != -1);
		return at<F>("leadingY");
	}

	template<typename F = ::jfloat>
	auto maxAdvanceX() const {
		static_assert(field_signatures[jField<F>("maxAdvanceX")] != -1);
		return at<F>("maxAdvanceX");
	}

	template<typename F = ::jfloat>
	auto maxAdvanceY() const {
		static_assert(field_signatures[jField<F>("maxAdvanceY")] != -1);
		return at<F>("maxAdvanceY");
	}

	constexpr static Enume method_signatures{
		jMethod<::jfloat()>("getAscent"), //
		jMethod<::jfloat()>("getDescent"), //
		jMethod<::jfloat()>("getLeading"), //
		jMethod<::jfloat()>("getMaxAdvance"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jfloat, typename... Args>
	auto getAscent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAscent")] != -1);
		return call<R>("getAscent", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getDescent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDescent")] != -1);
		return call<R>("getDescent", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getLeading(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLeading")] != -1);
		return call<R>("getLeading", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getMaxAdvance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaxAdvance")] != -1);
		return call<R>("getMaxAdvance", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
