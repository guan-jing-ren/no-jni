#ifndef sun_font_FontDesignMetrics_HPP
#define sun_font_FontDesignMetrics_HPP

#include "../../jfwd_decl.hpp"

class ::sun::font::FontDesignMetrics : public jObject<::sun::font::FontDesignMetrics, ::java::awt::FontMetrics> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_font / "FontDesignMetrics";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint(::jchar)>("charWidth"), //
		jMethod<::jint(::jint)>("charWidth"), //
		jMethod<::jint(::jchar *, ::jint, ::jint)>("charsWidth"), //
		jMethod<::jint()>("getAscent"), //
		jMethod<::jint()>("getDescent"), //
		jMethod<::java::awt::font::FontRenderContext()>("getFontRenderContext"), //
		jMethod<::jint()>("getHeight"), //
		jMethod<::jint()>("getLeading"), //
		jMethod<::jint()>("getMaxAdvance"), //
		jMethod<::sun::font::FontDesignMetrics(::java::awt::Font)>("getMetrics"), //
		jMethod<::sun::font::FontDesignMetrics(::java::awt::Font, ::java::awt::font::FontRenderContext)>("getMetrics"), //
		jMethod<::jint *()>("getWidths"), //
		jMethod<::jint(::java::lang::String)>("stringWidth"), //
	};

	template<typename R = ::jint, typename... Args>
	auto charWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("charWidth")] != -1);
		return call<R>("charWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto charsWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("charsWidth")] != -1);
		return call<R>("charsWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAscent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAscent")] != -1);
		return call<R>("getAscent", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDescent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDescent")] != -1);
		return call<R>("getDescent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::font::FontRenderContext, typename... Args>
	auto getFontRenderContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFontRenderContext")] != -1);
		return call<R>("getFontRenderContext", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeight")] != -1);
		return call<R>("getHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLeading(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLeading")] != -1);
		return call<R>("getLeading", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxAdvance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaxAdvance")] != -1);
		return call<R>("getMaxAdvance", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::font::FontDesignMetrics, typename... Args>
	static auto getMetrics(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMetrics")] != -1);
		return scall<R>("getMetrics", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getWidths(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWidths")] != -1);
		return call<R>("getWidths", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto stringWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stringWidth")] != -1);
		return call<R>("stringWidth", std::forward<Args>(args)...);
	}

};

#endif
