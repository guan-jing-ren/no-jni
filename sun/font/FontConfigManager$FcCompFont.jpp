#ifndef sun_font_FontConfigManager$FcCompFont_HPP
#define sun_font_FontConfigManager$FcCompFont_HPP

#include "../../jfwd_decl.hpp"

class ::sun::font::FontConfigManager$FcCompFont : public jObject<::sun::font::FontConfigManager$FcCompFont, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_font / "FontConfigManager$FcCompFont";

	constexpr static Enume field_signatures{
		jField<::sun::font::FontConfigManager$FontConfigFont *>("allFonts"), //
		jField<::sun::font::CompositeFont>("compFont"), //
		jField<::java::lang::String>("fcFamily"), //
		jField<::java::lang::String>("fcName"), //
		jField<::sun::font::FontConfigManager$FontConfigFont>("firstFont"), //
		jField<::java::lang::String>("jdkName"), //
		jField<::jint>("style"), //
	};

	template<typename F = ::sun::font::FontConfigManager$FontConfigFont *>
	auto allFonts() const {
		static_assert(field_signatures[jField<F>("allFonts")] != -1);
		return at<F>("allFonts");
	}

	template<typename F = ::sun::font::CompositeFont>
	auto compFont() const {
		static_assert(field_signatures[jField<F>("compFont")] != -1);
		return at<F>("compFont");
	}

	template<typename F = ::java::lang::String>
	auto fcFamily() const {
		static_assert(field_signatures[jField<F>("fcFamily")] != -1);
		return at<F>("fcFamily");
	}

	template<typename F = ::java::lang::String>
	auto fcName() const {
		static_assert(field_signatures[jField<F>("fcName")] != -1);
		return at<F>("fcName");
	}

	template<typename F = ::sun::font::FontConfigManager$FontConfigFont>
	auto firstFont() const {
		static_assert(field_signatures[jField<F>("firstFont")] != -1);
		return at<F>("firstFont");
	}

	template<typename F = ::java::lang::String>
	auto jdkName() const {
		static_assert(field_signatures[jField<F>("jdkName")] != -1);
		return at<F>("jdkName");
	}

	template<typename F = ::jint>
	auto style() const {
		static_assert(field_signatures[jField<F>("style")] != -1);
		return at<F>("style");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
	};

};

#endif
