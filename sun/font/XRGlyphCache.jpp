#ifndef sun_font_XRGlyphCache_HPP
#define sun_font_XRGlyphCache_HPP

#include "../../jfwd_decl.hpp"

class ::sun::font::XRGlyphCache : public jObject<::sun::font::XRGlyphCache, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_font / "XRGlyphCache";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::sun::java2d::xr::XRCompositeManager)>(), //
		jMethod<::sun::font::XRGlyphCacheEntry *(::sun::font::GlyphList)>("cacheGlyphs"), //
		jMethod<::jvoid(::java::util::ArrayList)>("glyphDisposed"), //
	};

	template<typename R = ::sun::font::XRGlyphCacheEntry *, typename... Args>
	auto cacheGlyphs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cacheGlyphs")] != -1);
		return call<R>("cacheGlyphs", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto glyphDisposed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("glyphDisposed")] != -1);
		return call<R>("glyphDisposed", std::forward<Args>(args)...);
	}

};

#endif
