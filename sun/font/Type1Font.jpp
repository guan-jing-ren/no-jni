#ifndef sun_font_Type1Font_HPP
#define sun_font_Type1Font_HPP

#include "../../jfwd_decl.hpp"

class ::sun::font::Type1Font : public jObject<::sun::font::Type1Font, ::sun::font::FileFont> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_font / "Type1Font";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::java::lang::Object)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::Object, ::jboolean)>(), //
		jMethod<::jint()>("getFileSize"), //
		jMethod<::jint(::jchar)>("getGlyphCode"), //
		jMethod<::jint()>("getMissingGlyphCode"), //
		jMethod<::jint()>("getNumGlyphs"), //
		jMethod<::java::lang::String()>("getPostscriptName"), //
		jMethod<::java::nio::ByteBuffer(::jint, ::jint)>("readBlock"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getFileSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFileSize")] != -1);
		return call<R>("getFileSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getGlyphCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGlyphCode")] != -1);
		return call<R>("getGlyphCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMissingGlyphCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMissingGlyphCode")] != -1);
		return call<R>("getMissingGlyphCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumGlyphs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNumGlyphs")] != -1);
		return call<R>("getNumGlyphs", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPostscriptName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPostscriptName")] != -1);
		return call<R>("getPostscriptName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::ByteBuffer, typename... Args>
	auto readBlock(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readBlock")] != -1);
		return call<R>("readBlock", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
