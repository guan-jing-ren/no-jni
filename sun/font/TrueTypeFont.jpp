#ifndef sun_font_TrueTypeFont_HPP
#define sun_font_TrueTypeFont_HPP

#include "../../jfwd_decl.hpp"

class ::sun::font::TrueTypeFont : public jObject<::sun::font::TrueTypeFont, ::sun::font::FileFont> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_font / "TrueTypeFont";

	constexpr static Enume field_signatures{
		jField<::jint>("EBLCTag"), //
		jField<::jshort>("ENGLISH_LOCALE_ID"), //
		jField<::jint>("FAMILY_NAME_ID"), //
		jField<::jint>("FULL_NAME_ID"), //
		jField<::jint>("GDEFTag"), //
		jField<::jint>("GPOSTag"), //
		jField<::jint>("GSUBTag"), //
		jField<::jint>("MS_PLATFORM_ID"), //
		jField<::jint>("POSTSCRIPT_NAME_ID"), //
		jField<::jint>("cmapTag"), //
		jField<::jint>("fdscTag"), //
		jField<::jint>("featTag"), //
		jField<::jint>("fvarTag"), //
		jField<::jint>("gaspTag"), //
		jField<::jint>("glyfTag"), //
		jField<::jint>("headTag"), //
		jField<::jint>("hheaTag"), //
		jField<::jint>("hmtxTag"), //
		jField<::jint>("locaTag"), //
		jField<::jint>("maxpTag"), //
		jField<::jint>("mortTag"), //
		jField<::jint>("nameTag"), //
		jField<::jint>("os_2Tag"), //
		jField<::jint>("ottoTag"), //
		jField<::jint>("postTag"), //
		jField<::jint>("reserved_bits1"), //
		jField<::jint>("reserved_bits2"), //
		jField<::jint>("trueTag"), //
		jField<::jint>("ttcfTag"), //
		jField<::jint>("v1ttTag"), //
	};

	template<typename F = ::jint>
	static auto EBLCTag() {
		static_assert(field_signatures[jField<F>("EBLCTag")] != -1);
		return sat<F>("EBLCTag");
	}

	template<typename F = ::jshort>
	static auto ENGLISH_LOCALE_ID() {
		static_assert(field_signatures[jField<F>("ENGLISH_LOCALE_ID")] != -1);
		return sat<F>("ENGLISH_LOCALE_ID");
	}

	template<typename F = ::jint>
	static auto FAMILY_NAME_ID() {
		static_assert(field_signatures[jField<F>("FAMILY_NAME_ID")] != -1);
		return sat<F>("FAMILY_NAME_ID");
	}

	template<typename F = ::jint>
	static auto FULL_NAME_ID() {
		static_assert(field_signatures[jField<F>("FULL_NAME_ID")] != -1);
		return sat<F>("FULL_NAME_ID");
	}

	template<typename F = ::jint>
	static auto GDEFTag() {
		static_assert(field_signatures[jField<F>("GDEFTag")] != -1);
		return sat<F>("GDEFTag");
	}

	template<typename F = ::jint>
	static auto GPOSTag() {
		static_assert(field_signatures[jField<F>("GPOSTag")] != -1);
		return sat<F>("GPOSTag");
	}

	template<typename F = ::jint>
	static auto GSUBTag() {
		static_assert(field_signatures[jField<F>("GSUBTag")] != -1);
		return sat<F>("GSUBTag");
	}

	template<typename F = ::jint>
	static auto MS_PLATFORM_ID() {
		static_assert(field_signatures[jField<F>("MS_PLATFORM_ID")] != -1);
		return sat<F>("MS_PLATFORM_ID");
	}

	template<typename F = ::jint>
	static auto POSTSCRIPT_NAME_ID() {
		static_assert(field_signatures[jField<F>("POSTSCRIPT_NAME_ID")] != -1);
		return sat<F>("POSTSCRIPT_NAME_ID");
	}

	template<typename F = ::jint>
	static auto cmapTag() {
		static_assert(field_signatures[jField<F>("cmapTag")] != -1);
		return sat<F>("cmapTag");
	}

	template<typename F = ::jint>
	static auto fdscTag() {
		static_assert(field_signatures[jField<F>("fdscTag")] != -1);
		return sat<F>("fdscTag");
	}

	template<typename F = ::jint>
	static auto featTag() {
		static_assert(field_signatures[jField<F>("featTag")] != -1);
		return sat<F>("featTag");
	}

	template<typename F = ::jint>
	static auto fvarTag() {
		static_assert(field_signatures[jField<F>("fvarTag")] != -1);
		return sat<F>("fvarTag");
	}

	template<typename F = ::jint>
	static auto gaspTag() {
		static_assert(field_signatures[jField<F>("gaspTag")] != -1);
		return sat<F>("gaspTag");
	}

	template<typename F = ::jint>
	static auto glyfTag() {
		static_assert(field_signatures[jField<F>("glyfTag")] != -1);
		return sat<F>("glyfTag");
	}

	template<typename F = ::jint>
	static auto headTag() {
		static_assert(field_signatures[jField<F>("headTag")] != -1);
		return sat<F>("headTag");
	}

	template<typename F = ::jint>
	static auto hheaTag() {
		static_assert(field_signatures[jField<F>("hheaTag")] != -1);
		return sat<F>("hheaTag");
	}

	template<typename F = ::jint>
	static auto hmtxTag() {
		static_assert(field_signatures[jField<F>("hmtxTag")] != -1);
		return sat<F>("hmtxTag");
	}

	template<typename F = ::jint>
	static auto locaTag() {
		static_assert(field_signatures[jField<F>("locaTag")] != -1);
		return sat<F>("locaTag");
	}

	template<typename F = ::jint>
	static auto maxpTag() {
		static_assert(field_signatures[jField<F>("maxpTag")] != -1);
		return sat<F>("maxpTag");
	}

	template<typename F = ::jint>
	static auto mortTag() {
		static_assert(field_signatures[jField<F>("mortTag")] != -1);
		return sat<F>("mortTag");
	}

	template<typename F = ::jint>
	static auto nameTag() {
		static_assert(field_signatures[jField<F>("nameTag")] != -1);
		return sat<F>("nameTag");
	}

	template<typename F = ::jint>
	static auto os_2Tag() {
		static_assert(field_signatures[jField<F>("os_2Tag")] != -1);
		return sat<F>("os_2Tag");
	}

	template<typename F = ::jint>
	static auto ottoTag() {
		static_assert(field_signatures[jField<F>("ottoTag")] != -1);
		return sat<F>("ottoTag");
	}

	template<typename F = ::jint>
	static auto postTag() {
		static_assert(field_signatures[jField<F>("postTag")] != -1);
		return sat<F>("postTag");
	}

	template<typename F = ::jint>
	static auto reserved_bits1() {
		static_assert(field_signatures[jField<F>("reserved_bits1")] != -1);
		return sat<F>("reserved_bits1");
	}

	template<typename F = ::jint>
	static auto reserved_bits2() {
		static_assert(field_signatures[jField<F>("reserved_bits2")] != -1);
		return sat<F>("reserved_bits2");
	}

	template<typename F = ::jint>
	static auto trueTag() {
		static_assert(field_signatures[jField<F>("trueTag")] != -1);
		return sat<F>("trueTag");
	}

	template<typename F = ::jint>
	static auto ttcfTag() {
		static_assert(field_signatures[jField<F>("ttcfTag")] != -1);
		return sat<F>("ttcfTag");
	}

	template<typename F = ::jint>
	static auto v1ttTag() {
		static_assert(field_signatures[jField<F>("v1ttTag")] != -1);
		return sat<F>("v1ttTag");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::java::lang::Object, ::jint, ::jboolean)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::Object, ::jint, ::jboolean, ::jboolean)>(), //
		jMethod<::java::lang::String(::java::util::Locale)>("getFamilyName"), //
		jMethod<::jint()>("getFontCount"), //
		jMethod<::java::lang::String(::java::util::Locale)>("getFontName"), //
		jMethod<::java::lang::String()>("getFullName"), //
		jMethod<::sun::font::CharToGlyphMapper()>("getMapper"), //
		jMethod<::java::lang::String()>("getPostscriptName"), //
		jMethod<::jvoid(::jfloat, ::jfloat *, ::jint)>("getStyleMetrics"), //
		jMethod<::jint()>("getWeight"), //
		jMethod<::jint()>("getWidth"), //
		jMethod<::jboolean()>("hasSupplementaryChars"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jboolean(::jint)>("useAAForPtSize"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getFamilyName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFamilyName")] != -1);
		return call<R>("getFamilyName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getFontCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFontCount")] != -1);
		return call<R>("getFontCount", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFontName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFontName")] != -1);
		return call<R>("getFontName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFullName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFullName")] != -1);
		return call<R>("getFullName", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::font::CharToGlyphMapper, typename... Args>
	auto getMapper(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMapper")] != -1);
		return call<R>("getMapper", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPostscriptName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPostscriptName")] != -1);
		return call<R>("getPostscriptName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getStyleMetrics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStyleMetrics")] != -1);
		return call<R>("getStyleMetrics", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWeight")] != -1);
		return call<R>("getWeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasSupplementaryChars(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasSupplementaryChars")] != -1);
		return call<R>("hasSupplementaryChars", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto useAAForPtSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("useAAForPtSize")] != -1);
		return call<R>("useAAForPtSize", std::forward<Args>(args)...);
	}

};

#endif
