#ifndef sun_font_X11TextRenderer_HPP
#define sun_font_X11TextRenderer_HPP

#include "../../jfwd_decl.hpp"

class ::sun::font::X11TextRenderer : public jObject<::sun::font::X11TextRenderer, ::sun::java2d::pipe::GlyphListPipe> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_font / "X11TextRenderer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::java::awt::font::GlyphVector, ::jfloat, ::jfloat)>("drawGlyphVector"), //
		jMethod<::sun::font::X11TextRenderer()>("traceWrap"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto drawGlyphVector(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawGlyphVector")] != -1);
		return call<R>("drawGlyphVector", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::font::X11TextRenderer, typename... Args>
	auto traceWrap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("traceWrap")] != -1);
		return call<R>("traceWrap", std::forward<Args>(args)...);
	}

};

#endif
