#ifndef sun_font_XRGlyphCacheEntry_HPP
#define sun_font_XRGlyphCacheEntry_HPP

#include "../../jfwd_decl.hpp"

class ::sun::font::XRGlyphCacheEntry : public jObject<::sun::font::XRGlyphCacheEntry, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_font / "XRGlyphCacheEntry";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jlong, ::sun::font::GlyphList)>(), //
		jMethod<::jint(::jboolean)>("getDestinationRowBytes"), //
		jMethod<::jint(::jboolean)>("getGlyphDataLenth"), //
		jMethod<::jint()>("getGlyphID"), //
		jMethod<::jint(::jlong)>("getGlyphID"), //
		jMethod<::jlong()>("getGlyphInfoPtr"), //
		jMethod<::jint()>("getGlyphSet"), //
		jMethod<::jint()>("getHeight"), //
		jMethod<::jint()>("getLastUsed"), //
		jMethod<::jint(::jboolean)>("getPaddedWidth"), //
		jMethod<::jint()>("getPixelCnt"), //
		jMethod<::jint()>("getSourceRowBytes"), //
		jMethod<::jfloat()>("getTopLeftXOffset"), //
		jMethod<::jfloat()>("getTopLeftYOffset"), //
		jMethod<::jint()>("getWidth"), //
		jMethod<::jfloat()>("getXAdvance"), //
		jMethod<::jint()>("getXOff"), //
		jMethod<::jfloat()>("getYAdvance"), //
		jMethod<::jint()>("getYOff"), //
		jMethod<::jboolean(::jboolean)>("isGrayscale"), //
		jMethod<::jboolean()>("isPinned"), //
		jMethod<::jvoid(::jint)>("setGlyphID"), //
		jMethod<::jvoid(::jlong, ::jint)>("setGlyphID"), //
		jMethod<::jvoid(::jint)>("setGlyphSet"), //
		jMethod<::jvoid(::jint)>("setLastUsed"), //
		jMethod<::jvoid()>("setPinned"), //
		jMethod<::jvoid()>("setUnpinned"), //
		jMethod<::jvoid(::java::io::ByteArrayOutputStream, ::jboolean)>("writePixelData"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getDestinationRowBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDestinationRowBytes")] != -1);
		return call<R>("getDestinationRowBytes", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getGlyphDataLenth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGlyphDataLenth")] != -1);
		return call<R>("getGlyphDataLenth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getGlyphID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGlyphID")] != -1);
		return call<R>("getGlyphID", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getGlyphInfoPtr(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGlyphInfoPtr")] != -1);
		return call<R>("getGlyphInfoPtr", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getGlyphSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGlyphSet")] != -1);
		return call<R>("getGlyphSet", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeight")] != -1);
		return call<R>("getHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLastUsed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLastUsed")] != -1);
		return call<R>("getLastUsed", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPaddedWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPaddedWidth")] != -1);
		return call<R>("getPaddedWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPixelCnt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPixelCnt")] != -1);
		return call<R>("getPixelCnt", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSourceRowBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSourceRowBytes")] != -1);
		return call<R>("getSourceRowBytes", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getTopLeftXOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTopLeftXOffset")] != -1);
		return call<R>("getTopLeftXOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getTopLeftYOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTopLeftYOffset")] != -1);
		return call<R>("getTopLeftYOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getXAdvance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getXAdvance")] != -1);
		return call<R>("getXAdvance", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getXOff(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getXOff")] != -1);
		return call<R>("getXOff", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getYAdvance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getYAdvance")] != -1);
		return call<R>("getYAdvance", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getYOff(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getYOff")] != -1);
		return call<R>("getYOff", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isGrayscale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isGrayscale")] != -1);
		return call<R>("isGrayscale", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPinned(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPinned")] != -1);
		return call<R>("isPinned", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGlyphID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setGlyphID")] != -1);
		return call<R>("setGlyphID", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGlyphSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setGlyphSet")] != -1);
		return call<R>("setGlyphSet", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLastUsed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLastUsed")] != -1);
		return call<R>("setLastUsed", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPinned(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPinned")] != -1);
		return call<R>("setPinned", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUnpinned(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUnpinned")] != -1);
		return call<R>("setUnpinned", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writePixelData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writePixelData")] != -1);
		return call<R>("writePixelData", std::forward<Args>(args)...);
	}

};

#endif
