#ifndef sun_font_EAttribute_HPP
#define sun_font_EAttribute_HPP

#include "../../jfwd_decl.hpp"

class ::sun::font::EAttribute : public jObject<::sun::font::EAttribute, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_font / "EAttribute";

	constexpr static Enume field_signatures{
		jField<::sun::font::EAttribute>("EBACKGROUND"), //
		jField<::sun::font::EAttribute>("EBASELINE_TRANSFORM"), //
		jField<::sun::font::EAttribute>("EBIDI_EMBEDDING"), //
		jField<::sun::font::EAttribute>("ECHAR_REPLACEMENT"), //
		jField<::sun::font::EAttribute>("EFAMILY"), //
		jField<::sun::font::EAttribute>("EFONT"), //
		jField<::sun::font::EAttribute>("EFOREGROUND"), //
		jField<::sun::font::EAttribute>("EINPUT_METHOD_HIGHLIGHT"), //
		jField<::sun::font::EAttribute>("EINPUT_METHOD_UNDERLINE"), //
		jField<::sun::font::EAttribute>("EJUSTIFICATION"), //
		jField<::sun::font::EAttribute>("EKERNING"), //
		jField<::sun::font::EAttribute>("ELIGATURES"), //
		jField<::sun::font::EAttribute>("ENUMERIC_SHAPING"), //
		jField<::sun::font::EAttribute>("EPOSTURE"), //
		jField<::sun::font::EAttribute>("ERUN_DIRECTION"), //
		jField<::sun::font::EAttribute>("ESIZE"), //
		jField<::sun::font::EAttribute>("ESTRIKETHROUGH"), //
		jField<::sun::font::EAttribute>("ESUPERSCRIPT"), //
		jField<::sun::font::EAttribute>("ESWAP_COLORS"), //
		jField<::sun::font::EAttribute>("ETRACKING"), //
		jField<::sun::font::EAttribute>("ETRANSFORM"), //
		jField<::sun::font::EAttribute>("EUNDERLINE"), //
		jField<::sun::font::EAttribute>("EWEIGHT"), //
		jField<::sun::font::EAttribute>("EWIDTH"), //
	};

	template<typename F = ::sun::font::EAttribute>
	static auto EBACKGROUND() {
		static_assert(field_signatures[jField<F>("EBACKGROUND")] != -1);
		return sat<F>("EBACKGROUND");
	}

	template<typename F = ::sun::font::EAttribute>
	static auto EBASELINE_TRANSFORM() {
		static_assert(field_signatures[jField<F>("EBASELINE_TRANSFORM")] != -1);
		return sat<F>("EBASELINE_TRANSFORM");
	}

	template<typename F = ::sun::font::EAttribute>
	static auto EBIDI_EMBEDDING() {
		static_assert(field_signatures[jField<F>("EBIDI_EMBEDDING")] != -1);
		return sat<F>("EBIDI_EMBEDDING");
	}

	template<typename F = ::sun::font::EAttribute>
	static auto ECHAR_REPLACEMENT() {
		static_assert(field_signatures[jField<F>("ECHAR_REPLACEMENT")] != -1);
		return sat<F>("ECHAR_REPLACEMENT");
	}

	template<typename F = ::sun::font::EAttribute>
	static auto EFAMILY() {
		static_assert(field_signatures[jField<F>("EFAMILY")] != -1);
		return sat<F>("EFAMILY");
	}

	template<typename F = ::sun::font::EAttribute>
	static auto EFONT() {
		static_assert(field_signatures[jField<F>("EFONT")] != -1);
		return sat<F>("EFONT");
	}

	template<typename F = ::sun::font::EAttribute>
	static auto EFOREGROUND() {
		static_assert(field_signatures[jField<F>("EFOREGROUND")] != -1);
		return sat<F>("EFOREGROUND");
	}

	template<typename F = ::sun::font::EAttribute>
	static auto EINPUT_METHOD_HIGHLIGHT() {
		static_assert(field_signatures[jField<F>("EINPUT_METHOD_HIGHLIGHT")] != -1);
		return sat<F>("EINPUT_METHOD_HIGHLIGHT");
	}

	template<typename F = ::sun::font::EAttribute>
	static auto EINPUT_METHOD_UNDERLINE() {
		static_assert(field_signatures[jField<F>("EINPUT_METHOD_UNDERLINE")] != -1);
		return sat<F>("EINPUT_METHOD_UNDERLINE");
	}

	template<typename F = ::sun::font::EAttribute>
	static auto EJUSTIFICATION() {
		static_assert(field_signatures[jField<F>("EJUSTIFICATION")] != -1);
		return sat<F>("EJUSTIFICATION");
	}

	template<typename F = ::sun::font::EAttribute>
	static auto EKERNING() {
		static_assert(field_signatures[jField<F>("EKERNING")] != -1);
		return sat<F>("EKERNING");
	}

	template<typename F = ::sun::font::EAttribute>
	static auto ELIGATURES() {
		static_assert(field_signatures[jField<F>("ELIGATURES")] != -1);
		return sat<F>("ELIGATURES");
	}

	template<typename F = ::sun::font::EAttribute>
	static auto ENUMERIC_SHAPING() {
		static_assert(field_signatures[jField<F>("ENUMERIC_SHAPING")] != -1);
		return sat<F>("ENUMERIC_SHAPING");
	}

	template<typename F = ::sun::font::EAttribute>
	static auto EPOSTURE() {
		static_assert(field_signatures[jField<F>("EPOSTURE")] != -1);
		return sat<F>("EPOSTURE");
	}

	template<typename F = ::sun::font::EAttribute>
	static auto ERUN_DIRECTION() {
		static_assert(field_signatures[jField<F>("ERUN_DIRECTION")] != -1);
		return sat<F>("ERUN_DIRECTION");
	}

	template<typename F = ::sun::font::EAttribute>
	static auto ESIZE() {
		static_assert(field_signatures[jField<F>("ESIZE")] != -1);
		return sat<F>("ESIZE");
	}

	template<typename F = ::sun::font::EAttribute>
	static auto ESTRIKETHROUGH() {
		static_assert(field_signatures[jField<F>("ESTRIKETHROUGH")] != -1);
		return sat<F>("ESTRIKETHROUGH");
	}

	template<typename F = ::sun::font::EAttribute>
	static auto ESUPERSCRIPT() {
		static_assert(field_signatures[jField<F>("ESUPERSCRIPT")] != -1);
		return sat<F>("ESUPERSCRIPT");
	}

	template<typename F = ::sun::font::EAttribute>
	static auto ESWAP_COLORS() {
		static_assert(field_signatures[jField<F>("ESWAP_COLORS")] != -1);
		return sat<F>("ESWAP_COLORS");
	}

	template<typename F = ::sun::font::EAttribute>
	static auto ETRACKING() {
		static_assert(field_signatures[jField<F>("ETRACKING")] != -1);
		return sat<F>("ETRACKING");
	}

	template<typename F = ::sun::font::EAttribute>
	static auto ETRANSFORM() {
		static_assert(field_signatures[jField<F>("ETRANSFORM")] != -1);
		return sat<F>("ETRANSFORM");
	}

	template<typename F = ::sun::font::EAttribute>
	static auto EUNDERLINE() {
		static_assert(field_signatures[jField<F>("EUNDERLINE")] != -1);
		return sat<F>("EUNDERLINE");
	}

	template<typename F = ::sun::font::EAttribute>
	static auto EWEIGHT() {
		static_assert(field_signatures[jField<F>("EWEIGHT")] != -1);
		return sat<F>("EWEIGHT");
	}

	template<typename F = ::sun::font::EAttribute>
	static auto EWIDTH() {
		static_assert(field_signatures[jField<F>("EWIDTH")] != -1);
		return sat<F>("EWIDTH");
	}

	constexpr static Enume method_signatures{
		jMethod<::sun::font::EAttribute(::java::text::AttributedCharacterIterator$Attribute)>("forAttribute"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::sun::font::EAttribute(::java::lang::String)>("valueOf"), //
		jMethod<::sun::font::EAttribute *()>("values"), //
	};

	template<typename R = ::sun::font::EAttribute, typename... Args>
	static auto forAttribute(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("forAttribute")] != -1);
		return scall<R>("forAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::font::EAttribute, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::font::EAttribute *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
