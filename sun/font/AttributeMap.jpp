#ifndef sun_font_AttributeMap_HPP
#define sun_font_AttributeMap_HPP

#include "../../jfwd_decl.hpp"

class ::sun::font::AttributeMap : public jObject<::sun::font::AttributeMap, ::java::util::AbstractMap> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_font / "AttributeMap";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::sun::font::AttributeValues)>(), //
		jMethod<::java::util::Set()>("entrySet"), //
		jMethod<::sun::font::AttributeValues()>("getValues"), //
		jMethod<::java::lang::Object(::java::awt::font::TextAttribute, ::java::lang::Object)>("put"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Object)>("put"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::util::Set, typename... Args>
	auto entrySet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("entrySet")] != -1);
		return call<R>("entrySet", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::font::AttributeValues, typename... Args>
	auto getValues(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValues")] != -1);
		return call<R>("getValues", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto put(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("put")] != -1);
		return call<R>("put", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
