#ifndef sun_font_BidiUtils_HPP
#define sun_font_BidiUtils_HPP

#include "../../jfwd_decl.hpp"

class ::sun::font::BidiUtils : public jObject<::sun::font::BidiUtils, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_font / "BidiUtils";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jint *(::jint *)>("createContiguousOrder"), //
		jMethod<::jint *(::jint *)>("createInverseMap"), //
		jMethod<::jint *(::jint *, ::jbyte *, ::jint, ::jint)>("createNormalizedMap"), //
		jMethod<::jint *(::jbyte *)>("createVisualToLogicalMap"), //
		jMethod<::jbyte *(::java::text::Bidi)>("getLevels"), //
		jMethod<::jvoid(::java::text::Bidi, ::jbyte *, ::jint)>("getLevels"), //
		jMethod<::jvoid(::jbyte *, ::java::lang::Object *)>("reorderVisually"), //
	};

	template<typename R = ::jint *, typename... Args>
	static auto createContiguousOrder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createContiguousOrder")] != -1);
		return scall<R>("createContiguousOrder", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	static auto createInverseMap(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createInverseMap")] != -1);
		return scall<R>("createInverseMap", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	static auto createNormalizedMap(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createNormalizedMap")] != -1);
		return scall<R>("createNormalizedMap", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	static auto createVisualToLogicalMap(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createVisualToLogicalMap")] != -1);
		return scall<R>("createVisualToLogicalMap", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	static auto getLevels(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLevels")] != -1);
		return scall<R>("getLevels", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto reorderVisually(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reorderVisually")] != -1);
		return scall<R>("reorderVisually", std::forward<Args>(args)...);
	}

};

#endif
