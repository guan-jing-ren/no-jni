#ifndef sun_font_SunFontManager$FamilyDescription_HPP
#define sun_font_SunFontManager$FamilyDescription_HPP

#include "../../jfwd_decl.hpp"

class ::sun::font::SunFontManager$FamilyDescription : public jObject<::sun::font::SunFontManager$FamilyDescription, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_font / "SunFontManager$FamilyDescription";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("boldFileName"), //
		jField<::java::lang::String>("boldFullName"), //
		jField<::java::lang::String>("boldItalicFileName"), //
		jField<::java::lang::String>("boldItalicFullName"), //
		jField<::java::lang::String>("familyName"), //
		jField<::java::lang::String>("italicFileName"), //
		jField<::java::lang::String>("italicFullName"), //
		jField<::java::lang::String>("plainFileName"), //
		jField<::java::lang::String>("plainFullName"), //
	};

	template<typename F = ::java::lang::String>
	auto boldFileName() const {
		static_assert(field_signatures[jField<F>("boldFileName")] != -1);
		return at<F>("boldFileName");
	}

	template<typename F = ::java::lang::String>
	auto boldFullName() const {
		static_assert(field_signatures[jField<F>("boldFullName")] != -1);
		return at<F>("boldFullName");
	}

	template<typename F = ::java::lang::String>
	auto boldItalicFileName() const {
		static_assert(field_signatures[jField<F>("boldItalicFileName")] != -1);
		return at<F>("boldItalicFileName");
	}

	template<typename F = ::java::lang::String>
	auto boldItalicFullName() const {
		static_assert(field_signatures[jField<F>("boldItalicFullName")] != -1);
		return at<F>("boldItalicFullName");
	}

	template<typename F = ::java::lang::String>
	auto familyName() const {
		static_assert(field_signatures[jField<F>("familyName")] != -1);
		return at<F>("familyName");
	}

	template<typename F = ::java::lang::String>
	auto italicFileName() const {
		static_assert(field_signatures[jField<F>("italicFileName")] != -1);
		return at<F>("italicFileName");
	}

	template<typename F = ::java::lang::String>
	auto italicFullName() const {
		static_assert(field_signatures[jField<F>("italicFullName")] != -1);
		return at<F>("italicFullName");
	}

	template<typename F = ::java::lang::String>
	auto plainFileName() const {
		static_assert(field_signatures[jField<F>("plainFileName")] != -1);
		return at<F>("plainFileName");
	}

	template<typename F = ::java::lang::String>
	auto plainFullName() const {
		static_assert(field_signatures[jField<F>("plainFullName")] != -1);
		return at<F>("plainFullName");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
	};

};

#endif
