#ifndef sun_font_LayoutPathImpl$EndType_HPP
#define sun_font_LayoutPathImpl$EndType_HPP

#include "../../jfwd_decl.hpp"

class ::sun::font::LayoutPathImpl$EndType : public jObject<::sun::font::LayoutPathImpl$EndType, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_font / "LayoutPathImpl$EndType";

	constexpr static Enume field_signatures{
		jField<::sun::font::LayoutPathImpl$EndType>("CLOSED"), //
		jField<::sun::font::LayoutPathImpl$EndType>("EXTENDED"), //
		jField<::sun::font::LayoutPathImpl$EndType>("PINNED"), //
	};

	template<typename F = ::sun::font::LayoutPathImpl$EndType>
	static auto CLOSED() {
		static_assert(field_signatures[jField<F>("CLOSED")] != -1);
		return sat<F>("CLOSED");
	}

	template<typename F = ::sun::font::LayoutPathImpl$EndType>
	static auto EXTENDED() {
		static_assert(field_signatures[jField<F>("EXTENDED")] != -1);
		return sat<F>("EXTENDED");
	}

	template<typename F = ::sun::font::LayoutPathImpl$EndType>
	static auto PINNED() {
		static_assert(field_signatures[jField<F>("PINNED")] != -1);
		return sat<F>("PINNED");
	}

	constexpr static Enume method_signatures{
		jMethod<::jboolean()>("isClosed"), //
		jMethod<::jboolean()>("isExtended"), //
		jMethod<::jboolean()>("isPinned"), //
		jMethod<::sun::font::LayoutPathImpl$EndType(::java::lang::String)>("valueOf"), //
		jMethod<::sun::font::LayoutPathImpl$EndType *()>("values"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto isClosed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isClosed")] != -1);
		return call<R>("isClosed", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isExtended(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isExtended")] != -1);
		return call<R>("isExtended", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPinned(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPinned")] != -1);
		return call<R>("isPinned", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::font::LayoutPathImpl$EndType, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::font::LayoutPathImpl$EndType *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
