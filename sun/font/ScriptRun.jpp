#ifndef sun_font_ScriptRun_HPP
#define sun_font_ScriptRun_HPP

#include "../../jfwd_decl.hpp"

class ::sun::font::ScriptRun : public jObject<::sun::font::ScriptRun, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_font / "ScriptRun";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jchar *, ::jint, ::jint)>(), //
		jMethod<::jint()>("getScriptCode"), //
		jMethod<::jint()>("getScriptLimit"), //
		jMethod<::jint()>("getScriptStart"), //
		jMethod<::jvoid(::jchar *, ::jint, ::jint)>("init"), //
		jMethod<::jboolean()>("next"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getScriptCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScriptCode")] != -1);
		return call<R>("getScriptCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getScriptLimit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScriptLimit")] != -1);
		return call<R>("getScriptLimit", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getScriptStart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScriptStart")] != -1);
		return call<R>("getScriptStart", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto init(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("init")] != -1);
		return call<R>("init", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto next(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("next")] != -1);
		return call<R>("next", std::forward<Args>(args)...);
	}

};

#endif
