#ifndef sun_font_FontUtilities_HPP
#define sun_font_FontUtilities_HPP

#include "../../jfwd_decl.hpp"

class ::sun::font::FontUtilities : public jObject<::sun::font::FontUtilities, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_font / "FontUtilities";

	constexpr static Enume field_signatures{
		jField<::jint>("MAX_LAYOUT_CHARCODE"), //
		jField<::jint>("MIN_LAYOUT_CHARCODE"), //
		jField<::jboolean>("isLinux"), //
		jField<::jboolean>("isMacOSX"), //
		jField<::jboolean>("isOpenJDK"), //
		jField<::jboolean>("isOpenSolaris"), //
		jField<::jboolean>("isSolaris"), //
		jField<::jboolean>("isSolaris8"), //
		jField<::jboolean>("isSolaris9"), //
		jField<::jboolean>("isWindows"), //
		jField<::jboolean>("useT2K"), //
	};

	template<typename F = ::jint>
	static auto MAX_LAYOUT_CHARCODE() {
		static_assert(field_signatures[jField<F>("MAX_LAYOUT_CHARCODE")] != -1);
		return sat<F>("MAX_LAYOUT_CHARCODE");
	}

	template<typename F = ::jint>
	static auto MIN_LAYOUT_CHARCODE() {
		static_assert(field_signatures[jField<F>("MIN_LAYOUT_CHARCODE")] != -1);
		return sat<F>("MIN_LAYOUT_CHARCODE");
	}

	template<typename F = ::jboolean>
	static auto isLinux() {
		static_assert(field_signatures[jField<F>("isLinux")] != -1);
		return sat<F>("isLinux");
	}

	template<typename F = ::jboolean>
	static auto isMacOSX() {
		static_assert(field_signatures[jField<F>("isMacOSX")] != -1);
		return sat<F>("isMacOSX");
	}

	template<typename F = ::jboolean>
	static auto isOpenJDK() {
		static_assert(field_signatures[jField<F>("isOpenJDK")] != -1);
		return sat<F>("isOpenJDK");
	}

	template<typename F = ::jboolean>
	static auto isOpenSolaris() {
		static_assert(field_signatures[jField<F>("isOpenSolaris")] != -1);
		return sat<F>("isOpenSolaris");
	}

	template<typename F = ::jboolean>
	static auto isSolaris() {
		static_assert(field_signatures[jField<F>("isSolaris")] != -1);
		return sat<F>("isSolaris");
	}

	template<typename F = ::jboolean>
	static auto isSolaris8() {
		static_assert(field_signatures[jField<F>("isSolaris8")] != -1);
		return sat<F>("isSolaris8");
	}

	template<typename F = ::jboolean>
	static auto isSolaris9() {
		static_assert(field_signatures[jField<F>("isSolaris9")] != -1);
		return sat<F>("isSolaris9");
	}

	template<typename F = ::jboolean>
	static auto isWindows() {
		static_assert(field_signatures[jField<F>("isWindows")] != -1);
		return sat<F>("isWindows");
	}

	template<typename F = ::jboolean>
	static auto useT2K() {
		static_assert(field_signatures[jField<F>("useT2K")] != -1);
		return sat<F>("useT2K");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jboolean()>("debugFonts"), //
		jMethod<::jboolean(::java::awt::Font)>("fontSupportsDefaultEncoding"), //
		jMethod<::javax::swing::plaf::FontUIResource(::java::awt::Font)>("getCompositeFontUIResource"), //
		jMethod<::sun::font::Font2D(::java::awt::Font)>("getFont2D"), //
		jMethod<::javax::swing::plaf::FontUIResource(::java::lang::String, ::jint, ::jint)>("getFontConfigFUIR"), //
		jMethod<::sun::util::logging::PlatformLogger()>("getLogger"), //
		jMethod<::jboolean(::jint)>("isComplexCharCode"), //
		jMethod<::jboolean(::jchar *, ::jint, ::jint)>("isComplexText"), //
		jMethod<::jboolean()>("isLogging"), //
		jMethod<::jboolean(::jchar)>("isNonSimpleChar"), //
		jMethod<::java::lang::String(::java::lang::String)>("mapFcName"), //
		jMethod<::jboolean(::java::awt::Font)>("textLayoutIsCompatible"), //
	};

	template<typename R = ::jboolean, typename... Args>
	static auto debugFonts(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("debugFonts")] != -1);
		return scall<R>("debugFonts", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto fontSupportsDefaultEncoding(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fontSupportsDefaultEncoding")] != -1);
		return scall<R>("fontSupportsDefaultEncoding", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::FontUIResource, typename... Args>
	static auto getCompositeFontUIResource(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCompositeFontUIResource")] != -1);
		return scall<R>("getCompositeFontUIResource", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::font::Font2D, typename... Args>
	static auto getFont2D(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFont2D")] != -1);
		return scall<R>("getFont2D", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::FontUIResource, typename... Args>
	static auto getFontConfigFUIR(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFontConfigFUIR")] != -1);
		return scall<R>("getFontConfigFUIR", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::util::logging::PlatformLogger, typename... Args>
	static auto getLogger(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLogger")] != -1);
		return scall<R>("getLogger", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isComplexCharCode(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isComplexCharCode")] != -1);
		return scall<R>("isComplexCharCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isComplexText(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isComplexText")] != -1);
		return scall<R>("isComplexText", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isLogging(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLogging")] != -1);
		return scall<R>("isLogging", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isNonSimpleChar(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isNonSimpleChar")] != -1);
		return scall<R>("isNonSimpleChar", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto mapFcName(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mapFcName")] != -1);
		return scall<R>("mapFcName", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto textLayoutIsCompatible(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("textLayoutIsCompatible")] != -1);
		return scall<R>("textLayoutIsCompatible", std::forward<Args>(args)...);
	}

};

#endif
