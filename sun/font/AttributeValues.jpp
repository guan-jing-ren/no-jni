#ifndef sun_font_AttributeValues_HPP
#define sun_font_AttributeValues_HPP

#include "../../jfwd_decl.hpp"

class ::sun::font::AttributeValues : public jObject<::sun::font::AttributeValues, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_font / "AttributeValues";

	constexpr static Enume field_signatures{
		jField<::jint>("MASK_ALL"), //
	};

	template<typename F = ::jint>
	static auto MASK_ALL() {
		static_assert(field_signatures[jField<F>("MASK_ALL")] != -1);
		return sat<F>("MASK_ALL");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jboolean(::jint)>("allDefined"), //
		jMethod<::jboolean(::jint)>("anyDefined"), //
		jMethod<::jboolean(::jint)>("anyNonDefault"), //
		jMethod<::sun::font::AttributeValues()>("applyIMHighlight"), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::sun::font::AttributeValues()>("clone"), //
		jMethod<::jvoid(::jint)>("defineAll"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jboolean(::sun::font::AttributeValues)>("equals"), //
		jMethod<::java::awt::geom::AffineTransform(::java::awt::geom::AffineTransform, ::jboolean)>("extractXRotation"), //
		jMethod<::java::awt::geom::AffineTransform(::java::awt::geom::AffineTransform, ::jboolean)>("extractYRotation"), //
		jMethod<::sun::font::AttributeValues(::java::util::Map)>("fromMap"), //
		jMethod<::sun::font::AttributeValues(::java::util::Map, ::jint)>("fromMap"), //
		jMethod<::sun::font::AttributeValues(::java::util::Hashtable)>("fromSerializableHashtable"), //
		jMethod<::java::lang::Object(::sun::font::EAttribute)>("get"), //
		jMethod<::java::awt::Paint()>("getBackground"), //
		jMethod<::java::awt::geom::AffineTransform()>("getBaselineTransform"), //
		jMethod<::java::awt::geom::AffineTransform(::java::util::Map)>("getBaselineTransform"), //
		jMethod<::jint()>("getBidiEmbedding"), //
		jMethod<::java::awt::font::GraphicAttribute()>("getCharReplacement"), //
		jMethod<::java::awt::geom::AffineTransform()>("getCharTransform"), //
		jMethod<::java::awt::geom::AffineTransform(::java::util::Map)>("getCharTransform"), //
		jMethod<::java::lang::String()>("getFamily"), //
		jMethod<::java::awt::Font()>("getFont"), //
		jMethod<::java::awt::Paint()>("getForeground"), //
		jMethod<::java::lang::Object()>("getInputMethodHighlight"), //
		jMethod<::jint()>("getInputMethodUnderline"), //
		jMethod<::jfloat()>("getJustification"), //
		jMethod<::jfloat(::java::util::Map)>("getJustification"), //
		jMethod<::jint()>("getKerning"), //
		jMethod<::jint()>("getLigatures"), //
		jMethod<::jint(::sun::font::EAttribute)>("getMask"), //
		jMethod<::jint(::sun::font::EAttribute *)>("getMask"), //
		jMethod<::java::awt::font::NumericShaper()>("getNumericShaping"), //
		jMethod<::java::awt::font::NumericShaper(::java::util::Map)>("getNumericShaping"), //
		jMethod<::jfloat()>("getPosture"), //
		jMethod<::jint()>("getRunDirection"), //
		jMethod<::jfloat()>("getSize"), //
		jMethod<::jboolean()>("getStrikethrough"), //
		jMethod<::jint()>("getSuperscript"), //
		jMethod<::jboolean()>("getSwapColors"), //
		jMethod<::jfloat()>("getTracking"), //
		jMethod<::java::awt::geom::AffineTransform()>("getTransform"), //
		jMethod<::jint()>("getUnderline"), //
		jMethod<::jfloat()>("getWeight"), //
		jMethod<::jfloat()>("getWidth"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean(::java::util::Hashtable)>("is16Hashtable"), //
		jMethod<::jboolean(::sun::font::EAttribute)>("isDefined"), //
		jMethod<::jboolean(::sun::font::EAttribute)>("isNonDefault"), //
		jMethod<::sun::font::AttributeValues(::java::util::Map)>("merge"), //
		jMethod<::sun::font::AttributeValues(::java::util::Map, ::jint)>("merge"), //
		jMethod<::sun::font::AttributeValues(::sun::font::AttributeValues)>("merge"), //
		jMethod<::sun::font::AttributeValues(::sun::font::AttributeValues, ::jint)>("merge"), //
		jMethod<::jvoid(::sun::font::EAttribute, ::java::lang::Object)>("set"), //
		jMethod<::jvoid(::sun::font::EAttribute, ::sun::font::AttributeValues)>("set"), //
		jMethod<::jvoid(::java::awt::Paint)>("setBackground"), //
		jMethod<::jvoid(::jint)>("setBidiEmbedding"), //
		jMethod<::jvoid(::java::awt::font::GraphicAttribute)>("setCharReplacement"), //
		jMethod<::jvoid(::sun::font::EAttribute)>("setDefault"), //
		jMethod<::jvoid(::java::lang::String)>("setFamily"), //
		jMethod<::jvoid(::java::awt::Font)>("setFont"), //
		jMethod<::jvoid(::java::awt::Paint)>("setForeground"), //
		jMethod<::jvoid(::java::awt::im::InputMethodHighlight)>("setInputMethodHighlight"), //
		jMethod<::jvoid(::java::text::Annotation)>("setInputMethodHighlight"), //
		jMethod<::jvoid(::jint)>("setInputMethodUnderline"), //
		jMethod<::jvoid(::jfloat)>("setJustification"), //
		jMethod<::jvoid(::jint)>("setKerning"), //
		jMethod<::jvoid(::jint)>("setLigatures"), //
		jMethod<::jvoid(::java::awt::font::NumericShaper)>("setNumericShaping"), //
		jMethod<::jvoid(::jfloat)>("setPosture"), //
		jMethod<::jvoid(::jint)>("setRunDirection"), //
		jMethod<::jvoid(::jfloat)>("setSize"), //
		jMethod<::jvoid(::jboolean)>("setStrikethrough"), //
		jMethod<::jvoid(::jint)>("setSuperscript"), //
		jMethod<::jvoid(::jboolean)>("setSwapColors"), //
		jMethod<::jvoid(::jfloat)>("setTracking"), //
		jMethod<::jvoid(::java::awt::font::TransformAttribute)>("setTransform"), //
		jMethod<::jvoid(::java::awt::geom::AffineTransform)>("setTransform"), //
		jMethod<::jvoid(::jint)>("setUnderline"), //
		jMethod<::jvoid(::jfloat)>("setWeight"), //
		jMethod<::jvoid(::jfloat)>("setWidth"), //
		jMethod<::java::util::Map(::java::util::Map)>("toMap"), //
		jMethod<::java::util::Hashtable()>("toSerializableHashtable"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid(::sun::font::EAttribute)>("unset"), //
		jMethod<::jvoid()>("unsetDefault"), //
		jMethod<::jvoid()>("updateDerivedTransforms"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto allDefined(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("allDefined")] != -1);
		return call<R>("allDefined", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto anyDefined(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("anyDefined")] != -1);
		return call<R>("anyDefined", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto anyNonDefault(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("anyNonDefault")] != -1);
		return call<R>("anyNonDefault", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::font::AttributeValues, typename... Args>
	auto applyIMHighlight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("applyIMHighlight")] != -1);
		return call<R>("applyIMHighlight", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto defineAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("defineAll")] != -1);
		return call<R>("defineAll", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::AffineTransform, typename... Args>
	static auto extractXRotation(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("extractXRotation")] != -1);
		return scall<R>("extractXRotation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::AffineTransform, typename... Args>
	static auto extractYRotation(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("extractYRotation")] != -1);
		return scall<R>("extractYRotation", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::font::AttributeValues, typename... Args>
	static auto fromMap(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fromMap")] != -1);
		return scall<R>("fromMap", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::font::AttributeValues, typename... Args>
	static auto fromSerializableHashtable(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fromSerializableHashtable")] != -1);
		return scall<R>("fromSerializableHashtable", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Paint, typename... Args>
	auto getBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBackground")] != -1);
		return call<R>("getBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::AffineTransform, typename... Args>
	auto getBaselineTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBaselineTransform")] != -1);
		return call<R>("getBaselineTransform", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBidiEmbedding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBidiEmbedding")] != -1);
		return call<R>("getBidiEmbedding", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::font::GraphicAttribute, typename... Args>
	auto getCharReplacement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCharReplacement")] != -1);
		return call<R>("getCharReplacement", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::AffineTransform, typename... Args>
	auto getCharTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCharTransform")] != -1);
		return call<R>("getCharTransform", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFamily(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFamily")] != -1);
		return call<R>("getFamily", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Font, typename... Args>
	auto getFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFont")] != -1);
		return call<R>("getFont", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Paint, typename... Args>
	auto getForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getForeground")] != -1);
		return call<R>("getForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getInputMethodHighlight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInputMethodHighlight")] != -1);
		return call<R>("getInputMethodHighlight", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getInputMethodUnderline(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInputMethodUnderline")] != -1);
		return call<R>("getInputMethodUnderline", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getJustification(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJustification")] != -1);
		return call<R>("getJustification", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getKerning(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKerning")] != -1);
		return call<R>("getKerning", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLigatures(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLigatures")] != -1);
		return call<R>("getLigatures", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getMask(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMask")] != -1);
		return scall<R>("getMask", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::font::NumericShaper, typename... Args>
	auto getNumericShaping(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNumericShaping")] != -1);
		return call<R>("getNumericShaping", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getPosture(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPosture")] != -1);
		return call<R>("getPosture", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRunDirection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRunDirection")] != -1);
		return call<R>("getRunDirection", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return call<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getStrikethrough(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStrikethrough")] != -1);
		return call<R>("getStrikethrough", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSuperscript(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSuperscript")] != -1);
		return call<R>("getSuperscript", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getSwapColors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSwapColors")] != -1);
		return call<R>("getSwapColors", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getTracking(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTracking")] != -1);
		return call<R>("getTracking", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::AffineTransform, typename... Args>
	auto getTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransform")] != -1);
		return call<R>("getTransform", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getUnderline(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUnderline")] != -1);
		return call<R>("getUnderline", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getWeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWeight")] != -1);
		return call<R>("getWeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto is16Hashtable(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("is16Hashtable")] != -1);
		return scall<R>("is16Hashtable", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDefined(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDefined")] != -1);
		return call<R>("isDefined", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isNonDefault(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isNonDefault")] != -1);
		return call<R>("isNonDefault", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::font::AttributeValues, typename... Args>
	auto merge(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("merge")] != -1);
		return call<R>("merge", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set")] != -1);
		return call<R>("set", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBackground")] != -1);
		return call<R>("setBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBidiEmbedding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBidiEmbedding")] != -1);
		return call<R>("setBidiEmbedding", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCharReplacement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCharReplacement")] != -1);
		return call<R>("setCharReplacement", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDefault(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDefault")] != -1);
		return call<R>("setDefault", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFamily(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFamily")] != -1);
		return call<R>("setFamily", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFont")] != -1);
		return call<R>("setFont", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setForeground")] != -1);
		return call<R>("setForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInputMethodHighlight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setInputMethodHighlight")] != -1);
		return call<R>("setInputMethodHighlight", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInputMethodUnderline(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setInputMethodUnderline")] != -1);
		return call<R>("setInputMethodUnderline", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setJustification(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setJustification")] != -1);
		return call<R>("setJustification", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setKerning(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setKerning")] != -1);
		return call<R>("setKerning", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLigatures(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLigatures")] != -1);
		return call<R>("setLigatures", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNumericShaping(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNumericShaping")] != -1);
		return call<R>("setNumericShaping", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPosture(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPosture")] != -1);
		return call<R>("setPosture", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRunDirection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRunDirection")] != -1);
		return call<R>("setRunDirection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSize")] != -1);
		return call<R>("setSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setStrikethrough(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setStrikethrough")] != -1);
		return call<R>("setStrikethrough", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSuperscript(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSuperscript")] != -1);
		return call<R>("setSuperscript", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSwapColors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSwapColors")] != -1);
		return call<R>("setSwapColors", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTracking(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTracking")] != -1);
		return call<R>("setTracking", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTransform")] != -1);
		return call<R>("setTransform", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUnderline(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUnderline")] != -1);
		return call<R>("setUnderline", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setWeight")] != -1);
		return call<R>("setWeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setWidth")] != -1);
		return call<R>("setWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto toMap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toMap")] != -1);
		return call<R>("toMap", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Hashtable, typename... Args>
	auto toSerializableHashtable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toSerializableHashtable")] != -1);
		return call<R>("toSerializableHashtable", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unset")] != -1);
		return call<R>("unset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unsetDefault(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unsetDefault")] != -1);
		return call<R>("unsetDefault", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateDerivedTransforms(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateDerivedTransforms")] != -1);
		return call<R>("updateDerivedTransforms", std::forward<Args>(args)...);
	}

};

#endif
