#ifndef sun_font_CharToGlyphMapper_HPP
#define sun_font_CharToGlyphMapper_HPP

#include "../../jfwd_decl.hpp"

class ::sun::font::CharToGlyphMapper : public jObject<::sun::font::CharToGlyphMapper, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_font / "CharToGlyphMapper";

	constexpr static Enume field_signatures{
		jField<::jint>("HI_SURROGATE_END"), //
		jField<::jint>("HI_SURROGATE_START"), //
		jField<::jint>("INVISIBLE_GLYPHS"), //
		jField<::jint>("INVISIBLE_GLYPH_ID"), //
		jField<::jint>("LO_SURROGATE_END"), //
		jField<::jint>("LO_SURROGATE_START"), //
		jField<::jint>("UNINITIALIZED_GLYPH"), //
	};

	template<typename F = ::jint>
	static auto HI_SURROGATE_END() {
		static_assert(field_signatures[jField<F>("HI_SURROGATE_END")] != -1);
		return sat<F>("HI_SURROGATE_END");
	}

	template<typename F = ::jint>
	static auto HI_SURROGATE_START() {
		static_assert(field_signatures[jField<F>("HI_SURROGATE_START")] != -1);
		return sat<F>("HI_SURROGATE_START");
	}

	template<typename F = ::jint>
	static auto INVISIBLE_GLYPHS() {
		static_assert(field_signatures[jField<F>("INVISIBLE_GLYPHS")] != -1);
		return sat<F>("INVISIBLE_GLYPHS");
	}

	template<typename F = ::jint>
	static auto INVISIBLE_GLYPH_ID() {
		static_assert(field_signatures[jField<F>("INVISIBLE_GLYPH_ID")] != -1);
		return sat<F>("INVISIBLE_GLYPH_ID");
	}

	template<typename F = ::jint>
	static auto LO_SURROGATE_END() {
		static_assert(field_signatures[jField<F>("LO_SURROGATE_END")] != -1);
		return sat<F>("LO_SURROGATE_END");
	}

	template<typename F = ::jint>
	static auto LO_SURROGATE_START() {
		static_assert(field_signatures[jField<F>("LO_SURROGATE_START")] != -1);
		return sat<F>("LO_SURROGATE_START");
	}

	template<typename F = ::jint>
	static auto UNINITIALIZED_GLYPH() {
		static_assert(field_signatures[jField<F>("UNINITIALIZED_GLYPH")] != -1);
		return sat<F>("UNINITIALIZED_GLYPH");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jboolean(::jchar)>("canDisplay"), //
		jMethod<::jboolean(::jint)>("canDisplay"), //
		jMethod<::jint(::jchar)>("charToGlyph"), //
		jMethod<::jint(::jint)>("charToGlyph"), //
		jMethod<::jvoid(::jint, ::jchar *, ::jint *)>("charsToGlyphs"), //
		jMethod<::jvoid(::jint, ::jint *, ::jint *)>("charsToGlyphs"), //
		jMethod<::jboolean(::jint, ::jchar *, ::jint *)>("charsToGlyphsNS"), //
		jMethod<::jint()>("getMissingGlyphCode"), //
		jMethod<::jint()>("getNumGlyphs"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto canDisplay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canDisplay")] != -1);
		return call<R>("canDisplay", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto charToGlyph(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("charToGlyph")] != -1);
		return call<R>("charToGlyph", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto charsToGlyphs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("charsToGlyphs")] != -1);
		return call<R>("charsToGlyphs", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto charsToGlyphsNS(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("charsToGlyphsNS")] != -1);
		return call<R>("charsToGlyphsNS", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMissingGlyphCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMissingGlyphCode")] != -1);
		return call<R>("getMissingGlyphCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumGlyphs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNumGlyphs")] != -1);
		return call<R>("getNumGlyphs", std::forward<Args>(args)...);
	}

};

#endif
