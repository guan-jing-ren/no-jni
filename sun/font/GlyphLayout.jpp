#ifndef sun_font_GlyphLayout_HPP
#define sun_font_GlyphLayout_HPP

#include "../../jfwd_decl.hpp"

class ::sun::font::GlyphLayout : public jObject<::sun::font::GlyphLayout, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_font / "GlyphLayout";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::sun::font::GlyphLayout)>("done"), //
		jMethod<::sun::font::GlyphLayout(::sun::font::GlyphLayout$LayoutEngineFactory)>("get"), //
		jMethod<::sun::font::StandardGlyphVector(::java::awt::Font, ::java::awt::font::FontRenderContext, ::jchar *, ::jint, ::jint, ::jint, ::sun::font::StandardGlyphVector)>("layout"), //
	};

	template<typename R = ::jvoid, typename... Args>
	static auto done(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("done")] != -1);
		return scall<R>("done", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::font::GlyphLayout, typename... Args>
	static auto get(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return scall<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::font::StandardGlyphVector, typename... Args>
	auto layout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("layout")] != -1);
		return call<R>("layout", std::forward<Args>(args)...);
	}

};

#endif
