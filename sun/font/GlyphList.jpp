#ifndef sun_font_GlyphList_HPP
#define sun_font_GlyphList_HPP

#include "../../jfwd_decl.hpp"

class ::sun::font::GlyphList : public jObject<::sun::font::GlyphList, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_font / "GlyphList";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jint *()>("getBounds"), //
		jMethod<::jbyte *()>("getGrayBits"), //
		jMethod<::jlong *()>("getImages"), //
		jMethod<::sun::font::GlyphList()>("getInstance"), //
		jMethod<::jint *()>("getMetrics"), //
		jMethod<::jint()>("getNumGlyphs"), //
		jMethod<::jfloat *()>("getPositions"), //
		jMethod<::java::lang::Object()>("getStrike"), //
		jMethod<::jfloat()>("getX"), //
		jMethod<::jfloat()>("getY"), //
		jMethod<::jboolean()>("isRGBOrder"), //
		jMethod<::jboolean()>("isSubPixPos"), //
		jMethod<::jboolean(::sun::java2d::loops::FontInfo, ::jchar *, ::jint, ::jint, ::jfloat, ::jfloat)>("setFromChars"), //
		jMethod<::jvoid(::sun::java2d::loops::FontInfo, ::java::awt::font::GlyphVector, ::jfloat, ::jfloat)>("setFromGlyphVector"), //
		jMethod<::jboolean(::sun::java2d::loops::FontInfo, ::java::lang::String, ::jfloat, ::jfloat)>("setFromString"), //
		jMethod<::jvoid(::jint)>("setGlyphIndex"), //
		jMethod<::jboolean()>("usePositions"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds")] != -1);
		return call<R>("getBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getGrayBits(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGrayBits")] != -1);
		return call<R>("getGrayBits", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong *, typename... Args>
	auto getImages(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getImages")] != -1);
		return call<R>("getImages", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::font::GlyphList, typename... Args>
	static auto getInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInstance")] != -1);
		return scall<R>("getInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getMetrics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMetrics")] != -1);
		return call<R>("getMetrics", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumGlyphs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNumGlyphs")] != -1);
		return call<R>("getNumGlyphs", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat *, typename... Args>
	auto getPositions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPositions")] != -1);
		return call<R>("getPositions", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getStrike(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStrike")] != -1);
		return call<R>("getStrike", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getX")] != -1);
		return call<R>("getX", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getY")] != -1);
		return call<R>("getY", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRGBOrder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isRGBOrder")] != -1);
		return call<R>("isRGBOrder", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSubPixPos(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSubPixPos")] != -1);
		return call<R>("isSubPixPos", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto setFromChars(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFromChars")] != -1);
		return call<R>("setFromChars", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFromGlyphVector(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFromGlyphVector")] != -1);
		return call<R>("setFromGlyphVector", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto setFromString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFromString")] != -1);
		return call<R>("setFromString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGlyphIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setGlyphIndex")] != -1);
		return call<R>("setGlyphIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto usePositions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("usePositions")] != -1);
		return call<R>("usePositions", std::forward<Args>(args)...);
	}

};

#endif
