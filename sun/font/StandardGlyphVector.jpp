#ifndef sun_font_StandardGlyphVector_HPP
#define sun_font_StandardGlyphVector_HPP

#include "../../jfwd_decl.hpp"

class ::sun::font::StandardGlyphVector : public jObject<::sun::font::StandardGlyphVector, ::java::awt::font::GlyphVector> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_font / "StandardGlyphVector";

	constexpr static Enume field_signatures{
		jField<::jint>("FLAG_USES_ALTERNATE_ORIENTATION"), //
		jField<::jint>("FLAG_USES_VERTICAL_BASELINE"), //
		jField<::jint>("FLAG_USES_VERTICAL_METRICS"), //
	};

	template<typename F = ::jint>
	static auto FLAG_USES_ALTERNATE_ORIENTATION() {
		static_assert(field_signatures[jField<F>("FLAG_USES_ALTERNATE_ORIENTATION")] != -1);
		return sat<F>("FLAG_USES_ALTERNATE_ORIENTATION");
	}

	template<typename F = ::jint>
	static auto FLAG_USES_VERTICAL_BASELINE() {
		static_assert(field_signatures[jField<F>("FLAG_USES_VERTICAL_BASELINE")] != -1);
		return sat<F>("FLAG_USES_VERTICAL_BASELINE");
	}

	template<typename F = ::jint>
	static auto FLAG_USES_VERTICAL_METRICS() {
		static_assert(field_signatures[jField<F>("FLAG_USES_VERTICAL_METRICS")] != -1);
		return sat<F>("FLAG_USES_VERTICAL_METRICS");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::Font, ::java::awt::font::FontRenderContext, ::jint *, ::jfloat *, ::jint *, ::jint)>(), //
		jConstructor<::jvoid(::java::awt::Font, ::java::lang::String, ::java::awt::font::FontRenderContext)>(), //
		jConstructor<::jvoid(::java::awt::Font, ::java::text::CharacterIterator, ::java::awt::font::FontRenderContext)>(), //
		jConstructor<::jvoid(::java::awt::Font, ::jchar *, ::jint, ::jint, ::java::awt::font::FontRenderContext)>(), //
		jConstructor<::jvoid(::java::awt::Font, ::jchar *, ::java::awt::font::FontRenderContext)>(), //
		jConstructor<::jvoid(::java::awt::Font, ::jint *, ::java::awt::font::FontRenderContext)>(), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::sun::font::StandardGlyphVector()>("copy"), //
		jMethod<::jboolean(::java::awt::font::GlyphVector)>("equals"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::awt::Font()>("getFont"), //
		jMethod<::java::awt::font::FontRenderContext()>("getFontRenderContext"), //
		jMethod<::jint(::jint)>("getGlyphCharIndex"), //
		jMethod<::jint *(::jint, ::jint, ::jint *)>("getGlyphCharIndices"), //
		jMethod<::jint(::jint)>("getGlyphCode"), //
		jMethod<::jint *(::jint, ::jint, ::jint *)>("getGlyphCodes"), //
		jMethod<::jfloat *()>("getGlyphInfo"), //
		jMethod<::java::awt::font::GlyphJustificationInfo(::jint)>("getGlyphJustificationInfo"), //
		jMethod<::java::awt::Shape(::jint)>("getGlyphLogicalBounds"), //
		jMethod<::java::awt::font::GlyphMetrics(::jint)>("getGlyphMetrics"), //
		jMethod<::java::awt::Shape(::jint)>("getGlyphOutline"), //
		jMethod<::java::awt::Shape(::jint, ::jfloat, ::jfloat)>("getGlyphOutline"), //
		jMethod<::java::awt::Rectangle(::jint, ::java::awt::font::FontRenderContext, ::jfloat, ::jfloat)>("getGlyphPixelBounds"), //
		jMethod<::java::awt::geom::Point2D(::jint)>("getGlyphPosition"), //
		jMethod<::jfloat *(::jint, ::jint, ::jfloat *)>("getGlyphPositions"), //
		jMethod<::jfloat *(::jfloat *)>("getGlyphPositions"), //
		jMethod<::java::awt::geom::AffineTransform(::jint)>("getGlyphTransform"), //
		jMethod<::java::awt::geom::AffineTransform *()>("getGlyphTransforms"), //
		jMethod<::java::awt::geom::AffineTransform *(::jint, ::jint, ::java::awt::geom::AffineTransform *)>("getGlyphTransforms"), //
		jMethod<::java::awt::Shape(::jint)>("getGlyphVisualBounds"), //
		jMethod<::jint()>("getLayoutFlags"), //
		jMethod<::java::awt::geom::Rectangle2D()>("getLogicalBounds"), //
		jMethod<::jint()>("getNumGlyphs"), //
		jMethod<::java::awt::Shape()>("getOutline"), //
		jMethod<::java::awt::Shape(::jfloat, ::jfloat)>("getOutline"), //
		jMethod<::java::awt::Rectangle(::java::awt::font::FontRenderContext, ::jfloat, ::jfloat)>("getPixelBounds"), //
		jMethod<::sun::font::StandardGlyphVector(::java::awt::font::GlyphVector, ::sun::java2d::loops::FontInfo)>("getStandardGV"), //
		jMethod<::java::awt::geom::Rectangle2D()>("getVisualBounds"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jvoid(::java::awt::Font, ::java::awt::font::FontRenderContext, ::jint *, ::jfloat *, ::jint *, ::jint)>("initGlyphVector"), //
		jMethod<::jvoid()>("performDefaultLayout"), //
		jMethod<::jvoid(::java::awt::font::FontRenderContext, ::java::awt::geom::Point2D, ::java::awt::Point)>("pixellate"), //
		jMethod<::jvoid(::jint, ::java::awt::geom::Point2D)>("setGlyphPosition"), //
		jMethod<::jvoid(::jfloat *)>("setGlyphPositions"), //
		jMethod<::jvoid(::jfloat *, ::jint, ::jint, ::jint)>("setGlyphPositions"), //
		jMethod<::jvoid(::jint, ::java::awt::geom::AffineTransform)>("setGlyphTransform"), //
		jMethod<::jvoid(::java::awt::geom::AffineTransform *)>("setGlyphTransforms"), //
		jMethod<::jvoid(::java::awt::geom::AffineTransform *, ::jint, ::jint, ::jint)>("setGlyphTransforms"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::font::StandardGlyphVector, typename... Args>
	auto copy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("copy")] != -1);
		return call<R>("copy", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Font, typename... Args>
	auto getFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFont")] != -1);
		return call<R>("getFont", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::font::FontRenderContext, typename... Args>
	auto getFontRenderContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFontRenderContext")] != -1);
		return call<R>("getFontRenderContext", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getGlyphCharIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGlyphCharIndex")] != -1);
		return call<R>("getGlyphCharIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getGlyphCharIndices(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGlyphCharIndices")] != -1);
		return call<R>("getGlyphCharIndices", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getGlyphCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGlyphCode")] != -1);
		return call<R>("getGlyphCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getGlyphCodes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGlyphCodes")] != -1);
		return call<R>("getGlyphCodes", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat *, typename... Args>
	auto getGlyphInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGlyphInfo")] != -1);
		return call<R>("getGlyphInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::font::GlyphJustificationInfo, typename... Args>
	auto getGlyphJustificationInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGlyphJustificationInfo")] != -1);
		return call<R>("getGlyphJustificationInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Shape, typename... Args>
	auto getGlyphLogicalBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGlyphLogicalBounds")] != -1);
		return call<R>("getGlyphLogicalBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::font::GlyphMetrics, typename... Args>
	auto getGlyphMetrics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGlyphMetrics")] != -1);
		return call<R>("getGlyphMetrics", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Shape, typename... Args>
	auto getGlyphOutline(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGlyphOutline")] != -1);
		return call<R>("getGlyphOutline", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getGlyphPixelBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGlyphPixelBounds")] != -1);
		return call<R>("getGlyphPixelBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Point2D, typename... Args>
	auto getGlyphPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGlyphPosition")] != -1);
		return call<R>("getGlyphPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat *, typename... Args>
	auto getGlyphPositions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGlyphPositions")] != -1);
		return call<R>("getGlyphPositions", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::AffineTransform, typename... Args>
	auto getGlyphTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGlyphTransform")] != -1);
		return call<R>("getGlyphTransform", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::AffineTransform *, typename... Args>
	auto getGlyphTransforms(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGlyphTransforms")] != -1);
		return call<R>("getGlyphTransforms", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Shape, typename... Args>
	auto getGlyphVisualBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGlyphVisualBounds")] != -1);
		return call<R>("getGlyphVisualBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLayoutFlags(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLayoutFlags")] != -1);
		return call<R>("getLayoutFlags", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Rectangle2D, typename... Args>
	auto getLogicalBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLogicalBounds")] != -1);
		return call<R>("getLogicalBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumGlyphs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNumGlyphs")] != -1);
		return call<R>("getNumGlyphs", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Shape, typename... Args>
	auto getOutline(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOutline")] != -1);
		return call<R>("getOutline", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getPixelBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPixelBounds")] != -1);
		return call<R>("getPixelBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::font::StandardGlyphVector, typename... Args>
	static auto getStandardGV(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStandardGV")] != -1);
		return scall<R>("getStandardGV", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Rectangle2D, typename... Args>
	auto getVisualBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVisualBounds")] != -1);
		return call<R>("getVisualBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto initGlyphVector(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initGlyphVector")] != -1);
		return call<R>("initGlyphVector", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto performDefaultLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("performDefaultLayout")] != -1);
		return call<R>("performDefaultLayout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto pixellate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("pixellate")] != -1);
		return call<R>("pixellate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGlyphPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setGlyphPosition")] != -1);
		return call<R>("setGlyphPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGlyphPositions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setGlyphPositions")] != -1);
		return call<R>("setGlyphPositions", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGlyphTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setGlyphTransform")] != -1);
		return call<R>("setGlyphTransform", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGlyphTransforms(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setGlyphTransforms")] != -1);
		return call<R>("setGlyphTransforms", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
