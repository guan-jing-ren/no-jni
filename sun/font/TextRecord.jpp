#ifndef sun_font_TextRecord_HPP
#define sun_font_TextRecord_HPP

#include "../../jfwd_decl.hpp"

class ::sun::font::TextRecord : public jObject<::sun::font::TextRecord, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_font / "TextRecord";

	constexpr static Enume field_signatures{
		jField<::jint>("limit"), //
		jField<::jint>("max"), //
		jField<::jint>("min"), //
		jField<::jint>("start"), //
		jField<::jchar *>("text"), //
	};

	template<typename F = ::jint>
	auto limit() const {
		static_assert(field_signatures[jField<F>("limit")] != -1);
		return at<F>("limit");
	}

	template<typename F = ::jint>
	auto max() const {
		static_assert(field_signatures[jField<F>("max")] != -1);
		return at<F>("max");
	}

	template<typename F = ::jint>
	auto min() const {
		static_assert(field_signatures[jField<F>("min")] != -1);
		return at<F>("min");
	}

	template<typename F = ::jint>
	auto start() const {
		static_assert(field_signatures[jField<F>("start")] != -1);
		return at<F>("start");
	}

	template<typename F = ::jchar *>
	auto text() const {
		static_assert(field_signatures[jField<F>("text")] != -1);
		return at<F>("text");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::jchar *, ::jint, ::jint, ::jint, ::jint)>("init"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto init(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("init")] != -1);
		return call<R>("init", std::forward<Args>(args)...);
	}

};

#endif
