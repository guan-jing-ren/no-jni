#ifndef sun_font_GraphicComponent_HPP
#define sun_font_GraphicComponent_HPP

#include "../../jfwd_decl.hpp"

class ::sun::font::GraphicComponent : public jObject<::sun::font::GraphicComponent, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_font / "GraphicComponent";

	constexpr static Enume field_signatures{
		jField<::jfloat>("GRAPHIC_LEADING"), //
	};

	template<typename F = ::jfloat>
	static auto GRAPHIC_LEADING() {
		static_assert(field_signatures[jField<F>("GRAPHIC_LEADING")] != -1);
		return sat<F>("GRAPHIC_LEADING");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::font::GraphicAttribute, ::sun::font::Decoration, ::jint *, ::jbyte *, ::jint, ::jint, ::java::awt::geom::AffineTransform)>(), //
		jMethod<::sun::font::TextLineComponent(::jfloat *, ::jint, ::jboolean *)>("applyJustificationDeltas"), //
		jMethod<::jboolean(::jint)>("caretAtOffsetIsValid"), //
		jMethod<::sun::font::CoreMetrics(::java::awt::font::GraphicAttribute)>("createCoreMetrics"), //
		jMethod<::jvoid(::java::awt::Graphics2D, ::jfloat, ::jfloat)>("draw"), //
		jMethod<::jfloat()>("getAdvance"), //
		jMethod<::jfloat(::jint, ::jint)>("getAdvanceBetween"), //
		jMethod<::java::awt::geom::AffineTransform()>("getBaselineTransform"), //
		jMethod<::jfloat(::jint)>("getCharAdvance"), //
		jMethod<::java::awt::geom::Rectangle2D(::jint)>("getCharVisualBounds"), //
		jMethod<::jfloat(::jint)>("getCharX"), //
		jMethod<::jfloat(::jint)>("getCharY"), //
		jMethod<::sun::font::CoreMetrics()>("getCoreMetrics"), //
		jMethod<::jfloat()>("getItalicAngle"), //
		jMethod<::java::awt::geom::Rectangle2D()>("getItalicBounds"), //
		jMethod<::jvoid(::java::awt::font::GlyphJustificationInfo *, ::jint, ::jint, ::jint)>("getJustificationInfos"), //
		jMethod<::jint(::jint, ::jfloat)>("getLineBreakIndex"), //
		jMethod<::java::awt::geom::Rectangle2D()>("getLogicalBounds"), //
		jMethod<::jint()>("getNumCharacters"), //
		jMethod<::jint()>("getNumJustificationInfos"), //
		jMethod<::java::awt::Shape(::jfloat, ::jfloat)>("getOutline"), //
		jMethod<::java::awt::Rectangle(::java::awt::font::FontRenderContext, ::jfloat, ::jfloat)>("getPixelBounds"), //
		jMethod<::sun::font::TextLineComponent(::jint, ::jint, ::jint)>("getSubset"), //
		jMethod<::java::awt::geom::Rectangle2D()>("getVisualBounds"), //
		jMethod<::jvoid(::java::awt::Graphics2D, ::jfloat, ::jfloat)>("handleDraw"), //
		jMethod<::java::awt::geom::Rectangle2D(::jint)>("handleGetCharVisualBounds"), //
		jMethod<::java::awt::Shape(::jfloat, ::jfloat)>("handleGetOutline"), //
		jMethod<::java::awt::geom::Rectangle2D()>("handleGetVisualBounds"), //
		jMethod<::jboolean()>("isSimple"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::sun::font::TextLineComponent, typename... Args>
	auto applyJustificationDeltas(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("applyJustificationDeltas")] != -1);
		return call<R>("applyJustificationDeltas", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto caretAtOffsetIsValid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("caretAtOffsetIsValid")] != -1);
		return call<R>("caretAtOffsetIsValid", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::font::CoreMetrics, typename... Args>
	static auto createCoreMetrics(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createCoreMetrics")] != -1);
		return scall<R>("createCoreMetrics", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto draw(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("draw")] != -1);
		return call<R>("draw", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getAdvance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAdvance")] != -1);
		return call<R>("getAdvance", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getAdvanceBetween(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAdvanceBetween")] != -1);
		return call<R>("getAdvanceBetween", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::AffineTransform, typename... Args>
	auto getBaselineTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBaselineTransform")] != -1);
		return call<R>("getBaselineTransform", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getCharAdvance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCharAdvance")] != -1);
		return call<R>("getCharAdvance", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Rectangle2D, typename... Args>
	auto getCharVisualBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCharVisualBounds")] != -1);
		return call<R>("getCharVisualBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getCharX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCharX")] != -1);
		return call<R>("getCharX", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getCharY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCharY")] != -1);
		return call<R>("getCharY", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::font::CoreMetrics, typename... Args>
	auto getCoreMetrics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCoreMetrics")] != -1);
		return call<R>("getCoreMetrics", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getItalicAngle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItalicAngle")] != -1);
		return call<R>("getItalicAngle", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Rectangle2D, typename... Args>
	auto getItalicBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItalicBounds")] != -1);
		return call<R>("getItalicBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getJustificationInfos(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJustificationInfos")] != -1);
		return call<R>("getJustificationInfos", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLineBreakIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineBreakIndex")] != -1);
		return call<R>("getLineBreakIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Rectangle2D, typename... Args>
	auto getLogicalBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLogicalBounds")] != -1);
		return call<R>("getLogicalBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumCharacters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNumCharacters")] != -1);
		return call<R>("getNumCharacters", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumJustificationInfos(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNumJustificationInfos")] != -1);
		return call<R>("getNumJustificationInfos", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Shape, typename... Args>
	auto getOutline(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOutline")] != -1);
		return call<R>("getOutline", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getPixelBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPixelBounds")] != -1);
		return call<R>("getPixelBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::font::TextLineComponent, typename... Args>
	auto getSubset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSubset")] != -1);
		return call<R>("getSubset", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Rectangle2D, typename... Args>
	auto getVisualBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVisualBounds")] != -1);
		return call<R>("getVisualBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleDraw(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleDraw")] != -1);
		return call<R>("handleDraw", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Rectangle2D, typename... Args>
	auto handleGetCharVisualBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleGetCharVisualBounds")] != -1);
		return call<R>("handleGetCharVisualBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Shape, typename... Args>
	auto handleGetOutline(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleGetOutline")] != -1);
		return call<R>("handleGetOutline", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Rectangle2D, typename... Args>
	auto handleGetVisualBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleGetVisualBounds")] != -1);
		return call<R>("handleGetVisualBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSimple(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSimple")] != -1);
		return call<R>("isSimple", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
