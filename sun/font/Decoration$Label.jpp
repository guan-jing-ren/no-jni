#ifndef sun_font_Decoration$Label_HPP
#define sun_font_Decoration$Label_HPP

#include "../../jfwd_decl.hpp"

class ::sun::font::Decoration$Label : public jObject<::sun::font::Decoration$Label, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_font / "Decoration$Label";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::sun::font::CoreMetrics()>("getCoreMetrics"), //
		jMethod<::java::awt::geom::Rectangle2D()>("getLogicalBounds"), //
		jMethod<::jvoid(::java::awt::Graphics2D, ::jfloat, ::jfloat)>("handleDraw"), //
		jMethod<::java::awt::geom::Rectangle2D(::jint)>("handleGetCharVisualBounds"), //
		jMethod<::java::awt::Shape(::jfloat, ::jfloat)>("handleGetOutline"), //
		jMethod<::java::awt::geom::Rectangle2D()>("handleGetVisualBounds"), //
	};

	template<typename R = ::sun::font::CoreMetrics, typename... Args>
	auto getCoreMetrics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCoreMetrics")] != -1);
		return call<R>("getCoreMetrics", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Rectangle2D, typename... Args>
	auto getLogicalBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLogicalBounds")] != -1);
		return call<R>("getLogicalBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleDraw(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleDraw")] != -1);
		return call<R>("handleDraw", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Rectangle2D, typename... Args>
	auto handleGetCharVisualBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleGetCharVisualBounds")] != -1);
		return call<R>("handleGetCharVisualBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Shape, typename... Args>
	auto handleGetOutline(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleGetOutline")] != -1);
		return call<R>("handleGetOutline", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::Rectangle2D, typename... Args>
	auto handleGetVisualBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleGetVisualBounds")] != -1);
		return call<R>("handleGetVisualBounds", std::forward<Args>(args)...);
	}

};

#endif
