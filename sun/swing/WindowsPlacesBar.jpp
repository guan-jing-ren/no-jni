#ifndef sun_swing_WindowsPlacesBar_HPP
#define sun_swing_WindowsPlacesBar_HPP

#include "../../jfwd_decl.hpp"

class ::sun::swing::WindowsPlacesBar : public jObject<::sun::swing::WindowsPlacesBar, ::javax::swing::JToolBar> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_swing / "WindowsPlacesBar";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::JFileChooser, ::jboolean)>(), //
		jMethod<::jvoid(::java::awt::event::ActionEvent)>("actionPerformed"), //
		jMethod<::java::awt::Dimension()>("getPreferredSize"), //
		jMethod<::jvoid(::java::beans::PropertyChangeEvent)>("propertyChange"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto actionPerformed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("actionPerformed")] != -1);
		return call<R>("actionPerformed", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreferredSize")] != -1);
		return call<R>("getPreferredSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto propertyChange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("propertyChange")] != -1);
		return call<R>("propertyChange", std::forward<Args>(args)...);
	}

};

#endif
