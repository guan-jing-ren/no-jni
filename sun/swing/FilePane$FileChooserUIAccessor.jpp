#ifndef sun_swing_FilePane$FileChooserUIAccessor_HPP
#define sun_swing_FilePane$FileChooserUIAccessor_HPP

#include "../../jfwd_decl.hpp"

class ::sun::swing::FilePane$FileChooserUIAccessor : public jObject<::sun::swing::FilePane$FileChooserUIAccessor, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_swing / "FilePane$FileChooserUIAccessor";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::javax::swing::JPanel()>("createDetailsView"), //
		jMethod<::java::awt::event::MouseListener(::javax::swing::JList)>("createDoubleClickListener"), //
		jMethod<::javax::swing::JPanel()>("createList"), //
		jMethod<::javax::swing::event::ListSelectionListener()>("createListSelectionListener"), //
		jMethod<::javax::swing::Action()>("getApproveSelectionAction"), //
		jMethod<::javax::swing::Action()>("getChangeToParentDirectoryAction"), //
		jMethod<::java::io::File()>("getDirectory"), //
		jMethod<::javax::swing::JFileChooser()>("getFileChooser"), //
		jMethod<::javax::swing::plaf::basic::BasicDirectoryModel()>("getModel"), //
		jMethod<::javax::swing::Action()>("getNewFolderAction"), //
		jMethod<::jboolean()>("isDirectorySelected"), //
	};

	template<typename R = ::javax::swing::JPanel, typename... Args>
	auto createDetailsView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createDetailsView")] != -1);
		return call<R>("createDetailsView", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::MouseListener, typename... Args>
	auto createDoubleClickListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createDoubleClickListener")] != -1);
		return call<R>("createDoubleClickListener", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JPanel, typename... Args>
	auto createList(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createList")] != -1);
		return call<R>("createList", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::event::ListSelectionListener, typename... Args>
	auto createListSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createListSelectionListener")] != -1);
		return call<R>("createListSelectionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Action, typename... Args>
	auto getApproveSelectionAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getApproveSelectionAction")] != -1);
		return call<R>("getApproveSelectionAction", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Action, typename... Args>
	auto getChangeToParentDirectoryAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChangeToParentDirectoryAction")] != -1);
		return call<R>("getChangeToParentDirectoryAction", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::File, typename... Args>
	auto getDirectory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDirectory")] != -1);
		return call<R>("getDirectory", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JFileChooser, typename... Args>
	auto getFileChooser(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFileChooser")] != -1);
		return call<R>("getFileChooser", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::basic::BasicDirectoryModel, typename... Args>
	auto getModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getModel")] != -1);
		return call<R>("getModel", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Action, typename... Args>
	auto getNewFolderAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNewFolderAction")] != -1);
		return call<R>("getNewFolderAction", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDirectorySelected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDirectorySelected")] != -1);
		return call<R>("isDirectorySelected", std::forward<Args>(args)...);
	}

};

#endif
