#ifndef sun_swing_DefaultLookup_HPP
#define sun_swing_DefaultLookup_HPP

#include "../../jfwd_decl.hpp"

class ::sun::swing::DefaultLookup : public jObject<::sun::swing::DefaultLookup, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_swing / "DefaultLookup";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::Object(::javax::swing::JComponent, ::javax::swing::plaf::ComponentUI, ::java::lang::String)>("get"), //
		jMethod<::jboolean(::javax::swing::JComponent, ::javax::swing::plaf::ComponentUI, ::java::lang::String)>("getBoolean"), //
		jMethod<::jboolean(::javax::swing::JComponent, ::javax::swing::plaf::ComponentUI, ::java::lang::String, ::jboolean)>("getBoolean"), //
		jMethod<::javax::swing::border::Border(::javax::swing::JComponent, ::javax::swing::plaf::ComponentUI, ::java::lang::String)>("getBorder"), //
		jMethod<::javax::swing::border::Border(::javax::swing::JComponent, ::javax::swing::plaf::ComponentUI, ::java::lang::String, ::javax::swing::border::Border)>("getBorder"), //
		jMethod<::java::awt::Color(::javax::swing::JComponent, ::javax::swing::plaf::ComponentUI, ::java::lang::String)>("getColor"), //
		jMethod<::java::awt::Color(::javax::swing::JComponent, ::javax::swing::plaf::ComponentUI, ::java::lang::String, ::java::awt::Color)>("getColor"), //
		jMethod<::java::lang::Object(::javax::swing::JComponent, ::javax::swing::plaf::ComponentUI, ::java::lang::String)>("getDefault"), //
		jMethod<::javax::swing::Icon(::javax::swing::JComponent, ::javax::swing::plaf::ComponentUI, ::java::lang::String)>("getIcon"), //
		jMethod<::javax::swing::Icon(::javax::swing::JComponent, ::javax::swing::plaf::ComponentUI, ::java::lang::String, ::javax::swing::Icon)>("getIcon"), //
		jMethod<::java::awt::Insets(::javax::swing::JComponent, ::javax::swing::plaf::ComponentUI, ::java::lang::String)>("getInsets"), //
		jMethod<::java::awt::Insets(::javax::swing::JComponent, ::javax::swing::plaf::ComponentUI, ::java::lang::String, ::java::awt::Insets)>("getInsets"), //
		jMethod<::jint(::javax::swing::JComponent, ::javax::swing::plaf::ComponentUI, ::java::lang::String)>("getInt"), //
		jMethod<::jint(::javax::swing::JComponent, ::javax::swing::plaf::ComponentUI, ::java::lang::String, ::jint)>("getInt"), //
		jMethod<::jvoid(::sun::swing::DefaultLookup)>("setDefaultLookup"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	static auto get(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return scall<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto getBoolean(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBoolean")] != -1);
		return scall<R>("getBoolean", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::border::Border, typename... Args>
	static auto getBorder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorder")] != -1);
		return scall<R>("getBorder", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	static auto getColor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColor")] != -1);
		return scall<R>("getColor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getDefault(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefault")] != -1);
		return call<R>("getDefault", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	static auto getIcon(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIcon")] != -1);
		return scall<R>("getIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Insets, typename... Args>
	static auto getInsets(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInsets")] != -1);
		return scall<R>("getInsets", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getInt(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInt")] != -1);
		return scall<R>("getInt", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setDefaultLookup(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDefaultLookup")] != -1);
		return scall<R>("setDefaultLookup", std::forward<Args>(args)...);
	}

};

#endif
