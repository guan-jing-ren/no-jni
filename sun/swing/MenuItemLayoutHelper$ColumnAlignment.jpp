#ifndef sun_swing_MenuItemLayoutHelper$ColumnAlignment_HPP
#define sun_swing_MenuItemLayoutHelper$ColumnAlignment_HPP

#include "../../jfwd_decl.hpp"

class ::sun::swing::MenuItemLayoutHelper$ColumnAlignment : public jObject<::sun::swing::MenuItemLayoutHelper$ColumnAlignment, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_swing / "MenuItemLayoutHelper$ColumnAlignment";

	constexpr static Enume field_signatures{
		jField<::sun::swing::MenuItemLayoutHelper$ColumnAlignment>("LEFT_ALIGNMENT"), //
		jField<::sun::swing::MenuItemLayoutHelper$ColumnAlignment>("RIGHT_ALIGNMENT"), //
	};

	template<typename F = ::sun::swing::MenuItemLayoutHelper$ColumnAlignment>
	static auto LEFT_ALIGNMENT() {
		static_assert(field_signatures[jField<F>("LEFT_ALIGNMENT")] != -1);
		return sat<F>("LEFT_ALIGNMENT");
	}

	template<typename F = ::sun::swing::MenuItemLayoutHelper$ColumnAlignment>
	static auto RIGHT_ALIGNMENT() {
		static_assert(field_signatures[jField<F>("RIGHT_ALIGNMENT")] != -1);
		return sat<F>("RIGHT_ALIGNMENT");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint)>(), //
		jMethod<::jint()>("getAccAlignment"), //
		jMethod<::jint()>("getArrowAlignment"), //
		jMethod<::jint()>("getCheckAlignment"), //
		jMethod<::jint()>("getIconAlignment"), //
		jMethod<::jint()>("getTextAlignment"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getAccAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccAlignment")] != -1);
		return call<R>("getAccAlignment", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getArrowAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getArrowAlignment")] != -1);
		return call<R>("getArrowAlignment", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCheckAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCheckAlignment")] != -1);
		return call<R>("getCheckAlignment", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getIconAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIconAlignment")] != -1);
		return call<R>("getIconAlignment", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTextAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextAlignment")] != -1);
		return call<R>("getTextAlignment", std::forward<Args>(args)...);
	}

};

#endif
