#ifndef sun_swing_FilePane_HPP
#define sun_swing_FilePane_HPP

#include "../../jfwd_decl.hpp"

class ::sun::swing::FilePane : public jObject<::sun::swing::FilePane, ::javax::swing::JPanel> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_swing / "FilePane";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("ACTION_APPROVE_SELECTION"), //
		jField<::java::lang::String>("ACTION_CANCEL"), //
		jField<::java::lang::String>("ACTION_CHANGE_TO_PARENT_DIRECTORY"), //
		jField<::java::lang::String>("ACTION_EDIT_FILE_NAME"), //
		jField<::java::lang::String>("ACTION_NEW_FOLDER"), //
		jField<::java::lang::String>("ACTION_REFRESH"), //
		jField<::java::lang::String>("ACTION_VIEW_DETAILS"), //
		jField<::java::lang::String>("ACTION_VIEW_LIST"), //
		jField<::jint>("VIEWTYPE_DETAILS"), //
		jField<::jint>("VIEWTYPE_LIST"), //
	};

	template<typename F = ::java::lang::String>
	static auto ACTION_APPROVE_SELECTION() {
		static_assert(field_signatures[jField<F>("ACTION_APPROVE_SELECTION")] != -1);
		return sat<F>("ACTION_APPROVE_SELECTION");
	}

	template<typename F = ::java::lang::String>
	static auto ACTION_CANCEL() {
		static_assert(field_signatures[jField<F>("ACTION_CANCEL")] != -1);
		return sat<F>("ACTION_CANCEL");
	}

	template<typename F = ::java::lang::String>
	static auto ACTION_CHANGE_TO_PARENT_DIRECTORY() {
		static_assert(field_signatures[jField<F>("ACTION_CHANGE_TO_PARENT_DIRECTORY")] != -1);
		return sat<F>("ACTION_CHANGE_TO_PARENT_DIRECTORY");
	}

	template<typename F = ::java::lang::String>
	static auto ACTION_EDIT_FILE_NAME() {
		static_assert(field_signatures[jField<F>("ACTION_EDIT_FILE_NAME")] != -1);
		return sat<F>("ACTION_EDIT_FILE_NAME");
	}

	template<typename F = ::java::lang::String>
	static auto ACTION_NEW_FOLDER() {
		static_assert(field_signatures[jField<F>("ACTION_NEW_FOLDER")] != -1);
		return sat<F>("ACTION_NEW_FOLDER");
	}

	template<typename F = ::java::lang::String>
	static auto ACTION_REFRESH() {
		static_assert(field_signatures[jField<F>("ACTION_REFRESH")] != -1);
		return sat<F>("ACTION_REFRESH");
	}

	template<typename F = ::java::lang::String>
	static auto ACTION_VIEW_DETAILS() {
		static_assert(field_signatures[jField<F>("ACTION_VIEW_DETAILS")] != -1);
		return sat<F>("ACTION_VIEW_DETAILS");
	}

	template<typename F = ::java::lang::String>
	static auto ACTION_VIEW_LIST() {
		static_assert(field_signatures[jField<F>("ACTION_VIEW_LIST")] != -1);
		return sat<F>("ACTION_VIEW_LIST");
	}

	template<typename F = ::jint>
	static auto VIEWTYPE_DETAILS() {
		static_assert(field_signatures[jField<F>("VIEWTYPE_DETAILS")] != -1);
		return sat<F>("VIEWTYPE_DETAILS");
	}

	template<typename F = ::jint>
	static auto VIEWTYPE_LIST() {
		static_assert(field_signatures[jField<F>("VIEWTYPE_LIST")] != -1);
		return sat<F>("VIEWTYPE_LIST");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::sun::swing::FilePane$FileChooserUIAccessor)>(), //
		jMethod<::jvoid(::javax::swing::ActionMap, ::javax::swing::Action *)>("addActionsToMap"), //
		jMethod<::jboolean(::java::io::File)>("canWrite"), //
		jMethod<::jvoid()>("clearSelection"), //
		jMethod<::javax::swing::JPanel()>("createDetailsView"), //
		jMethod<::javax::swing::JPanel()>("createList"), //
		jMethod<::javax::swing::event::ListSelectionListener()>("createListSelectionListener"), //
		jMethod<::jvoid(::javax::swing::JFileChooser, ::java::io::File)>("ensureFileIsVisible"), //
		jMethod<::javax::swing::Action *()>("getActions"), //
		jMethod<::javax::swing::JPopupMenu()>("getComponentPopupMenu"), //
		jMethod<::javax::swing::Action()>("getNewFolderAction"), //
		jMethod<::javax::swing::JMenu()>("getViewMenu"), //
		jMethod<::jint()>("getViewType"), //
		jMethod<::javax::swing::Action(::jint)>("getViewTypeAction"), //
		jMethod<::jvoid(::java::beans::PropertyChangeEvent)>("propertyChange"), //
		jMethod<::jvoid()>("rescanCurrentDirectory"), //
		jMethod<::jvoid(::jint)>("setViewType"), //
		jMethod<::jvoid()>("uninstallUI"), //
		jMethod<::jboolean(::javax::swing::JFileChooser)>("usesShellFolder"), //
	};

	template<typename R = ::jvoid, typename... Args>
	static auto addActionsToMap(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addActionsToMap")] != -1);
		return scall<R>("addActionsToMap", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto canWrite(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canWrite")] != -1);
		return call<R>("canWrite", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clearSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clearSelection")] != -1);
		return call<R>("clearSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JPanel, typename... Args>
	auto createDetailsView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createDetailsView")] != -1);
		return call<R>("createDetailsView", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JPanel, typename... Args>
	auto createList(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createList")] != -1);
		return call<R>("createList", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::event::ListSelectionListener, typename... Args>
	auto createListSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createListSelectionListener")] != -1);
		return call<R>("createListSelectionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto ensureFileIsVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ensureFileIsVisible")] != -1);
		return call<R>("ensureFileIsVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Action *, typename... Args>
	auto getActions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getActions")] != -1);
		return call<R>("getActions", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JPopupMenu, typename... Args>
	auto getComponentPopupMenu(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getComponentPopupMenu")] != -1);
		return call<R>("getComponentPopupMenu", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Action, typename... Args>
	auto getNewFolderAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNewFolderAction")] != -1);
		return call<R>("getNewFolderAction", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JMenu, typename... Args>
	auto getViewMenu(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getViewMenu")] != -1);
		return call<R>("getViewMenu", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getViewType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getViewType")] != -1);
		return call<R>("getViewType", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Action, typename... Args>
	auto getViewTypeAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getViewTypeAction")] != -1);
		return call<R>("getViewTypeAction", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto propertyChange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("propertyChange")] != -1);
		return call<R>("propertyChange", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto rescanCurrentDirectory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rescanCurrentDirectory")] != -1);
		return call<R>("rescanCurrentDirectory", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setViewType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setViewType")] != -1);
		return call<R>("setViewType", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto uninstallUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("uninstallUI")] != -1);
		return call<R>("uninstallUI", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto usesShellFolder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("usesShellFolder")] != -1);
		return scall<R>("usesShellFolder", std::forward<Args>(args)...);
	}

};

#endif
