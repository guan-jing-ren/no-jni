#ifndef sun_swing_icon_SortArrowIcon_HPP
#define sun_swing_icon_SortArrowIcon_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::swing::icon::SortArrowIcon : public jObject<::sun::swing::icon::SortArrowIcon, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_swing_icon / "SortArrowIcon";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jboolean, ::java::awt::Color)>(), //
		jConstructor<::jvoid(::jboolean, ::java::lang::String)>(), //
		jMethod<::jint()>("getIconHeight"), //
		jMethod<::jint()>("getIconWidth"), //
		jMethod<::jvoid(::java::awt::Component, ::java::awt::Graphics, ::jint, ::jint)>("paintIcon"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getIconHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIconHeight")] != -1);
		return call<R>("getIconHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getIconWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIconWidth")] != -1);
		return call<R>("getIconWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paintIcon")] != -1);
		return call<R>("paintIcon", std::forward<Args>(args)...);
	}

};

#endif
