#ifndef sun_swing_SwingUtilities2$Section_HPP
#define sun_swing_SwingUtilities2$Section_HPP

#include "../../jfwd_decl.hpp"

class ::sun::swing::SwingUtilities2$Section : public jObject<::sun::swing::SwingUtilities2$Section, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_swing / "SwingUtilities2$Section";

	constexpr static Enume field_signatures{
		jField<::sun::swing::SwingUtilities2$Section>("LEADING"), //
		jField<::sun::swing::SwingUtilities2$Section>("MIDDLE"), //
		jField<::sun::swing::SwingUtilities2$Section>("TRAILING"), //
	};

	template<typename F = ::sun::swing::SwingUtilities2$Section>
	static auto LEADING() {
		static_assert(field_signatures[jField<F>("LEADING")] != -1);
		return sat<F>("LEADING");
	}

	template<typename F = ::sun::swing::SwingUtilities2$Section>
	static auto MIDDLE() {
		static_assert(field_signatures[jField<F>("MIDDLE")] != -1);
		return sat<F>("MIDDLE");
	}

	template<typename F = ::sun::swing::SwingUtilities2$Section>
	static auto TRAILING() {
		static_assert(field_signatures[jField<F>("TRAILING")] != -1);
		return sat<F>("TRAILING");
	}

	constexpr static Enume method_signatures{
		jMethod<::sun::swing::SwingUtilities2$Section(::java::lang::String)>("valueOf"), //
		jMethod<::sun::swing::SwingUtilities2$Section *()>("values"), //
	};

	template<typename R = ::sun::swing::SwingUtilities2$Section, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::swing::SwingUtilities2$Section *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
