#ifndef sun_swing_SwingAccessor_HPP
#define sun_swing_SwingAccessor_HPP

#include "../../jfwd_decl.hpp"

class ::sun::swing::SwingAccessor : public jObject<::sun::swing::SwingAccessor, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_swing / "SwingAccessor";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::sun::swing::SwingAccessor$JLightweightFrameAccessor()>("getJLightweightFrameAccessor"), //
		jMethod<::sun::swing::SwingAccessor$JTextComponentAccessor()>("getJTextComponentAccessor"), //
		jMethod<::sun::swing::SwingAccessor$RepaintManagerAccessor()>("getRepaintManagerAccessor"), //
		jMethod<::jvoid(::sun::swing::SwingAccessor$JLightweightFrameAccessor)>("setJLightweightFrameAccessor"), //
		jMethod<::jvoid(::sun::swing::SwingAccessor$JTextComponentAccessor)>("setJTextComponentAccessor"), //
		jMethod<::jvoid(::sun::swing::SwingAccessor$RepaintManagerAccessor)>("setRepaintManagerAccessor"), //
	};

	template<typename R = ::sun::swing::SwingAccessor$JLightweightFrameAccessor, typename... Args>
	static auto getJLightweightFrameAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJLightweightFrameAccessor")] != -1);
		return scall<R>("getJLightweightFrameAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::swing::SwingAccessor$JTextComponentAccessor, typename... Args>
	static auto getJTextComponentAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJTextComponentAccessor")] != -1);
		return scall<R>("getJTextComponentAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::swing::SwingAccessor$RepaintManagerAccessor, typename... Args>
	static auto getRepaintManagerAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRepaintManagerAccessor")] != -1);
		return scall<R>("getRepaintManagerAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setJLightweightFrameAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setJLightweightFrameAccessor")] != -1);
		return scall<R>("setJLightweightFrameAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setJTextComponentAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setJTextComponentAccessor")] != -1);
		return scall<R>("setJTextComponentAccessor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setRepaintManagerAccessor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRepaintManagerAccessor")] != -1);
		return scall<R>("setRepaintManagerAccessor", std::forward<Args>(args)...);
	}

};

#endif
