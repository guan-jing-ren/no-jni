#ifndef sun_swing_SwingAccessor$RepaintManagerAccessor_HPP
#define sun_swing_SwingAccessor$RepaintManagerAccessor_HPP

#include "../../jfwd_decl.hpp"

class ::sun::swing::SwingAccessor$RepaintManagerAccessor : public jObject<::sun::swing::SwingAccessor$RepaintManagerAccessor, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_swing / "SwingAccessor$RepaintManagerAccessor";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::javax::swing::RepaintManager, ::sun::swing::SwingUtilities2$RepaintListener)>("addRepaintListener"), //
		jMethod<::jvoid(::javax::swing::RepaintManager, ::sun::swing::SwingUtilities2$RepaintListener)>("removeRepaintListener"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addRepaintListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addRepaintListener")] != -1);
		return call<R>("addRepaintListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeRepaintListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeRepaintListener")] != -1);
		return call<R>("removeRepaintListener", std::forward<Args>(args)...);
	}

};

#endif
