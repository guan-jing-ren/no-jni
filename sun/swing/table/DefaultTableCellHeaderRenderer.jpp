#ifndef sun_swing_table_DefaultTableCellHeaderRenderer_HPP
#define sun_swing_table_DefaultTableCellHeaderRenderer_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::swing::table::DefaultTableCellHeaderRenderer : public jObject<::sun::swing::table::DefaultTableCellHeaderRenderer, ::javax::swing::table::DefaultTableCellRenderer> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_swing_table / "DefaultTableCellHeaderRenderer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::swing::SortOrder(::javax::swing::JTable, ::jint)>("getColumnSortOrder"), //
		jMethod<::java::awt::Component(::javax::swing::JTable, ::java::lang::Object, ::jboolean, ::jboolean, ::jint, ::jint)>("getTableCellRendererComponent"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paintComponent"), //
		jMethod<::jvoid(::jint)>("setHorizontalTextPosition"), //
	};

	template<typename R = ::javax::swing::SortOrder, typename... Args>
	static auto getColumnSortOrder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumnSortOrder")] != -1);
		return scall<R>("getColumnSortOrder", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getTableCellRendererComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTableCellRendererComponent")] != -1);
		return call<R>("getTableCellRendererComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paintComponent")] != -1);
		return call<R>("paintComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHorizontalTextPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHorizontalTextPosition")] != -1);
		return call<R>("setHorizontalTextPosition", std::forward<Args>(args)...);
	}

};

#endif
