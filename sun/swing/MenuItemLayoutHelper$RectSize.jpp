#ifndef sun_swing_MenuItemLayoutHelper$RectSize_HPP
#define sun_swing_MenuItemLayoutHelper$RectSize_HPP

#include "../../jfwd_decl.hpp"

class ::sun::swing::MenuItemLayoutHelper$RectSize : public jObject<::sun::swing::MenuItemLayoutHelper$RectSize, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_swing / "MenuItemLayoutHelper$RectSize";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint, ::jint, ::jint, ::jint)>(), //
		jMethod<::jint()>("getHeight"), //
		jMethod<::jint()>("getMaxWidth"), //
		jMethod<::jint()>("getOrigWidth"), //
		jMethod<::jint()>("getWidth"), //
		jMethod<::jvoid(::jint)>("setHeight"), //
		jMethod<::jvoid(::jint)>("setMaxWidth"), //
		jMethod<::jvoid(::jint)>("setOrigWidth"), //
		jMethod<::jvoid(::jint)>("setWidth"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeight")] != -1);
		return call<R>("getHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaxWidth")] != -1);
		return call<R>("getMaxWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getOrigWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOrigWidth")] != -1);
		return call<R>("getOrigWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHeight")] != -1);
		return call<R>("setHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaxWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMaxWidth")] != -1);
		return call<R>("setMaxWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOrigWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOrigWidth")] != -1);
		return call<R>("setOrigWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setWidth")] != -1);
		return call<R>("setWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
