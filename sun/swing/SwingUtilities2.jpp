#ifndef sun_swing_SwingUtilities2_HPP
#define sun_swing_SwingUtilities2_HPP

#include "../../jfwd_decl.hpp"

class ::sun::swing::SwingUtilities2 : public jObject<::sun::swing::SwingUtilities2, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_swing / "SwingUtilities2";

	constexpr static Enume field_signatures{
		jField<::java::lang::Object>("AA_TEXT_PROPERTY_KEY"), //
		jField<::sun::swing::StringUIClientPropertyKey>("BASICMENUITEMUI_MAX_TEXT_OFFSET"), //
		jField<::java::lang::Object>("COMPONENT_UI_PROPERTY_KEY"), //
		jField<::java::awt::font::FontRenderContext>("DEFAULT_FRC"), //
		jField<::java::lang::String>("IMPLIED_CR"), //
		jField<::java::lang::Object>("LAF_STATE_KEY"), //
		jField<::java::lang::Object>("MENU_SELECTION_MANAGER_LISTENER_KEY"), //
	};

	template<typename F = ::java::lang::Object>
	static auto AA_TEXT_PROPERTY_KEY() {
		static_assert(field_signatures[jField<F>("AA_TEXT_PROPERTY_KEY")] != -1);
		return sat<F>("AA_TEXT_PROPERTY_KEY");
	}

	template<typename F = ::sun::swing::StringUIClientPropertyKey>
	static auto BASICMENUITEMUI_MAX_TEXT_OFFSET() {
		static_assert(field_signatures[jField<F>("BASICMENUITEMUI_MAX_TEXT_OFFSET")] != -1);
		return sat<F>("BASICMENUITEMUI_MAX_TEXT_OFFSET");
	}

	template<typename F = ::java::lang::Object>
	static auto COMPONENT_UI_PROPERTY_KEY() {
		static_assert(field_signatures[jField<F>("COMPONENT_UI_PROPERTY_KEY")] != -1);
		return sat<F>("COMPONENT_UI_PROPERTY_KEY");
	}

	template<typename F = ::java::awt::font::FontRenderContext>
	static auto DEFAULT_FRC() {
		static_assert(field_signatures[jField<F>("DEFAULT_FRC")] != -1);
		return sat<F>("DEFAULT_FRC");
	}

	template<typename F = ::java::lang::String>
	static auto IMPLIED_CR() {
		static_assert(field_signatures[jField<F>("IMPLIED_CR")] != -1);
		return sat<F>("IMPLIED_CR");
	}

	template<typename F = ::java::lang::Object>
	static auto LAF_STATE_KEY() {
		static_assert(field_signatures[jField<F>("LAF_STATE_KEY")] != -1);
		return sat<F>("LAF_STATE_KEY");
	}

	template<typename F = ::java::lang::Object>
	static auto MENU_SELECTION_MANAGER_LISTENER_KEY() {
		static_assert(field_signatures[jField<F>("MENU_SELECTION_MANAGER_LISTENER_KEY")] != -1);
		return sat<F>("MENU_SELECTION_MANAGER_LISTENER_KEY");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::javax::swing::JComponent)>("adjustFocus"), //
		jMethod<::jboolean()>("canAccessSystemClipboard"), //
		jMethod<::jboolean()>("canCurrentEventAccessSystemClipboard"), //
		jMethod<::jboolean(::java::awt::AWTEvent)>("canEventAccessSystemClipboard"), //
		jMethod<::jvoid(::jint)>("checkAccess"), //
		jMethod<::java::lang::String(::javax::swing::JComponent, ::java::awt::FontMetrics, ::java::lang::String, ::jint)>("clipString"), //
		jMethod<::java::lang::String(::javax::swing::JComponent, ::java::awt::FontMetrics, ::java::lang::String, ::jint)>("clipStringIfNecessary"), //
		jMethod<::java::awt::Component(::java::awt::Component)>("compositeRequestFocus"), //
		jMethod<::jint(::javax::swing::table::TableColumnModel, ::jint)>("convertColumnIndexToModel"), //
		jMethod<::jint(::javax::swing::table::TableColumnModel, ::jint)>("convertColumnIndexToView"), //
		jMethod<::java::lang::String(::java::awt::Font, ::java::awt::Color)>("displayPropertiesToCSS"), //
		jMethod<::jint(::javax::swing::JComponent, ::java::awt::Graphics, ::jchar *, ::jint, ::jint, ::jint, ::jint)>("drawChars"), //
		jMethod<::jvoid(::java::awt::Graphics, ::jint, ::jint, ::jint)>("drawHLine"), //
		jMethod<::jvoid(::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("drawRect"), //
		jMethod<::jvoid(::javax::swing::JComponent, ::java::awt::Graphics, ::java::lang::String, ::jint, ::jint)>("drawString"), //
		jMethod<::jfloat(::javax::swing::JComponent, ::java::awt::Graphics, ::java::text::AttributedCharacterIterator, ::jint, ::jint)>("drawString"), //
		jMethod<::jvoid(::javax::swing::JComponent, ::java::awt::Graphics, ::java::lang::String, ::jint, ::jint, ::jint)>("drawStringUnderlineCharAt"), //
		jMethod<::sun::swing::SwingUtilities2$AATextInfo(::javax::swing::JComponent)>("drawTextAntialiased"), //
		jMethod<::jvoid(::java::awt::Graphics, ::jint, ::jint, ::jint)>("drawVLine"), //
		jMethod<::jint(::javax::swing::text::JTextComponent, ::java::awt::event::MouseEvent)>("getAdjustedClickCount"), //
		jMethod<::java::awt::FontMetrics(::javax::swing::JComponent, ::java::awt::Font)>("getFontMetrics"), //
		jMethod<::java::awt::FontMetrics(::javax::swing::JComponent, ::java::awt::Graphics)>("getFontMetrics"), //
		jMethod<::java::awt::FontMetrics(::javax::swing::JComponent, ::java::awt::Graphics, ::java::awt::Font)>("getFontMetrics"), //
		jMethod<::java::awt::font::FontRenderContext(::java::awt::Component)>("getFontRenderContext"), //
		jMethod<::java::awt::Graphics2D(::java::awt::Graphics)>("getGraphics2D"), //
		jMethod<::jint(::javax::swing::JComponent, ::java::awt::FontMetrics, ::jchar)>("getLeftSideBearing"), //
		jMethod<::jint(::javax::swing::JComponent, ::java::awt::FontMetrics, ::java::lang::String)>("getLeftSideBearing"), //
		jMethod<::jint()>("getSystemMnemonicKeyMask"), //
		jMethod<::javax::swing::tree::TreePath(::javax::swing::event::TreeModelEvent, ::javax::swing::tree::TreeModel)>("getTreePath"), //
		jMethod<::jint(::java::lang::Object)>("getUIDefaultsInt"), //
		jMethod<::jint(::java::lang::Object, ::jint)>("getUIDefaultsInt"), //
		jMethod<::jint(::java::lang::Object, ::java::util::Locale)>("getUIDefaultsInt"), //
		jMethod<::jint(::java::lang::Object, ::java::util::Locale, ::jint)>("getUIDefaultsInt"), //
		jMethod<::jboolean(::jchar *, ::jint, ::jint)>("isComplexLayout"), //
		jMethod<::jboolean()>("isLocalDisplay"), //
		jMethod<::sun::swing::SwingUtilities2$Section(::java::awt::Rectangle, ::java::awt::Point, ::jboolean, ::jboolean)>("liesInHorizontal"), //
		jMethod<::sun::swing::SwingUtilities2$Section(::java::awt::Rectangle, ::java::awt::Point, ::jboolean)>("liesInVertical"), //
		jMethod<::jint(::javax::swing::JList, ::java::awt::Point)>("loc2IndexFileList"), //
		jMethod<::java::lang::Object(::java::lang::Class, ::java::lang::Class, ::java::lang::String)>("makeIcon"), //
		jMethod<::jboolean(::javax::swing::JTable, ::jint, ::jint, ::java::awt::Point)>("pointOutsidePrefSize"), //
		jMethod<::jvoid(::javax::swing::ListSelectionModel, ::jint, ::jint)>("setLeadAnchorWithoutSelection"), //
		jMethod<::jvoid(::java::awt::Component, ::jint)>("setSkipClickCount"), //
		jMethod<::jboolean(::java::awt::event::MouseEvent, ::javax::swing::JComponent)>("shouldIgnore"), //
		jMethod<::jint(::javax::swing::JComponent, ::java::awt::FontMetrics, ::java::lang::String)>("stringWidth"), //
		jMethod<::java::util::concurrent::Future(::java::lang::Runnable, ::java::lang::Object)>("submit"), //
		jMethod<::java::util::concurrent::Future(::java::util::concurrent::Callable)>("submit"), //
		jMethod<::jboolean(::java::awt::Component)>("tabbedPaneChangeFocusTo"), //
		jMethod<::jboolean(::javax::swing::text::Highlighter$Highlight, ::javax::swing::text::JTextComponent)>("useSelectedTextColor"), //
	};

	template<typename R = ::jvoid, typename... Args>
	static auto adjustFocus(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("adjustFocus")] != -1);
		return scall<R>("adjustFocus", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto canAccessSystemClipboard(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canAccessSystemClipboard")] != -1);
		return scall<R>("canAccessSystemClipboard", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto canCurrentEventAccessSystemClipboard(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canCurrentEventAccessSystemClipboard")] != -1);
		return scall<R>("canCurrentEventAccessSystemClipboard", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto canEventAccessSystemClipboard(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canEventAccessSystemClipboard")] != -1);
		return scall<R>("canEventAccessSystemClipboard", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto checkAccess(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkAccess")] != -1);
		return scall<R>("checkAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto clipString(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clipString")] != -1);
		return scall<R>("clipString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto clipStringIfNecessary(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clipStringIfNecessary")] != -1);
		return scall<R>("clipStringIfNecessary", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	static auto compositeRequestFocus(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compositeRequestFocus")] != -1);
		return scall<R>("compositeRequestFocus", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto convertColumnIndexToModel(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("convertColumnIndexToModel")] != -1);
		return scall<R>("convertColumnIndexToModel", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto convertColumnIndexToView(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("convertColumnIndexToView")] != -1);
		return scall<R>("convertColumnIndexToView", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto displayPropertiesToCSS(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("displayPropertiesToCSS")] != -1);
		return scall<R>("displayPropertiesToCSS", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto drawChars(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawChars")] != -1);
		return scall<R>("drawChars", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto drawHLine(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawHLine")] != -1);
		return scall<R>("drawHLine", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto drawRect(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawRect")] != -1);
		return scall<R>("drawRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto drawString(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawString")] != -1);
		return scall<R>("drawString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto drawStringUnderlineCharAt(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawStringUnderlineCharAt")] != -1);
		return scall<R>("drawStringUnderlineCharAt", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::swing::SwingUtilities2$AATextInfo, typename... Args>
	static auto drawTextAntialiased(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawTextAntialiased")] != -1);
		return scall<R>("drawTextAntialiased", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto drawVLine(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawVLine")] != -1);
		return scall<R>("drawVLine", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getAdjustedClickCount(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAdjustedClickCount")] != -1);
		return scall<R>("getAdjustedClickCount", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::FontMetrics, typename... Args>
	static auto getFontMetrics(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFontMetrics")] != -1);
		return scall<R>("getFontMetrics", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::font::FontRenderContext, typename... Args>
	static auto getFontRenderContext(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFontRenderContext")] != -1);
		return scall<R>("getFontRenderContext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Graphics2D, typename... Args>
	static auto getGraphics2D(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGraphics2D")] != -1);
		return scall<R>("getGraphics2D", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getLeftSideBearing(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLeftSideBearing")] != -1);
		return scall<R>("getLeftSideBearing", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getSystemMnemonicKeyMask(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSystemMnemonicKeyMask")] != -1);
		return scall<R>("getSystemMnemonicKeyMask", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreePath, typename... Args>
	static auto getTreePath(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTreePath")] != -1);
		return scall<R>("getTreePath", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getUIDefaultsInt(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUIDefaultsInt")] != -1);
		return scall<R>("getUIDefaultsInt", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isComplexLayout(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isComplexLayout")] != -1);
		return scall<R>("isComplexLayout", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isLocalDisplay(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLocalDisplay")] != -1);
		return scall<R>("isLocalDisplay", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::swing::SwingUtilities2$Section, typename... Args>
	static auto liesInHorizontal(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("liesInHorizontal")] != -1);
		return scall<R>("liesInHorizontal", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::swing::SwingUtilities2$Section, typename... Args>
	static auto liesInVertical(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("liesInVertical")] != -1);
		return scall<R>("liesInVertical", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto loc2IndexFileList(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("loc2IndexFileList")] != -1);
		return scall<R>("loc2IndexFileList", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	static auto makeIcon(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeIcon")] != -1);
		return scall<R>("makeIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto pointOutsidePrefSize(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("pointOutsidePrefSize")] != -1);
		return scall<R>("pointOutsidePrefSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setLeadAnchorWithoutSelection(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLeadAnchorWithoutSelection")] != -1);
		return scall<R>("setLeadAnchorWithoutSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setSkipClickCount(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSkipClickCount")] != -1);
		return scall<R>("setSkipClickCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto shouldIgnore(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shouldIgnore")] != -1);
		return scall<R>("shouldIgnore", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto stringWidth(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stringWidth")] != -1);
		return scall<R>("stringWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::concurrent::Future, typename... Args>
	static auto submit(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("submit")] != -1);
		return scall<R>("submit", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto tabbedPaneChangeFocusTo(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("tabbedPaneChangeFocusTo")] != -1);
		return scall<R>("tabbedPaneChangeFocusTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto useSelectedTextColor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("useSelectedTextColor")] != -1);
		return scall<R>("useSelectedTextColor", std::forward<Args>(args)...);
	}

};

#endif
