#ifndef sun_swing_SwingAccessor$JTextComponentAccessor_HPP
#define sun_swing_SwingAccessor$JTextComponentAccessor_HPP

#include "../../jfwd_decl.hpp"

class ::sun::swing::SwingAccessor$JTextComponentAccessor : public jObject<::sun::swing::SwingAccessor$JTextComponentAccessor, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_swing / "SwingAccessor$JTextComponentAccessor";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::javax::swing::TransferHandler$DropLocation(::javax::swing::text::JTextComponent, ::java::awt::Point)>("dropLocationForPoint"), //
		jMethod<::java::lang::Object(::javax::swing::text::JTextComponent, ::javax::swing::TransferHandler$DropLocation, ::java::lang::Object, ::jboolean)>("setDropLocation"), //
	};

	template<typename R = ::javax::swing::TransferHandler$DropLocation, typename... Args>
	auto dropLocationForPoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dropLocationForPoint")] != -1);
		return call<R>("dropLocationForPoint", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto setDropLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDropLocation")] != -1);
		return call<R>("setDropLocation", std::forward<Args>(args)...);
	}

};

#endif
