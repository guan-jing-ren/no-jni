#ifndef sun_swing_MenuItemLayoutHelper$LayoutResult_HPP
#define sun_swing_MenuItemLayoutHelper$LayoutResult_HPP

#include "../../jfwd_decl.hpp"

class ::sun::swing::MenuItemLayoutHelper$LayoutResult : public jObject<::sun::swing::MenuItemLayoutHelper$LayoutResult, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_swing / "MenuItemLayoutHelper$LayoutResult";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::awt::Rectangle, ::java::awt::Rectangle, ::java::awt::Rectangle, ::java::awt::Rectangle, ::java::awt::Rectangle, ::java::awt::Rectangle)>(), //
		jMethod<::java::awt::Rectangle()>("getAccRect"), //
		jMethod<::java::util::Map()>("getAllRects"), //
		jMethod<::java::awt::Rectangle()>("getArrowRect"), //
		jMethod<::java::awt::Rectangle()>("getCheckRect"), //
		jMethod<::java::awt::Rectangle()>("getIconRect"), //
		jMethod<::java::awt::Rectangle()>("getLabelRect"), //
		jMethod<::java::awt::Rectangle()>("getTextRect"), //
		jMethod<::jvoid(::java::awt::Rectangle)>("setAccRect"), //
		jMethod<::jvoid(::java::awt::Rectangle)>("setArrowRect"), //
		jMethod<::jvoid(::java::awt::Rectangle)>("setCheckRect"), //
		jMethod<::jvoid(::java::awt::Rectangle)>("setIconRect"), //
		jMethod<::jvoid(::java::awt::Rectangle)>("setLabelRect"), //
		jMethod<::jvoid(::java::awt::Rectangle)>("setTextRect"), //
	};

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getAccRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccRect")] != -1);
		return call<R>("getAccRect", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getAllRects(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAllRects")] != -1);
		return call<R>("getAllRects", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getArrowRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getArrowRect")] != -1);
		return call<R>("getArrowRect", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getCheckRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCheckRect")] != -1);
		return call<R>("getCheckRect", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getIconRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIconRect")] != -1);
		return call<R>("getIconRect", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getLabelRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLabelRect")] != -1);
		return call<R>("getLabelRect", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getTextRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextRect")] != -1);
		return call<R>("getTextRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAccRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAccRect")] != -1);
		return call<R>("setAccRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setArrowRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setArrowRect")] != -1);
		return call<R>("setArrowRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCheckRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCheckRect")] != -1);
		return call<R>("setCheckRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIconRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIconRect")] != -1);
		return call<R>("setIconRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLabelRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLabelRect")] != -1);
		return call<R>("setLabelRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTextRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTextRect")] != -1);
		return call<R>("setTextRect", std::forward<Args>(args)...);
	}

};

#endif
