#ifndef sun_swing_JLightweightFrame_HPP
#define sun_swing_JLightweightFrame_HPP

#include "../../jfwd_decl.hpp"

class ::sun::swing::JLightweightFrame : public jObject<::sun::swing::JLightweightFrame, ::sun::awt::LightweightFrame> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_swing / "JLightweightFrame";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::awt::dnd::DropTarget)>("addDropTarget"), //
		jMethod<::jvoid()>("addNotify"), //
		jMethod<::java::awt::dnd::DragGestureRecognizer(::java::lang::Class, ::java::awt::dnd::DragSource, ::java::awt::Component, ::jint, ::java::awt::dnd::DragGestureListener)>("createDragGestureRecognizer"), //
		jMethod<::java::awt::dnd::peer::DragSourceContextPeer(::java::awt::dnd::DragGestureEvent)>("createDragSourceContextPeer"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::java::awt::Container()>("getContentPane"), //
		jMethod<::java::awt::Component()>("getGlassPane"), //
		jMethod<::java::awt::Graphics()>("getGraphics"), //
		jMethod<::javax::swing::JLayeredPane()>("getLayeredPane"), //
		jMethod<::javax::swing::JRootPane()>("getRootPane"), //
		jMethod<::jint()>("getScaleFactor"), //
		jMethod<::jvoid()>("grabFocus"), //
		jMethod<::jvoid(::jint)>("notifyDisplayChanged"), //
		jMethod<::jvoid(::java::awt::dnd::DropTarget)>("removeDropTarget"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("reshape"), //
		jMethod<::jvoid(::sun::swing::LightweightContent)>("setContent"), //
		jMethod<::jvoid(::java::awt::Container)>("setContentPane"), //
		jMethod<::jvoid(::java::awt::Component)>("setGlassPane"), //
		jMethod<::jvoid(::javax::swing::JLayeredPane)>("setLayeredPane"), //
		jMethod<::jvoid()>("ungrabFocus"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addDropTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addDropTarget")] != -1);
		return call<R>("addDropTarget", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addNotify")] != -1);
		return call<R>("addNotify", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::dnd::DragGestureRecognizer, typename... Args>
	auto createDragGestureRecognizer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createDragGestureRecognizer")] != -1);
		return call<R>("createDragGestureRecognizer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::dnd::peer::DragSourceContextPeer, typename... Args>
	auto createDragSourceContextPeer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createDragSourceContextPeer")] != -1);
		return call<R>("createDragSourceContextPeer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Container, typename... Args>
	auto getContentPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContentPane")] != -1);
		return call<R>("getContentPane", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getGlassPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGlassPane")] != -1);
		return call<R>("getGlassPane", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Graphics, typename... Args>
	auto getGraphics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGraphics")] != -1);
		return call<R>("getGraphics", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JLayeredPane, typename... Args>
	auto getLayeredPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLayeredPane")] != -1);
		return call<R>("getLayeredPane", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JRootPane, typename... Args>
	auto getRootPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRootPane")] != -1);
		return call<R>("getRootPane", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getScaleFactor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScaleFactor")] != -1);
		return call<R>("getScaleFactor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto grabFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("grabFocus")] != -1);
		return call<R>("grabFocus", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto notifyDisplayChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("notifyDisplayChanged")] != -1);
		return call<R>("notifyDisplayChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeDropTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeDropTarget")] != -1);
		return call<R>("removeDropTarget", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reshape(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reshape")] != -1);
		return call<R>("reshape", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setContent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setContent")] != -1);
		return call<R>("setContent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setContentPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setContentPane")] != -1);
		return call<R>("setContentPane", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGlassPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setGlassPane")] != -1);
		return call<R>("setGlassPane", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLayeredPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLayeredPane")] != -1);
		return call<R>("setLayeredPane", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto ungrabFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ungrabFocus")] != -1);
		return call<R>("ungrabFocus", std::forward<Args>(args)...);
	}

};

#endif
