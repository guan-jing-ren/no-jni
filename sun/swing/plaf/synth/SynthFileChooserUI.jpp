#ifndef sun_swing_plaf_synth_SynthFileChooserUI_HPP
#define sun_swing_plaf_synth_SynthFileChooserUI_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::swing::plaf::synth::SynthFileChooserUI : public jObject<::sun::swing::plaf::synth::SynthFileChooserUI, ::javax::swing::plaf::basic::BasicFileChooserUI> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_swing_plaf_synth / "SynthFileChooserUI";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::JFileChooser)>(), //
		jMethod<::jvoid()>("clearIconCache"), //
		jMethod<::java::beans::PropertyChangeListener(::javax::swing::JFileChooser)>("createPropertyChangeListener"), //
		jMethod<::javax::swing::plaf::ComponentUI(::javax::swing::JComponent)>("createUI"), //
		jMethod<::javax::swing::plaf::synth::SynthContext(::javax::swing::JComponent)>("getContext"), //
		jMethod<::java::lang::String()>("getFileName"), //
		jMethod<::javax::swing::Action()>("getFileNameCompletionAction"), //
		jMethod<::jvoid(::javax::swing::JFileChooser)>("installComponents"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("installUI"), //
		jMethod<::jvoid(::java::awt::Graphics, ::javax::swing::JComponent)>("paint"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintBorder"), //
		jMethod<::jvoid(::java::lang::String)>("setFileName"), //
		jMethod<::jvoid(::javax::swing::JFileChooser)>("uninstallComponents"), //
		jMethod<::jvoid(::java::awt::Graphics, ::javax::swing::JComponent)>("update"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto clearIconCache(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clearIconCache")] != -1);
		return call<R>("clearIconCache", std::forward<Args>(args)...);
	}

	template<typename R = ::java::beans::PropertyChangeListener, typename... Args>
	auto createPropertyChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createPropertyChangeListener")] != -1);
		return call<R>("createPropertyChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ComponentUI, typename... Args>
	static auto createUI(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createUI")] != -1);
		return scall<R>("createUI", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::synth::SynthContext, typename... Args>
	auto getContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContext")] != -1);
		return call<R>("getContext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFileName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFileName")] != -1);
		return call<R>("getFileName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Action, typename... Args>
	auto getFileNameCompletionAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFileNameCompletionAction")] != -1);
		return call<R>("getFileNameCompletionAction", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto installComponents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("installComponents")] != -1);
		return call<R>("installComponents", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto installUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("installUI")] != -1);
		return call<R>("installUI", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paintBorder")] != -1);
		return call<R>("paintBorder", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFileName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFileName")] != -1);
		return call<R>("setFileName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto uninstallComponents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("uninstallComponents")] != -1);
		return call<R>("uninstallComponents", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto update(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("update")] != -1);
		return call<R>("update", std::forward<Args>(args)...);
	}

};

#endif
