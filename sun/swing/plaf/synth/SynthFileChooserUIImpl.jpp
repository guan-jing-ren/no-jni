#ifndef sun_swing_plaf_synth_SynthFileChooserUIImpl_HPP
#define sun_swing_plaf_synth_SynthFileChooserUIImpl_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::swing::plaf::synth::SynthFileChooserUIImpl : public jObject<::sun::swing::plaf::synth::SynthFileChooserUIImpl, ::sun::swing::plaf::synth::SynthFileChooserUI> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_swing_plaf_synth / "SynthFileChooserUIImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::JFileChooser)>(), //
		jMethod<::java::lang::String()>("getFileName"), //
		jMethod<::jvoid(::javax::swing::JFileChooser)>("installComponents"), //
		jMethod<::jvoid(::javax::swing::JFileChooser)>("rescanCurrentDirectory"), //
		jMethod<::jvoid(::java::lang::String)>("setFileName"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("uninstallUI"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getFileName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFileName")] != -1);
		return call<R>("getFileName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto installComponents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("installComponents")] != -1);
		return call<R>("installComponents", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto rescanCurrentDirectory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rescanCurrentDirectory")] != -1);
		return call<R>("rescanCurrentDirectory", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFileName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFileName")] != -1);
		return call<R>("setFileName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto uninstallUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("uninstallUI")] != -1);
		return call<R>("uninstallUI", std::forward<Args>(args)...);
	}

};

#endif
