#ifndef sun_swing_plaf_synth_DefaultSynthStyle$StateInfo_HPP
#define sun_swing_plaf_synth_DefaultSynthStyle$StateInfo_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::swing::plaf::synth::DefaultSynthStyle$StateInfo : public jObject<::sun::swing::plaf::synth::DefaultSynthStyle$StateInfo, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_swing_plaf_synth / "DefaultSynthStyle$StateInfo";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint, ::java::awt::Font, ::java::awt::Color *)>(), //
		jConstructor<::jvoid(::sun::swing::plaf::synth::DefaultSynthStyle$StateInfo)>(), //
		jMethod<::sun::swing::plaf::synth::DefaultSynthStyle$StateInfo(::sun::swing::plaf::synth::DefaultSynthStyle$StateInfo)>("addTo"), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::java::awt::Color(::javax::swing::plaf::synth::ColorType)>("getColor"), //
		jMethod<::java::awt::Color *()>("getColors"), //
		jMethod<::jint()>("getComponentState"), //
		jMethod<::java::util::Map()>("getData"), //
		jMethod<::java::awt::Font()>("getFont"), //
		jMethod<::jvoid(::java::awt::Color *)>("setColors"), //
		jMethod<::jvoid(::jint)>("setComponentState"), //
		jMethod<::jvoid(::java::util::Map)>("setData"), //
		jMethod<::jvoid(::java::awt::Font)>("setFont"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::sun::swing::plaf::synth::DefaultSynthStyle$StateInfo, typename... Args>
	auto addTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addTo")] != -1);
		return call<R>("addTo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColor")] != -1);
		return call<R>("getColor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color *, typename... Args>
	auto getColors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColors")] != -1);
		return call<R>("getColors", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getComponentState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getComponentState")] != -1);
		return call<R>("getComponentState", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getData")] != -1);
		return call<R>("getData", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Font, typename... Args>
	auto getFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFont")] != -1);
		return call<R>("getFont", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setColors")] != -1);
		return call<R>("setColors", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setComponentState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setComponentState")] != -1);
		return call<R>("setComponentState", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setData")] != -1);
		return call<R>("setData", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFont")] != -1);
		return call<R>("setFont", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
