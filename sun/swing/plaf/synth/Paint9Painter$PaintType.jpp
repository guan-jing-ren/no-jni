#ifndef sun_swing_plaf_synth_Paint9Painter$PaintType_HPP
#define sun_swing_plaf_synth_Paint9Painter$PaintType_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::swing::plaf::synth::Paint9Painter$PaintType : public jObject<::sun::swing::plaf::synth::Paint9Painter$PaintType, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_swing_plaf_synth / "Paint9Painter$PaintType";

	constexpr static Enume field_signatures{
		jField<::sun::swing::plaf::synth::Paint9Painter$PaintType>("CENTER"), //
		jField<::sun::swing::plaf::synth::Paint9Painter$PaintType>("PAINT9_STRETCH"), //
		jField<::sun::swing::plaf::synth::Paint9Painter$PaintType>("PAINT9_TILE"), //
		jField<::sun::swing::plaf::synth::Paint9Painter$PaintType>("TILE"), //
	};

	template<typename F = ::sun::swing::plaf::synth::Paint9Painter$PaintType>
	static auto CENTER() {
		static_assert(field_signatures[jField<F>("CENTER")] != -1);
		return sat<F>("CENTER");
	}

	template<typename F = ::sun::swing::plaf::synth::Paint9Painter$PaintType>
	static auto PAINT9_STRETCH() {
		static_assert(field_signatures[jField<F>("PAINT9_STRETCH")] != -1);
		return sat<F>("PAINT9_STRETCH");
	}

	template<typename F = ::sun::swing::plaf::synth::Paint9Painter$PaintType>
	static auto PAINT9_TILE() {
		static_assert(field_signatures[jField<F>("PAINT9_TILE")] != -1);
		return sat<F>("PAINT9_TILE");
	}

	template<typename F = ::sun::swing::plaf::synth::Paint9Painter$PaintType>
	static auto TILE() {
		static_assert(field_signatures[jField<F>("TILE")] != -1);
		return sat<F>("TILE");
	}

	constexpr static Enume method_signatures{
		jMethod<::sun::swing::plaf::synth::Paint9Painter$PaintType(::java::lang::String)>("valueOf"), //
		jMethod<::sun::swing::plaf::synth::Paint9Painter$PaintType *()>("values"), //
	};

	template<typename R = ::sun::swing::plaf::synth::Paint9Painter$PaintType, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::swing::plaf::synth::Paint9Painter$PaintType *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
