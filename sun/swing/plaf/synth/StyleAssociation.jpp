#ifndef sun_swing_plaf_synth_StyleAssociation_HPP
#define sun_swing_plaf_synth_StyleAssociation_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::swing::plaf::synth::StyleAssociation : public jObject<::sun::swing::plaf::synth::StyleAssociation, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_swing_plaf_synth / "StyleAssociation";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::sun::swing::plaf::synth::StyleAssociation(::java::lang::String, ::javax::swing::plaf::synth::SynthStyle)>("createStyleAssociation"), //
		jMethod<::sun::swing::plaf::synth::StyleAssociation(::java::lang::String, ::javax::swing::plaf::synth::SynthStyle, ::jint)>("createStyleAssociation"), //
		jMethod<::jint()>("getID"), //
		jMethod<::javax::swing::plaf::synth::SynthStyle()>("getStyle"), //
		jMethod<::java::lang::String()>("getText"), //
		jMethod<::jboolean(::java::lang::CharSequence)>("matches"), //
	};

	template<typename R = ::sun::swing::plaf::synth::StyleAssociation, typename... Args>
	static auto createStyleAssociation(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createStyleAssociation")] != -1);
		return scall<R>("createStyleAssociation", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getID")] != -1);
		return call<R>("getID", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::synth::SynthStyle, typename... Args>
	auto getStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStyle")] != -1);
		return call<R>("getStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getText")] != -1);
		return call<R>("getText", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto matches(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("matches")] != -1);
		return call<R>("matches", std::forward<Args>(args)...);
	}

};

#endif
