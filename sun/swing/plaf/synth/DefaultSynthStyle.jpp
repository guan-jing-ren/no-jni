#ifndef sun_swing_plaf_synth_DefaultSynthStyle_HPP
#define sun_swing_plaf_synth_DefaultSynthStyle_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::swing::plaf::synth::DefaultSynthStyle : public jObject<::sun::swing::plaf::synth::DefaultSynthStyle, ::javax::swing::plaf::synth::SynthStyle> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_swing_plaf_synth / "DefaultSynthStyle";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::awt::Insets, ::jboolean, ::sun::swing::plaf::synth::DefaultSynthStyle$StateInfo *, ::java::util::Map)>(), //
		jConstructor<::jvoid(::sun::swing::plaf::synth::DefaultSynthStyle)>(), //
		jMethod<::sun::swing::plaf::synth::DefaultSynthStyle(::sun::swing::plaf::synth::DefaultSynthStyle)>("addTo"), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::java::lang::Object(::javax::swing::plaf::synth::SynthContext, ::java::lang::Object)>("get"), //
		jMethod<::java::awt::Color(::javax::swing::JComponent, ::javax::swing::plaf::synth::Region, ::jint, ::javax::swing::plaf::synth::ColorType)>("getColor"), //
		jMethod<::java::awt::Color(::javax::swing::plaf::synth::SynthContext, ::javax::swing::plaf::synth::ColorType)>("getColor"), //
		jMethod<::java::util::Map()>("getData"), //
		jMethod<::java::lang::Object(::javax::swing::plaf::synth::SynthContext, ::java::lang::Object)>("getDefaultValue"), //
		jMethod<::java::awt::Font(::javax::swing::JComponent, ::javax::swing::plaf::synth::Region, ::jint)>("getFont"), //
		jMethod<::java::awt::Font(::javax::swing::plaf::synth::SynthContext)>("getFont"), //
		jMethod<::javax::swing::plaf::synth::SynthGraphicsUtils(::javax::swing::plaf::synth::SynthContext)>("getGraphicsUtils"), //
		jMethod<::java::awt::Insets(::javax::swing::plaf::synth::SynthContext, ::java::awt::Insets)>("getInsets"), //
		jMethod<::javax::swing::plaf::synth::SynthPainter(::javax::swing::plaf::synth::SynthContext)>("getPainter"), //
		jMethod<::sun::swing::plaf::synth::DefaultSynthStyle$StateInfo *()>("getStateInfo"), //
		jMethod<::sun::swing::plaf::synth::DefaultSynthStyle$StateInfo(::jint)>("getStateInfo"), //
		jMethod<::jboolean(::javax::swing::plaf::synth::SynthContext)>("isOpaque"), //
		jMethod<::jvoid(::java::util::Map)>("setData"), //
		jMethod<::jvoid(::java::awt::Font)>("setFont"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthGraphicsUtils)>("setGraphicsUtils"), //
		jMethod<::jvoid(::java::awt::Insets)>("setInsets"), //
		jMethod<::jvoid(::jboolean)>("setOpaque"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthPainter)>("setPainter"), //
		jMethod<::jvoid(::sun::swing::plaf::synth::DefaultSynthStyle$StateInfo *)>("setStateInfo"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::sun::swing::plaf::synth::DefaultSynthStyle, typename... Args>
	auto addTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addTo")] != -1);
		return call<R>("addTo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColor")] != -1);
		return call<R>("getColor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getData")] != -1);
		return call<R>("getData", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getDefaultValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultValue")] != -1);
		return call<R>("getDefaultValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Font, typename... Args>
	auto getFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFont")] != -1);
		return call<R>("getFont", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::synth::SynthGraphicsUtils, typename... Args>
	auto getGraphicsUtils(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGraphicsUtils")] != -1);
		return call<R>("getGraphicsUtils", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Insets, typename... Args>
	auto getInsets(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInsets")] != -1);
		return call<R>("getInsets", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::synth::SynthPainter, typename... Args>
	auto getPainter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPainter")] != -1);
		return call<R>("getPainter", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::swing::plaf::synth::DefaultSynthStyle$StateInfo *, typename... Args>
	auto getStateInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStateInfo")] != -1);
		return call<R>("getStateInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isOpaque(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isOpaque")] != -1);
		return call<R>("isOpaque", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setData")] != -1);
		return call<R>("setData", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFont")] != -1);
		return call<R>("setFont", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGraphicsUtils(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setGraphicsUtils")] != -1);
		return call<R>("setGraphicsUtils", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInsets(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setInsets")] != -1);
		return call<R>("setInsets", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOpaque(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOpaque")] != -1);
		return call<R>("setOpaque", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPainter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPainter")] != -1);
		return call<R>("setPainter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setStateInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setStateInfo")] != -1);
		return call<R>("setStateInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
