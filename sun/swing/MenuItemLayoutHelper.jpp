#ifndef sun_swing_MenuItemLayoutHelper_HPP
#define sun_swing_MenuItemLayoutHelper_HPP

#include "../../jfwd_decl.hpp"

class ::sun::swing::MenuItemLayoutHelper : public jObject<::sun::swing::MenuItemLayoutHelper, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_swing / "MenuItemLayoutHelper";

	constexpr static Enume field_signatures{
		jField<::sun::swing::StringUIClientPropertyKey>("MAX_ACC_WIDTH"), //
		jField<::sun::swing::StringUIClientPropertyKey>("MAX_ARROW_WIDTH"), //
		jField<::sun::swing::StringUIClientPropertyKey>("MAX_CHECK_WIDTH"), //
		jField<::sun::swing::StringUIClientPropertyKey>("MAX_ICON_WIDTH"), //
		jField<::sun::swing::StringUIClientPropertyKey>("MAX_LABEL_WIDTH"), //
		jField<::sun::swing::StringUIClientPropertyKey>("MAX_TEXT_WIDTH"), //
	};

	template<typename F = ::sun::swing::StringUIClientPropertyKey>
	static auto MAX_ACC_WIDTH() {
		static_assert(field_signatures[jField<F>("MAX_ACC_WIDTH")] != -1);
		return sat<F>("MAX_ACC_WIDTH");
	}

	template<typename F = ::sun::swing::StringUIClientPropertyKey>
	static auto MAX_ARROW_WIDTH() {
		static_assert(field_signatures[jField<F>("MAX_ARROW_WIDTH")] != -1);
		return sat<F>("MAX_ARROW_WIDTH");
	}

	template<typename F = ::sun::swing::StringUIClientPropertyKey>
	static auto MAX_CHECK_WIDTH() {
		static_assert(field_signatures[jField<F>("MAX_CHECK_WIDTH")] != -1);
		return sat<F>("MAX_CHECK_WIDTH");
	}

	template<typename F = ::sun::swing::StringUIClientPropertyKey>
	static auto MAX_ICON_WIDTH() {
		static_assert(field_signatures[jField<F>("MAX_ICON_WIDTH")] != -1);
		return sat<F>("MAX_ICON_WIDTH");
	}

	template<typename F = ::sun::swing::StringUIClientPropertyKey>
	static auto MAX_LABEL_WIDTH() {
		static_assert(field_signatures[jField<F>("MAX_LABEL_WIDTH")] != -1);
		return sat<F>("MAX_LABEL_WIDTH");
	}

	template<typename F = ::sun::swing::StringUIClientPropertyKey>
	static auto MAX_TEXT_WIDTH() {
		static_assert(field_signatures[jField<F>("MAX_TEXT_WIDTH")] != -1);
		return sat<F>("MAX_TEXT_WIDTH");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::JMenuItem, ::javax::swing::Icon, ::javax::swing::Icon, ::java::awt::Rectangle, ::jint, ::java::lang::String, ::jboolean, ::java::awt::Font, ::java::awt::Font, ::jboolean, ::java::lang::String)>(), //
		jMethod<::jvoid(::sun::swing::MenuItemLayoutHelper$RectSize, ::jint, ::java::awt::Dimension)>("addMaxWidth"), //
		jMethod<::jvoid(::jint, ::jint, ::java::awt::Dimension)>("addWidth"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("clearUsedClientProperties"), //
		jMethod<::jvoid(::javax::swing::JMenuItem)>("clearUsedParentClientProperties"), //
		jMethod<::java::awt::Rectangle()>("createMaxRect"), //
		jMethod<::java::awt::Font()>("getAccFont"), //
		jMethod<::java::awt::FontMetrics()>("getAccFontMetrics"), //
		jMethod<::sun::swing::MenuItemLayoutHelper$RectSize()>("getAccSize"), //
		jMethod<::java::lang::String()>("getAccText"), //
		jMethod<::jint()>("getAfterCheckIconGap"), //
		jMethod<::javax::swing::Icon()>("getArrowIcon"), //
		jMethod<::sun::swing::MenuItemLayoutHelper$RectSize()>("getArrowSize"), //
		jMethod<::javax::swing::Icon()>("getCheckIcon"), //
		jMethod<::sun::swing::MenuItemLayoutHelper$RectSize()>("getCheckSize"), //
		jMethod<::java::awt::Font()>("getFont"), //
		jMethod<::java::awt::FontMetrics()>("getFontMetrics"), //
		jMethod<::jint()>("getGap"), //
		jMethod<::jint()>("getHorizontalAlignment"), //
		jMethod<::jint()>("getHorizontalTextPosition"), //
		jMethod<::javax::swing::text::View()>("getHtmlView"), //
		jMethod<::javax::swing::Icon()>("getIcon"), //
		jMethod<::sun::swing::MenuItemLayoutHelper$RectSize()>("getIconSize"), //
		jMethod<::sun::swing::MenuItemLayoutHelper$ColumnAlignment()>("getLTRColumnAlignment"), //
		jMethod<::sun::swing::MenuItemLayoutHelper$RectSize()>("getLabelSize"), //
		jMethod<::jint()>("getLeadingGap"), //
		jMethod<::jint()>("getLeftTextExtraWidth"), //
		jMethod<::javax::swing::JMenuItem()>("getMenuItem"), //
		jMethod<::javax::swing::JComponent()>("getMenuItemParent"), //
		jMethod<::javax::swing::JComponent(::javax::swing::JMenuItem)>("getMenuItemParent"), //
		jMethod<::jint()>("getMinTextOffset"), //
		jMethod<::sun::swing::MenuItemLayoutHelper$ColumnAlignment()>("getRTLColumnAlignment"), //
		jMethod<::java::lang::String()>("getText"), //
		jMethod<::sun::swing::MenuItemLayoutHelper$RectSize()>("getTextSize"), //
		jMethod<::jint()>("getVerticalAlignment"), //
		jMethod<::jint()>("getVerticalTextPosition"), //
		jMethod<::java::awt::Rectangle()>("getViewRect"), //
		jMethod<::jboolean()>("isColumnLayout"), //
		jMethod<::jboolean(::jboolean, ::jint, ::jint, ::jint)>("isColumnLayout"), //
		jMethod<::jboolean(::jboolean, ::javax::swing::JMenuItem)>("isColumnLayout"), //
		jMethod<::jboolean()>("isLeftToRight"), //
		jMethod<::jboolean()>("isTopLevelMenu"), //
		jMethod<::sun::swing::MenuItemLayoutHelper$LayoutResult()>("layoutMenuItem"), //
		jMethod<::jint(::jint *)>("max"), //
		jMethod<::jboolean()>("useCheckAndArrow"), //
		jMethod<::jboolean(::javax::swing::JMenuItem)>("useCheckAndArrow"), //
	};

	template<typename R = ::jvoid, typename... Args>
	static auto addMaxWidth(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addMaxWidth")] != -1);
		return scall<R>("addMaxWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto addWidth(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addWidth")] != -1);
		return scall<R>("addWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto clearUsedClientProperties(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clearUsedClientProperties")] != -1);
		return scall<R>("clearUsedClientProperties", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto clearUsedParentClientProperties(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clearUsedParentClientProperties")] != -1);
		return scall<R>("clearUsedParentClientProperties", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	static auto createMaxRect(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createMaxRect")] != -1);
		return scall<R>("createMaxRect", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Font, typename... Args>
	auto getAccFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccFont")] != -1);
		return call<R>("getAccFont", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::FontMetrics, typename... Args>
	auto getAccFontMetrics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccFontMetrics")] != -1);
		return call<R>("getAccFontMetrics", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::swing::MenuItemLayoutHelper$RectSize, typename... Args>
	auto getAccSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccSize")] != -1);
		return call<R>("getAccSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAccText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccText")] != -1);
		return call<R>("getAccText", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAfterCheckIconGap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAfterCheckIconGap")] != -1);
		return call<R>("getAfterCheckIconGap", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getArrowIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getArrowIcon")] != -1);
		return call<R>("getArrowIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::swing::MenuItemLayoutHelper$RectSize, typename... Args>
	auto getArrowSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getArrowSize")] != -1);
		return call<R>("getArrowSize", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getCheckIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCheckIcon")] != -1);
		return call<R>("getCheckIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::swing::MenuItemLayoutHelper$RectSize, typename... Args>
	auto getCheckSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCheckSize")] != -1);
		return call<R>("getCheckSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Font, typename... Args>
	auto getFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFont")] != -1);
		return call<R>("getFont", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::FontMetrics, typename... Args>
	auto getFontMetrics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFontMetrics")] != -1);
		return call<R>("getFontMetrics", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getGap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGap")] != -1);
		return call<R>("getGap", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHorizontalAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHorizontalAlignment")] != -1);
		return call<R>("getHorizontalAlignment", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHorizontalTextPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHorizontalTextPosition")] != -1);
		return call<R>("getHorizontalTextPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::View, typename... Args>
	auto getHtmlView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHtmlView")] != -1);
		return call<R>("getHtmlView", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIcon")] != -1);
		return call<R>("getIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::swing::MenuItemLayoutHelper$RectSize, typename... Args>
	auto getIconSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIconSize")] != -1);
		return call<R>("getIconSize", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::swing::MenuItemLayoutHelper$ColumnAlignment, typename... Args>
	auto getLTRColumnAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLTRColumnAlignment")] != -1);
		return call<R>("getLTRColumnAlignment", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::swing::MenuItemLayoutHelper$RectSize, typename... Args>
	auto getLabelSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLabelSize")] != -1);
		return call<R>("getLabelSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLeadingGap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLeadingGap")] != -1);
		return call<R>("getLeadingGap", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLeftTextExtraWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLeftTextExtraWidth")] != -1);
		return call<R>("getLeftTextExtraWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JMenuItem, typename... Args>
	auto getMenuItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMenuItem")] != -1);
		return call<R>("getMenuItem", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JComponent, typename... Args>
	auto getMenuItemParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMenuItemParent")] != -1);
		return call<R>("getMenuItemParent", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinTextOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinTextOffset")] != -1);
		return call<R>("getMinTextOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::swing::MenuItemLayoutHelper$ColumnAlignment, typename... Args>
	auto getRTLColumnAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRTLColumnAlignment")] != -1);
		return call<R>("getRTLColumnAlignment", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getText")] != -1);
		return call<R>("getText", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::swing::MenuItemLayoutHelper$RectSize, typename... Args>
	auto getTextSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextSize")] != -1);
		return call<R>("getTextSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getVerticalAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVerticalAlignment")] != -1);
		return call<R>("getVerticalAlignment", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getVerticalTextPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVerticalTextPosition")] != -1);
		return call<R>("getVerticalTextPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getViewRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getViewRect")] != -1);
		return call<R>("getViewRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isColumnLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isColumnLayout")] != -1);
		return call<R>("isColumnLayout", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLeftToRight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLeftToRight")] != -1);
		return call<R>("isLeftToRight", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isTopLevelMenu(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isTopLevelMenu")] != -1);
		return call<R>("isTopLevelMenu", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::swing::MenuItemLayoutHelper$LayoutResult, typename... Args>
	auto layoutMenuItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("layoutMenuItem")] != -1);
		return call<R>("layoutMenuItem", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto max(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("max")] != -1);
		return scall<R>("max", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto useCheckAndArrow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("useCheckAndArrow")] != -1);
		return call<R>("useCheckAndArrow", std::forward<Args>(args)...);
	}

};

#endif
