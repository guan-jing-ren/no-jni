#ifndef sun_tracing_ProviderSkeleton_HPP
#define sun_tracing_ProviderSkeleton_HPP

#include "../../jfwd_decl.hpp"

class ::sun::tracing::ProviderSkeleton : public jObject<::sun::tracing::ProviderSkeleton, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_tracing / "ProviderSkeleton";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("dispose"), //
		jMethod<::com::sun::tracing::Probe(::java::lang::reflect::Method)>("getProbe"), //
		jMethod<::jvoid()>("init"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::reflect::Method, ::java::lang::Object *)>("invoke"), //
		jMethod<::com::sun::tracing::Provider()>("newProxyInstance"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::tracing::Probe, typename... Args>
	auto getProbe(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProbe")] != -1);
		return call<R>("getProbe", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto init(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("init")] != -1);
		return call<R>("init", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto invoke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invoke")] != -1);
		return call<R>("invoke", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::tracing::Provider, typename... Args>
	auto newProxyInstance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newProxyInstance")] != -1);
		return call<R>("newProxyInstance", std::forward<Args>(args)...);
	}

};

#endif
