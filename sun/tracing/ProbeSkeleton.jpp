#ifndef sun_tracing_ProbeSkeleton_HPP
#define sun_tracing_ProbeSkeleton_HPP

#include "../../jfwd_decl.hpp"

class ::sun::tracing::ProbeSkeleton : public jObject<::sun::tracing::ProbeSkeleton, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_tracing / "ProbeSkeleton";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean()>("isEnabled"), //
		jMethod<::jvoid(::java::lang::Object *)>("trigger"), //
		jMethod<::jvoid(::java::lang::Object *)>("uncheckedTrigger"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto isEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEnabled")] != -1);
		return call<R>("isEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto trigger(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("trigger")] != -1);
		return call<R>("trigger", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto uncheckedTrigger(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("uncheckedTrigger")] != -1);
		return call<R>("uncheckedTrigger", std::forward<Args>(args)...);
	}

};

#endif
