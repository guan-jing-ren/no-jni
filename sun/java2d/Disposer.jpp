#ifndef sun_java2d_Disposer_HPP
#define sun_java2d_Disposer_HPP

#include "../../jfwd_decl.hpp"

class ::sun::java2d::Disposer : public jObject<::sun::java2d::Disposer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d / "Disposer";

	constexpr static Enume field_signatures{
		jField<::jint>("PHANTOM"), //
		jField<::jint>("WEAK"), //
		jField<::jboolean>("pollingQueue"), //
		jField<::jint>("refType"), //
	};

	template<typename F = ::jint>
	static auto PHANTOM() {
		static_assert(field_signatures[jField<F>("PHANTOM")] != -1);
		return sat<F>("PHANTOM");
	}

	template<typename F = ::jint>
	static auto WEAK() {
		static_assert(field_signatures[jField<F>("WEAK")] != -1);
		return sat<F>("WEAK");
	}

	template<typename F = ::jboolean>
	static auto pollingQueue() {
		static_assert(field_signatures[jField<F>("pollingQueue")] != -1);
		return sat<F>("pollingQueue");
	}

	template<typename F = ::jint>
	static auto refType() {
		static_assert(field_signatures[jField<F>("refType")] != -1);
		return sat<F>("refType");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::lang::Object, ::sun::java2d::DisposerRecord)>("addObjectRecord"), //
		jMethod<::jvoid(::java::lang::Object, ::jlong, ::jlong)>("addRecord"), //
		jMethod<::jvoid(::java::lang::Object, ::sun::java2d::DisposerRecord)>("addRecord"), //
		jMethod<::jvoid(::java::lang::ref::Reference, ::sun::java2d::DisposerRecord)>("addReference"), //
		jMethod<::java::lang::ref::ReferenceQueue()>("getQueue"), //
		jMethod<::jvoid()>("pollRemove"), //
		jMethod<::jvoid()>("run"), //
	};

	template<typename R = ::jvoid, typename... Args>
	static auto addObjectRecord(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addObjectRecord")] != -1);
		return scall<R>("addObjectRecord", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto addRecord(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addRecord")] != -1);
		return scall<R>("addRecord", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto addReference(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addReference")] != -1);
		return scall<R>("addReference", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::ref::ReferenceQueue, typename... Args>
	static auto getQueue(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getQueue")] != -1);
		return scall<R>("getQueue", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto pollRemove(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("pollRemove")] != -1);
		return scall<R>("pollRemove", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto run(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("run")] != -1);
		return call<R>("run", std::forward<Args>(args)...);
	}

};

#endif
