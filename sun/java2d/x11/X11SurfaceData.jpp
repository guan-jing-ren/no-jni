#ifndef sun_java2d_x11_X11SurfaceData_HPP
#define sun_java2d_x11_X11SurfaceData_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::x11::X11SurfaceData : public jObject<::sun::java2d::x11::X11SurfaceData, ::sun::java2d::x11::XSurfaceData> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_x11 / "X11SurfaceData";

	constexpr static Enume field_signatures{
		jField<::sun::java2d::loops::SurfaceType>("ByteGrayX11"), //
		jField<::sun::java2d::loops::SurfaceType>("ByteGrayX11_BM"), //
		jField<::sun::java2d::loops::SurfaceType>("ByteIndexedOpaqueX11"), //
		jField<::sun::java2d::loops::SurfaceType>("ByteIndexedX11_BM"), //
		jField<::java::lang::String>("DESC_3BYTE_BGR_X11"), //
		jField<::java::lang::String>("DESC_3BYTE_BGR_X11_BM"), //
		jField<::java::lang::String>("DESC_3BYTE_RGB_X11"), //
		jField<::java::lang::String>("DESC_3BYTE_RGB_X11_BM"), //
		jField<::java::lang::String>("DESC_4BYTE_ABGR_PRE_X11"), //
		jField<::java::lang::String>("DESC_BYTE_GRAY_X11"), //
		jField<::java::lang::String>("DESC_BYTE_GRAY_X11_BM"), //
		jField<::java::lang::String>("DESC_BYTE_IND_OPQ_X11"), //
		jField<::java::lang::String>("DESC_BYTE_IND_X11_BM"), //
		jField<::java::lang::String>("DESC_INDEX8_GRAY_X11"), //
		jField<::java::lang::String>("DESC_INDEX8_GRAY_X11_BM"), //
		jField<::java::lang::String>("DESC_INT_ARGB_PRE_X11"), //
		jField<::java::lang::String>("DESC_INT_BGR_X11"), //
		jField<::java::lang::String>("DESC_INT_BGR_X11_BM"), //
		jField<::java::lang::String>("DESC_INT_RGB_X11"), //
		jField<::java::lang::String>("DESC_INT_RGB_X11_BM"), //
		jField<::java::lang::String>("DESC_USHORT_555_RGB_X11"), //
		jField<::java::lang::String>("DESC_USHORT_555_RGB_X11_BM"), //
		jField<::java::lang::String>("DESC_USHORT_565_RGB_X11"), //
		jField<::java::lang::String>("DESC_USHORT_565_RGB_X11_BM"), //
		jField<::java::lang::String>("DESC_USHORT_INDEXED_X11"), //
		jField<::java::lang::String>("DESC_USHORT_INDEXED_X11_BM"), //
		jField<::sun::java2d::loops::SurfaceType>("FourByteAbgrPreX11"), //
		jField<::sun::java2d::loops::SurfaceType>("Index8GrayX11"), //
		jField<::sun::java2d::loops::SurfaceType>("Index8GrayX11_BM"), //
		jField<::sun::java2d::loops::SurfaceType>("IntArgbPreX11"), //
		jField<::sun::java2d::loops::SurfaceType>("IntBgrX11"), //
		jField<::sun::java2d::loops::SurfaceType>("IntBgrX11_BM"), //
		jField<::sun::java2d::loops::SurfaceType>("IntRgbX11"), //
		jField<::sun::java2d::loops::SurfaceType>("IntRgbX11_BM"), //
		jField<::sun::java2d::loops::SurfaceType>("ThreeByteBgrX11"), //
		jField<::sun::java2d::loops::SurfaceType>("ThreeByteBgrX11_BM"), //
		jField<::sun::java2d::loops::SurfaceType>("ThreeByteRgbX11"), //
		jField<::sun::java2d::loops::SurfaceType>("ThreeByteRgbX11_BM"), //
		jField<::sun::java2d::loops::SurfaceType>("UShort555RgbX11"), //
		jField<::sun::java2d::loops::SurfaceType>("UShort555RgbX11_BM"), //
		jField<::sun::java2d::loops::SurfaceType>("UShort565RgbX11"), //
		jField<::sun::java2d::loops::SurfaceType>("UShort565RgbX11_BM"), //
		jField<::sun::java2d::loops::SurfaceType>("UShortIndexedX11"), //
		jField<::sun::java2d::loops::SurfaceType>("UShortIndexedX11_BM"), //
	};

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto ByteGrayX11() {
		static_assert(field_signatures[jField<F>("ByteGrayX11")] != -1);
		return sat<F>("ByteGrayX11");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto ByteGrayX11_BM() {
		static_assert(field_signatures[jField<F>("ByteGrayX11_BM")] != -1);
		return sat<F>("ByteGrayX11_BM");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto ByteIndexedOpaqueX11() {
		static_assert(field_signatures[jField<F>("ByteIndexedOpaqueX11")] != -1);
		return sat<F>("ByteIndexedOpaqueX11");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto ByteIndexedX11_BM() {
		static_assert(field_signatures[jField<F>("ByteIndexedX11_BM")] != -1);
		return sat<F>("ByteIndexedX11_BM");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_3BYTE_BGR_X11() {
		static_assert(field_signatures[jField<F>("DESC_3BYTE_BGR_X11")] != -1);
		return sat<F>("DESC_3BYTE_BGR_X11");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_3BYTE_BGR_X11_BM() {
		static_assert(field_signatures[jField<F>("DESC_3BYTE_BGR_X11_BM")] != -1);
		return sat<F>("DESC_3BYTE_BGR_X11_BM");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_3BYTE_RGB_X11() {
		static_assert(field_signatures[jField<F>("DESC_3BYTE_RGB_X11")] != -1);
		return sat<F>("DESC_3BYTE_RGB_X11");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_3BYTE_RGB_X11_BM() {
		static_assert(field_signatures[jField<F>("DESC_3BYTE_RGB_X11_BM")] != -1);
		return sat<F>("DESC_3BYTE_RGB_X11_BM");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_4BYTE_ABGR_PRE_X11() {
		static_assert(field_signatures[jField<F>("DESC_4BYTE_ABGR_PRE_X11")] != -1);
		return sat<F>("DESC_4BYTE_ABGR_PRE_X11");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_BYTE_GRAY_X11() {
		static_assert(field_signatures[jField<F>("DESC_BYTE_GRAY_X11")] != -1);
		return sat<F>("DESC_BYTE_GRAY_X11");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_BYTE_GRAY_X11_BM() {
		static_assert(field_signatures[jField<F>("DESC_BYTE_GRAY_X11_BM")] != -1);
		return sat<F>("DESC_BYTE_GRAY_X11_BM");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_BYTE_IND_OPQ_X11() {
		static_assert(field_signatures[jField<F>("DESC_BYTE_IND_OPQ_X11")] != -1);
		return sat<F>("DESC_BYTE_IND_OPQ_X11");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_BYTE_IND_X11_BM() {
		static_assert(field_signatures[jField<F>("DESC_BYTE_IND_X11_BM")] != -1);
		return sat<F>("DESC_BYTE_IND_X11_BM");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_INDEX8_GRAY_X11() {
		static_assert(field_signatures[jField<F>("DESC_INDEX8_GRAY_X11")] != -1);
		return sat<F>("DESC_INDEX8_GRAY_X11");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_INDEX8_GRAY_X11_BM() {
		static_assert(field_signatures[jField<F>("DESC_INDEX8_GRAY_X11_BM")] != -1);
		return sat<F>("DESC_INDEX8_GRAY_X11_BM");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_INT_ARGB_PRE_X11() {
		static_assert(field_signatures[jField<F>("DESC_INT_ARGB_PRE_X11")] != -1);
		return sat<F>("DESC_INT_ARGB_PRE_X11");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_INT_BGR_X11() {
		static_assert(field_signatures[jField<F>("DESC_INT_BGR_X11")] != -1);
		return sat<F>("DESC_INT_BGR_X11");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_INT_BGR_X11_BM() {
		static_assert(field_signatures[jField<F>("DESC_INT_BGR_X11_BM")] != -1);
		return sat<F>("DESC_INT_BGR_X11_BM");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_INT_RGB_X11() {
		static_assert(field_signatures[jField<F>("DESC_INT_RGB_X11")] != -1);
		return sat<F>("DESC_INT_RGB_X11");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_INT_RGB_X11_BM() {
		static_assert(field_signatures[jField<F>("DESC_INT_RGB_X11_BM")] != -1);
		return sat<F>("DESC_INT_RGB_X11_BM");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_USHORT_555_RGB_X11() {
		static_assert(field_signatures[jField<F>("DESC_USHORT_555_RGB_X11")] != -1);
		return sat<F>("DESC_USHORT_555_RGB_X11");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_USHORT_555_RGB_X11_BM() {
		static_assert(field_signatures[jField<F>("DESC_USHORT_555_RGB_X11_BM")] != -1);
		return sat<F>("DESC_USHORT_555_RGB_X11_BM");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_USHORT_565_RGB_X11() {
		static_assert(field_signatures[jField<F>("DESC_USHORT_565_RGB_X11")] != -1);
		return sat<F>("DESC_USHORT_565_RGB_X11");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_USHORT_565_RGB_X11_BM() {
		static_assert(field_signatures[jField<F>("DESC_USHORT_565_RGB_X11_BM")] != -1);
		return sat<F>("DESC_USHORT_565_RGB_X11_BM");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_USHORT_INDEXED_X11() {
		static_assert(field_signatures[jField<F>("DESC_USHORT_INDEXED_X11")] != -1);
		return sat<F>("DESC_USHORT_INDEXED_X11");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_USHORT_INDEXED_X11_BM() {
		static_assert(field_signatures[jField<F>("DESC_USHORT_INDEXED_X11_BM")] != -1);
		return sat<F>("DESC_USHORT_INDEXED_X11_BM");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto FourByteAbgrPreX11() {
		static_assert(field_signatures[jField<F>("FourByteAbgrPreX11")] != -1);
		return sat<F>("FourByteAbgrPreX11");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto Index8GrayX11() {
		static_assert(field_signatures[jField<F>("Index8GrayX11")] != -1);
		return sat<F>("Index8GrayX11");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto Index8GrayX11_BM() {
		static_assert(field_signatures[jField<F>("Index8GrayX11_BM")] != -1);
		return sat<F>("Index8GrayX11_BM");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto IntArgbPreX11() {
		static_assert(field_signatures[jField<F>("IntArgbPreX11")] != -1);
		return sat<F>("IntArgbPreX11");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto IntBgrX11() {
		static_assert(field_signatures[jField<F>("IntBgrX11")] != -1);
		return sat<F>("IntBgrX11");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto IntBgrX11_BM() {
		static_assert(field_signatures[jField<F>("IntBgrX11_BM")] != -1);
		return sat<F>("IntBgrX11_BM");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto IntRgbX11() {
		static_assert(field_signatures[jField<F>("IntRgbX11")] != -1);
		return sat<F>("IntRgbX11");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto IntRgbX11_BM() {
		static_assert(field_signatures[jField<F>("IntRgbX11_BM")] != -1);
		return sat<F>("IntRgbX11_BM");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto ThreeByteBgrX11() {
		static_assert(field_signatures[jField<F>("ThreeByteBgrX11")] != -1);
		return sat<F>("ThreeByteBgrX11");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto ThreeByteBgrX11_BM() {
		static_assert(field_signatures[jField<F>("ThreeByteBgrX11_BM")] != -1);
		return sat<F>("ThreeByteBgrX11_BM");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto ThreeByteRgbX11() {
		static_assert(field_signatures[jField<F>("ThreeByteRgbX11")] != -1);
		return sat<F>("ThreeByteRgbX11");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto ThreeByteRgbX11_BM() {
		static_assert(field_signatures[jField<F>("ThreeByteRgbX11_BM")] != -1);
		return sat<F>("ThreeByteRgbX11_BM");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto UShort555RgbX11() {
		static_assert(field_signatures[jField<F>("UShort555RgbX11")] != -1);
		return sat<F>("UShort555RgbX11");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto UShort555RgbX11_BM() {
		static_assert(field_signatures[jField<F>("UShort555RgbX11_BM")] != -1);
		return sat<F>("UShort555RgbX11_BM");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto UShort565RgbX11() {
		static_assert(field_signatures[jField<F>("UShort565RgbX11")] != -1);
		return sat<F>("UShort565RgbX11");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto UShort565RgbX11_BM() {
		static_assert(field_signatures[jField<F>("UShort565RgbX11_BM")] != -1);
		return sat<F>("UShort565RgbX11_BM");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto UShortIndexedX11() {
		static_assert(field_signatures[jField<F>("UShortIndexedX11")] != -1);
		return sat<F>("UShortIndexedX11");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto UShortIndexedX11_BM() {
		static_assert(field_signatures[jField<F>("UShortIndexedX11_BM")] != -1);
		return sat<F>("UShortIndexedX11_BM");
	}

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::jint, ::jint, ::jint, ::jint)>("canSourceSendExposures"), //
		jMethod<::jboolean(::sun::java2d::SunGraphics2D, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("copyArea"), //
		jMethod<::sun::java2d::x11::X11SurfaceData$X11WindowSurfaceData(::sun::awt::X11ComponentPeer)>("createData"), //
		jMethod<::sun::java2d::x11::X11SurfaceData$X11PixmapSurfaceData(::sun::awt::X11GraphicsConfig, ::jint, ::jint, ::java::awt::image::ColorModel, ::java::awt::Image, ::jlong, ::jint)>("createData"), //
		jMethod<::jlong(::sun::java2d::pipe::Region, ::jboolean)>("getBlitGC"), //
		jMethod<::java::awt::GraphicsConfiguration()>("getDeviceConfiguration"), //
		jMethod<::sun::awt::X11GraphicsConfig(::sun::awt::X11ComponentPeer)>("getGC"), //
		jMethod<::java::awt::image::Raster(::jint, ::jint, ::jint, ::jint)>("getRaster"), //
		jMethod<::jlong(::sun::java2d::pipe::Region, ::jint, ::java::awt::Composite, ::jint)>("getRenderGC"), //
		jMethod<::sun::java2d::loops::RenderLoops(::sun::java2d::SunGraphics2D)>("getRenderLoops"), //
		jMethod<::sun::java2d::loops::SurfaceType(::sun::awt::X11GraphicsConfig, ::jint)>("getSurfaceType"), //
		jMethod<::sun::java2d::loops::SurfaceType(::sun::awt::X11GraphicsConfig, ::jint, ::jboolean)>("getSurfaceType"), //
		jMethod<::jvoid()>("invalidate"), //
		jMethod<::jboolean()>("isAccelerationEnabled"), //
		jMethod<::jboolean()>("isDgaAvailable"), //
		jMethod<::jvoid()>("makePipes"), //
		jMethod<::sun::java2d::SurfaceDataProxy(::sun::java2d::SurfaceData)>("makeProxyFor"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D)>("validatePipe"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto canSourceSendExposures(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canSourceSendExposures")] != -1);
		return call<R>("canSourceSendExposures", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto copyArea(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("copyArea")] != -1);
		return call<R>("copyArea", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::x11::X11SurfaceData$X11WindowSurfaceData, typename... Args>
	static auto createData(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createData")] != -1);
		return scall<R>("createData", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getBlitGC(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBlitGC")] != -1);
		return call<R>("getBlitGC", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::GraphicsConfiguration, typename... Args>
	auto getDeviceConfiguration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDeviceConfiguration")] != -1);
		return call<R>("getDeviceConfiguration", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::X11GraphicsConfig, typename... Args>
	static auto getGC(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGC")] != -1);
		return scall<R>("getGC", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::Raster, typename... Args>
	auto getRaster(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRaster")] != -1);
		return call<R>("getRaster", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getRenderGC(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRenderGC")] != -1);
		return call<R>("getRenderGC", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::loops::RenderLoops, typename... Args>
	auto getRenderLoops(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRenderLoops")] != -1);
		return call<R>("getRenderLoops", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::loops::SurfaceType, typename... Args>
	static auto getSurfaceType(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSurfaceType")] != -1);
		return scall<R>("getSurfaceType", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto invalidate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidate")] != -1);
		return call<R>("invalidate", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isAccelerationEnabled(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAccelerationEnabled")] != -1);
		return scall<R>("isAccelerationEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isDgaAvailable(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDgaAvailable")] != -1);
		return scall<R>("isDgaAvailable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto makePipes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makePipes")] != -1);
		return call<R>("makePipes", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::SurfaceDataProxy, typename... Args>
	auto makeProxyFor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeProxyFor")] != -1);
		return call<R>("makeProxyFor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto validatePipe(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("validatePipe")] != -1);
		return call<R>("validatePipe", std::forward<Args>(args)...);
	}

};

#endif
