#ifndef sun_java2d_x11_XSurfaceData_HPP
#define sun_java2d_x11_XSurfaceData_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::x11::XSurfaceData : public jObject<::sun::java2d::x11::XSurfaceData, ::sun::java2d::SurfaceData> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_x11 / "XSurfaceData";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::sun::java2d::loops::SurfaceType, ::java::awt::image::ColorModel)>(), //
		jMethod<::jboolean()>("isX11SurfaceDataInitialized"), //
		jMethod<::jvoid()>("setX11SurfaceDataInitialized"), //
	};

	template<typename R = ::jboolean, typename... Args>
	static auto isX11SurfaceDataInitialized(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isX11SurfaceDataInitialized")] != -1);
		return scall<R>("isX11SurfaceDataInitialized", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setX11SurfaceDataInitialized(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setX11SurfaceDataInitialized")] != -1);
		return scall<R>("setX11SurfaceDataInitialized", std::forward<Args>(args)...);
	}

};

#endif
