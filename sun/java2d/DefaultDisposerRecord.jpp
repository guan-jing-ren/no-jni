#ifndef sun_java2d_DefaultDisposerRecord_HPP
#define sun_java2d_DefaultDisposerRecord_HPP

#include "../../jfwd_decl.hpp"

class ::sun::java2d::DefaultDisposerRecord : public jObject<::sun::java2d::DefaultDisposerRecord, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d / "DefaultDisposerRecord";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jlong, ::jlong)>(), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jlong()>("getDataPointer"), //
		jMethod<::jlong()>("getDisposerMethodPointer"), //
		jMethod<::jvoid(::jlong, ::jlong)>("invokeNativeDispose"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getDataPointer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDataPointer")] != -1);
		return call<R>("getDataPointer", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getDisposerMethodPointer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisposerMethodPointer")] != -1);
		return call<R>("getDisposerMethodPointer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto invokeNativeDispose(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invokeNativeDispose")] != -1);
		return scall<R>("invokeNativeDispose", std::forward<Args>(args)...);
	}

};

#endif
