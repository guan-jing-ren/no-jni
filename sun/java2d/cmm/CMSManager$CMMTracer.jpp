#ifndef sun_java2d_cmm_CMSManager$CMMTracer_HPP
#define sun_java2d_cmm_CMSManager$CMMTracer_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::cmm::CMSManager$CMMTracer : public jObject<::sun::java2d::cmm::CMSManager$CMMTracer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_cmm / "CMSManager$CMMTracer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::sun::java2d::cmm::PCMM)>(), //
		jMethod<::sun::java2d::cmm::ColorTransform(::java::awt::color::ICC_Profile, ::jint, ::jint)>("createTransform"), //
		jMethod<::sun::java2d::cmm::ColorTransform(::sun::java2d::cmm::ColorTransform *)>("createTransform"), //
		jMethod<::jvoid(::sun::java2d::cmm::Profile)>("freeProfile"), //
		jMethod<::jvoid(::sun::java2d::cmm::Profile, ::jbyte *)>("getProfileData"), //
		jMethod<::jint(::sun::java2d::cmm::Profile)>("getProfileSize"), //
		jMethod<::jvoid(::sun::java2d::cmm::Profile, ::jint, ::jbyte *)>("getTagData"), //
		jMethod<::jint(::sun::java2d::cmm::Profile, ::jint)>("getTagSize"), //
		jMethod<::sun::java2d::cmm::Profile(::jbyte *)>("loadProfile"), //
		jMethod<::jvoid(::sun::java2d::cmm::Profile, ::jint, ::jbyte *)>("setTagData"), //
	};

	template<typename R = ::sun::java2d::cmm::ColorTransform, typename... Args>
	auto createTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createTransform")] != -1);
		return call<R>("createTransform", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto freeProfile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("freeProfile")] != -1);
		return call<R>("freeProfile", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getProfileData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProfileData")] != -1);
		return call<R>("getProfileData", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getProfileSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProfileSize")] != -1);
		return call<R>("getProfileSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getTagData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTagData")] != -1);
		return call<R>("getTagData", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTagSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTagSize")] != -1);
		return call<R>("getTagSize", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::cmm::Profile, typename... Args>
	auto loadProfile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("loadProfile")] != -1);
		return call<R>("loadProfile", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTagData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTagData")] != -1);
		return call<R>("setTagData", std::forward<Args>(args)...);
	}

};

#endif
