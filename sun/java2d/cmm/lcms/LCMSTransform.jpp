#ifndef sun_java2d_cmm_lcms_LCMSTransform_HPP
#define sun_java2d_cmm_lcms_LCMSTransform_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::java2d::cmm::lcms::LCMSTransform : public jObject<::sun::java2d::cmm::lcms::LCMSTransform, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_cmm_lcms / "LCMSTransform";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::color::ICC_Profile, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::sun::java2d::cmm::ColorTransform *)>(), //
		jMethod<::jvoid(::java::awt::image::BufferedImage, ::java::awt::image::BufferedImage)>("colorConvert"), //
		jMethod<::jvoid(::java::awt::image::Raster, ::java::awt::image::WritableRaster)>("colorConvert"), //
		jMethod<::jvoid(::java::awt::image::Raster, ::java::awt::image::WritableRaster, ::jfloat *, ::jfloat *, ::jfloat *, ::jfloat *)>("colorConvert"), //
		jMethod<::jbyte *(::jbyte *, ::jbyte *)>("colorConvert"), //
		jMethod<::jshort *(::jshort *, ::jshort *)>("colorConvert"), //
		jMethod<::jint()>("getNumInComponents"), //
		jMethod<::jint()>("getNumOutComponents"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto colorConvert(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("colorConvert")] != -1);
		return call<R>("colorConvert", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumInComponents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNumInComponents")] != -1);
		return call<R>("getNumInComponents", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumOutComponents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNumOutComponents")] != -1);
		return call<R>("getNumOutComponents", std::forward<Args>(args)...);
	}

};

#endif
