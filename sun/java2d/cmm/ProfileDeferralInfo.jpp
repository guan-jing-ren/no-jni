#ifndef sun_java2d_cmm_ProfileDeferralInfo_HPP
#define sun_java2d_cmm_ProfileDeferralInfo_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::cmm::ProfileDeferralInfo : public jObject<::sun::java2d::cmm::ProfileDeferralInfo, ::java::io::InputStream> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_cmm / "ProfileDeferralInfo";

	constexpr static Enume field_signatures{
		jField<::jint>("colorSpaceType"), //
		jField<::java::lang::String>("filename"), //
		jField<::jint>("numComponents"), //
		jField<::jint>("profileClass"), //
	};

	template<typename F = ::jint>
	auto colorSpaceType() const {
		static_assert(field_signatures[jField<F>("colorSpaceType")] != -1);
		return at<F>("colorSpaceType");
	}

	template<typename F = ::java::lang::String>
	auto filename() const {
		static_assert(field_signatures[jField<F>("filename")] != -1);
		return at<F>("filename");
	}

	template<typename F = ::jint>
	auto numComponents() const {
		static_assert(field_signatures[jField<F>("numComponents")] != -1);
		return at<F>("numComponents");
	}

	template<typename F = ::jint>
	auto profileClass() const {
		static_assert(field_signatures[jField<F>("profileClass")] != -1);
		return at<F>("profileClass");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::jint, ::jint, ::jint)>(), //
		jMethod<::jint()>("read"), //
	};

	template<typename R = ::jint, typename... Args>
	auto read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("read")] != -1);
		return call<R>("read", std::forward<Args>(args)...);
	}

};

#endif
