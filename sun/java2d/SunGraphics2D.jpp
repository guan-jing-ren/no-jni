#ifndef sun_java2d_SunGraphics2D_HPP
#define sun_java2d_SunGraphics2D_HPP

#include "../../jfwd_decl.hpp"

class ::sun::java2d::SunGraphics2D : public jObject<::sun::java2d::SunGraphics2D, ::java::awt::Graphics2D> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d / "SunGraphics2D";

	constexpr static Enume field_signatures{
		jField<::jint>("CLIP_DEVICE"), //
		jField<::jint>("CLIP_RECTANGULAR"), //
		jField<::jint>("CLIP_SHAPE"), //
		jField<::jint>("COMP_ALPHA"), //
		jField<::jint>("COMP_CUSTOM"), //
		jField<::jint>("COMP_ISCOPY"), //
		jField<::jint>("COMP_XOR"), //
		jField<::jdouble>("MinPenSizeAA"), //
		jField<::jdouble>("MinPenSizeAASquared"), //
		jField<::jdouble>("MinPenSizeSquared"), //
		jField<::jint>("PAINT_ALPHACOLOR"), //
		jField<::jint>("PAINT_CUSTOM"), //
		jField<::jint>("PAINT_GRADIENT"), //
		jField<::jint>("PAINT_LIN_GRADIENT"), //
		jField<::jint>("PAINT_OPAQUECOLOR"), //
		jField<::jint>("PAINT_RAD_GRADIENT"), //
		jField<::jint>("PAINT_TEXTURE"), //
		jField<::jint>("STROKE_CUSTOM"), //
		jField<::jint>("STROKE_THIN"), //
		jField<::jint>("STROKE_THINDASHED"), //
		jField<::jint>("STROKE_WIDE"), //
		jField<::jint>("TRANSFORM_ANY_TRANSLATE"), //
		jField<::jint>("TRANSFORM_GENERIC"), //
		jField<::jint>("TRANSFORM_INT_TRANSLATE"), //
		jField<::jint>("TRANSFORM_ISIDENT"), //
		jField<::jint>("TRANSFORM_TRANSLATESCALE"), //
		jField<::sun::java2d::loops::MaskFill>("alphafill"), //
		jField<::jint>("antialiasHint"), //
		jField<::java::awt::Color>("backgroundColor"), //
		jField<::sun::java2d::pipe::Region>("clipRegion"), //
		jField<::jint>("clipState"), //
		jField<::java::awt::Composite>("composite"), //
		jField<::jint>("compositeState"), //
		jField<::sun::java2d::pipe::Region>("constrainClip"), //
		jField<::jint>("constrainX"), //
		jField<::jint>("constrainY"), //
		jField<::sun::java2d::pipe::PixelDrawPipe>("drawpipe"), //
		jField<::jint>("eargb"), //
		jField<::sun::java2d::pipe::PixelFillPipe>("fillpipe"), //
		jField<::java::awt::Color>("foregroundColor"), //
		jField<::java::awt::RenderingHints>("hints"), //
		jField<::sun::java2d::loops::CompositeType>("imageComp"), //
		jField<::sun::java2d::pipe::DrawImagePipe>("imagepipe"), //
		jField<::jint>("interpolationType"), //
		jField<::jint>("lcdTextContrast"), //
		jField<::sun::java2d::loops::RenderLoops>("loops"), //
		jField<::java::awt::Paint>("paint"), //
		jField<::jint>("paintState"), //
		jField<::jint>("pixel"), //
		jField<::jint>("renderHint"), //
		jField<::sun::java2d::pipe::ShapeDrawPipe>("shapepipe"), //
		jField<::java::awt::Stroke>("stroke"), //
		jField<::jint>("strokeHint"), //
		jField<::jint>("strokeState"), //
		jField<::sun::java2d::SurfaceData>("surfaceData"), //
		jField<::jint>("textAntialiasHint"), //
		jField<::sun::java2d::pipe::TextPipe>("textpipe"), //
		jField<::jint>("transX"), //
		jField<::jint>("transY"), //
		jField<::java::awt::geom::AffineTransform>("transform"), //
		jField<::jint>("transformState"), //
		jField<::java::awt::Shape>("usrClip"), //
	};

	template<typename F = ::jint>
	static auto CLIP_DEVICE() {
		static_assert(field_signatures[jField<F>("CLIP_DEVICE")] != -1);
		return sat<F>("CLIP_DEVICE");
	}

	template<typename F = ::jint>
	static auto CLIP_RECTANGULAR() {
		static_assert(field_signatures[jField<F>("CLIP_RECTANGULAR")] != -1);
		return sat<F>("CLIP_RECTANGULAR");
	}

	template<typename F = ::jint>
	static auto CLIP_SHAPE() {
		static_assert(field_signatures[jField<F>("CLIP_SHAPE")] != -1);
		return sat<F>("CLIP_SHAPE");
	}

	template<typename F = ::jint>
	static auto COMP_ALPHA() {
		static_assert(field_signatures[jField<F>("COMP_ALPHA")] != -1);
		return sat<F>("COMP_ALPHA");
	}

	template<typename F = ::jint>
	static auto COMP_CUSTOM() {
		static_assert(field_signatures[jField<F>("COMP_CUSTOM")] != -1);
		return sat<F>("COMP_CUSTOM");
	}

	template<typename F = ::jint>
	static auto COMP_ISCOPY() {
		static_assert(field_signatures[jField<F>("COMP_ISCOPY")] != -1);
		return sat<F>("COMP_ISCOPY");
	}

	template<typename F = ::jint>
	static auto COMP_XOR() {
		static_assert(field_signatures[jField<F>("COMP_XOR")] != -1);
		return sat<F>("COMP_XOR");
	}

	template<typename F = ::jdouble>
	static auto MinPenSizeAA() {
		static_assert(field_signatures[jField<F>("MinPenSizeAA")] != -1);
		return sat<F>("MinPenSizeAA");
	}

	template<typename F = ::jdouble>
	static auto MinPenSizeAASquared() {
		static_assert(field_signatures[jField<F>("MinPenSizeAASquared")] != -1);
		return sat<F>("MinPenSizeAASquared");
	}

	template<typename F = ::jdouble>
	static auto MinPenSizeSquared() {
		static_assert(field_signatures[jField<F>("MinPenSizeSquared")] != -1);
		return sat<F>("MinPenSizeSquared");
	}

	template<typename F = ::jint>
	static auto PAINT_ALPHACOLOR() {
		static_assert(field_signatures[jField<F>("PAINT_ALPHACOLOR")] != -1);
		return sat<F>("PAINT_ALPHACOLOR");
	}

	template<typename F = ::jint>
	static auto PAINT_CUSTOM() {
		static_assert(field_signatures[jField<F>("PAINT_CUSTOM")] != -1);
		return sat<F>("PAINT_CUSTOM");
	}

	template<typename F = ::jint>
	static auto PAINT_GRADIENT() {
		static_assert(field_signatures[jField<F>("PAINT_GRADIENT")] != -1);
		return sat<F>("PAINT_GRADIENT");
	}

	template<typename F = ::jint>
	static auto PAINT_LIN_GRADIENT() {
		static_assert(field_signatures[jField<F>("PAINT_LIN_GRADIENT")] != -1);
		return sat<F>("PAINT_LIN_GRADIENT");
	}

	template<typename F = ::jint>
	static auto PAINT_OPAQUECOLOR() {
		static_assert(field_signatures[jField<F>("PAINT_OPAQUECOLOR")] != -1);
		return sat<F>("PAINT_OPAQUECOLOR");
	}

	template<typename F = ::jint>
	static auto PAINT_RAD_GRADIENT() {
		static_assert(field_signatures[jField<F>("PAINT_RAD_GRADIENT")] != -1);
		return sat<F>("PAINT_RAD_GRADIENT");
	}

	template<typename F = ::jint>
	static auto PAINT_TEXTURE() {
		static_assert(field_signatures[jField<F>("PAINT_TEXTURE")] != -1);
		return sat<F>("PAINT_TEXTURE");
	}

	template<typename F = ::jint>
	static auto STROKE_CUSTOM() {
		static_assert(field_signatures[jField<F>("STROKE_CUSTOM")] != -1);
		return sat<F>("STROKE_CUSTOM");
	}

	template<typename F = ::jint>
	static auto STROKE_THIN() {
		static_assert(field_signatures[jField<F>("STROKE_THIN")] != -1);
		return sat<F>("STROKE_THIN");
	}

	template<typename F = ::jint>
	static auto STROKE_THINDASHED() {
		static_assert(field_signatures[jField<F>("STROKE_THINDASHED")] != -1);
		return sat<F>("STROKE_THINDASHED");
	}

	template<typename F = ::jint>
	static auto STROKE_WIDE() {
		static_assert(field_signatures[jField<F>("STROKE_WIDE")] != -1);
		return sat<F>("STROKE_WIDE");
	}

	template<typename F = ::jint>
	static auto TRANSFORM_ANY_TRANSLATE() {
		static_assert(field_signatures[jField<F>("TRANSFORM_ANY_TRANSLATE")] != -1);
		return sat<F>("TRANSFORM_ANY_TRANSLATE");
	}

	template<typename F = ::jint>
	static auto TRANSFORM_GENERIC() {
		static_assert(field_signatures[jField<F>("TRANSFORM_GENERIC")] != -1);
		return sat<F>("TRANSFORM_GENERIC");
	}

	template<typename F = ::jint>
	static auto TRANSFORM_INT_TRANSLATE() {
		static_assert(field_signatures[jField<F>("TRANSFORM_INT_TRANSLATE")] != -1);
		return sat<F>("TRANSFORM_INT_TRANSLATE");
	}

	template<typename F = ::jint>
	static auto TRANSFORM_ISIDENT() {
		static_assert(field_signatures[jField<F>("TRANSFORM_ISIDENT")] != -1);
		return sat<F>("TRANSFORM_ISIDENT");
	}

	template<typename F = ::jint>
	static auto TRANSFORM_TRANSLATESCALE() {
		static_assert(field_signatures[jField<F>("TRANSFORM_TRANSLATESCALE")] != -1);
		return sat<F>("TRANSFORM_TRANSLATESCALE");
	}

	template<typename F = ::sun::java2d::loops::MaskFill>
	auto alphafill() const {
		static_assert(field_signatures[jField<F>("alphafill")] != -1);
		return at<F>("alphafill");
	}

	template<typename F = ::jint>
	auto antialiasHint() const {
		static_assert(field_signatures[jField<F>("antialiasHint")] != -1);
		return at<F>("antialiasHint");
	}

	template<typename F = ::java::awt::Color>
	auto backgroundColor() const {
		static_assert(field_signatures[jField<F>("backgroundColor")] != -1);
		return at<F>("backgroundColor");
	}

	template<typename F = ::sun::java2d::pipe::Region>
	auto clipRegion() const {
		static_assert(field_signatures[jField<F>("clipRegion")] != -1);
		return at<F>("clipRegion");
	}

	template<typename F = ::jint>
	auto clipState() const {
		static_assert(field_signatures[jField<F>("clipState")] != -1);
		return at<F>("clipState");
	}

	template<typename F = ::java::awt::Composite>
	auto composite() const {
		static_assert(field_signatures[jField<F>("composite")] != -1);
		return at<F>("composite");
	}

	template<typename F = ::jint>
	auto compositeState() const {
		static_assert(field_signatures[jField<F>("compositeState")] != -1);
		return at<F>("compositeState");
	}

	template<typename F = ::sun::java2d::pipe::Region>
	auto constrainClip() const {
		static_assert(field_signatures[jField<F>("constrainClip")] != -1);
		return at<F>("constrainClip");
	}

	template<typename F = ::jint>
	auto constrainX() const {
		static_assert(field_signatures[jField<F>("constrainX")] != -1);
		return at<F>("constrainX");
	}

	template<typename F = ::jint>
	auto constrainY() const {
		static_assert(field_signatures[jField<F>("constrainY")] != -1);
		return at<F>("constrainY");
	}

	template<typename F = ::sun::java2d::pipe::PixelDrawPipe>
	auto drawpipe() const {
		static_assert(field_signatures[jField<F>("drawpipe")] != -1);
		return at<F>("drawpipe");
	}

	template<typename F = ::jint>
	auto eargb() const {
		static_assert(field_signatures[jField<F>("eargb")] != -1);
		return at<F>("eargb");
	}

	template<typename F = ::sun::java2d::pipe::PixelFillPipe>
	auto fillpipe() const {
		static_assert(field_signatures[jField<F>("fillpipe")] != -1);
		return at<F>("fillpipe");
	}

	template<typename F = ::java::awt::Color>
	auto foregroundColor() const {
		static_assert(field_signatures[jField<F>("foregroundColor")] != -1);
		return at<F>("foregroundColor");
	}

	template<typename F = ::java::awt::RenderingHints>
	auto hints() const {
		static_assert(field_signatures[jField<F>("hints")] != -1);
		return at<F>("hints");
	}

	template<typename F = ::sun::java2d::loops::CompositeType>
	auto imageComp() const {
		static_assert(field_signatures[jField<F>("imageComp")] != -1);
		return at<F>("imageComp");
	}

	template<typename F = ::sun::java2d::pipe::DrawImagePipe>
	auto imagepipe() const {
		static_assert(field_signatures[jField<F>("imagepipe")] != -1);
		return at<F>("imagepipe");
	}

	template<typename F = ::jint>
	auto interpolationType() const {
		static_assert(field_signatures[jField<F>("interpolationType")] != -1);
		return at<F>("interpolationType");
	}

	template<typename F = ::jint>
	auto lcdTextContrast() const {
		static_assert(field_signatures[jField<F>("lcdTextContrast")] != -1);
		return at<F>("lcdTextContrast");
	}

	template<typename F = ::sun::java2d::loops::RenderLoops>
	auto loops() const {
		static_assert(field_signatures[jField<F>("loops")] != -1);
		return at<F>("loops");
	}

	template<typename F = ::java::awt::Paint>
	auto paint() const {
		static_assert(field_signatures[jField<F>("paint")] != -1);
		return at<F>("paint");
	}

	template<typename F = ::jint>
	auto paintState() const {
		static_assert(field_signatures[jField<F>("paintState")] != -1);
		return at<F>("paintState");
	}

	template<typename F = ::jint>
	auto pixel() const {
		static_assert(field_signatures[jField<F>("pixel")] != -1);
		return at<F>("pixel");
	}

	template<typename F = ::jint>
	auto renderHint() const {
		static_assert(field_signatures[jField<F>("renderHint")] != -1);
		return at<F>("renderHint");
	}

	template<typename F = ::sun::java2d::pipe::ShapeDrawPipe>
	auto shapepipe() const {
		static_assert(field_signatures[jField<F>("shapepipe")] != -1);
		return at<F>("shapepipe");
	}

	template<typename F = ::java::awt::Stroke>
	auto stroke() const {
		static_assert(field_signatures[jField<F>("stroke")] != -1);
		return at<F>("stroke");
	}

	template<typename F = ::jint>
	auto strokeHint() const {
		static_assert(field_signatures[jField<F>("strokeHint")] != -1);
		return at<F>("strokeHint");
	}

	template<typename F = ::jint>
	auto strokeState() const {
		static_assert(field_signatures[jField<F>("strokeState")] != -1);
		return at<F>("strokeState");
	}

	template<typename F = ::sun::java2d::SurfaceData>
	auto surfaceData() const {
		static_assert(field_signatures[jField<F>("surfaceData")] != -1);
		return at<F>("surfaceData");
	}

	template<typename F = ::jint>
	auto textAntialiasHint() const {
		static_assert(field_signatures[jField<F>("textAntialiasHint")] != -1);
		return at<F>("textAntialiasHint");
	}

	template<typename F = ::sun::java2d::pipe::TextPipe>
	auto textpipe() const {
		static_assert(field_signatures[jField<F>("textpipe")] != -1);
		return at<F>("textpipe");
	}

	template<typename F = ::jint>
	auto transX() const {
		static_assert(field_signatures[jField<F>("transX")] != -1);
		return at<F>("transX");
	}

	template<typename F = ::jint>
	auto transY() const {
		static_assert(field_signatures[jField<F>("transY")] != -1);
		return at<F>("transY");
	}

	template<typename F = ::java::awt::geom::AffineTransform>
	auto transform() const {
		static_assert(field_signatures[jField<F>("transform")] != -1);
		return at<F>("transform");
	}

	template<typename F = ::jint>
	auto transformState() const {
		static_assert(field_signatures[jField<F>("transformState")] != -1);
		return at<F>("transformState");
	}

	template<typename F = ::java::awt::Shape>
	auto usrClip() const {
		static_assert(field_signatures[jField<F>("usrClip")] != -1);
		return at<F>("usrClip");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::sun::java2d::SurfaceData, ::java::awt::Color, ::java::awt::Color, ::java::awt::Font)>(), //
		jMethod<::jvoid(::java::util::Map)>("addRenderingHints"), //
		jMethod<::sun::java2d::loops::FontInfo(::sun::java2d::loops::FontInfo, ::java::awt::Font, ::java::awt::font::FontRenderContext)>("checkFontInfo"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("clearRect"), //
		jMethod<::jvoid(::java::awt::Shape)>("clip"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("clipRect"), //
		jMethod<::java::awt::geom::AffineTransform()>("cloneTransform"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("constrain"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::sun::java2d::pipe::Region)>("constrain"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("copyArea"), //
		jMethod<::jboolean(::java::awt::Image, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::java::awt::Color, ::java::awt::image::ImageObserver)>("copyImage"), //
		jMethod<::java::awt::Graphics()>("create"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jvoid(::java::awt::Shape)>("draw"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("drawArc"), //
		jMethod<::jvoid(::jbyte *, ::jint, ::jint, ::jint, ::jint)>("drawBytes"), //
		jMethod<::jvoid(::jchar *, ::jint, ::jint, ::jint, ::jint)>("drawChars"), //
		jMethod<::jvoid(::java::awt::font::GlyphVector, ::jfloat, ::jfloat)>("drawGlyphVector"), //
		jMethod<::jboolean(::java::awt::Image, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::java::awt::Color, ::java::awt::image::ImageObserver)>("drawImage"), //
		jMethod<::jboolean(::java::awt::Image, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::java::awt::image::ImageObserver)>("drawImage"), //
		jMethod<::jboolean(::java::awt::Image, ::jint, ::jint, ::jint, ::jint, ::java::awt::Color, ::java::awt::image::ImageObserver)>("drawImage"), //
		jMethod<::jboolean(::java::awt::Image, ::jint, ::jint, ::jint, ::jint, ::java::awt::image::ImageObserver)>("drawImage"), //
		jMethod<::jboolean(::java::awt::Image, ::jint, ::jint, ::java::awt::Color, ::java::awt::image::ImageObserver)>("drawImage"), //
		jMethod<::jboolean(::java::awt::Image, ::jint, ::jint, ::java::awt::image::ImageObserver)>("drawImage"), //
		jMethod<::jboolean(::java::awt::Image, ::java::awt::geom::AffineTransform, ::java::awt::image::ImageObserver)>("drawImage"), //
		jMethod<::jvoid(::java::awt::image::BufferedImage, ::java::awt::image::BufferedImageOp, ::jint, ::jint)>("drawImage"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("drawLine"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("drawOval"), //
		jMethod<::jvoid(::jint *, ::jint *, ::jint)>("drawPolygon"), //
		jMethod<::jvoid(::jint *, ::jint *, ::jint)>("drawPolyline"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("drawRect"), //
		jMethod<::jvoid(::java::awt::image::renderable::RenderableImage, ::java::awt::geom::AffineTransform)>("drawRenderableImage"), //
		jMethod<::jvoid(::java::awt::image::RenderedImage, ::java::awt::geom::AffineTransform)>("drawRenderedImage"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("drawRoundRect"), //
		jMethod<::jvoid(::java::lang::String, ::jfloat, ::jfloat)>("drawString"), //
		jMethod<::jvoid(::java::lang::String, ::jint, ::jint)>("drawString"), //
		jMethod<::jvoid(::java::text::AttributedCharacterIterator, ::jfloat, ::jfloat)>("drawString"), //
		jMethod<::jvoid(::java::text::AttributedCharacterIterator, ::jint, ::jint)>("drawString"), //
		jMethod<::jvoid(::java::awt::Shape)>("fill"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("fillArc"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("fillOval"), //
		jMethod<::jvoid(::jint *, ::jint *, ::jint)>("fillPolygon"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("fillRect"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("fillRoundRect"), //
		jMethod<::jvoid()>("finalize"), //
		jMethod<::java::awt::Color()>("getBackground"), //
		jMethod<::java::awt::Shape()>("getClip"), //
		jMethod<::java::awt::Rectangle()>("getClipBounds"), //
		jMethod<::java::awt::Rectangle(::java::awt::Rectangle)>("getClipBounds"), //
		jMethod<::java::awt::Color()>("getColor"), //
		jMethod<::sun::java2d::pipe::Region()>("getCompClip"), //
		jMethod<::java::awt::Composite()>("getComposite"), //
		jMethod<::sun::java2d::Surface()>("getDestSurface"), //
		jMethod<::java::lang::Object()>("getDestination"), //
		jMethod<::java::awt::image::ColorModel()>("getDeviceColorModel"), //
		jMethod<::java::awt::GraphicsConfiguration()>("getDeviceConfiguration"), //
		jMethod<::java::awt::Font()>("getFont"), //
		jMethod<::sun::java2d::loops::FontInfo()>("getFontInfo"), //
		jMethod<::java::awt::FontMetrics()>("getFontMetrics"), //
		jMethod<::java::awt::FontMetrics(::java::awt::Font)>("getFontMetrics"), //
		jMethod<::java::awt::font::FontRenderContext()>("getFontRenderContext"), //
		jMethod<::sun::java2d::loops::FontInfo(::java::awt::Font, ::java::awt::font::FontRenderContext)>("getGVFontInfo"), //
		jMethod<::java::awt::Paint()>("getPaint"), //
		jMethod<::java::lang::Object(::java::awt::RenderingHints$Key)>("getRenderingHint"), //
		jMethod<::java::awt::RenderingHints()>("getRenderingHints"), //
		jMethod<::java::awt::Stroke()>("getStroke"), //
		jMethod<::sun::java2d::SurfaceData()>("getSurfaceData"), //
		jMethod<::java::awt::geom::AffineTransform()>("getTransform"), //
		jMethod<::jboolean(::java::awt::Rectangle, ::java::awt::Shape, ::jboolean)>("hit"), //
		jMethod<::jboolean(::jint, ::jint, ::jint, ::jint)>("hitClip"), //
		jMethod<::jboolean(::jdouble *)>("isRotated"), //
		jMethod<::jvoid(::jdouble)>("rotate"), //
		jMethod<::jvoid(::jdouble, ::jdouble, ::jdouble)>("rotate"), //
		jMethod<::jvoid(::jdouble, ::jdouble)>("scale"), //
		jMethod<::jvoid(::java::awt::Color)>("setBackground"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("setClip"), //
		jMethod<::jvoid(::java::awt::Shape)>("setClip"), //
		jMethod<::jvoid(::java::awt::Color)>("setColor"), //
		jMethod<::jvoid(::java::awt::Composite)>("setComposite"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("setDevClip"), //
		jMethod<::jvoid(::java::awt::Rectangle)>("setDevClip"), //
		jMethod<::jvoid(::java::awt::Font)>("setFont"), //
		jMethod<::jvoid(::java::awt::Paint)>("setPaint"), //
		jMethod<::jvoid()>("setPaintMode"), //
		jMethod<::jvoid(::java::awt::RenderingHints$Key, ::java::lang::Object)>("setRenderingHint"), //
		jMethod<::jvoid(::java::util::Map)>("setRenderingHints"), //
		jMethod<::jvoid(::java::awt::Stroke)>("setStroke"), //
		jMethod<::jvoid(::java::awt::geom::AffineTransform)>("setTransform"), //
		jMethod<::jvoid(::java::awt::Color)>("setXORMode"), //
		jMethod<::jvoid(::jdouble, ::jdouble)>("shear"), //
		jMethod<::jvoid(::java::awt::geom::AffineTransform)>("transform"), //
		jMethod<::jvoid(::jdouble, ::jdouble)>("translate"), //
		jMethod<::jvoid(::jint, ::jint)>("translate"), //
		jMethod<::java::awt::Shape(::java::awt::Shape)>("untransformShape"), //
		jMethod<::jvoid()>("validatePipe"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addRenderingHints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addRenderingHints")] != -1);
		return call<R>("addRenderingHints", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::loops::FontInfo, typename... Args>
	auto checkFontInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkFontInfo")] != -1);
		return call<R>("checkFontInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clearRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clearRect")] != -1);
		return call<R>("clearRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clip(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clip")] != -1);
		return call<R>("clip", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clipRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clipRect")] != -1);
		return call<R>("clipRect", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::AffineTransform, typename... Args>
	auto cloneTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cloneTransform")] != -1);
		return call<R>("cloneTransform", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto constrain(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("constrain")] != -1);
		return call<R>("constrain", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto copyArea(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("copyArea")] != -1);
		return call<R>("copyArea", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto copyImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("copyImage")] != -1);
		return call<R>("copyImage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Graphics, typename... Args>
	auto create(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create")] != -1);
		return call<R>("create", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto draw(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("draw")] != -1);
		return call<R>("draw", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawArc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawArc")] != -1);
		return call<R>("drawArc", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawBytes")] != -1);
		return call<R>("drawBytes", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawChars(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawChars")] != -1);
		return call<R>("drawChars", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawGlyphVector(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawGlyphVector")] != -1);
		return call<R>("drawGlyphVector", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto drawImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawImage")] != -1);
		return call<R>("drawImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawLine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawLine")] != -1);
		return call<R>("drawLine", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawOval(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawOval")] != -1);
		return call<R>("drawOval", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawPolygon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawPolygon")] != -1);
		return call<R>("drawPolygon", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawPolyline(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawPolyline")] != -1);
		return call<R>("drawPolyline", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawRect")] != -1);
		return call<R>("drawRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawRenderableImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawRenderableImage")] != -1);
		return call<R>("drawRenderableImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawRenderedImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawRenderedImage")] != -1);
		return call<R>("drawRenderedImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawRoundRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawRoundRect")] != -1);
		return call<R>("drawRoundRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawString")] != -1);
		return call<R>("drawString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fill(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fill")] != -1);
		return call<R>("fill", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillArc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fillArc")] != -1);
		return call<R>("fillArc", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillOval(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fillOval")] != -1);
		return call<R>("fillOval", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillPolygon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fillPolygon")] != -1);
		return call<R>("fillPolygon", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fillRect")] != -1);
		return call<R>("fillRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillRoundRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fillRoundRect")] != -1);
		return call<R>("fillRoundRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto finalize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("finalize")] != -1);
		return call<R>("finalize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBackground")] != -1);
		return call<R>("getBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Shape, typename... Args>
	auto getClip(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClip")] != -1);
		return call<R>("getClip", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getClipBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClipBounds")] != -1);
		return call<R>("getClipBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColor")] != -1);
		return call<R>("getColor", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::pipe::Region, typename... Args>
	auto getCompClip(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCompClip")] != -1);
		return call<R>("getCompClip", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Composite, typename... Args>
	auto getComposite(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getComposite")] != -1);
		return call<R>("getComposite", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::Surface, typename... Args>
	auto getDestSurface(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDestSurface")] != -1);
		return call<R>("getDestSurface", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getDestination(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDestination")] != -1);
		return call<R>("getDestination", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::ColorModel, typename... Args>
	auto getDeviceColorModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDeviceColorModel")] != -1);
		return call<R>("getDeviceColorModel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::GraphicsConfiguration, typename... Args>
	auto getDeviceConfiguration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDeviceConfiguration")] != -1);
		return call<R>("getDeviceConfiguration", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Font, typename... Args>
	auto getFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFont")] != -1);
		return call<R>("getFont", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::loops::FontInfo, typename... Args>
	auto getFontInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFontInfo")] != -1);
		return call<R>("getFontInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::FontMetrics, typename... Args>
	auto getFontMetrics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFontMetrics")] != -1);
		return call<R>("getFontMetrics", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::font::FontRenderContext, typename... Args>
	auto getFontRenderContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFontRenderContext")] != -1);
		return call<R>("getFontRenderContext", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::loops::FontInfo, typename... Args>
	auto getGVFontInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGVFontInfo")] != -1);
		return call<R>("getGVFontInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Paint, typename... Args>
	auto getPaint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPaint")] != -1);
		return call<R>("getPaint", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getRenderingHint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRenderingHint")] != -1);
		return call<R>("getRenderingHint", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::RenderingHints, typename... Args>
	auto getRenderingHints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRenderingHints")] != -1);
		return call<R>("getRenderingHints", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Stroke, typename... Args>
	auto getStroke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStroke")] != -1);
		return call<R>("getStroke", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::SurfaceData, typename... Args>
	auto getSurfaceData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSurfaceData")] != -1);
		return call<R>("getSurfaceData", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::geom::AffineTransform, typename... Args>
	auto getTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransform")] != -1);
		return call<R>("getTransform", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hit")] != -1);
		return call<R>("hit", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hitClip(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hitClip")] != -1);
		return call<R>("hitClip", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isRotated(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isRotated")] != -1);
		return scall<R>("isRotated", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto rotate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rotate")] != -1);
		return call<R>("rotate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto scale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("scale")] != -1);
		return call<R>("scale", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBackground")] != -1);
		return call<R>("setBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setClip(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setClip")] != -1);
		return call<R>("setClip", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setColor")] != -1);
		return call<R>("setColor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setComposite(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setComposite")] != -1);
		return call<R>("setComposite", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDevClip(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDevClip")] != -1);
		return call<R>("setDevClip", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFont")] != -1);
		return call<R>("setFont", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPaint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPaint")] != -1);
		return call<R>("setPaint", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPaintMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPaintMode")] != -1);
		return call<R>("setPaintMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRenderingHint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRenderingHint")] != -1);
		return call<R>("setRenderingHint", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRenderingHints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRenderingHints")] != -1);
		return call<R>("setRenderingHints", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setStroke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setStroke")] != -1);
		return call<R>("setStroke", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTransform")] != -1);
		return call<R>("setTransform", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setXORMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setXORMode")] != -1);
		return call<R>("setXORMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto shear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shear")] != -1);
		return call<R>("shear", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto transform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("transform")] != -1);
		return call<R>("transform", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto translate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("translate")] != -1);
		return call<R>("translate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Shape, typename... Args>
	auto untransformShape(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("untransformShape")] != -1);
		return call<R>("untransformShape", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto validatePipe(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("validatePipe")] != -1);
		return call<R>("validatePipe", std::forward<Args>(args)...);
	}

};

#endif
