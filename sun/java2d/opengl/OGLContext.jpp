#ifndef sun_java2d_opengl_OGLContext_HPP
#define sun_java2d_opengl_OGLContext_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::opengl::OGLContext : public jObject<::sun::java2d::opengl::OGLContext, ::sun::java2d::pipe::BufferedContext> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_opengl / "OGLContext";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::sun::java2d::pipe::RenderQueue()>("getRenderQueue"), //
		jMethod<::jvoid()>("restoreState"), //
		jMethod<::jvoid()>("saveState"), //
	};

	template<typename R = ::sun::java2d::pipe::RenderQueue, typename... Args>
	auto getRenderQueue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRenderQueue")] != -1);
		return call<R>("getRenderQueue", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto restoreState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("restoreState")] != -1);
		return call<R>("restoreState", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto saveState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("saveState")] != -1);
		return call<R>("saveState", std::forward<Args>(args)...);
	}

};

#endif
