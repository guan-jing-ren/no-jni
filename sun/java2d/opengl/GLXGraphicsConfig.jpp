#ifndef sun_java2d_opengl_GLXGraphicsConfig_HPP
#define sun_java2d_opengl_GLXGraphicsConfig_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::opengl::GLXGraphicsConfig : public jObject<::sun::java2d::opengl::GLXGraphicsConfig, ::sun::awt::X11GraphicsConfig> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_opengl / "GLXGraphicsConfig";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::sun::java2d::pipe::hw::AccelDeviceEventListener)>("addDeviceEventListener"), //
		jMethod<::java::awt::Image(::java::awt::Component, ::jint, ::jint)>("createAcceleratedImage"), //
		jMethod<::jlong(::sun::awt::X11ComponentPeer, ::jint, ::java::awt::BufferCapabilities)>("createBackBuffer"), //
		jMethod<::java::awt::image::VolatileImage(::java::awt::Component, ::jlong)>("createBackBufferImage"), //
		jMethod<::java::awt::image::BufferedImage(::jint, ::jint)>("createCompatibleImage"), //
		jMethod<::java::awt::image::VolatileImage(::jint, ::jint, ::jint, ::jint)>("createCompatibleVolatileImage"), //
		jMethod<::sun::java2d::SurfaceData(::jint, ::jint, ::jint)>("createManagedSurface"), //
		jMethod<::sun::java2d::SurfaceData(::sun::awt::X11ComponentPeer)>("createSurfaceData"), //
		jMethod<::jvoid(::jlong)>("destroyBackBuffer"), //
		jMethod<::jvoid(::sun::awt::X11ComponentPeer, ::java::awt::Component, ::java::awt::image::VolatileImage, ::jint, ::jint, ::jint, ::jint, ::java::awt::BufferCapabilities$FlipContents)>("flip"), //
		jMethod<::java::awt::BufferCapabilities()>("getBufferCapabilities"), //
		jMethod<::java::awt::image::ColorModel(::jint)>("getColorModel"), //
		jMethod<::sun::java2d::opengl::GLXGraphicsConfig(::sun::awt::X11GraphicsDevice, ::jint)>("getConfig"), //
		jMethod<::sun::java2d::opengl::OGLContext()>("getContext"), //
		jMethod<::sun::java2d::pipe::BufferedContext()>("getContext"), //
		jMethod<::sun::java2d::pipe::hw::ContextCapabilities()>("getContextCapabilities"), //
		jMethod<::java::awt::ImageCapabilities()>("getImageCapabilities"), //
		jMethod<::jlong()>("getNativeConfigInfo"), //
		jMethod<::java::lang::Object()>("getProxyKey"), //
		jMethod<::jboolean(::jint)>("isCapPresent"), //
		jMethod<::jvoid(::sun::java2d::pipe::hw::AccelDeviceEventListener)>("removeDeviceEventListener"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addDeviceEventListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addDeviceEventListener")] != -1);
		return call<R>("addDeviceEventListener", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Image, typename... Args>
	auto createAcceleratedImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createAcceleratedImage")] != -1);
		return call<R>("createAcceleratedImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto createBackBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createBackBuffer")] != -1);
		return call<R>("createBackBuffer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::VolatileImage, typename... Args>
	auto createBackBufferImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createBackBufferImage")] != -1);
		return call<R>("createBackBufferImage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::BufferedImage, typename... Args>
	auto createCompatibleImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createCompatibleImage")] != -1);
		return call<R>("createCompatibleImage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::VolatileImage, typename... Args>
	auto createCompatibleVolatileImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createCompatibleVolatileImage")] != -1);
		return call<R>("createCompatibleVolatileImage", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::SurfaceData, typename... Args>
	auto createManagedSurface(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createManagedSurface")] != -1);
		return call<R>("createManagedSurface", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::SurfaceData, typename... Args>
	auto createSurfaceData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createSurfaceData")] != -1);
		return call<R>("createSurfaceData", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto destroyBackBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("destroyBackBuffer")] != -1);
		return call<R>("destroyBackBuffer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto flip(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("flip")] != -1);
		return call<R>("flip", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::BufferCapabilities, typename... Args>
	auto getBufferCapabilities(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBufferCapabilities")] != -1);
		return call<R>("getBufferCapabilities", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::ColorModel, typename... Args>
	auto getColorModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColorModel")] != -1);
		return call<R>("getColorModel", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::opengl::GLXGraphicsConfig, typename... Args>
	static auto getConfig(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConfig")] != -1);
		return scall<R>("getConfig", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::opengl::OGLContext, typename... Args>
	auto getContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContext")] != -1);
		return call<R>("getContext", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::pipe::hw::ContextCapabilities, typename... Args>
	auto getContextCapabilities(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContextCapabilities")] != -1);
		return call<R>("getContextCapabilities", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::ImageCapabilities, typename... Args>
	auto getImageCapabilities(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getImageCapabilities")] != -1);
		return call<R>("getImageCapabilities", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getNativeConfigInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNativeConfigInfo")] != -1);
		return call<R>("getNativeConfigInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getProxyKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProxyKey")] != -1);
		return call<R>("getProxyKey", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCapPresent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCapPresent")] != -1);
		return call<R>("isCapPresent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeDeviceEventListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeDeviceEventListener")] != -1);
		return call<R>("removeDeviceEventListener", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
