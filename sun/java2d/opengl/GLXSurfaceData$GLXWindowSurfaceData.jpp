#ifndef sun_java2d_opengl_GLXSurfaceData$GLXWindowSurfaceData_HPP
#define sun_java2d_opengl_GLXSurfaceData$GLXWindowSurfaceData_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::opengl::GLXSurfaceData$GLXWindowSurfaceData : public jObject<::sun::java2d::opengl::GLXSurfaceData$GLXWindowSurfaceData, ::sun::java2d::opengl::GLXSurfaceData> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_opengl / "GLXSurfaceData$GLXWindowSurfaceData";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::sun::awt::X11ComponentPeer, ::sun::java2d::opengl::GLXGraphicsConfig)>(), //
		jMethod<::java::awt::Rectangle()>("getBounds"), //
		jMethod<::java::lang::Object()>("getDestination"), //
		jMethod<::sun::java2d::SurfaceData()>("getReplacement"), //
	};

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds")] != -1);
		return call<R>("getBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getDestination(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDestination")] != -1);
		return call<R>("getDestination", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::SurfaceData, typename... Args>
	auto getReplacement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReplacement")] != -1);
		return call<R>("getReplacement", std::forward<Args>(args)...);
	}

};

#endif
