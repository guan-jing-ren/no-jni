#ifndef sun_java2d_opengl_OGLSurfaceData_HPP
#define sun_java2d_opengl_OGLSurfaceData_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::opengl::OGLSurfaceData : public jObject<::sun::java2d::opengl::OGLSurfaceData, ::sun::java2d::SurfaceData> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_opengl / "OGLSurfaceData";

	constexpr static Enume field_signatures{
		jField<::jint>("FBOBJECT"), //
		jField<::jint>("PBUFFER"), //
		jField<::jint>("PF_3BYTE_BGR"), //
		jField<::jint>("PF_BYTE_GRAY"), //
		jField<::jint>("PF_INT_ARGB"), //
		jField<::jint>("PF_INT_ARGB_PRE"), //
		jField<::jint>("PF_INT_BGR"), //
		jField<::jint>("PF_INT_BGRX"), //
		jField<::jint>("PF_INT_RGB"), //
		jField<::jint>("PF_INT_RGBX"), //
		jField<::jint>("PF_USHORT_555_RGB"), //
		jField<::jint>("PF_USHORT_555_RGBX"), //
		jField<::jint>("PF_USHORT_565_RGB"), //
		jField<::jint>("PF_USHORT_GRAY"), //
	};

	template<typename F = ::jint>
	static auto FBOBJECT() {
		static_assert(field_signatures[jField<F>("FBOBJECT")] != -1);
		return sat<F>("FBOBJECT");
	}

	template<typename F = ::jint>
	static auto PBUFFER() {
		static_assert(field_signatures[jField<F>("PBUFFER")] != -1);
		return sat<F>("PBUFFER");
	}

	template<typename F = ::jint>
	static auto PF_3BYTE_BGR() {
		static_assert(field_signatures[jField<F>("PF_3BYTE_BGR")] != -1);
		return sat<F>("PF_3BYTE_BGR");
	}

	template<typename F = ::jint>
	static auto PF_BYTE_GRAY() {
		static_assert(field_signatures[jField<F>("PF_BYTE_GRAY")] != -1);
		return sat<F>("PF_BYTE_GRAY");
	}

	template<typename F = ::jint>
	static auto PF_INT_ARGB() {
		static_assert(field_signatures[jField<F>("PF_INT_ARGB")] != -1);
		return sat<F>("PF_INT_ARGB");
	}

	template<typename F = ::jint>
	static auto PF_INT_ARGB_PRE() {
		static_assert(field_signatures[jField<F>("PF_INT_ARGB_PRE")] != -1);
		return sat<F>("PF_INT_ARGB_PRE");
	}

	template<typename F = ::jint>
	static auto PF_INT_BGR() {
		static_assert(field_signatures[jField<F>("PF_INT_BGR")] != -1);
		return sat<F>("PF_INT_BGR");
	}

	template<typename F = ::jint>
	static auto PF_INT_BGRX() {
		static_assert(field_signatures[jField<F>("PF_INT_BGRX")] != -1);
		return sat<F>("PF_INT_BGRX");
	}

	template<typename F = ::jint>
	static auto PF_INT_RGB() {
		static_assert(field_signatures[jField<F>("PF_INT_RGB")] != -1);
		return sat<F>("PF_INT_RGB");
	}

	template<typename F = ::jint>
	static auto PF_INT_RGBX() {
		static_assert(field_signatures[jField<F>("PF_INT_RGBX")] != -1);
		return sat<F>("PF_INT_RGBX");
	}

	template<typename F = ::jint>
	static auto PF_USHORT_555_RGB() {
		static_assert(field_signatures[jField<F>("PF_USHORT_555_RGB")] != -1);
		return sat<F>("PF_USHORT_555_RGB");
	}

	template<typename F = ::jint>
	static auto PF_USHORT_555_RGBX() {
		static_assert(field_signatures[jField<F>("PF_USHORT_555_RGBX")] != -1);
		return sat<F>("PF_USHORT_555_RGBX");
	}

	template<typename F = ::jint>
	static auto PF_USHORT_565_RGB() {
		static_assert(field_signatures[jField<F>("PF_USHORT_565_RGB")] != -1);
		return sat<F>("PF_USHORT_565_RGB");
	}

	template<typename F = ::jint>
	static auto PF_USHORT_GRAY() {
		static_assert(field_signatures[jField<F>("PF_USHORT_GRAY")] != -1);
		return sat<F>("PF_USHORT_GRAY");
	}

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::sun::java2d::SunGraphics2D)>("canRenderLCDText"), //
		jMethod<::jboolean(::sun::java2d::SunGraphics2D, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("copyArea"), //
		jMethod<::jvoid()>("flush"), //
		jMethod<::sun::java2d::opengl::OGLContext()>("getContext"), //
		jMethod<::sun::java2d::pipe::BufferedContext()>("getContext"), //
		jMethod<::java::awt::Rectangle()>("getNativeBounds"), //
		jMethod<::jlong(::jint)>("getNativeResource"), //
		jMethod<::java::awt::image::Raster(::jint, ::jint, ::jint, ::jint)>("getRaster"), //
		jMethod<::jint()>("getTextureID"), //
		jMethod<::jint()>("getTextureTarget"), //
		jMethod<::jint()>("getType"), //
		jMethod<::sun::java2d::SurfaceDataProxy(::sun::java2d::SurfaceData)>("makeProxyFor"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D)>("validatePipe"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto canRenderLCDText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canRenderLCDText")] != -1);
		return call<R>("canRenderLCDText", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto copyArea(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("copyArea")] != -1);
		return call<R>("copyArea", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto flush(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("flush")] != -1);
		return call<R>("flush", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::opengl::OGLContext, typename... Args>
	auto getContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContext")] != -1);
		return call<R>("getContext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getNativeBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNativeBounds")] != -1);
		return call<R>("getNativeBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getNativeResource(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNativeResource")] != -1);
		return call<R>("getNativeResource", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::Raster, typename... Args>
	auto getRaster(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRaster")] != -1);
		return call<R>("getRaster", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTextureID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextureID")] != -1);
		return call<R>("getTextureID", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTextureTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextureTarget")] != -1);
		return call<R>("getTextureTarget", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::SurfaceDataProxy, typename... Args>
	auto makeProxyFor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeProxyFor")] != -1);
		return call<R>("makeProxyFor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto validatePipe(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("validatePipe")] != -1);
		return call<R>("validatePipe", std::forward<Args>(args)...);
	}

};

#endif
