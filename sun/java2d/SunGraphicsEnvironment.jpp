#ifndef sun_java2d_SunGraphicsEnvironment_HPP
#define sun_java2d_SunGraphicsEnvironment_HPP

#include "../../jfwd_decl.hpp"

class ::sun::java2d::SunGraphicsEnvironment : public jObject<::sun::java2d::SunGraphicsEnvironment, ::java::awt::GraphicsEnvironment> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d / "SunGraphicsEnvironment";

	constexpr static Enume field_signatures{
		jField<::jboolean>("isOpenSolaris"), //
	};

	template<typename F = ::jboolean>
	static auto isOpenSolaris() {
		static_assert(field_signatures[jField<F>("isOpenSolaris")] != -1);
		return sat<F>("isOpenSolaris");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::sun::awt::DisplayChangedListener)>("addDisplayChangedListener"), //
		jMethod<::java::awt::Graphics2D(::java::awt::image::BufferedImage)>("createGraphics"), //
		jMethod<::jvoid()>("displayChanged"), //
		jMethod<::java::awt::Font *()>("getAllFonts"), //
		jMethod<::java::lang::String *()>("getAvailableFontFamilyNames"), //
		jMethod<::java::lang::String *(::java::util::Locale)>("getAvailableFontFamilyNames"), //
		jMethod<::java::awt::GraphicsDevice()>("getDefaultScreenDevice"), //
		jMethod<::sun::font::FontManagerForSGE()>("getFontManagerForSGE"), //
		jMethod<::java::awt::GraphicsDevice *()>("getScreenDevices"), //
		jMethod<::java::awt::Rectangle(::java::awt::GraphicsDevice)>("getUsableBounds"), //
		jMethod<::jboolean()>("isDisplayLocal"), //
		jMethod<::jboolean(::java::awt::peer::ComponentPeer)>("isFlipStrategyPreferred"), //
		jMethod<::jvoid()>("paletteChanged"), //
		jMethod<::jvoid(::sun::awt::DisplayChangedListener)>("removeDisplayChangedListener"), //
		jMethod<::jvoid()>("useAlternateFontforJALocales"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addDisplayChangedListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addDisplayChangedListener")] != -1);
		return call<R>("addDisplayChangedListener", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Graphics2D, typename... Args>
	auto createGraphics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createGraphics")] != -1);
		return call<R>("createGraphics", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto displayChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("displayChanged")] != -1);
		return call<R>("displayChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Font *, typename... Args>
	auto getAllFonts(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAllFonts")] != -1);
		return call<R>("getAllFonts", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getAvailableFontFamilyNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAvailableFontFamilyNames")] != -1);
		return call<R>("getAvailableFontFamilyNames", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::GraphicsDevice, typename... Args>
	auto getDefaultScreenDevice(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultScreenDevice")] != -1);
		return call<R>("getDefaultScreenDevice", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::font::FontManagerForSGE, typename... Args>
	static auto getFontManagerForSGE(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFontManagerForSGE")] != -1);
		return scall<R>("getFontManagerForSGE", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::GraphicsDevice *, typename... Args>
	auto getScreenDevices(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScreenDevices")] != -1);
		return call<R>("getScreenDevices", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	static auto getUsableBounds(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUsableBounds")] != -1);
		return scall<R>("getUsableBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDisplayLocal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDisplayLocal")] != -1);
		return call<R>("isDisplayLocal", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFlipStrategyPreferred(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFlipStrategyPreferred")] != -1);
		return call<R>("isFlipStrategyPreferred", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paletteChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paletteChanged")] != -1);
		return call<R>("paletteChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeDisplayChangedListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeDisplayChangedListener")] != -1);
		return call<R>("removeDisplayChangedListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto useAlternateFontforJALocales(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("useAlternateFontforJALocales")] != -1);
		return scall<R>("useAlternateFontforJALocales", std::forward<Args>(args)...);
	}

};

#endif
