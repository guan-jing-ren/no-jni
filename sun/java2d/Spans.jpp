#ifndef sun_java2d_Spans_HPP
#define sun_java2d_Spans_HPP

#include "../../jfwd_decl.hpp"

class ::sun::java2d::Spans : public jObject<::sun::java2d::Spans, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d / "Spans";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::jfloat, ::jfloat)>("add"), //
		jMethod<::jvoid()>("addInfinite"), //
		jMethod<::jboolean(::jfloat, ::jfloat)>("intersects"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addInfinite(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addInfinite")] != -1);
		return call<R>("addInfinite", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto intersects(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("intersects")] != -1);
		return call<R>("intersects", std::forward<Args>(args)...);
	}

};

#endif
