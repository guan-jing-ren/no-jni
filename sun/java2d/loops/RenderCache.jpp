#ifndef sun_java2d_loops_RenderCache_HPP
#define sun_java2d_loops_RenderCache_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::loops::RenderCache : public jObject<::sun::java2d::loops::RenderCache, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_loops / "RenderCache";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint)>(), //
		jMethod<::java::lang::Object(::sun::java2d::loops::SurfaceType, ::sun::java2d::loops::CompositeType, ::sun::java2d::loops::SurfaceType)>("get"), //
		jMethod<::jvoid(::sun::java2d::loops::SurfaceType, ::sun::java2d::loops::CompositeType, ::sun::java2d::loops::SurfaceType, ::java::lang::Object)>("put"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto put(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("put")] != -1);
		return call<R>("put", std::forward<Args>(args)...);
	}

};

#endif
