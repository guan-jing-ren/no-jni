#ifndef sun_java2d_loops_CompositeType_HPP
#define sun_java2d_loops_CompositeType_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::loops::CompositeType : public jObject<::sun::java2d::loops::CompositeType, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_loops / "CompositeType";

	constexpr static Enume field_signatures{
		jField<::sun::java2d::loops::CompositeType>("AlphaXor"), //
		jField<::sun::java2d::loops::CompositeType>("Any"), //
		jField<::sun::java2d::loops::CompositeType>("AnyAlpha"), //
		jField<::sun::java2d::loops::CompositeType>("Clear"), //
		jField<::java::lang::String>("DESC_ALPHA_XOR"), //
		jField<::java::lang::String>("DESC_ANY"), //
		jField<::java::lang::String>("DESC_ANY_ALPHA"), //
		jField<::java::lang::String>("DESC_CLEAR"), //
		jField<::java::lang::String>("DESC_DST"), //
		jField<::java::lang::String>("DESC_DST_ATOP"), //
		jField<::java::lang::String>("DESC_DST_IN"), //
		jField<::java::lang::String>("DESC_DST_OUT"), //
		jField<::java::lang::String>("DESC_DST_OVER"), //
		jField<::java::lang::String>("DESC_SRC"), //
		jField<::java::lang::String>("DESC_SRC_ATOP"), //
		jField<::java::lang::String>("DESC_SRC_IN"), //
		jField<::java::lang::String>("DESC_SRC_NO_EA"), //
		jField<::java::lang::String>("DESC_SRC_OUT"), //
		jField<::java::lang::String>("DESC_SRC_OVER"), //
		jField<::java::lang::String>("DESC_SRC_OVER_NO_EA"), //
		jField<::java::lang::String>("DESC_XOR"), //
		jField<::sun::java2d::loops::CompositeType>("Dst"), //
		jField<::sun::java2d::loops::CompositeType>("DstAtop"), //
		jField<::sun::java2d::loops::CompositeType>("DstIn"), //
		jField<::sun::java2d::loops::CompositeType>("DstOut"), //
		jField<::sun::java2d::loops::CompositeType>("DstOver"), //
		jField<::sun::java2d::loops::CompositeType>("General"), //
		jField<::sun::java2d::loops::CompositeType>("OpaqueSrcOverNoEa"), //
		jField<::sun::java2d::loops::CompositeType>("Src"), //
		jField<::sun::java2d::loops::CompositeType>("SrcAtop"), //
		jField<::sun::java2d::loops::CompositeType>("SrcIn"), //
		jField<::sun::java2d::loops::CompositeType>("SrcNoEa"), //
		jField<::sun::java2d::loops::CompositeType>("SrcOut"), //
		jField<::sun::java2d::loops::CompositeType>("SrcOver"), //
		jField<::sun::java2d::loops::CompositeType>("SrcOverNoEa"), //
		jField<::sun::java2d::loops::CompositeType>("Xor"), //
	};

	template<typename F = ::sun::java2d::loops::CompositeType>
	static auto AlphaXor() {
		static_assert(field_signatures[jField<F>("AlphaXor")] != -1);
		return sat<F>("AlphaXor");
	}

	template<typename F = ::sun::java2d::loops::CompositeType>
	static auto Any() {
		static_assert(field_signatures[jField<F>("Any")] != -1);
		return sat<F>("Any");
	}

	template<typename F = ::sun::java2d::loops::CompositeType>
	static auto AnyAlpha() {
		static_assert(field_signatures[jField<F>("AnyAlpha")] != -1);
		return sat<F>("AnyAlpha");
	}

	template<typename F = ::sun::java2d::loops::CompositeType>
	static auto Clear() {
		static_assert(field_signatures[jField<F>("Clear")] != -1);
		return sat<F>("Clear");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_ALPHA_XOR() {
		static_assert(field_signatures[jField<F>("DESC_ALPHA_XOR")] != -1);
		return sat<F>("DESC_ALPHA_XOR");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_ANY() {
		static_assert(field_signatures[jField<F>("DESC_ANY")] != -1);
		return sat<F>("DESC_ANY");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_ANY_ALPHA() {
		static_assert(field_signatures[jField<F>("DESC_ANY_ALPHA")] != -1);
		return sat<F>("DESC_ANY_ALPHA");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_CLEAR() {
		static_assert(field_signatures[jField<F>("DESC_CLEAR")] != -1);
		return sat<F>("DESC_CLEAR");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_DST() {
		static_assert(field_signatures[jField<F>("DESC_DST")] != -1);
		return sat<F>("DESC_DST");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_DST_ATOP() {
		static_assert(field_signatures[jField<F>("DESC_DST_ATOP")] != -1);
		return sat<F>("DESC_DST_ATOP");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_DST_IN() {
		static_assert(field_signatures[jField<F>("DESC_DST_IN")] != -1);
		return sat<F>("DESC_DST_IN");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_DST_OUT() {
		static_assert(field_signatures[jField<F>("DESC_DST_OUT")] != -1);
		return sat<F>("DESC_DST_OUT");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_DST_OVER() {
		static_assert(field_signatures[jField<F>("DESC_DST_OVER")] != -1);
		return sat<F>("DESC_DST_OVER");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_SRC() {
		static_assert(field_signatures[jField<F>("DESC_SRC")] != -1);
		return sat<F>("DESC_SRC");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_SRC_ATOP() {
		static_assert(field_signatures[jField<F>("DESC_SRC_ATOP")] != -1);
		return sat<F>("DESC_SRC_ATOP");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_SRC_IN() {
		static_assert(field_signatures[jField<F>("DESC_SRC_IN")] != -1);
		return sat<F>("DESC_SRC_IN");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_SRC_NO_EA() {
		static_assert(field_signatures[jField<F>("DESC_SRC_NO_EA")] != -1);
		return sat<F>("DESC_SRC_NO_EA");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_SRC_OUT() {
		static_assert(field_signatures[jField<F>("DESC_SRC_OUT")] != -1);
		return sat<F>("DESC_SRC_OUT");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_SRC_OVER() {
		static_assert(field_signatures[jField<F>("DESC_SRC_OVER")] != -1);
		return sat<F>("DESC_SRC_OVER");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_SRC_OVER_NO_EA() {
		static_assert(field_signatures[jField<F>("DESC_SRC_OVER_NO_EA")] != -1);
		return sat<F>("DESC_SRC_OVER_NO_EA");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_XOR() {
		static_assert(field_signatures[jField<F>("DESC_XOR")] != -1);
		return sat<F>("DESC_XOR");
	}

	template<typename F = ::sun::java2d::loops::CompositeType>
	static auto Dst() {
		static_assert(field_signatures[jField<F>("Dst")] != -1);
		return sat<F>("Dst");
	}

	template<typename F = ::sun::java2d::loops::CompositeType>
	static auto DstAtop() {
		static_assert(field_signatures[jField<F>("DstAtop")] != -1);
		return sat<F>("DstAtop");
	}

	template<typename F = ::sun::java2d::loops::CompositeType>
	static auto DstIn() {
		static_assert(field_signatures[jField<F>("DstIn")] != -1);
		return sat<F>("DstIn");
	}

	template<typename F = ::sun::java2d::loops::CompositeType>
	static auto DstOut() {
		static_assert(field_signatures[jField<F>("DstOut")] != -1);
		return sat<F>("DstOut");
	}

	template<typename F = ::sun::java2d::loops::CompositeType>
	static auto DstOver() {
		static_assert(field_signatures[jField<F>("DstOver")] != -1);
		return sat<F>("DstOver");
	}

	template<typename F = ::sun::java2d::loops::CompositeType>
	static auto General() {
		static_assert(field_signatures[jField<F>("General")] != -1);
		return sat<F>("General");
	}

	template<typename F = ::sun::java2d::loops::CompositeType>
	static auto OpaqueSrcOverNoEa() {
		static_assert(field_signatures[jField<F>("OpaqueSrcOverNoEa")] != -1);
		return sat<F>("OpaqueSrcOverNoEa");
	}

	template<typename F = ::sun::java2d::loops::CompositeType>
	static auto Src() {
		static_assert(field_signatures[jField<F>("Src")] != -1);
		return sat<F>("Src");
	}

	template<typename F = ::sun::java2d::loops::CompositeType>
	static auto SrcAtop() {
		static_assert(field_signatures[jField<F>("SrcAtop")] != -1);
		return sat<F>("SrcAtop");
	}

	template<typename F = ::sun::java2d::loops::CompositeType>
	static auto SrcIn() {
		static_assert(field_signatures[jField<F>("SrcIn")] != -1);
		return sat<F>("SrcIn");
	}

	template<typename F = ::sun::java2d::loops::CompositeType>
	static auto SrcNoEa() {
		static_assert(field_signatures[jField<F>("SrcNoEa")] != -1);
		return sat<F>("SrcNoEa");
	}

	template<typename F = ::sun::java2d::loops::CompositeType>
	static auto SrcOut() {
		static_assert(field_signatures[jField<F>("SrcOut")] != -1);
		return sat<F>("SrcOut");
	}

	template<typename F = ::sun::java2d::loops::CompositeType>
	static auto SrcOver() {
		static_assert(field_signatures[jField<F>("SrcOver")] != -1);
		return sat<F>("SrcOver");
	}

	template<typename F = ::sun::java2d::loops::CompositeType>
	static auto SrcOverNoEa() {
		static_assert(field_signatures[jField<F>("SrcOverNoEa")] != -1);
		return sat<F>("SrcOverNoEa");
	}

	template<typename F = ::sun::java2d::loops::CompositeType>
	static auto Xor() {
		static_assert(field_signatures[jField<F>("Xor")] != -1);
		return sat<F>("Xor");
	}

	constexpr static Enume method_signatures{
		jMethod<::sun::java2d::loops::CompositeType(::java::lang::String)>("deriveSubType"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::sun::java2d::loops::CompositeType(::java::awt::AlphaComposite)>("forAlphaComposite"), //
		jMethod<::java::lang::String()>("getDescriptor"), //
		jMethod<::sun::java2d::loops::CompositeType()>("getSuperType"), //
		jMethod<::jint()>("getUniqueID"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean(::sun::java2d::loops::CompositeType)>("isDerivedFrom"), //
		jMethod<::jint(::java::lang::String)>("makeUniqueID"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::sun::java2d::loops::CompositeType, typename... Args>
	auto deriveSubType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deriveSubType")] != -1);
		return call<R>("deriveSubType", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::loops::CompositeType, typename... Args>
	static auto forAlphaComposite(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("forAlphaComposite")] != -1);
		return scall<R>("forAlphaComposite", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDescriptor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDescriptor")] != -1);
		return call<R>("getDescriptor", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::loops::CompositeType, typename... Args>
	auto getSuperType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSuperType")] != -1);
		return call<R>("getSuperType", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getUniqueID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUniqueID")] != -1);
		return call<R>("getUniqueID", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDerivedFrom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDerivedFrom")] != -1);
		return call<R>("isDerivedFrom", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto makeUniqueID(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeUniqueID")] != -1);
		return scall<R>("makeUniqueID", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
