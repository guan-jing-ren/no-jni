#ifndef sun_java2d_loops_GeneralRenderer_HPP
#define sun_java2d_loops_GeneralRenderer_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::loops::GeneralRenderer : public jObject<::sun::java2d::loops::GeneralRenderer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_loops / "GeneralRenderer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jboolean(::jint *, ::jint, ::jint, ::jint, ::jint)>("adjustLine"), //
		jMethod<::jvoid(::sun::java2d::loops::PixelWriter, ::sun::java2d::SunGraphics2D, ::sun::java2d::SurfaceData, ::jint, ::jint, ::jint, ::jint)>("doDrawRect"), //
		jMethod<::jvoid()>("register"), //
	};

	template<typename R = ::jboolean, typename... Args>
	static auto adjustLine(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("adjustLine")] != -1);
		return scall<R>("adjustLine", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto doDrawRect(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("doDrawRect")] != -1);
		return scall<R>("doDrawRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto register_(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("register")] != -1);
		return scall<R>("register", std::forward<Args>(args)...);
	}

};

#endif
