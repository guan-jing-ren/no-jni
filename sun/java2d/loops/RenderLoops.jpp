#ifndef sun_java2d_loops_RenderLoops_HPP
#define sun_java2d_loops_RenderLoops_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::loops::RenderLoops : public jObject<::sun::java2d::loops::RenderLoops, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_loops / "RenderLoops";

	constexpr static Enume field_signatures{
		jField<::sun::java2d::loops::DrawGlyphListAA>("drawGlyphListAALoop"), //
		jField<::sun::java2d::loops::DrawGlyphListLCD>("drawGlyphListLCDLoop"), //
		jField<::sun::java2d::loops::DrawGlyphList>("drawGlyphListLoop"), //
		jField<::sun::java2d::loops::DrawLine>("drawLineLoop"), //
		jField<::sun::java2d::loops::DrawParallelogram>("drawParallelogramLoop"), //
		jField<::sun::java2d::loops::DrawPath>("drawPathLoop"), //
		jField<::sun::java2d::loops::DrawPolygons>("drawPolygonsLoop"), //
		jField<::sun::java2d::loops::DrawRect>("drawRectLoop"), //
		jField<::sun::java2d::loops::FillParallelogram>("fillParallelogramLoop"), //
		jField<::sun::java2d::loops::FillPath>("fillPathLoop"), //
		jField<::sun::java2d::loops::FillRect>("fillRectLoop"), //
		jField<::sun::java2d::loops::FillSpans>("fillSpansLoop"), //
		jField<::jint>("primTypeID"), //
	};

	template<typename F = ::sun::java2d::loops::DrawGlyphListAA>
	auto drawGlyphListAALoop() const {
		static_assert(field_signatures[jField<F>("drawGlyphListAALoop")] != -1);
		return at<F>("drawGlyphListAALoop");
	}

	template<typename F = ::sun::java2d::loops::DrawGlyphListLCD>
	auto drawGlyphListLCDLoop() const {
		static_assert(field_signatures[jField<F>("drawGlyphListLCDLoop")] != -1);
		return at<F>("drawGlyphListLCDLoop");
	}

	template<typename F = ::sun::java2d::loops::DrawGlyphList>
	auto drawGlyphListLoop() const {
		static_assert(field_signatures[jField<F>("drawGlyphListLoop")] != -1);
		return at<F>("drawGlyphListLoop");
	}

	template<typename F = ::sun::java2d::loops::DrawLine>
	auto drawLineLoop() const {
		static_assert(field_signatures[jField<F>("drawLineLoop")] != -1);
		return at<F>("drawLineLoop");
	}

	template<typename F = ::sun::java2d::loops::DrawParallelogram>
	auto drawParallelogramLoop() const {
		static_assert(field_signatures[jField<F>("drawParallelogramLoop")] != -1);
		return at<F>("drawParallelogramLoop");
	}

	template<typename F = ::sun::java2d::loops::DrawPath>
	auto drawPathLoop() const {
		static_assert(field_signatures[jField<F>("drawPathLoop")] != -1);
		return at<F>("drawPathLoop");
	}

	template<typename F = ::sun::java2d::loops::DrawPolygons>
	auto drawPolygonsLoop() const {
		static_assert(field_signatures[jField<F>("drawPolygonsLoop")] != -1);
		return at<F>("drawPolygonsLoop");
	}

	template<typename F = ::sun::java2d::loops::DrawRect>
	auto drawRectLoop() const {
		static_assert(field_signatures[jField<F>("drawRectLoop")] != -1);
		return at<F>("drawRectLoop");
	}

	template<typename F = ::sun::java2d::loops::FillParallelogram>
	auto fillParallelogramLoop() const {
		static_assert(field_signatures[jField<F>("fillParallelogramLoop")] != -1);
		return at<F>("fillParallelogramLoop");
	}

	template<typename F = ::sun::java2d::loops::FillPath>
	auto fillPathLoop() const {
		static_assert(field_signatures[jField<F>("fillPathLoop")] != -1);
		return at<F>("fillPathLoop");
	}

	template<typename F = ::sun::java2d::loops::FillRect>
	auto fillRectLoop() const {
		static_assert(field_signatures[jField<F>("fillRectLoop")] != -1);
		return at<F>("fillRectLoop");
	}

	template<typename F = ::sun::java2d::loops::FillSpans>
	auto fillSpansLoop() const {
		static_assert(field_signatures[jField<F>("fillSpansLoop")] != -1);
		return at<F>("fillSpansLoop");
	}

	template<typename F = ::jint>
	static auto primTypeID() {
		static_assert(field_signatures[jField<F>("primTypeID")] != -1);
		return sat<F>("primTypeID");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
	};

};

#endif
