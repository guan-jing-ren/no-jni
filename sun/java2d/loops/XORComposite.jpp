#ifndef sun_java2d_loops_XORComposite_HPP
#define sun_java2d_loops_XORComposite_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::loops::XORComposite : public jObject<::sun::java2d::loops::XORComposite, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_loops / "XORComposite";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::Color, ::sun::java2d::SurfaceData)>(), //
		jMethod<::java::awt::CompositeContext(::java::awt::image::ColorModel, ::java::awt::image::ColorModel, ::java::awt::RenderingHints)>("createContext"), //
		jMethod<::jint()>("getAlphaMask"), //
		jMethod<::java::awt::Color()>("getXorColor"), //
		jMethod<::jint()>("getXorPixel"), //
	};

	template<typename R = ::java::awt::CompositeContext, typename... Args>
	auto createContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createContext")] != -1);
		return call<R>("createContext", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAlphaMask(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlphaMask")] != -1);
		return call<R>("getAlphaMask", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getXorColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getXorColor")] != -1);
		return call<R>("getXorColor", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getXorPixel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getXorPixel")] != -1);
		return call<R>("getXorPixel", std::forward<Args>(args)...);
	}

};

#endif
