#ifndef sun_java2d_loops_ProcessPath$DrawHandler_HPP
#define sun_java2d_loops_ProcessPath$DrawHandler_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::loops::ProcessPath$DrawHandler : public jObject<::sun::java2d::loops::ProcessPath$DrawHandler, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_loops / "ProcessPath$DrawHandler";

	constexpr static Enume field_signatures{
		jField<::jint>("strokeControl"), //
		jField<::jint>("xMax"), //
		jField<::jfloat>("xMaxf"), //
		jField<::jint>("xMin"), //
		jField<::jfloat>("xMinf"), //
		jField<::jint>("yMax"), //
		jField<::jfloat>("yMaxf"), //
		jField<::jint>("yMin"), //
		jField<::jfloat>("yMinf"), //
	};

	template<typename F = ::jint>
	auto strokeControl() const {
		static_assert(field_signatures[jField<F>("strokeControl")] != -1);
		return at<F>("strokeControl");
	}

	template<typename F = ::jint>
	auto xMax() const {
		static_assert(field_signatures[jField<F>("xMax")] != -1);
		return at<F>("xMax");
	}

	template<typename F = ::jfloat>
	auto xMaxf() const {
		static_assert(field_signatures[jField<F>("xMaxf")] != -1);
		return at<F>("xMaxf");
	}

	template<typename F = ::jint>
	auto xMin() const {
		static_assert(field_signatures[jField<F>("xMin")] != -1);
		return at<F>("xMin");
	}

	template<typename F = ::jfloat>
	auto xMinf() const {
		static_assert(field_signatures[jField<F>("xMinf")] != -1);
		return at<F>("xMinf");
	}

	template<typename F = ::jint>
	auto yMax() const {
		static_assert(field_signatures[jField<F>("yMax")] != -1);
		return at<F>("yMax");
	}

	template<typename F = ::jfloat>
	auto yMaxf() const {
		static_assert(field_signatures[jField<F>("yMaxf")] != -1);
		return at<F>("yMaxf");
	}

	template<typename F = ::jint>
	auto yMin() const {
		static_assert(field_signatures[jField<F>("yMin")] != -1);
		return at<F>("yMin");
	}

	template<typename F = ::jfloat>
	auto yMinf() const {
		static_assert(field_signatures[jField<F>("yMinf")] != -1);
		return at<F>("yMinf");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint, ::jint, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint)>(), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("adjustBounds"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("drawLine"), //
		jMethod<::jvoid(::jint, ::jint)>("drawPixel"), //
		jMethod<::jvoid(::jint, ::jint, ::jint)>("drawScanline"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("setBounds"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint)>("setBounds"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto adjustBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("adjustBounds")] != -1);
		return call<R>("adjustBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawLine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawLine")] != -1);
		return call<R>("drawLine", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawPixel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawPixel")] != -1);
		return call<R>("drawPixel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawScanline(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawScanline")] != -1);
		return call<R>("drawScanline", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBounds")] != -1);
		return call<R>("setBounds", std::forward<Args>(args)...);
	}

};

#endif
