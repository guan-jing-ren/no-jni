#ifndef sun_java2d_loops_GraphicsPrimitive_HPP
#define sun_java2d_loops_GraphicsPrimitive_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::loops::GraphicsPrimitive : public jObject<::sun::java2d::loops::GraphicsPrimitive, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_loops / "GraphicsPrimitive";

	constexpr static Enume field_signatures{
		jField<::jint>("TRACECOUNTS"), //
		jField<::jint>("TRACELOG"), //
		jField<::jint>("TRACETIMESTAMP"), //
		jField<::java::lang::String>("tracefile"), //
		jField<::jint>("traceflags"), //
		jField<::java::io::PrintStream>("traceout"), //
	};

	template<typename F = ::jint>
	static auto TRACECOUNTS() {
		static_assert(field_signatures[jField<F>("TRACECOUNTS")] != -1);
		return sat<F>("TRACECOUNTS");
	}

	template<typename F = ::jint>
	static auto TRACELOG() {
		static_assert(field_signatures[jField<F>("TRACELOG")] != -1);
		return sat<F>("TRACELOG");
	}

	template<typename F = ::jint>
	static auto TRACETIMESTAMP() {
		static_assert(field_signatures[jField<F>("TRACETIMESTAMP")] != -1);
		return sat<F>("TRACETIMESTAMP");
	}

	template<typename F = ::java::lang::String>
	static auto tracefile() {
		static_assert(field_signatures[jField<F>("tracefile")] != -1);
		return sat<F>("tracefile");
	}

	template<typename F = ::jint>
	static auto traceflags() {
		static_assert(field_signatures[jField<F>("traceflags")] != -1);
		return sat<F>("traceflags");
	}

	template<typename F = ::java::io::PrintStream>
	static auto traceout() {
		static_assert(field_signatures[jField<F>("traceout")] != -1);
		return sat<F>("traceout");
	}

	constexpr static Enume method_signatures{
		jMethod<::sun::java2d::loops::CompositeType()>("getCompositeType"), //
		jMethod<::sun::java2d::loops::SurfaceType()>("getDestType"), //
		jMethod<::jlong()>("getNativePrim"), //
		jMethod<::jint()>("getPrimTypeID"), //
		jMethod<::java::lang::String()>("getSignature"), //
		jMethod<::sun::java2d::loops::SurfaceType()>("getSourceType"), //
		jMethod<::jint()>("getUniqueID"), //
		jMethod<::jint()>("makePrimTypeID"), //
		jMethod<::sun::java2d::loops::GraphicsPrimitive(::sun::java2d::loops::SurfaceType, ::sun::java2d::loops::CompositeType, ::sun::java2d::loops::SurfaceType)>("makePrimitive"), //
		jMethod<::jint(::jint, ::sun::java2d::loops::SurfaceType, ::sun::java2d::loops::CompositeType, ::sun::java2d::loops::SurfaceType)>("makeUniqueID"), //
		jMethod<::jboolean(::java::lang::String, ::sun::java2d::loops::SurfaceType, ::sun::java2d::loops::CompositeType, ::sun::java2d::loops::SurfaceType)>("satisfies"), //
		jMethod<::java::lang::String(::sun::java2d::loops::CompositeType)>("simplename"), //
		jMethod<::java::lang::String(::sun::java2d::loops::SurfaceType)>("simplename"), //
		jMethod<::java::lang::String(::java::lang::reflect::Field *, ::java::lang::Object)>("simplename"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid(::java::lang::Object)>("tracePrimitive"), //
		jMethod<::sun::java2d::loops::GraphicsPrimitive()>("traceWrap"), //
		jMethod<::jboolean()>("tracingEnabled"), //
	};

	template<typename R = ::sun::java2d::loops::CompositeType, typename... Args>
	auto getCompositeType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCompositeType")] != -1);
		return call<R>("getCompositeType", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::loops::SurfaceType, typename... Args>
	auto getDestType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDestType")] != -1);
		return call<R>("getDestType", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getNativePrim(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNativePrim")] != -1);
		return call<R>("getNativePrim", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPrimTypeID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrimTypeID")] != -1);
		return call<R>("getPrimTypeID", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSignature(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSignature")] != -1);
		return call<R>("getSignature", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::loops::SurfaceType, typename... Args>
	auto getSourceType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSourceType")] != -1);
		return call<R>("getSourceType", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getUniqueID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUniqueID")] != -1);
		return call<R>("getUniqueID", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto makePrimTypeID(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makePrimTypeID")] != -1);
		return scall<R>("makePrimTypeID", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::loops::GraphicsPrimitive, typename... Args>
	auto makePrimitive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makePrimitive")] != -1);
		return call<R>("makePrimitive", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto makeUniqueID(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeUniqueID")] != -1);
		return scall<R>("makeUniqueID", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto satisfies(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("satisfies")] != -1);
		return call<R>("satisfies", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto simplename(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("simplename")] != -1);
		return scall<R>("simplename", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto tracePrimitive(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("tracePrimitive")] != -1);
		return scall<R>("tracePrimitive", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::loops::GraphicsPrimitive, typename... Args>
	auto traceWrap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("traceWrap")] != -1);
		return call<R>("traceWrap", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto tracingEnabled(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("tracingEnabled")] != -1);
		return scall<R>("tracingEnabled", std::forward<Args>(args)...);
	}

};

#endif
