#ifndef sun_java2d_loops_SurfaceType_HPP
#define sun_java2d_loops_SurfaceType_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::loops::SurfaceType : public jObject<::sun::java2d::loops::SurfaceType, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_loops / "SurfaceType";

	constexpr static Enume field_signatures{
		jField<::sun::java2d::loops::SurfaceType>("Any"), //
		jField<::sun::java2d::loops::SurfaceType>("Any3Byte"), //
		jField<::sun::java2d::loops::SurfaceType>("Any4Byte"), //
		jField<::sun::java2d::loops::SurfaceType>("AnyByte"), //
		jField<::sun::java2d::loops::SurfaceType>("AnyByteBinary"), //
		jField<::sun::java2d::loops::SurfaceType>("AnyColor"), //
		jField<::sun::java2d::loops::SurfaceType>("AnyDcm"), //
		jField<::sun::java2d::loops::SurfaceType>("AnyInt"), //
		jField<::sun::java2d::loops::SurfaceType>("AnyPaint"), //
		jField<::sun::java2d::loops::SurfaceType>("AnyShort"), //
		jField<::sun::java2d::loops::SurfaceType>("ByteBinary1Bit"), //
		jField<::sun::java2d::loops::SurfaceType>("ByteBinary2Bit"), //
		jField<::sun::java2d::loops::SurfaceType>("ByteBinary4Bit"), //
		jField<::sun::java2d::loops::SurfaceType>("ByteGray"), //
		jField<::sun::java2d::loops::SurfaceType>("ByteIndexed"), //
		jField<::sun::java2d::loops::SurfaceType>("ByteIndexedBm"), //
		jField<::sun::java2d::loops::SurfaceType>("ByteIndexedOpaque"), //
		jField<::sun::java2d::loops::SurfaceType>("Custom"), //
		jField<::java::lang::String>("DESC_3BYTE_BGR"), //
		jField<::java::lang::String>("DESC_3BYTE_RGB"), //
		jField<::java::lang::String>("DESC_4BYTE_ABGR"), //
		jField<::java::lang::String>("DESC_4BYTE_ABGR_PRE"), //
		jField<::java::lang::String>("DESC_ANY"), //
		jField<::java::lang::String>("DESC_ANY_3BYTE"), //
		jField<::java::lang::String>("DESC_ANY_4BYTE"), //
		jField<::java::lang::String>("DESC_ANY_BYTE"), //
		jField<::java::lang::String>("DESC_ANY_COLOR"), //
		jField<::java::lang::String>("DESC_ANY_INT"), //
		jField<::java::lang::String>("DESC_ANY_INT_DCM"), //
		jField<::java::lang::String>("DESC_ANY_PAINT"), //
		jField<::java::lang::String>("DESC_ANY_SHORT"), //
		jField<::java::lang::String>("DESC_BYTE_BINARY"), //
		jField<::java::lang::String>("DESC_BYTE_BINARY_1BIT"), //
		jField<::java::lang::String>("DESC_BYTE_BINARY_2BIT"), //
		jField<::java::lang::String>("DESC_BYTE_BINARY_4BIT"), //
		jField<::java::lang::String>("DESC_BYTE_GRAY"), //
		jField<::java::lang::String>("DESC_BYTE_INDEXED"), //
		jField<::java::lang::String>("DESC_BYTE_INDEXED_BM"), //
		jField<::java::lang::String>("DESC_BYTE_INDEXED_OPAQUE"), //
		jField<::java::lang::String>("DESC_GRADIENT_PAINT"), //
		jField<::java::lang::String>("DESC_INDEX12_GRAY"), //
		jField<::java::lang::String>("DESC_INDEX8_GRAY"), //
		jField<::java::lang::String>("DESC_INT_ARGB"), //
		jField<::java::lang::String>("DESC_INT_ARGB_BM"), //
		jField<::java::lang::String>("DESC_INT_ARGB_PRE"), //
		jField<::java::lang::String>("DESC_INT_BGR"), //
		jField<::java::lang::String>("DESC_INT_BGRx"), //
		jField<::java::lang::String>("DESC_INT_RGB"), //
		jField<::java::lang::String>("DESC_INT_RGBx"), //
		jField<::java::lang::String>("DESC_LINEAR_GRADIENT_PAINT"), //
		jField<::java::lang::String>("DESC_OPAQUE_COLOR"), //
		jField<::java::lang::String>("DESC_OPAQUE_GRADIENT_PAINT"), //
		jField<::java::lang::String>("DESC_OPAQUE_LINEAR_GRADIENT_PAINT"), //
		jField<::java::lang::String>("DESC_OPAQUE_RADIAL_GRADIENT_PAINT"), //
		jField<::java::lang::String>("DESC_OPAQUE_TEXTURE_PAINT"), //
		jField<::java::lang::String>("DESC_RADIAL_GRADIENT_PAINT"), //
		jField<::java::lang::String>("DESC_TEXTURE_PAINT"), //
		jField<::java::lang::String>("DESC_USHORT_4444_ARGB"), //
		jField<::java::lang::String>("DESC_USHORT_555_RGB"), //
		jField<::java::lang::String>("DESC_USHORT_555_RGBx"), //
		jField<::java::lang::String>("DESC_USHORT_565_RGB"), //
		jField<::java::lang::String>("DESC_USHORT_GRAY"), //
		jField<::java::lang::String>("DESC_USHORT_INDEXED"), //
		jField<::sun::java2d::loops::SurfaceType>("FourByteAbgr"), //
		jField<::sun::java2d::loops::SurfaceType>("FourByteAbgrPre"), //
		jField<::sun::java2d::loops::SurfaceType>("GradientPaint"), //
		jField<::sun::java2d::loops::SurfaceType>("Index12Gray"), //
		jField<::sun::java2d::loops::SurfaceType>("Index8Gray"), //
		jField<::sun::java2d::loops::SurfaceType>("IntArgb"), //
		jField<::sun::java2d::loops::SurfaceType>("IntArgbBm"), //
		jField<::sun::java2d::loops::SurfaceType>("IntArgbPre"), //
		jField<::sun::java2d::loops::SurfaceType>("IntBgr"), //
		jField<::sun::java2d::loops::SurfaceType>("IntBgrx"), //
		jField<::sun::java2d::loops::SurfaceType>("IntRgb"), //
		jField<::sun::java2d::loops::SurfaceType>("IntRgbx"), //
		jField<::sun::java2d::loops::SurfaceType>("LinearGradientPaint"), //
		jField<::sun::java2d::loops::SurfaceType>("OpaqueColor"), //
		jField<::sun::java2d::loops::SurfaceType>("OpaqueGradientPaint"), //
		jField<::sun::java2d::loops::SurfaceType>("OpaqueLinearGradientPaint"), //
		jField<::sun::java2d::loops::SurfaceType>("OpaqueRadialGradientPaint"), //
		jField<::sun::java2d::loops::SurfaceType>("OpaqueTexturePaint"), //
		jField<::sun::java2d::loops::SurfaceType>("RadialGradientPaint"), //
		jField<::sun::java2d::loops::SurfaceType>("TexturePaint"), //
		jField<::sun::java2d::loops::SurfaceType>("ThreeByteBgr"), //
		jField<::sun::java2d::loops::SurfaceType>("ThreeByteRgb"), //
		jField<::sun::java2d::loops::SurfaceType>("Ushort4444Argb"), //
		jField<::sun::java2d::loops::SurfaceType>("Ushort555Rgb"), //
		jField<::sun::java2d::loops::SurfaceType>("Ushort555Rgbx"), //
		jField<::sun::java2d::loops::SurfaceType>("Ushort565Rgb"), //
		jField<::sun::java2d::loops::SurfaceType>("UshortGray"), //
		jField<::sun::java2d::loops::SurfaceType>("UshortIndexed"), //
	};

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto Any() {
		static_assert(field_signatures[jField<F>("Any")] != -1);
		return sat<F>("Any");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto Any3Byte() {
		static_assert(field_signatures[jField<F>("Any3Byte")] != -1);
		return sat<F>("Any3Byte");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto Any4Byte() {
		static_assert(field_signatures[jField<F>("Any4Byte")] != -1);
		return sat<F>("Any4Byte");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto AnyByte() {
		static_assert(field_signatures[jField<F>("AnyByte")] != -1);
		return sat<F>("AnyByte");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto AnyByteBinary() {
		static_assert(field_signatures[jField<F>("AnyByteBinary")] != -1);
		return sat<F>("AnyByteBinary");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto AnyColor() {
		static_assert(field_signatures[jField<F>("AnyColor")] != -1);
		return sat<F>("AnyColor");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto AnyDcm() {
		static_assert(field_signatures[jField<F>("AnyDcm")] != -1);
		return sat<F>("AnyDcm");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto AnyInt() {
		static_assert(field_signatures[jField<F>("AnyInt")] != -1);
		return sat<F>("AnyInt");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto AnyPaint() {
		static_assert(field_signatures[jField<F>("AnyPaint")] != -1);
		return sat<F>("AnyPaint");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto AnyShort() {
		static_assert(field_signatures[jField<F>("AnyShort")] != -1);
		return sat<F>("AnyShort");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto ByteBinary1Bit() {
		static_assert(field_signatures[jField<F>("ByteBinary1Bit")] != -1);
		return sat<F>("ByteBinary1Bit");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto ByteBinary2Bit() {
		static_assert(field_signatures[jField<F>("ByteBinary2Bit")] != -1);
		return sat<F>("ByteBinary2Bit");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto ByteBinary4Bit() {
		static_assert(field_signatures[jField<F>("ByteBinary4Bit")] != -1);
		return sat<F>("ByteBinary4Bit");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto ByteGray() {
		static_assert(field_signatures[jField<F>("ByteGray")] != -1);
		return sat<F>("ByteGray");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto ByteIndexed() {
		static_assert(field_signatures[jField<F>("ByteIndexed")] != -1);
		return sat<F>("ByteIndexed");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto ByteIndexedBm() {
		static_assert(field_signatures[jField<F>("ByteIndexedBm")] != -1);
		return sat<F>("ByteIndexedBm");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto ByteIndexedOpaque() {
		static_assert(field_signatures[jField<F>("ByteIndexedOpaque")] != -1);
		return sat<F>("ByteIndexedOpaque");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto Custom() {
		static_assert(field_signatures[jField<F>("Custom")] != -1);
		return sat<F>("Custom");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_3BYTE_BGR() {
		static_assert(field_signatures[jField<F>("DESC_3BYTE_BGR")] != -1);
		return sat<F>("DESC_3BYTE_BGR");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_3BYTE_RGB() {
		static_assert(field_signatures[jField<F>("DESC_3BYTE_RGB")] != -1);
		return sat<F>("DESC_3BYTE_RGB");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_4BYTE_ABGR() {
		static_assert(field_signatures[jField<F>("DESC_4BYTE_ABGR")] != -1);
		return sat<F>("DESC_4BYTE_ABGR");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_4BYTE_ABGR_PRE() {
		static_assert(field_signatures[jField<F>("DESC_4BYTE_ABGR_PRE")] != -1);
		return sat<F>("DESC_4BYTE_ABGR_PRE");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_ANY() {
		static_assert(field_signatures[jField<F>("DESC_ANY")] != -1);
		return sat<F>("DESC_ANY");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_ANY_3BYTE() {
		static_assert(field_signatures[jField<F>("DESC_ANY_3BYTE")] != -1);
		return sat<F>("DESC_ANY_3BYTE");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_ANY_4BYTE() {
		static_assert(field_signatures[jField<F>("DESC_ANY_4BYTE")] != -1);
		return sat<F>("DESC_ANY_4BYTE");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_ANY_BYTE() {
		static_assert(field_signatures[jField<F>("DESC_ANY_BYTE")] != -1);
		return sat<F>("DESC_ANY_BYTE");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_ANY_COLOR() {
		static_assert(field_signatures[jField<F>("DESC_ANY_COLOR")] != -1);
		return sat<F>("DESC_ANY_COLOR");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_ANY_INT() {
		static_assert(field_signatures[jField<F>("DESC_ANY_INT")] != -1);
		return sat<F>("DESC_ANY_INT");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_ANY_INT_DCM() {
		static_assert(field_signatures[jField<F>("DESC_ANY_INT_DCM")] != -1);
		return sat<F>("DESC_ANY_INT_DCM");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_ANY_PAINT() {
		static_assert(field_signatures[jField<F>("DESC_ANY_PAINT")] != -1);
		return sat<F>("DESC_ANY_PAINT");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_ANY_SHORT() {
		static_assert(field_signatures[jField<F>("DESC_ANY_SHORT")] != -1);
		return sat<F>("DESC_ANY_SHORT");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_BYTE_BINARY() {
		static_assert(field_signatures[jField<F>("DESC_BYTE_BINARY")] != -1);
		return sat<F>("DESC_BYTE_BINARY");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_BYTE_BINARY_1BIT() {
		static_assert(field_signatures[jField<F>("DESC_BYTE_BINARY_1BIT")] != -1);
		return sat<F>("DESC_BYTE_BINARY_1BIT");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_BYTE_BINARY_2BIT() {
		static_assert(field_signatures[jField<F>("DESC_BYTE_BINARY_2BIT")] != -1);
		return sat<F>("DESC_BYTE_BINARY_2BIT");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_BYTE_BINARY_4BIT() {
		static_assert(field_signatures[jField<F>("DESC_BYTE_BINARY_4BIT")] != -1);
		return sat<F>("DESC_BYTE_BINARY_4BIT");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_BYTE_GRAY() {
		static_assert(field_signatures[jField<F>("DESC_BYTE_GRAY")] != -1);
		return sat<F>("DESC_BYTE_GRAY");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_BYTE_INDEXED() {
		static_assert(field_signatures[jField<F>("DESC_BYTE_INDEXED")] != -1);
		return sat<F>("DESC_BYTE_INDEXED");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_BYTE_INDEXED_BM() {
		static_assert(field_signatures[jField<F>("DESC_BYTE_INDEXED_BM")] != -1);
		return sat<F>("DESC_BYTE_INDEXED_BM");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_BYTE_INDEXED_OPAQUE() {
		static_assert(field_signatures[jField<F>("DESC_BYTE_INDEXED_OPAQUE")] != -1);
		return sat<F>("DESC_BYTE_INDEXED_OPAQUE");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_GRADIENT_PAINT() {
		static_assert(field_signatures[jField<F>("DESC_GRADIENT_PAINT")] != -1);
		return sat<F>("DESC_GRADIENT_PAINT");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_INDEX12_GRAY() {
		static_assert(field_signatures[jField<F>("DESC_INDEX12_GRAY")] != -1);
		return sat<F>("DESC_INDEX12_GRAY");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_INDEX8_GRAY() {
		static_assert(field_signatures[jField<F>("DESC_INDEX8_GRAY")] != -1);
		return sat<F>("DESC_INDEX8_GRAY");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_INT_ARGB() {
		static_assert(field_signatures[jField<F>("DESC_INT_ARGB")] != -1);
		return sat<F>("DESC_INT_ARGB");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_INT_ARGB_BM() {
		static_assert(field_signatures[jField<F>("DESC_INT_ARGB_BM")] != -1);
		return sat<F>("DESC_INT_ARGB_BM");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_INT_ARGB_PRE() {
		static_assert(field_signatures[jField<F>("DESC_INT_ARGB_PRE")] != -1);
		return sat<F>("DESC_INT_ARGB_PRE");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_INT_BGR() {
		static_assert(field_signatures[jField<F>("DESC_INT_BGR")] != -1);
		return sat<F>("DESC_INT_BGR");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_INT_BGRx() {
		static_assert(field_signatures[jField<F>("DESC_INT_BGRx")] != -1);
		return sat<F>("DESC_INT_BGRx");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_INT_RGB() {
		static_assert(field_signatures[jField<F>("DESC_INT_RGB")] != -1);
		return sat<F>("DESC_INT_RGB");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_INT_RGBx() {
		static_assert(field_signatures[jField<F>("DESC_INT_RGBx")] != -1);
		return sat<F>("DESC_INT_RGBx");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_LINEAR_GRADIENT_PAINT() {
		static_assert(field_signatures[jField<F>("DESC_LINEAR_GRADIENT_PAINT")] != -1);
		return sat<F>("DESC_LINEAR_GRADIENT_PAINT");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_OPAQUE_COLOR() {
		static_assert(field_signatures[jField<F>("DESC_OPAQUE_COLOR")] != -1);
		return sat<F>("DESC_OPAQUE_COLOR");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_OPAQUE_GRADIENT_PAINT() {
		static_assert(field_signatures[jField<F>("DESC_OPAQUE_GRADIENT_PAINT")] != -1);
		return sat<F>("DESC_OPAQUE_GRADIENT_PAINT");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_OPAQUE_LINEAR_GRADIENT_PAINT() {
		static_assert(field_signatures[jField<F>("DESC_OPAQUE_LINEAR_GRADIENT_PAINT")] != -1);
		return sat<F>("DESC_OPAQUE_LINEAR_GRADIENT_PAINT");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_OPAQUE_RADIAL_GRADIENT_PAINT() {
		static_assert(field_signatures[jField<F>("DESC_OPAQUE_RADIAL_GRADIENT_PAINT")] != -1);
		return sat<F>("DESC_OPAQUE_RADIAL_GRADIENT_PAINT");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_OPAQUE_TEXTURE_PAINT() {
		static_assert(field_signatures[jField<F>("DESC_OPAQUE_TEXTURE_PAINT")] != -1);
		return sat<F>("DESC_OPAQUE_TEXTURE_PAINT");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_RADIAL_GRADIENT_PAINT() {
		static_assert(field_signatures[jField<F>("DESC_RADIAL_GRADIENT_PAINT")] != -1);
		return sat<F>("DESC_RADIAL_GRADIENT_PAINT");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_TEXTURE_PAINT() {
		static_assert(field_signatures[jField<F>("DESC_TEXTURE_PAINT")] != -1);
		return sat<F>("DESC_TEXTURE_PAINT");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_USHORT_4444_ARGB() {
		static_assert(field_signatures[jField<F>("DESC_USHORT_4444_ARGB")] != -1);
		return sat<F>("DESC_USHORT_4444_ARGB");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_USHORT_555_RGB() {
		static_assert(field_signatures[jField<F>("DESC_USHORT_555_RGB")] != -1);
		return sat<F>("DESC_USHORT_555_RGB");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_USHORT_555_RGBx() {
		static_assert(field_signatures[jField<F>("DESC_USHORT_555_RGBx")] != -1);
		return sat<F>("DESC_USHORT_555_RGBx");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_USHORT_565_RGB() {
		static_assert(field_signatures[jField<F>("DESC_USHORT_565_RGB")] != -1);
		return sat<F>("DESC_USHORT_565_RGB");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_USHORT_GRAY() {
		static_assert(field_signatures[jField<F>("DESC_USHORT_GRAY")] != -1);
		return sat<F>("DESC_USHORT_GRAY");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_USHORT_INDEXED() {
		static_assert(field_signatures[jField<F>("DESC_USHORT_INDEXED")] != -1);
		return sat<F>("DESC_USHORT_INDEXED");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto FourByteAbgr() {
		static_assert(field_signatures[jField<F>("FourByteAbgr")] != -1);
		return sat<F>("FourByteAbgr");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto FourByteAbgrPre() {
		static_assert(field_signatures[jField<F>("FourByteAbgrPre")] != -1);
		return sat<F>("FourByteAbgrPre");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto GradientPaint() {
		static_assert(field_signatures[jField<F>("GradientPaint")] != -1);
		return sat<F>("GradientPaint");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto Index12Gray() {
		static_assert(field_signatures[jField<F>("Index12Gray")] != -1);
		return sat<F>("Index12Gray");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto Index8Gray() {
		static_assert(field_signatures[jField<F>("Index8Gray")] != -1);
		return sat<F>("Index8Gray");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto IntArgb() {
		static_assert(field_signatures[jField<F>("IntArgb")] != -1);
		return sat<F>("IntArgb");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto IntArgbBm() {
		static_assert(field_signatures[jField<F>("IntArgbBm")] != -1);
		return sat<F>("IntArgbBm");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto IntArgbPre() {
		static_assert(field_signatures[jField<F>("IntArgbPre")] != -1);
		return sat<F>("IntArgbPre");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto IntBgr() {
		static_assert(field_signatures[jField<F>("IntBgr")] != -1);
		return sat<F>("IntBgr");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto IntBgrx() {
		static_assert(field_signatures[jField<F>("IntBgrx")] != -1);
		return sat<F>("IntBgrx");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto IntRgb() {
		static_assert(field_signatures[jField<F>("IntRgb")] != -1);
		return sat<F>("IntRgb");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto IntRgbx() {
		static_assert(field_signatures[jField<F>("IntRgbx")] != -1);
		return sat<F>("IntRgbx");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto LinearGradientPaint() {
		static_assert(field_signatures[jField<F>("LinearGradientPaint")] != -1);
		return sat<F>("LinearGradientPaint");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto OpaqueColor() {
		static_assert(field_signatures[jField<F>("OpaqueColor")] != -1);
		return sat<F>("OpaqueColor");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto OpaqueGradientPaint() {
		static_assert(field_signatures[jField<F>("OpaqueGradientPaint")] != -1);
		return sat<F>("OpaqueGradientPaint");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto OpaqueLinearGradientPaint() {
		static_assert(field_signatures[jField<F>("OpaqueLinearGradientPaint")] != -1);
		return sat<F>("OpaqueLinearGradientPaint");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto OpaqueRadialGradientPaint() {
		static_assert(field_signatures[jField<F>("OpaqueRadialGradientPaint")] != -1);
		return sat<F>("OpaqueRadialGradientPaint");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto OpaqueTexturePaint() {
		static_assert(field_signatures[jField<F>("OpaqueTexturePaint")] != -1);
		return sat<F>("OpaqueTexturePaint");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto RadialGradientPaint() {
		static_assert(field_signatures[jField<F>("RadialGradientPaint")] != -1);
		return sat<F>("RadialGradientPaint");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto TexturePaint() {
		static_assert(field_signatures[jField<F>("TexturePaint")] != -1);
		return sat<F>("TexturePaint");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto ThreeByteBgr() {
		static_assert(field_signatures[jField<F>("ThreeByteBgr")] != -1);
		return sat<F>("ThreeByteBgr");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto ThreeByteRgb() {
		static_assert(field_signatures[jField<F>("ThreeByteRgb")] != -1);
		return sat<F>("ThreeByteRgb");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto Ushort4444Argb() {
		static_assert(field_signatures[jField<F>("Ushort4444Argb")] != -1);
		return sat<F>("Ushort4444Argb");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto Ushort555Rgb() {
		static_assert(field_signatures[jField<F>("Ushort555Rgb")] != -1);
		return sat<F>("Ushort555Rgb");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto Ushort555Rgbx() {
		static_assert(field_signatures[jField<F>("Ushort555Rgbx")] != -1);
		return sat<F>("Ushort555Rgbx");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto Ushort565Rgb() {
		static_assert(field_signatures[jField<F>("Ushort565Rgb")] != -1);
		return sat<F>("Ushort565Rgb");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto UshortGray() {
		static_assert(field_signatures[jField<F>("UshortGray")] != -1);
		return sat<F>("UshortGray");
	}

	template<typename F = ::sun::java2d::loops::SurfaceType>
	static auto UshortIndexed() {
		static_assert(field_signatures[jField<F>("UshortIndexed")] != -1);
		return sat<F>("UshortIndexed");
	}

	constexpr static Enume method_signatures{
		jMethod<::sun::java2d::loops::SurfaceType(::java::lang::String)>("deriveSubType"), //
		jMethod<::sun::java2d::loops::SurfaceType(::java::lang::String, ::sun::awt::image::PixelConverter)>("deriveSubType"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint()>("getAlphaMask"), //
		jMethod<::java::lang::String()>("getDescriptor"), //
		jMethod<::sun::awt::image::PixelConverter()>("getPixelConverter"), //
		jMethod<::sun::java2d::loops::SurfaceType()>("getSuperType"), //
		jMethod<::jint()>("getUniqueID"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jint(::java::lang::String)>("makeUniqueID"), //
		jMethod<::jint(::jint, ::java::awt::image::ColorModel)>("pixelFor"), //
		jMethod<::jint(::jint, ::java::awt::image::ColorModel)>("rgbFor"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::sun::java2d::loops::SurfaceType, typename... Args>
	auto deriveSubType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deriveSubType")] != -1);
		return call<R>("deriveSubType", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAlphaMask(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlphaMask")] != -1);
		return call<R>("getAlphaMask", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDescriptor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDescriptor")] != -1);
		return call<R>("getDescriptor", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::awt::image::PixelConverter, typename... Args>
	auto getPixelConverter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPixelConverter")] != -1);
		return call<R>("getPixelConverter", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::loops::SurfaceType, typename... Args>
	auto getSuperType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSuperType")] != -1);
		return call<R>("getSuperType", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getUniqueID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUniqueID")] != -1);
		return call<R>("getUniqueID", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto makeUniqueID(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeUniqueID")] != -1);
		return scall<R>("makeUniqueID", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto pixelFor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("pixelFor")] != -1);
		return call<R>("pixelFor", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto rgbFor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rgbFor")] != -1);
		return call<R>("rgbFor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
