#ifndef sun_java2d_loops_GraphicsPrimitiveProxy_HPP
#define sun_java2d_loops_GraphicsPrimitiveProxy_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::loops::GraphicsPrimitiveProxy : public jObject<::sun::java2d::loops::GraphicsPrimitiveProxy, ::sun::java2d::loops::GraphicsPrimitive> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_loops / "GraphicsPrimitiveProxy";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::Class, ::java::lang::String, ::java::lang::String, ::jint, ::sun::java2d::loops::SurfaceType, ::sun::java2d::loops::CompositeType, ::sun::java2d::loops::SurfaceType)>(), //
		jMethod<::sun::java2d::loops::GraphicsPrimitive(::sun::java2d::loops::SurfaceType, ::sun::java2d::loops::CompositeType, ::sun::java2d::loops::SurfaceType)>("makePrimitive"), //
		jMethod<::sun::java2d::loops::GraphicsPrimitive()>("traceWrap"), //
	};

	template<typename R = ::sun::java2d::loops::GraphicsPrimitive, typename... Args>
	auto makePrimitive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makePrimitive")] != -1);
		return call<R>("makePrimitive", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::loops::GraphicsPrimitive, typename... Args>
	auto traceWrap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("traceWrap")] != -1);
		return call<R>("traceWrap", std::forward<Args>(args)...);
	}

};

#endif
