#ifndef sun_java2d_pipe_SpanShapeRenderer_HPP
#define sun_java2d_pipe_SpanShapeRenderer_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::pipe::SpanShapeRenderer : public jObject<::sun::java2d::pipe::SpanShapeRenderer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_pipe / "SpanShapeRenderer";

	constexpr static Enume field_signatures{
		jField<::jint>("NON_RECTILINEAR_TRANSFORM_MASK"), //
	};

	template<typename F = ::jint>
	static auto NON_RECTILINEAR_TRANSFORM_MASK() {
		static_assert(field_signatures[jField<F>("NON_RECTILINEAR_TRANSFORM_MASK")] != -1);
		return sat<F>("NON_RECTILINEAR_TRANSFORM_MASK");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::java::awt::Shape)>("draw"), //
		jMethod<::jvoid(::java::lang::Object)>("endSequence"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::java::awt::Shape)>("fill"), //
		jMethod<::jvoid(::java::lang::Object, ::jint, ::jint, ::jint, ::jint)>("renderBox"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::java::awt::geom::Rectangle2D)>("renderRect"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::sun::java2d::pipe::Region, ::java::awt::Shape, ::sun::java2d::pipe::ShapeSpanIterator)>("renderSpans"), //
		jMethod<::jvoid(::java::lang::Object, ::sun::java2d::pipe::SpanIterator, ::sun::java2d::pipe::Region, ::jint *)>("spanClipLoop"), //
		jMethod<::java::lang::Object(::sun::java2d::SunGraphics2D, ::java::awt::Shape, ::java::awt::Rectangle, ::jint *)>("startSequence"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto draw(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("draw")] != -1);
		return call<R>("draw", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endSequence(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("endSequence")] != -1);
		return call<R>("endSequence", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fill(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fill")] != -1);
		return call<R>("fill", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto renderBox(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("renderBox")] != -1);
		return call<R>("renderBox", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto renderRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("renderRect")] != -1);
		return call<R>("renderRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto renderSpans(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("renderSpans")] != -1);
		return call<R>("renderSpans", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto spanClipLoop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("spanClipLoop")] != -1);
		return call<R>("spanClipLoop", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto startSequence(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("startSequence")] != -1);
		return call<R>("startSequence", std::forward<Args>(args)...);
	}

};

#endif
