#ifndef sun_java2d_pipe_ShapeDrawPipe_HPP
#define sun_java2d_pipe_ShapeDrawPipe_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::pipe::ShapeDrawPipe : public jObject<::sun::java2d::pipe::ShapeDrawPipe, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_pipe / "ShapeDrawPipe";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::java::awt::Shape)>("draw"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::java::awt::Shape)>("fill"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto draw(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("draw")] != -1);
		return call<R>("draw", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fill(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fill")] != -1);
		return call<R>("fill", std::forward<Args>(args)...);
	}

};

#endif
