#ifndef sun_java2d_pipe_ShapeSpanIterator_HPP
#define sun_java2d_pipe_ShapeSpanIterator_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::pipe::ShapeSpanIterator : public jObject<::sun::java2d::pipe::ShapeSpanIterator, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_pipe / "ShapeSpanIterator";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jboolean)>(), //
		jMethod<::jvoid(::jint, ::jfloat *)>("addSegment"), //
		jMethod<::jvoid(::java::awt::geom::PathIterator)>("appendPath"), //
		jMethod<::jvoid(::jint *, ::jint *, ::jint, ::jint, ::jint)>("appendPoly"), //
		jMethod<::jvoid()>("closePath"), //
		jMethod<::jvoid(::jfloat, ::jfloat, ::jfloat, ::jfloat, ::jfloat, ::jfloat)>("curveTo"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jlong()>("getNativeConsumer"), //
		jMethod<::jlong()>("getNativeIterator"), //
		jMethod<::jvoid(::jint *)>("getPathBox"), //
		jMethod<::jvoid()>("initIDs"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("intersectClipBox"), //
		jMethod<::jvoid(::jfloat, ::jfloat)>("lineTo"), //
		jMethod<::jvoid(::jfloat, ::jfloat)>("moveTo"), //
		jMethod<::jboolean(::jint *)>("nextSpan"), //
		jMethod<::jvoid()>("pathDone"), //
		jMethod<::jvoid(::jfloat, ::jfloat, ::jfloat, ::jfloat)>("quadTo"), //
		jMethod<::jvoid(::java::awt::Rectangle)>("setOutputArea"), //
		jMethod<::jvoid(::sun::java2d::pipe::Region)>("setOutputArea"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("setOutputAreaXYWH"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("setOutputAreaXYXY"), //
		jMethod<::jvoid(::jint)>("setRule"), //
		jMethod<::jvoid(::jint)>("skipDownTo"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addSegment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addSegment")] != -1);
		return call<R>("addSegment", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto appendPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("appendPath")] != -1);
		return call<R>("appendPath", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto appendPoly(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("appendPoly")] != -1);
		return call<R>("appendPoly", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto closePath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("closePath")] != -1);
		return call<R>("closePath", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto curveTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("curveTo")] != -1);
		return call<R>("curveTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getNativeConsumer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNativeConsumer")] != -1);
		return call<R>("getNativeConsumer", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getNativeIterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNativeIterator")] != -1);
		return call<R>("getNativeIterator", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getPathBox(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPathBox")] != -1);
		return call<R>("getPathBox", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto initIDs(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initIDs")] != -1);
		return scall<R>("initIDs", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto intersectClipBox(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("intersectClipBox")] != -1);
		return call<R>("intersectClipBox", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto lineTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lineTo")] != -1);
		return call<R>("lineTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto moveTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("moveTo")] != -1);
		return call<R>("moveTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto nextSpan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nextSpan")] != -1);
		return call<R>("nextSpan", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto pathDone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("pathDone")] != -1);
		return call<R>("pathDone", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto quadTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("quadTo")] != -1);
		return call<R>("quadTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOutputArea(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOutputArea")] != -1);
		return call<R>("setOutputArea", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOutputAreaXYWH(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOutputAreaXYWH")] != -1);
		return call<R>("setOutputAreaXYWH", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOutputAreaXYXY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOutputAreaXYXY")] != -1);
		return call<R>("setOutputAreaXYXY", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRule(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRule")] != -1);
		return call<R>("setRule", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto skipDownTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("skipDownTo")] != -1);
		return call<R>("skipDownTo", std::forward<Args>(args)...);
	}

};

#endif
