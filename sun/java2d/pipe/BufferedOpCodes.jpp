#ifndef sun_java2d_pipe_BufferedOpCodes_HPP
#define sun_java2d_pipe_BufferedOpCodes_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::pipe::BufferedOpCodes : public jObject<::sun::java2d::pipe::BufferedOpCodes, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_pipe / "BufferedOpCodes";

	constexpr static Enume field_signatures{
		jField<::jint>("BEGIN_SHAPE_CLIP"), //
		jField<::jint>("BLIT"), //
		jField<::jint>("COPY_AREA"), //
		jField<::jint>("DISABLE_CONVOLVE_OP"), //
		jField<::jint>("DISABLE_LOOKUP_OP"), //
		jField<::jint>("DISABLE_RESCALE_OP"), //
		jField<::jint>("DISPOSE_CONFIG"), //
		jField<::jint>("DISPOSE_SURFACE"), //
		jField<::jint>("DRAW_AAPARALLELOGRAM"), //
		jField<::jint>("DRAW_GLYPH_LIST"), //
		jField<::jint>("DRAW_LINE"), //
		jField<::jint>("DRAW_PARALLELOGRAM"), //
		jField<::jint>("DRAW_PIXEL"), //
		jField<::jint>("DRAW_POLY"), //
		jField<::jint>("DRAW_RECT"), //
		jField<::jint>("DRAW_SCANLINES"), //
		jField<::jint>("ENABLE_CONVOLVE_OP"), //
		jField<::jint>("ENABLE_LOOKUP_OP"), //
		jField<::jint>("ENABLE_RESCALE_OP"), //
		jField<::jint>("END_SHAPE_CLIP"), //
		jField<::jint>("FILL_AAPARALLELOGRAM"), //
		jField<::jint>("FILL_PARALLELOGRAM"), //
		jField<::jint>("FILL_RECT"), //
		jField<::jint>("FILL_SPANS"), //
		jField<::jint>("FLUSH_SURFACE"), //
		jField<::jint>("INVALIDATE_CONTEXT"), //
		jField<::jint>("MASK_BLIT"), //
		jField<::jint>("MASK_FILL"), //
		jField<::jint>("NOOP"), //
		jField<::jint>("RESET_CLIP"), //
		jField<::jint>("RESET_COMPOSITE"), //
		jField<::jint>("RESET_PAINT"), //
		jField<::jint>("RESET_TRANSFORM"), //
		jField<::jint>("RESTORE_DEVICES"), //
		jField<::jint>("RESTORE_STATE"), //
		jField<::jint>("SAVE_STATE"), //
		jField<::jint>("SET_ALPHA_COMPOSITE"), //
		jField<::jint>("SET_COLOR"), //
		jField<::jint>("SET_GRADIENT_PAINT"), //
		jField<::jint>("SET_LINEAR_GRADIENT_PAINT"), //
		jField<::jint>("SET_RADIAL_GRADIENT_PAINT"), //
		jField<::jint>("SET_RECT_CLIP"), //
		jField<::jint>("SET_SCRATCH_SURFACE"), //
		jField<::jint>("SET_SHAPE_CLIP_SPANS"), //
		jField<::jint>("SET_SURFACES"), //
		jField<::jint>("SET_TEXTURE_PAINT"), //
		jField<::jint>("SET_TRANSFORM"), //
		jField<::jint>("SET_XOR_COMPOSITE"), //
		jField<::jint>("SURFACE_TO_SW_BLIT"), //
		jField<::jint>("SWAP_BUFFERS"), //
		jField<::jint>("SYNC"), //
	};

	template<typename F = ::jint>
	static auto BEGIN_SHAPE_CLIP() {
		static_assert(field_signatures[jField<F>("BEGIN_SHAPE_CLIP")] != -1);
		return sat<F>("BEGIN_SHAPE_CLIP");
	}

	template<typename F = ::jint>
	static auto BLIT() {
		static_assert(field_signatures[jField<F>("BLIT")] != -1);
		return sat<F>("BLIT");
	}

	template<typename F = ::jint>
	static auto COPY_AREA() {
		static_assert(field_signatures[jField<F>("COPY_AREA")] != -1);
		return sat<F>("COPY_AREA");
	}

	template<typename F = ::jint>
	static auto DISABLE_CONVOLVE_OP() {
		static_assert(field_signatures[jField<F>("DISABLE_CONVOLVE_OP")] != -1);
		return sat<F>("DISABLE_CONVOLVE_OP");
	}

	template<typename F = ::jint>
	static auto DISABLE_LOOKUP_OP() {
		static_assert(field_signatures[jField<F>("DISABLE_LOOKUP_OP")] != -1);
		return sat<F>("DISABLE_LOOKUP_OP");
	}

	template<typename F = ::jint>
	static auto DISABLE_RESCALE_OP() {
		static_assert(field_signatures[jField<F>("DISABLE_RESCALE_OP")] != -1);
		return sat<F>("DISABLE_RESCALE_OP");
	}

	template<typename F = ::jint>
	static auto DISPOSE_CONFIG() {
		static_assert(field_signatures[jField<F>("DISPOSE_CONFIG")] != -1);
		return sat<F>("DISPOSE_CONFIG");
	}

	template<typename F = ::jint>
	static auto DISPOSE_SURFACE() {
		static_assert(field_signatures[jField<F>("DISPOSE_SURFACE")] != -1);
		return sat<F>("DISPOSE_SURFACE");
	}

	template<typename F = ::jint>
	static auto DRAW_AAPARALLELOGRAM() {
		static_assert(field_signatures[jField<F>("DRAW_AAPARALLELOGRAM")] != -1);
		return sat<F>("DRAW_AAPARALLELOGRAM");
	}

	template<typename F = ::jint>
	static auto DRAW_GLYPH_LIST() {
		static_assert(field_signatures[jField<F>("DRAW_GLYPH_LIST")] != -1);
		return sat<F>("DRAW_GLYPH_LIST");
	}

	template<typename F = ::jint>
	static auto DRAW_LINE() {
		static_assert(field_signatures[jField<F>("DRAW_LINE")] != -1);
		return sat<F>("DRAW_LINE");
	}

	template<typename F = ::jint>
	static auto DRAW_PARALLELOGRAM() {
		static_assert(field_signatures[jField<F>("DRAW_PARALLELOGRAM")] != -1);
		return sat<F>("DRAW_PARALLELOGRAM");
	}

	template<typename F = ::jint>
	static auto DRAW_PIXEL() {
		static_assert(field_signatures[jField<F>("DRAW_PIXEL")] != -1);
		return sat<F>("DRAW_PIXEL");
	}

	template<typename F = ::jint>
	static auto DRAW_POLY() {
		static_assert(field_signatures[jField<F>("DRAW_POLY")] != -1);
		return sat<F>("DRAW_POLY");
	}

	template<typename F = ::jint>
	static auto DRAW_RECT() {
		static_assert(field_signatures[jField<F>("DRAW_RECT")] != -1);
		return sat<F>("DRAW_RECT");
	}

	template<typename F = ::jint>
	static auto DRAW_SCANLINES() {
		static_assert(field_signatures[jField<F>("DRAW_SCANLINES")] != -1);
		return sat<F>("DRAW_SCANLINES");
	}

	template<typename F = ::jint>
	static auto ENABLE_CONVOLVE_OP() {
		static_assert(field_signatures[jField<F>("ENABLE_CONVOLVE_OP")] != -1);
		return sat<F>("ENABLE_CONVOLVE_OP");
	}

	template<typename F = ::jint>
	static auto ENABLE_LOOKUP_OP() {
		static_assert(field_signatures[jField<F>("ENABLE_LOOKUP_OP")] != -1);
		return sat<F>("ENABLE_LOOKUP_OP");
	}

	template<typename F = ::jint>
	static auto ENABLE_RESCALE_OP() {
		static_assert(field_signatures[jField<F>("ENABLE_RESCALE_OP")] != -1);
		return sat<F>("ENABLE_RESCALE_OP");
	}

	template<typename F = ::jint>
	static auto END_SHAPE_CLIP() {
		static_assert(field_signatures[jField<F>("END_SHAPE_CLIP")] != -1);
		return sat<F>("END_SHAPE_CLIP");
	}

	template<typename F = ::jint>
	static auto FILL_AAPARALLELOGRAM() {
		static_assert(field_signatures[jField<F>("FILL_AAPARALLELOGRAM")] != -1);
		return sat<F>("FILL_AAPARALLELOGRAM");
	}

	template<typename F = ::jint>
	static auto FILL_PARALLELOGRAM() {
		static_assert(field_signatures[jField<F>("FILL_PARALLELOGRAM")] != -1);
		return sat<F>("FILL_PARALLELOGRAM");
	}

	template<typename F = ::jint>
	static auto FILL_RECT() {
		static_assert(field_signatures[jField<F>("FILL_RECT")] != -1);
		return sat<F>("FILL_RECT");
	}

	template<typename F = ::jint>
	static auto FILL_SPANS() {
		static_assert(field_signatures[jField<F>("FILL_SPANS")] != -1);
		return sat<F>("FILL_SPANS");
	}

	template<typename F = ::jint>
	static auto FLUSH_SURFACE() {
		static_assert(field_signatures[jField<F>("FLUSH_SURFACE")] != -1);
		return sat<F>("FLUSH_SURFACE");
	}

	template<typename F = ::jint>
	static auto INVALIDATE_CONTEXT() {
		static_assert(field_signatures[jField<F>("INVALIDATE_CONTEXT")] != -1);
		return sat<F>("INVALIDATE_CONTEXT");
	}

	template<typename F = ::jint>
	static auto MASK_BLIT() {
		static_assert(field_signatures[jField<F>("MASK_BLIT")] != -1);
		return sat<F>("MASK_BLIT");
	}

	template<typename F = ::jint>
	static auto MASK_FILL() {
		static_assert(field_signatures[jField<F>("MASK_FILL")] != -1);
		return sat<F>("MASK_FILL");
	}

	template<typename F = ::jint>
	static auto NOOP() {
		static_assert(field_signatures[jField<F>("NOOP")] != -1);
		return sat<F>("NOOP");
	}

	template<typename F = ::jint>
	static auto RESET_CLIP() {
		static_assert(field_signatures[jField<F>("RESET_CLIP")] != -1);
		return sat<F>("RESET_CLIP");
	}

	template<typename F = ::jint>
	static auto RESET_COMPOSITE() {
		static_assert(field_signatures[jField<F>("RESET_COMPOSITE")] != -1);
		return sat<F>("RESET_COMPOSITE");
	}

	template<typename F = ::jint>
	static auto RESET_PAINT() {
		static_assert(field_signatures[jField<F>("RESET_PAINT")] != -1);
		return sat<F>("RESET_PAINT");
	}

	template<typename F = ::jint>
	static auto RESET_TRANSFORM() {
		static_assert(field_signatures[jField<F>("RESET_TRANSFORM")] != -1);
		return sat<F>("RESET_TRANSFORM");
	}

	template<typename F = ::jint>
	static auto RESTORE_DEVICES() {
		static_assert(field_signatures[jField<F>("RESTORE_DEVICES")] != -1);
		return sat<F>("RESTORE_DEVICES");
	}

	template<typename F = ::jint>
	static auto RESTORE_STATE() {
		static_assert(field_signatures[jField<F>("RESTORE_STATE")] != -1);
		return sat<F>("RESTORE_STATE");
	}

	template<typename F = ::jint>
	static auto SAVE_STATE() {
		static_assert(field_signatures[jField<F>("SAVE_STATE")] != -1);
		return sat<F>("SAVE_STATE");
	}

	template<typename F = ::jint>
	static auto SET_ALPHA_COMPOSITE() {
		static_assert(field_signatures[jField<F>("SET_ALPHA_COMPOSITE")] != -1);
		return sat<F>("SET_ALPHA_COMPOSITE");
	}

	template<typename F = ::jint>
	static auto SET_COLOR() {
		static_assert(field_signatures[jField<F>("SET_COLOR")] != -1);
		return sat<F>("SET_COLOR");
	}

	template<typename F = ::jint>
	static auto SET_GRADIENT_PAINT() {
		static_assert(field_signatures[jField<F>("SET_GRADIENT_PAINT")] != -1);
		return sat<F>("SET_GRADIENT_PAINT");
	}

	template<typename F = ::jint>
	static auto SET_LINEAR_GRADIENT_PAINT() {
		static_assert(field_signatures[jField<F>("SET_LINEAR_GRADIENT_PAINT")] != -1);
		return sat<F>("SET_LINEAR_GRADIENT_PAINT");
	}

	template<typename F = ::jint>
	static auto SET_RADIAL_GRADIENT_PAINT() {
		static_assert(field_signatures[jField<F>("SET_RADIAL_GRADIENT_PAINT")] != -1);
		return sat<F>("SET_RADIAL_GRADIENT_PAINT");
	}

	template<typename F = ::jint>
	static auto SET_RECT_CLIP() {
		static_assert(field_signatures[jField<F>("SET_RECT_CLIP")] != -1);
		return sat<F>("SET_RECT_CLIP");
	}

	template<typename F = ::jint>
	static auto SET_SCRATCH_SURFACE() {
		static_assert(field_signatures[jField<F>("SET_SCRATCH_SURFACE")] != -1);
		return sat<F>("SET_SCRATCH_SURFACE");
	}

	template<typename F = ::jint>
	static auto SET_SHAPE_CLIP_SPANS() {
		static_assert(field_signatures[jField<F>("SET_SHAPE_CLIP_SPANS")] != -1);
		return sat<F>("SET_SHAPE_CLIP_SPANS");
	}

	template<typename F = ::jint>
	static auto SET_SURFACES() {
		static_assert(field_signatures[jField<F>("SET_SURFACES")] != -1);
		return sat<F>("SET_SURFACES");
	}

	template<typename F = ::jint>
	static auto SET_TEXTURE_PAINT() {
		static_assert(field_signatures[jField<F>("SET_TEXTURE_PAINT")] != -1);
		return sat<F>("SET_TEXTURE_PAINT");
	}

	template<typename F = ::jint>
	static auto SET_TRANSFORM() {
		static_assert(field_signatures[jField<F>("SET_TRANSFORM")] != -1);
		return sat<F>("SET_TRANSFORM");
	}

	template<typename F = ::jint>
	static auto SET_XOR_COMPOSITE() {
		static_assert(field_signatures[jField<F>("SET_XOR_COMPOSITE")] != -1);
		return sat<F>("SET_XOR_COMPOSITE");
	}

	template<typename F = ::jint>
	static auto SURFACE_TO_SW_BLIT() {
		static_assert(field_signatures[jField<F>("SURFACE_TO_SW_BLIT")] != -1);
		return sat<F>("SURFACE_TO_SW_BLIT");
	}

	template<typename F = ::jint>
	static auto SWAP_BUFFERS() {
		static_assert(field_signatures[jField<F>("SWAP_BUFFERS")] != -1);
		return sat<F>("SWAP_BUFFERS");
	}

	template<typename F = ::jint>
	static auto SYNC() {
		static_assert(field_signatures[jField<F>("SYNC")] != -1);
		return sat<F>("SYNC");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
	};

};

#endif
