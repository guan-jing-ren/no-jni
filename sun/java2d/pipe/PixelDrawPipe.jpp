#ifndef sun_java2d_pipe_PixelDrawPipe_HPP
#define sun_java2d_pipe_PixelDrawPipe_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::pipe::PixelDrawPipe : public jObject<::sun::java2d::pipe::PixelDrawPipe, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_pipe / "PixelDrawPipe";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("drawArc"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::jint, ::jint, ::jint, ::jint)>("drawLine"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::jint, ::jint, ::jint, ::jint)>("drawOval"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::jint *, ::jint *, ::jint)>("drawPolygon"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::jint *, ::jint *, ::jint)>("drawPolyline"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::jint, ::jint, ::jint, ::jint)>("drawRect"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("drawRoundRect"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto drawArc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawArc")] != -1);
		return call<R>("drawArc", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawLine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawLine")] != -1);
		return call<R>("drawLine", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawOval(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawOval")] != -1);
		return call<R>("drawOval", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawPolygon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawPolygon")] != -1);
		return call<R>("drawPolygon", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawPolyline(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawPolyline")] != -1);
		return call<R>("drawPolyline", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawRect")] != -1);
		return call<R>("drawRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawRoundRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawRoundRect")] != -1);
		return call<R>("drawRoundRect", std::forward<Args>(args)...);
	}

};

#endif
