#ifndef sun_java2d_pipe_RegionIterator_HPP
#define sun_java2d_pipe_RegionIterator_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::pipe::RegionIterator : public jObject<::sun::java2d::pipe::RegionIterator, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_pipe / "RegionIterator";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::sun::java2d::pipe::RegionIterator)>("copyStateFrom"), //
		jMethod<::sun::java2d::pipe::RegionIterator()>("createCopy"), //
		jMethod<::jboolean(::jint *)>("nextXBand"), //
		jMethod<::jboolean(::jint *)>("nextYRange"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto copyStateFrom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("copyStateFrom")] != -1);
		return call<R>("copyStateFrom", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::pipe::RegionIterator, typename... Args>
	auto createCopy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createCopy")] != -1);
		return call<R>("createCopy", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto nextXBand(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nextXBand")] != -1);
		return call<R>("nextXBand", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto nextYRange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nextYRange")] != -1);
		return call<R>("nextYRange", std::forward<Args>(args)...);
	}

};

#endif
