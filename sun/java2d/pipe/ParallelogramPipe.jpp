#ifndef sun_java2d_pipe_ParallelogramPipe_HPP
#define sun_java2d_pipe_ParallelogramPipe_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::pipe::ParallelogramPipe : public jObject<::sun::java2d::pipe::ParallelogramPipe, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_pipe / "ParallelogramPipe";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble)>("drawParallelogram"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble)>("fillParallelogram"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto drawParallelogram(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawParallelogram")] != -1);
		return call<R>("drawParallelogram", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillParallelogram(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fillParallelogram")] != -1);
		return call<R>("fillParallelogram", std::forward<Args>(args)...);
	}

};

#endif
