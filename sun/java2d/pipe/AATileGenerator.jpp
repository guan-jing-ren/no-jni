#ifndef sun_java2d_pipe_AATileGenerator_HPP
#define sun_java2d_pipe_AATileGenerator_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::pipe::AATileGenerator : public jObject<::sun::java2d::pipe::AATileGenerator, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_pipe / "AATileGenerator";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jvoid(::jbyte *, ::jint, ::jint)>("getAlpha"), //
		jMethod<::jint()>("getTileHeight"), //
		jMethod<::jint()>("getTileWidth"), //
		jMethod<::jint()>("getTypicalAlpha"), //
		jMethod<::jvoid()>("nextTile"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getAlpha(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlpha")] != -1);
		return call<R>("getAlpha", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTileHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTileHeight")] != -1);
		return call<R>("getTileHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTileWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTileWidth")] != -1);
		return call<R>("getTileWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTypicalAlpha(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTypicalAlpha")] != -1);
		return call<R>("getTypicalAlpha", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto nextTile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nextTile")] != -1);
		return call<R>("nextTile", std::forward<Args>(args)...);
	}

};

#endif
