#ifndef sun_java2d_pipe_SpanShapeRenderer$Simple_HPP
#define sun_java2d_pipe_SpanShapeRenderer$Simple_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::pipe::SpanShapeRenderer$Simple : public jObject<::sun::java2d::pipe::SpanShapeRenderer$Simple, ::sun::java2d::pipe::SpanShapeRenderer> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_pipe / "SpanShapeRenderer$Simple";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::lang::Object)>("endSequence"), //
		jMethod<::jvoid(::java::lang::Object, ::jint, ::jint, ::jint, ::jint)>("renderBox"), //
		jMethod<::java::lang::Object(::sun::java2d::SunGraphics2D, ::java::awt::Shape, ::java::awt::Rectangle, ::jint *)>("startSequence"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto endSequence(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("endSequence")] != -1);
		return call<R>("endSequence", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto renderBox(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("renderBox")] != -1);
		return call<R>("renderBox", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto startSequence(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("startSequence")] != -1);
		return call<R>("startSequence", std::forward<Args>(args)...);
	}

};

#endif
