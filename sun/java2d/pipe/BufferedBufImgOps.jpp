#ifndef sun_java2d_pipe_BufferedBufImgOps_HPP
#define sun_java2d_pipe_BufferedBufImgOps_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::pipe::BufferedBufImgOps : public jObject<::sun::java2d::pipe::BufferedBufImgOps, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_pipe / "BufferedBufImgOps";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::sun::java2d::pipe::RenderQueue, ::java::awt::image::BufferedImageOp)>("disableBufImgOp"), //
		jMethod<::jvoid(::sun::java2d::pipe::RenderQueue, ::sun::java2d::SurfaceData, ::java::awt::image::BufferedImage, ::java::awt::image::BufferedImageOp)>("enableBufImgOp"), //
		jMethod<::jboolean(::java::awt::image::ConvolveOp)>("isConvolveOpValid"), //
		jMethod<::jboolean(::java::awt::image::LookupOp, ::java::awt::image::BufferedImage)>("isLookupOpValid"), //
		jMethod<::jboolean(::java::awt::image::RescaleOp, ::java::awt::image::BufferedImage)>("isRescaleOpValid"), //
	};

	template<typename R = ::jvoid, typename... Args>
	static auto disableBufImgOp(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("disableBufImgOp")] != -1);
		return scall<R>("disableBufImgOp", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto enableBufImgOp(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("enableBufImgOp")] != -1);
		return scall<R>("enableBufImgOp", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isConvolveOpValid(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isConvolveOpValid")] != -1);
		return scall<R>("isConvolveOpValid", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isLookupOpValid(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLookupOpValid")] != -1);
		return scall<R>("isLookupOpValid", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isRescaleOpValid(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isRescaleOpValid")] != -1);
		return scall<R>("isRescaleOpValid", std::forward<Args>(args)...);
	}

};

#endif
