#ifndef sun_java2d_pipe_PixelToParallelogramConverter_HPP
#define sun_java2d_pipe_PixelToParallelogramConverter_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::pipe::PixelToParallelogramConverter : public jObject<::sun::java2d::pipe::PixelToParallelogramConverter, ::sun::java2d::pipe::PixelToShapeConverter> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_pipe / "PixelToParallelogramConverter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::sun::java2d::pipe::ShapeDrawPipe, ::sun::java2d::pipe::ParallelogramPipe, ::jdouble, ::jdouble, ::jboolean)>(), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::java::awt::Shape)>("draw"), //
		jMethod<::jboolean(::sun::java2d::SunGraphics2D, ::jdouble, ::jdouble, ::jdouble, ::jdouble)>("drawGeneralLine"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::jint, ::jint, ::jint, ::jint)>("drawLine"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::jint, ::jint, ::jint, ::jint)>("drawRect"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble)>("drawRectangle"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::java::awt::Shape)>("fill"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble)>("fillOuterParallelogram"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::jint, ::jint, ::jint, ::jint)>("fillRect"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::jdouble, ::jdouble, ::jdouble, ::jdouble)>("fillRectangle"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto draw(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("draw")] != -1);
		return call<R>("draw", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto drawGeneralLine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawGeneralLine")] != -1);
		return call<R>("drawGeneralLine", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawLine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawLine")] != -1);
		return call<R>("drawLine", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawRect")] != -1);
		return call<R>("drawRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawRectangle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawRectangle")] != -1);
		return call<R>("drawRectangle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fill(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fill")] != -1);
		return call<R>("fill", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillOuterParallelogram(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fillOuterParallelogram")] != -1);
		return call<R>("fillOuterParallelogram", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fillRect")] != -1);
		return call<R>("fillRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillRectangle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fillRectangle")] != -1);
		return call<R>("fillRectangle", std::forward<Args>(args)...);
	}

};

#endif
