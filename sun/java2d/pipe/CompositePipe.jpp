#ifndef sun_java2d_pipe_CompositePipe_HPP
#define sun_java2d_pipe_CompositePipe_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::pipe::CompositePipe : public jObject<::sun::java2d::pipe::CompositePipe, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_pipe / "CompositePipe";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::lang::Object)>("endSequence"), //
		jMethod<::jboolean(::java::lang::Object, ::jint, ::jint, ::jint, ::jint)>("needTile"), //
		jMethod<::jvoid(::java::lang::Object, ::jbyte *, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("renderPathTile"), //
		jMethod<::jvoid(::java::lang::Object, ::jint, ::jint)>("skipTile"), //
		jMethod<::java::lang::Object(::sun::java2d::SunGraphics2D, ::java::awt::Shape, ::java::awt::Rectangle, ::jint *)>("startSequence"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto endSequence(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("endSequence")] != -1);
		return call<R>("endSequence", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto needTile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("needTile")] != -1);
		return call<R>("needTile", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto renderPathTile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("renderPathTile")] != -1);
		return call<R>("renderPathTile", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto skipTile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("skipTile")] != -1);
		return call<R>("skipTile", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto startSequence(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("startSequence")] != -1);
		return call<R>("startSequence", std::forward<Args>(args)...);
	}

};

#endif
