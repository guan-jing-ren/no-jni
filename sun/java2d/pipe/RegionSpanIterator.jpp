#ifndef sun_java2d_pipe_RegionSpanIterator_HPP
#define sun_java2d_pipe_RegionSpanIterator_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::pipe::RegionSpanIterator : public jObject<::sun::java2d::pipe::RegionSpanIterator, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_pipe / "RegionSpanIterator";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::sun::java2d::pipe::Region)>(), //
		jMethod<::jlong()>("getNativeIterator"), //
		jMethod<::jvoid(::jint *)>("getPathBox"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("intersectClipBox"), //
		jMethod<::jboolean(::jint *)>("nextSpan"), //
		jMethod<::jvoid(::jint)>("skipDownTo"), //
	};

	template<typename R = ::jlong, typename... Args>
	auto getNativeIterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNativeIterator")] != -1);
		return call<R>("getNativeIterator", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getPathBox(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPathBox")] != -1);
		return call<R>("getPathBox", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto intersectClipBox(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("intersectClipBox")] != -1);
		return call<R>("intersectClipBox", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto nextSpan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nextSpan")] != -1);
		return call<R>("nextSpan", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto skipDownTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("skipDownTo")] != -1);
		return call<R>("skipDownTo", std::forward<Args>(args)...);
	}

};

#endif
