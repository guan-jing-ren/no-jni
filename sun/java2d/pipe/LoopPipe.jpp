#ifndef sun_java2d_pipe_LoopPipe_HPP
#define sun_java2d_pipe_LoopPipe_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::pipe::LoopPipe : public jObject<::sun::java2d::pipe::LoopPipe, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_pipe / "LoopPipe";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::java::awt::Shape)>("draw"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("drawArc"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::jint, ::jint, ::jint, ::jint)>("drawLine"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::jint, ::jint, ::jint, ::jint)>("drawOval"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble)>("drawParallelogram"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::jint *, ::jint *, ::jint)>("drawPolygon"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::jint *, ::jint *, ::jint)>("drawPolyline"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::jint, ::jint, ::jint, ::jint)>("drawRect"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("drawRoundRect"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::java::awt::Shape)>("fill"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("fillArc"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::jint, ::jint, ::jint, ::jint)>("fillOval"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble, ::jdouble)>("fillParallelogram"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::jint *, ::jint *, ::jint)>("fillPolygon"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::jint, ::jint, ::jint, ::jint)>("fillRect"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("fillRoundRect"), //
		jMethod<::sun::java2d::pipe::ShapeSpanIterator(::sun::java2d::SunGraphics2D)>("getFillSSI"), //
		jMethod<::sun::java2d::pipe::ShapeSpanIterator(::sun::java2d::SunGraphics2D, ::java::awt::Shape)>("getStrokeSpans"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto draw(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("draw")] != -1);
		return call<R>("draw", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawArc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawArc")] != -1);
		return call<R>("drawArc", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawLine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawLine")] != -1);
		return call<R>("drawLine", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawOval(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawOval")] != -1);
		return call<R>("drawOval", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawParallelogram(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawParallelogram")] != -1);
		return call<R>("drawParallelogram", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawPolygon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawPolygon")] != -1);
		return call<R>("drawPolygon", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawPolyline(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawPolyline")] != -1);
		return call<R>("drawPolyline", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawRect")] != -1);
		return call<R>("drawRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawRoundRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawRoundRect")] != -1);
		return call<R>("drawRoundRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fill(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fill")] != -1);
		return call<R>("fill", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillArc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fillArc")] != -1);
		return call<R>("fillArc", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillOval(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fillOval")] != -1);
		return call<R>("fillOval", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillParallelogram(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fillParallelogram")] != -1);
		return call<R>("fillParallelogram", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillPolygon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fillPolygon")] != -1);
		return call<R>("fillPolygon", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fillRect")] != -1);
		return call<R>("fillRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillRoundRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fillRoundRect")] != -1);
		return call<R>("fillRoundRect", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::pipe::ShapeSpanIterator, typename... Args>
	static auto getFillSSI(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFillSSI")] != -1);
		return scall<R>("getFillSSI", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::pipe::ShapeSpanIterator, typename... Args>
	static auto getStrokeSpans(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStrokeSpans")] != -1);
		return scall<R>("getStrokeSpans", std::forward<Args>(args)...);
	}

};

#endif
