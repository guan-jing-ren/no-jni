#ifndef sun_java2d_pipe_hw_ContextCapabilities_HPP
#define sun_java2d_pipe_hw_ContextCapabilities_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::java2d::pipe::hw::ContextCapabilities : public jObject<::sun::java2d::pipe::hw::ContextCapabilities, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_pipe_hw / "ContextCapabilities";

	constexpr static Enume field_signatures{
		jField<::jint>("CAPS_EMPTY"), //
		jField<::jint>("CAPS_MULTITEXTURE"), //
		jField<::jint>("CAPS_PS20"), //
		jField<::jint>("CAPS_PS30"), //
		jField<::jint>("CAPS_RT_PLAIN_ALPHA"), //
		jField<::jint>("CAPS_RT_TEXTURE_ALPHA"), //
		jField<::jint>("CAPS_RT_TEXTURE_OPAQUE"), //
		jField<::jint>("CAPS_TEXNONPOW2"), //
		jField<::jint>("CAPS_TEXNONSQUARE"), //
	};

	template<typename F = ::jint>
	static auto CAPS_EMPTY() {
		static_assert(field_signatures[jField<F>("CAPS_EMPTY")] != -1);
		return sat<F>("CAPS_EMPTY");
	}

	template<typename F = ::jint>
	static auto CAPS_MULTITEXTURE() {
		static_assert(field_signatures[jField<F>("CAPS_MULTITEXTURE")] != -1);
		return sat<F>("CAPS_MULTITEXTURE");
	}

	template<typename F = ::jint>
	static auto CAPS_PS20() {
		static_assert(field_signatures[jField<F>("CAPS_PS20")] != -1);
		return sat<F>("CAPS_PS20");
	}

	template<typename F = ::jint>
	static auto CAPS_PS30() {
		static_assert(field_signatures[jField<F>("CAPS_PS30")] != -1);
		return sat<F>("CAPS_PS30");
	}

	template<typename F = ::jint>
	static auto CAPS_RT_PLAIN_ALPHA() {
		static_assert(field_signatures[jField<F>("CAPS_RT_PLAIN_ALPHA")] != -1);
		return sat<F>("CAPS_RT_PLAIN_ALPHA");
	}

	template<typename F = ::jint>
	static auto CAPS_RT_TEXTURE_ALPHA() {
		static_assert(field_signatures[jField<F>("CAPS_RT_TEXTURE_ALPHA")] != -1);
		return sat<F>("CAPS_RT_TEXTURE_ALPHA");
	}

	template<typename F = ::jint>
	static auto CAPS_RT_TEXTURE_OPAQUE() {
		static_assert(field_signatures[jField<F>("CAPS_RT_TEXTURE_OPAQUE")] != -1);
		return sat<F>("CAPS_RT_TEXTURE_OPAQUE");
	}

	template<typename F = ::jint>
	static auto CAPS_TEXNONPOW2() {
		static_assert(field_signatures[jField<F>("CAPS_TEXNONPOW2")] != -1);
		return sat<F>("CAPS_TEXNONPOW2");
	}

	template<typename F = ::jint>
	static auto CAPS_TEXNONSQUARE() {
		static_assert(field_signatures[jField<F>("CAPS_TEXNONSQUARE")] != -1);
		return sat<F>("CAPS_TEXNONSQUARE");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getAdapterId"), //
		jMethod<::jint()>("getCaps"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getAdapterId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAdapterId")] != -1);
		return call<R>("getAdapterId", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCaps(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCaps")] != -1);
		return call<R>("getCaps", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
