#ifndef sun_java2d_pipe_hw_ExtendedBufferCapabilities$VSyncType_HPP
#define sun_java2d_pipe_hw_ExtendedBufferCapabilities$VSyncType_HPP

#include "../../../../jfwd_decl.hpp"

class ::sun::java2d::pipe::hw::ExtendedBufferCapabilities$VSyncType : public jObject<::sun::java2d::pipe::hw::ExtendedBufferCapabilities$VSyncType, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_pipe_hw / "ExtendedBufferCapabilities$VSyncType";

	constexpr static Enume field_signatures{
		jField<::sun::java2d::pipe::hw::ExtendedBufferCapabilities$VSyncType>("VSYNC_DEFAULT"), //
		jField<::sun::java2d::pipe::hw::ExtendedBufferCapabilities$VSyncType>("VSYNC_OFF"), //
		jField<::sun::java2d::pipe::hw::ExtendedBufferCapabilities$VSyncType>("VSYNC_ON"), //
	};

	template<typename F = ::sun::java2d::pipe::hw::ExtendedBufferCapabilities$VSyncType>
	static auto VSYNC_DEFAULT() {
		static_assert(field_signatures[jField<F>("VSYNC_DEFAULT")] != -1);
		return sat<F>("VSYNC_DEFAULT");
	}

	template<typename F = ::sun::java2d::pipe::hw::ExtendedBufferCapabilities$VSyncType>
	static auto VSYNC_OFF() {
		static_assert(field_signatures[jField<F>("VSYNC_OFF")] != -1);
		return sat<F>("VSYNC_OFF");
	}

	template<typename F = ::sun::java2d::pipe::hw::ExtendedBufferCapabilities$VSyncType>
	static auto VSYNC_ON() {
		static_assert(field_signatures[jField<F>("VSYNC_ON")] != -1);
		return sat<F>("VSYNC_ON");
	}

	constexpr static Enume method_signatures{
		jMethod<::jint()>("id"), //
		jMethod<::sun::java2d::pipe::hw::ExtendedBufferCapabilities$VSyncType(::java::lang::String)>("valueOf"), //
		jMethod<::sun::java2d::pipe::hw::ExtendedBufferCapabilities$VSyncType *()>("values"), //
	};

	template<typename R = ::jint, typename... Args>
	auto id(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("id")] != -1);
		return call<R>("id", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::pipe::hw::ExtendedBufferCapabilities$VSyncType, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::pipe::hw::ExtendedBufferCapabilities$VSyncType *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
