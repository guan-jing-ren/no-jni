#ifndef sun_java2d_pipe_RenderBuffer_HPP
#define sun_java2d_pipe_RenderBuffer_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::pipe::RenderBuffer : public jObject<::sun::java2d::pipe::RenderBuffer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_pipe / "RenderBuffer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::sun::java2d::pipe::RenderBuffer(::jint)>("allocate"), //
		jMethod<::jint()>("capacity"), //
		jMethod<::jvoid()>("clear"), //
		jMethod<::jlong()>("getAddress"), //
		jMethod<::jint()>("position"), //
		jMethod<::jvoid(::jlong)>("position"), //
		jMethod<::sun::java2d::pipe::RenderBuffer(::jbyte *)>("put"), //
		jMethod<::sun::java2d::pipe::RenderBuffer(::jbyte *, ::jint, ::jint)>("put"), //
		jMethod<::sun::java2d::pipe::RenderBuffer(::jfloat *)>("put"), //
		jMethod<::sun::java2d::pipe::RenderBuffer(::jfloat *, ::jint, ::jint)>("put"), //
		jMethod<::sun::java2d::pipe::RenderBuffer(::jint *)>("put"), //
		jMethod<::sun::java2d::pipe::RenderBuffer(::jint *, ::jint, ::jint)>("put"), //
		jMethod<::sun::java2d::pipe::RenderBuffer(::jlong *)>("put"), //
		jMethod<::sun::java2d::pipe::RenderBuffer(::jlong *, ::jint, ::jint)>("put"), //
		jMethod<::sun::java2d::pipe::RenderBuffer(::jshort *)>("put"), //
		jMethod<::sun::java2d::pipe::RenderBuffer(::jshort *, ::jint, ::jint)>("put"), //
		jMethod<::sun::java2d::pipe::RenderBuffer(::jbyte)>("putByte"), //
		jMethod<::sun::java2d::pipe::RenderBuffer(::jdouble)>("putDouble"), //
		jMethod<::sun::java2d::pipe::RenderBuffer(::jfloat)>("putFloat"), //
		jMethod<::sun::java2d::pipe::RenderBuffer(::jint)>("putInt"), //
		jMethod<::sun::java2d::pipe::RenderBuffer(::jint, ::jint)>("putInt"), //
		jMethod<::sun::java2d::pipe::RenderBuffer(::jlong)>("putLong"), //
		jMethod<::sun::java2d::pipe::RenderBuffer(::jshort)>("putShort"), //
		jMethod<::jint()>("remaining"), //
		jMethod<::sun::java2d::pipe::RenderBuffer(::jlong)>("skip"), //
	};

	template<typename R = ::sun::java2d::pipe::RenderBuffer, typename... Args>
	static auto allocate(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("allocate")] != -1);
		return scall<R>("allocate", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto capacity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("capacity")] != -1);
		return call<R>("capacity", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAddress")] != -1);
		return call<R>("getAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto position(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("position")] != -1);
		return call<R>("position", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::pipe::RenderBuffer, typename... Args>
	auto put(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("put")] != -1);
		return call<R>("put", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::pipe::RenderBuffer, typename... Args>
	auto putByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putByte")] != -1);
		return call<R>("putByte", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::pipe::RenderBuffer, typename... Args>
	auto putDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putDouble")] != -1);
		return call<R>("putDouble", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::pipe::RenderBuffer, typename... Args>
	auto putFloat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putFloat")] != -1);
		return call<R>("putFloat", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::pipe::RenderBuffer, typename... Args>
	auto putInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putInt")] != -1);
		return call<R>("putInt", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::pipe::RenderBuffer, typename... Args>
	auto putLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putLong")] != -1);
		return call<R>("putLong", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::pipe::RenderBuffer, typename... Args>
	auto putShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putShort")] != -1);
		return call<R>("putShort", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto remaining(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remaining")] != -1);
		return call<R>("remaining", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::pipe::RenderBuffer, typename... Args>
	auto skip(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("skip")] != -1);
		return call<R>("skip", std::forward<Args>(args)...);
	}

};

#endif
