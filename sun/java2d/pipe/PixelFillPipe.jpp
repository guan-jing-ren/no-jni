#ifndef sun_java2d_pipe_PixelFillPipe_HPP
#define sun_java2d_pipe_PixelFillPipe_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::pipe::PixelFillPipe : public jObject<::sun::java2d::pipe::PixelFillPipe, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_pipe / "PixelFillPipe";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("fillArc"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::jint, ::jint, ::jint, ::jint)>("fillOval"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::jint *, ::jint *, ::jint)>("fillPolygon"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::jint, ::jint, ::jint, ::jint)>("fillRect"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("fillRoundRect"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto fillArc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fillArc")] != -1);
		return call<R>("fillArc", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillOval(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fillOval")] != -1);
		return call<R>("fillOval", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillPolygon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fillPolygon")] != -1);
		return call<R>("fillPolygon", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fillRect")] != -1);
		return call<R>("fillRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillRoundRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fillRoundRect")] != -1);
		return call<R>("fillRoundRect", std::forward<Args>(args)...);
	}

};

#endif
