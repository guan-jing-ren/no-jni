#ifndef sun_java2d_StateTracker_HPP
#define sun_java2d_StateTracker_HPP

#include "../../jfwd_decl.hpp"

class ::sun::java2d::StateTracker : public jObject<::sun::java2d::StateTracker, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d / "StateTracker";

	constexpr static Enume field_signatures{
		jField<::sun::java2d::StateTracker>("ALWAYS_CURRENT"), //
		jField<::sun::java2d::StateTracker>("NEVER_CURRENT"), //
	};

	template<typename F = ::sun::java2d::StateTracker>
	static auto ALWAYS_CURRENT() {
		static_assert(field_signatures[jField<F>("ALWAYS_CURRENT")] != -1);
		return sat<F>("ALWAYS_CURRENT");
	}

	template<typename F = ::sun::java2d::StateTracker>
	static auto NEVER_CURRENT() {
		static_assert(field_signatures[jField<F>("NEVER_CURRENT")] != -1);
		return sat<F>("NEVER_CURRENT");
	}

	constexpr static Enume method_signatures{
		jMethod<::jboolean()>("isCurrent"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto isCurrent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCurrent")] != -1);
		return call<R>("isCurrent", std::forward<Args>(args)...);
	}

};

#endif
