#ifndef sun_java2d_jules_TrapezoidList_HPP
#define sun_java2d_jules_TrapezoidList_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::jules::TrapezoidList : public jObject<::sun::java2d::jules::TrapezoidList, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_jules / "TrapezoidList";

	constexpr static Enume field_signatures{
		jField<::jint>("TRAP_SIZE"), //
		jField<::jint>("TRAP_START_INDEX"), //
	};

	template<typename F = ::jint>
	static auto TRAP_SIZE() {
		static_assert(field_signatures[jField<F>("TRAP_SIZE")] != -1);
		return sat<F>("TRAP_SIZE");
	}

	template<typename F = ::jint>
	static auto TRAP_START_INDEX() {
		static_assert(field_signatures[jField<F>("TRAP_START_INDEX")] != -1);
		return sat<F>("TRAP_START_INDEX");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint *)>(), //
		jMethod<::jint()>("getBottom"), //
		jMethod<::jint(::jint)>("getBottom"), //
		jMethod<::jint()>("getLeft"), //
		jMethod<::jint(::jint)>("getP1XLeft"), //
		jMethod<::jint(::jint)>("getP1XRight"), //
		jMethod<::jint(::jint)>("getP1YLeft"), //
		jMethod<::jint(::jint)>("getP1YRight"), //
		jMethod<::jint(::jint)>("getP2XLeft"), //
		jMethod<::jint(::jint)>("getP2XRight"), //
		jMethod<::jint(::jint)>("getP2YLeft"), //
		jMethod<::jint(::jint)>("getP2YRight"), //
		jMethod<::jint()>("getRight"), //
		jMethod<::jint()>("getSize"), //
		jMethod<::jint()>("getTop"), //
		jMethod<::jint(::jint)>("getTop"), //
		jMethod<::jint *()>("getTrapArray"), //
		jMethod<::jvoid(::jint)>("setSize"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getBottom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBottom")] != -1);
		return call<R>("getBottom", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLeft(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLeft")] != -1);
		return call<R>("getLeft", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getP1XLeft(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getP1XLeft")] != -1);
		return call<R>("getP1XLeft", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getP1XRight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getP1XRight")] != -1);
		return call<R>("getP1XRight", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getP1YLeft(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getP1YLeft")] != -1);
		return call<R>("getP1YLeft", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getP1YRight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getP1YRight")] != -1);
		return call<R>("getP1YRight", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getP2XLeft(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getP2XLeft")] != -1);
		return call<R>("getP2XLeft", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getP2XRight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getP2XRight")] != -1);
		return call<R>("getP2XRight", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getP2YLeft(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getP2YLeft")] != -1);
		return call<R>("getP2YLeft", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getP2YRight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getP2YRight")] != -1);
		return call<R>("getP2YRight", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRight")] != -1);
		return call<R>("getRight", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return call<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTop")] != -1);
		return call<R>("getTop", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getTrapArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTrapArray")] != -1);
		return call<R>("getTrapArray", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSize")] != -1);
		return call<R>("setSize", std::forward<Args>(args)...);
	}

};

#endif
