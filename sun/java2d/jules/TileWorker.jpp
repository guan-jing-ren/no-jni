#ifndef sun_java2d_jules_TileWorker_HPP
#define sun_java2d_jules_TileWorker_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::jules::TileWorker : public jObject<::sun::java2d::jules::TileWorker, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_jules / "TileWorker";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::sun::java2d::jules::JulesAATileGenerator, ::jint, ::sun::java2d::jules::IdleTileCache)>(), //
		jMethod<::jvoid()>("disposeConsumerResources"), //
		jMethod<::sun::java2d::jules::JulesTile(::jint)>("getPreRasterizedTile"), //
		jMethod<::jvoid()>("run"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto disposeConsumerResources(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("disposeConsumerResources")] != -1);
		return call<R>("disposeConsumerResources", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::jules::JulesTile, typename... Args>
	auto getPreRasterizedTile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreRasterizedTile")] != -1);
		return call<R>("getPreRasterizedTile", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto run(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("run")] != -1);
		return call<R>("run", std::forward<Args>(args)...);
	}

};

#endif
