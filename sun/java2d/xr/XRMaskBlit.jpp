#ifndef sun_java2d_xr_XRMaskBlit_HPP
#define sun_java2d_xr_XRMaskBlit_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::xr::XRMaskBlit : public jObject<::sun::java2d::xr::XRMaskBlit, ::sun::java2d::loops::MaskBlit> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_xr / "XRMaskBlit";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::sun::java2d::loops::SurfaceType, ::sun::java2d::loops::CompositeType, ::sun::java2d::loops::SurfaceType)>(), //
		jMethod<::jvoid(::sun::java2d::SurfaceData, ::sun::java2d::SurfaceData, ::java::awt::Composite, ::sun::java2d::pipe::Region, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jbyte *, ::jint, ::jint)>("MaskBlit"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto MaskBlit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("MaskBlit")] != -1);
		return call<R>("MaskBlit", std::forward<Args>(args)...);
	}

};

#endif
