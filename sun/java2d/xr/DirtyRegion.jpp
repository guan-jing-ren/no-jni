#ifndef sun_java2d_xr_DirtyRegion_HPP
#define sun_java2d_xr_DirtyRegion_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::xr::DirtyRegion : public jObject<::sun::java2d::xr::DirtyRegion, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_xr / "DirtyRegion";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid()>("clear"), //
		jMethod<::sun::java2d::xr::DirtyRegion()>("cloneRegion"), //
		jMethod<::sun::java2d::xr::DirtyRegion(::sun::java2d::xr::DirtyRegion, ::sun::java2d::xr::DirtyRegion)>("combineRegion"), //
		jMethod<::jint()>("getHeight"), //
		jMethod<::jint()>("getWidth"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("growDirtyRegion"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("growDirtyRegionTileLimit"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("setDirtyLineRegion"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid(::jint, ::jint)>("translate"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::xr::DirtyRegion, typename... Args>
	auto cloneRegion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cloneRegion")] != -1);
		return call<R>("cloneRegion", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::xr::DirtyRegion, typename... Args>
	static auto combineRegion(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("combineRegion")] != -1);
		return scall<R>("combineRegion", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeight")] != -1);
		return call<R>("getHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto growDirtyRegion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("growDirtyRegion")] != -1);
		return call<R>("growDirtyRegion", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto growDirtyRegionTileLimit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("growDirtyRegionTileLimit")] != -1);
		return call<R>("growDirtyRegionTileLimit", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDirtyLineRegion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDirtyLineRegion")] != -1);
		return call<R>("setDirtyLineRegion", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto translate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("translate")] != -1);
		return call<R>("translate", std::forward<Args>(args)...);
	}

};

#endif
