#ifndef sun_java2d_xr_XRCompositeManager_HPP
#define sun_java2d_xr_XRCompositeManager_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::xr::XRCompositeManager : public jObject<::sun::java2d::xr::XRCompositeManager, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_xr / "XRCompositeManager";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("XRComposite"), //
		jMethod<::jvoid(::sun::java2d::xr::XRSurfaceData, ::sun::java2d::xr::GrowableRectArray)>("XRCompositeRectangles"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::sun::java2d::jules::TrapezoidList)>("XRCompositeTraps"), //
		jMethod<::jvoid(::sun::java2d::xr::XRSurfaceData, ::sun::java2d::xr::GrowableRectArray)>("XRRenderRectangles"), //
		jMethod<::jvoid()>("XRResetPaint"), //
		jMethod<::jvoid(::sun::java2d::xr::XRSurfaceData, ::sun::java2d::xr::XRSurfaceData, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("compositeBlit"), //
		jMethod<::jvoid(::sun::java2d::xr::XRSurfaceData, ::jint, ::jint, ::jint, ::jint, ::sun::java2d::xr::GrowableEltArray)>("compositeText"), //
		jMethod<::sun::java2d::xr::XRColor()>("getAlphaColor"), //
		jMethod<::sun::java2d::xr::XRBackend()>("getBackend"), //
		jMethod<::jbyte()>("getCompRule"), //
		jMethod<::jfloat()>("getExtraAlpha"), //
		jMethod<::jint()>("getExtraAlphaMask"), //
		jMethod<::sun::java2d::xr::XRCompositeManager(::sun::java2d::xr::XRSurfaceData)>("getInstance"), //
		jMethod<::sun::java2d::xr::MaskTileManager()>("getMaskBuffer"), //
		jMethod<::sun::java2d::xr::XRColor()>("getMaskColor"), //
		jMethod<::sun::java2d::xr::XRMaskImage()>("getMaskImage"), //
		jMethod<::sun::font::XRTextRenderer()>("getTextRenderer"), //
		jMethod<::jvoid(::sun::java2d::xr::XRSurfaceData)>("initResources"), //
		jMethod<::jboolean()>("isSolidPaintActive"), //
		jMethod<::jboolean()>("isTexturePaintActive"), //
		jMethod<::jboolean()>("maskRequired"), //
		jMethod<::jvoid(::jint)>("setForeground"), //
		jMethod<::jvoid(::sun::java2d::xr::XRSurfaceData)>("setGradientPaint"), //
		jMethod<::jvoid(::sun::java2d::xr::XRSurfaceData)>("setTexturePaint"), //
		jMethod<::jvoid(::java::awt::Composite, ::java::awt::geom::AffineTransform, ::java::awt::Paint, ::sun::java2d::SunGraphics2D)>("validateCompositeState"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto XRComposite(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("XRComposite")] != -1);
		return call<R>("XRComposite", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto XRCompositeRectangles(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("XRCompositeRectangles")] != -1);
		return call<R>("XRCompositeRectangles", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto XRCompositeTraps(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("XRCompositeTraps")] != -1);
		return call<R>("XRCompositeTraps", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto XRRenderRectangles(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("XRRenderRectangles")] != -1);
		return call<R>("XRRenderRectangles", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto XRResetPaint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("XRResetPaint")] != -1);
		return call<R>("XRResetPaint", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto compositeBlit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compositeBlit")] != -1);
		return call<R>("compositeBlit", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto compositeText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compositeText")] != -1);
		return call<R>("compositeText", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::xr::XRColor, typename... Args>
	auto getAlphaColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlphaColor")] != -1);
		return call<R>("getAlphaColor", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::xr::XRBackend, typename... Args>
	auto getBackend(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBackend")] != -1);
		return call<R>("getBackend", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto getCompRule(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCompRule")] != -1);
		return call<R>("getCompRule", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getExtraAlpha(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExtraAlpha")] != -1);
		return call<R>("getExtraAlpha", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getExtraAlphaMask(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExtraAlphaMask")] != -1);
		return call<R>("getExtraAlphaMask", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::xr::XRCompositeManager, typename... Args>
	static auto getInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInstance")] != -1);
		return scall<R>("getInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::xr::MaskTileManager, typename... Args>
	auto getMaskBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaskBuffer")] != -1);
		return call<R>("getMaskBuffer", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::xr::XRColor, typename... Args>
	auto getMaskColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaskColor")] != -1);
		return call<R>("getMaskColor", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::xr::XRMaskImage, typename... Args>
	auto getMaskImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaskImage")] != -1);
		return call<R>("getMaskImage", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::font::XRTextRenderer, typename... Args>
	auto getTextRenderer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextRenderer")] != -1);
		return call<R>("getTextRenderer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto initResources(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initResources")] != -1);
		return call<R>("initResources", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSolidPaintActive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSolidPaintActive")] != -1);
		return call<R>("isSolidPaintActive", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isTexturePaintActive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isTexturePaintActive")] != -1);
		return call<R>("isTexturePaintActive", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto maskRequired(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("maskRequired")] != -1);
		return call<R>("maskRequired", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setForeground")] != -1);
		return call<R>("setForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGradientPaint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setGradientPaint")] != -1);
		return call<R>("setGradientPaint", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTexturePaint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTexturePaint")] != -1);
		return call<R>("setTexturePaint", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto validateCompositeState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("validateCompositeState")] != -1);
		return call<R>("validateCompositeState", std::forward<Args>(args)...);
	}

};

#endif
