#ifndef sun_java2d_xr_XRUtils_HPP
#define sun_java2d_xr_XRUtils_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::xr::XRUtils : public jObject<::sun::java2d::xr::XRUtils, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_xr / "XRUtils";

	constexpr static Enume field_signatures{
		jField<::jint>("BEST"), //
		jField<::jbyte *>("BEST_NAME"), //
		jField<::jint>("FAST"), //
		jField<::jbyte *>("FAST_NAME"), //
		jField<::jint>("GOOD"), //
		jField<::jbyte *>("GOOD_NAME"), //
		jField<::jint>("None"), //
		jField<::jbyte>("PictOpAdd"), //
		jField<::jbyte>("PictOpAtop"), //
		jField<::jbyte>("PictOpAtopReverse"), //
		jField<::jbyte>("PictOpClear"), //
		jField<::jbyte>("PictOpDst"), //
		jField<::jbyte>("PictOpIn"), //
		jField<::jbyte>("PictOpInReverse"), //
		jField<::jbyte>("PictOpOut"), //
		jField<::jbyte>("PictOpOutReverse"), //
		jField<::jbyte>("PictOpOver"), //
		jField<::jbyte>("PictOpOverReverse"), //
		jField<::jbyte>("PictOpSaturate"), //
		jField<::jbyte>("PictOpSrc"), //
		jField<::jbyte>("PictOpXor"), //
		jField<::jint>("PictStandardA1"), //
		jField<::jint>("PictStandardA4"), //
		jField<::jint>("PictStandardA8"), //
		jField<::jint>("PictStandardARGB32"), //
		jField<::jint>("PictStandardRGB24"), //
		jField<::jint>("RepeatNone"), //
		jField<::jint>("RepeatNormal"), //
		jField<::jint>("RepeatPad"), //
		jField<::jint>("RepeatReflect"), //
	};

	template<typename F = ::jint>
	static auto BEST() {
		static_assert(field_signatures[jField<F>("BEST")] != -1);
		return sat<F>("BEST");
	}

	template<typename F = ::jbyte *>
	static auto BEST_NAME() {
		static_assert(field_signatures[jField<F>("BEST_NAME")] != -1);
		return sat<F>("BEST_NAME");
	}

	template<typename F = ::jint>
	static auto FAST() {
		static_assert(field_signatures[jField<F>("FAST")] != -1);
		return sat<F>("FAST");
	}

	template<typename F = ::jbyte *>
	static auto FAST_NAME() {
		static_assert(field_signatures[jField<F>("FAST_NAME")] != -1);
		return sat<F>("FAST_NAME");
	}

	template<typename F = ::jint>
	static auto GOOD() {
		static_assert(field_signatures[jField<F>("GOOD")] != -1);
		return sat<F>("GOOD");
	}

	template<typename F = ::jbyte *>
	static auto GOOD_NAME() {
		static_assert(field_signatures[jField<F>("GOOD_NAME")] != -1);
		return sat<F>("GOOD_NAME");
	}

	template<typename F = ::jint>
	static auto None() {
		static_assert(field_signatures[jField<F>("None")] != -1);
		return sat<F>("None");
	}

	template<typename F = ::jbyte>
	static auto PictOpAdd() {
		static_assert(field_signatures[jField<F>("PictOpAdd")] != -1);
		return sat<F>("PictOpAdd");
	}

	template<typename F = ::jbyte>
	static auto PictOpAtop() {
		static_assert(field_signatures[jField<F>("PictOpAtop")] != -1);
		return sat<F>("PictOpAtop");
	}

	template<typename F = ::jbyte>
	static auto PictOpAtopReverse() {
		static_assert(field_signatures[jField<F>("PictOpAtopReverse")] != -1);
		return sat<F>("PictOpAtopReverse");
	}

	template<typename F = ::jbyte>
	static auto PictOpClear() {
		static_assert(field_signatures[jField<F>("PictOpClear")] != -1);
		return sat<F>("PictOpClear");
	}

	template<typename F = ::jbyte>
	static auto PictOpDst() {
		static_assert(field_signatures[jField<F>("PictOpDst")] != -1);
		return sat<F>("PictOpDst");
	}

	template<typename F = ::jbyte>
	static auto PictOpIn() {
		static_assert(field_signatures[jField<F>("PictOpIn")] != -1);
		return sat<F>("PictOpIn");
	}

	template<typename F = ::jbyte>
	static auto PictOpInReverse() {
		static_assert(field_signatures[jField<F>("PictOpInReverse")] != -1);
		return sat<F>("PictOpInReverse");
	}

	template<typename F = ::jbyte>
	static auto PictOpOut() {
		static_assert(field_signatures[jField<F>("PictOpOut")] != -1);
		return sat<F>("PictOpOut");
	}

	template<typename F = ::jbyte>
	static auto PictOpOutReverse() {
		static_assert(field_signatures[jField<F>("PictOpOutReverse")] != -1);
		return sat<F>("PictOpOutReverse");
	}

	template<typename F = ::jbyte>
	static auto PictOpOver() {
		static_assert(field_signatures[jField<F>("PictOpOver")] != -1);
		return sat<F>("PictOpOver");
	}

	template<typename F = ::jbyte>
	static auto PictOpOverReverse() {
		static_assert(field_signatures[jField<F>("PictOpOverReverse")] != -1);
		return sat<F>("PictOpOverReverse");
	}

	template<typename F = ::jbyte>
	static auto PictOpSaturate() {
		static_assert(field_signatures[jField<F>("PictOpSaturate")] != -1);
		return sat<F>("PictOpSaturate");
	}

	template<typename F = ::jbyte>
	static auto PictOpSrc() {
		static_assert(field_signatures[jField<F>("PictOpSrc")] != -1);
		return sat<F>("PictOpSrc");
	}

	template<typename F = ::jbyte>
	static auto PictOpXor() {
		static_assert(field_signatures[jField<F>("PictOpXor")] != -1);
		return sat<F>("PictOpXor");
	}

	template<typename F = ::jint>
	static auto PictStandardA1() {
		static_assert(field_signatures[jField<F>("PictStandardA1")] != -1);
		return sat<F>("PictStandardA1");
	}

	template<typename F = ::jint>
	static auto PictStandardA4() {
		static_assert(field_signatures[jField<F>("PictStandardA4")] != -1);
		return sat<F>("PictStandardA4");
	}

	template<typename F = ::jint>
	static auto PictStandardA8() {
		static_assert(field_signatures[jField<F>("PictStandardA8")] != -1);
		return sat<F>("PictStandardA8");
	}

	template<typename F = ::jint>
	static auto PictStandardARGB32() {
		static_assert(field_signatures[jField<F>("PictStandardARGB32")] != -1);
		return sat<F>("PictStandardARGB32");
	}

	template<typename F = ::jint>
	static auto PictStandardRGB24() {
		static_assert(field_signatures[jField<F>("PictStandardRGB24")] != -1);
		return sat<F>("PictStandardRGB24");
	}

	template<typename F = ::jint>
	static auto RepeatNone() {
		static_assert(field_signatures[jField<F>("RepeatNone")] != -1);
		return sat<F>("RepeatNone");
	}

	template<typename F = ::jint>
	static auto RepeatNormal() {
		static_assert(field_signatures[jField<F>("RepeatNormal")] != -1);
		return sat<F>("RepeatNormal");
	}

	template<typename F = ::jint>
	static auto RepeatPad() {
		static_assert(field_signatures[jField<F>("RepeatPad")] != -1);
		return sat<F>("RepeatPad");
	}

	template<typename F = ::jint>
	static auto RepeatReflect() {
		static_assert(field_signatures[jField<F>("RepeatReflect")] != -1);
		return sat<F>("RepeatReflect");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jint(::jint)>("ATransOpToXRQuality"), //
		jMethod<::jbyte *(::jint)>("ATransOpToXRQualityName"), //
		jMethod<::jint(::jdouble)>("XDoubleToFixed"), //
		jMethod<::jdouble(::jint)>("XFixedToDouble"), //
		jMethod<::jshort(::jint)>("clampToShort"), //
		jMethod<::jint(::jint)>("clampToUShort"), //
		jMethod<::jint *(::jfloat *)>("convertFloatsToFixed"), //
		jMethod<::jbyte *(::jint)>("getFilterName"), //
		jMethod<::jint(::jint)>("getPictureFormatForTransparency"), //
		jMethod<::jint(::java::awt::MultipleGradientPaint$CycleMethod)>("getRepeatForCycleMethod"), //
		jMethod<::sun::java2d::loops::SurfaceType(::jint)>("getXRSurfaceTypeForTransparency"), //
		jMethod<::jlong(::jint)>("intToULong"), //
		jMethod<::jboolean(::jbyte)>("isMaskEvaluated"), //
		jMethod<::jboolean(::java::awt::geom::AffineTransform)>("isTransformQuadrantRotated"), //
		jMethod<::jbyte(::jint)>("j2dAlphaCompToXR"), //
	};

	template<typename R = ::jint, typename... Args>
	static auto ATransOpToXRQuality(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ATransOpToXRQuality")] != -1);
		return scall<R>("ATransOpToXRQuality", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	static auto ATransOpToXRQualityName(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ATransOpToXRQualityName")] != -1);
		return scall<R>("ATransOpToXRQualityName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto XDoubleToFixed(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("XDoubleToFixed")] != -1);
		return scall<R>("XDoubleToFixed", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	static auto XFixedToDouble(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("XFixedToDouble")] != -1);
		return scall<R>("XFixedToDouble", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	static auto clampToShort(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clampToShort")] != -1);
		return scall<R>("clampToShort", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto clampToUShort(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clampToUShort")] != -1);
		return scall<R>("clampToUShort", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	static auto convertFloatsToFixed(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("convertFloatsToFixed")] != -1);
		return scall<R>("convertFloatsToFixed", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	static auto getFilterName(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFilterName")] != -1);
		return scall<R>("getFilterName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getPictureFormatForTransparency(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPictureFormatForTransparency")] != -1);
		return scall<R>("getPictureFormatForTransparency", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getRepeatForCycleMethod(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRepeatForCycleMethod")] != -1);
		return scall<R>("getRepeatForCycleMethod", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::loops::SurfaceType, typename... Args>
	static auto getXRSurfaceTypeForTransparency(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getXRSurfaceTypeForTransparency")] != -1);
		return scall<R>("getXRSurfaceTypeForTransparency", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	static auto intToULong(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("intToULong")] != -1);
		return scall<R>("intToULong", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isMaskEvaluated(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isMaskEvaluated")] != -1);
		return scall<R>("isMaskEvaluated", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isTransformQuadrantRotated(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isTransformQuadrantRotated")] != -1);
		return scall<R>("isTransformQuadrantRotated", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	static auto j2dAlphaCompToXR(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("j2dAlphaCompToXR")] != -1);
		return scall<R>("j2dAlphaCompToXR", std::forward<Args>(args)...);
	}

};

#endif
