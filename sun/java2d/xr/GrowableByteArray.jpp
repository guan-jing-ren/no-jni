#ifndef sun_java2d_xr_GrowableByteArray_HPP
#define sun_java2d_xr_GrowableByteArray_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::xr::GrowableByteArray : public jObject<::sun::java2d::xr::GrowableByteArray, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_xr / "GrowableByteArray";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint, ::jint)>(), //
		jMethod<::jvoid(::jbyte)>("addByte"), //
		jMethod<::jvoid()>("clear"), //
		jMethod<::jbyte *()>("getArray"), //
		jMethod<::jint(::jint)>("getByte"), //
		jMethod<::jint()>("getNextIndex"), //
		jMethod<::jint()>("getSize"), //
		jMethod<::jbyte *()>("getSizedArray"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addByte")] != -1);
		return call<R>("addByte", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getArray")] != -1);
		return call<R>("getArray", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getByte")] != -1);
		return call<R>("getByte", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNextIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNextIndex")] != -1);
		return call<R>("getNextIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return call<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getSizedArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSizedArray")] != -1);
		return call<R>("getSizedArray", std::forward<Args>(args)...);
	}

};

#endif
