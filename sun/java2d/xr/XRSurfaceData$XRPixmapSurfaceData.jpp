#ifndef sun_java2d_xr_XRSurfaceData$XRPixmapSurfaceData_HPP
#define sun_java2d_xr_XRSurfaceData$XRPixmapSurfaceData_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::xr::XRSurfaceData$XRPixmapSurfaceData : public jObject<::sun::java2d::xr::XRSurfaceData$XRPixmapSurfaceData, ::sun::java2d::xr::XRSurfaceData> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_xr / "XRSurfaceData$XRPixmapSurfaceData";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::sun::java2d::xr::XRGraphicsConfig, ::jint, ::jint, ::java::awt::Image, ::sun::java2d::loops::SurfaceType, ::java::awt::image::ColorModel, ::jlong, ::jint, ::jint, ::jint)>(), //
		jMethod<::jboolean(::jint, ::jint, ::jint, ::jint)>("canSourceSendExposures"), //
		jMethod<::jvoid()>("flush"), //
		jMethod<::java::awt::Rectangle()>("getBounds"), //
		jMethod<::java::lang::Object()>("getDestination"), //
		jMethod<::sun::java2d::SurfaceData()>("getReplacement"), //
		jMethod<::jint()>("getTransparency"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jlong, ::jint)>("initSurface"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto canSourceSendExposures(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canSourceSendExposures")] != -1);
		return call<R>("canSourceSendExposures", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto flush(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("flush")] != -1);
		return call<R>("flush", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds")] != -1);
		return call<R>("getBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getDestination(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDestination")] != -1);
		return call<R>("getDestination", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::SurfaceData, typename... Args>
	auto getReplacement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReplacement")] != -1);
		return call<R>("getReplacement", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTransparency(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransparency")] != -1);
		return call<R>("getTransparency", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto initSurface(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initSurface")] != -1);
		return call<R>("initSurface", std::forward<Args>(args)...);
	}

};

#endif
