#ifndef sun_java2d_xr_XRBackend_HPP
#define sun_java2d_xr_XRBackend_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::xr::XRBackend : public jObject<::sun::java2d::xr::XRBackend, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_xr / "XRBackend";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::jint, ::jlong, ::sun::java2d::xr::GrowableRectArray)>("GCRectangles"), //
		jMethod<::jvoid(::jint, ::sun::font::GlyphList, ::java::util::List, ::jbyte *)>("XRenderAddGlyphs"), //
		jMethod<::jvoid(::jbyte, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::sun::java2d::xr::GrowableEltArray)>("XRenderCompositeText"), //
		jMethod<::jint(::jint)>("XRenderCreateGlyphSet"), //
		jMethod<::jvoid(::jint, ::jint *)>("XRenderFreeGlyphs"), //
		jMethod<::jvoid(::jint, ::jint, ::jlong, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("copyArea"), //
		jMethod<::jlong(::jint)>("createGC"), //
		jMethod<::jint(::java::awt::geom::Point2D, ::java::awt::geom::Point2D, ::jfloat *, ::jint *, ::jint)>("createLinearGradient"), //
		jMethod<::jint(::jint, ::jint)>("createPicture"), //
		jMethod<::jint(::jint, ::jint, ::jint, ::jint)>("createPixmap"), //
		jMethod<::jint(::jfloat, ::jfloat, ::jfloat, ::jfloat, ::jfloat *, ::jint *, ::jint)>("createRadialGradient"), //
		jMethod<::jvoid(::jlong)>("freeGC"), //
		jMethod<::jvoid(::jint)>("freePicture"), //
		jMethod<::jvoid(::jint)>("freePixmap"), //
		jMethod<::jvoid(::jint, ::jlong, ::jbyte *, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jfloat)>("putMaskImage"), //
		jMethod<::jvoid(::jbyte, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("renderComposite"), //
		jMethod<::jvoid(::jbyte, ::jint, ::jint, ::jint, ::jint, ::jint, ::sun::java2d::jules::TrapezoidList)>("renderCompositeTrapezoids"), //
		jMethod<::jvoid(::jint, ::jbyte, ::sun::java2d::xr::XRColor, ::jint, ::jint, ::jint, ::jint)>("renderRectangle"), //
		jMethod<::jvoid(::jint, ::jbyte, ::sun::java2d::xr::XRColor, ::sun::java2d::xr::GrowableRectArray)>("renderRectangles"), //
		jMethod<::jvoid(::jint, ::sun::java2d::pipe::Region)>("setClipRectangles"), //
		jMethod<::jvoid(::jint, ::jint)>("setFilter"), //
		jMethod<::jvoid(::jlong, ::sun::java2d::pipe::Region)>("setGCClipRectangles"), //
		jMethod<::jvoid(::jlong, ::jboolean)>("setGCExposures"), //
		jMethod<::jvoid(::jlong, ::jint)>("setGCForeground"), //
		jMethod<::jvoid(::jlong, ::jboolean)>("setGCMode"), //
		jMethod<::jvoid(::jint, ::jint)>("setPictureRepeat"), //
		jMethod<::jvoid(::jint, ::java::awt::geom::AffineTransform)>("setPictureTransform"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto GCRectangles(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("GCRectangles")] != -1);
		return call<R>("GCRectangles", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto XRenderAddGlyphs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("XRenderAddGlyphs")] != -1);
		return call<R>("XRenderAddGlyphs", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto XRenderCompositeText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("XRenderCompositeText")] != -1);
		return call<R>("XRenderCompositeText", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto XRenderCreateGlyphSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("XRenderCreateGlyphSet")] != -1);
		return call<R>("XRenderCreateGlyphSet", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto XRenderFreeGlyphs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("XRenderFreeGlyphs")] != -1);
		return call<R>("XRenderFreeGlyphs", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto copyArea(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("copyArea")] != -1);
		return call<R>("copyArea", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto createGC(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createGC")] != -1);
		return call<R>("createGC", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto createLinearGradient(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createLinearGradient")] != -1);
		return call<R>("createLinearGradient", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto createPicture(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createPicture")] != -1);
		return call<R>("createPicture", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto createPixmap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createPixmap")] != -1);
		return call<R>("createPixmap", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto createRadialGradient(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createRadialGradient")] != -1);
		return call<R>("createRadialGradient", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto freeGC(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("freeGC")] != -1);
		return call<R>("freeGC", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto freePicture(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("freePicture")] != -1);
		return call<R>("freePicture", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto freePixmap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("freePixmap")] != -1);
		return call<R>("freePixmap", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putMaskImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putMaskImage")] != -1);
		return call<R>("putMaskImage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto renderComposite(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("renderComposite")] != -1);
		return call<R>("renderComposite", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto renderCompositeTrapezoids(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("renderCompositeTrapezoids")] != -1);
		return call<R>("renderCompositeTrapezoids", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto renderRectangle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("renderRectangle")] != -1);
		return call<R>("renderRectangle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto renderRectangles(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("renderRectangles")] != -1);
		return call<R>("renderRectangles", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setClipRectangles(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setClipRectangles")] != -1);
		return call<R>("setClipRectangles", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFilter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFilter")] != -1);
		return call<R>("setFilter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGCClipRectangles(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setGCClipRectangles")] != -1);
		return call<R>("setGCClipRectangles", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGCExposures(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setGCExposures")] != -1);
		return call<R>("setGCExposures", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGCForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setGCForeground")] != -1);
		return call<R>("setGCForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGCMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setGCMode")] != -1);
		return call<R>("setGCMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPictureRepeat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPictureRepeat")] != -1);
		return call<R>("setPictureRepeat", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPictureTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPictureTransform")] != -1);
		return call<R>("setPictureTransform", std::forward<Args>(args)...);
	}

};

#endif
