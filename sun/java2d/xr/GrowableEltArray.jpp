#ifndef sun_java2d_xr_GrowableEltArray_HPP
#define sun_java2d_xr_GrowableEltArray_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::xr::GrowableEltArray : public jObject<::sun::java2d::xr::GrowableEltArray, ::sun::java2d::xr::GrowableIntArray> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_xr / "GrowableEltArray";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint)>(), //
		jMethod<::jvoid()>("clear"), //
		jMethod<::jint(::jint)>("getCharCnt"), //
		jMethod<::jint(::jint)>("getGlyphSet"), //
		jMethod<::sun::java2d::xr::GrowableIntArray()>("getGlyphs"), //
		jMethod<::jint(::jint)>("getXOff"), //
		jMethod<::jint(::jint)>("getYOff"), //
		jMethod<::jvoid(::jint, ::jint)>("setCharCnt"), //
		jMethod<::jvoid(::jint, ::jint)>("setGlyphSet"), //
		jMethod<::jvoid(::jint, ::jint)>("setXOff"), //
		jMethod<::jvoid(::jint, ::jint)>("setYOff"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCharCnt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCharCnt")] != -1);
		return call<R>("getCharCnt", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getGlyphSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGlyphSet")] != -1);
		return call<R>("getGlyphSet", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::xr::GrowableIntArray, typename... Args>
	auto getGlyphs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGlyphs")] != -1);
		return call<R>("getGlyphs", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getXOff(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getXOff")] != -1);
		return call<R>("getXOff", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getYOff(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getYOff")] != -1);
		return call<R>("getYOff", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCharCnt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCharCnt")] != -1);
		return call<R>("setCharCnt", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGlyphSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setGlyphSet")] != -1);
		return call<R>("setGlyphSet", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setXOff(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setXOff")] != -1);
		return call<R>("setXOff", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setYOff(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setYOff")] != -1);
		return call<R>("setYOff", std::forward<Args>(args)...);
	}

};

#endif
