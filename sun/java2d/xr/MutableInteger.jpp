#ifndef sun_java2d_xr_MutableInteger_HPP
#define sun_java2d_xr_MutableInteger_HPP

#include "../../../jfwd_decl.hpp"

class ::sun::java2d::xr::MutableInteger : public jObject<::sun::java2d::xr::MutableInteger, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d_xr / "MutableInteger";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint()>("getValue"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jvoid(::jint)>("setValue"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setValue")] != -1);
		return call<R>("setValue", std::forward<Args>(args)...);
	}

};

#endif
