#ifndef sun_java2d_SurfaceDataProxy_HPP
#define sun_java2d_SurfaceDataProxy_HPP

#include "../../jfwd_decl.hpp"

class ::sun::java2d::SurfaceDataProxy : public jObject<::sun::java2d::SurfaceDataProxy, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d / "SurfaceDataProxy";

	constexpr static Enume field_signatures{
		jField<::sun::java2d::SurfaceDataProxy>("UNCACHED"), //
	};

	template<typename F = ::sun::java2d::SurfaceDataProxy>
	static auto UNCACHED() {
		static_assert(field_signatures[jField<F>("UNCACHED")] != -1);
		return sat<F>("UNCACHED");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint)>(), //
		jMethod<::jvoid()>("displayChanged"), //
		jMethod<::jvoid()>("flush"), //
		jMethod<::jboolean(::jboolean)>("flush"), //
		jMethod<::sun::java2d::StateTracker(::sun::java2d::SurfaceData)>("getRetryTracker"), //
		jMethod<::jvoid()>("invalidate"), //
		jMethod<::jboolean()>("isAccelerated"), //
		jMethod<::jboolean()>("isCachingAllowed"), //
		jMethod<::jboolean(::sun::java2d::SurfaceData, ::jint, ::sun::java2d::loops::CompositeType, ::java::awt::Color)>("isSupportedOperation"), //
		jMethod<::jboolean()>("isValid"), //
		jMethod<::jvoid()>("paletteChanged"), //
		jMethod<::sun::java2d::SurfaceData(::sun::java2d::SurfaceData, ::jint, ::sun::java2d::loops::CompositeType, ::java::awt::Color)>("replaceData"), //
		jMethod<::jvoid(::sun::java2d::SurfaceData, ::sun::java2d::SurfaceData, ::jint, ::jint)>("updateSurfaceData"), //
		jMethod<::jvoid(::sun::java2d::SurfaceData, ::sun::java2d::SurfaceData, ::jint, ::jint, ::java::awt::Color)>("updateSurfaceDataBg"), //
		jMethod<::sun::java2d::SurfaceData(::sun::java2d::SurfaceData, ::sun::java2d::SurfaceData, ::jint, ::jint)>("validateSurfaceData"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto displayChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("displayChanged")] != -1);
		return call<R>("displayChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto flush(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("flush")] != -1);
		return call<R>("flush", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::StateTracker, typename... Args>
	auto getRetryTracker(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRetryTracker")] != -1);
		return call<R>("getRetryTracker", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto invalidate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidate")] != -1);
		return call<R>("invalidate", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAccelerated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAccelerated")] != -1);
		return call<R>("isAccelerated", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isCachingAllowed(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCachingAllowed")] != -1);
		return scall<R>("isCachingAllowed", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSupportedOperation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSupportedOperation")] != -1);
		return call<R>("isSupportedOperation", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isValid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isValid")] != -1);
		return call<R>("isValid", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paletteChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paletteChanged")] != -1);
		return call<R>("paletteChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::SurfaceData, typename... Args>
	auto replaceData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("replaceData")] != -1);
		return call<R>("replaceData", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateSurfaceData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateSurfaceData")] != -1);
		return call<R>("updateSurfaceData", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateSurfaceDataBg(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateSurfaceDataBg")] != -1);
		return call<R>("updateSurfaceDataBg", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::SurfaceData, typename... Args>
	auto validateSurfaceData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("validateSurfaceData")] != -1);
		return call<R>("validateSurfaceData", std::forward<Args>(args)...);
	}

};

#endif
