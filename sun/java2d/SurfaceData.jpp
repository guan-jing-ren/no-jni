#ifndef sun_java2d_SurfaceData_HPP
#define sun_java2d_SurfaceData_HPP

#include "../../jfwd_decl.hpp"

class ::sun::java2d::SurfaceData : public jObject<::sun::java2d::SurfaceData, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::sun_java2d / "SurfaceData";

	constexpr static Enume field_signatures{
		jField<::sun::java2d::pipe::TextPipe>("aaTextRenderer"), //
		jField<::sun::java2d::pipe::TextPipe>("lcdTextRenderer"), //
		jField<::sun::java2d::pipe::TextPipe>("outlineTextRenderer"), //
		jField<::sun::java2d::pipe::TextPipe>("solidTextRenderer"), //
	};

	template<typename F = ::sun::java2d::pipe::TextPipe>
	static auto aaTextRenderer() {
		static_assert(field_signatures[jField<F>("aaTextRenderer")] != -1);
		return sat<F>("aaTextRenderer");
	}

	template<typename F = ::sun::java2d::pipe::TextPipe>
	static auto lcdTextRenderer() {
		static_assert(field_signatures[jField<F>("lcdTextRenderer")] != -1);
		return sat<F>("lcdTextRenderer");
	}

	template<typename F = ::sun::java2d::pipe::TextPipe>
	static auto outlineTextRenderer() {
		static_assert(field_signatures[jField<F>("outlineTextRenderer")] != -1);
		return sat<F>("outlineTextRenderer");
	}

	template<typename F = ::sun::java2d::pipe::TextPipe>
	static auto solidTextRenderer() {
		static_assert(field_signatures[jField<F>("solidTextRenderer")] != -1);
		return sat<F>("solidTextRenderer");
	}

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::sun::java2d::SunGraphics2D)>("canRenderLCDText"), //
		jMethod<::jboolean(::sun::java2d::SunGraphics2D)>("canRenderParallelograms"), //
		jMethod<::jboolean(::sun::java2d::SunGraphics2D, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("copyArea"), //
		jMethod<::jvoid()>("flush"), //
		jMethod<::java::awt::Rectangle()>("getBounds"), //
		jMethod<::java::awt::image::ColorModel()>("getColorModel"), //
		jMethod<::jint()>("getDefaultScale"), //
		jMethod<::java::lang::Object()>("getDestination"), //
		jMethod<::java::awt::GraphicsConfiguration()>("getDeviceConfiguration"), //
		jMethod<::java::lang::Object()>("getDisposerReferent"), //
		jMethod<::jlong()>("getNativeOps"), //
		jMethod<::sun::java2d::SurfaceData(::java::awt::Image)>("getPrimarySurfaceData"), //
		jMethod<::java::awt::image::Raster(::jint, ::jint, ::jint, ::jint)>("getRaster"), //
		jMethod<::sun::java2d::loops::RenderLoops(::sun::java2d::SunGraphics2D)>("getRenderLoops"), //
		jMethod<::sun::java2d::SurfaceData()>("getReplacement"), //
		jMethod<::sun::java2d::SurfaceData(::java::awt::Image, ::jint, ::sun::java2d::loops::CompositeType, ::java::awt::Color)>("getSourceSurfaceData"), //
		jMethod<::sun::java2d::StateTrackable$State()>("getState"), //
		jMethod<::sun::java2d::StateTracker()>("getStateTracker"), //
		jMethod<::sun::java2d::loops::SurfaceType()>("getSurfaceType"), //
		jMethod<::jint()>("getTransparency"), //
		jMethod<::jvoid()>("invalidate"), //
		jMethod<::jboolean(::sun::java2d::SurfaceData)>("isNull"), //
		jMethod<::jboolean()>("isSurfaceLost"), //
		jMethod<::jboolean()>("isValid"), //
		jMethod<::sun::java2d::SurfaceDataProxy(::sun::java2d::SurfaceData)>("makeProxyFor"), //
		jMethod<::sun::java2d::loops::RenderLoops(::sun::java2d::loops::SurfaceType, ::sun::java2d::loops::CompositeType, ::sun::java2d::loops::SurfaceType)>("makeRenderLoops"), //
		jMethod<::jvoid()>("markDirty"), //
		jMethod<::jint(::jint)>("pixelFor"), //
		jMethod<::jint(::java::awt::Color)>("pixelFor"), //
		jMethod<::sun::java2d::SurfaceData(::java::awt::Image)>("restoreContents"), //
		jMethod<::jint(::jint)>("rgbFor"), //
		jMethod<::jvoid(::jboolean)>("setSurfaceLost"), //
		jMethod<::jboolean()>("useTightBBoxes"), //
		jMethod<::jvoid(::sun::java2d::SunGraphics2D)>("validatePipe"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto canRenderLCDText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canRenderLCDText")] != -1);
		return call<R>("canRenderLCDText", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto canRenderParallelograms(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canRenderParallelograms")] != -1);
		return call<R>("canRenderParallelograms", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto copyArea(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("copyArea")] != -1);
		return call<R>("copyArea", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto flush(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("flush")] != -1);
		return call<R>("flush", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds")] != -1);
		return call<R>("getBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::ColorModel, typename... Args>
	auto getColorModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColorModel")] != -1);
		return call<R>("getColorModel", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDefaultScale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultScale")] != -1);
		return call<R>("getDefaultScale", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getDestination(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDestination")] != -1);
		return call<R>("getDestination", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::GraphicsConfiguration, typename... Args>
	auto getDeviceConfiguration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDeviceConfiguration")] != -1);
		return call<R>("getDeviceConfiguration", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getDisposerReferent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisposerReferent")] != -1);
		return call<R>("getDisposerReferent", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getNativeOps(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNativeOps")] != -1);
		return call<R>("getNativeOps", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::SurfaceData, typename... Args>
	static auto getPrimarySurfaceData(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrimarySurfaceData")] != -1);
		return scall<R>("getPrimarySurfaceData", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::Raster, typename... Args>
	auto getRaster(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRaster")] != -1);
		return call<R>("getRaster", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::loops::RenderLoops, typename... Args>
	auto getRenderLoops(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRenderLoops")] != -1);
		return call<R>("getRenderLoops", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::SurfaceData, typename... Args>
	auto getReplacement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReplacement")] != -1);
		return call<R>("getReplacement", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::SurfaceData, typename... Args>
	auto getSourceSurfaceData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSourceSurfaceData")] != -1);
		return call<R>("getSourceSurfaceData", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::StateTrackable$State, typename... Args>
	auto getState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getState")] != -1);
		return call<R>("getState", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::StateTracker, typename... Args>
	auto getStateTracker(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStateTracker")] != -1);
		return call<R>("getStateTracker", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::loops::SurfaceType, typename... Args>
	auto getSurfaceType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSurfaceType")] != -1);
		return call<R>("getSurfaceType", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTransparency(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransparency")] != -1);
		return call<R>("getTransparency", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto invalidate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidate")] != -1);
		return call<R>("invalidate", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isNull(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isNull")] != -1);
		return scall<R>("isNull", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSurfaceLost(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSurfaceLost")] != -1);
		return call<R>("isSurfaceLost", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isValid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isValid")] != -1);
		return call<R>("isValid", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::SurfaceDataProxy, typename... Args>
	auto makeProxyFor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeProxyFor")] != -1);
		return call<R>("makeProxyFor", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::loops::RenderLoops, typename... Args>
	static auto makeRenderLoops(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeRenderLoops")] != -1);
		return scall<R>("makeRenderLoops", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto markDirty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("markDirty")] != -1);
		return call<R>("markDirty", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto pixelFor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("pixelFor")] != -1);
		return call<R>("pixelFor", std::forward<Args>(args)...);
	}

	template<typename R = ::sun::java2d::SurfaceData, typename... Args>
	static auto restoreContents(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("restoreContents")] != -1);
		return scall<R>("restoreContents", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto rgbFor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rgbFor")] != -1);
		return call<R>("rgbFor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSurfaceLost(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSurfaceLost")] != -1);
		return call<R>("setSurfaceLost", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto useTightBBoxes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("useTightBBoxes")] != -1);
		return call<R>("useTightBBoxes", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto validatePipe(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("validatePipe")] != -1);
		return call<R>("validatePipe", std::forward<Args>(args)...);
	}

};

#endif
