#ifndef JFWD_DECL_HPP
#define JFWD_DECL_HPP

#include "no-jni.hpp"

namespace java {}
[[maybe_unused]] inline constexpr jPackage java_{"java"};
namespace java::lang {}
[[maybe_unused]] inline constexpr jPackage java_lang = java_ / "lang";
namespace java::lang::annotation {}
[[maybe_unused]] inline constexpr jPackage java_lang_annotation = java_lang / "annotation";
namespace java::lang::instrument {}
[[maybe_unused]] inline constexpr jPackage java_lang_instrument = java_lang / "instrument";
namespace java::lang::invoke {}
[[maybe_unused]] inline constexpr jPackage java_lang_invoke = java_lang / "invoke";
namespace java::lang::management {}
[[maybe_unused]] inline constexpr jPackage java_lang_management = java_lang / "management";
namespace java::lang::ref {}
[[maybe_unused]] inline constexpr jPackage java_lang_ref = java_lang / "ref";
namespace java::lang::reflect {}
[[maybe_unused]] inline constexpr jPackage java_lang_reflect = java_lang / "reflect";
namespace java::applet {}
[[maybe_unused]] inline constexpr jPackage java_applet = java_ / "applet";
namespace java::awt {}
[[maybe_unused]] inline constexpr jPackage java_awt = java_ / "awt";
namespace java::awt::color {}
[[maybe_unused]] inline constexpr jPackage java_awt_color = java_awt / "color";
namespace java::awt::datatransfer {}
[[maybe_unused]] inline constexpr jPackage java_awt_datatransfer = java_awt / "datatransfer";
namespace java::awt::dnd {}
[[maybe_unused]] inline constexpr jPackage java_awt_dnd = java_awt / "dnd";
namespace java::awt::dnd::peer {}
[[maybe_unused]] inline constexpr jPackage java_awt_dnd_peer = java_awt_dnd / "peer";
namespace java::awt::event {}
[[maybe_unused]] inline constexpr jPackage java_awt_event = java_awt / "event";
namespace java::awt::font {}
[[maybe_unused]] inline constexpr jPackage java_awt_font = java_awt / "font";
namespace java::awt::geom {}
[[maybe_unused]] inline constexpr jPackage java_awt_geom = java_awt / "geom";
namespace java::awt::im {}
[[maybe_unused]] inline constexpr jPackage java_awt_im = java_awt / "im";
namespace java::awt::im::spi {}
[[maybe_unused]] inline constexpr jPackage java_awt_im_spi = java_awt_im / "spi";
namespace java::awt::image {}
[[maybe_unused]] inline constexpr jPackage java_awt_image = java_awt / "image";
namespace java::awt::image::renderable {}
[[maybe_unused]] inline constexpr jPackage java_awt_image_renderable = java_awt_image / "renderable";
namespace java::awt::peer {}
[[maybe_unused]] inline constexpr jPackage java_awt_peer = java_awt / "peer";
namespace java::awt::print {}
[[maybe_unused]] inline constexpr jPackage java_awt_print = java_awt / "print";
namespace java::beans {}
[[maybe_unused]] inline constexpr jPackage java_beans = java_ / "beans";
namespace java::beans::beancontext {}
[[maybe_unused]] inline constexpr jPackage java_beans_beancontext = java_beans / "beancontext";
namespace java::io {}
[[maybe_unused]] inline constexpr jPackage java_io = java_ / "io";
namespace java::math {}
[[maybe_unused]] inline constexpr jPackage java_math = java_ / "math";
namespace java::net {}
[[maybe_unused]] inline constexpr jPackage java_net = java_ / "net";
namespace java::nio {}
[[maybe_unused]] inline constexpr jPackage java_nio = java_ / "nio";
namespace java::nio::channels {}
[[maybe_unused]] inline constexpr jPackage java_nio_channels = java_nio / "channels";
namespace java::nio::channels::spi {}
[[maybe_unused]] inline constexpr jPackage java_nio_channels_spi = java_nio_channels / "spi";
namespace java::nio::charset {}
[[maybe_unused]] inline constexpr jPackage java_nio_charset = java_nio / "charset";
namespace java::nio::charset::spi {}
[[maybe_unused]] inline constexpr jPackage java_nio_charset_spi = java_nio_charset / "spi";
namespace java::nio::file {}
[[maybe_unused]] inline constexpr jPackage java_nio_file = java_nio / "file";
namespace java::nio::file::attribute {}
[[maybe_unused]] inline constexpr jPackage java_nio_file_attribute = java_nio_file / "attribute";
namespace java::nio::file::spi {}
[[maybe_unused]] inline constexpr jPackage java_nio_file_spi = java_nio_file / "spi";
namespace java::rmi {}
[[maybe_unused]] inline constexpr jPackage java_rmi = java_ / "rmi";
namespace java::rmi::activation {}
[[maybe_unused]] inline constexpr jPackage java_rmi_activation = java_rmi / "activation";
namespace java::rmi::dgc {}
[[maybe_unused]] inline constexpr jPackage java_rmi_dgc = java_rmi / "dgc";
namespace java::rmi::registry {}
[[maybe_unused]] inline constexpr jPackage java_rmi_registry = java_rmi / "registry";
namespace java::rmi::server {}
[[maybe_unused]] inline constexpr jPackage java_rmi_server = java_rmi / "server";
namespace java::security {}
[[maybe_unused]] inline constexpr jPackage java_security = java_ / "security";
namespace java::security::acl {}
[[maybe_unused]] inline constexpr jPackage java_security_acl = java_security / "acl";
namespace java::security::cert {}
[[maybe_unused]] inline constexpr jPackage java_security_cert = java_security / "cert";
namespace java::security::interfaces {}
[[maybe_unused]] inline constexpr jPackage java_security_interfaces = java_security / "interfaces";
namespace java::security::spec {}
[[maybe_unused]] inline constexpr jPackage java_security_spec = java_security / "spec";
namespace java::sql {}
[[maybe_unused]] inline constexpr jPackage java_sql = java_ / "sql";
namespace java::text {}
[[maybe_unused]] inline constexpr jPackage java_text = java_ / "text";
namespace java::text::spi {}
[[maybe_unused]] inline constexpr jPackage java_text_spi = java_text / "spi";
namespace java::time {}
[[maybe_unused]] inline constexpr jPackage java_time = java_ / "time";
namespace java::time::chrono {}
[[maybe_unused]] inline constexpr jPackage java_time_chrono = java_time / "chrono";
namespace java::time::format {}
[[maybe_unused]] inline constexpr jPackage java_time_format = java_time / "format";
namespace java::time::temporal {}
[[maybe_unused]] inline constexpr jPackage java_time_temporal = java_time / "temporal";
namespace java::time::zone {}
[[maybe_unused]] inline constexpr jPackage java_time_zone = java_time / "zone";
namespace java::util {}
[[maybe_unused]] inline constexpr jPackage java_util = java_ / "util";
namespace java::util::concurrent {}
[[maybe_unused]] inline constexpr jPackage java_util_concurrent = java_util / "concurrent";
namespace java::util::concurrent::atomic {}
[[maybe_unused]] inline constexpr jPackage java_util_concurrent_atomic = java_util_concurrent / "atomic";
namespace java::util::concurrent::locks {}
[[maybe_unused]] inline constexpr jPackage java_util_concurrent_locks = java_util_concurrent / "locks";
namespace java::util::function {}
[[maybe_unused]] inline constexpr jPackage java_util_function = java_util / "function";
namespace java::util::jar {}
[[maybe_unused]] inline constexpr jPackage java_util_jar = java_util / "jar";
namespace java::util::logging {}
[[maybe_unused]] inline constexpr jPackage java_util_logging = java_util / "logging";
namespace java::util::prefs {}
[[maybe_unused]] inline constexpr jPackage java_util_prefs = java_util / "prefs";
namespace java::util::regex {}
[[maybe_unused]] inline constexpr jPackage java_util_regex = java_util / "regex";
namespace java::util::spi {}
[[maybe_unused]] inline constexpr jPackage java_util_spi = java_util / "spi";
namespace java::util::stream {}
[[maybe_unused]] inline constexpr jPackage java_util_stream = java_util / "stream";
namespace java::util::zip {}
[[maybe_unused]] inline constexpr jPackage java_util_zip = java_util / "zip";
namespace javax {}
[[maybe_unused]] inline constexpr jPackage javax_{"javax"};
namespace javax::accessibility {}
[[maybe_unused]] inline constexpr jPackage javax_accessibility = javax_ / "accessibility";
namespace javax::activation {}
[[maybe_unused]] inline constexpr jPackage javax_activation = javax_ / "activation";
namespace javax::activity {}
[[maybe_unused]] inline constexpr jPackage javax_activity = javax_ / "activity";
namespace javax::annotation {}
[[maybe_unused]] inline constexpr jPackage javax_annotation = javax_ / "annotation";
namespace javax::annotation::processing {}
[[maybe_unused]] inline constexpr jPackage javax_annotation_processing = javax_annotation / "processing";
namespace javax::crypto {}
[[maybe_unused]] inline constexpr jPackage javax_crypto = javax_ / "crypto";
namespace javax::crypto::interfaces {}
[[maybe_unused]] inline constexpr jPackage javax_crypto_interfaces = javax_crypto / "interfaces";
namespace javax::crypto::spec {}
[[maybe_unused]] inline constexpr jPackage javax_crypto_spec = javax_crypto / "spec";
namespace javax::imageio {}
[[maybe_unused]] inline constexpr jPackage javax_imageio = javax_ / "imageio";
namespace javax::imageio::event {}
[[maybe_unused]] inline constexpr jPackage javax_imageio_event = javax_imageio / "event";
namespace javax::imageio::metadata {}
[[maybe_unused]] inline constexpr jPackage javax_imageio_metadata = javax_imageio / "metadata";
namespace javax::imageio::plugins {}
[[maybe_unused]] inline constexpr jPackage javax_imageio_plugins = javax_imageio / "plugins";
namespace javax::imageio::plugins::bmp {}
[[maybe_unused]] inline constexpr jPackage javax_imageio_plugins_bmp = javax_imageio_plugins / "bmp";
namespace javax::imageio::plugins::jpeg {}
[[maybe_unused]] inline constexpr jPackage javax_imageio_plugins_jpeg = javax_imageio_plugins / "jpeg";
namespace javax::imageio::spi {}
[[maybe_unused]] inline constexpr jPackage javax_imageio_spi = javax_imageio / "spi";
namespace javax::imageio::stream {}
[[maybe_unused]] inline constexpr jPackage javax_imageio_stream = javax_imageio / "stream";
namespace javax::jws {}
[[maybe_unused]] inline constexpr jPackage javax_jws = javax_ / "jws";
namespace javax::jws::soap {}
[[maybe_unused]] inline constexpr jPackage javax_jws_soap = javax_jws / "soap";
namespace javax::lang {}
[[maybe_unused]] inline constexpr jPackage javax_lang = javax_ / "lang";
namespace javax::lang::model {}
[[maybe_unused]] inline constexpr jPackage javax_lang_model = javax_lang / "model";
namespace javax::lang::model::element {}
[[maybe_unused]] inline constexpr jPackage javax_lang_model_element = javax_lang_model / "element";
namespace javax::lang::model::type {}
[[maybe_unused]] inline constexpr jPackage javax_lang_model_type = javax_lang_model / "type";
namespace javax::lang::model::util {}
[[maybe_unused]] inline constexpr jPackage javax_lang_model_util = javax_lang_model / "util";
namespace javax::management {}
[[maybe_unused]] inline constexpr jPackage javax_management = javax_ / "management";
namespace javax::management::loading {}
[[maybe_unused]] inline constexpr jPackage javax_management_loading = javax_management / "loading";
namespace javax::management::modelmbean {}
[[maybe_unused]] inline constexpr jPackage javax_management_modelmbean = javax_management / "modelmbean";
namespace javax::management::monitor {}
[[maybe_unused]] inline constexpr jPackage javax_management_monitor = javax_management / "monitor";
namespace javax::management::openmbean {}
[[maybe_unused]] inline constexpr jPackage javax_management_openmbean = javax_management / "openmbean";
namespace javax::management::relation {}
[[maybe_unused]] inline constexpr jPackage javax_management_relation = javax_management / "relation";
namespace javax::management::remote {}
[[maybe_unused]] inline constexpr jPackage javax_management_remote = javax_management / "remote";
namespace javax::management::remote::rmi {}
[[maybe_unused]] inline constexpr jPackage javax_management_remote_rmi = javax_management_remote / "rmi";
namespace javax::management::timer {}
[[maybe_unused]] inline constexpr jPackage javax_management_timer = javax_management / "timer";
namespace javax::naming {}
[[maybe_unused]] inline constexpr jPackage javax_naming = javax_ / "naming";
namespace javax::naming::directory {}
[[maybe_unused]] inline constexpr jPackage javax_naming_directory = javax_naming / "directory";
namespace javax::naming::event {}
[[maybe_unused]] inline constexpr jPackage javax_naming_event = javax_naming / "event";
namespace javax::naming::ldap {}
[[maybe_unused]] inline constexpr jPackage javax_naming_ldap = javax_naming / "ldap";
namespace javax::naming::spi {}
[[maybe_unused]] inline constexpr jPackage javax_naming_spi = javax_naming / "spi";
namespace javax::net {}
[[maybe_unused]] inline constexpr jPackage javax_net = javax_ / "net";
namespace javax::net::ssl {}
[[maybe_unused]] inline constexpr jPackage javax_net_ssl = javax_net / "ssl";
namespace javax::print {}
[[maybe_unused]] inline constexpr jPackage javax_print = javax_ / "print";
namespace javax::print::attribute {}
[[maybe_unused]] inline constexpr jPackage javax_print_attribute = javax_print / "attribute";
namespace javax::print::attribute::standard {}
[[maybe_unused]] inline constexpr jPackage javax_print_attribute_standard = javax_print_attribute / "standard";
namespace javax::print::event {}
[[maybe_unused]] inline constexpr jPackage javax_print_event = javax_print / "event";
namespace javax::rmi {}
[[maybe_unused]] inline constexpr jPackage javax_rmi = javax_ / "rmi";
namespace javax::rmi::CORBA {}
[[maybe_unused]] inline constexpr jPackage javax_rmi_CORBA = javax_rmi / "CORBA";
namespace javax::rmi::ssl {}
[[maybe_unused]] inline constexpr jPackage javax_rmi_ssl = javax_rmi / "ssl";
namespace javax::script {}
[[maybe_unused]] inline constexpr jPackage javax_script = javax_ / "script";
namespace javax::security {}
[[maybe_unused]] inline constexpr jPackage javax_security = javax_ / "security";
namespace javax::security::auth {}
[[maybe_unused]] inline constexpr jPackage javax_security_auth = javax_security / "auth";
namespace javax::security::auth::callback {}
[[maybe_unused]] inline constexpr jPackage javax_security_auth_callback = javax_security_auth / "callback";
namespace javax::security::auth::kerberos {}
[[maybe_unused]] inline constexpr jPackage javax_security_auth_kerberos = javax_security_auth / "kerberos";
namespace javax::security::auth::login {}
[[maybe_unused]] inline constexpr jPackage javax_security_auth_login = javax_security_auth / "login";
namespace javax::security::auth::spi {}
[[maybe_unused]] inline constexpr jPackage javax_security_auth_spi = javax_security_auth / "spi";
namespace javax::security::auth::x500 {}
[[maybe_unused]] inline constexpr jPackage javax_security_auth_x500 = javax_security_auth / "x500";
namespace javax::security::cert {}
[[maybe_unused]] inline constexpr jPackage javax_security_cert = javax_security / "cert";
namespace javax::security::sasl {}
[[maybe_unused]] inline constexpr jPackage javax_security_sasl = javax_security / "sasl";
namespace javax::smartcardio {}
[[maybe_unused]] inline constexpr jPackage javax_smartcardio = javax_ / "smartcardio";
namespace javax::sound {}
[[maybe_unused]] inline constexpr jPackage javax_sound = javax_ / "sound";
namespace javax::sound::midi {}
[[maybe_unused]] inline constexpr jPackage javax_sound_midi = javax_sound / "midi";
namespace javax::sound::midi::spi {}
[[maybe_unused]] inline constexpr jPackage javax_sound_midi_spi = javax_sound_midi / "spi";
namespace javax::sound::sampled {}
[[maybe_unused]] inline constexpr jPackage javax_sound_sampled = javax_sound / "sampled";
namespace javax::sound::sampled::spi {}
[[maybe_unused]] inline constexpr jPackage javax_sound_sampled_spi = javax_sound_sampled / "spi";
namespace javax::sql {}
[[maybe_unused]] inline constexpr jPackage javax_sql = javax_ / "sql";
namespace javax::sql::rowset {}
[[maybe_unused]] inline constexpr jPackage javax_sql_rowset = javax_sql / "rowset";
namespace javax::sql::rowset::serial {}
[[maybe_unused]] inline constexpr jPackage javax_sql_rowset_serial = javax_sql_rowset / "serial";
namespace javax::sql::rowset::spi {}
[[maybe_unused]] inline constexpr jPackage javax_sql_rowset_spi = javax_sql_rowset / "spi";
namespace javax::swing {}
[[maybe_unused]] inline constexpr jPackage javax_swing = javax_ / "swing";
namespace javax::swing::border {}
[[maybe_unused]] inline constexpr jPackage javax_swing_border = javax_swing / "border";
namespace javax::swing::colorchooser {}
[[maybe_unused]] inline constexpr jPackage javax_swing_colorchooser = javax_swing / "colorchooser";
namespace javax::swing::event {}
[[maybe_unused]] inline constexpr jPackage javax_swing_event = javax_swing / "event";
namespace javax::swing::filechooser {}
[[maybe_unused]] inline constexpr jPackage javax_swing_filechooser = javax_swing / "filechooser";
namespace javax::swing::plaf {}
[[maybe_unused]] inline constexpr jPackage javax_swing_plaf = javax_swing / "plaf";
namespace javax::swing::plaf::basic {}
[[maybe_unused]] inline constexpr jPackage javax_swing_plaf_basic = javax_swing_plaf / "basic";
namespace javax::swing::plaf::metal {}
[[maybe_unused]] inline constexpr jPackage javax_swing_plaf_metal = javax_swing_plaf / "metal";
namespace javax::swing::plaf::multi {}
[[maybe_unused]] inline constexpr jPackage javax_swing_plaf_multi = javax_swing_plaf / "multi";
namespace javax::swing::plaf::nimbus {}
[[maybe_unused]] inline constexpr jPackage javax_swing_plaf_nimbus = javax_swing_plaf / "nimbus";
namespace javax::swing::plaf::synth {}
[[maybe_unused]] inline constexpr jPackage javax_swing_plaf_synth = javax_swing_plaf / "synth";
namespace javax::swing::table {}
[[maybe_unused]] inline constexpr jPackage javax_swing_table = javax_swing / "table";
namespace javax::swing::text {}
[[maybe_unused]] inline constexpr jPackage javax_swing_text = javax_swing / "text";
namespace javax::swing::text::html {}
[[maybe_unused]] inline constexpr jPackage javax_swing_text_html = javax_swing_text / "html";
namespace javax::swing::text::html::parser {}
[[maybe_unused]] inline constexpr jPackage javax_swing_text_html_parser = javax_swing_text_html / "parser";
namespace javax::swing::text::rtf {}
[[maybe_unused]] inline constexpr jPackage javax_swing_text_rtf = javax_swing_text / "rtf";
namespace javax::swing::tree {}
[[maybe_unused]] inline constexpr jPackage javax_swing_tree = javax_swing / "tree";
namespace javax::swing::undo {}
[[maybe_unused]] inline constexpr jPackage javax_swing_undo = javax_swing / "undo";
namespace javax::tools {}
[[maybe_unused]] inline constexpr jPackage javax_tools = javax_ / "tools";
namespace javax::transaction {}
[[maybe_unused]] inline constexpr jPackage javax_transaction = javax_ / "transaction";
namespace javax::transaction::xa {}
[[maybe_unused]] inline constexpr jPackage javax_transaction_xa = javax_transaction / "xa";
namespace javax::xml {}
[[maybe_unused]] inline constexpr jPackage javax_xml = javax_ / "xml";
namespace javax::xml::bind {}
[[maybe_unused]] inline constexpr jPackage javax_xml_bind = javax_xml / "bind";
namespace javax::xml::bind::annotation {}
[[maybe_unused]] inline constexpr jPackage javax_xml_bind_annotation = javax_xml_bind / "annotation";
namespace javax::xml::bind::annotation::adapters {}
[[maybe_unused]] inline constexpr jPackage javax_xml_bind_annotation_adapters = javax_xml_bind_annotation / "adapters";
namespace javax::xml::bind::attachment {}
[[maybe_unused]] inline constexpr jPackage javax_xml_bind_attachment = javax_xml_bind / "attachment";
namespace javax::xml::bind::helpers {}
[[maybe_unused]] inline constexpr jPackage javax_xml_bind_helpers = javax_xml_bind / "helpers";
namespace javax::xml::bind::util {}
[[maybe_unused]] inline constexpr jPackage javax_xml_bind_util = javax_xml_bind / "util";
namespace javax::xml::crypto {}
[[maybe_unused]] inline constexpr jPackage javax_xml_crypto = javax_xml / "crypto";
namespace javax::xml::crypto::dom {}
[[maybe_unused]] inline constexpr jPackage javax_xml_crypto_dom = javax_xml_crypto / "dom";
namespace javax::xml::crypto::dsig {}
[[maybe_unused]] inline constexpr jPackage javax_xml_crypto_dsig = javax_xml_crypto / "dsig";
namespace javax::xml::crypto::dsig::dom {}
[[maybe_unused]] inline constexpr jPackage javax_xml_crypto_dsig_dom = javax_xml_crypto_dsig / "dom";
namespace javax::xml::crypto::dsig::keyinfo {}
[[maybe_unused]] inline constexpr jPackage javax_xml_crypto_dsig_keyinfo = javax_xml_crypto_dsig / "keyinfo";
namespace javax::xml::crypto::dsig::spec {}
[[maybe_unused]] inline constexpr jPackage javax_xml_crypto_dsig_spec = javax_xml_crypto_dsig / "spec";
namespace javax::xml::datatype {}
[[maybe_unused]] inline constexpr jPackage javax_xml_datatype = javax_xml / "datatype";
namespace javax::xml::namespace_ {}
[[maybe_unused]] inline constexpr jPackage javax_xml_namespace_ = javax_xml / "namespace_";
namespace javax::xml::parsers {}
[[maybe_unused]] inline constexpr jPackage javax_xml_parsers = javax_xml / "parsers";
namespace javax::xml::soap {}
[[maybe_unused]] inline constexpr jPackage javax_xml_soap = javax_xml / "soap";
namespace javax::xml::stream {}
[[maybe_unused]] inline constexpr jPackage javax_xml_stream = javax_xml / "stream";
namespace javax::xml::stream::events {}
[[maybe_unused]] inline constexpr jPackage javax_xml_stream_events = javax_xml_stream / "events";
namespace javax::xml::stream::util {}
[[maybe_unused]] inline constexpr jPackage javax_xml_stream_util = javax_xml_stream / "util";
namespace javax::xml::transform {}
[[maybe_unused]] inline constexpr jPackage javax_xml_transform = javax_xml / "transform";
namespace javax::xml::transform::dom {}
[[maybe_unused]] inline constexpr jPackage javax_xml_transform_dom = javax_xml_transform / "dom";
namespace javax::xml::transform::sax {}
[[maybe_unused]] inline constexpr jPackage javax_xml_transform_sax = javax_xml_transform / "sax";
namespace javax::xml::transform::stax {}
[[maybe_unused]] inline constexpr jPackage javax_xml_transform_stax = javax_xml_transform / "stax";
namespace javax::xml::transform::stream {}
[[maybe_unused]] inline constexpr jPackage javax_xml_transform_stream = javax_xml_transform / "stream";
namespace javax::xml::validation {}
[[maybe_unused]] inline constexpr jPackage javax_xml_validation = javax_xml / "validation";
namespace javax::xml::ws {}
[[maybe_unused]] inline constexpr jPackage javax_xml_ws = javax_xml / "ws";
namespace javax::xml::ws::handler {}
[[maybe_unused]] inline constexpr jPackage javax_xml_ws_handler = javax_xml_ws / "handler";
namespace javax::xml::ws::handler::soap {}
[[maybe_unused]] inline constexpr jPackage javax_xml_ws_handler_soap = javax_xml_ws_handler / "soap";
namespace javax::xml::ws::http {}
[[maybe_unused]] inline constexpr jPackage javax_xml_ws_http = javax_xml_ws / "http";
namespace javax::xml::ws::soap {}
[[maybe_unused]] inline constexpr jPackage javax_xml_ws_soap = javax_xml_ws / "soap";
namespace javax::xml::ws::spi {}
[[maybe_unused]] inline constexpr jPackage javax_xml_ws_spi = javax_xml_ws / "spi";
namespace javax::xml::ws::spi::http {}
[[maybe_unused]] inline constexpr jPackage javax_xml_ws_spi_http = javax_xml_ws_spi / "http";
namespace javax::xml::ws::wsaddressing {}
[[maybe_unused]] inline constexpr jPackage javax_xml_ws_wsaddressing = javax_xml_ws / "wsaddressing";
namespace javax::xml::xpath {}
[[maybe_unused]] inline constexpr jPackage javax_xml_xpath = javax_xml / "xpath";
namespace org {}
[[maybe_unused]] inline constexpr jPackage org_{"org"};
namespace org::eclipse {}
[[maybe_unused]] inline constexpr jPackage org_eclipse = org_ / "eclipse";
namespace org::eclipse::swt {}
[[maybe_unused]] inline constexpr jPackage org_eclipse_swt = org_eclipse / "swt";
namespace org::eclipse::swt::accessibility {}
[[maybe_unused]] inline constexpr jPackage org_eclipse_swt_accessibility = org_eclipse_swt / "accessibility";
namespace org::eclipse::swt::awt {}
[[maybe_unused]] inline constexpr jPackage org_eclipse_swt_awt = org_eclipse_swt / "awt";
namespace org::eclipse::swt::browser {}
[[maybe_unused]] inline constexpr jPackage org_eclipse_swt_browser = org_eclipse_swt / "browser";
namespace org::eclipse::swt::custom {}
[[maybe_unused]] inline constexpr jPackage org_eclipse_swt_custom = org_eclipse_swt / "custom";
namespace org::eclipse::swt::dnd {}
[[maybe_unused]] inline constexpr jPackage org_eclipse_swt_dnd = org_eclipse_swt / "dnd";
namespace org::eclipse::swt::events {}
[[maybe_unused]] inline constexpr jPackage org_eclipse_swt_events = org_eclipse_swt / "events";
namespace org::eclipse::swt::graphics {}
[[maybe_unused]] inline constexpr jPackage org_eclipse_swt_graphics = org_eclipse_swt / "graphics";
namespace org::eclipse::swt::internal {}
[[maybe_unused]] inline constexpr jPackage org_eclipse_swt_internal = org_eclipse_swt / "internal";
namespace org::eclipse::swt::layout {}
[[maybe_unused]] inline constexpr jPackage org_eclipse_swt_layout = org_eclipse_swt / "layout";
namespace org::eclipse::swt::opengl {}
[[maybe_unused]] inline constexpr jPackage org_eclipse_swt_opengl = org_eclipse_swt / "opengl";
namespace org::eclipse::swt::printing {}
[[maybe_unused]] inline constexpr jPackage org_eclipse_swt_printing = org_eclipse_swt / "printing";
namespace org::eclipse::swt::program {}
[[maybe_unused]] inline constexpr jPackage org_eclipse_swt_program = org_eclipse_swt / "program";
namespace org::eclipse::swt::widgets {}
[[maybe_unused]] inline constexpr jPackage org_eclipse_swt_widgets = org_eclipse_swt / "widgets";
namespace org::ietf {}
[[maybe_unused]] inline constexpr jPackage org_ietf = org_ / "ietf";
namespace org::ietf::jgss {}
[[maybe_unused]] inline constexpr jPackage org_ietf_jgss = org_ietf / "jgss";
namespace org::jcp {}
[[maybe_unused]] inline constexpr jPackage org_jcp = org_ / "jcp";
namespace org::jcp::xml {}
[[maybe_unused]] inline constexpr jPackage org_jcp_xml = org_jcp / "xml";
namespace org::jcp::xml::dsig {}
[[maybe_unused]] inline constexpr jPackage org_jcp_xml_dsig = org_jcp_xml / "dsig";
namespace org::jcp::xml::dsig::internal {}
[[maybe_unused]] inline constexpr jPackage org_jcp_xml_dsig_internal = org_jcp_xml_dsig / "internal";
namespace org::omg {}
[[maybe_unused]] inline constexpr jPackage org_omg = org_ / "omg";
namespace org::omg::CORBA {}
[[maybe_unused]] inline constexpr jPackage org_omg_CORBA = org_omg / "CORBA";
namespace org::omg::CORBA_2 {}
[[maybe_unused]] inline constexpr jPackage org_omg_CORBA_2 = org_omg / "CORBA_2";
namespace org::omg::CORBA::DynAnyPackage {}
[[maybe_unused]] inline constexpr jPackage org_omg_CORBA_DynAnyPackage = org_omg_CORBA / "DynAnyPackage";
namespace org::omg::CORBA::ORBPackage {}
[[maybe_unused]] inline constexpr jPackage org_omg_CORBA_ORBPackage = org_omg_CORBA / "ORBPackage";
namespace org::omg::CORBA::TypeCodePackage {}
[[maybe_unused]] inline constexpr jPackage org_omg_CORBA_TypeCodePackage = org_omg_CORBA / "TypeCodePackage";
namespace org::omg::CORBA::portable {}
[[maybe_unused]] inline constexpr jPackage org_omg_CORBA_portable = org_omg_CORBA / "portable";
namespace org::omg::CORBA_2_3 {}
[[maybe_unused]] inline constexpr jPackage org_omg_CORBA_2_3 = org_omg_CORBA_2 / "3";
namespace org::omg::CORBA_2_3::portable {}
[[maybe_unused]] inline constexpr jPackage org_omg_CORBA_2_3_portable = org_omg_CORBA_2_3 / "portable";
namespace org::omg::CosNaming {}
[[maybe_unused]] inline constexpr jPackage org_omg_CosNaming = org_omg / "CosNaming";
namespace org::omg::CosNaming::NamingContextExtPackage {}
[[maybe_unused]] inline constexpr jPackage org_omg_CosNaming_NamingContextExtPackage = org_omg_CosNaming / "NamingContextExtPackage";
namespace org::omg::CosNaming::NamingContextPackage {}
[[maybe_unused]] inline constexpr jPackage org_omg_CosNaming_NamingContextPackage = org_omg_CosNaming / "NamingContextPackage";
namespace org::omg::Dynamic {}
[[maybe_unused]] inline constexpr jPackage org_omg_Dynamic = org_omg / "Dynamic";
namespace org::omg::DynamicAny {}
[[maybe_unused]] inline constexpr jPackage org_omg_DynamicAny = org_omg / "DynamicAny";
namespace org::omg::DynamicAny::DynAnyFactoryPackage {}
[[maybe_unused]] inline constexpr jPackage org_omg_DynamicAny_DynAnyFactoryPackage = org_omg_DynamicAny / "DynAnyFactoryPackage";
namespace org::omg::DynamicAny::DynAnyPackage {}
[[maybe_unused]] inline constexpr jPackage org_omg_DynamicAny_DynAnyPackage = org_omg_DynamicAny / "DynAnyPackage";
namespace org::omg::IOP {}
[[maybe_unused]] inline constexpr jPackage org_omg_IOP = org_omg / "IOP";
namespace org::omg::IOP::CodecFactoryPackage {}
[[maybe_unused]] inline constexpr jPackage org_omg_IOP_CodecFactoryPackage = org_omg_IOP / "CodecFactoryPackage";
namespace org::omg::IOP::CodecPackage {}
[[maybe_unused]] inline constexpr jPackage org_omg_IOP_CodecPackage = org_omg_IOP / "CodecPackage";
namespace org::omg::Messaging {}
[[maybe_unused]] inline constexpr jPackage org_omg_Messaging = org_omg / "Messaging";
namespace org::omg::PortableInterceptor {}
[[maybe_unused]] inline constexpr jPackage org_omg_PortableInterceptor = org_omg / "PortableInterceptor";
namespace org::omg::PortableInterceptor::ORBInitInfoPackage {}
[[maybe_unused]] inline constexpr jPackage org_omg_PortableInterceptor_ORBInitInfoPackage = org_omg_PortableInterceptor / "ORBInitInfoPackage";
namespace org::omg::PortableServer {}
[[maybe_unused]] inline constexpr jPackage org_omg_PortableServer = org_omg / "PortableServer";
namespace org::omg::PortableServer::CurrentPackage {}
[[maybe_unused]] inline constexpr jPackage org_omg_PortableServer_CurrentPackage = org_omg_PortableServer / "CurrentPackage";
namespace org::omg::PortableServer::POAManagerPackage {}
[[maybe_unused]] inline constexpr jPackage org_omg_PortableServer_POAManagerPackage = org_omg_PortableServer / "POAManagerPackage";
namespace org::omg::PortableServer::POAPackage {}
[[maybe_unused]] inline constexpr jPackage org_omg_PortableServer_POAPackage = org_omg_PortableServer / "POAPackage";
namespace org::omg::PortableServer::ServantLocatorPackage {}
[[maybe_unused]] inline constexpr jPackage org_omg_PortableServer_ServantLocatorPackage = org_omg_PortableServer / "ServantLocatorPackage";
namespace org::omg::PortableServer::portable {}
[[maybe_unused]] inline constexpr jPackage org_omg_PortableServer_portable = org_omg_PortableServer / "portable";
namespace org::omg::SendingContext {}
[[maybe_unused]] inline constexpr jPackage org_omg_SendingContext = org_omg / "SendingContext";
namespace org::omg::stub {}
[[maybe_unused]] inline constexpr jPackage org_omg_stub = org_omg / "stub";
namespace org::omg::stub::java {}
[[maybe_unused]] inline constexpr jPackage org_omg_stub_java = org_omg_stub / "java";
namespace org::omg::stub::java::rmi {}
[[maybe_unused]] inline constexpr jPackage org_omg_stub_java_rmi = org_omg_stub_java / "rmi";
namespace org::omg::stub::javax {}
[[maybe_unused]] inline constexpr jPackage org_omg_stub_javax = org_omg_stub / "javax";
namespace org::omg::stub::javax::management {}
[[maybe_unused]] inline constexpr jPackage org_omg_stub_javax_management = org_omg_stub_javax / "management";
namespace org::omg::stub::javax::management::remote {}
[[maybe_unused]] inline constexpr jPackage org_omg_stub_javax_management_remote = org_omg_stub_javax_management / "remote";
namespace org::omg::stub::javax::management::remote::rmi {}
[[maybe_unused]] inline constexpr jPackage org_omg_stub_javax_management_remote_rmi = org_omg_stub_javax_management_remote / "rmi";
namespace org::w3c {}
[[maybe_unused]] inline constexpr jPackage org_w3c = org_ / "w3c";
namespace org::w3c::dom {}
[[maybe_unused]] inline constexpr jPackage org_w3c_dom = org_w3c / "dom";
namespace org::w3c::dom::bootstrap {}
[[maybe_unused]] inline constexpr jPackage org_w3c_dom_bootstrap = org_w3c_dom / "bootstrap";
namespace org::w3c::dom::css {}
[[maybe_unused]] inline constexpr jPackage org_w3c_dom_css = org_w3c_dom / "css";
namespace org::w3c::dom::events {}
[[maybe_unused]] inline constexpr jPackage org_w3c_dom_events = org_w3c_dom / "events";
namespace org::w3c::dom::html {}
[[maybe_unused]] inline constexpr jPackage org_w3c_dom_html = org_w3c_dom / "html";
namespace org::w3c::dom::ls {}
[[maybe_unused]] inline constexpr jPackage org_w3c_dom_ls = org_w3c_dom / "ls";
namespace org::w3c::dom::ranges {}
[[maybe_unused]] inline constexpr jPackage org_w3c_dom_ranges = org_w3c_dom / "ranges";
namespace org::w3c::dom::stylesheets {}
[[maybe_unused]] inline constexpr jPackage org_w3c_dom_stylesheets = org_w3c_dom / "stylesheets";
namespace org::w3c::dom::traversal {}
[[maybe_unused]] inline constexpr jPackage org_w3c_dom_traversal = org_w3c_dom / "traversal";
namespace org::w3c::dom::views {}
[[maybe_unused]] inline constexpr jPackage org_w3c_dom_views = org_w3c_dom / "views";
namespace org::w3c::dom::xpath {}
[[maybe_unused]] inline constexpr jPackage org_w3c_dom_xpath = org_w3c_dom / "xpath";
namespace org::xml {}
[[maybe_unused]] inline constexpr jPackage org_xml = org_ / "xml";
namespace org::xml::sax {}
[[maybe_unused]] inline constexpr jPackage org_xml_sax = org_xml / "sax";
namespace org::xml::sax::ext {}
[[maybe_unused]] inline constexpr jPackage org_xml_sax_ext = org_xml_sax / "ext";
namespace org::xml::sax::helpers {}
[[maybe_unused]] inline constexpr jPackage org_xml_sax_helpers = org_xml_sax / "helpers";

namespace java::lang { class Class; }
template<> constexpr auto signature<::java::lang::Class> = ::java_lang / "Class";
namespace java::lang { class Object; }
template<> constexpr auto signature<::java::lang::Object> = ::java_lang / "Object";
namespace java::lang { class String; }
template<> constexpr auto signature<::java::lang::String> = ::java_lang / "String";
namespace java::lang { class AbstractMethodError; }
template<> constexpr auto signature<::java::lang::AbstractMethodError> = ::java_lang / "AbstractMethodError";
namespace java::lang { class AbstractStringBuilder; }
template<> constexpr auto signature<::java::lang::AbstractStringBuilder> = ::java_lang / "AbstractStringBuilder";
namespace java::lang { class Appendable; }
template<> constexpr auto signature<::java::lang::Appendable> = ::java_lang / "Appendable";
namespace java::lang { class ApplicationShutdownHooks; }
template<> constexpr auto signature<::java::lang::ApplicationShutdownHooks> = ::java_lang / "ApplicationShutdownHooks";
namespace java::lang { class ApplicationShutdownHooks$1; }
template<> constexpr auto signature<::java::lang::ApplicationShutdownHooks$1> = ::java_lang / "ApplicationShutdownHooks$1";
namespace java::lang { class ArithmeticException; }
template<> constexpr auto signature<::java::lang::ArithmeticException> = ::java_lang / "ArithmeticException";
namespace java::lang { class ArrayIndexOutOfBoundsException; }
template<> constexpr auto signature<::java::lang::ArrayIndexOutOfBoundsException> = ::java_lang / "ArrayIndexOutOfBoundsException";
namespace java::lang { class ArrayStoreException; }
template<> constexpr auto signature<::java::lang::ArrayStoreException> = ::java_lang / "ArrayStoreException";
namespace java::lang { class AssertionError; }
template<> constexpr auto signature<::java::lang::AssertionError> = ::java_lang / "AssertionError";
namespace java::lang { class AssertionStatusDirectives; }
template<> constexpr auto signature<::java::lang::AssertionStatusDirectives> = ::java_lang / "AssertionStatusDirectives";
namespace java::lang { class AutoCloseable; }
template<> constexpr auto signature<::java::lang::AutoCloseable> = ::java_lang / "AutoCloseable";
namespace java::lang { class Boolean; }
template<> constexpr auto signature<::java::lang::Boolean> = ::java_lang / "Boolean";
namespace java::lang { class BootstrapMethodError; }
template<> constexpr auto signature<::java::lang::BootstrapMethodError> = ::java_lang / "BootstrapMethodError";
namespace java::lang { class Byte; }
template<> constexpr auto signature<::java::lang::Byte> = ::java_lang / "Byte";
namespace java::lang { class Byte$ByteCache; }
template<> constexpr auto signature<::java::lang::Byte$ByteCache> = ::java_lang / "Byte$ByteCache";
namespace java::lang { class CharSequence; }
template<> constexpr auto signature<::java::lang::CharSequence> = ::java_lang / "CharSequence";
namespace java::lang { class CharSequence$1CharIterator; }
template<> constexpr auto signature<::java::lang::CharSequence$1CharIterator> = ::java_lang / "CharSequence$1CharIterator";
namespace java::lang { class CharSequence$1CodePointIterator; }
template<> constexpr auto signature<::java::lang::CharSequence$1CodePointIterator> = ::java_lang / "CharSequence$1CodePointIterator";
namespace java::lang { class Character; }
template<> constexpr auto signature<::java::lang::Character> = ::java_lang / "Character";
namespace java::lang { class Character$CharacterCache; }
template<> constexpr auto signature<::java::lang::Character$CharacterCache> = ::java_lang / "Character$CharacterCache";
namespace java::lang { class Character$Subset; }
template<> constexpr auto signature<::java::lang::Character$Subset> = ::java_lang / "Character$Subset";
namespace java::lang { class Character$UnicodeBlock; }
template<> constexpr auto signature<::java::lang::Character$UnicodeBlock> = ::java_lang / "Character$UnicodeBlock";
namespace java::lang { class Character$UnicodeScript; }
template<> constexpr auto signature<::java::lang::Character$UnicodeScript> = ::java_lang / "Character$UnicodeScript";
namespace java::lang { class CharacterData; }
template<> constexpr auto signature<::java::lang::CharacterData> = ::java_lang / "CharacterData";
namespace java::lang { class CharacterData00; }
template<> constexpr auto signature<::java::lang::CharacterData00> = ::java_lang / "CharacterData00";
namespace java::lang { class CharacterData01; }
template<> constexpr auto signature<::java::lang::CharacterData01> = ::java_lang / "CharacterData01";
namespace java::lang { class CharacterData02; }
template<> constexpr auto signature<::java::lang::CharacterData02> = ::java_lang / "CharacterData02";
namespace java::lang { class CharacterData0E; }
template<> constexpr auto signature<::java::lang::CharacterData0E> = ::java_lang / "CharacterData0E";
namespace java::lang { class CharacterDataLatin1; }
template<> constexpr auto signature<::java::lang::CharacterDataLatin1> = ::java_lang / "CharacterDataLatin1";
namespace java::lang { class CharacterDataPrivateUse; }
template<> constexpr auto signature<::java::lang::CharacterDataPrivateUse> = ::java_lang / "CharacterDataPrivateUse";
namespace java::lang { class CharacterDataUndefined; }
template<> constexpr auto signature<::java::lang::CharacterDataUndefined> = ::java_lang / "CharacterDataUndefined";
namespace java::lang { class CharacterName; }
template<> constexpr auto signature<::java::lang::CharacterName> = ::java_lang / "CharacterName";
namespace java::lang { class CharacterName$1; }
template<> constexpr auto signature<::java::lang::CharacterName$1> = ::java_lang / "CharacterName$1";
namespace java::lang { class Class$1; }
template<> constexpr auto signature<::java::lang::Class$1> = ::java_lang / "Class$1";
namespace java::lang { class Class$2; }
template<> constexpr auto signature<::java::lang::Class$2> = ::java_lang / "Class$2";
namespace java::lang { class Class$3; }
template<> constexpr auto signature<::java::lang::Class$3> = ::java_lang / "Class$3";
namespace java::lang { class Class$4; }
template<> constexpr auto signature<::java::lang::Class$4> = ::java_lang / "Class$4";
namespace java::lang { class Class$AnnotationData; }
template<> constexpr auto signature<::java::lang::Class$AnnotationData> = ::java_lang / "Class$AnnotationData";
namespace java::lang { class Class$Atomic; }
template<> constexpr auto signature<::java::lang::Class$Atomic> = ::java_lang / "Class$Atomic";
namespace java::lang { class Class$EnclosingMethodInfo; }
template<> constexpr auto signature<::java::lang::Class$EnclosingMethodInfo> = ::java_lang / "Class$EnclosingMethodInfo";
namespace java::lang { class Class$MethodArray; }
template<> constexpr auto signature<::java::lang::Class$MethodArray> = ::java_lang / "Class$MethodArray";
namespace java::lang { class Class$ReflectionData; }
template<> constexpr auto signature<::java::lang::Class$ReflectionData> = ::java_lang / "Class$ReflectionData";
namespace java::lang { class ClassCastException; }
template<> constexpr auto signature<::java::lang::ClassCastException> = ::java_lang / "ClassCastException";
namespace java::lang { class ClassCircularityError; }
template<> constexpr auto signature<::java::lang::ClassCircularityError> = ::java_lang / "ClassCircularityError";
namespace java::lang { class ClassFormatError; }
template<> constexpr auto signature<::java::lang::ClassFormatError> = ::java_lang / "ClassFormatError";
namespace java::lang { class ClassLoader; }
template<> constexpr auto signature<::java::lang::ClassLoader> = ::java_lang / "ClassLoader";
namespace java::lang { class ClassLoader$1; }
template<> constexpr auto signature<::java::lang::ClassLoader$1> = ::java_lang / "ClassLoader$1";
namespace java::lang { class ClassLoader$2; }
template<> constexpr auto signature<::java::lang::ClassLoader$2> = ::java_lang / "ClassLoader$2";
namespace java::lang { class ClassLoader$3; }
template<> constexpr auto signature<::java::lang::ClassLoader$3> = ::java_lang / "ClassLoader$3";
namespace java::lang { class ClassLoader$NativeLibrary; }
template<> constexpr auto signature<::java::lang::ClassLoader$NativeLibrary> = ::java_lang / "ClassLoader$NativeLibrary";
namespace java::lang { class ClassLoader$ParallelLoaders; }
template<> constexpr auto signature<::java::lang::ClassLoader$ParallelLoaders> = ::java_lang / "ClassLoader$ParallelLoaders";
namespace java::lang { class ClassLoaderHelper; }
template<> constexpr auto signature<::java::lang::ClassLoaderHelper> = ::java_lang / "ClassLoaderHelper";
namespace java::lang { class ClassNotFoundException; }
template<> constexpr auto signature<::java::lang::ClassNotFoundException> = ::java_lang / "ClassNotFoundException";
namespace java::lang { class ClassValue; }
template<> constexpr auto signature<::java::lang::ClassValue> = ::java_lang / "ClassValue";
namespace java::lang { class ClassValue$ClassValueMap; }
template<> constexpr auto signature<::java::lang::ClassValue$ClassValueMap> = ::java_lang / "ClassValue$ClassValueMap";
namespace java::lang { class ClassValue$Entry; }
template<> constexpr auto signature<::java::lang::ClassValue$Entry> = ::java_lang / "ClassValue$Entry";
namespace java::lang { class ClassValue$Identity; }
template<> constexpr auto signature<::java::lang::ClassValue$Identity> = ::java_lang / "ClassValue$Identity";
namespace java::lang { class ClassValue$Version; }
template<> constexpr auto signature<::java::lang::ClassValue$Version> = ::java_lang / "ClassValue$Version";
namespace java::lang { class CloneNotSupportedException; }
template<> constexpr auto signature<::java::lang::CloneNotSupportedException> = ::java_lang / "CloneNotSupportedException";
namespace java::lang { class Cloneable; }
template<> constexpr auto signature<::java::lang::Cloneable> = ::java_lang / "Cloneable";
namespace java::lang { class Comparable; }
template<> constexpr auto signature<::java::lang::Comparable> = ::java_lang / "Comparable";
namespace java::lang { class Compiler; }
template<> constexpr auto signature<::java::lang::Compiler> = ::java_lang / "Compiler";
namespace java::lang { class Compiler$1; }
template<> constexpr auto signature<::java::lang::Compiler$1> = ::java_lang / "Compiler$1";
namespace java::lang { class ConditionalSpecialCasing; }
template<> constexpr auto signature<::java::lang::ConditionalSpecialCasing> = ::java_lang / "ConditionalSpecialCasing";
namespace java::lang { class ConditionalSpecialCasing$Entry; }
template<> constexpr auto signature<::java::lang::ConditionalSpecialCasing$Entry> = ::java_lang / "ConditionalSpecialCasing$Entry";
namespace java::lang { class Deprecated; }
template<> constexpr auto signature<::java::lang::Deprecated> = ::java_lang / "Deprecated";
namespace java::lang { class Double; }
template<> constexpr auto signature<::java::lang::Double> = ::java_lang / "Double";
namespace java::lang { class Enum; }
template<> constexpr auto signature<::java::lang::Enum> = ::java_lang / "Enum";
namespace java::lang { class EnumConstantNotPresentException; }
template<> constexpr auto signature<::java::lang::EnumConstantNotPresentException> = ::java_lang / "EnumConstantNotPresentException";
namespace java::lang { class Error; }
template<> constexpr auto signature<::java::lang::Error> = ::java_lang / "Error";
namespace java::lang { class Exception; }
template<> constexpr auto signature<::java::lang::Exception> = ::java_lang / "Exception";
namespace java::lang { class ExceptionInInitializerError; }
template<> constexpr auto signature<::java::lang::ExceptionInInitializerError> = ::java_lang / "ExceptionInInitializerError";
namespace java::lang { class Float; }
template<> constexpr auto signature<::java::lang::Float> = ::java_lang / "Float";
namespace java::lang { class FunctionalInterface; }
template<> constexpr auto signature<::java::lang::FunctionalInterface> = ::java_lang / "FunctionalInterface";
namespace java::lang { class IllegalAccessError; }
template<> constexpr auto signature<::java::lang::IllegalAccessError> = ::java_lang / "IllegalAccessError";
namespace java::lang { class IllegalAccessException; }
template<> constexpr auto signature<::java::lang::IllegalAccessException> = ::java_lang / "IllegalAccessException";
namespace java::lang { class IllegalArgumentException; }
template<> constexpr auto signature<::java::lang::IllegalArgumentException> = ::java_lang / "IllegalArgumentException";
namespace java::lang { class IllegalMonitorStateException; }
template<> constexpr auto signature<::java::lang::IllegalMonitorStateException> = ::java_lang / "IllegalMonitorStateException";
namespace java::lang { class IllegalStateException; }
template<> constexpr auto signature<::java::lang::IllegalStateException> = ::java_lang / "IllegalStateException";
namespace java::lang { class IllegalThreadStateException; }
template<> constexpr auto signature<::java::lang::IllegalThreadStateException> = ::java_lang / "IllegalThreadStateException";
namespace java::lang { class IncompatibleClassChangeError; }
template<> constexpr auto signature<::java::lang::IncompatibleClassChangeError> = ::java_lang / "IncompatibleClassChangeError";
namespace java::lang { class IndexOutOfBoundsException; }
template<> constexpr auto signature<::java::lang::IndexOutOfBoundsException> = ::java_lang / "IndexOutOfBoundsException";
namespace java::lang { class InheritableThreadLocal; }
template<> constexpr auto signature<::java::lang::InheritableThreadLocal> = ::java_lang / "InheritableThreadLocal";
namespace java::lang { class InstantiationError; }
template<> constexpr auto signature<::java::lang::InstantiationError> = ::java_lang / "InstantiationError";
namespace java::lang { class InstantiationException; }
template<> constexpr auto signature<::java::lang::InstantiationException> = ::java_lang / "InstantiationException";
namespace java::lang { class Integer; }
template<> constexpr auto signature<::java::lang::Integer> = ::java_lang / "Integer";
namespace java::lang { class Integer$IntegerCache; }
template<> constexpr auto signature<::java::lang::Integer$IntegerCache> = ::java_lang / "Integer$IntegerCache";
namespace java::lang { class InternalError; }
template<> constexpr auto signature<::java::lang::InternalError> = ::java_lang / "InternalError";
namespace java::lang { class InterruptedException; }
template<> constexpr auto signature<::java::lang::InterruptedException> = ::java_lang / "InterruptedException";
namespace java::lang { class Iterable; }
template<> constexpr auto signature<::java::lang::Iterable> = ::java_lang / "Iterable";
namespace java::lang { class LinkageError; }
template<> constexpr auto signature<::java::lang::LinkageError> = ::java_lang / "LinkageError";
namespace java::lang { class Long; }
template<> constexpr auto signature<::java::lang::Long> = ::java_lang / "Long";
namespace java::lang { class Long$LongCache; }
template<> constexpr auto signature<::java::lang::Long$LongCache> = ::java_lang / "Long$LongCache";
namespace java::lang { class Math; }
template<> constexpr auto signature<::java::lang::Math> = ::java_lang / "Math";
namespace java::lang { class Math$RandomNumberGeneratorHolder; }
template<> constexpr auto signature<::java::lang::Math$RandomNumberGeneratorHolder> = ::java_lang / "Math$RandomNumberGeneratorHolder";
namespace java::lang { class NegativeArraySizeException; }
template<> constexpr auto signature<::java::lang::NegativeArraySizeException> = ::java_lang / "NegativeArraySizeException";
namespace java::lang { class NoClassDefFoundError; }
template<> constexpr auto signature<::java::lang::NoClassDefFoundError> = ::java_lang / "NoClassDefFoundError";
namespace java::lang { class NoSuchFieldError; }
template<> constexpr auto signature<::java::lang::NoSuchFieldError> = ::java_lang / "NoSuchFieldError";
namespace java::lang { class NoSuchFieldException; }
template<> constexpr auto signature<::java::lang::NoSuchFieldException> = ::java_lang / "NoSuchFieldException";
namespace java::lang { class NoSuchMethodError; }
template<> constexpr auto signature<::java::lang::NoSuchMethodError> = ::java_lang / "NoSuchMethodError";
namespace java::lang { class NoSuchMethodException; }
template<> constexpr auto signature<::java::lang::NoSuchMethodException> = ::java_lang / "NoSuchMethodException";
namespace java::lang { class NullPointerException; }
template<> constexpr auto signature<::java::lang::NullPointerException> = ::java_lang / "NullPointerException";
namespace java::lang { class Number; }
template<> constexpr auto signature<::java::lang::Number> = ::java_lang / "Number";
namespace java::lang { class NumberFormatException; }
template<> constexpr auto signature<::java::lang::NumberFormatException> = ::java_lang / "NumberFormatException";
namespace java::lang { class OutOfMemoryError; }
template<> constexpr auto signature<::java::lang::OutOfMemoryError> = ::java_lang / "OutOfMemoryError";
namespace java::lang { class Override; }
template<> constexpr auto signature<::java::lang::Override> = ::java_lang / "Override";
namespace java::lang { class Package; }
template<> constexpr auto signature<::java::lang::Package> = ::java_lang / "Package";
namespace java::lang { class Package$1; }
template<> constexpr auto signature<::java::lang::Package$1> = ::java_lang / "Package$1";
namespace java::lang { class Package$1PackageInfoProxy; }
template<> constexpr auto signature<::java::lang::Package$1PackageInfoProxy> = ::java_lang / "Package$1PackageInfoProxy";
namespace java::lang { class Process; }
template<> constexpr auto signature<::java::lang::Process> = ::java_lang / "Process";
namespace java::lang { class ProcessBuilder; }
template<> constexpr auto signature<::java::lang::ProcessBuilder> = ::java_lang / "ProcessBuilder";
namespace java::lang { class ProcessBuilder$1; }
template<> constexpr auto signature<::java::lang::ProcessBuilder$1> = ::java_lang / "ProcessBuilder$1";
namespace java::lang { class ProcessBuilder$NullInputStream; }
template<> constexpr auto signature<::java::lang::ProcessBuilder$NullInputStream> = ::java_lang / "ProcessBuilder$NullInputStream";
namespace java::lang { class ProcessBuilder$NullOutputStream; }
template<> constexpr auto signature<::java::lang::ProcessBuilder$NullOutputStream> = ::java_lang / "ProcessBuilder$NullOutputStream";
namespace java::lang { class ProcessBuilder$Redirect; }
template<> constexpr auto signature<::java::lang::ProcessBuilder$Redirect> = ::java_lang / "ProcessBuilder$Redirect";
namespace java::lang { class ProcessBuilder$Redirect$1; }
template<> constexpr auto signature<::java::lang::ProcessBuilder$Redirect$1> = ::java_lang / "ProcessBuilder$Redirect$1";
namespace java::lang { class ProcessBuilder$Redirect$2; }
template<> constexpr auto signature<::java::lang::ProcessBuilder$Redirect$2> = ::java_lang / "ProcessBuilder$Redirect$2";
namespace java::lang { class ProcessBuilder$Redirect$3; }
template<> constexpr auto signature<::java::lang::ProcessBuilder$Redirect$3> = ::java_lang / "ProcessBuilder$Redirect$3";
namespace java::lang { class ProcessBuilder$Redirect$4; }
template<> constexpr auto signature<::java::lang::ProcessBuilder$Redirect$4> = ::java_lang / "ProcessBuilder$Redirect$4";
namespace java::lang { class ProcessBuilder$Redirect$5; }
template<> constexpr auto signature<::java::lang::ProcessBuilder$Redirect$5> = ::java_lang / "ProcessBuilder$Redirect$5";
namespace java::lang { class ProcessBuilder$Redirect$Type; }
template<> constexpr auto signature<::java::lang::ProcessBuilder$Redirect$Type> = ::java_lang / "ProcessBuilder$Redirect$Type";
namespace java::lang { class ProcessEnvironment; }
template<> constexpr auto signature<::java::lang::ProcessEnvironment> = ::java_lang / "ProcessEnvironment";
namespace java::lang { class ProcessEnvironment$ExternalData; }
template<> constexpr auto signature<::java::lang::ProcessEnvironment$ExternalData> = ::java_lang / "ProcessEnvironment$ExternalData";
namespace java::lang { class ProcessEnvironment$StringEntry; }
template<> constexpr auto signature<::java::lang::ProcessEnvironment$StringEntry> = ::java_lang / "ProcessEnvironment$StringEntry";
namespace java::lang { class ProcessEnvironment$StringEntrySet; }
template<> constexpr auto signature<::java::lang::ProcessEnvironment$StringEntrySet> = ::java_lang / "ProcessEnvironment$StringEntrySet";
namespace java::lang { class ProcessEnvironment$StringEntrySet$1; }
template<> constexpr auto signature<::java::lang::ProcessEnvironment$StringEntrySet$1> = ::java_lang / "ProcessEnvironment$StringEntrySet$1";
namespace java::lang { class ProcessEnvironment$StringEntrySet$2; }
template<> constexpr auto signature<::java::lang::ProcessEnvironment$StringEntrySet$2> = ::java_lang / "ProcessEnvironment$StringEntrySet$2";
namespace java::lang { class ProcessEnvironment$StringEnvironment; }
template<> constexpr auto signature<::java::lang::ProcessEnvironment$StringEnvironment> = ::java_lang / "ProcessEnvironment$StringEnvironment";
namespace java::lang { class ProcessEnvironment$StringKeySet; }
template<> constexpr auto signature<::java::lang::ProcessEnvironment$StringKeySet> = ::java_lang / "ProcessEnvironment$StringKeySet";
namespace java::lang { class ProcessEnvironment$StringKeySet$1; }
template<> constexpr auto signature<::java::lang::ProcessEnvironment$StringKeySet$1> = ::java_lang / "ProcessEnvironment$StringKeySet$1";
namespace java::lang { class ProcessEnvironment$StringValues; }
template<> constexpr auto signature<::java::lang::ProcessEnvironment$StringValues> = ::java_lang / "ProcessEnvironment$StringValues";
namespace java::lang { class ProcessEnvironment$StringValues$1; }
template<> constexpr auto signature<::java::lang::ProcessEnvironment$StringValues$1> = ::java_lang / "ProcessEnvironment$StringValues$1";
namespace java::lang { class ProcessEnvironment$Value; }
template<> constexpr auto signature<::java::lang::ProcessEnvironment$Value> = ::java_lang / "ProcessEnvironment$Value";
namespace java::lang { class ProcessEnvironment$Variable; }
template<> constexpr auto signature<::java::lang::ProcessEnvironment$Variable> = ::java_lang / "ProcessEnvironment$Variable";
namespace java::lang { class ProcessImpl; }
template<> constexpr auto signature<::java::lang::ProcessImpl> = ::java_lang / "ProcessImpl";
namespace java::lang { class Readable; }
template<> constexpr auto signature<::java::lang::Readable> = ::java_lang / "Readable";
namespace java::lang { class ReflectiveOperationException; }
template<> constexpr auto signature<::java::lang::ReflectiveOperationException> = ::java_lang / "ReflectiveOperationException";
namespace java::lang { class Runnable; }
template<> constexpr auto signature<::java::lang::Runnable> = ::java_lang / "Runnable";
namespace java::lang { class Runtime; }
template<> constexpr auto signature<::java::lang::Runtime> = ::java_lang / "Runtime";
namespace java::lang { class RuntimeException; }
template<> constexpr auto signature<::java::lang::RuntimeException> = ::java_lang / "RuntimeException";
namespace java::lang { class RuntimePermission; }
template<> constexpr auto signature<::java::lang::RuntimePermission> = ::java_lang / "RuntimePermission";
namespace java::lang { class SafeVarargs; }
template<> constexpr auto signature<::java::lang::SafeVarargs> = ::java_lang / "SafeVarargs";
namespace java::lang { class SecurityException; }
template<> constexpr auto signature<::java::lang::SecurityException> = ::java_lang / "SecurityException";
namespace java::lang { class SecurityManager; }
template<> constexpr auto signature<::java::lang::SecurityManager> = ::java_lang / "SecurityManager";
namespace java::lang { class SecurityManager$1; }
template<> constexpr auto signature<::java::lang::SecurityManager$1> = ::java_lang / "SecurityManager$1";
namespace java::lang { class SecurityManager$2; }
template<> constexpr auto signature<::java::lang::SecurityManager$2> = ::java_lang / "SecurityManager$2";
namespace java::lang { class Short; }
template<> constexpr auto signature<::java::lang::Short> = ::java_lang / "Short";
namespace java::lang { class Short$ShortCache; }
template<> constexpr auto signature<::java::lang::Short$ShortCache> = ::java_lang / "Short$ShortCache";
namespace java::lang { class Shutdown; }
template<> constexpr auto signature<::java::lang::Shutdown> = ::java_lang / "Shutdown";
namespace java::lang { class Shutdown$1; }
template<> constexpr auto signature<::java::lang::Shutdown$1> = ::java_lang / "Shutdown$1";
namespace java::lang { class Shutdown$Lock; }
template<> constexpr auto signature<::java::lang::Shutdown$Lock> = ::java_lang / "Shutdown$Lock";
namespace java::lang { class StackOverflowError; }
template<> constexpr auto signature<::java::lang::StackOverflowError> = ::java_lang / "StackOverflowError";
namespace java::lang { class StackTraceElement; }
template<> constexpr auto signature<::java::lang::StackTraceElement> = ::java_lang / "StackTraceElement";
namespace java::lang { class StrictMath; }
template<> constexpr auto signature<::java::lang::StrictMath> = ::java_lang / "StrictMath";
namespace java::lang { class StrictMath$RandomNumberGeneratorHolder; }
template<> constexpr auto signature<::java::lang::StrictMath$RandomNumberGeneratorHolder> = ::java_lang / "StrictMath$RandomNumberGeneratorHolder";
namespace java::lang { class String$1; }
template<> constexpr auto signature<::java::lang::String$1> = ::java_lang / "String$1";
namespace java::lang { class String$CaseInsensitiveComparator; }
template<> constexpr auto signature<::java::lang::String$CaseInsensitiveComparator> = ::java_lang / "String$CaseInsensitiveComparator";
namespace java::lang { class StringBuffer; }
template<> constexpr auto signature<::java::lang::StringBuffer> = ::java_lang / "StringBuffer";
namespace java::lang { class StringBuilder; }
template<> constexpr auto signature<::java::lang::StringBuilder> = ::java_lang / "StringBuilder";
namespace java::lang { class StringCoding; }
template<> constexpr auto signature<::java::lang::StringCoding> = ::java_lang / "StringCoding";
namespace java::lang { class StringCoding$1; }
template<> constexpr auto signature<::java::lang::StringCoding$1> = ::java_lang / "StringCoding$1";
namespace java::lang { class StringCoding$StringDecoder; }
template<> constexpr auto signature<::java::lang::StringCoding$StringDecoder> = ::java_lang / "StringCoding$StringDecoder";
namespace java::lang { class StringCoding$StringEncoder; }
template<> constexpr auto signature<::java::lang::StringCoding$StringEncoder> = ::java_lang / "StringCoding$StringEncoder";
namespace java::lang { class StringIndexOutOfBoundsException; }
template<> constexpr auto signature<::java::lang::StringIndexOutOfBoundsException> = ::java_lang / "StringIndexOutOfBoundsException";
namespace java::lang { class SuppressWarnings; }
template<> constexpr auto signature<::java::lang::SuppressWarnings> = ::java_lang / "SuppressWarnings";
namespace java::lang { class System; }
template<> constexpr auto signature<::java::lang::System> = ::java_lang / "System";
namespace java::lang { class System$1; }
template<> constexpr auto signature<::java::lang::System$1> = ::java_lang / "System$1";
namespace java::lang { class System$2; }
template<> constexpr auto signature<::java::lang::System$2> = ::java_lang / "System$2";
namespace java::lang { class SystemClassLoaderAction; }
template<> constexpr auto signature<::java::lang::SystemClassLoaderAction> = ::java_lang / "SystemClassLoaderAction";
namespace java::lang { class Terminator; }
template<> constexpr auto signature<::java::lang::Terminator> = ::java_lang / "Terminator";
namespace java::lang { class Terminator$1; }
template<> constexpr auto signature<::java::lang::Terminator$1> = ::java_lang / "Terminator$1";
namespace java::lang { class Thread; }
template<> constexpr auto signature<::java::lang::Thread> = ::java_lang / "Thread";
namespace java::lang { class Thread$1; }
template<> constexpr auto signature<::java::lang::Thread$1> = ::java_lang / "Thread$1";
namespace java::lang { class Thread$Caches; }
template<> constexpr auto signature<::java::lang::Thread$Caches> = ::java_lang / "Thread$Caches";
namespace java::lang { class Thread$State; }
template<> constexpr auto signature<::java::lang::Thread$State> = ::java_lang / "Thread$State";
namespace java::lang { class Thread$UncaughtExceptionHandler; }
template<> constexpr auto signature<::java::lang::Thread$UncaughtExceptionHandler> = ::java_lang / "Thread$UncaughtExceptionHandler";
namespace java::lang { class Thread$WeakClassKey; }
template<> constexpr auto signature<::java::lang::Thread$WeakClassKey> = ::java_lang / "Thread$WeakClassKey";
namespace java::lang { class ThreadDeath; }
template<> constexpr auto signature<::java::lang::ThreadDeath> = ::java_lang / "ThreadDeath";
namespace java::lang { class ThreadGroup; }
template<> constexpr auto signature<::java::lang::ThreadGroup> = ::java_lang / "ThreadGroup";
namespace java::lang { class ThreadLocal; }
template<> constexpr auto signature<::java::lang::ThreadLocal> = ::java_lang / "ThreadLocal";
namespace java::lang { class ThreadLocal$1; }
template<> constexpr auto signature<::java::lang::ThreadLocal$1> = ::java_lang / "ThreadLocal$1";
namespace java::lang { class ThreadLocal$SuppliedThreadLocal; }
template<> constexpr auto signature<::java::lang::ThreadLocal$SuppliedThreadLocal> = ::java_lang / "ThreadLocal$SuppliedThreadLocal";
namespace java::lang { class ThreadLocal$ThreadLocalMap; }
template<> constexpr auto signature<::java::lang::ThreadLocal$ThreadLocalMap> = ::java_lang / "ThreadLocal$ThreadLocalMap";
namespace java::lang { class ThreadLocal$ThreadLocalMap$Entry; }
template<> constexpr auto signature<::java::lang::ThreadLocal$ThreadLocalMap$Entry> = ::java_lang / "ThreadLocal$ThreadLocalMap$Entry";
namespace java::lang { class Throwable; }
template<> constexpr auto signature<::java::lang::Throwable> = ::java_lang / "Throwable";
namespace java::lang { class Throwable$1; }
template<> constexpr auto signature<::java::lang::Throwable$1> = ::java_lang / "Throwable$1";
namespace java::lang { class Throwable$PrintStreamOrWriter; }
template<> constexpr auto signature<::java::lang::Throwable$PrintStreamOrWriter> = ::java_lang / "Throwable$PrintStreamOrWriter";
namespace java::lang { class Throwable$SentinelHolder; }
template<> constexpr auto signature<::java::lang::Throwable$SentinelHolder> = ::java_lang / "Throwable$SentinelHolder";
namespace java::lang { class Throwable$WrappedPrintStream; }
template<> constexpr auto signature<::java::lang::Throwable$WrappedPrintStream> = ::java_lang / "Throwable$WrappedPrintStream";
namespace java::lang { class Throwable$WrappedPrintWriter; }
template<> constexpr auto signature<::java::lang::Throwable$WrappedPrintWriter> = ::java_lang / "Throwable$WrappedPrintWriter";
namespace java::lang { class TypeNotPresentException; }
template<> constexpr auto signature<::java::lang::TypeNotPresentException> = ::java_lang / "TypeNotPresentException";
namespace java::lang { class UNIXProcess; }
template<> constexpr auto signature<::java::lang::UNIXProcess> = ::java_lang / "UNIXProcess";
namespace java::lang { class UNIXProcess$1; }
template<> constexpr auto signature<::java::lang::UNIXProcess$1> = ::java_lang / "UNIXProcess$1";
namespace java::lang { class UNIXProcess$DeferredCloseInputStream; }
template<> constexpr auto signature<::java::lang::UNIXProcess$DeferredCloseInputStream> = ::java_lang / "UNIXProcess$DeferredCloseInputStream";
namespace java::lang { class UNIXProcess$DeferredCloseProcessPipeInputStream; }
template<> constexpr auto signature<::java::lang::UNIXProcess$DeferredCloseProcessPipeInputStream> = ::java_lang / "UNIXProcess$DeferredCloseProcessPipeInputStream";
namespace java::lang { class UNIXProcess$LaunchMechanism; }
template<> constexpr auto signature<::java::lang::UNIXProcess$LaunchMechanism> = ::java_lang / "UNIXProcess$LaunchMechanism";
namespace java::lang { class UNIXProcess$Platform; }
template<> constexpr auto signature<::java::lang::UNIXProcess$Platform> = ::java_lang / "UNIXProcess$Platform";
namespace java::lang { class UNIXProcess$ProcessPipeInputStream; }
template<> constexpr auto signature<::java::lang::UNIXProcess$ProcessPipeInputStream> = ::java_lang / "UNIXProcess$ProcessPipeInputStream";
namespace java::lang { class UNIXProcess$ProcessPipeOutputStream; }
template<> constexpr auto signature<::java::lang::UNIXProcess$ProcessPipeOutputStream> = ::java_lang / "UNIXProcess$ProcessPipeOutputStream";
namespace java::lang { class UnknownError; }
template<> constexpr auto signature<::java::lang::UnknownError> = ::java_lang / "UnknownError";
namespace java::lang { class UnsatisfiedLinkError; }
template<> constexpr auto signature<::java::lang::UnsatisfiedLinkError> = ::java_lang / "UnsatisfiedLinkError";
namespace java::lang { class UnsupportedClassVersionError; }
template<> constexpr auto signature<::java::lang::UnsupportedClassVersionError> = ::java_lang / "UnsupportedClassVersionError";
namespace java::lang { class UnsupportedOperationException; }
template<> constexpr auto signature<::java::lang::UnsupportedOperationException> = ::java_lang / "UnsupportedOperationException";
namespace java::lang { class VerifyError; }
template<> constexpr auto signature<::java::lang::VerifyError> = ::java_lang / "VerifyError";
namespace java::lang { class VirtualMachineError; }
template<> constexpr auto signature<::java::lang::VirtualMachineError> = ::java_lang / "VirtualMachineError";
namespace java::lang { class Void; }
template<> constexpr auto signature<::java::lang::Void> = ::java_lang / "Void";
namespace java::lang::annotation { class Annotation; }
template<> constexpr auto signature<::java::lang::annotation::Annotation> = ::java_lang_annotation / "Annotation";
namespace java::lang::annotation { class AnnotationFormatError; }
template<> constexpr auto signature<::java::lang::annotation::AnnotationFormatError> = ::java_lang_annotation / "AnnotationFormatError";
namespace java::lang::annotation { class AnnotationTypeMismatchException; }
template<> constexpr auto signature<::java::lang::annotation::AnnotationTypeMismatchException> = ::java_lang_annotation / "AnnotationTypeMismatchException";
namespace java::lang::annotation { class Documented; }
template<> constexpr auto signature<::java::lang::annotation::Documented> = ::java_lang_annotation / "Documented";
namespace java::lang::annotation { class ElementType; }
template<> constexpr auto signature<::java::lang::annotation::ElementType> = ::java_lang_annotation / "ElementType";
namespace java::lang::annotation { class IncompleteAnnotationException; }
template<> constexpr auto signature<::java::lang::annotation::IncompleteAnnotationException> = ::java_lang_annotation / "IncompleteAnnotationException";
namespace java::lang::annotation { class Inherited; }
template<> constexpr auto signature<::java::lang::annotation::Inherited> = ::java_lang_annotation / "Inherited";
namespace java::lang::annotation { class Native; }
template<> constexpr auto signature<::java::lang::annotation::Native> = ::java_lang_annotation / "Native";
namespace java::lang::annotation { class Repeatable; }
template<> constexpr auto signature<::java::lang::annotation::Repeatable> = ::java_lang_annotation / "Repeatable";
namespace java::lang::annotation { class Retention; }
template<> constexpr auto signature<::java::lang::annotation::Retention> = ::java_lang_annotation / "Retention";
namespace java::lang::annotation { class RetentionPolicy; }
template<> constexpr auto signature<::java::lang::annotation::RetentionPolicy> = ::java_lang_annotation / "RetentionPolicy";
namespace java::lang::annotation { class Target; }
template<> constexpr auto signature<::java::lang::annotation::Target> = ::java_lang_annotation / "Target";
namespace java::lang::instrument { class ClassDefinition; }
template<> constexpr auto signature<::java::lang::instrument::ClassDefinition> = ::java_lang_instrument / "ClassDefinition";
namespace java::lang::instrument { class ClassFileTransformer; }
template<> constexpr auto signature<::java::lang::instrument::ClassFileTransformer> = ::java_lang_instrument / "ClassFileTransformer";
namespace java::lang::instrument { class IllegalClassFormatException; }
template<> constexpr auto signature<::java::lang::instrument::IllegalClassFormatException> = ::java_lang_instrument / "IllegalClassFormatException";
namespace java::lang::instrument { class Instrumentation; }
template<> constexpr auto signature<::java::lang::instrument::Instrumentation> = ::java_lang_instrument / "Instrumentation";
namespace java::lang::instrument { class UnmodifiableClassException; }
template<> constexpr auto signature<::java::lang::instrument::UnmodifiableClassException> = ::java_lang_instrument / "UnmodifiableClassException";
namespace java::lang::invoke { class AbstractValidatingLambdaMetafactory; }
template<> constexpr auto signature<::java::lang::invoke::AbstractValidatingLambdaMetafactory> = ::java_lang_invoke / "AbstractValidatingLambdaMetafactory";
namespace java::lang::invoke { class BoundMethodHandle; }
template<> constexpr auto signature<::java::lang::invoke::BoundMethodHandle> = ::java_lang_invoke / "BoundMethodHandle";
namespace java::lang::invoke { class BoundMethodHandle$1; }
template<> constexpr auto signature<::java::lang::invoke::BoundMethodHandle$1> = ::java_lang_invoke / "BoundMethodHandle$1";
namespace java::lang::invoke { class BoundMethodHandle$Factory; }
template<> constexpr auto signature<::java::lang::invoke::BoundMethodHandle$Factory> = ::java_lang_invoke / "BoundMethodHandle$Factory";
namespace java::lang::invoke { class BoundMethodHandle$Factory$1; }
template<> constexpr auto signature<::java::lang::invoke::BoundMethodHandle$Factory$1> = ::java_lang_invoke / "BoundMethodHandle$Factory$1";
namespace java::lang::invoke { class BoundMethodHandle$SpeciesData; }
template<> constexpr auto signature<::java::lang::invoke::BoundMethodHandle$SpeciesData> = ::java_lang_invoke / "BoundMethodHandle$SpeciesData";
namespace java::lang::invoke { class BoundMethodHandle$SpeciesData$1; }
template<> constexpr auto signature<::java::lang::invoke::BoundMethodHandle$SpeciesData$1> = ::java_lang_invoke / "BoundMethodHandle$SpeciesData$1";
namespace java::lang::invoke { class BoundMethodHandle$Species_L; }
template<> constexpr auto signature<::java::lang::invoke::BoundMethodHandle$Species_L> = ::java_lang_invoke / "BoundMethodHandle$Species_L";
namespace java::lang::invoke { class CallSite; }
template<> constexpr auto signature<::java::lang::invoke::CallSite> = ::java_lang_invoke / "CallSite";
namespace java::lang::invoke { class ConstantCallSite; }
template<> constexpr auto signature<::java::lang::invoke::ConstantCallSite> = ::java_lang_invoke / "ConstantCallSite";
namespace java::lang::invoke { class DelegatingMethodHandle; }
template<> constexpr auto signature<::java::lang::invoke::DelegatingMethodHandle> = ::java_lang_invoke / "DelegatingMethodHandle";
namespace java::lang::invoke { class DirectMethodHandle; }
template<> constexpr auto signature<::java::lang::invoke::DirectMethodHandle> = ::java_lang_invoke / "DirectMethodHandle";
namespace java::lang::invoke { class DirectMethodHandle$1; }
template<> constexpr auto signature<::java::lang::invoke::DirectMethodHandle$1> = ::java_lang_invoke / "DirectMethodHandle$1";
namespace java::lang::invoke { class DirectMethodHandle$Accessor; }
template<> constexpr auto signature<::java::lang::invoke::DirectMethodHandle$Accessor> = ::java_lang_invoke / "DirectMethodHandle$Accessor";
namespace java::lang::invoke { class DirectMethodHandle$Constructor; }
template<> constexpr auto signature<::java::lang::invoke::DirectMethodHandle$Constructor> = ::java_lang_invoke / "DirectMethodHandle$Constructor";
namespace java::lang::invoke { class DirectMethodHandle$EnsureInitialized; }
template<> constexpr auto signature<::java::lang::invoke::DirectMethodHandle$EnsureInitialized> = ::java_lang_invoke / "DirectMethodHandle$EnsureInitialized";
namespace java::lang::invoke { class DirectMethodHandle$Lazy; }
template<> constexpr auto signature<::java::lang::invoke::DirectMethodHandle$Lazy> = ::java_lang_invoke / "DirectMethodHandle$Lazy";
namespace java::lang::invoke { class DirectMethodHandle$Special; }
template<> constexpr auto signature<::java::lang::invoke::DirectMethodHandle$Special> = ::java_lang_invoke / "DirectMethodHandle$Special";
namespace java::lang::invoke { class DirectMethodHandle$StaticAccessor; }
template<> constexpr auto signature<::java::lang::invoke::DirectMethodHandle$StaticAccessor> = ::java_lang_invoke / "DirectMethodHandle$StaticAccessor";
namespace java::lang::invoke { class DontInline; }
template<> constexpr auto signature<::java::lang::invoke::DontInline> = ::java_lang_invoke / "DontInline";
namespace java::lang::invoke { class ForceInline; }
template<> constexpr auto signature<::java::lang::invoke::ForceInline> = ::java_lang_invoke / "ForceInline";
namespace java::lang::invoke { class InfoFromMemberName; }
template<> constexpr auto signature<::java::lang::invoke::InfoFromMemberName> = ::java_lang_invoke / "InfoFromMemberName";
namespace java::lang::invoke { class InfoFromMemberName$1; }
template<> constexpr auto signature<::java::lang::invoke::InfoFromMemberName$1> = ::java_lang_invoke / "InfoFromMemberName$1";
namespace java::lang::invoke { class InjectedProfile; }
template<> constexpr auto signature<::java::lang::invoke::InjectedProfile> = ::java_lang_invoke / "InjectedProfile";
namespace java::lang::invoke { class InnerClassLambdaMetafactory; }
template<> constexpr auto signature<::java::lang::invoke::InnerClassLambdaMetafactory> = ::java_lang_invoke / "InnerClassLambdaMetafactory";
namespace java::lang::invoke { class InnerClassLambdaMetafactory$1; }
template<> constexpr auto signature<::java::lang::invoke::InnerClassLambdaMetafactory$1> = ::java_lang_invoke / "InnerClassLambdaMetafactory$1";
namespace java::lang::invoke { class InnerClassLambdaMetafactory$2; }
template<> constexpr auto signature<::java::lang::invoke::InnerClassLambdaMetafactory$2> = ::java_lang_invoke / "InnerClassLambdaMetafactory$2";
namespace java::lang::invoke { class InnerClassLambdaMetafactory$ForwardingMethodGenerator; }
template<> constexpr auto signature<::java::lang::invoke::InnerClassLambdaMetafactory$ForwardingMethodGenerator> = ::java_lang_invoke / "InnerClassLambdaMetafactory$ForwardingMethodGenerator";
namespace java::lang::invoke { class InvokeDynamic; }
template<> constexpr auto signature<::java::lang::invoke::InvokeDynamic> = ::java_lang_invoke / "InvokeDynamic";
namespace java::lang::invoke { class InvokerBytecodeGenerator; }
template<> constexpr auto signature<::java::lang::invoke::InvokerBytecodeGenerator> = ::java_lang_invoke / "InvokerBytecodeGenerator";
namespace java::lang::invoke { class InvokerBytecodeGenerator$1; }
template<> constexpr auto signature<::java::lang::invoke::InvokerBytecodeGenerator$1> = ::java_lang_invoke / "InvokerBytecodeGenerator$1";
namespace java::lang::invoke { class InvokerBytecodeGenerator$2; }
template<> constexpr auto signature<::java::lang::invoke::InvokerBytecodeGenerator$2> = ::java_lang_invoke / "InvokerBytecodeGenerator$2";
namespace java::lang::invoke { class InvokerBytecodeGenerator$CpPatch; }
template<> constexpr auto signature<::java::lang::invoke::InvokerBytecodeGenerator$CpPatch> = ::java_lang_invoke / "InvokerBytecodeGenerator$CpPatch";
namespace java::lang::invoke { class Invokers; }
template<> constexpr auto signature<::java::lang::invoke::Invokers> = ::java_lang_invoke / "Invokers";
namespace java::lang::invoke { class Invokers$Lazy; }
template<> constexpr auto signature<::java::lang::invoke::Invokers$Lazy> = ::java_lang_invoke / "Invokers$Lazy";
namespace java::lang::invoke { class LambdaConversionException; }
template<> constexpr auto signature<::java::lang::invoke::LambdaConversionException> = ::java_lang_invoke / "LambdaConversionException";
namespace java::lang::invoke { class LambdaForm; }
template<> constexpr auto signature<::java::lang::invoke::LambdaForm> = ::java_lang_invoke / "LambdaForm";
namespace java::lang::invoke { class LambdaForm$1; }
template<> constexpr auto signature<::java::lang::invoke::LambdaForm$1> = ::java_lang_invoke / "LambdaForm$1";
namespace java::lang::invoke { class LambdaForm$BasicType; }
template<> constexpr auto signature<::java::lang::invoke::LambdaForm$BasicType> = ::java_lang_invoke / "LambdaForm$BasicType";
namespace java::lang::invoke { class LambdaForm$Compiled; }
template<> constexpr auto signature<::java::lang::invoke::LambdaForm$Compiled> = ::java_lang_invoke / "LambdaForm$Compiled";
namespace java::lang::invoke { class LambdaForm$Hidden; }
template<> constexpr auto signature<::java::lang::invoke::LambdaForm$Hidden> = ::java_lang_invoke / "LambdaForm$Hidden";
namespace java::lang::invoke { class LambdaForm$Name; }
template<> constexpr auto signature<::java::lang::invoke::LambdaForm$Name> = ::java_lang_invoke / "LambdaForm$Name";
namespace java::lang::invoke { class LambdaForm$NamedFunction; }
template<> constexpr auto signature<::java::lang::invoke::LambdaForm$NamedFunction> = ::java_lang_invoke / "LambdaForm$NamedFunction";
namespace java::lang::invoke { class LambdaFormBuffer; }
template<> constexpr auto signature<::java::lang::invoke::LambdaFormBuffer> = ::java_lang_invoke / "LambdaFormBuffer";
namespace java::lang::invoke { class LambdaFormEditor; }
template<> constexpr auto signature<::java::lang::invoke::LambdaFormEditor> = ::java_lang_invoke / "LambdaFormEditor";
namespace java::lang::invoke { class LambdaFormEditor$Transform; }
template<> constexpr auto signature<::java::lang::invoke::LambdaFormEditor$Transform> = ::java_lang_invoke / "LambdaFormEditor$Transform";
namespace java::lang::invoke { class LambdaFormEditor$Transform$Kind; }
template<> constexpr auto signature<::java::lang::invoke::LambdaFormEditor$Transform$Kind> = ::java_lang_invoke / "LambdaFormEditor$Transform$Kind";
namespace java::lang::invoke { class LambdaMetafactory; }
template<> constexpr auto signature<::java::lang::invoke::LambdaMetafactory> = ::java_lang_invoke / "LambdaMetafactory";
namespace java::lang::invoke { class MemberName; }
template<> constexpr auto signature<::java::lang::invoke::MemberName> = ::java_lang_invoke / "MemberName";
namespace java::lang::invoke { class MemberName$Factory; }
template<> constexpr auto signature<::java::lang::invoke::MemberName$Factory> = ::java_lang_invoke / "MemberName$Factory";
namespace java::lang::invoke { class MethodHandle; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandle> = ::java_lang_invoke / "MethodHandle";
namespace java::lang::invoke { class MethodHandle$PolymorphicSignature; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandle$PolymorphicSignature> = ::java_lang_invoke / "MethodHandle$PolymorphicSignature";
namespace java::lang::invoke { class MethodHandleImpl; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleImpl> = ::java_lang_invoke / "MethodHandleImpl";
namespace java::lang::invoke { class MethodHandleImpl$1; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleImpl$1> = ::java_lang_invoke / "MethodHandleImpl$1";
namespace java::lang::invoke { class MethodHandleImpl$2; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleImpl$2> = ::java_lang_invoke / "MethodHandleImpl$2";
namespace java::lang::invoke { class MethodHandleImpl$3; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleImpl$3> = ::java_lang_invoke / "MethodHandleImpl$3";
namespace java::lang::invoke { class MethodHandleImpl$4; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleImpl$4> = ::java_lang_invoke / "MethodHandleImpl$4";
namespace java::lang::invoke { class MethodHandleImpl$ArrayAccessor; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleImpl$ArrayAccessor> = ::java_lang_invoke / "MethodHandleImpl$ArrayAccessor";
namespace java::lang::invoke { class MethodHandleImpl$ArrayAccessor$1; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleImpl$ArrayAccessor$1> = ::java_lang_invoke / "MethodHandleImpl$ArrayAccessor$1";
namespace java::lang::invoke { class MethodHandleImpl$AsVarargsCollector; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleImpl$AsVarargsCollector> = ::java_lang_invoke / "MethodHandleImpl$AsVarargsCollector";
namespace java::lang::invoke { class MethodHandleImpl$BindCaller; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleImpl$BindCaller> = ::java_lang_invoke / "MethodHandleImpl$BindCaller";
namespace java::lang::invoke { class MethodHandleImpl$BindCaller$1; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleImpl$BindCaller$1> = ::java_lang_invoke / "MethodHandleImpl$BindCaller$1";
namespace java::lang::invoke { class MethodHandleImpl$BindCaller$2; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleImpl$BindCaller$2> = ::java_lang_invoke / "MethodHandleImpl$BindCaller$2";
namespace java::lang::invoke { class MethodHandleImpl$BindCaller$T; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleImpl$BindCaller$T> = ::java_lang_invoke / "MethodHandleImpl$BindCaller$T";
namespace java::lang::invoke { class MethodHandleImpl$CountingWrapper; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleImpl$CountingWrapper> = ::java_lang_invoke / "MethodHandleImpl$CountingWrapper";
namespace java::lang::invoke { class MethodHandleImpl$Intrinsic; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleImpl$Intrinsic> = ::java_lang_invoke / "MethodHandleImpl$Intrinsic";
namespace java::lang::invoke { class MethodHandleImpl$IntrinsicMethodHandle; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleImpl$IntrinsicMethodHandle> = ::java_lang_invoke / "MethodHandleImpl$IntrinsicMethodHandle";
namespace java::lang::invoke { class MethodHandleImpl$Lazy; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleImpl$Lazy> = ::java_lang_invoke / "MethodHandleImpl$Lazy";
namespace java::lang::invoke { class MethodHandleImpl$WrappedMember; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleImpl$WrappedMember> = ::java_lang_invoke / "MethodHandleImpl$WrappedMember";
namespace java::lang::invoke { class MethodHandleInfo; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleInfo> = ::java_lang_invoke / "MethodHandleInfo";
namespace java::lang::invoke { class MethodHandleNatives; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleNatives> = ::java_lang_invoke / "MethodHandleNatives";
namespace java::lang::invoke { class MethodHandleNatives$Constants; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleNatives$Constants> = ::java_lang_invoke / "MethodHandleNatives$Constants";
namespace java::lang::invoke { class MethodHandleProxies; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleProxies> = ::java_lang_invoke / "MethodHandleProxies";
namespace java::lang::invoke { class MethodHandleProxies$1; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleProxies$1> = ::java_lang_invoke / "MethodHandleProxies$1";
namespace java::lang::invoke { class MethodHandleProxies$2; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleProxies$2> = ::java_lang_invoke / "MethodHandleProxies$2";
namespace java::lang::invoke { class MethodHandleStatics; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleStatics> = ::java_lang_invoke / "MethodHandleStatics";
namespace java::lang::invoke { class MethodHandleStatics$1; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandleStatics$1> = ::java_lang_invoke / "MethodHandleStatics$1";
namespace java::lang::invoke { class MethodHandles; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandles> = ::java_lang_invoke / "MethodHandles";
namespace java::lang::invoke { class MethodHandles$1; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandles$1> = ::java_lang_invoke / "MethodHandles$1";
namespace java::lang::invoke { class MethodHandles$Lookup; }
template<> constexpr auto signature<::java::lang::invoke::MethodHandles$Lookup> = ::java_lang_invoke / "MethodHandles$Lookup";
namespace java::lang::invoke { class MethodType; }
template<> constexpr auto signature<::java::lang::invoke::MethodType> = ::java_lang_invoke / "MethodType";
namespace java::lang::invoke { class MethodType$ConcurrentWeakInternSet; }
template<> constexpr auto signature<::java::lang::invoke::MethodType$ConcurrentWeakInternSet> = ::java_lang_invoke / "MethodType$ConcurrentWeakInternSet";
namespace java::lang::invoke { class MethodType$ConcurrentWeakInternSet$WeakEntry; }
template<> constexpr auto signature<::java::lang::invoke::MethodType$ConcurrentWeakInternSet$WeakEntry> = ::java_lang_invoke / "MethodType$ConcurrentWeakInternSet$WeakEntry";
namespace java::lang::invoke { class MethodTypeForm; }
template<> constexpr auto signature<::java::lang::invoke::MethodTypeForm> = ::java_lang_invoke / "MethodTypeForm";
namespace java::lang::invoke { class MutableCallSite; }
template<> constexpr auto signature<::java::lang::invoke::MutableCallSite> = ::java_lang_invoke / "MutableCallSite";
namespace java::lang::invoke { class ProxyClassesDumper; }
template<> constexpr auto signature<::java::lang::invoke::ProxyClassesDumper> = ::java_lang_invoke / "ProxyClassesDumper";
namespace java::lang::invoke { class ProxyClassesDumper$1; }
template<> constexpr auto signature<::java::lang::invoke::ProxyClassesDumper$1> = ::java_lang_invoke / "ProxyClassesDumper$1";
namespace java::lang::invoke { class SerializedLambda; }
template<> constexpr auto signature<::java::lang::invoke::SerializedLambda> = ::java_lang_invoke / "SerializedLambda";
namespace java::lang::invoke { class SerializedLambda$1; }
template<> constexpr auto signature<::java::lang::invoke::SerializedLambda$1> = ::java_lang_invoke / "SerializedLambda$1";
namespace java::lang::invoke { class SimpleMethodHandle; }
template<> constexpr auto signature<::java::lang::invoke::SimpleMethodHandle> = ::java_lang_invoke / "SimpleMethodHandle";
namespace java::lang::invoke { class Stable; }
template<> constexpr auto signature<::java::lang::invoke::Stable> = ::java_lang_invoke / "Stable";
namespace java::lang::invoke { class SwitchPoint; }
template<> constexpr auto signature<::java::lang::invoke::SwitchPoint> = ::java_lang_invoke / "SwitchPoint";
namespace java::lang::invoke { class TypeConvertingMethodAdapter; }
template<> constexpr auto signature<::java::lang::invoke::TypeConvertingMethodAdapter> = ::java_lang_invoke / "TypeConvertingMethodAdapter";
namespace java::lang::invoke { class VolatileCallSite; }
template<> constexpr auto signature<::java::lang::invoke::VolatileCallSite> = ::java_lang_invoke / "VolatileCallSite";
namespace java::lang::invoke { class WrongMethodTypeException; }
template<> constexpr auto signature<::java::lang::invoke::WrongMethodTypeException> = ::java_lang_invoke / "WrongMethodTypeException";
namespace java::lang::management { class BufferPoolMXBean; }
template<> constexpr auto signature<::java::lang::management::BufferPoolMXBean> = ::java_lang_management / "BufferPoolMXBean";
namespace java::lang::management { class ClassLoadingMXBean; }
template<> constexpr auto signature<::java::lang::management::ClassLoadingMXBean> = ::java_lang_management / "ClassLoadingMXBean";
namespace java::lang::management { class CompilationMXBean; }
template<> constexpr auto signature<::java::lang::management::CompilationMXBean> = ::java_lang_management / "CompilationMXBean";
namespace java::lang::management { class GarbageCollectorMXBean; }
template<> constexpr auto signature<::java::lang::management::GarbageCollectorMXBean> = ::java_lang_management / "GarbageCollectorMXBean";
namespace java::lang::management { class LockInfo; }
template<> constexpr auto signature<::java::lang::management::LockInfo> = ::java_lang_management / "LockInfo";
namespace java::lang::management { class ManagementFactory; }
template<> constexpr auto signature<::java::lang::management::ManagementFactory> = ::java_lang_management / "ManagementFactory";
namespace java::lang::management { class ManagementFactory$1; }
template<> constexpr auto signature<::java::lang::management::ManagementFactory$1> = ::java_lang_management / "ManagementFactory$1";
namespace java::lang::management { class ManagementFactory$2; }
template<> constexpr auto signature<::java::lang::management::ManagementFactory$2> = ::java_lang_management / "ManagementFactory$2";
namespace java::lang::management { class ManagementFactory$3; }
template<> constexpr auto signature<::java::lang::management::ManagementFactory$3> = ::java_lang_management / "ManagementFactory$3";
namespace java::lang::management { class ManagementPermission; }
template<> constexpr auto signature<::java::lang::management::ManagementPermission> = ::java_lang_management / "ManagementPermission";
namespace java::lang::management { class MemoryMXBean; }
template<> constexpr auto signature<::java::lang::management::MemoryMXBean> = ::java_lang_management / "MemoryMXBean";
namespace java::lang::management { class MemoryManagerMXBean; }
template<> constexpr auto signature<::java::lang::management::MemoryManagerMXBean> = ::java_lang_management / "MemoryManagerMXBean";
namespace java::lang::management { class MemoryNotificationInfo; }
template<> constexpr auto signature<::java::lang::management::MemoryNotificationInfo> = ::java_lang_management / "MemoryNotificationInfo";
namespace java::lang::management { class MemoryPoolMXBean; }
template<> constexpr auto signature<::java::lang::management::MemoryPoolMXBean> = ::java_lang_management / "MemoryPoolMXBean";
namespace java::lang::management { class MemoryType; }
template<> constexpr auto signature<::java::lang::management::MemoryType> = ::java_lang_management / "MemoryType";
namespace java::lang::management { class MemoryUsage; }
template<> constexpr auto signature<::java::lang::management::MemoryUsage> = ::java_lang_management / "MemoryUsage";
namespace java::lang::management { class MonitorInfo; }
template<> constexpr auto signature<::java::lang::management::MonitorInfo> = ::java_lang_management / "MonitorInfo";
namespace java::lang::management { class OperatingSystemMXBean; }
template<> constexpr auto signature<::java::lang::management::OperatingSystemMXBean> = ::java_lang_management / "OperatingSystemMXBean";
namespace java::lang::management { class PlatformComponent; }
template<> constexpr auto signature<::java::lang::management::PlatformComponent> = ::java_lang_management / "PlatformComponent";
namespace java::lang::management { class PlatformComponent$1; }
template<> constexpr auto signature<::java::lang::management::PlatformComponent$1> = ::java_lang_management / "PlatformComponent$1";
namespace java::lang::management { class PlatformComponent$10; }
template<> constexpr auto signature<::java::lang::management::PlatformComponent$10> = ::java_lang_management / "PlatformComponent$10";
namespace java::lang::management { class PlatformComponent$11; }
template<> constexpr auto signature<::java::lang::management::PlatformComponent$11> = ::java_lang_management / "PlatformComponent$11";
namespace java::lang::management { class PlatformComponent$12; }
template<> constexpr auto signature<::java::lang::management::PlatformComponent$12> = ::java_lang_management / "PlatformComponent$12";
namespace java::lang::management { class PlatformComponent$13; }
template<> constexpr auto signature<::java::lang::management::PlatformComponent$13> = ::java_lang_management / "PlatformComponent$13";
namespace java::lang::management { class PlatformComponent$14; }
template<> constexpr auto signature<::java::lang::management::PlatformComponent$14> = ::java_lang_management / "PlatformComponent$14";
namespace java::lang::management { class PlatformComponent$15; }
template<> constexpr auto signature<::java::lang::management::PlatformComponent$15> = ::java_lang_management / "PlatformComponent$15";
namespace java::lang::management { class PlatformComponent$2; }
template<> constexpr auto signature<::java::lang::management::PlatformComponent$2> = ::java_lang_management / "PlatformComponent$2";
namespace java::lang::management { class PlatformComponent$3; }
template<> constexpr auto signature<::java::lang::management::PlatformComponent$3> = ::java_lang_management / "PlatformComponent$3";
namespace java::lang::management { class PlatformComponent$4; }
template<> constexpr auto signature<::java::lang::management::PlatformComponent$4> = ::java_lang_management / "PlatformComponent$4";
namespace java::lang::management { class PlatformComponent$5; }
template<> constexpr auto signature<::java::lang::management::PlatformComponent$5> = ::java_lang_management / "PlatformComponent$5";
namespace java::lang::management { class PlatformComponent$6; }
template<> constexpr auto signature<::java::lang::management::PlatformComponent$6> = ::java_lang_management / "PlatformComponent$6";
namespace java::lang::management { class PlatformComponent$7; }
template<> constexpr auto signature<::java::lang::management::PlatformComponent$7> = ::java_lang_management / "PlatformComponent$7";
namespace java::lang::management { class PlatformComponent$8; }
template<> constexpr auto signature<::java::lang::management::PlatformComponent$8> = ::java_lang_management / "PlatformComponent$8";
namespace java::lang::management { class PlatformComponent$9; }
template<> constexpr auto signature<::java::lang::management::PlatformComponent$9> = ::java_lang_management / "PlatformComponent$9";
namespace java::lang::management { class PlatformComponent$MXBeanFetcher; }
template<> constexpr auto signature<::java::lang::management::PlatformComponent$MXBeanFetcher> = ::java_lang_management / "PlatformComponent$MXBeanFetcher";
namespace java::lang::management { class PlatformLoggingMXBean; }
template<> constexpr auto signature<::java::lang::management::PlatformLoggingMXBean> = ::java_lang_management / "PlatformLoggingMXBean";
namespace java::lang::management { class PlatformManagedObject; }
template<> constexpr auto signature<::java::lang::management::PlatformManagedObject> = ::java_lang_management / "PlatformManagedObject";
namespace java::lang::management { class RuntimeMXBean; }
template<> constexpr auto signature<::java::lang::management::RuntimeMXBean> = ::java_lang_management / "RuntimeMXBean";
namespace java::lang::management { class ThreadInfo; }
template<> constexpr auto signature<::java::lang::management::ThreadInfo> = ::java_lang_management / "ThreadInfo";
namespace java::lang::management { class ThreadInfo$1; }
template<> constexpr auto signature<::java::lang::management::ThreadInfo$1> = ::java_lang_management / "ThreadInfo$1";
namespace java::lang::management { class ThreadMXBean; }
template<> constexpr auto signature<::java::lang::management::ThreadMXBean> = ::java_lang_management / "ThreadMXBean";
namespace java::lang::ref { class FinalReference; }
template<> constexpr auto signature<::java::lang::ref::FinalReference> = ::java_lang_ref / "FinalReference";
namespace java::lang::ref { class Finalizer; }
template<> constexpr auto signature<::java::lang::ref::Finalizer> = ::java_lang_ref / "Finalizer";
namespace java::lang::ref { class Finalizer$1; }
template<> constexpr auto signature<::java::lang::ref::Finalizer$1> = ::java_lang_ref / "Finalizer$1";
namespace java::lang::ref { class Finalizer$2; }
template<> constexpr auto signature<::java::lang::ref::Finalizer$2> = ::java_lang_ref / "Finalizer$2";
namespace java::lang::ref { class Finalizer$3; }
template<> constexpr auto signature<::java::lang::ref::Finalizer$3> = ::java_lang_ref / "Finalizer$3";
namespace java::lang::ref { class Finalizer$FinalizerThread; }
template<> constexpr auto signature<::java::lang::ref::Finalizer$FinalizerThread> = ::java_lang_ref / "Finalizer$FinalizerThread";
namespace java::lang::ref { class PhantomReference; }
template<> constexpr auto signature<::java::lang::ref::PhantomReference> = ::java_lang_ref / "PhantomReference";
namespace java::lang::ref { class Reference; }
template<> constexpr auto signature<::java::lang::ref::Reference> = ::java_lang_ref / "Reference";
namespace java::lang::ref { class Reference$1; }
template<> constexpr auto signature<::java::lang::ref::Reference$1> = ::java_lang_ref / "Reference$1";
namespace java::lang::ref { class Reference$Lock; }
template<> constexpr auto signature<::java::lang::ref::Reference$Lock> = ::java_lang_ref / "Reference$Lock";
namespace java::lang::ref { class Reference$ReferenceHandler; }
template<> constexpr auto signature<::java::lang::ref::Reference$ReferenceHandler> = ::java_lang_ref / "Reference$ReferenceHandler";
namespace java::lang::ref { class ReferenceQueue; }
template<> constexpr auto signature<::java::lang::ref::ReferenceQueue> = ::java_lang_ref / "ReferenceQueue";
namespace java::lang::ref { class ReferenceQueue$1; }
template<> constexpr auto signature<::java::lang::ref::ReferenceQueue$1> = ::java_lang_ref / "ReferenceQueue$1";
namespace java::lang::ref { class ReferenceQueue$Lock; }
template<> constexpr auto signature<::java::lang::ref::ReferenceQueue$Lock> = ::java_lang_ref / "ReferenceQueue$Lock";
namespace java::lang::ref { class ReferenceQueue$Null; }
template<> constexpr auto signature<::java::lang::ref::ReferenceQueue$Null> = ::java_lang_ref / "ReferenceQueue$Null";
namespace java::lang::ref { class SoftReference; }
template<> constexpr auto signature<::java::lang::ref::SoftReference> = ::java_lang_ref / "SoftReference";
namespace java::lang::ref { class WeakReference; }
template<> constexpr auto signature<::java::lang::ref::WeakReference> = ::java_lang_ref / "WeakReference";
namespace java::lang::reflect { class AccessibleObject; }
template<> constexpr auto signature<::java::lang::reflect::AccessibleObject> = ::java_lang_reflect / "AccessibleObject";
namespace java::lang::reflect { class AnnotatedArrayType; }
template<> constexpr auto signature<::java::lang::reflect::AnnotatedArrayType> = ::java_lang_reflect / "AnnotatedArrayType";
namespace java::lang::reflect { class AnnotatedElement; }
template<> constexpr auto signature<::java::lang::reflect::AnnotatedElement> = ::java_lang_reflect / "AnnotatedElement";
namespace java::lang::reflect { class AnnotatedParameterizedType; }
template<> constexpr auto signature<::java::lang::reflect::AnnotatedParameterizedType> = ::java_lang_reflect / "AnnotatedParameterizedType";
namespace java::lang::reflect { class AnnotatedType; }
template<> constexpr auto signature<::java::lang::reflect::AnnotatedType> = ::java_lang_reflect / "AnnotatedType";
namespace java::lang::reflect { class AnnotatedTypeVariable; }
template<> constexpr auto signature<::java::lang::reflect::AnnotatedTypeVariable> = ::java_lang_reflect / "AnnotatedTypeVariable";
namespace java::lang::reflect { class AnnotatedWildcardType; }
template<> constexpr auto signature<::java::lang::reflect::AnnotatedWildcardType> = ::java_lang_reflect / "AnnotatedWildcardType";
namespace java::lang::reflect { class Array; }
template<> constexpr auto signature<::java::lang::reflect::Array> = ::java_lang_reflect / "Array";
namespace java::lang::reflect { class Constructor; }
template<> constexpr auto signature<::java::lang::reflect::Constructor> = ::java_lang_reflect / "Constructor";
namespace java::lang::reflect { class Executable; }
template<> constexpr auto signature<::java::lang::reflect::Executable> = ::java_lang_reflect / "Executable";
namespace java::lang::reflect { class Field; }
template<> constexpr auto signature<::java::lang::reflect::Field> = ::java_lang_reflect / "Field";
namespace java::lang::reflect { class GenericArrayType; }
template<> constexpr auto signature<::java::lang::reflect::GenericArrayType> = ::java_lang_reflect / "GenericArrayType";
namespace java::lang::reflect { class GenericDeclaration; }
template<> constexpr auto signature<::java::lang::reflect::GenericDeclaration> = ::java_lang_reflect / "GenericDeclaration";
namespace java::lang::reflect { class GenericSignatureFormatError; }
template<> constexpr auto signature<::java::lang::reflect::GenericSignatureFormatError> = ::java_lang_reflect / "GenericSignatureFormatError";
namespace java::lang::reflect { class InvocationHandler; }
template<> constexpr auto signature<::java::lang::reflect::InvocationHandler> = ::java_lang_reflect / "InvocationHandler";
namespace java::lang::reflect { class InvocationTargetException; }
template<> constexpr auto signature<::java::lang::reflect::InvocationTargetException> = ::java_lang_reflect / "InvocationTargetException";
namespace java::lang::reflect { class MalformedParameterizedTypeException; }
template<> constexpr auto signature<::java::lang::reflect::MalformedParameterizedTypeException> = ::java_lang_reflect / "MalformedParameterizedTypeException";
namespace java::lang::reflect { class MalformedParametersException; }
template<> constexpr auto signature<::java::lang::reflect::MalformedParametersException> = ::java_lang_reflect / "MalformedParametersException";
namespace java::lang::reflect { class Member; }
template<> constexpr auto signature<::java::lang::reflect::Member> = ::java_lang_reflect / "Member";
namespace java::lang::reflect { class Method; }
template<> constexpr auto signature<::java::lang::reflect::Method> = ::java_lang_reflect / "Method";
namespace java::lang::reflect { class Modifier; }
template<> constexpr auto signature<::java::lang::reflect::Modifier> = ::java_lang_reflect / "Modifier";
namespace java::lang::reflect { class Parameter; }
template<> constexpr auto signature<::java::lang::reflect::Parameter> = ::java_lang_reflect / "Parameter";
namespace java::lang::reflect { class ParameterizedType; }
template<> constexpr auto signature<::java::lang::reflect::ParameterizedType> = ::java_lang_reflect / "ParameterizedType";
namespace java::lang::reflect { class Proxy; }
template<> constexpr auto signature<::java::lang::reflect::Proxy> = ::java_lang_reflect / "Proxy";
namespace java::lang::reflect { class Proxy$1; }
template<> constexpr auto signature<::java::lang::reflect::Proxy$1> = ::java_lang_reflect / "Proxy$1";
namespace java::lang::reflect { class Proxy$Key1; }
template<> constexpr auto signature<::java::lang::reflect::Proxy$Key1> = ::java_lang_reflect / "Proxy$Key1";
namespace java::lang::reflect { class Proxy$Key2; }
template<> constexpr auto signature<::java::lang::reflect::Proxy$Key2> = ::java_lang_reflect / "Proxy$Key2";
namespace java::lang::reflect { class Proxy$KeyFactory; }
template<> constexpr auto signature<::java::lang::reflect::Proxy$KeyFactory> = ::java_lang_reflect / "Proxy$KeyFactory";
namespace java::lang::reflect { class Proxy$KeyX; }
template<> constexpr auto signature<::java::lang::reflect::Proxy$KeyX> = ::java_lang_reflect / "Proxy$KeyX";
namespace java::lang::reflect { class Proxy$ProxyClassFactory; }
template<> constexpr auto signature<::java::lang::reflect::Proxy$ProxyClassFactory> = ::java_lang_reflect / "Proxy$ProxyClassFactory";
namespace java::lang::reflect { class ReflectAccess; }
template<> constexpr auto signature<::java::lang::reflect::ReflectAccess> = ::java_lang_reflect / "ReflectAccess";
namespace java::lang::reflect { class ReflectPermission; }
template<> constexpr auto signature<::java::lang::reflect::ReflectPermission> = ::java_lang_reflect / "ReflectPermission";
namespace java::lang::reflect { class Type; }
template<> constexpr auto signature<::java::lang::reflect::Type> = ::java_lang_reflect / "Type";
namespace java::lang::reflect { class TypeVariable; }
template<> constexpr auto signature<::java::lang::reflect::TypeVariable> = ::java_lang_reflect / "TypeVariable";
namespace java::lang::reflect { class UndeclaredThrowableException; }
template<> constexpr auto signature<::java::lang::reflect::UndeclaredThrowableException> = ::java_lang_reflect / "UndeclaredThrowableException";
namespace java::lang::reflect { class WeakCache; }
template<> constexpr auto signature<::java::lang::reflect::WeakCache> = ::java_lang_reflect / "WeakCache";
namespace java::lang::reflect { class WeakCache$CacheKey; }
template<> constexpr auto signature<::java::lang::reflect::WeakCache$CacheKey> = ::java_lang_reflect / "WeakCache$CacheKey";
namespace java::lang::reflect { class WeakCache$CacheValue; }
template<> constexpr auto signature<::java::lang::reflect::WeakCache$CacheValue> = ::java_lang_reflect / "WeakCache$CacheValue";
namespace java::lang::reflect { class WeakCache$Factory; }
template<> constexpr auto signature<::java::lang::reflect::WeakCache$Factory> = ::java_lang_reflect / "WeakCache$Factory";
namespace java::lang::reflect { class WeakCache$LookupValue; }
template<> constexpr auto signature<::java::lang::reflect::WeakCache$LookupValue> = ::java_lang_reflect / "WeakCache$LookupValue";
namespace java::lang::reflect { class WeakCache$Value; }
template<> constexpr auto signature<::java::lang::reflect::WeakCache$Value> = ::java_lang_reflect / "WeakCache$Value";
namespace java::lang::reflect { class WildcardType; }
template<> constexpr auto signature<::java::lang::reflect::WildcardType> = ::java_lang_reflect / "WildcardType";
namespace java::applet { class Applet; }
template<> constexpr auto signature<::java::applet::Applet> = ::java_applet / "Applet";
namespace java::applet { class Applet$AccessibleApplet; }
template<> constexpr auto signature<::java::applet::Applet$AccessibleApplet> = ::java_applet / "Applet$AccessibleApplet";
namespace java::applet { class AppletContext; }
template<> constexpr auto signature<::java::applet::AppletContext> = ::java_applet / "AppletContext";
namespace java::applet { class AppletStub; }
template<> constexpr auto signature<::java::applet::AppletStub> = ::java_applet / "AppletStub";
namespace java::applet { class AudioClip; }
template<> constexpr auto signature<::java::applet::AudioClip> = ::java_applet / "AudioClip";
namespace java::awt { class AWTError; }
template<> constexpr auto signature<::java::awt::AWTError> = ::java_awt / "AWTError";
namespace java::awt { class AWTEvent; }
template<> constexpr auto signature<::java::awt::AWTEvent> = ::java_awt / "AWTEvent";
namespace java::awt { class AWTEvent$1; }
template<> constexpr auto signature<::java::awt::AWTEvent$1> = ::java_awt / "AWTEvent$1";
namespace java::awt { class AWTEvent$2; }
template<> constexpr auto signature<::java::awt::AWTEvent$2> = ::java_awt / "AWTEvent$2";
namespace java::awt { class AWTEventMulticaster; }
template<> constexpr auto signature<::java::awt::AWTEventMulticaster> = ::java_awt / "AWTEventMulticaster";
namespace java::awt { class AWTException; }
template<> constexpr auto signature<::java::awt::AWTException> = ::java_awt / "AWTException";
namespace java::awt { class AWTKeyStroke; }
template<> constexpr auto signature<::java::awt::AWTKeyStroke> = ::java_awt / "AWTKeyStroke";
namespace java::awt { class AWTKeyStroke$1; }
template<> constexpr auto signature<::java::awt::AWTKeyStroke$1> = ::java_awt / "AWTKeyStroke$1";
namespace java::awt { class AWTPermission; }
template<> constexpr auto signature<::java::awt::AWTPermission> = ::java_awt / "AWTPermission";
namespace java::awt { class ActiveEvent; }
template<> constexpr auto signature<::java::awt::ActiveEvent> = ::java_awt / "ActiveEvent";
namespace java::awt { class Adjustable; }
template<> constexpr auto signature<::java::awt::Adjustable> = ::java_awt / "Adjustable";
namespace java::awt { class AlphaComposite; }
template<> constexpr auto signature<::java::awt::AlphaComposite> = ::java_awt / "AlphaComposite";
namespace java::awt { class AttributeValue; }
template<> constexpr auto signature<::java::awt::AttributeValue> = ::java_awt / "AttributeValue";
namespace java::awt { class BasicStroke; }
template<> constexpr auto signature<::java::awt::BasicStroke> = ::java_awt / "BasicStroke";
namespace java::awt { class BorderLayout; }
template<> constexpr auto signature<::java::awt::BorderLayout> = ::java_awt / "BorderLayout";
namespace java::awt { class BufferCapabilities; }
template<> constexpr auto signature<::java::awt::BufferCapabilities> = ::java_awt / "BufferCapabilities";
namespace java::awt { class BufferCapabilities$FlipContents; }
template<> constexpr auto signature<::java::awt::BufferCapabilities$FlipContents> = ::java_awt / "BufferCapabilities$FlipContents";
namespace java::awt { class Button; }
template<> constexpr auto signature<::java::awt::Button> = ::java_awt / "Button";
namespace java::awt { class Button$AccessibleAWTButton; }
template<> constexpr auto signature<::java::awt::Button$AccessibleAWTButton> = ::java_awt / "Button$AccessibleAWTButton";
namespace java::awt { class Canvas; }
template<> constexpr auto signature<::java::awt::Canvas> = ::java_awt / "Canvas";
namespace java::awt { class Canvas$AccessibleAWTCanvas; }
template<> constexpr auto signature<::java::awt::Canvas$AccessibleAWTCanvas> = ::java_awt / "Canvas$AccessibleAWTCanvas";
namespace java::awt { class CardLayout; }
template<> constexpr auto signature<::java::awt::CardLayout> = ::java_awt / "CardLayout";
namespace java::awt { class CardLayout$Card; }
template<> constexpr auto signature<::java::awt::CardLayout$Card> = ::java_awt / "CardLayout$Card";
namespace java::awt { class Checkbox; }
template<> constexpr auto signature<::java::awt::Checkbox> = ::java_awt / "Checkbox";
namespace java::awt { class Checkbox$AccessibleAWTCheckbox; }
template<> constexpr auto signature<::java::awt::Checkbox$AccessibleAWTCheckbox> = ::java_awt / "Checkbox$AccessibleAWTCheckbox";
namespace java::awt { class CheckboxGroup; }
template<> constexpr auto signature<::java::awt::CheckboxGroup> = ::java_awt / "CheckboxGroup";
namespace java::awt { class CheckboxMenuItem; }
template<> constexpr auto signature<::java::awt::CheckboxMenuItem> = ::java_awt / "CheckboxMenuItem";
namespace java::awt { class CheckboxMenuItem$1; }
template<> constexpr auto signature<::java::awt::CheckboxMenuItem$1> = ::java_awt / "CheckboxMenuItem$1";
namespace java::awt { class CheckboxMenuItem$AccessibleAWTCheckboxMenuItem; }
template<> constexpr auto signature<::java::awt::CheckboxMenuItem$AccessibleAWTCheckboxMenuItem> = ::java_awt / "CheckboxMenuItem$AccessibleAWTCheckboxMenuItem";
namespace java::awt { class Choice; }
template<> constexpr auto signature<::java::awt::Choice> = ::java_awt / "Choice";
namespace java::awt { class Choice$AccessibleAWTChoice; }
template<> constexpr auto signature<::java::awt::Choice$AccessibleAWTChoice> = ::java_awt / "Choice$AccessibleAWTChoice";
namespace java::awt { class Color; }
template<> constexpr auto signature<::java::awt::Color> = ::java_awt / "Color";
namespace java::awt { class ColorPaintContext; }
template<> constexpr auto signature<::java::awt::ColorPaintContext> = ::java_awt / "ColorPaintContext";
namespace java::awt { class Component; }
template<> constexpr auto signature<::java::awt::Component> = ::java_awt / "Component";
namespace java::awt { class Component$1; }
template<> constexpr auto signature<::java::awt::Component$1> = ::java_awt / "Component$1";
namespace java::awt { class Component$2; }
template<> constexpr auto signature<::java::awt::Component$2> = ::java_awt / "Component$2";
namespace java::awt { class Component$3; }
template<> constexpr auto signature<::java::awt::Component$3> = ::java_awt / "Component$3";
namespace java::awt { class Component$4; }
template<> constexpr auto signature<::java::awt::Component$4> = ::java_awt / "Component$4";
namespace java::awt { class Component$5; }
template<> constexpr auto signature<::java::awt::Component$5> = ::java_awt / "Component$5";
namespace java::awt { class Component$AWTTreeLock; }
template<> constexpr auto signature<::java::awt::Component$AWTTreeLock> = ::java_awt / "Component$AWTTreeLock";
namespace java::awt { class Component$AccessibleAWTComponent; }
template<> constexpr auto signature<::java::awt::Component$AccessibleAWTComponent> = ::java_awt / "Component$AccessibleAWTComponent";
namespace java::awt { class Component$AccessibleAWTComponent$AccessibleAWTComponentHandler; }
template<> constexpr auto signature<::java::awt::Component$AccessibleAWTComponent$AccessibleAWTComponentHandler> = ::java_awt / "Component$AccessibleAWTComponent$AccessibleAWTComponentHandler";
namespace java::awt { class Component$AccessibleAWTComponent$AccessibleAWTFocusHandler; }
template<> constexpr auto signature<::java::awt::Component$AccessibleAWTComponent$AccessibleAWTFocusHandler> = ::java_awt / "Component$AccessibleAWTComponent$AccessibleAWTFocusHandler";
namespace java::awt { class Component$BaselineResizeBehavior; }
template<> constexpr auto signature<::java::awt::Component$BaselineResizeBehavior> = ::java_awt / "Component$BaselineResizeBehavior";
namespace java::awt { class Component$BltBufferStrategy; }
template<> constexpr auto signature<::java::awt::Component$BltBufferStrategy> = ::java_awt / "Component$BltBufferStrategy";
namespace java::awt { class Component$BltSubRegionBufferStrategy; }
template<> constexpr auto signature<::java::awt::Component$BltSubRegionBufferStrategy> = ::java_awt / "Component$BltSubRegionBufferStrategy";
namespace java::awt { class Component$DummyRequestFocusController; }
template<> constexpr auto signature<::java::awt::Component$DummyRequestFocusController> = ::java_awt / "Component$DummyRequestFocusController";
namespace java::awt { class Component$FlipBufferStrategy; }
template<> constexpr auto signature<::java::awt::Component$FlipBufferStrategy> = ::java_awt / "Component$FlipBufferStrategy";
namespace java::awt { class Component$FlipSubRegionBufferStrategy; }
template<> constexpr auto signature<::java::awt::Component$FlipSubRegionBufferStrategy> = ::java_awt / "Component$FlipSubRegionBufferStrategy";
namespace java::awt { class Component$ProxyCapabilities; }
template<> constexpr auto signature<::java::awt::Component$ProxyCapabilities> = ::java_awt / "Component$ProxyCapabilities";
namespace java::awt { class Component$SingleBufferStrategy; }
template<> constexpr auto signature<::java::awt::Component$SingleBufferStrategy> = ::java_awt / "Component$SingleBufferStrategy";
namespace java::awt { class ComponentOrientation; }
template<> constexpr auto signature<::java::awt::ComponentOrientation> = ::java_awt / "ComponentOrientation";
namespace java::awt { class Composite; }
template<> constexpr auto signature<::java::awt::Composite> = ::java_awt / "Composite";
namespace java::awt { class CompositeContext; }
template<> constexpr auto signature<::java::awt::CompositeContext> = ::java_awt / "CompositeContext";
namespace java::awt { class Conditional; }
template<> constexpr auto signature<::java::awt::Conditional> = ::java_awt / "Conditional";
namespace java::awt { class Container; }
template<> constexpr auto signature<::java::awt::Container> = ::java_awt / "Container";
namespace java::awt { class Container$1; }
template<> constexpr auto signature<::java::awt::Container$1> = ::java_awt / "Container$1";
namespace java::awt { class Container$2; }
template<> constexpr auto signature<::java::awt::Container$2> = ::java_awt / "Container$2";
namespace java::awt { class Container$3; }
template<> constexpr auto signature<::java::awt::Container$3> = ::java_awt / "Container$3";
namespace java::awt { class Container$3$1; }
template<> constexpr auto signature<::java::awt::Container$3$1> = ::java_awt / "Container$3$1";
namespace java::awt { class Container$AccessibleAWTContainer; }
template<> constexpr auto signature<::java::awt::Container$AccessibleAWTContainer> = ::java_awt / "Container$AccessibleAWTContainer";
namespace java::awt { class Container$AccessibleAWTContainer$AccessibleContainerHandler; }
template<> constexpr auto signature<::java::awt::Container$AccessibleAWTContainer$AccessibleContainerHandler> = ::java_awt / "Container$AccessibleAWTContainer$AccessibleContainerHandler";
namespace java::awt { class Container$DropTargetEventTargetFilter; }
template<> constexpr auto signature<::java::awt::Container$DropTargetEventTargetFilter> = ::java_awt / "Container$DropTargetEventTargetFilter";
namespace java::awt { class Container$EventTargetFilter; }
template<> constexpr auto signature<::java::awt::Container$EventTargetFilter> = ::java_awt / "Container$EventTargetFilter";
namespace java::awt { class Container$MouseEventTargetFilter; }
template<> constexpr auto signature<::java::awt::Container$MouseEventTargetFilter> = ::java_awt / "Container$MouseEventTargetFilter";
namespace java::awt { class Container$WakingRunnable; }
template<> constexpr auto signature<::java::awt::Container$WakingRunnable> = ::java_awt / "Container$WakingRunnable";
namespace java::awt { class ContainerOrderFocusTraversalPolicy; }
template<> constexpr auto signature<::java::awt::ContainerOrderFocusTraversalPolicy> = ::java_awt / "ContainerOrderFocusTraversalPolicy";
namespace java::awt { class Cursor; }
template<> constexpr auto signature<::java::awt::Cursor> = ::java_awt / "Cursor";
namespace java::awt { class Cursor$1; }
template<> constexpr auto signature<::java::awt::Cursor$1> = ::java_awt / "Cursor$1";
namespace java::awt { class Cursor$2; }
template<> constexpr auto signature<::java::awt::Cursor$2> = ::java_awt / "Cursor$2";
namespace java::awt { class Cursor$3; }
template<> constexpr auto signature<::java::awt::Cursor$3> = ::java_awt / "Cursor$3";
namespace java::awt { class Cursor$CursorDisposer; }
template<> constexpr auto signature<::java::awt::Cursor$CursorDisposer> = ::java_awt / "Cursor$CursorDisposer";
namespace java::awt { class DefaultFocusTraversalPolicy; }
template<> constexpr auto signature<::java::awt::DefaultFocusTraversalPolicy> = ::java_awt / "DefaultFocusTraversalPolicy";
namespace java::awt { class DefaultKeyboardFocusManager; }
template<> constexpr auto signature<::java::awt::DefaultKeyboardFocusManager> = ::java_awt / "DefaultKeyboardFocusManager";
namespace java::awt { class DefaultKeyboardFocusManager$1; }
template<> constexpr auto signature<::java::awt::DefaultKeyboardFocusManager$1> = ::java_awt / "DefaultKeyboardFocusManager$1";
namespace java::awt { class DefaultKeyboardFocusManager$2; }
template<> constexpr auto signature<::java::awt::DefaultKeyboardFocusManager$2> = ::java_awt / "DefaultKeyboardFocusManager$2";
namespace java::awt { class DefaultKeyboardFocusManager$DefaultKeyboardFocusManagerSentEvent; }
template<> constexpr auto signature<::java::awt::DefaultKeyboardFocusManager$DefaultKeyboardFocusManagerSentEvent> = ::java_awt / "DefaultKeyboardFocusManager$DefaultKeyboardFocusManagerSentEvent";
namespace java::awt { class DefaultKeyboardFocusManager$TypeAheadMarker; }
template<> constexpr auto signature<::java::awt::DefaultKeyboardFocusManager$TypeAheadMarker> = ::java_awt / "DefaultKeyboardFocusManager$TypeAheadMarker";
namespace java::awt { class Desktop; }
template<> constexpr auto signature<::java::awt::Desktop> = ::java_awt / "Desktop";
namespace java::awt { class Desktop$Action; }
template<> constexpr auto signature<::java::awt::Desktop$Action> = ::java_awt / "Desktop$Action";
namespace java::awt { class Dialog; }
template<> constexpr auto signature<::java::awt::Dialog> = ::java_awt / "Dialog";
namespace java::awt { class Dialog$1; }
template<> constexpr auto signature<::java::awt::Dialog$1> = ::java_awt / "Dialog$1";
namespace java::awt { class Dialog$2; }
template<> constexpr auto signature<::java::awt::Dialog$2> = ::java_awt / "Dialog$2";
namespace java::awt { class Dialog$3; }
template<> constexpr auto signature<::java::awt::Dialog$3> = ::java_awt / "Dialog$3";
namespace java::awt { class Dialog$4; }
template<> constexpr auto signature<::java::awt::Dialog$4> = ::java_awt / "Dialog$4";
namespace java::awt { class Dialog$AccessibleAWTDialog; }
template<> constexpr auto signature<::java::awt::Dialog$AccessibleAWTDialog> = ::java_awt / "Dialog$AccessibleAWTDialog";
namespace java::awt { class Dialog$ModalExclusionType; }
template<> constexpr auto signature<::java::awt::Dialog$ModalExclusionType> = ::java_awt / "Dialog$ModalExclusionType";
namespace java::awt { class Dialog$ModalityType; }
template<> constexpr auto signature<::java::awt::Dialog$ModalityType> = ::java_awt / "Dialog$ModalityType";
namespace java::awt { class Dimension; }
template<> constexpr auto signature<::java::awt::Dimension> = ::java_awt / "Dimension";
namespace java::awt { class DisplayMode; }
template<> constexpr auto signature<::java::awt::DisplayMode> = ::java_awt / "DisplayMode";
namespace java::awt { class Event; }
template<> constexpr auto signature<::java::awt::Event> = ::java_awt / "Event";
namespace java::awt { class EventDispatchThread; }
template<> constexpr auto signature<::java::awt::EventDispatchThread> = ::java_awt / "EventDispatchThread";
namespace java::awt { class EventDispatchThread$1; }
template<> constexpr auto signature<::java::awt::EventDispatchThread$1> = ::java_awt / "EventDispatchThread$1";
namespace java::awt { class EventDispatchThread$HierarchyEventFilter; }
template<> constexpr auto signature<::java::awt::EventDispatchThread$HierarchyEventFilter> = ::java_awt / "EventDispatchThread$HierarchyEventFilter";
namespace java::awt { class EventFilter; }
template<> constexpr auto signature<::java::awt::EventFilter> = ::java_awt / "EventFilter";
namespace java::awt { class EventFilter$FilterAction; }
template<> constexpr auto signature<::java::awt::EventFilter$FilterAction> = ::java_awt / "EventFilter$FilterAction";
namespace java::awt { class EventQueue; }
template<> constexpr auto signature<::java::awt::EventQueue> = ::java_awt / "EventQueue";
namespace java::awt { class EventQueue$1; }
template<> constexpr auto signature<::java::awt::EventQueue$1> = ::java_awt / "EventQueue$1";
namespace java::awt { class EventQueue$1AWTInvocationLock; }
template<> constexpr auto signature<::java::awt::EventQueue$1AWTInvocationLock> = ::java_awt / "EventQueue$1AWTInvocationLock";
namespace java::awt { class EventQueue$2; }
template<> constexpr auto signature<::java::awt::EventQueue$2> = ::java_awt / "EventQueue$2";
namespace java::awt { class EventQueue$3; }
template<> constexpr auto signature<::java::awt::EventQueue$3> = ::java_awt / "EventQueue$3";
namespace java::awt { class EventQueue$3$1; }
template<> constexpr auto signature<::java::awt::EventQueue$3$1> = ::java_awt / "EventQueue$3$1";
namespace java::awt { class EventQueue$4; }
template<> constexpr auto signature<::java::awt::EventQueue$4> = ::java_awt / "EventQueue$4";
namespace java::awt { class EventQueue$5; }
template<> constexpr auto signature<::java::awt::EventQueue$5> = ::java_awt / "EventQueue$5";
namespace java::awt { class FileDialog; }
template<> constexpr auto signature<::java::awt::FileDialog> = ::java_awt / "FileDialog";
namespace java::awt { class FileDialog$1; }
template<> constexpr auto signature<::java::awt::FileDialog$1> = ::java_awt / "FileDialog$1";
namespace java::awt { class FlowLayout; }
template<> constexpr auto signature<::java::awt::FlowLayout> = ::java_awt / "FlowLayout";
namespace java::awt { class FocusManager; }
template<> constexpr auto signature<::java::awt::FocusManager> = ::java_awt / "FocusManager";
namespace java::awt { class FocusTraversalPolicy; }
template<> constexpr auto signature<::java::awt::FocusTraversalPolicy> = ::java_awt / "FocusTraversalPolicy";
namespace java::awt { class Font; }
template<> constexpr auto signature<::java::awt::Font> = ::java_awt / "Font";
namespace java::awt { class Font$1; }
template<> constexpr auto signature<::java::awt::Font$1> = ::java_awt / "Font$1";
namespace java::awt { class Font$2; }
template<> constexpr auto signature<::java::awt::Font$2> = ::java_awt / "Font$2";
namespace java::awt { class Font$3; }
template<> constexpr auto signature<::java::awt::Font$3> = ::java_awt / "Font$3";
namespace java::awt { class Font$FontAccessImpl; }
template<> constexpr auto signature<::java::awt::Font$FontAccessImpl> = ::java_awt / "Font$FontAccessImpl";
namespace java::awt { class FontFormatException; }
template<> constexpr auto signature<::java::awt::FontFormatException> = ::java_awt / "FontFormatException";
namespace java::awt { class FontMetrics; }
template<> constexpr auto signature<::java::awt::FontMetrics> = ::java_awt / "FontMetrics";
namespace java::awt { class Frame; }
template<> constexpr auto signature<::java::awt::Frame> = ::java_awt / "Frame";
namespace java::awt { class Frame$1; }
template<> constexpr auto signature<::java::awt::Frame$1> = ::java_awt / "Frame$1";
namespace java::awt { class Frame$AccessibleAWTFrame; }
template<> constexpr auto signature<::java::awt::Frame$AccessibleAWTFrame> = ::java_awt / "Frame$AccessibleAWTFrame";
namespace java::awt { class GradientPaint; }
template<> constexpr auto signature<::java::awt::GradientPaint> = ::java_awt / "GradientPaint";
namespace java::awt { class GradientPaintContext; }
template<> constexpr auto signature<::java::awt::GradientPaintContext> = ::java_awt / "GradientPaintContext";
namespace java::awt { class Graphics; }
template<> constexpr auto signature<::java::awt::Graphics> = ::java_awt / "Graphics";
namespace java::awt { class Graphics2D; }
template<> constexpr auto signature<::java::awt::Graphics2D> = ::java_awt / "Graphics2D";
namespace java::awt { class GraphicsCallback; }
template<> constexpr auto signature<::java::awt::GraphicsCallback> = ::java_awt / "GraphicsCallback";
namespace java::awt { class GraphicsCallback$PaintAllCallback; }
template<> constexpr auto signature<::java::awt::GraphicsCallback$PaintAllCallback> = ::java_awt / "GraphicsCallback$PaintAllCallback";
namespace java::awt { class GraphicsCallback$PaintCallback; }
template<> constexpr auto signature<::java::awt::GraphicsCallback$PaintCallback> = ::java_awt / "GraphicsCallback$PaintCallback";
namespace java::awt { class GraphicsCallback$PaintHeavyweightComponentsCallback; }
template<> constexpr auto signature<::java::awt::GraphicsCallback$PaintHeavyweightComponentsCallback> = ::java_awt / "GraphicsCallback$PaintHeavyweightComponentsCallback";
namespace java::awt { class GraphicsCallback$PeerPaintCallback; }
template<> constexpr auto signature<::java::awt::GraphicsCallback$PeerPaintCallback> = ::java_awt / "GraphicsCallback$PeerPaintCallback";
namespace java::awt { class GraphicsCallback$PeerPrintCallback; }
template<> constexpr auto signature<::java::awt::GraphicsCallback$PeerPrintCallback> = ::java_awt / "GraphicsCallback$PeerPrintCallback";
namespace java::awt { class GraphicsCallback$PrintAllCallback; }
template<> constexpr auto signature<::java::awt::GraphicsCallback$PrintAllCallback> = ::java_awt / "GraphicsCallback$PrintAllCallback";
namespace java::awt { class GraphicsCallback$PrintCallback; }
template<> constexpr auto signature<::java::awt::GraphicsCallback$PrintCallback> = ::java_awt / "GraphicsCallback$PrintCallback";
namespace java::awt { class GraphicsCallback$PrintHeavyweightComponentsCallback; }
template<> constexpr auto signature<::java::awt::GraphicsCallback$PrintHeavyweightComponentsCallback> = ::java_awt / "GraphicsCallback$PrintHeavyweightComponentsCallback";
namespace java::awt { class GraphicsConfigTemplate; }
template<> constexpr auto signature<::java::awt::GraphicsConfigTemplate> = ::java_awt / "GraphicsConfigTemplate";
namespace java::awt { class GraphicsConfiguration; }
template<> constexpr auto signature<::java::awt::GraphicsConfiguration> = ::java_awt / "GraphicsConfiguration";
namespace java::awt { class GraphicsConfiguration$DefaultBufferCapabilities; }
template<> constexpr auto signature<::java::awt::GraphicsConfiguration$DefaultBufferCapabilities> = ::java_awt / "GraphicsConfiguration$DefaultBufferCapabilities";
namespace java::awt { class GraphicsDevice; }
template<> constexpr auto signature<::java::awt::GraphicsDevice> = ::java_awt / "GraphicsDevice";
namespace java::awt { class GraphicsDevice$1; }
template<> constexpr auto signature<::java::awt::GraphicsDevice$1> = ::java_awt / "GraphicsDevice$1";
namespace java::awt { class GraphicsDevice$WindowTranslucency; }
template<> constexpr auto signature<::java::awt::GraphicsDevice$WindowTranslucency> = ::java_awt / "GraphicsDevice$WindowTranslucency";
namespace java::awt { class GraphicsEnvironment; }
template<> constexpr auto signature<::java::awt::GraphicsEnvironment> = ::java_awt / "GraphicsEnvironment";
namespace java::awt { class GridBagConstraints; }
template<> constexpr auto signature<::java::awt::GridBagConstraints> = ::java_awt / "GridBagConstraints";
namespace java::awt { class GridBagLayout; }
template<> constexpr auto signature<::java::awt::GridBagLayout> = ::java_awt / "GridBagLayout";
namespace java::awt { class GridBagLayout$1; }
template<> constexpr auto signature<::java::awt::GridBagLayout$1> = ::java_awt / "GridBagLayout$1";
namespace java::awt { class GridBagLayoutInfo; }
template<> constexpr auto signature<::java::awt::GridBagLayoutInfo> = ::java_awt / "GridBagLayoutInfo";
namespace java::awt { class GridLayout; }
template<> constexpr auto signature<::java::awt::GridLayout> = ::java_awt / "GridLayout";
namespace java::awt { class HeadlessException; }
template<> constexpr auto signature<::java::awt::HeadlessException> = ::java_awt / "HeadlessException";
namespace java::awt { class IllegalComponentStateException; }
template<> constexpr auto signature<::java::awt::IllegalComponentStateException> = ::java_awt / "IllegalComponentStateException";
namespace java::awt { class Image; }
template<> constexpr auto signature<::java::awt::Image> = ::java_awt / "Image";
namespace java::awt { class Image$1; }
template<> constexpr auto signature<::java::awt::Image$1> = ::java_awt / "Image$1";
namespace java::awt { class ImageCapabilities; }
template<> constexpr auto signature<::java::awt::ImageCapabilities> = ::java_awt / "ImageCapabilities";
namespace java::awt { class ImageMediaEntry; }
template<> constexpr auto signature<::java::awt::ImageMediaEntry> = ::java_awt / "ImageMediaEntry";
namespace java::awt { class Insets; }
template<> constexpr auto signature<::java::awt::Insets> = ::java_awt / "Insets";
namespace java::awt { class ItemSelectable; }
template<> constexpr auto signature<::java::awt::ItemSelectable> = ::java_awt / "ItemSelectable";
namespace java::awt { class JobAttributes; }
template<> constexpr auto signature<::java::awt::JobAttributes> = ::java_awt / "JobAttributes";
namespace java::awt { class JobAttributes$DefaultSelectionType; }
template<> constexpr auto signature<::java::awt::JobAttributes$DefaultSelectionType> = ::java_awt / "JobAttributes$DefaultSelectionType";
namespace java::awt { class JobAttributes$DestinationType; }
template<> constexpr auto signature<::java::awt::JobAttributes$DestinationType> = ::java_awt / "JobAttributes$DestinationType";
namespace java::awt { class JobAttributes$DialogType; }
template<> constexpr auto signature<::java::awt::JobAttributes$DialogType> = ::java_awt / "JobAttributes$DialogType";
namespace java::awt { class JobAttributes$MultipleDocumentHandlingType; }
template<> constexpr auto signature<::java::awt::JobAttributes$MultipleDocumentHandlingType> = ::java_awt / "JobAttributes$MultipleDocumentHandlingType";
namespace java::awt { class JobAttributes$SidesType; }
template<> constexpr auto signature<::java::awt::JobAttributes$SidesType> = ::java_awt / "JobAttributes$SidesType";
namespace java::awt { class KeyEventDispatcher; }
template<> constexpr auto signature<::java::awt::KeyEventDispatcher> = ::java_awt / "KeyEventDispatcher";
namespace java::awt { class KeyEventPostProcessor; }
template<> constexpr auto signature<::java::awt::KeyEventPostProcessor> = ::java_awt / "KeyEventPostProcessor";
namespace java::awt { class KeyboardFocusManager; }
template<> constexpr auto signature<::java::awt::KeyboardFocusManager> = ::java_awt / "KeyboardFocusManager";
namespace java::awt { class KeyboardFocusManager$1; }
template<> constexpr auto signature<::java::awt::KeyboardFocusManager$1> = ::java_awt / "KeyboardFocusManager$1";
namespace java::awt { class KeyboardFocusManager$2; }
template<> constexpr auto signature<::java::awt::KeyboardFocusManager$2> = ::java_awt / "KeyboardFocusManager$2";
namespace java::awt { class KeyboardFocusManager$3; }
template<> constexpr auto signature<::java::awt::KeyboardFocusManager$3> = ::java_awt / "KeyboardFocusManager$3";
namespace java::awt { class KeyboardFocusManager$4; }
template<> constexpr auto signature<::java::awt::KeyboardFocusManager$4> = ::java_awt / "KeyboardFocusManager$4";
namespace java::awt { class KeyboardFocusManager$5; }
template<> constexpr auto signature<::java::awt::KeyboardFocusManager$5> = ::java_awt / "KeyboardFocusManager$5";
namespace java::awt { class KeyboardFocusManager$HeavyweightFocusRequest; }
template<> constexpr auto signature<::java::awt::KeyboardFocusManager$HeavyweightFocusRequest> = ::java_awt / "KeyboardFocusManager$HeavyweightFocusRequest";
namespace java::awt { class KeyboardFocusManager$LightweightFocusRequest; }
template<> constexpr auto signature<::java::awt::KeyboardFocusManager$LightweightFocusRequest> = ::java_awt / "KeyboardFocusManager$LightweightFocusRequest";
namespace java::awt { class Label; }
template<> constexpr auto signature<::java::awt::Label> = ::java_awt / "Label";
namespace java::awt { class Label$AccessibleAWTLabel; }
template<> constexpr auto signature<::java::awt::Label$AccessibleAWTLabel> = ::java_awt / "Label$AccessibleAWTLabel";
namespace java::awt { class LayoutManager; }
template<> constexpr auto signature<::java::awt::LayoutManager> = ::java_awt / "LayoutManager";
namespace java::awt { class LayoutManager2; }
template<> constexpr auto signature<::java::awt::LayoutManager2> = ::java_awt / "LayoutManager2";
namespace java::awt { class LightweightDispatcher; }
template<> constexpr auto signature<::java::awt::LightweightDispatcher> = ::java_awt / "LightweightDispatcher";
namespace java::awt { class LightweightDispatcher$1; }
template<> constexpr auto signature<::java::awt::LightweightDispatcher$1> = ::java_awt / "LightweightDispatcher$1";
namespace java::awt { class LightweightDispatcher$2; }
template<> constexpr auto signature<::java::awt::LightweightDispatcher$2> = ::java_awt / "LightweightDispatcher$2";
namespace java::awt { class LightweightDispatcher$3; }
template<> constexpr auto signature<::java::awt::LightweightDispatcher$3> = ::java_awt / "LightweightDispatcher$3";
namespace java::awt { class LinearGradientPaint; }
template<> constexpr auto signature<::java::awt::LinearGradientPaint> = ::java_awt / "LinearGradientPaint";
namespace java::awt { class LinearGradientPaintContext; }
template<> constexpr auto signature<::java::awt::LinearGradientPaintContext> = ::java_awt / "LinearGradientPaintContext";
namespace java::awt { class List; }
template<> constexpr auto signature<::java::awt::List> = ::java_awt / "List";
namespace java::awt { class List$AccessibleAWTList; }
template<> constexpr auto signature<::java::awt::List$AccessibleAWTList> = ::java_awt / "List$AccessibleAWTList";
namespace java::awt { class List$AccessibleAWTList$AccessibleAWTListChild; }
template<> constexpr auto signature<::java::awt::List$AccessibleAWTList$AccessibleAWTListChild> = ::java_awt / "List$AccessibleAWTList$AccessibleAWTListChild";
namespace java::awt { class MediaEntry; }
template<> constexpr auto signature<::java::awt::MediaEntry> = ::java_awt / "MediaEntry";
namespace java::awt { class MediaTracker; }
template<> constexpr auto signature<::java::awt::MediaTracker> = ::java_awt / "MediaTracker";
namespace java::awt { class Menu; }
template<> constexpr auto signature<::java::awt::Menu> = ::java_awt / "Menu";
namespace java::awt { class Menu$1; }
template<> constexpr auto signature<::java::awt::Menu$1> = ::java_awt / "Menu$1";
namespace java::awt { class Menu$AccessibleAWTMenu; }
template<> constexpr auto signature<::java::awt::Menu$AccessibleAWTMenu> = ::java_awt / "Menu$AccessibleAWTMenu";
namespace java::awt { class MenuBar; }
template<> constexpr auto signature<::java::awt::MenuBar> = ::java_awt / "MenuBar";
namespace java::awt { class MenuBar$1; }
template<> constexpr auto signature<::java::awt::MenuBar$1> = ::java_awt / "MenuBar$1";
namespace java::awt { class MenuBar$AccessibleAWTMenuBar; }
template<> constexpr auto signature<::java::awt::MenuBar$AccessibleAWTMenuBar> = ::java_awt / "MenuBar$AccessibleAWTMenuBar";
namespace java::awt { class MenuComponent; }
template<> constexpr auto signature<::java::awt::MenuComponent> = ::java_awt / "MenuComponent";
namespace java::awt { class MenuComponent$1; }
template<> constexpr auto signature<::java::awt::MenuComponent$1> = ::java_awt / "MenuComponent$1";
namespace java::awt { class MenuComponent$AccessibleAWTMenuComponent; }
template<> constexpr auto signature<::java::awt::MenuComponent$AccessibleAWTMenuComponent> = ::java_awt / "MenuComponent$AccessibleAWTMenuComponent";
namespace java::awt { class MenuContainer; }
template<> constexpr auto signature<::java::awt::MenuContainer> = ::java_awt / "MenuContainer";
namespace java::awt { class MenuItem; }
template<> constexpr auto signature<::java::awt::MenuItem> = ::java_awt / "MenuItem";
namespace java::awt { class MenuItem$1; }
template<> constexpr auto signature<::java::awt::MenuItem$1> = ::java_awt / "MenuItem$1";
namespace java::awt { class MenuItem$AccessibleAWTMenuItem; }
template<> constexpr auto signature<::java::awt::MenuItem$AccessibleAWTMenuItem> = ::java_awt / "MenuItem$AccessibleAWTMenuItem";
namespace java::awt { class MenuShortcut; }
template<> constexpr auto signature<::java::awt::MenuShortcut> = ::java_awt / "MenuShortcut";
namespace java::awt { class ModalEventFilter; }
template<> constexpr auto signature<::java::awt::ModalEventFilter> = ::java_awt / "ModalEventFilter";
namespace java::awt { class ModalEventFilter$1; }
template<> constexpr auto signature<::java::awt::ModalEventFilter$1> = ::java_awt / "ModalEventFilter$1";
namespace java::awt { class ModalEventFilter$ApplicationModalEventFilter; }
template<> constexpr auto signature<::java::awt::ModalEventFilter$ApplicationModalEventFilter> = ::java_awt / "ModalEventFilter$ApplicationModalEventFilter";
namespace java::awt { class ModalEventFilter$DocumentModalEventFilter; }
template<> constexpr auto signature<::java::awt::ModalEventFilter$DocumentModalEventFilter> = ::java_awt / "ModalEventFilter$DocumentModalEventFilter";
namespace java::awt { class ModalEventFilter$ToolkitModalEventFilter; }
template<> constexpr auto signature<::java::awt::ModalEventFilter$ToolkitModalEventFilter> = ::java_awt / "ModalEventFilter$ToolkitModalEventFilter";
namespace java::awt { class MouseInfo; }
template<> constexpr auto signature<::java::awt::MouseInfo> = ::java_awt / "MouseInfo";
namespace java::awt { class MultipleGradientPaint; }
template<> constexpr auto signature<::java::awt::MultipleGradientPaint> = ::java_awt / "MultipleGradientPaint";
namespace java::awt { class MultipleGradientPaint$ColorSpaceType; }
template<> constexpr auto signature<::java::awt::MultipleGradientPaint$ColorSpaceType> = ::java_awt / "MultipleGradientPaint$ColorSpaceType";
namespace java::awt { class MultipleGradientPaint$CycleMethod; }
template<> constexpr auto signature<::java::awt::MultipleGradientPaint$CycleMethod> = ::java_awt / "MultipleGradientPaint$CycleMethod";
namespace java::awt { class MultipleGradientPaintContext; }
template<> constexpr auto signature<::java::awt::MultipleGradientPaintContext> = ::java_awt / "MultipleGradientPaintContext";
namespace java::awt { class PageAttributes; }
template<> constexpr auto signature<::java::awt::PageAttributes> = ::java_awt / "PageAttributes";
namespace java::awt { class PageAttributes$ColorType; }
template<> constexpr auto signature<::java::awt::PageAttributes$ColorType> = ::java_awt / "PageAttributes$ColorType";
namespace java::awt { class PageAttributes$MediaType; }
template<> constexpr auto signature<::java::awt::PageAttributes$MediaType> = ::java_awt / "PageAttributes$MediaType";
namespace java::awt { class PageAttributes$OrientationRequestedType; }
template<> constexpr auto signature<::java::awt::PageAttributes$OrientationRequestedType> = ::java_awt / "PageAttributes$OrientationRequestedType";
namespace java::awt { class PageAttributes$OriginType; }
template<> constexpr auto signature<::java::awt::PageAttributes$OriginType> = ::java_awt / "PageAttributes$OriginType";
namespace java::awt { class PageAttributes$PrintQualityType; }
template<> constexpr auto signature<::java::awt::PageAttributes$PrintQualityType> = ::java_awt / "PageAttributes$PrintQualityType";
namespace java::awt { class Paint; }
template<> constexpr auto signature<::java::awt::Paint> = ::java_awt / "Paint";
namespace java::awt { class PaintContext; }
template<> constexpr auto signature<::java::awt::PaintContext> = ::java_awt / "PaintContext";
namespace java::awt { class Panel; }
template<> constexpr auto signature<::java::awt::Panel> = ::java_awt / "Panel";
namespace java::awt { class Panel$AccessibleAWTPanel; }
template<> constexpr auto signature<::java::awt::Panel$AccessibleAWTPanel> = ::java_awt / "Panel$AccessibleAWTPanel";
namespace java::awt { class PeerFixer; }
template<> constexpr auto signature<::java::awt::PeerFixer> = ::java_awt / "PeerFixer";
namespace java::awt { class Point; }
template<> constexpr auto signature<::java::awt::Point> = ::java_awt / "Point";
namespace java::awt { class PointerInfo; }
template<> constexpr auto signature<::java::awt::PointerInfo> = ::java_awt / "PointerInfo";
namespace java::awt { class Polygon; }
template<> constexpr auto signature<::java::awt::Polygon> = ::java_awt / "Polygon";
namespace java::awt { class Polygon$PolygonPathIterator; }
template<> constexpr auto signature<::java::awt::Polygon$PolygonPathIterator> = ::java_awt / "Polygon$PolygonPathIterator";
namespace java::awt { class PopupMenu; }
template<> constexpr auto signature<::java::awt::PopupMenu> = ::java_awt / "PopupMenu";
namespace java::awt { class PopupMenu$1; }
template<> constexpr auto signature<::java::awt::PopupMenu$1> = ::java_awt / "PopupMenu$1";
namespace java::awt { class PopupMenu$AccessibleAWTPopupMenu; }
template<> constexpr auto signature<::java::awt::PopupMenu$AccessibleAWTPopupMenu> = ::java_awt / "PopupMenu$AccessibleAWTPopupMenu";
namespace java::awt { class PrintGraphics; }
template<> constexpr auto signature<::java::awt::PrintGraphics> = ::java_awt / "PrintGraphics";
namespace java::awt { class PrintJob; }
template<> constexpr auto signature<::java::awt::PrintJob> = ::java_awt / "PrintJob";
namespace java::awt { class Queue; }
template<> constexpr auto signature<::java::awt::Queue> = ::java_awt / "Queue";
namespace java::awt { class RadialGradientPaint; }
template<> constexpr auto signature<::java::awt::RadialGradientPaint> = ::java_awt / "RadialGradientPaint";
namespace java::awt { class RadialGradientPaintContext; }
template<> constexpr auto signature<::java::awt::RadialGradientPaintContext> = ::java_awt / "RadialGradientPaintContext";
namespace java::awt { class Rectangle; }
template<> constexpr auto signature<::java::awt::Rectangle> = ::java_awt / "Rectangle";
namespace java::awt { class RenderingHints; }
template<> constexpr auto signature<::java::awt::RenderingHints> = ::java_awt / "RenderingHints";
namespace java::awt { class RenderingHints$Key; }
template<> constexpr auto signature<::java::awt::RenderingHints$Key> = ::java_awt / "RenderingHints$Key";
namespace java::awt { class Robot; }
template<> constexpr auto signature<::java::awt::Robot> = ::java_awt / "Robot";
namespace java::awt { class Robot$1; }
template<> constexpr auto signature<::java::awt::Robot$1> = ::java_awt / "Robot$1";
namespace java::awt { class Robot$RobotDisposer; }
template<> constexpr auto signature<::java::awt::Robot$RobotDisposer> = ::java_awt / "Robot$RobotDisposer";
namespace java::awt { class ScrollPane; }
template<> constexpr auto signature<::java::awt::ScrollPane> = ::java_awt / "ScrollPane";
namespace java::awt { class ScrollPane$AccessibleAWTScrollPane; }
template<> constexpr auto signature<::java::awt::ScrollPane$AccessibleAWTScrollPane> = ::java_awt / "ScrollPane$AccessibleAWTScrollPane";
namespace java::awt { class ScrollPane$PeerFixer; }
template<> constexpr auto signature<::java::awt::ScrollPane$PeerFixer> = ::java_awt / "ScrollPane$PeerFixer";
namespace java::awt { class ScrollPaneAdjustable; }
template<> constexpr auto signature<::java::awt::ScrollPaneAdjustable> = ::java_awt / "ScrollPaneAdjustable";
namespace java::awt { class ScrollPaneAdjustable$1; }
template<> constexpr auto signature<::java::awt::ScrollPaneAdjustable$1> = ::java_awt / "ScrollPaneAdjustable$1";
namespace java::awt { class Scrollbar; }
template<> constexpr auto signature<::java::awt::Scrollbar> = ::java_awt / "Scrollbar";
namespace java::awt { class Scrollbar$AccessibleAWTScrollBar; }
template<> constexpr auto signature<::java::awt::Scrollbar$AccessibleAWTScrollBar> = ::java_awt / "Scrollbar$AccessibleAWTScrollBar";
namespace java::awt { class SecondaryLoop; }
template<> constexpr auto signature<::java::awt::SecondaryLoop> = ::java_awt / "SecondaryLoop";
namespace java::awt { class SentEvent; }
template<> constexpr auto signature<::java::awt::SentEvent> = ::java_awt / "SentEvent";
namespace java::awt { class SequencedEvent; }
template<> constexpr auto signature<::java::awt::SequencedEvent> = ::java_awt / "SequencedEvent";
namespace java::awt { class SequencedEvent$1; }
template<> constexpr auto signature<::java::awt::SequencedEvent$1> = ::java_awt / "SequencedEvent$1";
namespace java::awt { class SequencedEvent$2; }
template<> constexpr auto signature<::java::awt::SequencedEvent$2> = ::java_awt / "SequencedEvent$2";
namespace java::awt { class Shape; }
template<> constexpr auto signature<::java::awt::Shape> = ::java_awt / "Shape";
namespace java::awt { class SplashScreen; }
template<> constexpr auto signature<::java::awt::SplashScreen> = ::java_awt / "SplashScreen";
namespace java::awt { class SplashScreen$1; }
template<> constexpr auto signature<::java::awt::SplashScreen$1> = ::java_awt / "SplashScreen$1";
namespace java::awt { class Stroke; }
template<> constexpr auto signature<::java::awt::Stroke> = ::java_awt / "Stroke";
namespace java::awt { class SystemColor; }
template<> constexpr auto signature<::java::awt::SystemColor> = ::java_awt / "SystemColor";
namespace java::awt { class SystemTray; }
template<> constexpr auto signature<::java::awt::SystemTray> = ::java_awt / "SystemTray";
namespace java::awt { class SystemTray$1; }
template<> constexpr auto signature<::java::awt::SystemTray$1> = ::java_awt / "SystemTray$1";
namespace java::awt { class TextArea; }
template<> constexpr auto signature<::java::awt::TextArea> = ::java_awt / "TextArea";
namespace java::awt { class TextArea$AccessibleAWTTextArea; }
template<> constexpr auto signature<::java::awt::TextArea$AccessibleAWTTextArea> = ::java_awt / "TextArea$AccessibleAWTTextArea";
namespace java::awt { class TextComponent; }
template<> constexpr auto signature<::java::awt::TextComponent> = ::java_awt / "TextComponent";
namespace java::awt { class TextComponent$AccessibleAWTTextComponent; }
template<> constexpr auto signature<::java::awt::TextComponent$AccessibleAWTTextComponent> = ::java_awt / "TextComponent$AccessibleAWTTextComponent";
namespace java::awt { class TextField; }
template<> constexpr auto signature<::java::awt::TextField> = ::java_awt / "TextField";
namespace java::awt { class TextField$AccessibleAWTTextField; }
template<> constexpr auto signature<::java::awt::TextField$AccessibleAWTTextField> = ::java_awt / "TextField$AccessibleAWTTextField";
namespace java::awt { class TexturePaint; }
template<> constexpr auto signature<::java::awt::TexturePaint> = ::java_awt / "TexturePaint";
namespace java::awt { class TexturePaintContext; }
template<> constexpr auto signature<::java::awt::TexturePaintContext> = ::java_awt / "TexturePaintContext";
namespace java::awt { class TexturePaintContext$Any; }
template<> constexpr auto signature<::java::awt::TexturePaintContext$Any> = ::java_awt / "TexturePaintContext$Any";
namespace java::awt { class TexturePaintContext$Byte; }
template<> constexpr auto signature<::java::awt::TexturePaintContext$Byte> = ::java_awt / "TexturePaintContext$Byte";
namespace java::awt { class TexturePaintContext$ByteFilter; }
template<> constexpr auto signature<::java::awt::TexturePaintContext$ByteFilter> = ::java_awt / "TexturePaintContext$ByteFilter";
namespace java::awt { class TexturePaintContext$Int; }
template<> constexpr auto signature<::java::awt::TexturePaintContext$Int> = ::java_awt / "TexturePaintContext$Int";
namespace java::awt { class Toolkit; }
template<> constexpr auto signature<::java::awt::Toolkit> = ::java_awt / "Toolkit";
namespace java::awt { class Toolkit$1; }
template<> constexpr auto signature<::java::awt::Toolkit$1> = ::java_awt / "Toolkit$1";
namespace java::awt { class Toolkit$2; }
template<> constexpr auto signature<::java::awt::Toolkit$2> = ::java_awt / "Toolkit$2";
namespace java::awt { class Toolkit$3; }
template<> constexpr auto signature<::java::awt::Toolkit$3> = ::java_awt / "Toolkit$3";
namespace java::awt { class Toolkit$4; }
template<> constexpr auto signature<::java::awt::Toolkit$4> = ::java_awt / "Toolkit$4";
namespace java::awt { class Toolkit$5; }
template<> constexpr auto signature<::java::awt::Toolkit$5> = ::java_awt / "Toolkit$5";
namespace java::awt { class Toolkit$DesktopPropertyChangeSupport; }
template<> constexpr auto signature<::java::awt::Toolkit$DesktopPropertyChangeSupport> = ::java_awt / "Toolkit$DesktopPropertyChangeSupport";
namespace java::awt { class Toolkit$DesktopPropertyChangeSupport$1; }
template<> constexpr auto signature<::java::awt::Toolkit$DesktopPropertyChangeSupport$1> = ::java_awt / "Toolkit$DesktopPropertyChangeSupport$1";
namespace java::awt { class Toolkit$SelectiveAWTEventListener; }
template<> constexpr auto signature<::java::awt::Toolkit$SelectiveAWTEventListener> = ::java_awt / "Toolkit$SelectiveAWTEventListener";
namespace java::awt { class Toolkit$ToolkitEventMulticaster; }
template<> constexpr auto signature<::java::awt::Toolkit$ToolkitEventMulticaster> = ::java_awt / "Toolkit$ToolkitEventMulticaster";
namespace java::awt { class Transparency; }
template<> constexpr auto signature<::java::awt::Transparency> = ::java_awt / "Transparency";
namespace java::awt { class TrayIcon; }
template<> constexpr auto signature<::java::awt::TrayIcon> = ::java_awt / "TrayIcon";
namespace java::awt { class TrayIcon$1; }
template<> constexpr auto signature<::java::awt::TrayIcon$1> = ::java_awt / "TrayIcon$1";
namespace java::awt { class TrayIcon$MessageType; }
template<> constexpr auto signature<::java::awt::TrayIcon$MessageType> = ::java_awt / "TrayIcon$MessageType";
namespace java::awt { class VKCollection; }
template<> constexpr auto signature<::java::awt::VKCollection> = ::java_awt / "VKCollection";
namespace java::awt { class WaitDispatchSupport; }
template<> constexpr auto signature<::java::awt::WaitDispatchSupport> = ::java_awt / "WaitDispatchSupport";
namespace java::awt { class WaitDispatchSupport$1; }
template<> constexpr auto signature<::java::awt::WaitDispatchSupport$1> = ::java_awt / "WaitDispatchSupport$1";
namespace java::awt { class WaitDispatchSupport$2; }
template<> constexpr auto signature<::java::awt::WaitDispatchSupport$2> = ::java_awt / "WaitDispatchSupport$2";
namespace java::awt { class WaitDispatchSupport$3; }
template<> constexpr auto signature<::java::awt::WaitDispatchSupport$3> = ::java_awt / "WaitDispatchSupport$3";
namespace java::awt { class WaitDispatchSupport$4; }
template<> constexpr auto signature<::java::awt::WaitDispatchSupport$4> = ::java_awt / "WaitDispatchSupport$4";
namespace java::awt { class WaitDispatchSupport$5; }
template<> constexpr auto signature<::java::awt::WaitDispatchSupport$5> = ::java_awt / "WaitDispatchSupport$5";
namespace java::awt { class Window; }
template<> constexpr auto signature<::java::awt::Window> = ::java_awt / "Window";
namespace java::awt { class Window$1; }
template<> constexpr auto signature<::java::awt::Window$1> = ::java_awt / "Window$1";
namespace java::awt { class Window$1DisposeAction; }
template<> constexpr auto signature<::java::awt::Window$1DisposeAction> = ::java_awt / "Window$1DisposeAction";
namespace java::awt { class Window$AccessibleAWTWindow; }
template<> constexpr auto signature<::java::awt::Window$AccessibleAWTWindow> = ::java_awt / "Window$AccessibleAWTWindow";
namespace java::awt { class Window$Type; }
template<> constexpr auto signature<::java::awt::Window$Type> = ::java_awt / "Window$Type";
namespace java::awt { class Window$WindowDisposerRecord; }
template<> constexpr auto signature<::java::awt::Window$WindowDisposerRecord> = ::java_awt / "Window$WindowDisposerRecord";
namespace java::awt::color { class CMMException; }
template<> constexpr auto signature<::java::awt::color::CMMException> = ::java_awt_color / "CMMException";
namespace java::awt::color { class ColorSpace; }
template<> constexpr auto signature<::java::awt::color::ColorSpace> = ::java_awt_color / "ColorSpace";
namespace java::awt::color { class ICC_ColorSpace; }
template<> constexpr auto signature<::java::awt::color::ICC_ColorSpace> = ::java_awt_color / "ICC_ColorSpace";
namespace java::awt::color { class ICC_Profile; }
template<> constexpr auto signature<::java::awt::color::ICC_Profile> = ::java_awt_color / "ICC_Profile";
namespace java::awt::color { class ICC_Profile$1; }
template<> constexpr auto signature<::java::awt::color::ICC_Profile$1> = ::java_awt_color / "ICC_Profile$1";
namespace java::awt::color { class ICC_Profile$2; }
template<> constexpr auto signature<::java::awt::color::ICC_Profile$2> = ::java_awt_color / "ICC_Profile$2";
namespace java::awt::color { class ICC_Profile$3; }
template<> constexpr auto signature<::java::awt::color::ICC_Profile$3> = ::java_awt_color / "ICC_Profile$3";
namespace java::awt::color { class ICC_Profile$4; }
template<> constexpr auto signature<::java::awt::color::ICC_Profile$4> = ::java_awt_color / "ICC_Profile$4";
namespace java::awt::color { class ICC_ProfileGray; }
template<> constexpr auto signature<::java::awt::color::ICC_ProfileGray> = ::java_awt_color / "ICC_ProfileGray";
namespace java::awt::color { class ICC_ProfileRGB; }
template<> constexpr auto signature<::java::awt::color::ICC_ProfileRGB> = ::java_awt_color / "ICC_ProfileRGB";
namespace java::awt::color { class ProfileDataException; }
template<> constexpr auto signature<::java::awt::color::ProfileDataException> = ::java_awt_color / "ProfileDataException";
namespace java::awt::datatransfer { class Clipboard; }
template<> constexpr auto signature<::java::awt::datatransfer::Clipboard> = ::java_awt_datatransfer / "Clipboard";
namespace java::awt::datatransfer { class Clipboard$1; }
template<> constexpr auto signature<::java::awt::datatransfer::Clipboard$1> = ::java_awt_datatransfer / "Clipboard$1";
namespace java::awt::datatransfer { class Clipboard$2; }
template<> constexpr auto signature<::java::awt::datatransfer::Clipboard$2> = ::java_awt_datatransfer / "Clipboard$2";
namespace java::awt::datatransfer { class ClipboardOwner; }
template<> constexpr auto signature<::java::awt::datatransfer::ClipboardOwner> = ::java_awt_datatransfer / "ClipboardOwner";
namespace java::awt::datatransfer { class DataFlavor; }
template<> constexpr auto signature<::java::awt::datatransfer::DataFlavor> = ::java_awt_datatransfer / "DataFlavor";
namespace java::awt::datatransfer { class DataFlavor$TextFlavorComparator; }
template<> constexpr auto signature<::java::awt::datatransfer::DataFlavor$TextFlavorComparator> = ::java_awt_datatransfer / "DataFlavor$TextFlavorComparator";
namespace java::awt::datatransfer { class FlavorEvent; }
template<> constexpr auto signature<::java::awt::datatransfer::FlavorEvent> = ::java_awt_datatransfer / "FlavorEvent";
namespace java::awt::datatransfer { class FlavorListener; }
template<> constexpr auto signature<::java::awt::datatransfer::FlavorListener> = ::java_awt_datatransfer / "FlavorListener";
namespace java::awt::datatransfer { class FlavorMap; }
template<> constexpr auto signature<::java::awt::datatransfer::FlavorMap> = ::java_awt_datatransfer / "FlavorMap";
namespace java::awt::datatransfer { class FlavorTable; }
template<> constexpr auto signature<::java::awt::datatransfer::FlavorTable> = ::java_awt_datatransfer / "FlavorTable";
namespace java::awt::datatransfer { class MimeType; }
template<> constexpr auto signature<::java::awt::datatransfer::MimeType> = ::java_awt_datatransfer / "MimeType";
namespace java::awt::datatransfer { class MimeTypeParameterList; }
template<> constexpr auto signature<::java::awt::datatransfer::MimeTypeParameterList> = ::java_awt_datatransfer / "MimeTypeParameterList";
namespace java::awt::datatransfer { class MimeTypeParseException; }
template<> constexpr auto signature<::java::awt::datatransfer::MimeTypeParseException> = ::java_awt_datatransfer / "MimeTypeParseException";
namespace java::awt::datatransfer { class StringSelection; }
template<> constexpr auto signature<::java::awt::datatransfer::StringSelection> = ::java_awt_datatransfer / "StringSelection";
namespace java::awt::datatransfer { class SystemFlavorMap; }
template<> constexpr auto signature<::java::awt::datatransfer::SystemFlavorMap> = ::java_awt_datatransfer / "SystemFlavorMap";
namespace java::awt::datatransfer { class SystemFlavorMap$1; }
template<> constexpr auto signature<::java::awt::datatransfer::SystemFlavorMap$1> = ::java_awt_datatransfer / "SystemFlavorMap$1";
namespace java::awt::datatransfer { class SystemFlavorMap$2; }
template<> constexpr auto signature<::java::awt::datatransfer::SystemFlavorMap$2> = ::java_awt_datatransfer / "SystemFlavorMap$2";
namespace java::awt::datatransfer { class SystemFlavorMap$SoftCache; }
template<> constexpr auto signature<::java::awt::datatransfer::SystemFlavorMap$SoftCache> = ::java_awt_datatransfer / "SystemFlavorMap$SoftCache";
namespace java::awt::datatransfer { class Transferable; }
template<> constexpr auto signature<::java::awt::datatransfer::Transferable> = ::java_awt_datatransfer / "Transferable";
namespace java::awt::datatransfer { class UnsupportedFlavorException; }
template<> constexpr auto signature<::java::awt::datatransfer::UnsupportedFlavorException> = ::java_awt_datatransfer / "UnsupportedFlavorException";
namespace java::awt::dnd { class Autoscroll; }
template<> constexpr auto signature<::java::awt::dnd::Autoscroll> = ::java_awt_dnd / "Autoscroll";
namespace java::awt::dnd { class DnDConstants; }
template<> constexpr auto signature<::java::awt::dnd::DnDConstants> = ::java_awt_dnd / "DnDConstants";
namespace java::awt::dnd { class DnDEventMulticaster; }
template<> constexpr auto signature<::java::awt::dnd::DnDEventMulticaster> = ::java_awt_dnd / "DnDEventMulticaster";
namespace java::awt::dnd { class DragGestureEvent; }
template<> constexpr auto signature<::java::awt::dnd::DragGestureEvent> = ::java_awt_dnd / "DragGestureEvent";
namespace java::awt::dnd { class DragGestureListener; }
template<> constexpr auto signature<::java::awt::dnd::DragGestureListener> = ::java_awt_dnd / "DragGestureListener";
namespace java::awt::dnd { class DragGestureRecognizer; }
template<> constexpr auto signature<::java::awt::dnd::DragGestureRecognizer> = ::java_awt_dnd / "DragGestureRecognizer";
namespace java::awt::dnd { class DragSource; }
template<> constexpr auto signature<::java::awt::dnd::DragSource> = ::java_awt_dnd / "DragSource";
namespace java::awt::dnd { class DragSourceAdapter; }
template<> constexpr auto signature<::java::awt::dnd::DragSourceAdapter> = ::java_awt_dnd / "DragSourceAdapter";
namespace java::awt::dnd { class DragSourceContext; }
template<> constexpr auto signature<::java::awt::dnd::DragSourceContext> = ::java_awt_dnd / "DragSourceContext";
namespace java::awt::dnd { class DragSourceContext$1; }
template<> constexpr auto signature<::java::awt::dnd::DragSourceContext$1> = ::java_awt_dnd / "DragSourceContext$1";
namespace java::awt::dnd { class DragSourceDragEvent; }
template<> constexpr auto signature<::java::awt::dnd::DragSourceDragEvent> = ::java_awt_dnd / "DragSourceDragEvent";
namespace java::awt::dnd { class DragSourceDropEvent; }
template<> constexpr auto signature<::java::awt::dnd::DragSourceDropEvent> = ::java_awt_dnd / "DragSourceDropEvent";
namespace java::awt::dnd { class DragSourceEvent; }
template<> constexpr auto signature<::java::awt::dnd::DragSourceEvent> = ::java_awt_dnd / "DragSourceEvent";
namespace java::awt::dnd { class DragSourceListener; }
template<> constexpr auto signature<::java::awt::dnd::DragSourceListener> = ::java_awt_dnd / "DragSourceListener";
namespace java::awt::dnd { class DragSourceMotionListener; }
template<> constexpr auto signature<::java::awt::dnd::DragSourceMotionListener> = ::java_awt_dnd / "DragSourceMotionListener";
namespace java::awt::dnd { class DropTarget; }
template<> constexpr auto signature<::java::awt::dnd::DropTarget> = ::java_awt_dnd / "DropTarget";
namespace java::awt::dnd { class DropTarget$DropTargetAutoScroller; }
template<> constexpr auto signature<::java::awt::dnd::DropTarget$DropTargetAutoScroller> = ::java_awt_dnd / "DropTarget$DropTargetAutoScroller";
namespace java::awt::dnd { class DropTargetAdapter; }
template<> constexpr auto signature<::java::awt::dnd::DropTargetAdapter> = ::java_awt_dnd / "DropTargetAdapter";
namespace java::awt::dnd { class DropTargetContext; }
template<> constexpr auto signature<::java::awt::dnd::DropTargetContext> = ::java_awt_dnd / "DropTargetContext";
namespace java::awt::dnd { class DropTargetContext$TransferableProxy; }
template<> constexpr auto signature<::java::awt::dnd::DropTargetContext$TransferableProxy> = ::java_awt_dnd / "DropTargetContext$TransferableProxy";
namespace java::awt::dnd { class DropTargetDragEvent; }
template<> constexpr auto signature<::java::awt::dnd::DropTargetDragEvent> = ::java_awt_dnd / "DropTargetDragEvent";
namespace java::awt::dnd { class DropTargetDropEvent; }
template<> constexpr auto signature<::java::awt::dnd::DropTargetDropEvent> = ::java_awt_dnd / "DropTargetDropEvent";
namespace java::awt::dnd { class DropTargetEvent; }
template<> constexpr auto signature<::java::awt::dnd::DropTargetEvent> = ::java_awt_dnd / "DropTargetEvent";
namespace java::awt::dnd { class DropTargetListener; }
template<> constexpr auto signature<::java::awt::dnd::DropTargetListener> = ::java_awt_dnd / "DropTargetListener";
namespace java::awt::dnd { class InvalidDnDOperationException; }
template<> constexpr auto signature<::java::awt::dnd::InvalidDnDOperationException> = ::java_awt_dnd / "InvalidDnDOperationException";
namespace java::awt::dnd { class MouseDragGestureRecognizer; }
template<> constexpr auto signature<::java::awt::dnd::MouseDragGestureRecognizer> = ::java_awt_dnd / "MouseDragGestureRecognizer";
namespace java::awt::dnd { class SerializationTester; }
template<> constexpr auto signature<::java::awt::dnd::SerializationTester> = ::java_awt_dnd / "SerializationTester";
namespace java::awt::dnd { class SerializationTester$1; }
template<> constexpr auto signature<::java::awt::dnd::SerializationTester$1> = ::java_awt_dnd / "SerializationTester$1";
namespace java::awt::dnd::peer { class DragSourceContextPeer; }
template<> constexpr auto signature<::java::awt::dnd::peer::DragSourceContextPeer> = ::java_awt_dnd_peer / "DragSourceContextPeer";
namespace java::awt::dnd::peer { class DropTargetContextPeer; }
template<> constexpr auto signature<::java::awt::dnd::peer::DropTargetContextPeer> = ::java_awt_dnd_peer / "DropTargetContextPeer";
namespace java::awt::dnd::peer { class DropTargetPeer; }
template<> constexpr auto signature<::java::awt::dnd::peer::DropTargetPeer> = ::java_awt_dnd_peer / "DropTargetPeer";
namespace java::awt::event { class AWTEventListener; }
template<> constexpr auto signature<::java::awt::event::AWTEventListener> = ::java_awt_event / "AWTEventListener";
namespace java::awt::event { class AWTEventListenerProxy; }
template<> constexpr auto signature<::java::awt::event::AWTEventListenerProxy> = ::java_awt_event / "AWTEventListenerProxy";
namespace java::awt::event { class ActionEvent; }
template<> constexpr auto signature<::java::awt::event::ActionEvent> = ::java_awt_event / "ActionEvent";
namespace java::awt::event { class ActionListener; }
template<> constexpr auto signature<::java::awt::event::ActionListener> = ::java_awt_event / "ActionListener";
namespace java::awt::event { class AdjustmentEvent; }
template<> constexpr auto signature<::java::awt::event::AdjustmentEvent> = ::java_awt_event / "AdjustmentEvent";
namespace java::awt::event { class AdjustmentListener; }
template<> constexpr auto signature<::java::awt::event::AdjustmentListener> = ::java_awt_event / "AdjustmentListener";
namespace java::awt::event { class ComponentAdapter; }
template<> constexpr auto signature<::java::awt::event::ComponentAdapter> = ::java_awt_event / "ComponentAdapter";
namespace java::awt::event { class ComponentEvent; }
template<> constexpr auto signature<::java::awt::event::ComponentEvent> = ::java_awt_event / "ComponentEvent";
namespace java::awt::event { class ComponentListener; }
template<> constexpr auto signature<::java::awt::event::ComponentListener> = ::java_awt_event / "ComponentListener";
namespace java::awt::event { class ContainerAdapter; }
template<> constexpr auto signature<::java::awt::event::ContainerAdapter> = ::java_awt_event / "ContainerAdapter";
namespace java::awt::event { class ContainerEvent; }
template<> constexpr auto signature<::java::awt::event::ContainerEvent> = ::java_awt_event / "ContainerEvent";
namespace java::awt::event { class ContainerListener; }
template<> constexpr auto signature<::java::awt::event::ContainerListener> = ::java_awt_event / "ContainerListener";
namespace java::awt::event { class FocusAdapter; }
template<> constexpr auto signature<::java::awt::event::FocusAdapter> = ::java_awt_event / "FocusAdapter";
namespace java::awt::event { class FocusEvent; }
template<> constexpr auto signature<::java::awt::event::FocusEvent> = ::java_awt_event / "FocusEvent";
namespace java::awt::event { class FocusListener; }
template<> constexpr auto signature<::java::awt::event::FocusListener> = ::java_awt_event / "FocusListener";
namespace java::awt::event { class HierarchyBoundsAdapter; }
template<> constexpr auto signature<::java::awt::event::HierarchyBoundsAdapter> = ::java_awt_event / "HierarchyBoundsAdapter";
namespace java::awt::event { class HierarchyBoundsListener; }
template<> constexpr auto signature<::java::awt::event::HierarchyBoundsListener> = ::java_awt_event / "HierarchyBoundsListener";
namespace java::awt::event { class HierarchyEvent; }
template<> constexpr auto signature<::java::awt::event::HierarchyEvent> = ::java_awt_event / "HierarchyEvent";
namespace java::awt::event { class HierarchyListener; }
template<> constexpr auto signature<::java::awt::event::HierarchyListener> = ::java_awt_event / "HierarchyListener";
namespace java::awt::event { class InputEvent; }
template<> constexpr auto signature<::java::awt::event::InputEvent> = ::java_awt_event / "InputEvent";
namespace java::awt::event { class InputEvent$1; }
template<> constexpr auto signature<::java::awt::event::InputEvent$1> = ::java_awt_event / "InputEvent$1";
namespace java::awt::event { class InputMethodEvent; }
template<> constexpr auto signature<::java::awt::event::InputMethodEvent> = ::java_awt_event / "InputMethodEvent";
namespace java::awt::event { class InputMethodListener; }
template<> constexpr auto signature<::java::awt::event::InputMethodListener> = ::java_awt_event / "InputMethodListener";
namespace java::awt::event { class InvocationEvent; }
template<> constexpr auto signature<::java::awt::event::InvocationEvent> = ::java_awt_event / "InvocationEvent";
namespace java::awt::event { class InvocationEvent$1; }
template<> constexpr auto signature<::java::awt::event::InvocationEvent$1> = ::java_awt_event / "InvocationEvent$1";
namespace java::awt::event { class ItemEvent; }
template<> constexpr auto signature<::java::awt::event::ItemEvent> = ::java_awt_event / "ItemEvent";
namespace java::awt::event { class ItemListener; }
template<> constexpr auto signature<::java::awt::event::ItemListener> = ::java_awt_event / "ItemListener";
namespace java::awt::event { class KeyAdapter; }
template<> constexpr auto signature<::java::awt::event::KeyAdapter> = ::java_awt_event / "KeyAdapter";
namespace java::awt::event { class KeyEvent; }
template<> constexpr auto signature<::java::awt::event::KeyEvent> = ::java_awt_event / "KeyEvent";
namespace java::awt::event { class KeyEvent$1; }
template<> constexpr auto signature<::java::awt::event::KeyEvent$1> = ::java_awt_event / "KeyEvent$1";
namespace java::awt::event { class KeyListener; }
template<> constexpr auto signature<::java::awt::event::KeyListener> = ::java_awt_event / "KeyListener";
namespace java::awt::event { class MouseAdapter; }
template<> constexpr auto signature<::java::awt::event::MouseAdapter> = ::java_awt_event / "MouseAdapter";
namespace java::awt::event { class MouseEvent; }
template<> constexpr auto signature<::java::awt::event::MouseEvent> = ::java_awt_event / "MouseEvent";
namespace java::awt::event { class MouseListener; }
template<> constexpr auto signature<::java::awt::event::MouseListener> = ::java_awt_event / "MouseListener";
namespace java::awt::event { class MouseMotionAdapter; }
template<> constexpr auto signature<::java::awt::event::MouseMotionAdapter> = ::java_awt_event / "MouseMotionAdapter";
namespace java::awt::event { class MouseMotionListener; }
template<> constexpr auto signature<::java::awt::event::MouseMotionListener> = ::java_awt_event / "MouseMotionListener";
namespace java::awt::event { class MouseWheelEvent; }
template<> constexpr auto signature<::java::awt::event::MouseWheelEvent> = ::java_awt_event / "MouseWheelEvent";
namespace java::awt::event { class MouseWheelListener; }
template<> constexpr auto signature<::java::awt::event::MouseWheelListener> = ::java_awt_event / "MouseWheelListener";
namespace java::awt::event { class NativeLibLoader; }
template<> constexpr auto signature<::java::awt::event::NativeLibLoader> = ::java_awt_event / "NativeLibLoader";
namespace java::awt::event { class NativeLibLoader$1; }
template<> constexpr auto signature<::java::awt::event::NativeLibLoader$1> = ::java_awt_event / "NativeLibLoader$1";
namespace java::awt::event { class PaintEvent; }
template<> constexpr auto signature<::java::awt::event::PaintEvent> = ::java_awt_event / "PaintEvent";
namespace java::awt::event { class TextEvent; }
template<> constexpr auto signature<::java::awt::event::TextEvent> = ::java_awt_event / "TextEvent";
namespace java::awt::event { class TextListener; }
template<> constexpr auto signature<::java::awt::event::TextListener> = ::java_awt_event / "TextListener";
namespace java::awt::event { class WindowAdapter; }
template<> constexpr auto signature<::java::awt::event::WindowAdapter> = ::java_awt_event / "WindowAdapter";
namespace java::awt::event { class WindowEvent; }
template<> constexpr auto signature<::java::awt::event::WindowEvent> = ::java_awt_event / "WindowEvent";
namespace java::awt::event { class WindowFocusListener; }
template<> constexpr auto signature<::java::awt::event::WindowFocusListener> = ::java_awt_event / "WindowFocusListener";
namespace java::awt::event { class WindowListener; }
template<> constexpr auto signature<::java::awt::event::WindowListener> = ::java_awt_event / "WindowListener";
namespace java::awt::event { class WindowStateListener; }
template<> constexpr auto signature<::java::awt::event::WindowStateListener> = ::java_awt_event / "WindowStateListener";
namespace java::awt::font { class CharArrayIterator; }
template<> constexpr auto signature<::java::awt::font::CharArrayIterator> = ::java_awt_font / "CharArrayIterator";
namespace java::awt::font { class FontRenderContext; }
template<> constexpr auto signature<::java::awt::font::FontRenderContext> = ::java_awt_font / "FontRenderContext";
namespace java::awt::font { class GlyphJustificationInfo; }
template<> constexpr auto signature<::java::awt::font::GlyphJustificationInfo> = ::java_awt_font / "GlyphJustificationInfo";
namespace java::awt::font { class GlyphMetrics; }
template<> constexpr auto signature<::java::awt::font::GlyphMetrics> = ::java_awt_font / "GlyphMetrics";
namespace java::awt::font { class GlyphVector; }
template<> constexpr auto signature<::java::awt::font::GlyphVector> = ::java_awt_font / "GlyphVector";
namespace java::awt::font { class GraphicAttribute; }
template<> constexpr auto signature<::java::awt::font::GraphicAttribute> = ::java_awt_font / "GraphicAttribute";
namespace java::awt::font { class ImageGraphicAttribute; }
template<> constexpr auto signature<::java::awt::font::ImageGraphicAttribute> = ::java_awt_font / "ImageGraphicAttribute";
namespace java::awt::font { class LayoutPath; }
template<> constexpr auto signature<::java::awt::font::LayoutPath> = ::java_awt_font / "LayoutPath";
namespace java::awt::font { class LineBreakMeasurer; }
template<> constexpr auto signature<::java::awt::font::LineBreakMeasurer> = ::java_awt_font / "LineBreakMeasurer";
namespace java::awt::font { class LineMetrics; }
template<> constexpr auto signature<::java::awt::font::LineMetrics> = ::java_awt_font / "LineMetrics";
namespace java::awt::font { class MultipleMaster; }
template<> constexpr auto signature<::java::awt::font::MultipleMaster> = ::java_awt_font / "MultipleMaster";
namespace java::awt::font { class NumericShaper; }
template<> constexpr auto signature<::java::awt::font::NumericShaper> = ::java_awt_font / "NumericShaper";
namespace java::awt::font { class NumericShaper$1; }
template<> constexpr auto signature<::java::awt::font::NumericShaper$1> = ::java_awt_font / "NumericShaper$1";
namespace java::awt::font { class NumericShaper$Range; }
template<> constexpr auto signature<::java::awt::font::NumericShaper$Range> = ::java_awt_font / "NumericShaper$Range";
namespace java::awt::font { class NumericShaper$Range$1; }
template<> constexpr auto signature<::java::awt::font::NumericShaper$Range$1> = ::java_awt_font / "NumericShaper$Range$1";
namespace java::awt::font { class OpenType; }
template<> constexpr auto signature<::java::awt::font::OpenType> = ::java_awt_font / "OpenType";
namespace java::awt::font { class ShapeGraphicAttribute; }
template<> constexpr auto signature<::java::awt::font::ShapeGraphicAttribute> = ::java_awt_font / "ShapeGraphicAttribute";
namespace java::awt::font { class StyledParagraph; }
template<> constexpr auto signature<::java::awt::font::StyledParagraph> = ::java_awt_font / "StyledParagraph";
namespace java::awt::font { class TextAttribute; }
template<> constexpr auto signature<::java::awt::font::TextAttribute> = ::java_awt_font / "TextAttribute";
namespace java::awt::font { class TextHitInfo; }
template<> constexpr auto signature<::java::awt::font::TextHitInfo> = ::java_awt_font / "TextHitInfo";
namespace java::awt::font { class TextJustifier; }
template<> constexpr auto signature<::java::awt::font::TextJustifier> = ::java_awt_font / "TextJustifier";
namespace java::awt::font { class TextLayout; }
template<> constexpr auto signature<::java::awt::font::TextLayout> = ::java_awt_font / "TextLayout";
namespace java::awt::font { class TextLayout$CaretPolicy; }
template<> constexpr auto signature<::java::awt::font::TextLayout$CaretPolicy> = ::java_awt_font / "TextLayout$CaretPolicy";
namespace java::awt::font { class TextLine; }
template<> constexpr auto signature<::java::awt::font::TextLine> = ::java_awt_font / "TextLine";
namespace java::awt::font { class TextLine$1; }
template<> constexpr auto signature<::java::awt::font::TextLine$1> = ::java_awt_font / "TextLine$1";
namespace java::awt::font { class TextLine$2; }
template<> constexpr auto signature<::java::awt::font::TextLine$2> = ::java_awt_font / "TextLine$2";
namespace java::awt::font { class TextLine$3; }
template<> constexpr auto signature<::java::awt::font::TextLine$3> = ::java_awt_font / "TextLine$3";
namespace java::awt::font { class TextLine$4; }
template<> constexpr auto signature<::java::awt::font::TextLine$4> = ::java_awt_font / "TextLine$4";
namespace java::awt::font { class TextLine$Function; }
template<> constexpr auto signature<::java::awt::font::TextLine$Function> = ::java_awt_font / "TextLine$Function";
namespace java::awt::font { class TextLine$TextLineMetrics; }
template<> constexpr auto signature<::java::awt::font::TextLine$TextLineMetrics> = ::java_awt_font / "TextLine$TextLineMetrics";
namespace java::awt::font { class TextMeasurer; }
template<> constexpr auto signature<::java::awt::font::TextMeasurer> = ::java_awt_font / "TextMeasurer";
namespace java::awt::font { class TransformAttribute; }
template<> constexpr auto signature<::java::awt::font::TransformAttribute> = ::java_awt_font / "TransformAttribute";
namespace java::awt::geom { class AffineTransform; }
template<> constexpr auto signature<::java::awt::geom::AffineTransform> = ::java_awt_geom / "AffineTransform";
namespace java::awt::geom { class Arc2D; }
template<> constexpr auto signature<::java::awt::geom::Arc2D> = ::java_awt_geom / "Arc2D";
namespace java::awt::geom { class Arc2D$Double; }
template<> constexpr auto signature<::java::awt::geom::Arc2D$Double> = ::java_awt_geom / "Arc2D$Double";
namespace java::awt::geom { class Arc2D$Float; }
template<> constexpr auto signature<::java::awt::geom::Arc2D$Float> = ::java_awt_geom / "Arc2D$Float";
namespace java::awt::geom { class ArcIterator; }
template<> constexpr auto signature<::java::awt::geom::ArcIterator> = ::java_awt_geom / "ArcIterator";
namespace java::awt::geom { class Area; }
template<> constexpr auto signature<::java::awt::geom::Area> = ::java_awt_geom / "Area";
namespace java::awt::geom { class AreaIterator; }
template<> constexpr auto signature<::java::awt::geom::AreaIterator> = ::java_awt_geom / "AreaIterator";
namespace java::awt::geom { class CubicCurve2D; }
template<> constexpr auto signature<::java::awt::geom::CubicCurve2D> = ::java_awt_geom / "CubicCurve2D";
namespace java::awt::geom { class CubicCurve2D$Double; }
template<> constexpr auto signature<::java::awt::geom::CubicCurve2D$Double> = ::java_awt_geom / "CubicCurve2D$Double";
namespace java::awt::geom { class CubicCurve2D$Float; }
template<> constexpr auto signature<::java::awt::geom::CubicCurve2D$Float> = ::java_awt_geom / "CubicCurve2D$Float";
namespace java::awt::geom { class CubicIterator; }
template<> constexpr auto signature<::java::awt::geom::CubicIterator> = ::java_awt_geom / "CubicIterator";
namespace java::awt::geom { class Dimension2D; }
template<> constexpr auto signature<::java::awt::geom::Dimension2D> = ::java_awt_geom / "Dimension2D";
namespace java::awt::geom { class Ellipse2D; }
template<> constexpr auto signature<::java::awt::geom::Ellipse2D> = ::java_awt_geom / "Ellipse2D";
namespace java::awt::geom { class Ellipse2D$Double; }
template<> constexpr auto signature<::java::awt::geom::Ellipse2D$Double> = ::java_awt_geom / "Ellipse2D$Double";
namespace java::awt::geom { class Ellipse2D$Float; }
template<> constexpr auto signature<::java::awt::geom::Ellipse2D$Float> = ::java_awt_geom / "Ellipse2D$Float";
namespace java::awt::geom { class EllipseIterator; }
template<> constexpr auto signature<::java::awt::geom::EllipseIterator> = ::java_awt_geom / "EllipseIterator";
namespace java::awt::geom { class FlatteningPathIterator; }
template<> constexpr auto signature<::java::awt::geom::FlatteningPathIterator> = ::java_awt_geom / "FlatteningPathIterator";
namespace java::awt::geom { class GeneralPath; }
template<> constexpr auto signature<::java::awt::geom::GeneralPath> = ::java_awt_geom / "GeneralPath";
namespace java::awt::geom { class IllegalPathStateException; }
template<> constexpr auto signature<::java::awt::geom::IllegalPathStateException> = ::java_awt_geom / "IllegalPathStateException";
namespace java::awt::geom { class Line2D; }
template<> constexpr auto signature<::java::awt::geom::Line2D> = ::java_awt_geom / "Line2D";
namespace java::awt::geom { class Line2D$Double; }
template<> constexpr auto signature<::java::awt::geom::Line2D$Double> = ::java_awt_geom / "Line2D$Double";
namespace java::awt::geom { class Line2D$Float; }
template<> constexpr auto signature<::java::awt::geom::Line2D$Float> = ::java_awt_geom / "Line2D$Float";
namespace java::awt::geom { class LineIterator; }
template<> constexpr auto signature<::java::awt::geom::LineIterator> = ::java_awt_geom / "LineIterator";
namespace java::awt::geom { class NoninvertibleTransformException; }
template<> constexpr auto signature<::java::awt::geom::NoninvertibleTransformException> = ::java_awt_geom / "NoninvertibleTransformException";
namespace java::awt::geom { class Path2D; }
template<> constexpr auto signature<::java::awt::geom::Path2D> = ::java_awt_geom / "Path2D";
namespace java::awt::geom { class Path2D$Double; }
template<> constexpr auto signature<::java::awt::geom::Path2D$Double> = ::java_awt_geom / "Path2D$Double";
namespace java::awt::geom { class Path2D$Double$CopyIterator; }
template<> constexpr auto signature<::java::awt::geom::Path2D$Double$CopyIterator> = ::java_awt_geom / "Path2D$Double$CopyIterator";
namespace java::awt::geom { class Path2D$Double$TxIterator; }
template<> constexpr auto signature<::java::awt::geom::Path2D$Double$TxIterator> = ::java_awt_geom / "Path2D$Double$TxIterator";
namespace java::awt::geom { class Path2D$Float; }
template<> constexpr auto signature<::java::awt::geom::Path2D$Float> = ::java_awt_geom / "Path2D$Float";
namespace java::awt::geom { class Path2D$Float$CopyIterator; }
template<> constexpr auto signature<::java::awt::geom::Path2D$Float$CopyIterator> = ::java_awt_geom / "Path2D$Float$CopyIterator";
namespace java::awt::geom { class Path2D$Float$TxIterator; }
template<> constexpr auto signature<::java::awt::geom::Path2D$Float$TxIterator> = ::java_awt_geom / "Path2D$Float$TxIterator";
namespace java::awt::geom { class Path2D$Iterator; }
template<> constexpr auto signature<::java::awt::geom::Path2D$Iterator> = ::java_awt_geom / "Path2D$Iterator";
namespace java::awt::geom { class PathIterator; }
template<> constexpr auto signature<::java::awt::geom::PathIterator> = ::java_awt_geom / "PathIterator";
namespace java::awt::geom { class Point2D; }
template<> constexpr auto signature<::java::awt::geom::Point2D> = ::java_awt_geom / "Point2D";
namespace java::awt::geom { class Point2D$Double; }
template<> constexpr auto signature<::java::awt::geom::Point2D$Double> = ::java_awt_geom / "Point2D$Double";
namespace java::awt::geom { class Point2D$Float; }
template<> constexpr auto signature<::java::awt::geom::Point2D$Float> = ::java_awt_geom / "Point2D$Float";
namespace java::awt::geom { class QuadCurve2D; }
template<> constexpr auto signature<::java::awt::geom::QuadCurve2D> = ::java_awt_geom / "QuadCurve2D";
namespace java::awt::geom { class QuadCurve2D$Double; }
template<> constexpr auto signature<::java::awt::geom::QuadCurve2D$Double> = ::java_awt_geom / "QuadCurve2D$Double";
namespace java::awt::geom { class QuadCurve2D$Float; }
template<> constexpr auto signature<::java::awt::geom::QuadCurve2D$Float> = ::java_awt_geom / "QuadCurve2D$Float";
namespace java::awt::geom { class QuadIterator; }
template<> constexpr auto signature<::java::awt::geom::QuadIterator> = ::java_awt_geom / "QuadIterator";
namespace java::awt::geom { class RectIterator; }
template<> constexpr auto signature<::java::awt::geom::RectIterator> = ::java_awt_geom / "RectIterator";
namespace java::awt::geom { class Rectangle2D; }
template<> constexpr auto signature<::java::awt::geom::Rectangle2D> = ::java_awt_geom / "Rectangle2D";
namespace java::awt::geom { class Rectangle2D$Double; }
template<> constexpr auto signature<::java::awt::geom::Rectangle2D$Double> = ::java_awt_geom / "Rectangle2D$Double";
namespace java::awt::geom { class Rectangle2D$Float; }
template<> constexpr auto signature<::java::awt::geom::Rectangle2D$Float> = ::java_awt_geom / "Rectangle2D$Float";
namespace java::awt::geom { class RectangularShape; }
template<> constexpr auto signature<::java::awt::geom::RectangularShape> = ::java_awt_geom / "RectangularShape";
namespace java::awt::geom { class RoundRectIterator; }
template<> constexpr auto signature<::java::awt::geom::RoundRectIterator> = ::java_awt_geom / "RoundRectIterator";
namespace java::awt::geom { class RoundRectangle2D; }
template<> constexpr auto signature<::java::awt::geom::RoundRectangle2D> = ::java_awt_geom / "RoundRectangle2D";
namespace java::awt::geom { class RoundRectangle2D$Double; }
template<> constexpr auto signature<::java::awt::geom::RoundRectangle2D$Double> = ::java_awt_geom / "RoundRectangle2D$Double";
namespace java::awt::geom { class RoundRectangle2D$Float; }
template<> constexpr auto signature<::java::awt::geom::RoundRectangle2D$Float> = ::java_awt_geom / "RoundRectangle2D$Float";
namespace java::awt::im { class InputContext; }
template<> constexpr auto signature<::java::awt::im::InputContext> = ::java_awt_im / "InputContext";
namespace java::awt::im { class InputMethodHighlight; }
template<> constexpr auto signature<::java::awt::im::InputMethodHighlight> = ::java_awt_im / "InputMethodHighlight";
namespace java::awt::im { class InputMethodRequests; }
template<> constexpr auto signature<::java::awt::im::InputMethodRequests> = ::java_awt_im / "InputMethodRequests";
namespace java::awt::im { class InputSubset; }
template<> constexpr auto signature<::java::awt::im::InputSubset> = ::java_awt_im / "InputSubset";
namespace java::awt::im::spi { class InputMethod; }
template<> constexpr auto signature<::java::awt::im::spi::InputMethod> = ::java_awt_im_spi / "InputMethod";
namespace java::awt::im::spi { class InputMethodContext; }
template<> constexpr auto signature<::java::awt::im::spi::InputMethodContext> = ::java_awt_im_spi / "InputMethodContext";
namespace java::awt::im::spi { class InputMethodDescriptor; }
template<> constexpr auto signature<::java::awt::im::spi::InputMethodDescriptor> = ::java_awt_im_spi / "InputMethodDescriptor";
namespace java::awt::image { class AffineTransformOp; }
template<> constexpr auto signature<::java::awt::image::AffineTransformOp> = ::java_awt_image / "AffineTransformOp";
namespace java::awt::image { class AreaAveragingScaleFilter; }
template<> constexpr auto signature<::java::awt::image::AreaAveragingScaleFilter> = ::java_awt_image / "AreaAveragingScaleFilter";
namespace java::awt::image { class BandCombineOp; }
template<> constexpr auto signature<::java::awt::image::BandCombineOp> = ::java_awt_image / "BandCombineOp";
namespace java::awt::image { class BandedSampleModel; }
template<> constexpr auto signature<::java::awt::image::BandedSampleModel> = ::java_awt_image / "BandedSampleModel";
namespace java::awt::image { class BufferStrategy; }
template<> constexpr auto signature<::java::awt::image::BufferStrategy> = ::java_awt_image / "BufferStrategy";
namespace java::awt::image { class BufferedImage; }
template<> constexpr auto signature<::java::awt::image::BufferedImage> = ::java_awt_image / "BufferedImage";
namespace java::awt::image { class BufferedImage$1; }
template<> constexpr auto signature<::java::awt::image::BufferedImage$1> = ::java_awt_image / "BufferedImage$1";
namespace java::awt::image { class BufferedImageFilter; }
template<> constexpr auto signature<::java::awt::image::BufferedImageFilter> = ::java_awt_image / "BufferedImageFilter";
namespace java::awt::image { class BufferedImageOp; }
template<> constexpr auto signature<::java::awt::image::BufferedImageOp> = ::java_awt_image / "BufferedImageOp";
namespace java::awt::image { class ByteLookupTable; }
template<> constexpr auto signature<::java::awt::image::ByteLookupTable> = ::java_awt_image / "ByteLookupTable";
namespace java::awt::image { class ColorConvertOp; }
template<> constexpr auto signature<::java::awt::image::ColorConvertOp> = ::java_awt_image / "ColorConvertOp";
namespace java::awt::image { class ColorModel; }
template<> constexpr auto signature<::java::awt::image::ColorModel> = ::java_awt_image / "ColorModel";
namespace java::awt::image { class ColorModel$1; }
template<> constexpr auto signature<::java::awt::image::ColorModel$1> = ::java_awt_image / "ColorModel$1";
namespace java::awt::image { class ComponentColorModel; }
template<> constexpr auto signature<::java::awt::image::ComponentColorModel> = ::java_awt_image / "ComponentColorModel";
namespace java::awt::image { class ComponentSampleModel; }
template<> constexpr auto signature<::java::awt::image::ComponentSampleModel> = ::java_awt_image / "ComponentSampleModel";
namespace java::awt::image { class ConvolveOp; }
template<> constexpr auto signature<::java::awt::image::ConvolveOp> = ::java_awt_image / "ConvolveOp";
namespace java::awt::image { class CropImageFilter; }
template<> constexpr auto signature<::java::awt::image::CropImageFilter> = ::java_awt_image / "CropImageFilter";
namespace java::awt::image { class DataBuffer; }
template<> constexpr auto signature<::java::awt::image::DataBuffer> = ::java_awt_image / "DataBuffer";
namespace java::awt::image { class DataBuffer$1; }
template<> constexpr auto signature<::java::awt::image::DataBuffer$1> = ::java_awt_image / "DataBuffer$1";
namespace java::awt::image { class DataBufferByte; }
template<> constexpr auto signature<::java::awt::image::DataBufferByte> = ::java_awt_image / "DataBufferByte";
namespace java::awt::image { class DataBufferDouble; }
template<> constexpr auto signature<::java::awt::image::DataBufferDouble> = ::java_awt_image / "DataBufferDouble";
namespace java::awt::image { class DataBufferFloat; }
template<> constexpr auto signature<::java::awt::image::DataBufferFloat> = ::java_awt_image / "DataBufferFloat";
namespace java::awt::image { class DataBufferInt; }
template<> constexpr auto signature<::java::awt::image::DataBufferInt> = ::java_awt_image / "DataBufferInt";
namespace java::awt::image { class DataBufferShort; }
template<> constexpr auto signature<::java::awt::image::DataBufferShort> = ::java_awt_image / "DataBufferShort";
namespace java::awt::image { class DataBufferUShort; }
template<> constexpr auto signature<::java::awt::image::DataBufferUShort> = ::java_awt_image / "DataBufferUShort";
namespace java::awt::image { class DirectColorModel; }
template<> constexpr auto signature<::java::awt::image::DirectColorModel> = ::java_awt_image / "DirectColorModel";
namespace java::awt::image { class FilteredImageSource; }
template<> constexpr auto signature<::java::awt::image::FilteredImageSource> = ::java_awt_image / "FilteredImageSource";
namespace java::awt::image { class ImageConsumer; }
template<> constexpr auto signature<::java::awt::image::ImageConsumer> = ::java_awt_image / "ImageConsumer";
namespace java::awt::image { class ImageFilter; }
template<> constexpr auto signature<::java::awt::image::ImageFilter> = ::java_awt_image / "ImageFilter";
namespace java::awt::image { class ImageObserver; }
template<> constexpr auto signature<::java::awt::image::ImageObserver> = ::java_awt_image / "ImageObserver";
namespace java::awt::image { class ImageProducer; }
template<> constexpr auto signature<::java::awt::image::ImageProducer> = ::java_awt_image / "ImageProducer";
namespace java::awt::image { class ImagingOpException; }
template<> constexpr auto signature<::java::awt::image::ImagingOpException> = ::java_awt_image / "ImagingOpException";
namespace java::awt::image { class IndexColorModel; }
template<> constexpr auto signature<::java::awt::image::IndexColorModel> = ::java_awt_image / "IndexColorModel";
namespace java::awt::image { class Kernel; }
template<> constexpr auto signature<::java::awt::image::Kernel> = ::java_awt_image / "Kernel";
namespace java::awt::image { class LookupOp; }
template<> constexpr auto signature<::java::awt::image::LookupOp> = ::java_awt_image / "LookupOp";
namespace java::awt::image { class LookupTable; }
template<> constexpr auto signature<::java::awt::image::LookupTable> = ::java_awt_image / "LookupTable";
namespace java::awt::image { class MemoryImageSource; }
template<> constexpr auto signature<::java::awt::image::MemoryImageSource> = ::java_awt_image / "MemoryImageSource";
namespace java::awt::image { class MultiPixelPackedSampleModel; }
template<> constexpr auto signature<::java::awt::image::MultiPixelPackedSampleModel> = ::java_awt_image / "MultiPixelPackedSampleModel";
namespace java::awt::image { class PackedColorModel; }
template<> constexpr auto signature<::java::awt::image::PackedColorModel> = ::java_awt_image / "PackedColorModel";
namespace java::awt::image { class PixelGrabber; }
template<> constexpr auto signature<::java::awt::image::PixelGrabber> = ::java_awt_image / "PixelGrabber";
namespace java::awt::image { class PixelInterleavedSampleModel; }
template<> constexpr auto signature<::java::awt::image::PixelInterleavedSampleModel> = ::java_awt_image / "PixelInterleavedSampleModel";
namespace java::awt::image { class RGBImageFilter; }
template<> constexpr auto signature<::java::awt::image::RGBImageFilter> = ::java_awt_image / "RGBImageFilter";
namespace java::awt::image { class Raster; }
template<> constexpr auto signature<::java::awt::image::Raster> = ::java_awt_image / "Raster";
namespace java::awt::image { class RasterFormatException; }
template<> constexpr auto signature<::java::awt::image::RasterFormatException> = ::java_awt_image / "RasterFormatException";
namespace java::awt::image { class RasterOp; }
template<> constexpr auto signature<::java::awt::image::RasterOp> = ::java_awt_image / "RasterOp";
namespace java::awt::image { class RenderedImage; }
template<> constexpr auto signature<::java::awt::image::RenderedImage> = ::java_awt_image / "RenderedImage";
namespace java::awt::image { class ReplicateScaleFilter; }
template<> constexpr auto signature<::java::awt::image::ReplicateScaleFilter> = ::java_awt_image / "ReplicateScaleFilter";
namespace java::awt::image { class RescaleOp; }
template<> constexpr auto signature<::java::awt::image::RescaleOp> = ::java_awt_image / "RescaleOp";
namespace java::awt::image { class SampleModel; }
template<> constexpr auto signature<::java::awt::image::SampleModel> = ::java_awt_image / "SampleModel";
namespace java::awt::image { class ShortLookupTable; }
template<> constexpr auto signature<::java::awt::image::ShortLookupTable> = ::java_awt_image / "ShortLookupTable";
namespace java::awt::image { class SinglePixelPackedSampleModel; }
template<> constexpr auto signature<::java::awt::image::SinglePixelPackedSampleModel> = ::java_awt_image / "SinglePixelPackedSampleModel";
namespace java::awt::image { class TileObserver; }
template<> constexpr auto signature<::java::awt::image::TileObserver> = ::java_awt_image / "TileObserver";
namespace java::awt::image { class VolatileImage; }
template<> constexpr auto signature<::java::awt::image::VolatileImage> = ::java_awt_image / "VolatileImage";
namespace java::awt::image { class WritableRaster; }
template<> constexpr auto signature<::java::awt::image::WritableRaster> = ::java_awt_image / "WritableRaster";
namespace java::awt::image { class WritableRenderedImage; }
template<> constexpr auto signature<::java::awt::image::WritableRenderedImage> = ::java_awt_image / "WritableRenderedImage";
namespace java::awt::image::renderable { class ContextualRenderedImageFactory; }
template<> constexpr auto signature<::java::awt::image::renderable::ContextualRenderedImageFactory> = ::java_awt_image_renderable / "ContextualRenderedImageFactory";
namespace java::awt::image::renderable { class ParameterBlock; }
template<> constexpr auto signature<::java::awt::image::renderable::ParameterBlock> = ::java_awt_image_renderable / "ParameterBlock";
namespace java::awt::image::renderable { class RenderContext; }
template<> constexpr auto signature<::java::awt::image::renderable::RenderContext> = ::java_awt_image_renderable / "RenderContext";
namespace java::awt::image::renderable { class RenderableImage; }
template<> constexpr auto signature<::java::awt::image::renderable::RenderableImage> = ::java_awt_image_renderable / "RenderableImage";
namespace java::awt::image::renderable { class RenderableImageOp; }
template<> constexpr auto signature<::java::awt::image::renderable::RenderableImageOp> = ::java_awt_image_renderable / "RenderableImageOp";
namespace java::awt::image::renderable { class RenderableImageProducer; }
template<> constexpr auto signature<::java::awt::image::renderable::RenderableImageProducer> = ::java_awt_image_renderable / "RenderableImageProducer";
namespace java::awt::image::renderable { class RenderedImageFactory; }
template<> constexpr auto signature<::java::awt::image::renderable::RenderedImageFactory> = ::java_awt_image_renderable / "RenderedImageFactory";
namespace java::awt::peer { class ButtonPeer; }
template<> constexpr auto signature<::java::awt::peer::ButtonPeer> = ::java_awt_peer / "ButtonPeer";
namespace java::awt::peer { class CanvasPeer; }
template<> constexpr auto signature<::java::awt::peer::CanvasPeer> = ::java_awt_peer / "CanvasPeer";
namespace java::awt::peer { class CheckboxMenuItemPeer; }
template<> constexpr auto signature<::java::awt::peer::CheckboxMenuItemPeer> = ::java_awt_peer / "CheckboxMenuItemPeer";
namespace java::awt::peer { class CheckboxPeer; }
template<> constexpr auto signature<::java::awt::peer::CheckboxPeer> = ::java_awt_peer / "CheckboxPeer";
namespace java::awt::peer { class ChoicePeer; }
template<> constexpr auto signature<::java::awt::peer::ChoicePeer> = ::java_awt_peer / "ChoicePeer";
namespace java::awt::peer { class ComponentPeer; }
template<> constexpr auto signature<::java::awt::peer::ComponentPeer> = ::java_awt_peer / "ComponentPeer";
namespace java::awt::peer { class ContainerPeer; }
template<> constexpr auto signature<::java::awt::peer::ContainerPeer> = ::java_awt_peer / "ContainerPeer";
namespace java::awt::peer { class DesktopPeer; }
template<> constexpr auto signature<::java::awt::peer::DesktopPeer> = ::java_awt_peer / "DesktopPeer";
namespace java::awt::peer { class DialogPeer; }
template<> constexpr auto signature<::java::awt::peer::DialogPeer> = ::java_awt_peer / "DialogPeer";
namespace java::awt::peer { class FileDialogPeer; }
template<> constexpr auto signature<::java::awt::peer::FileDialogPeer> = ::java_awt_peer / "FileDialogPeer";
namespace java::awt::peer { class FontPeer; }
template<> constexpr auto signature<::java::awt::peer::FontPeer> = ::java_awt_peer / "FontPeer";
namespace java::awt::peer { class FramePeer; }
template<> constexpr auto signature<::java::awt::peer::FramePeer> = ::java_awt_peer / "FramePeer";
namespace java::awt::peer { class KeyboardFocusManagerPeer; }
template<> constexpr auto signature<::java::awt::peer::KeyboardFocusManagerPeer> = ::java_awt_peer / "KeyboardFocusManagerPeer";
namespace java::awt::peer { class LabelPeer; }
template<> constexpr auto signature<::java::awt::peer::LabelPeer> = ::java_awt_peer / "LabelPeer";
namespace java::awt::peer { class LightweightPeer; }
template<> constexpr auto signature<::java::awt::peer::LightweightPeer> = ::java_awt_peer / "LightweightPeer";
namespace java::awt::peer { class ListPeer; }
template<> constexpr auto signature<::java::awt::peer::ListPeer> = ::java_awt_peer / "ListPeer";
namespace java::awt::peer { class MenuBarPeer; }
template<> constexpr auto signature<::java::awt::peer::MenuBarPeer> = ::java_awt_peer / "MenuBarPeer";
namespace java::awt::peer { class MenuComponentPeer; }
template<> constexpr auto signature<::java::awt::peer::MenuComponentPeer> = ::java_awt_peer / "MenuComponentPeer";
namespace java::awt::peer { class MenuItemPeer; }
template<> constexpr auto signature<::java::awt::peer::MenuItemPeer> = ::java_awt_peer / "MenuItemPeer";
namespace java::awt::peer { class MenuPeer; }
template<> constexpr auto signature<::java::awt::peer::MenuPeer> = ::java_awt_peer / "MenuPeer";
namespace java::awt::peer { class MouseInfoPeer; }
template<> constexpr auto signature<::java::awt::peer::MouseInfoPeer> = ::java_awt_peer / "MouseInfoPeer";
namespace java::awt::peer { class PanelPeer; }
template<> constexpr auto signature<::java::awt::peer::PanelPeer> = ::java_awt_peer / "PanelPeer";
namespace java::awt::peer { class PopupMenuPeer; }
template<> constexpr auto signature<::java::awt::peer::PopupMenuPeer> = ::java_awt_peer / "PopupMenuPeer";
namespace java::awt::peer { class RobotPeer; }
template<> constexpr auto signature<::java::awt::peer::RobotPeer> = ::java_awt_peer / "RobotPeer";
namespace java::awt::peer { class ScrollPanePeer; }
template<> constexpr auto signature<::java::awt::peer::ScrollPanePeer> = ::java_awt_peer / "ScrollPanePeer";
namespace java::awt::peer { class ScrollbarPeer; }
template<> constexpr auto signature<::java::awt::peer::ScrollbarPeer> = ::java_awt_peer / "ScrollbarPeer";
namespace java::awt::peer { class SystemTrayPeer; }
template<> constexpr auto signature<::java::awt::peer::SystemTrayPeer> = ::java_awt_peer / "SystemTrayPeer";
namespace java::awt::peer { class TextAreaPeer; }
template<> constexpr auto signature<::java::awt::peer::TextAreaPeer> = ::java_awt_peer / "TextAreaPeer";
namespace java::awt::peer { class TextComponentPeer; }
template<> constexpr auto signature<::java::awt::peer::TextComponentPeer> = ::java_awt_peer / "TextComponentPeer";
namespace java::awt::peer { class TextFieldPeer; }
template<> constexpr auto signature<::java::awt::peer::TextFieldPeer> = ::java_awt_peer / "TextFieldPeer";
namespace java::awt::peer { class TrayIconPeer; }
template<> constexpr auto signature<::java::awt::peer::TrayIconPeer> = ::java_awt_peer / "TrayIconPeer";
namespace java::awt::peer { class WindowPeer; }
template<> constexpr auto signature<::java::awt::peer::WindowPeer> = ::java_awt_peer / "WindowPeer";
namespace java::awt::print { class Book; }
template<> constexpr auto signature<::java::awt::print::Book> = ::java_awt_print / "Book";
namespace java::awt::print { class Book$BookPage; }
template<> constexpr auto signature<::java::awt::print::Book$BookPage> = ::java_awt_print / "Book$BookPage";
namespace java::awt::print { class PageFormat; }
template<> constexpr auto signature<::java::awt::print::PageFormat> = ::java_awt_print / "PageFormat";
namespace java::awt::print { class Pageable; }
template<> constexpr auto signature<::java::awt::print::Pageable> = ::java_awt_print / "Pageable";
namespace java::awt::print { class Paper; }
template<> constexpr auto signature<::java::awt::print::Paper> = ::java_awt_print / "Paper";
namespace java::awt::print { class Printable; }
template<> constexpr auto signature<::java::awt::print::Printable> = ::java_awt_print / "Printable";
namespace java::awt::print { class PrinterAbortException; }
template<> constexpr auto signature<::java::awt::print::PrinterAbortException> = ::java_awt_print / "PrinterAbortException";
namespace java::awt::print { class PrinterException; }
template<> constexpr auto signature<::java::awt::print::PrinterException> = ::java_awt_print / "PrinterException";
namespace java::awt::print { class PrinterGraphics; }
template<> constexpr auto signature<::java::awt::print::PrinterGraphics> = ::java_awt_print / "PrinterGraphics";
namespace java::awt::print { class PrinterIOException; }
template<> constexpr auto signature<::java::awt::print::PrinterIOException> = ::java_awt_print / "PrinterIOException";
namespace java::awt::print { class PrinterJob; }
template<> constexpr auto signature<::java::awt::print::PrinterJob> = ::java_awt_print / "PrinterJob";
namespace java::awt::print { class PrinterJob$1; }
template<> constexpr auto signature<::java::awt::print::PrinterJob$1> = ::java_awt_print / "PrinterJob$1";
namespace java::beans { class AppletInitializer; }
template<> constexpr auto signature<::java::beans::AppletInitializer> = ::java_beans / "AppletInitializer";
namespace java::beans { class BeanDescriptor; }
template<> constexpr auto signature<::java::beans::BeanDescriptor> = ::java_beans / "BeanDescriptor";
namespace java::beans { class BeanInfo; }
template<> constexpr auto signature<::java::beans::BeanInfo> = ::java_beans / "BeanInfo";
namespace java::beans { class Beans; }
template<> constexpr auto signature<::java::beans::Beans> = ::java_beans / "Beans";
namespace java::beans { class BeansAppletContext; }
template<> constexpr auto signature<::java::beans::BeansAppletContext> = ::java_beans / "BeansAppletContext";
namespace java::beans { class BeansAppletStub; }
template<> constexpr auto signature<::java::beans::BeansAppletStub> = ::java_beans / "BeansAppletStub";
namespace java::beans { class ChangeListenerMap; }
template<> constexpr auto signature<::java::beans::ChangeListenerMap> = ::java_beans / "ChangeListenerMap";
namespace java::beans { class ConstructorProperties; }
template<> constexpr auto signature<::java::beans::ConstructorProperties> = ::java_beans / "ConstructorProperties";
namespace java::beans { class Customizer; }
template<> constexpr auto signature<::java::beans::Customizer> = ::java_beans / "Customizer";
namespace java::beans { class DefaultPersistenceDelegate; }
template<> constexpr auto signature<::java::beans::DefaultPersistenceDelegate> = ::java_beans / "DefaultPersistenceDelegate";
namespace java::beans { class DesignMode; }
template<> constexpr auto signature<::java::beans::DesignMode> = ::java_beans / "DesignMode";
namespace java::beans { class Encoder; }
template<> constexpr auto signature<::java::beans::Encoder> = ::java_beans / "Encoder";
namespace java::beans { class EventHandler; }
template<> constexpr auto signature<::java::beans::EventHandler> = ::java_beans / "EventHandler";
namespace java::beans { class EventHandler$1; }
template<> constexpr auto signature<::java::beans::EventHandler$1> = ::java_beans / "EventHandler$1";
namespace java::beans { class EventHandler$2; }
template<> constexpr auto signature<::java::beans::EventHandler$2> = ::java_beans / "EventHandler$2";
namespace java::beans { class EventSetDescriptor; }
template<> constexpr auto signature<::java::beans::EventSetDescriptor> = ::java_beans / "EventSetDescriptor";
namespace java::beans { class ExceptionListener; }
template<> constexpr auto signature<::java::beans::ExceptionListener> = ::java_beans / "ExceptionListener";
namespace java::beans { class Expression; }
template<> constexpr auto signature<::java::beans::Expression> = ::java_beans / "Expression";
namespace java::beans { class FeatureDescriptor; }
template<> constexpr auto signature<::java::beans::FeatureDescriptor> = ::java_beans / "FeatureDescriptor";
namespace java::beans { class GenericBeanInfo; }
template<> constexpr auto signature<::java::beans::GenericBeanInfo> = ::java_beans / "GenericBeanInfo";
namespace java::beans { class IndexedPropertyChangeEvent; }
template<> constexpr auto signature<::java::beans::IndexedPropertyChangeEvent> = ::java_beans / "IndexedPropertyChangeEvent";
namespace java::beans { class IndexedPropertyDescriptor; }
template<> constexpr auto signature<::java::beans::IndexedPropertyDescriptor> = ::java_beans / "IndexedPropertyDescriptor";
namespace java::beans { class IntrospectionException; }
template<> constexpr auto signature<::java::beans::IntrospectionException> = ::java_beans / "IntrospectionException";
namespace java::beans { class Introspector; }
template<> constexpr auto signature<::java::beans::Introspector> = ::java_beans / "Introspector";
namespace java::beans { class MetaData; }
template<> constexpr auto signature<::java::beans::MetaData> = ::java_beans / "MetaData";
namespace java::beans { class MetaData$1; }
template<> constexpr auto signature<::java::beans::MetaData$1> = ::java_beans / "MetaData$1";
namespace java::beans { class MetaData$ArrayPersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$ArrayPersistenceDelegate> = ::java_beans / "MetaData$ArrayPersistenceDelegate";
namespace java::beans { class MetaData$EnumPersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$EnumPersistenceDelegate> = ::java_beans / "MetaData$EnumPersistenceDelegate";
namespace java::beans { class MetaData$NullPersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$NullPersistenceDelegate> = ::java_beans / "MetaData$NullPersistenceDelegate";
namespace java::beans { class MetaData$PrimitivePersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$PrimitivePersistenceDelegate> = ::java_beans / "MetaData$PrimitivePersistenceDelegate";
namespace java::beans { class MetaData$ProxyPersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$ProxyPersistenceDelegate> = ::java_beans / "MetaData$ProxyPersistenceDelegate";
namespace java::beans { class MetaData$StaticFieldsPersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$StaticFieldsPersistenceDelegate> = ::java_beans / "MetaData$StaticFieldsPersistenceDelegate";
namespace java::beans { class MetaData$java_awt_AWTKeyStroke_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_awt_AWTKeyStroke_PersistenceDelegate> = ::java_beans / "MetaData$java_awt_AWTKeyStroke_PersistenceDelegate";
namespace java::beans { class MetaData$java_awt_BorderLayout_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_awt_BorderLayout_PersistenceDelegate> = ::java_beans / "MetaData$java_awt_BorderLayout_PersistenceDelegate";
namespace java::beans { class MetaData$java_awt_CardLayout_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_awt_CardLayout_PersistenceDelegate> = ::java_beans / "MetaData$java_awt_CardLayout_PersistenceDelegate";
namespace java::beans { class MetaData$java_awt_Choice_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_awt_Choice_PersistenceDelegate> = ::java_beans / "MetaData$java_awt_Choice_PersistenceDelegate";
namespace java::beans { class MetaData$java_awt_Component_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_awt_Component_PersistenceDelegate> = ::java_beans / "MetaData$java_awt_Component_PersistenceDelegate";
namespace java::beans { class MetaData$java_awt_Container_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_awt_Container_PersistenceDelegate> = ::java_beans / "MetaData$java_awt_Container_PersistenceDelegate";
namespace java::beans { class MetaData$java_awt_Font_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_awt_Font_PersistenceDelegate> = ::java_beans / "MetaData$java_awt_Font_PersistenceDelegate";
namespace java::beans { class MetaData$java_awt_GridBagLayout_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_awt_GridBagLayout_PersistenceDelegate> = ::java_beans / "MetaData$java_awt_GridBagLayout_PersistenceDelegate";
namespace java::beans { class MetaData$java_awt_Insets_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_awt_Insets_PersistenceDelegate> = ::java_beans / "MetaData$java_awt_Insets_PersistenceDelegate";
namespace java::beans { class MetaData$java_awt_List_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_awt_List_PersistenceDelegate> = ::java_beans / "MetaData$java_awt_List_PersistenceDelegate";
namespace java::beans { class MetaData$java_awt_MenuBar_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_awt_MenuBar_PersistenceDelegate> = ::java_beans / "MetaData$java_awt_MenuBar_PersistenceDelegate";
namespace java::beans { class MetaData$java_awt_MenuShortcut_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_awt_MenuShortcut_PersistenceDelegate> = ::java_beans / "MetaData$java_awt_MenuShortcut_PersistenceDelegate";
namespace java::beans { class MetaData$java_awt_Menu_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_awt_Menu_PersistenceDelegate> = ::java_beans / "MetaData$java_awt_Menu_PersistenceDelegate";
namespace java::beans { class MetaData$java_awt_SystemColor_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_awt_SystemColor_PersistenceDelegate> = ::java_beans / "MetaData$java_awt_SystemColor_PersistenceDelegate";
namespace java::beans { class MetaData$java_awt_font_TextAttribute_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_awt_font_TextAttribute_PersistenceDelegate> = ::java_beans / "MetaData$java_awt_font_TextAttribute_PersistenceDelegate";
namespace java::beans { class MetaData$java_beans_beancontext_BeanContextSupport_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_beans_beancontext_BeanContextSupport_PersistenceDelegate> = ::java_beans / "MetaData$java_beans_beancontext_BeanContextSupport_PersistenceDelegate";
namespace java::beans { class MetaData$java_lang_Class_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_lang_Class_PersistenceDelegate> = ::java_beans / "MetaData$java_lang_Class_PersistenceDelegate";
namespace java::beans { class MetaData$java_lang_String_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_lang_String_PersistenceDelegate> = ::java_beans / "MetaData$java_lang_String_PersistenceDelegate";
namespace java::beans { class MetaData$java_lang_reflect_Field_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_lang_reflect_Field_PersistenceDelegate> = ::java_beans / "MetaData$java_lang_reflect_Field_PersistenceDelegate";
namespace java::beans { class MetaData$java_lang_reflect_Method_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_lang_reflect_Method_PersistenceDelegate> = ::java_beans / "MetaData$java_lang_reflect_Method_PersistenceDelegate";
namespace java::beans { class MetaData$java_sql_Timestamp_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_sql_Timestamp_PersistenceDelegate> = ::java_beans / "MetaData$java_sql_Timestamp_PersistenceDelegate";
namespace java::beans { class MetaData$java_util_AbstractCollection_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_util_AbstractCollection_PersistenceDelegate> = ::java_beans / "MetaData$java_util_AbstractCollection_PersistenceDelegate";
namespace java::beans { class MetaData$java_util_AbstractList_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_util_AbstractList_PersistenceDelegate> = ::java_beans / "MetaData$java_util_AbstractList_PersistenceDelegate";
namespace java::beans { class MetaData$java_util_AbstractMap_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_util_AbstractMap_PersistenceDelegate> = ::java_beans / "MetaData$java_util_AbstractMap_PersistenceDelegate";
namespace java::beans { class MetaData$java_util_Collection_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_util_Collection_PersistenceDelegate> = ::java_beans / "MetaData$java_util_Collection_PersistenceDelegate";
namespace java::beans { class MetaData$java_util_Collections; }
template<> constexpr auto signature<::java::beans::MetaData$java_util_Collections> = ::java_beans / "MetaData$java_util_Collections";
namespace java::beans { class MetaData$java_util_Collections$CheckedCollection_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_util_Collections$CheckedCollection_PersistenceDelegate> = ::java_beans / "MetaData$java_util_Collections$CheckedCollection_PersistenceDelegate";
namespace java::beans { class MetaData$java_util_Collections$CheckedList_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_util_Collections$CheckedList_PersistenceDelegate> = ::java_beans / "MetaData$java_util_Collections$CheckedList_PersistenceDelegate";
namespace java::beans { class MetaData$java_util_Collections$CheckedMap_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_util_Collections$CheckedMap_PersistenceDelegate> = ::java_beans / "MetaData$java_util_Collections$CheckedMap_PersistenceDelegate";
namespace java::beans { class MetaData$java_util_Collections$CheckedRandomAccessList_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_util_Collections$CheckedRandomAccessList_PersistenceDelegate> = ::java_beans / "MetaData$java_util_Collections$CheckedRandomAccessList_PersistenceDelegate";
namespace java::beans { class MetaData$java_util_Collections$CheckedSet_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_util_Collections$CheckedSet_PersistenceDelegate> = ::java_beans / "MetaData$java_util_Collections$CheckedSet_PersistenceDelegate";
namespace java::beans { class MetaData$java_util_Collections$CheckedSortedMap_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_util_Collections$CheckedSortedMap_PersistenceDelegate> = ::java_beans / "MetaData$java_util_Collections$CheckedSortedMap_PersistenceDelegate";
namespace java::beans { class MetaData$java_util_Collections$CheckedSortedSet_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_util_Collections$CheckedSortedSet_PersistenceDelegate> = ::java_beans / "MetaData$java_util_Collections$CheckedSortedSet_PersistenceDelegate";
namespace java::beans { class MetaData$java_util_Collections$EmptyList_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_util_Collections$EmptyList_PersistenceDelegate> = ::java_beans / "MetaData$java_util_Collections$EmptyList_PersistenceDelegate";
namespace java::beans { class MetaData$java_util_Collections$EmptyMap_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_util_Collections$EmptyMap_PersistenceDelegate> = ::java_beans / "MetaData$java_util_Collections$EmptyMap_PersistenceDelegate";
namespace java::beans { class MetaData$java_util_Collections$EmptySet_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_util_Collections$EmptySet_PersistenceDelegate> = ::java_beans / "MetaData$java_util_Collections$EmptySet_PersistenceDelegate";
namespace java::beans { class MetaData$java_util_Collections$SingletonList_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_util_Collections$SingletonList_PersistenceDelegate> = ::java_beans / "MetaData$java_util_Collections$SingletonList_PersistenceDelegate";
namespace java::beans { class MetaData$java_util_Collections$SingletonMap_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_util_Collections$SingletonMap_PersistenceDelegate> = ::java_beans / "MetaData$java_util_Collections$SingletonMap_PersistenceDelegate";
namespace java::beans { class MetaData$java_util_Collections$SingletonSet_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_util_Collections$SingletonSet_PersistenceDelegate> = ::java_beans / "MetaData$java_util_Collections$SingletonSet_PersistenceDelegate";
namespace java::beans { class MetaData$java_util_Collections$SynchronizedCollection_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_util_Collections$SynchronizedCollection_PersistenceDelegate> = ::java_beans / "MetaData$java_util_Collections$SynchronizedCollection_PersistenceDelegate";
namespace java::beans { class MetaData$java_util_Collections$SynchronizedList_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_util_Collections$SynchronizedList_PersistenceDelegate> = ::java_beans / "MetaData$java_util_Collections$SynchronizedList_PersistenceDelegate";
namespace java::beans { class MetaData$java_util_Collections$SynchronizedMap_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_util_Collections$SynchronizedMap_PersistenceDelegate> = ::java_beans / "MetaData$java_util_Collections$SynchronizedMap_PersistenceDelegate";
namespace java::beans { class MetaData$java_util_Collections$SynchronizedRandomAccessList_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_util_Collections$SynchronizedRandomAccessList_PersistenceDelegate> = ::java_beans / "MetaData$java_util_Collections$SynchronizedRandomAccessList_PersistenceDelegate";
namespace java::beans { class MetaData$java_util_Collections$SynchronizedSet_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_util_Collections$SynchronizedSet_PersistenceDelegate> = ::java_beans / "MetaData$java_util_Collections$SynchronizedSet_PersistenceDelegate";
namespace java::beans { class MetaData$java_util_Collections$SynchronizedSortedMap_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_util_Collections$SynchronizedSortedMap_PersistenceDelegate> = ::java_beans / "MetaData$java_util_Collections$SynchronizedSortedMap_PersistenceDelegate";
namespace java::beans { class MetaData$java_util_Collections$SynchronizedSortedSet_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_util_Collections$SynchronizedSortedSet_PersistenceDelegate> = ::java_beans / "MetaData$java_util_Collections$SynchronizedSortedSet_PersistenceDelegate";
namespace java::beans { class MetaData$java_util_Collections$UnmodifiableCollection_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_util_Collections$UnmodifiableCollection_PersistenceDelegate> = ::java_beans / "MetaData$java_util_Collections$UnmodifiableCollection_PersistenceDelegate";
namespace java::beans { class MetaData$java_util_Collections$UnmodifiableList_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_util_Collections$UnmodifiableList_PersistenceDelegate> = ::java_beans / "MetaData$java_util_Collections$UnmodifiableList_PersistenceDelegate";
namespace java::beans { class MetaData$java_util_Collections$UnmodifiableMap_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_util_Collections$UnmodifiableMap_PersistenceDelegate> = ::java_beans / "MetaData$java_util_Collections$UnmodifiableMap_PersistenceDelegate";
namespace java::beans { class MetaData$java_util_Collections$UnmodifiableRandomAccessList_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_util_Collections$UnmodifiableRandomAccessList_PersistenceDelegate> = ::java_beans / "MetaData$java_util_Collections$UnmodifiableRandomAccessList_PersistenceDelegate";
namespace java::beans { class MetaData$java_util_Collections$UnmodifiableSet_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_util_Collections$UnmodifiableSet_PersistenceDelegate> = ::java_beans / "MetaData$java_util_Collections$UnmodifiableSet_PersistenceDelegate";
namespace java::beans { class MetaData$java_util_Collections$UnmodifiableSortedMap_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_util_Collections$UnmodifiableSortedMap_PersistenceDelegate> = ::java_beans / "MetaData$java_util_Collections$UnmodifiableSortedMap_PersistenceDelegate";
namespace java::beans { class MetaData$java_util_Collections$UnmodifiableSortedSet_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_util_Collections$UnmodifiableSortedSet_PersistenceDelegate> = ::java_beans / "MetaData$java_util_Collections$UnmodifiableSortedSet_PersistenceDelegate";
namespace java::beans { class MetaData$java_util_Date_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_util_Date_PersistenceDelegate> = ::java_beans / "MetaData$java_util_Date_PersistenceDelegate";
namespace java::beans { class MetaData$java_util_EnumMap_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_util_EnumMap_PersistenceDelegate> = ::java_beans / "MetaData$java_util_EnumMap_PersistenceDelegate";
namespace java::beans { class MetaData$java_util_EnumSet_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_util_EnumSet_PersistenceDelegate> = ::java_beans / "MetaData$java_util_EnumSet_PersistenceDelegate";
namespace java::beans { class MetaData$java_util_Hashtable_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_util_Hashtable_PersistenceDelegate> = ::java_beans / "MetaData$java_util_Hashtable_PersistenceDelegate";
namespace java::beans { class MetaData$java_util_List_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_util_List_PersistenceDelegate> = ::java_beans / "MetaData$java_util_List_PersistenceDelegate";
namespace java::beans { class MetaData$java_util_Map_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$java_util_Map_PersistenceDelegate> = ::java_beans / "MetaData$java_util_Map_PersistenceDelegate";
namespace java::beans { class MetaData$javax_swing_Box_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$javax_swing_Box_PersistenceDelegate> = ::java_beans / "MetaData$javax_swing_Box_PersistenceDelegate";
namespace java::beans { class MetaData$javax_swing_DefaultComboBoxModel_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$javax_swing_DefaultComboBoxModel_PersistenceDelegate> = ::java_beans / "MetaData$javax_swing_DefaultComboBoxModel_PersistenceDelegate";
namespace java::beans { class MetaData$javax_swing_DefaultListModel_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$javax_swing_DefaultListModel_PersistenceDelegate> = ::java_beans / "MetaData$javax_swing_DefaultListModel_PersistenceDelegate";
namespace java::beans { class MetaData$javax_swing_JFrame_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$javax_swing_JFrame_PersistenceDelegate> = ::java_beans / "MetaData$javax_swing_JFrame_PersistenceDelegate";
namespace java::beans { class MetaData$javax_swing_JMenu_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$javax_swing_JMenu_PersistenceDelegate> = ::java_beans / "MetaData$javax_swing_JMenu_PersistenceDelegate";
namespace java::beans { class MetaData$javax_swing_JTabbedPane_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$javax_swing_JTabbedPane_PersistenceDelegate> = ::java_beans / "MetaData$javax_swing_JTabbedPane_PersistenceDelegate";
namespace java::beans { class MetaData$javax_swing_ToolTipManager_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$javax_swing_ToolTipManager_PersistenceDelegate> = ::java_beans / "MetaData$javax_swing_ToolTipManager_PersistenceDelegate";
namespace java::beans { class MetaData$javax_swing_border_MatteBorder_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$javax_swing_border_MatteBorder_PersistenceDelegate> = ::java_beans / "MetaData$javax_swing_border_MatteBorder_PersistenceDelegate";
namespace java::beans { class MetaData$javax_swing_tree_DefaultMutableTreeNode_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$javax_swing_tree_DefaultMutableTreeNode_PersistenceDelegate> = ::java_beans / "MetaData$javax_swing_tree_DefaultMutableTreeNode_PersistenceDelegate";
namespace java::beans { class MetaData$sun_swing_PrintColorUIResource_PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::MetaData$sun_swing_PrintColorUIResource_PersistenceDelegate> = ::java_beans / "MetaData$sun_swing_PrintColorUIResource_PersistenceDelegate";
namespace java::beans { class MethodDescriptor; }
template<> constexpr auto signature<::java::beans::MethodDescriptor> = ::java_beans / "MethodDescriptor";
namespace java::beans { class MethodRef; }
template<> constexpr auto signature<::java::beans::MethodRef> = ::java_beans / "MethodRef";
namespace java::beans { class NameGenerator; }
template<> constexpr auto signature<::java::beans::NameGenerator> = ::java_beans / "NameGenerator";
namespace java::beans { class ObjectInputStreamWithLoader; }
template<> constexpr auto signature<::java::beans::ObjectInputStreamWithLoader> = ::java_beans / "ObjectInputStreamWithLoader";
namespace java::beans { class ParameterDescriptor; }
template<> constexpr auto signature<::java::beans::ParameterDescriptor> = ::java_beans / "ParameterDescriptor";
namespace java::beans { class PersistenceDelegate; }
template<> constexpr auto signature<::java::beans::PersistenceDelegate> = ::java_beans / "PersistenceDelegate";
namespace java::beans { class PropertyChangeEvent; }
template<> constexpr auto signature<::java::beans::PropertyChangeEvent> = ::java_beans / "PropertyChangeEvent";
namespace java::beans { class PropertyChangeListener; }
template<> constexpr auto signature<::java::beans::PropertyChangeListener> = ::java_beans / "PropertyChangeListener";
namespace java::beans { class PropertyChangeListenerProxy; }
template<> constexpr auto signature<::java::beans::PropertyChangeListenerProxy> = ::java_beans / "PropertyChangeListenerProxy";
namespace java::beans { class PropertyChangeSupport; }
template<> constexpr auto signature<::java::beans::PropertyChangeSupport> = ::java_beans / "PropertyChangeSupport";
namespace java::beans { class PropertyChangeSupport$1; }
template<> constexpr auto signature<::java::beans::PropertyChangeSupport$1> = ::java_beans / "PropertyChangeSupport$1";
namespace java::beans { class PropertyChangeSupport$PropertyChangeListenerMap; }
template<> constexpr auto signature<::java::beans::PropertyChangeSupport$PropertyChangeListenerMap> = ::java_beans / "PropertyChangeSupport$PropertyChangeListenerMap";
namespace java::beans { class PropertyDescriptor; }
template<> constexpr auto signature<::java::beans::PropertyDescriptor> = ::java_beans / "PropertyDescriptor";
namespace java::beans { class PropertyEditor; }
template<> constexpr auto signature<::java::beans::PropertyEditor> = ::java_beans / "PropertyEditor";
namespace java::beans { class PropertyEditorManager; }
template<> constexpr auto signature<::java::beans::PropertyEditorManager> = ::java_beans / "PropertyEditorManager";
namespace java::beans { class PropertyEditorSupport; }
template<> constexpr auto signature<::java::beans::PropertyEditorSupport> = ::java_beans / "PropertyEditorSupport";
namespace java::beans { class PropertyVetoException; }
template<> constexpr auto signature<::java::beans::PropertyVetoException> = ::java_beans / "PropertyVetoException";
namespace java::beans { class SimpleBeanInfo; }
template<> constexpr auto signature<::java::beans::SimpleBeanInfo> = ::java_beans / "SimpleBeanInfo";
namespace java::beans { class Statement; }
template<> constexpr auto signature<::java::beans::Statement> = ::java_beans / "Statement";
namespace java::beans { class Statement$1; }
template<> constexpr auto signature<::java::beans::Statement$1> = ::java_beans / "Statement$1";
namespace java::beans { class Statement$2; }
template<> constexpr auto signature<::java::beans::Statement$2> = ::java_beans / "Statement$2";
namespace java::beans { class ThreadGroupContext; }
template<> constexpr auto signature<::java::beans::ThreadGroupContext> = ::java_beans / "ThreadGroupContext";
namespace java::beans { class ThreadGroupContext$1; }
template<> constexpr auto signature<::java::beans::ThreadGroupContext$1> = ::java_beans / "ThreadGroupContext$1";
namespace java::beans { class Transient; }
template<> constexpr auto signature<::java::beans::Transient> = ::java_beans / "Transient";
namespace java::beans { class VetoableChangeListener; }
template<> constexpr auto signature<::java::beans::VetoableChangeListener> = ::java_beans / "VetoableChangeListener";
namespace java::beans { class VetoableChangeListenerProxy; }
template<> constexpr auto signature<::java::beans::VetoableChangeListenerProxy> = ::java_beans / "VetoableChangeListenerProxy";
namespace java::beans { class VetoableChangeSupport; }
template<> constexpr auto signature<::java::beans::VetoableChangeSupport> = ::java_beans / "VetoableChangeSupport";
namespace java::beans { class VetoableChangeSupport$1; }
template<> constexpr auto signature<::java::beans::VetoableChangeSupport$1> = ::java_beans / "VetoableChangeSupport$1";
namespace java::beans { class VetoableChangeSupport$VetoableChangeListenerMap; }
template<> constexpr auto signature<::java::beans::VetoableChangeSupport$VetoableChangeListenerMap> = ::java_beans / "VetoableChangeSupport$VetoableChangeListenerMap";
namespace java::beans { class Visibility; }
template<> constexpr auto signature<::java::beans::Visibility> = ::java_beans / "Visibility";
namespace java::beans { class WeakIdentityMap; }
template<> constexpr auto signature<::java::beans::WeakIdentityMap> = ::java_beans / "WeakIdentityMap";
namespace java::beans { class WeakIdentityMap$Entry; }
template<> constexpr auto signature<::java::beans::WeakIdentityMap$Entry> = ::java_beans / "WeakIdentityMap$Entry";
namespace java::beans { class XMLDecoder; }
template<> constexpr auto signature<::java::beans::XMLDecoder> = ::java_beans / "XMLDecoder";
namespace java::beans { class XMLDecoder$1; }
template<> constexpr auto signature<::java::beans::XMLDecoder$1> = ::java_beans / "XMLDecoder$1";
namespace java::beans { class XMLEncoder; }
template<> constexpr auto signature<::java::beans::XMLEncoder> = ::java_beans / "XMLEncoder";
namespace java::beans { class XMLEncoder$1; }
template<> constexpr auto signature<::java::beans::XMLEncoder$1> = ::java_beans / "XMLEncoder$1";
namespace java::beans { class XMLEncoder$ValueData; }
template<> constexpr auto signature<::java::beans::XMLEncoder$ValueData> = ::java_beans / "XMLEncoder$ValueData";
namespace java::beans::beancontext { class BeanContext; }
template<> constexpr auto signature<::java::beans::beancontext::BeanContext> = ::java_beans_beancontext / "BeanContext";
namespace java::beans::beancontext { class BeanContextChild; }
template<> constexpr auto signature<::java::beans::beancontext::BeanContextChild> = ::java_beans_beancontext / "BeanContextChild";
namespace java::beans::beancontext { class BeanContextChildComponentProxy; }
template<> constexpr auto signature<::java::beans::beancontext::BeanContextChildComponentProxy> = ::java_beans_beancontext / "BeanContextChildComponentProxy";
namespace java::beans::beancontext { class BeanContextChildSupport; }
template<> constexpr auto signature<::java::beans::beancontext::BeanContextChildSupport> = ::java_beans_beancontext / "BeanContextChildSupport";
namespace java::beans::beancontext { class BeanContextContainerProxy; }
template<> constexpr auto signature<::java::beans::beancontext::BeanContextContainerProxy> = ::java_beans_beancontext / "BeanContextContainerProxy";
namespace java::beans::beancontext { class BeanContextEvent; }
template<> constexpr auto signature<::java::beans::beancontext::BeanContextEvent> = ::java_beans_beancontext / "BeanContextEvent";
namespace java::beans::beancontext { class BeanContextMembershipEvent; }
template<> constexpr auto signature<::java::beans::beancontext::BeanContextMembershipEvent> = ::java_beans_beancontext / "BeanContextMembershipEvent";
namespace java::beans::beancontext { class BeanContextMembershipListener; }
template<> constexpr auto signature<::java::beans::beancontext::BeanContextMembershipListener> = ::java_beans_beancontext / "BeanContextMembershipListener";
namespace java::beans::beancontext { class BeanContextProxy; }
template<> constexpr auto signature<::java::beans::beancontext::BeanContextProxy> = ::java_beans_beancontext / "BeanContextProxy";
namespace java::beans::beancontext { class BeanContextServiceAvailableEvent; }
template<> constexpr auto signature<::java::beans::beancontext::BeanContextServiceAvailableEvent> = ::java_beans_beancontext / "BeanContextServiceAvailableEvent";
namespace java::beans::beancontext { class BeanContextServiceProvider; }
template<> constexpr auto signature<::java::beans::beancontext::BeanContextServiceProvider> = ::java_beans_beancontext / "BeanContextServiceProvider";
namespace java::beans::beancontext { class BeanContextServiceProviderBeanInfo; }
template<> constexpr auto signature<::java::beans::beancontext::BeanContextServiceProviderBeanInfo> = ::java_beans_beancontext / "BeanContextServiceProviderBeanInfo";
namespace java::beans::beancontext { class BeanContextServiceRevokedEvent; }
template<> constexpr auto signature<::java::beans::beancontext::BeanContextServiceRevokedEvent> = ::java_beans_beancontext / "BeanContextServiceRevokedEvent";
namespace java::beans::beancontext { class BeanContextServiceRevokedListener; }
template<> constexpr auto signature<::java::beans::beancontext::BeanContextServiceRevokedListener> = ::java_beans_beancontext / "BeanContextServiceRevokedListener";
namespace java::beans::beancontext { class BeanContextServices; }
template<> constexpr auto signature<::java::beans::beancontext::BeanContextServices> = ::java_beans_beancontext / "BeanContextServices";
namespace java::beans::beancontext { class BeanContextServicesListener; }
template<> constexpr auto signature<::java::beans::beancontext::BeanContextServicesListener> = ::java_beans_beancontext / "BeanContextServicesListener";
namespace java::beans::beancontext { class BeanContextServicesSupport; }
template<> constexpr auto signature<::java::beans::beancontext::BeanContextServicesSupport> = ::java_beans_beancontext / "BeanContextServicesSupport";
namespace java::beans::beancontext { class BeanContextServicesSupport$BCSSChild; }
template<> constexpr auto signature<::java::beans::beancontext::BeanContextServicesSupport$BCSSChild> = ::java_beans_beancontext / "BeanContextServicesSupport$BCSSChild";
namespace java::beans::beancontext { class BeanContextServicesSupport$BCSSChild$BCSSCServiceClassRef; }
template<> constexpr auto signature<::java::beans::beancontext::BeanContextServicesSupport$BCSSChild$BCSSCServiceClassRef> = ::java_beans_beancontext / "BeanContextServicesSupport$BCSSChild$BCSSCServiceClassRef";
namespace java::beans::beancontext { class BeanContextServicesSupport$BCSSChild$BCSSCServiceRef; }
template<> constexpr auto signature<::java::beans::beancontext::BeanContextServicesSupport$BCSSChild$BCSSCServiceRef> = ::java_beans_beancontext / "BeanContextServicesSupport$BCSSChild$BCSSCServiceRef";
namespace java::beans::beancontext { class BeanContextServicesSupport$BCSSProxyServiceProvider; }
template<> constexpr auto signature<::java::beans::beancontext::BeanContextServicesSupport$BCSSProxyServiceProvider> = ::java_beans_beancontext / "BeanContextServicesSupport$BCSSProxyServiceProvider";
namespace java::beans::beancontext { class BeanContextServicesSupport$BCSSServiceProvider; }
template<> constexpr auto signature<::java::beans::beancontext::BeanContextServicesSupport$BCSSServiceProvider> = ::java_beans_beancontext / "BeanContextServicesSupport$BCSSServiceProvider";
namespace java::beans::beancontext { class BeanContextSupport; }
template<> constexpr auto signature<::java::beans::beancontext::BeanContextSupport> = ::java_beans_beancontext / "BeanContextSupport";
namespace java::beans::beancontext { class BeanContextSupport$1; }
template<> constexpr auto signature<::java::beans::beancontext::BeanContextSupport$1> = ::java_beans_beancontext / "BeanContextSupport$1";
namespace java::beans::beancontext { class BeanContextSupport$2; }
template<> constexpr auto signature<::java::beans::beancontext::BeanContextSupport$2> = ::java_beans_beancontext / "BeanContextSupport$2";
namespace java::beans::beancontext { class BeanContextSupport$BCSChild; }
template<> constexpr auto signature<::java::beans::beancontext::BeanContextSupport$BCSChild> = ::java_beans_beancontext / "BeanContextSupport$BCSChild";
namespace java::beans::beancontext { class BeanContextSupport$BCSIterator; }
template<> constexpr auto signature<::java::beans::beancontext::BeanContextSupport$BCSIterator> = ::java_beans_beancontext / "BeanContextSupport$BCSIterator";
namespace java::io { class Bits; }
template<> constexpr auto signature<::java::io::Bits> = ::java_io / "Bits";
namespace java::io { class BufferedInputStream; }
template<> constexpr auto signature<::java::io::BufferedInputStream> = ::java_io / "BufferedInputStream";
namespace java::io { class BufferedOutputStream; }
template<> constexpr auto signature<::java::io::BufferedOutputStream> = ::java_io / "BufferedOutputStream";
namespace java::io { class BufferedReader; }
template<> constexpr auto signature<::java::io::BufferedReader> = ::java_io / "BufferedReader";
namespace java::io { class BufferedReader$1; }
template<> constexpr auto signature<::java::io::BufferedReader$1> = ::java_io / "BufferedReader$1";
namespace java::io { class BufferedWriter; }
template<> constexpr auto signature<::java::io::BufferedWriter> = ::java_io / "BufferedWriter";
namespace java::io { class ByteArrayInputStream; }
template<> constexpr auto signature<::java::io::ByteArrayInputStream> = ::java_io / "ByteArrayInputStream";
namespace java::io { class ByteArrayOutputStream; }
template<> constexpr auto signature<::java::io::ByteArrayOutputStream> = ::java_io / "ByteArrayOutputStream";
namespace java::io { class CharArrayReader; }
template<> constexpr auto signature<::java::io::CharArrayReader> = ::java_io / "CharArrayReader";
namespace java::io { class CharArrayWriter; }
template<> constexpr auto signature<::java::io::CharArrayWriter> = ::java_io / "CharArrayWriter";
namespace java::io { class CharConversionException; }
template<> constexpr auto signature<::java::io::CharConversionException> = ::java_io / "CharConversionException";
namespace java::io { class Closeable; }
template<> constexpr auto signature<::java::io::Closeable> = ::java_io / "Closeable";
namespace java::io { class Console; }
template<> constexpr auto signature<::java::io::Console> = ::java_io / "Console";
namespace java::io { class Console$1; }
template<> constexpr auto signature<::java::io::Console$1> = ::java_io / "Console$1";
namespace java::io { class Console$2; }
template<> constexpr auto signature<::java::io::Console$2> = ::java_io / "Console$2";
namespace java::io { class Console$3; }
template<> constexpr auto signature<::java::io::Console$3> = ::java_io / "Console$3";
namespace java::io { class Console$LineReader; }
template<> constexpr auto signature<::java::io::Console$LineReader> = ::java_io / "Console$LineReader";
namespace java::io { class DataInput; }
template<> constexpr auto signature<::java::io::DataInput> = ::java_io / "DataInput";
namespace java::io { class DataInputStream; }
template<> constexpr auto signature<::java::io::DataInputStream> = ::java_io / "DataInputStream";
namespace java::io { class DataOutput; }
template<> constexpr auto signature<::java::io::DataOutput> = ::java_io / "DataOutput";
namespace java::io { class DataOutputStream; }
template<> constexpr auto signature<::java::io::DataOutputStream> = ::java_io / "DataOutputStream";
namespace java::io { class DefaultFileSystem; }
template<> constexpr auto signature<::java::io::DefaultFileSystem> = ::java_io / "DefaultFileSystem";
namespace java::io { class DeleteOnExitHook; }
template<> constexpr auto signature<::java::io::DeleteOnExitHook> = ::java_io / "DeleteOnExitHook";
namespace java::io { class DeleteOnExitHook$1; }
template<> constexpr auto signature<::java::io::DeleteOnExitHook$1> = ::java_io / "DeleteOnExitHook$1";
namespace java::io { class EOFException; }
template<> constexpr auto signature<::java::io::EOFException> = ::java_io / "EOFException";
namespace java::io { class ExpiringCache; }
template<> constexpr auto signature<::java::io::ExpiringCache> = ::java_io / "ExpiringCache";
namespace java::io { class ExpiringCache$1; }
template<> constexpr auto signature<::java::io::ExpiringCache$1> = ::java_io / "ExpiringCache$1";
namespace java::io { class ExpiringCache$Entry; }
template<> constexpr auto signature<::java::io::ExpiringCache$Entry> = ::java_io / "ExpiringCache$Entry";
namespace java::io { class Externalizable; }
template<> constexpr auto signature<::java::io::Externalizable> = ::java_io / "Externalizable";
namespace java::io { class File; }
template<> constexpr auto signature<::java::io::File> = ::java_io / "File";
namespace java::io { class File$PathStatus; }
template<> constexpr auto signature<::java::io::File$PathStatus> = ::java_io / "File$PathStatus";
namespace java::io { class File$TempDirectory; }
template<> constexpr auto signature<::java::io::File$TempDirectory> = ::java_io / "File$TempDirectory";
namespace java::io { class FileDescriptor; }
template<> constexpr auto signature<::java::io::FileDescriptor> = ::java_io / "FileDescriptor";
namespace java::io { class FileDescriptor$1; }
template<> constexpr auto signature<::java::io::FileDescriptor$1> = ::java_io / "FileDescriptor$1";
namespace java::io { class FileFilter; }
template<> constexpr auto signature<::java::io::FileFilter> = ::java_io / "FileFilter";
namespace java::io { class FileInputStream; }
template<> constexpr auto signature<::java::io::FileInputStream> = ::java_io / "FileInputStream";
namespace java::io { class FileInputStream$1; }
template<> constexpr auto signature<::java::io::FileInputStream$1> = ::java_io / "FileInputStream$1";
namespace java::io { class FileNotFoundException; }
template<> constexpr auto signature<::java::io::FileNotFoundException> = ::java_io / "FileNotFoundException";
namespace java::io { class FileOutputStream; }
template<> constexpr auto signature<::java::io::FileOutputStream> = ::java_io / "FileOutputStream";
namespace java::io { class FileOutputStream$1; }
template<> constexpr auto signature<::java::io::FileOutputStream$1> = ::java_io / "FileOutputStream$1";
namespace java::io { class FilePermission; }
template<> constexpr auto signature<::java::io::FilePermission> = ::java_io / "FilePermission";
namespace java::io { class FilePermission$1; }
template<> constexpr auto signature<::java::io::FilePermission$1> = ::java_io / "FilePermission$1";
namespace java::io { class FilePermissionCollection; }
template<> constexpr auto signature<::java::io::FilePermissionCollection> = ::java_io / "FilePermissionCollection";
namespace java::io { class FileReader; }
template<> constexpr auto signature<::java::io::FileReader> = ::java_io / "FileReader";
namespace java::io { class FileSystem; }
template<> constexpr auto signature<::java::io::FileSystem> = ::java_io / "FileSystem";
namespace java::io { class FileWriter; }
template<> constexpr auto signature<::java::io::FileWriter> = ::java_io / "FileWriter";
namespace java::io { class FilenameFilter; }
template<> constexpr auto signature<::java::io::FilenameFilter> = ::java_io / "FilenameFilter";
namespace java::io { class FilterInputStream; }
template<> constexpr auto signature<::java::io::FilterInputStream> = ::java_io / "FilterInputStream";
namespace java::io { class FilterOutputStream; }
template<> constexpr auto signature<::java::io::FilterOutputStream> = ::java_io / "FilterOutputStream";
namespace java::io { class FilterReader; }
template<> constexpr auto signature<::java::io::FilterReader> = ::java_io / "FilterReader";
namespace java::io { class FilterWriter; }
template<> constexpr auto signature<::java::io::FilterWriter> = ::java_io / "FilterWriter";
namespace java::io { class Flushable; }
template<> constexpr auto signature<::java::io::Flushable> = ::java_io / "Flushable";
namespace java::io { class IOError; }
template<> constexpr auto signature<::java::io::IOError> = ::java_io / "IOError";
namespace java::io { class IOException; }
template<> constexpr auto signature<::java::io::IOException> = ::java_io / "IOException";
namespace java::io { class InputStream; }
template<> constexpr auto signature<::java::io::InputStream> = ::java_io / "InputStream";
namespace java::io { class InputStreamReader; }
template<> constexpr auto signature<::java::io::InputStreamReader> = ::java_io / "InputStreamReader";
namespace java::io { class InterruptedIOException; }
template<> constexpr auto signature<::java::io::InterruptedIOException> = ::java_io / "InterruptedIOException";
namespace java::io { class InvalidClassException; }
template<> constexpr auto signature<::java::io::InvalidClassException> = ::java_io / "InvalidClassException";
namespace java::io { class InvalidObjectException; }
template<> constexpr auto signature<::java::io::InvalidObjectException> = ::java_io / "InvalidObjectException";
namespace java::io { class LineNumberInputStream; }
template<> constexpr auto signature<::java::io::LineNumberInputStream> = ::java_io / "LineNumberInputStream";
namespace java::io { class LineNumberReader; }
template<> constexpr auto signature<::java::io::LineNumberReader> = ::java_io / "LineNumberReader";
namespace java::io { class NotActiveException; }
template<> constexpr auto signature<::java::io::NotActiveException> = ::java_io / "NotActiveException";
namespace java::io { class NotSerializableException; }
template<> constexpr auto signature<::java::io::NotSerializableException> = ::java_io / "NotSerializableException";
namespace java::io { class ObjectInput; }
template<> constexpr auto signature<::java::io::ObjectInput> = ::java_io / "ObjectInput";
namespace java::io { class ObjectInputStream; }
template<> constexpr auto signature<::java::io::ObjectInputStream> = ::java_io / "ObjectInputStream";
namespace java::io { class ObjectInputStream$1; }
template<> constexpr auto signature<::java::io::ObjectInputStream$1> = ::java_io / "ObjectInputStream$1";
namespace java::io { class ObjectInputStream$2; }
template<> constexpr auto signature<::java::io::ObjectInputStream$2> = ::java_io / "ObjectInputStream$2";
namespace java::io { class ObjectInputStream$BlockDataInputStream; }
template<> constexpr auto signature<::java::io::ObjectInputStream$BlockDataInputStream> = ::java_io / "ObjectInputStream$BlockDataInputStream";
namespace java::io { class ObjectInputStream$Caches; }
template<> constexpr auto signature<::java::io::ObjectInputStream$Caches> = ::java_io / "ObjectInputStream$Caches";
namespace java::io { class ObjectInputStream$FilterValues; }
template<> constexpr auto signature<::java::io::ObjectInputStream$FilterValues> = ::java_io / "ObjectInputStream$FilterValues";
namespace java::io { class ObjectInputStream$GetField; }
template<> constexpr auto signature<::java::io::ObjectInputStream$GetField> = ::java_io / "ObjectInputStream$GetField";
namespace java::io { class ObjectInputStream$GetFieldImpl; }
template<> constexpr auto signature<::java::io::ObjectInputStream$GetFieldImpl> = ::java_io / "ObjectInputStream$GetFieldImpl";
namespace java::io { class ObjectInputStream$HandleTable; }
template<> constexpr auto signature<::java::io::ObjectInputStream$HandleTable> = ::java_io / "ObjectInputStream$HandleTable";
namespace java::io { class ObjectInputStream$HandleTable$HandleList; }
template<> constexpr auto signature<::java::io::ObjectInputStream$HandleTable$HandleList> = ::java_io / "ObjectInputStream$HandleTable$HandleList";
namespace java::io { class ObjectInputStream$Logging; }
template<> constexpr auto signature<::java::io::ObjectInputStream$Logging> = ::java_io / "ObjectInputStream$Logging";
namespace java::io { class ObjectInputStream$PeekInputStream; }
template<> constexpr auto signature<::java::io::ObjectInputStream$PeekInputStream> = ::java_io / "ObjectInputStream$PeekInputStream";
namespace java::io { class ObjectInputStream$ValidationList; }
template<> constexpr auto signature<::java::io::ObjectInputStream$ValidationList> = ::java_io / "ObjectInputStream$ValidationList";
namespace java::io { class ObjectInputStream$ValidationList$1; }
template<> constexpr auto signature<::java::io::ObjectInputStream$ValidationList$1> = ::java_io / "ObjectInputStream$ValidationList$1";
namespace java::io { class ObjectInputStream$ValidationList$Callback; }
template<> constexpr auto signature<::java::io::ObjectInputStream$ValidationList$Callback> = ::java_io / "ObjectInputStream$ValidationList$Callback";
namespace java::io { class ObjectInputValidation; }
template<> constexpr auto signature<::java::io::ObjectInputValidation> = ::java_io / "ObjectInputValidation";
namespace java::io { class ObjectOutput; }
template<> constexpr auto signature<::java::io::ObjectOutput> = ::java_io / "ObjectOutput";
namespace java::io { class ObjectOutputStream; }
template<> constexpr auto signature<::java::io::ObjectOutputStream> = ::java_io / "ObjectOutputStream";
namespace java::io { class ObjectOutputStream$1; }
template<> constexpr auto signature<::java::io::ObjectOutputStream$1> = ::java_io / "ObjectOutputStream$1";
namespace java::io { class ObjectOutputStream$BlockDataOutputStream; }
template<> constexpr auto signature<::java::io::ObjectOutputStream$BlockDataOutputStream> = ::java_io / "ObjectOutputStream$BlockDataOutputStream";
namespace java::io { class ObjectOutputStream$Caches; }
template<> constexpr auto signature<::java::io::ObjectOutputStream$Caches> = ::java_io / "ObjectOutputStream$Caches";
namespace java::io { class ObjectOutputStream$DebugTraceInfoStack; }
template<> constexpr auto signature<::java::io::ObjectOutputStream$DebugTraceInfoStack> = ::java_io / "ObjectOutputStream$DebugTraceInfoStack";
namespace java::io { class ObjectOutputStream$HandleTable; }
template<> constexpr auto signature<::java::io::ObjectOutputStream$HandleTable> = ::java_io / "ObjectOutputStream$HandleTable";
namespace java::io { class ObjectOutputStream$PutField; }
template<> constexpr auto signature<::java::io::ObjectOutputStream$PutField> = ::java_io / "ObjectOutputStream$PutField";
namespace java::io { class ObjectOutputStream$PutFieldImpl; }
template<> constexpr auto signature<::java::io::ObjectOutputStream$PutFieldImpl> = ::java_io / "ObjectOutputStream$PutFieldImpl";
namespace java::io { class ObjectOutputStream$ReplaceTable; }
template<> constexpr auto signature<::java::io::ObjectOutputStream$ReplaceTable> = ::java_io / "ObjectOutputStream$ReplaceTable";
namespace java::io { class ObjectStreamClass; }
template<> constexpr auto signature<::java::io::ObjectStreamClass> = ::java_io / "ObjectStreamClass";
namespace java::io { class ObjectStreamClass$1; }
template<> constexpr auto signature<::java::io::ObjectStreamClass$1> = ::java_io / "ObjectStreamClass$1";
namespace java::io { class ObjectStreamClass$2; }
template<> constexpr auto signature<::java::io::ObjectStreamClass$2> = ::java_io / "ObjectStreamClass$2";
namespace java::io { class ObjectStreamClass$3; }
template<> constexpr auto signature<::java::io::ObjectStreamClass$3> = ::java_io / "ObjectStreamClass$3";
namespace java::io { class ObjectStreamClass$4; }
template<> constexpr auto signature<::java::io::ObjectStreamClass$4> = ::java_io / "ObjectStreamClass$4";
namespace java::io { class ObjectStreamClass$5; }
template<> constexpr auto signature<::java::io::ObjectStreamClass$5> = ::java_io / "ObjectStreamClass$5";
namespace java::io { class ObjectStreamClass$Caches; }
template<> constexpr auto signature<::java::io::ObjectStreamClass$Caches> = ::java_io / "ObjectStreamClass$Caches";
namespace java::io { class ObjectStreamClass$ClassDataSlot; }
template<> constexpr auto signature<::java::io::ObjectStreamClass$ClassDataSlot> = ::java_io / "ObjectStreamClass$ClassDataSlot";
namespace java::io { class ObjectStreamClass$EntryFuture; }
template<> constexpr auto signature<::java::io::ObjectStreamClass$EntryFuture> = ::java_io / "ObjectStreamClass$EntryFuture";
namespace java::io { class ObjectStreamClass$EntryFuture$1; }
template<> constexpr auto signature<::java::io::ObjectStreamClass$EntryFuture$1> = ::java_io / "ObjectStreamClass$EntryFuture$1";
namespace java::io { class ObjectStreamClass$ExceptionInfo; }
template<> constexpr auto signature<::java::io::ObjectStreamClass$ExceptionInfo> = ::java_io / "ObjectStreamClass$ExceptionInfo";
namespace java::io { class ObjectStreamClass$FieldReflector; }
template<> constexpr auto signature<::java::io::ObjectStreamClass$FieldReflector> = ::java_io / "ObjectStreamClass$FieldReflector";
namespace java::io { class ObjectStreamClass$FieldReflectorKey; }
template<> constexpr auto signature<::java::io::ObjectStreamClass$FieldReflectorKey> = ::java_io / "ObjectStreamClass$FieldReflectorKey";
namespace java::io { class ObjectStreamClass$MemberSignature; }
template<> constexpr auto signature<::java::io::ObjectStreamClass$MemberSignature> = ::java_io / "ObjectStreamClass$MemberSignature";
namespace java::io { class ObjectStreamClass$WeakClassKey; }
template<> constexpr auto signature<::java::io::ObjectStreamClass$WeakClassKey> = ::java_io / "ObjectStreamClass$WeakClassKey";
namespace java::io { class ObjectStreamConstants; }
template<> constexpr auto signature<::java::io::ObjectStreamConstants> = ::java_io / "ObjectStreamConstants";
namespace java::io { class ObjectStreamException; }
template<> constexpr auto signature<::java::io::ObjectStreamException> = ::java_io / "ObjectStreamException";
namespace java::io { class ObjectStreamField; }
template<> constexpr auto signature<::java::io::ObjectStreamField> = ::java_io / "ObjectStreamField";
namespace java::io { class OptionalDataException; }
template<> constexpr auto signature<::java::io::OptionalDataException> = ::java_io / "OptionalDataException";
namespace java::io { class OutputStream; }
template<> constexpr auto signature<::java::io::OutputStream> = ::java_io / "OutputStream";
namespace java::io { class OutputStreamWriter; }
template<> constexpr auto signature<::java::io::OutputStreamWriter> = ::java_io / "OutputStreamWriter";
namespace java::io { class PipedInputStream; }
template<> constexpr auto signature<::java::io::PipedInputStream> = ::java_io / "PipedInputStream";
namespace java::io { class PipedOutputStream; }
template<> constexpr auto signature<::java::io::PipedOutputStream> = ::java_io / "PipedOutputStream";
namespace java::io { class PipedReader; }
template<> constexpr auto signature<::java::io::PipedReader> = ::java_io / "PipedReader";
namespace java::io { class PipedWriter; }
template<> constexpr auto signature<::java::io::PipedWriter> = ::java_io / "PipedWriter";
namespace java::io { class PrintStream; }
template<> constexpr auto signature<::java::io::PrintStream> = ::java_io / "PrintStream";
namespace java::io { class PrintWriter; }
template<> constexpr auto signature<::java::io::PrintWriter> = ::java_io / "PrintWriter";
namespace java::io { class PushbackInputStream; }
template<> constexpr auto signature<::java::io::PushbackInputStream> = ::java_io / "PushbackInputStream";
namespace java::io { class PushbackReader; }
template<> constexpr auto signature<::java::io::PushbackReader> = ::java_io / "PushbackReader";
namespace java::io { class RandomAccessFile; }
template<> constexpr auto signature<::java::io::RandomAccessFile> = ::java_io / "RandomAccessFile";
namespace java::io { class RandomAccessFile$1; }
template<> constexpr auto signature<::java::io::RandomAccessFile$1> = ::java_io / "RandomAccessFile$1";
namespace java::io { class Reader; }
template<> constexpr auto signature<::java::io::Reader> = ::java_io / "Reader";
namespace java::io { class SequenceInputStream; }
template<> constexpr auto signature<::java::io::SequenceInputStream> = ::java_io / "SequenceInputStream";
namespace java::io { class SerialCallbackContext; }
template<> constexpr auto signature<::java::io::SerialCallbackContext> = ::java_io / "SerialCallbackContext";
namespace java::io { class Serializable; }
template<> constexpr auto signature<::java::io::Serializable> = ::java_io / "Serializable";
namespace java::io { class SerializablePermission; }
template<> constexpr auto signature<::java::io::SerializablePermission> = ::java_io / "SerializablePermission";
namespace java::io { class StreamCorruptedException; }
template<> constexpr auto signature<::java::io::StreamCorruptedException> = ::java_io / "StreamCorruptedException";
namespace java::io { class StreamTokenizer; }
template<> constexpr auto signature<::java::io::StreamTokenizer> = ::java_io / "StreamTokenizer";
namespace java::io { class StringBufferInputStream; }
template<> constexpr auto signature<::java::io::StringBufferInputStream> = ::java_io / "StringBufferInputStream";
namespace java::io { class StringReader; }
template<> constexpr auto signature<::java::io::StringReader> = ::java_io / "StringReader";
namespace java::io { class StringWriter; }
template<> constexpr auto signature<::java::io::StringWriter> = ::java_io / "StringWriter";
namespace java::io { class SyncFailedException; }
template<> constexpr auto signature<::java::io::SyncFailedException> = ::java_io / "SyncFailedException";
namespace java::io { class UTFDataFormatException; }
template<> constexpr auto signature<::java::io::UTFDataFormatException> = ::java_io / "UTFDataFormatException";
namespace java::io { class UncheckedIOException; }
template<> constexpr auto signature<::java::io::UncheckedIOException> = ::java_io / "UncheckedIOException";
namespace java::io { class UnixFileSystem; }
template<> constexpr auto signature<::java::io::UnixFileSystem> = ::java_io / "UnixFileSystem";
namespace java::io { class UnsupportedEncodingException; }
template<> constexpr auto signature<::java::io::UnsupportedEncodingException> = ::java_io / "UnsupportedEncodingException";
namespace java::io { class WriteAbortedException; }
template<> constexpr auto signature<::java::io::WriteAbortedException> = ::java_io / "WriteAbortedException";
namespace java::io { class Writer; }
template<> constexpr auto signature<::java::io::Writer> = ::java_io / "Writer";
namespace java::math { class BigDecimal; }
template<> constexpr auto signature<::java::math::BigDecimal> = ::java_math / "BigDecimal";
namespace java::math { class BigDecimal$1; }
template<> constexpr auto signature<::java::math::BigDecimal$1> = ::java_math / "BigDecimal$1";
namespace java::math { class BigDecimal$LongOverflow; }
template<> constexpr auto signature<::java::math::BigDecimal$LongOverflow> = ::java_math / "BigDecimal$LongOverflow";
namespace java::math { class BigDecimal$StringBuilderHelper; }
template<> constexpr auto signature<::java::math::BigDecimal$StringBuilderHelper> = ::java_math / "BigDecimal$StringBuilderHelper";
namespace java::math { class BigDecimal$UnsafeHolder; }
template<> constexpr auto signature<::java::math::BigDecimal$UnsafeHolder> = ::java_math / "BigDecimal$UnsafeHolder";
namespace java::math { class BigInteger; }
template<> constexpr auto signature<::java::math::BigInteger> = ::java_math / "BigInteger";
namespace java::math { class BigInteger$UnsafeHolder; }
template<> constexpr auto signature<::java::math::BigInteger$UnsafeHolder> = ::java_math / "BigInteger$UnsafeHolder";
namespace java::math { class BitSieve; }
template<> constexpr auto signature<::java::math::BitSieve> = ::java_math / "BitSieve";
namespace java::math { class MathContext; }
template<> constexpr auto signature<::java::math::MathContext> = ::java_math / "MathContext";
namespace java::math { class MutableBigInteger; }
template<> constexpr auto signature<::java::math::MutableBigInteger> = ::java_math / "MutableBigInteger";
namespace java::math { class RoundingMode; }
template<> constexpr auto signature<::java::math::RoundingMode> = ::java_math / "RoundingMode";
namespace java::math { class SignedMutableBigInteger; }
template<> constexpr auto signature<::java::math::SignedMutableBigInteger> = ::java_math / "SignedMutableBigInteger";
namespace java::net { class AbstractPlainDatagramSocketImpl; }
template<> constexpr auto signature<::java::net::AbstractPlainDatagramSocketImpl> = ::java_net / "AbstractPlainDatagramSocketImpl";
namespace java::net { class AbstractPlainDatagramSocketImpl$1; }
template<> constexpr auto signature<::java::net::AbstractPlainDatagramSocketImpl$1> = ::java_net / "AbstractPlainDatagramSocketImpl$1";
namespace java::net { class AbstractPlainSocketImpl; }
template<> constexpr auto signature<::java::net::AbstractPlainSocketImpl> = ::java_net / "AbstractPlainSocketImpl";
namespace java::net { class AbstractPlainSocketImpl$1; }
template<> constexpr auto signature<::java::net::AbstractPlainSocketImpl$1> = ::java_net / "AbstractPlainSocketImpl$1";
namespace java::net { class Authenticator; }
template<> constexpr auto signature<::java::net::Authenticator> = ::java_net / "Authenticator";
namespace java::net { class Authenticator$RequestorType; }
template<> constexpr auto signature<::java::net::Authenticator$RequestorType> = ::java_net / "Authenticator$RequestorType";
namespace java::net { class BindException; }
template<> constexpr auto signature<::java::net::BindException> = ::java_net / "BindException";
namespace java::net { class CacheRequest; }
template<> constexpr auto signature<::java::net::CacheRequest> = ::java_net / "CacheRequest";
namespace java::net { class CacheResponse; }
template<> constexpr auto signature<::java::net::CacheResponse> = ::java_net / "CacheResponse";
namespace java::net { class ConnectException; }
template<> constexpr auto signature<::java::net::ConnectException> = ::java_net / "ConnectException";
namespace java::net { class ContentHandler; }
template<> constexpr auto signature<::java::net::ContentHandler> = ::java_net / "ContentHandler";
namespace java::net { class ContentHandlerFactory; }
template<> constexpr auto signature<::java::net::ContentHandlerFactory> = ::java_net / "ContentHandlerFactory";
namespace java::net { class CookieHandler; }
template<> constexpr auto signature<::java::net::CookieHandler> = ::java_net / "CookieHandler";
namespace java::net { class CookieManager; }
template<> constexpr auto signature<::java::net::CookieManager> = ::java_net / "CookieManager";
namespace java::net { class CookieManager$CookiePathComparator; }
template<> constexpr auto signature<::java::net::CookieManager$CookiePathComparator> = ::java_net / "CookieManager$CookiePathComparator";
namespace java::net { class CookiePolicy; }
template<> constexpr auto signature<::java::net::CookiePolicy> = ::java_net / "CookiePolicy";
namespace java::net { class CookiePolicy$1; }
template<> constexpr auto signature<::java::net::CookiePolicy$1> = ::java_net / "CookiePolicy$1";
namespace java::net { class CookiePolicy$2; }
template<> constexpr auto signature<::java::net::CookiePolicy$2> = ::java_net / "CookiePolicy$2";
namespace java::net { class CookiePolicy$3; }
template<> constexpr auto signature<::java::net::CookiePolicy$3> = ::java_net / "CookiePolicy$3";
namespace java::net { class CookieStore; }
template<> constexpr auto signature<::java::net::CookieStore> = ::java_net / "CookieStore";
namespace java::net { class DatagramPacket; }
template<> constexpr auto signature<::java::net::DatagramPacket> = ::java_net / "DatagramPacket";
namespace java::net { class DatagramPacket$1; }
template<> constexpr auto signature<::java::net::DatagramPacket$1> = ::java_net / "DatagramPacket$1";
namespace java::net { class DatagramSocket; }
template<> constexpr auto signature<::java::net::DatagramSocket> = ::java_net / "DatagramSocket";
namespace java::net { class DatagramSocket$1; }
template<> constexpr auto signature<::java::net::DatagramSocket$1> = ::java_net / "DatagramSocket$1";
namespace java::net { class DatagramSocketImpl; }
template<> constexpr auto signature<::java::net::DatagramSocketImpl> = ::java_net / "DatagramSocketImpl";
namespace java::net { class DatagramSocketImplFactory; }
template<> constexpr auto signature<::java::net::DatagramSocketImplFactory> = ::java_net / "DatagramSocketImplFactory";
namespace java::net { class DefaultDatagramSocketImplFactory; }
template<> constexpr auto signature<::java::net::DefaultDatagramSocketImplFactory> = ::java_net / "DefaultDatagramSocketImplFactory";
namespace java::net { class DefaultInterface; }
template<> constexpr auto signature<::java::net::DefaultInterface> = ::java_net / "DefaultInterface";
namespace java::net { class FactoryURLClassLoader; }
template<> constexpr auto signature<::java::net::FactoryURLClassLoader> = ::java_net / "FactoryURLClassLoader";
namespace java::net { class FileNameMap; }
template<> constexpr auto signature<::java::net::FileNameMap> = ::java_net / "FileNameMap";
namespace java::net { class HostPortrange; }
template<> constexpr auto signature<::java::net::HostPortrange> = ::java_net / "HostPortrange";
namespace java::net { class HttpConnectSocketImpl; }
template<> constexpr auto signature<::java::net::HttpConnectSocketImpl> = ::java_net / "HttpConnectSocketImpl";
namespace java::net { class HttpConnectSocketImpl$1; }
template<> constexpr auto signature<::java::net::HttpConnectSocketImpl$1> = ::java_net / "HttpConnectSocketImpl$1";
namespace java::net { class HttpConnectSocketImpl$2; }
template<> constexpr auto signature<::java::net::HttpConnectSocketImpl$2> = ::java_net / "HttpConnectSocketImpl$2";
namespace java::net { class HttpCookie; }
template<> constexpr auto signature<::java::net::HttpCookie> = ::java_net / "HttpCookie";
namespace java::net { class HttpCookie$1; }
template<> constexpr auto signature<::java::net::HttpCookie$1> = ::java_net / "HttpCookie$1";
namespace java::net { class HttpCookie$10; }
template<> constexpr auto signature<::java::net::HttpCookie$10> = ::java_net / "HttpCookie$10";
namespace java::net { class HttpCookie$11; }
template<> constexpr auto signature<::java::net::HttpCookie$11> = ::java_net / "HttpCookie$11";
namespace java::net { class HttpCookie$12; }
template<> constexpr auto signature<::java::net::HttpCookie$12> = ::java_net / "HttpCookie$12";
namespace java::net { class HttpCookie$2; }
template<> constexpr auto signature<::java::net::HttpCookie$2> = ::java_net / "HttpCookie$2";
namespace java::net { class HttpCookie$3; }
template<> constexpr auto signature<::java::net::HttpCookie$3> = ::java_net / "HttpCookie$3";
namespace java::net { class HttpCookie$4; }
template<> constexpr auto signature<::java::net::HttpCookie$4> = ::java_net / "HttpCookie$4";
namespace java::net { class HttpCookie$5; }
template<> constexpr auto signature<::java::net::HttpCookie$5> = ::java_net / "HttpCookie$5";
namespace java::net { class HttpCookie$6; }
template<> constexpr auto signature<::java::net::HttpCookie$6> = ::java_net / "HttpCookie$6";
namespace java::net { class HttpCookie$7; }
template<> constexpr auto signature<::java::net::HttpCookie$7> = ::java_net / "HttpCookie$7";
namespace java::net { class HttpCookie$8; }
template<> constexpr auto signature<::java::net::HttpCookie$8> = ::java_net / "HttpCookie$8";
namespace java::net { class HttpCookie$9; }
template<> constexpr auto signature<::java::net::HttpCookie$9> = ::java_net / "HttpCookie$9";
namespace java::net { class HttpCookie$CookieAttributeAssignor; }
template<> constexpr auto signature<::java::net::HttpCookie$CookieAttributeAssignor> = ::java_net / "HttpCookie$CookieAttributeAssignor";
namespace java::net { class HttpRetryException; }
template<> constexpr auto signature<::java::net::HttpRetryException> = ::java_net / "HttpRetryException";
namespace java::net { class HttpURLConnection; }
template<> constexpr auto signature<::java::net::HttpURLConnection> = ::java_net / "HttpURLConnection";
namespace java::net { class IDN; }
template<> constexpr auto signature<::java::net::IDN> = ::java_net / "IDN";
namespace java::net { class IDN$1; }
template<> constexpr auto signature<::java::net::IDN$1> = ::java_net / "IDN$1";
namespace java::net { class InMemoryCookieStore; }
template<> constexpr auto signature<::java::net::InMemoryCookieStore> = ::java_net / "InMemoryCookieStore";
namespace java::net { class Inet4Address; }
template<> constexpr auto signature<::java::net::Inet4Address> = ::java_net / "Inet4Address";
namespace java::net { class Inet4AddressImpl; }
template<> constexpr auto signature<::java::net::Inet4AddressImpl> = ::java_net / "Inet4AddressImpl";
namespace java::net { class Inet6Address; }
template<> constexpr auto signature<::java::net::Inet6Address> = ::java_net / "Inet6Address";
namespace java::net { class Inet6Address$1; }
template<> constexpr auto signature<::java::net::Inet6Address$1> = ::java_net / "Inet6Address$1";
namespace java::net { class Inet6Address$Inet6AddressHolder; }
template<> constexpr auto signature<::java::net::Inet6Address$Inet6AddressHolder> = ::java_net / "Inet6Address$Inet6AddressHolder";
namespace java::net { class Inet6AddressImpl; }
template<> constexpr auto signature<::java::net::Inet6AddressImpl> = ::java_net / "Inet6AddressImpl";
namespace java::net { class InetAddress; }
template<> constexpr auto signature<::java::net::InetAddress> = ::java_net / "InetAddress";
namespace java::net { class InetAddress$1; }
template<> constexpr auto signature<::java::net::InetAddress$1> = ::java_net / "InetAddress$1";
namespace java::net { class InetAddress$2; }
template<> constexpr auto signature<::java::net::InetAddress$2> = ::java_net / "InetAddress$2";
namespace java::net { class InetAddress$3; }
template<> constexpr auto signature<::java::net::InetAddress$3> = ::java_net / "InetAddress$3";
namespace java::net { class InetAddress$Cache; }
template<> constexpr auto signature<::java::net::InetAddress$Cache> = ::java_net / "InetAddress$Cache";
namespace java::net { class InetAddress$Cache$Type; }
template<> constexpr auto signature<::java::net::InetAddress$Cache$Type> = ::java_net / "InetAddress$Cache$Type";
namespace java::net { class InetAddress$CacheEntry; }
template<> constexpr auto signature<::java::net::InetAddress$CacheEntry> = ::java_net / "InetAddress$CacheEntry";
namespace java::net { class InetAddress$InetAddressHolder; }
template<> constexpr auto signature<::java::net::InetAddress$InetAddressHolder> = ::java_net / "InetAddress$InetAddressHolder";
namespace java::net { class InetAddressContainer; }
template<> constexpr auto signature<::java::net::InetAddressContainer> = ::java_net / "InetAddressContainer";
namespace java::net { class InetAddressImpl; }
template<> constexpr auto signature<::java::net::InetAddressImpl> = ::java_net / "InetAddressImpl";
namespace java::net { class InetAddressImplFactory; }
template<> constexpr auto signature<::java::net::InetAddressImplFactory> = ::java_net / "InetAddressImplFactory";
namespace java::net { class InetSocketAddress; }
template<> constexpr auto signature<::java::net::InetSocketAddress> = ::java_net / "InetSocketAddress";
namespace java::net { class InetSocketAddress$1; }
template<> constexpr auto signature<::java::net::InetSocketAddress$1> = ::java_net / "InetSocketAddress$1";
namespace java::net { class InetSocketAddress$InetSocketAddressHolder; }
template<> constexpr auto signature<::java::net::InetSocketAddress$InetSocketAddressHolder> = ::java_net / "InetSocketAddress$InetSocketAddressHolder";
namespace java::net { class InterfaceAddress; }
template<> constexpr auto signature<::java::net::InterfaceAddress> = ::java_net / "InterfaceAddress";
namespace java::net { class JarURLConnection; }
template<> constexpr auto signature<::java::net::JarURLConnection> = ::java_net / "JarURLConnection";
namespace java::net { class MalformedURLException; }
template<> constexpr auto signature<::java::net::MalformedURLException> = ::java_net / "MalformedURLException";
namespace java::net { class MulticastSocket; }
template<> constexpr auto signature<::java::net::MulticastSocket> = ::java_net / "MulticastSocket";
namespace java::net { class NetPermission; }
template<> constexpr auto signature<::java::net::NetPermission> = ::java_net / "NetPermission";
namespace java::net { class NetworkInterface; }
template<> constexpr auto signature<::java::net::NetworkInterface> = ::java_net / "NetworkInterface";
namespace java::net { class NetworkInterface$1; }
template<> constexpr auto signature<::java::net::NetworkInterface$1> = ::java_net / "NetworkInterface$1";
namespace java::net { class NetworkInterface$1checkedAddresses; }
template<> constexpr auto signature<::java::net::NetworkInterface$1checkedAddresses> = ::java_net / "NetworkInterface$1checkedAddresses";
namespace java::net { class NetworkInterface$1subIFs; }
template<> constexpr auto signature<::java::net::NetworkInterface$1subIFs> = ::java_net / "NetworkInterface$1subIFs";
namespace java::net { class NetworkInterface$2; }
template<> constexpr auto signature<::java::net::NetworkInterface$2> = ::java_net / "NetworkInterface$2";
namespace java::net { class NoRouteToHostException; }
template<> constexpr auto signature<::java::net::NoRouteToHostException> = ::java_net / "NoRouteToHostException";
namespace java::net { class Parts; }
template<> constexpr auto signature<::java::net::Parts> = ::java_net / "Parts";
namespace java::net { class PasswordAuthentication; }
template<> constexpr auto signature<::java::net::PasswordAuthentication> = ::java_net / "PasswordAuthentication";
namespace java::net { class PlainDatagramSocketImpl; }
template<> constexpr auto signature<::java::net::PlainDatagramSocketImpl> = ::java_net / "PlainDatagramSocketImpl";
namespace java::net { class PlainSocketImpl; }
template<> constexpr auto signature<::java::net::PlainSocketImpl> = ::java_net / "PlainSocketImpl";
namespace java::net { class PortUnreachableException; }
template<> constexpr auto signature<::java::net::PortUnreachableException> = ::java_net / "PortUnreachableException";
namespace java::net { class ProtocolException; }
template<> constexpr auto signature<::java::net::ProtocolException> = ::java_net / "ProtocolException";
namespace java::net { class ProtocolFamily; }
template<> constexpr auto signature<::java::net::ProtocolFamily> = ::java_net / "ProtocolFamily";
namespace java::net { class Proxy; }
template<> constexpr auto signature<::java::net::Proxy> = ::java_net / "Proxy";
namespace java::net { class Proxy$Type; }
template<> constexpr auto signature<::java::net::Proxy$Type> = ::java_net / "Proxy$Type";
namespace java::net { class ProxySelector; }
template<> constexpr auto signature<::java::net::ProxySelector> = ::java_net / "ProxySelector";
namespace java::net { class ResponseCache; }
template<> constexpr auto signature<::java::net::ResponseCache> = ::java_net / "ResponseCache";
namespace java::net { class SdpSocketImpl; }
template<> constexpr auto signature<::java::net::SdpSocketImpl> = ::java_net / "SdpSocketImpl";
namespace java::net { class SecureCacheResponse; }
template<> constexpr auto signature<::java::net::SecureCacheResponse> = ::java_net / "SecureCacheResponse";
namespace java::net { class ServerSocket; }
template<> constexpr auto signature<::java::net::ServerSocket> = ::java_net / "ServerSocket";
namespace java::net { class ServerSocket$1; }
template<> constexpr auto signature<::java::net::ServerSocket$1> = ::java_net / "ServerSocket$1";
namespace java::net { class Socket; }
template<> constexpr auto signature<::java::net::Socket> = ::java_net / "Socket";
namespace java::net { class Socket$1; }
template<> constexpr auto signature<::java::net::Socket$1> = ::java_net / "Socket$1";
namespace java::net { class Socket$2; }
template<> constexpr auto signature<::java::net::Socket$2> = ::java_net / "Socket$2";
namespace java::net { class Socket$3; }
template<> constexpr auto signature<::java::net::Socket$3> = ::java_net / "Socket$3";
namespace java::net { class SocketAddress; }
template<> constexpr auto signature<::java::net::SocketAddress> = ::java_net / "SocketAddress";
namespace java::net { class SocketException; }
template<> constexpr auto signature<::java::net::SocketException> = ::java_net / "SocketException";
namespace java::net { class SocketImpl; }
template<> constexpr auto signature<::java::net::SocketImpl> = ::java_net / "SocketImpl";
namespace java::net { class SocketImplFactory; }
template<> constexpr auto signature<::java::net::SocketImplFactory> = ::java_net / "SocketImplFactory";
namespace java::net { class SocketInputStream; }
template<> constexpr auto signature<::java::net::SocketInputStream> = ::java_net / "SocketInputStream";
namespace java::net { class SocketOption; }
template<> constexpr auto signature<::java::net::SocketOption> = ::java_net / "SocketOption";
namespace java::net { class SocketOptions; }
template<> constexpr auto signature<::java::net::SocketOptions> = ::java_net / "SocketOptions";
namespace java::net { class SocketOutputStream; }
template<> constexpr auto signature<::java::net::SocketOutputStream> = ::java_net / "SocketOutputStream";
namespace java::net { class SocketPermission; }
template<> constexpr auto signature<::java::net::SocketPermission> = ::java_net / "SocketPermission";
namespace java::net { class SocketPermission$1; }
template<> constexpr auto signature<::java::net::SocketPermission$1> = ::java_net / "SocketPermission$1";
namespace java::net { class SocketPermission$EphemeralRange; }
template<> constexpr auto signature<::java::net::SocketPermission$EphemeralRange> = ::java_net / "SocketPermission$EphemeralRange";
namespace java::net { class SocketPermissionCollection; }
template<> constexpr auto signature<::java::net::SocketPermissionCollection> = ::java_net / "SocketPermissionCollection";
namespace java::net { class SocketSecrets; }
template<> constexpr auto signature<::java::net::SocketSecrets> = ::java_net / "SocketSecrets";
namespace java::net { class SocketTimeoutException; }
template<> constexpr auto signature<::java::net::SocketTimeoutException> = ::java_net / "SocketTimeoutException";
namespace java::net { class SocksConsts; }
template<> constexpr auto signature<::java::net::SocksConsts> = ::java_net / "SocksConsts";
namespace java::net { class SocksSocketImpl; }
template<> constexpr auto signature<::java::net::SocksSocketImpl> = ::java_net / "SocksSocketImpl";
namespace java::net { class SocksSocketImpl$1; }
template<> constexpr auto signature<::java::net::SocksSocketImpl$1> = ::java_net / "SocksSocketImpl$1";
namespace java::net { class SocksSocketImpl$2; }
template<> constexpr auto signature<::java::net::SocksSocketImpl$2> = ::java_net / "SocksSocketImpl$2";
namespace java::net { class SocksSocketImpl$3; }
template<> constexpr auto signature<::java::net::SocksSocketImpl$3> = ::java_net / "SocksSocketImpl$3";
namespace java::net { class SocksSocketImpl$4; }
template<> constexpr auto signature<::java::net::SocksSocketImpl$4> = ::java_net / "SocksSocketImpl$4";
namespace java::net { class SocksSocketImpl$5; }
template<> constexpr auto signature<::java::net::SocksSocketImpl$5> = ::java_net / "SocksSocketImpl$5";
namespace java::net { class SocksSocketImpl$6; }
template<> constexpr auto signature<::java::net::SocksSocketImpl$6> = ::java_net / "SocksSocketImpl$6";
namespace java::net { class SocksSocketImpl$7; }
template<> constexpr auto signature<::java::net::SocksSocketImpl$7> = ::java_net / "SocksSocketImpl$7";
namespace java::net { class StandardProtocolFamily; }
template<> constexpr auto signature<::java::net::StandardProtocolFamily> = ::java_net / "StandardProtocolFamily";
namespace java::net { class StandardSocketOptions; }
template<> constexpr auto signature<::java::net::StandardSocketOptions> = ::java_net / "StandardSocketOptions";
namespace java::net { class StandardSocketOptions$StdSocketOption; }
template<> constexpr auto signature<::java::net::StandardSocketOptions$StdSocketOption> = ::java_net / "StandardSocketOptions$StdSocketOption";
namespace java::net { class URI; }
template<> constexpr auto signature<::java::net::URI> = ::java_net / "URI";
namespace java::net { class URI$Parser; }
template<> constexpr auto signature<::java::net::URI$Parser> = ::java_net / "URI$Parser";
namespace java::net { class URISyntaxException; }
template<> constexpr auto signature<::java::net::URISyntaxException> = ::java_net / "URISyntaxException";
namespace java::net { class URL; }
template<> constexpr auto signature<::java::net::URL> = ::java_net / "URL";
namespace java::net { class URLClassLoader; }
template<> constexpr auto signature<::java::net::URLClassLoader> = ::java_net / "URLClassLoader";
namespace java::net { class URLClassLoader$1; }
template<> constexpr auto signature<::java::net::URLClassLoader$1> = ::java_net / "URLClassLoader$1";
namespace java::net { class URLClassLoader$2; }
template<> constexpr auto signature<::java::net::URLClassLoader$2> = ::java_net / "URLClassLoader$2";
namespace java::net { class URLClassLoader$3; }
template<> constexpr auto signature<::java::net::URLClassLoader$3> = ::java_net / "URLClassLoader$3";
namespace java::net { class URLClassLoader$3$1; }
template<> constexpr auto signature<::java::net::URLClassLoader$3$1> = ::java_net / "URLClassLoader$3$1";
namespace java::net { class URLClassLoader$4; }
template<> constexpr auto signature<::java::net::URLClassLoader$4> = ::java_net / "URLClassLoader$4";
namespace java::net { class URLClassLoader$5; }
template<> constexpr auto signature<::java::net::URLClassLoader$5> = ::java_net / "URLClassLoader$5";
namespace java::net { class URLClassLoader$6; }
template<> constexpr auto signature<::java::net::URLClassLoader$6> = ::java_net / "URLClassLoader$6";
namespace java::net { class URLClassLoader$7; }
template<> constexpr auto signature<::java::net::URLClassLoader$7> = ::java_net / "URLClassLoader$7";
namespace java::net { class URLConnection; }
template<> constexpr auto signature<::java::net::URLConnection> = ::java_net / "URLConnection";
namespace java::net { class URLConnection$1; }
template<> constexpr auto signature<::java::net::URLConnection$1> = ::java_net / "URLConnection$1";
namespace java::net { class URLDecoder; }
template<> constexpr auto signature<::java::net::URLDecoder> = ::java_net / "URLDecoder";
namespace java::net { class URLEncoder; }
template<> constexpr auto signature<::java::net::URLEncoder> = ::java_net / "URLEncoder";
namespace java::net { class URLPermission; }
template<> constexpr auto signature<::java::net::URLPermission> = ::java_net / "URLPermission";
namespace java::net { class URLPermission$Authority; }
template<> constexpr auto signature<::java::net::URLPermission$Authority> = ::java_net / "URLPermission$Authority";
namespace java::net { class URLStreamHandler; }
template<> constexpr auto signature<::java::net::URLStreamHandler> = ::java_net / "URLStreamHandler";
namespace java::net { class URLStreamHandlerFactory; }
template<> constexpr auto signature<::java::net::URLStreamHandlerFactory> = ::java_net / "URLStreamHandlerFactory";
namespace java::net { class UnknownContentHandler; }
template<> constexpr auto signature<::java::net::UnknownContentHandler> = ::java_net / "UnknownContentHandler";
namespace java::net { class UnknownHostException; }
template<> constexpr auto signature<::java::net::UnknownHostException> = ::java_net / "UnknownHostException";
namespace java::net { class UnknownServiceException; }
template<> constexpr auto signature<::java::net::UnknownServiceException> = ::java_net / "UnknownServiceException";
namespace java::net { class UrlDeserializedState; }
template<> constexpr auto signature<::java::net::UrlDeserializedState> = ::java_net / "UrlDeserializedState";
namespace java::nio { class Bits; }
template<> constexpr auto signature<::java::nio::Bits> = ::java_nio / "Bits";
namespace java::nio { class Bits$1; }
template<> constexpr auto signature<::java::nio::Bits$1> = ::java_nio / "Bits$1";
namespace java::nio { class Bits$1$1; }
template<> constexpr auto signature<::java::nio::Bits$1$1> = ::java_nio / "Bits$1$1";
namespace java::nio { class Buffer; }
template<> constexpr auto signature<::java::nio::Buffer> = ::java_nio / "Buffer";
namespace java::nio { class BufferOverflowException; }
template<> constexpr auto signature<::java::nio::BufferOverflowException> = ::java_nio / "BufferOverflowException";
namespace java::nio { class BufferUnderflowException; }
template<> constexpr auto signature<::java::nio::BufferUnderflowException> = ::java_nio / "BufferUnderflowException";
namespace java::nio { class ByteBuffer; }
template<> constexpr auto signature<::java::nio::ByteBuffer> = ::java_nio / "ByteBuffer";
namespace java::nio { class ByteBufferAsCharBufferB; }
template<> constexpr auto signature<::java::nio::ByteBufferAsCharBufferB> = ::java_nio / "ByteBufferAsCharBufferB";
namespace java::nio { class ByteBufferAsCharBufferL; }
template<> constexpr auto signature<::java::nio::ByteBufferAsCharBufferL> = ::java_nio / "ByteBufferAsCharBufferL";
namespace java::nio { class ByteBufferAsCharBufferRB; }
template<> constexpr auto signature<::java::nio::ByteBufferAsCharBufferRB> = ::java_nio / "ByteBufferAsCharBufferRB";
namespace java::nio { class ByteBufferAsCharBufferRL; }
template<> constexpr auto signature<::java::nio::ByteBufferAsCharBufferRL> = ::java_nio / "ByteBufferAsCharBufferRL";
namespace java::nio { class ByteBufferAsDoubleBufferB; }
template<> constexpr auto signature<::java::nio::ByteBufferAsDoubleBufferB> = ::java_nio / "ByteBufferAsDoubleBufferB";
namespace java::nio { class ByteBufferAsDoubleBufferL; }
template<> constexpr auto signature<::java::nio::ByteBufferAsDoubleBufferL> = ::java_nio / "ByteBufferAsDoubleBufferL";
namespace java::nio { class ByteBufferAsDoubleBufferRB; }
template<> constexpr auto signature<::java::nio::ByteBufferAsDoubleBufferRB> = ::java_nio / "ByteBufferAsDoubleBufferRB";
namespace java::nio { class ByteBufferAsDoubleBufferRL; }
template<> constexpr auto signature<::java::nio::ByteBufferAsDoubleBufferRL> = ::java_nio / "ByteBufferAsDoubleBufferRL";
namespace java::nio { class ByteBufferAsFloatBufferB; }
template<> constexpr auto signature<::java::nio::ByteBufferAsFloatBufferB> = ::java_nio / "ByteBufferAsFloatBufferB";
namespace java::nio { class ByteBufferAsFloatBufferL; }
template<> constexpr auto signature<::java::nio::ByteBufferAsFloatBufferL> = ::java_nio / "ByteBufferAsFloatBufferL";
namespace java::nio { class ByteBufferAsFloatBufferRB; }
template<> constexpr auto signature<::java::nio::ByteBufferAsFloatBufferRB> = ::java_nio / "ByteBufferAsFloatBufferRB";
namespace java::nio { class ByteBufferAsFloatBufferRL; }
template<> constexpr auto signature<::java::nio::ByteBufferAsFloatBufferRL> = ::java_nio / "ByteBufferAsFloatBufferRL";
namespace java::nio { class ByteBufferAsIntBufferB; }
template<> constexpr auto signature<::java::nio::ByteBufferAsIntBufferB> = ::java_nio / "ByteBufferAsIntBufferB";
namespace java::nio { class ByteBufferAsIntBufferL; }
template<> constexpr auto signature<::java::nio::ByteBufferAsIntBufferL> = ::java_nio / "ByteBufferAsIntBufferL";
namespace java::nio { class ByteBufferAsIntBufferRB; }
template<> constexpr auto signature<::java::nio::ByteBufferAsIntBufferRB> = ::java_nio / "ByteBufferAsIntBufferRB";
namespace java::nio { class ByteBufferAsIntBufferRL; }
template<> constexpr auto signature<::java::nio::ByteBufferAsIntBufferRL> = ::java_nio / "ByteBufferAsIntBufferRL";
namespace java::nio { class ByteBufferAsLongBufferB; }
template<> constexpr auto signature<::java::nio::ByteBufferAsLongBufferB> = ::java_nio / "ByteBufferAsLongBufferB";
namespace java::nio { class ByteBufferAsLongBufferL; }
template<> constexpr auto signature<::java::nio::ByteBufferAsLongBufferL> = ::java_nio / "ByteBufferAsLongBufferL";
namespace java::nio { class ByteBufferAsLongBufferRB; }
template<> constexpr auto signature<::java::nio::ByteBufferAsLongBufferRB> = ::java_nio / "ByteBufferAsLongBufferRB";
namespace java::nio { class ByteBufferAsLongBufferRL; }
template<> constexpr auto signature<::java::nio::ByteBufferAsLongBufferRL> = ::java_nio / "ByteBufferAsLongBufferRL";
namespace java::nio { class ByteBufferAsShortBufferB; }
template<> constexpr auto signature<::java::nio::ByteBufferAsShortBufferB> = ::java_nio / "ByteBufferAsShortBufferB";
namespace java::nio { class ByteBufferAsShortBufferL; }
template<> constexpr auto signature<::java::nio::ByteBufferAsShortBufferL> = ::java_nio / "ByteBufferAsShortBufferL";
namespace java::nio { class ByteBufferAsShortBufferRB; }
template<> constexpr auto signature<::java::nio::ByteBufferAsShortBufferRB> = ::java_nio / "ByteBufferAsShortBufferRB";
namespace java::nio { class ByteBufferAsShortBufferRL; }
template<> constexpr auto signature<::java::nio::ByteBufferAsShortBufferRL> = ::java_nio / "ByteBufferAsShortBufferRL";
namespace java::nio { class ByteOrder; }
template<> constexpr auto signature<::java::nio::ByteOrder> = ::java_nio / "ByteOrder";
namespace java::nio { class CharBuffer; }
template<> constexpr auto signature<::java::nio::CharBuffer> = ::java_nio / "CharBuffer";
namespace java::nio { class CharBufferSpliterator; }
template<> constexpr auto signature<::java::nio::CharBufferSpliterator> = ::java_nio / "CharBufferSpliterator";
namespace java::nio { class DirectByteBuffer; }
template<> constexpr auto signature<::java::nio::DirectByteBuffer> = ::java_nio / "DirectByteBuffer";
namespace java::nio { class DirectByteBuffer$1; }
template<> constexpr auto signature<::java::nio::DirectByteBuffer$1> = ::java_nio / "DirectByteBuffer$1";
namespace java::nio { class DirectByteBuffer$Deallocator; }
template<> constexpr auto signature<::java::nio::DirectByteBuffer$Deallocator> = ::java_nio / "DirectByteBuffer$Deallocator";
namespace java::nio { class DirectByteBufferR; }
template<> constexpr auto signature<::java::nio::DirectByteBufferR> = ::java_nio / "DirectByteBufferR";
namespace java::nio { class DirectCharBufferRS; }
template<> constexpr auto signature<::java::nio::DirectCharBufferRS> = ::java_nio / "DirectCharBufferRS";
namespace java::nio { class DirectCharBufferRU; }
template<> constexpr auto signature<::java::nio::DirectCharBufferRU> = ::java_nio / "DirectCharBufferRU";
namespace java::nio { class DirectCharBufferS; }
template<> constexpr auto signature<::java::nio::DirectCharBufferS> = ::java_nio / "DirectCharBufferS";
namespace java::nio { class DirectCharBufferU; }
template<> constexpr auto signature<::java::nio::DirectCharBufferU> = ::java_nio / "DirectCharBufferU";
namespace java::nio { class DirectDoubleBufferRS; }
template<> constexpr auto signature<::java::nio::DirectDoubleBufferRS> = ::java_nio / "DirectDoubleBufferRS";
namespace java::nio { class DirectDoubleBufferRU; }
template<> constexpr auto signature<::java::nio::DirectDoubleBufferRU> = ::java_nio / "DirectDoubleBufferRU";
namespace java::nio { class DirectDoubleBufferS; }
template<> constexpr auto signature<::java::nio::DirectDoubleBufferS> = ::java_nio / "DirectDoubleBufferS";
namespace java::nio { class DirectDoubleBufferU; }
template<> constexpr auto signature<::java::nio::DirectDoubleBufferU> = ::java_nio / "DirectDoubleBufferU";
namespace java::nio { class DirectFloatBufferRS; }
template<> constexpr auto signature<::java::nio::DirectFloatBufferRS> = ::java_nio / "DirectFloatBufferRS";
namespace java::nio { class DirectFloatBufferRU; }
template<> constexpr auto signature<::java::nio::DirectFloatBufferRU> = ::java_nio / "DirectFloatBufferRU";
namespace java::nio { class DirectFloatBufferS; }
template<> constexpr auto signature<::java::nio::DirectFloatBufferS> = ::java_nio / "DirectFloatBufferS";
namespace java::nio { class DirectFloatBufferU; }
template<> constexpr auto signature<::java::nio::DirectFloatBufferU> = ::java_nio / "DirectFloatBufferU";
namespace java::nio { class DirectIntBufferRS; }
template<> constexpr auto signature<::java::nio::DirectIntBufferRS> = ::java_nio / "DirectIntBufferRS";
namespace java::nio { class DirectIntBufferRU; }
template<> constexpr auto signature<::java::nio::DirectIntBufferRU> = ::java_nio / "DirectIntBufferRU";
namespace java::nio { class DirectIntBufferS; }
template<> constexpr auto signature<::java::nio::DirectIntBufferS> = ::java_nio / "DirectIntBufferS";
namespace java::nio { class DirectIntBufferU; }
template<> constexpr auto signature<::java::nio::DirectIntBufferU> = ::java_nio / "DirectIntBufferU";
namespace java::nio { class DirectLongBufferRS; }
template<> constexpr auto signature<::java::nio::DirectLongBufferRS> = ::java_nio / "DirectLongBufferRS";
namespace java::nio { class DirectLongBufferRU; }
template<> constexpr auto signature<::java::nio::DirectLongBufferRU> = ::java_nio / "DirectLongBufferRU";
namespace java::nio { class DirectLongBufferS; }
template<> constexpr auto signature<::java::nio::DirectLongBufferS> = ::java_nio / "DirectLongBufferS";
namespace java::nio { class DirectLongBufferU; }
template<> constexpr auto signature<::java::nio::DirectLongBufferU> = ::java_nio / "DirectLongBufferU";
namespace java::nio { class DirectShortBufferRS; }
template<> constexpr auto signature<::java::nio::DirectShortBufferRS> = ::java_nio / "DirectShortBufferRS";
namespace java::nio { class DirectShortBufferRU; }
template<> constexpr auto signature<::java::nio::DirectShortBufferRU> = ::java_nio / "DirectShortBufferRU";
namespace java::nio { class DirectShortBufferS; }
template<> constexpr auto signature<::java::nio::DirectShortBufferS> = ::java_nio / "DirectShortBufferS";
namespace java::nio { class DirectShortBufferU; }
template<> constexpr auto signature<::java::nio::DirectShortBufferU> = ::java_nio / "DirectShortBufferU";
namespace java::nio { class DoubleBuffer; }
template<> constexpr auto signature<::java::nio::DoubleBuffer> = ::java_nio / "DoubleBuffer";
namespace java::nio { class FloatBuffer; }
template<> constexpr auto signature<::java::nio::FloatBuffer> = ::java_nio / "FloatBuffer";
namespace java::nio { class HeapByteBuffer; }
template<> constexpr auto signature<::java::nio::HeapByteBuffer> = ::java_nio / "HeapByteBuffer";
namespace java::nio { class HeapByteBufferR; }
template<> constexpr auto signature<::java::nio::HeapByteBufferR> = ::java_nio / "HeapByteBufferR";
namespace java::nio { class HeapCharBuffer; }
template<> constexpr auto signature<::java::nio::HeapCharBuffer> = ::java_nio / "HeapCharBuffer";
namespace java::nio { class HeapCharBufferR; }
template<> constexpr auto signature<::java::nio::HeapCharBufferR> = ::java_nio / "HeapCharBufferR";
namespace java::nio { class HeapDoubleBuffer; }
template<> constexpr auto signature<::java::nio::HeapDoubleBuffer> = ::java_nio / "HeapDoubleBuffer";
namespace java::nio { class HeapDoubleBufferR; }
template<> constexpr auto signature<::java::nio::HeapDoubleBufferR> = ::java_nio / "HeapDoubleBufferR";
namespace java::nio { class HeapFloatBuffer; }
template<> constexpr auto signature<::java::nio::HeapFloatBuffer> = ::java_nio / "HeapFloatBuffer";
namespace java::nio { class HeapFloatBufferR; }
template<> constexpr auto signature<::java::nio::HeapFloatBufferR> = ::java_nio / "HeapFloatBufferR";
namespace java::nio { class HeapIntBuffer; }
template<> constexpr auto signature<::java::nio::HeapIntBuffer> = ::java_nio / "HeapIntBuffer";
namespace java::nio { class HeapIntBufferR; }
template<> constexpr auto signature<::java::nio::HeapIntBufferR> = ::java_nio / "HeapIntBufferR";
namespace java::nio { class HeapLongBuffer; }
template<> constexpr auto signature<::java::nio::HeapLongBuffer> = ::java_nio / "HeapLongBuffer";
namespace java::nio { class HeapLongBufferR; }
template<> constexpr auto signature<::java::nio::HeapLongBufferR> = ::java_nio / "HeapLongBufferR";
namespace java::nio { class HeapShortBuffer; }
template<> constexpr auto signature<::java::nio::HeapShortBuffer> = ::java_nio / "HeapShortBuffer";
namespace java::nio { class HeapShortBufferR; }
template<> constexpr auto signature<::java::nio::HeapShortBufferR> = ::java_nio / "HeapShortBufferR";
namespace java::nio { class IntBuffer; }
template<> constexpr auto signature<::java::nio::IntBuffer> = ::java_nio / "IntBuffer";
namespace java::nio { class InvalidMarkException; }
template<> constexpr auto signature<::java::nio::InvalidMarkException> = ::java_nio / "InvalidMarkException";
namespace java::nio { class LongBuffer; }
template<> constexpr auto signature<::java::nio::LongBuffer> = ::java_nio / "LongBuffer";
namespace java::nio { class MappedByteBuffer; }
template<> constexpr auto signature<::java::nio::MappedByteBuffer> = ::java_nio / "MappedByteBuffer";
namespace java::nio { class ReadOnlyBufferException; }
template<> constexpr auto signature<::java::nio::ReadOnlyBufferException> = ::java_nio / "ReadOnlyBufferException";
namespace java::nio { class ShortBuffer; }
template<> constexpr auto signature<::java::nio::ShortBuffer> = ::java_nio / "ShortBuffer";
namespace java::nio { class StringCharBuffer; }
template<> constexpr auto signature<::java::nio::StringCharBuffer> = ::java_nio / "StringCharBuffer";
namespace java::nio::channels { class AcceptPendingException; }
template<> constexpr auto signature<::java::nio::channels::AcceptPendingException> = ::java_nio_channels / "AcceptPendingException";
namespace java::nio::channels { class AlreadyBoundException; }
template<> constexpr auto signature<::java::nio::channels::AlreadyBoundException> = ::java_nio_channels / "AlreadyBoundException";
namespace java::nio::channels { class AlreadyConnectedException; }
template<> constexpr auto signature<::java::nio::channels::AlreadyConnectedException> = ::java_nio_channels / "AlreadyConnectedException";
namespace java::nio::channels { class AsynchronousByteChannel; }
template<> constexpr auto signature<::java::nio::channels::AsynchronousByteChannel> = ::java_nio_channels / "AsynchronousByteChannel";
namespace java::nio::channels { class AsynchronousChannel; }
template<> constexpr auto signature<::java::nio::channels::AsynchronousChannel> = ::java_nio_channels / "AsynchronousChannel";
namespace java::nio::channels { class AsynchronousChannelGroup; }
template<> constexpr auto signature<::java::nio::channels::AsynchronousChannelGroup> = ::java_nio_channels / "AsynchronousChannelGroup";
namespace java::nio::channels { class AsynchronousCloseException; }
template<> constexpr auto signature<::java::nio::channels::AsynchronousCloseException> = ::java_nio_channels / "AsynchronousCloseException";
namespace java::nio::channels { class AsynchronousFileChannel; }
template<> constexpr auto signature<::java::nio::channels::AsynchronousFileChannel> = ::java_nio_channels / "AsynchronousFileChannel";
namespace java::nio::channels { class AsynchronousServerSocketChannel; }
template<> constexpr auto signature<::java::nio::channels::AsynchronousServerSocketChannel> = ::java_nio_channels / "AsynchronousServerSocketChannel";
namespace java::nio::channels { class AsynchronousSocketChannel; }
template<> constexpr auto signature<::java::nio::channels::AsynchronousSocketChannel> = ::java_nio_channels / "AsynchronousSocketChannel";
namespace java::nio::channels { class ByteChannel; }
template<> constexpr auto signature<::java::nio::channels::ByteChannel> = ::java_nio_channels / "ByteChannel";
namespace java::nio::channels { class CancelledKeyException; }
template<> constexpr auto signature<::java::nio::channels::CancelledKeyException> = ::java_nio_channels / "CancelledKeyException";
namespace java::nio::channels { class Channel; }
template<> constexpr auto signature<::java::nio::channels::Channel> = ::java_nio_channels / "Channel";
namespace java::nio::channels { class Channels; }
template<> constexpr auto signature<::java::nio::channels::Channels> = ::java_nio_channels / "Channels";
namespace java::nio::channels { class Channels$1; }
template<> constexpr auto signature<::java::nio::channels::Channels$1> = ::java_nio_channels / "Channels$1";
namespace java::nio::channels { class Channels$2; }
template<> constexpr auto signature<::java::nio::channels::Channels$2> = ::java_nio_channels / "Channels$2";
namespace java::nio::channels { class Channels$3; }
template<> constexpr auto signature<::java::nio::channels::Channels$3> = ::java_nio_channels / "Channels$3";
namespace java::nio::channels { class Channels$ReadableByteChannelImpl; }
template<> constexpr auto signature<::java::nio::channels::Channels$ReadableByteChannelImpl> = ::java_nio_channels / "Channels$ReadableByteChannelImpl";
namespace java::nio::channels { class Channels$WritableByteChannelImpl; }
template<> constexpr auto signature<::java::nio::channels::Channels$WritableByteChannelImpl> = ::java_nio_channels / "Channels$WritableByteChannelImpl";
namespace java::nio::channels { class ClosedByInterruptException; }
template<> constexpr auto signature<::java::nio::channels::ClosedByInterruptException> = ::java_nio_channels / "ClosedByInterruptException";
namespace java::nio::channels { class ClosedChannelException; }
template<> constexpr auto signature<::java::nio::channels::ClosedChannelException> = ::java_nio_channels / "ClosedChannelException";
namespace java::nio::channels { class ClosedSelectorException; }
template<> constexpr auto signature<::java::nio::channels::ClosedSelectorException> = ::java_nio_channels / "ClosedSelectorException";
namespace java::nio::channels { class CompletionHandler; }
template<> constexpr auto signature<::java::nio::channels::CompletionHandler> = ::java_nio_channels / "CompletionHandler";
namespace java::nio::channels { class ConnectionPendingException; }
template<> constexpr auto signature<::java::nio::channels::ConnectionPendingException> = ::java_nio_channels / "ConnectionPendingException";
namespace java::nio::channels { class DatagramChannel; }
template<> constexpr auto signature<::java::nio::channels::DatagramChannel> = ::java_nio_channels / "DatagramChannel";
namespace java::nio::channels { class FileChannel; }
template<> constexpr auto signature<::java::nio::channels::FileChannel> = ::java_nio_channels / "FileChannel";
namespace java::nio::channels { class FileChannel$MapMode; }
template<> constexpr auto signature<::java::nio::channels::FileChannel$MapMode> = ::java_nio_channels / "FileChannel$MapMode";
namespace java::nio::channels { class FileLock; }
template<> constexpr auto signature<::java::nio::channels::FileLock> = ::java_nio_channels / "FileLock";
namespace java::nio::channels { class FileLockInterruptionException; }
template<> constexpr auto signature<::java::nio::channels::FileLockInterruptionException> = ::java_nio_channels / "FileLockInterruptionException";
namespace java::nio::channels { class GatheringByteChannel; }
template<> constexpr auto signature<::java::nio::channels::GatheringByteChannel> = ::java_nio_channels / "GatheringByteChannel";
namespace java::nio::channels { class IllegalBlockingModeException; }
template<> constexpr auto signature<::java::nio::channels::IllegalBlockingModeException> = ::java_nio_channels / "IllegalBlockingModeException";
namespace java::nio::channels { class IllegalChannelGroupException; }
template<> constexpr auto signature<::java::nio::channels::IllegalChannelGroupException> = ::java_nio_channels / "IllegalChannelGroupException";
namespace java::nio::channels { class IllegalSelectorException; }
template<> constexpr auto signature<::java::nio::channels::IllegalSelectorException> = ::java_nio_channels / "IllegalSelectorException";
namespace java::nio::channels { class InterruptedByTimeoutException; }
template<> constexpr auto signature<::java::nio::channels::InterruptedByTimeoutException> = ::java_nio_channels / "InterruptedByTimeoutException";
namespace java::nio::channels { class InterruptibleChannel; }
template<> constexpr auto signature<::java::nio::channels::InterruptibleChannel> = ::java_nio_channels / "InterruptibleChannel";
namespace java::nio::channels { class MembershipKey; }
template<> constexpr auto signature<::java::nio::channels::MembershipKey> = ::java_nio_channels / "MembershipKey";
namespace java::nio::channels { class MulticastChannel; }
template<> constexpr auto signature<::java::nio::channels::MulticastChannel> = ::java_nio_channels / "MulticastChannel";
namespace java::nio::channels { class NetworkChannel; }
template<> constexpr auto signature<::java::nio::channels::NetworkChannel> = ::java_nio_channels / "NetworkChannel";
namespace java::nio::channels { class NoConnectionPendingException; }
template<> constexpr auto signature<::java::nio::channels::NoConnectionPendingException> = ::java_nio_channels / "NoConnectionPendingException";
namespace java::nio::channels { class NonReadableChannelException; }
template<> constexpr auto signature<::java::nio::channels::NonReadableChannelException> = ::java_nio_channels / "NonReadableChannelException";
namespace java::nio::channels { class NonWritableChannelException; }
template<> constexpr auto signature<::java::nio::channels::NonWritableChannelException> = ::java_nio_channels / "NonWritableChannelException";
namespace java::nio::channels { class NotYetBoundException; }
template<> constexpr auto signature<::java::nio::channels::NotYetBoundException> = ::java_nio_channels / "NotYetBoundException";
namespace java::nio::channels { class NotYetConnectedException; }
template<> constexpr auto signature<::java::nio::channels::NotYetConnectedException> = ::java_nio_channels / "NotYetConnectedException";
namespace java::nio::channels { class OverlappingFileLockException; }
template<> constexpr auto signature<::java::nio::channels::OverlappingFileLockException> = ::java_nio_channels / "OverlappingFileLockException";
namespace java::nio::channels { class Pipe; }
template<> constexpr auto signature<::java::nio::channels::Pipe> = ::java_nio_channels / "Pipe";
namespace java::nio::channels { class Pipe$SinkChannel; }
template<> constexpr auto signature<::java::nio::channels::Pipe$SinkChannel> = ::java_nio_channels / "Pipe$SinkChannel";
namespace java::nio::channels { class Pipe$SourceChannel; }
template<> constexpr auto signature<::java::nio::channels::Pipe$SourceChannel> = ::java_nio_channels / "Pipe$SourceChannel";
namespace java::nio::channels { class ReadPendingException; }
template<> constexpr auto signature<::java::nio::channels::ReadPendingException> = ::java_nio_channels / "ReadPendingException";
namespace java::nio::channels { class ReadableByteChannel; }
template<> constexpr auto signature<::java::nio::channels::ReadableByteChannel> = ::java_nio_channels / "ReadableByteChannel";
namespace java::nio::channels { class ScatteringByteChannel; }
template<> constexpr auto signature<::java::nio::channels::ScatteringByteChannel> = ::java_nio_channels / "ScatteringByteChannel";
namespace java::nio::channels { class SeekableByteChannel; }
template<> constexpr auto signature<::java::nio::channels::SeekableByteChannel> = ::java_nio_channels / "SeekableByteChannel";
namespace java::nio::channels { class SelectableChannel; }
template<> constexpr auto signature<::java::nio::channels::SelectableChannel> = ::java_nio_channels / "SelectableChannel";
namespace java::nio::channels { class SelectionKey; }
template<> constexpr auto signature<::java::nio::channels::SelectionKey> = ::java_nio_channels / "SelectionKey";
namespace java::nio::channels { class Selector; }
template<> constexpr auto signature<::java::nio::channels::Selector> = ::java_nio_channels / "Selector";
namespace java::nio::channels { class ServerSocketChannel; }
template<> constexpr auto signature<::java::nio::channels::ServerSocketChannel> = ::java_nio_channels / "ServerSocketChannel";
namespace java::nio::channels { class ShutdownChannelGroupException; }
template<> constexpr auto signature<::java::nio::channels::ShutdownChannelGroupException> = ::java_nio_channels / "ShutdownChannelGroupException";
namespace java::nio::channels { class SocketChannel; }
template<> constexpr auto signature<::java::nio::channels::SocketChannel> = ::java_nio_channels / "SocketChannel";
namespace java::nio::channels { class UnresolvedAddressException; }
template<> constexpr auto signature<::java::nio::channels::UnresolvedAddressException> = ::java_nio_channels / "UnresolvedAddressException";
namespace java::nio::channels { class UnsupportedAddressTypeException; }
template<> constexpr auto signature<::java::nio::channels::UnsupportedAddressTypeException> = ::java_nio_channels / "UnsupportedAddressTypeException";
namespace java::nio::channels { class WritableByteChannel; }
template<> constexpr auto signature<::java::nio::channels::WritableByteChannel> = ::java_nio_channels / "WritableByteChannel";
namespace java::nio::channels { class WritePendingException; }
template<> constexpr auto signature<::java::nio::channels::WritePendingException> = ::java_nio_channels / "WritePendingException";
namespace java::nio::channels::spi { class AbstractInterruptibleChannel; }
template<> constexpr auto signature<::java::nio::channels::spi::AbstractInterruptibleChannel> = ::java_nio_channels_spi / "AbstractInterruptibleChannel";
namespace java::nio::channels::spi { class AbstractInterruptibleChannel$1; }
template<> constexpr auto signature<::java::nio::channels::spi::AbstractInterruptibleChannel$1> = ::java_nio_channels_spi / "AbstractInterruptibleChannel$1";
namespace java::nio::channels::spi { class AbstractSelectableChannel; }
template<> constexpr auto signature<::java::nio::channels::spi::AbstractSelectableChannel> = ::java_nio_channels_spi / "AbstractSelectableChannel";
namespace java::nio::channels::spi { class AbstractSelectionKey; }
template<> constexpr auto signature<::java::nio::channels::spi::AbstractSelectionKey> = ::java_nio_channels_spi / "AbstractSelectionKey";
namespace java::nio::channels::spi { class AbstractSelector; }
template<> constexpr auto signature<::java::nio::channels::spi::AbstractSelector> = ::java_nio_channels_spi / "AbstractSelector";
namespace java::nio::channels::spi { class AbstractSelector$1; }
template<> constexpr auto signature<::java::nio::channels::spi::AbstractSelector$1> = ::java_nio_channels_spi / "AbstractSelector$1";
namespace java::nio::channels::spi { class AsynchronousChannelProvider; }
template<> constexpr auto signature<::java::nio::channels::spi::AsynchronousChannelProvider> = ::java_nio_channels_spi / "AsynchronousChannelProvider";
namespace java::nio::channels::spi { class AsynchronousChannelProvider$ProviderHolder; }
template<> constexpr auto signature<::java::nio::channels::spi::AsynchronousChannelProvider$ProviderHolder> = ::java_nio_channels_spi / "AsynchronousChannelProvider$ProviderHolder";
namespace java::nio::channels::spi { class AsynchronousChannelProvider$ProviderHolder$1; }
template<> constexpr auto signature<::java::nio::channels::spi::AsynchronousChannelProvider$ProviderHolder$1> = ::java_nio_channels_spi / "AsynchronousChannelProvider$ProviderHolder$1";
namespace java::nio::channels::spi { class SelectorProvider; }
template<> constexpr auto signature<::java::nio::channels::spi::SelectorProvider> = ::java_nio_channels_spi / "SelectorProvider";
namespace java::nio::channels::spi { class SelectorProvider$1; }
template<> constexpr auto signature<::java::nio::channels::spi::SelectorProvider$1> = ::java_nio_channels_spi / "SelectorProvider$1";
namespace java::nio::charset { class CharacterCodingException; }
template<> constexpr auto signature<::java::nio::charset::CharacterCodingException> = ::java_nio_charset / "CharacterCodingException";
namespace java::nio::charset { class Charset; }
template<> constexpr auto signature<::java::nio::charset::Charset> = ::java_nio_charset / "Charset";
namespace java::nio::charset { class Charset$1; }
template<> constexpr auto signature<::java::nio::charset::Charset$1> = ::java_nio_charset / "Charset$1";
namespace java::nio::charset { class Charset$2; }
template<> constexpr auto signature<::java::nio::charset::Charset$2> = ::java_nio_charset / "Charset$2";
namespace java::nio::charset { class Charset$3; }
template<> constexpr auto signature<::java::nio::charset::Charset$3> = ::java_nio_charset / "Charset$3";
namespace java::nio::charset { class Charset$ExtendedProviderHolder; }
template<> constexpr auto signature<::java::nio::charset::Charset$ExtendedProviderHolder> = ::java_nio_charset / "Charset$ExtendedProviderHolder";
namespace java::nio::charset { class Charset$ExtendedProviderHolder$1; }
template<> constexpr auto signature<::java::nio::charset::Charset$ExtendedProviderHolder$1> = ::java_nio_charset / "Charset$ExtendedProviderHolder$1";
namespace java::nio::charset { class CharsetDecoder; }
template<> constexpr auto signature<::java::nio::charset::CharsetDecoder> = ::java_nio_charset / "CharsetDecoder";
namespace java::nio::charset { class CharsetEncoder; }
template<> constexpr auto signature<::java::nio::charset::CharsetEncoder> = ::java_nio_charset / "CharsetEncoder";
namespace java::nio::charset { class CoderMalfunctionError; }
template<> constexpr auto signature<::java::nio::charset::CoderMalfunctionError> = ::java_nio_charset / "CoderMalfunctionError";
namespace java::nio::charset { class CoderResult; }
template<> constexpr auto signature<::java::nio::charset::CoderResult> = ::java_nio_charset / "CoderResult";
namespace java::nio::charset { class CoderResult$1; }
template<> constexpr auto signature<::java::nio::charset::CoderResult$1> = ::java_nio_charset / "CoderResult$1";
namespace java::nio::charset { class CoderResult$2; }
template<> constexpr auto signature<::java::nio::charset::CoderResult$2> = ::java_nio_charset / "CoderResult$2";
namespace java::nio::charset { class CoderResult$Cache; }
template<> constexpr auto signature<::java::nio::charset::CoderResult$Cache> = ::java_nio_charset / "CoderResult$Cache";
namespace java::nio::charset { class CodingErrorAction; }
template<> constexpr auto signature<::java::nio::charset::CodingErrorAction> = ::java_nio_charset / "CodingErrorAction";
namespace java::nio::charset { class IllegalCharsetNameException; }
template<> constexpr auto signature<::java::nio::charset::IllegalCharsetNameException> = ::java_nio_charset / "IllegalCharsetNameException";
namespace java::nio::charset { class MalformedInputException; }
template<> constexpr auto signature<::java::nio::charset::MalformedInputException> = ::java_nio_charset / "MalformedInputException";
namespace java::nio::charset { class StandardCharsets; }
template<> constexpr auto signature<::java::nio::charset::StandardCharsets> = ::java_nio_charset / "StandardCharsets";
namespace java::nio::charset { class UnmappableCharacterException; }
template<> constexpr auto signature<::java::nio::charset::UnmappableCharacterException> = ::java_nio_charset / "UnmappableCharacterException";
namespace java::nio::charset { class UnsupportedCharsetException; }
template<> constexpr auto signature<::java::nio::charset::UnsupportedCharsetException> = ::java_nio_charset / "UnsupportedCharsetException";
namespace java::nio::charset::spi { class CharsetProvider; }
template<> constexpr auto signature<::java::nio::charset::spi::CharsetProvider> = ::java_nio_charset_spi / "CharsetProvider";
namespace java::nio::file { class AccessDeniedException; }
template<> constexpr auto signature<::java::nio::file::AccessDeniedException> = ::java_nio_file / "AccessDeniedException";
namespace java::nio::file { class AccessMode; }
template<> constexpr auto signature<::java::nio::file::AccessMode> = ::java_nio_file / "AccessMode";
namespace java::nio::file { class AtomicMoveNotSupportedException; }
template<> constexpr auto signature<::java::nio::file::AtomicMoveNotSupportedException> = ::java_nio_file / "AtomicMoveNotSupportedException";
namespace java::nio::file { class ClosedDirectoryStreamException; }
template<> constexpr auto signature<::java::nio::file::ClosedDirectoryStreamException> = ::java_nio_file / "ClosedDirectoryStreamException";
namespace java::nio::file { class ClosedFileSystemException; }
template<> constexpr auto signature<::java::nio::file::ClosedFileSystemException> = ::java_nio_file / "ClosedFileSystemException";
namespace java::nio::file { class ClosedWatchServiceException; }
template<> constexpr auto signature<::java::nio::file::ClosedWatchServiceException> = ::java_nio_file / "ClosedWatchServiceException";
namespace java::nio::file { class CopyMoveHelper; }
template<> constexpr auto signature<::java::nio::file::CopyMoveHelper> = ::java_nio_file / "CopyMoveHelper";
namespace java::nio::file { class CopyMoveHelper$CopyOptions; }
template<> constexpr auto signature<::java::nio::file::CopyMoveHelper$CopyOptions> = ::java_nio_file / "CopyMoveHelper$CopyOptions";
namespace java::nio::file { class CopyOption; }
template<> constexpr auto signature<::java::nio::file::CopyOption> = ::java_nio_file / "CopyOption";
namespace java::nio::file { class DirectoryIteratorException; }
template<> constexpr auto signature<::java::nio::file::DirectoryIteratorException> = ::java_nio_file / "DirectoryIteratorException";
namespace java::nio::file { class DirectoryNotEmptyException; }
template<> constexpr auto signature<::java::nio::file::DirectoryNotEmptyException> = ::java_nio_file / "DirectoryNotEmptyException";
namespace java::nio::file { class DirectoryStream; }
template<> constexpr auto signature<::java::nio::file::DirectoryStream> = ::java_nio_file / "DirectoryStream";
namespace java::nio::file { class DirectoryStream$Filter; }
template<> constexpr auto signature<::java::nio::file::DirectoryStream$Filter> = ::java_nio_file / "DirectoryStream$Filter";
namespace java::nio::file { class FileAlreadyExistsException; }
template<> constexpr auto signature<::java::nio::file::FileAlreadyExistsException> = ::java_nio_file / "FileAlreadyExistsException";
namespace java::nio::file { class FileStore; }
template<> constexpr auto signature<::java::nio::file::FileStore> = ::java_nio_file / "FileStore";
namespace java::nio::file { class FileSystem; }
template<> constexpr auto signature<::java::nio::file::FileSystem> = ::java_nio_file / "FileSystem";
namespace java::nio::file { class FileSystemAlreadyExistsException; }
template<> constexpr auto signature<::java::nio::file::FileSystemAlreadyExistsException> = ::java_nio_file / "FileSystemAlreadyExistsException";
namespace java::nio::file { class FileSystemException; }
template<> constexpr auto signature<::java::nio::file::FileSystemException> = ::java_nio_file / "FileSystemException";
namespace java::nio::file { class FileSystemLoopException; }
template<> constexpr auto signature<::java::nio::file::FileSystemLoopException> = ::java_nio_file / "FileSystemLoopException";
namespace java::nio::file { class FileSystemNotFoundException; }
template<> constexpr auto signature<::java::nio::file::FileSystemNotFoundException> = ::java_nio_file / "FileSystemNotFoundException";
namespace java::nio::file { class FileSystems; }
template<> constexpr auto signature<::java::nio::file::FileSystems> = ::java_nio_file / "FileSystems";
namespace java::nio::file { class FileSystems$DefaultFileSystemHolder; }
template<> constexpr auto signature<::java::nio::file::FileSystems$DefaultFileSystemHolder> = ::java_nio_file / "FileSystems$DefaultFileSystemHolder";
namespace java::nio::file { class FileSystems$DefaultFileSystemHolder$1; }
template<> constexpr auto signature<::java::nio::file::FileSystems$DefaultFileSystemHolder$1> = ::java_nio_file / "FileSystems$DefaultFileSystemHolder$1";
namespace java::nio::file { class FileTreeIterator; }
template<> constexpr auto signature<::java::nio::file::FileTreeIterator> = ::java_nio_file / "FileTreeIterator";
namespace java::nio::file { class FileTreeWalker; }
template<> constexpr auto signature<::java::nio::file::FileTreeWalker> = ::java_nio_file / "FileTreeWalker";
namespace java::nio::file { class FileTreeWalker$1; }
template<> constexpr auto signature<::java::nio::file::FileTreeWalker$1> = ::java_nio_file / "FileTreeWalker$1";
namespace java::nio::file { class FileTreeWalker$DirectoryNode; }
template<> constexpr auto signature<::java::nio::file::FileTreeWalker$DirectoryNode> = ::java_nio_file / "FileTreeWalker$DirectoryNode";
namespace java::nio::file { class FileTreeWalker$Event; }
template<> constexpr auto signature<::java::nio::file::FileTreeWalker$Event> = ::java_nio_file / "FileTreeWalker$Event";
namespace java::nio::file { class FileTreeWalker$EventType; }
template<> constexpr auto signature<::java::nio::file::FileTreeWalker$EventType> = ::java_nio_file / "FileTreeWalker$EventType";
namespace java::nio::file { class FileVisitOption; }
template<> constexpr auto signature<::java::nio::file::FileVisitOption> = ::java_nio_file / "FileVisitOption";
namespace java::nio::file { class FileVisitResult; }
template<> constexpr auto signature<::java::nio::file::FileVisitResult> = ::java_nio_file / "FileVisitResult";
namespace java::nio::file { class FileVisitor; }
template<> constexpr auto signature<::java::nio::file::FileVisitor> = ::java_nio_file / "FileVisitor";
namespace java::nio::file { class Files; }
template<> constexpr auto signature<::java::nio::file::Files> = ::java_nio_file / "Files";
namespace java::nio::file { class Files$1; }
template<> constexpr auto signature<::java::nio::file::Files$1> = ::java_nio_file / "Files$1";
namespace java::nio::file { class Files$2; }
template<> constexpr auto signature<::java::nio::file::Files$2> = ::java_nio_file / "Files$2";
namespace java::nio::file { class Files$3; }
template<> constexpr auto signature<::java::nio::file::Files$3> = ::java_nio_file / "Files$3";
namespace java::nio::file { class Files$AcceptAllFilter; }
template<> constexpr auto signature<::java::nio::file::Files$AcceptAllFilter> = ::java_nio_file / "Files$AcceptAllFilter";
namespace java::nio::file { class Files$FileTypeDetectors; }
template<> constexpr auto signature<::java::nio::file::Files$FileTypeDetectors> = ::java_nio_file / "Files$FileTypeDetectors";
namespace java::nio::file { class Files$FileTypeDetectors$1; }
template<> constexpr auto signature<::java::nio::file::Files$FileTypeDetectors$1> = ::java_nio_file / "Files$FileTypeDetectors$1";
namespace java::nio::file { class Files$FileTypeDetectors$2; }
template<> constexpr auto signature<::java::nio::file::Files$FileTypeDetectors$2> = ::java_nio_file / "Files$FileTypeDetectors$2";
namespace java::nio::file { class InvalidPathException; }
template<> constexpr auto signature<::java::nio::file::InvalidPathException> = ::java_nio_file / "InvalidPathException";
namespace java::nio::file { class LinkOption; }
template<> constexpr auto signature<::java::nio::file::LinkOption> = ::java_nio_file / "LinkOption";
namespace java::nio::file { class LinkPermission; }
template<> constexpr auto signature<::java::nio::file::LinkPermission> = ::java_nio_file / "LinkPermission";
namespace java::nio::file { class NoSuchFileException; }
template<> constexpr auto signature<::java::nio::file::NoSuchFileException> = ::java_nio_file / "NoSuchFileException";
namespace java::nio::file { class NotDirectoryException; }
template<> constexpr auto signature<::java::nio::file::NotDirectoryException> = ::java_nio_file / "NotDirectoryException";
namespace java::nio::file { class NotLinkException; }
template<> constexpr auto signature<::java::nio::file::NotLinkException> = ::java_nio_file / "NotLinkException";
namespace java::nio::file { class OpenOption; }
template<> constexpr auto signature<::java::nio::file::OpenOption> = ::java_nio_file / "OpenOption";
namespace java::nio::file { class Path; }
template<> constexpr auto signature<::java::nio::file::Path> = ::java_nio_file / "Path";
namespace java::nio::file { class PathMatcher; }
template<> constexpr auto signature<::java::nio::file::PathMatcher> = ::java_nio_file / "PathMatcher";
namespace java::nio::file { class Paths; }
template<> constexpr auto signature<::java::nio::file::Paths> = ::java_nio_file / "Paths";
namespace java::nio::file { class ProviderMismatchException; }
template<> constexpr auto signature<::java::nio::file::ProviderMismatchException> = ::java_nio_file / "ProviderMismatchException";
namespace java::nio::file { class ProviderNotFoundException; }
template<> constexpr auto signature<::java::nio::file::ProviderNotFoundException> = ::java_nio_file / "ProviderNotFoundException";
namespace java::nio::file { class ReadOnlyFileSystemException; }
template<> constexpr auto signature<::java::nio::file::ReadOnlyFileSystemException> = ::java_nio_file / "ReadOnlyFileSystemException";
namespace java::nio::file { class SecureDirectoryStream; }
template<> constexpr auto signature<::java::nio::file::SecureDirectoryStream> = ::java_nio_file / "SecureDirectoryStream";
namespace java::nio::file { class SimpleFileVisitor; }
template<> constexpr auto signature<::java::nio::file::SimpleFileVisitor> = ::java_nio_file / "SimpleFileVisitor";
namespace java::nio::file { class StandardCopyOption; }
template<> constexpr auto signature<::java::nio::file::StandardCopyOption> = ::java_nio_file / "StandardCopyOption";
namespace java::nio::file { class StandardOpenOption; }
template<> constexpr auto signature<::java::nio::file::StandardOpenOption> = ::java_nio_file / "StandardOpenOption";
namespace java::nio::file { class StandardWatchEventKinds; }
template<> constexpr auto signature<::java::nio::file::StandardWatchEventKinds> = ::java_nio_file / "StandardWatchEventKinds";
namespace java::nio::file { class StandardWatchEventKinds$StdWatchEventKind; }
template<> constexpr auto signature<::java::nio::file::StandardWatchEventKinds$StdWatchEventKind> = ::java_nio_file / "StandardWatchEventKinds$StdWatchEventKind";
namespace java::nio::file { class TempFileHelper; }
template<> constexpr auto signature<::java::nio::file::TempFileHelper> = ::java_nio_file / "TempFileHelper";
namespace java::nio::file { class TempFileHelper$PosixPermissions; }
template<> constexpr auto signature<::java::nio::file::TempFileHelper$PosixPermissions> = ::java_nio_file / "TempFileHelper$PosixPermissions";
namespace java::nio::file { class WatchEvent; }
template<> constexpr auto signature<::java::nio::file::WatchEvent> = ::java_nio_file / "WatchEvent";
namespace java::nio::file { class WatchEvent$Kind; }
template<> constexpr auto signature<::java::nio::file::WatchEvent$Kind> = ::java_nio_file / "WatchEvent$Kind";
namespace java::nio::file { class WatchEvent$Modifier; }
template<> constexpr auto signature<::java::nio::file::WatchEvent$Modifier> = ::java_nio_file / "WatchEvent$Modifier";
namespace java::nio::file { class WatchKey; }
template<> constexpr auto signature<::java::nio::file::WatchKey> = ::java_nio_file / "WatchKey";
namespace java::nio::file { class WatchService; }
template<> constexpr auto signature<::java::nio::file::WatchService> = ::java_nio_file / "WatchService";
namespace java::nio::file { class Watchable; }
template<> constexpr auto signature<::java::nio::file::Watchable> = ::java_nio_file / "Watchable";
namespace java::nio::file::attribute { class AclEntry; }
template<> constexpr auto signature<::java::nio::file::attribute::AclEntry> = ::java_nio_file_attribute / "AclEntry";
namespace java::nio::file::attribute { class AclEntry$1; }
template<> constexpr auto signature<::java::nio::file::attribute::AclEntry$1> = ::java_nio_file_attribute / "AclEntry$1";
namespace java::nio::file::attribute { class AclEntry$Builder; }
template<> constexpr auto signature<::java::nio::file::attribute::AclEntry$Builder> = ::java_nio_file_attribute / "AclEntry$Builder";
namespace java::nio::file::attribute { class AclEntryFlag; }
template<> constexpr auto signature<::java::nio::file::attribute::AclEntryFlag> = ::java_nio_file_attribute / "AclEntryFlag";
namespace java::nio::file::attribute { class AclEntryPermission; }
template<> constexpr auto signature<::java::nio::file::attribute::AclEntryPermission> = ::java_nio_file_attribute / "AclEntryPermission";
namespace java::nio::file::attribute { class AclEntryType; }
template<> constexpr auto signature<::java::nio::file::attribute::AclEntryType> = ::java_nio_file_attribute / "AclEntryType";
namespace java::nio::file::attribute { class AclFileAttributeView; }
template<> constexpr auto signature<::java::nio::file::attribute::AclFileAttributeView> = ::java_nio_file_attribute / "AclFileAttributeView";
namespace java::nio::file::attribute { class AttributeView; }
template<> constexpr auto signature<::java::nio::file::attribute::AttributeView> = ::java_nio_file_attribute / "AttributeView";
namespace java::nio::file::attribute { class BasicFileAttributeView; }
template<> constexpr auto signature<::java::nio::file::attribute::BasicFileAttributeView> = ::java_nio_file_attribute / "BasicFileAttributeView";
namespace java::nio::file::attribute { class BasicFileAttributes; }
template<> constexpr auto signature<::java::nio::file::attribute::BasicFileAttributes> = ::java_nio_file_attribute / "BasicFileAttributes";
namespace java::nio::file::attribute { class DosFileAttributeView; }
template<> constexpr auto signature<::java::nio::file::attribute::DosFileAttributeView> = ::java_nio_file_attribute / "DosFileAttributeView";
namespace java::nio::file::attribute { class DosFileAttributes; }
template<> constexpr auto signature<::java::nio::file::attribute::DosFileAttributes> = ::java_nio_file_attribute / "DosFileAttributes";
namespace java::nio::file::attribute { class FileAttribute; }
template<> constexpr auto signature<::java::nio::file::attribute::FileAttribute> = ::java_nio_file_attribute / "FileAttribute";
namespace java::nio::file::attribute { class FileAttributeView; }
template<> constexpr auto signature<::java::nio::file::attribute::FileAttributeView> = ::java_nio_file_attribute / "FileAttributeView";
namespace java::nio::file::attribute { class FileOwnerAttributeView; }
template<> constexpr auto signature<::java::nio::file::attribute::FileOwnerAttributeView> = ::java_nio_file_attribute / "FileOwnerAttributeView";
namespace java::nio::file::attribute { class FileStoreAttributeView; }
template<> constexpr auto signature<::java::nio::file::attribute::FileStoreAttributeView> = ::java_nio_file_attribute / "FileStoreAttributeView";
namespace java::nio::file::attribute { class FileTime; }
template<> constexpr auto signature<::java::nio::file::attribute::FileTime> = ::java_nio_file_attribute / "FileTime";
namespace java::nio::file::attribute { class FileTime$1; }
template<> constexpr auto signature<::java::nio::file::attribute::FileTime$1> = ::java_nio_file_attribute / "FileTime$1";
namespace java::nio::file::attribute { class GroupPrincipal; }
template<> constexpr auto signature<::java::nio::file::attribute::GroupPrincipal> = ::java_nio_file_attribute / "GroupPrincipal";
namespace java::nio::file::attribute { class PosixFileAttributeView; }
template<> constexpr auto signature<::java::nio::file::attribute::PosixFileAttributeView> = ::java_nio_file_attribute / "PosixFileAttributeView";
namespace java::nio::file::attribute { class PosixFileAttributes; }
template<> constexpr auto signature<::java::nio::file::attribute::PosixFileAttributes> = ::java_nio_file_attribute / "PosixFileAttributes";
namespace java::nio::file::attribute { class PosixFilePermission; }
template<> constexpr auto signature<::java::nio::file::attribute::PosixFilePermission> = ::java_nio_file_attribute / "PosixFilePermission";
namespace java::nio::file::attribute { class PosixFilePermissions; }
template<> constexpr auto signature<::java::nio::file::attribute::PosixFilePermissions> = ::java_nio_file_attribute / "PosixFilePermissions";
namespace java::nio::file::attribute { class PosixFilePermissions$1; }
template<> constexpr auto signature<::java::nio::file::attribute::PosixFilePermissions$1> = ::java_nio_file_attribute / "PosixFilePermissions$1";
namespace java::nio::file::attribute { class UserDefinedFileAttributeView; }
template<> constexpr auto signature<::java::nio::file::attribute::UserDefinedFileAttributeView> = ::java_nio_file_attribute / "UserDefinedFileAttributeView";
namespace java::nio::file::attribute { class UserPrincipal; }
template<> constexpr auto signature<::java::nio::file::attribute::UserPrincipal> = ::java_nio_file_attribute / "UserPrincipal";
namespace java::nio::file::attribute { class UserPrincipalLookupService; }
template<> constexpr auto signature<::java::nio::file::attribute::UserPrincipalLookupService> = ::java_nio_file_attribute / "UserPrincipalLookupService";
namespace java::nio::file::attribute { class UserPrincipalNotFoundException; }
template<> constexpr auto signature<::java::nio::file::attribute::UserPrincipalNotFoundException> = ::java_nio_file_attribute / "UserPrincipalNotFoundException";
namespace java::nio::file::spi { class FileSystemProvider; }
template<> constexpr auto signature<::java::nio::file::spi::FileSystemProvider> = ::java_nio_file_spi / "FileSystemProvider";
namespace java::nio::file::spi { class FileSystemProvider$1; }
template<> constexpr auto signature<::java::nio::file::spi::FileSystemProvider$1> = ::java_nio_file_spi / "FileSystemProvider$1";
namespace java::nio::file::spi { class FileTypeDetector; }
template<> constexpr auto signature<::java::nio::file::spi::FileTypeDetector> = ::java_nio_file_spi / "FileTypeDetector";
namespace java::rmi { class AccessException; }
template<> constexpr auto signature<::java::rmi::AccessException> = ::java_rmi / "AccessException";
namespace java::rmi { class AlreadyBoundException; }
template<> constexpr auto signature<::java::rmi::AlreadyBoundException> = ::java_rmi / "AlreadyBoundException";
namespace java::rmi { class ConnectException; }
template<> constexpr auto signature<::java::rmi::ConnectException> = ::java_rmi / "ConnectException";
namespace java::rmi { class ConnectIOException; }
template<> constexpr auto signature<::java::rmi::ConnectIOException> = ::java_rmi / "ConnectIOException";
namespace java::rmi { class MarshalException; }
template<> constexpr auto signature<::java::rmi::MarshalException> = ::java_rmi / "MarshalException";
namespace java::rmi { class MarshalledObject; }
template<> constexpr auto signature<::java::rmi::MarshalledObject> = ::java_rmi / "MarshalledObject";
namespace java::rmi { class MarshalledObject$MarshalledObjectInputStream; }
template<> constexpr auto signature<::java::rmi::MarshalledObject$MarshalledObjectInputStream> = ::java_rmi / "MarshalledObject$MarshalledObjectInputStream";
namespace java::rmi { class MarshalledObject$MarshalledObjectInputStream$1; }
template<> constexpr auto signature<::java::rmi::MarshalledObject$MarshalledObjectInputStream$1> = ::java_rmi / "MarshalledObject$MarshalledObjectInputStream$1";
namespace java::rmi { class MarshalledObject$MarshalledObjectOutputStream; }
template<> constexpr auto signature<::java::rmi::MarshalledObject$MarshalledObjectOutputStream> = ::java_rmi / "MarshalledObject$MarshalledObjectOutputStream";
namespace java::rmi { class Naming; }
template<> constexpr auto signature<::java::rmi::Naming> = ::java_rmi / "Naming";
namespace java::rmi { class Naming$ParsedNamingURL; }
template<> constexpr auto signature<::java::rmi::Naming$ParsedNamingURL> = ::java_rmi / "Naming$ParsedNamingURL";
namespace java::rmi { class NoSuchObjectException; }
template<> constexpr auto signature<::java::rmi::NoSuchObjectException> = ::java_rmi / "NoSuchObjectException";
namespace java::rmi { class NotBoundException; }
template<> constexpr auto signature<::java::rmi::NotBoundException> = ::java_rmi / "NotBoundException";
namespace java::rmi { class RMISecurityException; }
template<> constexpr auto signature<::java::rmi::RMISecurityException> = ::java_rmi / "RMISecurityException";
namespace java::rmi { class RMISecurityManager; }
template<> constexpr auto signature<::java::rmi::RMISecurityManager> = ::java_rmi / "RMISecurityManager";
namespace java::rmi { class Remote; }
template<> constexpr auto signature<::java::rmi::Remote> = ::java_rmi / "Remote";
namespace java::rmi { class RemoteException; }
template<> constexpr auto signature<::java::rmi::RemoteException> = ::java_rmi / "RemoteException";
namespace java::rmi { class ServerError; }
template<> constexpr auto signature<::java::rmi::ServerError> = ::java_rmi / "ServerError";
namespace java::rmi { class ServerException; }
template<> constexpr auto signature<::java::rmi::ServerException> = ::java_rmi / "ServerException";
namespace java::rmi { class ServerRuntimeException; }
template<> constexpr auto signature<::java::rmi::ServerRuntimeException> = ::java_rmi / "ServerRuntimeException";
namespace java::rmi { class StubNotFoundException; }
template<> constexpr auto signature<::java::rmi::StubNotFoundException> = ::java_rmi / "StubNotFoundException";
namespace java::rmi { class UnexpectedException; }
template<> constexpr auto signature<::java::rmi::UnexpectedException> = ::java_rmi / "UnexpectedException";
namespace java::rmi { class UnknownHostException; }
template<> constexpr auto signature<::java::rmi::UnknownHostException> = ::java_rmi / "UnknownHostException";
namespace java::rmi { class UnmarshalException; }
template<> constexpr auto signature<::java::rmi::UnmarshalException> = ::java_rmi / "UnmarshalException";
namespace java::rmi::activation { class Activatable; }
template<> constexpr auto signature<::java::rmi::activation::Activatable> = ::java_rmi_activation / "Activatable";
namespace java::rmi::activation { class ActivateFailedException; }
template<> constexpr auto signature<::java::rmi::activation::ActivateFailedException> = ::java_rmi_activation / "ActivateFailedException";
namespace java::rmi::activation { class ActivationDesc; }
template<> constexpr auto signature<::java::rmi::activation::ActivationDesc> = ::java_rmi_activation / "ActivationDesc";
namespace java::rmi::activation { class ActivationException; }
template<> constexpr auto signature<::java::rmi::activation::ActivationException> = ::java_rmi_activation / "ActivationException";
namespace java::rmi::activation { class ActivationGroup; }
template<> constexpr auto signature<::java::rmi::activation::ActivationGroup> = ::java_rmi_activation / "ActivationGroup";
namespace java::rmi::activation { class ActivationGroupDesc; }
template<> constexpr auto signature<::java::rmi::activation::ActivationGroupDesc> = ::java_rmi_activation / "ActivationGroupDesc";
namespace java::rmi::activation { class ActivationGroupDesc$CommandEnvironment; }
template<> constexpr auto signature<::java::rmi::activation::ActivationGroupDesc$CommandEnvironment> = ::java_rmi_activation / "ActivationGroupDesc$CommandEnvironment";
namespace java::rmi::activation { class ActivationGroupID; }
template<> constexpr auto signature<::java::rmi::activation::ActivationGroupID> = ::java_rmi_activation / "ActivationGroupID";
namespace java::rmi::activation { class ActivationGroup_Stub; }
template<> constexpr auto signature<::java::rmi::activation::ActivationGroup_Stub> = ::java_rmi_activation / "ActivationGroup_Stub";
namespace java::rmi::activation { class ActivationID; }
template<> constexpr auto signature<::java::rmi::activation::ActivationID> = ::java_rmi_activation / "ActivationID";
namespace java::rmi::activation { class ActivationID$1; }
template<> constexpr auto signature<::java::rmi::activation::ActivationID$1> = ::java_rmi_activation / "ActivationID$1";
namespace java::rmi::activation { class ActivationInstantiator; }
template<> constexpr auto signature<::java::rmi::activation::ActivationInstantiator> = ::java_rmi_activation / "ActivationInstantiator";
namespace java::rmi::activation { class ActivationMonitor; }
template<> constexpr auto signature<::java::rmi::activation::ActivationMonitor> = ::java_rmi_activation / "ActivationMonitor";
namespace java::rmi::activation { class ActivationSystem; }
template<> constexpr auto signature<::java::rmi::activation::ActivationSystem> = ::java_rmi_activation / "ActivationSystem";
namespace java::rmi::activation { class Activator; }
template<> constexpr auto signature<::java::rmi::activation::Activator> = ::java_rmi_activation / "Activator";
namespace java::rmi::activation { class UnknownGroupException; }
template<> constexpr auto signature<::java::rmi::activation::UnknownGroupException> = ::java_rmi_activation / "UnknownGroupException";
namespace java::rmi::activation { class UnknownObjectException; }
template<> constexpr auto signature<::java::rmi::activation::UnknownObjectException> = ::java_rmi_activation / "UnknownObjectException";
namespace java::rmi::dgc { class DGC; }
template<> constexpr auto signature<::java::rmi::dgc::DGC> = ::java_rmi_dgc / "DGC";
namespace java::rmi::dgc { class Lease; }
template<> constexpr auto signature<::java::rmi::dgc::Lease> = ::java_rmi_dgc / "Lease";
namespace java::rmi::dgc { class VMID; }
template<> constexpr auto signature<::java::rmi::dgc::VMID> = ::java_rmi_dgc / "VMID";
namespace java::rmi::registry { class LocateRegistry; }
template<> constexpr auto signature<::java::rmi::registry::LocateRegistry> = ::java_rmi_registry / "LocateRegistry";
namespace java::rmi::registry { class Registry; }
template<> constexpr auto signature<::java::rmi::registry::Registry> = ::java_rmi_registry / "Registry";
namespace java::rmi::registry { class RegistryHandler; }
template<> constexpr auto signature<::java::rmi::registry::RegistryHandler> = ::java_rmi_registry / "RegistryHandler";
namespace java::rmi::server { class ExportException; }
template<> constexpr auto signature<::java::rmi::server::ExportException> = ::java_rmi_server / "ExportException";
namespace java::rmi::server { class LoaderHandler; }
template<> constexpr auto signature<::java::rmi::server::LoaderHandler> = ::java_rmi_server / "LoaderHandler";
namespace java::rmi::server { class LogStream; }
template<> constexpr auto signature<::java::rmi::server::LogStream> = ::java_rmi_server / "LogStream";
namespace java::rmi::server { class ObjID; }
template<> constexpr auto signature<::java::rmi::server::ObjID> = ::java_rmi_server / "ObjID";
namespace java::rmi::server { class Operation; }
template<> constexpr auto signature<::java::rmi::server::Operation> = ::java_rmi_server / "Operation";
namespace java::rmi::server { class RMIClassLoader; }
template<> constexpr auto signature<::java::rmi::server::RMIClassLoader> = ::java_rmi_server / "RMIClassLoader";
namespace java::rmi::server { class RMIClassLoader$1; }
template<> constexpr auto signature<::java::rmi::server::RMIClassLoader$1> = ::java_rmi_server / "RMIClassLoader$1";
namespace java::rmi::server { class RMIClassLoader$2; }
template<> constexpr auto signature<::java::rmi::server::RMIClassLoader$2> = ::java_rmi_server / "RMIClassLoader$2";
namespace java::rmi::server { class RMIClassLoaderSpi; }
template<> constexpr auto signature<::java::rmi::server::RMIClassLoaderSpi> = ::java_rmi_server / "RMIClassLoaderSpi";
namespace java::rmi::server { class RMIClientSocketFactory; }
template<> constexpr auto signature<::java::rmi::server::RMIClientSocketFactory> = ::java_rmi_server / "RMIClientSocketFactory";
namespace java::rmi::server { class RMIFailureHandler; }
template<> constexpr auto signature<::java::rmi::server::RMIFailureHandler> = ::java_rmi_server / "RMIFailureHandler";
namespace java::rmi::server { class RMIServerSocketFactory; }
template<> constexpr auto signature<::java::rmi::server::RMIServerSocketFactory> = ::java_rmi_server / "RMIServerSocketFactory";
namespace java::rmi::server { class RMISocketFactory; }
template<> constexpr auto signature<::java::rmi::server::RMISocketFactory> = ::java_rmi_server / "RMISocketFactory";
namespace java::rmi::server { class RemoteCall; }
template<> constexpr auto signature<::java::rmi::server::RemoteCall> = ::java_rmi_server / "RemoteCall";
namespace java::rmi::server { class RemoteObject; }
template<> constexpr auto signature<::java::rmi::server::RemoteObject> = ::java_rmi_server / "RemoteObject";
namespace java::rmi::server { class RemoteObjectInvocationHandler; }
template<> constexpr auto signature<::java::rmi::server::RemoteObjectInvocationHandler> = ::java_rmi_server / "RemoteObjectInvocationHandler";
namespace java::rmi::server { class RemoteObjectInvocationHandler$1; }
template<> constexpr auto signature<::java::rmi::server::RemoteObjectInvocationHandler$1> = ::java_rmi_server / "RemoteObjectInvocationHandler$1";
namespace java::rmi::server { class RemoteObjectInvocationHandler$MethodToHash_Maps; }
template<> constexpr auto signature<::java::rmi::server::RemoteObjectInvocationHandler$MethodToHash_Maps> = ::java_rmi_server / "RemoteObjectInvocationHandler$MethodToHash_Maps";
namespace java::rmi::server { class RemoteObjectInvocationHandler$MethodToHash_Maps$1; }
template<> constexpr auto signature<::java::rmi::server::RemoteObjectInvocationHandler$MethodToHash_Maps$1> = ::java_rmi_server / "RemoteObjectInvocationHandler$MethodToHash_Maps$1";
namespace java::rmi::server { class RemoteRef; }
template<> constexpr auto signature<::java::rmi::server::RemoteRef> = ::java_rmi_server / "RemoteRef";
namespace java::rmi::server { class RemoteServer; }
template<> constexpr auto signature<::java::rmi::server::RemoteServer> = ::java_rmi_server / "RemoteServer";
namespace java::rmi::server { class RemoteStub; }
template<> constexpr auto signature<::java::rmi::server::RemoteStub> = ::java_rmi_server / "RemoteStub";
namespace java::rmi::server { class ServerCloneException; }
template<> constexpr auto signature<::java::rmi::server::ServerCloneException> = ::java_rmi_server / "ServerCloneException";
namespace java::rmi::server { class ServerNotActiveException; }
template<> constexpr auto signature<::java::rmi::server::ServerNotActiveException> = ::java_rmi_server / "ServerNotActiveException";
namespace java::rmi::server { class ServerRef; }
template<> constexpr auto signature<::java::rmi::server::ServerRef> = ::java_rmi_server / "ServerRef";
namespace java::rmi::server { class Skeleton; }
template<> constexpr auto signature<::java::rmi::server::Skeleton> = ::java_rmi_server / "Skeleton";
namespace java::rmi::server { class SkeletonMismatchException; }
template<> constexpr auto signature<::java::rmi::server::SkeletonMismatchException> = ::java_rmi_server / "SkeletonMismatchException";
namespace java::rmi::server { class SkeletonNotFoundException; }
template<> constexpr auto signature<::java::rmi::server::SkeletonNotFoundException> = ::java_rmi_server / "SkeletonNotFoundException";
namespace java::rmi::server { class SocketSecurityException; }
template<> constexpr auto signature<::java::rmi::server::SocketSecurityException> = ::java_rmi_server / "SocketSecurityException";
namespace java::rmi::server { class UID; }
template<> constexpr auto signature<::java::rmi::server::UID> = ::java_rmi_server / "UID";
namespace java::rmi::server { class UnicastRemoteObject; }
template<> constexpr auto signature<::java::rmi::server::UnicastRemoteObject> = ::java_rmi_server / "UnicastRemoteObject";
namespace java::rmi::server { class Unreferenced; }
template<> constexpr auto signature<::java::rmi::server::Unreferenced> = ::java_rmi_server / "Unreferenced";
namespace java::security { class AccessControlContext; }
template<> constexpr auto signature<::java::security::AccessControlContext> = ::java_security / "AccessControlContext";
namespace java::security { class AccessControlContext$1; }
template<> constexpr auto signature<::java::security::AccessControlContext$1> = ::java_security / "AccessControlContext$1";
namespace java::security { class AccessControlException; }
template<> constexpr auto signature<::java::security::AccessControlException> = ::java_security / "AccessControlException";
namespace java::security { class AccessController; }
template<> constexpr auto signature<::java::security::AccessController> = ::java_security / "AccessController";
namespace java::security { class AccessController$1; }
template<> constexpr auto signature<::java::security::AccessController$1> = ::java_security / "AccessController$1";
namespace java::security { class AlgorithmConstraints; }
template<> constexpr auto signature<::java::security::AlgorithmConstraints> = ::java_security / "AlgorithmConstraints";
namespace java::security { class AlgorithmParameterGenerator; }
template<> constexpr auto signature<::java::security::AlgorithmParameterGenerator> = ::java_security / "AlgorithmParameterGenerator";
namespace java::security { class AlgorithmParameterGeneratorSpi; }
template<> constexpr auto signature<::java::security::AlgorithmParameterGeneratorSpi> = ::java_security / "AlgorithmParameterGeneratorSpi";
namespace java::security { class AlgorithmParameters; }
template<> constexpr auto signature<::java::security::AlgorithmParameters> = ::java_security / "AlgorithmParameters";
namespace java::security { class AlgorithmParametersSpi; }
template<> constexpr auto signature<::java::security::AlgorithmParametersSpi> = ::java_security / "AlgorithmParametersSpi";
namespace java::security { class AllPermission; }
template<> constexpr auto signature<::java::security::AllPermission> = ::java_security / "AllPermission";
namespace java::security { class AllPermissionCollection; }
template<> constexpr auto signature<::java::security::AllPermissionCollection> = ::java_security / "AllPermissionCollection";
namespace java::security { class AllPermissionCollection$1; }
template<> constexpr auto signature<::java::security::AllPermissionCollection$1> = ::java_security / "AllPermissionCollection$1";
namespace java::security { class AuthProvider; }
template<> constexpr auto signature<::java::security::AuthProvider> = ::java_security / "AuthProvider";
namespace java::security { class BasicPermission; }
template<> constexpr auto signature<::java::security::BasicPermission> = ::java_security / "BasicPermission";
namespace java::security { class BasicPermissionCollection; }
template<> constexpr auto signature<::java::security::BasicPermissionCollection> = ::java_security / "BasicPermissionCollection";
namespace java::security { class Certificate; }
template<> constexpr auto signature<::java::security::Certificate> = ::java_security / "Certificate";
namespace java::security { class CodeSigner; }
template<> constexpr auto signature<::java::security::CodeSigner> = ::java_security / "CodeSigner";
namespace java::security { class CodeSource; }
template<> constexpr auto signature<::java::security::CodeSource> = ::java_security / "CodeSource";
namespace java::security { class CryptoPrimitive; }
template<> constexpr auto signature<::java::security::CryptoPrimitive> = ::java_security / "CryptoPrimitive";
namespace java::security { class DigestException; }
template<> constexpr auto signature<::java::security::DigestException> = ::java_security / "DigestException";
namespace java::security { class DigestInputStream; }
template<> constexpr auto signature<::java::security::DigestInputStream> = ::java_security / "DigestInputStream";
namespace java::security { class DigestOutputStream; }
template<> constexpr auto signature<::java::security::DigestOutputStream> = ::java_security / "DigestOutputStream";
namespace java::security { class DomainCombiner; }
template<> constexpr auto signature<::java::security::DomainCombiner> = ::java_security / "DomainCombiner";
namespace java::security { class DomainLoadStoreParameter; }
template<> constexpr auto signature<::java::security::DomainLoadStoreParameter> = ::java_security / "DomainLoadStoreParameter";
namespace java::security { class GeneralSecurityException; }
template<> constexpr auto signature<::java::security::GeneralSecurityException> = ::java_security / "GeneralSecurityException";
namespace java::security { class Guard; }
template<> constexpr auto signature<::java::security::Guard> = ::java_security / "Guard";
namespace java::security { class GuardedObject; }
template<> constexpr auto signature<::java::security::GuardedObject> = ::java_security / "GuardedObject";
namespace java::security { class Identity; }
template<> constexpr auto signature<::java::security::Identity> = ::java_security / "Identity";
namespace java::security { class IdentityScope; }
template<> constexpr auto signature<::java::security::IdentityScope> = ::java_security / "IdentityScope";
namespace java::security { class IdentityScope$1; }
template<> constexpr auto signature<::java::security::IdentityScope$1> = ::java_security / "IdentityScope$1";
namespace java::security { class InvalidAlgorithmParameterException; }
template<> constexpr auto signature<::java::security::InvalidAlgorithmParameterException> = ::java_security / "InvalidAlgorithmParameterException";
namespace java::security { class InvalidKeyException; }
template<> constexpr auto signature<::java::security::InvalidKeyException> = ::java_security / "InvalidKeyException";
namespace java::security { class InvalidParameterException; }
template<> constexpr auto signature<::java::security::InvalidParameterException> = ::java_security / "InvalidParameterException";
namespace java::security { class Key; }
template<> constexpr auto signature<::java::security::Key> = ::java_security / "Key";
namespace java::security { class KeyException; }
template<> constexpr auto signature<::java::security::KeyException> = ::java_security / "KeyException";
namespace java::security { class KeyFactory; }
template<> constexpr auto signature<::java::security::KeyFactory> = ::java_security / "KeyFactory";
namespace java::security { class KeyFactorySpi; }
template<> constexpr auto signature<::java::security::KeyFactorySpi> = ::java_security / "KeyFactorySpi";
namespace java::security { class KeyManagementException; }
template<> constexpr auto signature<::java::security::KeyManagementException> = ::java_security / "KeyManagementException";
namespace java::security { class KeyPair; }
template<> constexpr auto signature<::java::security::KeyPair> = ::java_security / "KeyPair";
namespace java::security { class KeyPairGenerator; }
template<> constexpr auto signature<::java::security::KeyPairGenerator> = ::java_security / "KeyPairGenerator";
namespace java::security { class KeyPairGenerator$Delegate; }
template<> constexpr auto signature<::java::security::KeyPairGenerator$Delegate> = ::java_security / "KeyPairGenerator$Delegate";
namespace java::security { class KeyPairGeneratorSpi; }
template<> constexpr auto signature<::java::security::KeyPairGeneratorSpi> = ::java_security / "KeyPairGeneratorSpi";
namespace java::security { class KeyRep; }
template<> constexpr auto signature<::java::security::KeyRep> = ::java_security / "KeyRep";
namespace java::security { class KeyRep$Type; }
template<> constexpr auto signature<::java::security::KeyRep$Type> = ::java_security / "KeyRep$Type";
namespace java::security { class KeyStore; }
template<> constexpr auto signature<::java::security::KeyStore> = ::java_security / "KeyStore";
namespace java::security { class KeyStore$1; }
template<> constexpr auto signature<::java::security::KeyStore$1> = ::java_security / "KeyStore$1";
namespace java::security { class KeyStore$Builder; }
template<> constexpr auto signature<::java::security::KeyStore$Builder> = ::java_security / "KeyStore$Builder";
namespace java::security { class KeyStore$Builder$1; }
template<> constexpr auto signature<::java::security::KeyStore$Builder$1> = ::java_security / "KeyStore$Builder$1";
namespace java::security { class KeyStore$Builder$2; }
template<> constexpr auto signature<::java::security::KeyStore$Builder$2> = ::java_security / "KeyStore$Builder$2";
namespace java::security { class KeyStore$Builder$2$1; }
template<> constexpr auto signature<::java::security::KeyStore$Builder$2$1> = ::java_security / "KeyStore$Builder$2$1";
namespace java::security { class KeyStore$Builder$FileBuilder; }
template<> constexpr auto signature<::java::security::KeyStore$Builder$FileBuilder> = ::java_security / "KeyStore$Builder$FileBuilder";
namespace java::security { class KeyStore$Builder$FileBuilder$1; }
template<> constexpr auto signature<::java::security::KeyStore$Builder$FileBuilder$1> = ::java_security / "KeyStore$Builder$FileBuilder$1";
namespace java::security { class KeyStore$CallbackHandlerProtection; }
template<> constexpr auto signature<::java::security::KeyStore$CallbackHandlerProtection> = ::java_security / "KeyStore$CallbackHandlerProtection";
namespace java::security { class KeyStore$Entry; }
template<> constexpr auto signature<::java::security::KeyStore$Entry> = ::java_security / "KeyStore$Entry";
namespace java::security { class KeyStore$Entry$Attribute; }
template<> constexpr auto signature<::java::security::KeyStore$Entry$Attribute> = ::java_security / "KeyStore$Entry$Attribute";
namespace java::security { class KeyStore$LoadStoreParameter; }
template<> constexpr auto signature<::java::security::KeyStore$LoadStoreParameter> = ::java_security / "KeyStore$LoadStoreParameter";
namespace java::security { class KeyStore$PasswordProtection; }
template<> constexpr auto signature<::java::security::KeyStore$PasswordProtection> = ::java_security / "KeyStore$PasswordProtection";
namespace java::security { class KeyStore$PrivateKeyEntry; }
template<> constexpr auto signature<::java::security::KeyStore$PrivateKeyEntry> = ::java_security / "KeyStore$PrivateKeyEntry";
namespace java::security { class KeyStore$ProtectionParameter; }
template<> constexpr auto signature<::java::security::KeyStore$ProtectionParameter> = ::java_security / "KeyStore$ProtectionParameter";
namespace java::security { class KeyStore$SecretKeyEntry; }
template<> constexpr auto signature<::java::security::KeyStore$SecretKeyEntry> = ::java_security / "KeyStore$SecretKeyEntry";
namespace java::security { class KeyStore$SimpleLoadStoreParameter; }
template<> constexpr auto signature<::java::security::KeyStore$SimpleLoadStoreParameter> = ::java_security / "KeyStore$SimpleLoadStoreParameter";
namespace java::security { class KeyStore$TrustedCertificateEntry; }
template<> constexpr auto signature<::java::security::KeyStore$TrustedCertificateEntry> = ::java_security / "KeyStore$TrustedCertificateEntry";
namespace java::security { class KeyStoreException; }
template<> constexpr auto signature<::java::security::KeyStoreException> = ::java_security / "KeyStoreException";
namespace java::security { class KeyStoreSpi; }
template<> constexpr auto signature<::java::security::KeyStoreSpi> = ::java_security / "KeyStoreSpi";
namespace java::security { class MessageDigest; }
template<> constexpr auto signature<::java::security::MessageDigest> = ::java_security / "MessageDigest";
namespace java::security { class MessageDigest$Delegate; }
template<> constexpr auto signature<::java::security::MessageDigest$Delegate> = ::java_security / "MessageDigest$Delegate";
namespace java::security { class MessageDigestSpi; }
template<> constexpr auto signature<::java::security::MessageDigestSpi> = ::java_security / "MessageDigestSpi";
namespace java::security { class NoSuchAlgorithmException; }
template<> constexpr auto signature<::java::security::NoSuchAlgorithmException> = ::java_security / "NoSuchAlgorithmException";
namespace java::security { class NoSuchProviderException; }
template<> constexpr auto signature<::java::security::NoSuchProviderException> = ::java_security / "NoSuchProviderException";
namespace java::security { class PKCS12Attribute; }
template<> constexpr auto signature<::java::security::PKCS12Attribute> = ::java_security / "PKCS12Attribute";
namespace java::security { class Permission; }
template<> constexpr auto signature<::java::security::Permission> = ::java_security / "Permission";
namespace java::security { class PermissionCollection; }
template<> constexpr auto signature<::java::security::PermissionCollection> = ::java_security / "PermissionCollection";
namespace java::security { class Permissions; }
template<> constexpr auto signature<::java::security::Permissions> = ::java_security / "Permissions";
namespace java::security { class PermissionsEnumerator; }
template<> constexpr auto signature<::java::security::PermissionsEnumerator> = ::java_security / "PermissionsEnumerator";
namespace java::security { class PermissionsHash; }
template<> constexpr auto signature<::java::security::PermissionsHash> = ::java_security / "PermissionsHash";
namespace java::security { class Policy; }
template<> constexpr auto signature<::java::security::Policy> = ::java_security / "Policy";
namespace java::security { class Policy$1; }
template<> constexpr auto signature<::java::security::Policy$1> = ::java_security / "Policy$1";
namespace java::security { class Policy$2; }
template<> constexpr auto signature<::java::security::Policy$2> = ::java_security / "Policy$2";
namespace java::security { class Policy$3; }
template<> constexpr auto signature<::java::security::Policy$3> = ::java_security / "Policy$3";
namespace java::security { class Policy$Parameters; }
template<> constexpr auto signature<::java::security::Policy$Parameters> = ::java_security / "Policy$Parameters";
namespace java::security { class Policy$PolicyDelegate; }
template<> constexpr auto signature<::java::security::Policy$PolicyDelegate> = ::java_security / "Policy$PolicyDelegate";
namespace java::security { class Policy$PolicyInfo; }
template<> constexpr auto signature<::java::security::Policy$PolicyInfo> = ::java_security / "Policy$PolicyInfo";
namespace java::security { class Policy$UnsupportedEmptyCollection; }
template<> constexpr auto signature<::java::security::Policy$UnsupportedEmptyCollection> = ::java_security / "Policy$UnsupportedEmptyCollection";
namespace java::security { class PolicySpi; }
template<> constexpr auto signature<::java::security::PolicySpi> = ::java_security / "PolicySpi";
namespace java::security { class Principal; }
template<> constexpr auto signature<::java::security::Principal> = ::java_security / "Principal";
namespace java::security { class PrivateKey; }
template<> constexpr auto signature<::java::security::PrivateKey> = ::java_security / "PrivateKey";
namespace java::security { class PrivilegedAction; }
template<> constexpr auto signature<::java::security::PrivilegedAction> = ::java_security / "PrivilegedAction";
namespace java::security { class PrivilegedActionException; }
template<> constexpr auto signature<::java::security::PrivilegedActionException> = ::java_security / "PrivilegedActionException";
namespace java::security { class PrivilegedExceptionAction; }
template<> constexpr auto signature<::java::security::PrivilegedExceptionAction> = ::java_security / "PrivilegedExceptionAction";
namespace java::security { class ProtectionDomain; }
template<> constexpr auto signature<::java::security::ProtectionDomain> = ::java_security / "ProtectionDomain";
namespace java::security { class ProtectionDomain$1; }
template<> constexpr auto signature<::java::security::ProtectionDomain$1> = ::java_security / "ProtectionDomain$1";
namespace java::security { class ProtectionDomain$2; }
template<> constexpr auto signature<::java::security::ProtectionDomain$2> = ::java_security / "ProtectionDomain$2";
namespace java::security { class ProtectionDomain$JavaSecurityAccessImpl; }
template<> constexpr auto signature<::java::security::ProtectionDomain$JavaSecurityAccessImpl> = ::java_security / "ProtectionDomain$JavaSecurityAccessImpl";
namespace java::security { class ProtectionDomain$Key; }
template<> constexpr auto signature<::java::security::ProtectionDomain$Key> = ::java_security / "ProtectionDomain$Key";
namespace java::security { class ProtectionDomain$PDCache; }
template<> constexpr auto signature<::java::security::ProtectionDomain$PDCache> = ::java_security / "ProtectionDomain$PDCache";
namespace java::security { class ProtectionDomain$WeakProtectionDomainKey; }
template<> constexpr auto signature<::java::security::ProtectionDomain$WeakProtectionDomainKey> = ::java_security / "ProtectionDomain$WeakProtectionDomainKey";
namespace java::security { class Provider; }
template<> constexpr auto signature<::java::security::Provider> = ::java_security / "Provider";
namespace java::security { class Provider$1; }
template<> constexpr auto signature<::java::security::Provider$1> = ::java_security / "Provider$1";
namespace java::security { class Provider$EngineDescription; }
template<> constexpr auto signature<::java::security::Provider$EngineDescription> = ::java_security / "Provider$EngineDescription";
namespace java::security { class Provider$Service; }
template<> constexpr auto signature<::java::security::Provider$Service> = ::java_security / "Provider$Service";
namespace java::security { class Provider$ServiceKey; }
template<> constexpr auto signature<::java::security::Provider$ServiceKey> = ::java_security / "Provider$ServiceKey";
namespace java::security { class Provider$UString; }
template<> constexpr auto signature<::java::security::Provider$UString> = ::java_security / "Provider$UString";
namespace java::security { class ProviderException; }
template<> constexpr auto signature<::java::security::ProviderException> = ::java_security / "ProviderException";
namespace java::security { class PublicKey; }
template<> constexpr auto signature<::java::security::PublicKey> = ::java_security / "PublicKey";
namespace java::security { class SecureClassLoader; }
template<> constexpr auto signature<::java::security::SecureClassLoader> = ::java_security / "SecureClassLoader";
namespace java::security { class SecureRandom; }
template<> constexpr auto signature<::java::security::SecureRandom> = ::java_security / "SecureRandom";
namespace java::security { class SecureRandom$1; }
template<> constexpr auto signature<::java::security::SecureRandom$1> = ::java_security / "SecureRandom$1";
namespace java::security { class SecureRandom$StrongPatternHolder; }
template<> constexpr auto signature<::java::security::SecureRandom$StrongPatternHolder> = ::java_security / "SecureRandom$StrongPatternHolder";
namespace java::security { class SecureRandomSpi; }
template<> constexpr auto signature<::java::security::SecureRandomSpi> = ::java_security / "SecureRandomSpi";
namespace java::security { class Security; }
template<> constexpr auto signature<::java::security::Security> = ::java_security / "Security";
namespace java::security { class Security$1; }
template<> constexpr auto signature<::java::security::Security$1> = ::java_security / "Security$1";
namespace java::security { class Security$2; }
template<> constexpr auto signature<::java::security::Security$2> = ::java_security / "Security$2";
namespace java::security { class Security$ProviderProperty; }
template<> constexpr auto signature<::java::security::Security$ProviderProperty> = ::java_security / "Security$ProviderProperty";
namespace java::security { class SecurityPermission; }
template<> constexpr auto signature<::java::security::SecurityPermission> = ::java_security / "SecurityPermission";
namespace java::security { class Signature; }
template<> constexpr auto signature<::java::security::Signature> = ::java_security / "Signature";
namespace java::security { class Signature$CipherAdapter; }
template<> constexpr auto signature<::java::security::Signature$CipherAdapter> = ::java_security / "Signature$CipherAdapter";
namespace java::security { class Signature$Delegate; }
template<> constexpr auto signature<::java::security::Signature$Delegate> = ::java_security / "Signature$Delegate";
namespace java::security { class SignatureException; }
template<> constexpr auto signature<::java::security::SignatureException> = ::java_security / "SignatureException";
namespace java::security { class SignatureSpi; }
template<> constexpr auto signature<::java::security::SignatureSpi> = ::java_security / "SignatureSpi";
namespace java::security { class SignedObject; }
template<> constexpr auto signature<::java::security::SignedObject> = ::java_security / "SignedObject";
namespace java::security { class Signer; }
template<> constexpr auto signature<::java::security::Signer> = ::java_security / "Signer";
namespace java::security { class Signer$1; }
template<> constexpr auto signature<::java::security::Signer$1> = ::java_security / "Signer$1";
namespace java::security { class Timestamp; }
template<> constexpr auto signature<::java::security::Timestamp> = ::java_security / "Timestamp";
namespace java::security { class URIParameter; }
template<> constexpr auto signature<::java::security::URIParameter> = ::java_security / "URIParameter";
namespace java::security { class UnrecoverableEntryException; }
template<> constexpr auto signature<::java::security::UnrecoverableEntryException> = ::java_security / "UnrecoverableEntryException";
namespace java::security { class UnrecoverableKeyException; }
template<> constexpr auto signature<::java::security::UnrecoverableKeyException> = ::java_security / "UnrecoverableKeyException";
namespace java::security { class UnresolvedPermission; }
template<> constexpr auto signature<::java::security::UnresolvedPermission> = ::java_security / "UnresolvedPermission";
namespace java::security { class UnresolvedPermissionCollection; }
template<> constexpr auto signature<::java::security::UnresolvedPermissionCollection> = ::java_security / "UnresolvedPermissionCollection";
namespace java::security::acl { class Acl; }
template<> constexpr auto signature<::java::security::acl::Acl> = ::java_security_acl / "Acl";
namespace java::security::acl { class AclEntry; }
template<> constexpr auto signature<::java::security::acl::AclEntry> = ::java_security_acl / "AclEntry";
namespace java::security::acl { class AclNotFoundException; }
template<> constexpr auto signature<::java::security::acl::AclNotFoundException> = ::java_security_acl / "AclNotFoundException";
namespace java::security::acl { class Group; }
template<> constexpr auto signature<::java::security::acl::Group> = ::java_security_acl / "Group";
namespace java::security::acl { class LastOwnerException; }
template<> constexpr auto signature<::java::security::acl::LastOwnerException> = ::java_security_acl / "LastOwnerException";
namespace java::security::acl { class NotOwnerException; }
template<> constexpr auto signature<::java::security::acl::NotOwnerException> = ::java_security_acl / "NotOwnerException";
namespace java::security::acl { class Owner; }
template<> constexpr auto signature<::java::security::acl::Owner> = ::java_security_acl / "Owner";
namespace java::security::acl { class Permission; }
template<> constexpr auto signature<::java::security::acl::Permission> = ::java_security_acl / "Permission";
namespace java::security::cert { class CRL; }
template<> constexpr auto signature<::java::security::cert::CRL> = ::java_security_cert / "CRL";
namespace java::security::cert { class CRLException; }
template<> constexpr auto signature<::java::security::cert::CRLException> = ::java_security_cert / "CRLException";
namespace java::security::cert { class CRLReason; }
template<> constexpr auto signature<::java::security::cert::CRLReason> = ::java_security_cert / "CRLReason";
namespace java::security::cert { class CRLSelector; }
template<> constexpr auto signature<::java::security::cert::CRLSelector> = ::java_security_cert / "CRLSelector";
namespace java::security::cert { class CertPath; }
template<> constexpr auto signature<::java::security::cert::CertPath> = ::java_security_cert / "CertPath";
namespace java::security::cert { class CertPath$CertPathRep; }
template<> constexpr auto signature<::java::security::cert::CertPath$CertPathRep> = ::java_security_cert / "CertPath$CertPathRep";
namespace java::security::cert { class CertPathBuilder; }
template<> constexpr auto signature<::java::security::cert::CertPathBuilder> = ::java_security_cert / "CertPathBuilder";
namespace java::security::cert { class CertPathBuilder$1; }
template<> constexpr auto signature<::java::security::cert::CertPathBuilder$1> = ::java_security_cert / "CertPathBuilder$1";
namespace java::security::cert { class CertPathBuilderException; }
template<> constexpr auto signature<::java::security::cert::CertPathBuilderException> = ::java_security_cert / "CertPathBuilderException";
namespace java::security::cert { class CertPathBuilderResult; }
template<> constexpr auto signature<::java::security::cert::CertPathBuilderResult> = ::java_security_cert / "CertPathBuilderResult";
namespace java::security::cert { class CertPathBuilderSpi; }
template<> constexpr auto signature<::java::security::cert::CertPathBuilderSpi> = ::java_security_cert / "CertPathBuilderSpi";
namespace java::security::cert { class CertPathChecker; }
template<> constexpr auto signature<::java::security::cert::CertPathChecker> = ::java_security_cert / "CertPathChecker";
namespace java::security::cert { class CertPathHelperImpl; }
template<> constexpr auto signature<::java::security::cert::CertPathHelperImpl> = ::java_security_cert / "CertPathHelperImpl";
namespace java::security::cert { class CertPathParameters; }
template<> constexpr auto signature<::java::security::cert::CertPathParameters> = ::java_security_cert / "CertPathParameters";
namespace java::security::cert { class CertPathValidator; }
template<> constexpr auto signature<::java::security::cert::CertPathValidator> = ::java_security_cert / "CertPathValidator";
namespace java::security::cert { class CertPathValidator$1; }
template<> constexpr auto signature<::java::security::cert::CertPathValidator$1> = ::java_security_cert / "CertPathValidator$1";
namespace java::security::cert { class CertPathValidatorException; }
template<> constexpr auto signature<::java::security::cert::CertPathValidatorException> = ::java_security_cert / "CertPathValidatorException";
namespace java::security::cert { class CertPathValidatorException$BasicReason; }
template<> constexpr auto signature<::java::security::cert::CertPathValidatorException$BasicReason> = ::java_security_cert / "CertPathValidatorException$BasicReason";
namespace java::security::cert { class CertPathValidatorException$Reason; }
template<> constexpr auto signature<::java::security::cert::CertPathValidatorException$Reason> = ::java_security_cert / "CertPathValidatorException$Reason";
namespace java::security::cert { class CertPathValidatorResult; }
template<> constexpr auto signature<::java::security::cert::CertPathValidatorResult> = ::java_security_cert / "CertPathValidatorResult";
namespace java::security::cert { class CertPathValidatorSpi; }
template<> constexpr auto signature<::java::security::cert::CertPathValidatorSpi> = ::java_security_cert / "CertPathValidatorSpi";
namespace java::security::cert { class CertSelector; }
template<> constexpr auto signature<::java::security::cert::CertSelector> = ::java_security_cert / "CertSelector";
namespace java::security::cert { class CertStore; }
template<> constexpr auto signature<::java::security::cert::CertStore> = ::java_security_cert / "CertStore";
namespace java::security::cert { class CertStore$1; }
template<> constexpr auto signature<::java::security::cert::CertStore$1> = ::java_security_cert / "CertStore$1";
namespace java::security::cert { class CertStoreException; }
template<> constexpr auto signature<::java::security::cert::CertStoreException> = ::java_security_cert / "CertStoreException";
namespace java::security::cert { class CertStoreParameters; }
template<> constexpr auto signature<::java::security::cert::CertStoreParameters> = ::java_security_cert / "CertStoreParameters";
namespace java::security::cert { class CertStoreSpi; }
template<> constexpr auto signature<::java::security::cert::CertStoreSpi> = ::java_security_cert / "CertStoreSpi";
namespace java::security::cert { class Certificate; }
template<> constexpr auto signature<::java::security::cert::Certificate> = ::java_security_cert / "Certificate";
namespace java::security::cert { class Certificate$CertificateRep; }
template<> constexpr auto signature<::java::security::cert::Certificate$CertificateRep> = ::java_security_cert / "Certificate$CertificateRep";
namespace java::security::cert { class CertificateEncodingException; }
template<> constexpr auto signature<::java::security::cert::CertificateEncodingException> = ::java_security_cert / "CertificateEncodingException";
namespace java::security::cert { class CertificateException; }
template<> constexpr auto signature<::java::security::cert::CertificateException> = ::java_security_cert / "CertificateException";
namespace java::security::cert { class CertificateExpiredException; }
template<> constexpr auto signature<::java::security::cert::CertificateExpiredException> = ::java_security_cert / "CertificateExpiredException";
namespace java::security::cert { class CertificateFactory; }
template<> constexpr auto signature<::java::security::cert::CertificateFactory> = ::java_security_cert / "CertificateFactory";
namespace java::security::cert { class CertificateFactorySpi; }
template<> constexpr auto signature<::java::security::cert::CertificateFactorySpi> = ::java_security_cert / "CertificateFactorySpi";
namespace java::security::cert { class CertificateNotYetValidException; }
template<> constexpr auto signature<::java::security::cert::CertificateNotYetValidException> = ::java_security_cert / "CertificateNotYetValidException";
namespace java::security::cert { class CertificateParsingException; }
template<> constexpr auto signature<::java::security::cert::CertificateParsingException> = ::java_security_cert / "CertificateParsingException";
namespace java::security::cert { class CertificateRevokedException; }
template<> constexpr auto signature<::java::security::cert::CertificateRevokedException> = ::java_security_cert / "CertificateRevokedException";
namespace java::security::cert { class CollectionCertStoreParameters; }
template<> constexpr auto signature<::java::security::cert::CollectionCertStoreParameters> = ::java_security_cert / "CollectionCertStoreParameters";
namespace java::security::cert { class Extension; }
template<> constexpr auto signature<::java::security::cert::Extension> = ::java_security_cert / "Extension";
namespace java::security::cert { class LDAPCertStoreParameters; }
template<> constexpr auto signature<::java::security::cert::LDAPCertStoreParameters> = ::java_security_cert / "LDAPCertStoreParameters";
namespace java::security::cert { class PKIXBuilderParameters; }
template<> constexpr auto signature<::java::security::cert::PKIXBuilderParameters> = ::java_security_cert / "PKIXBuilderParameters";
namespace java::security::cert { class PKIXCertPathBuilderResult; }
template<> constexpr auto signature<::java::security::cert::PKIXCertPathBuilderResult> = ::java_security_cert / "PKIXCertPathBuilderResult";
namespace java::security::cert { class PKIXCertPathChecker; }
template<> constexpr auto signature<::java::security::cert::PKIXCertPathChecker> = ::java_security_cert / "PKIXCertPathChecker";
namespace java::security::cert { class PKIXCertPathValidatorResult; }
template<> constexpr auto signature<::java::security::cert::PKIXCertPathValidatorResult> = ::java_security_cert / "PKIXCertPathValidatorResult";
namespace java::security::cert { class PKIXParameters; }
template<> constexpr auto signature<::java::security::cert::PKIXParameters> = ::java_security_cert / "PKIXParameters";
namespace java::security::cert { class PKIXReason; }
template<> constexpr auto signature<::java::security::cert::PKIXReason> = ::java_security_cert / "PKIXReason";
namespace java::security::cert { class PKIXRevocationChecker; }
template<> constexpr auto signature<::java::security::cert::PKIXRevocationChecker> = ::java_security_cert / "PKIXRevocationChecker";
namespace java::security::cert { class PKIXRevocationChecker$Option; }
template<> constexpr auto signature<::java::security::cert::PKIXRevocationChecker$Option> = ::java_security_cert / "PKIXRevocationChecker$Option";
namespace java::security::cert { class PolicyNode; }
template<> constexpr auto signature<::java::security::cert::PolicyNode> = ::java_security_cert / "PolicyNode";
namespace java::security::cert { class PolicyQualifierInfo; }
template<> constexpr auto signature<::java::security::cert::PolicyQualifierInfo> = ::java_security_cert / "PolicyQualifierInfo";
namespace java::security::cert { class TrustAnchor; }
template<> constexpr auto signature<::java::security::cert::TrustAnchor> = ::java_security_cert / "TrustAnchor";
namespace java::security::cert { class X509CRL; }
template<> constexpr auto signature<::java::security::cert::X509CRL> = ::java_security_cert / "X509CRL";
namespace java::security::cert { class X509CRLEntry; }
template<> constexpr auto signature<::java::security::cert::X509CRLEntry> = ::java_security_cert / "X509CRLEntry";
namespace java::security::cert { class X509CRLSelector; }
template<> constexpr auto signature<::java::security::cert::X509CRLSelector> = ::java_security_cert / "X509CRLSelector";
namespace java::security::cert { class X509CertSelector; }
template<> constexpr auto signature<::java::security::cert::X509CertSelector> = ::java_security_cert / "X509CertSelector";
namespace java::security::cert { class X509Certificate; }
template<> constexpr auto signature<::java::security::cert::X509Certificate> = ::java_security_cert / "X509Certificate";
namespace java::security::cert { class X509Extension; }
template<> constexpr auto signature<::java::security::cert::X509Extension> = ::java_security_cert / "X509Extension";
namespace java::security::interfaces { class DSAKey; }
template<> constexpr auto signature<::java::security::interfaces::DSAKey> = ::java_security_interfaces / "DSAKey";
namespace java::security::interfaces { class DSAKeyPairGenerator; }
template<> constexpr auto signature<::java::security::interfaces::DSAKeyPairGenerator> = ::java_security_interfaces / "DSAKeyPairGenerator";
namespace java::security::interfaces { class DSAParams; }
template<> constexpr auto signature<::java::security::interfaces::DSAParams> = ::java_security_interfaces / "DSAParams";
namespace java::security::interfaces { class DSAPrivateKey; }
template<> constexpr auto signature<::java::security::interfaces::DSAPrivateKey> = ::java_security_interfaces / "DSAPrivateKey";
namespace java::security::interfaces { class DSAPublicKey; }
template<> constexpr auto signature<::java::security::interfaces::DSAPublicKey> = ::java_security_interfaces / "DSAPublicKey";
namespace java::security::interfaces { class ECKey; }
template<> constexpr auto signature<::java::security::interfaces::ECKey> = ::java_security_interfaces / "ECKey";
namespace java::security::interfaces { class ECPrivateKey; }
template<> constexpr auto signature<::java::security::interfaces::ECPrivateKey> = ::java_security_interfaces / "ECPrivateKey";
namespace java::security::interfaces { class ECPublicKey; }
template<> constexpr auto signature<::java::security::interfaces::ECPublicKey> = ::java_security_interfaces / "ECPublicKey";
namespace java::security::interfaces { class RSAKey; }
template<> constexpr auto signature<::java::security::interfaces::RSAKey> = ::java_security_interfaces / "RSAKey";
namespace java::security::interfaces { class RSAMultiPrimePrivateCrtKey; }
template<> constexpr auto signature<::java::security::interfaces::RSAMultiPrimePrivateCrtKey> = ::java_security_interfaces / "RSAMultiPrimePrivateCrtKey";
namespace java::security::interfaces { class RSAPrivateCrtKey; }
template<> constexpr auto signature<::java::security::interfaces::RSAPrivateCrtKey> = ::java_security_interfaces / "RSAPrivateCrtKey";
namespace java::security::interfaces { class RSAPrivateKey; }
template<> constexpr auto signature<::java::security::interfaces::RSAPrivateKey> = ::java_security_interfaces / "RSAPrivateKey";
namespace java::security::interfaces { class RSAPublicKey; }
template<> constexpr auto signature<::java::security::interfaces::RSAPublicKey> = ::java_security_interfaces / "RSAPublicKey";
namespace java::security::spec { class AlgorithmParameterSpec; }
template<> constexpr auto signature<::java::security::spec::AlgorithmParameterSpec> = ::java_security_spec / "AlgorithmParameterSpec";
namespace java::security::spec { class DSAGenParameterSpec; }
template<> constexpr auto signature<::java::security::spec::DSAGenParameterSpec> = ::java_security_spec / "DSAGenParameterSpec";
namespace java::security::spec { class DSAParameterSpec; }
template<> constexpr auto signature<::java::security::spec::DSAParameterSpec> = ::java_security_spec / "DSAParameterSpec";
namespace java::security::spec { class DSAPrivateKeySpec; }
template<> constexpr auto signature<::java::security::spec::DSAPrivateKeySpec> = ::java_security_spec / "DSAPrivateKeySpec";
namespace java::security::spec { class DSAPublicKeySpec; }
template<> constexpr auto signature<::java::security::spec::DSAPublicKeySpec> = ::java_security_spec / "DSAPublicKeySpec";
namespace java::security::spec { class ECField; }
template<> constexpr auto signature<::java::security::spec::ECField> = ::java_security_spec / "ECField";
namespace java::security::spec { class ECFieldF2m; }
template<> constexpr auto signature<::java::security::spec::ECFieldF2m> = ::java_security_spec / "ECFieldF2m";
namespace java::security::spec { class ECFieldFp; }
template<> constexpr auto signature<::java::security::spec::ECFieldFp> = ::java_security_spec / "ECFieldFp";
namespace java::security::spec { class ECGenParameterSpec; }
template<> constexpr auto signature<::java::security::spec::ECGenParameterSpec> = ::java_security_spec / "ECGenParameterSpec";
namespace java::security::spec { class ECParameterSpec; }
template<> constexpr auto signature<::java::security::spec::ECParameterSpec> = ::java_security_spec / "ECParameterSpec";
namespace java::security::spec { class ECPoint; }
template<> constexpr auto signature<::java::security::spec::ECPoint> = ::java_security_spec / "ECPoint";
namespace java::security::spec { class ECPrivateKeySpec; }
template<> constexpr auto signature<::java::security::spec::ECPrivateKeySpec> = ::java_security_spec / "ECPrivateKeySpec";
namespace java::security::spec { class ECPublicKeySpec; }
template<> constexpr auto signature<::java::security::spec::ECPublicKeySpec> = ::java_security_spec / "ECPublicKeySpec";
namespace java::security::spec { class EllipticCurve; }
template<> constexpr auto signature<::java::security::spec::EllipticCurve> = ::java_security_spec / "EllipticCurve";
namespace java::security::spec { class EncodedKeySpec; }
template<> constexpr auto signature<::java::security::spec::EncodedKeySpec> = ::java_security_spec / "EncodedKeySpec";
namespace java::security::spec { class InvalidKeySpecException; }
template<> constexpr auto signature<::java::security::spec::InvalidKeySpecException> = ::java_security_spec / "InvalidKeySpecException";
namespace java::security::spec { class InvalidParameterSpecException; }
template<> constexpr auto signature<::java::security::spec::InvalidParameterSpecException> = ::java_security_spec / "InvalidParameterSpecException";
namespace java::security::spec { class KeySpec; }
template<> constexpr auto signature<::java::security::spec::KeySpec> = ::java_security_spec / "KeySpec";
namespace java::security::spec { class MGF1ParameterSpec; }
template<> constexpr auto signature<::java::security::spec::MGF1ParameterSpec> = ::java_security_spec / "MGF1ParameterSpec";
namespace java::security::spec { class PKCS8EncodedKeySpec; }
template<> constexpr auto signature<::java::security::spec::PKCS8EncodedKeySpec> = ::java_security_spec / "PKCS8EncodedKeySpec";
namespace java::security::spec { class PSSParameterSpec; }
template<> constexpr auto signature<::java::security::spec::PSSParameterSpec> = ::java_security_spec / "PSSParameterSpec";
namespace java::security::spec { class RSAKeyGenParameterSpec; }
template<> constexpr auto signature<::java::security::spec::RSAKeyGenParameterSpec> = ::java_security_spec / "RSAKeyGenParameterSpec";
namespace java::security::spec { class RSAMultiPrimePrivateCrtKeySpec; }
template<> constexpr auto signature<::java::security::spec::RSAMultiPrimePrivateCrtKeySpec> = ::java_security_spec / "RSAMultiPrimePrivateCrtKeySpec";
namespace java::security::spec { class RSAOtherPrimeInfo; }
template<> constexpr auto signature<::java::security::spec::RSAOtherPrimeInfo> = ::java_security_spec / "RSAOtherPrimeInfo";
namespace java::security::spec { class RSAPrivateCrtKeySpec; }
template<> constexpr auto signature<::java::security::spec::RSAPrivateCrtKeySpec> = ::java_security_spec / "RSAPrivateCrtKeySpec";
namespace java::security::spec { class RSAPrivateKeySpec; }
template<> constexpr auto signature<::java::security::spec::RSAPrivateKeySpec> = ::java_security_spec / "RSAPrivateKeySpec";
namespace java::security::spec { class RSAPublicKeySpec; }
template<> constexpr auto signature<::java::security::spec::RSAPublicKeySpec> = ::java_security_spec / "RSAPublicKeySpec";
namespace java::security::spec { class X509EncodedKeySpec; }
template<> constexpr auto signature<::java::security::spec::X509EncodedKeySpec> = ::java_security_spec / "X509EncodedKeySpec";
namespace java::sql { class Array; }
template<> constexpr auto signature<::java::sql::Array> = ::java_sql / "Array";
namespace java::sql { class BatchUpdateException; }
template<> constexpr auto signature<::java::sql::BatchUpdateException> = ::java_sql / "BatchUpdateException";
namespace java::sql { class Blob; }
template<> constexpr auto signature<::java::sql::Blob> = ::java_sql / "Blob";
namespace java::sql { class CallableStatement; }
template<> constexpr auto signature<::java::sql::CallableStatement> = ::java_sql / "CallableStatement";
namespace java::sql { class ClientInfoStatus; }
template<> constexpr auto signature<::java::sql::ClientInfoStatus> = ::java_sql / "ClientInfoStatus";
namespace java::sql { class Clob; }
template<> constexpr auto signature<::java::sql::Clob> = ::java_sql / "Clob";
namespace java::sql { class Connection; }
template<> constexpr auto signature<::java::sql::Connection> = ::java_sql / "Connection";
namespace java::sql { class DataTruncation; }
template<> constexpr auto signature<::java::sql::DataTruncation> = ::java_sql / "DataTruncation";
namespace java::sql { class DatabaseMetaData; }
template<> constexpr auto signature<::java::sql::DatabaseMetaData> = ::java_sql / "DatabaseMetaData";
namespace java::sql { class Date; }
template<> constexpr auto signature<::java::sql::Date> = ::java_sql / "Date";
namespace java::sql { class Driver; }
template<> constexpr auto signature<::java::sql::Driver> = ::java_sql / "Driver";
namespace java::sql { class DriverAction; }
template<> constexpr auto signature<::java::sql::DriverAction> = ::java_sql / "DriverAction";
namespace java::sql { class DriverInfo; }
template<> constexpr auto signature<::java::sql::DriverInfo> = ::java_sql / "DriverInfo";
namespace java::sql { class DriverManager; }
template<> constexpr auto signature<::java::sql::DriverManager> = ::java_sql / "DriverManager";
namespace java::sql { class DriverManager$1; }
template<> constexpr auto signature<::java::sql::DriverManager$1> = ::java_sql / "DriverManager$1";
namespace java::sql { class DriverManager$2; }
template<> constexpr auto signature<::java::sql::DriverManager$2> = ::java_sql / "DriverManager$2";
namespace java::sql { class DriverPropertyInfo; }
template<> constexpr auto signature<::java::sql::DriverPropertyInfo> = ::java_sql / "DriverPropertyInfo";
namespace java::sql { class JDBCType; }
template<> constexpr auto signature<::java::sql::JDBCType> = ::java_sql / "JDBCType";
namespace java::sql { class NClob; }
template<> constexpr auto signature<::java::sql::NClob> = ::java_sql / "NClob";
namespace java::sql { class ParameterMetaData; }
template<> constexpr auto signature<::java::sql::ParameterMetaData> = ::java_sql / "ParameterMetaData";
namespace java::sql { class PreparedStatement; }
template<> constexpr auto signature<::java::sql::PreparedStatement> = ::java_sql / "PreparedStatement";
namespace java::sql { class PseudoColumnUsage; }
template<> constexpr auto signature<::java::sql::PseudoColumnUsage> = ::java_sql / "PseudoColumnUsage";
namespace java::sql { class Ref; }
template<> constexpr auto signature<::java::sql::Ref> = ::java_sql / "Ref";
namespace java::sql { class ResultSet; }
template<> constexpr auto signature<::java::sql::ResultSet> = ::java_sql / "ResultSet";
namespace java::sql { class ResultSetMetaData; }
template<> constexpr auto signature<::java::sql::ResultSetMetaData> = ::java_sql / "ResultSetMetaData";
namespace java::sql { class RowId; }
template<> constexpr auto signature<::java::sql::RowId> = ::java_sql / "RowId";
namespace java::sql { class RowIdLifetime; }
template<> constexpr auto signature<::java::sql::RowIdLifetime> = ::java_sql / "RowIdLifetime";
namespace java::sql { class SQLClientInfoException; }
template<> constexpr auto signature<::java::sql::SQLClientInfoException> = ::java_sql / "SQLClientInfoException";
namespace java::sql { class SQLData; }
template<> constexpr auto signature<::java::sql::SQLData> = ::java_sql / "SQLData";
namespace java::sql { class SQLDataException; }
template<> constexpr auto signature<::java::sql::SQLDataException> = ::java_sql / "SQLDataException";
namespace java::sql { class SQLException; }
template<> constexpr auto signature<::java::sql::SQLException> = ::java_sql / "SQLException";
namespace java::sql { class SQLException$1; }
template<> constexpr auto signature<::java::sql::SQLException$1> = ::java_sql / "SQLException$1";
namespace java::sql { class SQLFeatureNotSupportedException; }
template<> constexpr auto signature<::java::sql::SQLFeatureNotSupportedException> = ::java_sql / "SQLFeatureNotSupportedException";
namespace java::sql { class SQLInput; }
template<> constexpr auto signature<::java::sql::SQLInput> = ::java_sql / "SQLInput";
namespace java::sql { class SQLIntegrityConstraintViolationException; }
template<> constexpr auto signature<::java::sql::SQLIntegrityConstraintViolationException> = ::java_sql / "SQLIntegrityConstraintViolationException";
namespace java::sql { class SQLInvalidAuthorizationSpecException; }
template<> constexpr auto signature<::java::sql::SQLInvalidAuthorizationSpecException> = ::java_sql / "SQLInvalidAuthorizationSpecException";
namespace java::sql { class SQLNonTransientConnectionException; }
template<> constexpr auto signature<::java::sql::SQLNonTransientConnectionException> = ::java_sql / "SQLNonTransientConnectionException";
namespace java::sql { class SQLNonTransientException; }
template<> constexpr auto signature<::java::sql::SQLNonTransientException> = ::java_sql / "SQLNonTransientException";
namespace java::sql { class SQLOutput; }
template<> constexpr auto signature<::java::sql::SQLOutput> = ::java_sql / "SQLOutput";
namespace java::sql { class SQLPermission; }
template<> constexpr auto signature<::java::sql::SQLPermission> = ::java_sql / "SQLPermission";
namespace java::sql { class SQLRecoverableException; }
template<> constexpr auto signature<::java::sql::SQLRecoverableException> = ::java_sql / "SQLRecoverableException";
namespace java::sql { class SQLSyntaxErrorException; }
template<> constexpr auto signature<::java::sql::SQLSyntaxErrorException> = ::java_sql / "SQLSyntaxErrorException";
namespace java::sql { class SQLTimeoutException; }
template<> constexpr auto signature<::java::sql::SQLTimeoutException> = ::java_sql / "SQLTimeoutException";
namespace java::sql { class SQLTransactionRollbackException; }
template<> constexpr auto signature<::java::sql::SQLTransactionRollbackException> = ::java_sql / "SQLTransactionRollbackException";
namespace java::sql { class SQLTransientConnectionException; }
template<> constexpr auto signature<::java::sql::SQLTransientConnectionException> = ::java_sql / "SQLTransientConnectionException";
namespace java::sql { class SQLTransientException; }
template<> constexpr auto signature<::java::sql::SQLTransientException> = ::java_sql / "SQLTransientException";
namespace java::sql { class SQLType; }
template<> constexpr auto signature<::java::sql::SQLType> = ::java_sql / "SQLType";
namespace java::sql { class SQLWarning; }
template<> constexpr auto signature<::java::sql::SQLWarning> = ::java_sql / "SQLWarning";
namespace java::sql { class SQLXML; }
template<> constexpr auto signature<::java::sql::SQLXML> = ::java_sql / "SQLXML";
namespace java::sql { class Savepoint; }
template<> constexpr auto signature<::java::sql::Savepoint> = ::java_sql / "Savepoint";
namespace java::sql { class Statement; }
template<> constexpr auto signature<::java::sql::Statement> = ::java_sql / "Statement";
namespace java::sql { class Struct; }
template<> constexpr auto signature<::java::sql::Struct> = ::java_sql / "Struct";
namespace java::sql { class Time; }
template<> constexpr auto signature<::java::sql::Time> = ::java_sql / "Time";
namespace java::sql { class Timestamp; }
template<> constexpr auto signature<::java::sql::Timestamp> = ::java_sql / "Timestamp";
namespace java::sql { class Types; }
template<> constexpr auto signature<::java::sql::Types> = ::java_sql / "Types";
namespace java::sql { class Wrapper; }
template<> constexpr auto signature<::java::sql::Wrapper> = ::java_sql / "Wrapper";
namespace java::text { class Annotation; }
template<> constexpr auto signature<::java::text::Annotation> = ::java_text / "Annotation";
namespace java::text { class AttributeEntry; }
template<> constexpr auto signature<::java::text::AttributeEntry> = ::java_text / "AttributeEntry";
namespace java::text { class AttributedCharacterIterator; }
template<> constexpr auto signature<::java::text::AttributedCharacterIterator> = ::java_text / "AttributedCharacterIterator";
namespace java::text { class AttributedCharacterIterator$Attribute; }
template<> constexpr auto signature<::java::text::AttributedCharacterIterator$Attribute> = ::java_text / "AttributedCharacterIterator$Attribute";
namespace java::text { class AttributedString; }
template<> constexpr auto signature<::java::text::AttributedString> = ::java_text / "AttributedString";
namespace java::text { class AttributedString$AttributeMap; }
template<> constexpr auto signature<::java::text::AttributedString$AttributeMap> = ::java_text / "AttributedString$AttributeMap";
namespace java::text { class AttributedString$AttributedStringIterator; }
template<> constexpr auto signature<::java::text::AttributedString$AttributedStringIterator> = ::java_text / "AttributedString$AttributedStringIterator";
namespace java::text { class Bidi; }
template<> constexpr auto signature<::java::text::Bidi> = ::java_text / "Bidi";
namespace java::text { class BreakIterator; }
template<> constexpr auto signature<::java::text::BreakIterator> = ::java_text / "BreakIterator";
namespace java::text { class BreakIterator$BreakIteratorCache; }
template<> constexpr auto signature<::java::text::BreakIterator$BreakIteratorCache> = ::java_text / "BreakIterator$BreakIteratorCache";
namespace java::text { class CalendarBuilder; }
template<> constexpr auto signature<::java::text::CalendarBuilder> = ::java_text / "CalendarBuilder";
namespace java::text { class CharacterIterator; }
template<> constexpr auto signature<::java::text::CharacterIterator> = ::java_text / "CharacterIterator";
namespace java::text { class CharacterIteratorFieldDelegate; }
template<> constexpr auto signature<::java::text::CharacterIteratorFieldDelegate> = ::java_text / "CharacterIteratorFieldDelegate";
namespace java::text { class ChoiceFormat; }
template<> constexpr auto signature<::java::text::ChoiceFormat> = ::java_text / "ChoiceFormat";
namespace java::text { class CollationElementIterator; }
template<> constexpr auto signature<::java::text::CollationElementIterator> = ::java_text / "CollationElementIterator";
namespace java::text { class CollationKey; }
template<> constexpr auto signature<::java::text::CollationKey> = ::java_text / "CollationKey";
namespace java::text { class Collator; }
template<> constexpr auto signature<::java::text::Collator> = ::java_text / "Collator";
namespace java::text { class DateFormat; }
template<> constexpr auto signature<::java::text::DateFormat> = ::java_text / "DateFormat";
namespace java::text { class DateFormat$Field; }
template<> constexpr auto signature<::java::text::DateFormat$Field> = ::java_text / "DateFormat$Field";
namespace java::text { class DateFormatSymbols; }
template<> constexpr auto signature<::java::text::DateFormatSymbols> = ::java_text / "DateFormatSymbols";
namespace java::text { class DecimalFormat; }
template<> constexpr auto signature<::java::text::DecimalFormat> = ::java_text / "DecimalFormat";
namespace java::text { class DecimalFormat$1; }
template<> constexpr auto signature<::java::text::DecimalFormat$1> = ::java_text / "DecimalFormat$1";
namespace java::text { class DecimalFormat$DigitArrays; }
template<> constexpr auto signature<::java::text::DecimalFormat$DigitArrays> = ::java_text / "DecimalFormat$DigitArrays";
namespace java::text { class DecimalFormat$FastPathData; }
template<> constexpr auto signature<::java::text::DecimalFormat$FastPathData> = ::java_text / "DecimalFormat$FastPathData";
namespace java::text { class DecimalFormatSymbols; }
template<> constexpr auto signature<::java::text::DecimalFormatSymbols> = ::java_text / "DecimalFormatSymbols";
namespace java::text { class DigitList; }
template<> constexpr auto signature<::java::text::DigitList> = ::java_text / "DigitList";
namespace java::text { class DigitList$1; }
template<> constexpr auto signature<::java::text::DigitList$1> = ::java_text / "DigitList$1";
namespace java::text { class DontCareFieldPosition; }
template<> constexpr auto signature<::java::text::DontCareFieldPosition> = ::java_text / "DontCareFieldPosition";
namespace java::text { class DontCareFieldPosition$1; }
template<> constexpr auto signature<::java::text::DontCareFieldPosition$1> = ::java_text / "DontCareFieldPosition$1";
namespace java::text { class EntryPair; }
template<> constexpr auto signature<::java::text::EntryPair> = ::java_text / "EntryPair";
namespace java::text { class FieldPosition; }
template<> constexpr auto signature<::java::text::FieldPosition> = ::java_text / "FieldPosition";
namespace java::text { class FieldPosition$1; }
template<> constexpr auto signature<::java::text::FieldPosition$1> = ::java_text / "FieldPosition$1";
namespace java::text { class FieldPosition$Delegate; }
template<> constexpr auto signature<::java::text::FieldPosition$Delegate> = ::java_text / "FieldPosition$Delegate";
namespace java::text { class Format; }
template<> constexpr auto signature<::java::text::Format> = ::java_text / "Format";
namespace java::text { class Format$Field; }
template<> constexpr auto signature<::java::text::Format$Field> = ::java_text / "Format$Field";
namespace java::text { class Format$FieldDelegate; }
template<> constexpr auto signature<::java::text::Format$FieldDelegate> = ::java_text / "Format$FieldDelegate";
namespace java::text { class MergeCollation; }
template<> constexpr auto signature<::java::text::MergeCollation> = ::java_text / "MergeCollation";
namespace java::text { class MessageFormat; }
template<> constexpr auto signature<::java::text::MessageFormat> = ::java_text / "MessageFormat";
namespace java::text { class MessageFormat$Field; }
template<> constexpr auto signature<::java::text::MessageFormat$Field> = ::java_text / "MessageFormat$Field";
namespace java::text { class Normalizer; }
template<> constexpr auto signature<::java::text::Normalizer> = ::java_text / "Normalizer";
namespace java::text { class Normalizer$Form; }
template<> constexpr auto signature<::java::text::Normalizer$Form> = ::java_text / "Normalizer$Form";
namespace java::text { class NumberFormat; }
template<> constexpr auto signature<::java::text::NumberFormat> = ::java_text / "NumberFormat";
namespace java::text { class NumberFormat$Field; }
template<> constexpr auto signature<::java::text::NumberFormat$Field> = ::java_text / "NumberFormat$Field";
namespace java::text { class ParseException; }
template<> constexpr auto signature<::java::text::ParseException> = ::java_text / "ParseException";
namespace java::text { class ParsePosition; }
template<> constexpr auto signature<::java::text::ParsePosition> = ::java_text / "ParsePosition";
namespace java::text { class PatternEntry; }
template<> constexpr auto signature<::java::text::PatternEntry> = ::java_text / "PatternEntry";
namespace java::text { class PatternEntry$Parser; }
template<> constexpr auto signature<::java::text::PatternEntry$Parser> = ::java_text / "PatternEntry$Parser";
namespace java::text { class RBCollationTables; }
template<> constexpr auto signature<::java::text::RBCollationTables> = ::java_text / "RBCollationTables";
namespace java::text { class RBCollationTables$1; }
template<> constexpr auto signature<::java::text::RBCollationTables$1> = ::java_text / "RBCollationTables$1";
namespace java::text { class RBCollationTables$BuildAPI; }
template<> constexpr auto signature<::java::text::RBCollationTables$BuildAPI> = ::java_text / "RBCollationTables$BuildAPI";
namespace java::text { class RBTableBuilder; }
template<> constexpr auto signature<::java::text::RBTableBuilder> = ::java_text / "RBTableBuilder";
namespace java::text { class RuleBasedCollationKey; }
template<> constexpr auto signature<::java::text::RuleBasedCollationKey> = ::java_text / "RuleBasedCollationKey";
namespace java::text { class RuleBasedCollator; }
template<> constexpr auto signature<::java::text::RuleBasedCollator> = ::java_text / "RuleBasedCollator";
namespace java::text { class SimpleDateFormat; }
template<> constexpr auto signature<::java::text::SimpleDateFormat> = ::java_text / "SimpleDateFormat";
namespace java::text { class StringCharacterIterator; }
template<> constexpr auto signature<::java::text::StringCharacterIterator> = ::java_text / "StringCharacterIterator";
namespace java::text::spi { class BreakIteratorProvider; }
template<> constexpr auto signature<::java::text::spi::BreakIteratorProvider> = ::java_text_spi / "BreakIteratorProvider";
namespace java::text::spi { class CollatorProvider; }
template<> constexpr auto signature<::java::text::spi::CollatorProvider> = ::java_text_spi / "CollatorProvider";
namespace java::text::spi { class DateFormatProvider; }
template<> constexpr auto signature<::java::text::spi::DateFormatProvider> = ::java_text_spi / "DateFormatProvider";
namespace java::text::spi { class DateFormatSymbolsProvider; }
template<> constexpr auto signature<::java::text::spi::DateFormatSymbolsProvider> = ::java_text_spi / "DateFormatSymbolsProvider";
namespace java::text::spi { class DecimalFormatSymbolsProvider; }
template<> constexpr auto signature<::java::text::spi::DecimalFormatSymbolsProvider> = ::java_text_spi / "DecimalFormatSymbolsProvider";
namespace java::text::spi { class NumberFormatProvider; }
template<> constexpr auto signature<::java::text::spi::NumberFormatProvider> = ::java_text_spi / "NumberFormatProvider";
namespace java::time { class Clock; }
template<> constexpr auto signature<::java::time::Clock> = ::java_time / "Clock";
namespace java::time { class Clock$FixedClock; }
template<> constexpr auto signature<::java::time::Clock$FixedClock> = ::java_time / "Clock$FixedClock";
namespace java::time { class Clock$OffsetClock; }
template<> constexpr auto signature<::java::time::Clock$OffsetClock> = ::java_time / "Clock$OffsetClock";
namespace java::time { class Clock$SystemClock; }
template<> constexpr auto signature<::java::time::Clock$SystemClock> = ::java_time / "Clock$SystemClock";
namespace java::time { class Clock$TickClock; }
template<> constexpr auto signature<::java::time::Clock$TickClock> = ::java_time / "Clock$TickClock";
namespace java::time { class DateTimeException; }
template<> constexpr auto signature<::java::time::DateTimeException> = ::java_time / "DateTimeException";
namespace java::time { class DayOfWeek; }
template<> constexpr auto signature<::java::time::DayOfWeek> = ::java_time / "DayOfWeek";
namespace java::time { class Duration; }
template<> constexpr auto signature<::java::time::Duration> = ::java_time / "Duration";
namespace java::time { class Duration$1; }
template<> constexpr auto signature<::java::time::Duration$1> = ::java_time / "Duration$1";
namespace java::time { class Duration$DurationUnits; }
template<> constexpr auto signature<::java::time::Duration$DurationUnits> = ::java_time / "Duration$DurationUnits";
namespace java::time { class Instant; }
template<> constexpr auto signature<::java::time::Instant> = ::java_time / "Instant";
namespace java::time { class Instant$1; }
template<> constexpr auto signature<::java::time::Instant$1> = ::java_time / "Instant$1";
namespace java::time { class LocalDate; }
template<> constexpr auto signature<::java::time::LocalDate> = ::java_time / "LocalDate";
namespace java::time { class LocalDate$1; }
template<> constexpr auto signature<::java::time::LocalDate$1> = ::java_time / "LocalDate$1";
namespace java::time { class LocalDateTime; }
template<> constexpr auto signature<::java::time::LocalDateTime> = ::java_time / "LocalDateTime";
namespace java::time { class LocalDateTime$1; }
template<> constexpr auto signature<::java::time::LocalDateTime$1> = ::java_time / "LocalDateTime$1";
namespace java::time { class LocalTime; }
template<> constexpr auto signature<::java::time::LocalTime> = ::java_time / "LocalTime";
namespace java::time { class LocalTime$1; }
template<> constexpr auto signature<::java::time::LocalTime$1> = ::java_time / "LocalTime$1";
namespace java::time { class Month; }
template<> constexpr auto signature<::java::time::Month> = ::java_time / "Month";
namespace java::time { class Month$1; }
template<> constexpr auto signature<::java::time::Month$1> = ::java_time / "Month$1";
namespace java::time { class MonthDay; }
template<> constexpr auto signature<::java::time::MonthDay> = ::java_time / "MonthDay";
namespace java::time { class MonthDay$1; }
template<> constexpr auto signature<::java::time::MonthDay$1> = ::java_time / "MonthDay$1";
namespace java::time { class OffsetDateTime; }
template<> constexpr auto signature<::java::time::OffsetDateTime> = ::java_time / "OffsetDateTime";
namespace java::time { class OffsetDateTime$1; }
template<> constexpr auto signature<::java::time::OffsetDateTime$1> = ::java_time / "OffsetDateTime$1";
namespace java::time { class OffsetTime; }
template<> constexpr auto signature<::java::time::OffsetTime> = ::java_time / "OffsetTime";
namespace java::time { class OffsetTime$1; }
template<> constexpr auto signature<::java::time::OffsetTime$1> = ::java_time / "OffsetTime$1";
namespace java::time { class Period; }
template<> constexpr auto signature<::java::time::Period> = ::java_time / "Period";
namespace java::time { class Ser; }
template<> constexpr auto signature<::java::time::Ser> = ::java_time / "Ser";
namespace java::time { class Year; }
template<> constexpr auto signature<::java::time::Year> = ::java_time / "Year";
namespace java::time { class Year$1; }
template<> constexpr auto signature<::java::time::Year$1> = ::java_time / "Year$1";
namespace java::time { class YearMonth; }
template<> constexpr auto signature<::java::time::YearMonth> = ::java_time / "YearMonth";
namespace java::time { class YearMonth$1; }
template<> constexpr auto signature<::java::time::YearMonth$1> = ::java_time / "YearMonth$1";
namespace java::time { class ZoneId; }
template<> constexpr auto signature<::java::time::ZoneId> = ::java_time / "ZoneId";
namespace java::time { class ZoneId$1; }
template<> constexpr auto signature<::java::time::ZoneId$1> = ::java_time / "ZoneId$1";
namespace java::time { class ZoneOffset; }
template<> constexpr auto signature<::java::time::ZoneOffset> = ::java_time / "ZoneOffset";
namespace java::time { class ZoneRegion; }
template<> constexpr auto signature<::java::time::ZoneRegion> = ::java_time / "ZoneRegion";
namespace java::time { class ZonedDateTime; }
template<> constexpr auto signature<::java::time::ZonedDateTime> = ::java_time / "ZonedDateTime";
namespace java::time { class ZonedDateTime$1; }
template<> constexpr auto signature<::java::time::ZonedDateTime$1> = ::java_time / "ZonedDateTime$1";
namespace java::time::chrono { class AbstractChronology; }
template<> constexpr auto signature<::java::time::chrono::AbstractChronology> = ::java_time_chrono / "AbstractChronology";
namespace java::time::chrono { class ChronoLocalDate; }
template<> constexpr auto signature<::java::time::chrono::ChronoLocalDate> = ::java_time_chrono / "ChronoLocalDate";
namespace java::time::chrono { class ChronoLocalDateImpl; }
template<> constexpr auto signature<::java::time::chrono::ChronoLocalDateImpl> = ::java_time_chrono / "ChronoLocalDateImpl";
namespace java::time::chrono { class ChronoLocalDateImpl$1; }
template<> constexpr auto signature<::java::time::chrono::ChronoLocalDateImpl$1> = ::java_time_chrono / "ChronoLocalDateImpl$1";
namespace java::time::chrono { class ChronoLocalDateTime; }
template<> constexpr auto signature<::java::time::chrono::ChronoLocalDateTime> = ::java_time_chrono / "ChronoLocalDateTime";
namespace java::time::chrono { class ChronoLocalDateTimeImpl; }
template<> constexpr auto signature<::java::time::chrono::ChronoLocalDateTimeImpl> = ::java_time_chrono / "ChronoLocalDateTimeImpl";
namespace java::time::chrono { class ChronoLocalDateTimeImpl$1; }
template<> constexpr auto signature<::java::time::chrono::ChronoLocalDateTimeImpl$1> = ::java_time_chrono / "ChronoLocalDateTimeImpl$1";
namespace java::time::chrono { class ChronoPeriod; }
template<> constexpr auto signature<::java::time::chrono::ChronoPeriod> = ::java_time_chrono / "ChronoPeriod";
namespace java::time::chrono { class ChronoPeriodImpl; }
template<> constexpr auto signature<::java::time::chrono::ChronoPeriodImpl> = ::java_time_chrono / "ChronoPeriodImpl";
namespace java::time::chrono { class ChronoZonedDateTime; }
template<> constexpr auto signature<::java::time::chrono::ChronoZonedDateTime> = ::java_time_chrono / "ChronoZonedDateTime";
namespace java::time::chrono { class ChronoZonedDateTime$1; }
template<> constexpr auto signature<::java::time::chrono::ChronoZonedDateTime$1> = ::java_time_chrono / "ChronoZonedDateTime$1";
namespace java::time::chrono { class ChronoZonedDateTimeImpl; }
template<> constexpr auto signature<::java::time::chrono::ChronoZonedDateTimeImpl> = ::java_time_chrono / "ChronoZonedDateTimeImpl";
namespace java::time::chrono { class ChronoZonedDateTimeImpl$1; }
template<> constexpr auto signature<::java::time::chrono::ChronoZonedDateTimeImpl$1> = ::java_time_chrono / "ChronoZonedDateTimeImpl$1";
namespace java::time::chrono { class Chronology; }
template<> constexpr auto signature<::java::time::chrono::Chronology> = ::java_time_chrono / "Chronology";
namespace java::time::chrono { class Chronology$1; }
template<> constexpr auto signature<::java::time::chrono::Chronology$1> = ::java_time_chrono / "Chronology$1";
namespace java::time::chrono { class Era; }
template<> constexpr auto signature<::java::time::chrono::Era> = ::java_time_chrono / "Era";
namespace java::time::chrono { class HijrahChronology; }
template<> constexpr auto signature<::java::time::chrono::HijrahChronology> = ::java_time_chrono / "HijrahChronology";
namespace java::time::chrono { class HijrahChronology$1; }
template<> constexpr auto signature<::java::time::chrono::HijrahChronology$1> = ::java_time_chrono / "HijrahChronology$1";
namespace java::time::chrono { class HijrahDate; }
template<> constexpr auto signature<::java::time::chrono::HijrahDate> = ::java_time_chrono / "HijrahDate";
namespace java::time::chrono { class HijrahDate$1; }
template<> constexpr auto signature<::java::time::chrono::HijrahDate$1> = ::java_time_chrono / "HijrahDate$1";
namespace java::time::chrono { class HijrahEra; }
template<> constexpr auto signature<::java::time::chrono::HijrahEra> = ::java_time_chrono / "HijrahEra";
namespace java::time::chrono { class IsoChronology; }
template<> constexpr auto signature<::java::time::chrono::IsoChronology> = ::java_time_chrono / "IsoChronology";
namespace java::time::chrono { class IsoEra; }
template<> constexpr auto signature<::java::time::chrono::IsoEra> = ::java_time_chrono / "IsoEra";
namespace java::time::chrono { class JapaneseChronology; }
template<> constexpr auto signature<::java::time::chrono::JapaneseChronology> = ::java_time_chrono / "JapaneseChronology";
namespace java::time::chrono { class JapaneseChronology$1; }
template<> constexpr auto signature<::java::time::chrono::JapaneseChronology$1> = ::java_time_chrono / "JapaneseChronology$1";
namespace java::time::chrono { class JapaneseDate; }
template<> constexpr auto signature<::java::time::chrono::JapaneseDate> = ::java_time_chrono / "JapaneseDate";
namespace java::time::chrono { class JapaneseDate$1; }
template<> constexpr auto signature<::java::time::chrono::JapaneseDate$1> = ::java_time_chrono / "JapaneseDate$1";
namespace java::time::chrono { class JapaneseEra; }
template<> constexpr auto signature<::java::time::chrono::JapaneseEra> = ::java_time_chrono / "JapaneseEra";
namespace java::time::chrono { class MinguoChronology; }
template<> constexpr auto signature<::java::time::chrono::MinguoChronology> = ::java_time_chrono / "MinguoChronology";
namespace java::time::chrono { class MinguoChronology$1; }
template<> constexpr auto signature<::java::time::chrono::MinguoChronology$1> = ::java_time_chrono / "MinguoChronology$1";
namespace java::time::chrono { class MinguoDate; }
template<> constexpr auto signature<::java::time::chrono::MinguoDate> = ::java_time_chrono / "MinguoDate";
namespace java::time::chrono { class MinguoDate$1; }
template<> constexpr auto signature<::java::time::chrono::MinguoDate$1> = ::java_time_chrono / "MinguoDate$1";
namespace java::time::chrono { class MinguoEra; }
template<> constexpr auto signature<::java::time::chrono::MinguoEra> = ::java_time_chrono / "MinguoEra";
namespace java::time::chrono { class Ser; }
template<> constexpr auto signature<::java::time::chrono::Ser> = ::java_time_chrono / "Ser";
namespace java::time::chrono { class ThaiBuddhistChronology; }
template<> constexpr auto signature<::java::time::chrono::ThaiBuddhistChronology> = ::java_time_chrono / "ThaiBuddhistChronology";
namespace java::time::chrono { class ThaiBuddhistChronology$1; }
template<> constexpr auto signature<::java::time::chrono::ThaiBuddhistChronology$1> = ::java_time_chrono / "ThaiBuddhistChronology$1";
namespace java::time::chrono { class ThaiBuddhistDate; }
template<> constexpr auto signature<::java::time::chrono::ThaiBuddhistDate> = ::java_time_chrono / "ThaiBuddhistDate";
namespace java::time::chrono { class ThaiBuddhistDate$1; }
template<> constexpr auto signature<::java::time::chrono::ThaiBuddhistDate$1> = ::java_time_chrono / "ThaiBuddhistDate$1";
namespace java::time::chrono { class ThaiBuddhistEra; }
template<> constexpr auto signature<::java::time::chrono::ThaiBuddhistEra> = ::java_time_chrono / "ThaiBuddhistEra";
namespace java::time::format { class DateTimeFormatter; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatter> = ::java_time_format / "DateTimeFormatter";
namespace java::time::format { class DateTimeFormatter$ClassicFormat; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatter$ClassicFormat> = ::java_time_format / "DateTimeFormatter$ClassicFormat";
namespace java::time::format { class DateTimeFormatterBuilder; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder> = ::java_time_format / "DateTimeFormatterBuilder";
namespace java::time::format { class DateTimeFormatterBuilder$1; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$1> = ::java_time_format / "DateTimeFormatterBuilder$1";
namespace java::time::format { class DateTimeFormatterBuilder$2; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$2> = ::java_time_format / "DateTimeFormatterBuilder$2";
namespace java::time::format { class DateTimeFormatterBuilder$3; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$3> = ::java_time_format / "DateTimeFormatterBuilder$3";
namespace java::time::format { class DateTimeFormatterBuilder$CharLiteralPrinterParser; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$CharLiteralPrinterParser> = ::java_time_format / "DateTimeFormatterBuilder$CharLiteralPrinterParser";
namespace java::time::format { class DateTimeFormatterBuilder$ChronoPrinterParser; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$ChronoPrinterParser> = ::java_time_format / "DateTimeFormatterBuilder$ChronoPrinterParser";
namespace java::time::format { class DateTimeFormatterBuilder$CompositePrinterParser; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$CompositePrinterParser> = ::java_time_format / "DateTimeFormatterBuilder$CompositePrinterParser";
namespace java::time::format { class DateTimeFormatterBuilder$DateTimePrinterParser; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$DateTimePrinterParser> = ::java_time_format / "DateTimeFormatterBuilder$DateTimePrinterParser";
namespace java::time::format { class DateTimeFormatterBuilder$DefaultValueParser; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$DefaultValueParser> = ::java_time_format / "DateTimeFormatterBuilder$DefaultValueParser";
namespace java::time::format { class DateTimeFormatterBuilder$FractionPrinterParser; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$FractionPrinterParser> = ::java_time_format / "DateTimeFormatterBuilder$FractionPrinterParser";
namespace java::time::format { class DateTimeFormatterBuilder$InstantPrinterParser; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$InstantPrinterParser> = ::java_time_format / "DateTimeFormatterBuilder$InstantPrinterParser";
namespace java::time::format { class DateTimeFormatterBuilder$LocalizedOffsetIdPrinterParser; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$LocalizedOffsetIdPrinterParser> = ::java_time_format / "DateTimeFormatterBuilder$LocalizedOffsetIdPrinterParser";
namespace java::time::format { class DateTimeFormatterBuilder$LocalizedPrinterParser; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$LocalizedPrinterParser> = ::java_time_format / "DateTimeFormatterBuilder$LocalizedPrinterParser";
namespace java::time::format { class DateTimeFormatterBuilder$NumberPrinterParser; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$NumberPrinterParser> = ::java_time_format / "DateTimeFormatterBuilder$NumberPrinterParser";
namespace java::time::format { class DateTimeFormatterBuilder$OffsetIdPrinterParser; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$OffsetIdPrinterParser> = ::java_time_format / "DateTimeFormatterBuilder$OffsetIdPrinterParser";
namespace java::time::format { class DateTimeFormatterBuilder$PadPrinterParserDecorator; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$PadPrinterParserDecorator> = ::java_time_format / "DateTimeFormatterBuilder$PadPrinterParserDecorator";
namespace java::time::format { class DateTimeFormatterBuilder$PrefixTree; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$PrefixTree> = ::java_time_format / "DateTimeFormatterBuilder$PrefixTree";
namespace java::time::format { class DateTimeFormatterBuilder$PrefixTree$CI; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$PrefixTree$CI> = ::java_time_format / "DateTimeFormatterBuilder$PrefixTree$CI";
namespace java::time::format { class DateTimeFormatterBuilder$PrefixTree$LENIENT; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$PrefixTree$LENIENT> = ::java_time_format / "DateTimeFormatterBuilder$PrefixTree$LENIENT";
namespace java::time::format { class DateTimeFormatterBuilder$ReducedPrinterParser; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$ReducedPrinterParser> = ::java_time_format / "DateTimeFormatterBuilder$ReducedPrinterParser";
namespace java::time::format { class DateTimeFormatterBuilder$SettingsParser; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$SettingsParser> = ::java_time_format / "DateTimeFormatterBuilder$SettingsParser";
namespace java::time::format { class DateTimeFormatterBuilder$StringLiteralPrinterParser; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$StringLiteralPrinterParser> = ::java_time_format / "DateTimeFormatterBuilder$StringLiteralPrinterParser";
namespace java::time::format { class DateTimeFormatterBuilder$TextPrinterParser; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$TextPrinterParser> = ::java_time_format / "DateTimeFormatterBuilder$TextPrinterParser";
namespace java::time::format { class DateTimeFormatterBuilder$WeekBasedFieldPrinterParser; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$WeekBasedFieldPrinterParser> = ::java_time_format / "DateTimeFormatterBuilder$WeekBasedFieldPrinterParser";
namespace java::time::format { class DateTimeFormatterBuilder$ZoneIdPrinterParser; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$ZoneIdPrinterParser> = ::java_time_format / "DateTimeFormatterBuilder$ZoneIdPrinterParser";
namespace java::time::format { class DateTimeFormatterBuilder$ZoneTextPrinterParser; }
template<> constexpr auto signature<::java::time::format::DateTimeFormatterBuilder$ZoneTextPrinterParser> = ::java_time_format / "DateTimeFormatterBuilder$ZoneTextPrinterParser";
namespace java::time::format { class DateTimeParseContext; }
template<> constexpr auto signature<::java::time::format::DateTimeParseContext> = ::java_time_format / "DateTimeParseContext";
namespace java::time::format { class DateTimeParseException; }
template<> constexpr auto signature<::java::time::format::DateTimeParseException> = ::java_time_format / "DateTimeParseException";
namespace java::time::format { class DateTimePrintContext; }
template<> constexpr auto signature<::java::time::format::DateTimePrintContext> = ::java_time_format / "DateTimePrintContext";
namespace java::time::format { class DateTimePrintContext$1; }
template<> constexpr auto signature<::java::time::format::DateTimePrintContext$1> = ::java_time_format / "DateTimePrintContext$1";
namespace java::time::format { class DateTimeTextProvider; }
template<> constexpr auto signature<::java::time::format::DateTimeTextProvider> = ::java_time_format / "DateTimeTextProvider";
namespace java::time::format { class DateTimeTextProvider$1; }
template<> constexpr auto signature<::java::time::format::DateTimeTextProvider$1> = ::java_time_format / "DateTimeTextProvider$1";
namespace java::time::format { class DateTimeTextProvider$2; }
template<> constexpr auto signature<::java::time::format::DateTimeTextProvider$2> = ::java_time_format / "DateTimeTextProvider$2";
namespace java::time::format { class DateTimeTextProvider$LocaleStore; }
template<> constexpr auto signature<::java::time::format::DateTimeTextProvider$LocaleStore> = ::java_time_format / "DateTimeTextProvider$LocaleStore";
namespace java::time::format { class DecimalStyle; }
template<> constexpr auto signature<::java::time::format::DecimalStyle> = ::java_time_format / "DecimalStyle";
namespace java::time::format { class FormatStyle; }
template<> constexpr auto signature<::java::time::format::FormatStyle> = ::java_time_format / "FormatStyle";
namespace java::time::format { class Parsed; }
template<> constexpr auto signature<::java::time::format::Parsed> = ::java_time_format / "Parsed";
namespace java::time::format { class ResolverStyle; }
template<> constexpr auto signature<::java::time::format::ResolverStyle> = ::java_time_format / "ResolverStyle";
namespace java::time::format { class SignStyle; }
template<> constexpr auto signature<::java::time::format::SignStyle> = ::java_time_format / "SignStyle";
namespace java::time::format { class TextStyle; }
template<> constexpr auto signature<::java::time::format::TextStyle> = ::java_time_format / "TextStyle";
namespace java::time::format { class ZoneName; }
template<> constexpr auto signature<::java::time::format::ZoneName> = ::java_time_format / "ZoneName";
namespace java::time::temporal { class ChronoField; }
template<> constexpr auto signature<::java::time::temporal::ChronoField> = ::java_time_temporal / "ChronoField";
namespace java::time::temporal { class ChronoUnit; }
template<> constexpr auto signature<::java::time::temporal::ChronoUnit> = ::java_time_temporal / "ChronoUnit";
namespace java::time::temporal { class IsoFields; }
template<> constexpr auto signature<::java::time::temporal::IsoFields> = ::java_time_temporal / "IsoFields";
namespace java::time::temporal { class IsoFields$1; }
template<> constexpr auto signature<::java::time::temporal::IsoFields$1> = ::java_time_temporal / "IsoFields$1";
namespace java::time::temporal { class IsoFields$Field; }
template<> constexpr auto signature<::java::time::temporal::IsoFields$Field> = ::java_time_temporal / "IsoFields$Field";
namespace java::time::temporal { class IsoFields$Field$1; }
template<> constexpr auto signature<::java::time::temporal::IsoFields$Field$1> = ::java_time_temporal / "IsoFields$Field$1";
namespace java::time::temporal { class IsoFields$Field$2; }
template<> constexpr auto signature<::java::time::temporal::IsoFields$Field$2> = ::java_time_temporal / "IsoFields$Field$2";
namespace java::time::temporal { class IsoFields$Field$3; }
template<> constexpr auto signature<::java::time::temporal::IsoFields$Field$3> = ::java_time_temporal / "IsoFields$Field$3";
namespace java::time::temporal { class IsoFields$Field$4; }
template<> constexpr auto signature<::java::time::temporal::IsoFields$Field$4> = ::java_time_temporal / "IsoFields$Field$4";
namespace java::time::temporal { class IsoFields$Unit; }
template<> constexpr auto signature<::java::time::temporal::IsoFields$Unit> = ::java_time_temporal / "IsoFields$Unit";
namespace java::time::temporal { class JulianFields; }
template<> constexpr auto signature<::java::time::temporal::JulianFields> = ::java_time_temporal / "JulianFields";
namespace java::time::temporal { class JulianFields$Field; }
template<> constexpr auto signature<::java::time::temporal::JulianFields$Field> = ::java_time_temporal / "JulianFields$Field";
namespace java::time::temporal { class Temporal; }
template<> constexpr auto signature<::java::time::temporal::Temporal> = ::java_time_temporal / "Temporal";
namespace java::time::temporal { class TemporalAccessor; }
template<> constexpr auto signature<::java::time::temporal::TemporalAccessor> = ::java_time_temporal / "TemporalAccessor";
namespace java::time::temporal { class TemporalAdjuster; }
template<> constexpr auto signature<::java::time::temporal::TemporalAdjuster> = ::java_time_temporal / "TemporalAdjuster";
namespace java::time::temporal { class TemporalAdjusters; }
template<> constexpr auto signature<::java::time::temporal::TemporalAdjusters> = ::java_time_temporal / "TemporalAdjusters";
namespace java::time::temporal { class TemporalAmount; }
template<> constexpr auto signature<::java::time::temporal::TemporalAmount> = ::java_time_temporal / "TemporalAmount";
namespace java::time::temporal { class TemporalField; }
template<> constexpr auto signature<::java::time::temporal::TemporalField> = ::java_time_temporal / "TemporalField";
namespace java::time::temporal { class TemporalQueries; }
template<> constexpr auto signature<::java::time::temporal::TemporalQueries> = ::java_time_temporal / "TemporalQueries";
namespace java::time::temporal { class TemporalQuery; }
template<> constexpr auto signature<::java::time::temporal::TemporalQuery> = ::java_time_temporal / "TemporalQuery";
namespace java::time::temporal { class TemporalUnit; }
template<> constexpr auto signature<::java::time::temporal::TemporalUnit> = ::java_time_temporal / "TemporalUnit";
namespace java::time::temporal { class UnsupportedTemporalTypeException; }
template<> constexpr auto signature<::java::time::temporal::UnsupportedTemporalTypeException> = ::java_time_temporal / "UnsupportedTemporalTypeException";
namespace java::time::temporal { class ValueRange; }
template<> constexpr auto signature<::java::time::temporal::ValueRange> = ::java_time_temporal / "ValueRange";
namespace java::time::temporal { class WeekFields; }
template<> constexpr auto signature<::java::time::temporal::WeekFields> = ::java_time_temporal / "WeekFields";
namespace java::time::temporal { class WeekFields$ComputedDayOfField; }
template<> constexpr auto signature<::java::time::temporal::WeekFields$ComputedDayOfField> = ::java_time_temporal / "WeekFields$ComputedDayOfField";
namespace java::time::zone { class Ser; }
template<> constexpr auto signature<::java::time::zone::Ser> = ::java_time_zone / "Ser";
namespace java::time::zone { class TzdbZoneRulesProvider; }
template<> constexpr auto signature<::java::time::zone::TzdbZoneRulesProvider> = ::java_time_zone / "TzdbZoneRulesProvider";
namespace java::time::zone { class ZoneOffsetTransition; }
template<> constexpr auto signature<::java::time::zone::ZoneOffsetTransition> = ::java_time_zone / "ZoneOffsetTransition";
namespace java::time::zone { class ZoneOffsetTransitionRule; }
template<> constexpr auto signature<::java::time::zone::ZoneOffsetTransitionRule> = ::java_time_zone / "ZoneOffsetTransitionRule";
namespace java::time::zone { class ZoneOffsetTransitionRule$1; }
template<> constexpr auto signature<::java::time::zone::ZoneOffsetTransitionRule$1> = ::java_time_zone / "ZoneOffsetTransitionRule$1";
namespace java::time::zone { class ZoneOffsetTransitionRule$TimeDefinition; }
template<> constexpr auto signature<::java::time::zone::ZoneOffsetTransitionRule$TimeDefinition> = ::java_time_zone / "ZoneOffsetTransitionRule$TimeDefinition";
namespace java::time::zone { class ZoneRules; }
template<> constexpr auto signature<::java::time::zone::ZoneRules> = ::java_time_zone / "ZoneRules";
namespace java::time::zone { class ZoneRulesException; }
template<> constexpr auto signature<::java::time::zone::ZoneRulesException> = ::java_time_zone / "ZoneRulesException";
namespace java::time::zone { class ZoneRulesProvider; }
template<> constexpr auto signature<::java::time::zone::ZoneRulesProvider> = ::java_time_zone / "ZoneRulesProvider";
namespace java::time::zone { class ZoneRulesProvider$1; }
template<> constexpr auto signature<::java::time::zone::ZoneRulesProvider$1> = ::java_time_zone / "ZoneRulesProvider$1";
namespace java::util { class AbstractCollection; }
template<> constexpr auto signature<::java::util::AbstractCollection> = ::java_util / "AbstractCollection";
namespace java::util { class AbstractList; }
template<> constexpr auto signature<::java::util::AbstractList> = ::java_util / "AbstractList";
namespace java::util { class AbstractList$1; }
template<> constexpr auto signature<::java::util::AbstractList$1> = ::java_util / "AbstractList$1";
namespace java::util { class AbstractList$Itr; }
template<> constexpr auto signature<::java::util::AbstractList$Itr> = ::java_util / "AbstractList$Itr";
namespace java::util { class AbstractList$ListItr; }
template<> constexpr auto signature<::java::util::AbstractList$ListItr> = ::java_util / "AbstractList$ListItr";
namespace java::util { class AbstractMap; }
template<> constexpr auto signature<::java::util::AbstractMap> = ::java_util / "AbstractMap";
namespace java::util { class AbstractMap$1; }
template<> constexpr auto signature<::java::util::AbstractMap$1> = ::java_util / "AbstractMap$1";
namespace java::util { class AbstractMap$1$1; }
template<> constexpr auto signature<::java::util::AbstractMap$1$1> = ::java_util / "AbstractMap$1$1";
namespace java::util { class AbstractMap$2; }
template<> constexpr auto signature<::java::util::AbstractMap$2> = ::java_util / "AbstractMap$2";
namespace java::util { class AbstractMap$2$1; }
template<> constexpr auto signature<::java::util::AbstractMap$2$1> = ::java_util / "AbstractMap$2$1";
namespace java::util { class AbstractMap$SimpleEntry; }
template<> constexpr auto signature<::java::util::AbstractMap$SimpleEntry> = ::java_util / "AbstractMap$SimpleEntry";
namespace java::util { class AbstractMap$SimpleImmutableEntry; }
template<> constexpr auto signature<::java::util::AbstractMap$SimpleImmutableEntry> = ::java_util / "AbstractMap$SimpleImmutableEntry";
namespace java::util { class AbstractQueue; }
template<> constexpr auto signature<::java::util::AbstractQueue> = ::java_util / "AbstractQueue";
namespace java::util { class AbstractSequentialList; }
template<> constexpr auto signature<::java::util::AbstractSequentialList> = ::java_util / "AbstractSequentialList";
namespace java::util { class AbstractSet; }
template<> constexpr auto signature<::java::util::AbstractSet> = ::java_util / "AbstractSet";
namespace java::util { class ArrayDeque; }
template<> constexpr auto signature<::java::util::ArrayDeque> = ::java_util / "ArrayDeque";
namespace java::util { class ArrayDeque$1; }
template<> constexpr auto signature<::java::util::ArrayDeque$1> = ::java_util / "ArrayDeque$1";
namespace java::util { class ArrayDeque$DeqIterator; }
template<> constexpr auto signature<::java::util::ArrayDeque$DeqIterator> = ::java_util / "ArrayDeque$DeqIterator";
namespace java::util { class ArrayDeque$DeqSpliterator; }
template<> constexpr auto signature<::java::util::ArrayDeque$DeqSpliterator> = ::java_util / "ArrayDeque$DeqSpliterator";
namespace java::util { class ArrayDeque$DescendingIterator; }
template<> constexpr auto signature<::java::util::ArrayDeque$DescendingIterator> = ::java_util / "ArrayDeque$DescendingIterator";
namespace java::util { class ArrayList; }
template<> constexpr auto signature<::java::util::ArrayList> = ::java_util / "ArrayList";
namespace java::util { class ArrayList$1; }
template<> constexpr auto signature<::java::util::ArrayList$1> = ::java_util / "ArrayList$1";
namespace java::util { class ArrayList$ArrayListSpliterator; }
template<> constexpr auto signature<::java::util::ArrayList$ArrayListSpliterator> = ::java_util / "ArrayList$ArrayListSpliterator";
namespace java::util { class ArrayList$Itr; }
template<> constexpr auto signature<::java::util::ArrayList$Itr> = ::java_util / "ArrayList$Itr";
namespace java::util { class ArrayList$ListItr; }
template<> constexpr auto signature<::java::util::ArrayList$ListItr> = ::java_util / "ArrayList$ListItr";
namespace java::util { class ArrayList$SubList; }
template<> constexpr auto signature<::java::util::ArrayList$SubList> = ::java_util / "ArrayList$SubList";
namespace java::util { class ArrayList$SubList$1; }
template<> constexpr auto signature<::java::util::ArrayList$SubList$1> = ::java_util / "ArrayList$SubList$1";
namespace java::util { class ArrayPrefixHelpers; }
template<> constexpr auto signature<::java::util::ArrayPrefixHelpers> = ::java_util / "ArrayPrefixHelpers";
namespace java::util { class ArrayPrefixHelpers$CumulateTask; }
template<> constexpr auto signature<::java::util::ArrayPrefixHelpers$CumulateTask> = ::java_util / "ArrayPrefixHelpers$CumulateTask";
namespace java::util { class ArrayPrefixHelpers$DoubleCumulateTask; }
template<> constexpr auto signature<::java::util::ArrayPrefixHelpers$DoubleCumulateTask> = ::java_util / "ArrayPrefixHelpers$DoubleCumulateTask";
namespace java::util { class ArrayPrefixHelpers$IntCumulateTask; }
template<> constexpr auto signature<::java::util::ArrayPrefixHelpers$IntCumulateTask> = ::java_util / "ArrayPrefixHelpers$IntCumulateTask";
namespace java::util { class ArrayPrefixHelpers$LongCumulateTask; }
template<> constexpr auto signature<::java::util::ArrayPrefixHelpers$LongCumulateTask> = ::java_util / "ArrayPrefixHelpers$LongCumulateTask";
namespace java::util { class Arrays; }
template<> constexpr auto signature<::java::util::Arrays> = ::java_util / "Arrays";
namespace java::util { class Arrays$ArrayList; }
template<> constexpr auto signature<::java::util::Arrays$ArrayList> = ::java_util / "Arrays$ArrayList";
namespace java::util { class Arrays$LegacyMergeSort; }
template<> constexpr auto signature<::java::util::Arrays$LegacyMergeSort> = ::java_util / "Arrays$LegacyMergeSort";
namespace java::util { class Arrays$NaturalOrder; }
template<> constexpr auto signature<::java::util::Arrays$NaturalOrder> = ::java_util / "Arrays$NaturalOrder";
namespace java::util { class ArraysParallelSortHelpers; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers> = ::java_util / "ArraysParallelSortHelpers";
namespace java::util { class ArraysParallelSortHelpers$EmptyCompleter; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$EmptyCompleter> = ::java_util / "ArraysParallelSortHelpers$EmptyCompleter";
namespace java::util { class ArraysParallelSortHelpers$FJByte; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJByte> = ::java_util / "ArraysParallelSortHelpers$FJByte";
namespace java::util { class ArraysParallelSortHelpers$FJByte$Merger; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJByte$Merger> = ::java_util / "ArraysParallelSortHelpers$FJByte$Merger";
namespace java::util { class ArraysParallelSortHelpers$FJByte$Sorter; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJByte$Sorter> = ::java_util / "ArraysParallelSortHelpers$FJByte$Sorter";
namespace java::util { class ArraysParallelSortHelpers$FJChar; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJChar> = ::java_util / "ArraysParallelSortHelpers$FJChar";
namespace java::util { class ArraysParallelSortHelpers$FJChar$Merger; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJChar$Merger> = ::java_util / "ArraysParallelSortHelpers$FJChar$Merger";
namespace java::util { class ArraysParallelSortHelpers$FJChar$Sorter; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJChar$Sorter> = ::java_util / "ArraysParallelSortHelpers$FJChar$Sorter";
namespace java::util { class ArraysParallelSortHelpers$FJDouble; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJDouble> = ::java_util / "ArraysParallelSortHelpers$FJDouble";
namespace java::util { class ArraysParallelSortHelpers$FJDouble$Merger; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJDouble$Merger> = ::java_util / "ArraysParallelSortHelpers$FJDouble$Merger";
namespace java::util { class ArraysParallelSortHelpers$FJDouble$Sorter; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJDouble$Sorter> = ::java_util / "ArraysParallelSortHelpers$FJDouble$Sorter";
namespace java::util { class ArraysParallelSortHelpers$FJFloat; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJFloat> = ::java_util / "ArraysParallelSortHelpers$FJFloat";
namespace java::util { class ArraysParallelSortHelpers$FJFloat$Merger; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJFloat$Merger> = ::java_util / "ArraysParallelSortHelpers$FJFloat$Merger";
namespace java::util { class ArraysParallelSortHelpers$FJFloat$Sorter; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJFloat$Sorter> = ::java_util / "ArraysParallelSortHelpers$FJFloat$Sorter";
namespace java::util { class ArraysParallelSortHelpers$FJInt; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJInt> = ::java_util / "ArraysParallelSortHelpers$FJInt";
namespace java::util { class ArraysParallelSortHelpers$FJInt$Merger; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJInt$Merger> = ::java_util / "ArraysParallelSortHelpers$FJInt$Merger";
namespace java::util { class ArraysParallelSortHelpers$FJInt$Sorter; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJInt$Sorter> = ::java_util / "ArraysParallelSortHelpers$FJInt$Sorter";
namespace java::util { class ArraysParallelSortHelpers$FJLong; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJLong> = ::java_util / "ArraysParallelSortHelpers$FJLong";
namespace java::util { class ArraysParallelSortHelpers$FJLong$Merger; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJLong$Merger> = ::java_util / "ArraysParallelSortHelpers$FJLong$Merger";
namespace java::util { class ArraysParallelSortHelpers$FJLong$Sorter; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJLong$Sorter> = ::java_util / "ArraysParallelSortHelpers$FJLong$Sorter";
namespace java::util { class ArraysParallelSortHelpers$FJObject; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJObject> = ::java_util / "ArraysParallelSortHelpers$FJObject";
namespace java::util { class ArraysParallelSortHelpers$FJObject$Merger; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJObject$Merger> = ::java_util / "ArraysParallelSortHelpers$FJObject$Merger";
namespace java::util { class ArraysParallelSortHelpers$FJObject$Sorter; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJObject$Sorter> = ::java_util / "ArraysParallelSortHelpers$FJObject$Sorter";
namespace java::util { class ArraysParallelSortHelpers$FJShort; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJShort> = ::java_util / "ArraysParallelSortHelpers$FJShort";
namespace java::util { class ArraysParallelSortHelpers$FJShort$Merger; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJShort$Merger> = ::java_util / "ArraysParallelSortHelpers$FJShort$Merger";
namespace java::util { class ArraysParallelSortHelpers$FJShort$Sorter; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$FJShort$Sorter> = ::java_util / "ArraysParallelSortHelpers$FJShort$Sorter";
namespace java::util { class ArraysParallelSortHelpers$Relay; }
template<> constexpr auto signature<::java::util::ArraysParallelSortHelpers$Relay> = ::java_util / "ArraysParallelSortHelpers$Relay";
namespace java::util { class Base64; }
template<> constexpr auto signature<::java::util::Base64> = ::java_util / "Base64";
namespace java::util { class Base64$1; }
template<> constexpr auto signature<::java::util::Base64$1> = ::java_util / "Base64$1";
namespace java::util { class Base64$DecInputStream; }
template<> constexpr auto signature<::java::util::Base64$DecInputStream> = ::java_util / "Base64$DecInputStream";
namespace java::util { class Base64$Decoder; }
template<> constexpr auto signature<::java::util::Base64$Decoder> = ::java_util / "Base64$Decoder";
namespace java::util { class Base64$EncOutputStream; }
template<> constexpr auto signature<::java::util::Base64$EncOutputStream> = ::java_util / "Base64$EncOutputStream";
namespace java::util { class Base64$Encoder; }
template<> constexpr auto signature<::java::util::Base64$Encoder> = ::java_util / "Base64$Encoder";
namespace java::util { class BitSet; }
template<> constexpr auto signature<::java::util::BitSet> = ::java_util / "BitSet";
namespace java::util { class BitSet$1BitSetIterator; }
template<> constexpr auto signature<::java::util::BitSet$1BitSetIterator> = ::java_util / "BitSet$1BitSetIterator";
namespace java::util { class Calendar; }
template<> constexpr auto signature<::java::util::Calendar> = ::java_util / "Calendar";
namespace java::util { class Calendar$1; }
template<> constexpr auto signature<::java::util::Calendar$1> = ::java_util / "Calendar$1";
namespace java::util { class Calendar$AvailableCalendarTypes; }
template<> constexpr auto signature<::java::util::Calendar$AvailableCalendarTypes> = ::java_util / "Calendar$AvailableCalendarTypes";
namespace java::util { class Calendar$Builder; }
template<> constexpr auto signature<::java::util::Calendar$Builder> = ::java_util / "Calendar$Builder";
namespace java::util { class Calendar$CalendarAccessControlContext; }
template<> constexpr auto signature<::java::util::Calendar$CalendarAccessControlContext> = ::java_util / "Calendar$CalendarAccessControlContext";
namespace java::util { class Collection; }
template<> constexpr auto signature<::java::util::Collection> = ::java_util / "Collection";
namespace java::util { class Collections; }
template<> constexpr auto signature<::java::util::Collections> = ::java_util / "Collections";
namespace java::util { class Collections$1; }
template<> constexpr auto signature<::java::util::Collections$1> = ::java_util / "Collections$1";
namespace java::util { class Collections$2; }
template<> constexpr auto signature<::java::util::Collections$2> = ::java_util / "Collections$2";
namespace java::util { class Collections$3; }
template<> constexpr auto signature<::java::util::Collections$3> = ::java_util / "Collections$3";
namespace java::util { class Collections$AsLIFOQueue; }
template<> constexpr auto signature<::java::util::Collections$AsLIFOQueue> = ::java_util / "Collections$AsLIFOQueue";
namespace java::util { class Collections$CheckedCollection; }
template<> constexpr auto signature<::java::util::Collections$CheckedCollection> = ::java_util / "Collections$CheckedCollection";
namespace java::util { class Collections$CheckedCollection$1; }
template<> constexpr auto signature<::java::util::Collections$CheckedCollection$1> = ::java_util / "Collections$CheckedCollection$1";
namespace java::util { class Collections$CheckedList; }
template<> constexpr auto signature<::java::util::Collections$CheckedList> = ::java_util / "Collections$CheckedList";
namespace java::util { class Collections$CheckedList$1; }
template<> constexpr auto signature<::java::util::Collections$CheckedList$1> = ::java_util / "Collections$CheckedList$1";
namespace java::util { class Collections$CheckedMap; }
template<> constexpr auto signature<::java::util::Collections$CheckedMap> = ::java_util / "Collections$CheckedMap";
namespace java::util { class Collections$CheckedMap$CheckedEntrySet; }
template<> constexpr auto signature<::java::util::Collections$CheckedMap$CheckedEntrySet> = ::java_util / "Collections$CheckedMap$CheckedEntrySet";
namespace java::util { class Collections$CheckedMap$CheckedEntrySet$1; }
template<> constexpr auto signature<::java::util::Collections$CheckedMap$CheckedEntrySet$1> = ::java_util / "Collections$CheckedMap$CheckedEntrySet$1";
namespace java::util { class Collections$CheckedMap$CheckedEntrySet$CheckedEntry; }
template<> constexpr auto signature<::java::util::Collections$CheckedMap$CheckedEntrySet$CheckedEntry> = ::java_util / "Collections$CheckedMap$CheckedEntrySet$CheckedEntry";
namespace java::util { class Collections$CheckedNavigableMap; }
template<> constexpr auto signature<::java::util::Collections$CheckedNavigableMap> = ::java_util / "Collections$CheckedNavigableMap";
namespace java::util { class Collections$CheckedNavigableSet; }
template<> constexpr auto signature<::java::util::Collections$CheckedNavigableSet> = ::java_util / "Collections$CheckedNavigableSet";
namespace java::util { class Collections$CheckedQueue; }
template<> constexpr auto signature<::java::util::Collections$CheckedQueue> = ::java_util / "Collections$CheckedQueue";
namespace java::util { class Collections$CheckedRandomAccessList; }
template<> constexpr auto signature<::java::util::Collections$CheckedRandomAccessList> = ::java_util / "Collections$CheckedRandomAccessList";
namespace java::util { class Collections$CheckedSet; }
template<> constexpr auto signature<::java::util::Collections$CheckedSet> = ::java_util / "Collections$CheckedSet";
namespace java::util { class Collections$CheckedSortedMap; }
template<> constexpr auto signature<::java::util::Collections$CheckedSortedMap> = ::java_util / "Collections$CheckedSortedMap";
namespace java::util { class Collections$CheckedSortedSet; }
template<> constexpr auto signature<::java::util::Collections$CheckedSortedSet> = ::java_util / "Collections$CheckedSortedSet";
namespace java::util { class Collections$CopiesList; }
template<> constexpr auto signature<::java::util::Collections$CopiesList> = ::java_util / "Collections$CopiesList";
namespace java::util { class Collections$EmptyEnumeration; }
template<> constexpr auto signature<::java::util::Collections$EmptyEnumeration> = ::java_util / "Collections$EmptyEnumeration";
namespace java::util { class Collections$EmptyIterator; }
template<> constexpr auto signature<::java::util::Collections$EmptyIterator> = ::java_util / "Collections$EmptyIterator";
namespace java::util { class Collections$EmptyList; }
template<> constexpr auto signature<::java::util::Collections$EmptyList> = ::java_util / "Collections$EmptyList";
namespace java::util { class Collections$EmptyListIterator; }
template<> constexpr auto signature<::java::util::Collections$EmptyListIterator> = ::java_util / "Collections$EmptyListIterator";
namespace java::util { class Collections$EmptyMap; }
template<> constexpr auto signature<::java::util::Collections$EmptyMap> = ::java_util / "Collections$EmptyMap";
namespace java::util { class Collections$EmptySet; }
template<> constexpr auto signature<::java::util::Collections$EmptySet> = ::java_util / "Collections$EmptySet";
namespace java::util { class Collections$ReverseComparator; }
template<> constexpr auto signature<::java::util::Collections$ReverseComparator> = ::java_util / "Collections$ReverseComparator";
namespace java::util { class Collections$ReverseComparator2; }
template<> constexpr auto signature<::java::util::Collections$ReverseComparator2> = ::java_util / "Collections$ReverseComparator2";
namespace java::util { class Collections$SetFromMap; }
template<> constexpr auto signature<::java::util::Collections$SetFromMap> = ::java_util / "Collections$SetFromMap";
namespace java::util { class Collections$SingletonList; }
template<> constexpr auto signature<::java::util::Collections$SingletonList> = ::java_util / "Collections$SingletonList";
namespace java::util { class Collections$SingletonMap; }
template<> constexpr auto signature<::java::util::Collections$SingletonMap> = ::java_util / "Collections$SingletonMap";
namespace java::util { class Collections$SingletonSet; }
template<> constexpr auto signature<::java::util::Collections$SingletonSet> = ::java_util / "Collections$SingletonSet";
namespace java::util { class Collections$SynchronizedCollection; }
template<> constexpr auto signature<::java::util::Collections$SynchronizedCollection> = ::java_util / "Collections$SynchronizedCollection";
namespace java::util { class Collections$SynchronizedList; }
template<> constexpr auto signature<::java::util::Collections$SynchronizedList> = ::java_util / "Collections$SynchronizedList";
namespace java::util { class Collections$SynchronizedMap; }
template<> constexpr auto signature<::java::util::Collections$SynchronizedMap> = ::java_util / "Collections$SynchronizedMap";
namespace java::util { class Collections$SynchronizedNavigableMap; }
template<> constexpr auto signature<::java::util::Collections$SynchronizedNavigableMap> = ::java_util / "Collections$SynchronizedNavigableMap";
namespace java::util { class Collections$SynchronizedNavigableSet; }
template<> constexpr auto signature<::java::util::Collections$SynchronizedNavigableSet> = ::java_util / "Collections$SynchronizedNavigableSet";
namespace java::util { class Collections$SynchronizedRandomAccessList; }
template<> constexpr auto signature<::java::util::Collections$SynchronizedRandomAccessList> = ::java_util / "Collections$SynchronizedRandomAccessList";
namespace java::util { class Collections$SynchronizedSet; }
template<> constexpr auto signature<::java::util::Collections$SynchronizedSet> = ::java_util / "Collections$SynchronizedSet";
namespace java::util { class Collections$SynchronizedSortedMap; }
template<> constexpr auto signature<::java::util::Collections$SynchronizedSortedMap> = ::java_util / "Collections$SynchronizedSortedMap";
namespace java::util { class Collections$SynchronizedSortedSet; }
template<> constexpr auto signature<::java::util::Collections$SynchronizedSortedSet> = ::java_util / "Collections$SynchronizedSortedSet";
namespace java::util { class Collections$UnmodifiableCollection; }
template<> constexpr auto signature<::java::util::Collections$UnmodifiableCollection> = ::java_util / "Collections$UnmodifiableCollection";
namespace java::util { class Collections$UnmodifiableCollection$1; }
template<> constexpr auto signature<::java::util::Collections$UnmodifiableCollection$1> = ::java_util / "Collections$UnmodifiableCollection$1";
namespace java::util { class Collections$UnmodifiableList; }
template<> constexpr auto signature<::java::util::Collections$UnmodifiableList> = ::java_util / "Collections$UnmodifiableList";
namespace java::util { class Collections$UnmodifiableList$1; }
template<> constexpr auto signature<::java::util::Collections$UnmodifiableList$1> = ::java_util / "Collections$UnmodifiableList$1";
namespace java::util { class Collections$UnmodifiableMap; }
template<> constexpr auto signature<::java::util::Collections$UnmodifiableMap> = ::java_util / "Collections$UnmodifiableMap";
namespace java::util { class Collections$UnmodifiableMap$UnmodifiableEntrySet; }
template<> constexpr auto signature<::java::util::Collections$UnmodifiableMap$UnmodifiableEntrySet> = ::java_util / "Collections$UnmodifiableMap$UnmodifiableEntrySet";
namespace java::util { class Collections$UnmodifiableMap$UnmodifiableEntrySet$1; }
template<> constexpr auto signature<::java::util::Collections$UnmodifiableMap$UnmodifiableEntrySet$1> = ::java_util / "Collections$UnmodifiableMap$UnmodifiableEntrySet$1";
namespace java::util { class Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry; }
template<> constexpr auto signature<::java::util::Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry> = ::java_util / "Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry";
namespace java::util { class Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator; }
template<> constexpr auto signature<::java::util::Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator> = ::java_util / "Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator";
namespace java::util { class Collections$UnmodifiableNavigableMap; }
template<> constexpr auto signature<::java::util::Collections$UnmodifiableNavigableMap> = ::java_util / "Collections$UnmodifiableNavigableMap";
namespace java::util { class Collections$UnmodifiableNavigableMap$EmptyNavigableMap; }
template<> constexpr auto signature<::java::util::Collections$UnmodifiableNavigableMap$EmptyNavigableMap> = ::java_util / "Collections$UnmodifiableNavigableMap$EmptyNavigableMap";
namespace java::util { class Collections$UnmodifiableNavigableSet; }
template<> constexpr auto signature<::java::util::Collections$UnmodifiableNavigableSet> = ::java_util / "Collections$UnmodifiableNavigableSet";
namespace java::util { class Collections$UnmodifiableNavigableSet$EmptyNavigableSet; }
template<> constexpr auto signature<::java::util::Collections$UnmodifiableNavigableSet$EmptyNavigableSet> = ::java_util / "Collections$UnmodifiableNavigableSet$EmptyNavigableSet";
namespace java::util { class Collections$UnmodifiableRandomAccessList; }
template<> constexpr auto signature<::java::util::Collections$UnmodifiableRandomAccessList> = ::java_util / "Collections$UnmodifiableRandomAccessList";
namespace java::util { class Collections$UnmodifiableSet; }
template<> constexpr auto signature<::java::util::Collections$UnmodifiableSet> = ::java_util / "Collections$UnmodifiableSet";
namespace java::util { class Collections$UnmodifiableSortedMap; }
template<> constexpr auto signature<::java::util::Collections$UnmodifiableSortedMap> = ::java_util / "Collections$UnmodifiableSortedMap";
namespace java::util { class Collections$UnmodifiableSortedSet; }
template<> constexpr auto signature<::java::util::Collections$UnmodifiableSortedSet> = ::java_util / "Collections$UnmodifiableSortedSet";
namespace java::util { class ComparableTimSort; }
template<> constexpr auto signature<::java::util::ComparableTimSort> = ::java_util / "ComparableTimSort";
namespace java::util { class Comparator; }
template<> constexpr auto signature<::java::util::Comparator> = ::java_util / "Comparator";
namespace java::util { class Comparators; }
template<> constexpr auto signature<::java::util::Comparators> = ::java_util / "Comparators";
namespace java::util { class Comparators$NaturalOrderComparator; }
template<> constexpr auto signature<::java::util::Comparators$NaturalOrderComparator> = ::java_util / "Comparators$NaturalOrderComparator";
namespace java::util { class Comparators$NullComparator; }
template<> constexpr auto signature<::java::util::Comparators$NullComparator> = ::java_util / "Comparators$NullComparator";
namespace java::util { class ConcurrentModificationException; }
template<> constexpr auto signature<::java::util::ConcurrentModificationException> = ::java_util / "ConcurrentModificationException";
namespace java::util { class Currency; }
template<> constexpr auto signature<::java::util::Currency> = ::java_util / "Currency";
namespace java::util { class Currency$1; }
template<> constexpr auto signature<::java::util::Currency$1> = ::java_util / "Currency$1";
namespace java::util { class Currency$CurrencyNameGetter; }
template<> constexpr auto signature<::java::util::Currency$CurrencyNameGetter> = ::java_util / "Currency$CurrencyNameGetter";
namespace java::util { class Date; }
template<> constexpr auto signature<::java::util::Date> = ::java_util / "Date";
namespace java::util { class Deque; }
template<> constexpr auto signature<::java::util::Deque> = ::java_util / "Deque";
namespace java::util { class Dictionary; }
template<> constexpr auto signature<::java::util::Dictionary> = ::java_util / "Dictionary";
namespace java::util { class DoubleSummaryStatistics; }
template<> constexpr auto signature<::java::util::DoubleSummaryStatistics> = ::java_util / "DoubleSummaryStatistics";
namespace java::util { class DualPivotQuicksort; }
template<> constexpr auto signature<::java::util::DualPivotQuicksort> = ::java_util / "DualPivotQuicksort";
namespace java::util { class DuplicateFormatFlagsException; }
template<> constexpr auto signature<::java::util::DuplicateFormatFlagsException> = ::java_util / "DuplicateFormatFlagsException";
namespace java::util { class EmptyStackException; }
template<> constexpr auto signature<::java::util::EmptyStackException> = ::java_util / "EmptyStackException";
namespace java::util { class EnumMap; }
template<> constexpr auto signature<::java::util::EnumMap> = ::java_util / "EnumMap";
namespace java::util { class EnumMap$1; }
template<> constexpr auto signature<::java::util::EnumMap$1> = ::java_util / "EnumMap$1";
namespace java::util { class EnumMap$EntryIterator; }
template<> constexpr auto signature<::java::util::EnumMap$EntryIterator> = ::java_util / "EnumMap$EntryIterator";
namespace java::util { class EnumMap$EntryIterator$Entry; }
template<> constexpr auto signature<::java::util::EnumMap$EntryIterator$Entry> = ::java_util / "EnumMap$EntryIterator$Entry";
namespace java::util { class EnumMap$EntrySet; }
template<> constexpr auto signature<::java::util::EnumMap$EntrySet> = ::java_util / "EnumMap$EntrySet";
namespace java::util { class EnumMap$EnumMapIterator; }
template<> constexpr auto signature<::java::util::EnumMap$EnumMapIterator> = ::java_util / "EnumMap$EnumMapIterator";
namespace java::util { class EnumMap$KeyIterator; }
template<> constexpr auto signature<::java::util::EnumMap$KeyIterator> = ::java_util / "EnumMap$KeyIterator";
namespace java::util { class EnumMap$KeySet; }
template<> constexpr auto signature<::java::util::EnumMap$KeySet> = ::java_util / "EnumMap$KeySet";
namespace java::util { class EnumMap$ValueIterator; }
template<> constexpr auto signature<::java::util::EnumMap$ValueIterator> = ::java_util / "EnumMap$ValueIterator";
namespace java::util { class EnumMap$Values; }
template<> constexpr auto signature<::java::util::EnumMap$Values> = ::java_util / "EnumMap$Values";
namespace java::util { class EnumSet; }
template<> constexpr auto signature<::java::util::EnumSet> = ::java_util / "EnumSet";
namespace java::util { class EnumSet$SerializationProxy; }
template<> constexpr auto signature<::java::util::EnumSet$SerializationProxy> = ::java_util / "EnumSet$SerializationProxy";
namespace java::util { class Enumeration; }
template<> constexpr auto signature<::java::util::Enumeration> = ::java_util / "Enumeration";
namespace java::util { class EventListener; }
template<> constexpr auto signature<::java::util::EventListener> = ::java_util / "EventListener";
namespace java::util { class EventListenerProxy; }
template<> constexpr auto signature<::java::util::EventListenerProxy> = ::java_util / "EventListenerProxy";
namespace java::util { class EventObject; }
template<> constexpr auto signature<::java::util::EventObject> = ::java_util / "EventObject";
namespace java::util { class FormatFlagsConversionMismatchException; }
template<> constexpr auto signature<::java::util::FormatFlagsConversionMismatchException> = ::java_util / "FormatFlagsConversionMismatchException";
namespace java::util { class Formattable; }
template<> constexpr auto signature<::java::util::Formattable> = ::java_util / "Formattable";
namespace java::util { class FormattableFlags; }
template<> constexpr auto signature<::java::util::FormattableFlags> = ::java_util / "FormattableFlags";
namespace java::util { class Formatter; }
template<> constexpr auto signature<::java::util::Formatter> = ::java_util / "Formatter";
namespace java::util { class Formatter$BigDecimalLayoutForm; }
template<> constexpr auto signature<::java::util::Formatter$BigDecimalLayoutForm> = ::java_util / "Formatter$BigDecimalLayoutForm";
namespace java::util { class Formatter$Conversion; }
template<> constexpr auto signature<::java::util::Formatter$Conversion> = ::java_util / "Formatter$Conversion";
namespace java::util { class Formatter$DateTime; }
template<> constexpr auto signature<::java::util::Formatter$DateTime> = ::java_util / "Formatter$DateTime";
namespace java::util { class Formatter$FixedString; }
template<> constexpr auto signature<::java::util::Formatter$FixedString> = ::java_util / "Formatter$FixedString";
namespace java::util { class Formatter$Flags; }
template<> constexpr auto signature<::java::util::Formatter$Flags> = ::java_util / "Formatter$Flags";
namespace java::util { class Formatter$FormatSpecifier; }
template<> constexpr auto signature<::java::util::Formatter$FormatSpecifier> = ::java_util / "Formatter$FormatSpecifier";
namespace java::util { class Formatter$FormatSpecifier$BigDecimalLayout; }
template<> constexpr auto signature<::java::util::Formatter$FormatSpecifier$BigDecimalLayout> = ::java_util / "Formatter$FormatSpecifier$BigDecimalLayout";
namespace java::util { class Formatter$FormatString; }
template<> constexpr auto signature<::java::util::Formatter$FormatString> = ::java_util / "Formatter$FormatString";
namespace java::util { class FormatterClosedException; }
template<> constexpr auto signature<::java::util::FormatterClosedException> = ::java_util / "FormatterClosedException";
namespace java::util { class GregorianCalendar; }
template<> constexpr auto signature<::java::util::GregorianCalendar> = ::java_util / "GregorianCalendar";
namespace java::util { class HashMap; }
template<> constexpr auto signature<::java::util::HashMap> = ::java_util / "HashMap";
namespace java::util { class HashMap$EntryIterator; }
template<> constexpr auto signature<::java::util::HashMap$EntryIterator> = ::java_util / "HashMap$EntryIterator";
namespace java::util { class HashMap$EntrySet; }
template<> constexpr auto signature<::java::util::HashMap$EntrySet> = ::java_util / "HashMap$EntrySet";
namespace java::util { class HashMap$EntrySpliterator; }
template<> constexpr auto signature<::java::util::HashMap$EntrySpliterator> = ::java_util / "HashMap$EntrySpliterator";
namespace java::util { class HashMap$HashIterator; }
template<> constexpr auto signature<::java::util::HashMap$HashIterator> = ::java_util / "HashMap$HashIterator";
namespace java::util { class HashMap$HashMapSpliterator; }
template<> constexpr auto signature<::java::util::HashMap$HashMapSpliterator> = ::java_util / "HashMap$HashMapSpliterator";
namespace java::util { class HashMap$KeyIterator; }
template<> constexpr auto signature<::java::util::HashMap$KeyIterator> = ::java_util / "HashMap$KeyIterator";
namespace java::util { class HashMap$KeySet; }
template<> constexpr auto signature<::java::util::HashMap$KeySet> = ::java_util / "HashMap$KeySet";
namespace java::util { class HashMap$KeySpliterator; }
template<> constexpr auto signature<::java::util::HashMap$KeySpliterator> = ::java_util / "HashMap$KeySpliterator";
namespace java::util { class HashMap$Node; }
template<> constexpr auto signature<::java::util::HashMap$Node> = ::java_util / "HashMap$Node";
namespace java::util { class HashMap$TreeNode; }
template<> constexpr auto signature<::java::util::HashMap$TreeNode> = ::java_util / "HashMap$TreeNode";
namespace java::util { class HashMap$ValueIterator; }
template<> constexpr auto signature<::java::util::HashMap$ValueIterator> = ::java_util / "HashMap$ValueIterator";
namespace java::util { class HashMap$ValueSpliterator; }
template<> constexpr auto signature<::java::util::HashMap$ValueSpliterator> = ::java_util / "HashMap$ValueSpliterator";
namespace java::util { class HashMap$Values; }
template<> constexpr auto signature<::java::util::HashMap$Values> = ::java_util / "HashMap$Values";
namespace java::util { class HashSet; }
template<> constexpr auto signature<::java::util::HashSet> = ::java_util / "HashSet";
namespace java::util { class Hashtable; }
template<> constexpr auto signature<::java::util::Hashtable> = ::java_util / "Hashtable";
namespace java::util { class Hashtable$1; }
template<> constexpr auto signature<::java::util::Hashtable$1> = ::java_util / "Hashtable$1";
namespace java::util { class Hashtable$Entry; }
template<> constexpr auto signature<::java::util::Hashtable$Entry> = ::java_util / "Hashtable$Entry";
namespace java::util { class Hashtable$EntrySet; }
template<> constexpr auto signature<::java::util::Hashtable$EntrySet> = ::java_util / "Hashtable$EntrySet";
namespace java::util { class Hashtable$Enumerator; }
template<> constexpr auto signature<::java::util::Hashtable$Enumerator> = ::java_util / "Hashtable$Enumerator";
namespace java::util { class Hashtable$KeySet; }
template<> constexpr auto signature<::java::util::Hashtable$KeySet> = ::java_util / "Hashtable$KeySet";
namespace java::util { class Hashtable$ValueCollection; }
template<> constexpr auto signature<::java::util::Hashtable$ValueCollection> = ::java_util / "Hashtable$ValueCollection";
namespace java::util { class IdentityHashMap; }
template<> constexpr auto signature<::java::util::IdentityHashMap> = ::java_util / "IdentityHashMap";
namespace java::util { class IdentityHashMap$1; }
template<> constexpr auto signature<::java::util::IdentityHashMap$1> = ::java_util / "IdentityHashMap$1";
namespace java::util { class IdentityHashMap$EntryIterator; }
template<> constexpr auto signature<::java::util::IdentityHashMap$EntryIterator> = ::java_util / "IdentityHashMap$EntryIterator";
namespace java::util { class IdentityHashMap$EntryIterator$Entry; }
template<> constexpr auto signature<::java::util::IdentityHashMap$EntryIterator$Entry> = ::java_util / "IdentityHashMap$EntryIterator$Entry";
namespace java::util { class IdentityHashMap$EntrySet; }
template<> constexpr auto signature<::java::util::IdentityHashMap$EntrySet> = ::java_util / "IdentityHashMap$EntrySet";
namespace java::util { class IdentityHashMap$EntrySpliterator; }
template<> constexpr auto signature<::java::util::IdentityHashMap$EntrySpliterator> = ::java_util / "IdentityHashMap$EntrySpliterator";
namespace java::util { class IdentityHashMap$IdentityHashMapIterator; }
template<> constexpr auto signature<::java::util::IdentityHashMap$IdentityHashMapIterator> = ::java_util / "IdentityHashMap$IdentityHashMapIterator";
namespace java::util { class IdentityHashMap$IdentityHashMapSpliterator; }
template<> constexpr auto signature<::java::util::IdentityHashMap$IdentityHashMapSpliterator> = ::java_util / "IdentityHashMap$IdentityHashMapSpliterator";
namespace java::util { class IdentityHashMap$KeyIterator; }
template<> constexpr auto signature<::java::util::IdentityHashMap$KeyIterator> = ::java_util / "IdentityHashMap$KeyIterator";
namespace java::util { class IdentityHashMap$KeySet; }
template<> constexpr auto signature<::java::util::IdentityHashMap$KeySet> = ::java_util / "IdentityHashMap$KeySet";
namespace java::util { class IdentityHashMap$KeySpliterator; }
template<> constexpr auto signature<::java::util::IdentityHashMap$KeySpliterator> = ::java_util / "IdentityHashMap$KeySpliterator";
namespace java::util { class IdentityHashMap$ValueIterator; }
template<> constexpr auto signature<::java::util::IdentityHashMap$ValueIterator> = ::java_util / "IdentityHashMap$ValueIterator";
namespace java::util { class IdentityHashMap$ValueSpliterator; }
template<> constexpr auto signature<::java::util::IdentityHashMap$ValueSpliterator> = ::java_util / "IdentityHashMap$ValueSpliterator";
namespace java::util { class IdentityHashMap$Values; }
template<> constexpr auto signature<::java::util::IdentityHashMap$Values> = ::java_util / "IdentityHashMap$Values";
namespace java::util { class IllegalFormatCodePointException; }
template<> constexpr auto signature<::java::util::IllegalFormatCodePointException> = ::java_util / "IllegalFormatCodePointException";
namespace java::util { class IllegalFormatConversionException; }
template<> constexpr auto signature<::java::util::IllegalFormatConversionException> = ::java_util / "IllegalFormatConversionException";
namespace java::util { class IllegalFormatException; }
template<> constexpr auto signature<::java::util::IllegalFormatException> = ::java_util / "IllegalFormatException";
namespace java::util { class IllegalFormatFlagsException; }
template<> constexpr auto signature<::java::util::IllegalFormatFlagsException> = ::java_util / "IllegalFormatFlagsException";
namespace java::util { class IllegalFormatPrecisionException; }
template<> constexpr auto signature<::java::util::IllegalFormatPrecisionException> = ::java_util / "IllegalFormatPrecisionException";
namespace java::util { class IllegalFormatWidthException; }
template<> constexpr auto signature<::java::util::IllegalFormatWidthException> = ::java_util / "IllegalFormatWidthException";
namespace java::util { class IllformedLocaleException; }
template<> constexpr auto signature<::java::util::IllformedLocaleException> = ::java_util / "IllformedLocaleException";
namespace java::util { class InputMismatchException; }
template<> constexpr auto signature<::java::util::InputMismatchException> = ::java_util / "InputMismatchException";
namespace java::util { class IntSummaryStatistics; }
template<> constexpr auto signature<::java::util::IntSummaryStatistics> = ::java_util / "IntSummaryStatistics";
namespace java::util { class InvalidPropertiesFormatException; }
template<> constexpr auto signature<::java::util::InvalidPropertiesFormatException> = ::java_util / "InvalidPropertiesFormatException";
namespace java::util { class Iterator; }
template<> constexpr auto signature<::java::util::Iterator> = ::java_util / "Iterator";
namespace java::util { class JapaneseImperialCalendar; }
template<> constexpr auto signature<::java::util::JapaneseImperialCalendar> = ::java_util / "JapaneseImperialCalendar";
namespace java::util { class JumboEnumSet; }
template<> constexpr auto signature<::java::util::JumboEnumSet> = ::java_util / "JumboEnumSet";
namespace java::util { class JumboEnumSet$EnumSetIterator; }
template<> constexpr auto signature<::java::util::JumboEnumSet$EnumSetIterator> = ::java_util / "JumboEnumSet$EnumSetIterator";
namespace java::util { class LinkedHashMap; }
template<> constexpr auto signature<::java::util::LinkedHashMap> = ::java_util / "LinkedHashMap";
namespace java::util { class LinkedHashMap$Entry; }
template<> constexpr auto signature<::java::util::LinkedHashMap$Entry> = ::java_util / "LinkedHashMap$Entry";
namespace java::util { class LinkedHashMap$LinkedEntryIterator; }
template<> constexpr auto signature<::java::util::LinkedHashMap$LinkedEntryIterator> = ::java_util / "LinkedHashMap$LinkedEntryIterator";
namespace java::util { class LinkedHashMap$LinkedEntrySet; }
template<> constexpr auto signature<::java::util::LinkedHashMap$LinkedEntrySet> = ::java_util / "LinkedHashMap$LinkedEntrySet";
namespace java::util { class LinkedHashMap$LinkedHashIterator; }
template<> constexpr auto signature<::java::util::LinkedHashMap$LinkedHashIterator> = ::java_util / "LinkedHashMap$LinkedHashIterator";
namespace java::util { class LinkedHashMap$LinkedKeyIterator; }
template<> constexpr auto signature<::java::util::LinkedHashMap$LinkedKeyIterator> = ::java_util / "LinkedHashMap$LinkedKeyIterator";
namespace java::util { class LinkedHashMap$LinkedKeySet; }
template<> constexpr auto signature<::java::util::LinkedHashMap$LinkedKeySet> = ::java_util / "LinkedHashMap$LinkedKeySet";
namespace java::util { class LinkedHashMap$LinkedValueIterator; }
template<> constexpr auto signature<::java::util::LinkedHashMap$LinkedValueIterator> = ::java_util / "LinkedHashMap$LinkedValueIterator";
namespace java::util { class LinkedHashMap$LinkedValues; }
template<> constexpr auto signature<::java::util::LinkedHashMap$LinkedValues> = ::java_util / "LinkedHashMap$LinkedValues";
namespace java::util { class LinkedHashSet; }
template<> constexpr auto signature<::java::util::LinkedHashSet> = ::java_util / "LinkedHashSet";
namespace java::util { class LinkedList; }
template<> constexpr auto signature<::java::util::LinkedList> = ::java_util / "LinkedList";
namespace java::util { class LinkedList$1; }
template<> constexpr auto signature<::java::util::LinkedList$1> = ::java_util / "LinkedList$1";
namespace java::util { class LinkedList$DescendingIterator; }
template<> constexpr auto signature<::java::util::LinkedList$DescendingIterator> = ::java_util / "LinkedList$DescendingIterator";
namespace java::util { class LinkedList$LLSpliterator; }
template<> constexpr auto signature<::java::util::LinkedList$LLSpliterator> = ::java_util / "LinkedList$LLSpliterator";
namespace java::util { class LinkedList$ListItr; }
template<> constexpr auto signature<::java::util::LinkedList$ListItr> = ::java_util / "LinkedList$ListItr";
namespace java::util { class LinkedList$Node; }
template<> constexpr auto signature<::java::util::LinkedList$Node> = ::java_util / "LinkedList$Node";
namespace java::util { class List; }
template<> constexpr auto signature<::java::util::List> = ::java_util / "List";
namespace java::util { class ListIterator; }
template<> constexpr auto signature<::java::util::ListIterator> = ::java_util / "ListIterator";
namespace java::util { class ListResourceBundle; }
template<> constexpr auto signature<::java::util::ListResourceBundle> = ::java_util / "ListResourceBundle";
namespace java::util { class Locale; }
template<> constexpr auto signature<::java::util::Locale> = ::java_util / "Locale";
namespace java::util { class Locale$1; }
template<> constexpr auto signature<::java::util::Locale$1> = ::java_util / "Locale$1";
namespace java::util { class Locale$Builder; }
template<> constexpr auto signature<::java::util::Locale$Builder> = ::java_util / "Locale$Builder";
namespace java::util { class Locale$Cache; }
template<> constexpr auto signature<::java::util::Locale$Cache> = ::java_util / "Locale$Cache";
namespace java::util { class Locale$Category; }
template<> constexpr auto signature<::java::util::Locale$Category> = ::java_util / "Locale$Category";
namespace java::util { class Locale$FilteringMode; }
template<> constexpr auto signature<::java::util::Locale$FilteringMode> = ::java_util / "Locale$FilteringMode";
namespace java::util { class Locale$LanguageRange; }
template<> constexpr auto signature<::java::util::Locale$LanguageRange> = ::java_util / "Locale$LanguageRange";
namespace java::util { class Locale$LocaleKey; }
template<> constexpr auto signature<::java::util::Locale$LocaleKey> = ::java_util / "Locale$LocaleKey";
namespace java::util { class Locale$LocaleNameGetter; }
template<> constexpr auto signature<::java::util::Locale$LocaleNameGetter> = ::java_util / "Locale$LocaleNameGetter";
namespace java::util { class LocaleISOData; }
template<> constexpr auto signature<::java::util::LocaleISOData> = ::java_util / "LocaleISOData";
namespace java::util { class LongSummaryStatistics; }
template<> constexpr auto signature<::java::util::LongSummaryStatistics> = ::java_util / "LongSummaryStatistics";
namespace java::util { class Map; }
template<> constexpr auto signature<::java::util::Map> = ::java_util / "Map";
namespace java::util { class Map$Entry; }
template<> constexpr auto signature<::java::util::Map$Entry> = ::java_util / "Map$Entry";
namespace java::util { class MissingFormatArgumentException; }
template<> constexpr auto signature<::java::util::MissingFormatArgumentException> = ::java_util / "MissingFormatArgumentException";
namespace java::util { class MissingFormatWidthException; }
template<> constexpr auto signature<::java::util::MissingFormatWidthException> = ::java_util / "MissingFormatWidthException";
namespace java::util { class MissingResourceException; }
template<> constexpr auto signature<::java::util::MissingResourceException> = ::java_util / "MissingResourceException";
namespace java::util { class NavigableMap; }
template<> constexpr auto signature<::java::util::NavigableMap> = ::java_util / "NavigableMap";
namespace java::util { class NavigableSet; }
template<> constexpr auto signature<::java::util::NavigableSet> = ::java_util / "NavigableSet";
namespace java::util { class NoSuchElementException; }
template<> constexpr auto signature<::java::util::NoSuchElementException> = ::java_util / "NoSuchElementException";
namespace java::util { class Objects; }
template<> constexpr auto signature<::java::util::Objects> = ::java_util / "Objects";
namespace java::util { class Observable; }
template<> constexpr auto signature<::java::util::Observable> = ::java_util / "Observable";
namespace java::util { class Observer; }
template<> constexpr auto signature<::java::util::Observer> = ::java_util / "Observer";
namespace java::util { class Optional; }
template<> constexpr auto signature<::java::util::Optional> = ::java_util / "Optional";
namespace java::util { class OptionalDouble; }
template<> constexpr auto signature<::java::util::OptionalDouble> = ::java_util / "OptionalDouble";
namespace java::util { class OptionalInt; }
template<> constexpr auto signature<::java::util::OptionalInt> = ::java_util / "OptionalInt";
namespace java::util { class OptionalLong; }
template<> constexpr auto signature<::java::util::OptionalLong> = ::java_util / "OptionalLong";
namespace java::util { class PrimitiveIterator; }
template<> constexpr auto signature<::java::util::PrimitiveIterator> = ::java_util / "PrimitiveIterator";
namespace java::util { class PrimitiveIterator$OfDouble; }
template<> constexpr auto signature<::java::util::PrimitiveIterator$OfDouble> = ::java_util / "PrimitiveIterator$OfDouble";
namespace java::util { class PrimitiveIterator$OfInt; }
template<> constexpr auto signature<::java::util::PrimitiveIterator$OfInt> = ::java_util / "PrimitiveIterator$OfInt";
namespace java::util { class PrimitiveIterator$OfLong; }
template<> constexpr auto signature<::java::util::PrimitiveIterator$OfLong> = ::java_util / "PrimitiveIterator$OfLong";
namespace java::util { class PriorityQueue; }
template<> constexpr auto signature<::java::util::PriorityQueue> = ::java_util / "PriorityQueue";
namespace java::util { class PriorityQueue$1; }
template<> constexpr auto signature<::java::util::PriorityQueue$1> = ::java_util / "PriorityQueue$1";
namespace java::util { class PriorityQueue$Itr; }
template<> constexpr auto signature<::java::util::PriorityQueue$Itr> = ::java_util / "PriorityQueue$Itr";
namespace java::util { class PriorityQueue$PriorityQueueSpliterator; }
template<> constexpr auto signature<::java::util::PriorityQueue$PriorityQueueSpliterator> = ::java_util / "PriorityQueue$PriorityQueueSpliterator";
namespace java::util { class Properties; }
template<> constexpr auto signature<::java::util::Properties> = ::java_util / "Properties";
namespace java::util { class Properties$LineReader; }
template<> constexpr auto signature<::java::util::Properties$LineReader> = ::java_util / "Properties$LineReader";
namespace java::util { class Properties$XmlSupport; }
template<> constexpr auto signature<::java::util::Properties$XmlSupport> = ::java_util / "Properties$XmlSupport";
namespace java::util { class Properties$XmlSupport$1; }
template<> constexpr auto signature<::java::util::Properties$XmlSupport$1> = ::java_util / "Properties$XmlSupport$1";
namespace java::util { class PropertyPermission; }
template<> constexpr auto signature<::java::util::PropertyPermission> = ::java_util / "PropertyPermission";
namespace java::util { class PropertyPermissionCollection; }
template<> constexpr auto signature<::java::util::PropertyPermissionCollection> = ::java_util / "PropertyPermissionCollection";
namespace java::util { class PropertyResourceBundle; }
template<> constexpr auto signature<::java::util::PropertyResourceBundle> = ::java_util / "PropertyResourceBundle";
namespace java::util { class Queue; }
template<> constexpr auto signature<::java::util::Queue> = ::java_util / "Queue";
namespace java::util { class Random; }
template<> constexpr auto signature<::java::util::Random> = ::java_util / "Random";
namespace java::util { class Random$RandomDoublesSpliterator; }
template<> constexpr auto signature<::java::util::Random$RandomDoublesSpliterator> = ::java_util / "Random$RandomDoublesSpliterator";
namespace java::util { class Random$RandomIntsSpliterator; }
template<> constexpr auto signature<::java::util::Random$RandomIntsSpliterator> = ::java_util / "Random$RandomIntsSpliterator";
namespace java::util { class Random$RandomLongsSpliterator; }
template<> constexpr auto signature<::java::util::Random$RandomLongsSpliterator> = ::java_util / "Random$RandomLongsSpliterator";
namespace java::util { class RandomAccess; }
template<> constexpr auto signature<::java::util::RandomAccess> = ::java_util / "RandomAccess";
namespace java::util { class RandomAccessSubList; }
template<> constexpr auto signature<::java::util::RandomAccessSubList> = ::java_util / "RandomAccessSubList";
namespace java::util { class RegularEnumSet; }
template<> constexpr auto signature<::java::util::RegularEnumSet> = ::java_util / "RegularEnumSet";
namespace java::util { class RegularEnumSet$EnumSetIterator; }
template<> constexpr auto signature<::java::util::RegularEnumSet$EnumSetIterator> = ::java_util / "RegularEnumSet$EnumSetIterator";
namespace java::util { class ResourceBundle; }
template<> constexpr auto signature<::java::util::ResourceBundle> = ::java_util / "ResourceBundle";
namespace java::util { class ResourceBundle$1; }
template<> constexpr auto signature<::java::util::ResourceBundle$1> = ::java_util / "ResourceBundle$1";
namespace java::util { class ResourceBundle$BundleReference; }
template<> constexpr auto signature<::java::util::ResourceBundle$BundleReference> = ::java_util / "ResourceBundle$BundleReference";
namespace java::util { class ResourceBundle$CacheKey; }
template<> constexpr auto signature<::java::util::ResourceBundle$CacheKey> = ::java_util / "ResourceBundle$CacheKey";
namespace java::util { class ResourceBundle$CacheKeyReference; }
template<> constexpr auto signature<::java::util::ResourceBundle$CacheKeyReference> = ::java_util / "ResourceBundle$CacheKeyReference";
namespace java::util { class ResourceBundle$Control; }
template<> constexpr auto signature<::java::util::ResourceBundle$Control> = ::java_util / "ResourceBundle$Control";
namespace java::util { class ResourceBundle$Control$1; }
template<> constexpr auto signature<::java::util::ResourceBundle$Control$1> = ::java_util / "ResourceBundle$Control$1";
namespace java::util { class ResourceBundle$Control$CandidateListCache; }
template<> constexpr auto signature<::java::util::ResourceBundle$Control$CandidateListCache> = ::java_util / "ResourceBundle$Control$CandidateListCache";
namespace java::util { class ResourceBundle$LoaderReference; }
template<> constexpr auto signature<::java::util::ResourceBundle$LoaderReference> = ::java_util / "ResourceBundle$LoaderReference";
namespace java::util { class ResourceBundle$NoFallbackControl; }
template<> constexpr auto signature<::java::util::ResourceBundle$NoFallbackControl> = ::java_util / "ResourceBundle$NoFallbackControl";
namespace java::util { class ResourceBundle$RBClassLoader; }
template<> constexpr auto signature<::java::util::ResourceBundle$RBClassLoader> = ::java_util / "ResourceBundle$RBClassLoader";
namespace java::util { class ResourceBundle$RBClassLoader$1; }
template<> constexpr auto signature<::java::util::ResourceBundle$RBClassLoader$1> = ::java_util / "ResourceBundle$RBClassLoader$1";
namespace java::util { class ResourceBundle$SingleFormatControl; }
template<> constexpr auto signature<::java::util::ResourceBundle$SingleFormatControl> = ::java_util / "ResourceBundle$SingleFormatControl";
namespace java::util { class Scanner; }
template<> constexpr auto signature<::java::util::Scanner> = ::java_util / "Scanner";
namespace java::util { class Scanner$1; }
template<> constexpr auto signature<::java::util::Scanner$1> = ::java_util / "Scanner$1";
namespace java::util { class ServiceConfigurationError; }
template<> constexpr auto signature<::java::util::ServiceConfigurationError> = ::java_util / "ServiceConfigurationError";
namespace java::util { class ServiceLoader; }
template<> constexpr auto signature<::java::util::ServiceLoader> = ::java_util / "ServiceLoader";
namespace java::util { class ServiceLoader$1; }
template<> constexpr auto signature<::java::util::ServiceLoader$1> = ::java_util / "ServiceLoader$1";
namespace java::util { class ServiceLoader$LazyIterator; }
template<> constexpr auto signature<::java::util::ServiceLoader$LazyIterator> = ::java_util / "ServiceLoader$LazyIterator";
namespace java::util { class ServiceLoader$LazyIterator$1; }
template<> constexpr auto signature<::java::util::ServiceLoader$LazyIterator$1> = ::java_util / "ServiceLoader$LazyIterator$1";
namespace java::util { class ServiceLoader$LazyIterator$2; }
template<> constexpr auto signature<::java::util::ServiceLoader$LazyIterator$2> = ::java_util / "ServiceLoader$LazyIterator$2";
namespace java::util { class Set; }
template<> constexpr auto signature<::java::util::Set> = ::java_util / "Set";
namespace java::util { class SimpleTimeZone; }
template<> constexpr auto signature<::java::util::SimpleTimeZone> = ::java_util / "SimpleTimeZone";
namespace java::util { class SortedMap; }
template<> constexpr auto signature<::java::util::SortedMap> = ::java_util / "SortedMap";
namespace java::util { class SortedSet; }
template<> constexpr auto signature<::java::util::SortedSet> = ::java_util / "SortedSet";
namespace java::util { class SortedSet$1; }
template<> constexpr auto signature<::java::util::SortedSet$1> = ::java_util / "SortedSet$1";
namespace java::util { class Spliterator; }
template<> constexpr auto signature<::java::util::Spliterator> = ::java_util / "Spliterator";
namespace java::util { class Spliterator$OfDouble; }
template<> constexpr auto signature<::java::util::Spliterator$OfDouble> = ::java_util / "Spliterator$OfDouble";
namespace java::util { class Spliterator$OfInt; }
template<> constexpr auto signature<::java::util::Spliterator$OfInt> = ::java_util / "Spliterator$OfInt";
namespace java::util { class Spliterator$OfLong; }
template<> constexpr auto signature<::java::util::Spliterator$OfLong> = ::java_util / "Spliterator$OfLong";
namespace java::util { class Spliterator$OfPrimitive; }
template<> constexpr auto signature<::java::util::Spliterator$OfPrimitive> = ::java_util / "Spliterator$OfPrimitive";
namespace java::util { class Spliterators; }
template<> constexpr auto signature<::java::util::Spliterators> = ::java_util / "Spliterators";
namespace java::util { class Spliterators$1Adapter; }
template<> constexpr auto signature<::java::util::Spliterators$1Adapter> = ::java_util / "Spliterators$1Adapter";
namespace java::util { class Spliterators$2Adapter; }
template<> constexpr auto signature<::java::util::Spliterators$2Adapter> = ::java_util / "Spliterators$2Adapter";
namespace java::util { class Spliterators$3Adapter; }
template<> constexpr auto signature<::java::util::Spliterators$3Adapter> = ::java_util / "Spliterators$3Adapter";
namespace java::util { class Spliterators$4Adapter; }
template<> constexpr auto signature<::java::util::Spliterators$4Adapter> = ::java_util / "Spliterators$4Adapter";
namespace java::util { class Spliterators$AbstractDoubleSpliterator; }
template<> constexpr auto signature<::java::util::Spliterators$AbstractDoubleSpliterator> = ::java_util / "Spliterators$AbstractDoubleSpliterator";
namespace java::util { class Spliterators$AbstractDoubleSpliterator$HoldingDoubleConsumer; }
template<> constexpr auto signature<::java::util::Spliterators$AbstractDoubleSpliterator$HoldingDoubleConsumer> = ::java_util / "Spliterators$AbstractDoubleSpliterator$HoldingDoubleConsumer";
namespace java::util { class Spliterators$AbstractIntSpliterator; }
template<> constexpr auto signature<::java::util::Spliterators$AbstractIntSpliterator> = ::java_util / "Spliterators$AbstractIntSpliterator";
namespace java::util { class Spliterators$AbstractIntSpliterator$HoldingIntConsumer; }
template<> constexpr auto signature<::java::util::Spliterators$AbstractIntSpliterator$HoldingIntConsumer> = ::java_util / "Spliterators$AbstractIntSpliterator$HoldingIntConsumer";
namespace java::util { class Spliterators$AbstractLongSpliterator; }
template<> constexpr auto signature<::java::util::Spliterators$AbstractLongSpliterator> = ::java_util / "Spliterators$AbstractLongSpliterator";
namespace java::util { class Spliterators$AbstractLongSpliterator$HoldingLongConsumer; }
template<> constexpr auto signature<::java::util::Spliterators$AbstractLongSpliterator$HoldingLongConsumer> = ::java_util / "Spliterators$AbstractLongSpliterator$HoldingLongConsumer";
namespace java::util { class Spliterators$AbstractSpliterator; }
template<> constexpr auto signature<::java::util::Spliterators$AbstractSpliterator> = ::java_util / "Spliterators$AbstractSpliterator";
namespace java::util { class Spliterators$AbstractSpliterator$HoldingConsumer; }
template<> constexpr auto signature<::java::util::Spliterators$AbstractSpliterator$HoldingConsumer> = ::java_util / "Spliterators$AbstractSpliterator$HoldingConsumer";
namespace java::util { class Spliterators$ArraySpliterator; }
template<> constexpr auto signature<::java::util::Spliterators$ArraySpliterator> = ::java_util / "Spliterators$ArraySpliterator";
namespace java::util { class Spliterators$DoubleArraySpliterator; }
template<> constexpr auto signature<::java::util::Spliterators$DoubleArraySpliterator> = ::java_util / "Spliterators$DoubleArraySpliterator";
namespace java::util { class Spliterators$DoubleIteratorSpliterator; }
template<> constexpr auto signature<::java::util::Spliterators$DoubleIteratorSpliterator> = ::java_util / "Spliterators$DoubleIteratorSpliterator";
namespace java::util { class Spliterators$EmptySpliterator; }
template<> constexpr auto signature<::java::util::Spliterators$EmptySpliterator> = ::java_util / "Spliterators$EmptySpliterator";
namespace java::util { class Spliterators$EmptySpliterator$OfDouble; }
template<> constexpr auto signature<::java::util::Spliterators$EmptySpliterator$OfDouble> = ::java_util / "Spliterators$EmptySpliterator$OfDouble";
namespace java::util { class Spliterators$EmptySpliterator$OfInt; }
template<> constexpr auto signature<::java::util::Spliterators$EmptySpliterator$OfInt> = ::java_util / "Spliterators$EmptySpliterator$OfInt";
namespace java::util { class Spliterators$EmptySpliterator$OfLong; }
template<> constexpr auto signature<::java::util::Spliterators$EmptySpliterator$OfLong> = ::java_util / "Spliterators$EmptySpliterator$OfLong";
namespace java::util { class Spliterators$EmptySpliterator$OfRef; }
template<> constexpr auto signature<::java::util::Spliterators$EmptySpliterator$OfRef> = ::java_util / "Spliterators$EmptySpliterator$OfRef";
namespace java::util { class Spliterators$IntArraySpliterator; }
template<> constexpr auto signature<::java::util::Spliterators$IntArraySpliterator> = ::java_util / "Spliterators$IntArraySpliterator";
namespace java::util { class Spliterators$IntIteratorSpliterator; }
template<> constexpr auto signature<::java::util::Spliterators$IntIteratorSpliterator> = ::java_util / "Spliterators$IntIteratorSpliterator";
namespace java::util { class Spliterators$IteratorSpliterator; }
template<> constexpr auto signature<::java::util::Spliterators$IteratorSpliterator> = ::java_util / "Spliterators$IteratorSpliterator";
namespace java::util { class Spliterators$LongArraySpliterator; }
template<> constexpr auto signature<::java::util::Spliterators$LongArraySpliterator> = ::java_util / "Spliterators$LongArraySpliterator";
namespace java::util { class Spliterators$LongIteratorSpliterator; }
template<> constexpr auto signature<::java::util::Spliterators$LongIteratorSpliterator> = ::java_util / "Spliterators$LongIteratorSpliterator";
namespace java::util { class SplittableRandom; }
template<> constexpr auto signature<::java::util::SplittableRandom> = ::java_util / "SplittableRandom";
namespace java::util { class SplittableRandom$RandomDoublesSpliterator; }
template<> constexpr auto signature<::java::util::SplittableRandom$RandomDoublesSpliterator> = ::java_util / "SplittableRandom$RandomDoublesSpliterator";
namespace java::util { class SplittableRandom$RandomIntsSpliterator; }
template<> constexpr auto signature<::java::util::SplittableRandom$RandomIntsSpliterator> = ::java_util / "SplittableRandom$RandomIntsSpliterator";
namespace java::util { class SplittableRandom$RandomLongsSpliterator; }
template<> constexpr auto signature<::java::util::SplittableRandom$RandomLongsSpliterator> = ::java_util / "SplittableRandom$RandomLongsSpliterator";
namespace java::util { class Stack; }
template<> constexpr auto signature<::java::util::Stack> = ::java_util / "Stack";
namespace java::util { class StringJoiner; }
template<> constexpr auto signature<::java::util::StringJoiner> = ::java_util / "StringJoiner";
namespace java::util { class StringTokenizer; }
template<> constexpr auto signature<::java::util::StringTokenizer> = ::java_util / "StringTokenizer";
namespace java::util { class SubList; }
template<> constexpr auto signature<::java::util::SubList> = ::java_util / "SubList";
namespace java::util { class SubList$1; }
template<> constexpr auto signature<::java::util::SubList$1> = ::java_util / "SubList$1";
namespace java::util { class TaskQueue; }
template<> constexpr auto signature<::java::util::TaskQueue> = ::java_util / "TaskQueue";
namespace java::util { class TimSort; }
template<> constexpr auto signature<::java::util::TimSort> = ::java_util / "TimSort";
namespace java::util { class TimeZone; }
template<> constexpr auto signature<::java::util::TimeZone> = ::java_util / "TimeZone";
namespace java::util { class TimeZone$1; }
template<> constexpr auto signature<::java::util::TimeZone$1> = ::java_util / "TimeZone$1";
namespace java::util { class Timer; }
template<> constexpr auto signature<::java::util::Timer> = ::java_util / "Timer";
namespace java::util { class Timer$1; }
template<> constexpr auto signature<::java::util::Timer$1> = ::java_util / "Timer$1";
namespace java::util { class TimerTask; }
template<> constexpr auto signature<::java::util::TimerTask> = ::java_util / "TimerTask";
namespace java::util { class TimerThread; }
template<> constexpr auto signature<::java::util::TimerThread> = ::java_util / "TimerThread";
namespace java::util { class TooManyListenersException; }
template<> constexpr auto signature<::java::util::TooManyListenersException> = ::java_util / "TooManyListenersException";
namespace java::util { class TreeMap; }
template<> constexpr auto signature<::java::util::TreeMap> = ::java_util / "TreeMap";
namespace java::util { class TreeMap$AscendingSubMap; }
template<> constexpr auto signature<::java::util::TreeMap$AscendingSubMap> = ::java_util / "TreeMap$AscendingSubMap";
namespace java::util { class TreeMap$AscendingSubMap$AscendingEntrySetView; }
template<> constexpr auto signature<::java::util::TreeMap$AscendingSubMap$AscendingEntrySetView> = ::java_util / "TreeMap$AscendingSubMap$AscendingEntrySetView";
namespace java::util { class TreeMap$DescendingKeyIterator; }
template<> constexpr auto signature<::java::util::TreeMap$DescendingKeyIterator> = ::java_util / "TreeMap$DescendingKeyIterator";
namespace java::util { class TreeMap$DescendingKeySpliterator; }
template<> constexpr auto signature<::java::util::TreeMap$DescendingKeySpliterator> = ::java_util / "TreeMap$DescendingKeySpliterator";
namespace java::util { class TreeMap$DescendingSubMap; }
template<> constexpr auto signature<::java::util::TreeMap$DescendingSubMap> = ::java_util / "TreeMap$DescendingSubMap";
namespace java::util { class TreeMap$DescendingSubMap$DescendingEntrySetView; }
template<> constexpr auto signature<::java::util::TreeMap$DescendingSubMap$DescendingEntrySetView> = ::java_util / "TreeMap$DescendingSubMap$DescendingEntrySetView";
namespace java::util { class TreeMap$Entry; }
template<> constexpr auto signature<::java::util::TreeMap$Entry> = ::java_util / "TreeMap$Entry";
namespace java::util { class TreeMap$EntryIterator; }
template<> constexpr auto signature<::java::util::TreeMap$EntryIterator> = ::java_util / "TreeMap$EntryIterator";
namespace java::util { class TreeMap$EntrySet; }
template<> constexpr auto signature<::java::util::TreeMap$EntrySet> = ::java_util / "TreeMap$EntrySet";
namespace java::util { class TreeMap$EntrySpliterator; }
template<> constexpr auto signature<::java::util::TreeMap$EntrySpliterator> = ::java_util / "TreeMap$EntrySpliterator";
namespace java::util { class TreeMap$KeyIterator; }
template<> constexpr auto signature<::java::util::TreeMap$KeyIterator> = ::java_util / "TreeMap$KeyIterator";
namespace java::util { class TreeMap$KeySet; }
template<> constexpr auto signature<::java::util::TreeMap$KeySet> = ::java_util / "TreeMap$KeySet";
namespace java::util { class TreeMap$KeySpliterator; }
template<> constexpr auto signature<::java::util::TreeMap$KeySpliterator> = ::java_util / "TreeMap$KeySpliterator";
namespace java::util { class TreeMap$NavigableSubMap; }
template<> constexpr auto signature<::java::util::TreeMap$NavigableSubMap> = ::java_util / "TreeMap$NavigableSubMap";
namespace java::util { class TreeMap$NavigableSubMap$DescendingSubMapEntryIterator; }
template<> constexpr auto signature<::java::util::TreeMap$NavigableSubMap$DescendingSubMapEntryIterator> = ::java_util / "TreeMap$NavigableSubMap$DescendingSubMapEntryIterator";
namespace java::util { class TreeMap$NavigableSubMap$DescendingSubMapKeyIterator; }
template<> constexpr auto signature<::java::util::TreeMap$NavigableSubMap$DescendingSubMapKeyIterator> = ::java_util / "TreeMap$NavigableSubMap$DescendingSubMapKeyIterator";
namespace java::util { class TreeMap$NavigableSubMap$EntrySetView; }
template<> constexpr auto signature<::java::util::TreeMap$NavigableSubMap$EntrySetView> = ::java_util / "TreeMap$NavigableSubMap$EntrySetView";
namespace java::util { class TreeMap$NavigableSubMap$SubMapEntryIterator; }
template<> constexpr auto signature<::java::util::TreeMap$NavigableSubMap$SubMapEntryIterator> = ::java_util / "TreeMap$NavigableSubMap$SubMapEntryIterator";
namespace java::util { class TreeMap$NavigableSubMap$SubMapIterator; }
template<> constexpr auto signature<::java::util::TreeMap$NavigableSubMap$SubMapIterator> = ::java_util / "TreeMap$NavigableSubMap$SubMapIterator";
namespace java::util { class TreeMap$NavigableSubMap$SubMapKeyIterator; }
template<> constexpr auto signature<::java::util::TreeMap$NavigableSubMap$SubMapKeyIterator> = ::java_util / "TreeMap$NavigableSubMap$SubMapKeyIterator";
namespace java::util { class TreeMap$PrivateEntryIterator; }
template<> constexpr auto signature<::java::util::TreeMap$PrivateEntryIterator> = ::java_util / "TreeMap$PrivateEntryIterator";
namespace java::util { class TreeMap$SubMap; }
template<> constexpr auto signature<::java::util::TreeMap$SubMap> = ::java_util / "TreeMap$SubMap";
namespace java::util { class TreeMap$TreeMapSpliterator; }
template<> constexpr auto signature<::java::util::TreeMap$TreeMapSpliterator> = ::java_util / "TreeMap$TreeMapSpliterator";
namespace java::util { class TreeMap$ValueIterator; }
template<> constexpr auto signature<::java::util::TreeMap$ValueIterator> = ::java_util / "TreeMap$ValueIterator";
namespace java::util { class TreeMap$ValueSpliterator; }
template<> constexpr auto signature<::java::util::TreeMap$ValueSpliterator> = ::java_util / "TreeMap$ValueSpliterator";
namespace java::util { class TreeMap$Values; }
template<> constexpr auto signature<::java::util::TreeMap$Values> = ::java_util / "TreeMap$Values";
namespace java::util { class TreeSet; }
template<> constexpr auto signature<::java::util::TreeSet> = ::java_util / "TreeSet";
namespace java::util { class Tripwire; }
template<> constexpr auto signature<::java::util::Tripwire> = ::java_util / "Tripwire";
namespace java::util { class UUID; }
template<> constexpr auto signature<::java::util::UUID> = ::java_util / "UUID";
namespace java::util { class UUID$Holder; }
template<> constexpr auto signature<::java::util::UUID$Holder> = ::java_util / "UUID$Holder";
namespace java::util { class UnknownFormatConversionException; }
template<> constexpr auto signature<::java::util::UnknownFormatConversionException> = ::java_util / "UnknownFormatConversionException";
namespace java::util { class UnknownFormatFlagsException; }
template<> constexpr auto signature<::java::util::UnknownFormatFlagsException> = ::java_util / "UnknownFormatFlagsException";
namespace java::util { class Vector; }
template<> constexpr auto signature<::java::util::Vector> = ::java_util / "Vector";
namespace java::util { class Vector$1; }
template<> constexpr auto signature<::java::util::Vector$1> = ::java_util / "Vector$1";
namespace java::util { class Vector$Itr; }
template<> constexpr auto signature<::java::util::Vector$Itr> = ::java_util / "Vector$Itr";
namespace java::util { class Vector$ListItr; }
template<> constexpr auto signature<::java::util::Vector$ListItr> = ::java_util / "Vector$ListItr";
namespace java::util { class Vector$VectorSpliterator; }
template<> constexpr auto signature<::java::util::Vector$VectorSpliterator> = ::java_util / "Vector$VectorSpliterator";
namespace java::util { class WeakHashMap; }
template<> constexpr auto signature<::java::util::WeakHashMap> = ::java_util / "WeakHashMap";
namespace java::util { class WeakHashMap$1; }
template<> constexpr auto signature<::java::util::WeakHashMap$1> = ::java_util / "WeakHashMap$1";
namespace java::util { class WeakHashMap$Entry; }
template<> constexpr auto signature<::java::util::WeakHashMap$Entry> = ::java_util / "WeakHashMap$Entry";
namespace java::util { class WeakHashMap$EntryIterator; }
template<> constexpr auto signature<::java::util::WeakHashMap$EntryIterator> = ::java_util / "WeakHashMap$EntryIterator";
namespace java::util { class WeakHashMap$EntrySet; }
template<> constexpr auto signature<::java::util::WeakHashMap$EntrySet> = ::java_util / "WeakHashMap$EntrySet";
namespace java::util { class WeakHashMap$EntrySpliterator; }
template<> constexpr auto signature<::java::util::WeakHashMap$EntrySpliterator> = ::java_util / "WeakHashMap$EntrySpliterator";
namespace java::util { class WeakHashMap$HashIterator; }
template<> constexpr auto signature<::java::util::WeakHashMap$HashIterator> = ::java_util / "WeakHashMap$HashIterator";
namespace java::util { class WeakHashMap$KeyIterator; }
template<> constexpr auto signature<::java::util::WeakHashMap$KeyIterator> = ::java_util / "WeakHashMap$KeyIterator";
namespace java::util { class WeakHashMap$KeySet; }
template<> constexpr auto signature<::java::util::WeakHashMap$KeySet> = ::java_util / "WeakHashMap$KeySet";
namespace java::util { class WeakHashMap$KeySpliterator; }
template<> constexpr auto signature<::java::util::WeakHashMap$KeySpliterator> = ::java_util / "WeakHashMap$KeySpliterator";
namespace java::util { class WeakHashMap$ValueIterator; }
template<> constexpr auto signature<::java::util::WeakHashMap$ValueIterator> = ::java_util / "WeakHashMap$ValueIterator";
namespace java::util { class WeakHashMap$ValueSpliterator; }
template<> constexpr auto signature<::java::util::WeakHashMap$ValueSpliterator> = ::java_util / "WeakHashMap$ValueSpliterator";
namespace java::util { class WeakHashMap$Values; }
template<> constexpr auto signature<::java::util::WeakHashMap$Values> = ::java_util / "WeakHashMap$Values";
namespace java::util { class WeakHashMap$WeakHashMapSpliterator; }
template<> constexpr auto signature<::java::util::WeakHashMap$WeakHashMapSpliterator> = ::java_util / "WeakHashMap$WeakHashMapSpliterator";
namespace java::util::concurrent { class AbstractExecutorService; }
template<> constexpr auto signature<::java::util::concurrent::AbstractExecutorService> = ::java_util_concurrent / "AbstractExecutorService";
namespace java::util::concurrent { class ArrayBlockingQueue; }
template<> constexpr auto signature<::java::util::concurrent::ArrayBlockingQueue> = ::java_util_concurrent / "ArrayBlockingQueue";
namespace java::util::concurrent { class ArrayBlockingQueue$Itr; }
template<> constexpr auto signature<::java::util::concurrent::ArrayBlockingQueue$Itr> = ::java_util_concurrent / "ArrayBlockingQueue$Itr";
namespace java::util::concurrent { class ArrayBlockingQueue$Itrs; }
template<> constexpr auto signature<::java::util::concurrent::ArrayBlockingQueue$Itrs> = ::java_util_concurrent / "ArrayBlockingQueue$Itrs";
namespace java::util::concurrent { class ArrayBlockingQueue$Itrs$Node; }
template<> constexpr auto signature<::java::util::concurrent::ArrayBlockingQueue$Itrs$Node> = ::java_util_concurrent / "ArrayBlockingQueue$Itrs$Node";
namespace java::util::concurrent { class BlockingDeque; }
template<> constexpr auto signature<::java::util::concurrent::BlockingDeque> = ::java_util_concurrent / "BlockingDeque";
namespace java::util::concurrent { class BlockingQueue; }
template<> constexpr auto signature<::java::util::concurrent::BlockingQueue> = ::java_util_concurrent / "BlockingQueue";
namespace java::util::concurrent { class BrokenBarrierException; }
template<> constexpr auto signature<::java::util::concurrent::BrokenBarrierException> = ::java_util_concurrent / "BrokenBarrierException";
namespace java::util::concurrent { class Callable; }
template<> constexpr auto signature<::java::util::concurrent::Callable> = ::java_util_concurrent / "Callable";
namespace java::util::concurrent { class CancellationException; }
template<> constexpr auto signature<::java::util::concurrent::CancellationException> = ::java_util_concurrent / "CancellationException";
namespace java::util::concurrent { class CompletableFuture; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture> = ::java_util_concurrent / "CompletableFuture";
namespace java::util::concurrent { class CompletableFuture$AltResult; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$AltResult> = ::java_util_concurrent / "CompletableFuture$AltResult";
namespace java::util::concurrent { class CompletableFuture$AsyncRun; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$AsyncRun> = ::java_util_concurrent / "CompletableFuture$AsyncRun";
namespace java::util::concurrent { class CompletableFuture$AsyncSupply; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$AsyncSupply> = ::java_util_concurrent / "CompletableFuture$AsyncSupply";
namespace java::util::concurrent { class CompletableFuture$AsynchronousCompletionTask; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$AsynchronousCompletionTask> = ::java_util_concurrent / "CompletableFuture$AsynchronousCompletionTask";
namespace java::util::concurrent { class CompletableFuture$BiAccept; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$BiAccept> = ::java_util_concurrent / "CompletableFuture$BiAccept";
namespace java::util::concurrent { class CompletableFuture$BiApply; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$BiApply> = ::java_util_concurrent / "CompletableFuture$BiApply";
namespace java::util::concurrent { class CompletableFuture$BiCompletion; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$BiCompletion> = ::java_util_concurrent / "CompletableFuture$BiCompletion";
namespace java::util::concurrent { class CompletableFuture$BiRelay; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$BiRelay> = ::java_util_concurrent / "CompletableFuture$BiRelay";
namespace java::util::concurrent { class CompletableFuture$BiRun; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$BiRun> = ::java_util_concurrent / "CompletableFuture$BiRun";
namespace java::util::concurrent { class CompletableFuture$CoCompletion; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$CoCompletion> = ::java_util_concurrent / "CompletableFuture$CoCompletion";
namespace java::util::concurrent { class CompletableFuture$Completion; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$Completion> = ::java_util_concurrent / "CompletableFuture$Completion";
namespace java::util::concurrent { class CompletableFuture$OrAccept; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$OrAccept> = ::java_util_concurrent / "CompletableFuture$OrAccept";
namespace java::util::concurrent { class CompletableFuture$OrApply; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$OrApply> = ::java_util_concurrent / "CompletableFuture$OrApply";
namespace java::util::concurrent { class CompletableFuture$OrRelay; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$OrRelay> = ::java_util_concurrent / "CompletableFuture$OrRelay";
namespace java::util::concurrent { class CompletableFuture$OrRun; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$OrRun> = ::java_util_concurrent / "CompletableFuture$OrRun";
namespace java::util::concurrent { class CompletableFuture$Signaller; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$Signaller> = ::java_util_concurrent / "CompletableFuture$Signaller";
namespace java::util::concurrent { class CompletableFuture$ThreadPerTaskExecutor; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$ThreadPerTaskExecutor> = ::java_util_concurrent / "CompletableFuture$ThreadPerTaskExecutor";
namespace java::util::concurrent { class CompletableFuture$UniAccept; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$UniAccept> = ::java_util_concurrent / "CompletableFuture$UniAccept";
namespace java::util::concurrent { class CompletableFuture$UniApply; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$UniApply> = ::java_util_concurrent / "CompletableFuture$UniApply";
namespace java::util::concurrent { class CompletableFuture$UniCompletion; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$UniCompletion> = ::java_util_concurrent / "CompletableFuture$UniCompletion";
namespace java::util::concurrent { class CompletableFuture$UniCompose; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$UniCompose> = ::java_util_concurrent / "CompletableFuture$UniCompose";
namespace java::util::concurrent { class CompletableFuture$UniExceptionally; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$UniExceptionally> = ::java_util_concurrent / "CompletableFuture$UniExceptionally";
namespace java::util::concurrent { class CompletableFuture$UniHandle; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$UniHandle> = ::java_util_concurrent / "CompletableFuture$UniHandle";
namespace java::util::concurrent { class CompletableFuture$UniRelay; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$UniRelay> = ::java_util_concurrent / "CompletableFuture$UniRelay";
namespace java::util::concurrent { class CompletableFuture$UniRun; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$UniRun> = ::java_util_concurrent / "CompletableFuture$UniRun";
namespace java::util::concurrent { class CompletableFuture$UniWhenComplete; }
template<> constexpr auto signature<::java::util::concurrent::CompletableFuture$UniWhenComplete> = ::java_util_concurrent / "CompletableFuture$UniWhenComplete";
namespace java::util::concurrent { class CompletionException; }
template<> constexpr auto signature<::java::util::concurrent::CompletionException> = ::java_util_concurrent / "CompletionException";
namespace java::util::concurrent { class CompletionService; }
template<> constexpr auto signature<::java::util::concurrent::CompletionService> = ::java_util_concurrent / "CompletionService";
namespace java::util::concurrent { class CompletionStage; }
template<> constexpr auto signature<::java::util::concurrent::CompletionStage> = ::java_util_concurrent / "CompletionStage";
namespace java::util::concurrent { class ConcurrentHashMap; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap> = ::java_util_concurrent / "ConcurrentHashMap";
namespace java::util::concurrent { class ConcurrentHashMap$BaseIterator; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$BaseIterator> = ::java_util_concurrent / "ConcurrentHashMap$BaseIterator";
namespace java::util::concurrent { class ConcurrentHashMap$BulkTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$BulkTask> = ::java_util_concurrent / "ConcurrentHashMap$BulkTask";
namespace java::util::concurrent { class ConcurrentHashMap$CollectionView; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$CollectionView> = ::java_util_concurrent / "ConcurrentHashMap$CollectionView";
namespace java::util::concurrent { class ConcurrentHashMap$CounterCell; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$CounterCell> = ::java_util_concurrent / "ConcurrentHashMap$CounterCell";
namespace java::util::concurrent { class ConcurrentHashMap$EntryIterator; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$EntryIterator> = ::java_util_concurrent / "ConcurrentHashMap$EntryIterator";
namespace java::util::concurrent { class ConcurrentHashMap$EntrySetView; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$EntrySetView> = ::java_util_concurrent / "ConcurrentHashMap$EntrySetView";
namespace java::util::concurrent { class ConcurrentHashMap$EntrySpliterator; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$EntrySpliterator> = ::java_util_concurrent / "ConcurrentHashMap$EntrySpliterator";
namespace java::util::concurrent { class ConcurrentHashMap$ForEachEntryTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$ForEachEntryTask> = ::java_util_concurrent / "ConcurrentHashMap$ForEachEntryTask";
namespace java::util::concurrent { class ConcurrentHashMap$ForEachKeyTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$ForEachKeyTask> = ::java_util_concurrent / "ConcurrentHashMap$ForEachKeyTask";
namespace java::util::concurrent { class ConcurrentHashMap$ForEachMappingTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$ForEachMappingTask> = ::java_util_concurrent / "ConcurrentHashMap$ForEachMappingTask";
namespace java::util::concurrent { class ConcurrentHashMap$ForEachTransformedEntryTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$ForEachTransformedEntryTask> = ::java_util_concurrent / "ConcurrentHashMap$ForEachTransformedEntryTask";
namespace java::util::concurrent { class ConcurrentHashMap$ForEachTransformedKeyTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$ForEachTransformedKeyTask> = ::java_util_concurrent / "ConcurrentHashMap$ForEachTransformedKeyTask";
namespace java::util::concurrent { class ConcurrentHashMap$ForEachTransformedMappingTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$ForEachTransformedMappingTask> = ::java_util_concurrent / "ConcurrentHashMap$ForEachTransformedMappingTask";
namespace java::util::concurrent { class ConcurrentHashMap$ForEachTransformedValueTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$ForEachTransformedValueTask> = ::java_util_concurrent / "ConcurrentHashMap$ForEachTransformedValueTask";
namespace java::util::concurrent { class ConcurrentHashMap$ForEachValueTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$ForEachValueTask> = ::java_util_concurrent / "ConcurrentHashMap$ForEachValueTask";
namespace java::util::concurrent { class ConcurrentHashMap$ForwardingNode; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$ForwardingNode> = ::java_util_concurrent / "ConcurrentHashMap$ForwardingNode";
namespace java::util::concurrent { class ConcurrentHashMap$KeyIterator; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$KeyIterator> = ::java_util_concurrent / "ConcurrentHashMap$KeyIterator";
namespace java::util::concurrent { class ConcurrentHashMap$KeySetView; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$KeySetView> = ::java_util_concurrent / "ConcurrentHashMap$KeySetView";
namespace java::util::concurrent { class ConcurrentHashMap$KeySpliterator; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$KeySpliterator> = ::java_util_concurrent / "ConcurrentHashMap$KeySpliterator";
namespace java::util::concurrent { class ConcurrentHashMap$MapEntry; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$MapEntry> = ::java_util_concurrent / "ConcurrentHashMap$MapEntry";
namespace java::util::concurrent { class ConcurrentHashMap$MapReduceEntriesTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$MapReduceEntriesTask> = ::java_util_concurrent / "ConcurrentHashMap$MapReduceEntriesTask";
namespace java::util::concurrent { class ConcurrentHashMap$MapReduceEntriesToDoubleTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$MapReduceEntriesToDoubleTask> = ::java_util_concurrent / "ConcurrentHashMap$MapReduceEntriesToDoubleTask";
namespace java::util::concurrent { class ConcurrentHashMap$MapReduceEntriesToIntTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$MapReduceEntriesToIntTask> = ::java_util_concurrent / "ConcurrentHashMap$MapReduceEntriesToIntTask";
namespace java::util::concurrent { class ConcurrentHashMap$MapReduceEntriesToLongTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$MapReduceEntriesToLongTask> = ::java_util_concurrent / "ConcurrentHashMap$MapReduceEntriesToLongTask";
namespace java::util::concurrent { class ConcurrentHashMap$MapReduceKeysTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$MapReduceKeysTask> = ::java_util_concurrent / "ConcurrentHashMap$MapReduceKeysTask";
namespace java::util::concurrent { class ConcurrentHashMap$MapReduceKeysToDoubleTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$MapReduceKeysToDoubleTask> = ::java_util_concurrent / "ConcurrentHashMap$MapReduceKeysToDoubleTask";
namespace java::util::concurrent { class ConcurrentHashMap$MapReduceKeysToIntTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$MapReduceKeysToIntTask> = ::java_util_concurrent / "ConcurrentHashMap$MapReduceKeysToIntTask";
namespace java::util::concurrent { class ConcurrentHashMap$MapReduceKeysToLongTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$MapReduceKeysToLongTask> = ::java_util_concurrent / "ConcurrentHashMap$MapReduceKeysToLongTask";
namespace java::util::concurrent { class ConcurrentHashMap$MapReduceMappingsTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$MapReduceMappingsTask> = ::java_util_concurrent / "ConcurrentHashMap$MapReduceMappingsTask";
namespace java::util::concurrent { class ConcurrentHashMap$MapReduceMappingsToDoubleTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$MapReduceMappingsToDoubleTask> = ::java_util_concurrent / "ConcurrentHashMap$MapReduceMappingsToDoubleTask";
namespace java::util::concurrent { class ConcurrentHashMap$MapReduceMappingsToIntTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$MapReduceMappingsToIntTask> = ::java_util_concurrent / "ConcurrentHashMap$MapReduceMappingsToIntTask";
namespace java::util::concurrent { class ConcurrentHashMap$MapReduceMappingsToLongTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$MapReduceMappingsToLongTask> = ::java_util_concurrent / "ConcurrentHashMap$MapReduceMappingsToLongTask";
namespace java::util::concurrent { class ConcurrentHashMap$MapReduceValuesTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$MapReduceValuesTask> = ::java_util_concurrent / "ConcurrentHashMap$MapReduceValuesTask";
namespace java::util::concurrent { class ConcurrentHashMap$MapReduceValuesToDoubleTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$MapReduceValuesToDoubleTask> = ::java_util_concurrent / "ConcurrentHashMap$MapReduceValuesToDoubleTask";
namespace java::util::concurrent { class ConcurrentHashMap$MapReduceValuesToIntTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$MapReduceValuesToIntTask> = ::java_util_concurrent / "ConcurrentHashMap$MapReduceValuesToIntTask";
namespace java::util::concurrent { class ConcurrentHashMap$MapReduceValuesToLongTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$MapReduceValuesToLongTask> = ::java_util_concurrent / "ConcurrentHashMap$MapReduceValuesToLongTask";
namespace java::util::concurrent { class ConcurrentHashMap$Node; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$Node> = ::java_util_concurrent / "ConcurrentHashMap$Node";
namespace java::util::concurrent { class ConcurrentHashMap$ReduceEntriesTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$ReduceEntriesTask> = ::java_util_concurrent / "ConcurrentHashMap$ReduceEntriesTask";
namespace java::util::concurrent { class ConcurrentHashMap$ReduceKeysTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$ReduceKeysTask> = ::java_util_concurrent / "ConcurrentHashMap$ReduceKeysTask";
namespace java::util::concurrent { class ConcurrentHashMap$ReduceValuesTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$ReduceValuesTask> = ::java_util_concurrent / "ConcurrentHashMap$ReduceValuesTask";
namespace java::util::concurrent { class ConcurrentHashMap$ReservationNode; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$ReservationNode> = ::java_util_concurrent / "ConcurrentHashMap$ReservationNode";
namespace java::util::concurrent { class ConcurrentHashMap$SearchEntriesTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$SearchEntriesTask> = ::java_util_concurrent / "ConcurrentHashMap$SearchEntriesTask";
namespace java::util::concurrent { class ConcurrentHashMap$SearchKeysTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$SearchKeysTask> = ::java_util_concurrent / "ConcurrentHashMap$SearchKeysTask";
namespace java::util::concurrent { class ConcurrentHashMap$SearchMappingsTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$SearchMappingsTask> = ::java_util_concurrent / "ConcurrentHashMap$SearchMappingsTask";
namespace java::util::concurrent { class ConcurrentHashMap$SearchValuesTask; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$SearchValuesTask> = ::java_util_concurrent / "ConcurrentHashMap$SearchValuesTask";
namespace java::util::concurrent { class ConcurrentHashMap$Segment; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$Segment> = ::java_util_concurrent / "ConcurrentHashMap$Segment";
namespace java::util::concurrent { class ConcurrentHashMap$TableStack; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$TableStack> = ::java_util_concurrent / "ConcurrentHashMap$TableStack";
namespace java::util::concurrent { class ConcurrentHashMap$Traverser; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$Traverser> = ::java_util_concurrent / "ConcurrentHashMap$Traverser";
namespace java::util::concurrent { class ConcurrentHashMap$TreeBin; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$TreeBin> = ::java_util_concurrent / "ConcurrentHashMap$TreeBin";
namespace java::util::concurrent { class ConcurrentHashMap$TreeNode; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$TreeNode> = ::java_util_concurrent / "ConcurrentHashMap$TreeNode";
namespace java::util::concurrent { class ConcurrentHashMap$ValueIterator; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$ValueIterator> = ::java_util_concurrent / "ConcurrentHashMap$ValueIterator";
namespace java::util::concurrent { class ConcurrentHashMap$ValueSpliterator; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$ValueSpliterator> = ::java_util_concurrent / "ConcurrentHashMap$ValueSpliterator";
namespace java::util::concurrent { class ConcurrentHashMap$ValuesView; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentHashMap$ValuesView> = ::java_util_concurrent / "ConcurrentHashMap$ValuesView";
namespace java::util::concurrent { class ConcurrentLinkedDeque; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentLinkedDeque> = ::java_util_concurrent / "ConcurrentLinkedDeque";
namespace java::util::concurrent { class ConcurrentLinkedDeque$1; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentLinkedDeque$1> = ::java_util_concurrent / "ConcurrentLinkedDeque$1";
namespace java::util::concurrent { class ConcurrentLinkedDeque$AbstractItr; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentLinkedDeque$AbstractItr> = ::java_util_concurrent / "ConcurrentLinkedDeque$AbstractItr";
namespace java::util::concurrent { class ConcurrentLinkedDeque$CLDSpliterator; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentLinkedDeque$CLDSpliterator> = ::java_util_concurrent / "ConcurrentLinkedDeque$CLDSpliterator";
namespace java::util::concurrent { class ConcurrentLinkedDeque$DescendingItr; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentLinkedDeque$DescendingItr> = ::java_util_concurrent / "ConcurrentLinkedDeque$DescendingItr";
namespace java::util::concurrent { class ConcurrentLinkedDeque$Itr; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentLinkedDeque$Itr> = ::java_util_concurrent / "ConcurrentLinkedDeque$Itr";
namespace java::util::concurrent { class ConcurrentLinkedDeque$Node; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentLinkedDeque$Node> = ::java_util_concurrent / "ConcurrentLinkedDeque$Node";
namespace java::util::concurrent { class ConcurrentLinkedQueue; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentLinkedQueue> = ::java_util_concurrent / "ConcurrentLinkedQueue";
namespace java::util::concurrent { class ConcurrentLinkedQueue$CLQSpliterator; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentLinkedQueue$CLQSpliterator> = ::java_util_concurrent / "ConcurrentLinkedQueue$CLQSpliterator";
namespace java::util::concurrent { class ConcurrentLinkedQueue$Itr; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentLinkedQueue$Itr> = ::java_util_concurrent / "ConcurrentLinkedQueue$Itr";
namespace java::util::concurrent { class ConcurrentLinkedQueue$Node; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentLinkedQueue$Node> = ::java_util_concurrent / "ConcurrentLinkedQueue$Node";
namespace java::util::concurrent { class ConcurrentMap; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentMap> = ::java_util_concurrent / "ConcurrentMap";
namespace java::util::concurrent { class ConcurrentNavigableMap; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentNavigableMap> = ::java_util_concurrent / "ConcurrentNavigableMap";
namespace java::util::concurrent { class ConcurrentSkipListMap; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap> = ::java_util_concurrent / "ConcurrentSkipListMap";
namespace java::util::concurrent { class ConcurrentSkipListMap$CSLMSpliterator; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap$CSLMSpliterator> = ::java_util_concurrent / "ConcurrentSkipListMap$CSLMSpliterator";
namespace java::util::concurrent { class ConcurrentSkipListMap$EntryIterator; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap$EntryIterator> = ::java_util_concurrent / "ConcurrentSkipListMap$EntryIterator";
namespace java::util::concurrent { class ConcurrentSkipListMap$EntrySet; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap$EntrySet> = ::java_util_concurrent / "ConcurrentSkipListMap$EntrySet";
namespace java::util::concurrent { class ConcurrentSkipListMap$EntrySpliterator; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap$EntrySpliterator> = ::java_util_concurrent / "ConcurrentSkipListMap$EntrySpliterator";
namespace java::util::concurrent { class ConcurrentSkipListMap$HeadIndex; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap$HeadIndex> = ::java_util_concurrent / "ConcurrentSkipListMap$HeadIndex";
namespace java::util::concurrent { class ConcurrentSkipListMap$Index; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap$Index> = ::java_util_concurrent / "ConcurrentSkipListMap$Index";
namespace java::util::concurrent { class ConcurrentSkipListMap$Iter; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap$Iter> = ::java_util_concurrent / "ConcurrentSkipListMap$Iter";
namespace java::util::concurrent { class ConcurrentSkipListMap$KeyIterator; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap$KeyIterator> = ::java_util_concurrent / "ConcurrentSkipListMap$KeyIterator";
namespace java::util::concurrent { class ConcurrentSkipListMap$KeySet; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap$KeySet> = ::java_util_concurrent / "ConcurrentSkipListMap$KeySet";
namespace java::util::concurrent { class ConcurrentSkipListMap$KeySpliterator; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap$KeySpliterator> = ::java_util_concurrent / "ConcurrentSkipListMap$KeySpliterator";
namespace java::util::concurrent { class ConcurrentSkipListMap$Node; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap$Node> = ::java_util_concurrent / "ConcurrentSkipListMap$Node";
namespace java::util::concurrent { class ConcurrentSkipListMap$SubMap; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap$SubMap> = ::java_util_concurrent / "ConcurrentSkipListMap$SubMap";
namespace java::util::concurrent { class ConcurrentSkipListMap$SubMap$SubMapEntryIterator; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap$SubMap$SubMapEntryIterator> = ::java_util_concurrent / "ConcurrentSkipListMap$SubMap$SubMapEntryIterator";
namespace java::util::concurrent { class ConcurrentSkipListMap$SubMap$SubMapIter; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap$SubMap$SubMapIter> = ::java_util_concurrent / "ConcurrentSkipListMap$SubMap$SubMapIter";
namespace java::util::concurrent { class ConcurrentSkipListMap$SubMap$SubMapKeyIterator; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap$SubMap$SubMapKeyIterator> = ::java_util_concurrent / "ConcurrentSkipListMap$SubMap$SubMapKeyIterator";
namespace java::util::concurrent { class ConcurrentSkipListMap$SubMap$SubMapValueIterator; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap$SubMap$SubMapValueIterator> = ::java_util_concurrent / "ConcurrentSkipListMap$SubMap$SubMapValueIterator";
namespace java::util::concurrent { class ConcurrentSkipListMap$ValueIterator; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap$ValueIterator> = ::java_util_concurrent / "ConcurrentSkipListMap$ValueIterator";
namespace java::util::concurrent { class ConcurrentSkipListMap$ValueSpliterator; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap$ValueSpliterator> = ::java_util_concurrent / "ConcurrentSkipListMap$ValueSpliterator";
namespace java::util::concurrent { class ConcurrentSkipListMap$Values; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListMap$Values> = ::java_util_concurrent / "ConcurrentSkipListMap$Values";
namespace java::util::concurrent { class ConcurrentSkipListSet; }
template<> constexpr auto signature<::java::util::concurrent::ConcurrentSkipListSet> = ::java_util_concurrent / "ConcurrentSkipListSet";
namespace java::util::concurrent { class CopyOnWriteArrayList; }
template<> constexpr auto signature<::java::util::concurrent::CopyOnWriteArrayList> = ::java_util_concurrent / "CopyOnWriteArrayList";
namespace java::util::concurrent { class CopyOnWriteArrayList$1; }
template<> constexpr auto signature<::java::util::concurrent::CopyOnWriteArrayList$1> = ::java_util_concurrent / "CopyOnWriteArrayList$1";
namespace java::util::concurrent { class CopyOnWriteArrayList$COWIterator; }
template<> constexpr auto signature<::java::util::concurrent::CopyOnWriteArrayList$COWIterator> = ::java_util_concurrent / "CopyOnWriteArrayList$COWIterator";
namespace java::util::concurrent { class CopyOnWriteArrayList$COWSubList; }
template<> constexpr auto signature<::java::util::concurrent::CopyOnWriteArrayList$COWSubList> = ::java_util_concurrent / "CopyOnWriteArrayList$COWSubList";
namespace java::util::concurrent { class CopyOnWriteArrayList$COWSubListIterator; }
template<> constexpr auto signature<::java::util::concurrent::CopyOnWriteArrayList$COWSubListIterator> = ::java_util_concurrent / "CopyOnWriteArrayList$COWSubListIterator";
namespace java::util::concurrent { class CopyOnWriteArraySet; }
template<> constexpr auto signature<::java::util::concurrent::CopyOnWriteArraySet> = ::java_util_concurrent / "CopyOnWriteArraySet";
namespace java::util::concurrent { class CountDownLatch; }
template<> constexpr auto signature<::java::util::concurrent::CountDownLatch> = ::java_util_concurrent / "CountDownLatch";
namespace java::util::concurrent { class CountDownLatch$Sync; }
template<> constexpr auto signature<::java::util::concurrent::CountDownLatch$Sync> = ::java_util_concurrent / "CountDownLatch$Sync";
namespace java::util::concurrent { class CountedCompleter; }
template<> constexpr auto signature<::java::util::concurrent::CountedCompleter> = ::java_util_concurrent / "CountedCompleter";
namespace java::util::concurrent { class CyclicBarrier; }
template<> constexpr auto signature<::java::util::concurrent::CyclicBarrier> = ::java_util_concurrent / "CyclicBarrier";
namespace java::util::concurrent { class CyclicBarrier$1; }
template<> constexpr auto signature<::java::util::concurrent::CyclicBarrier$1> = ::java_util_concurrent / "CyclicBarrier$1";
namespace java::util::concurrent { class CyclicBarrier$Generation; }
template<> constexpr auto signature<::java::util::concurrent::CyclicBarrier$Generation> = ::java_util_concurrent / "CyclicBarrier$Generation";
namespace java::util::concurrent { class DelayQueue; }
template<> constexpr auto signature<::java::util::concurrent::DelayQueue> = ::java_util_concurrent / "DelayQueue";
namespace java::util::concurrent { class DelayQueue$Itr; }
template<> constexpr auto signature<::java::util::concurrent::DelayQueue$Itr> = ::java_util_concurrent / "DelayQueue$Itr";
namespace java::util::concurrent { class Delayed; }
template<> constexpr auto signature<::java::util::concurrent::Delayed> = ::java_util_concurrent / "Delayed";
namespace java::util::concurrent { class Exchanger; }
template<> constexpr auto signature<::java::util::concurrent::Exchanger> = ::java_util_concurrent / "Exchanger";
namespace java::util::concurrent { class Exchanger$Node; }
template<> constexpr auto signature<::java::util::concurrent::Exchanger$Node> = ::java_util_concurrent / "Exchanger$Node";
namespace java::util::concurrent { class Exchanger$Participant; }
template<> constexpr auto signature<::java::util::concurrent::Exchanger$Participant> = ::java_util_concurrent / "Exchanger$Participant";
namespace java::util::concurrent { class ExecutionException; }
template<> constexpr auto signature<::java::util::concurrent::ExecutionException> = ::java_util_concurrent / "ExecutionException";
namespace java::util::concurrent { class Executor; }
template<> constexpr auto signature<::java::util::concurrent::Executor> = ::java_util_concurrent / "Executor";
namespace java::util::concurrent { class ExecutorCompletionService; }
template<> constexpr auto signature<::java::util::concurrent::ExecutorCompletionService> = ::java_util_concurrent / "ExecutorCompletionService";
namespace java::util::concurrent { class ExecutorCompletionService$QueueingFuture; }
template<> constexpr auto signature<::java::util::concurrent::ExecutorCompletionService$QueueingFuture> = ::java_util_concurrent / "ExecutorCompletionService$QueueingFuture";
namespace java::util::concurrent { class ExecutorService; }
template<> constexpr auto signature<::java::util::concurrent::ExecutorService> = ::java_util_concurrent / "ExecutorService";
namespace java::util::concurrent { class Executors; }
template<> constexpr auto signature<::java::util::concurrent::Executors> = ::java_util_concurrent / "Executors";
namespace java::util::concurrent { class Executors$1; }
template<> constexpr auto signature<::java::util::concurrent::Executors$1> = ::java_util_concurrent / "Executors$1";
namespace java::util::concurrent { class Executors$2; }
template<> constexpr auto signature<::java::util::concurrent::Executors$2> = ::java_util_concurrent / "Executors$2";
namespace java::util::concurrent { class Executors$DefaultThreadFactory; }
template<> constexpr auto signature<::java::util::concurrent::Executors$DefaultThreadFactory> = ::java_util_concurrent / "Executors$DefaultThreadFactory";
namespace java::util::concurrent { class Executors$DelegatedExecutorService; }
template<> constexpr auto signature<::java::util::concurrent::Executors$DelegatedExecutorService> = ::java_util_concurrent / "Executors$DelegatedExecutorService";
namespace java::util::concurrent { class Executors$DelegatedScheduledExecutorService; }
template<> constexpr auto signature<::java::util::concurrent::Executors$DelegatedScheduledExecutorService> = ::java_util_concurrent / "Executors$DelegatedScheduledExecutorService";
namespace java::util::concurrent { class Executors$FinalizableDelegatedExecutorService; }
template<> constexpr auto signature<::java::util::concurrent::Executors$FinalizableDelegatedExecutorService> = ::java_util_concurrent / "Executors$FinalizableDelegatedExecutorService";
namespace java::util::concurrent { class Executors$PrivilegedCallable; }
template<> constexpr auto signature<::java::util::concurrent::Executors$PrivilegedCallable> = ::java_util_concurrent / "Executors$PrivilegedCallable";
namespace java::util::concurrent { class Executors$PrivilegedCallable$1; }
template<> constexpr auto signature<::java::util::concurrent::Executors$PrivilegedCallable$1> = ::java_util_concurrent / "Executors$PrivilegedCallable$1";
namespace java::util::concurrent { class Executors$PrivilegedCallableUsingCurrentClassLoader; }
template<> constexpr auto signature<::java::util::concurrent::Executors$PrivilegedCallableUsingCurrentClassLoader> = ::java_util_concurrent / "Executors$PrivilegedCallableUsingCurrentClassLoader";
namespace java::util::concurrent { class Executors$PrivilegedCallableUsingCurrentClassLoader$1; }
template<> constexpr auto signature<::java::util::concurrent::Executors$PrivilegedCallableUsingCurrentClassLoader$1> = ::java_util_concurrent / "Executors$PrivilegedCallableUsingCurrentClassLoader$1";
namespace java::util::concurrent { class Executors$PrivilegedThreadFactory; }
template<> constexpr auto signature<::java::util::concurrent::Executors$PrivilegedThreadFactory> = ::java_util_concurrent / "Executors$PrivilegedThreadFactory";
namespace java::util::concurrent { class Executors$PrivilegedThreadFactory$1; }
template<> constexpr auto signature<::java::util::concurrent::Executors$PrivilegedThreadFactory$1> = ::java_util_concurrent / "Executors$PrivilegedThreadFactory$1";
namespace java::util::concurrent { class Executors$PrivilegedThreadFactory$1$1; }
template<> constexpr auto signature<::java::util::concurrent::Executors$PrivilegedThreadFactory$1$1> = ::java_util_concurrent / "Executors$PrivilegedThreadFactory$1$1";
namespace java::util::concurrent { class Executors$RunnableAdapter; }
template<> constexpr auto signature<::java::util::concurrent::Executors$RunnableAdapter> = ::java_util_concurrent / "Executors$RunnableAdapter";
namespace java::util::concurrent { class ForkJoinPool; }
template<> constexpr auto signature<::java::util::concurrent::ForkJoinPool> = ::java_util_concurrent / "ForkJoinPool";
namespace java::util::concurrent { class ForkJoinPool$1; }
template<> constexpr auto signature<::java::util::concurrent::ForkJoinPool$1> = ::java_util_concurrent / "ForkJoinPool$1";
namespace java::util::concurrent { class ForkJoinPool$DefaultForkJoinWorkerThreadFactory; }
template<> constexpr auto signature<::java::util::concurrent::ForkJoinPool$DefaultForkJoinWorkerThreadFactory> = ::java_util_concurrent / "ForkJoinPool$DefaultForkJoinWorkerThreadFactory";
namespace java::util::concurrent { class ForkJoinPool$EmptyTask; }
template<> constexpr auto signature<::java::util::concurrent::ForkJoinPool$EmptyTask> = ::java_util_concurrent / "ForkJoinPool$EmptyTask";
namespace java::util::concurrent { class ForkJoinPool$ForkJoinWorkerThreadFactory; }
template<> constexpr auto signature<::java::util::concurrent::ForkJoinPool$ForkJoinWorkerThreadFactory> = ::java_util_concurrent / "ForkJoinPool$ForkJoinWorkerThreadFactory";
namespace java::util::concurrent { class ForkJoinPool$InnocuousForkJoinWorkerThreadFactory; }
template<> constexpr auto signature<::java::util::concurrent::ForkJoinPool$InnocuousForkJoinWorkerThreadFactory> = ::java_util_concurrent / "ForkJoinPool$InnocuousForkJoinWorkerThreadFactory";
namespace java::util::concurrent { class ForkJoinPool$InnocuousForkJoinWorkerThreadFactory$1; }
template<> constexpr auto signature<::java::util::concurrent::ForkJoinPool$InnocuousForkJoinWorkerThreadFactory$1> = ::java_util_concurrent / "ForkJoinPool$InnocuousForkJoinWorkerThreadFactory$1";
namespace java::util::concurrent { class ForkJoinPool$ManagedBlocker; }
template<> constexpr auto signature<::java::util::concurrent::ForkJoinPool$ManagedBlocker> = ::java_util_concurrent / "ForkJoinPool$ManagedBlocker";
namespace java::util::concurrent { class ForkJoinPool$WorkQueue; }
template<> constexpr auto signature<::java::util::concurrent::ForkJoinPool$WorkQueue> = ::java_util_concurrent / "ForkJoinPool$WorkQueue";
namespace java::util::concurrent { class ForkJoinTask; }
template<> constexpr auto signature<::java::util::concurrent::ForkJoinTask> = ::java_util_concurrent / "ForkJoinTask";
namespace java::util::concurrent { class ForkJoinTask$AdaptedCallable; }
template<> constexpr auto signature<::java::util::concurrent::ForkJoinTask$AdaptedCallable> = ::java_util_concurrent / "ForkJoinTask$AdaptedCallable";
namespace java::util::concurrent { class ForkJoinTask$AdaptedRunnable; }
template<> constexpr auto signature<::java::util::concurrent::ForkJoinTask$AdaptedRunnable> = ::java_util_concurrent / "ForkJoinTask$AdaptedRunnable";
namespace java::util::concurrent { class ForkJoinTask$AdaptedRunnableAction; }
template<> constexpr auto signature<::java::util::concurrent::ForkJoinTask$AdaptedRunnableAction> = ::java_util_concurrent / "ForkJoinTask$AdaptedRunnableAction";
namespace java::util::concurrent { class ForkJoinTask$ExceptionNode; }
template<> constexpr auto signature<::java::util::concurrent::ForkJoinTask$ExceptionNode> = ::java_util_concurrent / "ForkJoinTask$ExceptionNode";
namespace java::util::concurrent { class ForkJoinTask$RunnableExecuteAction; }
template<> constexpr auto signature<::java::util::concurrent::ForkJoinTask$RunnableExecuteAction> = ::java_util_concurrent / "ForkJoinTask$RunnableExecuteAction";
namespace java::util::concurrent { class ForkJoinWorkerThread; }
template<> constexpr auto signature<::java::util::concurrent::ForkJoinWorkerThread> = ::java_util_concurrent / "ForkJoinWorkerThread";
namespace java::util::concurrent { class ForkJoinWorkerThread$InnocuousForkJoinWorkerThread; }
template<> constexpr auto signature<::java::util::concurrent::ForkJoinWorkerThread$InnocuousForkJoinWorkerThread> = ::java_util_concurrent / "ForkJoinWorkerThread$InnocuousForkJoinWorkerThread";
namespace java::util::concurrent { class Future; }
template<> constexpr auto signature<::java::util::concurrent::Future> = ::java_util_concurrent / "Future";
namespace java::util::concurrent { class FutureTask; }
template<> constexpr auto signature<::java::util::concurrent::FutureTask> = ::java_util_concurrent / "FutureTask";
namespace java::util::concurrent { class FutureTask$WaitNode; }
template<> constexpr auto signature<::java::util::concurrent::FutureTask$WaitNode> = ::java_util_concurrent / "FutureTask$WaitNode";
namespace java::util::concurrent { class LinkedBlockingDeque; }
template<> constexpr auto signature<::java::util::concurrent::LinkedBlockingDeque> = ::java_util_concurrent / "LinkedBlockingDeque";
namespace java::util::concurrent { class LinkedBlockingDeque$1; }
template<> constexpr auto signature<::java::util::concurrent::LinkedBlockingDeque$1> = ::java_util_concurrent / "LinkedBlockingDeque$1";
namespace java::util::concurrent { class LinkedBlockingDeque$AbstractItr; }
template<> constexpr auto signature<::java::util::concurrent::LinkedBlockingDeque$AbstractItr> = ::java_util_concurrent / "LinkedBlockingDeque$AbstractItr";
namespace java::util::concurrent { class LinkedBlockingDeque$DescendingItr; }
template<> constexpr auto signature<::java::util::concurrent::LinkedBlockingDeque$DescendingItr> = ::java_util_concurrent / "LinkedBlockingDeque$DescendingItr";
namespace java::util::concurrent { class LinkedBlockingDeque$Itr; }
template<> constexpr auto signature<::java::util::concurrent::LinkedBlockingDeque$Itr> = ::java_util_concurrent / "LinkedBlockingDeque$Itr";
namespace java::util::concurrent { class LinkedBlockingDeque$LBDSpliterator; }
template<> constexpr auto signature<::java::util::concurrent::LinkedBlockingDeque$LBDSpliterator> = ::java_util_concurrent / "LinkedBlockingDeque$LBDSpliterator";
namespace java::util::concurrent { class LinkedBlockingDeque$Node; }
template<> constexpr auto signature<::java::util::concurrent::LinkedBlockingDeque$Node> = ::java_util_concurrent / "LinkedBlockingDeque$Node";
namespace java::util::concurrent { class LinkedBlockingQueue; }
template<> constexpr auto signature<::java::util::concurrent::LinkedBlockingQueue> = ::java_util_concurrent / "LinkedBlockingQueue";
namespace java::util::concurrent { class LinkedBlockingQueue$Itr; }
template<> constexpr auto signature<::java::util::concurrent::LinkedBlockingQueue$Itr> = ::java_util_concurrent / "LinkedBlockingQueue$Itr";
namespace java::util::concurrent { class LinkedBlockingQueue$LBQSpliterator; }
template<> constexpr auto signature<::java::util::concurrent::LinkedBlockingQueue$LBQSpliterator> = ::java_util_concurrent / "LinkedBlockingQueue$LBQSpliterator";
namespace java::util::concurrent { class LinkedBlockingQueue$Node; }
template<> constexpr auto signature<::java::util::concurrent::LinkedBlockingQueue$Node> = ::java_util_concurrent / "LinkedBlockingQueue$Node";
namespace java::util::concurrent { class LinkedTransferQueue; }
template<> constexpr auto signature<::java::util::concurrent::LinkedTransferQueue> = ::java_util_concurrent / "LinkedTransferQueue";
namespace java::util::concurrent { class LinkedTransferQueue$Itr; }
template<> constexpr auto signature<::java::util::concurrent::LinkedTransferQueue$Itr> = ::java_util_concurrent / "LinkedTransferQueue$Itr";
namespace java::util::concurrent { class LinkedTransferQueue$LTQSpliterator; }
template<> constexpr auto signature<::java::util::concurrent::LinkedTransferQueue$LTQSpliterator> = ::java_util_concurrent / "LinkedTransferQueue$LTQSpliterator";
namespace java::util::concurrent { class LinkedTransferQueue$Node; }
template<> constexpr auto signature<::java::util::concurrent::LinkedTransferQueue$Node> = ::java_util_concurrent / "LinkedTransferQueue$Node";
namespace java::util::concurrent { class Phaser; }
template<> constexpr auto signature<::java::util::concurrent::Phaser> = ::java_util_concurrent / "Phaser";
namespace java::util::concurrent { class Phaser$QNode; }
template<> constexpr auto signature<::java::util::concurrent::Phaser$QNode> = ::java_util_concurrent / "Phaser$QNode";
namespace java::util::concurrent { class PriorityBlockingQueue; }
template<> constexpr auto signature<::java::util::concurrent::PriorityBlockingQueue> = ::java_util_concurrent / "PriorityBlockingQueue";
namespace java::util::concurrent { class PriorityBlockingQueue$Itr; }
template<> constexpr auto signature<::java::util::concurrent::PriorityBlockingQueue$Itr> = ::java_util_concurrent / "PriorityBlockingQueue$Itr";
namespace java::util::concurrent { class PriorityBlockingQueue$PBQSpliterator; }
template<> constexpr auto signature<::java::util::concurrent::PriorityBlockingQueue$PBQSpliterator> = ::java_util_concurrent / "PriorityBlockingQueue$PBQSpliterator";
namespace java::util::concurrent { class RecursiveAction; }
template<> constexpr auto signature<::java::util::concurrent::RecursiveAction> = ::java_util_concurrent / "RecursiveAction";
namespace java::util::concurrent { class RecursiveTask; }
template<> constexpr auto signature<::java::util::concurrent::RecursiveTask> = ::java_util_concurrent / "RecursiveTask";
namespace java::util::concurrent { class RejectedExecutionException; }
template<> constexpr auto signature<::java::util::concurrent::RejectedExecutionException> = ::java_util_concurrent / "RejectedExecutionException";
namespace java::util::concurrent { class RejectedExecutionHandler; }
template<> constexpr auto signature<::java::util::concurrent::RejectedExecutionHandler> = ::java_util_concurrent / "RejectedExecutionHandler";
namespace java::util::concurrent { class RunnableFuture; }
template<> constexpr auto signature<::java::util::concurrent::RunnableFuture> = ::java_util_concurrent / "RunnableFuture";
namespace java::util::concurrent { class RunnableScheduledFuture; }
template<> constexpr auto signature<::java::util::concurrent::RunnableScheduledFuture> = ::java_util_concurrent / "RunnableScheduledFuture";
namespace java::util::concurrent { class ScheduledExecutorService; }
template<> constexpr auto signature<::java::util::concurrent::ScheduledExecutorService> = ::java_util_concurrent / "ScheduledExecutorService";
namespace java::util::concurrent { class ScheduledFuture; }
template<> constexpr auto signature<::java::util::concurrent::ScheduledFuture> = ::java_util_concurrent / "ScheduledFuture";
namespace java::util::concurrent { class ScheduledThreadPoolExecutor; }
template<> constexpr auto signature<::java::util::concurrent::ScheduledThreadPoolExecutor> = ::java_util_concurrent / "ScheduledThreadPoolExecutor";
namespace java::util::concurrent { class ScheduledThreadPoolExecutor$DelayedWorkQueue; }
template<> constexpr auto signature<::java::util::concurrent::ScheduledThreadPoolExecutor$DelayedWorkQueue> = ::java_util_concurrent / "ScheduledThreadPoolExecutor$DelayedWorkQueue";
namespace java::util::concurrent { class ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr; }
template<> constexpr auto signature<::java::util::concurrent::ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr> = ::java_util_concurrent / "ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr";
namespace java::util::concurrent { class ScheduledThreadPoolExecutor$ScheduledFutureTask; }
template<> constexpr auto signature<::java::util::concurrent::ScheduledThreadPoolExecutor$ScheduledFutureTask> = ::java_util_concurrent / "ScheduledThreadPoolExecutor$ScheduledFutureTask";
namespace java::util::concurrent { class Semaphore; }
template<> constexpr auto signature<::java::util::concurrent::Semaphore> = ::java_util_concurrent / "Semaphore";
namespace java::util::concurrent { class Semaphore$FairSync; }
template<> constexpr auto signature<::java::util::concurrent::Semaphore$FairSync> = ::java_util_concurrent / "Semaphore$FairSync";
namespace java::util::concurrent { class Semaphore$NonfairSync; }
template<> constexpr auto signature<::java::util::concurrent::Semaphore$NonfairSync> = ::java_util_concurrent / "Semaphore$NonfairSync";
namespace java::util::concurrent { class Semaphore$Sync; }
template<> constexpr auto signature<::java::util::concurrent::Semaphore$Sync> = ::java_util_concurrent / "Semaphore$Sync";
namespace java::util::concurrent { class SynchronousQueue; }
template<> constexpr auto signature<::java::util::concurrent::SynchronousQueue> = ::java_util_concurrent / "SynchronousQueue";
namespace java::util::concurrent { class SynchronousQueue$FifoWaitQueue; }
template<> constexpr auto signature<::java::util::concurrent::SynchronousQueue$FifoWaitQueue> = ::java_util_concurrent / "SynchronousQueue$FifoWaitQueue";
namespace java::util::concurrent { class SynchronousQueue$LifoWaitQueue; }
template<> constexpr auto signature<::java::util::concurrent::SynchronousQueue$LifoWaitQueue> = ::java_util_concurrent / "SynchronousQueue$LifoWaitQueue";
namespace java::util::concurrent { class SynchronousQueue$TransferQueue; }
template<> constexpr auto signature<::java::util::concurrent::SynchronousQueue$TransferQueue> = ::java_util_concurrent / "SynchronousQueue$TransferQueue";
namespace java::util::concurrent { class SynchronousQueue$TransferQueue$QNode; }
template<> constexpr auto signature<::java::util::concurrent::SynchronousQueue$TransferQueue$QNode> = ::java_util_concurrent / "SynchronousQueue$TransferQueue$QNode";
namespace java::util::concurrent { class SynchronousQueue$TransferStack; }
template<> constexpr auto signature<::java::util::concurrent::SynchronousQueue$TransferStack> = ::java_util_concurrent / "SynchronousQueue$TransferStack";
namespace java::util::concurrent { class SynchronousQueue$TransferStack$SNode; }
template<> constexpr auto signature<::java::util::concurrent::SynchronousQueue$TransferStack$SNode> = ::java_util_concurrent / "SynchronousQueue$TransferStack$SNode";
namespace java::util::concurrent { class SynchronousQueue$Transferer; }
template<> constexpr auto signature<::java::util::concurrent::SynchronousQueue$Transferer> = ::java_util_concurrent / "SynchronousQueue$Transferer";
namespace java::util::concurrent { class SynchronousQueue$WaitQueue; }
template<> constexpr auto signature<::java::util::concurrent::SynchronousQueue$WaitQueue> = ::java_util_concurrent / "SynchronousQueue$WaitQueue";
namespace java::util::concurrent { class ThreadFactory; }
template<> constexpr auto signature<::java::util::concurrent::ThreadFactory> = ::java_util_concurrent / "ThreadFactory";
namespace java::util::concurrent { class ThreadLocalRandom; }
template<> constexpr auto signature<::java::util::concurrent::ThreadLocalRandom> = ::java_util_concurrent / "ThreadLocalRandom";
namespace java::util::concurrent { class ThreadLocalRandom$RandomDoublesSpliterator; }
template<> constexpr auto signature<::java::util::concurrent::ThreadLocalRandom$RandomDoublesSpliterator> = ::java_util_concurrent / "ThreadLocalRandom$RandomDoublesSpliterator";
namespace java::util::concurrent { class ThreadLocalRandom$RandomIntsSpliterator; }
template<> constexpr auto signature<::java::util::concurrent::ThreadLocalRandom$RandomIntsSpliterator> = ::java_util_concurrent / "ThreadLocalRandom$RandomIntsSpliterator";
namespace java::util::concurrent { class ThreadLocalRandom$RandomLongsSpliterator; }
template<> constexpr auto signature<::java::util::concurrent::ThreadLocalRandom$RandomLongsSpliterator> = ::java_util_concurrent / "ThreadLocalRandom$RandomLongsSpliterator";
namespace java::util::concurrent { class ThreadPoolExecutor; }
template<> constexpr auto signature<::java::util::concurrent::ThreadPoolExecutor> = ::java_util_concurrent / "ThreadPoolExecutor";
namespace java::util::concurrent { class ThreadPoolExecutor$AbortPolicy; }
template<> constexpr auto signature<::java::util::concurrent::ThreadPoolExecutor$AbortPolicy> = ::java_util_concurrent / "ThreadPoolExecutor$AbortPolicy";
namespace java::util::concurrent { class ThreadPoolExecutor$CallerRunsPolicy; }
template<> constexpr auto signature<::java::util::concurrent::ThreadPoolExecutor$CallerRunsPolicy> = ::java_util_concurrent / "ThreadPoolExecutor$CallerRunsPolicy";
namespace java::util::concurrent { class ThreadPoolExecutor$DiscardOldestPolicy; }
template<> constexpr auto signature<::java::util::concurrent::ThreadPoolExecutor$DiscardOldestPolicy> = ::java_util_concurrent / "ThreadPoolExecutor$DiscardOldestPolicy";
namespace java::util::concurrent { class ThreadPoolExecutor$DiscardPolicy; }
template<> constexpr auto signature<::java::util::concurrent::ThreadPoolExecutor$DiscardPolicy> = ::java_util_concurrent / "ThreadPoolExecutor$DiscardPolicy";
namespace java::util::concurrent { class ThreadPoolExecutor$Worker; }
template<> constexpr auto signature<::java::util::concurrent::ThreadPoolExecutor$Worker> = ::java_util_concurrent / "ThreadPoolExecutor$Worker";
namespace java::util::concurrent { class TimeUnit; }
template<> constexpr auto signature<::java::util::concurrent::TimeUnit> = ::java_util_concurrent / "TimeUnit";
namespace java::util::concurrent { class TimeUnit$1; }
template<> constexpr auto signature<::java::util::concurrent::TimeUnit$1> = ::java_util_concurrent / "TimeUnit$1";
namespace java::util::concurrent { class TimeUnit$2; }
template<> constexpr auto signature<::java::util::concurrent::TimeUnit$2> = ::java_util_concurrent / "TimeUnit$2";
namespace java::util::concurrent { class TimeUnit$3; }
template<> constexpr auto signature<::java::util::concurrent::TimeUnit$3> = ::java_util_concurrent / "TimeUnit$3";
namespace java::util::concurrent { class TimeUnit$4; }
template<> constexpr auto signature<::java::util::concurrent::TimeUnit$4> = ::java_util_concurrent / "TimeUnit$4";
namespace java::util::concurrent { class TimeUnit$5; }
template<> constexpr auto signature<::java::util::concurrent::TimeUnit$5> = ::java_util_concurrent / "TimeUnit$5";
namespace java::util::concurrent { class TimeUnit$6; }
template<> constexpr auto signature<::java::util::concurrent::TimeUnit$6> = ::java_util_concurrent / "TimeUnit$6";
namespace java::util::concurrent { class TimeUnit$7; }
template<> constexpr auto signature<::java::util::concurrent::TimeUnit$7> = ::java_util_concurrent / "TimeUnit$7";
namespace java::util::concurrent { class TimeoutException; }
template<> constexpr auto signature<::java::util::concurrent::TimeoutException> = ::java_util_concurrent / "TimeoutException";
namespace java::util::concurrent { class TransferQueue; }
template<> constexpr auto signature<::java::util::concurrent::TransferQueue> = ::java_util_concurrent / "TransferQueue";
namespace java::util::concurrent::atomic { class AtomicBoolean; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicBoolean> = ::java_util_concurrent_atomic / "AtomicBoolean";
namespace java::util::concurrent::atomic { class AtomicInteger; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicInteger> = ::java_util_concurrent_atomic / "AtomicInteger";
namespace java::util::concurrent::atomic { class AtomicIntegerArray; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicIntegerArray> = ::java_util_concurrent_atomic / "AtomicIntegerArray";
namespace java::util::concurrent::atomic { class AtomicIntegerFieldUpdater; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicIntegerFieldUpdater> = ::java_util_concurrent_atomic / "AtomicIntegerFieldUpdater";
namespace java::util::concurrent::atomic { class AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl> = ::java_util_concurrent_atomic / "AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl";
namespace java::util::concurrent::atomic { class AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl$1; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl$1> = ::java_util_concurrent_atomic / "AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl$1";
namespace java::util::concurrent::atomic { class AtomicLong; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicLong> = ::java_util_concurrent_atomic / "AtomicLong";
namespace java::util::concurrent::atomic { class AtomicLongArray; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicLongArray> = ::java_util_concurrent_atomic / "AtomicLongArray";
namespace java::util::concurrent::atomic { class AtomicLongFieldUpdater; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicLongFieldUpdater> = ::java_util_concurrent_atomic / "AtomicLongFieldUpdater";
namespace java::util::concurrent::atomic { class AtomicLongFieldUpdater$CASUpdater; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicLongFieldUpdater$CASUpdater> = ::java_util_concurrent_atomic / "AtomicLongFieldUpdater$CASUpdater";
namespace java::util::concurrent::atomic { class AtomicLongFieldUpdater$CASUpdater$1; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicLongFieldUpdater$CASUpdater$1> = ::java_util_concurrent_atomic / "AtomicLongFieldUpdater$CASUpdater$1";
namespace java::util::concurrent::atomic { class AtomicLongFieldUpdater$LockedUpdater; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicLongFieldUpdater$LockedUpdater> = ::java_util_concurrent_atomic / "AtomicLongFieldUpdater$LockedUpdater";
namespace java::util::concurrent::atomic { class AtomicLongFieldUpdater$LockedUpdater$1; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicLongFieldUpdater$LockedUpdater$1> = ::java_util_concurrent_atomic / "AtomicLongFieldUpdater$LockedUpdater$1";
namespace java::util::concurrent::atomic { class AtomicMarkableReference; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicMarkableReference> = ::java_util_concurrent_atomic / "AtomicMarkableReference";
namespace java::util::concurrent::atomic { class AtomicMarkableReference$Pair; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicMarkableReference$Pair> = ::java_util_concurrent_atomic / "AtomicMarkableReference$Pair";
namespace java::util::concurrent::atomic { class AtomicReference; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicReference> = ::java_util_concurrent_atomic / "AtomicReference";
namespace java::util::concurrent::atomic { class AtomicReferenceArray; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicReferenceArray> = ::java_util_concurrent_atomic / "AtomicReferenceArray";
namespace java::util::concurrent::atomic { class AtomicReferenceFieldUpdater; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicReferenceFieldUpdater> = ::java_util_concurrent_atomic / "AtomicReferenceFieldUpdater";
namespace java::util::concurrent::atomic { class AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl> = ::java_util_concurrent_atomic / "AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl";
namespace java::util::concurrent::atomic { class AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl$1; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl$1> = ::java_util_concurrent_atomic / "AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl$1";
namespace java::util::concurrent::atomic { class AtomicStampedReference; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicStampedReference> = ::java_util_concurrent_atomic / "AtomicStampedReference";
namespace java::util::concurrent::atomic { class AtomicStampedReference$Pair; }
template<> constexpr auto signature<::java::util::concurrent::atomic::AtomicStampedReference$Pair> = ::java_util_concurrent_atomic / "AtomicStampedReference$Pair";
namespace java::util::concurrent::atomic { class DoubleAccumulator; }
template<> constexpr auto signature<::java::util::concurrent::atomic::DoubleAccumulator> = ::java_util_concurrent_atomic / "DoubleAccumulator";
namespace java::util::concurrent::atomic { class DoubleAccumulator$SerializationProxy; }
template<> constexpr auto signature<::java::util::concurrent::atomic::DoubleAccumulator$SerializationProxy> = ::java_util_concurrent_atomic / "DoubleAccumulator$SerializationProxy";
namespace java::util::concurrent::atomic { class DoubleAdder; }
template<> constexpr auto signature<::java::util::concurrent::atomic::DoubleAdder> = ::java_util_concurrent_atomic / "DoubleAdder";
namespace java::util::concurrent::atomic { class DoubleAdder$SerializationProxy; }
template<> constexpr auto signature<::java::util::concurrent::atomic::DoubleAdder$SerializationProxy> = ::java_util_concurrent_atomic / "DoubleAdder$SerializationProxy";
namespace java::util::concurrent::atomic { class LongAccumulator; }
template<> constexpr auto signature<::java::util::concurrent::atomic::LongAccumulator> = ::java_util_concurrent_atomic / "LongAccumulator";
namespace java::util::concurrent::atomic { class LongAccumulator$SerializationProxy; }
template<> constexpr auto signature<::java::util::concurrent::atomic::LongAccumulator$SerializationProxy> = ::java_util_concurrent_atomic / "LongAccumulator$SerializationProxy";
namespace java::util::concurrent::atomic { class LongAdder; }
template<> constexpr auto signature<::java::util::concurrent::atomic::LongAdder> = ::java_util_concurrent_atomic / "LongAdder";
namespace java::util::concurrent::atomic { class LongAdder$SerializationProxy; }
template<> constexpr auto signature<::java::util::concurrent::atomic::LongAdder$SerializationProxy> = ::java_util_concurrent_atomic / "LongAdder$SerializationProxy";
namespace java::util::concurrent::atomic { class Striped64; }
template<> constexpr auto signature<::java::util::concurrent::atomic::Striped64> = ::java_util_concurrent_atomic / "Striped64";
namespace java::util::concurrent::atomic { class Striped64$Cell; }
template<> constexpr auto signature<::java::util::concurrent::atomic::Striped64$Cell> = ::java_util_concurrent_atomic / "Striped64$Cell";
namespace java::util::concurrent::locks { class AbstractOwnableSynchronizer; }
template<> constexpr auto signature<::java::util::concurrent::locks::AbstractOwnableSynchronizer> = ::java_util_concurrent_locks / "AbstractOwnableSynchronizer";
namespace java::util::concurrent::locks { class AbstractQueuedLongSynchronizer; }
template<> constexpr auto signature<::java::util::concurrent::locks::AbstractQueuedLongSynchronizer> = ::java_util_concurrent_locks / "AbstractQueuedLongSynchronizer";
namespace java::util::concurrent::locks { class AbstractQueuedLongSynchronizer$ConditionObject; }
template<> constexpr auto signature<::java::util::concurrent::locks::AbstractQueuedLongSynchronizer$ConditionObject> = ::java_util_concurrent_locks / "AbstractQueuedLongSynchronizer$ConditionObject";
namespace java::util::concurrent::locks { class AbstractQueuedLongSynchronizer$Node; }
template<> constexpr auto signature<::java::util::concurrent::locks::AbstractQueuedLongSynchronizer$Node> = ::java_util_concurrent_locks / "AbstractQueuedLongSynchronizer$Node";
namespace java::util::concurrent::locks { class AbstractQueuedSynchronizer; }
template<> constexpr auto signature<::java::util::concurrent::locks::AbstractQueuedSynchronizer> = ::java_util_concurrent_locks / "AbstractQueuedSynchronizer";
namespace java::util::concurrent::locks { class AbstractQueuedSynchronizer$ConditionObject; }
template<> constexpr auto signature<::java::util::concurrent::locks::AbstractQueuedSynchronizer$ConditionObject> = ::java_util_concurrent_locks / "AbstractQueuedSynchronizer$ConditionObject";
namespace java::util::concurrent::locks { class AbstractQueuedSynchronizer$Node; }
template<> constexpr auto signature<::java::util::concurrent::locks::AbstractQueuedSynchronizer$Node> = ::java_util_concurrent_locks / "AbstractQueuedSynchronizer$Node";
namespace java::util::concurrent::locks { class Condition; }
template<> constexpr auto signature<::java::util::concurrent::locks::Condition> = ::java_util_concurrent_locks / "Condition";
namespace java::util::concurrent::locks { class Lock; }
template<> constexpr auto signature<::java::util::concurrent::locks::Lock> = ::java_util_concurrent_locks / "Lock";
namespace java::util::concurrent::locks { class LockSupport; }
template<> constexpr auto signature<::java::util::concurrent::locks::LockSupport> = ::java_util_concurrent_locks / "LockSupport";
namespace java::util::concurrent::locks { class ReadWriteLock; }
template<> constexpr auto signature<::java::util::concurrent::locks::ReadWriteLock> = ::java_util_concurrent_locks / "ReadWriteLock";
namespace java::util::concurrent::locks { class ReentrantLock; }
template<> constexpr auto signature<::java::util::concurrent::locks::ReentrantLock> = ::java_util_concurrent_locks / "ReentrantLock";
namespace java::util::concurrent::locks { class ReentrantLock$FairSync; }
template<> constexpr auto signature<::java::util::concurrent::locks::ReentrantLock$FairSync> = ::java_util_concurrent_locks / "ReentrantLock$FairSync";
namespace java::util::concurrent::locks { class ReentrantLock$NonfairSync; }
template<> constexpr auto signature<::java::util::concurrent::locks::ReentrantLock$NonfairSync> = ::java_util_concurrent_locks / "ReentrantLock$NonfairSync";
namespace java::util::concurrent::locks { class ReentrantLock$Sync; }
template<> constexpr auto signature<::java::util::concurrent::locks::ReentrantLock$Sync> = ::java_util_concurrent_locks / "ReentrantLock$Sync";
namespace java::util::concurrent::locks { class ReentrantReadWriteLock; }
template<> constexpr auto signature<::java::util::concurrent::locks::ReentrantReadWriteLock> = ::java_util_concurrent_locks / "ReentrantReadWriteLock";
namespace java::util::concurrent::locks { class ReentrantReadWriteLock$FairSync; }
template<> constexpr auto signature<::java::util::concurrent::locks::ReentrantReadWriteLock$FairSync> = ::java_util_concurrent_locks / "ReentrantReadWriteLock$FairSync";
namespace java::util::concurrent::locks { class ReentrantReadWriteLock$NonfairSync; }
template<> constexpr auto signature<::java::util::concurrent::locks::ReentrantReadWriteLock$NonfairSync> = ::java_util_concurrent_locks / "ReentrantReadWriteLock$NonfairSync";
namespace java::util::concurrent::locks { class ReentrantReadWriteLock$ReadLock; }
template<> constexpr auto signature<::java::util::concurrent::locks::ReentrantReadWriteLock$ReadLock> = ::java_util_concurrent_locks / "ReentrantReadWriteLock$ReadLock";
namespace java::util::concurrent::locks { class ReentrantReadWriteLock$Sync; }
template<> constexpr auto signature<::java::util::concurrent::locks::ReentrantReadWriteLock$Sync> = ::java_util_concurrent_locks / "ReentrantReadWriteLock$Sync";
namespace java::util::concurrent::locks { class ReentrantReadWriteLock$Sync$HoldCounter; }
template<> constexpr auto signature<::java::util::concurrent::locks::ReentrantReadWriteLock$Sync$HoldCounter> = ::java_util_concurrent_locks / "ReentrantReadWriteLock$Sync$HoldCounter";
namespace java::util::concurrent::locks { class ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter; }
template<> constexpr auto signature<::java::util::concurrent::locks::ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter> = ::java_util_concurrent_locks / "ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter";
namespace java::util::concurrent::locks { class ReentrantReadWriteLock$WriteLock; }
template<> constexpr auto signature<::java::util::concurrent::locks::ReentrantReadWriteLock$WriteLock> = ::java_util_concurrent_locks / "ReentrantReadWriteLock$WriteLock";
namespace java::util::concurrent::locks { class StampedLock; }
template<> constexpr auto signature<::java::util::concurrent::locks::StampedLock> = ::java_util_concurrent_locks / "StampedLock";
namespace java::util::concurrent::locks { class StampedLock$ReadLockView; }
template<> constexpr auto signature<::java::util::concurrent::locks::StampedLock$ReadLockView> = ::java_util_concurrent_locks / "StampedLock$ReadLockView";
namespace java::util::concurrent::locks { class StampedLock$ReadWriteLockView; }
template<> constexpr auto signature<::java::util::concurrent::locks::StampedLock$ReadWriteLockView> = ::java_util_concurrent_locks / "StampedLock$ReadWriteLockView";
namespace java::util::concurrent::locks { class StampedLock$WNode; }
template<> constexpr auto signature<::java::util::concurrent::locks::StampedLock$WNode> = ::java_util_concurrent_locks / "StampedLock$WNode";
namespace java::util::concurrent::locks { class StampedLock$WriteLockView; }
template<> constexpr auto signature<::java::util::concurrent::locks::StampedLock$WriteLockView> = ::java_util_concurrent_locks / "StampedLock$WriteLockView";
namespace java::util::function { class BiConsumer; }
template<> constexpr auto signature<::java::util::function::BiConsumer> = ::java_util_function / "BiConsumer";
namespace java::util::function { class BiFunction; }
template<> constexpr auto signature<::java::util::function::BiFunction> = ::java_util_function / "BiFunction";
namespace java::util::function { class BiPredicate; }
template<> constexpr auto signature<::java::util::function::BiPredicate> = ::java_util_function / "BiPredicate";
namespace java::util::function { class BinaryOperator; }
template<> constexpr auto signature<::java::util::function::BinaryOperator> = ::java_util_function / "BinaryOperator";
namespace java::util::function { class BooleanSupplier; }
template<> constexpr auto signature<::java::util::function::BooleanSupplier> = ::java_util_function / "BooleanSupplier";
namespace java::util::function { class Consumer; }
template<> constexpr auto signature<::java::util::function::Consumer> = ::java_util_function / "Consumer";
namespace java::util::function { class DoubleBinaryOperator; }
template<> constexpr auto signature<::java::util::function::DoubleBinaryOperator> = ::java_util_function / "DoubleBinaryOperator";
namespace java::util::function { class DoubleConsumer; }
template<> constexpr auto signature<::java::util::function::DoubleConsumer> = ::java_util_function / "DoubleConsumer";
namespace java::util::function { class DoubleFunction; }
template<> constexpr auto signature<::java::util::function::DoubleFunction> = ::java_util_function / "DoubleFunction";
namespace java::util::function { class DoublePredicate; }
template<> constexpr auto signature<::java::util::function::DoublePredicate> = ::java_util_function / "DoublePredicate";
namespace java::util::function { class DoubleSupplier; }
template<> constexpr auto signature<::java::util::function::DoubleSupplier> = ::java_util_function / "DoubleSupplier";
namespace java::util::function { class DoubleToIntFunction; }
template<> constexpr auto signature<::java::util::function::DoubleToIntFunction> = ::java_util_function / "DoubleToIntFunction";
namespace java::util::function { class DoubleToLongFunction; }
template<> constexpr auto signature<::java::util::function::DoubleToLongFunction> = ::java_util_function / "DoubleToLongFunction";
namespace java::util::function { class DoubleUnaryOperator; }
template<> constexpr auto signature<::java::util::function::DoubleUnaryOperator> = ::java_util_function / "DoubleUnaryOperator";
namespace java::util::function { class Function; }
template<> constexpr auto signature<::java::util::function::Function> = ::java_util_function / "Function";
namespace java::util::function { class IntBinaryOperator; }
template<> constexpr auto signature<::java::util::function::IntBinaryOperator> = ::java_util_function / "IntBinaryOperator";
namespace java::util::function { class IntConsumer; }
template<> constexpr auto signature<::java::util::function::IntConsumer> = ::java_util_function / "IntConsumer";
namespace java::util::function { class IntFunction; }
template<> constexpr auto signature<::java::util::function::IntFunction> = ::java_util_function / "IntFunction";
namespace java::util::function { class IntPredicate; }
template<> constexpr auto signature<::java::util::function::IntPredicate> = ::java_util_function / "IntPredicate";
namespace java::util::function { class IntSupplier; }
template<> constexpr auto signature<::java::util::function::IntSupplier> = ::java_util_function / "IntSupplier";
namespace java::util::function { class IntToDoubleFunction; }
template<> constexpr auto signature<::java::util::function::IntToDoubleFunction> = ::java_util_function / "IntToDoubleFunction";
namespace java::util::function { class IntToLongFunction; }
template<> constexpr auto signature<::java::util::function::IntToLongFunction> = ::java_util_function / "IntToLongFunction";
namespace java::util::function { class IntUnaryOperator; }
template<> constexpr auto signature<::java::util::function::IntUnaryOperator> = ::java_util_function / "IntUnaryOperator";
namespace java::util::function { class LongBinaryOperator; }
template<> constexpr auto signature<::java::util::function::LongBinaryOperator> = ::java_util_function / "LongBinaryOperator";
namespace java::util::function { class LongConsumer; }
template<> constexpr auto signature<::java::util::function::LongConsumer> = ::java_util_function / "LongConsumer";
namespace java::util::function { class LongFunction; }
template<> constexpr auto signature<::java::util::function::LongFunction> = ::java_util_function / "LongFunction";
namespace java::util::function { class LongPredicate; }
template<> constexpr auto signature<::java::util::function::LongPredicate> = ::java_util_function / "LongPredicate";
namespace java::util::function { class LongSupplier; }
template<> constexpr auto signature<::java::util::function::LongSupplier> = ::java_util_function / "LongSupplier";
namespace java::util::function { class LongToDoubleFunction; }
template<> constexpr auto signature<::java::util::function::LongToDoubleFunction> = ::java_util_function / "LongToDoubleFunction";
namespace java::util::function { class LongToIntFunction; }
template<> constexpr auto signature<::java::util::function::LongToIntFunction> = ::java_util_function / "LongToIntFunction";
namespace java::util::function { class LongUnaryOperator; }
template<> constexpr auto signature<::java::util::function::LongUnaryOperator> = ::java_util_function / "LongUnaryOperator";
namespace java::util::function { class ObjDoubleConsumer; }
template<> constexpr auto signature<::java::util::function::ObjDoubleConsumer> = ::java_util_function / "ObjDoubleConsumer";
namespace java::util::function { class ObjIntConsumer; }
template<> constexpr auto signature<::java::util::function::ObjIntConsumer> = ::java_util_function / "ObjIntConsumer";
namespace java::util::function { class ObjLongConsumer; }
template<> constexpr auto signature<::java::util::function::ObjLongConsumer> = ::java_util_function / "ObjLongConsumer";
namespace java::util::function { class Predicate; }
template<> constexpr auto signature<::java::util::function::Predicate> = ::java_util_function / "Predicate";
namespace java::util::function { class Supplier; }
template<> constexpr auto signature<::java::util::function::Supplier> = ::java_util_function / "Supplier";
namespace java::util::function { class ToDoubleBiFunction; }
template<> constexpr auto signature<::java::util::function::ToDoubleBiFunction> = ::java_util_function / "ToDoubleBiFunction";
namespace java::util::function { class ToDoubleFunction; }
template<> constexpr auto signature<::java::util::function::ToDoubleFunction> = ::java_util_function / "ToDoubleFunction";
namespace java::util::function { class ToIntBiFunction; }
template<> constexpr auto signature<::java::util::function::ToIntBiFunction> = ::java_util_function / "ToIntBiFunction";
namespace java::util::function { class ToIntFunction; }
template<> constexpr auto signature<::java::util::function::ToIntFunction> = ::java_util_function / "ToIntFunction";
namespace java::util::function { class ToLongBiFunction; }
template<> constexpr auto signature<::java::util::function::ToLongBiFunction> = ::java_util_function / "ToLongBiFunction";
namespace java::util::function { class ToLongFunction; }
template<> constexpr auto signature<::java::util::function::ToLongFunction> = ::java_util_function / "ToLongFunction";
namespace java::util::function { class UnaryOperator; }
template<> constexpr auto signature<::java::util::function::UnaryOperator> = ::java_util_function / "UnaryOperator";
namespace java::util::jar { class Attributes; }
template<> constexpr auto signature<::java::util::jar::Attributes> = ::java_util_jar / "Attributes";
namespace java::util::jar { class Attributes$Name; }
template<> constexpr auto signature<::java::util::jar::Attributes$Name> = ::java_util_jar / "Attributes$Name";
namespace java::util::jar { class JarEntry; }
template<> constexpr auto signature<::java::util::jar::JarEntry> = ::java_util_jar / "JarEntry";
namespace java::util::jar { class JarException; }
template<> constexpr auto signature<::java::util::jar::JarException> = ::java_util_jar / "JarException";
namespace java::util::jar { class JarFile; }
template<> constexpr auto signature<::java::util::jar::JarFile> = ::java_util_jar / "JarFile";
namespace java::util::jar { class JarFile$1; }
template<> constexpr auto signature<::java::util::jar::JarFile$1> = ::java_util_jar / "JarFile$1";
namespace java::util::jar { class JarFile$2; }
template<> constexpr auto signature<::java::util::jar::JarFile$2> = ::java_util_jar / "JarFile$2";
namespace java::util::jar { class JarFile$3; }
template<> constexpr auto signature<::java::util::jar::JarFile$3> = ::java_util_jar / "JarFile$3";
namespace java::util::jar { class JarFile$JarEntryIterator; }
template<> constexpr auto signature<::java::util::jar::JarFile$JarEntryIterator> = ::java_util_jar / "JarFile$JarEntryIterator";
namespace java::util::jar { class JarFile$JarFileEntry; }
template<> constexpr auto signature<::java::util::jar::JarFile$JarFileEntry> = ::java_util_jar / "JarFile$JarFileEntry";
namespace java::util::jar { class JarInputStream; }
template<> constexpr auto signature<::java::util::jar::JarInputStream> = ::java_util_jar / "JarInputStream";
namespace java::util::jar { class JarOutputStream; }
template<> constexpr auto signature<::java::util::jar::JarOutputStream> = ::java_util_jar / "JarOutputStream";
namespace java::util::jar { class JarVerifier; }
template<> constexpr auto signature<::java::util::jar::JarVerifier> = ::java_util_jar / "JarVerifier";
namespace java::util::jar { class JarVerifier$1; }
template<> constexpr auto signature<::java::util::jar::JarVerifier$1> = ::java_util_jar / "JarVerifier$1";
namespace java::util::jar { class JarVerifier$2; }
template<> constexpr auto signature<::java::util::jar::JarVerifier$2> = ::java_util_jar / "JarVerifier$2";
namespace java::util::jar { class JarVerifier$3; }
template<> constexpr auto signature<::java::util::jar::JarVerifier$3> = ::java_util_jar / "JarVerifier$3";
namespace java::util::jar { class JarVerifier$4; }
template<> constexpr auto signature<::java::util::jar::JarVerifier$4> = ::java_util_jar / "JarVerifier$4";
namespace java::util::jar { class JarVerifier$VerifierCodeSource; }
template<> constexpr auto signature<::java::util::jar::JarVerifier$VerifierCodeSource> = ::java_util_jar / "JarVerifier$VerifierCodeSource";
namespace java::util::jar { class JarVerifier$VerifierStream; }
template<> constexpr auto signature<::java::util::jar::JarVerifier$VerifierStream> = ::java_util_jar / "JarVerifier$VerifierStream";
namespace java::util::jar { class JavaUtilJarAccessImpl; }
template<> constexpr auto signature<::java::util::jar::JavaUtilJarAccessImpl> = ::java_util_jar / "JavaUtilJarAccessImpl";
namespace java::util::jar { class Manifest; }
template<> constexpr auto signature<::java::util::jar::Manifest> = ::java_util_jar / "Manifest";
namespace java::util::jar { class Manifest$FastInputStream; }
template<> constexpr auto signature<::java::util::jar::Manifest$FastInputStream> = ::java_util_jar / "Manifest$FastInputStream";
namespace java::util::jar { class Pack200; }
template<> constexpr auto signature<::java::util::jar::Pack200> = ::java_util_jar / "Pack200";
namespace java::util::jar { class Pack200$Packer; }
template<> constexpr auto signature<::java::util::jar::Pack200$Packer> = ::java_util_jar / "Pack200$Packer";
namespace java::util::jar { class Pack200$Unpacker; }
template<> constexpr auto signature<::java::util::jar::Pack200$Unpacker> = ::java_util_jar / "Pack200$Unpacker";
namespace java::util::logging { class ConsoleHandler; }
template<> constexpr auto signature<::java::util::logging::ConsoleHandler> = ::java_util_logging / "ConsoleHandler";
namespace java::util::logging { class ErrorManager; }
template<> constexpr auto signature<::java::util::logging::ErrorManager> = ::java_util_logging / "ErrorManager";
namespace java::util::logging { class FileHandler; }
template<> constexpr auto signature<::java::util::logging::FileHandler> = ::java_util_logging / "FileHandler";
namespace java::util::logging { class FileHandler$1; }
template<> constexpr auto signature<::java::util::logging::FileHandler$1> = ::java_util_logging / "FileHandler$1";
namespace java::util::logging { class FileHandler$InitializationErrorManager; }
template<> constexpr auto signature<::java::util::logging::FileHandler$InitializationErrorManager> = ::java_util_logging / "FileHandler$InitializationErrorManager";
namespace java::util::logging { class FileHandler$MeteredStream; }
template<> constexpr auto signature<::java::util::logging::FileHandler$MeteredStream> = ::java_util_logging / "FileHandler$MeteredStream";
namespace java::util::logging { class Filter; }
template<> constexpr auto signature<::java::util::logging::Filter> = ::java_util_logging / "Filter";
namespace java::util::logging { class Formatter; }
template<> constexpr auto signature<::java::util::logging::Formatter> = ::java_util_logging / "Formatter";
namespace java::util::logging { class Handler; }
template<> constexpr auto signature<::java::util::logging::Handler> = ::java_util_logging / "Handler";
namespace java::util::logging { class Level; }
template<> constexpr auto signature<::java::util::logging::Level> = ::java_util_logging / "Level";
namespace java::util::logging { class Level$1; }
template<> constexpr auto signature<::java::util::logging::Level$1> = ::java_util_logging / "Level$1";
namespace java::util::logging { class Level$KnownLevel; }
template<> constexpr auto signature<::java::util::logging::Level$KnownLevel> = ::java_util_logging / "Level$KnownLevel";
namespace java::util::logging { class LogManager; }
template<> constexpr auto signature<::java::util::logging::LogManager> = ::java_util_logging / "LogManager";
namespace java::util::logging { class LogManager$1; }
template<> constexpr auto signature<::java::util::logging::LogManager$1> = ::java_util_logging / "LogManager$1";
namespace java::util::logging { class LogManager$2; }
template<> constexpr auto signature<::java::util::logging::LogManager$2> = ::java_util_logging / "LogManager$2";
namespace java::util::logging { class LogManager$3; }
template<> constexpr auto signature<::java::util::logging::LogManager$3> = ::java_util_logging / "LogManager$3";
namespace java::util::logging { class LogManager$4; }
template<> constexpr auto signature<::java::util::logging::LogManager$4> = ::java_util_logging / "LogManager$4";
namespace java::util::logging { class LogManager$5; }
template<> constexpr auto signature<::java::util::logging::LogManager$5> = ::java_util_logging / "LogManager$5";
namespace java::util::logging { class LogManager$6; }
template<> constexpr auto signature<::java::util::logging::LogManager$6> = ::java_util_logging / "LogManager$6";
namespace java::util::logging { class LogManager$7; }
template<> constexpr auto signature<::java::util::logging::LogManager$7> = ::java_util_logging / "LogManager$7";
namespace java::util::logging { class LogManager$Beans; }
template<> constexpr auto signature<::java::util::logging::LogManager$Beans> = ::java_util_logging / "LogManager$Beans";
namespace java::util::logging { class LogManager$Cleaner; }
template<> constexpr auto signature<::java::util::logging::LogManager$Cleaner> = ::java_util_logging / "LogManager$Cleaner";
namespace java::util::logging { class LogManager$LogNode; }
template<> constexpr auto signature<::java::util::logging::LogManager$LogNode> = ::java_util_logging / "LogManager$LogNode";
namespace java::util::logging { class LogManager$LoggerContext; }
template<> constexpr auto signature<::java::util::logging::LogManager$LoggerContext> = ::java_util_logging / "LogManager$LoggerContext";
namespace java::util::logging { class LogManager$LoggerContext$1; }
template<> constexpr auto signature<::java::util::logging::LogManager$LoggerContext$1> = ::java_util_logging / "LogManager$LoggerContext$1";
namespace java::util::logging { class LogManager$LoggerWeakRef; }
template<> constexpr auto signature<::java::util::logging::LogManager$LoggerWeakRef> = ::java_util_logging / "LogManager$LoggerWeakRef";
namespace java::util::logging { class LogManager$RootLogger; }
template<> constexpr auto signature<::java::util::logging::LogManager$RootLogger> = ::java_util_logging / "LogManager$RootLogger";
namespace java::util::logging { class LogManager$SystemLoggerContext; }
template<> constexpr auto signature<::java::util::logging::LogManager$SystemLoggerContext> = ::java_util_logging / "LogManager$SystemLoggerContext";
namespace java::util::logging { class LogRecord; }
template<> constexpr auto signature<::java::util::logging::LogRecord> = ::java_util_logging / "LogRecord";
namespace java::util::logging { class Logger; }
template<> constexpr auto signature<::java::util::logging::Logger> = ::java_util_logging / "Logger";
namespace java::util::logging { class Logger$1; }
template<> constexpr auto signature<::java::util::logging::Logger$1> = ::java_util_logging / "Logger$1";
namespace java::util::logging { class Logger$LoggerBundle; }
template<> constexpr auto signature<::java::util::logging::Logger$LoggerBundle> = ::java_util_logging / "Logger$LoggerBundle";
namespace java::util::logging { class Logger$SystemLoggerHelper; }
template<> constexpr auto signature<::java::util::logging::Logger$SystemLoggerHelper> = ::java_util_logging / "Logger$SystemLoggerHelper";
namespace java::util::logging { class Logger$SystemLoggerHelper$1; }
template<> constexpr auto signature<::java::util::logging::Logger$SystemLoggerHelper$1> = ::java_util_logging / "Logger$SystemLoggerHelper$1";
namespace java::util::logging { class Logging; }
template<> constexpr auto signature<::java::util::logging::Logging> = ::java_util_logging / "Logging";
namespace java::util::logging { class LoggingMXBean; }
template<> constexpr auto signature<::java::util::logging::LoggingMXBean> = ::java_util_logging / "LoggingMXBean";
namespace java::util::logging { class LoggingPermission; }
template<> constexpr auto signature<::java::util::logging::LoggingPermission> = ::java_util_logging / "LoggingPermission";
namespace java::util::logging { class LoggingProxyImpl; }
template<> constexpr auto signature<::java::util::logging::LoggingProxyImpl> = ::java_util_logging / "LoggingProxyImpl";
namespace java::util::logging { class MemoryHandler; }
template<> constexpr auto signature<::java::util::logging::MemoryHandler> = ::java_util_logging / "MemoryHandler";
namespace java::util::logging { class SimpleFormatter; }
template<> constexpr auto signature<::java::util::logging::SimpleFormatter> = ::java_util_logging / "SimpleFormatter";
namespace java::util::logging { class SocketHandler; }
template<> constexpr auto signature<::java::util::logging::SocketHandler> = ::java_util_logging / "SocketHandler";
namespace java::util::logging { class StreamHandler; }
template<> constexpr auto signature<::java::util::logging::StreamHandler> = ::java_util_logging / "StreamHandler";
namespace java::util::logging { class XMLFormatter; }
template<> constexpr auto signature<::java::util::logging::XMLFormatter> = ::java_util_logging / "XMLFormatter";
namespace java::util::prefs { class AbstractPreferences; }
template<> constexpr auto signature<::java::util::prefs::AbstractPreferences> = ::java_util_prefs / "AbstractPreferences";
namespace java::util::prefs { class AbstractPreferences$1; }
template<> constexpr auto signature<::java::util::prefs::AbstractPreferences$1> = ::java_util_prefs / "AbstractPreferences$1";
namespace java::util::prefs { class AbstractPreferences$EventDispatchThread; }
template<> constexpr auto signature<::java::util::prefs::AbstractPreferences$EventDispatchThread> = ::java_util_prefs / "AbstractPreferences$EventDispatchThread";
namespace java::util::prefs { class AbstractPreferences$NodeAddedEvent; }
template<> constexpr auto signature<::java::util::prefs::AbstractPreferences$NodeAddedEvent> = ::java_util_prefs / "AbstractPreferences$NodeAddedEvent";
namespace java::util::prefs { class AbstractPreferences$NodeRemovedEvent; }
template<> constexpr auto signature<::java::util::prefs::AbstractPreferences$NodeRemovedEvent> = ::java_util_prefs / "AbstractPreferences$NodeRemovedEvent";
namespace java::util::prefs { class BackingStoreException; }
template<> constexpr auto signature<::java::util::prefs::BackingStoreException> = ::java_util_prefs / "BackingStoreException";
namespace java::util::prefs { class Base64; }
template<> constexpr auto signature<::java::util::prefs::Base64> = ::java_util_prefs / "Base64";
namespace java::util::prefs { class FileSystemPreferences; }
template<> constexpr auto signature<::java::util::prefs::FileSystemPreferences> = ::java_util_prefs / "FileSystemPreferences";
namespace java::util::prefs { class FileSystemPreferences$1; }
template<> constexpr auto signature<::java::util::prefs::FileSystemPreferences$1> = ::java_util_prefs / "FileSystemPreferences$1";
namespace java::util::prefs { class FileSystemPreferences$10; }
template<> constexpr auto signature<::java::util::prefs::FileSystemPreferences$10> = ::java_util_prefs / "FileSystemPreferences$10";
namespace java::util::prefs { class FileSystemPreferences$11; }
template<> constexpr auto signature<::java::util::prefs::FileSystemPreferences$11> = ::java_util_prefs / "FileSystemPreferences$11";
namespace java::util::prefs { class FileSystemPreferences$12; }
template<> constexpr auto signature<::java::util::prefs::FileSystemPreferences$12> = ::java_util_prefs / "FileSystemPreferences$12";
namespace java::util::prefs { class FileSystemPreferences$2; }
template<> constexpr auto signature<::java::util::prefs::FileSystemPreferences$2> = ::java_util_prefs / "FileSystemPreferences$2";
namespace java::util::prefs { class FileSystemPreferences$3; }
template<> constexpr auto signature<::java::util::prefs::FileSystemPreferences$3> = ::java_util_prefs / "FileSystemPreferences$3";
namespace java::util::prefs { class FileSystemPreferences$4; }
template<> constexpr auto signature<::java::util::prefs::FileSystemPreferences$4> = ::java_util_prefs / "FileSystemPreferences$4";
namespace java::util::prefs { class FileSystemPreferences$4$1; }
template<> constexpr auto signature<::java::util::prefs::FileSystemPreferences$4$1> = ::java_util_prefs / "FileSystemPreferences$4$1";
namespace java::util::prefs { class FileSystemPreferences$5; }
template<> constexpr auto signature<::java::util::prefs::FileSystemPreferences$5> = ::java_util_prefs / "FileSystemPreferences$5";
namespace java::util::prefs { class FileSystemPreferences$6; }
template<> constexpr auto signature<::java::util::prefs::FileSystemPreferences$6> = ::java_util_prefs / "FileSystemPreferences$6";
namespace java::util::prefs { class FileSystemPreferences$7; }
template<> constexpr auto signature<::java::util::prefs::FileSystemPreferences$7> = ::java_util_prefs / "FileSystemPreferences$7";
namespace java::util::prefs { class FileSystemPreferences$8; }
template<> constexpr auto signature<::java::util::prefs::FileSystemPreferences$8> = ::java_util_prefs / "FileSystemPreferences$8";
namespace java::util::prefs { class FileSystemPreferences$9; }
template<> constexpr auto signature<::java::util::prefs::FileSystemPreferences$9> = ::java_util_prefs / "FileSystemPreferences$9";
namespace java::util::prefs { class FileSystemPreferences$Change; }
template<> constexpr auto signature<::java::util::prefs::FileSystemPreferences$Change> = ::java_util_prefs / "FileSystemPreferences$Change";
namespace java::util::prefs { class FileSystemPreferences$NodeCreate; }
template<> constexpr auto signature<::java::util::prefs::FileSystemPreferences$NodeCreate> = ::java_util_prefs / "FileSystemPreferences$NodeCreate";
namespace java::util::prefs { class FileSystemPreferences$Put; }
template<> constexpr auto signature<::java::util::prefs::FileSystemPreferences$Put> = ::java_util_prefs / "FileSystemPreferences$Put";
namespace java::util::prefs { class FileSystemPreferences$Remove; }
template<> constexpr auto signature<::java::util::prefs::FileSystemPreferences$Remove> = ::java_util_prefs / "FileSystemPreferences$Remove";
namespace java::util::prefs { class FileSystemPreferencesFactory; }
template<> constexpr auto signature<::java::util::prefs::FileSystemPreferencesFactory> = ::java_util_prefs / "FileSystemPreferencesFactory";
namespace java::util::prefs { class InvalidPreferencesFormatException; }
template<> constexpr auto signature<::java::util::prefs::InvalidPreferencesFormatException> = ::java_util_prefs / "InvalidPreferencesFormatException";
namespace java::util::prefs { class NodeChangeEvent; }
template<> constexpr auto signature<::java::util::prefs::NodeChangeEvent> = ::java_util_prefs / "NodeChangeEvent";
namespace java::util::prefs { class NodeChangeListener; }
template<> constexpr auto signature<::java::util::prefs::NodeChangeListener> = ::java_util_prefs / "NodeChangeListener";
namespace java::util::prefs { class PreferenceChangeEvent; }
template<> constexpr auto signature<::java::util::prefs::PreferenceChangeEvent> = ::java_util_prefs / "PreferenceChangeEvent";
namespace java::util::prefs { class PreferenceChangeListener; }
template<> constexpr auto signature<::java::util::prefs::PreferenceChangeListener> = ::java_util_prefs / "PreferenceChangeListener";
namespace java::util::prefs { class Preferences; }
template<> constexpr auto signature<::java::util::prefs::Preferences> = ::java_util_prefs / "Preferences";
namespace java::util::prefs { class Preferences$1; }
template<> constexpr auto signature<::java::util::prefs::Preferences$1> = ::java_util_prefs / "Preferences$1";
namespace java::util::prefs { class Preferences$2; }
template<> constexpr auto signature<::java::util::prefs::Preferences$2> = ::java_util_prefs / "Preferences$2";
namespace java::util::prefs { class PreferencesFactory; }
template<> constexpr auto signature<::java::util::prefs::PreferencesFactory> = ::java_util_prefs / "PreferencesFactory";
namespace java::util::prefs { class XmlSupport; }
template<> constexpr auto signature<::java::util::prefs::XmlSupport> = ::java_util_prefs / "XmlSupport";
namespace java::util::prefs { class XmlSupport$1; }
template<> constexpr auto signature<::java::util::prefs::XmlSupport$1> = ::java_util_prefs / "XmlSupport$1";
namespace java::util::prefs { class XmlSupport$EH; }
template<> constexpr auto signature<::java::util::prefs::XmlSupport$EH> = ::java_util_prefs / "XmlSupport$EH";
namespace java::util::prefs { class XmlSupport$Resolver; }
template<> constexpr auto signature<::java::util::prefs::XmlSupport$Resolver> = ::java_util_prefs / "XmlSupport$Resolver";
namespace java::util::regex { class ASCII; }
template<> constexpr auto signature<::java::util::regex::ASCII> = ::java_util_regex / "ASCII";
namespace java::util::regex { class MatchResult; }
template<> constexpr auto signature<::java::util::regex::MatchResult> = ::java_util_regex / "MatchResult";
namespace java::util::regex { class Matcher; }
template<> constexpr auto signature<::java::util::regex::Matcher> = ::java_util_regex / "Matcher";
namespace java::util::regex { class Pattern; }
template<> constexpr auto signature<::java::util::regex::Pattern> = ::java_util_regex / "Pattern";
namespace java::util::regex { class Pattern$1; }
template<> constexpr auto signature<::java::util::regex::Pattern$1> = ::java_util_regex / "Pattern$1";
namespace java::util::regex { class Pattern$1MatcherIterator; }
template<> constexpr auto signature<::java::util::regex::Pattern$1MatcherIterator> = ::java_util_regex / "Pattern$1MatcherIterator";
namespace java::util::regex { class Pattern$2; }
template<> constexpr auto signature<::java::util::regex::Pattern$2> = ::java_util_regex / "Pattern$2";
namespace java::util::regex { class Pattern$3; }
template<> constexpr auto signature<::java::util::regex::Pattern$3> = ::java_util_regex / "Pattern$3";
namespace java::util::regex { class Pattern$4; }
template<> constexpr auto signature<::java::util::regex::Pattern$4> = ::java_util_regex / "Pattern$4";
namespace java::util::regex { class Pattern$5; }
template<> constexpr auto signature<::java::util::regex::Pattern$5> = ::java_util_regex / "Pattern$5";
namespace java::util::regex { class Pattern$6; }
template<> constexpr auto signature<::java::util::regex::Pattern$6> = ::java_util_regex / "Pattern$6";
namespace java::util::regex { class Pattern$7; }
template<> constexpr auto signature<::java::util::regex::Pattern$7> = ::java_util_regex / "Pattern$7";
namespace java::util::regex { class Pattern$All; }
template<> constexpr auto signature<::java::util::regex::Pattern$All> = ::java_util_regex / "Pattern$All";
namespace java::util::regex { class Pattern$BackRef; }
template<> constexpr auto signature<::java::util::regex::Pattern$BackRef> = ::java_util_regex / "Pattern$BackRef";
namespace java::util::regex { class Pattern$Begin; }
template<> constexpr auto signature<::java::util::regex::Pattern$Begin> = ::java_util_regex / "Pattern$Begin";
namespace java::util::regex { class Pattern$Behind; }
template<> constexpr auto signature<::java::util::regex::Pattern$Behind> = ::java_util_regex / "Pattern$Behind";
namespace java::util::regex { class Pattern$BehindS; }
template<> constexpr auto signature<::java::util::regex::Pattern$BehindS> = ::java_util_regex / "Pattern$BehindS";
namespace java::util::regex { class Pattern$BitClass; }
template<> constexpr auto signature<::java::util::regex::Pattern$BitClass> = ::java_util_regex / "Pattern$BitClass";
namespace java::util::regex { class Pattern$Block; }
template<> constexpr auto signature<::java::util::regex::Pattern$Block> = ::java_util_regex / "Pattern$Block";
namespace java::util::regex { class Pattern$BmpCharProperty; }
template<> constexpr auto signature<::java::util::regex::Pattern$BmpCharProperty> = ::java_util_regex / "Pattern$BmpCharProperty";
namespace java::util::regex { class Pattern$BnM; }
template<> constexpr auto signature<::java::util::regex::Pattern$BnM> = ::java_util_regex / "Pattern$BnM";
namespace java::util::regex { class Pattern$BnMS; }
template<> constexpr auto signature<::java::util::regex::Pattern$BnMS> = ::java_util_regex / "Pattern$BnMS";
namespace java::util::regex { class Pattern$Bound; }
template<> constexpr auto signature<::java::util::regex::Pattern$Bound> = ::java_util_regex / "Pattern$Bound";
namespace java::util::regex { class Pattern$Branch; }
template<> constexpr auto signature<::java::util::regex::Pattern$Branch> = ::java_util_regex / "Pattern$Branch";
namespace java::util::regex { class Pattern$BranchConn; }
template<> constexpr auto signature<::java::util::regex::Pattern$BranchConn> = ::java_util_regex / "Pattern$BranchConn";
namespace java::util::regex { class Pattern$CIBackRef; }
template<> constexpr auto signature<::java::util::regex::Pattern$CIBackRef> = ::java_util_regex / "Pattern$CIBackRef";
namespace java::util::regex { class Pattern$Caret; }
template<> constexpr auto signature<::java::util::regex::Pattern$Caret> = ::java_util_regex / "Pattern$Caret";
namespace java::util::regex { class Pattern$Category; }
template<> constexpr auto signature<::java::util::regex::Pattern$Category> = ::java_util_regex / "Pattern$Category";
namespace java::util::regex { class Pattern$CharProperty; }
template<> constexpr auto signature<::java::util::regex::Pattern$CharProperty> = ::java_util_regex / "Pattern$CharProperty";
namespace java::util::regex { class Pattern$CharProperty$1; }
template<> constexpr auto signature<::java::util::regex::Pattern$CharProperty$1> = ::java_util_regex / "Pattern$CharProperty$1";
namespace java::util::regex { class Pattern$CharPropertyNames; }
template<> constexpr auto signature<::java::util::regex::Pattern$CharPropertyNames> = ::java_util_regex / "Pattern$CharPropertyNames";
namespace java::util::regex { class Pattern$CharPropertyNames$1; }
template<> constexpr auto signature<::java::util::regex::Pattern$CharPropertyNames$1> = ::java_util_regex / "Pattern$CharPropertyNames$1";
namespace java::util::regex { class Pattern$CharPropertyNames$10; }
template<> constexpr auto signature<::java::util::regex::Pattern$CharPropertyNames$10> = ::java_util_regex / "Pattern$CharPropertyNames$10";
namespace java::util::regex { class Pattern$CharPropertyNames$11; }
template<> constexpr auto signature<::java::util::regex::Pattern$CharPropertyNames$11> = ::java_util_regex / "Pattern$CharPropertyNames$11";
namespace java::util::regex { class Pattern$CharPropertyNames$12; }
template<> constexpr auto signature<::java::util::regex::Pattern$CharPropertyNames$12> = ::java_util_regex / "Pattern$CharPropertyNames$12";
namespace java::util::regex { class Pattern$CharPropertyNames$13; }
template<> constexpr auto signature<::java::util::regex::Pattern$CharPropertyNames$13> = ::java_util_regex / "Pattern$CharPropertyNames$13";
namespace java::util::regex { class Pattern$CharPropertyNames$14; }
template<> constexpr auto signature<::java::util::regex::Pattern$CharPropertyNames$14> = ::java_util_regex / "Pattern$CharPropertyNames$14";
namespace java::util::regex { class Pattern$CharPropertyNames$15; }
template<> constexpr auto signature<::java::util::regex::Pattern$CharPropertyNames$15> = ::java_util_regex / "Pattern$CharPropertyNames$15";
namespace java::util::regex { class Pattern$CharPropertyNames$16; }
template<> constexpr auto signature<::java::util::regex::Pattern$CharPropertyNames$16> = ::java_util_regex / "Pattern$CharPropertyNames$16";
namespace java::util::regex { class Pattern$CharPropertyNames$17; }
template<> constexpr auto signature<::java::util::regex::Pattern$CharPropertyNames$17> = ::java_util_regex / "Pattern$CharPropertyNames$17";
namespace java::util::regex { class Pattern$CharPropertyNames$18; }
template<> constexpr auto signature<::java::util::regex::Pattern$CharPropertyNames$18> = ::java_util_regex / "Pattern$CharPropertyNames$18";
namespace java::util::regex { class Pattern$CharPropertyNames$19; }
template<> constexpr auto signature<::java::util::regex::Pattern$CharPropertyNames$19> = ::java_util_regex / "Pattern$CharPropertyNames$19";
namespace java::util::regex { class Pattern$CharPropertyNames$2; }
template<> constexpr auto signature<::java::util::regex::Pattern$CharPropertyNames$2> = ::java_util_regex / "Pattern$CharPropertyNames$2";
namespace java::util::regex { class Pattern$CharPropertyNames$20; }
template<> constexpr auto signature<::java::util::regex::Pattern$CharPropertyNames$20> = ::java_util_regex / "Pattern$CharPropertyNames$20";
namespace java::util::regex { class Pattern$CharPropertyNames$21; }
template<> constexpr auto signature<::java::util::regex::Pattern$CharPropertyNames$21> = ::java_util_regex / "Pattern$CharPropertyNames$21";
namespace java::util::regex { class Pattern$CharPropertyNames$22; }
template<> constexpr auto signature<::java::util::regex::Pattern$CharPropertyNames$22> = ::java_util_regex / "Pattern$CharPropertyNames$22";
namespace java::util::regex { class Pattern$CharPropertyNames$23; }
template<> constexpr auto signature<::java::util::regex::Pattern$CharPropertyNames$23> = ::java_util_regex / "Pattern$CharPropertyNames$23";
namespace java::util::regex { class Pattern$CharPropertyNames$3; }
template<> constexpr auto signature<::java::util::regex::Pattern$CharPropertyNames$3> = ::java_util_regex / "Pattern$CharPropertyNames$3";
namespace java::util::regex { class Pattern$CharPropertyNames$4; }
template<> constexpr auto signature<::java::util::regex::Pattern$CharPropertyNames$4> = ::java_util_regex / "Pattern$CharPropertyNames$4";
namespace java::util::regex { class Pattern$CharPropertyNames$5; }
template<> constexpr auto signature<::java::util::regex::Pattern$CharPropertyNames$5> = ::java_util_regex / "Pattern$CharPropertyNames$5";
namespace java::util::regex { class Pattern$CharPropertyNames$6; }
template<> constexpr auto signature<::java::util::regex::Pattern$CharPropertyNames$6> = ::java_util_regex / "Pattern$CharPropertyNames$6";
namespace java::util::regex { class Pattern$CharPropertyNames$7; }
template<> constexpr auto signature<::java::util::regex::Pattern$CharPropertyNames$7> = ::java_util_regex / "Pattern$CharPropertyNames$7";
namespace java::util::regex { class Pattern$CharPropertyNames$8; }
template<> constexpr auto signature<::java::util::regex::Pattern$CharPropertyNames$8> = ::java_util_regex / "Pattern$CharPropertyNames$8";
namespace java::util::regex { class Pattern$CharPropertyNames$9; }
template<> constexpr auto signature<::java::util::regex::Pattern$CharPropertyNames$9> = ::java_util_regex / "Pattern$CharPropertyNames$9";
namespace java::util::regex { class Pattern$CharPropertyNames$CharPropertyFactory; }
template<> constexpr auto signature<::java::util::regex::Pattern$CharPropertyNames$CharPropertyFactory> = ::java_util_regex / "Pattern$CharPropertyNames$CharPropertyFactory";
namespace java::util::regex { class Pattern$CharPropertyNames$CloneableProperty; }
template<> constexpr auto signature<::java::util::regex::Pattern$CharPropertyNames$CloneableProperty> = ::java_util_regex / "Pattern$CharPropertyNames$CloneableProperty";
namespace java::util::regex { class Pattern$Conditional; }
template<> constexpr auto signature<::java::util::regex::Pattern$Conditional> = ::java_util_regex / "Pattern$Conditional";
namespace java::util::regex { class Pattern$Ctype; }
template<> constexpr auto signature<::java::util::regex::Pattern$Ctype> = ::java_util_regex / "Pattern$Ctype";
namespace java::util::regex { class Pattern$Curly; }
template<> constexpr auto signature<::java::util::regex::Pattern$Curly> = ::java_util_regex / "Pattern$Curly";
namespace java::util::regex { class Pattern$Dollar; }
template<> constexpr auto signature<::java::util::regex::Pattern$Dollar> = ::java_util_regex / "Pattern$Dollar";
namespace java::util::regex { class Pattern$Dot; }
template<> constexpr auto signature<::java::util::regex::Pattern$Dot> = ::java_util_regex / "Pattern$Dot";
namespace java::util::regex { class Pattern$End; }
template<> constexpr auto signature<::java::util::regex::Pattern$End> = ::java_util_regex / "Pattern$End";
namespace java::util::regex { class Pattern$First; }
template<> constexpr auto signature<::java::util::regex::Pattern$First> = ::java_util_regex / "Pattern$First";
namespace java::util::regex { class Pattern$GroupCurly; }
template<> constexpr auto signature<::java::util::regex::Pattern$GroupCurly> = ::java_util_regex / "Pattern$GroupCurly";
namespace java::util::regex { class Pattern$GroupHead; }
template<> constexpr auto signature<::java::util::regex::Pattern$GroupHead> = ::java_util_regex / "Pattern$GroupHead";
namespace java::util::regex { class Pattern$GroupRef; }
template<> constexpr auto signature<::java::util::regex::Pattern$GroupRef> = ::java_util_regex / "Pattern$GroupRef";
namespace java::util::regex { class Pattern$GroupTail; }
template<> constexpr auto signature<::java::util::regex::Pattern$GroupTail> = ::java_util_regex / "Pattern$GroupTail";
namespace java::util::regex { class Pattern$HorizWS; }
template<> constexpr auto signature<::java::util::regex::Pattern$HorizWS> = ::java_util_regex / "Pattern$HorizWS";
namespace java::util::regex { class Pattern$LastMatch; }
template<> constexpr auto signature<::java::util::regex::Pattern$LastMatch> = ::java_util_regex / "Pattern$LastMatch";
namespace java::util::regex { class Pattern$LastNode; }
template<> constexpr auto signature<::java::util::regex::Pattern$LastNode> = ::java_util_regex / "Pattern$LastNode";
namespace java::util::regex { class Pattern$LazyLoop; }
template<> constexpr auto signature<::java::util::regex::Pattern$LazyLoop> = ::java_util_regex / "Pattern$LazyLoop";
namespace java::util::regex { class Pattern$LineEnding; }
template<> constexpr auto signature<::java::util::regex::Pattern$LineEnding> = ::java_util_regex / "Pattern$LineEnding";
namespace java::util::regex { class Pattern$Loop; }
template<> constexpr auto signature<::java::util::regex::Pattern$Loop> = ::java_util_regex / "Pattern$Loop";
namespace java::util::regex { class Pattern$Neg; }
template<> constexpr auto signature<::java::util::regex::Pattern$Neg> = ::java_util_regex / "Pattern$Neg";
namespace java::util::regex { class Pattern$Node; }
template<> constexpr auto signature<::java::util::regex::Pattern$Node> = ::java_util_regex / "Pattern$Node";
namespace java::util::regex { class Pattern$NotBehind; }
template<> constexpr auto signature<::java::util::regex::Pattern$NotBehind> = ::java_util_regex / "Pattern$NotBehind";
namespace java::util::regex { class Pattern$NotBehindS; }
template<> constexpr auto signature<::java::util::regex::Pattern$NotBehindS> = ::java_util_regex / "Pattern$NotBehindS";
namespace java::util::regex { class Pattern$Pos; }
template<> constexpr auto signature<::java::util::regex::Pattern$Pos> = ::java_util_regex / "Pattern$Pos";
namespace java::util::regex { class Pattern$Prolog; }
template<> constexpr auto signature<::java::util::regex::Pattern$Prolog> = ::java_util_regex / "Pattern$Prolog";
namespace java::util::regex { class Pattern$Ques; }
template<> constexpr auto signature<::java::util::regex::Pattern$Ques> = ::java_util_regex / "Pattern$Ques";
namespace java::util::regex { class Pattern$Script; }
template<> constexpr auto signature<::java::util::regex::Pattern$Script> = ::java_util_regex / "Pattern$Script";
namespace java::util::regex { class Pattern$Single; }
template<> constexpr auto signature<::java::util::regex::Pattern$Single> = ::java_util_regex / "Pattern$Single";
namespace java::util::regex { class Pattern$SingleI; }
template<> constexpr auto signature<::java::util::regex::Pattern$SingleI> = ::java_util_regex / "Pattern$SingleI";
namespace java::util::regex { class Pattern$SingleS; }
template<> constexpr auto signature<::java::util::regex::Pattern$SingleS> = ::java_util_regex / "Pattern$SingleS";
namespace java::util::regex { class Pattern$SingleU; }
template<> constexpr auto signature<::java::util::regex::Pattern$SingleU> = ::java_util_regex / "Pattern$SingleU";
namespace java::util::regex { class Pattern$Slice; }
template<> constexpr auto signature<::java::util::regex::Pattern$Slice> = ::java_util_regex / "Pattern$Slice";
namespace java::util::regex { class Pattern$SliceI; }
template<> constexpr auto signature<::java::util::regex::Pattern$SliceI> = ::java_util_regex / "Pattern$SliceI";
namespace java::util::regex { class Pattern$SliceIS; }
template<> constexpr auto signature<::java::util::regex::Pattern$SliceIS> = ::java_util_regex / "Pattern$SliceIS";
namespace java::util::regex { class Pattern$SliceNode; }
template<> constexpr auto signature<::java::util::regex::Pattern$SliceNode> = ::java_util_regex / "Pattern$SliceNode";
namespace java::util::regex { class Pattern$SliceS; }
template<> constexpr auto signature<::java::util::regex::Pattern$SliceS> = ::java_util_regex / "Pattern$SliceS";
namespace java::util::regex { class Pattern$SliceU; }
template<> constexpr auto signature<::java::util::regex::Pattern$SliceU> = ::java_util_regex / "Pattern$SliceU";
namespace java::util::regex { class Pattern$SliceUS; }
template<> constexpr auto signature<::java::util::regex::Pattern$SliceUS> = ::java_util_regex / "Pattern$SliceUS";
namespace java::util::regex { class Pattern$Start; }
template<> constexpr auto signature<::java::util::regex::Pattern$Start> = ::java_util_regex / "Pattern$Start";
namespace java::util::regex { class Pattern$StartS; }
template<> constexpr auto signature<::java::util::regex::Pattern$StartS> = ::java_util_regex / "Pattern$StartS";
namespace java::util::regex { class Pattern$TreeInfo; }
template<> constexpr auto signature<::java::util::regex::Pattern$TreeInfo> = ::java_util_regex / "Pattern$TreeInfo";
namespace java::util::regex { class Pattern$UnixCaret; }
template<> constexpr auto signature<::java::util::regex::Pattern$UnixCaret> = ::java_util_regex / "Pattern$UnixCaret";
namespace java::util::regex { class Pattern$UnixDollar; }
template<> constexpr auto signature<::java::util::regex::Pattern$UnixDollar> = ::java_util_regex / "Pattern$UnixDollar";
namespace java::util::regex { class Pattern$UnixDot; }
template<> constexpr auto signature<::java::util::regex::Pattern$UnixDot> = ::java_util_regex / "Pattern$UnixDot";
namespace java::util::regex { class Pattern$Utype; }
template<> constexpr auto signature<::java::util::regex::Pattern$Utype> = ::java_util_regex / "Pattern$Utype";
namespace java::util::regex { class Pattern$VertWS; }
template<> constexpr auto signature<::java::util::regex::Pattern$VertWS> = ::java_util_regex / "Pattern$VertWS";
namespace java::util::regex { class PatternSyntaxException; }
template<> constexpr auto signature<::java::util::regex::PatternSyntaxException> = ::java_util_regex / "PatternSyntaxException";
namespace java::util::regex { class UnicodeProp; }
template<> constexpr auto signature<::java::util::regex::UnicodeProp> = ::java_util_regex / "UnicodeProp";
namespace java::util::regex { class UnicodeProp$1; }
template<> constexpr auto signature<::java::util::regex::UnicodeProp$1> = ::java_util_regex / "UnicodeProp$1";
namespace java::util::regex { class UnicodeProp$10; }
template<> constexpr auto signature<::java::util::regex::UnicodeProp$10> = ::java_util_regex / "UnicodeProp$10";
namespace java::util::regex { class UnicodeProp$11; }
template<> constexpr auto signature<::java::util::regex::UnicodeProp$11> = ::java_util_regex / "UnicodeProp$11";
namespace java::util::regex { class UnicodeProp$12; }
template<> constexpr auto signature<::java::util::regex::UnicodeProp$12> = ::java_util_regex / "UnicodeProp$12";
namespace java::util::regex { class UnicodeProp$13; }
template<> constexpr auto signature<::java::util::regex::UnicodeProp$13> = ::java_util_regex / "UnicodeProp$13";
namespace java::util::regex { class UnicodeProp$14; }
template<> constexpr auto signature<::java::util::regex::UnicodeProp$14> = ::java_util_regex / "UnicodeProp$14";
namespace java::util::regex { class UnicodeProp$15; }
template<> constexpr auto signature<::java::util::regex::UnicodeProp$15> = ::java_util_regex / "UnicodeProp$15";
namespace java::util::regex { class UnicodeProp$16; }
template<> constexpr auto signature<::java::util::regex::UnicodeProp$16> = ::java_util_regex / "UnicodeProp$16";
namespace java::util::regex { class UnicodeProp$17; }
template<> constexpr auto signature<::java::util::regex::UnicodeProp$17> = ::java_util_regex / "UnicodeProp$17";
namespace java::util::regex { class UnicodeProp$18; }
template<> constexpr auto signature<::java::util::regex::UnicodeProp$18> = ::java_util_regex / "UnicodeProp$18";
namespace java::util::regex { class UnicodeProp$19; }
template<> constexpr auto signature<::java::util::regex::UnicodeProp$19> = ::java_util_regex / "UnicodeProp$19";
namespace java::util::regex { class UnicodeProp$2; }
template<> constexpr auto signature<::java::util::regex::UnicodeProp$2> = ::java_util_regex / "UnicodeProp$2";
namespace java::util::regex { class UnicodeProp$3; }
template<> constexpr auto signature<::java::util::regex::UnicodeProp$3> = ::java_util_regex / "UnicodeProp$3";
namespace java::util::regex { class UnicodeProp$4; }
template<> constexpr auto signature<::java::util::regex::UnicodeProp$4> = ::java_util_regex / "UnicodeProp$4";
namespace java::util::regex { class UnicodeProp$5; }
template<> constexpr auto signature<::java::util::regex::UnicodeProp$5> = ::java_util_regex / "UnicodeProp$5";
namespace java::util::regex { class UnicodeProp$6; }
template<> constexpr auto signature<::java::util::regex::UnicodeProp$6> = ::java_util_regex / "UnicodeProp$6";
namespace java::util::regex { class UnicodeProp$7; }
template<> constexpr auto signature<::java::util::regex::UnicodeProp$7> = ::java_util_regex / "UnicodeProp$7";
namespace java::util::regex { class UnicodeProp$8; }
template<> constexpr auto signature<::java::util::regex::UnicodeProp$8> = ::java_util_regex / "UnicodeProp$8";
namespace java::util::regex { class UnicodeProp$9; }
template<> constexpr auto signature<::java::util::regex::UnicodeProp$9> = ::java_util_regex / "UnicodeProp$9";
namespace java::util::spi { class CalendarDataProvider; }
template<> constexpr auto signature<::java::util::spi::CalendarDataProvider> = ::java_util_spi / "CalendarDataProvider";
namespace java::util::spi { class CalendarNameProvider; }
template<> constexpr auto signature<::java::util::spi::CalendarNameProvider> = ::java_util_spi / "CalendarNameProvider";
namespace java::util::spi { class CurrencyNameProvider; }
template<> constexpr auto signature<::java::util::spi::CurrencyNameProvider> = ::java_util_spi / "CurrencyNameProvider";
namespace java::util::spi { class LocaleNameProvider; }
template<> constexpr auto signature<::java::util::spi::LocaleNameProvider> = ::java_util_spi / "LocaleNameProvider";
namespace java::util::spi { class LocaleServiceProvider; }
template<> constexpr auto signature<::java::util::spi::LocaleServiceProvider> = ::java_util_spi / "LocaleServiceProvider";
namespace java::util::spi { class ResourceBundleControlProvider; }
template<> constexpr auto signature<::java::util::spi::ResourceBundleControlProvider> = ::java_util_spi / "ResourceBundleControlProvider";
namespace java::util::spi { class TimeZoneNameProvider; }
template<> constexpr auto signature<::java::util::spi::TimeZoneNameProvider> = ::java_util_spi / "TimeZoneNameProvider";
namespace java::util::stream { class AbstractPipeline; }
template<> constexpr auto signature<::java::util::stream::AbstractPipeline> = ::java_util_stream / "AbstractPipeline";
namespace java::util::stream { class AbstractShortCircuitTask; }
template<> constexpr auto signature<::java::util::stream::AbstractShortCircuitTask> = ::java_util_stream / "AbstractShortCircuitTask";
namespace java::util::stream { class AbstractSpinedBuffer; }
template<> constexpr auto signature<::java::util::stream::AbstractSpinedBuffer> = ::java_util_stream / "AbstractSpinedBuffer";
namespace java::util::stream { class AbstractTask; }
template<> constexpr auto signature<::java::util::stream::AbstractTask> = ::java_util_stream / "AbstractTask";
namespace java::util::stream { class BaseStream; }
template<> constexpr auto signature<::java::util::stream::BaseStream> = ::java_util_stream / "BaseStream";
namespace java::util::stream { class Collector; }
template<> constexpr auto signature<::java::util::stream::Collector> = ::java_util_stream / "Collector";
namespace java::util::stream { class Collector$Characteristics; }
template<> constexpr auto signature<::java::util::stream::Collector$Characteristics> = ::java_util_stream / "Collector$Characteristics";
namespace java::util::stream { class Collectors; }
template<> constexpr auto signature<::java::util::stream::Collectors> = ::java_util_stream / "Collectors";
namespace java::util::stream { class Collectors$1OptionalBox; }
template<> constexpr auto signature<::java::util::stream::Collectors$1OptionalBox> = ::java_util_stream / "Collectors$1OptionalBox";
namespace java::util::stream { class Collectors$CollectorImpl; }
template<> constexpr auto signature<::java::util::stream::Collectors$CollectorImpl> = ::java_util_stream / "Collectors$CollectorImpl";
namespace java::util::stream { class Collectors$Partition; }
template<> constexpr auto signature<::java::util::stream::Collectors$Partition> = ::java_util_stream / "Collectors$Partition";
namespace java::util::stream { class Collectors$Partition$1; }
template<> constexpr auto signature<::java::util::stream::Collectors$Partition$1> = ::java_util_stream / "Collectors$Partition$1";
namespace java::util::stream { class DistinctOps; }
template<> constexpr auto signature<::java::util::stream::DistinctOps> = ::java_util_stream / "DistinctOps";
namespace java::util::stream { class DistinctOps$1; }
template<> constexpr auto signature<::java::util::stream::DistinctOps$1> = ::java_util_stream / "DistinctOps$1";
namespace java::util::stream { class DistinctOps$1$1; }
template<> constexpr auto signature<::java::util::stream::DistinctOps$1$1> = ::java_util_stream / "DistinctOps$1$1";
namespace java::util::stream { class DistinctOps$1$2; }
template<> constexpr auto signature<::java::util::stream::DistinctOps$1$2> = ::java_util_stream / "DistinctOps$1$2";
namespace java::util::stream { class DoublePipeline; }
template<> constexpr auto signature<::java::util::stream::DoublePipeline> = ::java_util_stream / "DoublePipeline";
namespace java::util::stream { class DoublePipeline$1; }
template<> constexpr auto signature<::java::util::stream::DoublePipeline$1> = ::java_util_stream / "DoublePipeline$1";
namespace java::util::stream { class DoublePipeline$1$1; }
template<> constexpr auto signature<::java::util::stream::DoublePipeline$1$1> = ::java_util_stream / "DoublePipeline$1$1";
namespace java::util::stream { class DoublePipeline$2; }
template<> constexpr auto signature<::java::util::stream::DoublePipeline$2> = ::java_util_stream / "DoublePipeline$2";
namespace java::util::stream { class DoublePipeline$2$1; }
template<> constexpr auto signature<::java::util::stream::DoublePipeline$2$1> = ::java_util_stream / "DoublePipeline$2$1";
namespace java::util::stream { class DoublePipeline$3; }
template<> constexpr auto signature<::java::util::stream::DoublePipeline$3> = ::java_util_stream / "DoublePipeline$3";
namespace java::util::stream { class DoublePipeline$3$1; }
template<> constexpr auto signature<::java::util::stream::DoublePipeline$3$1> = ::java_util_stream / "DoublePipeline$3$1";
namespace java::util::stream { class DoublePipeline$4; }
template<> constexpr auto signature<::java::util::stream::DoublePipeline$4> = ::java_util_stream / "DoublePipeline$4";
namespace java::util::stream { class DoublePipeline$4$1; }
template<> constexpr auto signature<::java::util::stream::DoublePipeline$4$1> = ::java_util_stream / "DoublePipeline$4$1";
namespace java::util::stream { class DoublePipeline$5; }
template<> constexpr auto signature<::java::util::stream::DoublePipeline$5> = ::java_util_stream / "DoublePipeline$5";
namespace java::util::stream { class DoublePipeline$5$1; }
template<> constexpr auto signature<::java::util::stream::DoublePipeline$5$1> = ::java_util_stream / "DoublePipeline$5$1";
namespace java::util::stream { class DoublePipeline$6; }
template<> constexpr auto signature<::java::util::stream::DoublePipeline$6> = ::java_util_stream / "DoublePipeline$6";
namespace java::util::stream { class DoublePipeline$7; }
template<> constexpr auto signature<::java::util::stream::DoublePipeline$7> = ::java_util_stream / "DoublePipeline$7";
namespace java::util::stream { class DoublePipeline$7$1; }
template<> constexpr auto signature<::java::util::stream::DoublePipeline$7$1> = ::java_util_stream / "DoublePipeline$7$1";
namespace java::util::stream { class DoublePipeline$8; }
template<> constexpr auto signature<::java::util::stream::DoublePipeline$8> = ::java_util_stream / "DoublePipeline$8";
namespace java::util::stream { class DoublePipeline$8$1; }
template<> constexpr auto signature<::java::util::stream::DoublePipeline$8$1> = ::java_util_stream / "DoublePipeline$8$1";
namespace java::util::stream { class DoublePipeline$Head; }
template<> constexpr auto signature<::java::util::stream::DoublePipeline$Head> = ::java_util_stream / "DoublePipeline$Head";
namespace java::util::stream { class DoublePipeline$StatefulOp; }
template<> constexpr auto signature<::java::util::stream::DoublePipeline$StatefulOp> = ::java_util_stream / "DoublePipeline$StatefulOp";
namespace java::util::stream { class DoublePipeline$StatelessOp; }
template<> constexpr auto signature<::java::util::stream::DoublePipeline$StatelessOp> = ::java_util_stream / "DoublePipeline$StatelessOp";
namespace java::util::stream { class DoubleStream; }
template<> constexpr auto signature<::java::util::stream::DoubleStream> = ::java_util_stream / "DoubleStream";
namespace java::util::stream { class DoubleStream$1; }
template<> constexpr auto signature<::java::util::stream::DoubleStream$1> = ::java_util_stream / "DoubleStream$1";
namespace java::util::stream { class DoubleStream$Builder; }
template<> constexpr auto signature<::java::util::stream::DoubleStream$Builder> = ::java_util_stream / "DoubleStream$Builder";
namespace java::util::stream { class FindOps; }
template<> constexpr auto signature<::java::util::stream::FindOps> = ::java_util_stream / "FindOps";
namespace java::util::stream { class FindOps$FindOp; }
template<> constexpr auto signature<::java::util::stream::FindOps$FindOp> = ::java_util_stream / "FindOps$FindOp";
namespace java::util::stream { class FindOps$FindSink; }
template<> constexpr auto signature<::java::util::stream::FindOps$FindSink> = ::java_util_stream / "FindOps$FindSink";
namespace java::util::stream { class FindOps$FindSink$OfDouble; }
template<> constexpr auto signature<::java::util::stream::FindOps$FindSink$OfDouble> = ::java_util_stream / "FindOps$FindSink$OfDouble";
namespace java::util::stream { class FindOps$FindSink$OfInt; }
template<> constexpr auto signature<::java::util::stream::FindOps$FindSink$OfInt> = ::java_util_stream / "FindOps$FindSink$OfInt";
namespace java::util::stream { class FindOps$FindSink$OfLong; }
template<> constexpr auto signature<::java::util::stream::FindOps$FindSink$OfLong> = ::java_util_stream / "FindOps$FindSink$OfLong";
namespace java::util::stream { class FindOps$FindSink$OfRef; }
template<> constexpr auto signature<::java::util::stream::FindOps$FindSink$OfRef> = ::java_util_stream / "FindOps$FindSink$OfRef";
namespace java::util::stream { class FindOps$FindTask; }
template<> constexpr auto signature<::java::util::stream::FindOps$FindTask> = ::java_util_stream / "FindOps$FindTask";
namespace java::util::stream { class ForEachOps; }
template<> constexpr auto signature<::java::util::stream::ForEachOps> = ::java_util_stream / "ForEachOps";
namespace java::util::stream { class ForEachOps$ForEachOp; }
template<> constexpr auto signature<::java::util::stream::ForEachOps$ForEachOp> = ::java_util_stream / "ForEachOps$ForEachOp";
namespace java::util::stream { class ForEachOps$ForEachOp$OfDouble; }
template<> constexpr auto signature<::java::util::stream::ForEachOps$ForEachOp$OfDouble> = ::java_util_stream / "ForEachOps$ForEachOp$OfDouble";
namespace java::util::stream { class ForEachOps$ForEachOp$OfInt; }
template<> constexpr auto signature<::java::util::stream::ForEachOps$ForEachOp$OfInt> = ::java_util_stream / "ForEachOps$ForEachOp$OfInt";
namespace java::util::stream { class ForEachOps$ForEachOp$OfLong; }
template<> constexpr auto signature<::java::util::stream::ForEachOps$ForEachOp$OfLong> = ::java_util_stream / "ForEachOps$ForEachOp$OfLong";
namespace java::util::stream { class ForEachOps$ForEachOp$OfRef; }
template<> constexpr auto signature<::java::util::stream::ForEachOps$ForEachOp$OfRef> = ::java_util_stream / "ForEachOps$ForEachOp$OfRef";
namespace java::util::stream { class ForEachOps$ForEachOrderedTask; }
template<> constexpr auto signature<::java::util::stream::ForEachOps$ForEachOrderedTask> = ::java_util_stream / "ForEachOps$ForEachOrderedTask";
namespace java::util::stream { class ForEachOps$ForEachTask; }
template<> constexpr auto signature<::java::util::stream::ForEachOps$ForEachTask> = ::java_util_stream / "ForEachOps$ForEachTask";
namespace java::util::stream { class IntPipeline; }
template<> constexpr auto signature<::java::util::stream::IntPipeline> = ::java_util_stream / "IntPipeline";
namespace java::util::stream { class IntPipeline$1; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$1> = ::java_util_stream / "IntPipeline$1";
namespace java::util::stream { class IntPipeline$1$1; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$1$1> = ::java_util_stream / "IntPipeline$1$1";
namespace java::util::stream { class IntPipeline$10; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$10> = ::java_util_stream / "IntPipeline$10";
namespace java::util::stream { class IntPipeline$10$1; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$10$1> = ::java_util_stream / "IntPipeline$10$1";
namespace java::util::stream { class IntPipeline$2; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$2> = ::java_util_stream / "IntPipeline$2";
namespace java::util::stream { class IntPipeline$2$1; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$2$1> = ::java_util_stream / "IntPipeline$2$1";
namespace java::util::stream { class IntPipeline$3; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$3> = ::java_util_stream / "IntPipeline$3";
namespace java::util::stream { class IntPipeline$3$1; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$3$1> = ::java_util_stream / "IntPipeline$3$1";
namespace java::util::stream { class IntPipeline$4; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$4> = ::java_util_stream / "IntPipeline$4";
namespace java::util::stream { class IntPipeline$4$1; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$4$1> = ::java_util_stream / "IntPipeline$4$1";
namespace java::util::stream { class IntPipeline$5; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$5> = ::java_util_stream / "IntPipeline$5";
namespace java::util::stream { class IntPipeline$5$1; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$5$1> = ::java_util_stream / "IntPipeline$5$1";
namespace java::util::stream { class IntPipeline$6; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$6> = ::java_util_stream / "IntPipeline$6";
namespace java::util::stream { class IntPipeline$6$1; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$6$1> = ::java_util_stream / "IntPipeline$6$1";
namespace java::util::stream { class IntPipeline$7; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$7> = ::java_util_stream / "IntPipeline$7";
namespace java::util::stream { class IntPipeline$7$1; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$7$1> = ::java_util_stream / "IntPipeline$7$1";
namespace java::util::stream { class IntPipeline$8; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$8> = ::java_util_stream / "IntPipeline$8";
namespace java::util::stream { class IntPipeline$9; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$9> = ::java_util_stream / "IntPipeline$9";
namespace java::util::stream { class IntPipeline$9$1; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$9$1> = ::java_util_stream / "IntPipeline$9$1";
namespace java::util::stream { class IntPipeline$Head; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$Head> = ::java_util_stream / "IntPipeline$Head";
namespace java::util::stream { class IntPipeline$StatefulOp; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$StatefulOp> = ::java_util_stream / "IntPipeline$StatefulOp";
namespace java::util::stream { class IntPipeline$StatelessOp; }
template<> constexpr auto signature<::java::util::stream::IntPipeline$StatelessOp> = ::java_util_stream / "IntPipeline$StatelessOp";
namespace java::util::stream { class IntStream; }
template<> constexpr auto signature<::java::util::stream::IntStream> = ::java_util_stream / "IntStream";
namespace java::util::stream { class IntStream$1; }
template<> constexpr auto signature<::java::util::stream::IntStream$1> = ::java_util_stream / "IntStream$1";
namespace java::util::stream { class IntStream$Builder; }
template<> constexpr auto signature<::java::util::stream::IntStream$Builder> = ::java_util_stream / "IntStream$Builder";
namespace java::util::stream { class LongPipeline; }
template<> constexpr auto signature<::java::util::stream::LongPipeline> = ::java_util_stream / "LongPipeline";
namespace java::util::stream { class LongPipeline$1; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$1> = ::java_util_stream / "LongPipeline$1";
namespace java::util::stream { class LongPipeline$1$1; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$1$1> = ::java_util_stream / "LongPipeline$1$1";
namespace java::util::stream { class LongPipeline$2; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$2> = ::java_util_stream / "LongPipeline$2";
namespace java::util::stream { class LongPipeline$2$1; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$2$1> = ::java_util_stream / "LongPipeline$2$1";
namespace java::util::stream { class LongPipeline$3; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$3> = ::java_util_stream / "LongPipeline$3";
namespace java::util::stream { class LongPipeline$3$1; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$3$1> = ::java_util_stream / "LongPipeline$3$1";
namespace java::util::stream { class LongPipeline$4; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$4> = ::java_util_stream / "LongPipeline$4";
namespace java::util::stream { class LongPipeline$4$1; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$4$1> = ::java_util_stream / "LongPipeline$4$1";
namespace java::util::stream { class LongPipeline$5; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$5> = ::java_util_stream / "LongPipeline$5";
namespace java::util::stream { class LongPipeline$5$1; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$5$1> = ::java_util_stream / "LongPipeline$5$1";
namespace java::util::stream { class LongPipeline$6; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$6> = ::java_util_stream / "LongPipeline$6";
namespace java::util::stream { class LongPipeline$6$1; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$6$1> = ::java_util_stream / "LongPipeline$6$1";
namespace java::util::stream { class LongPipeline$7; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$7> = ::java_util_stream / "LongPipeline$7";
namespace java::util::stream { class LongPipeline$8; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$8> = ::java_util_stream / "LongPipeline$8";
namespace java::util::stream { class LongPipeline$8$1; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$8$1> = ::java_util_stream / "LongPipeline$8$1";
namespace java::util::stream { class LongPipeline$9; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$9> = ::java_util_stream / "LongPipeline$9";
namespace java::util::stream { class LongPipeline$9$1; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$9$1> = ::java_util_stream / "LongPipeline$9$1";
namespace java::util::stream { class LongPipeline$Head; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$Head> = ::java_util_stream / "LongPipeline$Head";
namespace java::util::stream { class LongPipeline$StatefulOp; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$StatefulOp> = ::java_util_stream / "LongPipeline$StatefulOp";
namespace java::util::stream { class LongPipeline$StatelessOp; }
template<> constexpr auto signature<::java::util::stream::LongPipeline$StatelessOp> = ::java_util_stream / "LongPipeline$StatelessOp";
namespace java::util::stream { class LongStream; }
template<> constexpr auto signature<::java::util::stream::LongStream> = ::java_util_stream / "LongStream";
namespace java::util::stream { class LongStream$1; }
template<> constexpr auto signature<::java::util::stream::LongStream$1> = ::java_util_stream / "LongStream$1";
namespace java::util::stream { class LongStream$Builder; }
template<> constexpr auto signature<::java::util::stream::LongStream$Builder> = ::java_util_stream / "LongStream$Builder";
namespace java::util::stream { class MatchOps; }
template<> constexpr auto signature<::java::util::stream::MatchOps> = ::java_util_stream / "MatchOps";
namespace java::util::stream { class MatchOps$1MatchSink; }
template<> constexpr auto signature<::java::util::stream::MatchOps$1MatchSink> = ::java_util_stream / "MatchOps$1MatchSink";
namespace java::util::stream { class MatchOps$2MatchSink; }
template<> constexpr auto signature<::java::util::stream::MatchOps$2MatchSink> = ::java_util_stream / "MatchOps$2MatchSink";
namespace java::util::stream { class MatchOps$3MatchSink; }
template<> constexpr auto signature<::java::util::stream::MatchOps$3MatchSink> = ::java_util_stream / "MatchOps$3MatchSink";
namespace java::util::stream { class MatchOps$4MatchSink; }
template<> constexpr auto signature<::java::util::stream::MatchOps$4MatchSink> = ::java_util_stream / "MatchOps$4MatchSink";
namespace java::util::stream { class MatchOps$BooleanTerminalSink; }
template<> constexpr auto signature<::java::util::stream::MatchOps$BooleanTerminalSink> = ::java_util_stream / "MatchOps$BooleanTerminalSink";
namespace java::util::stream { class MatchOps$MatchKind; }
template<> constexpr auto signature<::java::util::stream::MatchOps$MatchKind> = ::java_util_stream / "MatchOps$MatchKind";
namespace java::util::stream { class MatchOps$MatchOp; }
template<> constexpr auto signature<::java::util::stream::MatchOps$MatchOp> = ::java_util_stream / "MatchOps$MatchOp";
namespace java::util::stream { class MatchOps$MatchTask; }
template<> constexpr auto signature<::java::util::stream::MatchOps$MatchTask> = ::java_util_stream / "MatchOps$MatchTask";
namespace java::util::stream { class Node; }
template<> constexpr auto signature<::java::util::stream::Node> = ::java_util_stream / "Node";
namespace java::util::stream { class Node$Builder; }
template<> constexpr auto signature<::java::util::stream::Node$Builder> = ::java_util_stream / "Node$Builder";
namespace java::util::stream { class Node$Builder$OfDouble; }
template<> constexpr auto signature<::java::util::stream::Node$Builder$OfDouble> = ::java_util_stream / "Node$Builder$OfDouble";
namespace java::util::stream { class Node$Builder$OfInt; }
template<> constexpr auto signature<::java::util::stream::Node$Builder$OfInt> = ::java_util_stream / "Node$Builder$OfInt";
namespace java::util::stream { class Node$Builder$OfLong; }
template<> constexpr auto signature<::java::util::stream::Node$Builder$OfLong> = ::java_util_stream / "Node$Builder$OfLong";
namespace java::util::stream { class Node$OfDouble; }
template<> constexpr auto signature<::java::util::stream::Node$OfDouble> = ::java_util_stream / "Node$OfDouble";
namespace java::util::stream { class Node$OfInt; }
template<> constexpr auto signature<::java::util::stream::Node$OfInt> = ::java_util_stream / "Node$OfInt";
namespace java::util::stream { class Node$OfLong; }
template<> constexpr auto signature<::java::util::stream::Node$OfLong> = ::java_util_stream / "Node$OfLong";
namespace java::util::stream { class Node$OfPrimitive; }
template<> constexpr auto signature<::java::util::stream::Node$OfPrimitive> = ::java_util_stream / "Node$OfPrimitive";
namespace java::util::stream { class Nodes; }
template<> constexpr auto signature<::java::util::stream::Nodes> = ::java_util_stream / "Nodes";
namespace java::util::stream { class Nodes$1; }
template<> constexpr auto signature<::java::util::stream::Nodes$1> = ::java_util_stream / "Nodes$1";
namespace java::util::stream { class Nodes$AbstractConcNode; }
template<> constexpr auto signature<::java::util::stream::Nodes$AbstractConcNode> = ::java_util_stream / "Nodes$AbstractConcNode";
namespace java::util::stream { class Nodes$ArrayNode; }
template<> constexpr auto signature<::java::util::stream::Nodes$ArrayNode> = ::java_util_stream / "Nodes$ArrayNode";
namespace java::util::stream { class Nodes$CollectionNode; }
template<> constexpr auto signature<::java::util::stream::Nodes$CollectionNode> = ::java_util_stream / "Nodes$CollectionNode";
namespace java::util::stream { class Nodes$CollectorTask; }
template<> constexpr auto signature<::java::util::stream::Nodes$CollectorTask> = ::java_util_stream / "Nodes$CollectorTask";
namespace java::util::stream { class Nodes$CollectorTask$OfDouble; }
template<> constexpr auto signature<::java::util::stream::Nodes$CollectorTask$OfDouble> = ::java_util_stream / "Nodes$CollectorTask$OfDouble";
namespace java::util::stream { class Nodes$CollectorTask$OfInt; }
template<> constexpr auto signature<::java::util::stream::Nodes$CollectorTask$OfInt> = ::java_util_stream / "Nodes$CollectorTask$OfInt";
namespace java::util::stream { class Nodes$CollectorTask$OfLong; }
template<> constexpr auto signature<::java::util::stream::Nodes$CollectorTask$OfLong> = ::java_util_stream / "Nodes$CollectorTask$OfLong";
namespace java::util::stream { class Nodes$CollectorTask$OfRef; }
template<> constexpr auto signature<::java::util::stream::Nodes$CollectorTask$OfRef> = ::java_util_stream / "Nodes$CollectorTask$OfRef";
namespace java::util::stream { class Nodes$ConcNode; }
template<> constexpr auto signature<::java::util::stream::Nodes$ConcNode> = ::java_util_stream / "Nodes$ConcNode";
namespace java::util::stream { class Nodes$ConcNode$OfDouble; }
template<> constexpr auto signature<::java::util::stream::Nodes$ConcNode$OfDouble> = ::java_util_stream / "Nodes$ConcNode$OfDouble";
namespace java::util::stream { class Nodes$ConcNode$OfInt; }
template<> constexpr auto signature<::java::util::stream::Nodes$ConcNode$OfInt> = ::java_util_stream / "Nodes$ConcNode$OfInt";
namespace java::util::stream { class Nodes$ConcNode$OfLong; }
template<> constexpr auto signature<::java::util::stream::Nodes$ConcNode$OfLong> = ::java_util_stream / "Nodes$ConcNode$OfLong";
namespace java::util::stream { class Nodes$ConcNode$OfPrimitive; }
template<> constexpr auto signature<::java::util::stream::Nodes$ConcNode$OfPrimitive> = ::java_util_stream / "Nodes$ConcNode$OfPrimitive";
namespace java::util::stream { class Nodes$DoubleArrayNode; }
template<> constexpr auto signature<::java::util::stream::Nodes$DoubleArrayNode> = ::java_util_stream / "Nodes$DoubleArrayNode";
namespace java::util::stream { class Nodes$DoubleFixedNodeBuilder; }
template<> constexpr auto signature<::java::util::stream::Nodes$DoubleFixedNodeBuilder> = ::java_util_stream / "Nodes$DoubleFixedNodeBuilder";
namespace java::util::stream { class Nodes$DoubleSpinedNodeBuilder; }
template<> constexpr auto signature<::java::util::stream::Nodes$DoubleSpinedNodeBuilder> = ::java_util_stream / "Nodes$DoubleSpinedNodeBuilder";
namespace java::util::stream { class Nodes$EmptyNode; }
template<> constexpr auto signature<::java::util::stream::Nodes$EmptyNode> = ::java_util_stream / "Nodes$EmptyNode";
namespace java::util::stream { class Nodes$EmptyNode$OfDouble; }
template<> constexpr auto signature<::java::util::stream::Nodes$EmptyNode$OfDouble> = ::java_util_stream / "Nodes$EmptyNode$OfDouble";
namespace java::util::stream { class Nodes$EmptyNode$OfInt; }
template<> constexpr auto signature<::java::util::stream::Nodes$EmptyNode$OfInt> = ::java_util_stream / "Nodes$EmptyNode$OfInt";
namespace java::util::stream { class Nodes$EmptyNode$OfLong; }
template<> constexpr auto signature<::java::util::stream::Nodes$EmptyNode$OfLong> = ::java_util_stream / "Nodes$EmptyNode$OfLong";
namespace java::util::stream { class Nodes$EmptyNode$OfRef; }
template<> constexpr auto signature<::java::util::stream::Nodes$EmptyNode$OfRef> = ::java_util_stream / "Nodes$EmptyNode$OfRef";
namespace java::util::stream { class Nodes$FixedNodeBuilder; }
template<> constexpr auto signature<::java::util::stream::Nodes$FixedNodeBuilder> = ::java_util_stream / "Nodes$FixedNodeBuilder";
namespace java::util::stream { class Nodes$IntArrayNode; }
template<> constexpr auto signature<::java::util::stream::Nodes$IntArrayNode> = ::java_util_stream / "Nodes$IntArrayNode";
namespace java::util::stream { class Nodes$IntFixedNodeBuilder; }
template<> constexpr auto signature<::java::util::stream::Nodes$IntFixedNodeBuilder> = ::java_util_stream / "Nodes$IntFixedNodeBuilder";
namespace java::util::stream { class Nodes$IntSpinedNodeBuilder; }
template<> constexpr auto signature<::java::util::stream::Nodes$IntSpinedNodeBuilder> = ::java_util_stream / "Nodes$IntSpinedNodeBuilder";
namespace java::util::stream { class Nodes$InternalNodeSpliterator; }
template<> constexpr auto signature<::java::util::stream::Nodes$InternalNodeSpliterator> = ::java_util_stream / "Nodes$InternalNodeSpliterator";
namespace java::util::stream { class Nodes$InternalNodeSpliterator$OfDouble; }
template<> constexpr auto signature<::java::util::stream::Nodes$InternalNodeSpliterator$OfDouble> = ::java_util_stream / "Nodes$InternalNodeSpliterator$OfDouble";
namespace java::util::stream { class Nodes$InternalNodeSpliterator$OfInt; }
template<> constexpr auto signature<::java::util::stream::Nodes$InternalNodeSpliterator$OfInt> = ::java_util_stream / "Nodes$InternalNodeSpliterator$OfInt";
namespace java::util::stream { class Nodes$InternalNodeSpliterator$OfLong; }
template<> constexpr auto signature<::java::util::stream::Nodes$InternalNodeSpliterator$OfLong> = ::java_util_stream / "Nodes$InternalNodeSpliterator$OfLong";
namespace java::util::stream { class Nodes$InternalNodeSpliterator$OfPrimitive; }
template<> constexpr auto signature<::java::util::stream::Nodes$InternalNodeSpliterator$OfPrimitive> = ::java_util_stream / "Nodes$InternalNodeSpliterator$OfPrimitive";
namespace java::util::stream { class Nodes$InternalNodeSpliterator$OfRef; }
template<> constexpr auto signature<::java::util::stream::Nodes$InternalNodeSpliterator$OfRef> = ::java_util_stream / "Nodes$InternalNodeSpliterator$OfRef";
namespace java::util::stream { class Nodes$LongArrayNode; }
template<> constexpr auto signature<::java::util::stream::Nodes$LongArrayNode> = ::java_util_stream / "Nodes$LongArrayNode";
namespace java::util::stream { class Nodes$LongFixedNodeBuilder; }
template<> constexpr auto signature<::java::util::stream::Nodes$LongFixedNodeBuilder> = ::java_util_stream / "Nodes$LongFixedNodeBuilder";
namespace java::util::stream { class Nodes$LongSpinedNodeBuilder; }
template<> constexpr auto signature<::java::util::stream::Nodes$LongSpinedNodeBuilder> = ::java_util_stream / "Nodes$LongSpinedNodeBuilder";
namespace java::util::stream { class Nodes$SizedCollectorTask; }
template<> constexpr auto signature<::java::util::stream::Nodes$SizedCollectorTask> = ::java_util_stream / "Nodes$SizedCollectorTask";
namespace java::util::stream { class Nodes$SizedCollectorTask$OfDouble; }
template<> constexpr auto signature<::java::util::stream::Nodes$SizedCollectorTask$OfDouble> = ::java_util_stream / "Nodes$SizedCollectorTask$OfDouble";
namespace java::util::stream { class Nodes$SizedCollectorTask$OfInt; }
template<> constexpr auto signature<::java::util::stream::Nodes$SizedCollectorTask$OfInt> = ::java_util_stream / "Nodes$SizedCollectorTask$OfInt";
namespace java::util::stream { class Nodes$SizedCollectorTask$OfLong; }
template<> constexpr auto signature<::java::util::stream::Nodes$SizedCollectorTask$OfLong> = ::java_util_stream / "Nodes$SizedCollectorTask$OfLong";
namespace java::util::stream { class Nodes$SizedCollectorTask$OfRef; }
template<> constexpr auto signature<::java::util::stream::Nodes$SizedCollectorTask$OfRef> = ::java_util_stream / "Nodes$SizedCollectorTask$OfRef";
namespace java::util::stream { class Nodes$SpinedNodeBuilder; }
template<> constexpr auto signature<::java::util::stream::Nodes$SpinedNodeBuilder> = ::java_util_stream / "Nodes$SpinedNodeBuilder";
namespace java::util::stream { class Nodes$ToArrayTask; }
template<> constexpr auto signature<::java::util::stream::Nodes$ToArrayTask> = ::java_util_stream / "Nodes$ToArrayTask";
namespace java::util::stream { class Nodes$ToArrayTask$OfDouble; }
template<> constexpr auto signature<::java::util::stream::Nodes$ToArrayTask$OfDouble> = ::java_util_stream / "Nodes$ToArrayTask$OfDouble";
namespace java::util::stream { class Nodes$ToArrayTask$OfInt; }
template<> constexpr auto signature<::java::util::stream::Nodes$ToArrayTask$OfInt> = ::java_util_stream / "Nodes$ToArrayTask$OfInt";
namespace java::util::stream { class Nodes$ToArrayTask$OfLong; }
template<> constexpr auto signature<::java::util::stream::Nodes$ToArrayTask$OfLong> = ::java_util_stream / "Nodes$ToArrayTask$OfLong";
namespace java::util::stream { class Nodes$ToArrayTask$OfPrimitive; }
template<> constexpr auto signature<::java::util::stream::Nodes$ToArrayTask$OfPrimitive> = ::java_util_stream / "Nodes$ToArrayTask$OfPrimitive";
namespace java::util::stream { class Nodes$ToArrayTask$OfRef; }
template<> constexpr auto signature<::java::util::stream::Nodes$ToArrayTask$OfRef> = ::java_util_stream / "Nodes$ToArrayTask$OfRef";
namespace java::util::stream { class PipelineHelper; }
template<> constexpr auto signature<::java::util::stream::PipelineHelper> = ::java_util_stream / "PipelineHelper";
namespace java::util::stream { class ReduceOps; }
template<> constexpr auto signature<::java::util::stream::ReduceOps> = ::java_util_stream / "ReduceOps";
namespace java::util::stream { class ReduceOps$1; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$1> = ::java_util_stream / "ReduceOps$1";
namespace java::util::stream { class ReduceOps$10; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$10> = ::java_util_stream / "ReduceOps$10";
namespace java::util::stream { class ReduceOps$10ReducingSink; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$10ReducingSink> = ::java_util_stream / "ReduceOps$10ReducingSink";
namespace java::util::stream { class ReduceOps$11; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$11> = ::java_util_stream / "ReduceOps$11";
namespace java::util::stream { class ReduceOps$11ReducingSink; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$11ReducingSink> = ::java_util_stream / "ReduceOps$11ReducingSink";
namespace java::util::stream { class ReduceOps$12; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$12> = ::java_util_stream / "ReduceOps$12";
namespace java::util::stream { class ReduceOps$12ReducingSink; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$12ReducingSink> = ::java_util_stream / "ReduceOps$12ReducingSink";
namespace java::util::stream { class ReduceOps$13; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$13> = ::java_util_stream / "ReduceOps$13";
namespace java::util::stream { class ReduceOps$13ReducingSink; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$13ReducingSink> = ::java_util_stream / "ReduceOps$13ReducingSink";
namespace java::util::stream { class ReduceOps$1ReducingSink; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$1ReducingSink> = ::java_util_stream / "ReduceOps$1ReducingSink";
namespace java::util::stream { class ReduceOps$2; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$2> = ::java_util_stream / "ReduceOps$2";
namespace java::util::stream { class ReduceOps$2ReducingSink; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$2ReducingSink> = ::java_util_stream / "ReduceOps$2ReducingSink";
namespace java::util::stream { class ReduceOps$3; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$3> = ::java_util_stream / "ReduceOps$3";
namespace java::util::stream { class ReduceOps$3ReducingSink; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$3ReducingSink> = ::java_util_stream / "ReduceOps$3ReducingSink";
namespace java::util::stream { class ReduceOps$4; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$4> = ::java_util_stream / "ReduceOps$4";
namespace java::util::stream { class ReduceOps$4ReducingSink; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$4ReducingSink> = ::java_util_stream / "ReduceOps$4ReducingSink";
namespace java::util::stream { class ReduceOps$5; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$5> = ::java_util_stream / "ReduceOps$5";
namespace java::util::stream { class ReduceOps$5ReducingSink; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$5ReducingSink> = ::java_util_stream / "ReduceOps$5ReducingSink";
namespace java::util::stream { class ReduceOps$6; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$6> = ::java_util_stream / "ReduceOps$6";
namespace java::util::stream { class ReduceOps$6ReducingSink; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$6ReducingSink> = ::java_util_stream / "ReduceOps$6ReducingSink";
namespace java::util::stream { class ReduceOps$7; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$7> = ::java_util_stream / "ReduceOps$7";
namespace java::util::stream { class ReduceOps$7ReducingSink; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$7ReducingSink> = ::java_util_stream / "ReduceOps$7ReducingSink";
namespace java::util::stream { class ReduceOps$8; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$8> = ::java_util_stream / "ReduceOps$8";
namespace java::util::stream { class ReduceOps$8ReducingSink; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$8ReducingSink> = ::java_util_stream / "ReduceOps$8ReducingSink";
namespace java::util::stream { class ReduceOps$9; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$9> = ::java_util_stream / "ReduceOps$9";
namespace java::util::stream { class ReduceOps$9ReducingSink; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$9ReducingSink> = ::java_util_stream / "ReduceOps$9ReducingSink";
namespace java::util::stream { class ReduceOps$AccumulatingSink; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$AccumulatingSink> = ::java_util_stream / "ReduceOps$AccumulatingSink";
namespace java::util::stream { class ReduceOps$Box; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$Box> = ::java_util_stream / "ReduceOps$Box";
namespace java::util::stream { class ReduceOps$ReduceOp; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$ReduceOp> = ::java_util_stream / "ReduceOps$ReduceOp";
namespace java::util::stream { class ReduceOps$ReduceTask; }
template<> constexpr auto signature<::java::util::stream::ReduceOps$ReduceTask> = ::java_util_stream / "ReduceOps$ReduceTask";
namespace java::util::stream { class ReferencePipeline; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline> = ::java_util_stream / "ReferencePipeline";
namespace java::util::stream { class ReferencePipeline$1; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$1> = ::java_util_stream / "ReferencePipeline$1";
namespace java::util::stream { class ReferencePipeline$10; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$10> = ::java_util_stream / "ReferencePipeline$10";
namespace java::util::stream { class ReferencePipeline$10$1; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$10$1> = ::java_util_stream / "ReferencePipeline$10$1";
namespace java::util::stream { class ReferencePipeline$11; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$11> = ::java_util_stream / "ReferencePipeline$11";
namespace java::util::stream { class ReferencePipeline$11$1; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$11$1> = ::java_util_stream / "ReferencePipeline$11$1";
namespace java::util::stream { class ReferencePipeline$2; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$2> = ::java_util_stream / "ReferencePipeline$2";
namespace java::util::stream { class ReferencePipeline$2$1; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$2$1> = ::java_util_stream / "ReferencePipeline$2$1";
namespace java::util::stream { class ReferencePipeline$3; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$3> = ::java_util_stream / "ReferencePipeline$3";
namespace java::util::stream { class ReferencePipeline$3$1; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$3$1> = ::java_util_stream / "ReferencePipeline$3$1";
namespace java::util::stream { class ReferencePipeline$4; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$4> = ::java_util_stream / "ReferencePipeline$4";
namespace java::util::stream { class ReferencePipeline$4$1; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$4$1> = ::java_util_stream / "ReferencePipeline$4$1";
namespace java::util::stream { class ReferencePipeline$5; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$5> = ::java_util_stream / "ReferencePipeline$5";
namespace java::util::stream { class ReferencePipeline$5$1; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$5$1> = ::java_util_stream / "ReferencePipeline$5$1";
namespace java::util::stream { class ReferencePipeline$6; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$6> = ::java_util_stream / "ReferencePipeline$6";
namespace java::util::stream { class ReferencePipeline$6$1; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$6$1> = ::java_util_stream / "ReferencePipeline$6$1";
namespace java::util::stream { class ReferencePipeline$7; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$7> = ::java_util_stream / "ReferencePipeline$7";
namespace java::util::stream { class ReferencePipeline$7$1; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$7$1> = ::java_util_stream / "ReferencePipeline$7$1";
namespace java::util::stream { class ReferencePipeline$8; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$8> = ::java_util_stream / "ReferencePipeline$8";
namespace java::util::stream { class ReferencePipeline$8$1; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$8$1> = ::java_util_stream / "ReferencePipeline$8$1";
namespace java::util::stream { class ReferencePipeline$9; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$9> = ::java_util_stream / "ReferencePipeline$9";
namespace java::util::stream { class ReferencePipeline$9$1; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$9$1> = ::java_util_stream / "ReferencePipeline$9$1";
namespace java::util::stream { class ReferencePipeline$Head; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$Head> = ::java_util_stream / "ReferencePipeline$Head";
namespace java::util::stream { class ReferencePipeline$StatefulOp; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$StatefulOp> = ::java_util_stream / "ReferencePipeline$StatefulOp";
namespace java::util::stream { class ReferencePipeline$StatelessOp; }
template<> constexpr auto signature<::java::util::stream::ReferencePipeline$StatelessOp> = ::java_util_stream / "ReferencePipeline$StatelessOp";
namespace java::util::stream { class Sink; }
template<> constexpr auto signature<::java::util::stream::Sink> = ::java_util_stream / "Sink";
namespace java::util::stream { class Sink$ChainedDouble; }
template<> constexpr auto signature<::java::util::stream::Sink$ChainedDouble> = ::java_util_stream / "Sink$ChainedDouble";
namespace java::util::stream { class Sink$ChainedInt; }
template<> constexpr auto signature<::java::util::stream::Sink$ChainedInt> = ::java_util_stream / "Sink$ChainedInt";
namespace java::util::stream { class Sink$ChainedLong; }
template<> constexpr auto signature<::java::util::stream::Sink$ChainedLong> = ::java_util_stream / "Sink$ChainedLong";
namespace java::util::stream { class Sink$ChainedReference; }
template<> constexpr auto signature<::java::util::stream::Sink$ChainedReference> = ::java_util_stream / "Sink$ChainedReference";
namespace java::util::stream { class Sink$OfDouble; }
template<> constexpr auto signature<::java::util::stream::Sink$OfDouble> = ::java_util_stream / "Sink$OfDouble";
namespace java::util::stream { class Sink$OfInt; }
template<> constexpr auto signature<::java::util::stream::Sink$OfInt> = ::java_util_stream / "Sink$OfInt";
namespace java::util::stream { class Sink$OfLong; }
template<> constexpr auto signature<::java::util::stream::Sink$OfLong> = ::java_util_stream / "Sink$OfLong";
namespace java::util::stream { class SliceOps; }
template<> constexpr auto signature<::java::util::stream::SliceOps> = ::java_util_stream / "SliceOps";
namespace java::util::stream { class SliceOps$1; }
template<> constexpr auto signature<::java::util::stream::SliceOps$1> = ::java_util_stream / "SliceOps$1";
namespace java::util::stream { class SliceOps$1$1; }
template<> constexpr auto signature<::java::util::stream::SliceOps$1$1> = ::java_util_stream / "SliceOps$1$1";
namespace java::util::stream { class SliceOps$2; }
template<> constexpr auto signature<::java::util::stream::SliceOps$2> = ::java_util_stream / "SliceOps$2";
namespace java::util::stream { class SliceOps$2$1; }
template<> constexpr auto signature<::java::util::stream::SliceOps$2$1> = ::java_util_stream / "SliceOps$2$1";
namespace java::util::stream { class SliceOps$3; }
template<> constexpr auto signature<::java::util::stream::SliceOps$3> = ::java_util_stream / "SliceOps$3";
namespace java::util::stream { class SliceOps$3$1; }
template<> constexpr auto signature<::java::util::stream::SliceOps$3$1> = ::java_util_stream / "SliceOps$3$1";
namespace java::util::stream { class SliceOps$4; }
template<> constexpr auto signature<::java::util::stream::SliceOps$4> = ::java_util_stream / "SliceOps$4";
namespace java::util::stream { class SliceOps$4$1; }
template<> constexpr auto signature<::java::util::stream::SliceOps$4$1> = ::java_util_stream / "SliceOps$4$1";
namespace java::util::stream { class SliceOps$5; }
template<> constexpr auto signature<::java::util::stream::SliceOps$5> = ::java_util_stream / "SliceOps$5";
namespace java::util::stream { class SliceOps$SliceTask; }
template<> constexpr auto signature<::java::util::stream::SliceOps$SliceTask> = ::java_util_stream / "SliceOps$SliceTask";
namespace java::util::stream { class SortedOps; }
template<> constexpr auto signature<::java::util::stream::SortedOps> = ::java_util_stream / "SortedOps";
namespace java::util::stream { class SortedOps$AbstractDoubleSortingSink; }
template<> constexpr auto signature<::java::util::stream::SortedOps$AbstractDoubleSortingSink> = ::java_util_stream / "SortedOps$AbstractDoubleSortingSink";
namespace java::util::stream { class SortedOps$AbstractIntSortingSink; }
template<> constexpr auto signature<::java::util::stream::SortedOps$AbstractIntSortingSink> = ::java_util_stream / "SortedOps$AbstractIntSortingSink";
namespace java::util::stream { class SortedOps$AbstractLongSortingSink; }
template<> constexpr auto signature<::java::util::stream::SortedOps$AbstractLongSortingSink> = ::java_util_stream / "SortedOps$AbstractLongSortingSink";
namespace java::util::stream { class SortedOps$AbstractRefSortingSink; }
template<> constexpr auto signature<::java::util::stream::SortedOps$AbstractRefSortingSink> = ::java_util_stream / "SortedOps$AbstractRefSortingSink";
namespace java::util::stream { class SortedOps$DoubleSortingSink; }
template<> constexpr auto signature<::java::util::stream::SortedOps$DoubleSortingSink> = ::java_util_stream / "SortedOps$DoubleSortingSink";
namespace java::util::stream { class SortedOps$IntSortingSink; }
template<> constexpr auto signature<::java::util::stream::SortedOps$IntSortingSink> = ::java_util_stream / "SortedOps$IntSortingSink";
namespace java::util::stream { class SortedOps$LongSortingSink; }
template<> constexpr auto signature<::java::util::stream::SortedOps$LongSortingSink> = ::java_util_stream / "SortedOps$LongSortingSink";
namespace java::util::stream { class SortedOps$OfDouble; }
template<> constexpr auto signature<::java::util::stream::SortedOps$OfDouble> = ::java_util_stream / "SortedOps$OfDouble";
namespace java::util::stream { class SortedOps$OfInt; }
template<> constexpr auto signature<::java::util::stream::SortedOps$OfInt> = ::java_util_stream / "SortedOps$OfInt";
namespace java::util::stream { class SortedOps$OfLong; }
template<> constexpr auto signature<::java::util::stream::SortedOps$OfLong> = ::java_util_stream / "SortedOps$OfLong";
namespace java::util::stream { class SortedOps$OfRef; }
template<> constexpr auto signature<::java::util::stream::SortedOps$OfRef> = ::java_util_stream / "SortedOps$OfRef";
namespace java::util::stream { class SortedOps$RefSortingSink; }
template<> constexpr auto signature<::java::util::stream::SortedOps$RefSortingSink> = ::java_util_stream / "SortedOps$RefSortingSink";
namespace java::util::stream { class SortedOps$SizedDoubleSortingSink; }
template<> constexpr auto signature<::java::util::stream::SortedOps$SizedDoubleSortingSink> = ::java_util_stream / "SortedOps$SizedDoubleSortingSink";
namespace java::util::stream { class SortedOps$SizedIntSortingSink; }
template<> constexpr auto signature<::java::util::stream::SortedOps$SizedIntSortingSink> = ::java_util_stream / "SortedOps$SizedIntSortingSink";
namespace java::util::stream { class SortedOps$SizedLongSortingSink; }
template<> constexpr auto signature<::java::util::stream::SortedOps$SizedLongSortingSink> = ::java_util_stream / "SortedOps$SizedLongSortingSink";
namespace java::util::stream { class SortedOps$SizedRefSortingSink; }
template<> constexpr auto signature<::java::util::stream::SortedOps$SizedRefSortingSink> = ::java_util_stream / "SortedOps$SizedRefSortingSink";
namespace java::util::stream { class SpinedBuffer; }
template<> constexpr auto signature<::java::util::stream::SpinedBuffer> = ::java_util_stream / "SpinedBuffer";
namespace java::util::stream { class SpinedBuffer$1Splitr; }
template<> constexpr auto signature<::java::util::stream::SpinedBuffer$1Splitr> = ::java_util_stream / "SpinedBuffer$1Splitr";
namespace java::util::stream { class SpinedBuffer$OfDouble; }
template<> constexpr auto signature<::java::util::stream::SpinedBuffer$OfDouble> = ::java_util_stream / "SpinedBuffer$OfDouble";
namespace java::util::stream { class SpinedBuffer$OfDouble$1Splitr; }
template<> constexpr auto signature<::java::util::stream::SpinedBuffer$OfDouble$1Splitr> = ::java_util_stream / "SpinedBuffer$OfDouble$1Splitr";
namespace java::util::stream { class SpinedBuffer$OfInt; }
template<> constexpr auto signature<::java::util::stream::SpinedBuffer$OfInt> = ::java_util_stream / "SpinedBuffer$OfInt";
namespace java::util::stream { class SpinedBuffer$OfInt$1Splitr; }
template<> constexpr auto signature<::java::util::stream::SpinedBuffer$OfInt$1Splitr> = ::java_util_stream / "SpinedBuffer$OfInt$1Splitr";
namespace java::util::stream { class SpinedBuffer$OfLong; }
template<> constexpr auto signature<::java::util::stream::SpinedBuffer$OfLong> = ::java_util_stream / "SpinedBuffer$OfLong";
namespace java::util::stream { class SpinedBuffer$OfLong$1Splitr; }
template<> constexpr auto signature<::java::util::stream::SpinedBuffer$OfLong$1Splitr> = ::java_util_stream / "SpinedBuffer$OfLong$1Splitr";
namespace java::util::stream { class SpinedBuffer$OfPrimitive; }
template<> constexpr auto signature<::java::util::stream::SpinedBuffer$OfPrimitive> = ::java_util_stream / "SpinedBuffer$OfPrimitive";
namespace java::util::stream { class SpinedBuffer$OfPrimitive$BaseSpliterator; }
template<> constexpr auto signature<::java::util::stream::SpinedBuffer$OfPrimitive$BaseSpliterator> = ::java_util_stream / "SpinedBuffer$OfPrimitive$BaseSpliterator";
namespace java::util::stream { class Stream; }
template<> constexpr auto signature<::java::util::stream::Stream> = ::java_util_stream / "Stream";
namespace java::util::stream { class Stream$1; }
template<> constexpr auto signature<::java::util::stream::Stream$1> = ::java_util_stream / "Stream$1";
namespace java::util::stream { class Stream$Builder; }
template<> constexpr auto signature<::java::util::stream::Stream$Builder> = ::java_util_stream / "Stream$Builder";
namespace java::util::stream { class StreamOpFlag; }
template<> constexpr auto signature<::java::util::stream::StreamOpFlag> = ::java_util_stream / "StreamOpFlag";
namespace java::util::stream { class StreamOpFlag$MaskBuilder; }
template<> constexpr auto signature<::java::util::stream::StreamOpFlag$MaskBuilder> = ::java_util_stream / "StreamOpFlag$MaskBuilder";
namespace java::util::stream { class StreamOpFlag$Type; }
template<> constexpr auto signature<::java::util::stream::StreamOpFlag$Type> = ::java_util_stream / "StreamOpFlag$Type";
namespace java::util::stream { class StreamShape; }
template<> constexpr auto signature<::java::util::stream::StreamShape> = ::java_util_stream / "StreamShape";
namespace java::util::stream { class StreamSpliterators; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators> = ::java_util_stream / "StreamSpliterators";
namespace java::util::stream { class StreamSpliterators$1; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$1> = ::java_util_stream / "StreamSpliterators$1";
namespace java::util::stream { class StreamSpliterators$AbstractWrappingSpliterator; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$AbstractWrappingSpliterator> = ::java_util_stream / "StreamSpliterators$AbstractWrappingSpliterator";
namespace java::util::stream { class StreamSpliterators$ArrayBuffer; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$ArrayBuffer> = ::java_util_stream / "StreamSpliterators$ArrayBuffer";
namespace java::util::stream { class StreamSpliterators$ArrayBuffer$OfDouble; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$ArrayBuffer$OfDouble> = ::java_util_stream / "StreamSpliterators$ArrayBuffer$OfDouble";
namespace java::util::stream { class StreamSpliterators$ArrayBuffer$OfInt; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$ArrayBuffer$OfInt> = ::java_util_stream / "StreamSpliterators$ArrayBuffer$OfInt";
namespace java::util::stream { class StreamSpliterators$ArrayBuffer$OfLong; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$ArrayBuffer$OfLong> = ::java_util_stream / "StreamSpliterators$ArrayBuffer$OfLong";
namespace java::util::stream { class StreamSpliterators$ArrayBuffer$OfPrimitive; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$ArrayBuffer$OfPrimitive> = ::java_util_stream / "StreamSpliterators$ArrayBuffer$OfPrimitive";
namespace java::util::stream { class StreamSpliterators$ArrayBuffer$OfRef; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$ArrayBuffer$OfRef> = ::java_util_stream / "StreamSpliterators$ArrayBuffer$OfRef";
namespace java::util::stream { class StreamSpliterators$DelegatingSpliterator; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$DelegatingSpliterator> = ::java_util_stream / "StreamSpliterators$DelegatingSpliterator";
namespace java::util::stream { class StreamSpliterators$DelegatingSpliterator$OfDouble; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$DelegatingSpliterator$OfDouble> = ::java_util_stream / "StreamSpliterators$DelegatingSpliterator$OfDouble";
namespace java::util::stream { class StreamSpliterators$DelegatingSpliterator$OfInt; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$DelegatingSpliterator$OfInt> = ::java_util_stream / "StreamSpliterators$DelegatingSpliterator$OfInt";
namespace java::util::stream { class StreamSpliterators$DelegatingSpliterator$OfLong; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$DelegatingSpliterator$OfLong> = ::java_util_stream / "StreamSpliterators$DelegatingSpliterator$OfLong";
namespace java::util::stream { class StreamSpliterators$DelegatingSpliterator$OfPrimitive; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$DelegatingSpliterator$OfPrimitive> = ::java_util_stream / "StreamSpliterators$DelegatingSpliterator$OfPrimitive";
namespace java::util::stream { class StreamSpliterators$DistinctSpliterator; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$DistinctSpliterator> = ::java_util_stream / "StreamSpliterators$DistinctSpliterator";
namespace java::util::stream { class StreamSpliterators$DoubleWrappingSpliterator; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$DoubleWrappingSpliterator> = ::java_util_stream / "StreamSpliterators$DoubleWrappingSpliterator";
namespace java::util::stream { class StreamSpliterators$InfiniteSupplyingSpliterator; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$InfiniteSupplyingSpliterator> = ::java_util_stream / "StreamSpliterators$InfiniteSupplyingSpliterator";
namespace java::util::stream { class StreamSpliterators$InfiniteSupplyingSpliterator$OfDouble; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$InfiniteSupplyingSpliterator$OfDouble> = ::java_util_stream / "StreamSpliterators$InfiniteSupplyingSpliterator$OfDouble";
namespace java::util::stream { class StreamSpliterators$InfiniteSupplyingSpliterator$OfInt; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$InfiniteSupplyingSpliterator$OfInt> = ::java_util_stream / "StreamSpliterators$InfiniteSupplyingSpliterator$OfInt";
namespace java::util::stream { class StreamSpliterators$InfiniteSupplyingSpliterator$OfLong; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$InfiniteSupplyingSpliterator$OfLong> = ::java_util_stream / "StreamSpliterators$InfiniteSupplyingSpliterator$OfLong";
namespace java::util::stream { class StreamSpliterators$InfiniteSupplyingSpliterator$OfRef; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$InfiniteSupplyingSpliterator$OfRef> = ::java_util_stream / "StreamSpliterators$InfiniteSupplyingSpliterator$OfRef";
namespace java::util::stream { class StreamSpliterators$IntWrappingSpliterator; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$IntWrappingSpliterator> = ::java_util_stream / "StreamSpliterators$IntWrappingSpliterator";
namespace java::util::stream { class StreamSpliterators$LongWrappingSpliterator; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$LongWrappingSpliterator> = ::java_util_stream / "StreamSpliterators$LongWrappingSpliterator";
namespace java::util::stream { class StreamSpliterators$SliceSpliterator; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$SliceSpliterator> = ::java_util_stream / "StreamSpliterators$SliceSpliterator";
namespace java::util::stream { class StreamSpliterators$SliceSpliterator$OfDouble; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$SliceSpliterator$OfDouble> = ::java_util_stream / "StreamSpliterators$SliceSpliterator$OfDouble";
namespace java::util::stream { class StreamSpliterators$SliceSpliterator$OfInt; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$SliceSpliterator$OfInt> = ::java_util_stream / "StreamSpliterators$SliceSpliterator$OfInt";
namespace java::util::stream { class StreamSpliterators$SliceSpliterator$OfLong; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$SliceSpliterator$OfLong> = ::java_util_stream / "StreamSpliterators$SliceSpliterator$OfLong";
namespace java::util::stream { class StreamSpliterators$SliceSpliterator$OfPrimitive; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$SliceSpliterator$OfPrimitive> = ::java_util_stream / "StreamSpliterators$SliceSpliterator$OfPrimitive";
namespace java::util::stream { class StreamSpliterators$SliceSpliterator$OfRef; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$SliceSpliterator$OfRef> = ::java_util_stream / "StreamSpliterators$SliceSpliterator$OfRef";
namespace java::util::stream { class StreamSpliterators$UnorderedSliceSpliterator; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$UnorderedSliceSpliterator> = ::java_util_stream / "StreamSpliterators$UnorderedSliceSpliterator";
namespace java::util::stream { class StreamSpliterators$UnorderedSliceSpliterator$OfDouble; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$UnorderedSliceSpliterator$OfDouble> = ::java_util_stream / "StreamSpliterators$UnorderedSliceSpliterator$OfDouble";
namespace java::util::stream { class StreamSpliterators$UnorderedSliceSpliterator$OfInt; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$UnorderedSliceSpliterator$OfInt> = ::java_util_stream / "StreamSpliterators$UnorderedSliceSpliterator$OfInt";
namespace java::util::stream { class StreamSpliterators$UnorderedSliceSpliterator$OfLong; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$UnorderedSliceSpliterator$OfLong> = ::java_util_stream / "StreamSpliterators$UnorderedSliceSpliterator$OfLong";
namespace java::util::stream { class StreamSpliterators$UnorderedSliceSpliterator$OfPrimitive; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$UnorderedSliceSpliterator$OfPrimitive> = ::java_util_stream / "StreamSpliterators$UnorderedSliceSpliterator$OfPrimitive";
namespace java::util::stream { class StreamSpliterators$UnorderedSliceSpliterator$OfRef; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$UnorderedSliceSpliterator$OfRef> = ::java_util_stream / "StreamSpliterators$UnorderedSliceSpliterator$OfRef";
namespace java::util::stream { class StreamSpliterators$UnorderedSliceSpliterator$PermitStatus; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$UnorderedSliceSpliterator$PermitStatus> = ::java_util_stream / "StreamSpliterators$UnorderedSliceSpliterator$PermitStatus";
namespace java::util::stream { class StreamSpliterators$WrappingSpliterator; }
template<> constexpr auto signature<::java::util::stream::StreamSpliterators$WrappingSpliterator> = ::java_util_stream / "StreamSpliterators$WrappingSpliterator";
namespace java::util::stream { class StreamSupport; }
template<> constexpr auto signature<::java::util::stream::StreamSupport> = ::java_util_stream / "StreamSupport";
namespace java::util::stream { class Streams; }
template<> constexpr auto signature<::java::util::stream::Streams> = ::java_util_stream / "Streams";
namespace java::util::stream { class Streams$1; }
template<> constexpr auto signature<::java::util::stream::Streams$1> = ::java_util_stream / "Streams$1";
namespace java::util::stream { class Streams$2; }
template<> constexpr auto signature<::java::util::stream::Streams$2> = ::java_util_stream / "Streams$2";
namespace java::util::stream { class Streams$AbstractStreamBuilderImpl; }
template<> constexpr auto signature<::java::util::stream::Streams$AbstractStreamBuilderImpl> = ::java_util_stream / "Streams$AbstractStreamBuilderImpl";
namespace java::util::stream { class Streams$ConcatSpliterator; }
template<> constexpr auto signature<::java::util::stream::Streams$ConcatSpliterator> = ::java_util_stream / "Streams$ConcatSpliterator";
namespace java::util::stream { class Streams$ConcatSpliterator$OfDouble; }
template<> constexpr auto signature<::java::util::stream::Streams$ConcatSpliterator$OfDouble> = ::java_util_stream / "Streams$ConcatSpliterator$OfDouble";
namespace java::util::stream { class Streams$ConcatSpliterator$OfInt; }
template<> constexpr auto signature<::java::util::stream::Streams$ConcatSpliterator$OfInt> = ::java_util_stream / "Streams$ConcatSpliterator$OfInt";
namespace java::util::stream { class Streams$ConcatSpliterator$OfLong; }
template<> constexpr auto signature<::java::util::stream::Streams$ConcatSpliterator$OfLong> = ::java_util_stream / "Streams$ConcatSpliterator$OfLong";
namespace java::util::stream { class Streams$ConcatSpliterator$OfPrimitive; }
template<> constexpr auto signature<::java::util::stream::Streams$ConcatSpliterator$OfPrimitive> = ::java_util_stream / "Streams$ConcatSpliterator$OfPrimitive";
namespace java::util::stream { class Streams$ConcatSpliterator$OfRef; }
template<> constexpr auto signature<::java::util::stream::Streams$ConcatSpliterator$OfRef> = ::java_util_stream / "Streams$ConcatSpliterator$OfRef";
namespace java::util::stream { class Streams$DoubleStreamBuilderImpl; }
template<> constexpr auto signature<::java::util::stream::Streams$DoubleStreamBuilderImpl> = ::java_util_stream / "Streams$DoubleStreamBuilderImpl";
namespace java::util::stream { class Streams$IntStreamBuilderImpl; }
template<> constexpr auto signature<::java::util::stream::Streams$IntStreamBuilderImpl> = ::java_util_stream / "Streams$IntStreamBuilderImpl";
namespace java::util::stream { class Streams$LongStreamBuilderImpl; }
template<> constexpr auto signature<::java::util::stream::Streams$LongStreamBuilderImpl> = ::java_util_stream / "Streams$LongStreamBuilderImpl";
namespace java::util::stream { class Streams$RangeIntSpliterator; }
template<> constexpr auto signature<::java::util::stream::Streams$RangeIntSpliterator> = ::java_util_stream / "Streams$RangeIntSpliterator";
namespace java::util::stream { class Streams$RangeLongSpliterator; }
template<> constexpr auto signature<::java::util::stream::Streams$RangeLongSpliterator> = ::java_util_stream / "Streams$RangeLongSpliterator";
namespace java::util::stream { class Streams$StreamBuilderImpl; }
template<> constexpr auto signature<::java::util::stream::Streams$StreamBuilderImpl> = ::java_util_stream / "Streams$StreamBuilderImpl";
namespace java::util::stream { class TerminalOp; }
template<> constexpr auto signature<::java::util::stream::TerminalOp> = ::java_util_stream / "TerminalOp";
namespace java::util::stream { class TerminalSink; }
template<> constexpr auto signature<::java::util::stream::TerminalSink> = ::java_util_stream / "TerminalSink";
namespace java::util::stream { class Tripwire; }
template<> constexpr auto signature<::java::util::stream::Tripwire> = ::java_util_stream / "Tripwire";
namespace java::util::zip { class Adler32; }
template<> constexpr auto signature<::java::util::zip::Adler32> = ::java_util_zip / "Adler32";
namespace java::util::zip { class CRC32; }
template<> constexpr auto signature<::java::util::zip::CRC32> = ::java_util_zip / "CRC32";
namespace java::util::zip { class CheckedInputStream; }
template<> constexpr auto signature<::java::util::zip::CheckedInputStream> = ::java_util_zip / "CheckedInputStream";
namespace java::util::zip { class CheckedOutputStream; }
template<> constexpr auto signature<::java::util::zip::CheckedOutputStream> = ::java_util_zip / "CheckedOutputStream";
namespace java::util::zip { class Checksum; }
template<> constexpr auto signature<::java::util::zip::Checksum> = ::java_util_zip / "Checksum";
namespace java::util::zip { class DataFormatException; }
template<> constexpr auto signature<::java::util::zip::DataFormatException> = ::java_util_zip / "DataFormatException";
namespace java::util::zip { class Deflater; }
template<> constexpr auto signature<::java::util::zip::Deflater> = ::java_util_zip / "Deflater";
namespace java::util::zip { class DeflaterInputStream; }
template<> constexpr auto signature<::java::util::zip::DeflaterInputStream> = ::java_util_zip / "DeflaterInputStream";
namespace java::util::zip { class DeflaterOutputStream; }
template<> constexpr auto signature<::java::util::zip::DeflaterOutputStream> = ::java_util_zip / "DeflaterOutputStream";
namespace java::util::zip { class GZIPInputStream; }
template<> constexpr auto signature<::java::util::zip::GZIPInputStream> = ::java_util_zip / "GZIPInputStream";
namespace java::util::zip { class GZIPInputStream$1; }
template<> constexpr auto signature<::java::util::zip::GZIPInputStream$1> = ::java_util_zip / "GZIPInputStream$1";
namespace java::util::zip { class GZIPOutputStream; }
template<> constexpr auto signature<::java::util::zip::GZIPOutputStream> = ::java_util_zip / "GZIPOutputStream";
namespace java::util::zip { class Inflater; }
template<> constexpr auto signature<::java::util::zip::Inflater> = ::java_util_zip / "Inflater";
namespace java::util::zip { class InflaterInputStream; }
template<> constexpr auto signature<::java::util::zip::InflaterInputStream> = ::java_util_zip / "InflaterInputStream";
namespace java::util::zip { class InflaterOutputStream; }
template<> constexpr auto signature<::java::util::zip::InflaterOutputStream> = ::java_util_zip / "InflaterOutputStream";
namespace java::util::zip { class ZStreamRef; }
template<> constexpr auto signature<::java::util::zip::ZStreamRef> = ::java_util_zip / "ZStreamRef";
namespace java::util::zip { class ZipCoder; }
template<> constexpr auto signature<::java::util::zip::ZipCoder> = ::java_util_zip / "ZipCoder";
namespace java::util::zip { class ZipConstants; }
template<> constexpr auto signature<::java::util::zip::ZipConstants> = ::java_util_zip / "ZipConstants";
namespace java::util::zip { class ZipConstants64; }
template<> constexpr auto signature<::java::util::zip::ZipConstants64> = ::java_util_zip / "ZipConstants64";
namespace java::util::zip { class ZipEntry; }
template<> constexpr auto signature<::java::util::zip::ZipEntry> = ::java_util_zip / "ZipEntry";
namespace java::util::zip { class ZipError; }
template<> constexpr auto signature<::java::util::zip::ZipError> = ::java_util_zip / "ZipError";
namespace java::util::zip { class ZipException; }
template<> constexpr auto signature<::java::util::zip::ZipException> = ::java_util_zip / "ZipException";
namespace java::util::zip { class ZipFile; }
template<> constexpr auto signature<::java::util::zip::ZipFile> = ::java_util_zip / "ZipFile";
namespace java::util::zip { class ZipFile$1; }
template<> constexpr auto signature<::java::util::zip::ZipFile$1> = ::java_util_zip / "ZipFile$1";
namespace java::util::zip { class ZipFile$ZipEntryIterator; }
template<> constexpr auto signature<::java::util::zip::ZipFile$ZipEntryIterator> = ::java_util_zip / "ZipFile$ZipEntryIterator";
namespace java::util::zip { class ZipFile$ZipFileInflaterInputStream; }
template<> constexpr auto signature<::java::util::zip::ZipFile$ZipFileInflaterInputStream> = ::java_util_zip / "ZipFile$ZipFileInflaterInputStream";
namespace java::util::zip { class ZipFile$ZipFileInputStream; }
template<> constexpr auto signature<::java::util::zip::ZipFile$ZipFileInputStream> = ::java_util_zip / "ZipFile$ZipFileInputStream";
namespace java::util::zip { class ZipInputStream; }
template<> constexpr auto signature<::java::util::zip::ZipInputStream> = ::java_util_zip / "ZipInputStream";
namespace java::util::zip { class ZipOutputStream; }
template<> constexpr auto signature<::java::util::zip::ZipOutputStream> = ::java_util_zip / "ZipOutputStream";
namespace java::util::zip { class ZipOutputStream$XEntry; }
template<> constexpr auto signature<::java::util::zip::ZipOutputStream$XEntry> = ::java_util_zip / "ZipOutputStream$XEntry";
namespace java::util::zip { class ZipUtils; }
template<> constexpr auto signature<::java::util::zip::ZipUtils> = ::java_util_zip / "ZipUtils";
namespace javax::accessibility { class Accessible; }
template<> constexpr auto signature<::javax::accessibility::Accessible> = ::javax_accessibility / "Accessible";
namespace javax::accessibility { class AccessibleAction; }
template<> constexpr auto signature<::javax::accessibility::AccessibleAction> = ::javax_accessibility / "AccessibleAction";
namespace javax::accessibility { class AccessibleAttributeSequence; }
template<> constexpr auto signature<::javax::accessibility::AccessibleAttributeSequence> = ::javax_accessibility / "AccessibleAttributeSequence";
namespace javax::accessibility { class AccessibleBundle; }
template<> constexpr auto signature<::javax::accessibility::AccessibleBundle> = ::javax_accessibility / "AccessibleBundle";
namespace javax::accessibility { class AccessibleComponent; }
template<> constexpr auto signature<::javax::accessibility::AccessibleComponent> = ::javax_accessibility / "AccessibleComponent";
namespace javax::accessibility { class AccessibleContext; }
template<> constexpr auto signature<::javax::accessibility::AccessibleContext> = ::javax_accessibility / "AccessibleContext";
namespace javax::accessibility { class AccessibleContext$1; }
template<> constexpr auto signature<::javax::accessibility::AccessibleContext$1> = ::javax_accessibility / "AccessibleContext$1";
namespace javax::accessibility { class AccessibleEditableText; }
template<> constexpr auto signature<::javax::accessibility::AccessibleEditableText> = ::javax_accessibility / "AccessibleEditableText";
namespace javax::accessibility { class AccessibleExtendedComponent; }
template<> constexpr auto signature<::javax::accessibility::AccessibleExtendedComponent> = ::javax_accessibility / "AccessibleExtendedComponent";
namespace javax::accessibility { class AccessibleExtendedTable; }
template<> constexpr auto signature<::javax::accessibility::AccessibleExtendedTable> = ::javax_accessibility / "AccessibleExtendedTable";
namespace javax::accessibility { class AccessibleExtendedText; }
template<> constexpr auto signature<::javax::accessibility::AccessibleExtendedText> = ::javax_accessibility / "AccessibleExtendedText";
namespace javax::accessibility { class AccessibleHyperlink; }
template<> constexpr auto signature<::javax::accessibility::AccessibleHyperlink> = ::javax_accessibility / "AccessibleHyperlink";
namespace javax::accessibility { class AccessibleHypertext; }
template<> constexpr auto signature<::javax::accessibility::AccessibleHypertext> = ::javax_accessibility / "AccessibleHypertext";
namespace javax::accessibility { class AccessibleIcon; }
template<> constexpr auto signature<::javax::accessibility::AccessibleIcon> = ::javax_accessibility / "AccessibleIcon";
namespace javax::accessibility { class AccessibleKeyBinding; }
template<> constexpr auto signature<::javax::accessibility::AccessibleKeyBinding> = ::javax_accessibility / "AccessibleKeyBinding";
namespace javax::accessibility { class AccessibleRelation; }
template<> constexpr auto signature<::javax::accessibility::AccessibleRelation> = ::javax_accessibility / "AccessibleRelation";
namespace javax::accessibility { class AccessibleRelationSet; }
template<> constexpr auto signature<::javax::accessibility::AccessibleRelationSet> = ::javax_accessibility / "AccessibleRelationSet";
namespace javax::accessibility { class AccessibleResourceBundle; }
template<> constexpr auto signature<::javax::accessibility::AccessibleResourceBundle> = ::javax_accessibility / "AccessibleResourceBundle";
namespace javax::accessibility { class AccessibleRole; }
template<> constexpr auto signature<::javax::accessibility::AccessibleRole> = ::javax_accessibility / "AccessibleRole";
namespace javax::accessibility { class AccessibleSelection; }
template<> constexpr auto signature<::javax::accessibility::AccessibleSelection> = ::javax_accessibility / "AccessibleSelection";
namespace javax::accessibility { class AccessibleState; }
template<> constexpr auto signature<::javax::accessibility::AccessibleState> = ::javax_accessibility / "AccessibleState";
namespace javax::accessibility { class AccessibleStateSet; }
template<> constexpr auto signature<::javax::accessibility::AccessibleStateSet> = ::javax_accessibility / "AccessibleStateSet";
namespace javax::accessibility { class AccessibleStreamable; }
template<> constexpr auto signature<::javax::accessibility::AccessibleStreamable> = ::javax_accessibility / "AccessibleStreamable";
namespace javax::accessibility { class AccessibleTable; }
template<> constexpr auto signature<::javax::accessibility::AccessibleTable> = ::javax_accessibility / "AccessibleTable";
namespace javax::accessibility { class AccessibleTableModelChange; }
template<> constexpr auto signature<::javax::accessibility::AccessibleTableModelChange> = ::javax_accessibility / "AccessibleTableModelChange";
namespace javax::accessibility { class AccessibleText; }
template<> constexpr auto signature<::javax::accessibility::AccessibleText> = ::javax_accessibility / "AccessibleText";
namespace javax::accessibility { class AccessibleTextSequence; }
template<> constexpr auto signature<::javax::accessibility::AccessibleTextSequence> = ::javax_accessibility / "AccessibleTextSequence";
namespace javax::accessibility { class AccessibleValue; }
template<> constexpr auto signature<::javax::accessibility::AccessibleValue> = ::javax_accessibility / "AccessibleValue";
namespace javax::activation { class ActivationDataFlavor; }
template<> constexpr auto signature<::javax::activation::ActivationDataFlavor> = ::javax_activation / "ActivationDataFlavor";
namespace javax::activation { class CommandInfo; }
template<> constexpr auto signature<::javax::activation::CommandInfo> = ::javax_activation / "CommandInfo";
namespace javax::activation { class CommandMap; }
template<> constexpr auto signature<::javax::activation::CommandMap> = ::javax_activation / "CommandMap";
namespace javax::activation { class CommandObject; }
template<> constexpr auto signature<::javax::activation::CommandObject> = ::javax_activation / "CommandObject";
namespace javax::activation { class DataContentHandler; }
template<> constexpr auto signature<::javax::activation::DataContentHandler> = ::javax_activation / "DataContentHandler";
namespace javax::activation { class DataContentHandlerFactory; }
template<> constexpr auto signature<::javax::activation::DataContentHandlerFactory> = ::javax_activation / "DataContentHandlerFactory";
namespace javax::activation { class DataHandler; }
template<> constexpr auto signature<::javax::activation::DataHandler> = ::javax_activation / "DataHandler";
namespace javax::activation { class DataHandler$1; }
template<> constexpr auto signature<::javax::activation::DataHandler$1> = ::javax_activation / "DataHandler$1";
namespace javax::activation { class DataHandlerDataSource; }
template<> constexpr auto signature<::javax::activation::DataHandlerDataSource> = ::javax_activation / "DataHandlerDataSource";
namespace javax::activation { class DataSource; }
template<> constexpr auto signature<::javax::activation::DataSource> = ::javax_activation / "DataSource";
namespace javax::activation { class DataSourceDataContentHandler; }
template<> constexpr auto signature<::javax::activation::DataSourceDataContentHandler> = ::javax_activation / "DataSourceDataContentHandler";
namespace javax::activation { class FileDataSource; }
template<> constexpr auto signature<::javax::activation::FileDataSource> = ::javax_activation / "FileDataSource";
namespace javax::activation { class FileTypeMap; }
template<> constexpr auto signature<::javax::activation::FileTypeMap> = ::javax_activation / "FileTypeMap";
namespace javax::activation { class MailcapCommandMap; }
template<> constexpr auto signature<::javax::activation::MailcapCommandMap> = ::javax_activation / "MailcapCommandMap";
namespace javax::activation { class MimeType; }
template<> constexpr auto signature<::javax::activation::MimeType> = ::javax_activation / "MimeType";
namespace javax::activation { class MimeTypeParameterList; }
template<> constexpr auto signature<::javax::activation::MimeTypeParameterList> = ::javax_activation / "MimeTypeParameterList";
namespace javax::activation { class MimeTypeParseException; }
template<> constexpr auto signature<::javax::activation::MimeTypeParseException> = ::javax_activation / "MimeTypeParseException";
namespace javax::activation { class MimetypesFileTypeMap; }
template<> constexpr auto signature<::javax::activation::MimetypesFileTypeMap> = ::javax_activation / "MimetypesFileTypeMap";
namespace javax::activation { class ObjectDataContentHandler; }
template<> constexpr auto signature<::javax::activation::ObjectDataContentHandler> = ::javax_activation / "ObjectDataContentHandler";
namespace javax::activation { class SecuritySupport; }
template<> constexpr auto signature<::javax::activation::SecuritySupport> = ::javax_activation / "SecuritySupport";
namespace javax::activation { class SecuritySupport$1; }
template<> constexpr auto signature<::javax::activation::SecuritySupport$1> = ::javax_activation / "SecuritySupport$1";
namespace javax::activation { class SecuritySupport$2; }
template<> constexpr auto signature<::javax::activation::SecuritySupport$2> = ::javax_activation / "SecuritySupport$2";
namespace javax::activation { class SecuritySupport$3; }
template<> constexpr auto signature<::javax::activation::SecuritySupport$3> = ::javax_activation / "SecuritySupport$3";
namespace javax::activation { class SecuritySupport$4; }
template<> constexpr auto signature<::javax::activation::SecuritySupport$4> = ::javax_activation / "SecuritySupport$4";
namespace javax::activation { class SecuritySupport$5; }
template<> constexpr auto signature<::javax::activation::SecuritySupport$5> = ::javax_activation / "SecuritySupport$5";
namespace javax::activation { class URLDataSource; }
template<> constexpr auto signature<::javax::activation::URLDataSource> = ::javax_activation / "URLDataSource";
namespace javax::activation { class UnsupportedDataTypeException; }
template<> constexpr auto signature<::javax::activation::UnsupportedDataTypeException> = ::javax_activation / "UnsupportedDataTypeException";
namespace javax::activity { class ActivityCompletedException; }
template<> constexpr auto signature<::javax::activity::ActivityCompletedException> = ::javax_activity / "ActivityCompletedException";
namespace javax::activity { class ActivityRequiredException; }
template<> constexpr auto signature<::javax::activity::ActivityRequiredException> = ::javax_activity / "ActivityRequiredException";
namespace javax::activity { class InvalidActivityException; }
template<> constexpr auto signature<::javax::activity::InvalidActivityException> = ::javax_activity / "InvalidActivityException";
namespace javax::annotation { class Generated; }
template<> constexpr auto signature<::javax::annotation::Generated> = ::javax_annotation / "Generated";
namespace javax::annotation { class PostConstruct; }
template<> constexpr auto signature<::javax::annotation::PostConstruct> = ::javax_annotation / "PostConstruct";
namespace javax::annotation { class PreDestroy; }
template<> constexpr auto signature<::javax::annotation::PreDestroy> = ::javax_annotation / "PreDestroy";
namespace javax::annotation { class Resource; }
template<> constexpr auto signature<::javax::annotation::Resource> = ::javax_annotation / "Resource";
namespace javax::annotation { class Resource$AuthenticationType; }
template<> constexpr auto signature<::javax::annotation::Resource$AuthenticationType> = ::javax_annotation / "Resource$AuthenticationType";
namespace javax::annotation { class Resources; }
template<> constexpr auto signature<::javax::annotation::Resources> = ::javax_annotation / "Resources";
namespace javax::annotation::processing { class AbstractProcessor; }
template<> constexpr auto signature<::javax::annotation::processing::AbstractProcessor> = ::javax_annotation_processing / "AbstractProcessor";
namespace javax::annotation::processing { class Completion; }
template<> constexpr auto signature<::javax::annotation::processing::Completion> = ::javax_annotation_processing / "Completion";
namespace javax::annotation::processing { class Completions; }
template<> constexpr auto signature<::javax::annotation::processing::Completions> = ::javax_annotation_processing / "Completions";
namespace javax::annotation::processing { class Completions$SimpleCompletion; }
template<> constexpr auto signature<::javax::annotation::processing::Completions$SimpleCompletion> = ::javax_annotation_processing / "Completions$SimpleCompletion";
namespace javax::annotation::processing { class Filer; }
template<> constexpr auto signature<::javax::annotation::processing::Filer> = ::javax_annotation_processing / "Filer";
namespace javax::annotation::processing { class FilerException; }
template<> constexpr auto signature<::javax::annotation::processing::FilerException> = ::javax_annotation_processing / "FilerException";
namespace javax::annotation::processing { class Messager; }
template<> constexpr auto signature<::javax::annotation::processing::Messager> = ::javax_annotation_processing / "Messager";
namespace javax::annotation::processing { class ProcessingEnvironment; }
template<> constexpr auto signature<::javax::annotation::processing::ProcessingEnvironment> = ::javax_annotation_processing / "ProcessingEnvironment";
namespace javax::annotation::processing { class Processor; }
template<> constexpr auto signature<::javax::annotation::processing::Processor> = ::javax_annotation_processing / "Processor";
namespace javax::annotation::processing { class RoundEnvironment; }
template<> constexpr auto signature<::javax::annotation::processing::RoundEnvironment> = ::javax_annotation_processing / "RoundEnvironment";
namespace javax::annotation::processing { class SupportedAnnotationTypes; }
template<> constexpr auto signature<::javax::annotation::processing::SupportedAnnotationTypes> = ::javax_annotation_processing / "SupportedAnnotationTypes";
namespace javax::annotation::processing { class SupportedOptions; }
template<> constexpr auto signature<::javax::annotation::processing::SupportedOptions> = ::javax_annotation_processing / "SupportedOptions";
namespace javax::annotation::processing { class SupportedSourceVersion; }
template<> constexpr auto signature<::javax::annotation::processing::SupportedSourceVersion> = ::javax_annotation_processing / "SupportedSourceVersion";
namespace javax::crypto { class AEADBadTagException; }
template<> constexpr auto signature<::javax::crypto::AEADBadTagException> = ::javax_crypto / "AEADBadTagException";
namespace javax::crypto { class BadPaddingException; }
template<> constexpr auto signature<::javax::crypto::BadPaddingException> = ::javax_crypto / "BadPaddingException";
namespace javax::crypto { class Cipher; }
template<> constexpr auto signature<::javax::crypto::Cipher> = ::javax_crypto / "Cipher";
namespace javax::crypto { class Cipher$Transform; }
template<> constexpr auto signature<::javax::crypto::Cipher$Transform> = ::javax_crypto / "Cipher$Transform";
namespace javax::crypto { class CipherInputStream; }
template<> constexpr auto signature<::javax::crypto::CipherInputStream> = ::javax_crypto / "CipherInputStream";
namespace javax::crypto { class CipherOutputStream; }
template<> constexpr auto signature<::javax::crypto::CipherOutputStream> = ::javax_crypto / "CipherOutputStream";
namespace javax::crypto { class CipherSpi; }
template<> constexpr auto signature<::javax::crypto::CipherSpi> = ::javax_crypto / "CipherSpi";
namespace javax::crypto { class CryptoAllPermission; }
template<> constexpr auto signature<::javax::crypto::CryptoAllPermission> = ::javax_crypto / "CryptoAllPermission";
namespace javax::crypto { class CryptoAllPermissionCollection; }
template<> constexpr auto signature<::javax::crypto::CryptoAllPermissionCollection> = ::javax_crypto / "CryptoAllPermissionCollection";
namespace javax::crypto { class CryptoPermission; }
template<> constexpr auto signature<::javax::crypto::CryptoPermission> = ::javax_crypto / "CryptoPermission";
namespace javax::crypto { class CryptoPermissionCollection; }
template<> constexpr auto signature<::javax::crypto::CryptoPermissionCollection> = ::javax_crypto / "CryptoPermissionCollection";
namespace javax::crypto { class CryptoPermissions; }
template<> constexpr auto signature<::javax::crypto::CryptoPermissions> = ::javax_crypto / "CryptoPermissions";
namespace javax::crypto { class CryptoPolicyParser; }
template<> constexpr auto signature<::javax::crypto::CryptoPolicyParser> = ::javax_crypto / "CryptoPolicyParser";
namespace javax::crypto { class CryptoPolicyParser$CryptoPermissionEntry; }
template<> constexpr auto signature<::javax::crypto::CryptoPolicyParser$CryptoPermissionEntry> = ::javax_crypto / "CryptoPolicyParser$CryptoPermissionEntry";
namespace javax::crypto { class CryptoPolicyParser$GrantEntry; }
template<> constexpr auto signature<::javax::crypto::CryptoPolicyParser$GrantEntry> = ::javax_crypto / "CryptoPolicyParser$GrantEntry";
namespace javax::crypto { class CryptoPolicyParser$ParsingException; }
template<> constexpr auto signature<::javax::crypto::CryptoPolicyParser$ParsingException> = ::javax_crypto / "CryptoPolicyParser$ParsingException";
namespace javax::crypto { class EncryptedPrivateKeyInfo; }
template<> constexpr auto signature<::javax::crypto::EncryptedPrivateKeyInfo> = ::javax_crypto / "EncryptedPrivateKeyInfo";
namespace javax::crypto { class ExemptionMechanism; }
template<> constexpr auto signature<::javax::crypto::ExemptionMechanism> = ::javax_crypto / "ExemptionMechanism";
namespace javax::crypto { class ExemptionMechanismException; }
template<> constexpr auto signature<::javax::crypto::ExemptionMechanismException> = ::javax_crypto / "ExemptionMechanismException";
namespace javax::crypto { class ExemptionMechanismSpi; }
template<> constexpr auto signature<::javax::crypto::ExemptionMechanismSpi> = ::javax_crypto / "ExemptionMechanismSpi";
namespace javax::crypto { class IllegalBlockSizeException; }
template<> constexpr auto signature<::javax::crypto::IllegalBlockSizeException> = ::javax_crypto / "IllegalBlockSizeException";
namespace javax::crypto { class JarVerifier; }
template<> constexpr auto signature<::javax::crypto::JarVerifier> = ::javax_crypto / "JarVerifier";
namespace javax::crypto { class JarVerifier$1; }
template<> constexpr auto signature<::javax::crypto::JarVerifier$1> = ::javax_crypto / "JarVerifier$1";
namespace javax::crypto { class JceSecurity; }
template<> constexpr auto signature<::javax::crypto::JceSecurity> = ::javax_crypto / "JceSecurity";
namespace javax::crypto { class JceSecurity$1; }
template<> constexpr auto signature<::javax::crypto::JceSecurity$1> = ::javax_crypto / "JceSecurity$1";
namespace javax::crypto { class JceSecurity$2; }
template<> constexpr auto signature<::javax::crypto::JceSecurity$2> = ::javax_crypto / "JceSecurity$2";
namespace javax::crypto { class JceSecurityManager; }
template<> constexpr auto signature<::javax::crypto::JceSecurityManager> = ::javax_crypto / "JceSecurityManager";
namespace javax::crypto { class JceSecurityManager$1; }
template<> constexpr auto signature<::javax::crypto::JceSecurityManager$1> = ::javax_crypto / "JceSecurityManager$1";
namespace javax::crypto { class KeyAgreement; }
template<> constexpr auto signature<::javax::crypto::KeyAgreement> = ::javax_crypto / "KeyAgreement";
namespace javax::crypto { class KeyAgreementSpi; }
template<> constexpr auto signature<::javax::crypto::KeyAgreementSpi> = ::javax_crypto / "KeyAgreementSpi";
namespace javax::crypto { class KeyGenerator; }
template<> constexpr auto signature<::javax::crypto::KeyGenerator> = ::javax_crypto / "KeyGenerator";
namespace javax::crypto { class KeyGeneratorSpi; }
template<> constexpr auto signature<::javax::crypto::KeyGeneratorSpi> = ::javax_crypto / "KeyGeneratorSpi";
namespace javax::crypto { class Mac; }
template<> constexpr auto signature<::javax::crypto::Mac> = ::javax_crypto / "Mac";
namespace javax::crypto { class MacSpi; }
template<> constexpr auto signature<::javax::crypto::MacSpi> = ::javax_crypto / "MacSpi";
namespace javax::crypto { class NoSuchPaddingException; }
template<> constexpr auto signature<::javax::crypto::NoSuchPaddingException> = ::javax_crypto / "NoSuchPaddingException";
namespace javax::crypto { class NullCipher; }
template<> constexpr auto signature<::javax::crypto::NullCipher> = ::javax_crypto / "NullCipher";
namespace javax::crypto { class NullCipherSpi; }
template<> constexpr auto signature<::javax::crypto::NullCipherSpi> = ::javax_crypto / "NullCipherSpi";
namespace javax::crypto { class PermissionsEnumerator; }
template<> constexpr auto signature<::javax::crypto::PermissionsEnumerator> = ::javax_crypto / "PermissionsEnumerator";
namespace javax::crypto { class SealedObject; }
template<> constexpr auto signature<::javax::crypto::SealedObject> = ::javax_crypto / "SealedObject";
namespace javax::crypto { class SecretKey; }
template<> constexpr auto signature<::javax::crypto::SecretKey> = ::javax_crypto / "SecretKey";
namespace javax::crypto { class SecretKeyFactory; }
template<> constexpr auto signature<::javax::crypto::SecretKeyFactory> = ::javax_crypto / "SecretKeyFactory";
namespace javax::crypto { class SecretKeyFactorySpi; }
template<> constexpr auto signature<::javax::crypto::SecretKeyFactorySpi> = ::javax_crypto / "SecretKeyFactorySpi";
namespace javax::crypto { class ShortBufferException; }
template<> constexpr auto signature<::javax::crypto::ShortBufferException> = ::javax_crypto / "ShortBufferException";
namespace javax::crypto { class extObjectInputStream; }
template<> constexpr auto signature<::javax::crypto::extObjectInputStream> = ::javax_crypto / "extObjectInputStream";
namespace javax::crypto::interfaces { class DHKey; }
template<> constexpr auto signature<::javax::crypto::interfaces::DHKey> = ::javax_crypto_interfaces / "DHKey";
namespace javax::crypto::interfaces { class DHPrivateKey; }
template<> constexpr auto signature<::javax::crypto::interfaces::DHPrivateKey> = ::javax_crypto_interfaces / "DHPrivateKey";
namespace javax::crypto::interfaces { class DHPublicKey; }
template<> constexpr auto signature<::javax::crypto::interfaces::DHPublicKey> = ::javax_crypto_interfaces / "DHPublicKey";
namespace javax::crypto::interfaces { class PBEKey; }
template<> constexpr auto signature<::javax::crypto::interfaces::PBEKey> = ::javax_crypto_interfaces / "PBEKey";
namespace javax::crypto::spec { class DESKeySpec; }
template<> constexpr auto signature<::javax::crypto::spec::DESKeySpec> = ::javax_crypto_spec / "DESKeySpec";
namespace javax::crypto::spec { class DESedeKeySpec; }
template<> constexpr auto signature<::javax::crypto::spec::DESedeKeySpec> = ::javax_crypto_spec / "DESedeKeySpec";
namespace javax::crypto::spec { class DHGenParameterSpec; }
template<> constexpr auto signature<::javax::crypto::spec::DHGenParameterSpec> = ::javax_crypto_spec / "DHGenParameterSpec";
namespace javax::crypto::spec { class DHParameterSpec; }
template<> constexpr auto signature<::javax::crypto::spec::DHParameterSpec> = ::javax_crypto_spec / "DHParameterSpec";
namespace javax::crypto::spec { class DHPrivateKeySpec; }
template<> constexpr auto signature<::javax::crypto::spec::DHPrivateKeySpec> = ::javax_crypto_spec / "DHPrivateKeySpec";
namespace javax::crypto::spec { class DHPublicKeySpec; }
template<> constexpr auto signature<::javax::crypto::spec::DHPublicKeySpec> = ::javax_crypto_spec / "DHPublicKeySpec";
namespace javax::crypto::spec { class GCMParameterSpec; }
template<> constexpr auto signature<::javax::crypto::spec::GCMParameterSpec> = ::javax_crypto_spec / "GCMParameterSpec";
namespace javax::crypto::spec { class IvParameterSpec; }
template<> constexpr auto signature<::javax::crypto::spec::IvParameterSpec> = ::javax_crypto_spec / "IvParameterSpec";
namespace javax::crypto::spec { class OAEPParameterSpec; }
template<> constexpr auto signature<::javax::crypto::spec::OAEPParameterSpec> = ::javax_crypto_spec / "OAEPParameterSpec";
namespace javax::crypto::spec { class PBEKeySpec; }
template<> constexpr auto signature<::javax::crypto::spec::PBEKeySpec> = ::javax_crypto_spec / "PBEKeySpec";
namespace javax::crypto::spec { class PBEParameterSpec; }
template<> constexpr auto signature<::javax::crypto::spec::PBEParameterSpec> = ::javax_crypto_spec / "PBEParameterSpec";
namespace javax::crypto::spec { class PSource; }
template<> constexpr auto signature<::javax::crypto::spec::PSource> = ::javax_crypto_spec / "PSource";
namespace javax::crypto::spec { class PSource$PSpecified; }
template<> constexpr auto signature<::javax::crypto::spec::PSource$PSpecified> = ::javax_crypto_spec / "PSource$PSpecified";
namespace javax::crypto::spec { class RC2ParameterSpec; }
template<> constexpr auto signature<::javax::crypto::spec::RC2ParameterSpec> = ::javax_crypto_spec / "RC2ParameterSpec";
namespace javax::crypto::spec { class RC5ParameterSpec; }
template<> constexpr auto signature<::javax::crypto::spec::RC5ParameterSpec> = ::javax_crypto_spec / "RC5ParameterSpec";
namespace javax::crypto::spec { class SecretKeySpec; }
template<> constexpr auto signature<::javax::crypto::spec::SecretKeySpec> = ::javax_crypto_spec / "SecretKeySpec";
namespace javax::imageio { class IIOException; }
template<> constexpr auto signature<::javax::imageio::IIOException> = ::javax_imageio / "IIOException";
namespace javax::imageio { class IIOImage; }
template<> constexpr auto signature<::javax::imageio::IIOImage> = ::javax_imageio / "IIOImage";
namespace javax::imageio { class IIOParam; }
template<> constexpr auto signature<::javax::imageio::IIOParam> = ::javax_imageio / "IIOParam";
namespace javax::imageio { class IIOParamController; }
template<> constexpr auto signature<::javax::imageio::IIOParamController> = ::javax_imageio / "IIOParamController";
namespace javax::imageio { class ImageIO; }
template<> constexpr auto signature<::javax::imageio::ImageIO> = ::javax_imageio / "ImageIO";
namespace javax::imageio { class ImageIO$1; }
template<> constexpr auto signature<::javax::imageio::ImageIO$1> = ::javax_imageio / "ImageIO$1";
namespace javax::imageio { class ImageIO$CacheInfo; }
template<> constexpr auto signature<::javax::imageio::ImageIO$CacheInfo> = ::javax_imageio / "ImageIO$CacheInfo";
namespace javax::imageio { class ImageIO$CanDecodeInputFilter; }
template<> constexpr auto signature<::javax::imageio::ImageIO$CanDecodeInputFilter> = ::javax_imageio / "ImageIO$CanDecodeInputFilter";
namespace javax::imageio { class ImageIO$CanEncodeImageAndFormatFilter; }
template<> constexpr auto signature<::javax::imageio::ImageIO$CanEncodeImageAndFormatFilter> = ::javax_imageio / "ImageIO$CanEncodeImageAndFormatFilter";
namespace javax::imageio { class ImageIO$ContainsFilter; }
template<> constexpr auto signature<::javax::imageio::ImageIO$ContainsFilter> = ::javax_imageio / "ImageIO$ContainsFilter";
namespace javax::imageio { class ImageIO$ImageReaderIterator; }
template<> constexpr auto signature<::javax::imageio::ImageIO$ImageReaderIterator> = ::javax_imageio / "ImageIO$ImageReaderIterator";
namespace javax::imageio { class ImageIO$ImageTranscoderIterator; }
template<> constexpr auto signature<::javax::imageio::ImageIO$ImageTranscoderIterator> = ::javax_imageio / "ImageIO$ImageTranscoderIterator";
namespace javax::imageio { class ImageIO$ImageWriterIterator; }
template<> constexpr auto signature<::javax::imageio::ImageIO$ImageWriterIterator> = ::javax_imageio / "ImageIO$ImageWriterIterator";
namespace javax::imageio { class ImageIO$SpiInfo; }
template<> constexpr auto signature<::javax::imageio::ImageIO$SpiInfo> = ::javax_imageio / "ImageIO$SpiInfo";
namespace javax::imageio { class ImageIO$SpiInfo$1; }
template<> constexpr auto signature<::javax::imageio::ImageIO$SpiInfo$1> = ::javax_imageio / "ImageIO$SpiInfo$1";
namespace javax::imageio { class ImageIO$SpiInfo$2; }
template<> constexpr auto signature<::javax::imageio::ImageIO$SpiInfo$2> = ::javax_imageio / "ImageIO$SpiInfo$2";
namespace javax::imageio { class ImageIO$SpiInfo$3; }
template<> constexpr auto signature<::javax::imageio::ImageIO$SpiInfo$3> = ::javax_imageio / "ImageIO$SpiInfo$3";
namespace javax::imageio { class ImageIO$TranscoderFilter; }
template<> constexpr auto signature<::javax::imageio::ImageIO$TranscoderFilter> = ::javax_imageio / "ImageIO$TranscoderFilter";
namespace javax::imageio { class ImageReadParam; }
template<> constexpr auto signature<::javax::imageio::ImageReadParam> = ::javax_imageio / "ImageReadParam";
namespace javax::imageio { class ImageReader; }
template<> constexpr auto signature<::javax::imageio::ImageReader> = ::javax_imageio / "ImageReader";
namespace javax::imageio { class ImageReader$1; }
template<> constexpr auto signature<::javax::imageio::ImageReader$1> = ::javax_imageio / "ImageReader$1";
namespace javax::imageio { class ImageTranscoder; }
template<> constexpr auto signature<::javax::imageio::ImageTranscoder> = ::javax_imageio / "ImageTranscoder";
namespace javax::imageio { class ImageTypeSpecifier; }
template<> constexpr auto signature<::javax::imageio::ImageTypeSpecifier> = ::javax_imageio / "ImageTypeSpecifier";
namespace javax::imageio { class ImageTypeSpecifier$1; }
template<> constexpr auto signature<::javax::imageio::ImageTypeSpecifier$1> = ::javax_imageio / "ImageTypeSpecifier$1";
namespace javax::imageio { class ImageTypeSpecifier$Banded; }
template<> constexpr auto signature<::javax::imageio::ImageTypeSpecifier$Banded> = ::javax_imageio / "ImageTypeSpecifier$Banded";
namespace javax::imageio { class ImageTypeSpecifier$Grayscale; }
template<> constexpr auto signature<::javax::imageio::ImageTypeSpecifier$Grayscale> = ::javax_imageio / "ImageTypeSpecifier$Grayscale";
namespace javax::imageio { class ImageTypeSpecifier$Indexed; }
template<> constexpr auto signature<::javax::imageio::ImageTypeSpecifier$Indexed> = ::javax_imageio / "ImageTypeSpecifier$Indexed";
namespace javax::imageio { class ImageTypeSpecifier$Interleaved; }
template<> constexpr auto signature<::javax::imageio::ImageTypeSpecifier$Interleaved> = ::javax_imageio / "ImageTypeSpecifier$Interleaved";
namespace javax::imageio { class ImageTypeSpecifier$Packed; }
template<> constexpr auto signature<::javax::imageio::ImageTypeSpecifier$Packed> = ::javax_imageio / "ImageTypeSpecifier$Packed";
namespace javax::imageio { class ImageWriteParam; }
template<> constexpr auto signature<::javax::imageio::ImageWriteParam> = ::javax_imageio / "ImageWriteParam";
namespace javax::imageio { class ImageWriter; }
template<> constexpr auto signature<::javax::imageio::ImageWriter> = ::javax_imageio / "ImageWriter";
namespace javax::imageio { class ImageWriter$1; }
template<> constexpr auto signature<::javax::imageio::ImageWriter$1> = ::javax_imageio / "ImageWriter$1";
namespace javax::imageio::event { class IIOReadProgressListener; }
template<> constexpr auto signature<::javax::imageio::event::IIOReadProgressListener> = ::javax_imageio_event / "IIOReadProgressListener";
namespace javax::imageio::event { class IIOReadUpdateListener; }
template<> constexpr auto signature<::javax::imageio::event::IIOReadUpdateListener> = ::javax_imageio_event / "IIOReadUpdateListener";
namespace javax::imageio::event { class IIOReadWarningListener; }
template<> constexpr auto signature<::javax::imageio::event::IIOReadWarningListener> = ::javax_imageio_event / "IIOReadWarningListener";
namespace javax::imageio::event { class IIOWriteProgressListener; }
template<> constexpr auto signature<::javax::imageio::event::IIOWriteProgressListener> = ::javax_imageio_event / "IIOWriteProgressListener";
namespace javax::imageio::event { class IIOWriteWarningListener; }
template<> constexpr auto signature<::javax::imageio::event::IIOWriteWarningListener> = ::javax_imageio_event / "IIOWriteWarningListener";
namespace javax::imageio::metadata { class IIOAttr; }
template<> constexpr auto signature<::javax::imageio::metadata::IIOAttr> = ::javax_imageio_metadata / "IIOAttr";
namespace javax::imageio::metadata { class IIODOMException; }
template<> constexpr auto signature<::javax::imageio::metadata::IIODOMException> = ::javax_imageio_metadata / "IIODOMException";
namespace javax::imageio::metadata { class IIOInvalidTreeException; }
template<> constexpr auto signature<::javax::imageio::metadata::IIOInvalidTreeException> = ::javax_imageio_metadata / "IIOInvalidTreeException";
namespace javax::imageio::metadata { class IIOMetadata; }
template<> constexpr auto signature<::javax::imageio::metadata::IIOMetadata> = ::javax_imageio_metadata / "IIOMetadata";
namespace javax::imageio::metadata { class IIOMetadata$1; }
template<> constexpr auto signature<::javax::imageio::metadata::IIOMetadata$1> = ::javax_imageio_metadata / "IIOMetadata$1";
namespace javax::imageio::metadata { class IIOMetadata$2; }
template<> constexpr auto signature<::javax::imageio::metadata::IIOMetadata$2> = ::javax_imageio_metadata / "IIOMetadata$2";
namespace javax::imageio::metadata { class IIOMetadataController; }
template<> constexpr auto signature<::javax::imageio::metadata::IIOMetadataController> = ::javax_imageio_metadata / "IIOMetadataController";
namespace javax::imageio::metadata { class IIOMetadataFormat; }
template<> constexpr auto signature<::javax::imageio::metadata::IIOMetadataFormat> = ::javax_imageio_metadata / "IIOMetadataFormat";
namespace javax::imageio::metadata { class IIOMetadataFormatImpl; }
template<> constexpr auto signature<::javax::imageio::metadata::IIOMetadataFormatImpl> = ::javax_imageio_metadata / "IIOMetadataFormatImpl";
namespace javax::imageio::metadata { class IIOMetadataFormatImpl$1; }
template<> constexpr auto signature<::javax::imageio::metadata::IIOMetadataFormatImpl$1> = ::javax_imageio_metadata / "IIOMetadataFormatImpl$1";
namespace javax::imageio::metadata { class IIOMetadataFormatImpl$Attribute; }
template<> constexpr auto signature<::javax::imageio::metadata::IIOMetadataFormatImpl$Attribute> = ::javax_imageio_metadata / "IIOMetadataFormatImpl$Attribute";
namespace javax::imageio::metadata { class IIOMetadataFormatImpl$Element; }
template<> constexpr auto signature<::javax::imageio::metadata::IIOMetadataFormatImpl$Element> = ::javax_imageio_metadata / "IIOMetadataFormatImpl$Element";
namespace javax::imageio::metadata { class IIOMetadataFormatImpl$ObjectValue; }
template<> constexpr auto signature<::javax::imageio::metadata::IIOMetadataFormatImpl$ObjectValue> = ::javax_imageio_metadata / "IIOMetadataFormatImpl$ObjectValue";
namespace javax::imageio::metadata { class IIOMetadataNode; }
template<> constexpr auto signature<::javax::imageio::metadata::IIOMetadataNode> = ::javax_imageio_metadata / "IIOMetadataNode";
namespace javax::imageio::metadata { class IIONamedNodeMap; }
template<> constexpr auto signature<::javax::imageio::metadata::IIONamedNodeMap> = ::javax_imageio_metadata / "IIONamedNodeMap";
namespace javax::imageio::metadata { class IIONodeList; }
template<> constexpr auto signature<::javax::imageio::metadata::IIONodeList> = ::javax_imageio_metadata / "IIONodeList";
namespace javax::imageio::plugins::bmp { class BMPImageWriteParam; }
template<> constexpr auto signature<::javax::imageio::plugins::bmp::BMPImageWriteParam> = ::javax_imageio_plugins_bmp / "BMPImageWriteParam";
namespace javax::imageio::plugins::jpeg { class JPEGHuffmanTable; }
template<> constexpr auto signature<::javax::imageio::plugins::jpeg::JPEGHuffmanTable> = ::javax_imageio_plugins_jpeg / "JPEGHuffmanTable";
namespace javax::imageio::plugins::jpeg { class JPEGImageReadParam; }
template<> constexpr auto signature<::javax::imageio::plugins::jpeg::JPEGImageReadParam> = ::javax_imageio_plugins_jpeg / "JPEGImageReadParam";
namespace javax::imageio::plugins::jpeg { class JPEGImageWriteParam; }
template<> constexpr auto signature<::javax::imageio::plugins::jpeg::JPEGImageWriteParam> = ::javax_imageio_plugins_jpeg / "JPEGImageWriteParam";
namespace javax::imageio::plugins::jpeg { class JPEGQTable; }
template<> constexpr auto signature<::javax::imageio::plugins::jpeg::JPEGQTable> = ::javax_imageio_plugins_jpeg / "JPEGQTable";
namespace javax::imageio::spi { class DigraphNode; }
template<> constexpr auto signature<::javax::imageio::spi::DigraphNode> = ::javax_imageio_spi / "DigraphNode";
namespace javax::imageio::spi { class FilterIterator; }
template<> constexpr auto signature<::javax::imageio::spi::FilterIterator> = ::javax_imageio_spi / "FilterIterator";
namespace javax::imageio::spi { class IIORegistry; }
template<> constexpr auto signature<::javax::imageio::spi::IIORegistry> = ::javax_imageio_spi / "IIORegistry";
namespace javax::imageio::spi { class IIORegistry$1; }
template<> constexpr auto signature<::javax::imageio::spi::IIORegistry$1> = ::javax_imageio_spi / "IIORegistry$1";
namespace javax::imageio::spi { class IIOServiceProvider; }
template<> constexpr auto signature<::javax::imageio::spi::IIOServiceProvider> = ::javax_imageio_spi / "IIOServiceProvider";
namespace javax::imageio::spi { class ImageInputStreamSpi; }
template<> constexpr auto signature<::javax::imageio::spi::ImageInputStreamSpi> = ::javax_imageio_spi / "ImageInputStreamSpi";
namespace javax::imageio::spi { class ImageOutputStreamSpi; }
template<> constexpr auto signature<::javax::imageio::spi::ImageOutputStreamSpi> = ::javax_imageio_spi / "ImageOutputStreamSpi";
namespace javax::imageio::spi { class ImageReaderSpi; }
template<> constexpr auto signature<::javax::imageio::spi::ImageReaderSpi> = ::javax_imageio_spi / "ImageReaderSpi";
namespace javax::imageio::spi { class ImageReaderWriterSpi; }
template<> constexpr auto signature<::javax::imageio::spi::ImageReaderWriterSpi> = ::javax_imageio_spi / "ImageReaderWriterSpi";
namespace javax::imageio::spi { class ImageTranscoderSpi; }
template<> constexpr auto signature<::javax::imageio::spi::ImageTranscoderSpi> = ::javax_imageio_spi / "ImageTranscoderSpi";
namespace javax::imageio::spi { class ImageWriterSpi; }
template<> constexpr auto signature<::javax::imageio::spi::ImageWriterSpi> = ::javax_imageio_spi / "ImageWriterSpi";
namespace javax::imageio::spi { class PartialOrderIterator; }
template<> constexpr auto signature<::javax::imageio::spi::PartialOrderIterator> = ::javax_imageio_spi / "PartialOrderIterator";
namespace javax::imageio::spi { class PartiallyOrderedSet; }
template<> constexpr auto signature<::javax::imageio::spi::PartiallyOrderedSet> = ::javax_imageio_spi / "PartiallyOrderedSet";
namespace javax::imageio::spi { class RegisterableService; }
template<> constexpr auto signature<::javax::imageio::spi::RegisterableService> = ::javax_imageio_spi / "RegisterableService";
namespace javax::imageio::spi { class ServiceRegistry; }
template<> constexpr auto signature<::javax::imageio::spi::ServiceRegistry> = ::javax_imageio_spi / "ServiceRegistry";
namespace javax::imageio::spi { class ServiceRegistry$Filter; }
template<> constexpr auto signature<::javax::imageio::spi::ServiceRegistry$Filter> = ::javax_imageio_spi / "ServiceRegistry$Filter";
namespace javax::imageio::spi { class SubRegistry; }
template<> constexpr auto signature<::javax::imageio::spi::SubRegistry> = ::javax_imageio_spi / "SubRegistry";
namespace javax::imageio::stream { class FileCacheImageInputStream; }
template<> constexpr auto signature<::javax::imageio::stream::FileCacheImageInputStream> = ::javax_imageio_stream / "FileCacheImageInputStream";
namespace javax::imageio::stream { class FileCacheImageInputStream$StreamDisposerRecord; }
template<> constexpr auto signature<::javax::imageio::stream::FileCacheImageInputStream$StreamDisposerRecord> = ::javax_imageio_stream / "FileCacheImageInputStream$StreamDisposerRecord";
namespace javax::imageio::stream { class FileCacheImageOutputStream; }
template<> constexpr auto signature<::javax::imageio::stream::FileCacheImageOutputStream> = ::javax_imageio_stream / "FileCacheImageOutputStream";
namespace javax::imageio::stream { class FileImageInputStream; }
template<> constexpr auto signature<::javax::imageio::stream::FileImageInputStream> = ::javax_imageio_stream / "FileImageInputStream";
namespace javax::imageio::stream { class FileImageOutputStream; }
template<> constexpr auto signature<::javax::imageio::stream::FileImageOutputStream> = ::javax_imageio_stream / "FileImageOutputStream";
namespace javax::imageio::stream { class IIOByteBuffer; }
template<> constexpr auto signature<::javax::imageio::stream::IIOByteBuffer> = ::javax_imageio_stream / "IIOByteBuffer";
namespace javax::imageio::stream { class ImageInputStream; }
template<> constexpr auto signature<::javax::imageio::stream::ImageInputStream> = ::javax_imageio_stream / "ImageInputStream";
namespace javax::imageio::stream { class ImageInputStreamImpl; }
template<> constexpr auto signature<::javax::imageio::stream::ImageInputStreamImpl> = ::javax_imageio_stream / "ImageInputStreamImpl";
namespace javax::imageio::stream { class ImageOutputStream; }
template<> constexpr auto signature<::javax::imageio::stream::ImageOutputStream> = ::javax_imageio_stream / "ImageOutputStream";
namespace javax::imageio::stream { class ImageOutputStreamImpl; }
template<> constexpr auto signature<::javax::imageio::stream::ImageOutputStreamImpl> = ::javax_imageio_stream / "ImageOutputStreamImpl";
namespace javax::imageio::stream { class MemoryCache; }
template<> constexpr auto signature<::javax::imageio::stream::MemoryCache> = ::javax_imageio_stream / "MemoryCache";
namespace javax::imageio::stream { class MemoryCacheImageInputStream; }
template<> constexpr auto signature<::javax::imageio::stream::MemoryCacheImageInputStream> = ::javax_imageio_stream / "MemoryCacheImageInputStream";
namespace javax::imageio::stream { class MemoryCacheImageInputStream$StreamDisposerRecord; }
template<> constexpr auto signature<::javax::imageio::stream::MemoryCacheImageInputStream$StreamDisposerRecord> = ::javax_imageio_stream / "MemoryCacheImageInputStream$StreamDisposerRecord";
namespace javax::imageio::stream { class MemoryCacheImageOutputStream; }
template<> constexpr auto signature<::javax::imageio::stream::MemoryCacheImageOutputStream> = ::javax_imageio_stream / "MemoryCacheImageOutputStream";
namespace javax::jws { class HandlerChain; }
template<> constexpr auto signature<::javax::jws::HandlerChain> = ::javax_jws / "HandlerChain";
namespace javax::jws { class Oneway; }
template<> constexpr auto signature<::javax::jws::Oneway> = ::javax_jws / "Oneway";
namespace javax::jws { class WebMethod; }
template<> constexpr auto signature<::javax::jws::WebMethod> = ::javax_jws / "WebMethod";
namespace javax::jws { class WebParam; }
template<> constexpr auto signature<::javax::jws::WebParam> = ::javax_jws / "WebParam";
namespace javax::jws { class WebParam$Mode; }
template<> constexpr auto signature<::javax::jws::WebParam$Mode> = ::javax_jws / "WebParam$Mode";
namespace javax::jws { class WebResult; }
template<> constexpr auto signature<::javax::jws::WebResult> = ::javax_jws / "WebResult";
namespace javax::jws { class WebService; }
template<> constexpr auto signature<::javax::jws::WebService> = ::javax_jws / "WebService";
namespace javax::jws::soap { class InitParam; }
template<> constexpr auto signature<::javax::jws::soap::InitParam> = ::javax_jws_soap / "InitParam";
namespace javax::jws::soap { class SOAPBinding; }
template<> constexpr auto signature<::javax::jws::soap::SOAPBinding> = ::javax_jws_soap / "SOAPBinding";
namespace javax::jws::soap { class SOAPBinding$ParameterStyle; }
template<> constexpr auto signature<::javax::jws::soap::SOAPBinding$ParameterStyle> = ::javax_jws_soap / "SOAPBinding$ParameterStyle";
namespace javax::jws::soap { class SOAPBinding$Style; }
template<> constexpr auto signature<::javax::jws::soap::SOAPBinding$Style> = ::javax_jws_soap / "SOAPBinding$Style";
namespace javax::jws::soap { class SOAPBinding$Use; }
template<> constexpr auto signature<::javax::jws::soap::SOAPBinding$Use> = ::javax_jws_soap / "SOAPBinding$Use";
namespace javax::jws::soap { class SOAPMessageHandler; }
template<> constexpr auto signature<::javax::jws::soap::SOAPMessageHandler> = ::javax_jws_soap / "SOAPMessageHandler";
namespace javax::jws::soap { class SOAPMessageHandlers; }
template<> constexpr auto signature<::javax::jws::soap::SOAPMessageHandlers> = ::javax_jws_soap / "SOAPMessageHandlers";
namespace javax::lang::model { class AnnotatedConstruct; }
template<> constexpr auto signature<::javax::lang::model::AnnotatedConstruct> = ::javax_lang_model / "AnnotatedConstruct";
namespace javax::lang::model { class SourceVersion; }
template<> constexpr auto signature<::javax::lang::model::SourceVersion> = ::javax_lang_model / "SourceVersion";
namespace javax::lang::model { class UnknownEntityException; }
template<> constexpr auto signature<::javax::lang::model::UnknownEntityException> = ::javax_lang_model / "UnknownEntityException";
namespace javax::lang::model::element { class AnnotationMirror; }
template<> constexpr auto signature<::javax::lang::model::element::AnnotationMirror> = ::javax_lang_model_element / "AnnotationMirror";
namespace javax::lang::model::element { class AnnotationValue; }
template<> constexpr auto signature<::javax::lang::model::element::AnnotationValue> = ::javax_lang_model_element / "AnnotationValue";
namespace javax::lang::model::element { class AnnotationValueVisitor; }
template<> constexpr auto signature<::javax::lang::model::element::AnnotationValueVisitor> = ::javax_lang_model_element / "AnnotationValueVisitor";
namespace javax::lang::model::element { class Element; }
template<> constexpr auto signature<::javax::lang::model::element::Element> = ::javax_lang_model_element / "Element";
namespace javax::lang::model::element { class ElementKind; }
template<> constexpr auto signature<::javax::lang::model::element::ElementKind> = ::javax_lang_model_element / "ElementKind";
namespace javax::lang::model::element { class ElementVisitor; }
template<> constexpr auto signature<::javax::lang::model::element::ElementVisitor> = ::javax_lang_model_element / "ElementVisitor";
namespace javax::lang::model::element { class ExecutableElement; }
template<> constexpr auto signature<::javax::lang::model::element::ExecutableElement> = ::javax_lang_model_element / "ExecutableElement";
namespace javax::lang::model::element { class Modifier; }
template<> constexpr auto signature<::javax::lang::model::element::Modifier> = ::javax_lang_model_element / "Modifier";
namespace javax::lang::model::element { class Name; }
template<> constexpr auto signature<::javax::lang::model::element::Name> = ::javax_lang_model_element / "Name";
namespace javax::lang::model::element { class NestingKind; }
template<> constexpr auto signature<::javax::lang::model::element::NestingKind> = ::javax_lang_model_element / "NestingKind";
namespace javax::lang::model::element { class PackageElement; }
template<> constexpr auto signature<::javax::lang::model::element::PackageElement> = ::javax_lang_model_element / "PackageElement";
namespace javax::lang::model::element { class Parameterizable; }
template<> constexpr auto signature<::javax::lang::model::element::Parameterizable> = ::javax_lang_model_element / "Parameterizable";
namespace javax::lang::model::element { class QualifiedNameable; }
template<> constexpr auto signature<::javax::lang::model::element::QualifiedNameable> = ::javax_lang_model_element / "QualifiedNameable";
namespace javax::lang::model::element { class TypeElement; }
template<> constexpr auto signature<::javax::lang::model::element::TypeElement> = ::javax_lang_model_element / "TypeElement";
namespace javax::lang::model::element { class TypeParameterElement; }
template<> constexpr auto signature<::javax::lang::model::element::TypeParameterElement> = ::javax_lang_model_element / "TypeParameterElement";
namespace javax::lang::model::element { class UnknownAnnotationValueException; }
template<> constexpr auto signature<::javax::lang::model::element::UnknownAnnotationValueException> = ::javax_lang_model_element / "UnknownAnnotationValueException";
namespace javax::lang::model::element { class UnknownElementException; }
template<> constexpr auto signature<::javax::lang::model::element::UnknownElementException> = ::javax_lang_model_element / "UnknownElementException";
namespace javax::lang::model::element { class VariableElement; }
template<> constexpr auto signature<::javax::lang::model::element::VariableElement> = ::javax_lang_model_element / "VariableElement";
namespace javax::lang::model::type { class ArrayType; }
template<> constexpr auto signature<::javax::lang::model::type::ArrayType> = ::javax_lang_model_type / "ArrayType";
namespace javax::lang::model::type { class DeclaredType; }
template<> constexpr auto signature<::javax::lang::model::type::DeclaredType> = ::javax_lang_model_type / "DeclaredType";
namespace javax::lang::model::type { class ErrorType; }
template<> constexpr auto signature<::javax::lang::model::type::ErrorType> = ::javax_lang_model_type / "ErrorType";
namespace javax::lang::model::type { class ExecutableType; }
template<> constexpr auto signature<::javax::lang::model::type::ExecutableType> = ::javax_lang_model_type / "ExecutableType";
namespace javax::lang::model::type { class IntersectionType; }
template<> constexpr auto signature<::javax::lang::model::type::IntersectionType> = ::javax_lang_model_type / "IntersectionType";
namespace javax::lang::model::type { class MirroredTypeException; }
template<> constexpr auto signature<::javax::lang::model::type::MirroredTypeException> = ::javax_lang_model_type / "MirroredTypeException";
namespace javax::lang::model::type { class MirroredTypesException; }
template<> constexpr auto signature<::javax::lang::model::type::MirroredTypesException> = ::javax_lang_model_type / "MirroredTypesException";
namespace javax::lang::model::type { class NoType; }
template<> constexpr auto signature<::javax::lang::model::type::NoType> = ::javax_lang_model_type / "NoType";
namespace javax::lang::model::type { class NullType; }
template<> constexpr auto signature<::javax::lang::model::type::NullType> = ::javax_lang_model_type / "NullType";
namespace javax::lang::model::type { class PrimitiveType; }
template<> constexpr auto signature<::javax::lang::model::type::PrimitiveType> = ::javax_lang_model_type / "PrimitiveType";
namespace javax::lang::model::type { class ReferenceType; }
template<> constexpr auto signature<::javax::lang::model::type::ReferenceType> = ::javax_lang_model_type / "ReferenceType";
namespace javax::lang::model::type { class TypeKind; }
template<> constexpr auto signature<::javax::lang::model::type::TypeKind> = ::javax_lang_model_type / "TypeKind";
namespace javax::lang::model::type { class TypeKind$1; }
template<> constexpr auto signature<::javax::lang::model::type::TypeKind$1> = ::javax_lang_model_type / "TypeKind$1";
namespace javax::lang::model::type { class TypeMirror; }
template<> constexpr auto signature<::javax::lang::model::type::TypeMirror> = ::javax_lang_model_type / "TypeMirror";
namespace javax::lang::model::type { class TypeVariable; }
template<> constexpr auto signature<::javax::lang::model::type::TypeVariable> = ::javax_lang_model_type / "TypeVariable";
namespace javax::lang::model::type { class TypeVisitor; }
template<> constexpr auto signature<::javax::lang::model::type::TypeVisitor> = ::javax_lang_model_type / "TypeVisitor";
namespace javax::lang::model::type { class UnionType; }
template<> constexpr auto signature<::javax::lang::model::type::UnionType> = ::javax_lang_model_type / "UnionType";
namespace javax::lang::model::type { class UnknownTypeException; }
template<> constexpr auto signature<::javax::lang::model::type::UnknownTypeException> = ::javax_lang_model_type / "UnknownTypeException";
namespace javax::lang::model::type { class WildcardType; }
template<> constexpr auto signature<::javax::lang::model::type::WildcardType> = ::javax_lang_model_type / "WildcardType";
namespace javax::lang::model::util { class AbstractAnnotationValueVisitor6; }
template<> constexpr auto signature<::javax::lang::model::util::AbstractAnnotationValueVisitor6> = ::javax_lang_model_util / "AbstractAnnotationValueVisitor6";
namespace javax::lang::model::util { class AbstractAnnotationValueVisitor7; }
template<> constexpr auto signature<::javax::lang::model::util::AbstractAnnotationValueVisitor7> = ::javax_lang_model_util / "AbstractAnnotationValueVisitor7";
namespace javax::lang::model::util { class AbstractAnnotationValueVisitor8; }
template<> constexpr auto signature<::javax::lang::model::util::AbstractAnnotationValueVisitor8> = ::javax_lang_model_util / "AbstractAnnotationValueVisitor8";
namespace javax::lang::model::util { class AbstractElementVisitor6; }
template<> constexpr auto signature<::javax::lang::model::util::AbstractElementVisitor6> = ::javax_lang_model_util / "AbstractElementVisitor6";
namespace javax::lang::model::util { class AbstractElementVisitor7; }
template<> constexpr auto signature<::javax::lang::model::util::AbstractElementVisitor7> = ::javax_lang_model_util / "AbstractElementVisitor7";
namespace javax::lang::model::util { class AbstractElementVisitor8; }
template<> constexpr auto signature<::javax::lang::model::util::AbstractElementVisitor8> = ::javax_lang_model_util / "AbstractElementVisitor8";
namespace javax::lang::model::util { class AbstractTypeVisitor6; }
template<> constexpr auto signature<::javax::lang::model::util::AbstractTypeVisitor6> = ::javax_lang_model_util / "AbstractTypeVisitor6";
namespace javax::lang::model::util { class AbstractTypeVisitor7; }
template<> constexpr auto signature<::javax::lang::model::util::AbstractTypeVisitor7> = ::javax_lang_model_util / "AbstractTypeVisitor7";
namespace javax::lang::model::util { class AbstractTypeVisitor8; }
template<> constexpr auto signature<::javax::lang::model::util::AbstractTypeVisitor8> = ::javax_lang_model_util / "AbstractTypeVisitor8";
namespace javax::lang::model::util { class ElementFilter; }
template<> constexpr auto signature<::javax::lang::model::util::ElementFilter> = ::javax_lang_model_util / "ElementFilter";
namespace javax::lang::model::util { class ElementKindVisitor6; }
template<> constexpr auto signature<::javax::lang::model::util::ElementKindVisitor6> = ::javax_lang_model_util / "ElementKindVisitor6";
namespace javax::lang::model::util { class ElementKindVisitor6$1; }
template<> constexpr auto signature<::javax::lang::model::util::ElementKindVisitor6$1> = ::javax_lang_model_util / "ElementKindVisitor6$1";
namespace javax::lang::model::util { class ElementKindVisitor7; }
template<> constexpr auto signature<::javax::lang::model::util::ElementKindVisitor7> = ::javax_lang_model_util / "ElementKindVisitor7";
namespace javax::lang::model::util { class ElementKindVisitor8; }
template<> constexpr auto signature<::javax::lang::model::util::ElementKindVisitor8> = ::javax_lang_model_util / "ElementKindVisitor8";
namespace javax::lang::model::util { class ElementScanner6; }
template<> constexpr auto signature<::javax::lang::model::util::ElementScanner6> = ::javax_lang_model_util / "ElementScanner6";
namespace javax::lang::model::util { class ElementScanner7; }
template<> constexpr auto signature<::javax::lang::model::util::ElementScanner7> = ::javax_lang_model_util / "ElementScanner7";
namespace javax::lang::model::util { class ElementScanner8; }
template<> constexpr auto signature<::javax::lang::model::util::ElementScanner8> = ::javax_lang_model_util / "ElementScanner8";
namespace javax::lang::model::util { class Elements; }
template<> constexpr auto signature<::javax::lang::model::util::Elements> = ::javax_lang_model_util / "Elements";
namespace javax::lang::model::util { class SimpleAnnotationValueVisitor6; }
template<> constexpr auto signature<::javax::lang::model::util::SimpleAnnotationValueVisitor6> = ::javax_lang_model_util / "SimpleAnnotationValueVisitor6";
namespace javax::lang::model::util { class SimpleAnnotationValueVisitor7; }
template<> constexpr auto signature<::javax::lang::model::util::SimpleAnnotationValueVisitor7> = ::javax_lang_model_util / "SimpleAnnotationValueVisitor7";
namespace javax::lang::model::util { class SimpleAnnotationValueVisitor8; }
template<> constexpr auto signature<::javax::lang::model::util::SimpleAnnotationValueVisitor8> = ::javax_lang_model_util / "SimpleAnnotationValueVisitor8";
namespace javax::lang::model::util { class SimpleElementVisitor6; }
template<> constexpr auto signature<::javax::lang::model::util::SimpleElementVisitor6> = ::javax_lang_model_util / "SimpleElementVisitor6";
namespace javax::lang::model::util { class SimpleElementVisitor7; }
template<> constexpr auto signature<::javax::lang::model::util::SimpleElementVisitor7> = ::javax_lang_model_util / "SimpleElementVisitor7";
namespace javax::lang::model::util { class SimpleElementVisitor8; }
template<> constexpr auto signature<::javax::lang::model::util::SimpleElementVisitor8> = ::javax_lang_model_util / "SimpleElementVisitor8";
namespace javax::lang::model::util { class SimpleTypeVisitor6; }
template<> constexpr auto signature<::javax::lang::model::util::SimpleTypeVisitor6> = ::javax_lang_model_util / "SimpleTypeVisitor6";
namespace javax::lang::model::util { class SimpleTypeVisitor7; }
template<> constexpr auto signature<::javax::lang::model::util::SimpleTypeVisitor7> = ::javax_lang_model_util / "SimpleTypeVisitor7";
namespace javax::lang::model::util { class SimpleTypeVisitor8; }
template<> constexpr auto signature<::javax::lang::model::util::SimpleTypeVisitor8> = ::javax_lang_model_util / "SimpleTypeVisitor8";
namespace javax::lang::model::util { class TypeKindVisitor6; }
template<> constexpr auto signature<::javax::lang::model::util::TypeKindVisitor6> = ::javax_lang_model_util / "TypeKindVisitor6";
namespace javax::lang::model::util { class TypeKindVisitor6$1; }
template<> constexpr auto signature<::javax::lang::model::util::TypeKindVisitor6$1> = ::javax_lang_model_util / "TypeKindVisitor6$1";
namespace javax::lang::model::util { class TypeKindVisitor7; }
template<> constexpr auto signature<::javax::lang::model::util::TypeKindVisitor7> = ::javax_lang_model_util / "TypeKindVisitor7";
namespace javax::lang::model::util { class TypeKindVisitor8; }
template<> constexpr auto signature<::javax::lang::model::util::TypeKindVisitor8> = ::javax_lang_model_util / "TypeKindVisitor8";
namespace javax::lang::model::util { class Types; }
template<> constexpr auto signature<::javax::lang::model::util::Types> = ::javax_lang_model_util / "Types";
namespace javax::management { class AndQueryExp; }
template<> constexpr auto signature<::javax::management::AndQueryExp> = ::javax_management / "AndQueryExp";
namespace javax::management { class Attribute; }
template<> constexpr auto signature<::javax::management::Attribute> = ::javax_management / "Attribute";
namespace javax::management { class AttributeChangeNotification; }
template<> constexpr auto signature<::javax::management::AttributeChangeNotification> = ::javax_management / "AttributeChangeNotification";
namespace javax::management { class AttributeChangeNotificationFilter; }
template<> constexpr auto signature<::javax::management::AttributeChangeNotificationFilter> = ::javax_management / "AttributeChangeNotificationFilter";
namespace javax::management { class AttributeList; }
template<> constexpr auto signature<::javax::management::AttributeList> = ::javax_management / "AttributeList";
namespace javax::management { class AttributeNotFoundException; }
template<> constexpr auto signature<::javax::management::AttributeNotFoundException> = ::javax_management / "AttributeNotFoundException";
namespace javax::management { class AttributeValueExp; }
template<> constexpr auto signature<::javax::management::AttributeValueExp> = ::javax_management / "AttributeValueExp";
namespace javax::management { class BadAttributeValueExpException; }
template<> constexpr auto signature<::javax::management::BadAttributeValueExpException> = ::javax_management / "BadAttributeValueExpException";
namespace javax::management { class BadBinaryOpValueExpException; }
template<> constexpr auto signature<::javax::management::BadBinaryOpValueExpException> = ::javax_management / "BadBinaryOpValueExpException";
namespace javax::management { class BadStringOperationException; }
template<> constexpr auto signature<::javax::management::BadStringOperationException> = ::javax_management / "BadStringOperationException";
namespace javax::management { class BetweenQueryExp; }
template<> constexpr auto signature<::javax::management::BetweenQueryExp> = ::javax_management / "BetweenQueryExp";
namespace javax::management { class BinaryOpValueExp; }
template<> constexpr auto signature<::javax::management::BinaryOpValueExp> = ::javax_management / "BinaryOpValueExp";
namespace javax::management { class BinaryRelQueryExp; }
template<> constexpr auto signature<::javax::management::BinaryRelQueryExp> = ::javax_management / "BinaryRelQueryExp";
namespace javax::management { class BooleanValueExp; }
template<> constexpr auto signature<::javax::management::BooleanValueExp> = ::javax_management / "BooleanValueExp";
namespace javax::management { class ClassAttributeValueExp; }
template<> constexpr auto signature<::javax::management::ClassAttributeValueExp> = ::javax_management / "ClassAttributeValueExp";
namespace javax::management { class DefaultLoaderRepository; }
template<> constexpr auto signature<::javax::management::DefaultLoaderRepository> = ::javax_management / "DefaultLoaderRepository";
namespace javax::management { class Descriptor; }
template<> constexpr auto signature<::javax::management::Descriptor> = ::javax_management / "Descriptor";
namespace javax::management { class DescriptorAccess; }
template<> constexpr auto signature<::javax::management::DescriptorAccess> = ::javax_management / "DescriptorAccess";
namespace javax::management { class DescriptorKey; }
template<> constexpr auto signature<::javax::management::DescriptorKey> = ::javax_management / "DescriptorKey";
namespace javax::management { class DescriptorRead; }
template<> constexpr auto signature<::javax::management::DescriptorRead> = ::javax_management / "DescriptorRead";
namespace javax::management { class DynamicMBean; }
template<> constexpr auto signature<::javax::management::DynamicMBean> = ::javax_management / "DynamicMBean";
namespace javax::management { class ImmutableDescriptor; }
template<> constexpr auto signature<::javax::management::ImmutableDescriptor> = ::javax_management / "ImmutableDescriptor";
namespace javax::management { class InQueryExp; }
template<> constexpr auto signature<::javax::management::InQueryExp> = ::javax_management / "InQueryExp";
namespace javax::management { class InstanceAlreadyExistsException; }
template<> constexpr auto signature<::javax::management::InstanceAlreadyExistsException> = ::javax_management / "InstanceAlreadyExistsException";
namespace javax::management { class InstanceNotFoundException; }
template<> constexpr auto signature<::javax::management::InstanceNotFoundException> = ::javax_management / "InstanceNotFoundException";
namespace javax::management { class InstanceOfQueryExp; }
template<> constexpr auto signature<::javax::management::InstanceOfQueryExp> = ::javax_management / "InstanceOfQueryExp";
namespace javax::management { class IntrospectionException; }
template<> constexpr auto signature<::javax::management::IntrospectionException> = ::javax_management / "IntrospectionException";
namespace javax::management { class InvalidApplicationException; }
template<> constexpr auto signature<::javax::management::InvalidApplicationException> = ::javax_management / "InvalidApplicationException";
namespace javax::management { class InvalidAttributeValueException; }
template<> constexpr auto signature<::javax::management::InvalidAttributeValueException> = ::javax_management / "InvalidAttributeValueException";
namespace javax::management { class JMException; }
template<> constexpr auto signature<::javax::management::JMException> = ::javax_management / "JMException";
namespace javax::management { class JMRuntimeException; }
template<> constexpr auto signature<::javax::management::JMRuntimeException> = ::javax_management / "JMRuntimeException";
namespace javax::management { class JMX; }
template<> constexpr auto signature<::javax::management::JMX> = ::javax_management / "JMX";
namespace javax::management { class ListenerNotFoundException; }
template<> constexpr auto signature<::javax::management::ListenerNotFoundException> = ::javax_management / "ListenerNotFoundException";
namespace javax::management { class MBeanAttributeInfo; }
template<> constexpr auto signature<::javax::management::MBeanAttributeInfo> = ::javax_management / "MBeanAttributeInfo";
namespace javax::management { class MBeanConstructorInfo; }
template<> constexpr auto signature<::javax::management::MBeanConstructorInfo> = ::javax_management / "MBeanConstructorInfo";
namespace javax::management { class MBeanException; }
template<> constexpr auto signature<::javax::management::MBeanException> = ::javax_management / "MBeanException";
namespace javax::management { class MBeanFeatureInfo; }
template<> constexpr auto signature<::javax::management::MBeanFeatureInfo> = ::javax_management / "MBeanFeatureInfo";
namespace javax::management { class MBeanInfo; }
template<> constexpr auto signature<::javax::management::MBeanInfo> = ::javax_management / "MBeanInfo";
namespace javax::management { class MBeanInfo$ArrayGettersSafeAction; }
template<> constexpr auto signature<::javax::management::MBeanInfo$ArrayGettersSafeAction> = ::javax_management / "MBeanInfo$ArrayGettersSafeAction";
namespace javax::management { class MBeanNotificationInfo; }
template<> constexpr auto signature<::javax::management::MBeanNotificationInfo> = ::javax_management / "MBeanNotificationInfo";
namespace javax::management { class MBeanOperationInfo; }
template<> constexpr auto signature<::javax::management::MBeanOperationInfo> = ::javax_management / "MBeanOperationInfo";
namespace javax::management { class MBeanParameterInfo; }
template<> constexpr auto signature<::javax::management::MBeanParameterInfo> = ::javax_management / "MBeanParameterInfo";
namespace javax::management { class MBeanPermission; }
template<> constexpr auto signature<::javax::management::MBeanPermission> = ::javax_management / "MBeanPermission";
namespace javax::management { class MBeanRegistration; }
template<> constexpr auto signature<::javax::management::MBeanRegistration> = ::javax_management / "MBeanRegistration";
namespace javax::management { class MBeanRegistrationException; }
template<> constexpr auto signature<::javax::management::MBeanRegistrationException> = ::javax_management / "MBeanRegistrationException";
namespace javax::management { class MBeanServer; }
template<> constexpr auto signature<::javax::management::MBeanServer> = ::javax_management / "MBeanServer";
namespace javax::management { class MBeanServerBuilder; }
template<> constexpr auto signature<::javax::management::MBeanServerBuilder> = ::javax_management / "MBeanServerBuilder";
namespace javax::management { class MBeanServerConnection; }
template<> constexpr auto signature<::javax::management::MBeanServerConnection> = ::javax_management / "MBeanServerConnection";
namespace javax::management { class MBeanServerDelegate; }
template<> constexpr auto signature<::javax::management::MBeanServerDelegate> = ::javax_management / "MBeanServerDelegate";
namespace javax::management { class MBeanServerDelegateMBean; }
template<> constexpr auto signature<::javax::management::MBeanServerDelegateMBean> = ::javax_management / "MBeanServerDelegateMBean";
namespace javax::management { class MBeanServerFactory; }
template<> constexpr auto signature<::javax::management::MBeanServerFactory> = ::javax_management / "MBeanServerFactory";
namespace javax::management { class MBeanServerInvocationHandler; }
template<> constexpr auto signature<::javax::management::MBeanServerInvocationHandler> = ::javax_management / "MBeanServerInvocationHandler";
namespace javax::management { class MBeanServerNotification; }
template<> constexpr auto signature<::javax::management::MBeanServerNotification> = ::javax_management / "MBeanServerNotification";
namespace javax::management { class MBeanServerPermission; }
template<> constexpr auto signature<::javax::management::MBeanServerPermission> = ::javax_management / "MBeanServerPermission";
namespace javax::management { class MBeanServerPermissionCollection; }
template<> constexpr auto signature<::javax::management::MBeanServerPermissionCollection> = ::javax_management / "MBeanServerPermissionCollection";
namespace javax::management { class MBeanTrustPermission; }
template<> constexpr auto signature<::javax::management::MBeanTrustPermission> = ::javax_management / "MBeanTrustPermission";
namespace javax::management { class MXBean; }
template<> constexpr auto signature<::javax::management::MXBean> = ::javax_management / "MXBean";
namespace javax::management { class MalformedObjectNameException; }
template<> constexpr auto signature<::javax::management::MalformedObjectNameException> = ::javax_management / "MalformedObjectNameException";
namespace javax::management { class MatchQueryExp; }
template<> constexpr auto signature<::javax::management::MatchQueryExp> = ::javax_management / "MatchQueryExp";
namespace javax::management { class NotCompliantMBeanException; }
template<> constexpr auto signature<::javax::management::NotCompliantMBeanException> = ::javax_management / "NotCompliantMBeanException";
namespace javax::management { class NotQueryExp; }
template<> constexpr auto signature<::javax::management::NotQueryExp> = ::javax_management / "NotQueryExp";
namespace javax::management { class Notification; }
template<> constexpr auto signature<::javax::management::Notification> = ::javax_management / "Notification";
namespace javax::management { class NotificationBroadcaster; }
template<> constexpr auto signature<::javax::management::NotificationBroadcaster> = ::javax_management / "NotificationBroadcaster";
namespace javax::management { class NotificationBroadcasterSupport; }
template<> constexpr auto signature<::javax::management::NotificationBroadcasterSupport> = ::javax_management / "NotificationBroadcasterSupport";
namespace javax::management { class NotificationBroadcasterSupport$1; }
template<> constexpr auto signature<::javax::management::NotificationBroadcasterSupport$1> = ::javax_management / "NotificationBroadcasterSupport$1";
namespace javax::management { class NotificationBroadcasterSupport$ListenerInfo; }
template<> constexpr auto signature<::javax::management::NotificationBroadcasterSupport$ListenerInfo> = ::javax_management / "NotificationBroadcasterSupport$ListenerInfo";
namespace javax::management { class NotificationBroadcasterSupport$SendNotifJob; }
template<> constexpr auto signature<::javax::management::NotificationBroadcasterSupport$SendNotifJob> = ::javax_management / "NotificationBroadcasterSupport$SendNotifJob";
namespace javax::management { class NotificationBroadcasterSupport$WildcardListenerInfo; }
template<> constexpr auto signature<::javax::management::NotificationBroadcasterSupport$WildcardListenerInfo> = ::javax_management / "NotificationBroadcasterSupport$WildcardListenerInfo";
namespace javax::management { class NotificationEmitter; }
template<> constexpr auto signature<::javax::management::NotificationEmitter> = ::javax_management / "NotificationEmitter";
namespace javax::management { class NotificationFilter; }
template<> constexpr auto signature<::javax::management::NotificationFilter> = ::javax_management / "NotificationFilter";
namespace javax::management { class NotificationFilterSupport; }
template<> constexpr auto signature<::javax::management::NotificationFilterSupport> = ::javax_management / "NotificationFilterSupport";
namespace javax::management { class NotificationListener; }
template<> constexpr auto signature<::javax::management::NotificationListener> = ::javax_management / "NotificationListener";
namespace javax::management { class NumericValueExp; }
template<> constexpr auto signature<::javax::management::NumericValueExp> = ::javax_management / "NumericValueExp";
namespace javax::management { class ObjectInstance; }
template<> constexpr auto signature<::javax::management::ObjectInstance> = ::javax_management / "ObjectInstance";
namespace javax::management { class ObjectName; }
template<> constexpr auto signature<::javax::management::ObjectName> = ::javax_management / "ObjectName";
namespace javax::management { class ObjectName$PatternProperty; }
template<> constexpr auto signature<::javax::management::ObjectName$PatternProperty> = ::javax_management / "ObjectName$PatternProperty";
namespace javax::management { class ObjectName$Property; }
template<> constexpr auto signature<::javax::management::ObjectName$Property> = ::javax_management / "ObjectName$Property";
namespace javax::management { class OperationsException; }
template<> constexpr auto signature<::javax::management::OperationsException> = ::javax_management / "OperationsException";
namespace javax::management { class OrQueryExp; }
template<> constexpr auto signature<::javax::management::OrQueryExp> = ::javax_management / "OrQueryExp";
namespace javax::management { class PersistentMBean; }
template<> constexpr auto signature<::javax::management::PersistentMBean> = ::javax_management / "PersistentMBean";
namespace javax::management { class QualifiedAttributeValueExp; }
template<> constexpr auto signature<::javax::management::QualifiedAttributeValueExp> = ::javax_management / "QualifiedAttributeValueExp";
namespace javax::management { class Query; }
template<> constexpr auto signature<::javax::management::Query> = ::javax_management / "Query";
namespace javax::management { class QueryEval; }
template<> constexpr auto signature<::javax::management::QueryEval> = ::javax_management / "QueryEval";
namespace javax::management { class QueryExp; }
template<> constexpr auto signature<::javax::management::QueryExp> = ::javax_management / "QueryExp";
namespace javax::management { class ReflectionException; }
template<> constexpr auto signature<::javax::management::ReflectionException> = ::javax_management / "ReflectionException";
namespace javax::management { class RuntimeErrorException; }
template<> constexpr auto signature<::javax::management::RuntimeErrorException> = ::javax_management / "RuntimeErrorException";
namespace javax::management { class RuntimeMBeanException; }
template<> constexpr auto signature<::javax::management::RuntimeMBeanException> = ::javax_management / "RuntimeMBeanException";
namespace javax::management { class RuntimeOperationsException; }
template<> constexpr auto signature<::javax::management::RuntimeOperationsException> = ::javax_management / "RuntimeOperationsException";
namespace javax::management { class ServiceNotFoundException; }
template<> constexpr auto signature<::javax::management::ServiceNotFoundException> = ::javax_management / "ServiceNotFoundException";
namespace javax::management { class StandardEmitterMBean; }
template<> constexpr auto signature<::javax::management::StandardEmitterMBean> = ::javax_management / "StandardEmitterMBean";
namespace javax::management { class StandardMBean; }
template<> constexpr auto signature<::javax::management::StandardMBean> = ::javax_management / "StandardMBean";
namespace javax::management { class StandardMBean$MBeanInfoSafeAction; }
template<> constexpr auto signature<::javax::management::StandardMBean$MBeanInfoSafeAction> = ::javax_management / "StandardMBean$MBeanInfoSafeAction";
namespace javax::management { class StringValueExp; }
template<> constexpr auto signature<::javax::management::StringValueExp> = ::javax_management / "StringValueExp";
namespace javax::management { class ValueExp; }
template<> constexpr auto signature<::javax::management::ValueExp> = ::javax_management / "ValueExp";
namespace javax::management::loading { class ClassLoaderRepository; }
template<> constexpr auto signature<::javax::management::loading::ClassLoaderRepository> = ::javax_management_loading / "ClassLoaderRepository";
namespace javax::management::loading { class DefaultLoaderRepository; }
template<> constexpr auto signature<::javax::management::loading::DefaultLoaderRepository> = ::javax_management_loading / "DefaultLoaderRepository";
namespace javax::management::loading { class MLet; }
template<> constexpr auto signature<::javax::management::loading::MLet> = ::javax_management_loading / "MLet";
namespace javax::management::loading { class MLet$1; }
template<> constexpr auto signature<::javax::management::loading::MLet$1> = ::javax_management_loading / "MLet$1";
namespace javax::management::loading { class MLetContent; }
template<> constexpr auto signature<::javax::management::loading::MLetContent> = ::javax_management_loading / "MLetContent";
namespace javax::management::loading { class MLetMBean; }
template<> constexpr auto signature<::javax::management::loading::MLetMBean> = ::javax_management_loading / "MLetMBean";
namespace javax::management::loading { class MLetObjectInputStream; }
template<> constexpr auto signature<::javax::management::loading::MLetObjectInputStream> = ::javax_management_loading / "MLetObjectInputStream";
namespace javax::management::loading { class MLetParser; }
template<> constexpr auto signature<::javax::management::loading::MLetParser> = ::javax_management_loading / "MLetParser";
namespace javax::management::loading { class PrivateClassLoader; }
template<> constexpr auto signature<::javax::management::loading::PrivateClassLoader> = ::javax_management_loading / "PrivateClassLoader";
namespace javax::management::loading { class PrivateMLet; }
template<> constexpr auto signature<::javax::management::loading::PrivateMLet> = ::javax_management_loading / "PrivateMLet";
namespace javax::management::modelmbean { class DescriptorSupport; }
template<> constexpr auto signature<::javax::management::modelmbean::DescriptorSupport> = ::javax_management_modelmbean / "DescriptorSupport";
namespace javax::management::modelmbean { class InvalidTargetObjectTypeException; }
template<> constexpr auto signature<::javax::management::modelmbean::InvalidTargetObjectTypeException> = ::javax_management_modelmbean / "InvalidTargetObjectTypeException";
namespace javax::management::modelmbean { class ModelMBean; }
template<> constexpr auto signature<::javax::management::modelmbean::ModelMBean> = ::javax_management_modelmbean / "ModelMBean";
namespace javax::management::modelmbean { class ModelMBeanAttributeInfo; }
template<> constexpr auto signature<::javax::management::modelmbean::ModelMBeanAttributeInfo> = ::javax_management_modelmbean / "ModelMBeanAttributeInfo";
namespace javax::management::modelmbean { class ModelMBeanConstructorInfo; }
template<> constexpr auto signature<::javax::management::modelmbean::ModelMBeanConstructorInfo> = ::javax_management_modelmbean / "ModelMBeanConstructorInfo";
namespace javax::management::modelmbean { class ModelMBeanInfo; }
template<> constexpr auto signature<::javax::management::modelmbean::ModelMBeanInfo> = ::javax_management_modelmbean / "ModelMBeanInfo";
namespace javax::management::modelmbean { class ModelMBeanInfoSupport; }
template<> constexpr auto signature<::javax::management::modelmbean::ModelMBeanInfoSupport> = ::javax_management_modelmbean / "ModelMBeanInfoSupport";
namespace javax::management::modelmbean { class ModelMBeanNotificationBroadcaster; }
template<> constexpr auto signature<::javax::management::modelmbean::ModelMBeanNotificationBroadcaster> = ::javax_management_modelmbean / "ModelMBeanNotificationBroadcaster";
namespace javax::management::modelmbean { class ModelMBeanNotificationInfo; }
template<> constexpr auto signature<::javax::management::modelmbean::ModelMBeanNotificationInfo> = ::javax_management_modelmbean / "ModelMBeanNotificationInfo";
namespace javax::management::modelmbean { class ModelMBeanOperationInfo; }
template<> constexpr auto signature<::javax::management::modelmbean::ModelMBeanOperationInfo> = ::javax_management_modelmbean / "ModelMBeanOperationInfo";
namespace javax::management::modelmbean { class RequiredModelMBean; }
template<> constexpr auto signature<::javax::management::modelmbean::RequiredModelMBean> = ::javax_management_modelmbean / "RequiredModelMBean";
namespace javax::management::modelmbean { class RequiredModelMBean$1; }
template<> constexpr auto signature<::javax::management::modelmbean::RequiredModelMBean$1> = ::javax_management_modelmbean / "RequiredModelMBean$1";
namespace javax::management::modelmbean { class RequiredModelMBean$2; }
template<> constexpr auto signature<::javax::management::modelmbean::RequiredModelMBean$2> = ::javax_management_modelmbean / "RequiredModelMBean$2";
namespace javax::management::modelmbean { class RequiredModelMBean$3; }
template<> constexpr auto signature<::javax::management::modelmbean::RequiredModelMBean$3> = ::javax_management_modelmbean / "RequiredModelMBean$3";
namespace javax::management::modelmbean { class RequiredModelMBean$4; }
template<> constexpr auto signature<::javax::management::modelmbean::RequiredModelMBean$4> = ::javax_management_modelmbean / "RequiredModelMBean$4";
namespace javax::management::modelmbean { class RequiredModelMBean$5; }
template<> constexpr auto signature<::javax::management::modelmbean::RequiredModelMBean$5> = ::javax_management_modelmbean / "RequiredModelMBean$5";
namespace javax::management::modelmbean { class RequiredModelMBean$6; }
template<> constexpr auto signature<::javax::management::modelmbean::RequiredModelMBean$6> = ::javax_management_modelmbean / "RequiredModelMBean$6";
namespace javax::management::modelmbean { class XMLParseException; }
template<> constexpr auto signature<::javax::management::modelmbean::XMLParseException> = ::javax_management_modelmbean / "XMLParseException";
namespace javax::management::monitor { class CounterMonitor; }
template<> constexpr auto signature<::javax::management::monitor::CounterMonitor> = ::javax_management_monitor / "CounterMonitor";
namespace javax::management::monitor { class CounterMonitor$1; }
template<> constexpr auto signature<::javax::management::monitor::CounterMonitor$1> = ::javax_management_monitor / "CounterMonitor$1";
namespace javax::management::monitor { class CounterMonitor$CounterMonitorObservedObject; }
template<> constexpr auto signature<::javax::management::monitor::CounterMonitor$CounterMonitorObservedObject> = ::javax_management_monitor / "CounterMonitor$CounterMonitorObservedObject";
namespace javax::management::monitor { class CounterMonitorMBean; }
template<> constexpr auto signature<::javax::management::monitor::CounterMonitorMBean> = ::javax_management_monitor / "CounterMonitorMBean";
namespace javax::management::monitor { class GaugeMonitor; }
template<> constexpr auto signature<::javax::management::monitor::GaugeMonitor> = ::javax_management_monitor / "GaugeMonitor";
namespace javax::management::monitor { class GaugeMonitor$1; }
template<> constexpr auto signature<::javax::management::monitor::GaugeMonitor$1> = ::javax_management_monitor / "GaugeMonitor$1";
namespace javax::management::monitor { class GaugeMonitor$GaugeMonitorObservedObject; }
template<> constexpr auto signature<::javax::management::monitor::GaugeMonitor$GaugeMonitorObservedObject> = ::javax_management_monitor / "GaugeMonitor$GaugeMonitorObservedObject";
namespace javax::management::monitor { class GaugeMonitorMBean; }
template<> constexpr auto signature<::javax::management::monitor::GaugeMonitorMBean> = ::javax_management_monitor / "GaugeMonitorMBean";
namespace javax::management::monitor { class Monitor; }
template<> constexpr auto signature<::javax::management::monitor::Monitor> = ::javax_management_monitor / "Monitor";
namespace javax::management::monitor { class Monitor$1; }
template<> constexpr auto signature<::javax::management::monitor::Monitor$1> = ::javax_management_monitor / "Monitor$1";
namespace javax::management::monitor { class Monitor$DaemonThreadFactory; }
template<> constexpr auto signature<::javax::management::monitor::Monitor$DaemonThreadFactory> = ::javax_management_monitor / "Monitor$DaemonThreadFactory";
namespace javax::management::monitor { class Monitor$MonitorTask; }
template<> constexpr auto signature<::javax::management::monitor::Monitor$MonitorTask> = ::javax_management_monitor / "Monitor$MonitorTask";
namespace javax::management::monitor { class Monitor$MonitorTask$1; }
template<> constexpr auto signature<::javax::management::monitor::Monitor$MonitorTask$1> = ::javax_management_monitor / "Monitor$MonitorTask$1";
namespace javax::management::monitor { class Monitor$NumericalType; }
template<> constexpr auto signature<::javax::management::monitor::Monitor$NumericalType> = ::javax_management_monitor / "Monitor$NumericalType";
namespace javax::management::monitor { class Monitor$ObservedObject; }
template<> constexpr auto signature<::javax::management::monitor::Monitor$ObservedObject> = ::javax_management_monitor / "Monitor$ObservedObject";
namespace javax::management::monitor { class Monitor$SchedulerTask; }
template<> constexpr auto signature<::javax::management::monitor::Monitor$SchedulerTask> = ::javax_management_monitor / "Monitor$SchedulerTask";
namespace javax::management::monitor { class MonitorMBean; }
template<> constexpr auto signature<::javax::management::monitor::MonitorMBean> = ::javax_management_monitor / "MonitorMBean";
namespace javax::management::monitor { class MonitorNotification; }
template<> constexpr auto signature<::javax::management::monitor::MonitorNotification> = ::javax_management_monitor / "MonitorNotification";
namespace javax::management::monitor { class MonitorSettingException; }
template<> constexpr auto signature<::javax::management::monitor::MonitorSettingException> = ::javax_management_monitor / "MonitorSettingException";
namespace javax::management::monitor { class StringMonitor; }
template<> constexpr auto signature<::javax::management::monitor::StringMonitor> = ::javax_management_monitor / "StringMonitor";
namespace javax::management::monitor { class StringMonitor$StringMonitorObservedObject; }
template<> constexpr auto signature<::javax::management::monitor::StringMonitor$StringMonitorObservedObject> = ::javax_management_monitor / "StringMonitor$StringMonitorObservedObject";
namespace javax::management::monitor { class StringMonitorMBean; }
template<> constexpr auto signature<::javax::management::monitor::StringMonitorMBean> = ::javax_management_monitor / "StringMonitorMBean";
namespace javax::management::openmbean { class ArrayType; }
template<> constexpr auto signature<::javax::management::openmbean::ArrayType> = ::javax_management_openmbean / "ArrayType";
namespace javax::management::openmbean { class CompositeData; }
template<> constexpr auto signature<::javax::management::openmbean::CompositeData> = ::javax_management_openmbean / "CompositeData";
namespace javax::management::openmbean { class CompositeDataInvocationHandler; }
template<> constexpr auto signature<::javax::management::openmbean::CompositeDataInvocationHandler> = ::javax_management_openmbean / "CompositeDataInvocationHandler";
namespace javax::management::openmbean { class CompositeDataSupport; }
template<> constexpr auto signature<::javax::management::openmbean::CompositeDataSupport> = ::javax_management_openmbean / "CompositeDataSupport";
namespace javax::management::openmbean { class CompositeDataView; }
template<> constexpr auto signature<::javax::management::openmbean::CompositeDataView> = ::javax_management_openmbean / "CompositeDataView";
namespace javax::management::openmbean { class CompositeType; }
template<> constexpr auto signature<::javax::management::openmbean::CompositeType> = ::javax_management_openmbean / "CompositeType";
namespace javax::management::openmbean { class InvalidKeyException; }
template<> constexpr auto signature<::javax::management::openmbean::InvalidKeyException> = ::javax_management_openmbean / "InvalidKeyException";
namespace javax::management::openmbean { class InvalidOpenTypeException; }
template<> constexpr auto signature<::javax::management::openmbean::InvalidOpenTypeException> = ::javax_management_openmbean / "InvalidOpenTypeException";
namespace javax::management::openmbean { class KeyAlreadyExistsException; }
template<> constexpr auto signature<::javax::management::openmbean::KeyAlreadyExistsException> = ::javax_management_openmbean / "KeyAlreadyExistsException";
namespace javax::management::openmbean { class OpenDataException; }
template<> constexpr auto signature<::javax::management::openmbean::OpenDataException> = ::javax_management_openmbean / "OpenDataException";
namespace javax::management::openmbean { class OpenMBeanAttributeInfo; }
template<> constexpr auto signature<::javax::management::openmbean::OpenMBeanAttributeInfo> = ::javax_management_openmbean / "OpenMBeanAttributeInfo";
namespace javax::management::openmbean { class OpenMBeanAttributeInfoSupport; }
template<> constexpr auto signature<::javax::management::openmbean::OpenMBeanAttributeInfoSupport> = ::javax_management_openmbean / "OpenMBeanAttributeInfoSupport";
namespace javax::management::openmbean { class OpenMBeanConstructorInfo; }
template<> constexpr auto signature<::javax::management::openmbean::OpenMBeanConstructorInfo> = ::javax_management_openmbean / "OpenMBeanConstructorInfo";
namespace javax::management::openmbean { class OpenMBeanConstructorInfoSupport; }
template<> constexpr auto signature<::javax::management::openmbean::OpenMBeanConstructorInfoSupport> = ::javax_management_openmbean / "OpenMBeanConstructorInfoSupport";
namespace javax::management::openmbean { class OpenMBeanInfo; }
template<> constexpr auto signature<::javax::management::openmbean::OpenMBeanInfo> = ::javax_management_openmbean / "OpenMBeanInfo";
namespace javax::management::openmbean { class OpenMBeanInfoSupport; }
template<> constexpr auto signature<::javax::management::openmbean::OpenMBeanInfoSupport> = ::javax_management_openmbean / "OpenMBeanInfoSupport";
namespace javax::management::openmbean { class OpenMBeanOperationInfo; }
template<> constexpr auto signature<::javax::management::openmbean::OpenMBeanOperationInfo> = ::javax_management_openmbean / "OpenMBeanOperationInfo";
namespace javax::management::openmbean { class OpenMBeanOperationInfoSupport; }
template<> constexpr auto signature<::javax::management::openmbean::OpenMBeanOperationInfoSupport> = ::javax_management_openmbean / "OpenMBeanOperationInfoSupport";
namespace javax::management::openmbean { class OpenMBeanParameterInfo; }
template<> constexpr auto signature<::javax::management::openmbean::OpenMBeanParameterInfo> = ::javax_management_openmbean / "OpenMBeanParameterInfo";
namespace javax::management::openmbean { class OpenMBeanParameterInfoSupport; }
template<> constexpr auto signature<::javax::management::openmbean::OpenMBeanParameterInfoSupport> = ::javax_management_openmbean / "OpenMBeanParameterInfoSupport";
namespace javax::management::openmbean { class OpenType; }
template<> constexpr auto signature<::javax::management::openmbean::OpenType> = ::javax_management_openmbean / "OpenType";
namespace javax::management::openmbean { class OpenType$1; }
template<> constexpr auto signature<::javax::management::openmbean::OpenType$1> = ::javax_management_openmbean / "OpenType$1";
namespace javax::management::openmbean { class SimpleType; }
template<> constexpr auto signature<::javax::management::openmbean::SimpleType> = ::javax_management_openmbean / "SimpleType";
namespace javax::management::openmbean { class TabularData; }
template<> constexpr auto signature<::javax::management::openmbean::TabularData> = ::javax_management_openmbean / "TabularData";
namespace javax::management::openmbean { class TabularDataSupport; }
template<> constexpr auto signature<::javax::management::openmbean::TabularDataSupport> = ::javax_management_openmbean / "TabularDataSupport";
namespace javax::management::openmbean { class TabularType; }
template<> constexpr auto signature<::javax::management::openmbean::TabularType> = ::javax_management_openmbean / "TabularType";
namespace javax::management::relation { class InvalidRelationIdException; }
template<> constexpr auto signature<::javax::management::relation::InvalidRelationIdException> = ::javax_management_relation / "InvalidRelationIdException";
namespace javax::management::relation { class InvalidRelationServiceException; }
template<> constexpr auto signature<::javax::management::relation::InvalidRelationServiceException> = ::javax_management_relation / "InvalidRelationServiceException";
namespace javax::management::relation { class InvalidRelationTypeException; }
template<> constexpr auto signature<::javax::management::relation::InvalidRelationTypeException> = ::javax_management_relation / "InvalidRelationTypeException";
namespace javax::management::relation { class InvalidRoleInfoException; }
template<> constexpr auto signature<::javax::management::relation::InvalidRoleInfoException> = ::javax_management_relation / "InvalidRoleInfoException";
namespace javax::management::relation { class InvalidRoleValueException; }
template<> constexpr auto signature<::javax::management::relation::InvalidRoleValueException> = ::javax_management_relation / "InvalidRoleValueException";
namespace javax::management::relation { class MBeanServerNotificationFilter; }
template<> constexpr auto signature<::javax::management::relation::MBeanServerNotificationFilter> = ::javax_management_relation / "MBeanServerNotificationFilter";
namespace javax::management::relation { class Relation; }
template<> constexpr auto signature<::javax::management::relation::Relation> = ::javax_management_relation / "Relation";
namespace javax::management::relation { class RelationException; }
template<> constexpr auto signature<::javax::management::relation::RelationException> = ::javax_management_relation / "RelationException";
namespace javax::management::relation { class RelationNotFoundException; }
template<> constexpr auto signature<::javax::management::relation::RelationNotFoundException> = ::javax_management_relation / "RelationNotFoundException";
namespace javax::management::relation { class RelationNotification; }
template<> constexpr auto signature<::javax::management::relation::RelationNotification> = ::javax_management_relation / "RelationNotification";
namespace javax::management::relation { class RelationService; }
template<> constexpr auto signature<::javax::management::relation::RelationService> = ::javax_management_relation / "RelationService";
namespace javax::management::relation { class RelationServiceMBean; }
template<> constexpr auto signature<::javax::management::relation::RelationServiceMBean> = ::javax_management_relation / "RelationServiceMBean";
namespace javax::management::relation { class RelationServiceNotRegisteredException; }
template<> constexpr auto signature<::javax::management::relation::RelationServiceNotRegisteredException> = ::javax_management_relation / "RelationServiceNotRegisteredException";
namespace javax::management::relation { class RelationSupport; }
template<> constexpr auto signature<::javax::management::relation::RelationSupport> = ::javax_management_relation / "RelationSupport";
namespace javax::management::relation { class RelationSupportMBean; }
template<> constexpr auto signature<::javax::management::relation::RelationSupportMBean> = ::javax_management_relation / "RelationSupportMBean";
namespace javax::management::relation { class RelationType; }
template<> constexpr auto signature<::javax::management::relation::RelationType> = ::javax_management_relation / "RelationType";
namespace javax::management::relation { class RelationTypeNotFoundException; }
template<> constexpr auto signature<::javax::management::relation::RelationTypeNotFoundException> = ::javax_management_relation / "RelationTypeNotFoundException";
namespace javax::management::relation { class RelationTypeSupport; }
template<> constexpr auto signature<::javax::management::relation::RelationTypeSupport> = ::javax_management_relation / "RelationTypeSupport";
namespace javax::management::relation { class Role; }
template<> constexpr auto signature<::javax::management::relation::Role> = ::javax_management_relation / "Role";
namespace javax::management::relation { class RoleInfo; }
template<> constexpr auto signature<::javax::management::relation::RoleInfo> = ::javax_management_relation / "RoleInfo";
namespace javax::management::relation { class RoleInfoNotFoundException; }
template<> constexpr auto signature<::javax::management::relation::RoleInfoNotFoundException> = ::javax_management_relation / "RoleInfoNotFoundException";
namespace javax::management::relation { class RoleList; }
template<> constexpr auto signature<::javax::management::relation::RoleList> = ::javax_management_relation / "RoleList";
namespace javax::management::relation { class RoleNotFoundException; }
template<> constexpr auto signature<::javax::management::relation::RoleNotFoundException> = ::javax_management_relation / "RoleNotFoundException";
namespace javax::management::relation { class RoleResult; }
template<> constexpr auto signature<::javax::management::relation::RoleResult> = ::javax_management_relation / "RoleResult";
namespace javax::management::relation { class RoleStatus; }
template<> constexpr auto signature<::javax::management::relation::RoleStatus> = ::javax_management_relation / "RoleStatus";
namespace javax::management::relation { class RoleUnresolved; }
template<> constexpr auto signature<::javax::management::relation::RoleUnresolved> = ::javax_management_relation / "RoleUnresolved";
namespace javax::management::relation { class RoleUnresolvedList; }
template<> constexpr auto signature<::javax::management::relation::RoleUnresolvedList> = ::javax_management_relation / "RoleUnresolvedList";
namespace javax::management::remote { class JMXAddressable; }
template<> constexpr auto signature<::javax::management::remote::JMXAddressable> = ::javax_management_remote / "JMXAddressable";
namespace javax::management::remote { class JMXAuthenticator; }
template<> constexpr auto signature<::javax::management::remote::JMXAuthenticator> = ::javax_management_remote / "JMXAuthenticator";
namespace javax::management::remote { class JMXConnectionNotification; }
template<> constexpr auto signature<::javax::management::remote::JMXConnectionNotification> = ::javax_management_remote / "JMXConnectionNotification";
namespace javax::management::remote { class JMXConnector; }
template<> constexpr auto signature<::javax::management::remote::JMXConnector> = ::javax_management_remote / "JMXConnector";
namespace javax::management::remote { class JMXConnectorFactory; }
template<> constexpr auto signature<::javax::management::remote::JMXConnectorFactory> = ::javax_management_remote / "JMXConnectorFactory";
namespace javax::management::remote { class JMXConnectorFactory$1; }
template<> constexpr auto signature<::javax::management::remote::JMXConnectorFactory$1> = ::javax_management_remote / "JMXConnectorFactory$1";
namespace javax::management::remote { class JMXConnectorFactory$2; }
template<> constexpr auto signature<::javax::management::remote::JMXConnectorFactory$2> = ::javax_management_remote / "JMXConnectorFactory$2";
namespace javax::management::remote { class JMXConnectorFactory$2$1; }
template<> constexpr auto signature<::javax::management::remote::JMXConnectorFactory$2$1> = ::javax_management_remote / "JMXConnectorFactory$2$1";
namespace javax::management::remote { class JMXConnectorProvider; }
template<> constexpr auto signature<::javax::management::remote::JMXConnectorProvider> = ::javax_management_remote / "JMXConnectorProvider";
namespace javax::management::remote { class JMXConnectorServer; }
template<> constexpr auto signature<::javax::management::remote::JMXConnectorServer> = ::javax_management_remote / "JMXConnectorServer";
namespace javax::management::remote { class JMXConnectorServerFactory; }
template<> constexpr auto signature<::javax::management::remote::JMXConnectorServerFactory> = ::javax_management_remote / "JMXConnectorServerFactory";
namespace javax::management::remote { class JMXConnectorServerMBean; }
template<> constexpr auto signature<::javax::management::remote::JMXConnectorServerMBean> = ::javax_management_remote / "JMXConnectorServerMBean";
namespace javax::management::remote { class JMXConnectorServerProvider; }
template<> constexpr auto signature<::javax::management::remote::JMXConnectorServerProvider> = ::javax_management_remote / "JMXConnectorServerProvider";
namespace javax::management::remote { class JMXPrincipal; }
template<> constexpr auto signature<::javax::management::remote::JMXPrincipal> = ::javax_management_remote / "JMXPrincipal";
namespace javax::management::remote { class JMXProviderException; }
template<> constexpr auto signature<::javax::management::remote::JMXProviderException> = ::javax_management_remote / "JMXProviderException";
namespace javax::management::remote { class JMXServerErrorException; }
template<> constexpr auto signature<::javax::management::remote::JMXServerErrorException> = ::javax_management_remote / "JMXServerErrorException";
namespace javax::management::remote { class JMXServiceURL; }
template<> constexpr auto signature<::javax::management::remote::JMXServiceURL> = ::javax_management_remote / "JMXServiceURL";
namespace javax::management::remote { class MBeanServerForwarder; }
template<> constexpr auto signature<::javax::management::remote::MBeanServerForwarder> = ::javax_management_remote / "MBeanServerForwarder";
namespace javax::management::remote { class NotificationResult; }
template<> constexpr auto signature<::javax::management::remote::NotificationResult> = ::javax_management_remote / "NotificationResult";
namespace javax::management::remote { class SubjectDelegationPermission; }
template<> constexpr auto signature<::javax::management::remote::SubjectDelegationPermission> = ::javax_management_remote / "SubjectDelegationPermission";
namespace javax::management::remote { class TargetedNotification; }
template<> constexpr auto signature<::javax::management::remote::TargetedNotification> = ::javax_management_remote / "TargetedNotification";
namespace javax::management::remote::rmi { class NoCallStackClassLoader; }
template<> constexpr auto signature<::javax::management::remote::rmi::NoCallStackClassLoader> = ::javax_management_remote_rmi / "NoCallStackClassLoader";
namespace javax::management::remote::rmi { class RMIConnection; }
template<> constexpr auto signature<::javax::management::remote::rmi::RMIConnection> = ::javax_management_remote_rmi / "RMIConnection";
namespace javax::management::remote::rmi { class RMIConnectionImpl; }
template<> constexpr auto signature<::javax::management::remote::rmi::RMIConnectionImpl> = ::javax_management_remote_rmi / "RMIConnectionImpl";
namespace javax::management::remote::rmi { class RMIConnectionImpl$1; }
template<> constexpr auto signature<::javax::management::remote::rmi::RMIConnectionImpl$1> = ::javax_management_remote_rmi / "RMIConnectionImpl$1";
namespace javax::management::remote::rmi { class RMIConnectionImpl$2; }
template<> constexpr auto signature<::javax::management::remote::rmi::RMIConnectionImpl$2> = ::javax_management_remote_rmi / "RMIConnectionImpl$2";
namespace javax::management::remote::rmi { class RMIConnectionImpl$3; }
template<> constexpr auto signature<::javax::management::remote::rmi::RMIConnectionImpl$3> = ::javax_management_remote_rmi / "RMIConnectionImpl$3";
namespace javax::management::remote::rmi { class RMIConnectionImpl$4; }
template<> constexpr auto signature<::javax::management::remote::rmi::RMIConnectionImpl$4> = ::javax_management_remote_rmi / "RMIConnectionImpl$4";
namespace javax::management::remote::rmi { class RMIConnectionImpl$5; }
template<> constexpr auto signature<::javax::management::remote::rmi::RMIConnectionImpl$5> = ::javax_management_remote_rmi / "RMIConnectionImpl$5";
namespace javax::management::remote::rmi { class RMIConnectionImpl$6; }
template<> constexpr auto signature<::javax::management::remote::rmi::RMIConnectionImpl$6> = ::javax_management_remote_rmi / "RMIConnectionImpl$6";
namespace javax::management::remote::rmi { class RMIConnectionImpl$7; }
template<> constexpr auto signature<::javax::management::remote::rmi::RMIConnectionImpl$7> = ::javax_management_remote_rmi / "RMIConnectionImpl$7";
namespace javax::management::remote::rmi { class RMIConnectionImpl$CombinedClassLoader; }
template<> constexpr auto signature<::javax::management::remote::rmi::RMIConnectionImpl$CombinedClassLoader> = ::javax_management_remote_rmi / "RMIConnectionImpl$CombinedClassLoader";
namespace javax::management::remote::rmi { class RMIConnectionImpl$CombinedClassLoader$ClassLoaderWrapper; }
template<> constexpr auto signature<::javax::management::remote::rmi::RMIConnectionImpl$CombinedClassLoader$ClassLoaderWrapper> = ::javax_management_remote_rmi / "RMIConnectionImpl$CombinedClassLoader$ClassLoaderWrapper";
namespace javax::management::remote::rmi { class RMIConnectionImpl$PrivilegedOperation; }
template<> constexpr auto signature<::javax::management::remote::rmi::RMIConnectionImpl$PrivilegedOperation> = ::javax_management_remote_rmi / "RMIConnectionImpl$PrivilegedOperation";
namespace javax::management::remote::rmi { class RMIConnectionImpl$RMIServerCommunicatorAdmin; }
template<> constexpr auto signature<::javax::management::remote::rmi::RMIConnectionImpl$RMIServerCommunicatorAdmin> = ::javax_management_remote_rmi / "RMIConnectionImpl$RMIServerCommunicatorAdmin";
namespace javax::management::remote::rmi { class RMIConnectionImpl$SetCcl; }
template<> constexpr auto signature<::javax::management::remote::rmi::RMIConnectionImpl$SetCcl> = ::javax_management_remote_rmi / "RMIConnectionImpl$SetCcl";
namespace javax::management::remote::rmi { class RMIConnectionImpl_Stub; }
template<> constexpr auto signature<::javax::management::remote::rmi::RMIConnectionImpl_Stub> = ::javax_management_remote_rmi / "RMIConnectionImpl_Stub";
namespace javax::management::remote::rmi { class RMIConnector; }
template<> constexpr auto signature<::javax::management::remote::rmi::RMIConnector> = ::javax_management_remote_rmi / "RMIConnector";
namespace javax::management::remote::rmi { class RMIConnector$1; }
template<> constexpr auto signature<::javax::management::remote::rmi::RMIConnector$1> = ::javax_management_remote_rmi / "RMIConnector$1";
namespace javax::management::remote::rmi { class RMIConnector$2; }
template<> constexpr auto signature<::javax::management::remote::rmi::RMIConnector$2> = ::javax_management_remote_rmi / "RMIConnector$2";
namespace javax::management::remote::rmi { class RMIConnector$3; }
template<> constexpr auto signature<::javax::management::remote::rmi::RMIConnector$3> = ::javax_management_remote_rmi / "RMIConnector$3";
namespace javax::management::remote::rmi { class RMIConnector$4; }
template<> constexpr auto signature<::javax::management::remote::rmi::RMIConnector$4> = ::javax_management_remote_rmi / "RMIConnector$4";
namespace javax::management::remote::rmi { class RMIConnector$5; }
template<> constexpr auto signature<::javax::management::remote::rmi::RMIConnector$5> = ::javax_management_remote_rmi / "RMIConnector$5";
namespace javax::management::remote::rmi { class RMIConnector$ObjectInputStreamWithLoader; }
template<> constexpr auto signature<::javax::management::remote::rmi::RMIConnector$ObjectInputStreamWithLoader> = ::javax_management_remote_rmi / "RMIConnector$ObjectInputStreamWithLoader";
namespace javax::management::remote::rmi { class RMIConnector$RMIClientCommunicatorAdmin; }
template<> constexpr auto signature<::javax::management::remote::rmi::RMIConnector$RMIClientCommunicatorAdmin> = ::javax_management_remote_rmi / "RMIConnector$RMIClientCommunicatorAdmin";
namespace javax::management::remote::rmi { class RMIConnector$RMINotifClient; }
template<> constexpr auto signature<::javax::management::remote::rmi::RMIConnector$RMINotifClient> = ::javax_management_remote_rmi / "RMIConnector$RMINotifClient";
namespace javax::management::remote::rmi { class RMIConnector$RemoteMBeanServerConnection; }
template<> constexpr auto signature<::javax::management::remote::rmi::RMIConnector$RemoteMBeanServerConnection> = ::javax_management_remote_rmi / "RMIConnector$RemoteMBeanServerConnection";
namespace javax::management::remote::rmi { class RMIConnectorServer; }
template<> constexpr auto signature<::javax::management::remote::rmi::RMIConnectorServer> = ::javax_management_remote_rmi / "RMIConnectorServer";
namespace javax::management::remote::rmi { class RMIIIOPServerImpl; }
template<> constexpr auto signature<::javax::management::remote::rmi::RMIIIOPServerImpl> = ::javax_management_remote_rmi / "RMIIIOPServerImpl";
namespace javax::management::remote::rmi { class RMIIIOPServerImpl$1; }
template<> constexpr auto signature<::javax::management::remote::rmi::RMIIIOPServerImpl$1> = ::javax_management_remote_rmi / "RMIIIOPServerImpl$1";
namespace javax::management::remote::rmi { class RMIJRMPServerImpl; }
template<> constexpr auto signature<::javax::management::remote::rmi::RMIJRMPServerImpl> = ::javax_management_remote_rmi / "RMIJRMPServerImpl";
namespace javax::management::remote::rmi { class RMIJRMPServerImpl$1; }
template<> constexpr auto signature<::javax::management::remote::rmi::RMIJRMPServerImpl$1> = ::javax_management_remote_rmi / "RMIJRMPServerImpl$1";
namespace javax::management::remote::rmi { class RMIJRMPServerImpl$ExportedWrapper; }
template<> constexpr auto signature<::javax::management::remote::rmi::RMIJRMPServerImpl$ExportedWrapper> = ::javax_management_remote_rmi / "RMIJRMPServerImpl$ExportedWrapper";
namespace javax::management::remote::rmi { class RMIServer; }
template<> constexpr auto signature<::javax::management::remote::rmi::RMIServer> = ::javax_management_remote_rmi / "RMIServer";
namespace javax::management::remote::rmi { class RMIServerImpl; }
template<> constexpr auto signature<::javax::management::remote::rmi::RMIServerImpl> = ::javax_management_remote_rmi / "RMIServerImpl";
namespace javax::management::remote::rmi { class RMIServerImpl_Stub; }
template<> constexpr auto signature<::javax::management::remote::rmi::RMIServerImpl_Stub> = ::javax_management_remote_rmi / "RMIServerImpl_Stub";
namespace javax::management::remote::rmi { class _RMIConnectionImpl_Tie; }
template<> constexpr auto signature<::javax::management::remote::rmi::_RMIConnectionImpl_Tie> = ::javax_management_remote_rmi / "_RMIConnectionImpl_Tie";
namespace javax::management::remote::rmi { class _RMIConnection_Stub; }
template<> constexpr auto signature<::javax::management::remote::rmi::_RMIConnection_Stub> = ::javax_management_remote_rmi / "_RMIConnection_Stub";
namespace javax::management::remote::rmi { class _RMIServerImpl_Tie; }
template<> constexpr auto signature<::javax::management::remote::rmi::_RMIServerImpl_Tie> = ::javax_management_remote_rmi / "_RMIServerImpl_Tie";
namespace javax::management::remote::rmi { class _RMIServer_Stub; }
template<> constexpr auto signature<::javax::management::remote::rmi::_RMIServer_Stub> = ::javax_management_remote_rmi / "_RMIServer_Stub";
namespace javax::management::timer { class Timer; }
template<> constexpr auto signature<::javax::management::timer::Timer> = ::javax_management_timer / "Timer";
namespace javax::management::timer { class TimerAlarmClock; }
template<> constexpr auto signature<::javax::management::timer::TimerAlarmClock> = ::javax_management_timer / "TimerAlarmClock";
namespace javax::management::timer { class TimerAlarmClockNotification; }
template<> constexpr auto signature<::javax::management::timer::TimerAlarmClockNotification> = ::javax_management_timer / "TimerAlarmClockNotification";
namespace javax::management::timer { class TimerMBean; }
template<> constexpr auto signature<::javax::management::timer::TimerMBean> = ::javax_management_timer / "TimerMBean";
namespace javax::management::timer { class TimerNotification; }
template<> constexpr auto signature<::javax::management::timer::TimerNotification> = ::javax_management_timer / "TimerNotification";
namespace javax::naming { class AuthenticationException; }
template<> constexpr auto signature<::javax::naming::AuthenticationException> = ::javax_naming / "AuthenticationException";
namespace javax::naming { class AuthenticationNotSupportedException; }
template<> constexpr auto signature<::javax::naming::AuthenticationNotSupportedException> = ::javax_naming / "AuthenticationNotSupportedException";
namespace javax::naming { class BinaryRefAddr; }
template<> constexpr auto signature<::javax::naming::BinaryRefAddr> = ::javax_naming / "BinaryRefAddr";
namespace javax::naming { class Binding; }
template<> constexpr auto signature<::javax::naming::Binding> = ::javax_naming / "Binding";
namespace javax::naming { class CannotProceedException; }
template<> constexpr auto signature<::javax::naming::CannotProceedException> = ::javax_naming / "CannotProceedException";
namespace javax::naming { class CommunicationException; }
template<> constexpr auto signature<::javax::naming::CommunicationException> = ::javax_naming / "CommunicationException";
namespace javax::naming { class CompositeName; }
template<> constexpr auto signature<::javax::naming::CompositeName> = ::javax_naming / "CompositeName";
namespace javax::naming { class CompoundName; }
template<> constexpr auto signature<::javax::naming::CompoundName> = ::javax_naming / "CompoundName";
namespace javax::naming { class ConfigurationException; }
template<> constexpr auto signature<::javax::naming::ConfigurationException> = ::javax_naming / "ConfigurationException";
namespace javax::naming { class Context; }
template<> constexpr auto signature<::javax::naming::Context> = ::javax_naming / "Context";
namespace javax::naming { class ContextNotEmptyException; }
template<> constexpr auto signature<::javax::naming::ContextNotEmptyException> = ::javax_naming / "ContextNotEmptyException";
namespace javax::naming { class InitialContext; }
template<> constexpr auto signature<::javax::naming::InitialContext> = ::javax_naming / "InitialContext";
namespace javax::naming { class InsufficientResourcesException; }
template<> constexpr auto signature<::javax::naming::InsufficientResourcesException> = ::javax_naming / "InsufficientResourcesException";
namespace javax::naming { class InterruptedNamingException; }
template<> constexpr auto signature<::javax::naming::InterruptedNamingException> = ::javax_naming / "InterruptedNamingException";
namespace javax::naming { class InvalidNameException; }
template<> constexpr auto signature<::javax::naming::InvalidNameException> = ::javax_naming / "InvalidNameException";
namespace javax::naming { class LimitExceededException; }
template<> constexpr auto signature<::javax::naming::LimitExceededException> = ::javax_naming / "LimitExceededException";
namespace javax::naming { class LinkException; }
template<> constexpr auto signature<::javax::naming::LinkException> = ::javax_naming / "LinkException";
namespace javax::naming { class LinkLoopException; }
template<> constexpr auto signature<::javax::naming::LinkLoopException> = ::javax_naming / "LinkLoopException";
namespace javax::naming { class LinkRef; }
template<> constexpr auto signature<::javax::naming::LinkRef> = ::javax_naming / "LinkRef";
namespace javax::naming { class MalformedLinkException; }
template<> constexpr auto signature<::javax::naming::MalformedLinkException> = ::javax_naming / "MalformedLinkException";
namespace javax::naming { class Name; }
template<> constexpr auto signature<::javax::naming::Name> = ::javax_naming / "Name";
namespace javax::naming { class NameAlreadyBoundException; }
template<> constexpr auto signature<::javax::naming::NameAlreadyBoundException> = ::javax_naming / "NameAlreadyBoundException";
namespace javax::naming { class NameClassPair; }
template<> constexpr auto signature<::javax::naming::NameClassPair> = ::javax_naming / "NameClassPair";
namespace javax::naming { class NameImpl; }
template<> constexpr auto signature<::javax::naming::NameImpl> = ::javax_naming / "NameImpl";
namespace javax::naming { class NameImplEnumerator; }
template<> constexpr auto signature<::javax::naming::NameImplEnumerator> = ::javax_naming / "NameImplEnumerator";
namespace javax::naming { class NameNotFoundException; }
template<> constexpr auto signature<::javax::naming::NameNotFoundException> = ::javax_naming / "NameNotFoundException";
namespace javax::naming { class NameParser; }
template<> constexpr auto signature<::javax::naming::NameParser> = ::javax_naming / "NameParser";
namespace javax::naming { class NamingEnumeration; }
template<> constexpr auto signature<::javax::naming::NamingEnumeration> = ::javax_naming / "NamingEnumeration";
namespace javax::naming { class NamingException; }
template<> constexpr auto signature<::javax::naming::NamingException> = ::javax_naming / "NamingException";
namespace javax::naming { class NamingSecurityException; }
template<> constexpr auto signature<::javax::naming::NamingSecurityException> = ::javax_naming / "NamingSecurityException";
namespace javax::naming { class NoInitialContextException; }
template<> constexpr auto signature<::javax::naming::NoInitialContextException> = ::javax_naming / "NoInitialContextException";
namespace javax::naming { class NoPermissionException; }
template<> constexpr auto signature<::javax::naming::NoPermissionException> = ::javax_naming / "NoPermissionException";
namespace javax::naming { class NotContextException; }
template<> constexpr auto signature<::javax::naming::NotContextException> = ::javax_naming / "NotContextException";
namespace javax::naming { class OperationNotSupportedException; }
template<> constexpr auto signature<::javax::naming::OperationNotSupportedException> = ::javax_naming / "OperationNotSupportedException";
namespace javax::naming { class PartialResultException; }
template<> constexpr auto signature<::javax::naming::PartialResultException> = ::javax_naming / "PartialResultException";
namespace javax::naming { class RefAddr; }
template<> constexpr auto signature<::javax::naming::RefAddr> = ::javax_naming / "RefAddr";
namespace javax::naming { class Reference; }
template<> constexpr auto signature<::javax::naming::Reference> = ::javax_naming / "Reference";
namespace javax::naming { class Referenceable; }
template<> constexpr auto signature<::javax::naming::Referenceable> = ::javax_naming / "Referenceable";
namespace javax::naming { class ReferralException; }
template<> constexpr auto signature<::javax::naming::ReferralException> = ::javax_naming / "ReferralException";
namespace javax::naming { class ServiceUnavailableException; }
template<> constexpr auto signature<::javax::naming::ServiceUnavailableException> = ::javax_naming / "ServiceUnavailableException";
namespace javax::naming { class SizeLimitExceededException; }
template<> constexpr auto signature<::javax::naming::SizeLimitExceededException> = ::javax_naming / "SizeLimitExceededException";
namespace javax::naming { class StringRefAddr; }
template<> constexpr auto signature<::javax::naming::StringRefAddr> = ::javax_naming / "StringRefAddr";
namespace javax::naming { class TimeLimitExceededException; }
template<> constexpr auto signature<::javax::naming::TimeLimitExceededException> = ::javax_naming / "TimeLimitExceededException";
namespace javax::naming::directory { class Attribute; }
template<> constexpr auto signature<::javax::naming::directory::Attribute> = ::javax_naming_directory / "Attribute";
namespace javax::naming::directory { class AttributeInUseException; }
template<> constexpr auto signature<::javax::naming::directory::AttributeInUseException> = ::javax_naming_directory / "AttributeInUseException";
namespace javax::naming::directory { class AttributeModificationException; }
template<> constexpr auto signature<::javax::naming::directory::AttributeModificationException> = ::javax_naming_directory / "AttributeModificationException";
namespace javax::naming::directory { class Attributes; }
template<> constexpr auto signature<::javax::naming::directory::Attributes> = ::javax_naming_directory / "Attributes";
namespace javax::naming::directory { class BasicAttribute; }
template<> constexpr auto signature<::javax::naming::directory::BasicAttribute> = ::javax_naming_directory / "BasicAttribute";
namespace javax::naming::directory { class BasicAttribute$ValuesEnumImpl; }
template<> constexpr auto signature<::javax::naming::directory::BasicAttribute$ValuesEnumImpl> = ::javax_naming_directory / "BasicAttribute$ValuesEnumImpl";
namespace javax::naming::directory { class BasicAttributes; }
template<> constexpr auto signature<::javax::naming::directory::BasicAttributes> = ::javax_naming_directory / "BasicAttributes";
namespace javax::naming::directory { class BasicAttributes$AttrEnumImpl; }
template<> constexpr auto signature<::javax::naming::directory::BasicAttributes$AttrEnumImpl> = ::javax_naming_directory / "BasicAttributes$AttrEnumImpl";
namespace javax::naming::directory { class BasicAttributes$IDEnumImpl; }
template<> constexpr auto signature<::javax::naming::directory::BasicAttributes$IDEnumImpl> = ::javax_naming_directory / "BasicAttributes$IDEnumImpl";
namespace javax::naming::directory { class DirContext; }
template<> constexpr auto signature<::javax::naming::directory::DirContext> = ::javax_naming_directory / "DirContext";
namespace javax::naming::directory { class InitialDirContext; }
template<> constexpr auto signature<::javax::naming::directory::InitialDirContext> = ::javax_naming_directory / "InitialDirContext";
namespace javax::naming::directory { class InvalidAttributeIdentifierException; }
template<> constexpr auto signature<::javax::naming::directory::InvalidAttributeIdentifierException> = ::javax_naming_directory / "InvalidAttributeIdentifierException";
namespace javax::naming::directory { class InvalidAttributeValueException; }
template<> constexpr auto signature<::javax::naming::directory::InvalidAttributeValueException> = ::javax_naming_directory / "InvalidAttributeValueException";
namespace javax::naming::directory { class InvalidAttributesException; }
template<> constexpr auto signature<::javax::naming::directory::InvalidAttributesException> = ::javax_naming_directory / "InvalidAttributesException";
namespace javax::naming::directory { class InvalidSearchControlsException; }
template<> constexpr auto signature<::javax::naming::directory::InvalidSearchControlsException> = ::javax_naming_directory / "InvalidSearchControlsException";
namespace javax::naming::directory { class InvalidSearchFilterException; }
template<> constexpr auto signature<::javax::naming::directory::InvalidSearchFilterException> = ::javax_naming_directory / "InvalidSearchFilterException";
namespace javax::naming::directory { class ModificationItem; }
template<> constexpr auto signature<::javax::naming::directory::ModificationItem> = ::javax_naming_directory / "ModificationItem";
namespace javax::naming::directory { class NoSuchAttributeException; }
template<> constexpr auto signature<::javax::naming::directory::NoSuchAttributeException> = ::javax_naming_directory / "NoSuchAttributeException";
namespace javax::naming::directory { class SchemaViolationException; }
template<> constexpr auto signature<::javax::naming::directory::SchemaViolationException> = ::javax_naming_directory / "SchemaViolationException";
namespace javax::naming::directory { class SearchControls; }
template<> constexpr auto signature<::javax::naming::directory::SearchControls> = ::javax_naming_directory / "SearchControls";
namespace javax::naming::directory { class SearchResult; }
template<> constexpr auto signature<::javax::naming::directory::SearchResult> = ::javax_naming_directory / "SearchResult";
namespace javax::naming::event { class EventContext; }
template<> constexpr auto signature<::javax::naming::event::EventContext> = ::javax_naming_event / "EventContext";
namespace javax::naming::event { class EventDirContext; }
template<> constexpr auto signature<::javax::naming::event::EventDirContext> = ::javax_naming_event / "EventDirContext";
namespace javax::naming::event { class NamespaceChangeListener; }
template<> constexpr auto signature<::javax::naming::event::NamespaceChangeListener> = ::javax_naming_event / "NamespaceChangeListener";
namespace javax::naming::event { class NamingEvent; }
template<> constexpr auto signature<::javax::naming::event::NamingEvent> = ::javax_naming_event / "NamingEvent";
namespace javax::naming::event { class NamingExceptionEvent; }
template<> constexpr auto signature<::javax::naming::event::NamingExceptionEvent> = ::javax_naming_event / "NamingExceptionEvent";
namespace javax::naming::event { class NamingListener; }
template<> constexpr auto signature<::javax::naming::event::NamingListener> = ::javax_naming_event / "NamingListener";
namespace javax::naming::event { class ObjectChangeListener; }
template<> constexpr auto signature<::javax::naming::event::ObjectChangeListener> = ::javax_naming_event / "ObjectChangeListener";
namespace javax::naming::ldap { class BasicControl; }
template<> constexpr auto signature<::javax::naming::ldap::BasicControl> = ::javax_naming_ldap / "BasicControl";
namespace javax::naming::ldap { class Control; }
template<> constexpr auto signature<::javax::naming::ldap::Control> = ::javax_naming_ldap / "Control";
namespace javax::naming::ldap { class ControlFactory; }
template<> constexpr auto signature<::javax::naming::ldap::ControlFactory> = ::javax_naming_ldap / "ControlFactory";
namespace javax::naming::ldap { class ExtendedRequest; }
template<> constexpr auto signature<::javax::naming::ldap::ExtendedRequest> = ::javax_naming_ldap / "ExtendedRequest";
namespace javax::naming::ldap { class ExtendedResponse; }
template<> constexpr auto signature<::javax::naming::ldap::ExtendedResponse> = ::javax_naming_ldap / "ExtendedResponse";
namespace javax::naming::ldap { class HasControls; }
template<> constexpr auto signature<::javax::naming::ldap::HasControls> = ::javax_naming_ldap / "HasControls";
namespace javax::naming::ldap { class InitialLdapContext; }
template<> constexpr auto signature<::javax::naming::ldap::InitialLdapContext> = ::javax_naming_ldap / "InitialLdapContext";
namespace javax::naming::ldap { class LdapContext; }
template<> constexpr auto signature<::javax::naming::ldap::LdapContext> = ::javax_naming_ldap / "LdapContext";
namespace javax::naming::ldap { class LdapName; }
template<> constexpr auto signature<::javax::naming::ldap::LdapName> = ::javax_naming_ldap / "LdapName";
namespace javax::naming::ldap { class LdapName$1; }
template<> constexpr auto signature<::javax::naming::ldap::LdapName$1> = ::javax_naming_ldap / "LdapName$1";
namespace javax::naming::ldap { class LdapReferralException; }
template<> constexpr auto signature<::javax::naming::ldap::LdapReferralException> = ::javax_naming_ldap / "LdapReferralException";
namespace javax::naming::ldap { class ManageReferralControl; }
template<> constexpr auto signature<::javax::naming::ldap::ManageReferralControl> = ::javax_naming_ldap / "ManageReferralControl";
namespace javax::naming::ldap { class PagedResultsControl; }
template<> constexpr auto signature<::javax::naming::ldap::PagedResultsControl> = ::javax_naming_ldap / "PagedResultsControl";
namespace javax::naming::ldap { class PagedResultsResponseControl; }
template<> constexpr auto signature<::javax::naming::ldap::PagedResultsResponseControl> = ::javax_naming_ldap / "PagedResultsResponseControl";
namespace javax::naming::ldap { class Rdn; }
template<> constexpr auto signature<::javax::naming::ldap::Rdn> = ::javax_naming_ldap / "Rdn";
namespace javax::naming::ldap { class Rdn$1; }
template<> constexpr auto signature<::javax::naming::ldap::Rdn$1> = ::javax_naming_ldap / "Rdn$1";
namespace javax::naming::ldap { class Rdn$RdnEntry; }
template<> constexpr auto signature<::javax::naming::ldap::Rdn$RdnEntry> = ::javax_naming_ldap / "Rdn$RdnEntry";
namespace javax::naming::ldap { class Rfc2253Parser; }
template<> constexpr auto signature<::javax::naming::ldap::Rfc2253Parser> = ::javax_naming_ldap / "Rfc2253Parser";
namespace javax::naming::ldap { class SortControl; }
template<> constexpr auto signature<::javax::naming::ldap::SortControl> = ::javax_naming_ldap / "SortControl";
namespace javax::naming::ldap { class SortKey; }
template<> constexpr auto signature<::javax::naming::ldap::SortKey> = ::javax_naming_ldap / "SortKey";
namespace javax::naming::ldap { class SortResponseControl; }
template<> constexpr auto signature<::javax::naming::ldap::SortResponseControl> = ::javax_naming_ldap / "SortResponseControl";
namespace javax::naming::ldap { class StartTlsRequest; }
template<> constexpr auto signature<::javax::naming::ldap::StartTlsRequest> = ::javax_naming_ldap / "StartTlsRequest";
namespace javax::naming::ldap { class StartTlsRequest$1; }
template<> constexpr auto signature<::javax::naming::ldap::StartTlsRequest$1> = ::javax_naming_ldap / "StartTlsRequest$1";
namespace javax::naming::ldap { class StartTlsRequest$2; }
template<> constexpr auto signature<::javax::naming::ldap::StartTlsRequest$2> = ::javax_naming_ldap / "StartTlsRequest$2";
namespace javax::naming::ldap { class StartTlsResponse; }
template<> constexpr auto signature<::javax::naming::ldap::StartTlsResponse> = ::javax_naming_ldap / "StartTlsResponse";
namespace javax::naming::ldap { class UnsolicitedNotification; }
template<> constexpr auto signature<::javax::naming::ldap::UnsolicitedNotification> = ::javax_naming_ldap / "UnsolicitedNotification";
namespace javax::naming::ldap { class UnsolicitedNotificationEvent; }
template<> constexpr auto signature<::javax::naming::ldap::UnsolicitedNotificationEvent> = ::javax_naming_ldap / "UnsolicitedNotificationEvent";
namespace javax::naming::ldap { class UnsolicitedNotificationListener; }
template<> constexpr auto signature<::javax::naming::ldap::UnsolicitedNotificationListener> = ::javax_naming_ldap / "UnsolicitedNotificationListener";
namespace javax::naming::spi { class ContinuationContext; }
template<> constexpr auto signature<::javax::naming::spi::ContinuationContext> = ::javax_naming_spi / "ContinuationContext";
namespace javax::naming::spi { class ContinuationDirContext; }
template<> constexpr auto signature<::javax::naming::spi::ContinuationDirContext> = ::javax_naming_spi / "ContinuationDirContext";
namespace javax::naming::spi { class DirContextNamePair; }
template<> constexpr auto signature<::javax::naming::spi::DirContextNamePair> = ::javax_naming_spi / "DirContextNamePair";
namespace javax::naming::spi { class DirContextStringPair; }
template<> constexpr auto signature<::javax::naming::spi::DirContextStringPair> = ::javax_naming_spi / "DirContextStringPair";
namespace javax::naming::spi { class DirObjectFactory; }
template<> constexpr auto signature<::javax::naming::spi::DirObjectFactory> = ::javax_naming_spi / "DirObjectFactory";
namespace javax::naming::spi { class DirStateFactory; }
template<> constexpr auto signature<::javax::naming::spi::DirStateFactory> = ::javax_naming_spi / "DirStateFactory";
namespace javax::naming::spi { class DirStateFactory$Result; }
template<> constexpr auto signature<::javax::naming::spi::DirStateFactory$Result> = ::javax_naming_spi / "DirStateFactory$Result";
namespace javax::naming::spi { class DirectoryManager; }
template<> constexpr auto signature<::javax::naming::spi::DirectoryManager> = ::javax_naming_spi / "DirectoryManager";
namespace javax::naming::spi { class InitialContextFactory; }
template<> constexpr auto signature<::javax::naming::spi::InitialContextFactory> = ::javax_naming_spi / "InitialContextFactory";
namespace javax::naming::spi { class InitialContextFactoryBuilder; }
template<> constexpr auto signature<::javax::naming::spi::InitialContextFactoryBuilder> = ::javax_naming_spi / "InitialContextFactoryBuilder";
namespace javax::naming::spi { class NamingManager; }
template<> constexpr auto signature<::javax::naming::spi::NamingManager> = ::javax_naming_spi / "NamingManager";
namespace javax::naming::spi { class ObjectFactory; }
template<> constexpr auto signature<::javax::naming::spi::ObjectFactory> = ::javax_naming_spi / "ObjectFactory";
namespace javax::naming::spi { class ObjectFactoryBuilder; }
template<> constexpr auto signature<::javax::naming::spi::ObjectFactoryBuilder> = ::javax_naming_spi / "ObjectFactoryBuilder";
namespace javax::naming::spi { class ResolveResult; }
template<> constexpr auto signature<::javax::naming::spi::ResolveResult> = ::javax_naming_spi / "ResolveResult";
namespace javax::naming::spi { class Resolver; }
template<> constexpr auto signature<::javax::naming::spi::Resolver> = ::javax_naming_spi / "Resolver";
namespace javax::naming::spi { class StateFactory; }
template<> constexpr auto signature<::javax::naming::spi::StateFactory> = ::javax_naming_spi / "StateFactory";
namespace javax::net { class DefaultServerSocketFactory; }
template<> constexpr auto signature<::javax::net::DefaultServerSocketFactory> = ::javax_net / "DefaultServerSocketFactory";
namespace javax::net { class DefaultSocketFactory; }
template<> constexpr auto signature<::javax::net::DefaultSocketFactory> = ::javax_net / "DefaultSocketFactory";
namespace javax::net { class ServerSocketFactory; }
template<> constexpr auto signature<::javax::net::ServerSocketFactory> = ::javax_net / "ServerSocketFactory";
namespace javax::net { class SocketFactory; }
template<> constexpr auto signature<::javax::net::SocketFactory> = ::javax_net / "SocketFactory";
namespace javax::net::ssl { class CertPathTrustManagerParameters; }
template<> constexpr auto signature<::javax::net::ssl::CertPathTrustManagerParameters> = ::javax_net_ssl / "CertPathTrustManagerParameters";
namespace javax::net::ssl { class DefaultSSLServerSocketFactory; }
template<> constexpr auto signature<::javax::net::ssl::DefaultSSLServerSocketFactory> = ::javax_net_ssl / "DefaultSSLServerSocketFactory";
namespace javax::net::ssl { class DefaultSSLSocketFactory; }
template<> constexpr auto signature<::javax::net::ssl::DefaultSSLSocketFactory> = ::javax_net_ssl / "DefaultSSLSocketFactory";
namespace javax::net::ssl { class ExtendedSSLSession; }
template<> constexpr auto signature<::javax::net::ssl::ExtendedSSLSession> = ::javax_net_ssl / "ExtendedSSLSession";
namespace javax::net::ssl { class HandshakeCompletedEvent; }
template<> constexpr auto signature<::javax::net::ssl::HandshakeCompletedEvent> = ::javax_net_ssl / "HandshakeCompletedEvent";
namespace javax::net::ssl { class HandshakeCompletedListener; }
template<> constexpr auto signature<::javax::net::ssl::HandshakeCompletedListener> = ::javax_net_ssl / "HandshakeCompletedListener";
namespace javax::net::ssl { class HostnameVerifier; }
template<> constexpr auto signature<::javax::net::ssl::HostnameVerifier> = ::javax_net_ssl / "HostnameVerifier";
namespace javax::net::ssl { class HttpsURLConnection; }
template<> constexpr auto signature<::javax::net::ssl::HttpsURLConnection> = ::javax_net_ssl / "HttpsURLConnection";
namespace javax::net::ssl { class HttpsURLConnection$1; }
template<> constexpr auto signature<::javax::net::ssl::HttpsURLConnection$1> = ::javax_net_ssl / "HttpsURLConnection$1";
namespace javax::net::ssl { class HttpsURLConnection$DefaultHostnameVerifier; }
template<> constexpr auto signature<::javax::net::ssl::HttpsURLConnection$DefaultHostnameVerifier> = ::javax_net_ssl / "HttpsURLConnection$DefaultHostnameVerifier";
namespace javax::net::ssl { class KeyManager; }
template<> constexpr auto signature<::javax::net::ssl::KeyManager> = ::javax_net_ssl / "KeyManager";
namespace javax::net::ssl { class KeyManagerFactory; }
template<> constexpr auto signature<::javax::net::ssl::KeyManagerFactory> = ::javax_net_ssl / "KeyManagerFactory";
namespace javax::net::ssl { class KeyManagerFactory$1; }
template<> constexpr auto signature<::javax::net::ssl::KeyManagerFactory$1> = ::javax_net_ssl / "KeyManagerFactory$1";
namespace javax::net::ssl { class KeyManagerFactorySpi; }
template<> constexpr auto signature<::javax::net::ssl::KeyManagerFactorySpi> = ::javax_net_ssl / "KeyManagerFactorySpi";
namespace javax::net::ssl { class KeyStoreBuilderParameters; }
template<> constexpr auto signature<::javax::net::ssl::KeyStoreBuilderParameters> = ::javax_net_ssl / "KeyStoreBuilderParameters";
namespace javax::net::ssl { class ManagerFactoryParameters; }
template<> constexpr auto signature<::javax::net::ssl::ManagerFactoryParameters> = ::javax_net_ssl / "ManagerFactoryParameters";
namespace javax::net::ssl { class SNIHostName; }
template<> constexpr auto signature<::javax::net::ssl::SNIHostName> = ::javax_net_ssl / "SNIHostName";
namespace javax::net::ssl { class SNIHostName$SNIHostNameMatcher; }
template<> constexpr auto signature<::javax::net::ssl::SNIHostName$SNIHostNameMatcher> = ::javax_net_ssl / "SNIHostName$SNIHostNameMatcher";
namespace javax::net::ssl { class SNIMatcher; }
template<> constexpr auto signature<::javax::net::ssl::SNIMatcher> = ::javax_net_ssl / "SNIMatcher";
namespace javax::net::ssl { class SNIServerName; }
template<> constexpr auto signature<::javax::net::ssl::SNIServerName> = ::javax_net_ssl / "SNIServerName";
namespace javax::net::ssl { class SSLContext; }
template<> constexpr auto signature<::javax::net::ssl::SSLContext> = ::javax_net_ssl / "SSLContext";
namespace javax::net::ssl { class SSLContextSpi; }
template<> constexpr auto signature<::javax::net::ssl::SSLContextSpi> = ::javax_net_ssl / "SSLContextSpi";
namespace javax::net::ssl { class SSLEngine; }
template<> constexpr auto signature<::javax::net::ssl::SSLEngine> = ::javax_net_ssl / "SSLEngine";
namespace javax::net::ssl { class SSLEngineResult; }
template<> constexpr auto signature<::javax::net::ssl::SSLEngineResult> = ::javax_net_ssl / "SSLEngineResult";
namespace javax::net::ssl { class SSLEngineResult$HandshakeStatus; }
template<> constexpr auto signature<::javax::net::ssl::SSLEngineResult$HandshakeStatus> = ::javax_net_ssl / "SSLEngineResult$HandshakeStatus";
namespace javax::net::ssl { class SSLEngineResult$Status; }
template<> constexpr auto signature<::javax::net::ssl::SSLEngineResult$Status> = ::javax_net_ssl / "SSLEngineResult$Status";
namespace javax::net::ssl { class SSLException; }
template<> constexpr auto signature<::javax::net::ssl::SSLException> = ::javax_net_ssl / "SSLException";
namespace javax::net::ssl { class SSLHandshakeException; }
template<> constexpr auto signature<::javax::net::ssl::SSLHandshakeException> = ::javax_net_ssl / "SSLHandshakeException";
namespace javax::net::ssl { class SSLKeyException; }
template<> constexpr auto signature<::javax::net::ssl::SSLKeyException> = ::javax_net_ssl / "SSLKeyException";
namespace javax::net::ssl { class SSLParameters; }
template<> constexpr auto signature<::javax::net::ssl::SSLParameters> = ::javax_net_ssl / "SSLParameters";
namespace javax::net::ssl { class SSLPeerUnverifiedException; }
template<> constexpr auto signature<::javax::net::ssl::SSLPeerUnverifiedException> = ::javax_net_ssl / "SSLPeerUnverifiedException";
namespace javax::net::ssl { class SSLPermission; }
template<> constexpr auto signature<::javax::net::ssl::SSLPermission> = ::javax_net_ssl / "SSLPermission";
namespace javax::net::ssl { class SSLProtocolException; }
template<> constexpr auto signature<::javax::net::ssl::SSLProtocolException> = ::javax_net_ssl / "SSLProtocolException";
namespace javax::net::ssl { class SSLServerSocket; }
template<> constexpr auto signature<::javax::net::ssl::SSLServerSocket> = ::javax_net_ssl / "SSLServerSocket";
namespace javax::net::ssl { class SSLServerSocketFactory; }
template<> constexpr auto signature<::javax::net::ssl::SSLServerSocketFactory> = ::javax_net_ssl / "SSLServerSocketFactory";
namespace javax::net::ssl { class SSLSession; }
template<> constexpr auto signature<::javax::net::ssl::SSLSession> = ::javax_net_ssl / "SSLSession";
namespace javax::net::ssl { class SSLSessionBindingEvent; }
template<> constexpr auto signature<::javax::net::ssl::SSLSessionBindingEvent> = ::javax_net_ssl / "SSLSessionBindingEvent";
namespace javax::net::ssl { class SSLSessionBindingListener; }
template<> constexpr auto signature<::javax::net::ssl::SSLSessionBindingListener> = ::javax_net_ssl / "SSLSessionBindingListener";
namespace javax::net::ssl { class SSLSessionContext; }
template<> constexpr auto signature<::javax::net::ssl::SSLSessionContext> = ::javax_net_ssl / "SSLSessionContext";
namespace javax::net::ssl { class SSLSocket; }
template<> constexpr auto signature<::javax::net::ssl::SSLSocket> = ::javax_net_ssl / "SSLSocket";
namespace javax::net::ssl { class SSLSocketFactory; }
template<> constexpr auto signature<::javax::net::ssl::SSLSocketFactory> = ::javax_net_ssl / "SSLSocketFactory";
namespace javax::net::ssl { class SSLSocketFactory$1; }
template<> constexpr auto signature<::javax::net::ssl::SSLSocketFactory$1> = ::javax_net_ssl / "SSLSocketFactory$1";
namespace javax::net::ssl { class StandardConstants; }
template<> constexpr auto signature<::javax::net::ssl::StandardConstants> = ::javax_net_ssl / "StandardConstants";
namespace javax::net::ssl { class TrustManager; }
template<> constexpr auto signature<::javax::net::ssl::TrustManager> = ::javax_net_ssl / "TrustManager";
namespace javax::net::ssl { class TrustManagerFactory; }
template<> constexpr auto signature<::javax::net::ssl::TrustManagerFactory> = ::javax_net_ssl / "TrustManagerFactory";
namespace javax::net::ssl { class TrustManagerFactory$1; }
template<> constexpr auto signature<::javax::net::ssl::TrustManagerFactory$1> = ::javax_net_ssl / "TrustManagerFactory$1";
namespace javax::net::ssl { class TrustManagerFactorySpi; }
template<> constexpr auto signature<::javax::net::ssl::TrustManagerFactorySpi> = ::javax_net_ssl / "TrustManagerFactorySpi";
namespace javax::net::ssl { class X509ExtendedKeyManager; }
template<> constexpr auto signature<::javax::net::ssl::X509ExtendedKeyManager> = ::javax_net_ssl / "X509ExtendedKeyManager";
namespace javax::net::ssl { class X509ExtendedTrustManager; }
template<> constexpr auto signature<::javax::net::ssl::X509ExtendedTrustManager> = ::javax_net_ssl / "X509ExtendedTrustManager";
namespace javax::net::ssl { class X509KeyManager; }
template<> constexpr auto signature<::javax::net::ssl::X509KeyManager> = ::javax_net_ssl / "X509KeyManager";
namespace javax::net::ssl { class X509TrustManager; }
template<> constexpr auto signature<::javax::net::ssl::X509TrustManager> = ::javax_net_ssl / "X509TrustManager";
namespace javax::print { class AttributeException; }
template<> constexpr auto signature<::javax::print::AttributeException> = ::javax_print / "AttributeException";
namespace javax::print { class CancelablePrintJob; }
template<> constexpr auto signature<::javax::print::CancelablePrintJob> = ::javax_print / "CancelablePrintJob";
namespace javax::print { class Doc; }
template<> constexpr auto signature<::javax::print::Doc> = ::javax_print / "Doc";
namespace javax::print { class DocFlavor; }
template<> constexpr auto signature<::javax::print::DocFlavor> = ::javax_print / "DocFlavor";
namespace javax::print { class DocFlavor$BYTE_ARRAY; }
template<> constexpr auto signature<::javax::print::DocFlavor$BYTE_ARRAY> = ::javax_print / "DocFlavor$BYTE_ARRAY";
namespace javax::print { class DocFlavor$CHAR_ARRAY; }
template<> constexpr auto signature<::javax::print::DocFlavor$CHAR_ARRAY> = ::javax_print / "DocFlavor$CHAR_ARRAY";
namespace javax::print { class DocFlavor$INPUT_STREAM; }
template<> constexpr auto signature<::javax::print::DocFlavor$INPUT_STREAM> = ::javax_print / "DocFlavor$INPUT_STREAM";
namespace javax::print { class DocFlavor$READER; }
template<> constexpr auto signature<::javax::print::DocFlavor$READER> = ::javax_print / "DocFlavor$READER";
namespace javax::print { class DocFlavor$SERVICE_FORMATTED; }
template<> constexpr auto signature<::javax::print::DocFlavor$SERVICE_FORMATTED> = ::javax_print / "DocFlavor$SERVICE_FORMATTED";
namespace javax::print { class DocFlavor$STRING; }
template<> constexpr auto signature<::javax::print::DocFlavor$STRING> = ::javax_print / "DocFlavor$STRING";
namespace javax::print { class DocFlavor$URL; }
template<> constexpr auto signature<::javax::print::DocFlavor$URL> = ::javax_print / "DocFlavor$URL";
namespace javax::print { class DocPrintJob; }
template<> constexpr auto signature<::javax::print::DocPrintJob> = ::javax_print / "DocPrintJob";
namespace javax::print { class FlavorException; }
template<> constexpr auto signature<::javax::print::FlavorException> = ::javax_print / "FlavorException";
namespace javax::print { class MimeType; }
template<> constexpr auto signature<::javax::print::MimeType> = ::javax_print / "MimeType";
namespace javax::print { class MimeType$1; }
template<> constexpr auto signature<::javax::print::MimeType$1> = ::javax_print / "MimeType$1";
namespace javax::print { class MimeType$LexicalAnalyzer; }
template<> constexpr auto signature<::javax::print::MimeType$LexicalAnalyzer> = ::javax_print / "MimeType$LexicalAnalyzer";
namespace javax::print { class MimeType$ParameterMap; }
template<> constexpr auto signature<::javax::print::MimeType$ParameterMap> = ::javax_print / "MimeType$ParameterMap";
namespace javax::print { class MimeType$ParameterMapEntry; }
template<> constexpr auto signature<::javax::print::MimeType$ParameterMapEntry> = ::javax_print / "MimeType$ParameterMapEntry";
namespace javax::print { class MimeType$ParameterMapEntrySet; }
template<> constexpr auto signature<::javax::print::MimeType$ParameterMapEntrySet> = ::javax_print / "MimeType$ParameterMapEntrySet";
namespace javax::print { class MimeType$ParameterMapEntrySetIterator; }
template<> constexpr auto signature<::javax::print::MimeType$ParameterMapEntrySetIterator> = ::javax_print / "MimeType$ParameterMapEntrySetIterator";
namespace javax::print { class MultiDoc; }
template<> constexpr auto signature<::javax::print::MultiDoc> = ::javax_print / "MultiDoc";
namespace javax::print { class MultiDocPrintJob; }
template<> constexpr auto signature<::javax::print::MultiDocPrintJob> = ::javax_print / "MultiDocPrintJob";
namespace javax::print { class MultiDocPrintService; }
template<> constexpr auto signature<::javax::print::MultiDocPrintService> = ::javax_print / "MultiDocPrintService";
namespace javax::print { class PrintException; }
template<> constexpr auto signature<::javax::print::PrintException> = ::javax_print / "PrintException";
namespace javax::print { class PrintService; }
template<> constexpr auto signature<::javax::print::PrintService> = ::javax_print / "PrintService";
namespace javax::print { class PrintServiceLookup; }
template<> constexpr auto signature<::javax::print::PrintServiceLookup> = ::javax_print / "PrintServiceLookup";
namespace javax::print { class PrintServiceLookup$1; }
template<> constexpr auto signature<::javax::print::PrintServiceLookup$1> = ::javax_print / "PrintServiceLookup$1";
namespace javax::print { class PrintServiceLookup$Services; }
template<> constexpr auto signature<::javax::print::PrintServiceLookup$Services> = ::javax_print / "PrintServiceLookup$Services";
namespace javax::print { class ServiceUI; }
template<> constexpr auto signature<::javax::print::ServiceUI> = ::javax_print / "ServiceUI";
namespace javax::print { class ServiceUIFactory; }
template<> constexpr auto signature<::javax::print::ServiceUIFactory> = ::javax_print / "ServiceUIFactory";
namespace javax::print { class SimpleDoc; }
template<> constexpr auto signature<::javax::print::SimpleDoc> = ::javax_print / "SimpleDoc";
namespace javax::print { class StreamPrintService; }
template<> constexpr auto signature<::javax::print::StreamPrintService> = ::javax_print / "StreamPrintService";
namespace javax::print { class StreamPrintServiceFactory; }
template<> constexpr auto signature<::javax::print::StreamPrintServiceFactory> = ::javax_print / "StreamPrintServiceFactory";
namespace javax::print { class StreamPrintServiceFactory$1; }
template<> constexpr auto signature<::javax::print::StreamPrintServiceFactory$1> = ::javax_print / "StreamPrintServiceFactory$1";
namespace javax::print { class StreamPrintServiceFactory$Services; }
template<> constexpr auto signature<::javax::print::StreamPrintServiceFactory$Services> = ::javax_print / "StreamPrintServiceFactory$Services";
namespace javax::print { class URIException; }
template<> constexpr auto signature<::javax::print::URIException> = ::javax_print / "URIException";
namespace javax::print::attribute { class Attribute; }
template<> constexpr auto signature<::javax::print::attribute::Attribute> = ::javax_print_attribute / "Attribute";
namespace javax::print::attribute { class AttributeSet; }
template<> constexpr auto signature<::javax::print::attribute::AttributeSet> = ::javax_print_attribute / "AttributeSet";
namespace javax::print::attribute { class AttributeSetUtilities; }
template<> constexpr auto signature<::javax::print::attribute::AttributeSetUtilities> = ::javax_print_attribute / "AttributeSetUtilities";
namespace javax::print::attribute { class AttributeSetUtilities$SynchronizedAttributeSet; }
template<> constexpr auto signature<::javax::print::attribute::AttributeSetUtilities$SynchronizedAttributeSet> = ::javax_print_attribute / "AttributeSetUtilities$SynchronizedAttributeSet";
namespace javax::print::attribute { class AttributeSetUtilities$SynchronizedDocAttributeSet; }
template<> constexpr auto signature<::javax::print::attribute::AttributeSetUtilities$SynchronizedDocAttributeSet> = ::javax_print_attribute / "AttributeSetUtilities$SynchronizedDocAttributeSet";
namespace javax::print::attribute { class AttributeSetUtilities$SynchronizedPrintJobAttributeSet; }
template<> constexpr auto signature<::javax::print::attribute::AttributeSetUtilities$SynchronizedPrintJobAttributeSet> = ::javax_print_attribute / "AttributeSetUtilities$SynchronizedPrintJobAttributeSet";
namespace javax::print::attribute { class AttributeSetUtilities$SynchronizedPrintRequestAttributeSet; }
template<> constexpr auto signature<::javax::print::attribute::AttributeSetUtilities$SynchronizedPrintRequestAttributeSet> = ::javax_print_attribute / "AttributeSetUtilities$SynchronizedPrintRequestAttributeSet";
namespace javax::print::attribute { class AttributeSetUtilities$SynchronizedPrintServiceAttributeSet; }
template<> constexpr auto signature<::javax::print::attribute::AttributeSetUtilities$SynchronizedPrintServiceAttributeSet> = ::javax_print_attribute / "AttributeSetUtilities$SynchronizedPrintServiceAttributeSet";
namespace javax::print::attribute { class AttributeSetUtilities$UnmodifiableAttributeSet; }
template<> constexpr auto signature<::javax::print::attribute::AttributeSetUtilities$UnmodifiableAttributeSet> = ::javax_print_attribute / "AttributeSetUtilities$UnmodifiableAttributeSet";
namespace javax::print::attribute { class AttributeSetUtilities$UnmodifiableDocAttributeSet; }
template<> constexpr auto signature<::javax::print::attribute::AttributeSetUtilities$UnmodifiableDocAttributeSet> = ::javax_print_attribute / "AttributeSetUtilities$UnmodifiableDocAttributeSet";
namespace javax::print::attribute { class AttributeSetUtilities$UnmodifiablePrintJobAttributeSet; }
template<> constexpr auto signature<::javax::print::attribute::AttributeSetUtilities$UnmodifiablePrintJobAttributeSet> = ::javax_print_attribute / "AttributeSetUtilities$UnmodifiablePrintJobAttributeSet";
namespace javax::print::attribute { class AttributeSetUtilities$UnmodifiablePrintRequestAttributeSet; }
template<> constexpr auto signature<::javax::print::attribute::AttributeSetUtilities$UnmodifiablePrintRequestAttributeSet> = ::javax_print_attribute / "AttributeSetUtilities$UnmodifiablePrintRequestAttributeSet";
namespace javax::print::attribute { class AttributeSetUtilities$UnmodifiablePrintServiceAttributeSet; }
template<> constexpr auto signature<::javax::print::attribute::AttributeSetUtilities$UnmodifiablePrintServiceAttributeSet> = ::javax_print_attribute / "AttributeSetUtilities$UnmodifiablePrintServiceAttributeSet";
namespace javax::print::attribute { class DateTimeSyntax; }
template<> constexpr auto signature<::javax::print::attribute::DateTimeSyntax> = ::javax_print_attribute / "DateTimeSyntax";
namespace javax::print::attribute { class DocAttribute; }
template<> constexpr auto signature<::javax::print::attribute::DocAttribute> = ::javax_print_attribute / "DocAttribute";
namespace javax::print::attribute { class DocAttributeSet; }
template<> constexpr auto signature<::javax::print::attribute::DocAttributeSet> = ::javax_print_attribute / "DocAttributeSet";
namespace javax::print::attribute { class EnumSyntax; }
template<> constexpr auto signature<::javax::print::attribute::EnumSyntax> = ::javax_print_attribute / "EnumSyntax";
namespace javax::print::attribute { class HashAttributeSet; }
template<> constexpr auto signature<::javax::print::attribute::HashAttributeSet> = ::javax_print_attribute / "HashAttributeSet";
namespace javax::print::attribute { class HashDocAttributeSet; }
template<> constexpr auto signature<::javax::print::attribute::HashDocAttributeSet> = ::javax_print_attribute / "HashDocAttributeSet";
namespace javax::print::attribute { class HashPrintJobAttributeSet; }
template<> constexpr auto signature<::javax::print::attribute::HashPrintJobAttributeSet> = ::javax_print_attribute / "HashPrintJobAttributeSet";
namespace javax::print::attribute { class HashPrintRequestAttributeSet; }
template<> constexpr auto signature<::javax::print::attribute::HashPrintRequestAttributeSet> = ::javax_print_attribute / "HashPrintRequestAttributeSet";
namespace javax::print::attribute { class HashPrintServiceAttributeSet; }
template<> constexpr auto signature<::javax::print::attribute::HashPrintServiceAttributeSet> = ::javax_print_attribute / "HashPrintServiceAttributeSet";
namespace javax::print::attribute { class IntegerSyntax; }
template<> constexpr auto signature<::javax::print::attribute::IntegerSyntax> = ::javax_print_attribute / "IntegerSyntax";
namespace javax::print::attribute { class PrintJobAttribute; }
template<> constexpr auto signature<::javax::print::attribute::PrintJobAttribute> = ::javax_print_attribute / "PrintJobAttribute";
namespace javax::print::attribute { class PrintJobAttributeSet; }
template<> constexpr auto signature<::javax::print::attribute::PrintJobAttributeSet> = ::javax_print_attribute / "PrintJobAttributeSet";
namespace javax::print::attribute { class PrintRequestAttribute; }
template<> constexpr auto signature<::javax::print::attribute::PrintRequestAttribute> = ::javax_print_attribute / "PrintRequestAttribute";
namespace javax::print::attribute { class PrintRequestAttributeSet; }
template<> constexpr auto signature<::javax::print::attribute::PrintRequestAttributeSet> = ::javax_print_attribute / "PrintRequestAttributeSet";
namespace javax::print::attribute { class PrintServiceAttribute; }
template<> constexpr auto signature<::javax::print::attribute::PrintServiceAttribute> = ::javax_print_attribute / "PrintServiceAttribute";
namespace javax::print::attribute { class PrintServiceAttributeSet; }
template<> constexpr auto signature<::javax::print::attribute::PrintServiceAttributeSet> = ::javax_print_attribute / "PrintServiceAttributeSet";
namespace javax::print::attribute { class ResolutionSyntax; }
template<> constexpr auto signature<::javax::print::attribute::ResolutionSyntax> = ::javax_print_attribute / "ResolutionSyntax";
namespace javax::print::attribute { class SetOfIntegerSyntax; }
template<> constexpr auto signature<::javax::print::attribute::SetOfIntegerSyntax> = ::javax_print_attribute / "SetOfIntegerSyntax";
namespace javax::print::attribute { class Size2DSyntax; }
template<> constexpr auto signature<::javax::print::attribute::Size2DSyntax> = ::javax_print_attribute / "Size2DSyntax";
namespace javax::print::attribute { class SupportedValuesAttribute; }
template<> constexpr auto signature<::javax::print::attribute::SupportedValuesAttribute> = ::javax_print_attribute / "SupportedValuesAttribute";
namespace javax::print::attribute { class TextSyntax; }
template<> constexpr auto signature<::javax::print::attribute::TextSyntax> = ::javax_print_attribute / "TextSyntax";
namespace javax::print::attribute { class URISyntax; }
template<> constexpr auto signature<::javax::print::attribute::URISyntax> = ::javax_print_attribute / "URISyntax";
namespace javax::print::attribute { class UnmodifiableSetException; }
template<> constexpr auto signature<::javax::print::attribute::UnmodifiableSetException> = ::javax_print_attribute / "UnmodifiableSetException";
namespace javax::print::attribute::standard { class Chromaticity; }
template<> constexpr auto signature<::javax::print::attribute::standard::Chromaticity> = ::javax_print_attribute_standard / "Chromaticity";
namespace javax::print::attribute::standard { class ColorSupported; }
template<> constexpr auto signature<::javax::print::attribute::standard::ColorSupported> = ::javax_print_attribute_standard / "ColorSupported";
namespace javax::print::attribute::standard { class Compression; }
template<> constexpr auto signature<::javax::print::attribute::standard::Compression> = ::javax_print_attribute_standard / "Compression";
namespace javax::print::attribute::standard { class Copies; }
template<> constexpr auto signature<::javax::print::attribute::standard::Copies> = ::javax_print_attribute_standard / "Copies";
namespace javax::print::attribute::standard { class CopiesSupported; }
template<> constexpr auto signature<::javax::print::attribute::standard::CopiesSupported> = ::javax_print_attribute_standard / "CopiesSupported";
namespace javax::print::attribute::standard { class DateTimeAtCompleted; }
template<> constexpr auto signature<::javax::print::attribute::standard::DateTimeAtCompleted> = ::javax_print_attribute_standard / "DateTimeAtCompleted";
namespace javax::print::attribute::standard { class DateTimeAtCreation; }
template<> constexpr auto signature<::javax::print::attribute::standard::DateTimeAtCreation> = ::javax_print_attribute_standard / "DateTimeAtCreation";
namespace javax::print::attribute::standard { class DateTimeAtProcessing; }
template<> constexpr auto signature<::javax::print::attribute::standard::DateTimeAtProcessing> = ::javax_print_attribute_standard / "DateTimeAtProcessing";
namespace javax::print::attribute::standard { class Destination; }
template<> constexpr auto signature<::javax::print::attribute::standard::Destination> = ::javax_print_attribute_standard / "Destination";
namespace javax::print::attribute::standard { class DialogTypeSelection; }
template<> constexpr auto signature<::javax::print::attribute::standard::DialogTypeSelection> = ::javax_print_attribute_standard / "DialogTypeSelection";
namespace javax::print::attribute::standard { class DocumentName; }
template<> constexpr auto signature<::javax::print::attribute::standard::DocumentName> = ::javax_print_attribute_standard / "DocumentName";
namespace javax::print::attribute::standard { class Fidelity; }
template<> constexpr auto signature<::javax::print::attribute::standard::Fidelity> = ::javax_print_attribute_standard / "Fidelity";
namespace javax::print::attribute::standard { class Finishings; }
template<> constexpr auto signature<::javax::print::attribute::standard::Finishings> = ::javax_print_attribute_standard / "Finishings";
namespace javax::print::attribute::standard { class JobHoldUntil; }
template<> constexpr auto signature<::javax::print::attribute::standard::JobHoldUntil> = ::javax_print_attribute_standard / "JobHoldUntil";
namespace javax::print::attribute::standard { class JobImpressions; }
template<> constexpr auto signature<::javax::print::attribute::standard::JobImpressions> = ::javax_print_attribute_standard / "JobImpressions";
namespace javax::print::attribute::standard { class JobImpressionsCompleted; }
template<> constexpr auto signature<::javax::print::attribute::standard::JobImpressionsCompleted> = ::javax_print_attribute_standard / "JobImpressionsCompleted";
namespace javax::print::attribute::standard { class JobImpressionsSupported; }
template<> constexpr auto signature<::javax::print::attribute::standard::JobImpressionsSupported> = ::javax_print_attribute_standard / "JobImpressionsSupported";
namespace javax::print::attribute::standard { class JobKOctets; }
template<> constexpr auto signature<::javax::print::attribute::standard::JobKOctets> = ::javax_print_attribute_standard / "JobKOctets";
namespace javax::print::attribute::standard { class JobKOctetsProcessed; }
template<> constexpr auto signature<::javax::print::attribute::standard::JobKOctetsProcessed> = ::javax_print_attribute_standard / "JobKOctetsProcessed";
namespace javax::print::attribute::standard { class JobKOctetsSupported; }
template<> constexpr auto signature<::javax::print::attribute::standard::JobKOctetsSupported> = ::javax_print_attribute_standard / "JobKOctetsSupported";
namespace javax::print::attribute::standard { class JobMediaSheets; }
template<> constexpr auto signature<::javax::print::attribute::standard::JobMediaSheets> = ::javax_print_attribute_standard / "JobMediaSheets";
namespace javax::print::attribute::standard { class JobMediaSheetsCompleted; }
template<> constexpr auto signature<::javax::print::attribute::standard::JobMediaSheetsCompleted> = ::javax_print_attribute_standard / "JobMediaSheetsCompleted";
namespace javax::print::attribute::standard { class JobMediaSheetsSupported; }
template<> constexpr auto signature<::javax::print::attribute::standard::JobMediaSheetsSupported> = ::javax_print_attribute_standard / "JobMediaSheetsSupported";
namespace javax::print::attribute::standard { class JobMessageFromOperator; }
template<> constexpr auto signature<::javax::print::attribute::standard::JobMessageFromOperator> = ::javax_print_attribute_standard / "JobMessageFromOperator";
namespace javax::print::attribute::standard { class JobName; }
template<> constexpr auto signature<::javax::print::attribute::standard::JobName> = ::javax_print_attribute_standard / "JobName";
namespace javax::print::attribute::standard { class JobOriginatingUserName; }
template<> constexpr auto signature<::javax::print::attribute::standard::JobOriginatingUserName> = ::javax_print_attribute_standard / "JobOriginatingUserName";
namespace javax::print::attribute::standard { class JobPriority; }
template<> constexpr auto signature<::javax::print::attribute::standard::JobPriority> = ::javax_print_attribute_standard / "JobPriority";
namespace javax::print::attribute::standard { class JobPrioritySupported; }
template<> constexpr auto signature<::javax::print::attribute::standard::JobPrioritySupported> = ::javax_print_attribute_standard / "JobPrioritySupported";
namespace javax::print::attribute::standard { class JobSheets; }
template<> constexpr auto signature<::javax::print::attribute::standard::JobSheets> = ::javax_print_attribute_standard / "JobSheets";
namespace javax::print::attribute::standard { class JobState; }
template<> constexpr auto signature<::javax::print::attribute::standard::JobState> = ::javax_print_attribute_standard / "JobState";
namespace javax::print::attribute::standard { class JobStateReason; }
template<> constexpr auto signature<::javax::print::attribute::standard::JobStateReason> = ::javax_print_attribute_standard / "JobStateReason";
namespace javax::print::attribute::standard { class JobStateReasons; }
template<> constexpr auto signature<::javax::print::attribute::standard::JobStateReasons> = ::javax_print_attribute_standard / "JobStateReasons";
namespace javax::print::attribute::standard { class Media; }
template<> constexpr auto signature<::javax::print::attribute::standard::Media> = ::javax_print_attribute_standard / "Media";
namespace javax::print::attribute::standard { class MediaName; }
template<> constexpr auto signature<::javax::print::attribute::standard::MediaName> = ::javax_print_attribute_standard / "MediaName";
namespace javax::print::attribute::standard { class MediaPrintableArea; }
template<> constexpr auto signature<::javax::print::attribute::standard::MediaPrintableArea> = ::javax_print_attribute_standard / "MediaPrintableArea";
namespace javax::print::attribute::standard { class MediaSize; }
template<> constexpr auto signature<::javax::print::attribute::standard::MediaSize> = ::javax_print_attribute_standard / "MediaSize";
namespace javax::print::attribute::standard { class MediaSize$Engineering; }
template<> constexpr auto signature<::javax::print::attribute::standard::MediaSize$Engineering> = ::javax_print_attribute_standard / "MediaSize$Engineering";
namespace javax::print::attribute::standard { class MediaSize$ISO; }
template<> constexpr auto signature<::javax::print::attribute::standard::MediaSize$ISO> = ::javax_print_attribute_standard / "MediaSize$ISO";
namespace javax::print::attribute::standard { class MediaSize$JIS; }
template<> constexpr auto signature<::javax::print::attribute::standard::MediaSize$JIS> = ::javax_print_attribute_standard / "MediaSize$JIS";
namespace javax::print::attribute::standard { class MediaSize$NA; }
template<> constexpr auto signature<::javax::print::attribute::standard::MediaSize$NA> = ::javax_print_attribute_standard / "MediaSize$NA";
namespace javax::print::attribute::standard { class MediaSize$Other; }
template<> constexpr auto signature<::javax::print::attribute::standard::MediaSize$Other> = ::javax_print_attribute_standard / "MediaSize$Other";
namespace javax::print::attribute::standard { class MediaSizeName; }
template<> constexpr auto signature<::javax::print::attribute::standard::MediaSizeName> = ::javax_print_attribute_standard / "MediaSizeName";
namespace javax::print::attribute::standard { class MediaTray; }
template<> constexpr auto signature<::javax::print::attribute::standard::MediaTray> = ::javax_print_attribute_standard / "MediaTray";
namespace javax::print::attribute::standard { class MultipleDocumentHandling; }
template<> constexpr auto signature<::javax::print::attribute::standard::MultipleDocumentHandling> = ::javax_print_attribute_standard / "MultipleDocumentHandling";
namespace javax::print::attribute::standard { class NumberOfDocuments; }
template<> constexpr auto signature<::javax::print::attribute::standard::NumberOfDocuments> = ::javax_print_attribute_standard / "NumberOfDocuments";
namespace javax::print::attribute::standard { class NumberOfInterveningJobs; }
template<> constexpr auto signature<::javax::print::attribute::standard::NumberOfInterveningJobs> = ::javax_print_attribute_standard / "NumberOfInterveningJobs";
namespace javax::print::attribute::standard { class NumberUp; }
template<> constexpr auto signature<::javax::print::attribute::standard::NumberUp> = ::javax_print_attribute_standard / "NumberUp";
namespace javax::print::attribute::standard { class NumberUpSupported; }
template<> constexpr auto signature<::javax::print::attribute::standard::NumberUpSupported> = ::javax_print_attribute_standard / "NumberUpSupported";
namespace javax::print::attribute::standard { class OrientationRequested; }
template<> constexpr auto signature<::javax::print::attribute::standard::OrientationRequested> = ::javax_print_attribute_standard / "OrientationRequested";
namespace javax::print::attribute::standard { class OutputDeviceAssigned; }
template<> constexpr auto signature<::javax::print::attribute::standard::OutputDeviceAssigned> = ::javax_print_attribute_standard / "OutputDeviceAssigned";
namespace javax::print::attribute::standard { class PDLOverrideSupported; }
template<> constexpr auto signature<::javax::print::attribute::standard::PDLOverrideSupported> = ::javax_print_attribute_standard / "PDLOverrideSupported";
namespace javax::print::attribute::standard { class PageRanges; }
template<> constexpr auto signature<::javax::print::attribute::standard::PageRanges> = ::javax_print_attribute_standard / "PageRanges";
namespace javax::print::attribute::standard { class PagesPerMinute; }
template<> constexpr auto signature<::javax::print::attribute::standard::PagesPerMinute> = ::javax_print_attribute_standard / "PagesPerMinute";
namespace javax::print::attribute::standard { class PagesPerMinuteColor; }
template<> constexpr auto signature<::javax::print::attribute::standard::PagesPerMinuteColor> = ::javax_print_attribute_standard / "PagesPerMinuteColor";
namespace javax::print::attribute::standard { class PresentationDirection; }
template<> constexpr auto signature<::javax::print::attribute::standard::PresentationDirection> = ::javax_print_attribute_standard / "PresentationDirection";
namespace javax::print::attribute::standard { class PrintQuality; }
template<> constexpr auto signature<::javax::print::attribute::standard::PrintQuality> = ::javax_print_attribute_standard / "PrintQuality";
namespace javax::print::attribute::standard { class PrinterInfo; }
template<> constexpr auto signature<::javax::print::attribute::standard::PrinterInfo> = ::javax_print_attribute_standard / "PrinterInfo";
namespace javax::print::attribute::standard { class PrinterIsAcceptingJobs; }
template<> constexpr auto signature<::javax::print::attribute::standard::PrinterIsAcceptingJobs> = ::javax_print_attribute_standard / "PrinterIsAcceptingJobs";
namespace javax::print::attribute::standard { class PrinterLocation; }
template<> constexpr auto signature<::javax::print::attribute::standard::PrinterLocation> = ::javax_print_attribute_standard / "PrinterLocation";
namespace javax::print::attribute::standard { class PrinterMakeAndModel; }
template<> constexpr auto signature<::javax::print::attribute::standard::PrinterMakeAndModel> = ::javax_print_attribute_standard / "PrinterMakeAndModel";
namespace javax::print::attribute::standard { class PrinterMessageFromOperator; }
template<> constexpr auto signature<::javax::print::attribute::standard::PrinterMessageFromOperator> = ::javax_print_attribute_standard / "PrinterMessageFromOperator";
namespace javax::print::attribute::standard { class PrinterMoreInfo; }
template<> constexpr auto signature<::javax::print::attribute::standard::PrinterMoreInfo> = ::javax_print_attribute_standard / "PrinterMoreInfo";
namespace javax::print::attribute::standard { class PrinterMoreInfoManufacturer; }
template<> constexpr auto signature<::javax::print::attribute::standard::PrinterMoreInfoManufacturer> = ::javax_print_attribute_standard / "PrinterMoreInfoManufacturer";
namespace javax::print::attribute::standard { class PrinterName; }
template<> constexpr auto signature<::javax::print::attribute::standard::PrinterName> = ::javax_print_attribute_standard / "PrinterName";
namespace javax::print::attribute::standard { class PrinterResolution; }
template<> constexpr auto signature<::javax::print::attribute::standard::PrinterResolution> = ::javax_print_attribute_standard / "PrinterResolution";
namespace javax::print::attribute::standard { class PrinterState; }
template<> constexpr auto signature<::javax::print::attribute::standard::PrinterState> = ::javax_print_attribute_standard / "PrinterState";
namespace javax::print::attribute::standard { class PrinterStateReason; }
template<> constexpr auto signature<::javax::print::attribute::standard::PrinterStateReason> = ::javax_print_attribute_standard / "PrinterStateReason";
namespace javax::print::attribute::standard { class PrinterStateReasons; }
template<> constexpr auto signature<::javax::print::attribute::standard::PrinterStateReasons> = ::javax_print_attribute_standard / "PrinterStateReasons";
namespace javax::print::attribute::standard { class PrinterStateReasons$PrinterStateReasonSet; }
template<> constexpr auto signature<::javax::print::attribute::standard::PrinterStateReasons$PrinterStateReasonSet> = ::javax_print_attribute_standard / "PrinterStateReasons$PrinterStateReasonSet";
namespace javax::print::attribute::standard { class PrinterStateReasons$PrinterStateReasonSetIterator; }
template<> constexpr auto signature<::javax::print::attribute::standard::PrinterStateReasons$PrinterStateReasonSetIterator> = ::javax_print_attribute_standard / "PrinterStateReasons$PrinterStateReasonSetIterator";
namespace javax::print::attribute::standard { class PrinterURI; }
template<> constexpr auto signature<::javax::print::attribute::standard::PrinterURI> = ::javax_print_attribute_standard / "PrinterURI";
namespace javax::print::attribute::standard { class QueuedJobCount; }
template<> constexpr auto signature<::javax::print::attribute::standard::QueuedJobCount> = ::javax_print_attribute_standard / "QueuedJobCount";
namespace javax::print::attribute::standard { class ReferenceUriSchemesSupported; }
template<> constexpr auto signature<::javax::print::attribute::standard::ReferenceUriSchemesSupported> = ::javax_print_attribute_standard / "ReferenceUriSchemesSupported";
namespace javax::print::attribute::standard { class RequestingUserName; }
template<> constexpr auto signature<::javax::print::attribute::standard::RequestingUserName> = ::javax_print_attribute_standard / "RequestingUserName";
namespace javax::print::attribute::standard { class Severity; }
template<> constexpr auto signature<::javax::print::attribute::standard::Severity> = ::javax_print_attribute_standard / "Severity";
namespace javax::print::attribute::standard { class SheetCollate; }
template<> constexpr auto signature<::javax::print::attribute::standard::SheetCollate> = ::javax_print_attribute_standard / "SheetCollate";
namespace javax::print::attribute::standard { class Sides; }
template<> constexpr auto signature<::javax::print::attribute::standard::Sides> = ::javax_print_attribute_standard / "Sides";
namespace javax::print::event { class PrintEvent; }
template<> constexpr auto signature<::javax::print::event::PrintEvent> = ::javax_print_event / "PrintEvent";
namespace javax::print::event { class PrintJobAdapter; }
template<> constexpr auto signature<::javax::print::event::PrintJobAdapter> = ::javax_print_event / "PrintJobAdapter";
namespace javax::print::event { class PrintJobAttributeEvent; }
template<> constexpr auto signature<::javax::print::event::PrintJobAttributeEvent> = ::javax_print_event / "PrintJobAttributeEvent";
namespace javax::print::event { class PrintJobAttributeListener; }
template<> constexpr auto signature<::javax::print::event::PrintJobAttributeListener> = ::javax_print_event / "PrintJobAttributeListener";
namespace javax::print::event { class PrintJobEvent; }
template<> constexpr auto signature<::javax::print::event::PrintJobEvent> = ::javax_print_event / "PrintJobEvent";
namespace javax::print::event { class PrintJobListener; }
template<> constexpr auto signature<::javax::print::event::PrintJobListener> = ::javax_print_event / "PrintJobListener";
namespace javax::print::event { class PrintServiceAttributeEvent; }
template<> constexpr auto signature<::javax::print::event::PrintServiceAttributeEvent> = ::javax_print_event / "PrintServiceAttributeEvent";
namespace javax::print::event { class PrintServiceAttributeListener; }
template<> constexpr auto signature<::javax::print::event::PrintServiceAttributeListener> = ::javax_print_event / "PrintServiceAttributeListener";
namespace javax::rmi::CORBA { class ClassDesc; }
template<> constexpr auto signature<::javax::rmi::CORBA::ClassDesc> = ::javax_rmi_CORBA / "ClassDesc";
namespace javax::rmi::CORBA { class GetORBPropertiesFileAction; }
template<> constexpr auto signature<::javax::rmi::CORBA::GetORBPropertiesFileAction> = ::javax_rmi_CORBA / "GetORBPropertiesFileAction";
namespace javax::rmi::CORBA { class GetORBPropertiesFileAction$1; }
template<> constexpr auto signature<::javax::rmi::CORBA::GetORBPropertiesFileAction$1> = ::javax_rmi_CORBA / "GetORBPropertiesFileAction$1";
namespace javax::rmi::CORBA { class PortableRemoteObjectDelegate; }
template<> constexpr auto signature<::javax::rmi::CORBA::PortableRemoteObjectDelegate> = ::javax_rmi_CORBA / "PortableRemoteObjectDelegate";
namespace javax::rmi::CORBA { class Stub; }
template<> constexpr auto signature<::javax::rmi::CORBA::Stub> = ::javax_rmi_CORBA / "Stub";
namespace javax::rmi::CORBA { class StubDelegate; }
template<> constexpr auto signature<::javax::rmi::CORBA::StubDelegate> = ::javax_rmi_CORBA / "StubDelegate";
namespace javax::rmi::CORBA { class Tie; }
template<> constexpr auto signature<::javax::rmi::CORBA::Tie> = ::javax_rmi_CORBA / "Tie";
namespace javax::rmi::CORBA { class Util; }
template<> constexpr auto signature<::javax::rmi::CORBA::Util> = ::javax_rmi_CORBA / "Util";
namespace javax::rmi::CORBA { class Util$1; }
template<> constexpr auto signature<::javax::rmi::CORBA::Util$1> = ::javax_rmi_CORBA / "Util$1";
namespace javax::rmi::CORBA { class UtilDelegate; }
template<> constexpr auto signature<::javax::rmi::CORBA::UtilDelegate> = ::javax_rmi_CORBA / "UtilDelegate";
namespace javax::rmi::CORBA { class ValueHandler; }
template<> constexpr auto signature<::javax::rmi::CORBA::ValueHandler> = ::javax_rmi_CORBA / "ValueHandler";
namespace javax::rmi::CORBA { class ValueHandlerMultiFormat; }
template<> constexpr auto signature<::javax::rmi::CORBA::ValueHandlerMultiFormat> = ::javax_rmi_CORBA / "ValueHandlerMultiFormat";
namespace javax::rmi { class GetORBPropertiesFileAction; }
template<> constexpr auto signature<::javax::rmi::GetORBPropertiesFileAction> = ::javax_rmi / "GetORBPropertiesFileAction";
namespace javax::rmi { class GetORBPropertiesFileAction$1; }
template<> constexpr auto signature<::javax::rmi::GetORBPropertiesFileAction$1> = ::javax_rmi / "GetORBPropertiesFileAction$1";
namespace javax::rmi { class PortableRemoteObject; }
template<> constexpr auto signature<::javax::rmi::PortableRemoteObject> = ::javax_rmi / "PortableRemoteObject";
namespace javax::rmi::ssl { class SslRMIClientSocketFactory; }
template<> constexpr auto signature<::javax::rmi::ssl::SslRMIClientSocketFactory> = ::javax_rmi_ssl / "SslRMIClientSocketFactory";
namespace javax::rmi::ssl { class SslRMIServerSocketFactory; }
template<> constexpr auto signature<::javax::rmi::ssl::SslRMIServerSocketFactory> = ::javax_rmi_ssl / "SslRMIServerSocketFactory";
namespace javax::rmi::ssl { class SslRMIServerSocketFactory$1; }
template<> constexpr auto signature<::javax::rmi::ssl::SslRMIServerSocketFactory$1> = ::javax_rmi_ssl / "SslRMIServerSocketFactory$1";
namespace javax::script { class AbstractScriptEngine; }
template<> constexpr auto signature<::javax::script::AbstractScriptEngine> = ::javax_script / "AbstractScriptEngine";
namespace javax::script { class Bindings; }
template<> constexpr auto signature<::javax::script::Bindings> = ::javax_script / "Bindings";
namespace javax::script { class Compilable; }
template<> constexpr auto signature<::javax::script::Compilable> = ::javax_script / "Compilable";
namespace javax::script { class CompiledScript; }
template<> constexpr auto signature<::javax::script::CompiledScript> = ::javax_script / "CompiledScript";
namespace javax::script { class Invocable; }
template<> constexpr auto signature<::javax::script::Invocable> = ::javax_script / "Invocable";
namespace javax::script { class ScriptContext; }
template<> constexpr auto signature<::javax::script::ScriptContext> = ::javax_script / "ScriptContext";
namespace javax::script { class ScriptEngine; }
template<> constexpr auto signature<::javax::script::ScriptEngine> = ::javax_script / "ScriptEngine";
namespace javax::script { class ScriptEngineFactory; }
template<> constexpr auto signature<::javax::script::ScriptEngineFactory> = ::javax_script / "ScriptEngineFactory";
namespace javax::script { class ScriptEngineManager; }
template<> constexpr auto signature<::javax::script::ScriptEngineManager> = ::javax_script / "ScriptEngineManager";
namespace javax::script { class ScriptEngineManager$1; }
template<> constexpr auto signature<::javax::script::ScriptEngineManager$1> = ::javax_script / "ScriptEngineManager$1";
namespace javax::script { class ScriptException; }
template<> constexpr auto signature<::javax::script::ScriptException> = ::javax_script / "ScriptException";
namespace javax::script { class SimpleBindings; }
template<> constexpr auto signature<::javax::script::SimpleBindings> = ::javax_script / "SimpleBindings";
namespace javax::script { class SimpleScriptContext; }
template<> constexpr auto signature<::javax::script::SimpleScriptContext> = ::javax_script / "SimpleScriptContext";
namespace javax::security::auth { class AuthPermission; }
template<> constexpr auto signature<::javax::security::auth::AuthPermission> = ::javax_security_auth / "AuthPermission";
namespace javax::security::auth { class DestroyFailedException; }
template<> constexpr auto signature<::javax::security::auth::DestroyFailedException> = ::javax_security_auth / "DestroyFailedException";
namespace javax::security::auth { class Destroyable; }
template<> constexpr auto signature<::javax::security::auth::Destroyable> = ::javax_security_auth / "Destroyable";
namespace javax::security::auth { class Policy; }
template<> constexpr auto signature<::javax::security::auth::Policy> = ::javax_security_auth / "Policy";
namespace javax::security::auth { class Policy$1; }
template<> constexpr auto signature<::javax::security::auth::Policy$1> = ::javax_security_auth / "Policy$1";
namespace javax::security::auth { class Policy$2; }
template<> constexpr auto signature<::javax::security::auth::Policy$2> = ::javax_security_auth / "Policy$2";
namespace javax::security::auth { class Policy$3; }
template<> constexpr auto signature<::javax::security::auth::Policy$3> = ::javax_security_auth / "Policy$3";
namespace javax::security::auth { class Policy$4; }
template<> constexpr auto signature<::javax::security::auth::Policy$4> = ::javax_security_auth / "Policy$4";
namespace javax::security::auth { class PrivateCredentialPermission; }
template<> constexpr auto signature<::javax::security::auth::PrivateCredentialPermission> = ::javax_security_auth / "PrivateCredentialPermission";
namespace javax::security::auth { class PrivateCredentialPermission$CredOwner; }
template<> constexpr auto signature<::javax::security::auth::PrivateCredentialPermission$CredOwner> = ::javax_security_auth / "PrivateCredentialPermission$CredOwner";
namespace javax::security::auth { class RefreshFailedException; }
template<> constexpr auto signature<::javax::security::auth::RefreshFailedException> = ::javax_security_auth / "RefreshFailedException";
namespace javax::security::auth { class Refreshable; }
template<> constexpr auto signature<::javax::security::auth::Refreshable> = ::javax_security_auth / "Refreshable";
namespace javax::security::auth { class Subject; }
template<> constexpr auto signature<::javax::security::auth::Subject> = ::javax_security_auth / "Subject";
namespace javax::security::auth { class Subject$1; }
template<> constexpr auto signature<::javax::security::auth::Subject$1> = ::javax_security_auth / "Subject$1";
namespace javax::security::auth { class Subject$2; }
template<> constexpr auto signature<::javax::security::auth::Subject$2> = ::javax_security_auth / "Subject$2";
namespace javax::security::auth { class Subject$AuthPermissionHolder; }
template<> constexpr auto signature<::javax::security::auth::Subject$AuthPermissionHolder> = ::javax_security_auth / "Subject$AuthPermissionHolder";
namespace javax::security::auth { class Subject$ClassSet; }
template<> constexpr auto signature<::javax::security::auth::Subject$ClassSet> = ::javax_security_auth / "Subject$ClassSet";
namespace javax::security::auth { class Subject$ClassSet$1; }
template<> constexpr auto signature<::javax::security::auth::Subject$ClassSet$1> = ::javax_security_auth / "Subject$ClassSet$1";
namespace javax::security::auth { class Subject$SecureSet; }
template<> constexpr auto signature<::javax::security::auth::Subject$SecureSet> = ::javax_security_auth / "Subject$SecureSet";
namespace javax::security::auth { class Subject$SecureSet$1; }
template<> constexpr auto signature<::javax::security::auth::Subject$SecureSet$1> = ::javax_security_auth / "Subject$SecureSet$1";
namespace javax::security::auth { class Subject$SecureSet$2; }
template<> constexpr auto signature<::javax::security::auth::Subject$SecureSet$2> = ::javax_security_auth / "Subject$SecureSet$2";
namespace javax::security::auth { class Subject$SecureSet$3; }
template<> constexpr auto signature<::javax::security::auth::Subject$SecureSet$3> = ::javax_security_auth / "Subject$SecureSet$3";
namespace javax::security::auth { class Subject$SecureSet$4; }
template<> constexpr auto signature<::javax::security::auth::Subject$SecureSet$4> = ::javax_security_auth / "Subject$SecureSet$4";
namespace javax::security::auth { class Subject$SecureSet$5; }
template<> constexpr auto signature<::javax::security::auth::Subject$SecureSet$5> = ::javax_security_auth / "Subject$SecureSet$5";
namespace javax::security::auth { class Subject$SecureSet$6; }
template<> constexpr auto signature<::javax::security::auth::Subject$SecureSet$6> = ::javax_security_auth / "Subject$SecureSet$6";
namespace javax::security::auth { class SubjectDomainCombiner; }
template<> constexpr auto signature<::javax::security::auth::SubjectDomainCombiner> = ::javax_security_auth / "SubjectDomainCombiner";
namespace javax::security::auth { class SubjectDomainCombiner$1; }
template<> constexpr auto signature<::javax::security::auth::SubjectDomainCombiner$1> = ::javax_security_auth / "SubjectDomainCombiner$1";
namespace javax::security::auth { class SubjectDomainCombiner$2; }
template<> constexpr auto signature<::javax::security::auth::SubjectDomainCombiner$2> = ::javax_security_auth / "SubjectDomainCombiner$2";
namespace javax::security::auth { class SubjectDomainCombiner$3; }
template<> constexpr auto signature<::javax::security::auth::SubjectDomainCombiner$3> = ::javax_security_auth / "SubjectDomainCombiner$3";
namespace javax::security::auth { class SubjectDomainCombiner$4; }
template<> constexpr auto signature<::javax::security::auth::SubjectDomainCombiner$4> = ::javax_security_auth / "SubjectDomainCombiner$4";
namespace javax::security::auth { class SubjectDomainCombiner$5; }
template<> constexpr auto signature<::javax::security::auth::SubjectDomainCombiner$5> = ::javax_security_auth / "SubjectDomainCombiner$5";
namespace javax::security::auth { class SubjectDomainCombiner$WeakKeyValueMap; }
template<> constexpr auto signature<::javax::security::auth::SubjectDomainCombiner$WeakKeyValueMap> = ::javax_security_auth / "SubjectDomainCombiner$WeakKeyValueMap";
namespace javax::security::auth::callback { class Callback; }
template<> constexpr auto signature<::javax::security::auth::callback::Callback> = ::javax_security_auth_callback / "Callback";
namespace javax::security::auth::callback { class CallbackHandler; }
template<> constexpr auto signature<::javax::security::auth::callback::CallbackHandler> = ::javax_security_auth_callback / "CallbackHandler";
namespace javax::security::auth::callback { class ChoiceCallback; }
template<> constexpr auto signature<::javax::security::auth::callback::ChoiceCallback> = ::javax_security_auth_callback / "ChoiceCallback";
namespace javax::security::auth::callback { class ConfirmationCallback; }
template<> constexpr auto signature<::javax::security::auth::callback::ConfirmationCallback> = ::javax_security_auth_callback / "ConfirmationCallback";
namespace javax::security::auth::callback { class LanguageCallback; }
template<> constexpr auto signature<::javax::security::auth::callback::LanguageCallback> = ::javax_security_auth_callback / "LanguageCallback";
namespace javax::security::auth::callback { class NameCallback; }
template<> constexpr auto signature<::javax::security::auth::callback::NameCallback> = ::javax_security_auth_callback / "NameCallback";
namespace javax::security::auth::callback { class PasswordCallback; }
template<> constexpr auto signature<::javax::security::auth::callback::PasswordCallback> = ::javax_security_auth_callback / "PasswordCallback";
namespace javax::security::auth::callback { class TextInputCallback; }
template<> constexpr auto signature<::javax::security::auth::callback::TextInputCallback> = ::javax_security_auth_callback / "TextInputCallback";
namespace javax::security::auth::callback { class TextOutputCallback; }
template<> constexpr auto signature<::javax::security::auth::callback::TextOutputCallback> = ::javax_security_auth_callback / "TextOutputCallback";
namespace javax::security::auth::callback { class UnsupportedCallbackException; }
template<> constexpr auto signature<::javax::security::auth::callback::UnsupportedCallbackException> = ::javax_security_auth_callback / "UnsupportedCallbackException";
namespace javax::security::auth::kerberos { class DelegationPermission; }
template<> constexpr auto signature<::javax::security::auth::kerberos::DelegationPermission> = ::javax_security_auth_kerberos / "DelegationPermission";
namespace javax::security::auth::kerberos { class JavaxSecurityAuthKerberosAccessImpl; }
template<> constexpr auto signature<::javax::security::auth::kerberos::JavaxSecurityAuthKerberosAccessImpl> = ::javax_security_auth_kerberos / "JavaxSecurityAuthKerberosAccessImpl";
namespace javax::security::auth::kerberos { class KerberosKey; }
template<> constexpr auto signature<::javax::security::auth::kerberos::KerberosKey> = ::javax_security_auth_kerberos / "KerberosKey";
namespace javax::security::auth::kerberos { class KerberosPrincipal; }
template<> constexpr auto signature<::javax::security::auth::kerberos::KerberosPrincipal> = ::javax_security_auth_kerberos / "KerberosPrincipal";
namespace javax::security::auth::kerberos { class KerberosTicket; }
template<> constexpr auto signature<::javax::security::auth::kerberos::KerberosTicket> = ::javax_security_auth_kerberos / "KerberosTicket";
namespace javax::security::auth::kerberos { class KeyImpl; }
template<> constexpr auto signature<::javax::security::auth::kerberos::KeyImpl> = ::javax_security_auth_kerberos / "KeyImpl";
namespace javax::security::auth::kerberos { class KeyTab; }
template<> constexpr auto signature<::javax::security::auth::kerberos::KeyTab> = ::javax_security_auth_kerberos / "KeyTab";
namespace javax::security::auth::kerberos { class KrbDelegationPermissionCollection; }
template<> constexpr auto signature<::javax::security::auth::kerberos::KrbDelegationPermissionCollection> = ::javax_security_auth_kerberos / "KrbDelegationPermissionCollection";
namespace javax::security::auth::kerberos { class KrbServicePermissionCollection; }
template<> constexpr auto signature<::javax::security::auth::kerberos::KrbServicePermissionCollection> = ::javax_security_auth_kerberos / "KrbServicePermissionCollection";
namespace javax::security::auth::kerberos { class ServicePermission; }
template<> constexpr auto signature<::javax::security::auth::kerberos::ServicePermission> = ::javax_security_auth_kerberos / "ServicePermission";
namespace javax::security::auth::login { class AccountException; }
template<> constexpr auto signature<::javax::security::auth::login::AccountException> = ::javax_security_auth_login / "AccountException";
namespace javax::security::auth::login { class AccountExpiredException; }
template<> constexpr auto signature<::javax::security::auth::login::AccountExpiredException> = ::javax_security_auth_login / "AccountExpiredException";
namespace javax::security::auth::login { class AccountLockedException; }
template<> constexpr auto signature<::javax::security::auth::login::AccountLockedException> = ::javax_security_auth_login / "AccountLockedException";
namespace javax::security::auth::login { class AccountNotFoundException; }
template<> constexpr auto signature<::javax::security::auth::login::AccountNotFoundException> = ::javax_security_auth_login / "AccountNotFoundException";
namespace javax::security::auth::login { class AppConfigurationEntry; }
template<> constexpr auto signature<::javax::security::auth::login::AppConfigurationEntry> = ::javax_security_auth_login / "AppConfigurationEntry";
namespace javax::security::auth::login { class AppConfigurationEntry$LoginModuleControlFlag; }
template<> constexpr auto signature<::javax::security::auth::login::AppConfigurationEntry$LoginModuleControlFlag> = ::javax_security_auth_login / "AppConfigurationEntry$LoginModuleControlFlag";
namespace javax::security::auth::login { class Configuration; }
template<> constexpr auto signature<::javax::security::auth::login::Configuration> = ::javax_security_auth_login / "Configuration";
namespace javax::security::auth::login { class Configuration$1; }
template<> constexpr auto signature<::javax::security::auth::login::Configuration$1> = ::javax_security_auth_login / "Configuration$1";
namespace javax::security::auth::login { class Configuration$2; }
template<> constexpr auto signature<::javax::security::auth::login::Configuration$2> = ::javax_security_auth_login / "Configuration$2";
namespace javax::security::auth::login { class Configuration$3; }
template<> constexpr auto signature<::javax::security::auth::login::Configuration$3> = ::javax_security_auth_login / "Configuration$3";
namespace javax::security::auth::login { class Configuration$ConfigDelegate; }
template<> constexpr auto signature<::javax::security::auth::login::Configuration$ConfigDelegate> = ::javax_security_auth_login / "Configuration$ConfigDelegate";
namespace javax::security::auth::login { class Configuration$Parameters; }
template<> constexpr auto signature<::javax::security::auth::login::Configuration$Parameters> = ::javax_security_auth_login / "Configuration$Parameters";
namespace javax::security::auth::login { class ConfigurationSpi; }
template<> constexpr auto signature<::javax::security::auth::login::ConfigurationSpi> = ::javax_security_auth_login / "ConfigurationSpi";
namespace javax::security::auth::login { class CredentialException; }
template<> constexpr auto signature<::javax::security::auth::login::CredentialException> = ::javax_security_auth_login / "CredentialException";
namespace javax::security::auth::login { class CredentialExpiredException; }
template<> constexpr auto signature<::javax::security::auth::login::CredentialExpiredException> = ::javax_security_auth_login / "CredentialExpiredException";
namespace javax::security::auth::login { class CredentialNotFoundException; }
template<> constexpr auto signature<::javax::security::auth::login::CredentialNotFoundException> = ::javax_security_auth_login / "CredentialNotFoundException";
namespace javax::security::auth::login { class FailedLoginException; }
template<> constexpr auto signature<::javax::security::auth::login::FailedLoginException> = ::javax_security_auth_login / "FailedLoginException";
namespace javax::security::auth::login { class LoginContext; }
template<> constexpr auto signature<::javax::security::auth::login::LoginContext> = ::javax_security_auth_login / "LoginContext";
namespace javax::security::auth::login { class LoginContext$1; }
template<> constexpr auto signature<::javax::security::auth::login::LoginContext$1> = ::javax_security_auth_login / "LoginContext$1";
namespace javax::security::auth::login { class LoginContext$2; }
template<> constexpr auto signature<::javax::security::auth::login::LoginContext$2> = ::javax_security_auth_login / "LoginContext$2";
namespace javax::security::auth::login { class LoginContext$3; }
template<> constexpr auto signature<::javax::security::auth::login::LoginContext$3> = ::javax_security_auth_login / "LoginContext$3";
namespace javax::security::auth::login { class LoginContext$4; }
template<> constexpr auto signature<::javax::security::auth::login::LoginContext$4> = ::javax_security_auth_login / "LoginContext$4";
namespace javax::security::auth::login { class LoginContext$ModuleInfo; }
template<> constexpr auto signature<::javax::security::auth::login::LoginContext$ModuleInfo> = ::javax_security_auth_login / "LoginContext$ModuleInfo";
namespace javax::security::auth::login { class LoginContext$SecureCallbackHandler; }
template<> constexpr auto signature<::javax::security::auth::login::LoginContext$SecureCallbackHandler> = ::javax_security_auth_login / "LoginContext$SecureCallbackHandler";
namespace javax::security::auth::login { class LoginContext$SecureCallbackHandler$1; }
template<> constexpr auto signature<::javax::security::auth::login::LoginContext$SecureCallbackHandler$1> = ::javax_security_auth_login / "LoginContext$SecureCallbackHandler$1";
namespace javax::security::auth::login { class LoginException; }
template<> constexpr auto signature<::javax::security::auth::login::LoginException> = ::javax_security_auth_login / "LoginException";
namespace javax::security::auth::spi { class LoginModule; }
template<> constexpr auto signature<::javax::security::auth::spi::LoginModule> = ::javax_security_auth_spi / "LoginModule";
namespace javax::security::auth::x500 { class X500Principal; }
template<> constexpr auto signature<::javax::security::auth::x500::X500Principal> = ::javax_security_auth_x500 / "X500Principal";
namespace javax::security::auth::x500 { class X500PrivateCredential; }
template<> constexpr auto signature<::javax::security::auth::x500::X500PrivateCredential> = ::javax_security_auth_x500 / "X500PrivateCredential";
namespace javax::security::cert { class Certificate; }
template<> constexpr auto signature<::javax::security::cert::Certificate> = ::javax_security_cert / "Certificate";
namespace javax::security::cert { class CertificateEncodingException; }
template<> constexpr auto signature<::javax::security::cert::CertificateEncodingException> = ::javax_security_cert / "CertificateEncodingException";
namespace javax::security::cert { class CertificateException; }
template<> constexpr auto signature<::javax::security::cert::CertificateException> = ::javax_security_cert / "CertificateException";
namespace javax::security::cert { class CertificateExpiredException; }
template<> constexpr auto signature<::javax::security::cert::CertificateExpiredException> = ::javax_security_cert / "CertificateExpiredException";
namespace javax::security::cert { class CertificateNotYetValidException; }
template<> constexpr auto signature<::javax::security::cert::CertificateNotYetValidException> = ::javax_security_cert / "CertificateNotYetValidException";
namespace javax::security::cert { class CertificateParsingException; }
template<> constexpr auto signature<::javax::security::cert::CertificateParsingException> = ::javax_security_cert / "CertificateParsingException";
namespace javax::security::cert { class X509Certificate; }
template<> constexpr auto signature<::javax::security::cert::X509Certificate> = ::javax_security_cert / "X509Certificate";
namespace javax::security::cert { class X509Certificate$1; }
template<> constexpr auto signature<::javax::security::cert::X509Certificate$1> = ::javax_security_cert / "X509Certificate$1";
namespace javax::security::sasl { class AuthenticationException; }
template<> constexpr auto signature<::javax::security::sasl::AuthenticationException> = ::javax_security_sasl / "AuthenticationException";
namespace javax::security::sasl { class AuthorizeCallback; }
template<> constexpr auto signature<::javax::security::sasl::AuthorizeCallback> = ::javax_security_sasl / "AuthorizeCallback";
namespace javax::security::sasl { class RealmCallback; }
template<> constexpr auto signature<::javax::security::sasl::RealmCallback> = ::javax_security_sasl / "RealmCallback";
namespace javax::security::sasl { class RealmChoiceCallback; }
template<> constexpr auto signature<::javax::security::sasl::RealmChoiceCallback> = ::javax_security_sasl / "RealmChoiceCallback";
namespace javax::security::sasl { class Sasl; }
template<> constexpr auto signature<::javax::security::sasl::Sasl> = ::javax_security_sasl / "Sasl";
namespace javax::security::sasl { class Sasl$1; }
template<> constexpr auto signature<::javax::security::sasl::Sasl$1> = ::javax_security_sasl / "Sasl$1";
namespace javax::security::sasl { class Sasl$2; }
template<> constexpr auto signature<::javax::security::sasl::Sasl$2> = ::javax_security_sasl / "Sasl$2";
namespace javax::security::sasl { class SaslClient; }
template<> constexpr auto signature<::javax::security::sasl::SaslClient> = ::javax_security_sasl / "SaslClient";
namespace javax::security::sasl { class SaslClientFactory; }
template<> constexpr auto signature<::javax::security::sasl::SaslClientFactory> = ::javax_security_sasl / "SaslClientFactory";
namespace javax::security::sasl { class SaslException; }
template<> constexpr auto signature<::javax::security::sasl::SaslException> = ::javax_security_sasl / "SaslException";
namespace javax::security::sasl { class SaslServer; }
template<> constexpr auto signature<::javax::security::sasl::SaslServer> = ::javax_security_sasl / "SaslServer";
namespace javax::security::sasl { class SaslServerFactory; }
template<> constexpr auto signature<::javax::security::sasl::SaslServerFactory> = ::javax_security_sasl / "SaslServerFactory";
namespace javax::smartcardio { class ATR; }
template<> constexpr auto signature<::javax::smartcardio::ATR> = ::javax_smartcardio / "ATR";
namespace javax::smartcardio { class Card; }
template<> constexpr auto signature<::javax::smartcardio::Card> = ::javax_smartcardio / "Card";
namespace javax::smartcardio { class CardChannel; }
template<> constexpr auto signature<::javax::smartcardio::CardChannel> = ::javax_smartcardio / "CardChannel";
namespace javax::smartcardio { class CardException; }
template<> constexpr auto signature<::javax::smartcardio::CardException> = ::javax_smartcardio / "CardException";
namespace javax::smartcardio { class CardNotPresentException; }
template<> constexpr auto signature<::javax::smartcardio::CardNotPresentException> = ::javax_smartcardio / "CardNotPresentException";
namespace javax::smartcardio { class CardPermission; }
template<> constexpr auto signature<::javax::smartcardio::CardPermission> = ::javax_smartcardio / "CardPermission";
namespace javax::smartcardio { class CardTerminal; }
template<> constexpr auto signature<::javax::smartcardio::CardTerminal> = ::javax_smartcardio / "CardTerminal";
namespace javax::smartcardio { class CardTerminals; }
template<> constexpr auto signature<::javax::smartcardio::CardTerminals> = ::javax_smartcardio / "CardTerminals";
namespace javax::smartcardio { class CardTerminals$State; }
template<> constexpr auto signature<::javax::smartcardio::CardTerminals$State> = ::javax_smartcardio / "CardTerminals$State";
namespace javax::smartcardio { class CommandAPDU; }
template<> constexpr auto signature<::javax::smartcardio::CommandAPDU> = ::javax_smartcardio / "CommandAPDU";
namespace javax::smartcardio { class ResponseAPDU; }
template<> constexpr auto signature<::javax::smartcardio::ResponseAPDU> = ::javax_smartcardio / "ResponseAPDU";
namespace javax::smartcardio { class TerminalFactory; }
template<> constexpr auto signature<::javax::smartcardio::TerminalFactory> = ::javax_smartcardio / "TerminalFactory";
namespace javax::smartcardio { class TerminalFactory$NoneCardTerminals; }
template<> constexpr auto signature<::javax::smartcardio::TerminalFactory$NoneCardTerminals> = ::javax_smartcardio / "TerminalFactory$NoneCardTerminals";
namespace javax::smartcardio { class TerminalFactory$NoneFactorySpi; }
template<> constexpr auto signature<::javax::smartcardio::TerminalFactory$NoneFactorySpi> = ::javax_smartcardio / "TerminalFactory$NoneFactorySpi";
namespace javax::smartcardio { class TerminalFactory$NoneProvider; }
template<> constexpr auto signature<::javax::smartcardio::TerminalFactory$NoneProvider> = ::javax_smartcardio / "TerminalFactory$NoneProvider";
namespace javax::smartcardio { class TerminalFactorySpi; }
template<> constexpr auto signature<::javax::smartcardio::TerminalFactorySpi> = ::javax_smartcardio / "TerminalFactorySpi";
namespace javax::sound::midi { class ControllerEventListener; }
template<> constexpr auto signature<::javax::sound::midi::ControllerEventListener> = ::javax_sound_midi / "ControllerEventListener";
namespace javax::sound::midi { class Instrument; }
template<> constexpr auto signature<::javax::sound::midi::Instrument> = ::javax_sound_midi / "Instrument";
namespace javax::sound::midi { class InvalidMidiDataException; }
template<> constexpr auto signature<::javax::sound::midi::InvalidMidiDataException> = ::javax_sound_midi / "InvalidMidiDataException";
namespace javax::sound::midi { class MetaEventListener; }
template<> constexpr auto signature<::javax::sound::midi::MetaEventListener> = ::javax_sound_midi / "MetaEventListener";
namespace javax::sound::midi { class MetaMessage; }
template<> constexpr auto signature<::javax::sound::midi::MetaMessage> = ::javax_sound_midi / "MetaMessage";
namespace javax::sound::midi { class MidiChannel; }
template<> constexpr auto signature<::javax::sound::midi::MidiChannel> = ::javax_sound_midi / "MidiChannel";
namespace javax::sound::midi { class MidiDevice; }
template<> constexpr auto signature<::javax::sound::midi::MidiDevice> = ::javax_sound_midi / "MidiDevice";
namespace javax::sound::midi { class MidiDevice$Info; }
template<> constexpr auto signature<::javax::sound::midi::MidiDevice$Info> = ::javax_sound_midi / "MidiDevice$Info";
namespace javax::sound::midi { class MidiDeviceReceiver; }
template<> constexpr auto signature<::javax::sound::midi::MidiDeviceReceiver> = ::javax_sound_midi / "MidiDeviceReceiver";
namespace javax::sound::midi { class MidiDeviceTransmitter; }
template<> constexpr auto signature<::javax::sound::midi::MidiDeviceTransmitter> = ::javax_sound_midi / "MidiDeviceTransmitter";
namespace javax::sound::midi { class MidiEvent; }
template<> constexpr auto signature<::javax::sound::midi::MidiEvent> = ::javax_sound_midi / "MidiEvent";
namespace javax::sound::midi { class MidiFileFormat; }
template<> constexpr auto signature<::javax::sound::midi::MidiFileFormat> = ::javax_sound_midi / "MidiFileFormat";
namespace javax::sound::midi { class MidiMessage; }
template<> constexpr auto signature<::javax::sound::midi::MidiMessage> = ::javax_sound_midi / "MidiMessage";
namespace javax::sound::midi { class MidiSystem; }
template<> constexpr auto signature<::javax::sound::midi::MidiSystem> = ::javax_sound_midi / "MidiSystem";
namespace javax::sound::midi { class MidiUnavailableException; }
template<> constexpr auto signature<::javax::sound::midi::MidiUnavailableException> = ::javax_sound_midi / "MidiUnavailableException";
namespace javax::sound::midi { class Patch; }
template<> constexpr auto signature<::javax::sound::midi::Patch> = ::javax_sound_midi / "Patch";
namespace javax::sound::midi { class Receiver; }
template<> constexpr auto signature<::javax::sound::midi::Receiver> = ::javax_sound_midi / "Receiver";
namespace javax::sound::midi { class Sequence; }
template<> constexpr auto signature<::javax::sound::midi::Sequence> = ::javax_sound_midi / "Sequence";
namespace javax::sound::midi { class Sequencer; }
template<> constexpr auto signature<::javax::sound::midi::Sequencer> = ::javax_sound_midi / "Sequencer";
namespace javax::sound::midi { class Sequencer$SyncMode; }
template<> constexpr auto signature<::javax::sound::midi::Sequencer$SyncMode> = ::javax_sound_midi / "Sequencer$SyncMode";
namespace javax::sound::midi { class ShortMessage; }
template<> constexpr auto signature<::javax::sound::midi::ShortMessage> = ::javax_sound_midi / "ShortMessage";
namespace javax::sound::midi { class Soundbank; }
template<> constexpr auto signature<::javax::sound::midi::Soundbank> = ::javax_sound_midi / "Soundbank";
namespace javax::sound::midi { class SoundbankResource; }
template<> constexpr auto signature<::javax::sound::midi::SoundbankResource> = ::javax_sound_midi / "SoundbankResource";
namespace javax::sound::midi { class Synthesizer; }
template<> constexpr auto signature<::javax::sound::midi::Synthesizer> = ::javax_sound_midi / "Synthesizer";
namespace javax::sound::midi { class SysexMessage; }
template<> constexpr auto signature<::javax::sound::midi::SysexMessage> = ::javax_sound_midi / "SysexMessage";
namespace javax::sound::midi { class Track; }
template<> constexpr auto signature<::javax::sound::midi::Track> = ::javax_sound_midi / "Track";
namespace javax::sound::midi { class Track$1; }
template<> constexpr auto signature<::javax::sound::midi::Track$1> = ::javax_sound_midi / "Track$1";
namespace javax::sound::midi { class Track$ImmutableEndOfTrack; }
template<> constexpr auto signature<::javax::sound::midi::Track$ImmutableEndOfTrack> = ::javax_sound_midi / "Track$ImmutableEndOfTrack";
namespace javax::sound::midi { class Transmitter; }
template<> constexpr auto signature<::javax::sound::midi::Transmitter> = ::javax_sound_midi / "Transmitter";
namespace javax::sound::midi { class VoiceStatus; }
template<> constexpr auto signature<::javax::sound::midi::VoiceStatus> = ::javax_sound_midi / "VoiceStatus";
namespace javax::sound::midi::spi { class MidiDeviceProvider; }
template<> constexpr auto signature<::javax::sound::midi::spi::MidiDeviceProvider> = ::javax_sound_midi_spi / "MidiDeviceProvider";
namespace javax::sound::midi::spi { class MidiFileReader; }
template<> constexpr auto signature<::javax::sound::midi::spi::MidiFileReader> = ::javax_sound_midi_spi / "MidiFileReader";
namespace javax::sound::midi::spi { class MidiFileWriter; }
template<> constexpr auto signature<::javax::sound::midi::spi::MidiFileWriter> = ::javax_sound_midi_spi / "MidiFileWriter";
namespace javax::sound::midi::spi { class SoundbankReader; }
template<> constexpr auto signature<::javax::sound::midi::spi::SoundbankReader> = ::javax_sound_midi_spi / "SoundbankReader";
namespace javax::sound::sampled { class AudioFileFormat; }
template<> constexpr auto signature<::javax::sound::sampled::AudioFileFormat> = ::javax_sound_sampled / "AudioFileFormat";
namespace javax::sound::sampled { class AudioFileFormat$Type; }
template<> constexpr auto signature<::javax::sound::sampled::AudioFileFormat$Type> = ::javax_sound_sampled / "AudioFileFormat$Type";
namespace javax::sound::sampled { class AudioFormat; }
template<> constexpr auto signature<::javax::sound::sampled::AudioFormat> = ::javax_sound_sampled / "AudioFormat";
namespace javax::sound::sampled { class AudioFormat$Encoding; }
template<> constexpr auto signature<::javax::sound::sampled::AudioFormat$Encoding> = ::javax_sound_sampled / "AudioFormat$Encoding";
namespace javax::sound::sampled { class AudioInputStream; }
template<> constexpr auto signature<::javax::sound::sampled::AudioInputStream> = ::javax_sound_sampled / "AudioInputStream";
namespace javax::sound::sampled { class AudioInputStream$TargetDataLineInputStream; }
template<> constexpr auto signature<::javax::sound::sampled::AudioInputStream$TargetDataLineInputStream> = ::javax_sound_sampled / "AudioInputStream$TargetDataLineInputStream";
namespace javax::sound::sampled { class AudioPermission; }
template<> constexpr auto signature<::javax::sound::sampled::AudioPermission> = ::javax_sound_sampled / "AudioPermission";
namespace javax::sound::sampled { class AudioSystem; }
template<> constexpr auto signature<::javax::sound::sampled::AudioSystem> = ::javax_sound_sampled / "AudioSystem";
namespace javax::sound::sampled { class BooleanControl; }
template<> constexpr auto signature<::javax::sound::sampled::BooleanControl> = ::javax_sound_sampled / "BooleanControl";
namespace javax::sound::sampled { class BooleanControl$Type; }
template<> constexpr auto signature<::javax::sound::sampled::BooleanControl$Type> = ::javax_sound_sampled / "BooleanControl$Type";
namespace javax::sound::sampled { class Clip; }
template<> constexpr auto signature<::javax::sound::sampled::Clip> = ::javax_sound_sampled / "Clip";
namespace javax::sound::sampled { class CompoundControl; }
template<> constexpr auto signature<::javax::sound::sampled::CompoundControl> = ::javax_sound_sampled / "CompoundControl";
namespace javax::sound::sampled { class CompoundControl$Type; }
template<> constexpr auto signature<::javax::sound::sampled::CompoundControl$Type> = ::javax_sound_sampled / "CompoundControl$Type";
namespace javax::sound::sampled { class Control; }
template<> constexpr auto signature<::javax::sound::sampled::Control> = ::javax_sound_sampled / "Control";
namespace javax::sound::sampled { class Control$Type; }
template<> constexpr auto signature<::javax::sound::sampled::Control$Type> = ::javax_sound_sampled / "Control$Type";
namespace javax::sound::sampled { class DataLine; }
template<> constexpr auto signature<::javax::sound::sampled::DataLine> = ::javax_sound_sampled / "DataLine";
namespace javax::sound::sampled { class DataLine$Info; }
template<> constexpr auto signature<::javax::sound::sampled::DataLine$Info> = ::javax_sound_sampled / "DataLine$Info";
namespace javax::sound::sampled { class EnumControl; }
template<> constexpr auto signature<::javax::sound::sampled::EnumControl> = ::javax_sound_sampled / "EnumControl";
namespace javax::sound::sampled { class EnumControl$Type; }
template<> constexpr auto signature<::javax::sound::sampled::EnumControl$Type> = ::javax_sound_sampled / "EnumControl$Type";
namespace javax::sound::sampled { class FloatControl; }
template<> constexpr auto signature<::javax::sound::sampled::FloatControl> = ::javax_sound_sampled / "FloatControl";
namespace javax::sound::sampled { class FloatControl$Type; }
template<> constexpr auto signature<::javax::sound::sampled::FloatControl$Type> = ::javax_sound_sampled / "FloatControl$Type";
namespace javax::sound::sampled { class Line; }
template<> constexpr auto signature<::javax::sound::sampled::Line> = ::javax_sound_sampled / "Line";
namespace javax::sound::sampled { class Line$Info; }
template<> constexpr auto signature<::javax::sound::sampled::Line$Info> = ::javax_sound_sampled / "Line$Info";
namespace javax::sound::sampled { class LineEvent; }
template<> constexpr auto signature<::javax::sound::sampled::LineEvent> = ::javax_sound_sampled / "LineEvent";
namespace javax::sound::sampled { class LineEvent$Type; }
template<> constexpr auto signature<::javax::sound::sampled::LineEvent$Type> = ::javax_sound_sampled / "LineEvent$Type";
namespace javax::sound::sampled { class LineListener; }
template<> constexpr auto signature<::javax::sound::sampled::LineListener> = ::javax_sound_sampled / "LineListener";
namespace javax::sound::sampled { class LineUnavailableException; }
template<> constexpr auto signature<::javax::sound::sampled::LineUnavailableException> = ::javax_sound_sampled / "LineUnavailableException";
namespace javax::sound::sampled { class Mixer; }
template<> constexpr auto signature<::javax::sound::sampled::Mixer> = ::javax_sound_sampled / "Mixer";
namespace javax::sound::sampled { class Mixer$Info; }
template<> constexpr auto signature<::javax::sound::sampled::Mixer$Info> = ::javax_sound_sampled / "Mixer$Info";
namespace javax::sound::sampled { class Port; }
template<> constexpr auto signature<::javax::sound::sampled::Port> = ::javax_sound_sampled / "Port";
namespace javax::sound::sampled { class Port$Info; }
template<> constexpr auto signature<::javax::sound::sampled::Port$Info> = ::javax_sound_sampled / "Port$Info";
namespace javax::sound::sampled { class ReverbType; }
template<> constexpr auto signature<::javax::sound::sampled::ReverbType> = ::javax_sound_sampled / "ReverbType";
namespace javax::sound::sampled { class SourceDataLine; }
template<> constexpr auto signature<::javax::sound::sampled::SourceDataLine> = ::javax_sound_sampled / "SourceDataLine";
namespace javax::sound::sampled { class TargetDataLine; }
template<> constexpr auto signature<::javax::sound::sampled::TargetDataLine> = ::javax_sound_sampled / "TargetDataLine";
namespace javax::sound::sampled { class UnsupportedAudioFileException; }
template<> constexpr auto signature<::javax::sound::sampled::UnsupportedAudioFileException> = ::javax_sound_sampled / "UnsupportedAudioFileException";
namespace javax::sound::sampled::spi { class AudioFileReader; }
template<> constexpr auto signature<::javax::sound::sampled::spi::AudioFileReader> = ::javax_sound_sampled_spi / "AudioFileReader";
namespace javax::sound::sampled::spi { class AudioFileWriter; }
template<> constexpr auto signature<::javax::sound::sampled::spi::AudioFileWriter> = ::javax_sound_sampled_spi / "AudioFileWriter";
namespace javax::sound::sampled::spi { class FormatConversionProvider; }
template<> constexpr auto signature<::javax::sound::sampled::spi::FormatConversionProvider> = ::javax_sound_sampled_spi / "FormatConversionProvider";
namespace javax::sound::sampled::spi { class MixerProvider; }
template<> constexpr auto signature<::javax::sound::sampled::spi::MixerProvider> = ::javax_sound_sampled_spi / "MixerProvider";
namespace javax::sql { class CommonDataSource; }
template<> constexpr auto signature<::javax::sql::CommonDataSource> = ::javax_sql / "CommonDataSource";
namespace javax::sql { class ConnectionEvent; }
template<> constexpr auto signature<::javax::sql::ConnectionEvent> = ::javax_sql / "ConnectionEvent";
namespace javax::sql { class ConnectionEventListener; }
template<> constexpr auto signature<::javax::sql::ConnectionEventListener> = ::javax_sql / "ConnectionEventListener";
namespace javax::sql { class ConnectionPoolDataSource; }
template<> constexpr auto signature<::javax::sql::ConnectionPoolDataSource> = ::javax_sql / "ConnectionPoolDataSource";
namespace javax::sql { class DataSource; }
template<> constexpr auto signature<::javax::sql::DataSource> = ::javax_sql / "DataSource";
namespace javax::sql { class PooledConnection; }
template<> constexpr auto signature<::javax::sql::PooledConnection> = ::javax_sql / "PooledConnection";
namespace javax::sql { class RowSet; }
template<> constexpr auto signature<::javax::sql::RowSet> = ::javax_sql / "RowSet";
namespace javax::sql { class RowSetEvent; }
template<> constexpr auto signature<::javax::sql::RowSetEvent> = ::javax_sql / "RowSetEvent";
namespace javax::sql { class RowSetInternal; }
template<> constexpr auto signature<::javax::sql::RowSetInternal> = ::javax_sql / "RowSetInternal";
namespace javax::sql { class RowSetListener; }
template<> constexpr auto signature<::javax::sql::RowSetListener> = ::javax_sql / "RowSetListener";
namespace javax::sql { class RowSetMetaData; }
template<> constexpr auto signature<::javax::sql::RowSetMetaData> = ::javax_sql / "RowSetMetaData";
namespace javax::sql { class RowSetReader; }
template<> constexpr auto signature<::javax::sql::RowSetReader> = ::javax_sql / "RowSetReader";
namespace javax::sql { class RowSetWriter; }
template<> constexpr auto signature<::javax::sql::RowSetWriter> = ::javax_sql / "RowSetWriter";
namespace javax::sql { class StatementEvent; }
template<> constexpr auto signature<::javax::sql::StatementEvent> = ::javax_sql / "StatementEvent";
namespace javax::sql { class StatementEventListener; }
template<> constexpr auto signature<::javax::sql::StatementEventListener> = ::javax_sql / "StatementEventListener";
namespace javax::sql { class XAConnection; }
template<> constexpr auto signature<::javax::sql::XAConnection> = ::javax_sql / "XAConnection";
namespace javax::sql { class XADataSource; }
template<> constexpr auto signature<::javax::sql::XADataSource> = ::javax_sql / "XADataSource";
namespace javax::sql::rowset { class BaseRowSet; }
template<> constexpr auto signature<::javax::sql::rowset::BaseRowSet> = ::javax_sql_rowset / "BaseRowSet";
namespace javax::sql::rowset { class CachedRowSet; }
template<> constexpr auto signature<::javax::sql::rowset::CachedRowSet> = ::javax_sql_rowset / "CachedRowSet";
namespace javax::sql::rowset { class FilteredRowSet; }
template<> constexpr auto signature<::javax::sql::rowset::FilteredRowSet> = ::javax_sql_rowset / "FilteredRowSet";
namespace javax::sql::rowset { class JdbcRowSet; }
template<> constexpr auto signature<::javax::sql::rowset::JdbcRowSet> = ::javax_sql_rowset / "JdbcRowSet";
namespace javax::sql::rowset { class JoinRowSet; }
template<> constexpr auto signature<::javax::sql::rowset::JoinRowSet> = ::javax_sql_rowset / "JoinRowSet";
namespace javax::sql::rowset { class Joinable; }
template<> constexpr auto signature<::javax::sql::rowset::Joinable> = ::javax_sql_rowset / "Joinable";
namespace javax::sql::rowset { class Predicate; }
template<> constexpr auto signature<::javax::sql::rowset::Predicate> = ::javax_sql_rowset / "Predicate";
namespace javax::sql::rowset { class RowSetFactory; }
template<> constexpr auto signature<::javax::sql::rowset::RowSetFactory> = ::javax_sql_rowset / "RowSetFactory";
namespace javax::sql::rowset { class RowSetMetaDataImpl; }
template<> constexpr auto signature<::javax::sql::rowset::RowSetMetaDataImpl> = ::javax_sql_rowset / "RowSetMetaDataImpl";
namespace javax::sql::rowset { class RowSetMetaDataImpl$1; }
template<> constexpr auto signature<::javax::sql::rowset::RowSetMetaDataImpl$1> = ::javax_sql_rowset / "RowSetMetaDataImpl$1";
namespace javax::sql::rowset { class RowSetMetaDataImpl$ColInfo; }
template<> constexpr auto signature<::javax::sql::rowset::RowSetMetaDataImpl$ColInfo> = ::javax_sql_rowset / "RowSetMetaDataImpl$ColInfo";
namespace javax::sql::rowset { class RowSetProvider; }
template<> constexpr auto signature<::javax::sql::rowset::RowSetProvider> = ::javax_sql_rowset / "RowSetProvider";
namespace javax::sql::rowset { class RowSetProvider$1; }
template<> constexpr auto signature<::javax::sql::rowset::RowSetProvider$1> = ::javax_sql_rowset / "RowSetProvider$1";
namespace javax::sql::rowset { class RowSetProvider$2; }
template<> constexpr auto signature<::javax::sql::rowset::RowSetProvider$2> = ::javax_sql_rowset / "RowSetProvider$2";
namespace javax::sql::rowset { class RowSetWarning; }
template<> constexpr auto signature<::javax::sql::rowset::RowSetWarning> = ::javax_sql_rowset / "RowSetWarning";
namespace javax::sql::rowset { class WebRowSet; }
template<> constexpr auto signature<::javax::sql::rowset::WebRowSet> = ::javax_sql_rowset / "WebRowSet";
namespace javax::sql::rowset::serial { class SQLInputImpl; }
template<> constexpr auto signature<::javax::sql::rowset::serial::SQLInputImpl> = ::javax_sql_rowset_serial / "SQLInputImpl";
namespace javax::sql::rowset::serial { class SQLOutputImpl; }
template<> constexpr auto signature<::javax::sql::rowset::serial::SQLOutputImpl> = ::javax_sql_rowset_serial / "SQLOutputImpl";
namespace javax::sql::rowset::serial { class SerialArray; }
template<> constexpr auto signature<::javax::sql::rowset::serial::SerialArray> = ::javax_sql_rowset_serial / "SerialArray";
namespace javax::sql::rowset::serial { class SerialBlob; }
template<> constexpr auto signature<::javax::sql::rowset::serial::SerialBlob> = ::javax_sql_rowset_serial / "SerialBlob";
namespace javax::sql::rowset::serial { class SerialClob; }
template<> constexpr auto signature<::javax::sql::rowset::serial::SerialClob> = ::javax_sql_rowset_serial / "SerialClob";
namespace javax::sql::rowset::serial { class SerialDatalink; }
template<> constexpr auto signature<::javax::sql::rowset::serial::SerialDatalink> = ::javax_sql_rowset_serial / "SerialDatalink";
namespace javax::sql::rowset::serial { class SerialException; }
template<> constexpr auto signature<::javax::sql::rowset::serial::SerialException> = ::javax_sql_rowset_serial / "SerialException";
namespace javax::sql::rowset::serial { class SerialJavaObject; }
template<> constexpr auto signature<::javax::sql::rowset::serial::SerialJavaObject> = ::javax_sql_rowset_serial / "SerialJavaObject";
namespace javax::sql::rowset::serial { class SerialRef; }
template<> constexpr auto signature<::javax::sql::rowset::serial::SerialRef> = ::javax_sql_rowset_serial / "SerialRef";
namespace javax::sql::rowset::serial { class SerialStruct; }
template<> constexpr auto signature<::javax::sql::rowset::serial::SerialStruct> = ::javax_sql_rowset_serial / "SerialStruct";
namespace javax::sql::rowset::spi { class ProviderImpl; }
template<> constexpr auto signature<::javax::sql::rowset::spi::ProviderImpl> = ::javax_sql_rowset_spi / "ProviderImpl";
namespace javax::sql::rowset::spi { class SyncFactory; }
template<> constexpr auto signature<::javax::sql::rowset::spi::SyncFactory> = ::javax_sql_rowset_spi / "SyncFactory";
namespace javax::sql::rowset::spi { class SyncFactory$1; }
template<> constexpr auto signature<::javax::sql::rowset::spi::SyncFactory$1> = ::javax_sql_rowset_spi / "SyncFactory$1";
namespace javax::sql::rowset::spi { class SyncFactory$2; }
template<> constexpr auto signature<::javax::sql::rowset::spi::SyncFactory$2> = ::javax_sql_rowset_spi / "SyncFactory$2";
namespace javax::sql::rowset::spi { class SyncFactory$SyncFactoryHolder; }
template<> constexpr auto signature<::javax::sql::rowset::spi::SyncFactory$SyncFactoryHolder> = ::javax_sql_rowset_spi / "SyncFactory$SyncFactoryHolder";
namespace javax::sql::rowset::spi { class SyncFactoryException; }
template<> constexpr auto signature<::javax::sql::rowset::spi::SyncFactoryException> = ::javax_sql_rowset_spi / "SyncFactoryException";
namespace javax::sql::rowset::spi { class SyncProvider; }
template<> constexpr auto signature<::javax::sql::rowset::spi::SyncProvider> = ::javax_sql_rowset_spi / "SyncProvider";
namespace javax::sql::rowset::spi { class SyncProviderException; }
template<> constexpr auto signature<::javax::sql::rowset::spi::SyncProviderException> = ::javax_sql_rowset_spi / "SyncProviderException";
namespace javax::sql::rowset::spi { class SyncResolver; }
template<> constexpr auto signature<::javax::sql::rowset::spi::SyncResolver> = ::javax_sql_rowset_spi / "SyncResolver";
namespace javax::sql::rowset::spi { class TransactionalWriter; }
template<> constexpr auto signature<::javax::sql::rowset::spi::TransactionalWriter> = ::javax_sql_rowset_spi / "TransactionalWriter";
namespace javax::sql::rowset::spi { class XmlReader; }
template<> constexpr auto signature<::javax::sql::rowset::spi::XmlReader> = ::javax_sql_rowset_spi / "XmlReader";
namespace javax::sql::rowset::spi { class XmlWriter; }
template<> constexpr auto signature<::javax::sql::rowset::spi::XmlWriter> = ::javax_sql_rowset_spi / "XmlWriter";
namespace javax::swing { class AbstractAction; }
template<> constexpr auto signature<::javax::swing::AbstractAction> = ::javax_swing / "AbstractAction";
namespace javax::swing { class AbstractButton; }
template<> constexpr auto signature<::javax::swing::AbstractButton> = ::javax_swing / "AbstractButton";
namespace javax::swing { class AbstractButton$AccessibleAbstractButton; }
template<> constexpr auto signature<::javax::swing::AbstractButton$AccessibleAbstractButton> = ::javax_swing / "AbstractButton$AccessibleAbstractButton";
namespace javax::swing { class AbstractButton$AccessibleAbstractButton$ButtonKeyBinding; }
template<> constexpr auto signature<::javax::swing::AbstractButton$AccessibleAbstractButton$ButtonKeyBinding> = ::javax_swing / "AbstractButton$AccessibleAbstractButton$ButtonKeyBinding";
namespace javax::swing { class AbstractButton$ButtonActionPropertyChangeListener; }
template<> constexpr auto signature<::javax::swing::AbstractButton$ButtonActionPropertyChangeListener> = ::javax_swing / "AbstractButton$ButtonActionPropertyChangeListener";
namespace javax::swing { class AbstractButton$ButtonChangeListener; }
template<> constexpr auto signature<::javax::swing::AbstractButton$ButtonChangeListener> = ::javax_swing / "AbstractButton$ButtonChangeListener";
namespace javax::swing { class AbstractButton$Handler; }
template<> constexpr auto signature<::javax::swing::AbstractButton$Handler> = ::javax_swing / "AbstractButton$Handler";
namespace javax::swing { class AbstractCellEditor; }
template<> constexpr auto signature<::javax::swing::AbstractCellEditor> = ::javax_swing / "AbstractCellEditor";
namespace javax::swing { class AbstractListModel; }
template<> constexpr auto signature<::javax::swing::AbstractListModel> = ::javax_swing / "AbstractListModel";
namespace javax::swing { class AbstractSpinnerModel; }
template<> constexpr auto signature<::javax::swing::AbstractSpinnerModel> = ::javax_swing / "AbstractSpinnerModel";
namespace javax::swing { class Action; }
template<> constexpr auto signature<::javax::swing::Action> = ::javax_swing / "Action";
namespace javax::swing { class ActionMap; }
template<> constexpr auto signature<::javax::swing::ActionMap> = ::javax_swing / "ActionMap";
namespace javax::swing { class ActionPropertyChangeListener; }
template<> constexpr auto signature<::javax::swing::ActionPropertyChangeListener> = ::javax_swing / "ActionPropertyChangeListener";
namespace javax::swing { class ActionPropertyChangeListener$OwnedWeakReference; }
template<> constexpr auto signature<::javax::swing::ActionPropertyChangeListener$OwnedWeakReference> = ::javax_swing / "ActionPropertyChangeListener$OwnedWeakReference";
namespace javax::swing { class AncestorNotifier; }
template<> constexpr auto signature<::javax::swing::AncestorNotifier> = ::javax_swing / "AncestorNotifier";
namespace javax::swing { class ArrayTable; }
template<> constexpr auto signature<::javax::swing::ArrayTable> = ::javax_swing / "ArrayTable";
namespace javax::swing { class Autoscroller; }
template<> constexpr auto signature<::javax::swing::Autoscroller> = ::javax_swing / "Autoscroller";
namespace javax::swing { class BorderFactory; }
template<> constexpr auto signature<::javax::swing::BorderFactory> = ::javax_swing / "BorderFactory";
namespace javax::swing { class BoundedRangeModel; }
template<> constexpr auto signature<::javax::swing::BoundedRangeModel> = ::javax_swing / "BoundedRangeModel";
namespace javax::swing { class Box; }
template<> constexpr auto signature<::javax::swing::Box> = ::javax_swing / "Box";
namespace javax::swing { class Box$AccessibleBox; }
template<> constexpr auto signature<::javax::swing::Box$AccessibleBox> = ::javax_swing / "Box$AccessibleBox";
namespace javax::swing { class Box$Filler; }
template<> constexpr auto signature<::javax::swing::Box$Filler> = ::javax_swing / "Box$Filler";
namespace javax::swing { class Box$Filler$AccessibleBoxFiller; }
template<> constexpr auto signature<::javax::swing::Box$Filler$AccessibleBoxFiller> = ::javax_swing / "Box$Filler$AccessibleBoxFiller";
namespace javax::swing { class BoxLayout; }
template<> constexpr auto signature<::javax::swing::BoxLayout> = ::javax_swing / "BoxLayout";
namespace javax::swing { class BufferStrategyPaintManager; }
template<> constexpr auto signature<::javax::swing::BufferStrategyPaintManager> = ::javax_swing / "BufferStrategyPaintManager";
namespace javax::swing { class BufferStrategyPaintManager$1; }
template<> constexpr auto signature<::javax::swing::BufferStrategyPaintManager$1> = ::javax_swing / "BufferStrategyPaintManager$1";
namespace javax::swing { class BufferStrategyPaintManager$2; }
template<> constexpr auto signature<::javax::swing::BufferStrategyPaintManager$2> = ::javax_swing / "BufferStrategyPaintManager$2";
namespace javax::swing { class BufferStrategyPaintManager$3; }
template<> constexpr auto signature<::javax::swing::BufferStrategyPaintManager$3> = ::javax_swing / "BufferStrategyPaintManager$3";
namespace javax::swing { class BufferStrategyPaintManager$BufferInfo; }
template<> constexpr auto signature<::javax::swing::BufferStrategyPaintManager$BufferInfo> = ::javax_swing / "BufferStrategyPaintManager$BufferInfo";
namespace javax::swing { class ButtonGroup; }
template<> constexpr auto signature<::javax::swing::ButtonGroup> = ::javax_swing / "ButtonGroup";
namespace javax::swing { class ButtonModel; }
template<> constexpr auto signature<::javax::swing::ButtonModel> = ::javax_swing / "ButtonModel";
namespace javax::swing { class CellEditor; }
template<> constexpr auto signature<::javax::swing::CellEditor> = ::javax_swing / "CellEditor";
namespace javax::swing { class CellRendererPane; }
template<> constexpr auto signature<::javax::swing::CellRendererPane> = ::javax_swing / "CellRendererPane";
namespace javax::swing { class CellRendererPane$AccessibleCellRendererPane; }
template<> constexpr auto signature<::javax::swing::CellRendererPane$AccessibleCellRendererPane> = ::javax_swing / "CellRendererPane$AccessibleCellRendererPane";
namespace javax::swing { class ClientPropertyKey; }
template<> constexpr auto signature<::javax::swing::ClientPropertyKey> = ::javax_swing / "ClientPropertyKey";
namespace javax::swing { class ClientPropertyKey$1; }
template<> constexpr auto signature<::javax::swing::ClientPropertyKey$1> = ::javax_swing / "ClientPropertyKey$1";
namespace javax::swing { class ColorChooserDialog; }
template<> constexpr auto signature<::javax::swing::ColorChooserDialog> = ::javax_swing / "ColorChooserDialog";
namespace javax::swing { class ColorChooserDialog$1; }
template<> constexpr auto signature<::javax::swing::ColorChooserDialog$1> = ::javax_swing / "ColorChooserDialog$1";
namespace javax::swing { class ColorChooserDialog$2; }
template<> constexpr auto signature<::javax::swing::ColorChooserDialog$2> = ::javax_swing / "ColorChooserDialog$2";
namespace javax::swing { class ColorChooserDialog$3; }
template<> constexpr auto signature<::javax::swing::ColorChooserDialog$3> = ::javax_swing / "ColorChooserDialog$3";
namespace javax::swing { class ColorChooserDialog$4; }
template<> constexpr auto signature<::javax::swing::ColorChooserDialog$4> = ::javax_swing / "ColorChooserDialog$4";
namespace javax::swing { class ColorChooserDialog$Closer; }
template<> constexpr auto signature<::javax::swing::ColorChooserDialog$Closer> = ::javax_swing / "ColorChooserDialog$Closer";
namespace javax::swing { class ColorChooserDialog$DisposeOnClose; }
template<> constexpr auto signature<::javax::swing::ColorChooserDialog$DisposeOnClose> = ::javax_swing / "ColorChooserDialog$DisposeOnClose";
namespace javax::swing { class ColorTracker; }
template<> constexpr auto signature<::javax::swing::ColorTracker> = ::javax_swing / "ColorTracker";
namespace javax::swing { class ComboBoxEditor; }
template<> constexpr auto signature<::javax::swing::ComboBoxEditor> = ::javax_swing / "ComboBoxEditor";
namespace javax::swing { class ComboBoxModel; }
template<> constexpr auto signature<::javax::swing::ComboBoxModel> = ::javax_swing / "ComboBoxModel";
namespace javax::swing { class CompareTabOrderComparator; }
template<> constexpr auto signature<::javax::swing::CompareTabOrderComparator> = ::javax_swing / "CompareTabOrderComparator";
namespace javax::swing { class ComponentInputMap; }
template<> constexpr auto signature<::javax::swing::ComponentInputMap> = ::javax_swing / "ComponentInputMap";
namespace javax::swing { class DebugGraphics; }
template<> constexpr auto signature<::javax::swing::DebugGraphics> = ::javax_swing / "DebugGraphics";
namespace javax::swing { class DebugGraphicsFilter; }
template<> constexpr auto signature<::javax::swing::DebugGraphicsFilter> = ::javax_swing / "DebugGraphicsFilter";
namespace javax::swing { class DebugGraphicsInfo; }
template<> constexpr auto signature<::javax::swing::DebugGraphicsInfo> = ::javax_swing / "DebugGraphicsInfo";
namespace javax::swing { class DebugGraphicsObserver; }
template<> constexpr auto signature<::javax::swing::DebugGraphicsObserver> = ::javax_swing / "DebugGraphicsObserver";
namespace javax::swing { class DefaultBoundedRangeModel; }
template<> constexpr auto signature<::javax::swing::DefaultBoundedRangeModel> = ::javax_swing / "DefaultBoundedRangeModel";
namespace javax::swing { class DefaultButtonModel; }
template<> constexpr auto signature<::javax::swing::DefaultButtonModel> = ::javax_swing / "DefaultButtonModel";
namespace javax::swing { class DefaultCellEditor; }
template<> constexpr auto signature<::javax::swing::DefaultCellEditor> = ::javax_swing / "DefaultCellEditor";
namespace javax::swing { class DefaultCellEditor$1; }
template<> constexpr auto signature<::javax::swing::DefaultCellEditor$1> = ::javax_swing / "DefaultCellEditor$1";
namespace javax::swing { class DefaultCellEditor$2; }
template<> constexpr auto signature<::javax::swing::DefaultCellEditor$2> = ::javax_swing / "DefaultCellEditor$2";
namespace javax::swing { class DefaultCellEditor$3; }
template<> constexpr auto signature<::javax::swing::DefaultCellEditor$3> = ::javax_swing / "DefaultCellEditor$3";
namespace javax::swing { class DefaultCellEditor$EditorDelegate; }
template<> constexpr auto signature<::javax::swing::DefaultCellEditor$EditorDelegate> = ::javax_swing / "DefaultCellEditor$EditorDelegate";
namespace javax::swing { class DefaultComboBoxModel; }
template<> constexpr auto signature<::javax::swing::DefaultComboBoxModel> = ::javax_swing / "DefaultComboBoxModel";
namespace javax::swing { class DefaultDesktopManager; }
template<> constexpr auto signature<::javax::swing::DefaultDesktopManager> = ::javax_swing / "DefaultDesktopManager";
namespace javax::swing { class DefaultDesktopManager$1; }
template<> constexpr auto signature<::javax::swing::DefaultDesktopManager$1> = ::javax_swing / "DefaultDesktopManager$1";
namespace javax::swing { class DefaultFocusManager; }
template<> constexpr auto signature<::javax::swing::DefaultFocusManager> = ::javax_swing / "DefaultFocusManager";
namespace javax::swing { class DefaultListCellRenderer; }
template<> constexpr auto signature<::javax::swing::DefaultListCellRenderer> = ::javax_swing / "DefaultListCellRenderer";
namespace javax::swing { class DefaultListCellRenderer$UIResource; }
template<> constexpr auto signature<::javax::swing::DefaultListCellRenderer$UIResource> = ::javax_swing / "DefaultListCellRenderer$UIResource";
namespace javax::swing { class DefaultListModel; }
template<> constexpr auto signature<::javax::swing::DefaultListModel> = ::javax_swing / "DefaultListModel";
namespace javax::swing { class DefaultListSelectionModel; }
template<> constexpr auto signature<::javax::swing::DefaultListSelectionModel> = ::javax_swing / "DefaultListSelectionModel";
namespace javax::swing { class DefaultRowSorter; }
template<> constexpr auto signature<::javax::swing::DefaultRowSorter> = ::javax_swing / "DefaultRowSorter";
namespace javax::swing { class DefaultRowSorter$1; }
template<> constexpr auto signature<::javax::swing::DefaultRowSorter$1> = ::javax_swing / "DefaultRowSorter$1";
namespace javax::swing { class DefaultRowSorter$FilterEntry; }
template<> constexpr auto signature<::javax::swing::DefaultRowSorter$FilterEntry> = ::javax_swing / "DefaultRowSorter$FilterEntry";
namespace javax::swing { class DefaultRowSorter$ModelWrapper; }
template<> constexpr auto signature<::javax::swing::DefaultRowSorter$ModelWrapper> = ::javax_swing / "DefaultRowSorter$ModelWrapper";
namespace javax::swing { class DefaultRowSorter$Row; }
template<> constexpr auto signature<::javax::swing::DefaultRowSorter$Row> = ::javax_swing / "DefaultRowSorter$Row";
namespace javax::swing { class DefaultSingleSelectionModel; }
template<> constexpr auto signature<::javax::swing::DefaultSingleSelectionModel> = ::javax_swing / "DefaultSingleSelectionModel";
namespace javax::swing { class DelegatingDefaultFocusManager; }
template<> constexpr auto signature<::javax::swing::DelegatingDefaultFocusManager> = ::javax_swing / "DelegatingDefaultFocusManager";
namespace javax::swing { class DesktopManager; }
template<> constexpr auto signature<::javax::swing::DesktopManager> = ::javax_swing / "DesktopManager";
namespace javax::swing { class DropMode; }
template<> constexpr auto signature<::javax::swing::DropMode> = ::javax_swing / "DropMode";
namespace javax::swing { class FocusManager; }
template<> constexpr auto signature<::javax::swing::FocusManager> = ::javax_swing / "FocusManager";
namespace javax::swing { class GraphicsWrapper; }
template<> constexpr auto signature<::javax::swing::GraphicsWrapper> = ::javax_swing / "GraphicsWrapper";
namespace javax::swing { class GrayFilter; }
template<> constexpr auto signature<::javax::swing::GrayFilter> = ::javax_swing / "GrayFilter";
namespace javax::swing { class GroupLayout; }
template<> constexpr auto signature<::javax::swing::GroupLayout> = ::javax_swing / "GroupLayout";
namespace javax::swing { class GroupLayout$1; }
template<> constexpr auto signature<::javax::swing::GroupLayout$1> = ::javax_swing / "GroupLayout$1";
namespace javax::swing { class GroupLayout$Alignment; }
template<> constexpr auto signature<::javax::swing::GroupLayout$Alignment> = ::javax_swing / "GroupLayout$Alignment";
namespace javax::swing { class GroupLayout$AutoPreferredGapMatch; }
template<> constexpr auto signature<::javax::swing::GroupLayout$AutoPreferredGapMatch> = ::javax_swing / "GroupLayout$AutoPreferredGapMatch";
namespace javax::swing { class GroupLayout$AutoPreferredGapSpring; }
template<> constexpr auto signature<::javax::swing::GroupLayout$AutoPreferredGapSpring> = ::javax_swing / "GroupLayout$AutoPreferredGapSpring";
namespace javax::swing { class GroupLayout$BaselineGroup; }
template<> constexpr auto signature<::javax::swing::GroupLayout$BaselineGroup> = ::javax_swing / "GroupLayout$BaselineGroup";
namespace javax::swing { class GroupLayout$ComponentInfo; }
template<> constexpr auto signature<::javax::swing::GroupLayout$ComponentInfo> = ::javax_swing / "GroupLayout$ComponentInfo";
namespace javax::swing { class GroupLayout$ComponentSpring; }
template<> constexpr auto signature<::javax::swing::GroupLayout$ComponentSpring> = ::javax_swing / "GroupLayout$ComponentSpring";
namespace javax::swing { class GroupLayout$ContainerAutoPreferredGapSpring; }
template<> constexpr auto signature<::javax::swing::GroupLayout$ContainerAutoPreferredGapSpring> = ::javax_swing / "GroupLayout$ContainerAutoPreferredGapSpring";
namespace javax::swing { class GroupLayout$GapSpring; }
template<> constexpr auto signature<::javax::swing::GroupLayout$GapSpring> = ::javax_swing / "GroupLayout$GapSpring";
namespace javax::swing { class GroupLayout$Group; }
template<> constexpr auto signature<::javax::swing::GroupLayout$Group> = ::javax_swing / "GroupLayout$Group";
namespace javax::swing { class GroupLayout$LinkInfo; }
template<> constexpr auto signature<::javax::swing::GroupLayout$LinkInfo> = ::javax_swing / "GroupLayout$LinkInfo";
namespace javax::swing { class GroupLayout$ParallelGroup; }
template<> constexpr auto signature<::javax::swing::GroupLayout$ParallelGroup> = ::javax_swing / "GroupLayout$ParallelGroup";
namespace javax::swing { class GroupLayout$PreferredGapSpring; }
template<> constexpr auto signature<::javax::swing::GroupLayout$PreferredGapSpring> = ::javax_swing / "GroupLayout$PreferredGapSpring";
namespace javax::swing { class GroupLayout$SequentialGroup; }
template<> constexpr auto signature<::javax::swing::GroupLayout$SequentialGroup> = ::javax_swing / "GroupLayout$SequentialGroup";
namespace javax::swing { class GroupLayout$Spring; }
template<> constexpr auto signature<::javax::swing::GroupLayout$Spring> = ::javax_swing / "GroupLayout$Spring";
namespace javax::swing { class GroupLayout$SpringDelta; }
template<> constexpr auto signature<::javax::swing::GroupLayout$SpringDelta> = ::javax_swing / "GroupLayout$SpringDelta";
namespace javax::swing { class Icon; }
template<> constexpr auto signature<::javax::swing::Icon> = ::javax_swing / "Icon";
namespace javax::swing { class ImageIcon; }
template<> constexpr auto signature<::javax::swing::ImageIcon> = ::javax_swing / "ImageIcon";
namespace javax::swing { class ImageIcon$1; }
template<> constexpr auto signature<::javax::swing::ImageIcon$1> = ::javax_swing / "ImageIcon$1";
namespace javax::swing { class ImageIcon$2; }
template<> constexpr auto signature<::javax::swing::ImageIcon$2> = ::javax_swing / "ImageIcon$2";
namespace javax::swing { class ImageIcon$2$1; }
template<> constexpr auto signature<::javax::swing::ImageIcon$2$1> = ::javax_swing / "ImageIcon$2$1";
namespace javax::swing { class ImageIcon$3; }
template<> constexpr auto signature<::javax::swing::ImageIcon$3> = ::javax_swing / "ImageIcon$3";
namespace javax::swing { class ImageIcon$AccessibleImageIcon; }
template<> constexpr auto signature<::javax::swing::ImageIcon$AccessibleImageIcon> = ::javax_swing / "ImageIcon$AccessibleImageIcon";
namespace javax::swing { class InputMap; }
template<> constexpr auto signature<::javax::swing::InputMap> = ::javax_swing / "InputMap";
namespace javax::swing { class InputVerifier; }
template<> constexpr auto signature<::javax::swing::InputVerifier> = ::javax_swing / "InputVerifier";
namespace javax::swing { class InternalFrameFocusTraversalPolicy; }
template<> constexpr auto signature<::javax::swing::InternalFrameFocusTraversalPolicy> = ::javax_swing / "InternalFrameFocusTraversalPolicy";
namespace javax::swing { class JApplet; }
template<> constexpr auto signature<::javax::swing::JApplet> = ::javax_swing / "JApplet";
namespace javax::swing { class JApplet$AccessibleJApplet; }
template<> constexpr auto signature<::javax::swing::JApplet$AccessibleJApplet> = ::javax_swing / "JApplet$AccessibleJApplet";
namespace javax::swing { class JButton; }
template<> constexpr auto signature<::javax::swing::JButton> = ::javax_swing / "JButton";
namespace javax::swing { class JButton$AccessibleJButton; }
template<> constexpr auto signature<::javax::swing::JButton$AccessibleJButton> = ::javax_swing / "JButton$AccessibleJButton";
namespace javax::swing { class JCheckBox; }
template<> constexpr auto signature<::javax::swing::JCheckBox> = ::javax_swing / "JCheckBox";
namespace javax::swing { class JCheckBox$AccessibleJCheckBox; }
template<> constexpr auto signature<::javax::swing::JCheckBox$AccessibleJCheckBox> = ::javax_swing / "JCheckBox$AccessibleJCheckBox";
namespace javax::swing { class JCheckBoxMenuItem; }
template<> constexpr auto signature<::javax::swing::JCheckBoxMenuItem> = ::javax_swing / "JCheckBoxMenuItem";
namespace javax::swing { class JCheckBoxMenuItem$AccessibleJCheckBoxMenuItem; }
template<> constexpr auto signature<::javax::swing::JCheckBoxMenuItem$AccessibleJCheckBoxMenuItem> = ::javax_swing / "JCheckBoxMenuItem$AccessibleJCheckBoxMenuItem";
namespace javax::swing { class JColorChooser; }
template<> constexpr auto signature<::javax::swing::JColorChooser> = ::javax_swing / "JColorChooser";
namespace javax::swing { class JColorChooser$AccessibleJColorChooser; }
template<> constexpr auto signature<::javax::swing::JColorChooser$AccessibleJColorChooser> = ::javax_swing / "JColorChooser$AccessibleJColorChooser";
namespace javax::swing { class JComboBox; }
template<> constexpr auto signature<::javax::swing::JComboBox> = ::javax_swing / "JComboBox";
namespace javax::swing { class JComboBox$1; }
template<> constexpr auto signature<::javax::swing::JComboBox$1> = ::javax_swing / "JComboBox$1";
namespace javax::swing { class JComboBox$AccessibleJComboBox; }
template<> constexpr auto signature<::javax::swing::JComboBox$AccessibleJComboBox> = ::javax_swing / "JComboBox$AccessibleJComboBox";
namespace javax::swing { class JComboBox$AccessibleJComboBox$AccessibleEditor; }
template<> constexpr auto signature<::javax::swing::JComboBox$AccessibleJComboBox$AccessibleEditor> = ::javax_swing / "JComboBox$AccessibleJComboBox$AccessibleEditor";
namespace javax::swing { class JComboBox$AccessibleJComboBox$AccessibleJComboBoxListSelectionListener; }
template<> constexpr auto signature<::javax::swing::JComboBox$AccessibleJComboBox$AccessibleJComboBoxListSelectionListener> = ::javax_swing / "JComboBox$AccessibleJComboBox$AccessibleJComboBoxListSelectionListener";
namespace javax::swing { class JComboBox$AccessibleJComboBox$AccessibleJComboBoxPopupMenuListener; }
template<> constexpr auto signature<::javax::swing::JComboBox$AccessibleJComboBox$AccessibleJComboBoxPopupMenuListener> = ::javax_swing / "JComboBox$AccessibleJComboBox$AccessibleJComboBoxPopupMenuListener";
namespace javax::swing { class JComboBox$AccessibleJComboBox$AccessibleJComboBoxPropertyChangeListener; }
template<> constexpr auto signature<::javax::swing::JComboBox$AccessibleJComboBox$AccessibleJComboBoxPropertyChangeListener> = ::javax_swing / "JComboBox$AccessibleJComboBox$AccessibleJComboBoxPropertyChangeListener";
namespace javax::swing { class JComboBox$AccessibleJComboBox$EditorAccessibleContext; }
template<> constexpr auto signature<::javax::swing::JComboBox$AccessibleJComboBox$EditorAccessibleContext> = ::javax_swing / "JComboBox$AccessibleJComboBox$EditorAccessibleContext";
namespace javax::swing { class JComboBox$ComboBoxActionPropertyChangeListener; }
template<> constexpr auto signature<::javax::swing::JComboBox$ComboBoxActionPropertyChangeListener> = ::javax_swing / "JComboBox$ComboBoxActionPropertyChangeListener";
namespace javax::swing { class JComboBox$DefaultKeySelectionManager; }
template<> constexpr auto signature<::javax::swing::JComboBox$DefaultKeySelectionManager> = ::javax_swing / "JComboBox$DefaultKeySelectionManager";
namespace javax::swing { class JComboBox$KeySelectionManager; }
template<> constexpr auto signature<::javax::swing::JComboBox$KeySelectionManager> = ::javax_swing / "JComboBox$KeySelectionManager";
namespace javax::swing { class JComponent; }
template<> constexpr auto signature<::javax::swing::JComponent> = ::javax_swing / "JComponent";
namespace javax::swing { class JComponent$1; }
template<> constexpr auto signature<::javax::swing::JComponent$1> = ::javax_swing / "JComponent$1";
namespace javax::swing { class JComponent$AccessibleJComponent; }
template<> constexpr auto signature<::javax::swing::JComponent$AccessibleJComponent> = ::javax_swing / "JComponent$AccessibleJComponent";
namespace javax::swing { class JComponent$AccessibleJComponent$AccessibleContainerHandler; }
template<> constexpr auto signature<::javax::swing::JComponent$AccessibleJComponent$AccessibleContainerHandler> = ::javax_swing / "JComponent$AccessibleJComponent$AccessibleContainerHandler";
namespace javax::swing { class JComponent$AccessibleJComponent$AccessibleFocusHandler; }
template<> constexpr auto signature<::javax::swing::JComponent$AccessibleJComponent$AccessibleFocusHandler> = ::javax_swing / "JComponent$AccessibleJComponent$AccessibleFocusHandler";
namespace javax::swing { class JComponent$ActionStandin; }
template<> constexpr auto signature<::javax::swing::JComponent$ActionStandin> = ::javax_swing / "JComponent$ActionStandin";
namespace javax::swing { class JComponent$IntVector; }
template<> constexpr auto signature<::javax::swing::JComponent$IntVector> = ::javax_swing / "JComponent$IntVector";
namespace javax::swing { class JComponent$KeyboardState; }
template<> constexpr auto signature<::javax::swing::JComponent$KeyboardState> = ::javax_swing / "JComponent$KeyboardState";
namespace javax::swing { class JComponent$ReadObjectCallback; }
template<> constexpr auto signature<::javax::swing::JComponent$ReadObjectCallback> = ::javax_swing / "JComponent$ReadObjectCallback";
namespace javax::swing { class JDesktopPane; }
template<> constexpr auto signature<::javax::swing::JDesktopPane> = ::javax_swing / "JDesktopPane";
namespace javax::swing { class JDesktopPane$1; }
template<> constexpr auto signature<::javax::swing::JDesktopPane$1> = ::javax_swing / "JDesktopPane$1";
namespace javax::swing { class JDesktopPane$AccessibleJDesktopPane; }
template<> constexpr auto signature<::javax::swing::JDesktopPane$AccessibleJDesktopPane> = ::javax_swing / "JDesktopPane$AccessibleJDesktopPane";
namespace javax::swing { class JDesktopPane$ComponentPosition; }
template<> constexpr auto signature<::javax::swing::JDesktopPane$ComponentPosition> = ::javax_swing / "JDesktopPane$ComponentPosition";
namespace javax::swing { class JDialog; }
template<> constexpr auto signature<::javax::swing::JDialog> = ::javax_swing / "JDialog";
namespace javax::swing { class JDialog$AccessibleJDialog; }
template<> constexpr auto signature<::javax::swing::JDialog$AccessibleJDialog> = ::javax_swing / "JDialog$AccessibleJDialog";
namespace javax::swing { class JEditorPane; }
template<> constexpr auto signature<::javax::swing::JEditorPane> = ::javax_swing / "JEditorPane";
namespace javax::swing { class JEditorPane$1; }
template<> constexpr auto signature<::javax::swing::JEditorPane$1> = ::javax_swing / "JEditorPane$1";
namespace javax::swing { class JEditorPane$2; }
template<> constexpr auto signature<::javax::swing::JEditorPane$2> = ::javax_swing / "JEditorPane$2";
namespace javax::swing { class JEditorPane$3; }
template<> constexpr auto signature<::javax::swing::JEditorPane$3> = ::javax_swing / "JEditorPane$3";
namespace javax::swing { class JEditorPane$AccessibleJEditorPane; }
template<> constexpr auto signature<::javax::swing::JEditorPane$AccessibleJEditorPane> = ::javax_swing / "JEditorPane$AccessibleJEditorPane";
namespace javax::swing { class JEditorPane$AccessibleJEditorPaneHTML; }
template<> constexpr auto signature<::javax::swing::JEditorPane$AccessibleJEditorPaneHTML> = ::javax_swing / "JEditorPane$AccessibleJEditorPaneHTML";
namespace javax::swing { class JEditorPane$HeaderParser; }
template<> constexpr auto signature<::javax::swing::JEditorPane$HeaderParser> = ::javax_swing / "JEditorPane$HeaderParser";
namespace javax::swing { class JEditorPane$JEditorPaneAccessibleHypertextSupport; }
template<> constexpr auto signature<::javax::swing::JEditorPane$JEditorPaneAccessibleHypertextSupport> = ::javax_swing / "JEditorPane$JEditorPaneAccessibleHypertextSupport";
namespace javax::swing { class JEditorPane$JEditorPaneAccessibleHypertextSupport$1; }
template<> constexpr auto signature<::javax::swing::JEditorPane$JEditorPaneAccessibleHypertextSupport$1> = ::javax_swing / "JEditorPane$JEditorPaneAccessibleHypertextSupport$1";
namespace javax::swing { class JEditorPane$JEditorPaneAccessibleHypertextSupport$HTMLLink; }
template<> constexpr auto signature<::javax::swing::JEditorPane$JEditorPaneAccessibleHypertextSupport$HTMLLink> = ::javax_swing / "JEditorPane$JEditorPaneAccessibleHypertextSupport$HTMLLink";
namespace javax::swing { class JEditorPane$JEditorPaneAccessibleHypertextSupport$LinkVector; }
template<> constexpr auto signature<::javax::swing::JEditorPane$JEditorPaneAccessibleHypertextSupport$LinkVector> = ::javax_swing / "JEditorPane$JEditorPaneAccessibleHypertextSupport$LinkVector";
namespace javax::swing { class JEditorPane$PageLoader; }
template<> constexpr auto signature<::javax::swing::JEditorPane$PageLoader> = ::javax_swing / "JEditorPane$PageLoader";
namespace javax::swing { class JEditorPane$PageLoader$1; }
template<> constexpr auto signature<::javax::swing::JEditorPane$PageLoader$1> = ::javax_swing / "JEditorPane$PageLoader$1";
namespace javax::swing { class JEditorPane$PageLoader$2; }
template<> constexpr auto signature<::javax::swing::JEditorPane$PageLoader$2> = ::javax_swing / "JEditorPane$PageLoader$2";
namespace javax::swing { class JEditorPane$PageLoader$3; }
template<> constexpr auto signature<::javax::swing::JEditorPane$PageLoader$3> = ::javax_swing / "JEditorPane$PageLoader$3";
namespace javax::swing { class JEditorPane$PlainEditorKit; }
template<> constexpr auto signature<::javax::swing::JEditorPane$PlainEditorKit> = ::javax_swing / "JEditorPane$PlainEditorKit";
namespace javax::swing { class JEditorPane$PlainEditorKit$PlainParagraph; }
template<> constexpr auto signature<::javax::swing::JEditorPane$PlainEditorKit$PlainParagraph> = ::javax_swing / "JEditorPane$PlainEditorKit$PlainParagraph";
namespace javax::swing { class JEditorPane$PlainEditorKit$PlainParagraph$LogicalView; }
template<> constexpr auto signature<::javax::swing::JEditorPane$PlainEditorKit$PlainParagraph$LogicalView> = ::javax_swing / "JEditorPane$PlainEditorKit$PlainParagraph$LogicalView";
namespace javax::swing { class JFileChooser; }
template<> constexpr auto signature<::javax::swing::JFileChooser> = ::javax_swing / "JFileChooser";
namespace javax::swing { class JFileChooser$1; }
template<> constexpr auto signature<::javax::swing::JFileChooser$1> = ::javax_swing / "JFileChooser$1";
namespace javax::swing { class JFileChooser$2; }
template<> constexpr auto signature<::javax::swing::JFileChooser$2> = ::javax_swing / "JFileChooser$2";
namespace javax::swing { class JFileChooser$AccessibleJFileChooser; }
template<> constexpr auto signature<::javax::swing::JFileChooser$AccessibleJFileChooser> = ::javax_swing / "JFileChooser$AccessibleJFileChooser";
namespace javax::swing { class JFileChooser$WeakPCL; }
template<> constexpr auto signature<::javax::swing::JFileChooser$WeakPCL> = ::javax_swing / "JFileChooser$WeakPCL";
namespace javax::swing { class JFormattedTextField; }
template<> constexpr auto signature<::javax::swing::JFormattedTextField> = ::javax_swing / "JFormattedTextField";
namespace javax::swing { class JFormattedTextField$1; }
template<> constexpr auto signature<::javax::swing::JFormattedTextField$1> = ::javax_swing / "JFormattedTextField$1";
namespace javax::swing { class JFormattedTextField$AbstractFormatter; }
template<> constexpr auto signature<::javax::swing::JFormattedTextField$AbstractFormatter> = ::javax_swing / "JFormattedTextField$AbstractFormatter";
namespace javax::swing { class JFormattedTextField$AbstractFormatterFactory; }
template<> constexpr auto signature<::javax::swing::JFormattedTextField$AbstractFormatterFactory> = ::javax_swing / "JFormattedTextField$AbstractFormatterFactory";
namespace javax::swing { class JFormattedTextField$CancelAction; }
template<> constexpr auto signature<::javax::swing::JFormattedTextField$CancelAction> = ::javax_swing / "JFormattedTextField$CancelAction";
namespace javax::swing { class JFormattedTextField$CommitAction; }
template<> constexpr auto signature<::javax::swing::JFormattedTextField$CommitAction> = ::javax_swing / "JFormattedTextField$CommitAction";
namespace javax::swing { class JFormattedTextField$DocumentHandler; }
template<> constexpr auto signature<::javax::swing::JFormattedTextField$DocumentHandler> = ::javax_swing / "JFormattedTextField$DocumentHandler";
namespace javax::swing { class JFormattedTextField$FocusLostHandler; }
template<> constexpr auto signature<::javax::swing::JFormattedTextField$FocusLostHandler> = ::javax_swing / "JFormattedTextField$FocusLostHandler";
namespace javax::swing { class JFrame; }
template<> constexpr auto signature<::javax::swing::JFrame> = ::javax_swing / "JFrame";
namespace javax::swing { class JFrame$AccessibleJFrame; }
template<> constexpr auto signature<::javax::swing::JFrame$AccessibleJFrame> = ::javax_swing / "JFrame$AccessibleJFrame";
namespace javax::swing { class JInternalFrame; }
template<> constexpr auto signature<::javax::swing::JInternalFrame> = ::javax_swing / "JInternalFrame";
namespace javax::swing { class JInternalFrame$1; }
template<> constexpr auto signature<::javax::swing::JInternalFrame$1> = ::javax_swing / "JInternalFrame$1";
namespace javax::swing { class JInternalFrame$AccessibleJInternalFrame; }
template<> constexpr auto signature<::javax::swing::JInternalFrame$AccessibleJInternalFrame> = ::javax_swing / "JInternalFrame$AccessibleJInternalFrame";
namespace javax::swing { class JInternalFrame$FocusPropertyChangeListener; }
template<> constexpr auto signature<::javax::swing::JInternalFrame$FocusPropertyChangeListener> = ::javax_swing / "JInternalFrame$FocusPropertyChangeListener";
namespace javax::swing { class JInternalFrame$JDesktopIcon; }
template<> constexpr auto signature<::javax::swing::JInternalFrame$JDesktopIcon> = ::javax_swing / "JInternalFrame$JDesktopIcon";
namespace javax::swing { class JInternalFrame$JDesktopIcon$AccessibleJDesktopIcon; }
template<> constexpr auto signature<::javax::swing::JInternalFrame$JDesktopIcon$AccessibleJDesktopIcon> = ::javax_swing / "JInternalFrame$JDesktopIcon$AccessibleJDesktopIcon";
namespace javax::swing { class JLabel; }
template<> constexpr auto signature<::javax::swing::JLabel> = ::javax_swing / "JLabel";
namespace javax::swing { class JLabel$AccessibleJLabel; }
template<> constexpr auto signature<::javax::swing::JLabel$AccessibleJLabel> = ::javax_swing / "JLabel$AccessibleJLabel";
namespace javax::swing { class JLabel$AccessibleJLabel$LabelKeyBinding; }
template<> constexpr auto signature<::javax::swing::JLabel$AccessibleJLabel$LabelKeyBinding> = ::javax_swing / "JLabel$AccessibleJLabel$LabelKeyBinding";
namespace javax::swing { class JLayer; }
template<> constexpr auto signature<::javax::swing::JLayer> = ::javax_swing / "JLayer";
namespace javax::swing { class JLayer$1; }
template<> constexpr auto signature<::javax::swing::JLayer$1> = ::javax_swing / "JLayer$1";
namespace javax::swing { class JLayer$DefaultLayerGlassPane; }
template<> constexpr auto signature<::javax::swing::JLayer$DefaultLayerGlassPane> = ::javax_swing / "JLayer$DefaultLayerGlassPane";
namespace javax::swing { class JLayer$LayerEventController; }
template<> constexpr auto signature<::javax::swing::JLayer$LayerEventController> = ::javax_swing / "JLayer$LayerEventController";
namespace javax::swing { class JLayer$LayerEventController$1; }
template<> constexpr auto signature<::javax::swing::JLayer$LayerEventController$1> = ::javax_swing / "JLayer$LayerEventController$1";
namespace javax::swing { class JLayer$LayerEventController$2; }
template<> constexpr auto signature<::javax::swing::JLayer$LayerEventController$2> = ::javax_swing / "JLayer$LayerEventController$2";
namespace javax::swing { class JLayeredPane; }
template<> constexpr auto signature<::javax::swing::JLayeredPane> = ::javax_swing / "JLayeredPane";
namespace javax::swing { class JLayeredPane$AccessibleJLayeredPane; }
template<> constexpr auto signature<::javax::swing::JLayeredPane$AccessibleJLayeredPane> = ::javax_swing / "JLayeredPane$AccessibleJLayeredPane";
namespace javax::swing { class JList; }
template<> constexpr auto signature<::javax::swing::JList> = ::javax_swing / "JList";
namespace javax::swing { class JList$1; }
template<> constexpr auto signature<::javax::swing::JList$1> = ::javax_swing / "JList$1";
namespace javax::swing { class JList$2; }
template<> constexpr auto signature<::javax::swing::JList$2> = ::javax_swing / "JList$2";
namespace javax::swing { class JList$3; }
template<> constexpr auto signature<::javax::swing::JList$3> = ::javax_swing / "JList$3";
namespace javax::swing { class JList$4; }
template<> constexpr auto signature<::javax::swing::JList$4> = ::javax_swing / "JList$4";
namespace javax::swing { class JList$5; }
template<> constexpr auto signature<::javax::swing::JList$5> = ::javax_swing / "JList$5";
namespace javax::swing { class JList$6; }
template<> constexpr auto signature<::javax::swing::JList$6> = ::javax_swing / "JList$6";
namespace javax::swing { class JList$AccessibleJList; }
template<> constexpr auto signature<::javax::swing::JList$AccessibleJList> = ::javax_swing / "JList$AccessibleJList";
namespace javax::swing { class JList$AccessibleJList$AccessibleJListChild; }
template<> constexpr auto signature<::javax::swing::JList$AccessibleJList$AccessibleJListChild> = ::javax_swing / "JList$AccessibleJList$AccessibleJListChild";
namespace javax::swing { class JList$DropLocation; }
template<> constexpr auto signature<::javax::swing::JList$DropLocation> = ::javax_swing / "JList$DropLocation";
namespace javax::swing { class JList$ListSelectionHandler; }
template<> constexpr auto signature<::javax::swing::JList$ListSelectionHandler> = ::javax_swing / "JList$ListSelectionHandler";
namespace javax::swing { class JMenu; }
template<> constexpr auto signature<::javax::swing::JMenu> = ::javax_swing / "JMenu";
namespace javax::swing { class JMenu$1; }
template<> constexpr auto signature<::javax::swing::JMenu$1> = ::javax_swing / "JMenu$1";
namespace javax::swing { class JMenu$AccessibleJMenu; }
template<> constexpr auto signature<::javax::swing::JMenu$AccessibleJMenu> = ::javax_swing / "JMenu$AccessibleJMenu";
namespace javax::swing { class JMenu$MenuChangeListener; }
template<> constexpr auto signature<::javax::swing::JMenu$MenuChangeListener> = ::javax_swing / "JMenu$MenuChangeListener";
namespace javax::swing { class JMenu$WinListener; }
template<> constexpr auto signature<::javax::swing::JMenu$WinListener> = ::javax_swing / "JMenu$WinListener";
namespace javax::swing { class JMenuBar; }
template<> constexpr auto signature<::javax::swing::JMenuBar> = ::javax_swing / "JMenuBar";
namespace javax::swing { class JMenuBar$AccessibleJMenuBar; }
template<> constexpr auto signature<::javax::swing::JMenuBar$AccessibleJMenuBar> = ::javax_swing / "JMenuBar$AccessibleJMenuBar";
namespace javax::swing { class JMenuItem; }
template<> constexpr auto signature<::javax::swing::JMenuItem> = ::javax_swing / "JMenuItem";
namespace javax::swing { class JMenuItem$1; }
template<> constexpr auto signature<::javax::swing::JMenuItem$1> = ::javax_swing / "JMenuItem$1";
namespace javax::swing { class JMenuItem$AccessibleJMenuItem; }
template<> constexpr auto signature<::javax::swing::JMenuItem$AccessibleJMenuItem> = ::javax_swing / "JMenuItem$AccessibleJMenuItem";
namespace javax::swing { class JMenuItem$MenuItemFocusListener; }
template<> constexpr auto signature<::javax::swing::JMenuItem$MenuItemFocusListener> = ::javax_swing / "JMenuItem$MenuItemFocusListener";
namespace javax::swing { class JOptionPane; }
template<> constexpr auto signature<::javax::swing::JOptionPane> = ::javax_swing / "JOptionPane";
namespace javax::swing { class JOptionPane$1; }
template<> constexpr auto signature<::javax::swing::JOptionPane$1> = ::javax_swing / "JOptionPane$1";
namespace javax::swing { class JOptionPane$2; }
template<> constexpr auto signature<::javax::swing::JOptionPane$2> = ::javax_swing / "JOptionPane$2";
namespace javax::swing { class JOptionPane$3; }
template<> constexpr auto signature<::javax::swing::JOptionPane$3> = ::javax_swing / "JOptionPane$3";
namespace javax::swing { class JOptionPane$4; }
template<> constexpr auto signature<::javax::swing::JOptionPane$4> = ::javax_swing / "JOptionPane$4";
namespace javax::swing { class JOptionPane$5; }
template<> constexpr auto signature<::javax::swing::JOptionPane$5> = ::javax_swing / "JOptionPane$5";
namespace javax::swing { class JOptionPane$AccessibleJOptionPane; }
template<> constexpr auto signature<::javax::swing::JOptionPane$AccessibleJOptionPane> = ::javax_swing / "JOptionPane$AccessibleJOptionPane";
namespace javax::swing { class JOptionPane$ModalPrivilegedAction; }
template<> constexpr auto signature<::javax::swing::JOptionPane$ModalPrivilegedAction> = ::javax_swing / "JOptionPane$ModalPrivilegedAction";
namespace javax::swing { class JPanel; }
template<> constexpr auto signature<::javax::swing::JPanel> = ::javax_swing / "JPanel";
namespace javax::swing { class JPanel$AccessibleJPanel; }
template<> constexpr auto signature<::javax::swing::JPanel$AccessibleJPanel> = ::javax_swing / "JPanel$AccessibleJPanel";
namespace javax::swing { class JPasswordField; }
template<> constexpr auto signature<::javax::swing::JPasswordField> = ::javax_swing / "JPasswordField";
namespace javax::swing { class JPasswordField$AccessibleJPasswordField; }
template<> constexpr auto signature<::javax::swing::JPasswordField$AccessibleJPasswordField> = ::javax_swing / "JPasswordField$AccessibleJPasswordField";
namespace javax::swing { class JPopupMenu; }
template<> constexpr auto signature<::javax::swing::JPopupMenu> = ::javax_swing / "JPopupMenu";
namespace javax::swing { class JPopupMenu$1; }
template<> constexpr auto signature<::javax::swing::JPopupMenu$1> = ::javax_swing / "JPopupMenu$1";
namespace javax::swing { class JPopupMenu$AccessibleJPopupMenu; }
template<> constexpr auto signature<::javax::swing::JPopupMenu$AccessibleJPopupMenu> = ::javax_swing / "JPopupMenu$AccessibleJPopupMenu";
namespace javax::swing { class JPopupMenu$Separator; }
template<> constexpr auto signature<::javax::swing::JPopupMenu$Separator> = ::javax_swing / "JPopupMenu$Separator";
namespace javax::swing { class JProgressBar; }
template<> constexpr auto signature<::javax::swing::JProgressBar> = ::javax_swing / "JProgressBar";
namespace javax::swing { class JProgressBar$1; }
template<> constexpr auto signature<::javax::swing::JProgressBar$1> = ::javax_swing / "JProgressBar$1";
namespace javax::swing { class JProgressBar$AccessibleJProgressBar; }
template<> constexpr auto signature<::javax::swing::JProgressBar$AccessibleJProgressBar> = ::javax_swing / "JProgressBar$AccessibleJProgressBar";
namespace javax::swing { class JProgressBar$ModelListener; }
template<> constexpr auto signature<::javax::swing::JProgressBar$ModelListener> = ::javax_swing / "JProgressBar$ModelListener";
namespace javax::swing { class JRadioButton; }
template<> constexpr auto signature<::javax::swing::JRadioButton> = ::javax_swing / "JRadioButton";
namespace javax::swing { class JRadioButton$AccessibleJRadioButton; }
template<> constexpr auto signature<::javax::swing::JRadioButton$AccessibleJRadioButton> = ::javax_swing / "JRadioButton$AccessibleJRadioButton";
namespace javax::swing { class JRadioButtonMenuItem; }
template<> constexpr auto signature<::javax::swing::JRadioButtonMenuItem> = ::javax_swing / "JRadioButtonMenuItem";
namespace javax::swing { class JRadioButtonMenuItem$AccessibleJRadioButtonMenuItem; }
template<> constexpr auto signature<::javax::swing::JRadioButtonMenuItem$AccessibleJRadioButtonMenuItem> = ::javax_swing / "JRadioButtonMenuItem$AccessibleJRadioButtonMenuItem";
namespace javax::swing { class JRootPane; }
template<> constexpr auto signature<::javax::swing::JRootPane> = ::javax_swing / "JRootPane";
namespace javax::swing { class JRootPane$1; }
template<> constexpr auto signature<::javax::swing::JRootPane$1> = ::javax_swing / "JRootPane$1";
namespace javax::swing { class JRootPane$AccessibleJRootPane; }
template<> constexpr auto signature<::javax::swing::JRootPane$AccessibleJRootPane> = ::javax_swing / "JRootPane$AccessibleJRootPane";
namespace javax::swing { class JRootPane$DefaultAction; }
template<> constexpr auto signature<::javax::swing::JRootPane$DefaultAction> = ::javax_swing / "JRootPane$DefaultAction";
namespace javax::swing { class JRootPane$RootLayout; }
template<> constexpr auto signature<::javax::swing::JRootPane$RootLayout> = ::javax_swing / "JRootPane$RootLayout";
namespace javax::swing { class JScrollBar; }
template<> constexpr auto signature<::javax::swing::JScrollBar> = ::javax_swing / "JScrollBar";
namespace javax::swing { class JScrollBar$1; }
template<> constexpr auto signature<::javax::swing::JScrollBar$1> = ::javax_swing / "JScrollBar$1";
namespace javax::swing { class JScrollBar$AccessibleJScrollBar; }
template<> constexpr auto signature<::javax::swing::JScrollBar$AccessibleJScrollBar> = ::javax_swing / "JScrollBar$AccessibleJScrollBar";
namespace javax::swing { class JScrollBar$ModelListener; }
template<> constexpr auto signature<::javax::swing::JScrollBar$ModelListener> = ::javax_swing / "JScrollBar$ModelListener";
namespace javax::swing { class JScrollPane; }
template<> constexpr auto signature<::javax::swing::JScrollPane> = ::javax_swing / "JScrollPane";
namespace javax::swing { class JScrollPane$AccessibleJScrollPane; }
template<> constexpr auto signature<::javax::swing::JScrollPane$AccessibleJScrollPane> = ::javax_swing / "JScrollPane$AccessibleJScrollPane";
namespace javax::swing { class JScrollPane$ScrollBar; }
template<> constexpr auto signature<::javax::swing::JScrollPane$ScrollBar> = ::javax_swing / "JScrollPane$ScrollBar";
namespace javax::swing { class JSeparator; }
template<> constexpr auto signature<::javax::swing::JSeparator> = ::javax_swing / "JSeparator";
namespace javax::swing { class JSeparator$AccessibleJSeparator; }
template<> constexpr auto signature<::javax::swing::JSeparator$AccessibleJSeparator> = ::javax_swing / "JSeparator$AccessibleJSeparator";
namespace javax::swing { class JSlider; }
template<> constexpr auto signature<::javax::swing::JSlider> = ::javax_swing / "JSlider";
namespace javax::swing { class JSlider$1; }
template<> constexpr auto signature<::javax::swing::JSlider$1> = ::javax_swing / "JSlider$1";
namespace javax::swing { class JSlider$1SmartHashtable; }
template<> constexpr auto signature<::javax::swing::JSlider$1SmartHashtable> = ::javax_swing / "JSlider$1SmartHashtable";
namespace javax::swing { class JSlider$1SmartHashtable$LabelUIResource; }
template<> constexpr auto signature<::javax::swing::JSlider$1SmartHashtable$LabelUIResource> = ::javax_swing / "JSlider$1SmartHashtable$LabelUIResource";
namespace javax::swing { class JSlider$AccessibleJSlider; }
template<> constexpr auto signature<::javax::swing::JSlider$AccessibleJSlider> = ::javax_swing / "JSlider$AccessibleJSlider";
namespace javax::swing { class JSlider$ModelListener; }
template<> constexpr auto signature<::javax::swing::JSlider$ModelListener> = ::javax_swing / "JSlider$ModelListener";
namespace javax::swing { class JSpinner; }
template<> constexpr auto signature<::javax::swing::JSpinner> = ::javax_swing / "JSpinner";
namespace javax::swing { class JSpinner$1; }
template<> constexpr auto signature<::javax::swing::JSpinner$1> = ::javax_swing / "JSpinner$1";
namespace javax::swing { class JSpinner$AccessibleJSpinner; }
template<> constexpr auto signature<::javax::swing::JSpinner$AccessibleJSpinner> = ::javax_swing / "JSpinner$AccessibleJSpinner";
namespace javax::swing { class JSpinner$DateEditor; }
template<> constexpr auto signature<::javax::swing::JSpinner$DateEditor> = ::javax_swing / "JSpinner$DateEditor";
namespace javax::swing { class JSpinner$DateEditorFormatter; }
template<> constexpr auto signature<::javax::swing::JSpinner$DateEditorFormatter> = ::javax_swing / "JSpinner$DateEditorFormatter";
namespace javax::swing { class JSpinner$DefaultEditor; }
template<> constexpr auto signature<::javax::swing::JSpinner$DefaultEditor> = ::javax_swing / "JSpinner$DefaultEditor";
namespace javax::swing { class JSpinner$DisabledAction; }
template<> constexpr auto signature<::javax::swing::JSpinner$DisabledAction> = ::javax_swing / "JSpinner$DisabledAction";
namespace javax::swing { class JSpinner$ListEditor; }
template<> constexpr auto signature<::javax::swing::JSpinner$ListEditor> = ::javax_swing / "JSpinner$ListEditor";
namespace javax::swing { class JSpinner$ListEditor$ListFormatter; }
template<> constexpr auto signature<::javax::swing::JSpinner$ListEditor$ListFormatter> = ::javax_swing / "JSpinner$ListEditor$ListFormatter";
namespace javax::swing { class JSpinner$ListEditor$ListFormatter$Filter; }
template<> constexpr auto signature<::javax::swing::JSpinner$ListEditor$ListFormatter$Filter> = ::javax_swing / "JSpinner$ListEditor$ListFormatter$Filter";
namespace javax::swing { class JSpinner$ModelListener; }
template<> constexpr auto signature<::javax::swing::JSpinner$ModelListener> = ::javax_swing / "JSpinner$ModelListener";
namespace javax::swing { class JSpinner$NumberEditor; }
template<> constexpr auto signature<::javax::swing::JSpinner$NumberEditor> = ::javax_swing / "JSpinner$NumberEditor";
namespace javax::swing { class JSpinner$NumberEditorFormatter; }
template<> constexpr auto signature<::javax::swing::JSpinner$NumberEditorFormatter> = ::javax_swing / "JSpinner$NumberEditorFormatter";
namespace javax::swing { class JSplitPane; }
template<> constexpr auto signature<::javax::swing::JSplitPane> = ::javax_swing / "JSplitPane";
namespace javax::swing { class JSplitPane$AccessibleJSplitPane; }
template<> constexpr auto signature<::javax::swing::JSplitPane$AccessibleJSplitPane> = ::javax_swing / "JSplitPane$AccessibleJSplitPane";
namespace javax::swing { class JTabbedPane; }
template<> constexpr auto signature<::javax::swing::JTabbedPane> = ::javax_swing / "JTabbedPane";
namespace javax::swing { class JTabbedPane$AccessibleJTabbedPane; }
template<> constexpr auto signature<::javax::swing::JTabbedPane$AccessibleJTabbedPane> = ::javax_swing / "JTabbedPane$AccessibleJTabbedPane";
namespace javax::swing { class JTabbedPane$ModelListener; }
template<> constexpr auto signature<::javax::swing::JTabbedPane$ModelListener> = ::javax_swing / "JTabbedPane$ModelListener";
namespace javax::swing { class JTabbedPane$Page; }
template<> constexpr auto signature<::javax::swing::JTabbedPane$Page> = ::javax_swing / "JTabbedPane$Page";
namespace javax::swing { class JTable; }
template<> constexpr auto signature<::javax::swing::JTable> = ::javax_swing / "JTable";
namespace javax::swing { class JTable$1; }
template<> constexpr auto signature<::javax::swing::JTable$1> = ::javax_swing / "JTable$1";
namespace javax::swing { class JTable$2; }
template<> constexpr auto signature<::javax::swing::JTable$2> = ::javax_swing / "JTable$2";
namespace javax::swing { class JTable$3; }
template<> constexpr auto signature<::javax::swing::JTable$3> = ::javax_swing / "JTable$3";
namespace javax::swing { class JTable$4; }
template<> constexpr auto signature<::javax::swing::JTable$4> = ::javax_swing / "JTable$4";
namespace javax::swing { class JTable$5; }
template<> constexpr auto signature<::javax::swing::JTable$5> = ::javax_swing / "JTable$5";
namespace javax::swing { class JTable$6; }
template<> constexpr auto signature<::javax::swing::JTable$6> = ::javax_swing / "JTable$6";
namespace javax::swing { class JTable$7; }
template<> constexpr auto signature<::javax::swing::JTable$7> = ::javax_swing / "JTable$7";
namespace javax::swing { class JTable$AccessibleJTable; }
template<> constexpr auto signature<::javax::swing::JTable$AccessibleJTable> = ::javax_swing / "JTable$AccessibleJTable";
namespace javax::swing { class JTable$AccessibleJTable$AccessibleJTableCell; }
template<> constexpr auto signature<::javax::swing::JTable$AccessibleJTable$AccessibleJTableCell> = ::javax_swing / "JTable$AccessibleJTable$AccessibleJTableCell";
namespace javax::swing { class JTable$AccessibleJTable$AccessibleJTableHeaderCell; }
template<> constexpr auto signature<::javax::swing::JTable$AccessibleJTable$AccessibleJTableHeaderCell> = ::javax_swing / "JTable$AccessibleJTable$AccessibleJTableHeaderCell";
namespace javax::swing { class JTable$AccessibleJTable$AccessibleJTableModelChange; }
template<> constexpr auto signature<::javax::swing::JTable$AccessibleJTable$AccessibleJTableModelChange> = ::javax_swing / "JTable$AccessibleJTable$AccessibleJTableModelChange";
namespace javax::swing { class JTable$AccessibleJTable$AccessibleTableHeader; }
template<> constexpr auto signature<::javax::swing::JTable$AccessibleJTable$AccessibleTableHeader> = ::javax_swing / "JTable$AccessibleJTable$AccessibleTableHeader";
namespace javax::swing { class JTable$BooleanEditor; }
template<> constexpr auto signature<::javax::swing::JTable$BooleanEditor> = ::javax_swing / "JTable$BooleanEditor";
namespace javax::swing { class JTable$BooleanRenderer; }
template<> constexpr auto signature<::javax::swing::JTable$BooleanRenderer> = ::javax_swing / "JTable$BooleanRenderer";
namespace javax::swing { class JTable$CellEditorRemover; }
template<> constexpr auto signature<::javax::swing::JTable$CellEditorRemover> = ::javax_swing / "JTable$CellEditorRemover";
namespace javax::swing { class JTable$DateRenderer; }
template<> constexpr auto signature<::javax::swing::JTable$DateRenderer> = ::javax_swing / "JTable$DateRenderer";
namespace javax::swing { class JTable$DoubleRenderer; }
template<> constexpr auto signature<::javax::swing::JTable$DoubleRenderer> = ::javax_swing / "JTable$DoubleRenderer";
namespace javax::swing { class JTable$DropLocation; }
template<> constexpr auto signature<::javax::swing::JTable$DropLocation> = ::javax_swing / "JTable$DropLocation";
namespace javax::swing { class JTable$GenericEditor; }
template<> constexpr auto signature<::javax::swing::JTable$GenericEditor> = ::javax_swing / "JTable$GenericEditor";
namespace javax::swing { class JTable$IconRenderer; }
template<> constexpr auto signature<::javax::swing::JTable$IconRenderer> = ::javax_swing / "JTable$IconRenderer";
namespace javax::swing { class JTable$ModelChange; }
template<> constexpr auto signature<::javax::swing::JTable$ModelChange> = ::javax_swing / "JTable$ModelChange";
namespace javax::swing { class JTable$NumberEditor; }
template<> constexpr auto signature<::javax::swing::JTable$NumberEditor> = ::javax_swing / "JTable$NumberEditor";
namespace javax::swing { class JTable$NumberRenderer; }
template<> constexpr auto signature<::javax::swing::JTable$NumberRenderer> = ::javax_swing / "JTable$NumberRenderer";
namespace javax::swing { class JTable$PrintMode; }
template<> constexpr auto signature<::javax::swing::JTable$PrintMode> = ::javax_swing / "JTable$PrintMode";
namespace javax::swing { class JTable$Resizable2; }
template<> constexpr auto signature<::javax::swing::JTable$Resizable2> = ::javax_swing / "JTable$Resizable2";
namespace javax::swing { class JTable$Resizable3; }
template<> constexpr auto signature<::javax::swing::JTable$Resizable3> = ::javax_swing / "JTable$Resizable3";
namespace javax::swing { class JTable$SortManager; }
template<> constexpr auto signature<::javax::swing::JTable$SortManager> = ::javax_swing / "JTable$SortManager";
namespace javax::swing { class JTable$ThreadSafePrintable; }
template<> constexpr auto signature<::javax::swing::JTable$ThreadSafePrintable> = ::javax_swing / "JTable$ThreadSafePrintable";
namespace javax::swing { class JTable$ThreadSafePrintable$1; }
template<> constexpr auto signature<::javax::swing::JTable$ThreadSafePrintable$1> = ::javax_swing / "JTable$ThreadSafePrintable$1";
namespace javax::swing { class JTextArea; }
template<> constexpr auto signature<::javax::swing::JTextArea> = ::javax_swing / "JTextArea";
namespace javax::swing { class JTextArea$AccessibleJTextArea; }
template<> constexpr auto signature<::javax::swing::JTextArea$AccessibleJTextArea> = ::javax_swing / "JTextArea$AccessibleJTextArea";
namespace javax::swing { class JTextField; }
template<> constexpr auto signature<::javax::swing::JTextField> = ::javax_swing / "JTextField";
namespace javax::swing { class JTextField$AccessibleJTextField; }
template<> constexpr auto signature<::javax::swing::JTextField$AccessibleJTextField> = ::javax_swing / "JTextField$AccessibleJTextField";
namespace javax::swing { class JTextField$NotifyAction; }
template<> constexpr auto signature<::javax::swing::JTextField$NotifyAction> = ::javax_swing / "JTextField$NotifyAction";
namespace javax::swing { class JTextField$ScrollRepainter; }
template<> constexpr auto signature<::javax::swing::JTextField$ScrollRepainter> = ::javax_swing / "JTextField$ScrollRepainter";
namespace javax::swing { class JTextField$TextFieldActionPropertyChangeListener; }
template<> constexpr auto signature<::javax::swing::JTextField$TextFieldActionPropertyChangeListener> = ::javax_swing / "JTextField$TextFieldActionPropertyChangeListener";
namespace javax::swing { class JTextPane; }
template<> constexpr auto signature<::javax::swing::JTextPane> = ::javax_swing / "JTextPane";
namespace javax::swing { class JToggleButton; }
template<> constexpr auto signature<::javax::swing::JToggleButton> = ::javax_swing / "JToggleButton";
namespace javax::swing { class JToggleButton$AccessibleJToggleButton; }
template<> constexpr auto signature<::javax::swing::JToggleButton$AccessibleJToggleButton> = ::javax_swing / "JToggleButton$AccessibleJToggleButton";
namespace javax::swing { class JToggleButton$ToggleButtonModel; }
template<> constexpr auto signature<::javax::swing::JToggleButton$ToggleButtonModel> = ::javax_swing / "JToggleButton$ToggleButtonModel";
namespace javax::swing { class JToolBar; }
template<> constexpr auto signature<::javax::swing::JToolBar> = ::javax_swing / "JToolBar";
namespace javax::swing { class JToolBar$1; }
template<> constexpr auto signature<::javax::swing::JToolBar$1> = ::javax_swing / "JToolBar$1";
namespace javax::swing { class JToolBar$AccessibleJToolBar; }
template<> constexpr auto signature<::javax::swing::JToolBar$AccessibleJToolBar> = ::javax_swing / "JToolBar$AccessibleJToolBar";
namespace javax::swing { class JToolBar$DefaultToolBarLayout; }
template<> constexpr auto signature<::javax::swing::JToolBar$DefaultToolBarLayout> = ::javax_swing / "JToolBar$DefaultToolBarLayout";
namespace javax::swing { class JToolBar$Separator; }
template<> constexpr auto signature<::javax::swing::JToolBar$Separator> = ::javax_swing / "JToolBar$Separator";
namespace javax::swing { class JToolTip; }
template<> constexpr auto signature<::javax::swing::JToolTip> = ::javax_swing / "JToolTip";
namespace javax::swing { class JToolTip$AccessibleJToolTip; }
template<> constexpr auto signature<::javax::swing::JToolTip$AccessibleJToolTip> = ::javax_swing / "JToolTip$AccessibleJToolTip";
namespace javax::swing { class JTree; }
template<> constexpr auto signature<::javax::swing::JTree> = ::javax_swing / "JTree";
namespace javax::swing { class JTree$1; }
template<> constexpr auto signature<::javax::swing::JTree$1> = ::javax_swing / "JTree$1";
namespace javax::swing { class JTree$AccessibleJTree; }
template<> constexpr auto signature<::javax::swing::JTree$AccessibleJTree> = ::javax_swing / "JTree$AccessibleJTree";
namespace javax::swing { class JTree$AccessibleJTree$AccessibleJTreeNode; }
template<> constexpr auto signature<::javax::swing::JTree$AccessibleJTree$AccessibleJTreeNode> = ::javax_swing / "JTree$AccessibleJTree$AccessibleJTreeNode";
namespace javax::swing { class JTree$DropLocation; }
template<> constexpr auto signature<::javax::swing::JTree$DropLocation> = ::javax_swing / "JTree$DropLocation";
namespace javax::swing { class JTree$DynamicUtilTreeNode; }
template<> constexpr auto signature<::javax::swing::JTree$DynamicUtilTreeNode> = ::javax_swing / "JTree$DynamicUtilTreeNode";
namespace javax::swing { class JTree$EmptySelectionModel; }
template<> constexpr auto signature<::javax::swing::JTree$EmptySelectionModel> = ::javax_swing / "JTree$EmptySelectionModel";
namespace javax::swing { class JTree$TreeModelHandler; }
template<> constexpr auto signature<::javax::swing::JTree$TreeModelHandler> = ::javax_swing / "JTree$TreeModelHandler";
namespace javax::swing { class JTree$TreeSelectionRedirector; }
template<> constexpr auto signature<::javax::swing::JTree$TreeSelectionRedirector> = ::javax_swing / "JTree$TreeSelectionRedirector";
namespace javax::swing { class JTree$TreeTimer; }
template<> constexpr auto signature<::javax::swing::JTree$TreeTimer> = ::javax_swing / "JTree$TreeTimer";
namespace javax::swing { class JViewport; }
template<> constexpr auto signature<::javax::swing::JViewport> = ::javax_swing / "JViewport";
namespace javax::swing { class JViewport$1; }
template<> constexpr auto signature<::javax::swing::JViewport$1> = ::javax_swing / "JViewport$1";
namespace javax::swing { class JViewport$AccessibleJViewport; }
template<> constexpr auto signature<::javax::swing::JViewport$AccessibleJViewport> = ::javax_swing / "JViewport$AccessibleJViewport";
namespace javax::swing { class JViewport$ViewListener; }
template<> constexpr auto signature<::javax::swing::JViewport$ViewListener> = ::javax_swing / "JViewport$ViewListener";
namespace javax::swing { class JWindow; }
template<> constexpr auto signature<::javax::swing::JWindow> = ::javax_swing / "JWindow";
namespace javax::swing { class JWindow$AccessibleJWindow; }
template<> constexpr auto signature<::javax::swing::JWindow$AccessibleJWindow> = ::javax_swing / "JWindow$AccessibleJWindow";
namespace javax::swing { class KeyStroke; }
template<> constexpr auto signature<::javax::swing::KeyStroke> = ::javax_swing / "KeyStroke";
namespace javax::swing { class KeyboardManager; }
template<> constexpr auto signature<::javax::swing::KeyboardManager> = ::javax_swing / "KeyboardManager";
namespace javax::swing { class KeyboardManager$ComponentKeyStrokePair; }
template<> constexpr auto signature<::javax::swing::KeyboardManager$ComponentKeyStrokePair> = ::javax_swing / "KeyboardManager$ComponentKeyStrokePair";
namespace javax::swing { class LayoutComparator; }
template<> constexpr auto signature<::javax::swing::LayoutComparator> = ::javax_swing / "LayoutComparator";
namespace javax::swing { class LayoutFocusTraversalPolicy; }
template<> constexpr auto signature<::javax::swing::LayoutFocusTraversalPolicy> = ::javax_swing / "LayoutFocusTraversalPolicy";
namespace javax::swing { class LayoutStyle; }
template<> constexpr auto signature<::javax::swing::LayoutStyle> = ::javax_swing / "LayoutStyle";
namespace javax::swing { class LayoutStyle$ComponentPlacement; }
template<> constexpr auto signature<::javax::swing::LayoutStyle$ComponentPlacement> = ::javax_swing / "LayoutStyle$ComponentPlacement";
namespace javax::swing { class LegacyGlueFocusTraversalPolicy; }
template<> constexpr auto signature<::javax::swing::LegacyGlueFocusTraversalPolicy> = ::javax_swing / "LegacyGlueFocusTraversalPolicy";
namespace javax::swing { class LegacyLayoutFocusTraversalPolicy; }
template<> constexpr auto signature<::javax::swing::LegacyLayoutFocusTraversalPolicy> = ::javax_swing / "LegacyLayoutFocusTraversalPolicy";
namespace javax::swing { class ListCellRenderer; }
template<> constexpr auto signature<::javax::swing::ListCellRenderer> = ::javax_swing / "ListCellRenderer";
namespace javax::swing { class ListModel; }
template<> constexpr auto signature<::javax::swing::ListModel> = ::javax_swing / "ListModel";
namespace javax::swing { class ListSelectionModel; }
template<> constexpr auto signature<::javax::swing::ListSelectionModel> = ::javax_swing / "ListSelectionModel";
namespace javax::swing { class LookAndFeel; }
template<> constexpr auto signature<::javax::swing::LookAndFeel> = ::javax_swing / "LookAndFeel";
namespace javax::swing { class MenuElement; }
template<> constexpr auto signature<::javax::swing::MenuElement> = ::javax_swing / "MenuElement";
namespace javax::swing { class MenuSelectionManager; }
template<> constexpr auto signature<::javax::swing::MenuSelectionManager> = ::javax_swing / "MenuSelectionManager";
namespace javax::swing { class MultiUIDefaults; }
template<> constexpr auto signature<::javax::swing::MultiUIDefaults> = ::javax_swing / "MultiUIDefaults";
namespace javax::swing { class MultiUIDefaults$1; }
template<> constexpr auto signature<::javax::swing::MultiUIDefaults$1> = ::javax_swing / "MultiUIDefaults$1";
namespace javax::swing { class MultiUIDefaults$MultiUIDefaultsEnumerator; }
template<> constexpr auto signature<::javax::swing::MultiUIDefaults$MultiUIDefaultsEnumerator> = ::javax_swing / "MultiUIDefaults$MultiUIDefaultsEnumerator";
namespace javax::swing { class MultiUIDefaults$MultiUIDefaultsEnumerator$Type; }
template<> constexpr auto signature<::javax::swing::MultiUIDefaults$MultiUIDefaultsEnumerator$Type> = ::javax_swing / "MultiUIDefaults$MultiUIDefaultsEnumerator$Type";
namespace javax::swing { class MutableComboBoxModel; }
template<> constexpr auto signature<::javax::swing::MutableComboBoxModel> = ::javax_swing / "MutableComboBoxModel";
namespace javax::swing { class OverlayLayout; }
template<> constexpr auto signature<::javax::swing::OverlayLayout> = ::javax_swing / "OverlayLayout";
namespace javax::swing { class Painter; }
template<> constexpr auto signature<::javax::swing::Painter> = ::javax_swing / "Painter";
namespace javax::swing { class Popup; }
template<> constexpr auto signature<::javax::swing::Popup> = ::javax_swing / "Popup";
namespace javax::swing { class Popup$DefaultFrame; }
template<> constexpr auto signature<::javax::swing::Popup$DefaultFrame> = ::javax_swing / "Popup$DefaultFrame";
namespace javax::swing { class Popup$HeavyWeightWindow; }
template<> constexpr auto signature<::javax::swing::Popup$HeavyWeightWindow> = ::javax_swing / "Popup$HeavyWeightWindow";
namespace javax::swing { class PopupFactory; }
template<> constexpr auto signature<::javax::swing::PopupFactory> = ::javax_swing / "PopupFactory";
namespace javax::swing { class PopupFactory$1; }
template<> constexpr auto signature<::javax::swing::PopupFactory$1> = ::javax_swing / "PopupFactory$1";
namespace javax::swing { class PopupFactory$ContainerPopup; }
template<> constexpr auto signature<::javax::swing::PopupFactory$ContainerPopup> = ::javax_swing / "PopupFactory$ContainerPopup";
namespace javax::swing { class PopupFactory$HeadlessPopup; }
template<> constexpr auto signature<::javax::swing::PopupFactory$HeadlessPopup> = ::javax_swing / "PopupFactory$HeadlessPopup";
namespace javax::swing { class PopupFactory$HeavyWeightPopup; }
template<> constexpr auto signature<::javax::swing::PopupFactory$HeavyWeightPopup> = ::javax_swing / "PopupFactory$HeavyWeightPopup";
namespace javax::swing { class PopupFactory$HeavyWeightPopup$1; }
template<> constexpr auto signature<::javax::swing::PopupFactory$HeavyWeightPopup$1> = ::javax_swing / "PopupFactory$HeavyWeightPopup$1";
namespace javax::swing { class PopupFactory$LightWeightPopup; }
template<> constexpr auto signature<::javax::swing::PopupFactory$LightWeightPopup> = ::javax_swing / "PopupFactory$LightWeightPopup";
namespace javax::swing { class PopupFactory$MediumWeightPopup; }
template<> constexpr auto signature<::javax::swing::PopupFactory$MediumWeightPopup> = ::javax_swing / "PopupFactory$MediumWeightPopup";
namespace javax::swing { class PopupFactory$MediumWeightPopup$MediumWeightComponent; }
template<> constexpr auto signature<::javax::swing::PopupFactory$MediumWeightPopup$MediumWeightComponent> = ::javax_swing / "PopupFactory$MediumWeightPopup$MediumWeightComponent";
namespace javax::swing { class ProgressMonitor; }
template<> constexpr auto signature<::javax::swing::ProgressMonitor> = ::javax_swing / "ProgressMonitor";
namespace javax::swing { class ProgressMonitor$AccessibleProgressMonitor; }
template<> constexpr auto signature<::javax::swing::ProgressMonitor$AccessibleProgressMonitor> = ::javax_swing / "ProgressMonitor$AccessibleProgressMonitor";
namespace javax::swing { class ProgressMonitor$ProgressOptionPane; }
template<> constexpr auto signature<::javax::swing::ProgressMonitor$ProgressOptionPane> = ::javax_swing / "ProgressMonitor$ProgressOptionPane";
namespace javax::swing { class ProgressMonitor$ProgressOptionPane$1; }
template<> constexpr auto signature<::javax::swing::ProgressMonitor$ProgressOptionPane$1> = ::javax_swing / "ProgressMonitor$ProgressOptionPane$1";
namespace javax::swing { class ProgressMonitor$ProgressOptionPane$2; }
template<> constexpr auto signature<::javax::swing::ProgressMonitor$ProgressOptionPane$2> = ::javax_swing / "ProgressMonitor$ProgressOptionPane$2";
namespace javax::swing { class ProgressMonitorInputStream; }
template<> constexpr auto signature<::javax::swing::ProgressMonitorInputStream> = ::javax_swing / "ProgressMonitorInputStream";
namespace javax::swing { class Renderer; }
template<> constexpr auto signature<::javax::swing::Renderer> = ::javax_swing / "Renderer";
namespace javax::swing { class RepaintManager; }
template<> constexpr auto signature<::javax::swing::RepaintManager> = ::javax_swing / "RepaintManager";
namespace javax::swing { class RepaintManager$1; }
template<> constexpr auto signature<::javax::swing::RepaintManager$1> = ::javax_swing / "RepaintManager$1";
namespace javax::swing { class RepaintManager$2; }
template<> constexpr auto signature<::javax::swing::RepaintManager$2> = ::javax_swing / "RepaintManager$2";
namespace javax::swing { class RepaintManager$2$1; }
template<> constexpr auto signature<::javax::swing::RepaintManager$2$1> = ::javax_swing / "RepaintManager$2$1";
namespace javax::swing { class RepaintManager$3; }
template<> constexpr auto signature<::javax::swing::RepaintManager$3> = ::javax_swing / "RepaintManager$3";
namespace javax::swing { class RepaintManager$4; }
template<> constexpr auto signature<::javax::swing::RepaintManager$4> = ::javax_swing / "RepaintManager$4";
namespace javax::swing { class RepaintManager$DisplayChangedHandler; }
template<> constexpr auto signature<::javax::swing::RepaintManager$DisplayChangedHandler> = ::javax_swing / "RepaintManager$DisplayChangedHandler";
namespace javax::swing { class RepaintManager$DisplayChangedRunnable; }
template<> constexpr auto signature<::javax::swing::RepaintManager$DisplayChangedRunnable> = ::javax_swing / "RepaintManager$DisplayChangedRunnable";
namespace javax::swing { class RepaintManager$DoubleBufferInfo; }
template<> constexpr auto signature<::javax::swing::RepaintManager$DoubleBufferInfo> = ::javax_swing / "RepaintManager$DoubleBufferInfo";
namespace javax::swing { class RepaintManager$PaintManager; }
template<> constexpr auto signature<::javax::swing::RepaintManager$PaintManager> = ::javax_swing / "RepaintManager$PaintManager";
namespace javax::swing { class RepaintManager$ProcessingRunnable; }
template<> constexpr auto signature<::javax::swing::RepaintManager$ProcessingRunnable> = ::javax_swing / "RepaintManager$ProcessingRunnable";
namespace javax::swing { class RootPaneContainer; }
template<> constexpr auto signature<::javax::swing::RootPaneContainer> = ::javax_swing / "RootPaneContainer";
namespace javax::swing { class RowFilter; }
template<> constexpr auto signature<::javax::swing::RowFilter> = ::javax_swing / "RowFilter";
namespace javax::swing { class RowFilter$1; }
template<> constexpr auto signature<::javax::swing::RowFilter$1> = ::javax_swing / "RowFilter$1";
namespace javax::swing { class RowFilter$AndFilter; }
template<> constexpr auto signature<::javax::swing::RowFilter$AndFilter> = ::javax_swing / "RowFilter$AndFilter";
namespace javax::swing { class RowFilter$ComparisonType; }
template<> constexpr auto signature<::javax::swing::RowFilter$ComparisonType> = ::javax_swing / "RowFilter$ComparisonType";
namespace javax::swing { class RowFilter$DateFilter; }
template<> constexpr auto signature<::javax::swing::RowFilter$DateFilter> = ::javax_swing / "RowFilter$DateFilter";
namespace javax::swing { class RowFilter$Entry; }
template<> constexpr auto signature<::javax::swing::RowFilter$Entry> = ::javax_swing / "RowFilter$Entry";
namespace javax::swing { class RowFilter$GeneralFilter; }
template<> constexpr auto signature<::javax::swing::RowFilter$GeneralFilter> = ::javax_swing / "RowFilter$GeneralFilter";
namespace javax::swing { class RowFilter$NotFilter; }
template<> constexpr auto signature<::javax::swing::RowFilter$NotFilter> = ::javax_swing / "RowFilter$NotFilter";
namespace javax::swing { class RowFilter$NumberFilter; }
template<> constexpr auto signature<::javax::swing::RowFilter$NumberFilter> = ::javax_swing / "RowFilter$NumberFilter";
namespace javax::swing { class RowFilter$OrFilter; }
template<> constexpr auto signature<::javax::swing::RowFilter$OrFilter> = ::javax_swing / "RowFilter$OrFilter";
namespace javax::swing { class RowFilter$RegexFilter; }
template<> constexpr auto signature<::javax::swing::RowFilter$RegexFilter> = ::javax_swing / "RowFilter$RegexFilter";
namespace javax::swing { class RowSorter; }
template<> constexpr auto signature<::javax::swing::RowSorter> = ::javax_swing / "RowSorter";
namespace javax::swing { class RowSorter$SortKey; }
template<> constexpr auto signature<::javax::swing::RowSorter$SortKey> = ::javax_swing / "RowSorter$SortKey";
namespace javax::swing { class ScrollPaneConstants; }
template<> constexpr auto signature<::javax::swing::ScrollPaneConstants> = ::javax_swing / "ScrollPaneConstants";
namespace javax::swing { class ScrollPaneLayout; }
template<> constexpr auto signature<::javax::swing::ScrollPaneLayout> = ::javax_swing / "ScrollPaneLayout";
namespace javax::swing { class ScrollPaneLayout$UIResource; }
template<> constexpr auto signature<::javax::swing::ScrollPaneLayout$UIResource> = ::javax_swing / "ScrollPaneLayout$UIResource";
namespace javax::swing { class Scrollable; }
template<> constexpr auto signature<::javax::swing::Scrollable> = ::javax_swing / "Scrollable";
namespace javax::swing { class SingleSelectionModel; }
template<> constexpr auto signature<::javax::swing::SingleSelectionModel> = ::javax_swing / "SingleSelectionModel";
namespace javax::swing { class SizeRequirements; }
template<> constexpr auto signature<::javax::swing::SizeRequirements> = ::javax_swing / "SizeRequirements";
namespace javax::swing { class SizeSequence; }
template<> constexpr auto signature<::javax::swing::SizeSequence> = ::javax_swing / "SizeSequence";
namespace javax::swing { class SortOrder; }
template<> constexpr auto signature<::javax::swing::SortOrder> = ::javax_swing / "SortOrder";
namespace javax::swing { class SortingFocusTraversalPolicy; }
template<> constexpr auto signature<::javax::swing::SortingFocusTraversalPolicy> = ::javax_swing / "SortingFocusTraversalPolicy";
namespace javax::swing { class SortingFocusTraversalPolicy$1; }
template<> constexpr auto signature<::javax::swing::SortingFocusTraversalPolicy$1> = ::javax_swing / "SortingFocusTraversalPolicy$1";
namespace javax::swing { class SpinnerDateModel; }
template<> constexpr auto signature<::javax::swing::SpinnerDateModel> = ::javax_swing / "SpinnerDateModel";
namespace javax::swing { class SpinnerListModel; }
template<> constexpr auto signature<::javax::swing::SpinnerListModel> = ::javax_swing / "SpinnerListModel";
namespace javax::swing { class SpinnerModel; }
template<> constexpr auto signature<::javax::swing::SpinnerModel> = ::javax_swing / "SpinnerModel";
namespace javax::swing { class SpinnerNumberModel; }
template<> constexpr auto signature<::javax::swing::SpinnerNumberModel> = ::javax_swing / "SpinnerNumberModel";
namespace javax::swing { class Spring; }
template<> constexpr auto signature<::javax::swing::Spring> = ::javax_swing / "Spring";
namespace javax::swing { class Spring$1; }
template<> constexpr auto signature<::javax::swing::Spring$1> = ::javax_swing / "Spring$1";
namespace javax::swing { class Spring$AbstractSpring; }
template<> constexpr auto signature<::javax::swing::Spring$AbstractSpring> = ::javax_swing / "Spring$AbstractSpring";
namespace javax::swing { class Spring$CompoundSpring; }
template<> constexpr auto signature<::javax::swing::Spring$CompoundSpring> = ::javax_swing / "Spring$CompoundSpring";
namespace javax::swing { class Spring$HeightSpring; }
template<> constexpr auto signature<::javax::swing::Spring$HeightSpring> = ::javax_swing / "Spring$HeightSpring";
namespace javax::swing { class Spring$MaxSpring; }
template<> constexpr auto signature<::javax::swing::Spring$MaxSpring> = ::javax_swing / "Spring$MaxSpring";
namespace javax::swing { class Spring$NegativeSpring; }
template<> constexpr auto signature<::javax::swing::Spring$NegativeSpring> = ::javax_swing / "Spring$NegativeSpring";
namespace javax::swing { class Spring$ScaleSpring; }
template<> constexpr auto signature<::javax::swing::Spring$ScaleSpring> = ::javax_swing / "Spring$ScaleSpring";
namespace javax::swing { class Spring$SpringMap; }
template<> constexpr auto signature<::javax::swing::Spring$SpringMap> = ::javax_swing / "Spring$SpringMap";
namespace javax::swing { class Spring$StaticSpring; }
template<> constexpr auto signature<::javax::swing::Spring$StaticSpring> = ::javax_swing / "Spring$StaticSpring";
namespace javax::swing { class Spring$SumSpring; }
template<> constexpr auto signature<::javax::swing::Spring$SumSpring> = ::javax_swing / "Spring$SumSpring";
namespace javax::swing { class Spring$WidthSpring; }
template<> constexpr auto signature<::javax::swing::Spring$WidthSpring> = ::javax_swing / "Spring$WidthSpring";
namespace javax::swing { class SpringLayout; }
template<> constexpr auto signature<::javax::swing::SpringLayout> = ::javax_swing / "SpringLayout";
namespace javax::swing { class SpringLayout$1; }
template<> constexpr auto signature<::javax::swing::SpringLayout$1> = ::javax_swing / "SpringLayout$1";
namespace javax::swing { class SpringLayout$Constraints; }
template<> constexpr auto signature<::javax::swing::SpringLayout$Constraints> = ::javax_swing / "SpringLayout$Constraints";
namespace javax::swing { class SpringLayout$Constraints$1; }
template<> constexpr auto signature<::javax::swing::SpringLayout$Constraints$1> = ::javax_swing / "SpringLayout$Constraints$1";
namespace javax::swing { class SpringLayout$Constraints$2; }
template<> constexpr auto signature<::javax::swing::SpringLayout$Constraints$2> = ::javax_swing / "SpringLayout$Constraints$2";
namespace javax::swing { class SpringLayout$SpringProxy; }
template<> constexpr auto signature<::javax::swing::SpringLayout$SpringProxy> = ::javax_swing / "SpringLayout$SpringProxy";
namespace javax::swing { class SwingConstants; }
template<> constexpr auto signature<::javax::swing::SwingConstants> = ::javax_swing / "SwingConstants";
namespace javax::swing { class SwingContainerOrderFocusTraversalPolicy; }
template<> constexpr auto signature<::javax::swing::SwingContainerOrderFocusTraversalPolicy> = ::javax_swing / "SwingContainerOrderFocusTraversalPolicy";
namespace javax::swing { class SwingDefaultFocusTraversalPolicy; }
template<> constexpr auto signature<::javax::swing::SwingDefaultFocusTraversalPolicy> = ::javax_swing / "SwingDefaultFocusTraversalPolicy";
namespace javax::swing { class SwingHeavyWeight; }
template<> constexpr auto signature<::javax::swing::SwingHeavyWeight> = ::javax_swing / "SwingHeavyWeight";
namespace javax::swing { class SwingPaintEventDispatcher; }
template<> constexpr auto signature<::javax::swing::SwingPaintEventDispatcher> = ::javax_swing / "SwingPaintEventDispatcher";
namespace javax::swing { class SwingUtilities; }
template<> constexpr auto signature<::javax::swing::SwingUtilities> = ::javax_swing / "SwingUtilities";
namespace javax::swing { class SwingUtilities$SharedOwnerFrame; }
template<> constexpr auto signature<::javax::swing::SwingUtilities$SharedOwnerFrame> = ::javax_swing / "SwingUtilities$SharedOwnerFrame";
namespace javax::swing { class SwingWorker; }
template<> constexpr auto signature<::javax::swing::SwingWorker> = ::javax_swing / "SwingWorker";
namespace javax::swing { class SwingWorker$1; }
template<> constexpr auto signature<::javax::swing::SwingWorker$1> = ::javax_swing / "SwingWorker$1";
namespace javax::swing { class SwingWorker$2; }
template<> constexpr auto signature<::javax::swing::SwingWorker$2> = ::javax_swing / "SwingWorker$2";
namespace javax::swing { class SwingWorker$3; }
template<> constexpr auto signature<::javax::swing::SwingWorker$3> = ::javax_swing / "SwingWorker$3";
namespace javax::swing { class SwingWorker$4; }
template<> constexpr auto signature<::javax::swing::SwingWorker$4> = ::javax_swing / "SwingWorker$4";
namespace javax::swing { class SwingWorker$5; }
template<> constexpr auto signature<::javax::swing::SwingWorker$5> = ::javax_swing / "SwingWorker$5";
namespace javax::swing { class SwingWorker$6; }
template<> constexpr auto signature<::javax::swing::SwingWorker$6> = ::javax_swing / "SwingWorker$6";
namespace javax::swing { class SwingWorker$7; }
template<> constexpr auto signature<::javax::swing::SwingWorker$7> = ::javax_swing / "SwingWorker$7";
namespace javax::swing { class SwingWorker$7$1; }
template<> constexpr auto signature<::javax::swing::SwingWorker$7$1> = ::javax_swing / "SwingWorker$7$1";
namespace javax::swing { class SwingWorker$DoSubmitAccumulativeRunnable; }
template<> constexpr auto signature<::javax::swing::SwingWorker$DoSubmitAccumulativeRunnable> = ::javax_swing / "SwingWorker$DoSubmitAccumulativeRunnable";
namespace javax::swing { class SwingWorker$StateValue; }
template<> constexpr auto signature<::javax::swing::SwingWorker$StateValue> = ::javax_swing / "SwingWorker$StateValue";
namespace javax::swing { class SwingWorker$SwingWorkerPropertyChangeSupport; }
template<> constexpr auto signature<::javax::swing::SwingWorker$SwingWorkerPropertyChangeSupport> = ::javax_swing / "SwingWorker$SwingWorkerPropertyChangeSupport";
namespace javax::swing { class SwingWorker$SwingWorkerPropertyChangeSupport$1; }
template<> constexpr auto signature<::javax::swing::SwingWorker$SwingWorkerPropertyChangeSupport$1> = ::javax_swing / "SwingWorker$SwingWorkerPropertyChangeSupport$1";
namespace javax::swing { class TablePrintable; }
template<> constexpr auto signature<::javax::swing::TablePrintable> = ::javax_swing / "TablePrintable";
namespace javax::swing { class Timer; }
template<> constexpr auto signature<::javax::swing::Timer> = ::javax_swing / "Timer";
namespace javax::swing { class Timer$1; }
template<> constexpr auto signature<::javax::swing::Timer$1> = ::javax_swing / "Timer$1";
namespace javax::swing { class Timer$DoPostEvent; }
template<> constexpr auto signature<::javax::swing::Timer$DoPostEvent> = ::javax_swing / "Timer$DoPostEvent";
namespace javax::swing { class TimerQueue; }
template<> constexpr auto signature<::javax::swing::TimerQueue> = ::javax_swing / "TimerQueue";
namespace javax::swing { class TimerQueue$1; }
template<> constexpr auto signature<::javax::swing::TimerQueue$1> = ::javax_swing / "TimerQueue$1";
namespace javax::swing { class TimerQueue$DelayedTimer; }
template<> constexpr auto signature<::javax::swing::TimerQueue$DelayedTimer> = ::javax_swing / "TimerQueue$DelayedTimer";
namespace javax::swing { class ToolTipManager; }
template<> constexpr auto signature<::javax::swing::ToolTipManager> = ::javax_swing / "ToolTipManager";
namespace javax::swing { class ToolTipManager$1; }
template<> constexpr auto signature<::javax::swing::ToolTipManager$1> = ::javax_swing / "ToolTipManager$1";
namespace javax::swing { class ToolTipManager$AccessibilityKeyListener; }
template<> constexpr auto signature<::javax::swing::ToolTipManager$AccessibilityKeyListener> = ::javax_swing / "ToolTipManager$AccessibilityKeyListener";
namespace javax::swing { class ToolTipManager$MoveBeforeEnterListener; }
template<> constexpr auto signature<::javax::swing::ToolTipManager$MoveBeforeEnterListener> = ::javax_swing / "ToolTipManager$MoveBeforeEnterListener";
namespace javax::swing { class ToolTipManager$insideTimerAction; }
template<> constexpr auto signature<::javax::swing::ToolTipManager$insideTimerAction> = ::javax_swing / "ToolTipManager$insideTimerAction";
namespace javax::swing { class ToolTipManager$outsideTimerAction; }
template<> constexpr auto signature<::javax::swing::ToolTipManager$outsideTimerAction> = ::javax_swing / "ToolTipManager$outsideTimerAction";
namespace javax::swing { class ToolTipManager$stillInsideTimerAction; }
template<> constexpr auto signature<::javax::swing::ToolTipManager$stillInsideTimerAction> = ::javax_swing / "ToolTipManager$stillInsideTimerAction";
namespace javax::swing { class TransferHandler; }
template<> constexpr auto signature<::javax::swing::TransferHandler> = ::javax_swing / "TransferHandler";
namespace javax::swing { class TransferHandler$1; }
template<> constexpr auto signature<::javax::swing::TransferHandler$1> = ::javax_swing / "TransferHandler$1";
namespace javax::swing { class TransferHandler$DragHandler; }
template<> constexpr auto signature<::javax::swing::TransferHandler$DragHandler> = ::javax_swing / "TransferHandler$DragHandler";
namespace javax::swing { class TransferHandler$DropHandler; }
template<> constexpr auto signature<::javax::swing::TransferHandler$DropHandler> = ::javax_swing / "TransferHandler$DropHandler";
namespace javax::swing { class TransferHandler$DropLocation; }
template<> constexpr auto signature<::javax::swing::TransferHandler$DropLocation> = ::javax_swing / "TransferHandler$DropLocation";
namespace javax::swing { class TransferHandler$HasGetTransferHandler; }
template<> constexpr auto signature<::javax::swing::TransferHandler$HasGetTransferHandler> = ::javax_swing / "TransferHandler$HasGetTransferHandler";
namespace javax::swing { class TransferHandler$PropertyTransferable; }
template<> constexpr auto signature<::javax::swing::TransferHandler$PropertyTransferable> = ::javax_swing / "TransferHandler$PropertyTransferable";
namespace javax::swing { class TransferHandler$SwingDragGestureRecognizer; }
template<> constexpr auto signature<::javax::swing::TransferHandler$SwingDragGestureRecognizer> = ::javax_swing / "TransferHandler$SwingDragGestureRecognizer";
namespace javax::swing { class TransferHandler$SwingDropTarget; }
template<> constexpr auto signature<::javax::swing::TransferHandler$SwingDropTarget> = ::javax_swing / "TransferHandler$SwingDropTarget";
namespace javax::swing { class TransferHandler$TransferAction; }
template<> constexpr auto signature<::javax::swing::TransferHandler$TransferAction> = ::javax_swing / "TransferHandler$TransferAction";
namespace javax::swing { class TransferHandler$TransferAction$1; }
template<> constexpr auto signature<::javax::swing::TransferHandler$TransferAction$1> = ::javax_swing / "TransferHandler$TransferAction$1";
namespace javax::swing { class TransferHandler$TransferAction$2; }
template<> constexpr auto signature<::javax::swing::TransferHandler$TransferAction$2> = ::javax_swing / "TransferHandler$TransferAction$2";
namespace javax::swing { class TransferHandler$TransferSupport; }
template<> constexpr auto signature<::javax::swing::TransferHandler$TransferSupport> = ::javax_swing / "TransferHandler$TransferSupport";
namespace javax::swing { class UIDefaults; }
template<> constexpr auto signature<::javax::swing::UIDefaults> = ::javax_swing / "UIDefaults";
namespace javax::swing { class UIDefaults$1; }
template<> constexpr auto signature<::javax::swing::UIDefaults$1> = ::javax_swing / "UIDefaults$1";
namespace javax::swing { class UIDefaults$ActiveValue; }
template<> constexpr auto signature<::javax::swing::UIDefaults$ActiveValue> = ::javax_swing / "UIDefaults$ActiveValue";
namespace javax::swing { class UIDefaults$LazyInputMap; }
template<> constexpr auto signature<::javax::swing::UIDefaults$LazyInputMap> = ::javax_swing / "UIDefaults$LazyInputMap";
namespace javax::swing { class UIDefaults$LazyValue; }
template<> constexpr auto signature<::javax::swing::UIDefaults$LazyValue> = ::javax_swing / "UIDefaults$LazyValue";
namespace javax::swing { class UIDefaults$ProxyLazyValue; }
template<> constexpr auto signature<::javax::swing::UIDefaults$ProxyLazyValue> = ::javax_swing / "UIDefaults$ProxyLazyValue";
namespace javax::swing { class UIDefaults$ProxyLazyValue$1; }
template<> constexpr auto signature<::javax::swing::UIDefaults$ProxyLazyValue$1> = ::javax_swing / "UIDefaults$ProxyLazyValue$1";
namespace javax::swing { class UIDefaults$TextAndMnemonicHashMap; }
template<> constexpr auto signature<::javax::swing::UIDefaults$TextAndMnemonicHashMap> = ::javax_swing / "UIDefaults$TextAndMnemonicHashMap";
namespace javax::swing { class UIManager; }
template<> constexpr auto signature<::javax::swing::UIManager> = ::javax_swing / "UIManager";
namespace javax::swing { class UIManager$1; }
template<> constexpr auto signature<::javax::swing::UIManager$1> = ::javax_swing / "UIManager$1";
namespace javax::swing { class UIManager$2; }
template<> constexpr auto signature<::javax::swing::UIManager$2> = ::javax_swing / "UIManager$2";
namespace javax::swing { class UIManager$LAFState; }
template<> constexpr auto signature<::javax::swing::UIManager$LAFState> = ::javax_swing / "UIManager$LAFState";
namespace javax::swing { class UIManager$LookAndFeelInfo; }
template<> constexpr auto signature<::javax::swing::UIManager$LookAndFeelInfo> = ::javax_swing / "UIManager$LookAndFeelInfo";
namespace javax::swing { class UnsupportedLookAndFeelException; }
template<> constexpr auto signature<::javax::swing::UnsupportedLookAndFeelException> = ::javax_swing / "UnsupportedLookAndFeelException";
namespace javax::swing { class ViewportLayout; }
template<> constexpr auto signature<::javax::swing::ViewportLayout> = ::javax_swing / "ViewportLayout";
namespace javax::swing { class WindowConstants; }
template<> constexpr auto signature<::javax::swing::WindowConstants> = ::javax_swing / "WindowConstants";
namespace javax::swing::border { class AbstractBorder; }
template<> constexpr auto signature<::javax::swing::border::AbstractBorder> = ::javax_swing_border / "AbstractBorder";
namespace javax::swing::border { class BevelBorder; }
template<> constexpr auto signature<::javax::swing::border::BevelBorder> = ::javax_swing_border / "BevelBorder";
namespace javax::swing::border { class Border; }
template<> constexpr auto signature<::javax::swing::border::Border> = ::javax_swing_border / "Border";
namespace javax::swing::border { class CompoundBorder; }
template<> constexpr auto signature<::javax::swing::border::CompoundBorder> = ::javax_swing_border / "CompoundBorder";
namespace javax::swing::border { class EmptyBorder; }
template<> constexpr auto signature<::javax::swing::border::EmptyBorder> = ::javax_swing_border / "EmptyBorder";
namespace javax::swing::border { class EtchedBorder; }
template<> constexpr auto signature<::javax::swing::border::EtchedBorder> = ::javax_swing_border / "EtchedBorder";
namespace javax::swing::border { class LineBorder; }
template<> constexpr auto signature<::javax::swing::border::LineBorder> = ::javax_swing_border / "LineBorder";
namespace javax::swing::border { class MatteBorder; }
template<> constexpr auto signature<::javax::swing::border::MatteBorder> = ::javax_swing_border / "MatteBorder";
namespace javax::swing::border { class SoftBevelBorder; }
template<> constexpr auto signature<::javax::swing::border::SoftBevelBorder> = ::javax_swing_border / "SoftBevelBorder";
namespace javax::swing::border { class StrokeBorder; }
template<> constexpr auto signature<::javax::swing::border::StrokeBorder> = ::javax_swing_border / "StrokeBorder";
namespace javax::swing::border { class TitledBorder; }
template<> constexpr auto signature<::javax::swing::border::TitledBorder> = ::javax_swing_border / "TitledBorder";
namespace javax::swing::colorchooser { class AbstractColorChooserPanel; }
template<> constexpr auto signature<::javax::swing::colorchooser::AbstractColorChooserPanel> = ::javax_swing_colorchooser / "AbstractColorChooserPanel";
namespace javax::swing::colorchooser { class AbstractColorChooserPanel$1; }
template<> constexpr auto signature<::javax::swing::colorchooser::AbstractColorChooserPanel$1> = ::javax_swing_colorchooser / "AbstractColorChooserPanel$1";
namespace javax::swing::colorchooser { class CenterLayout; }
template<> constexpr auto signature<::javax::swing::colorchooser::CenterLayout> = ::javax_swing_colorchooser / "CenterLayout";
namespace javax::swing::colorchooser { class ColorChooserComponentFactory; }
template<> constexpr auto signature<::javax::swing::colorchooser::ColorChooserComponentFactory> = ::javax_swing_colorchooser / "ColorChooserComponentFactory";
namespace javax::swing::colorchooser { class ColorChooserPanel; }
template<> constexpr auto signature<::javax::swing::colorchooser::ColorChooserPanel> = ::javax_swing_colorchooser / "ColorChooserPanel";
namespace javax::swing::colorchooser { class ColorModel; }
template<> constexpr auto signature<::javax::swing::colorchooser::ColorModel> = ::javax_swing_colorchooser / "ColorModel";
namespace javax::swing::colorchooser { class ColorModelCMYK; }
template<> constexpr auto signature<::javax::swing::colorchooser::ColorModelCMYK> = ::javax_swing_colorchooser / "ColorModelCMYK";
namespace javax::swing::colorchooser { class ColorModelHSL; }
template<> constexpr auto signature<::javax::swing::colorchooser::ColorModelHSL> = ::javax_swing_colorchooser / "ColorModelHSL";
namespace javax::swing::colorchooser { class ColorModelHSV; }
template<> constexpr auto signature<::javax::swing::colorchooser::ColorModelHSV> = ::javax_swing_colorchooser / "ColorModelHSV";
namespace javax::swing::colorchooser { class ColorPanel; }
template<> constexpr auto signature<::javax::swing::colorchooser::ColorPanel> = ::javax_swing_colorchooser / "ColorPanel";
namespace javax::swing::colorchooser { class ColorSelectionModel; }
template<> constexpr auto signature<::javax::swing::colorchooser::ColorSelectionModel> = ::javax_swing_colorchooser / "ColorSelectionModel";
namespace javax::swing::colorchooser { class DefaultColorSelectionModel; }
template<> constexpr auto signature<::javax::swing::colorchooser::DefaultColorSelectionModel> = ::javax_swing_colorchooser / "DefaultColorSelectionModel";
namespace javax::swing::colorchooser { class DefaultPreviewPanel; }
template<> constexpr auto signature<::javax::swing::colorchooser::DefaultPreviewPanel> = ::javax_swing_colorchooser / "DefaultPreviewPanel";
namespace javax::swing::colorchooser { class DefaultSwatchChooserPanel; }
template<> constexpr auto signature<::javax::swing::colorchooser::DefaultSwatchChooserPanel> = ::javax_swing_colorchooser / "DefaultSwatchChooserPanel";
namespace javax::swing::colorchooser { class DefaultSwatchChooserPanel$1; }
template<> constexpr auto signature<::javax::swing::colorchooser::DefaultSwatchChooserPanel$1> = ::javax_swing_colorchooser / "DefaultSwatchChooserPanel$1";
namespace javax::swing::colorchooser { class DefaultSwatchChooserPanel$MainSwatchKeyListener; }
template<> constexpr auto signature<::javax::swing::colorchooser::DefaultSwatchChooserPanel$MainSwatchKeyListener> = ::javax_swing_colorchooser / "DefaultSwatchChooserPanel$MainSwatchKeyListener";
namespace javax::swing::colorchooser { class DefaultSwatchChooserPanel$MainSwatchListener; }
template<> constexpr auto signature<::javax::swing::colorchooser::DefaultSwatchChooserPanel$MainSwatchListener> = ::javax_swing_colorchooser / "DefaultSwatchChooserPanel$MainSwatchListener";
namespace javax::swing::colorchooser { class DefaultSwatchChooserPanel$RecentSwatchKeyListener; }
template<> constexpr auto signature<::javax::swing::colorchooser::DefaultSwatchChooserPanel$RecentSwatchKeyListener> = ::javax_swing_colorchooser / "DefaultSwatchChooserPanel$RecentSwatchKeyListener";
namespace javax::swing::colorchooser { class DefaultSwatchChooserPanel$RecentSwatchListener; }
template<> constexpr auto signature<::javax::swing::colorchooser::DefaultSwatchChooserPanel$RecentSwatchListener> = ::javax_swing_colorchooser / "DefaultSwatchChooserPanel$RecentSwatchListener";
namespace javax::swing::colorchooser { class DiagramComponent; }
template<> constexpr auto signature<::javax::swing::colorchooser::DiagramComponent> = ::javax_swing_colorchooser / "DiagramComponent";
namespace javax::swing::colorchooser { class MainSwatchPanel; }
template<> constexpr auto signature<::javax::swing::colorchooser::MainSwatchPanel> = ::javax_swing_colorchooser / "MainSwatchPanel";
namespace javax::swing::colorchooser { class RecentSwatchPanel; }
template<> constexpr auto signature<::javax::swing::colorchooser::RecentSwatchPanel> = ::javax_swing_colorchooser / "RecentSwatchPanel";
namespace javax::swing::colorchooser { class SlidingSpinner; }
template<> constexpr auto signature<::javax::swing::colorchooser::SlidingSpinner> = ::javax_swing_colorchooser / "SlidingSpinner";
namespace javax::swing::colorchooser { class SmartGridLayout; }
template<> constexpr auto signature<::javax::swing::colorchooser::SmartGridLayout> = ::javax_swing_colorchooser / "SmartGridLayout";
namespace javax::swing::colorchooser { class SwatchPanel; }
template<> constexpr auto signature<::javax::swing::colorchooser::SwatchPanel> = ::javax_swing_colorchooser / "SwatchPanel";
namespace javax::swing::colorchooser { class SwatchPanel$1; }
template<> constexpr auto signature<::javax::swing::colorchooser::SwatchPanel$1> = ::javax_swing_colorchooser / "SwatchPanel$1";
namespace javax::swing::colorchooser { class SwatchPanel$2; }
template<> constexpr auto signature<::javax::swing::colorchooser::SwatchPanel$2> = ::javax_swing_colorchooser / "SwatchPanel$2";
namespace javax::swing::colorchooser { class ValueFormatter; }
template<> constexpr auto signature<::javax::swing::colorchooser::ValueFormatter> = ::javax_swing_colorchooser / "ValueFormatter";
namespace javax::swing::colorchooser { class ValueFormatter$1; }
template<> constexpr auto signature<::javax::swing::colorchooser::ValueFormatter$1> = ::javax_swing_colorchooser / "ValueFormatter$1";
namespace javax::swing::event { class AncestorEvent; }
template<> constexpr auto signature<::javax::swing::event::AncestorEvent> = ::javax_swing_event / "AncestorEvent";
namespace javax::swing::event { class AncestorListener; }
template<> constexpr auto signature<::javax::swing::event::AncestorListener> = ::javax_swing_event / "AncestorListener";
namespace javax::swing::event { class CaretEvent; }
template<> constexpr auto signature<::javax::swing::event::CaretEvent> = ::javax_swing_event / "CaretEvent";
namespace javax::swing::event { class CaretListener; }
template<> constexpr auto signature<::javax::swing::event::CaretListener> = ::javax_swing_event / "CaretListener";
namespace javax::swing::event { class CellEditorListener; }
template<> constexpr auto signature<::javax::swing::event::CellEditorListener> = ::javax_swing_event / "CellEditorListener";
namespace javax::swing::event { class ChangeEvent; }
template<> constexpr auto signature<::javax::swing::event::ChangeEvent> = ::javax_swing_event / "ChangeEvent";
namespace javax::swing::event { class ChangeListener; }
template<> constexpr auto signature<::javax::swing::event::ChangeListener> = ::javax_swing_event / "ChangeListener";
namespace javax::swing::event { class DocumentEvent; }
template<> constexpr auto signature<::javax::swing::event::DocumentEvent> = ::javax_swing_event / "DocumentEvent";
namespace javax::swing::event { class DocumentEvent$ElementChange; }
template<> constexpr auto signature<::javax::swing::event::DocumentEvent$ElementChange> = ::javax_swing_event / "DocumentEvent$ElementChange";
namespace javax::swing::event { class DocumentEvent$EventType; }
template<> constexpr auto signature<::javax::swing::event::DocumentEvent$EventType> = ::javax_swing_event / "DocumentEvent$EventType";
namespace javax::swing::event { class DocumentListener; }
template<> constexpr auto signature<::javax::swing::event::DocumentListener> = ::javax_swing_event / "DocumentListener";
namespace javax::swing::event { class EventListenerList; }
template<> constexpr auto signature<::javax::swing::event::EventListenerList> = ::javax_swing_event / "EventListenerList";
namespace javax::swing::event { class HyperlinkEvent; }
template<> constexpr auto signature<::javax::swing::event::HyperlinkEvent> = ::javax_swing_event / "HyperlinkEvent";
namespace javax::swing::event { class HyperlinkEvent$EventType; }
template<> constexpr auto signature<::javax::swing::event::HyperlinkEvent$EventType> = ::javax_swing_event / "HyperlinkEvent$EventType";
namespace javax::swing::event { class HyperlinkListener; }
template<> constexpr auto signature<::javax::swing::event::HyperlinkListener> = ::javax_swing_event / "HyperlinkListener";
namespace javax::swing::event { class InternalFrameAdapter; }
template<> constexpr auto signature<::javax::swing::event::InternalFrameAdapter> = ::javax_swing_event / "InternalFrameAdapter";
namespace javax::swing::event { class InternalFrameEvent; }
template<> constexpr auto signature<::javax::swing::event::InternalFrameEvent> = ::javax_swing_event / "InternalFrameEvent";
namespace javax::swing::event { class InternalFrameListener; }
template<> constexpr auto signature<::javax::swing::event::InternalFrameListener> = ::javax_swing_event / "InternalFrameListener";
namespace javax::swing::event { class ListDataEvent; }
template<> constexpr auto signature<::javax::swing::event::ListDataEvent> = ::javax_swing_event / "ListDataEvent";
namespace javax::swing::event { class ListDataListener; }
template<> constexpr auto signature<::javax::swing::event::ListDataListener> = ::javax_swing_event / "ListDataListener";
namespace javax::swing::event { class ListSelectionEvent; }
template<> constexpr auto signature<::javax::swing::event::ListSelectionEvent> = ::javax_swing_event / "ListSelectionEvent";
namespace javax::swing::event { class ListSelectionListener; }
template<> constexpr auto signature<::javax::swing::event::ListSelectionListener> = ::javax_swing_event / "ListSelectionListener";
namespace javax::swing::event { class MenuDragMouseEvent; }
template<> constexpr auto signature<::javax::swing::event::MenuDragMouseEvent> = ::javax_swing_event / "MenuDragMouseEvent";
namespace javax::swing::event { class MenuDragMouseListener; }
template<> constexpr auto signature<::javax::swing::event::MenuDragMouseListener> = ::javax_swing_event / "MenuDragMouseListener";
namespace javax::swing::event { class MenuEvent; }
template<> constexpr auto signature<::javax::swing::event::MenuEvent> = ::javax_swing_event / "MenuEvent";
namespace javax::swing::event { class MenuKeyEvent; }
template<> constexpr auto signature<::javax::swing::event::MenuKeyEvent> = ::javax_swing_event / "MenuKeyEvent";
namespace javax::swing::event { class MenuKeyListener; }
template<> constexpr auto signature<::javax::swing::event::MenuKeyListener> = ::javax_swing_event / "MenuKeyListener";
namespace javax::swing::event { class MenuListener; }
template<> constexpr auto signature<::javax::swing::event::MenuListener> = ::javax_swing_event / "MenuListener";
namespace javax::swing::event { class MouseInputAdapter; }
template<> constexpr auto signature<::javax::swing::event::MouseInputAdapter> = ::javax_swing_event / "MouseInputAdapter";
namespace javax::swing::event { class MouseInputListener; }
template<> constexpr auto signature<::javax::swing::event::MouseInputListener> = ::javax_swing_event / "MouseInputListener";
namespace javax::swing::event { class PopupMenuEvent; }
template<> constexpr auto signature<::javax::swing::event::PopupMenuEvent> = ::javax_swing_event / "PopupMenuEvent";
namespace javax::swing::event { class PopupMenuListener; }
template<> constexpr auto signature<::javax::swing::event::PopupMenuListener> = ::javax_swing_event / "PopupMenuListener";
namespace javax::swing::event { class RowSorterEvent; }
template<> constexpr auto signature<::javax::swing::event::RowSorterEvent> = ::javax_swing_event / "RowSorterEvent";
namespace javax::swing::event { class RowSorterEvent$Type; }
template<> constexpr auto signature<::javax::swing::event::RowSorterEvent$Type> = ::javax_swing_event / "RowSorterEvent$Type";
namespace javax::swing::event { class RowSorterListener; }
template<> constexpr auto signature<::javax::swing::event::RowSorterListener> = ::javax_swing_event / "RowSorterListener";
namespace javax::swing::event { class SwingPropertyChangeSupport; }
template<> constexpr auto signature<::javax::swing::event::SwingPropertyChangeSupport> = ::javax_swing_event / "SwingPropertyChangeSupport";
namespace javax::swing::event { class SwingPropertyChangeSupport$1; }
template<> constexpr auto signature<::javax::swing::event::SwingPropertyChangeSupport$1> = ::javax_swing_event / "SwingPropertyChangeSupport$1";
namespace javax::swing::event { class TableColumnModelEvent; }
template<> constexpr auto signature<::javax::swing::event::TableColumnModelEvent> = ::javax_swing_event / "TableColumnModelEvent";
namespace javax::swing::event { class TableColumnModelListener; }
template<> constexpr auto signature<::javax::swing::event::TableColumnModelListener> = ::javax_swing_event / "TableColumnModelListener";
namespace javax::swing::event { class TableModelEvent; }
template<> constexpr auto signature<::javax::swing::event::TableModelEvent> = ::javax_swing_event / "TableModelEvent";
namespace javax::swing::event { class TableModelListener; }
template<> constexpr auto signature<::javax::swing::event::TableModelListener> = ::javax_swing_event / "TableModelListener";
namespace javax::swing::event { class TreeExpansionEvent; }
template<> constexpr auto signature<::javax::swing::event::TreeExpansionEvent> = ::javax_swing_event / "TreeExpansionEvent";
namespace javax::swing::event { class TreeExpansionListener; }
template<> constexpr auto signature<::javax::swing::event::TreeExpansionListener> = ::javax_swing_event / "TreeExpansionListener";
namespace javax::swing::event { class TreeModelEvent; }
template<> constexpr auto signature<::javax::swing::event::TreeModelEvent> = ::javax_swing_event / "TreeModelEvent";
namespace javax::swing::event { class TreeModelListener; }
template<> constexpr auto signature<::javax::swing::event::TreeModelListener> = ::javax_swing_event / "TreeModelListener";
namespace javax::swing::event { class TreeSelectionEvent; }
template<> constexpr auto signature<::javax::swing::event::TreeSelectionEvent> = ::javax_swing_event / "TreeSelectionEvent";
namespace javax::swing::event { class TreeSelectionListener; }
template<> constexpr auto signature<::javax::swing::event::TreeSelectionListener> = ::javax_swing_event / "TreeSelectionListener";
namespace javax::swing::event { class TreeWillExpandListener; }
template<> constexpr auto signature<::javax::swing::event::TreeWillExpandListener> = ::javax_swing_event / "TreeWillExpandListener";
namespace javax::swing::event { class UndoableEditEvent; }
template<> constexpr auto signature<::javax::swing::event::UndoableEditEvent> = ::javax_swing_event / "UndoableEditEvent";
namespace javax::swing::event { class UndoableEditListener; }
template<> constexpr auto signature<::javax::swing::event::UndoableEditListener> = ::javax_swing_event / "UndoableEditListener";
namespace javax::swing::filechooser { class FileFilter; }
template<> constexpr auto signature<::javax::swing::filechooser::FileFilter> = ::javax_swing_filechooser / "FileFilter";
namespace javax::swing::filechooser { class FileNameExtensionFilter; }
template<> constexpr auto signature<::javax::swing::filechooser::FileNameExtensionFilter> = ::javax_swing_filechooser / "FileNameExtensionFilter";
namespace javax::swing::filechooser { class FileSystemView; }
template<> constexpr auto signature<::javax::swing::filechooser::FileSystemView> = ::javax_swing_filechooser / "FileSystemView";
namespace javax::swing::filechooser { class FileSystemView$1; }
template<> constexpr auto signature<::javax::swing::filechooser::FileSystemView$1> = ::javax_swing_filechooser / "FileSystemView$1";
namespace javax::swing::filechooser { class FileSystemView$FileSystemRoot; }
template<> constexpr auto signature<::javax::swing::filechooser::FileSystemView$FileSystemRoot> = ::javax_swing_filechooser / "FileSystemView$FileSystemRoot";
namespace javax::swing::filechooser { class FileView; }
template<> constexpr auto signature<::javax::swing::filechooser::FileView> = ::javax_swing_filechooser / "FileView";
namespace javax::swing::filechooser { class GenericFileSystemView; }
template<> constexpr auto signature<::javax::swing::filechooser::GenericFileSystemView> = ::javax_swing_filechooser / "GenericFileSystemView";
namespace javax::swing::filechooser { class UnixFileSystemView; }
template<> constexpr auto signature<::javax::swing::filechooser::UnixFileSystemView> = ::javax_swing_filechooser / "UnixFileSystemView";
namespace javax::swing::filechooser { class WindowsFileSystemView; }
template<> constexpr auto signature<::javax::swing::filechooser::WindowsFileSystemView> = ::javax_swing_filechooser / "WindowsFileSystemView";
namespace javax::swing::filechooser { class WindowsFileSystemView$1; }
template<> constexpr auto signature<::javax::swing::filechooser::WindowsFileSystemView$1> = ::javax_swing_filechooser / "WindowsFileSystemView$1";
namespace javax::swing::filechooser { class WindowsFileSystemView$2; }
template<> constexpr auto signature<::javax::swing::filechooser::WindowsFileSystemView$2> = ::javax_swing_filechooser / "WindowsFileSystemView$2";
namespace javax::swing::plaf { class ActionMapUIResource; }
template<> constexpr auto signature<::javax::swing::plaf::ActionMapUIResource> = ::javax_swing_plaf / "ActionMapUIResource";
namespace javax::swing::plaf { class BorderUIResource; }
template<> constexpr auto signature<::javax::swing::plaf::BorderUIResource> = ::javax_swing_plaf / "BorderUIResource";
namespace javax::swing::plaf { class BorderUIResource$BevelBorderUIResource; }
template<> constexpr auto signature<::javax::swing::plaf::BorderUIResource$BevelBorderUIResource> = ::javax_swing_plaf / "BorderUIResource$BevelBorderUIResource";
namespace javax::swing::plaf { class BorderUIResource$CompoundBorderUIResource; }
template<> constexpr auto signature<::javax::swing::plaf::BorderUIResource$CompoundBorderUIResource> = ::javax_swing_plaf / "BorderUIResource$CompoundBorderUIResource";
namespace javax::swing::plaf { class BorderUIResource$EmptyBorderUIResource; }
template<> constexpr auto signature<::javax::swing::plaf::BorderUIResource$EmptyBorderUIResource> = ::javax_swing_plaf / "BorderUIResource$EmptyBorderUIResource";
namespace javax::swing::plaf { class BorderUIResource$EtchedBorderUIResource; }
template<> constexpr auto signature<::javax::swing::plaf::BorderUIResource$EtchedBorderUIResource> = ::javax_swing_plaf / "BorderUIResource$EtchedBorderUIResource";
namespace javax::swing::plaf { class BorderUIResource$LineBorderUIResource; }
template<> constexpr auto signature<::javax::swing::plaf::BorderUIResource$LineBorderUIResource> = ::javax_swing_plaf / "BorderUIResource$LineBorderUIResource";
namespace javax::swing::plaf { class BorderUIResource$MatteBorderUIResource; }
template<> constexpr auto signature<::javax::swing::plaf::BorderUIResource$MatteBorderUIResource> = ::javax_swing_plaf / "BorderUIResource$MatteBorderUIResource";
namespace javax::swing::plaf { class BorderUIResource$TitledBorderUIResource; }
template<> constexpr auto signature<::javax::swing::plaf::BorderUIResource$TitledBorderUIResource> = ::javax_swing_plaf / "BorderUIResource$TitledBorderUIResource";
namespace javax::swing::plaf { class ButtonUI; }
template<> constexpr auto signature<::javax::swing::plaf::ButtonUI> = ::javax_swing_plaf / "ButtonUI";
namespace javax::swing::plaf { class ColorChooserUI; }
template<> constexpr auto signature<::javax::swing::plaf::ColorChooserUI> = ::javax_swing_plaf / "ColorChooserUI";
namespace javax::swing::plaf { class ColorUIResource; }
template<> constexpr auto signature<::javax::swing::plaf::ColorUIResource> = ::javax_swing_plaf / "ColorUIResource";
namespace javax::swing::plaf { class ComboBoxUI; }
template<> constexpr auto signature<::javax::swing::plaf::ComboBoxUI> = ::javax_swing_plaf / "ComboBoxUI";
namespace javax::swing::plaf { class ComponentInputMapUIResource; }
template<> constexpr auto signature<::javax::swing::plaf::ComponentInputMapUIResource> = ::javax_swing_plaf / "ComponentInputMapUIResource";
namespace javax::swing::plaf { class ComponentUI; }
template<> constexpr auto signature<::javax::swing::plaf::ComponentUI> = ::javax_swing_plaf / "ComponentUI";
namespace javax::swing::plaf { class DesktopIconUI; }
template<> constexpr auto signature<::javax::swing::plaf::DesktopIconUI> = ::javax_swing_plaf / "DesktopIconUI";
namespace javax::swing::plaf { class DesktopPaneUI; }
template<> constexpr auto signature<::javax::swing::plaf::DesktopPaneUI> = ::javax_swing_plaf / "DesktopPaneUI";
namespace javax::swing::plaf { class DimensionUIResource; }
template<> constexpr auto signature<::javax::swing::plaf::DimensionUIResource> = ::javax_swing_plaf / "DimensionUIResource";
namespace javax::swing::plaf { class FileChooserUI; }
template<> constexpr auto signature<::javax::swing::plaf::FileChooserUI> = ::javax_swing_plaf / "FileChooserUI";
namespace javax::swing::plaf { class FontUIResource; }
template<> constexpr auto signature<::javax::swing::plaf::FontUIResource> = ::javax_swing_plaf / "FontUIResource";
namespace javax::swing::plaf { class IconUIResource; }
template<> constexpr auto signature<::javax::swing::plaf::IconUIResource> = ::javax_swing_plaf / "IconUIResource";
namespace javax::swing::plaf { class InputMapUIResource; }
template<> constexpr auto signature<::javax::swing::plaf::InputMapUIResource> = ::javax_swing_plaf / "InputMapUIResource";
namespace javax::swing::plaf { class InsetsUIResource; }
template<> constexpr auto signature<::javax::swing::plaf::InsetsUIResource> = ::javax_swing_plaf / "InsetsUIResource";
namespace javax::swing::plaf { class InternalFrameUI; }
template<> constexpr auto signature<::javax::swing::plaf::InternalFrameUI> = ::javax_swing_plaf / "InternalFrameUI";
namespace javax::swing::plaf { class LabelUI; }
template<> constexpr auto signature<::javax::swing::plaf::LabelUI> = ::javax_swing_plaf / "LabelUI";
namespace javax::swing::plaf { class LayerUI; }
template<> constexpr auto signature<::javax::swing::plaf::LayerUI> = ::javax_swing_plaf / "LayerUI";
namespace javax::swing::plaf { class ListUI; }
template<> constexpr auto signature<::javax::swing::plaf::ListUI> = ::javax_swing_plaf / "ListUI";
namespace javax::swing::plaf { class MenuBarUI; }
template<> constexpr auto signature<::javax::swing::plaf::MenuBarUI> = ::javax_swing_plaf / "MenuBarUI";
namespace javax::swing::plaf { class MenuItemUI; }
template<> constexpr auto signature<::javax::swing::plaf::MenuItemUI> = ::javax_swing_plaf / "MenuItemUI";
namespace javax::swing::plaf { class OptionPaneUI; }
template<> constexpr auto signature<::javax::swing::plaf::OptionPaneUI> = ::javax_swing_plaf / "OptionPaneUI";
namespace javax::swing::plaf { class PanelUI; }
template<> constexpr auto signature<::javax::swing::plaf::PanelUI> = ::javax_swing_plaf / "PanelUI";
namespace javax::swing::plaf { class PopupMenuUI; }
template<> constexpr auto signature<::javax::swing::plaf::PopupMenuUI> = ::javax_swing_plaf / "PopupMenuUI";
namespace javax::swing::plaf { class ProgressBarUI; }
template<> constexpr auto signature<::javax::swing::plaf::ProgressBarUI> = ::javax_swing_plaf / "ProgressBarUI";
namespace javax::swing::plaf { class RootPaneUI; }
template<> constexpr auto signature<::javax::swing::plaf::RootPaneUI> = ::javax_swing_plaf / "RootPaneUI";
namespace javax::swing::plaf { class ScrollBarUI; }
template<> constexpr auto signature<::javax::swing::plaf::ScrollBarUI> = ::javax_swing_plaf / "ScrollBarUI";
namespace javax::swing::plaf { class ScrollPaneUI; }
template<> constexpr auto signature<::javax::swing::plaf::ScrollPaneUI> = ::javax_swing_plaf / "ScrollPaneUI";
namespace javax::swing::plaf { class SeparatorUI; }
template<> constexpr auto signature<::javax::swing::plaf::SeparatorUI> = ::javax_swing_plaf / "SeparatorUI";
namespace javax::swing::plaf { class SliderUI; }
template<> constexpr auto signature<::javax::swing::plaf::SliderUI> = ::javax_swing_plaf / "SliderUI";
namespace javax::swing::plaf { class SpinnerUI; }
template<> constexpr auto signature<::javax::swing::plaf::SpinnerUI> = ::javax_swing_plaf / "SpinnerUI";
namespace javax::swing::plaf { class SplitPaneUI; }
template<> constexpr auto signature<::javax::swing::plaf::SplitPaneUI> = ::javax_swing_plaf / "SplitPaneUI";
namespace javax::swing::plaf { class TabbedPaneUI; }
template<> constexpr auto signature<::javax::swing::plaf::TabbedPaneUI> = ::javax_swing_plaf / "TabbedPaneUI";
namespace javax::swing::plaf { class TableHeaderUI; }
template<> constexpr auto signature<::javax::swing::plaf::TableHeaderUI> = ::javax_swing_plaf / "TableHeaderUI";
namespace javax::swing::plaf { class TableUI; }
template<> constexpr auto signature<::javax::swing::plaf::TableUI> = ::javax_swing_plaf / "TableUI";
namespace javax::swing::plaf { class TextUI; }
template<> constexpr auto signature<::javax::swing::plaf::TextUI> = ::javax_swing_plaf / "TextUI";
namespace javax::swing::plaf { class ToolBarUI; }
template<> constexpr auto signature<::javax::swing::plaf::ToolBarUI> = ::javax_swing_plaf / "ToolBarUI";
namespace javax::swing::plaf { class ToolTipUI; }
template<> constexpr auto signature<::javax::swing::plaf::ToolTipUI> = ::javax_swing_plaf / "ToolTipUI";
namespace javax::swing::plaf { class TreeUI; }
template<> constexpr auto signature<::javax::swing::plaf::TreeUI> = ::javax_swing_plaf / "TreeUI";
namespace javax::swing::plaf { class UIResource; }
template<> constexpr auto signature<::javax::swing::plaf::UIResource> = ::javax_swing_plaf / "UIResource";
namespace javax::swing::plaf { class ViewportUI; }
template<> constexpr auto signature<::javax::swing::plaf::ViewportUI> = ::javax_swing_plaf / "ViewportUI";
namespace javax::swing::plaf::basic { class BasicArrowButton; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicArrowButton> = ::javax_swing_plaf_basic / "BasicArrowButton";
namespace javax::swing::plaf::basic { class BasicBorders; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicBorders> = ::javax_swing_plaf_basic / "BasicBorders";
namespace javax::swing::plaf::basic { class BasicBorders$ButtonBorder; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicBorders$ButtonBorder> = ::javax_swing_plaf_basic / "BasicBorders$ButtonBorder";
namespace javax::swing::plaf::basic { class BasicBorders$FieldBorder; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicBorders$FieldBorder> = ::javax_swing_plaf_basic / "BasicBorders$FieldBorder";
namespace javax::swing::plaf::basic { class BasicBorders$MarginBorder; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicBorders$MarginBorder> = ::javax_swing_plaf_basic / "BasicBorders$MarginBorder";
namespace javax::swing::plaf::basic { class BasicBorders$MenuBarBorder; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicBorders$MenuBarBorder> = ::javax_swing_plaf_basic / "BasicBorders$MenuBarBorder";
namespace javax::swing::plaf::basic { class BasicBorders$RadioButtonBorder; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicBorders$RadioButtonBorder> = ::javax_swing_plaf_basic / "BasicBorders$RadioButtonBorder";
namespace javax::swing::plaf::basic { class BasicBorders$RolloverButtonBorder; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicBorders$RolloverButtonBorder> = ::javax_swing_plaf_basic / "BasicBorders$RolloverButtonBorder";
namespace javax::swing::plaf::basic { class BasicBorders$RolloverMarginBorder; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicBorders$RolloverMarginBorder> = ::javax_swing_plaf_basic / "BasicBorders$RolloverMarginBorder";
namespace javax::swing::plaf::basic { class BasicBorders$SplitPaneBorder; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicBorders$SplitPaneBorder> = ::javax_swing_plaf_basic / "BasicBorders$SplitPaneBorder";
namespace javax::swing::plaf::basic { class BasicBorders$SplitPaneDividerBorder; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicBorders$SplitPaneDividerBorder> = ::javax_swing_plaf_basic / "BasicBorders$SplitPaneDividerBorder";
namespace javax::swing::plaf::basic { class BasicBorders$ToggleButtonBorder; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicBorders$ToggleButtonBorder> = ::javax_swing_plaf_basic / "BasicBorders$ToggleButtonBorder";
namespace javax::swing::plaf::basic { class BasicButtonListener; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicButtonListener> = ::javax_swing_plaf_basic / "BasicButtonListener";
namespace javax::swing::plaf::basic { class BasicButtonListener$Actions; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicButtonListener$Actions> = ::javax_swing_plaf_basic / "BasicButtonListener$Actions";
namespace javax::swing::plaf::basic { class BasicButtonUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicButtonUI> = ::javax_swing_plaf_basic / "BasicButtonUI";
namespace javax::swing::plaf::basic { class BasicCheckBoxMenuItemUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicCheckBoxMenuItemUI> = ::javax_swing_plaf_basic / "BasicCheckBoxMenuItemUI";
namespace javax::swing::plaf::basic { class BasicCheckBoxUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicCheckBoxUI> = ::javax_swing_plaf_basic / "BasicCheckBoxUI";
namespace javax::swing::plaf::basic { class BasicColorChooserUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicColorChooserUI> = ::javax_swing_plaf_basic / "BasicColorChooserUI";
namespace javax::swing::plaf::basic { class BasicColorChooserUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicColorChooserUI$1> = ::javax_swing_plaf_basic / "BasicColorChooserUI$1";
namespace javax::swing::plaf::basic { class BasicColorChooserUI$ColorTransferHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicColorChooserUI$ColorTransferHandler> = ::javax_swing_plaf_basic / "BasicColorChooserUI$ColorTransferHandler";
namespace javax::swing::plaf::basic { class BasicColorChooserUI$Handler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicColorChooserUI$Handler> = ::javax_swing_plaf_basic / "BasicColorChooserUI$Handler";
namespace javax::swing::plaf::basic { class BasicColorChooserUI$PropertyHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicColorChooserUI$PropertyHandler> = ::javax_swing_plaf_basic / "BasicColorChooserUI$PropertyHandler";
namespace javax::swing::plaf::basic { class BasicComboBoxEditor; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicComboBoxEditor> = ::javax_swing_plaf_basic / "BasicComboBoxEditor";
namespace javax::swing::plaf::basic { class BasicComboBoxEditor$BorderlessTextField; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicComboBoxEditor$BorderlessTextField> = ::javax_swing_plaf_basic / "BasicComboBoxEditor$BorderlessTextField";
namespace javax::swing::plaf::basic { class BasicComboBoxEditor$UIResource; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicComboBoxEditor$UIResource> = ::javax_swing_plaf_basic / "BasicComboBoxEditor$UIResource";
namespace javax::swing::plaf::basic { class BasicComboBoxRenderer; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicComboBoxRenderer> = ::javax_swing_plaf_basic / "BasicComboBoxRenderer";
namespace javax::swing::plaf::basic { class BasicComboBoxRenderer$UIResource; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicComboBoxRenderer$UIResource> = ::javax_swing_plaf_basic / "BasicComboBoxRenderer$UIResource";
namespace javax::swing::plaf::basic { class BasicComboBoxUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicComboBoxUI> = ::javax_swing_plaf_basic / "BasicComboBoxUI";
namespace javax::swing::plaf::basic { class BasicComboBoxUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicComboBoxUI$1> = ::javax_swing_plaf_basic / "BasicComboBoxUI$1";
namespace javax::swing::plaf::basic { class BasicComboBoxUI$Actions; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicComboBoxUI$Actions> = ::javax_swing_plaf_basic / "BasicComboBoxUI$Actions";
namespace javax::swing::plaf::basic { class BasicComboBoxUI$ComboBoxLayoutManager; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicComboBoxUI$ComboBoxLayoutManager> = ::javax_swing_plaf_basic / "BasicComboBoxUI$ComboBoxLayoutManager";
namespace javax::swing::plaf::basic { class BasicComboBoxUI$DefaultKeySelectionManager; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicComboBoxUI$DefaultKeySelectionManager> = ::javax_swing_plaf_basic / "BasicComboBoxUI$DefaultKeySelectionManager";
namespace javax::swing::plaf::basic { class BasicComboBoxUI$FocusHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicComboBoxUI$FocusHandler> = ::javax_swing_plaf_basic / "BasicComboBoxUI$FocusHandler";
namespace javax::swing::plaf::basic { class BasicComboBoxUI$Handler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicComboBoxUI$Handler> = ::javax_swing_plaf_basic / "BasicComboBoxUI$Handler";
namespace javax::swing::plaf::basic { class BasicComboBoxUI$ItemHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicComboBoxUI$ItemHandler> = ::javax_swing_plaf_basic / "BasicComboBoxUI$ItemHandler";
namespace javax::swing::plaf::basic { class BasicComboBoxUI$KeyHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicComboBoxUI$KeyHandler> = ::javax_swing_plaf_basic / "BasicComboBoxUI$KeyHandler";
namespace javax::swing::plaf::basic { class BasicComboBoxUI$ListDataHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicComboBoxUI$ListDataHandler> = ::javax_swing_plaf_basic / "BasicComboBoxUI$ListDataHandler";
namespace javax::swing::plaf::basic { class BasicComboBoxUI$PropertyChangeHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicComboBoxUI$PropertyChangeHandler> = ::javax_swing_plaf_basic / "BasicComboBoxUI$PropertyChangeHandler";
namespace javax::swing::plaf::basic { class BasicComboPopup; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicComboPopup> = ::javax_swing_plaf_basic / "BasicComboPopup";
namespace javax::swing::plaf::basic { class BasicComboPopup$1; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicComboPopup$1> = ::javax_swing_plaf_basic / "BasicComboPopup$1";
namespace javax::swing::plaf::basic { class BasicComboPopup$AutoScrollActionHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicComboPopup$AutoScrollActionHandler> = ::javax_swing_plaf_basic / "BasicComboPopup$AutoScrollActionHandler";
namespace javax::swing::plaf::basic { class BasicComboPopup$EmptyListModelClass; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicComboPopup$EmptyListModelClass> = ::javax_swing_plaf_basic / "BasicComboPopup$EmptyListModelClass";
namespace javax::swing::plaf::basic { class BasicComboPopup$Handler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicComboPopup$Handler> = ::javax_swing_plaf_basic / "BasicComboPopup$Handler";
namespace javax::swing::plaf::basic { class BasicComboPopup$InvocationKeyHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicComboPopup$InvocationKeyHandler> = ::javax_swing_plaf_basic / "BasicComboPopup$InvocationKeyHandler";
namespace javax::swing::plaf::basic { class BasicComboPopup$InvocationMouseHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicComboPopup$InvocationMouseHandler> = ::javax_swing_plaf_basic / "BasicComboPopup$InvocationMouseHandler";
namespace javax::swing::plaf::basic { class BasicComboPopup$InvocationMouseMotionHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicComboPopup$InvocationMouseMotionHandler> = ::javax_swing_plaf_basic / "BasicComboPopup$InvocationMouseMotionHandler";
namespace javax::swing::plaf::basic { class BasicComboPopup$ItemHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicComboPopup$ItemHandler> = ::javax_swing_plaf_basic / "BasicComboPopup$ItemHandler";
namespace javax::swing::plaf::basic { class BasicComboPopup$ListDataHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicComboPopup$ListDataHandler> = ::javax_swing_plaf_basic / "BasicComboPopup$ListDataHandler";
namespace javax::swing::plaf::basic { class BasicComboPopup$ListMouseHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicComboPopup$ListMouseHandler> = ::javax_swing_plaf_basic / "BasicComboPopup$ListMouseHandler";
namespace javax::swing::plaf::basic { class BasicComboPopup$ListMouseMotionHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicComboPopup$ListMouseMotionHandler> = ::javax_swing_plaf_basic / "BasicComboPopup$ListMouseMotionHandler";
namespace javax::swing::plaf::basic { class BasicComboPopup$ListSelectionHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicComboPopup$ListSelectionHandler> = ::javax_swing_plaf_basic / "BasicComboPopup$ListSelectionHandler";
namespace javax::swing::plaf::basic { class BasicComboPopup$PropertyChangeHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicComboPopup$PropertyChangeHandler> = ::javax_swing_plaf_basic / "BasicComboPopup$PropertyChangeHandler";
namespace javax::swing::plaf::basic { class BasicDesktopIconUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicDesktopIconUI> = ::javax_swing_plaf_basic / "BasicDesktopIconUI";
namespace javax::swing::plaf::basic { class BasicDesktopIconUI$MouseInputHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicDesktopIconUI$MouseInputHandler> = ::javax_swing_plaf_basic / "BasicDesktopIconUI$MouseInputHandler";
namespace javax::swing::plaf::basic { class BasicDesktopPaneUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicDesktopPaneUI> = ::javax_swing_plaf_basic / "BasicDesktopPaneUI";
namespace javax::swing::plaf::basic { class BasicDesktopPaneUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicDesktopPaneUI$1> = ::javax_swing_plaf_basic / "BasicDesktopPaneUI$1";
namespace javax::swing::plaf::basic { class BasicDesktopPaneUI$Actions; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicDesktopPaneUI$Actions> = ::javax_swing_plaf_basic / "BasicDesktopPaneUI$Actions";
namespace javax::swing::plaf::basic { class BasicDesktopPaneUI$BasicDesktopManager; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicDesktopPaneUI$BasicDesktopManager> = ::javax_swing_plaf_basic / "BasicDesktopPaneUI$BasicDesktopManager";
namespace javax::swing::plaf::basic { class BasicDesktopPaneUI$CloseAction; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicDesktopPaneUI$CloseAction> = ::javax_swing_plaf_basic / "BasicDesktopPaneUI$CloseAction";
namespace javax::swing::plaf::basic { class BasicDesktopPaneUI$Handler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicDesktopPaneUI$Handler> = ::javax_swing_plaf_basic / "BasicDesktopPaneUI$Handler";
namespace javax::swing::plaf::basic { class BasicDesktopPaneUI$MaximizeAction; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicDesktopPaneUI$MaximizeAction> = ::javax_swing_plaf_basic / "BasicDesktopPaneUI$MaximizeAction";
namespace javax::swing::plaf::basic { class BasicDesktopPaneUI$MinimizeAction; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicDesktopPaneUI$MinimizeAction> = ::javax_swing_plaf_basic / "BasicDesktopPaneUI$MinimizeAction";
namespace javax::swing::plaf::basic { class BasicDesktopPaneUI$NavigateAction; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicDesktopPaneUI$NavigateAction> = ::javax_swing_plaf_basic / "BasicDesktopPaneUI$NavigateAction";
namespace javax::swing::plaf::basic { class BasicDesktopPaneUI$OpenAction; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicDesktopPaneUI$OpenAction> = ::javax_swing_plaf_basic / "BasicDesktopPaneUI$OpenAction";
namespace javax::swing::plaf::basic { class BasicDirectoryModel; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicDirectoryModel> = ::javax_swing_plaf_basic / "BasicDirectoryModel";
namespace javax::swing::plaf::basic { class BasicDirectoryModel$1; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicDirectoryModel$1> = ::javax_swing_plaf_basic / "BasicDirectoryModel$1";
namespace javax::swing::plaf::basic { class BasicDirectoryModel$DoChangeContents; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicDirectoryModel$DoChangeContents> = ::javax_swing_plaf_basic / "BasicDirectoryModel$DoChangeContents";
namespace javax::swing::plaf::basic { class BasicDirectoryModel$LoadFilesThread; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicDirectoryModel$LoadFilesThread> = ::javax_swing_plaf_basic / "BasicDirectoryModel$LoadFilesThread";
namespace javax::swing::plaf::basic { class BasicDirectoryModel$LoadFilesThread$1; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicDirectoryModel$LoadFilesThread$1> = ::javax_swing_plaf_basic / "BasicDirectoryModel$LoadFilesThread$1";
namespace javax::swing::plaf::basic { class BasicEditorPaneUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicEditorPaneUI> = ::javax_swing_plaf_basic / "BasicEditorPaneUI";
namespace javax::swing::plaf::basic { class BasicEditorPaneUI$StyleSheetUIResource; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicEditorPaneUI$StyleSheetUIResource> = ::javax_swing_plaf_basic / "BasicEditorPaneUI$StyleSheetUIResource";
namespace javax::swing::plaf::basic { class BasicFileChooserUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicFileChooserUI> = ::javax_swing_plaf_basic / "BasicFileChooserUI";
namespace javax::swing::plaf::basic { class BasicFileChooserUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicFileChooserUI$1> = ::javax_swing_plaf_basic / "BasicFileChooserUI$1";
namespace javax::swing::plaf::basic { class BasicFileChooserUI$AcceptAllFileFilter; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicFileChooserUI$AcceptAllFileFilter> = ::javax_swing_plaf_basic / "BasicFileChooserUI$AcceptAllFileFilter";
namespace javax::swing::plaf::basic { class BasicFileChooserUI$ApproveSelectionAction; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicFileChooserUI$ApproveSelectionAction> = ::javax_swing_plaf_basic / "BasicFileChooserUI$ApproveSelectionAction";
namespace javax::swing::plaf::basic { class BasicFileChooserUI$BasicFileView; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicFileChooserUI$BasicFileView> = ::javax_swing_plaf_basic / "BasicFileChooserUI$BasicFileView";
namespace javax::swing::plaf::basic { class BasicFileChooserUI$CancelSelectionAction; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicFileChooserUI$CancelSelectionAction> = ::javax_swing_plaf_basic / "BasicFileChooserUI$CancelSelectionAction";
namespace javax::swing::plaf::basic { class BasicFileChooserUI$ChangeToParentDirectoryAction; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicFileChooserUI$ChangeToParentDirectoryAction> = ::javax_swing_plaf_basic / "BasicFileChooserUI$ChangeToParentDirectoryAction";
namespace javax::swing::plaf::basic { class BasicFileChooserUI$DoubleClickListener; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicFileChooserUI$DoubleClickListener> = ::javax_swing_plaf_basic / "BasicFileChooserUI$DoubleClickListener";
namespace javax::swing::plaf::basic { class BasicFileChooserUI$FileTransferHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicFileChooserUI$FileTransferHandler> = ::javax_swing_plaf_basic / "BasicFileChooserUI$FileTransferHandler";
namespace javax::swing::plaf::basic { class BasicFileChooserUI$FileTransferHandler$FileTransferable; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicFileChooserUI$FileTransferHandler$FileTransferable> = ::javax_swing_plaf_basic / "BasicFileChooserUI$FileTransferHandler$FileTransferable";
namespace javax::swing::plaf::basic { class BasicFileChooserUI$GlobFilter; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicFileChooserUI$GlobFilter> = ::javax_swing_plaf_basic / "BasicFileChooserUI$GlobFilter";
namespace javax::swing::plaf::basic { class BasicFileChooserUI$GoHomeAction; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicFileChooserUI$GoHomeAction> = ::javax_swing_plaf_basic / "BasicFileChooserUI$GoHomeAction";
namespace javax::swing::plaf::basic { class BasicFileChooserUI$Handler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicFileChooserUI$Handler> = ::javax_swing_plaf_basic / "BasicFileChooserUI$Handler";
namespace javax::swing::plaf::basic { class BasicFileChooserUI$NewFolderAction; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicFileChooserUI$NewFolderAction> = ::javax_swing_plaf_basic / "BasicFileChooserUI$NewFolderAction";
namespace javax::swing::plaf::basic { class BasicFileChooserUI$SelectionListener; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicFileChooserUI$SelectionListener> = ::javax_swing_plaf_basic / "BasicFileChooserUI$SelectionListener";
namespace javax::swing::plaf::basic { class BasicFileChooserUI$UpdateAction; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicFileChooserUI$UpdateAction> = ::javax_swing_plaf_basic / "BasicFileChooserUI$UpdateAction";
namespace javax::swing::plaf::basic { class BasicFormattedTextFieldUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicFormattedTextFieldUI> = ::javax_swing_plaf_basic / "BasicFormattedTextFieldUI";
namespace javax::swing::plaf::basic { class BasicGraphicsUtils; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicGraphicsUtils> = ::javax_swing_plaf_basic / "BasicGraphicsUtils";
namespace javax::swing::plaf::basic { class BasicHTML; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicHTML> = ::javax_swing_plaf_basic / "BasicHTML";
namespace javax::swing::plaf::basic { class BasicHTML$BasicDocument; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicHTML$BasicDocument> = ::javax_swing_plaf_basic / "BasicHTML$BasicDocument";
namespace javax::swing::plaf::basic { class BasicHTML$BasicEditorKit; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicHTML$BasicEditorKit> = ::javax_swing_plaf_basic / "BasicHTML$BasicEditorKit";
namespace javax::swing::plaf::basic { class BasicHTML$BasicHTMLViewFactory; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicHTML$BasicHTMLViewFactory> = ::javax_swing_plaf_basic / "BasicHTML$BasicHTMLViewFactory";
namespace javax::swing::plaf::basic { class BasicHTML$Renderer; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicHTML$Renderer> = ::javax_swing_plaf_basic / "BasicHTML$Renderer";
namespace javax::swing::plaf::basic { class BasicIconFactory; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicIconFactory> = ::javax_swing_plaf_basic / "BasicIconFactory";
namespace javax::swing::plaf::basic { class BasicIconFactory$1; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicIconFactory$1> = ::javax_swing_plaf_basic / "BasicIconFactory$1";
namespace javax::swing::plaf::basic { class BasicIconFactory$CheckBoxIcon; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicIconFactory$CheckBoxIcon> = ::javax_swing_plaf_basic / "BasicIconFactory$CheckBoxIcon";
namespace javax::swing::plaf::basic { class BasicIconFactory$CheckBoxMenuItemIcon; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicIconFactory$CheckBoxMenuItemIcon> = ::javax_swing_plaf_basic / "BasicIconFactory$CheckBoxMenuItemIcon";
namespace javax::swing::plaf::basic { class BasicIconFactory$EmptyFrameIcon; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicIconFactory$EmptyFrameIcon> = ::javax_swing_plaf_basic / "BasicIconFactory$EmptyFrameIcon";
namespace javax::swing::plaf::basic { class BasicIconFactory$MenuArrowIcon; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicIconFactory$MenuArrowIcon> = ::javax_swing_plaf_basic / "BasicIconFactory$MenuArrowIcon";
namespace javax::swing::plaf::basic { class BasicIconFactory$MenuItemArrowIcon; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicIconFactory$MenuItemArrowIcon> = ::javax_swing_plaf_basic / "BasicIconFactory$MenuItemArrowIcon";
namespace javax::swing::plaf::basic { class BasicIconFactory$MenuItemCheckIcon; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicIconFactory$MenuItemCheckIcon> = ::javax_swing_plaf_basic / "BasicIconFactory$MenuItemCheckIcon";
namespace javax::swing::plaf::basic { class BasicIconFactory$RadioButtonIcon; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicIconFactory$RadioButtonIcon> = ::javax_swing_plaf_basic / "BasicIconFactory$RadioButtonIcon";
namespace javax::swing::plaf::basic { class BasicIconFactory$RadioButtonMenuItemIcon; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicIconFactory$RadioButtonMenuItemIcon> = ::javax_swing_plaf_basic / "BasicIconFactory$RadioButtonMenuItemIcon";
namespace javax::swing::plaf::basic { class BasicInternalFrameTitlePane; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicInternalFrameTitlePane> = ::javax_swing_plaf_basic / "BasicInternalFrameTitlePane";
namespace javax::swing::plaf::basic { class BasicInternalFrameTitlePane$1; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicInternalFrameTitlePane$1> = ::javax_swing_plaf_basic / "BasicInternalFrameTitlePane$1";
namespace javax::swing::plaf::basic { class BasicInternalFrameTitlePane$CloseAction; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicInternalFrameTitlePane$CloseAction> = ::javax_swing_plaf_basic / "BasicInternalFrameTitlePane$CloseAction";
namespace javax::swing::plaf::basic { class BasicInternalFrameTitlePane$Handler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicInternalFrameTitlePane$Handler> = ::javax_swing_plaf_basic / "BasicInternalFrameTitlePane$Handler";
namespace javax::swing::plaf::basic { class BasicInternalFrameTitlePane$IconifyAction; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicInternalFrameTitlePane$IconifyAction> = ::javax_swing_plaf_basic / "BasicInternalFrameTitlePane$IconifyAction";
namespace javax::swing::plaf::basic { class BasicInternalFrameTitlePane$MaximizeAction; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicInternalFrameTitlePane$MaximizeAction> = ::javax_swing_plaf_basic / "BasicInternalFrameTitlePane$MaximizeAction";
namespace javax::swing::plaf::basic { class BasicInternalFrameTitlePane$MoveAction; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicInternalFrameTitlePane$MoveAction> = ::javax_swing_plaf_basic / "BasicInternalFrameTitlePane$MoveAction";
namespace javax::swing::plaf::basic { class BasicInternalFrameTitlePane$NoFocusButton; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicInternalFrameTitlePane$NoFocusButton> = ::javax_swing_plaf_basic / "BasicInternalFrameTitlePane$NoFocusButton";
namespace javax::swing::plaf::basic { class BasicInternalFrameTitlePane$PropertyChangeHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicInternalFrameTitlePane$PropertyChangeHandler> = ::javax_swing_plaf_basic / "BasicInternalFrameTitlePane$PropertyChangeHandler";
namespace javax::swing::plaf::basic { class BasicInternalFrameTitlePane$RestoreAction; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicInternalFrameTitlePane$RestoreAction> = ::javax_swing_plaf_basic / "BasicInternalFrameTitlePane$RestoreAction";
namespace javax::swing::plaf::basic { class BasicInternalFrameTitlePane$ShowSystemMenuAction; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicInternalFrameTitlePane$ShowSystemMenuAction> = ::javax_swing_plaf_basic / "BasicInternalFrameTitlePane$ShowSystemMenuAction";
namespace javax::swing::plaf::basic { class BasicInternalFrameTitlePane$SizeAction; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicInternalFrameTitlePane$SizeAction> = ::javax_swing_plaf_basic / "BasicInternalFrameTitlePane$SizeAction";
namespace javax::swing::plaf::basic { class BasicInternalFrameTitlePane$SystemMenuBar; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicInternalFrameTitlePane$SystemMenuBar> = ::javax_swing_plaf_basic / "BasicInternalFrameTitlePane$SystemMenuBar";
namespace javax::swing::plaf::basic { class BasicInternalFrameTitlePane$TitlePaneLayout; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicInternalFrameTitlePane$TitlePaneLayout> = ::javax_swing_plaf_basic / "BasicInternalFrameTitlePane$TitlePaneLayout";
namespace javax::swing::plaf::basic { class BasicInternalFrameUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicInternalFrameUI> = ::javax_swing_plaf_basic / "BasicInternalFrameUI";
namespace javax::swing::plaf::basic { class BasicInternalFrameUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicInternalFrameUI$1> = ::javax_swing_plaf_basic / "BasicInternalFrameUI$1";
namespace javax::swing::plaf::basic { class BasicInternalFrameUI$BasicInternalFrameListener; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicInternalFrameUI$BasicInternalFrameListener> = ::javax_swing_plaf_basic / "BasicInternalFrameUI$BasicInternalFrameListener";
namespace javax::swing::plaf::basic { class BasicInternalFrameUI$BorderListener; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicInternalFrameUI$BorderListener> = ::javax_swing_plaf_basic / "BasicInternalFrameUI$BorderListener";
namespace javax::swing::plaf::basic { class BasicInternalFrameUI$ComponentHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicInternalFrameUI$ComponentHandler> = ::javax_swing_plaf_basic / "BasicInternalFrameUI$ComponentHandler";
namespace javax::swing::plaf::basic { class BasicInternalFrameUI$GlassPaneDispatcher; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicInternalFrameUI$GlassPaneDispatcher> = ::javax_swing_plaf_basic / "BasicInternalFrameUI$GlassPaneDispatcher";
namespace javax::swing::plaf::basic { class BasicInternalFrameUI$Handler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicInternalFrameUI$Handler> = ::javax_swing_plaf_basic / "BasicInternalFrameUI$Handler";
namespace javax::swing::plaf::basic { class BasicInternalFrameUI$InternalFrameLayout; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicInternalFrameUI$InternalFrameLayout> = ::javax_swing_plaf_basic / "BasicInternalFrameUI$InternalFrameLayout";
namespace javax::swing::plaf::basic { class BasicInternalFrameUI$InternalFramePropertyChangeListener; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicInternalFrameUI$InternalFramePropertyChangeListener> = ::javax_swing_plaf_basic / "BasicInternalFrameUI$InternalFramePropertyChangeListener";
namespace javax::swing::plaf::basic { class BasicLabelUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicLabelUI> = ::javax_swing_plaf_basic / "BasicLabelUI";
namespace javax::swing::plaf::basic { class BasicLabelUI$Actions; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicLabelUI$Actions> = ::javax_swing_plaf_basic / "BasicLabelUI$Actions";
namespace javax::swing::plaf::basic { class BasicListUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicListUI> = ::javax_swing_plaf_basic / "BasicListUI";
namespace javax::swing::plaf::basic { class BasicListUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicListUI$1> = ::javax_swing_plaf_basic / "BasicListUI$1";
namespace javax::swing::plaf::basic { class BasicListUI$Actions; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicListUI$Actions> = ::javax_swing_plaf_basic / "BasicListUI$Actions";
namespace javax::swing::plaf::basic { class BasicListUI$FocusHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicListUI$FocusHandler> = ::javax_swing_plaf_basic / "BasicListUI$FocusHandler";
namespace javax::swing::plaf::basic { class BasicListUI$Handler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicListUI$Handler> = ::javax_swing_plaf_basic / "BasicListUI$Handler";
namespace javax::swing::plaf::basic { class BasicListUI$ListDataHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicListUI$ListDataHandler> = ::javax_swing_plaf_basic / "BasicListUI$ListDataHandler";
namespace javax::swing::plaf::basic { class BasicListUI$ListSelectionHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicListUI$ListSelectionHandler> = ::javax_swing_plaf_basic / "BasicListUI$ListSelectionHandler";
namespace javax::swing::plaf::basic { class BasicListUI$ListTransferHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicListUI$ListTransferHandler> = ::javax_swing_plaf_basic / "BasicListUI$ListTransferHandler";
namespace javax::swing::plaf::basic { class BasicListUI$MouseInputHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicListUI$MouseInputHandler> = ::javax_swing_plaf_basic / "BasicListUI$MouseInputHandler";
namespace javax::swing::plaf::basic { class BasicListUI$PropertyChangeHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicListUI$PropertyChangeHandler> = ::javax_swing_plaf_basic / "BasicListUI$PropertyChangeHandler";
namespace javax::swing::plaf::basic { class BasicLookAndFeel; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicLookAndFeel> = ::javax_swing_plaf_basic / "BasicLookAndFeel";
namespace javax::swing::plaf::basic { class BasicLookAndFeel$1; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicLookAndFeel$1> = ::javax_swing_plaf_basic / "BasicLookAndFeel$1";
namespace javax::swing::plaf::basic { class BasicLookAndFeel$2; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicLookAndFeel$2> = ::javax_swing_plaf_basic / "BasicLookAndFeel$2";
namespace javax::swing::plaf::basic { class BasicLookAndFeel$3; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicLookAndFeel$3> = ::javax_swing_plaf_basic / "BasicLookAndFeel$3";
namespace javax::swing::plaf::basic { class BasicLookAndFeel$AWTEventHelper; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicLookAndFeel$AWTEventHelper> = ::javax_swing_plaf_basic / "BasicLookAndFeel$AWTEventHelper";
namespace javax::swing::plaf::basic { class BasicLookAndFeel$AudioAction; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicLookAndFeel$AudioAction> = ::javax_swing_plaf_basic / "BasicLookAndFeel$AudioAction";
namespace javax::swing::plaf::basic { class BasicMenuBarUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicMenuBarUI> = ::javax_swing_plaf_basic / "BasicMenuBarUI";
namespace javax::swing::plaf::basic { class BasicMenuBarUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicMenuBarUI$1> = ::javax_swing_plaf_basic / "BasicMenuBarUI$1";
namespace javax::swing::plaf::basic { class BasicMenuBarUI$Actions; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicMenuBarUI$Actions> = ::javax_swing_plaf_basic / "BasicMenuBarUI$Actions";
namespace javax::swing::plaf::basic { class BasicMenuBarUI$Handler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicMenuBarUI$Handler> = ::javax_swing_plaf_basic / "BasicMenuBarUI$Handler";
namespace javax::swing::plaf::basic { class BasicMenuItemUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicMenuItemUI> = ::javax_swing_plaf_basic / "BasicMenuItemUI";
namespace javax::swing::plaf::basic { class BasicMenuItemUI$Actions; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicMenuItemUI$Actions> = ::javax_swing_plaf_basic / "BasicMenuItemUI$Actions";
namespace javax::swing::plaf::basic { class BasicMenuItemUI$Handler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicMenuItemUI$Handler> = ::javax_swing_plaf_basic / "BasicMenuItemUI$Handler";
namespace javax::swing::plaf::basic { class BasicMenuItemUI$MouseInputHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicMenuItemUI$MouseInputHandler> = ::javax_swing_plaf_basic / "BasicMenuItemUI$MouseInputHandler";
namespace javax::swing::plaf::basic { class BasicMenuUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicMenuUI> = ::javax_swing_plaf_basic / "BasicMenuUI";
namespace javax::swing::plaf::basic { class BasicMenuUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicMenuUI$1> = ::javax_swing_plaf_basic / "BasicMenuUI$1";
namespace javax::swing::plaf::basic { class BasicMenuUI$Actions; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicMenuUI$Actions> = ::javax_swing_plaf_basic / "BasicMenuUI$Actions";
namespace javax::swing::plaf::basic { class BasicMenuUI$ChangeHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicMenuUI$ChangeHandler> = ::javax_swing_plaf_basic / "BasicMenuUI$ChangeHandler";
namespace javax::swing::plaf::basic { class BasicMenuUI$Handler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicMenuUI$Handler> = ::javax_swing_plaf_basic / "BasicMenuUI$Handler";
namespace javax::swing::plaf::basic { class BasicMenuUI$MouseInputHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicMenuUI$MouseInputHandler> = ::javax_swing_plaf_basic / "BasicMenuUI$MouseInputHandler";
namespace javax::swing::plaf::basic { class BasicOptionPaneUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicOptionPaneUI> = ::javax_swing_plaf_basic / "BasicOptionPaneUI";
namespace javax::swing::plaf::basic { class BasicOptionPaneUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicOptionPaneUI$1> = ::javax_swing_plaf_basic / "BasicOptionPaneUI$1";
namespace javax::swing::plaf::basic { class BasicOptionPaneUI$2; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicOptionPaneUI$2> = ::javax_swing_plaf_basic / "BasicOptionPaneUI$2";
namespace javax::swing::plaf::basic { class BasicOptionPaneUI$Actions; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicOptionPaneUI$Actions> = ::javax_swing_plaf_basic / "BasicOptionPaneUI$Actions";
namespace javax::swing::plaf::basic { class BasicOptionPaneUI$ButtonActionListener; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicOptionPaneUI$ButtonActionListener> = ::javax_swing_plaf_basic / "BasicOptionPaneUI$ButtonActionListener";
namespace javax::swing::plaf::basic { class BasicOptionPaneUI$ButtonAreaLayout; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicOptionPaneUI$ButtonAreaLayout> = ::javax_swing_plaf_basic / "BasicOptionPaneUI$ButtonAreaLayout";
namespace javax::swing::plaf::basic { class BasicOptionPaneUI$ButtonFactory; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicOptionPaneUI$ButtonFactory> = ::javax_swing_plaf_basic / "BasicOptionPaneUI$ButtonFactory";
namespace javax::swing::plaf::basic { class BasicOptionPaneUI$ButtonFactory$ConstrainedButton; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicOptionPaneUI$ButtonFactory$ConstrainedButton> = ::javax_swing_plaf_basic / "BasicOptionPaneUI$ButtonFactory$ConstrainedButton";
namespace javax::swing::plaf::basic { class BasicOptionPaneUI$Handler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicOptionPaneUI$Handler> = ::javax_swing_plaf_basic / "BasicOptionPaneUI$Handler";
namespace javax::swing::plaf::basic { class BasicOptionPaneUI$MultiplexingTextField; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicOptionPaneUI$MultiplexingTextField> = ::javax_swing_plaf_basic / "BasicOptionPaneUI$MultiplexingTextField";
namespace javax::swing::plaf::basic { class BasicOptionPaneUI$PropertyChangeHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicOptionPaneUI$PropertyChangeHandler> = ::javax_swing_plaf_basic / "BasicOptionPaneUI$PropertyChangeHandler";
namespace javax::swing::plaf::basic { class BasicPanelUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicPanelUI> = ::javax_swing_plaf_basic / "BasicPanelUI";
namespace javax::swing::plaf::basic { class BasicPasswordFieldUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicPasswordFieldUI> = ::javax_swing_plaf_basic / "BasicPasswordFieldUI";
namespace javax::swing::plaf::basic { class BasicPopupMenuSeparatorUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicPopupMenuSeparatorUI> = ::javax_swing_plaf_basic / "BasicPopupMenuSeparatorUI";
namespace javax::swing::plaf::basic { class BasicPopupMenuUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicPopupMenuUI> = ::javax_swing_plaf_basic / "BasicPopupMenuUI";
namespace javax::swing::plaf::basic { class BasicPopupMenuUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicPopupMenuUI$1> = ::javax_swing_plaf_basic / "BasicPopupMenuUI$1";
namespace javax::swing::plaf::basic { class BasicPopupMenuUI$Actions; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicPopupMenuUI$Actions> = ::javax_swing_plaf_basic / "BasicPopupMenuUI$Actions";
namespace javax::swing::plaf::basic { class BasicPopupMenuUI$BasicMenuKeyListener; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicPopupMenuUI$BasicMenuKeyListener> = ::javax_swing_plaf_basic / "BasicPopupMenuUI$BasicMenuKeyListener";
namespace javax::swing::plaf::basic { class BasicPopupMenuUI$BasicPopupMenuListener; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicPopupMenuUI$BasicPopupMenuListener> = ::javax_swing_plaf_basic / "BasicPopupMenuUI$BasicPopupMenuListener";
namespace javax::swing::plaf::basic { class BasicPopupMenuUI$MenuKeyboardHelper; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicPopupMenuUI$MenuKeyboardHelper> = ::javax_swing_plaf_basic / "BasicPopupMenuUI$MenuKeyboardHelper";
namespace javax::swing::plaf::basic { class BasicPopupMenuUI$MenuKeyboardHelper$1; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicPopupMenuUI$MenuKeyboardHelper$1> = ::javax_swing_plaf_basic / "BasicPopupMenuUI$MenuKeyboardHelper$1";
namespace javax::swing::plaf::basic { class BasicPopupMenuUI$MouseGrabber; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicPopupMenuUI$MouseGrabber> = ::javax_swing_plaf_basic / "BasicPopupMenuUI$MouseGrabber";
namespace javax::swing::plaf::basic { class BasicPopupMenuUI$MouseGrabber$1; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicPopupMenuUI$MouseGrabber$1> = ::javax_swing_plaf_basic / "BasicPopupMenuUI$MouseGrabber$1";
namespace javax::swing::plaf::basic { class BasicPopupMenuUI$MouseGrabber$2; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicPopupMenuUI$MouseGrabber$2> = ::javax_swing_plaf_basic / "BasicPopupMenuUI$MouseGrabber$2";
namespace javax::swing::plaf::basic { class BasicProgressBarUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicProgressBarUI> = ::javax_swing_plaf_basic / "BasicProgressBarUI";
namespace javax::swing::plaf::basic { class BasicProgressBarUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicProgressBarUI$1> = ::javax_swing_plaf_basic / "BasicProgressBarUI$1";
namespace javax::swing::plaf::basic { class BasicProgressBarUI$Animator; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicProgressBarUI$Animator> = ::javax_swing_plaf_basic / "BasicProgressBarUI$Animator";
namespace javax::swing::plaf::basic { class BasicProgressBarUI$ChangeHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicProgressBarUI$ChangeHandler> = ::javax_swing_plaf_basic / "BasicProgressBarUI$ChangeHandler";
namespace javax::swing::plaf::basic { class BasicProgressBarUI$Handler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicProgressBarUI$Handler> = ::javax_swing_plaf_basic / "BasicProgressBarUI$Handler";
namespace javax::swing::plaf::basic { class BasicRadioButtonMenuItemUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicRadioButtonMenuItemUI> = ::javax_swing_plaf_basic / "BasicRadioButtonMenuItemUI";
namespace javax::swing::plaf::basic { class BasicRadioButtonUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicRadioButtonUI> = ::javax_swing_plaf_basic / "BasicRadioButtonUI";
namespace javax::swing::plaf::basic { class BasicRadioButtonUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicRadioButtonUI$1> = ::javax_swing_plaf_basic / "BasicRadioButtonUI$1";
namespace javax::swing::plaf::basic { class BasicRadioButtonUI$ButtonGroupInfo; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicRadioButtonUI$ButtonGroupInfo> = ::javax_swing_plaf_basic / "BasicRadioButtonUI$ButtonGroupInfo";
namespace javax::swing::plaf::basic { class BasicRadioButtonUI$KeyHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicRadioButtonUI$KeyHandler> = ::javax_swing_plaf_basic / "BasicRadioButtonUI$KeyHandler";
namespace javax::swing::plaf::basic { class BasicRadioButtonUI$SelectNextBtn; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicRadioButtonUI$SelectNextBtn> = ::javax_swing_plaf_basic / "BasicRadioButtonUI$SelectNextBtn";
namespace javax::swing::plaf::basic { class BasicRadioButtonUI$SelectPreviousBtn; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicRadioButtonUI$SelectPreviousBtn> = ::javax_swing_plaf_basic / "BasicRadioButtonUI$SelectPreviousBtn";
namespace javax::swing::plaf::basic { class BasicRootPaneUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicRootPaneUI> = ::javax_swing_plaf_basic / "BasicRootPaneUI";
namespace javax::swing::plaf::basic { class BasicRootPaneUI$Actions; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicRootPaneUI$Actions> = ::javax_swing_plaf_basic / "BasicRootPaneUI$Actions";
namespace javax::swing::plaf::basic { class BasicRootPaneUI$RootPaneInputMap; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicRootPaneUI$RootPaneInputMap> = ::javax_swing_plaf_basic / "BasicRootPaneUI$RootPaneInputMap";
namespace javax::swing::plaf::basic { class BasicScrollBarUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicScrollBarUI> = ::javax_swing_plaf_basic / "BasicScrollBarUI";
namespace javax::swing::plaf::basic { class BasicScrollBarUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicScrollBarUI$1> = ::javax_swing_plaf_basic / "BasicScrollBarUI$1";
namespace javax::swing::plaf::basic { class BasicScrollBarUI$Actions; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicScrollBarUI$Actions> = ::javax_swing_plaf_basic / "BasicScrollBarUI$Actions";
namespace javax::swing::plaf::basic { class BasicScrollBarUI$ArrowButtonListener; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicScrollBarUI$ArrowButtonListener> = ::javax_swing_plaf_basic / "BasicScrollBarUI$ArrowButtonListener";
namespace javax::swing::plaf::basic { class BasicScrollBarUI$Handler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicScrollBarUI$Handler> = ::javax_swing_plaf_basic / "BasicScrollBarUI$Handler";
namespace javax::swing::plaf::basic { class BasicScrollBarUI$ModelListener; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicScrollBarUI$ModelListener> = ::javax_swing_plaf_basic / "BasicScrollBarUI$ModelListener";
namespace javax::swing::plaf::basic { class BasicScrollBarUI$PropertyChangeHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicScrollBarUI$PropertyChangeHandler> = ::javax_swing_plaf_basic / "BasicScrollBarUI$PropertyChangeHandler";
namespace javax::swing::plaf::basic { class BasicScrollBarUI$ScrollListener; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicScrollBarUI$ScrollListener> = ::javax_swing_plaf_basic / "BasicScrollBarUI$ScrollListener";
namespace javax::swing::plaf::basic { class BasicScrollBarUI$TrackListener; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicScrollBarUI$TrackListener> = ::javax_swing_plaf_basic / "BasicScrollBarUI$TrackListener";
namespace javax::swing::plaf::basic { class BasicScrollPaneUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicScrollPaneUI> = ::javax_swing_plaf_basic / "BasicScrollPaneUI";
namespace javax::swing::plaf::basic { class BasicScrollPaneUI$Actions; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicScrollPaneUI$Actions> = ::javax_swing_plaf_basic / "BasicScrollPaneUI$Actions";
namespace javax::swing::plaf::basic { class BasicScrollPaneUI$HSBChangeListener; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicScrollPaneUI$HSBChangeListener> = ::javax_swing_plaf_basic / "BasicScrollPaneUI$HSBChangeListener";
namespace javax::swing::plaf::basic { class BasicScrollPaneUI$Handler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicScrollPaneUI$Handler> = ::javax_swing_plaf_basic / "BasicScrollPaneUI$Handler";
namespace javax::swing::plaf::basic { class BasicScrollPaneUI$MouseWheelHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicScrollPaneUI$MouseWheelHandler> = ::javax_swing_plaf_basic / "BasicScrollPaneUI$MouseWheelHandler";
namespace javax::swing::plaf::basic { class BasicScrollPaneUI$PropertyChangeHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicScrollPaneUI$PropertyChangeHandler> = ::javax_swing_plaf_basic / "BasicScrollPaneUI$PropertyChangeHandler";
namespace javax::swing::plaf::basic { class BasicScrollPaneUI$VSBChangeListener; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicScrollPaneUI$VSBChangeListener> = ::javax_swing_plaf_basic / "BasicScrollPaneUI$VSBChangeListener";
namespace javax::swing::plaf::basic { class BasicScrollPaneUI$ViewportChangeHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicScrollPaneUI$ViewportChangeHandler> = ::javax_swing_plaf_basic / "BasicScrollPaneUI$ViewportChangeHandler";
namespace javax::swing::plaf::basic { class BasicSeparatorUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicSeparatorUI> = ::javax_swing_plaf_basic / "BasicSeparatorUI";
namespace javax::swing::plaf::basic { class BasicSliderUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicSliderUI> = ::javax_swing_plaf_basic / "BasicSliderUI";
namespace javax::swing::plaf::basic { class BasicSliderUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicSliderUI$1> = ::javax_swing_plaf_basic / "BasicSliderUI$1";
namespace javax::swing::plaf::basic { class BasicSliderUI$ActionScroller; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicSliderUI$ActionScroller> = ::javax_swing_plaf_basic / "BasicSliderUI$ActionScroller";
namespace javax::swing::plaf::basic { class BasicSliderUI$Actions; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicSliderUI$Actions> = ::javax_swing_plaf_basic / "BasicSliderUI$Actions";
namespace javax::swing::plaf::basic { class BasicSliderUI$ChangeHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicSliderUI$ChangeHandler> = ::javax_swing_plaf_basic / "BasicSliderUI$ChangeHandler";
namespace javax::swing::plaf::basic { class BasicSliderUI$ComponentHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicSliderUI$ComponentHandler> = ::javax_swing_plaf_basic / "BasicSliderUI$ComponentHandler";
namespace javax::swing::plaf::basic { class BasicSliderUI$FocusHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicSliderUI$FocusHandler> = ::javax_swing_plaf_basic / "BasicSliderUI$FocusHandler";
namespace javax::swing::plaf::basic { class BasicSliderUI$Handler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicSliderUI$Handler> = ::javax_swing_plaf_basic / "BasicSliderUI$Handler";
namespace javax::swing::plaf::basic { class BasicSliderUI$PropertyChangeHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicSliderUI$PropertyChangeHandler> = ::javax_swing_plaf_basic / "BasicSliderUI$PropertyChangeHandler";
namespace javax::swing::plaf::basic { class BasicSliderUI$ScrollListener; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicSliderUI$ScrollListener> = ::javax_swing_plaf_basic / "BasicSliderUI$ScrollListener";
namespace javax::swing::plaf::basic { class BasicSliderUI$SharedActionScroller; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicSliderUI$SharedActionScroller> = ::javax_swing_plaf_basic / "BasicSliderUI$SharedActionScroller";
namespace javax::swing::plaf::basic { class BasicSliderUI$TrackListener; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicSliderUI$TrackListener> = ::javax_swing_plaf_basic / "BasicSliderUI$TrackListener";
namespace javax::swing::plaf::basic { class BasicSpinnerUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicSpinnerUI> = ::javax_swing_plaf_basic / "BasicSpinnerUI";
namespace javax::swing::plaf::basic { class BasicSpinnerUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicSpinnerUI$1> = ::javax_swing_plaf_basic / "BasicSpinnerUI$1";
namespace javax::swing::plaf::basic { class BasicSpinnerUI$ArrowButtonHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicSpinnerUI$ArrowButtonHandler> = ::javax_swing_plaf_basic / "BasicSpinnerUI$ArrowButtonHandler";
namespace javax::swing::plaf::basic { class BasicSpinnerUI$Handler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicSpinnerUI$Handler> = ::javax_swing_plaf_basic / "BasicSpinnerUI$Handler";
namespace javax::swing::plaf::basic { class BasicSplitPaneDivider; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicSplitPaneDivider> = ::javax_swing_plaf_basic / "BasicSplitPaneDivider";
namespace javax::swing::plaf::basic { class BasicSplitPaneDivider$1; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicSplitPaneDivider$1> = ::javax_swing_plaf_basic / "BasicSplitPaneDivider$1";
namespace javax::swing::plaf::basic { class BasicSplitPaneDivider$2; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicSplitPaneDivider$2> = ::javax_swing_plaf_basic / "BasicSplitPaneDivider$2";
namespace javax::swing::plaf::basic { class BasicSplitPaneDivider$DividerLayout; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicSplitPaneDivider$DividerLayout> = ::javax_swing_plaf_basic / "BasicSplitPaneDivider$DividerLayout";
namespace javax::swing::plaf::basic { class BasicSplitPaneDivider$DragController; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicSplitPaneDivider$DragController> = ::javax_swing_plaf_basic / "BasicSplitPaneDivider$DragController";
namespace javax::swing::plaf::basic { class BasicSplitPaneDivider$MouseHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicSplitPaneDivider$MouseHandler> = ::javax_swing_plaf_basic / "BasicSplitPaneDivider$MouseHandler";
namespace javax::swing::plaf::basic { class BasicSplitPaneDivider$OneTouchActionHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicSplitPaneDivider$OneTouchActionHandler> = ::javax_swing_plaf_basic / "BasicSplitPaneDivider$OneTouchActionHandler";
namespace javax::swing::plaf::basic { class BasicSplitPaneDivider$VerticalDragController; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicSplitPaneDivider$VerticalDragController> = ::javax_swing_plaf_basic / "BasicSplitPaneDivider$VerticalDragController";
namespace javax::swing::plaf::basic { class BasicSplitPaneUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicSplitPaneUI> = ::javax_swing_plaf_basic / "BasicSplitPaneUI";
namespace javax::swing::plaf::basic { class BasicSplitPaneUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicSplitPaneUI$1> = ::javax_swing_plaf_basic / "BasicSplitPaneUI$1";
namespace javax::swing::plaf::basic { class BasicSplitPaneUI$Actions; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicSplitPaneUI$Actions> = ::javax_swing_plaf_basic / "BasicSplitPaneUI$Actions";
namespace javax::swing::plaf::basic { class BasicSplitPaneUI$BasicHorizontalLayoutManager; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicSplitPaneUI$BasicHorizontalLayoutManager> = ::javax_swing_plaf_basic / "BasicSplitPaneUI$BasicHorizontalLayoutManager";
namespace javax::swing::plaf::basic { class BasicSplitPaneUI$BasicVerticalLayoutManager; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicSplitPaneUI$BasicVerticalLayoutManager> = ::javax_swing_plaf_basic / "BasicSplitPaneUI$BasicVerticalLayoutManager";
namespace javax::swing::plaf::basic { class BasicSplitPaneUI$FocusHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicSplitPaneUI$FocusHandler> = ::javax_swing_plaf_basic / "BasicSplitPaneUI$FocusHandler";
namespace javax::swing::plaf::basic { class BasicSplitPaneUI$Handler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicSplitPaneUI$Handler> = ::javax_swing_plaf_basic / "BasicSplitPaneUI$Handler";
namespace javax::swing::plaf::basic { class BasicSplitPaneUI$KeyboardDownRightHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicSplitPaneUI$KeyboardDownRightHandler> = ::javax_swing_plaf_basic / "BasicSplitPaneUI$KeyboardDownRightHandler";
namespace javax::swing::plaf::basic { class BasicSplitPaneUI$KeyboardEndHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicSplitPaneUI$KeyboardEndHandler> = ::javax_swing_plaf_basic / "BasicSplitPaneUI$KeyboardEndHandler";
namespace javax::swing::plaf::basic { class BasicSplitPaneUI$KeyboardHomeHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicSplitPaneUI$KeyboardHomeHandler> = ::javax_swing_plaf_basic / "BasicSplitPaneUI$KeyboardHomeHandler";
namespace javax::swing::plaf::basic { class BasicSplitPaneUI$KeyboardResizeToggleHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicSplitPaneUI$KeyboardResizeToggleHandler> = ::javax_swing_plaf_basic / "BasicSplitPaneUI$KeyboardResizeToggleHandler";
namespace javax::swing::plaf::basic { class BasicSplitPaneUI$KeyboardUpLeftHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicSplitPaneUI$KeyboardUpLeftHandler> = ::javax_swing_plaf_basic / "BasicSplitPaneUI$KeyboardUpLeftHandler";
namespace javax::swing::plaf::basic { class BasicSplitPaneUI$PropertyHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicSplitPaneUI$PropertyHandler> = ::javax_swing_plaf_basic / "BasicSplitPaneUI$PropertyHandler";
namespace javax::swing::plaf::basic { class BasicTabbedPaneUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTabbedPaneUI> = ::javax_swing_plaf_basic / "BasicTabbedPaneUI";
namespace javax::swing::plaf::basic { class BasicTabbedPaneUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTabbedPaneUI$1> = ::javax_swing_plaf_basic / "BasicTabbedPaneUI$1";
namespace javax::swing::plaf::basic { class BasicTabbedPaneUI$Actions; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTabbedPaneUI$Actions> = ::javax_swing_plaf_basic / "BasicTabbedPaneUI$Actions";
namespace javax::swing::plaf::basic { class BasicTabbedPaneUI$CroppedEdge; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTabbedPaneUI$CroppedEdge> = ::javax_swing_plaf_basic / "BasicTabbedPaneUI$CroppedEdge";
namespace javax::swing::plaf::basic { class BasicTabbedPaneUI$FocusHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTabbedPaneUI$FocusHandler> = ::javax_swing_plaf_basic / "BasicTabbedPaneUI$FocusHandler";
namespace javax::swing::plaf::basic { class BasicTabbedPaneUI$Handler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTabbedPaneUI$Handler> = ::javax_swing_plaf_basic / "BasicTabbedPaneUI$Handler";
namespace javax::swing::plaf::basic { class BasicTabbedPaneUI$MouseHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTabbedPaneUI$MouseHandler> = ::javax_swing_plaf_basic / "BasicTabbedPaneUI$MouseHandler";
namespace javax::swing::plaf::basic { class BasicTabbedPaneUI$PropertyChangeHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTabbedPaneUI$PropertyChangeHandler> = ::javax_swing_plaf_basic / "BasicTabbedPaneUI$PropertyChangeHandler";
namespace javax::swing::plaf::basic { class BasicTabbedPaneUI$ScrollableTabButton; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTabbedPaneUI$ScrollableTabButton> = ::javax_swing_plaf_basic / "BasicTabbedPaneUI$ScrollableTabButton";
namespace javax::swing::plaf::basic { class BasicTabbedPaneUI$ScrollableTabPanel; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTabbedPaneUI$ScrollableTabPanel> = ::javax_swing_plaf_basic / "BasicTabbedPaneUI$ScrollableTabPanel";
namespace javax::swing::plaf::basic { class BasicTabbedPaneUI$ScrollableTabSupport; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTabbedPaneUI$ScrollableTabSupport> = ::javax_swing_plaf_basic / "BasicTabbedPaneUI$ScrollableTabSupport";
namespace javax::swing::plaf::basic { class BasicTabbedPaneUI$ScrollableTabViewport; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTabbedPaneUI$ScrollableTabViewport> = ::javax_swing_plaf_basic / "BasicTabbedPaneUI$ScrollableTabViewport";
namespace javax::swing::plaf::basic { class BasicTabbedPaneUI$TabContainer; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTabbedPaneUI$TabContainer> = ::javax_swing_plaf_basic / "BasicTabbedPaneUI$TabContainer";
namespace javax::swing::plaf::basic { class BasicTabbedPaneUI$TabSelectionHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTabbedPaneUI$TabSelectionHandler> = ::javax_swing_plaf_basic / "BasicTabbedPaneUI$TabSelectionHandler";
namespace javax::swing::plaf::basic { class BasicTabbedPaneUI$TabbedPaneLayout; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTabbedPaneUI$TabbedPaneLayout> = ::javax_swing_plaf_basic / "BasicTabbedPaneUI$TabbedPaneLayout";
namespace javax::swing::plaf::basic { class BasicTabbedPaneUI$TabbedPaneScrollLayout; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTabbedPaneUI$TabbedPaneScrollLayout> = ::javax_swing_plaf_basic / "BasicTabbedPaneUI$TabbedPaneScrollLayout";
namespace javax::swing::plaf::basic { class BasicTableHeaderUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTableHeaderUI> = ::javax_swing_plaf_basic / "BasicTableHeaderUI";
namespace javax::swing::plaf::basic { class BasicTableHeaderUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTableHeaderUI$1> = ::javax_swing_plaf_basic / "BasicTableHeaderUI$1";
namespace javax::swing::plaf::basic { class BasicTableHeaderUI$Actions; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTableHeaderUI$Actions> = ::javax_swing_plaf_basic / "BasicTableHeaderUI$Actions";
namespace javax::swing::plaf::basic { class BasicTableHeaderUI$MouseInputHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTableHeaderUI$MouseInputHandler> = ::javax_swing_plaf_basic / "BasicTableHeaderUI$MouseInputHandler";
namespace javax::swing::plaf::basic { class BasicTableUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTableUI> = ::javax_swing_plaf_basic / "BasicTableUI";
namespace javax::swing::plaf::basic { class BasicTableUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTableUI$1> = ::javax_swing_plaf_basic / "BasicTableUI$1";
namespace javax::swing::plaf::basic { class BasicTableUI$Actions; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTableUI$Actions> = ::javax_swing_plaf_basic / "BasicTableUI$Actions";
namespace javax::swing::plaf::basic { class BasicTableUI$FocusHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTableUI$FocusHandler> = ::javax_swing_plaf_basic / "BasicTableUI$FocusHandler";
namespace javax::swing::plaf::basic { class BasicTableUI$Handler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTableUI$Handler> = ::javax_swing_plaf_basic / "BasicTableUI$Handler";
namespace javax::swing::plaf::basic { class BasicTableUI$KeyHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTableUI$KeyHandler> = ::javax_swing_plaf_basic / "BasicTableUI$KeyHandler";
namespace javax::swing::plaf::basic { class BasicTableUI$MouseInputHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTableUI$MouseInputHandler> = ::javax_swing_plaf_basic / "BasicTableUI$MouseInputHandler";
namespace javax::swing::plaf::basic { class BasicTableUI$TableTransferHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTableUI$TableTransferHandler> = ::javax_swing_plaf_basic / "BasicTableUI$TableTransferHandler";
namespace javax::swing::plaf::basic { class BasicTextAreaUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTextAreaUI> = ::javax_swing_plaf_basic / "BasicTextAreaUI";
namespace javax::swing::plaf::basic { class BasicTextAreaUI$PlainParagraph; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTextAreaUI$PlainParagraph> = ::javax_swing_plaf_basic / "BasicTextAreaUI$PlainParagraph";
namespace javax::swing::plaf::basic { class BasicTextAreaUI$PlainParagraph$LogicalView; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTextAreaUI$PlainParagraph$LogicalView> = ::javax_swing_plaf_basic / "BasicTextAreaUI$PlainParagraph$LogicalView";
namespace javax::swing::plaf::basic { class BasicTextFieldUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTextFieldUI> = ::javax_swing_plaf_basic / "BasicTextFieldUI";
namespace javax::swing::plaf::basic { class BasicTextFieldUI$I18nFieldView; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTextFieldUI$I18nFieldView> = ::javax_swing_plaf_basic / "BasicTextFieldUI$I18nFieldView";
namespace javax::swing::plaf::basic { class BasicTextPaneUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTextPaneUI> = ::javax_swing_plaf_basic / "BasicTextPaneUI";
namespace javax::swing::plaf::basic { class BasicTextUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTextUI> = ::javax_swing_plaf_basic / "BasicTextUI";
namespace javax::swing::plaf::basic { class BasicTextUI$BasicCaret; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTextUI$BasicCaret> = ::javax_swing_plaf_basic / "BasicTextUI$BasicCaret";
namespace javax::swing::plaf::basic { class BasicTextUI$BasicCursor; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTextUI$BasicCursor> = ::javax_swing_plaf_basic / "BasicTextUI$BasicCursor";
namespace javax::swing::plaf::basic { class BasicTextUI$BasicHighlighter; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTextUI$BasicHighlighter> = ::javax_swing_plaf_basic / "BasicTextUI$BasicHighlighter";
namespace javax::swing::plaf::basic { class BasicTextUI$DragListener; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTextUI$DragListener> = ::javax_swing_plaf_basic / "BasicTextUI$DragListener";
namespace javax::swing::plaf::basic { class BasicTextUI$FocusAction; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTextUI$FocusAction> = ::javax_swing_plaf_basic / "BasicTextUI$FocusAction";
namespace javax::swing::plaf::basic { class BasicTextUI$RootView; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTextUI$RootView> = ::javax_swing_plaf_basic / "BasicTextUI$RootView";
namespace javax::swing::plaf::basic { class BasicTextUI$TextActionWrapper; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTextUI$TextActionWrapper> = ::javax_swing_plaf_basic / "BasicTextUI$TextActionWrapper";
namespace javax::swing::plaf::basic { class BasicTextUI$TextTransferHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTextUI$TextTransferHandler> = ::javax_swing_plaf_basic / "BasicTextUI$TextTransferHandler";
namespace javax::swing::plaf::basic { class BasicTextUI$TextTransferHandler$TextTransferable; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTextUI$TextTransferHandler$TextTransferable> = ::javax_swing_plaf_basic / "BasicTextUI$TextTransferHandler$TextTransferable";
namespace javax::swing::plaf::basic { class BasicTextUI$UpdateHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTextUI$UpdateHandler> = ::javax_swing_plaf_basic / "BasicTextUI$UpdateHandler";
namespace javax::swing::plaf::basic { class BasicToggleButtonUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicToggleButtonUI> = ::javax_swing_plaf_basic / "BasicToggleButtonUI";
namespace javax::swing::plaf::basic { class BasicToolBarSeparatorUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicToolBarSeparatorUI> = ::javax_swing_plaf_basic / "BasicToolBarSeparatorUI";
namespace javax::swing::plaf::basic { class BasicToolBarUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicToolBarUI> = ::javax_swing_plaf_basic / "BasicToolBarUI";
namespace javax::swing::plaf::basic { class BasicToolBarUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicToolBarUI$1> = ::javax_swing_plaf_basic / "BasicToolBarUI$1";
namespace javax::swing::plaf::basic { class BasicToolBarUI$1$1; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicToolBarUI$1$1> = ::javax_swing_plaf_basic / "BasicToolBarUI$1$1";
namespace javax::swing::plaf::basic { class BasicToolBarUI$1ToolBarDialog; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicToolBarUI$1ToolBarDialog> = ::javax_swing_plaf_basic / "BasicToolBarUI$1ToolBarDialog";
namespace javax::swing::plaf::basic { class BasicToolBarUI$1ToolBarDialog$1; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicToolBarUI$1ToolBarDialog$1> = ::javax_swing_plaf_basic / "BasicToolBarUI$1ToolBarDialog$1";
namespace javax::swing::plaf::basic { class BasicToolBarUI$2; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicToolBarUI$2> = ::javax_swing_plaf_basic / "BasicToolBarUI$2";
namespace javax::swing::plaf::basic { class BasicToolBarUI$Actions; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicToolBarUI$Actions> = ::javax_swing_plaf_basic / "BasicToolBarUI$Actions";
namespace javax::swing::plaf::basic { class BasicToolBarUI$DockingListener; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicToolBarUI$DockingListener> = ::javax_swing_plaf_basic / "BasicToolBarUI$DockingListener";
namespace javax::swing::plaf::basic { class BasicToolBarUI$DragWindow; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicToolBarUI$DragWindow> = ::javax_swing_plaf_basic / "BasicToolBarUI$DragWindow";
namespace javax::swing::plaf::basic { class BasicToolBarUI$FrameListener; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicToolBarUI$FrameListener> = ::javax_swing_plaf_basic / "BasicToolBarUI$FrameListener";
namespace javax::swing::plaf::basic { class BasicToolBarUI$Handler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicToolBarUI$Handler> = ::javax_swing_plaf_basic / "BasicToolBarUI$Handler";
namespace javax::swing::plaf::basic { class BasicToolBarUI$PropertyListener; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicToolBarUI$PropertyListener> = ::javax_swing_plaf_basic / "BasicToolBarUI$PropertyListener";
namespace javax::swing::plaf::basic { class BasicToolBarUI$ToolBarContListener; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicToolBarUI$ToolBarContListener> = ::javax_swing_plaf_basic / "BasicToolBarUI$ToolBarContListener";
namespace javax::swing::plaf::basic { class BasicToolBarUI$ToolBarFocusListener; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicToolBarUI$ToolBarFocusListener> = ::javax_swing_plaf_basic / "BasicToolBarUI$ToolBarFocusListener";
namespace javax::swing::plaf::basic { class BasicToolTipUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicToolTipUI> = ::javax_swing_plaf_basic / "BasicToolTipUI";
namespace javax::swing::plaf::basic { class BasicToolTipUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicToolTipUI$1> = ::javax_swing_plaf_basic / "BasicToolTipUI$1";
namespace javax::swing::plaf::basic { class BasicToolTipUI$PropertyChangeHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicToolTipUI$PropertyChangeHandler> = ::javax_swing_plaf_basic / "BasicToolTipUI$PropertyChangeHandler";
namespace javax::swing::plaf::basic { class BasicTransferable; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTransferable> = ::javax_swing_plaf_basic / "BasicTransferable";
namespace javax::swing::plaf::basic { class BasicTreeUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTreeUI> = ::javax_swing_plaf_basic / "BasicTreeUI";
namespace javax::swing::plaf::basic { class BasicTreeUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTreeUI$1> = ::javax_swing_plaf_basic / "BasicTreeUI$1";
namespace javax::swing::plaf::basic { class BasicTreeUI$Actions; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTreeUI$Actions> = ::javax_swing_plaf_basic / "BasicTreeUI$Actions";
namespace javax::swing::plaf::basic { class BasicTreeUI$Actions$1; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTreeUI$Actions$1> = ::javax_swing_plaf_basic / "BasicTreeUI$Actions$1";
namespace javax::swing::plaf::basic { class BasicTreeUI$CellEditorHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTreeUI$CellEditorHandler> = ::javax_swing_plaf_basic / "BasicTreeUI$CellEditorHandler";
namespace javax::swing::plaf::basic { class BasicTreeUI$ComponentHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTreeUI$ComponentHandler> = ::javax_swing_plaf_basic / "BasicTreeUI$ComponentHandler";
namespace javax::swing::plaf::basic { class BasicTreeUI$FocusHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTreeUI$FocusHandler> = ::javax_swing_plaf_basic / "BasicTreeUI$FocusHandler";
namespace javax::swing::plaf::basic { class BasicTreeUI$Handler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTreeUI$Handler> = ::javax_swing_plaf_basic / "BasicTreeUI$Handler";
namespace javax::swing::plaf::basic { class BasicTreeUI$KeyHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTreeUI$KeyHandler> = ::javax_swing_plaf_basic / "BasicTreeUI$KeyHandler";
namespace javax::swing::plaf::basic { class BasicTreeUI$MouseHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTreeUI$MouseHandler> = ::javax_swing_plaf_basic / "BasicTreeUI$MouseHandler";
namespace javax::swing::plaf::basic { class BasicTreeUI$MouseInputHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTreeUI$MouseInputHandler> = ::javax_swing_plaf_basic / "BasicTreeUI$MouseInputHandler";
namespace javax::swing::plaf::basic { class BasicTreeUI$NodeDimensionsHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTreeUI$NodeDimensionsHandler> = ::javax_swing_plaf_basic / "BasicTreeUI$NodeDimensionsHandler";
namespace javax::swing::plaf::basic { class BasicTreeUI$PropertyChangeHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTreeUI$PropertyChangeHandler> = ::javax_swing_plaf_basic / "BasicTreeUI$PropertyChangeHandler";
namespace javax::swing::plaf::basic { class BasicTreeUI$SelectionModelPropertyChangeHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTreeUI$SelectionModelPropertyChangeHandler> = ::javax_swing_plaf_basic / "BasicTreeUI$SelectionModelPropertyChangeHandler";
namespace javax::swing::plaf::basic { class BasicTreeUI$TreeCancelEditingAction; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTreeUI$TreeCancelEditingAction> = ::javax_swing_plaf_basic / "BasicTreeUI$TreeCancelEditingAction";
namespace javax::swing::plaf::basic { class BasicTreeUI$TreeExpansionHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTreeUI$TreeExpansionHandler> = ::javax_swing_plaf_basic / "BasicTreeUI$TreeExpansionHandler";
namespace javax::swing::plaf::basic { class BasicTreeUI$TreeHomeAction; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTreeUI$TreeHomeAction> = ::javax_swing_plaf_basic / "BasicTreeUI$TreeHomeAction";
namespace javax::swing::plaf::basic { class BasicTreeUI$TreeIncrementAction; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTreeUI$TreeIncrementAction> = ::javax_swing_plaf_basic / "BasicTreeUI$TreeIncrementAction";
namespace javax::swing::plaf::basic { class BasicTreeUI$TreeModelHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTreeUI$TreeModelHandler> = ::javax_swing_plaf_basic / "BasicTreeUI$TreeModelHandler";
namespace javax::swing::plaf::basic { class BasicTreeUI$TreePageAction; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTreeUI$TreePageAction> = ::javax_swing_plaf_basic / "BasicTreeUI$TreePageAction";
namespace javax::swing::plaf::basic { class BasicTreeUI$TreeSelectionHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTreeUI$TreeSelectionHandler> = ::javax_swing_plaf_basic / "BasicTreeUI$TreeSelectionHandler";
namespace javax::swing::plaf::basic { class BasicTreeUI$TreeToggleAction; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTreeUI$TreeToggleAction> = ::javax_swing_plaf_basic / "BasicTreeUI$TreeToggleAction";
namespace javax::swing::plaf::basic { class BasicTreeUI$TreeTransferHandler; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTreeUI$TreeTransferHandler> = ::javax_swing_plaf_basic / "BasicTreeUI$TreeTransferHandler";
namespace javax::swing::plaf::basic { class BasicTreeUI$TreeTraverseAction; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicTreeUI$TreeTraverseAction> = ::javax_swing_plaf_basic / "BasicTreeUI$TreeTraverseAction";
namespace javax::swing::plaf::basic { class BasicViewportUI; }
template<> constexpr auto signature<::javax::swing::plaf::basic::BasicViewportUI> = ::javax_swing_plaf_basic / "BasicViewportUI";
namespace javax::swing::plaf::basic { class CenterLayout; }
template<> constexpr auto signature<::javax::swing::plaf::basic::CenterLayout> = ::javax_swing_plaf_basic / "CenterLayout";
namespace javax::swing::plaf::basic { class ComboPopup; }
template<> constexpr auto signature<::javax::swing::plaf::basic::ComboPopup> = ::javax_swing_plaf_basic / "ComboPopup";
namespace javax::swing::plaf::basic { class DefaultMenuLayout; }
template<> constexpr auto signature<::javax::swing::plaf::basic::DefaultMenuLayout> = ::javax_swing_plaf_basic / "DefaultMenuLayout";
namespace javax::swing::plaf::basic { class DragRecognitionSupport; }
template<> constexpr auto signature<::javax::swing::plaf::basic::DragRecognitionSupport> = ::javax_swing_plaf_basic / "DragRecognitionSupport";
namespace javax::swing::plaf::basic { class DragRecognitionSupport$BeforeDrag; }
template<> constexpr auto signature<::javax::swing::plaf::basic::DragRecognitionSupport$BeforeDrag> = ::javax_swing_plaf_basic / "DragRecognitionSupport$BeforeDrag";
namespace javax::swing::plaf::basic { class LazyActionMap; }
template<> constexpr auto signature<::javax::swing::plaf::basic::LazyActionMap> = ::javax_swing_plaf_basic / "LazyActionMap";
namespace javax::swing::plaf::metal { class BumpBuffer; }
template<> constexpr auto signature<::javax::swing::plaf::metal::BumpBuffer> = ::javax_swing_plaf_metal / "BumpBuffer";
namespace javax::swing::plaf::metal { class DefaultMetalTheme; }
template<> constexpr auto signature<::javax::swing::plaf::metal::DefaultMetalTheme> = ::javax_swing_plaf_metal / "DefaultMetalTheme";
namespace javax::swing::plaf::metal { class DefaultMetalTheme$FontDelegate; }
template<> constexpr auto signature<::javax::swing::plaf::metal::DefaultMetalTheme$FontDelegate> = ::javax_swing_plaf_metal / "DefaultMetalTheme$FontDelegate";
namespace javax::swing::plaf::metal { class DefaultMetalTheme$FontDelegate$1; }
template<> constexpr auto signature<::javax::swing::plaf::metal::DefaultMetalTheme$FontDelegate$1> = ::javax_swing_plaf_metal / "DefaultMetalTheme$FontDelegate$1";
namespace javax::swing::plaf::metal { class DefaultMetalTheme$WindowsFontDelegate; }
template<> constexpr auto signature<::javax::swing::plaf::metal::DefaultMetalTheme$WindowsFontDelegate> = ::javax_swing_plaf_metal / "DefaultMetalTheme$WindowsFontDelegate";
namespace javax::swing::plaf::metal { class MetalBorders; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalBorders> = ::javax_swing_plaf_metal / "MetalBorders";
namespace javax::swing::plaf::metal { class MetalBorders$ButtonBorder; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalBorders$ButtonBorder> = ::javax_swing_plaf_metal / "MetalBorders$ButtonBorder";
namespace javax::swing::plaf::metal { class MetalBorders$DialogBorder; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalBorders$DialogBorder> = ::javax_swing_plaf_metal / "MetalBorders$DialogBorder";
namespace javax::swing::plaf::metal { class MetalBorders$ErrorDialogBorder; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalBorders$ErrorDialogBorder> = ::javax_swing_plaf_metal / "MetalBorders$ErrorDialogBorder";
namespace javax::swing::plaf::metal { class MetalBorders$Flush3DBorder; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalBorders$Flush3DBorder> = ::javax_swing_plaf_metal / "MetalBorders$Flush3DBorder";
namespace javax::swing::plaf::metal { class MetalBorders$FrameBorder; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalBorders$FrameBorder> = ::javax_swing_plaf_metal / "MetalBorders$FrameBorder";
namespace javax::swing::plaf::metal { class MetalBorders$InternalFrameBorder; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalBorders$InternalFrameBorder> = ::javax_swing_plaf_metal / "MetalBorders$InternalFrameBorder";
namespace javax::swing::plaf::metal { class MetalBorders$MenuBarBorder; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalBorders$MenuBarBorder> = ::javax_swing_plaf_metal / "MetalBorders$MenuBarBorder";
namespace javax::swing::plaf::metal { class MetalBorders$MenuItemBorder; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalBorders$MenuItemBorder> = ::javax_swing_plaf_metal / "MetalBorders$MenuItemBorder";
namespace javax::swing::plaf::metal { class MetalBorders$OptionDialogBorder; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalBorders$OptionDialogBorder> = ::javax_swing_plaf_metal / "MetalBorders$OptionDialogBorder";
namespace javax::swing::plaf::metal { class MetalBorders$PaletteBorder; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalBorders$PaletteBorder> = ::javax_swing_plaf_metal / "MetalBorders$PaletteBorder";
namespace javax::swing::plaf::metal { class MetalBorders$PopupMenuBorder; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalBorders$PopupMenuBorder> = ::javax_swing_plaf_metal / "MetalBorders$PopupMenuBorder";
namespace javax::swing::plaf::metal { class MetalBorders$QuestionDialogBorder; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalBorders$QuestionDialogBorder> = ::javax_swing_plaf_metal / "MetalBorders$QuestionDialogBorder";
namespace javax::swing::plaf::metal { class MetalBorders$RolloverButtonBorder; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalBorders$RolloverButtonBorder> = ::javax_swing_plaf_metal / "MetalBorders$RolloverButtonBorder";
namespace javax::swing::plaf::metal { class MetalBorders$RolloverMarginBorder; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalBorders$RolloverMarginBorder> = ::javax_swing_plaf_metal / "MetalBorders$RolloverMarginBorder";
namespace javax::swing::plaf::metal { class MetalBorders$ScrollPaneBorder; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalBorders$ScrollPaneBorder> = ::javax_swing_plaf_metal / "MetalBorders$ScrollPaneBorder";
namespace javax::swing::plaf::metal { class MetalBorders$TableHeaderBorder; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalBorders$TableHeaderBorder> = ::javax_swing_plaf_metal / "MetalBorders$TableHeaderBorder";
namespace javax::swing::plaf::metal { class MetalBorders$TextFieldBorder; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalBorders$TextFieldBorder> = ::javax_swing_plaf_metal / "MetalBorders$TextFieldBorder";
namespace javax::swing::plaf::metal { class MetalBorders$ToggleButtonBorder; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalBorders$ToggleButtonBorder> = ::javax_swing_plaf_metal / "MetalBorders$ToggleButtonBorder";
namespace javax::swing::plaf::metal { class MetalBorders$ToolBarBorder; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalBorders$ToolBarBorder> = ::javax_swing_plaf_metal / "MetalBorders$ToolBarBorder";
namespace javax::swing::plaf::metal { class MetalBorders$WarningDialogBorder; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalBorders$WarningDialogBorder> = ::javax_swing_plaf_metal / "MetalBorders$WarningDialogBorder";
namespace javax::swing::plaf::metal { class MetalBumps; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalBumps> = ::javax_swing_plaf_metal / "MetalBumps";
namespace javax::swing::plaf::metal { class MetalButtonUI; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalButtonUI> = ::javax_swing_plaf_metal / "MetalButtonUI";
namespace javax::swing::plaf::metal { class MetalCheckBoxIcon; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalCheckBoxIcon> = ::javax_swing_plaf_metal / "MetalCheckBoxIcon";
namespace javax::swing::plaf::metal { class MetalCheckBoxUI; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalCheckBoxUI> = ::javax_swing_plaf_metal / "MetalCheckBoxUI";
namespace javax::swing::plaf::metal { class MetalComboBoxButton; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalComboBoxButton> = ::javax_swing_plaf_metal / "MetalComboBoxButton";
namespace javax::swing::plaf::metal { class MetalComboBoxButton$1; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalComboBoxButton$1> = ::javax_swing_plaf_metal / "MetalComboBoxButton$1";
namespace javax::swing::plaf::metal { class MetalComboBoxEditor; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalComboBoxEditor> = ::javax_swing_plaf_metal / "MetalComboBoxEditor";
namespace javax::swing::plaf::metal { class MetalComboBoxEditor$1; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalComboBoxEditor$1> = ::javax_swing_plaf_metal / "MetalComboBoxEditor$1";
namespace javax::swing::plaf::metal { class MetalComboBoxEditor$EditorBorder; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalComboBoxEditor$EditorBorder> = ::javax_swing_plaf_metal / "MetalComboBoxEditor$EditorBorder";
namespace javax::swing::plaf::metal { class MetalComboBoxEditor$UIResource; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalComboBoxEditor$UIResource> = ::javax_swing_plaf_metal / "MetalComboBoxEditor$UIResource";
namespace javax::swing::plaf::metal { class MetalComboBoxIcon; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalComboBoxIcon> = ::javax_swing_plaf_metal / "MetalComboBoxIcon";
namespace javax::swing::plaf::metal { class MetalComboBoxUI; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalComboBoxUI> = ::javax_swing_plaf_metal / "MetalComboBoxUI";
namespace javax::swing::plaf::metal { class MetalComboBoxUI$MetalComboBoxLayoutManager; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalComboBoxUI$MetalComboBoxLayoutManager> = ::javax_swing_plaf_metal / "MetalComboBoxUI$MetalComboBoxLayoutManager";
namespace javax::swing::plaf::metal { class MetalComboBoxUI$MetalComboPopup; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalComboBoxUI$MetalComboPopup> = ::javax_swing_plaf_metal / "MetalComboBoxUI$MetalComboPopup";
namespace javax::swing::plaf::metal { class MetalComboBoxUI$MetalPropertyChangeListener; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalComboBoxUI$MetalPropertyChangeListener> = ::javax_swing_plaf_metal / "MetalComboBoxUI$MetalPropertyChangeListener";
namespace javax::swing::plaf::metal { class MetalDesktopIconUI; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalDesktopIconUI> = ::javax_swing_plaf_metal / "MetalDesktopIconUI";
namespace javax::swing::plaf::metal { class MetalDesktopIconUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalDesktopIconUI$1> = ::javax_swing_plaf_metal / "MetalDesktopIconUI$1";
namespace javax::swing::plaf::metal { class MetalDesktopIconUI$TitleListener; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalDesktopIconUI$TitleListener> = ::javax_swing_plaf_metal / "MetalDesktopIconUI$TitleListener";
namespace javax::swing::plaf::metal { class MetalFileChooserUI; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalFileChooserUI> = ::javax_swing_plaf_metal / "MetalFileChooserUI";
namespace javax::swing::plaf::metal { class MetalFileChooserUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalFileChooserUI$1> = ::javax_swing_plaf_metal / "MetalFileChooserUI$1";
namespace javax::swing::plaf::metal { class MetalFileChooserUI$2; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalFileChooserUI$2> = ::javax_swing_plaf_metal / "MetalFileChooserUI$2";
namespace javax::swing::plaf::metal { class MetalFileChooserUI$3; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalFileChooserUI$3> = ::javax_swing_plaf_metal / "MetalFileChooserUI$3";
namespace javax::swing::plaf::metal { class MetalFileChooserUI$4; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalFileChooserUI$4> = ::javax_swing_plaf_metal / "MetalFileChooserUI$4";
namespace javax::swing::plaf::metal { class MetalFileChooserUI$5; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalFileChooserUI$5> = ::javax_swing_plaf_metal / "MetalFileChooserUI$5";
namespace javax::swing::plaf::metal { class MetalFileChooserUI$AlignedLabel; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalFileChooserUI$AlignedLabel> = ::javax_swing_plaf_metal / "MetalFileChooserUI$AlignedLabel";
namespace javax::swing::plaf::metal { class MetalFileChooserUI$ButtonAreaLayout; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalFileChooserUI$ButtonAreaLayout> = ::javax_swing_plaf_metal / "MetalFileChooserUI$ButtonAreaLayout";
namespace javax::swing::plaf::metal { class MetalFileChooserUI$DirectoryComboBoxAction; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalFileChooserUI$DirectoryComboBoxAction> = ::javax_swing_plaf_metal / "MetalFileChooserUI$DirectoryComboBoxAction";
namespace javax::swing::plaf::metal { class MetalFileChooserUI$DirectoryComboBoxModel; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalFileChooserUI$DirectoryComboBoxModel> = ::javax_swing_plaf_metal / "MetalFileChooserUI$DirectoryComboBoxModel";
namespace javax::swing::plaf::metal { class MetalFileChooserUI$DirectoryComboBoxRenderer; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalFileChooserUI$DirectoryComboBoxRenderer> = ::javax_swing_plaf_metal / "MetalFileChooserUI$DirectoryComboBoxRenderer";
namespace javax::swing::plaf::metal { class MetalFileChooserUI$FileRenderer; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalFileChooserUI$FileRenderer> = ::javax_swing_plaf_metal / "MetalFileChooserUI$FileRenderer";
namespace javax::swing::plaf::metal { class MetalFileChooserUI$FilterComboBoxModel; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalFileChooserUI$FilterComboBoxModel> = ::javax_swing_plaf_metal / "MetalFileChooserUI$FilterComboBoxModel";
namespace javax::swing::plaf::metal { class MetalFileChooserUI$FilterComboBoxRenderer; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalFileChooserUI$FilterComboBoxRenderer> = ::javax_swing_plaf_metal / "MetalFileChooserUI$FilterComboBoxRenderer";
namespace javax::swing::plaf::metal { class MetalFileChooserUI$IndentIcon; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalFileChooserUI$IndentIcon> = ::javax_swing_plaf_metal / "MetalFileChooserUI$IndentIcon";
namespace javax::swing::plaf::metal { class MetalFileChooserUI$MetalFileChooserUIAccessor; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalFileChooserUI$MetalFileChooserUIAccessor> = ::javax_swing_plaf_metal / "MetalFileChooserUI$MetalFileChooserUIAccessor";
namespace javax::swing::plaf::metal { class MetalFileChooserUI$SingleClickListener; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalFileChooserUI$SingleClickListener> = ::javax_swing_plaf_metal / "MetalFileChooserUI$SingleClickListener";
namespace javax::swing::plaf::metal { class MetalFontDesktopProperty; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalFontDesktopProperty> = ::javax_swing_plaf_metal / "MetalFontDesktopProperty";
namespace javax::swing::plaf::metal { class MetalHighContrastTheme; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalHighContrastTheme> = ::javax_swing_plaf_metal / "MetalHighContrastTheme";
namespace javax::swing::plaf::metal { class MetalIconFactory; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalIconFactory> = ::javax_swing_plaf_metal / "MetalIconFactory";
namespace javax::swing::plaf::metal { class MetalIconFactory$1; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalIconFactory$1> = ::javax_swing_plaf_metal / "MetalIconFactory$1";
namespace javax::swing::plaf::metal { class MetalIconFactory$CheckBoxIcon; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalIconFactory$CheckBoxIcon> = ::javax_swing_plaf_metal / "MetalIconFactory$CheckBoxIcon";
namespace javax::swing::plaf::metal { class MetalIconFactory$CheckBoxMenuItemIcon; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalIconFactory$CheckBoxMenuItemIcon> = ::javax_swing_plaf_metal / "MetalIconFactory$CheckBoxMenuItemIcon";
namespace javax::swing::plaf::metal { class MetalIconFactory$FileChooserDetailViewIcon; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalIconFactory$FileChooserDetailViewIcon> = ::javax_swing_plaf_metal / "MetalIconFactory$FileChooserDetailViewIcon";
namespace javax::swing::plaf::metal { class MetalIconFactory$FileChooserHomeFolderIcon; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalIconFactory$FileChooserHomeFolderIcon> = ::javax_swing_plaf_metal / "MetalIconFactory$FileChooserHomeFolderIcon";
namespace javax::swing::plaf::metal { class MetalIconFactory$FileChooserListViewIcon; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalIconFactory$FileChooserListViewIcon> = ::javax_swing_plaf_metal / "MetalIconFactory$FileChooserListViewIcon";
namespace javax::swing::plaf::metal { class MetalIconFactory$FileChooserNewFolderIcon; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalIconFactory$FileChooserNewFolderIcon> = ::javax_swing_plaf_metal / "MetalIconFactory$FileChooserNewFolderIcon";
namespace javax::swing::plaf::metal { class MetalIconFactory$FileChooserUpFolderIcon; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalIconFactory$FileChooserUpFolderIcon> = ::javax_swing_plaf_metal / "MetalIconFactory$FileChooserUpFolderIcon";
namespace javax::swing::plaf::metal { class MetalIconFactory$FileIcon16; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalIconFactory$FileIcon16> = ::javax_swing_plaf_metal / "MetalIconFactory$FileIcon16";
namespace javax::swing::plaf::metal { class MetalIconFactory$FolderIcon16; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalIconFactory$FolderIcon16> = ::javax_swing_plaf_metal / "MetalIconFactory$FolderIcon16";
namespace javax::swing::plaf::metal { class MetalIconFactory$HorizontalSliderThumbIcon; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalIconFactory$HorizontalSliderThumbIcon> = ::javax_swing_plaf_metal / "MetalIconFactory$HorizontalSliderThumbIcon";
namespace javax::swing::plaf::metal { class MetalIconFactory$ImageCacher; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalIconFactory$ImageCacher> = ::javax_swing_plaf_metal / "MetalIconFactory$ImageCacher";
namespace javax::swing::plaf::metal { class MetalIconFactory$ImageCacher$ImageGcPair; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalIconFactory$ImageCacher$ImageGcPair> = ::javax_swing_plaf_metal / "MetalIconFactory$ImageCacher$ImageGcPair";
namespace javax::swing::plaf::metal { class MetalIconFactory$InternalFrameAltMaximizeIcon; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalIconFactory$InternalFrameAltMaximizeIcon> = ::javax_swing_plaf_metal / "MetalIconFactory$InternalFrameAltMaximizeIcon";
namespace javax::swing::plaf::metal { class MetalIconFactory$InternalFrameCloseIcon; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalIconFactory$InternalFrameCloseIcon> = ::javax_swing_plaf_metal / "MetalIconFactory$InternalFrameCloseIcon";
namespace javax::swing::plaf::metal { class MetalIconFactory$InternalFrameDefaultMenuIcon; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalIconFactory$InternalFrameDefaultMenuIcon> = ::javax_swing_plaf_metal / "MetalIconFactory$InternalFrameDefaultMenuIcon";
namespace javax::swing::plaf::metal { class MetalIconFactory$InternalFrameMaximizeIcon; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalIconFactory$InternalFrameMaximizeIcon> = ::javax_swing_plaf_metal / "MetalIconFactory$InternalFrameMaximizeIcon";
namespace javax::swing::plaf::metal { class MetalIconFactory$InternalFrameMinimizeIcon; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalIconFactory$InternalFrameMinimizeIcon> = ::javax_swing_plaf_metal / "MetalIconFactory$InternalFrameMinimizeIcon";
namespace javax::swing::plaf::metal { class MetalIconFactory$MenuArrowIcon; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalIconFactory$MenuArrowIcon> = ::javax_swing_plaf_metal / "MetalIconFactory$MenuArrowIcon";
namespace javax::swing::plaf::metal { class MetalIconFactory$MenuItemArrowIcon; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalIconFactory$MenuItemArrowIcon> = ::javax_swing_plaf_metal / "MetalIconFactory$MenuItemArrowIcon";
namespace javax::swing::plaf::metal { class MetalIconFactory$OceanHorizontalSliderThumbIcon; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalIconFactory$OceanHorizontalSliderThumbIcon> = ::javax_swing_plaf_metal / "MetalIconFactory$OceanHorizontalSliderThumbIcon";
namespace javax::swing::plaf::metal { class MetalIconFactory$OceanVerticalSliderThumbIcon; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalIconFactory$OceanVerticalSliderThumbIcon> = ::javax_swing_plaf_metal / "MetalIconFactory$OceanVerticalSliderThumbIcon";
namespace javax::swing::plaf::metal { class MetalIconFactory$PaletteCloseIcon; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalIconFactory$PaletteCloseIcon> = ::javax_swing_plaf_metal / "MetalIconFactory$PaletteCloseIcon";
namespace javax::swing::plaf::metal { class MetalIconFactory$RadioButtonIcon; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalIconFactory$RadioButtonIcon> = ::javax_swing_plaf_metal / "MetalIconFactory$RadioButtonIcon";
namespace javax::swing::plaf::metal { class MetalIconFactory$RadioButtonMenuItemIcon; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalIconFactory$RadioButtonMenuItemIcon> = ::javax_swing_plaf_metal / "MetalIconFactory$RadioButtonMenuItemIcon";
namespace javax::swing::plaf::metal { class MetalIconFactory$TreeComputerIcon; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalIconFactory$TreeComputerIcon> = ::javax_swing_plaf_metal / "MetalIconFactory$TreeComputerIcon";
namespace javax::swing::plaf::metal { class MetalIconFactory$TreeControlIcon; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalIconFactory$TreeControlIcon> = ::javax_swing_plaf_metal / "MetalIconFactory$TreeControlIcon";
namespace javax::swing::plaf::metal { class MetalIconFactory$TreeFloppyDriveIcon; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalIconFactory$TreeFloppyDriveIcon> = ::javax_swing_plaf_metal / "MetalIconFactory$TreeFloppyDriveIcon";
namespace javax::swing::plaf::metal { class MetalIconFactory$TreeFolderIcon; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalIconFactory$TreeFolderIcon> = ::javax_swing_plaf_metal / "MetalIconFactory$TreeFolderIcon";
namespace javax::swing::plaf::metal { class MetalIconFactory$TreeHardDriveIcon; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalIconFactory$TreeHardDriveIcon> = ::javax_swing_plaf_metal / "MetalIconFactory$TreeHardDriveIcon";
namespace javax::swing::plaf::metal { class MetalIconFactory$TreeLeafIcon; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalIconFactory$TreeLeafIcon> = ::javax_swing_plaf_metal / "MetalIconFactory$TreeLeafIcon";
namespace javax::swing::plaf::metal { class MetalIconFactory$VerticalSliderThumbIcon; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalIconFactory$VerticalSliderThumbIcon> = ::javax_swing_plaf_metal / "MetalIconFactory$VerticalSliderThumbIcon";
namespace javax::swing::plaf::metal { class MetalInternalFrameTitlePane; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalInternalFrameTitlePane> = ::javax_swing_plaf_metal / "MetalInternalFrameTitlePane";
namespace javax::swing::plaf::metal { class MetalInternalFrameTitlePane$MetalPropertyChangeHandler; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalInternalFrameTitlePane$MetalPropertyChangeHandler> = ::javax_swing_plaf_metal / "MetalInternalFrameTitlePane$MetalPropertyChangeHandler";
namespace javax::swing::plaf::metal { class MetalInternalFrameTitlePane$MetalTitlePaneLayout; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalInternalFrameTitlePane$MetalTitlePaneLayout> = ::javax_swing_plaf_metal / "MetalInternalFrameTitlePane$MetalTitlePaneLayout";
namespace javax::swing::plaf::metal { class MetalInternalFrameUI; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalInternalFrameUI> = ::javax_swing_plaf_metal / "MetalInternalFrameUI";
namespace javax::swing::plaf::metal { class MetalInternalFrameUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalInternalFrameUI$1> = ::javax_swing_plaf_metal / "MetalInternalFrameUI$1";
namespace javax::swing::plaf::metal { class MetalInternalFrameUI$BorderListener1; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalInternalFrameUI$BorderListener1> = ::javax_swing_plaf_metal / "MetalInternalFrameUI$BorderListener1";
namespace javax::swing::plaf::metal { class MetalInternalFrameUI$MetalPropertyChangeHandler; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalInternalFrameUI$MetalPropertyChangeHandler> = ::javax_swing_plaf_metal / "MetalInternalFrameUI$MetalPropertyChangeHandler";
namespace javax::swing::plaf::metal { class MetalLabelUI; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalLabelUI> = ::javax_swing_plaf_metal / "MetalLabelUI";
namespace javax::swing::plaf::metal { class MetalLookAndFeel; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalLookAndFeel> = ::javax_swing_plaf_metal / "MetalLookAndFeel";
namespace javax::swing::plaf::metal { class MetalLookAndFeel$1; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalLookAndFeel$1> = ::javax_swing_plaf_metal / "MetalLookAndFeel$1";
namespace javax::swing::plaf::metal { class MetalLookAndFeel$AATextListener; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalLookAndFeel$AATextListener> = ::javax_swing_plaf_metal / "MetalLookAndFeel$AATextListener";
namespace javax::swing::plaf::metal { class MetalLookAndFeel$AATextListener$1; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalLookAndFeel$AATextListener$1> = ::javax_swing_plaf_metal / "MetalLookAndFeel$AATextListener$1";
namespace javax::swing::plaf::metal { class MetalLookAndFeel$FontActiveValue; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalLookAndFeel$FontActiveValue> = ::javax_swing_plaf_metal / "MetalLookAndFeel$FontActiveValue";
namespace javax::swing::plaf::metal { class MetalLookAndFeel$MetalLayoutStyle; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalLookAndFeel$MetalLayoutStyle> = ::javax_swing_plaf_metal / "MetalLookAndFeel$MetalLayoutStyle";
namespace javax::swing::plaf::metal { class MetalMenuBarUI; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalMenuBarUI> = ::javax_swing_plaf_metal / "MetalMenuBarUI";
namespace javax::swing::plaf::metal { class MetalPopupMenuSeparatorUI; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalPopupMenuSeparatorUI> = ::javax_swing_plaf_metal / "MetalPopupMenuSeparatorUI";
namespace javax::swing::plaf::metal { class MetalProgressBarUI; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalProgressBarUI> = ::javax_swing_plaf_metal / "MetalProgressBarUI";
namespace javax::swing::plaf::metal { class MetalRadioButtonUI; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalRadioButtonUI> = ::javax_swing_plaf_metal / "MetalRadioButtonUI";
namespace javax::swing::plaf::metal { class MetalRootPaneUI; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalRootPaneUI> = ::javax_swing_plaf_metal / "MetalRootPaneUI";
namespace javax::swing::plaf::metal { class MetalRootPaneUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalRootPaneUI$1> = ::javax_swing_plaf_metal / "MetalRootPaneUI$1";
namespace javax::swing::plaf::metal { class MetalRootPaneUI$MetalRootLayout; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalRootPaneUI$MetalRootLayout> = ::javax_swing_plaf_metal / "MetalRootPaneUI$MetalRootLayout";
namespace javax::swing::plaf::metal { class MetalRootPaneUI$MouseInputHandler; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalRootPaneUI$MouseInputHandler> = ::javax_swing_plaf_metal / "MetalRootPaneUI$MouseInputHandler";
namespace javax::swing::plaf::metal { class MetalScrollBarUI; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalScrollBarUI> = ::javax_swing_plaf_metal / "MetalScrollBarUI";
namespace javax::swing::plaf::metal { class MetalScrollBarUI$ScrollBarListener; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalScrollBarUI$ScrollBarListener> = ::javax_swing_plaf_metal / "MetalScrollBarUI$ScrollBarListener";
namespace javax::swing::plaf::metal { class MetalScrollButton; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalScrollButton> = ::javax_swing_plaf_metal / "MetalScrollButton";
namespace javax::swing::plaf::metal { class MetalScrollPaneUI; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalScrollPaneUI> = ::javax_swing_plaf_metal / "MetalScrollPaneUI";
namespace javax::swing::plaf::metal { class MetalScrollPaneUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalScrollPaneUI$1> = ::javax_swing_plaf_metal / "MetalScrollPaneUI$1";
namespace javax::swing::plaf::metal { class MetalSeparatorUI; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalSeparatorUI> = ::javax_swing_plaf_metal / "MetalSeparatorUI";
namespace javax::swing::plaf::metal { class MetalSliderUI; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalSliderUI> = ::javax_swing_plaf_metal / "MetalSliderUI";
namespace javax::swing::plaf::metal { class MetalSliderUI$MetalPropertyListener; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalSliderUI$MetalPropertyListener> = ::javax_swing_plaf_metal / "MetalSliderUI$MetalPropertyListener";
namespace javax::swing::plaf::metal { class MetalSplitPaneDivider; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalSplitPaneDivider> = ::javax_swing_plaf_metal / "MetalSplitPaneDivider";
namespace javax::swing::plaf::metal { class MetalSplitPaneDivider$1; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalSplitPaneDivider$1> = ::javax_swing_plaf_metal / "MetalSplitPaneDivider$1";
namespace javax::swing::plaf::metal { class MetalSplitPaneDivider$2; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalSplitPaneDivider$2> = ::javax_swing_plaf_metal / "MetalSplitPaneDivider$2";
namespace javax::swing::plaf::metal { class MetalSplitPaneDivider$MetalDividerLayout; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalSplitPaneDivider$MetalDividerLayout> = ::javax_swing_plaf_metal / "MetalSplitPaneDivider$MetalDividerLayout";
namespace javax::swing::plaf::metal { class MetalSplitPaneUI; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalSplitPaneUI> = ::javax_swing_plaf_metal / "MetalSplitPaneUI";
namespace javax::swing::plaf::metal { class MetalTabbedPaneUI; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalTabbedPaneUI> = ::javax_swing_plaf_metal / "MetalTabbedPaneUI";
namespace javax::swing::plaf::metal { class MetalTabbedPaneUI$TabbedPaneLayout; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalTabbedPaneUI$TabbedPaneLayout> = ::javax_swing_plaf_metal / "MetalTabbedPaneUI$TabbedPaneLayout";
namespace javax::swing::plaf::metal { class MetalTextFieldUI; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalTextFieldUI> = ::javax_swing_plaf_metal / "MetalTextFieldUI";
namespace javax::swing::plaf::metal { class MetalTheme; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalTheme> = ::javax_swing_plaf_metal / "MetalTheme";
namespace javax::swing::plaf::metal { class MetalTitlePane; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalTitlePane> = ::javax_swing_plaf_metal / "MetalTitlePane";
namespace javax::swing::plaf::metal { class MetalTitlePane$1; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalTitlePane$1> = ::javax_swing_plaf_metal / "MetalTitlePane$1";
namespace javax::swing::plaf::metal { class MetalTitlePane$CloseAction; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalTitlePane$CloseAction> = ::javax_swing_plaf_metal / "MetalTitlePane$CloseAction";
namespace javax::swing::plaf::metal { class MetalTitlePane$IconifyAction; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalTitlePane$IconifyAction> = ::javax_swing_plaf_metal / "MetalTitlePane$IconifyAction";
namespace javax::swing::plaf::metal { class MetalTitlePane$MaximizeAction; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalTitlePane$MaximizeAction> = ::javax_swing_plaf_metal / "MetalTitlePane$MaximizeAction";
namespace javax::swing::plaf::metal { class MetalTitlePane$PropertyChangeHandler; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalTitlePane$PropertyChangeHandler> = ::javax_swing_plaf_metal / "MetalTitlePane$PropertyChangeHandler";
namespace javax::swing::plaf::metal { class MetalTitlePane$RestoreAction; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalTitlePane$RestoreAction> = ::javax_swing_plaf_metal / "MetalTitlePane$RestoreAction";
namespace javax::swing::plaf::metal { class MetalTitlePane$SystemMenuBar; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalTitlePane$SystemMenuBar> = ::javax_swing_plaf_metal / "MetalTitlePane$SystemMenuBar";
namespace javax::swing::plaf::metal { class MetalTitlePane$TitlePaneLayout; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalTitlePane$TitlePaneLayout> = ::javax_swing_plaf_metal / "MetalTitlePane$TitlePaneLayout";
namespace javax::swing::plaf::metal { class MetalTitlePane$WindowHandler; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalTitlePane$WindowHandler> = ::javax_swing_plaf_metal / "MetalTitlePane$WindowHandler";
namespace javax::swing::plaf::metal { class MetalToggleButtonUI; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalToggleButtonUI> = ::javax_swing_plaf_metal / "MetalToggleButtonUI";
namespace javax::swing::plaf::metal { class MetalToolBarUI; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalToolBarUI> = ::javax_swing_plaf_metal / "MetalToolBarUI";
namespace javax::swing::plaf::metal { class MetalToolBarUI$MetalContainerListener; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalToolBarUI$MetalContainerListener> = ::javax_swing_plaf_metal / "MetalToolBarUI$MetalContainerListener";
namespace javax::swing::plaf::metal { class MetalToolBarUI$MetalDockingListener; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalToolBarUI$MetalDockingListener> = ::javax_swing_plaf_metal / "MetalToolBarUI$MetalDockingListener";
namespace javax::swing::plaf::metal { class MetalToolBarUI$MetalRolloverListener; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalToolBarUI$MetalRolloverListener> = ::javax_swing_plaf_metal / "MetalToolBarUI$MetalRolloverListener";
namespace javax::swing::plaf::metal { class MetalToolTipUI; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalToolTipUI> = ::javax_swing_plaf_metal / "MetalToolTipUI";
namespace javax::swing::plaf::metal { class MetalTreeUI; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalTreeUI> = ::javax_swing_plaf_metal / "MetalTreeUI";
namespace javax::swing::plaf::metal { class MetalTreeUI$LineListener; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalTreeUI$LineListener> = ::javax_swing_plaf_metal / "MetalTreeUI$LineListener";
namespace javax::swing::plaf::metal { class MetalUtils; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalUtils> = ::javax_swing_plaf_metal / "MetalUtils";
namespace javax::swing::plaf::metal { class MetalUtils$GradientPainter; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalUtils$GradientPainter> = ::javax_swing_plaf_metal / "MetalUtils$GradientPainter";
namespace javax::swing::plaf::metal { class MetalUtils$OceanDisabledButtonImageFilter; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalUtils$OceanDisabledButtonImageFilter> = ::javax_swing_plaf_metal / "MetalUtils$OceanDisabledButtonImageFilter";
namespace javax::swing::plaf::metal { class MetalUtils$OceanToolBarImageFilter; }
template<> constexpr auto signature<::javax::swing::plaf::metal::MetalUtils$OceanToolBarImageFilter> = ::javax_swing_plaf_metal / "MetalUtils$OceanToolBarImageFilter";
namespace javax::swing::plaf::metal { class OceanTheme; }
template<> constexpr auto signature<::javax::swing::plaf::metal::OceanTheme> = ::javax_swing_plaf_metal / "OceanTheme";
namespace javax::swing::plaf::metal { class OceanTheme$1; }
template<> constexpr auto signature<::javax::swing::plaf::metal::OceanTheme$1> = ::javax_swing_plaf_metal / "OceanTheme$1";
namespace javax::swing::plaf::metal { class OceanTheme$2; }
template<> constexpr auto signature<::javax::swing::plaf::metal::OceanTheme$2> = ::javax_swing_plaf_metal / "OceanTheme$2";
namespace javax::swing::plaf::metal { class OceanTheme$3; }
template<> constexpr auto signature<::javax::swing::plaf::metal::OceanTheme$3> = ::javax_swing_plaf_metal / "OceanTheme$3";
namespace javax::swing::plaf::metal { class OceanTheme$4; }
template<> constexpr auto signature<::javax::swing::plaf::metal::OceanTheme$4> = ::javax_swing_plaf_metal / "OceanTheme$4";
namespace javax::swing::plaf::metal { class OceanTheme$5; }
template<> constexpr auto signature<::javax::swing::plaf::metal::OceanTheme$5> = ::javax_swing_plaf_metal / "OceanTheme$5";
namespace javax::swing::plaf::metal { class OceanTheme$6; }
template<> constexpr auto signature<::javax::swing::plaf::metal::OceanTheme$6> = ::javax_swing_plaf_metal / "OceanTheme$6";
namespace javax::swing::plaf::metal { class OceanTheme$COIcon; }
template<> constexpr auto signature<::javax::swing::plaf::metal::OceanTheme$COIcon> = ::javax_swing_plaf_metal / "OceanTheme$COIcon";
namespace javax::swing::plaf::metal { class OceanTheme$IFIcon; }
template<> constexpr auto signature<::javax::swing::plaf::metal::OceanTheme$IFIcon> = ::javax_swing_plaf_metal / "OceanTheme$IFIcon";
namespace javax::swing::plaf::multi { class MultiButtonUI; }
template<> constexpr auto signature<::javax::swing::plaf::multi::MultiButtonUI> = ::javax_swing_plaf_multi / "MultiButtonUI";
namespace javax::swing::plaf::multi { class MultiColorChooserUI; }
template<> constexpr auto signature<::javax::swing::plaf::multi::MultiColorChooserUI> = ::javax_swing_plaf_multi / "MultiColorChooserUI";
namespace javax::swing::plaf::multi { class MultiComboBoxUI; }
template<> constexpr auto signature<::javax::swing::plaf::multi::MultiComboBoxUI> = ::javax_swing_plaf_multi / "MultiComboBoxUI";
namespace javax::swing::plaf::multi { class MultiDesktopIconUI; }
template<> constexpr auto signature<::javax::swing::plaf::multi::MultiDesktopIconUI> = ::javax_swing_plaf_multi / "MultiDesktopIconUI";
namespace javax::swing::plaf::multi { class MultiDesktopPaneUI; }
template<> constexpr auto signature<::javax::swing::plaf::multi::MultiDesktopPaneUI> = ::javax_swing_plaf_multi / "MultiDesktopPaneUI";
namespace javax::swing::plaf::multi { class MultiFileChooserUI; }
template<> constexpr auto signature<::javax::swing::plaf::multi::MultiFileChooserUI> = ::javax_swing_plaf_multi / "MultiFileChooserUI";
namespace javax::swing::plaf::multi { class MultiInternalFrameUI; }
template<> constexpr auto signature<::javax::swing::plaf::multi::MultiInternalFrameUI> = ::javax_swing_plaf_multi / "MultiInternalFrameUI";
namespace javax::swing::plaf::multi { class MultiLabelUI; }
template<> constexpr auto signature<::javax::swing::plaf::multi::MultiLabelUI> = ::javax_swing_plaf_multi / "MultiLabelUI";
namespace javax::swing::plaf::multi { class MultiListUI; }
template<> constexpr auto signature<::javax::swing::plaf::multi::MultiListUI> = ::javax_swing_plaf_multi / "MultiListUI";
namespace javax::swing::plaf::multi { class MultiLookAndFeel; }
template<> constexpr auto signature<::javax::swing::plaf::multi::MultiLookAndFeel> = ::javax_swing_plaf_multi / "MultiLookAndFeel";
namespace javax::swing::plaf::multi { class MultiMenuBarUI; }
template<> constexpr auto signature<::javax::swing::plaf::multi::MultiMenuBarUI> = ::javax_swing_plaf_multi / "MultiMenuBarUI";
namespace javax::swing::plaf::multi { class MultiMenuItemUI; }
template<> constexpr auto signature<::javax::swing::plaf::multi::MultiMenuItemUI> = ::javax_swing_plaf_multi / "MultiMenuItemUI";
namespace javax::swing::plaf::multi { class MultiOptionPaneUI; }
template<> constexpr auto signature<::javax::swing::plaf::multi::MultiOptionPaneUI> = ::javax_swing_plaf_multi / "MultiOptionPaneUI";
namespace javax::swing::plaf::multi { class MultiPanelUI; }
template<> constexpr auto signature<::javax::swing::plaf::multi::MultiPanelUI> = ::javax_swing_plaf_multi / "MultiPanelUI";
namespace javax::swing::plaf::multi { class MultiPopupMenuUI; }
template<> constexpr auto signature<::javax::swing::plaf::multi::MultiPopupMenuUI> = ::javax_swing_plaf_multi / "MultiPopupMenuUI";
namespace javax::swing::plaf::multi { class MultiProgressBarUI; }
template<> constexpr auto signature<::javax::swing::plaf::multi::MultiProgressBarUI> = ::javax_swing_plaf_multi / "MultiProgressBarUI";
namespace javax::swing::plaf::multi { class MultiRootPaneUI; }
template<> constexpr auto signature<::javax::swing::plaf::multi::MultiRootPaneUI> = ::javax_swing_plaf_multi / "MultiRootPaneUI";
namespace javax::swing::plaf::multi { class MultiScrollBarUI; }
template<> constexpr auto signature<::javax::swing::plaf::multi::MultiScrollBarUI> = ::javax_swing_plaf_multi / "MultiScrollBarUI";
namespace javax::swing::plaf::multi { class MultiScrollPaneUI; }
template<> constexpr auto signature<::javax::swing::plaf::multi::MultiScrollPaneUI> = ::javax_swing_plaf_multi / "MultiScrollPaneUI";
namespace javax::swing::plaf::multi { class MultiSeparatorUI; }
template<> constexpr auto signature<::javax::swing::plaf::multi::MultiSeparatorUI> = ::javax_swing_plaf_multi / "MultiSeparatorUI";
namespace javax::swing::plaf::multi { class MultiSliderUI; }
template<> constexpr auto signature<::javax::swing::plaf::multi::MultiSliderUI> = ::javax_swing_plaf_multi / "MultiSliderUI";
namespace javax::swing::plaf::multi { class MultiSpinnerUI; }
template<> constexpr auto signature<::javax::swing::plaf::multi::MultiSpinnerUI> = ::javax_swing_plaf_multi / "MultiSpinnerUI";
namespace javax::swing::plaf::multi { class MultiSplitPaneUI; }
template<> constexpr auto signature<::javax::swing::plaf::multi::MultiSplitPaneUI> = ::javax_swing_plaf_multi / "MultiSplitPaneUI";
namespace javax::swing::plaf::multi { class MultiTabbedPaneUI; }
template<> constexpr auto signature<::javax::swing::plaf::multi::MultiTabbedPaneUI> = ::javax_swing_plaf_multi / "MultiTabbedPaneUI";
namespace javax::swing::plaf::multi { class MultiTableHeaderUI; }
template<> constexpr auto signature<::javax::swing::plaf::multi::MultiTableHeaderUI> = ::javax_swing_plaf_multi / "MultiTableHeaderUI";
namespace javax::swing::plaf::multi { class MultiTableUI; }
template<> constexpr auto signature<::javax::swing::plaf::multi::MultiTableUI> = ::javax_swing_plaf_multi / "MultiTableUI";
namespace javax::swing::plaf::multi { class MultiTextUI; }
template<> constexpr auto signature<::javax::swing::plaf::multi::MultiTextUI> = ::javax_swing_plaf_multi / "MultiTextUI";
namespace javax::swing::plaf::multi { class MultiToolBarUI; }
template<> constexpr auto signature<::javax::swing::plaf::multi::MultiToolBarUI> = ::javax_swing_plaf_multi / "MultiToolBarUI";
namespace javax::swing::plaf::multi { class MultiToolTipUI; }
template<> constexpr auto signature<::javax::swing::plaf::multi::MultiToolTipUI> = ::javax_swing_plaf_multi / "MultiToolTipUI";
namespace javax::swing::plaf::multi { class MultiTreeUI; }
template<> constexpr auto signature<::javax::swing::plaf::multi::MultiTreeUI> = ::javax_swing_plaf_multi / "MultiTreeUI";
namespace javax::swing::plaf::multi { class MultiUIDefaults; }
template<> constexpr auto signature<::javax::swing::plaf::multi::MultiUIDefaults> = ::javax_swing_plaf_multi / "MultiUIDefaults";
namespace javax::swing::plaf::multi { class MultiViewportUI; }
template<> constexpr auto signature<::javax::swing::plaf::multi::MultiViewportUI> = ::javax_swing_plaf_multi / "MultiViewportUI";
namespace javax::swing::plaf::nimbus { class AbstractRegionPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::AbstractRegionPainter> = ::javax_swing_plaf_nimbus / "AbstractRegionPainter";
namespace javax::swing::plaf::nimbus { class AbstractRegionPainter$PaintContext; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::AbstractRegionPainter$PaintContext> = ::javax_swing_plaf_nimbus / "AbstractRegionPainter$PaintContext";
namespace javax::swing::plaf::nimbus { class AbstractRegionPainter$PaintContext$CacheMode; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::AbstractRegionPainter$PaintContext$CacheMode> = ::javax_swing_plaf_nimbus / "AbstractRegionPainter$PaintContext$CacheMode";
namespace javax::swing::plaf::nimbus { class ArrowButtonPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::ArrowButtonPainter> = ::javax_swing_plaf_nimbus / "ArrowButtonPainter";
namespace javax::swing::plaf::nimbus { class ButtonPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::ButtonPainter> = ::javax_swing_plaf_nimbus / "ButtonPainter";
namespace javax::swing::plaf::nimbus { class CheckBoxMenuItemPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::CheckBoxMenuItemPainter> = ::javax_swing_plaf_nimbus / "CheckBoxMenuItemPainter";
namespace javax::swing::plaf::nimbus { class CheckBoxPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::CheckBoxPainter> = ::javax_swing_plaf_nimbus / "CheckBoxPainter";
namespace javax::swing::plaf::nimbus { class ComboBoxArrowButtonEditableState; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::ComboBoxArrowButtonEditableState> = ::javax_swing_plaf_nimbus / "ComboBoxArrowButtonEditableState";
namespace javax::swing::plaf::nimbus { class ComboBoxArrowButtonPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::ComboBoxArrowButtonPainter> = ::javax_swing_plaf_nimbus / "ComboBoxArrowButtonPainter";
namespace javax::swing::plaf::nimbus { class ComboBoxEditableState; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::ComboBoxEditableState> = ::javax_swing_plaf_nimbus / "ComboBoxEditableState";
namespace javax::swing::plaf::nimbus { class ComboBoxPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::ComboBoxPainter> = ::javax_swing_plaf_nimbus / "ComboBoxPainter";
namespace javax::swing::plaf::nimbus { class ComboBoxTextFieldPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::ComboBoxTextFieldPainter> = ::javax_swing_plaf_nimbus / "ComboBoxTextFieldPainter";
namespace javax::swing::plaf::nimbus { class DerivedColor; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::DerivedColor> = ::javax_swing_plaf_nimbus / "DerivedColor";
namespace javax::swing::plaf::nimbus { class DerivedColor$UIResource; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::DerivedColor$UIResource> = ::javax_swing_plaf_nimbus / "DerivedColor$UIResource";
namespace javax::swing::plaf::nimbus { class DesktopIconPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::DesktopIconPainter> = ::javax_swing_plaf_nimbus / "DesktopIconPainter";
namespace javax::swing::plaf::nimbus { class DesktopPanePainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::DesktopPanePainter> = ::javax_swing_plaf_nimbus / "DesktopPanePainter";
namespace javax::swing::plaf::nimbus { class DropShadowEffect; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::DropShadowEffect> = ::javax_swing_plaf_nimbus / "DropShadowEffect";
namespace javax::swing::plaf::nimbus { class EditorPanePainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::EditorPanePainter> = ::javax_swing_plaf_nimbus / "EditorPanePainter";
namespace javax::swing::plaf::nimbus { class Effect; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::Effect> = ::javax_swing_plaf_nimbus / "Effect";
namespace javax::swing::plaf::nimbus { class Effect$ArrayCache; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::Effect$ArrayCache> = ::javax_swing_plaf_nimbus / "Effect$ArrayCache";
namespace javax::swing::plaf::nimbus { class Effect$EffectType; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::Effect$EffectType> = ::javax_swing_plaf_nimbus / "Effect$EffectType";
namespace javax::swing::plaf::nimbus { class EffectUtils; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::EffectUtils> = ::javax_swing_plaf_nimbus / "EffectUtils";
namespace javax::swing::plaf::nimbus { class FileChooserPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::FileChooserPainter> = ::javax_swing_plaf_nimbus / "FileChooserPainter";
namespace javax::swing::plaf::nimbus { class FormattedTextFieldPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::FormattedTextFieldPainter> = ::javax_swing_plaf_nimbus / "FormattedTextFieldPainter";
namespace javax::swing::plaf::nimbus { class ImageCache; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::ImageCache> = ::javax_swing_plaf_nimbus / "ImageCache";
namespace javax::swing::plaf::nimbus { class ImageCache$PixelCountSoftReference; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::ImageCache$PixelCountSoftReference> = ::javax_swing_plaf_nimbus / "ImageCache$PixelCountSoftReference";
namespace javax::swing::plaf::nimbus { class ImageScalingHelper; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::ImageScalingHelper> = ::javax_swing_plaf_nimbus / "ImageScalingHelper";
namespace javax::swing::plaf::nimbus { class ImageScalingHelper$PaintType; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::ImageScalingHelper$PaintType> = ::javax_swing_plaf_nimbus / "ImageScalingHelper$PaintType";
namespace javax::swing::plaf::nimbus { class InnerGlowEffect; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::InnerGlowEffect> = ::javax_swing_plaf_nimbus / "InnerGlowEffect";
namespace javax::swing::plaf::nimbus { class InnerShadowEffect; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::InnerShadowEffect> = ::javax_swing_plaf_nimbus / "InnerShadowEffect";
namespace javax::swing::plaf::nimbus { class InternalFramePainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::InternalFramePainter> = ::javax_swing_plaf_nimbus / "InternalFramePainter";
namespace javax::swing::plaf::nimbus { class InternalFrameTitlePaneCloseButtonPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::InternalFrameTitlePaneCloseButtonPainter> = ::javax_swing_plaf_nimbus / "InternalFrameTitlePaneCloseButtonPainter";
namespace javax::swing::plaf::nimbus { class InternalFrameTitlePaneCloseButtonWindowNotFocusedState; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::InternalFrameTitlePaneCloseButtonWindowNotFocusedState> = ::javax_swing_plaf_nimbus / "InternalFrameTitlePaneCloseButtonWindowNotFocusedState";
namespace javax::swing::plaf::nimbus { class InternalFrameTitlePaneIconifyButtonPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::InternalFrameTitlePaneIconifyButtonPainter> = ::javax_swing_plaf_nimbus / "InternalFrameTitlePaneIconifyButtonPainter";
namespace javax::swing::plaf::nimbus { class InternalFrameTitlePaneIconifyButtonWindowNotFocusedState; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::InternalFrameTitlePaneIconifyButtonWindowNotFocusedState> = ::javax_swing_plaf_nimbus / "InternalFrameTitlePaneIconifyButtonWindowNotFocusedState";
namespace javax::swing::plaf::nimbus { class InternalFrameTitlePaneMaximizeButtonPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::InternalFrameTitlePaneMaximizeButtonPainter> = ::javax_swing_plaf_nimbus / "InternalFrameTitlePaneMaximizeButtonPainter";
namespace javax::swing::plaf::nimbus { class InternalFrameTitlePaneMaximizeButtonWindowMaximizedState; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::InternalFrameTitlePaneMaximizeButtonWindowMaximizedState> = ::javax_swing_plaf_nimbus / "InternalFrameTitlePaneMaximizeButtonWindowMaximizedState";
namespace javax::swing::plaf::nimbus { class InternalFrameTitlePaneMaximizeButtonWindowNotFocusedState; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::InternalFrameTitlePaneMaximizeButtonWindowNotFocusedState> = ::javax_swing_plaf_nimbus / "InternalFrameTitlePaneMaximizeButtonWindowNotFocusedState";
namespace javax::swing::plaf::nimbus { class InternalFrameTitlePaneMenuButtonPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::InternalFrameTitlePaneMenuButtonPainter> = ::javax_swing_plaf_nimbus / "InternalFrameTitlePaneMenuButtonPainter";
namespace javax::swing::plaf::nimbus { class InternalFrameTitlePaneMenuButtonWindowNotFocusedState; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::InternalFrameTitlePaneMenuButtonWindowNotFocusedState> = ::javax_swing_plaf_nimbus / "InternalFrameTitlePaneMenuButtonWindowNotFocusedState";
namespace javax::swing::plaf::nimbus { class InternalFrameTitlePaneWindowFocusedState; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::InternalFrameTitlePaneWindowFocusedState> = ::javax_swing_plaf_nimbus / "InternalFrameTitlePaneWindowFocusedState";
namespace javax::swing::plaf::nimbus { class InternalFrameWindowFocusedState; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::InternalFrameWindowFocusedState> = ::javax_swing_plaf_nimbus / "InternalFrameWindowFocusedState";
namespace javax::swing::plaf::nimbus { class LoweredBorder; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::LoweredBorder> = ::javax_swing_plaf_nimbus / "LoweredBorder";
namespace javax::swing::plaf::nimbus { class MenuBarMenuPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::MenuBarMenuPainter> = ::javax_swing_plaf_nimbus / "MenuBarMenuPainter";
namespace javax::swing::plaf::nimbus { class MenuBarPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::MenuBarPainter> = ::javax_swing_plaf_nimbus / "MenuBarPainter";
namespace javax::swing::plaf::nimbus { class MenuItemPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::MenuItemPainter> = ::javax_swing_plaf_nimbus / "MenuItemPainter";
namespace javax::swing::plaf::nimbus { class MenuPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::MenuPainter> = ::javax_swing_plaf_nimbus / "MenuPainter";
namespace javax::swing::plaf::nimbus { class NimbusDefaults; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::NimbusDefaults> = ::javax_swing_plaf_nimbus / "NimbusDefaults";
namespace javax::swing::plaf::nimbus { class NimbusDefaults$1; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::NimbusDefaults$1> = ::javax_swing_plaf_nimbus / "NimbusDefaults$1";
namespace javax::swing::plaf::nimbus { class NimbusDefaults$ColorTree; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::NimbusDefaults$ColorTree> = ::javax_swing_plaf_nimbus / "NimbusDefaults$ColorTree";
namespace javax::swing::plaf::nimbus { class NimbusDefaults$ColorTree$Node; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::NimbusDefaults$ColorTree$Node> = ::javax_swing_plaf_nimbus / "NimbusDefaults$ColorTree$Node";
namespace javax::swing::plaf::nimbus { class NimbusDefaults$DefaultsListener; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::NimbusDefaults$DefaultsListener> = ::javax_swing_plaf_nimbus / "NimbusDefaults$DefaultsListener";
namespace javax::swing::plaf::nimbus { class NimbusDefaults$DerivedFont; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::NimbusDefaults$DerivedFont> = ::javax_swing_plaf_nimbus / "NimbusDefaults$DerivedFont";
namespace javax::swing::plaf::nimbus { class NimbusDefaults$LazyPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::NimbusDefaults$LazyPainter> = ::javax_swing_plaf_nimbus / "NimbusDefaults$LazyPainter";
namespace javax::swing::plaf::nimbus { class NimbusDefaults$LazyStyle; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::NimbusDefaults$LazyStyle> = ::javax_swing_plaf_nimbus / "NimbusDefaults$LazyStyle";
namespace javax::swing::plaf::nimbus { class NimbusDefaults$LazyStyle$Part; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::NimbusDefaults$LazyStyle$Part> = ::javax_swing_plaf_nimbus / "NimbusDefaults$LazyStyle$Part";
namespace javax::swing::plaf::nimbus { class NimbusDefaults$PainterBorder; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::NimbusDefaults$PainterBorder> = ::javax_swing_plaf_nimbus / "NimbusDefaults$PainterBorder";
namespace javax::swing::plaf::nimbus { class NimbusIcon; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::NimbusIcon> = ::javax_swing_plaf_nimbus / "NimbusIcon";
namespace javax::swing::plaf::nimbus { class NimbusLookAndFeel; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::NimbusLookAndFeel> = ::javax_swing_plaf_nimbus / "NimbusLookAndFeel";
namespace javax::swing::plaf::nimbus { class NimbusLookAndFeel$1; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::NimbusLookAndFeel$1> = ::javax_swing_plaf_nimbus / "NimbusLookAndFeel$1";
namespace javax::swing::plaf::nimbus { class NimbusLookAndFeel$2; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::NimbusLookAndFeel$2> = ::javax_swing_plaf_nimbus / "NimbusLookAndFeel$2";
namespace javax::swing::plaf::nimbus { class NimbusLookAndFeel$DefaultsListener; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::NimbusLookAndFeel$DefaultsListener> = ::javax_swing_plaf_nimbus / "NimbusLookAndFeel$DefaultsListener";
namespace javax::swing::plaf::nimbus { class NimbusLookAndFeel$LinkProperty; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::NimbusLookAndFeel$LinkProperty> = ::javax_swing_plaf_nimbus / "NimbusLookAndFeel$LinkProperty";
namespace javax::swing::plaf::nimbus { class NimbusLookAndFeel$NimbusProperty; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::NimbusLookAndFeel$NimbusProperty> = ::javax_swing_plaf_nimbus / "NimbusLookAndFeel$NimbusProperty";
namespace javax::swing::plaf::nimbus { class NimbusStyle; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::NimbusStyle> = ::javax_swing_plaf_nimbus / "NimbusStyle";
namespace javax::swing::plaf::nimbus { class NimbusStyle$1; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::NimbusStyle$1> = ::javax_swing_plaf_nimbus / "NimbusStyle$1";
namespace javax::swing::plaf::nimbus { class NimbusStyle$CacheKey; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::NimbusStyle$CacheKey> = ::javax_swing_plaf_nimbus / "NimbusStyle$CacheKey";
namespace javax::swing::plaf::nimbus { class NimbusStyle$RuntimeState; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::NimbusStyle$RuntimeState> = ::javax_swing_plaf_nimbus / "NimbusStyle$RuntimeState";
namespace javax::swing::plaf::nimbus { class NimbusStyle$Values; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::NimbusStyle$Values> = ::javax_swing_plaf_nimbus / "NimbusStyle$Values";
namespace javax::swing::plaf::nimbus { class OptionPaneMessageAreaOptionPaneLabelPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::OptionPaneMessageAreaOptionPaneLabelPainter> = ::javax_swing_plaf_nimbus / "OptionPaneMessageAreaOptionPaneLabelPainter";
namespace javax::swing::plaf::nimbus { class OptionPanePainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::OptionPanePainter> = ::javax_swing_plaf_nimbus / "OptionPanePainter";
namespace javax::swing::plaf::nimbus { class OuterGlowEffect; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::OuterGlowEffect> = ::javax_swing_plaf_nimbus / "OuterGlowEffect";
namespace javax::swing::plaf::nimbus { class PasswordFieldPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::PasswordFieldPainter> = ::javax_swing_plaf_nimbus / "PasswordFieldPainter";
namespace javax::swing::plaf::nimbus { class PopupMenuPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::PopupMenuPainter> = ::javax_swing_plaf_nimbus / "PopupMenuPainter";
namespace javax::swing::plaf::nimbus { class PopupMenuSeparatorPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::PopupMenuSeparatorPainter> = ::javax_swing_plaf_nimbus / "PopupMenuSeparatorPainter";
namespace javax::swing::plaf::nimbus { class ProgressBarFinishedState; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::ProgressBarFinishedState> = ::javax_swing_plaf_nimbus / "ProgressBarFinishedState";
namespace javax::swing::plaf::nimbus { class ProgressBarIndeterminateState; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::ProgressBarIndeterminateState> = ::javax_swing_plaf_nimbus / "ProgressBarIndeterminateState";
namespace javax::swing::plaf::nimbus { class ProgressBarPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::ProgressBarPainter> = ::javax_swing_plaf_nimbus / "ProgressBarPainter";
namespace javax::swing::plaf::nimbus { class RadioButtonMenuItemPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::RadioButtonMenuItemPainter> = ::javax_swing_plaf_nimbus / "RadioButtonMenuItemPainter";
namespace javax::swing::plaf::nimbus { class RadioButtonPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::RadioButtonPainter> = ::javax_swing_plaf_nimbus / "RadioButtonPainter";
namespace javax::swing::plaf::nimbus { class ScrollBarButtonPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::ScrollBarButtonPainter> = ::javax_swing_plaf_nimbus / "ScrollBarButtonPainter";
namespace javax::swing::plaf::nimbus { class ScrollBarThumbPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::ScrollBarThumbPainter> = ::javax_swing_plaf_nimbus / "ScrollBarThumbPainter";
namespace javax::swing::plaf::nimbus { class ScrollBarTrackPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::ScrollBarTrackPainter> = ::javax_swing_plaf_nimbus / "ScrollBarTrackPainter";
namespace javax::swing::plaf::nimbus { class ScrollPanePainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::ScrollPanePainter> = ::javax_swing_plaf_nimbus / "ScrollPanePainter";
namespace javax::swing::plaf::nimbus { class SeparatorPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::SeparatorPainter> = ::javax_swing_plaf_nimbus / "SeparatorPainter";
namespace javax::swing::plaf::nimbus { class ShadowEffect; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::ShadowEffect> = ::javax_swing_plaf_nimbus / "ShadowEffect";
namespace javax::swing::plaf::nimbus { class SliderArrowShapeState; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::SliderArrowShapeState> = ::javax_swing_plaf_nimbus / "SliderArrowShapeState";
namespace javax::swing::plaf::nimbus { class SliderThumbArrowShapeState; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::SliderThumbArrowShapeState> = ::javax_swing_plaf_nimbus / "SliderThumbArrowShapeState";
namespace javax::swing::plaf::nimbus { class SliderThumbPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::SliderThumbPainter> = ::javax_swing_plaf_nimbus / "SliderThumbPainter";
namespace javax::swing::plaf::nimbus { class SliderTrackArrowShapeState; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::SliderTrackArrowShapeState> = ::javax_swing_plaf_nimbus / "SliderTrackArrowShapeState";
namespace javax::swing::plaf::nimbus { class SliderTrackPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::SliderTrackPainter> = ::javax_swing_plaf_nimbus / "SliderTrackPainter";
namespace javax::swing::plaf::nimbus { class SpinnerNextButtonPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::SpinnerNextButtonPainter> = ::javax_swing_plaf_nimbus / "SpinnerNextButtonPainter";
namespace javax::swing::plaf::nimbus { class SpinnerPanelSpinnerFormattedTextFieldPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::SpinnerPanelSpinnerFormattedTextFieldPainter> = ::javax_swing_plaf_nimbus / "SpinnerPanelSpinnerFormattedTextFieldPainter";
namespace javax::swing::plaf::nimbus { class SpinnerPreviousButtonPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::SpinnerPreviousButtonPainter> = ::javax_swing_plaf_nimbus / "SpinnerPreviousButtonPainter";
namespace javax::swing::plaf::nimbus { class SplitPaneDividerPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::SplitPaneDividerPainter> = ::javax_swing_plaf_nimbus / "SplitPaneDividerPainter";
namespace javax::swing::plaf::nimbus { class SplitPaneDividerVerticalState; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::SplitPaneDividerVerticalState> = ::javax_swing_plaf_nimbus / "SplitPaneDividerVerticalState";
namespace javax::swing::plaf::nimbus { class SplitPaneVerticalState; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::SplitPaneVerticalState> = ::javax_swing_plaf_nimbus / "SplitPaneVerticalState";
namespace javax::swing::plaf::nimbus { class State; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::State> = ::javax_swing_plaf_nimbus / "State";
namespace javax::swing::plaf::nimbus { class State$1; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::State$1> = ::javax_swing_plaf_nimbus / "State$1";
namespace javax::swing::plaf::nimbus { class State$StandardState; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::State$StandardState> = ::javax_swing_plaf_nimbus / "State$StandardState";
namespace javax::swing::plaf::nimbus { class SynthPainterImpl; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::SynthPainterImpl> = ::javax_swing_plaf_nimbus / "SynthPainterImpl";
namespace javax::swing::plaf::nimbus { class TabbedPaneTabAreaPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::TabbedPaneTabAreaPainter> = ::javax_swing_plaf_nimbus / "TabbedPaneTabAreaPainter";
namespace javax::swing::plaf::nimbus { class TabbedPaneTabPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::TabbedPaneTabPainter> = ::javax_swing_plaf_nimbus / "TabbedPaneTabPainter";
namespace javax::swing::plaf::nimbus { class TableEditorPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::TableEditorPainter> = ::javax_swing_plaf_nimbus / "TableEditorPainter";
namespace javax::swing::plaf::nimbus { class TableHeaderPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::TableHeaderPainter> = ::javax_swing_plaf_nimbus / "TableHeaderPainter";
namespace javax::swing::plaf::nimbus { class TableHeaderRendererPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::TableHeaderRendererPainter> = ::javax_swing_plaf_nimbus / "TableHeaderRendererPainter";
namespace javax::swing::plaf::nimbus { class TableHeaderRendererSortedState; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::TableHeaderRendererSortedState> = ::javax_swing_plaf_nimbus / "TableHeaderRendererSortedState";
namespace javax::swing::plaf::nimbus { class TableScrollPaneCorner; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::TableScrollPaneCorner> = ::javax_swing_plaf_nimbus / "TableScrollPaneCorner";
namespace javax::swing::plaf::nimbus { class TextAreaNotInScrollPaneState; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::TextAreaNotInScrollPaneState> = ::javax_swing_plaf_nimbus / "TextAreaNotInScrollPaneState";
namespace javax::swing::plaf::nimbus { class TextAreaPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::TextAreaPainter> = ::javax_swing_plaf_nimbus / "TextAreaPainter";
namespace javax::swing::plaf::nimbus { class TextFieldPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::TextFieldPainter> = ::javax_swing_plaf_nimbus / "TextFieldPainter";
namespace javax::swing::plaf::nimbus { class TextPanePainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::TextPanePainter> = ::javax_swing_plaf_nimbus / "TextPanePainter";
namespace javax::swing::plaf::nimbus { class ToggleButtonPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::ToggleButtonPainter> = ::javax_swing_plaf_nimbus / "ToggleButtonPainter";
namespace javax::swing::plaf::nimbus { class ToolBarButtonPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::ToolBarButtonPainter> = ::javax_swing_plaf_nimbus / "ToolBarButtonPainter";
namespace javax::swing::plaf::nimbus { class ToolBarEastState; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::ToolBarEastState> = ::javax_swing_plaf_nimbus / "ToolBarEastState";
namespace javax::swing::plaf::nimbus { class ToolBarNorthState; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::ToolBarNorthState> = ::javax_swing_plaf_nimbus / "ToolBarNorthState";
namespace javax::swing::plaf::nimbus { class ToolBarPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::ToolBarPainter> = ::javax_swing_plaf_nimbus / "ToolBarPainter";
namespace javax::swing::plaf::nimbus { class ToolBarSeparatorPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::ToolBarSeparatorPainter> = ::javax_swing_plaf_nimbus / "ToolBarSeparatorPainter";
namespace javax::swing::plaf::nimbus { class ToolBarSouthState; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::ToolBarSouthState> = ::javax_swing_plaf_nimbus / "ToolBarSouthState";
namespace javax::swing::plaf::nimbus { class ToolBarToggleButtonPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::ToolBarToggleButtonPainter> = ::javax_swing_plaf_nimbus / "ToolBarToggleButtonPainter";
namespace javax::swing::plaf::nimbus { class ToolBarWestState; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::ToolBarWestState> = ::javax_swing_plaf_nimbus / "ToolBarWestState";
namespace javax::swing::plaf::nimbus { class ToolTipPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::ToolTipPainter> = ::javax_swing_plaf_nimbus / "ToolTipPainter";
namespace javax::swing::plaf::nimbus { class TreeCellEditorPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::TreeCellEditorPainter> = ::javax_swing_plaf_nimbus / "TreeCellEditorPainter";
namespace javax::swing::plaf::nimbus { class TreeCellPainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::TreeCellPainter> = ::javax_swing_plaf_nimbus / "TreeCellPainter";
namespace javax::swing::plaf::nimbus { class TreePainter; }
template<> constexpr auto signature<::javax::swing::plaf::nimbus::TreePainter> = ::javax_swing_plaf_nimbus / "TreePainter";
namespace javax::swing::plaf::synth { class ColorType; }
template<> constexpr auto signature<::javax::swing::plaf::synth::ColorType> = ::javax_swing_plaf_synth / "ColorType";
namespace javax::swing::plaf::synth { class DefaultSynthStyleFactory; }
template<> constexpr auto signature<::javax::swing::plaf::synth::DefaultSynthStyleFactory> = ::javax_swing_plaf_synth / "DefaultSynthStyleFactory";
namespace javax::swing::plaf::synth { class ImagePainter; }
template<> constexpr auto signature<::javax::swing::plaf::synth::ImagePainter> = ::javax_swing_plaf_synth / "ImagePainter";
namespace javax::swing::plaf::synth { class ParsedSynthStyle; }
template<> constexpr auto signature<::javax::swing::plaf::synth::ParsedSynthStyle> = ::javax_swing_plaf_synth / "ParsedSynthStyle";
namespace javax::swing::plaf::synth { class ParsedSynthStyle$1; }
template<> constexpr auto signature<::javax::swing::plaf::synth::ParsedSynthStyle$1> = ::javax_swing_plaf_synth / "ParsedSynthStyle$1";
namespace javax::swing::plaf::synth { class ParsedSynthStyle$AggregatePainter; }
template<> constexpr auto signature<::javax::swing::plaf::synth::ParsedSynthStyle$AggregatePainter> = ::javax_swing_plaf_synth / "ParsedSynthStyle$AggregatePainter";
namespace javax::swing::plaf::synth { class ParsedSynthStyle$DelegatingPainter; }
template<> constexpr auto signature<::javax::swing::plaf::synth::ParsedSynthStyle$DelegatingPainter> = ::javax_swing_plaf_synth / "ParsedSynthStyle$DelegatingPainter";
namespace javax::swing::plaf::synth { class ParsedSynthStyle$PainterInfo; }
template<> constexpr auto signature<::javax::swing::plaf::synth::ParsedSynthStyle$PainterInfo> = ::javax_swing_plaf_synth / "ParsedSynthStyle$PainterInfo";
namespace javax::swing::plaf::synth { class ParsedSynthStyle$StateInfo; }
template<> constexpr auto signature<::javax::swing::plaf::synth::ParsedSynthStyle$StateInfo> = ::javax_swing_plaf_synth / "ParsedSynthStyle$StateInfo";
namespace javax::swing::plaf::synth { class Region; }
template<> constexpr auto signature<::javax::swing::plaf::synth::Region> = ::javax_swing_plaf_synth / "Region";
namespace javax::swing::plaf::synth { class SynthArrowButton; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthArrowButton> = ::javax_swing_plaf_synth / "SynthArrowButton";
namespace javax::swing::plaf::synth { class SynthArrowButton$1; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthArrowButton$1> = ::javax_swing_plaf_synth / "SynthArrowButton$1";
namespace javax::swing::plaf::synth { class SynthArrowButton$SynthArrowButtonUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthArrowButton$SynthArrowButtonUI> = ::javax_swing_plaf_synth / "SynthArrowButton$SynthArrowButtonUI";
namespace javax::swing::plaf::synth { class SynthBorder; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthBorder> = ::javax_swing_plaf_synth / "SynthBorder";
namespace javax::swing::plaf::synth { class SynthButtonUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthButtonUI> = ::javax_swing_plaf_synth / "SynthButtonUI";
namespace javax::swing::plaf::synth { class SynthCheckBoxMenuItemUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthCheckBoxMenuItemUI> = ::javax_swing_plaf_synth / "SynthCheckBoxMenuItemUI";
namespace javax::swing::plaf::synth { class SynthCheckBoxUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthCheckBoxUI> = ::javax_swing_plaf_synth / "SynthCheckBoxUI";
namespace javax::swing::plaf::synth { class SynthColorChooserUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthColorChooserUI> = ::javax_swing_plaf_synth / "SynthColorChooserUI";
namespace javax::swing::plaf::synth { class SynthComboBoxUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthComboBoxUI> = ::javax_swing_plaf_synth / "SynthComboBoxUI";
namespace javax::swing::plaf::synth { class SynthComboBoxUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthComboBoxUI$1> = ::javax_swing_plaf_synth / "SynthComboBoxUI$1";
namespace javax::swing::plaf::synth { class SynthComboBoxUI$ButtonHandler; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthComboBoxUI$ButtonHandler> = ::javax_swing_plaf_synth / "SynthComboBoxUI$ButtonHandler";
namespace javax::swing::plaf::synth { class SynthComboBoxUI$EditorFocusHandler; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthComboBoxUI$EditorFocusHandler> = ::javax_swing_plaf_synth / "SynthComboBoxUI$EditorFocusHandler";
namespace javax::swing::plaf::synth { class SynthComboBoxUI$SynthComboBoxEditor; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthComboBoxUI$SynthComboBoxEditor> = ::javax_swing_plaf_synth / "SynthComboBoxUI$SynthComboBoxEditor";
namespace javax::swing::plaf::synth { class SynthComboBoxUI$SynthComboBoxRenderer; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthComboBoxUI$SynthComboBoxRenderer> = ::javax_swing_plaf_synth / "SynthComboBoxUI$SynthComboBoxRenderer";
namespace javax::swing::plaf::synth { class SynthComboPopup; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthComboPopup> = ::javax_swing_plaf_synth / "SynthComboPopup";
namespace javax::swing::plaf::synth { class SynthConstants; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthConstants> = ::javax_swing_plaf_synth / "SynthConstants";
namespace javax::swing::plaf::synth { class SynthContext; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthContext> = ::javax_swing_plaf_synth / "SynthContext";
namespace javax::swing::plaf::synth { class SynthDefaultLookup; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthDefaultLookup> = ::javax_swing_plaf_synth / "SynthDefaultLookup";
namespace javax::swing::plaf::synth { class SynthDesktopIconUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthDesktopIconUI> = ::javax_swing_plaf_synth / "SynthDesktopIconUI";
namespace javax::swing::plaf::synth { class SynthDesktopIconUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthDesktopIconUI$1> = ::javax_swing_plaf_synth / "SynthDesktopIconUI$1";
namespace javax::swing::plaf::synth { class SynthDesktopIconUI$Handler; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthDesktopIconUI$Handler> = ::javax_swing_plaf_synth / "SynthDesktopIconUI$Handler";
namespace javax::swing::plaf::synth { class SynthDesktopPaneUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthDesktopPaneUI> = ::javax_swing_plaf_synth / "SynthDesktopPaneUI";
namespace javax::swing::plaf::synth { class SynthDesktopPaneUI$SynthDesktopManager; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthDesktopPaneUI$SynthDesktopManager> = ::javax_swing_plaf_synth / "SynthDesktopPaneUI$SynthDesktopManager";
namespace javax::swing::plaf::synth { class SynthDesktopPaneUI$TaskBar; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthDesktopPaneUI$TaskBar> = ::javax_swing_plaf_synth / "SynthDesktopPaneUI$TaskBar";
namespace javax::swing::plaf::synth { class SynthDesktopPaneUI$TaskBar$1; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthDesktopPaneUI$TaskBar$1> = ::javax_swing_plaf_synth / "SynthDesktopPaneUI$TaskBar$1";
namespace javax::swing::plaf::synth { class SynthDesktopPaneUI$TaskBar$2; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthDesktopPaneUI$TaskBar$2> = ::javax_swing_plaf_synth / "SynthDesktopPaneUI$TaskBar$2";
namespace javax::swing::plaf::synth { class SynthEditorPaneUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthEditorPaneUI> = ::javax_swing_plaf_synth / "SynthEditorPaneUI";
namespace javax::swing::plaf::synth { class SynthFormattedTextFieldUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthFormattedTextFieldUI> = ::javax_swing_plaf_synth / "SynthFormattedTextFieldUI";
namespace javax::swing::plaf::synth { class SynthGraphicsUtils; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthGraphicsUtils> = ::javax_swing_plaf_synth / "SynthGraphicsUtils";
namespace javax::swing::plaf::synth { class SynthGraphicsUtils$SynthIconWrapper; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthGraphicsUtils$SynthIconWrapper> = ::javax_swing_plaf_synth / "SynthGraphicsUtils$SynthIconWrapper";
namespace javax::swing::plaf::synth { class SynthInternalFrameTitlePane; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthInternalFrameTitlePane> = ::javax_swing_plaf_synth / "SynthInternalFrameTitlePane";
namespace javax::swing::plaf::synth { class SynthInternalFrameTitlePane$1; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthInternalFrameTitlePane$1> = ::javax_swing_plaf_synth / "SynthInternalFrameTitlePane$1";
namespace javax::swing::plaf::synth { class SynthInternalFrameTitlePane$JPopupMenuUIResource; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthInternalFrameTitlePane$JPopupMenuUIResource> = ::javax_swing_plaf_synth / "SynthInternalFrameTitlePane$JPopupMenuUIResource";
namespace javax::swing::plaf::synth { class SynthInternalFrameTitlePane$SynthTitlePaneLayout; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthInternalFrameTitlePane$SynthTitlePaneLayout> = ::javax_swing_plaf_synth / "SynthInternalFrameTitlePane$SynthTitlePaneLayout";
namespace javax::swing::plaf::synth { class SynthInternalFrameUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthInternalFrameUI> = ::javax_swing_plaf_synth / "SynthInternalFrameUI";
namespace javax::swing::plaf::synth { class SynthInternalFrameUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthInternalFrameUI$1> = ::javax_swing_plaf_synth / "SynthInternalFrameUI$1";
namespace javax::swing::plaf::synth { class SynthLabelUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthLabelUI> = ::javax_swing_plaf_synth / "SynthLabelUI";
namespace javax::swing::plaf::synth { class SynthListUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthListUI> = ::javax_swing_plaf_synth / "SynthListUI";
namespace javax::swing::plaf::synth { class SynthListUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthListUI$1> = ::javax_swing_plaf_synth / "SynthListUI$1";
namespace javax::swing::plaf::synth { class SynthListUI$SynthListCellRenderer; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthListUI$SynthListCellRenderer> = ::javax_swing_plaf_synth / "SynthListUI$SynthListCellRenderer";
namespace javax::swing::plaf::synth { class SynthLookAndFeel; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthLookAndFeel> = ::javax_swing_plaf_synth / "SynthLookAndFeel";
namespace javax::swing::plaf::synth { class SynthLookAndFeel$1; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthLookAndFeel$1> = ::javax_swing_plaf_synth / "SynthLookAndFeel$1";
namespace javax::swing::plaf::synth { class SynthLookAndFeel$AATextListener; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthLookAndFeel$AATextListener> = ::javax_swing_plaf_synth / "SynthLookAndFeel$AATextListener";
namespace javax::swing::plaf::synth { class SynthLookAndFeel$AATextListener$1; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthLookAndFeel$AATextListener$1> = ::javax_swing_plaf_synth / "SynthLookAndFeel$AATextListener$1";
namespace javax::swing::plaf::synth { class SynthLookAndFeel$Handler; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthLookAndFeel$Handler> = ::javax_swing_plaf_synth / "SynthLookAndFeel$Handler";
namespace javax::swing::plaf::synth { class SynthMenuBarUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthMenuBarUI> = ::javax_swing_plaf_synth / "SynthMenuBarUI";
namespace javax::swing::plaf::synth { class SynthMenuItemLayoutHelper; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthMenuItemLayoutHelper> = ::javax_swing_plaf_synth / "SynthMenuItemLayoutHelper";
namespace javax::swing::plaf::synth { class SynthMenuItemUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthMenuItemUI> = ::javax_swing_plaf_synth / "SynthMenuItemUI";
namespace javax::swing::plaf::synth { class SynthMenuLayout; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthMenuLayout> = ::javax_swing_plaf_synth / "SynthMenuLayout";
namespace javax::swing::plaf::synth { class SynthMenuUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthMenuUI> = ::javax_swing_plaf_synth / "SynthMenuUI";
namespace javax::swing::plaf::synth { class SynthOptionPaneUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthOptionPaneUI> = ::javax_swing_plaf_synth / "SynthOptionPaneUI";
namespace javax::swing::plaf::synth { class SynthPainter; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthPainter> = ::javax_swing_plaf_synth / "SynthPainter";
namespace javax::swing::plaf::synth { class SynthPainter$1; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthPainter$1> = ::javax_swing_plaf_synth / "SynthPainter$1";
namespace javax::swing::plaf::synth { class SynthPanelUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthPanelUI> = ::javax_swing_plaf_synth / "SynthPanelUI";
namespace javax::swing::plaf::synth { class SynthParser; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthParser> = ::javax_swing_plaf_synth / "SynthParser";
namespace javax::swing::plaf::synth { class SynthParser$LazyImageIcon; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthParser$LazyImageIcon> = ::javax_swing_plaf_synth / "SynthParser$LazyImageIcon";
namespace javax::swing::plaf::synth { class SynthPasswordFieldUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthPasswordFieldUI> = ::javax_swing_plaf_synth / "SynthPasswordFieldUI";
namespace javax::swing::plaf::synth { class SynthPopupMenuUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthPopupMenuUI> = ::javax_swing_plaf_synth / "SynthPopupMenuUI";
namespace javax::swing::plaf::synth { class SynthProgressBarUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthProgressBarUI> = ::javax_swing_plaf_synth / "SynthProgressBarUI";
namespace javax::swing::plaf::synth { class SynthRadioButtonMenuItemUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthRadioButtonMenuItemUI> = ::javax_swing_plaf_synth / "SynthRadioButtonMenuItemUI";
namespace javax::swing::plaf::synth { class SynthRadioButtonUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthRadioButtonUI> = ::javax_swing_plaf_synth / "SynthRadioButtonUI";
namespace javax::swing::plaf::synth { class SynthRootPaneUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthRootPaneUI> = ::javax_swing_plaf_synth / "SynthRootPaneUI";
namespace javax::swing::plaf::synth { class SynthScrollBarUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthScrollBarUI> = ::javax_swing_plaf_synth / "SynthScrollBarUI";
namespace javax::swing::plaf::synth { class SynthScrollBarUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthScrollBarUI$1> = ::javax_swing_plaf_synth / "SynthScrollBarUI$1";
namespace javax::swing::plaf::synth { class SynthScrollBarUI$2; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthScrollBarUI$2> = ::javax_swing_plaf_synth / "SynthScrollBarUI$2";
namespace javax::swing::plaf::synth { class SynthScrollPaneUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthScrollPaneUI> = ::javax_swing_plaf_synth / "SynthScrollPaneUI";
namespace javax::swing::plaf::synth { class SynthScrollPaneUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthScrollPaneUI$1> = ::javax_swing_plaf_synth / "SynthScrollPaneUI$1";
namespace javax::swing::plaf::synth { class SynthScrollPaneUI$ViewportBorder; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthScrollPaneUI$ViewportBorder> = ::javax_swing_plaf_synth / "SynthScrollPaneUI$ViewportBorder";
namespace javax::swing::plaf::synth { class SynthScrollPaneUI$ViewportViewFocusHandler; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthScrollPaneUI$ViewportViewFocusHandler> = ::javax_swing_plaf_synth / "SynthScrollPaneUI$ViewportViewFocusHandler";
namespace javax::swing::plaf::synth { class SynthSeparatorUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthSeparatorUI> = ::javax_swing_plaf_synth / "SynthSeparatorUI";
namespace javax::swing::plaf::synth { class SynthSliderUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthSliderUI> = ::javax_swing_plaf_synth / "SynthSliderUI";
namespace javax::swing::plaf::synth { class SynthSliderUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthSliderUI$1> = ::javax_swing_plaf_synth / "SynthSliderUI$1";
namespace javax::swing::plaf::synth { class SynthSliderUI$SynthTrackListener; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthSliderUI$SynthTrackListener> = ::javax_swing_plaf_synth / "SynthSliderUI$SynthTrackListener";
namespace javax::swing::plaf::synth { class SynthSpinnerUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthSpinnerUI> = ::javax_swing_plaf_synth / "SynthSpinnerUI";
namespace javax::swing::plaf::synth { class SynthSpinnerUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthSpinnerUI$1> = ::javax_swing_plaf_synth / "SynthSpinnerUI$1";
namespace javax::swing::plaf::synth { class SynthSpinnerUI$EditorFocusHandler; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthSpinnerUI$EditorFocusHandler> = ::javax_swing_plaf_synth / "SynthSpinnerUI$EditorFocusHandler";
namespace javax::swing::plaf::synth { class SynthSpinnerUI$SpinnerLayout; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthSpinnerUI$SpinnerLayout> = ::javax_swing_plaf_synth / "SynthSpinnerUI$SpinnerLayout";
namespace javax::swing::plaf::synth { class SynthSplitPaneDivider; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthSplitPaneDivider> = ::javax_swing_plaf_synth / "SynthSplitPaneDivider";
namespace javax::swing::plaf::synth { class SynthSplitPaneUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthSplitPaneUI> = ::javax_swing_plaf_synth / "SynthSplitPaneUI";
namespace javax::swing::plaf::synth { class SynthSplitPaneUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthSplitPaneUI$1> = ::javax_swing_plaf_synth / "SynthSplitPaneUI$1";
namespace javax::swing::plaf::synth { class SynthStyle; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthStyle> = ::javax_swing_plaf_synth / "SynthStyle";
namespace javax::swing::plaf::synth { class SynthStyleFactory; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthStyleFactory> = ::javax_swing_plaf_synth / "SynthStyleFactory";
namespace javax::swing::plaf::synth { class SynthTabbedPaneUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthTabbedPaneUI> = ::javax_swing_plaf_synth / "SynthTabbedPaneUI";
namespace javax::swing::plaf::synth { class SynthTabbedPaneUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthTabbedPaneUI$1> = ::javax_swing_plaf_synth / "SynthTabbedPaneUI$1";
namespace javax::swing::plaf::synth { class SynthTabbedPaneUI$2; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthTabbedPaneUI$2> = ::javax_swing_plaf_synth / "SynthTabbedPaneUI$2";
namespace javax::swing::plaf::synth { class SynthTabbedPaneUI$SynthScrollableTabButton; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthTabbedPaneUI$SynthScrollableTabButton> = ::javax_swing_plaf_synth / "SynthTabbedPaneUI$SynthScrollableTabButton";
namespace javax::swing::plaf::synth { class SynthTableHeaderUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthTableHeaderUI> = ::javax_swing_plaf_synth / "SynthTableHeaderUI";
namespace javax::swing::plaf::synth { class SynthTableHeaderUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthTableHeaderUI$1> = ::javax_swing_plaf_synth / "SynthTableHeaderUI$1";
namespace javax::swing::plaf::synth { class SynthTableHeaderUI$HeaderRenderer; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthTableHeaderUI$HeaderRenderer> = ::javax_swing_plaf_synth / "SynthTableHeaderUI$HeaderRenderer";
namespace javax::swing::plaf::synth { class SynthTableUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthTableUI> = ::javax_swing_plaf_synth / "SynthTableUI";
namespace javax::swing::plaf::synth { class SynthTableUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthTableUI$1> = ::javax_swing_plaf_synth / "SynthTableUI$1";
namespace javax::swing::plaf::synth { class SynthTableUI$SynthBooleanTableCellRenderer; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthTableUI$SynthBooleanTableCellRenderer> = ::javax_swing_plaf_synth / "SynthTableUI$SynthBooleanTableCellRenderer";
namespace javax::swing::plaf::synth { class SynthTableUI$SynthTableCellRenderer; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthTableUI$SynthTableCellRenderer> = ::javax_swing_plaf_synth / "SynthTableUI$SynthTableCellRenderer";
namespace javax::swing::plaf::synth { class SynthTextAreaUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthTextAreaUI> = ::javax_swing_plaf_synth / "SynthTextAreaUI";
namespace javax::swing::plaf::synth { class SynthTextAreaUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthTextAreaUI$1> = ::javax_swing_plaf_synth / "SynthTextAreaUI$1";
namespace javax::swing::plaf::synth { class SynthTextAreaUI$Handler; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthTextAreaUI$Handler> = ::javax_swing_plaf_synth / "SynthTextAreaUI$Handler";
namespace javax::swing::plaf::synth { class SynthTextFieldUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthTextFieldUI> = ::javax_swing_plaf_synth / "SynthTextFieldUI";
namespace javax::swing::plaf::synth { class SynthTextFieldUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthTextFieldUI$1> = ::javax_swing_plaf_synth / "SynthTextFieldUI$1";
namespace javax::swing::plaf::synth { class SynthTextFieldUI$Handler; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthTextFieldUI$Handler> = ::javax_swing_plaf_synth / "SynthTextFieldUI$Handler";
namespace javax::swing::plaf::synth { class SynthTextPaneUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthTextPaneUI> = ::javax_swing_plaf_synth / "SynthTextPaneUI";
namespace javax::swing::plaf::synth { class SynthToggleButtonUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthToggleButtonUI> = ::javax_swing_plaf_synth / "SynthToggleButtonUI";
namespace javax::swing::plaf::synth { class SynthToolBarUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthToolBarUI> = ::javax_swing_plaf_synth / "SynthToolBarUI";
namespace javax::swing::plaf::synth { class SynthToolBarUI$SynthToolBarLayoutManager; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthToolBarUI$SynthToolBarLayoutManager> = ::javax_swing_plaf_synth / "SynthToolBarUI$SynthToolBarLayoutManager";
namespace javax::swing::plaf::synth { class SynthToolTipUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthToolTipUI> = ::javax_swing_plaf_synth / "SynthToolTipUI";
namespace javax::swing::plaf::synth { class SynthTreeUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthTreeUI> = ::javax_swing_plaf_synth / "SynthTreeUI";
namespace javax::swing::plaf::synth { class SynthTreeUI$1; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthTreeUI$1> = ::javax_swing_plaf_synth / "SynthTreeUI$1";
namespace javax::swing::plaf::synth { class SynthTreeUI$ExpandedIconWrapper; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthTreeUI$ExpandedIconWrapper> = ::javax_swing_plaf_synth / "SynthTreeUI$ExpandedIconWrapper";
namespace javax::swing::plaf::synth { class SynthTreeUI$SynthTreeCellEditor; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthTreeUI$SynthTreeCellEditor> = ::javax_swing_plaf_synth / "SynthTreeUI$SynthTreeCellEditor";
namespace javax::swing::plaf::synth { class SynthTreeUI$SynthTreeCellEditor$1; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthTreeUI$SynthTreeCellEditor$1> = ::javax_swing_plaf_synth / "SynthTreeUI$SynthTreeCellEditor$1";
namespace javax::swing::plaf::synth { class SynthTreeUI$SynthTreeCellRenderer; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthTreeUI$SynthTreeCellRenderer> = ::javax_swing_plaf_synth / "SynthTreeUI$SynthTreeCellRenderer";
namespace javax::swing::plaf::synth { class SynthUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthUI> = ::javax_swing_plaf_synth / "SynthUI";
namespace javax::swing::plaf::synth { class SynthViewportUI; }
template<> constexpr auto signature<::javax::swing::plaf::synth::SynthViewportUI> = ::javax_swing_plaf_synth / "SynthViewportUI";
namespace javax::swing::table { class AbstractTableModel; }
template<> constexpr auto signature<::javax::swing::table::AbstractTableModel> = ::javax_swing_table / "AbstractTableModel";
namespace javax::swing::table { class DefaultTableCellRenderer; }
template<> constexpr auto signature<::javax::swing::table::DefaultTableCellRenderer> = ::javax_swing_table / "DefaultTableCellRenderer";
namespace javax::swing::table { class DefaultTableCellRenderer$UIResource; }
template<> constexpr auto signature<::javax::swing::table::DefaultTableCellRenderer$UIResource> = ::javax_swing_table / "DefaultTableCellRenderer$UIResource";
namespace javax::swing::table { class DefaultTableColumnModel; }
template<> constexpr auto signature<::javax::swing::table::DefaultTableColumnModel> = ::javax_swing_table / "DefaultTableColumnModel";
namespace javax::swing::table { class DefaultTableModel; }
template<> constexpr auto signature<::javax::swing::table::DefaultTableModel> = ::javax_swing_table / "DefaultTableModel";
namespace javax::swing::table { class JTableHeader; }
template<> constexpr auto signature<::javax::swing::table::JTableHeader> = ::javax_swing_table / "JTableHeader";
namespace javax::swing::table { class JTableHeader$AccessibleJTableHeader; }
template<> constexpr auto signature<::javax::swing::table::JTableHeader$AccessibleJTableHeader> = ::javax_swing_table / "JTableHeader$AccessibleJTableHeader";
namespace javax::swing::table { class JTableHeader$AccessibleJTableHeader$AccessibleJTableHeaderEntry; }
template<> constexpr auto signature<::javax::swing::table::JTableHeader$AccessibleJTableHeader$AccessibleJTableHeaderEntry> = ::javax_swing_table / "JTableHeader$AccessibleJTableHeader$AccessibleJTableHeaderEntry";
namespace javax::swing::table { class TableCellEditor; }
template<> constexpr auto signature<::javax::swing::table::TableCellEditor> = ::javax_swing_table / "TableCellEditor";
namespace javax::swing::table { class TableCellRenderer; }
template<> constexpr auto signature<::javax::swing::table::TableCellRenderer> = ::javax_swing_table / "TableCellRenderer";
namespace javax::swing::table { class TableColumn; }
template<> constexpr auto signature<::javax::swing::table::TableColumn> = ::javax_swing_table / "TableColumn";
namespace javax::swing::table { class TableColumn$1; }
template<> constexpr auto signature<::javax::swing::table::TableColumn$1> = ::javax_swing_table / "TableColumn$1";
namespace javax::swing::table { class TableColumnModel; }
template<> constexpr auto signature<::javax::swing::table::TableColumnModel> = ::javax_swing_table / "TableColumnModel";
namespace javax::swing::table { class TableModel; }
template<> constexpr auto signature<::javax::swing::table::TableModel> = ::javax_swing_table / "TableModel";
namespace javax::swing::table { class TableRowSorter; }
template<> constexpr auto signature<::javax::swing::table::TableRowSorter> = ::javax_swing_table / "TableRowSorter";
namespace javax::swing::table { class TableRowSorter$1; }
template<> constexpr auto signature<::javax::swing::table::TableRowSorter$1> = ::javax_swing_table / "TableRowSorter$1";
namespace javax::swing::table { class TableRowSorter$ComparableComparator; }
template<> constexpr auto signature<::javax::swing::table::TableRowSorter$ComparableComparator> = ::javax_swing_table / "TableRowSorter$ComparableComparator";
namespace javax::swing::table { class TableRowSorter$TableRowSorterModelWrapper; }
template<> constexpr auto signature<::javax::swing::table::TableRowSorter$TableRowSorterModelWrapper> = ::javax_swing_table / "TableRowSorter$TableRowSorterModelWrapper";
namespace javax::swing::table { class TableStringConverter; }
template<> constexpr auto signature<::javax::swing::table::TableStringConverter> = ::javax_swing_table / "TableStringConverter";
namespace javax::swing::text { class AbstractDocument; }
template<> constexpr auto signature<::javax::swing::text::AbstractDocument> = ::javax_swing_text / "AbstractDocument";
namespace javax::swing::text { class AbstractDocument$1; }
template<> constexpr auto signature<::javax::swing::text::AbstractDocument$1> = ::javax_swing_text / "AbstractDocument$1";
namespace javax::swing::text { class AbstractDocument$2; }
template<> constexpr auto signature<::javax::swing::text::AbstractDocument$2> = ::javax_swing_text / "AbstractDocument$2";
namespace javax::swing::text { class AbstractDocument$AbstractElement; }
template<> constexpr auto signature<::javax::swing::text::AbstractDocument$AbstractElement> = ::javax_swing_text / "AbstractDocument$AbstractElement";
namespace javax::swing::text { class AbstractDocument$AttributeContext; }
template<> constexpr auto signature<::javax::swing::text::AbstractDocument$AttributeContext> = ::javax_swing_text / "AbstractDocument$AttributeContext";
namespace javax::swing::text { class AbstractDocument$BidiElement; }
template<> constexpr auto signature<::javax::swing::text::AbstractDocument$BidiElement> = ::javax_swing_text / "AbstractDocument$BidiElement";
namespace javax::swing::text { class AbstractDocument$BidiRootElement; }
template<> constexpr auto signature<::javax::swing::text::AbstractDocument$BidiRootElement> = ::javax_swing_text / "AbstractDocument$BidiRootElement";
namespace javax::swing::text { class AbstractDocument$BranchElement; }
template<> constexpr auto signature<::javax::swing::text::AbstractDocument$BranchElement> = ::javax_swing_text / "AbstractDocument$BranchElement";
namespace javax::swing::text { class AbstractDocument$Content; }
template<> constexpr auto signature<::javax::swing::text::AbstractDocument$Content> = ::javax_swing_text / "AbstractDocument$Content";
namespace javax::swing::text { class AbstractDocument$DefaultDocumentEvent; }
template<> constexpr auto signature<::javax::swing::text::AbstractDocument$DefaultDocumentEvent> = ::javax_swing_text / "AbstractDocument$DefaultDocumentEvent";
namespace javax::swing::text { class AbstractDocument$DefaultFilterBypass; }
template<> constexpr auto signature<::javax::swing::text::AbstractDocument$DefaultFilterBypass> = ::javax_swing_text / "AbstractDocument$DefaultFilterBypass";
namespace javax::swing::text { class AbstractDocument$ElementEdit; }
template<> constexpr auto signature<::javax::swing::text::AbstractDocument$ElementEdit> = ::javax_swing_text / "AbstractDocument$ElementEdit";
namespace javax::swing::text { class AbstractDocument$LeafElement; }
template<> constexpr auto signature<::javax::swing::text::AbstractDocument$LeafElement> = ::javax_swing_text / "AbstractDocument$LeafElement";
namespace javax::swing::text { class AbstractDocument$UndoRedoDocumentEvent; }
template<> constexpr auto signature<::javax::swing::text::AbstractDocument$UndoRedoDocumentEvent> = ::javax_swing_text / "AbstractDocument$UndoRedoDocumentEvent";
namespace javax::swing::text { class AbstractWriter; }
template<> constexpr auto signature<::javax::swing::text::AbstractWriter> = ::javax_swing_text / "AbstractWriter";
namespace javax::swing::text { class AsyncBoxView; }
template<> constexpr auto signature<::javax::swing::text::AsyncBoxView> = ::javax_swing_text / "AsyncBoxView";
namespace javax::swing::text { class AsyncBoxView$ChildLocator; }
template<> constexpr auto signature<::javax::swing::text::AsyncBoxView$ChildLocator> = ::javax_swing_text / "AsyncBoxView$ChildLocator";
namespace javax::swing::text { class AsyncBoxView$ChildState; }
template<> constexpr auto signature<::javax::swing::text::AsyncBoxView$ChildState> = ::javax_swing_text / "AsyncBoxView$ChildState";
namespace javax::swing::text { class AsyncBoxView$FlushTask; }
template<> constexpr auto signature<::javax::swing::text::AsyncBoxView$FlushTask> = ::javax_swing_text / "AsyncBoxView$FlushTask";
namespace javax::swing::text { class AttributeSet; }
template<> constexpr auto signature<::javax::swing::text::AttributeSet> = ::javax_swing_text / "AttributeSet";
namespace javax::swing::text { class AttributeSet$CharacterAttribute; }
template<> constexpr auto signature<::javax::swing::text::AttributeSet$CharacterAttribute> = ::javax_swing_text / "AttributeSet$CharacterAttribute";
namespace javax::swing::text { class AttributeSet$ColorAttribute; }
template<> constexpr auto signature<::javax::swing::text::AttributeSet$ColorAttribute> = ::javax_swing_text / "AttributeSet$ColorAttribute";
namespace javax::swing::text { class AttributeSet$FontAttribute; }
template<> constexpr auto signature<::javax::swing::text::AttributeSet$FontAttribute> = ::javax_swing_text / "AttributeSet$FontAttribute";
namespace javax::swing::text { class AttributeSet$ParagraphAttribute; }
template<> constexpr auto signature<::javax::swing::text::AttributeSet$ParagraphAttribute> = ::javax_swing_text / "AttributeSet$ParagraphAttribute";
namespace javax::swing::text { class BadLocationException; }
template<> constexpr auto signature<::javax::swing::text::BadLocationException> = ::javax_swing_text / "BadLocationException";
namespace javax::swing::text { class BoxView; }
template<> constexpr auto signature<::javax::swing::text::BoxView> = ::javax_swing_text / "BoxView";
namespace javax::swing::text { class Caret; }
template<> constexpr auto signature<::javax::swing::text::Caret> = ::javax_swing_text / "Caret";
namespace javax::swing::text { class ChangedCharSetException; }
template<> constexpr auto signature<::javax::swing::text::ChangedCharSetException> = ::javax_swing_text / "ChangedCharSetException";
namespace javax::swing::text { class ComponentView; }
template<> constexpr auto signature<::javax::swing::text::ComponentView> = ::javax_swing_text / "ComponentView";
namespace javax::swing::text { class ComponentView$1; }
template<> constexpr auto signature<::javax::swing::text::ComponentView$1> = ::javax_swing_text / "ComponentView$1";
namespace javax::swing::text { class ComponentView$Invalidator; }
template<> constexpr auto signature<::javax::swing::text::ComponentView$Invalidator> = ::javax_swing_text / "ComponentView$Invalidator";
namespace javax::swing::text { class CompositeView; }
template<> constexpr auto signature<::javax::swing::text::CompositeView> = ::javax_swing_text / "CompositeView";
namespace javax::swing::text { class DateFormatter; }
template<> constexpr auto signature<::javax::swing::text::DateFormatter> = ::javax_swing_text / "DateFormatter";
namespace javax::swing::text { class DefaultCaret; }
template<> constexpr auto signature<::javax::swing::text::DefaultCaret> = ::javax_swing_text / "DefaultCaret";
namespace javax::swing::text { class DefaultCaret$1; }
template<> constexpr auto signature<::javax::swing::text::DefaultCaret$1> = ::javax_swing_text / "DefaultCaret$1";
namespace javax::swing::text { class DefaultCaret$DefaultFilterBypass; }
template<> constexpr auto signature<::javax::swing::text::DefaultCaret$DefaultFilterBypass> = ::javax_swing_text / "DefaultCaret$DefaultFilterBypass";
namespace javax::swing::text { class DefaultCaret$Handler; }
template<> constexpr auto signature<::javax::swing::text::DefaultCaret$Handler> = ::javax_swing_text / "DefaultCaret$Handler";
namespace javax::swing::text { class DefaultCaret$SafeScroller; }
template<> constexpr auto signature<::javax::swing::text::DefaultCaret$SafeScroller> = ::javax_swing_text / "DefaultCaret$SafeScroller";
namespace javax::swing::text { class DefaultEditorKit; }
template<> constexpr auto signature<::javax::swing::text::DefaultEditorKit> = ::javax_swing_text / "DefaultEditorKit";
namespace javax::swing::text { class DefaultEditorKit$BeepAction; }
template<> constexpr auto signature<::javax::swing::text::DefaultEditorKit$BeepAction> = ::javax_swing_text / "DefaultEditorKit$BeepAction";
namespace javax::swing::text { class DefaultEditorKit$BeginAction; }
template<> constexpr auto signature<::javax::swing::text::DefaultEditorKit$BeginAction> = ::javax_swing_text / "DefaultEditorKit$BeginAction";
namespace javax::swing::text { class DefaultEditorKit$BeginLineAction; }
template<> constexpr auto signature<::javax::swing::text::DefaultEditorKit$BeginLineAction> = ::javax_swing_text / "DefaultEditorKit$BeginLineAction";
namespace javax::swing::text { class DefaultEditorKit$BeginParagraphAction; }
template<> constexpr auto signature<::javax::swing::text::DefaultEditorKit$BeginParagraphAction> = ::javax_swing_text / "DefaultEditorKit$BeginParagraphAction";
namespace javax::swing::text { class DefaultEditorKit$BeginWordAction; }
template<> constexpr auto signature<::javax::swing::text::DefaultEditorKit$BeginWordAction> = ::javax_swing_text / "DefaultEditorKit$BeginWordAction";
namespace javax::swing::text { class DefaultEditorKit$CopyAction; }
template<> constexpr auto signature<::javax::swing::text::DefaultEditorKit$CopyAction> = ::javax_swing_text / "DefaultEditorKit$CopyAction";
namespace javax::swing::text { class DefaultEditorKit$CutAction; }
template<> constexpr auto signature<::javax::swing::text::DefaultEditorKit$CutAction> = ::javax_swing_text / "DefaultEditorKit$CutAction";
namespace javax::swing::text { class DefaultEditorKit$DefaultKeyTypedAction; }
template<> constexpr auto signature<::javax::swing::text::DefaultEditorKit$DefaultKeyTypedAction> = ::javax_swing_text / "DefaultEditorKit$DefaultKeyTypedAction";
namespace javax::swing::text { class DefaultEditorKit$DeleteNextCharAction; }
template<> constexpr auto signature<::javax::swing::text::DefaultEditorKit$DeleteNextCharAction> = ::javax_swing_text / "DefaultEditorKit$DeleteNextCharAction";
namespace javax::swing::text { class DefaultEditorKit$DeletePrevCharAction; }
template<> constexpr auto signature<::javax::swing::text::DefaultEditorKit$DeletePrevCharAction> = ::javax_swing_text / "DefaultEditorKit$DeletePrevCharAction";
namespace javax::swing::text { class DefaultEditorKit$DeleteWordAction; }
template<> constexpr auto signature<::javax::swing::text::DefaultEditorKit$DeleteWordAction> = ::javax_swing_text / "DefaultEditorKit$DeleteWordAction";
namespace javax::swing::text { class DefaultEditorKit$DumpModelAction; }
template<> constexpr auto signature<::javax::swing::text::DefaultEditorKit$DumpModelAction> = ::javax_swing_text / "DefaultEditorKit$DumpModelAction";
namespace javax::swing::text { class DefaultEditorKit$EndAction; }
template<> constexpr auto signature<::javax::swing::text::DefaultEditorKit$EndAction> = ::javax_swing_text / "DefaultEditorKit$EndAction";
namespace javax::swing::text { class DefaultEditorKit$EndLineAction; }
template<> constexpr auto signature<::javax::swing::text::DefaultEditorKit$EndLineAction> = ::javax_swing_text / "DefaultEditorKit$EndLineAction";
namespace javax::swing::text { class DefaultEditorKit$EndParagraphAction; }
template<> constexpr auto signature<::javax::swing::text::DefaultEditorKit$EndParagraphAction> = ::javax_swing_text / "DefaultEditorKit$EndParagraphAction";
namespace javax::swing::text { class DefaultEditorKit$EndWordAction; }
template<> constexpr auto signature<::javax::swing::text::DefaultEditorKit$EndWordAction> = ::javax_swing_text / "DefaultEditorKit$EndWordAction";
namespace javax::swing::text { class DefaultEditorKit$InsertBreakAction; }
template<> constexpr auto signature<::javax::swing::text::DefaultEditorKit$InsertBreakAction> = ::javax_swing_text / "DefaultEditorKit$InsertBreakAction";
namespace javax::swing::text { class DefaultEditorKit$InsertContentAction; }
template<> constexpr auto signature<::javax::swing::text::DefaultEditorKit$InsertContentAction> = ::javax_swing_text / "DefaultEditorKit$InsertContentAction";
namespace javax::swing::text { class DefaultEditorKit$InsertTabAction; }
template<> constexpr auto signature<::javax::swing::text::DefaultEditorKit$InsertTabAction> = ::javax_swing_text / "DefaultEditorKit$InsertTabAction";
namespace javax::swing::text { class DefaultEditorKit$NextVisualPositionAction; }
template<> constexpr auto signature<::javax::swing::text::DefaultEditorKit$NextVisualPositionAction> = ::javax_swing_text / "DefaultEditorKit$NextVisualPositionAction";
namespace javax::swing::text { class DefaultEditorKit$NextWordAction; }
template<> constexpr auto signature<::javax::swing::text::DefaultEditorKit$NextWordAction> = ::javax_swing_text / "DefaultEditorKit$NextWordAction";
namespace javax::swing::text { class DefaultEditorKit$PageAction; }
template<> constexpr auto signature<::javax::swing::text::DefaultEditorKit$PageAction> = ::javax_swing_text / "DefaultEditorKit$PageAction";
namespace javax::swing::text { class DefaultEditorKit$PasteAction; }
template<> constexpr auto signature<::javax::swing::text::DefaultEditorKit$PasteAction> = ::javax_swing_text / "DefaultEditorKit$PasteAction";
namespace javax::swing::text { class DefaultEditorKit$PreviousWordAction; }
template<> constexpr auto signature<::javax::swing::text::DefaultEditorKit$PreviousWordAction> = ::javax_swing_text / "DefaultEditorKit$PreviousWordAction";
namespace javax::swing::text { class DefaultEditorKit$ReadOnlyAction; }
template<> constexpr auto signature<::javax::swing::text::DefaultEditorKit$ReadOnlyAction> = ::javax_swing_text / "DefaultEditorKit$ReadOnlyAction";
namespace javax::swing::text { class DefaultEditorKit$SelectAllAction; }
template<> constexpr auto signature<::javax::swing::text::DefaultEditorKit$SelectAllAction> = ::javax_swing_text / "DefaultEditorKit$SelectAllAction";
namespace javax::swing::text { class DefaultEditorKit$SelectLineAction; }
template<> constexpr auto signature<::javax::swing::text::DefaultEditorKit$SelectLineAction> = ::javax_swing_text / "DefaultEditorKit$SelectLineAction";
namespace javax::swing::text { class DefaultEditorKit$SelectParagraphAction; }
template<> constexpr auto signature<::javax::swing::text::DefaultEditorKit$SelectParagraphAction> = ::javax_swing_text / "DefaultEditorKit$SelectParagraphAction";
namespace javax::swing::text { class DefaultEditorKit$SelectWordAction; }
template<> constexpr auto signature<::javax::swing::text::DefaultEditorKit$SelectWordAction> = ::javax_swing_text / "DefaultEditorKit$SelectWordAction";
namespace javax::swing::text { class DefaultEditorKit$ToggleComponentOrientationAction; }
template<> constexpr auto signature<::javax::swing::text::DefaultEditorKit$ToggleComponentOrientationAction> = ::javax_swing_text / "DefaultEditorKit$ToggleComponentOrientationAction";
namespace javax::swing::text { class DefaultEditorKit$UnselectAction; }
template<> constexpr auto signature<::javax::swing::text::DefaultEditorKit$UnselectAction> = ::javax_swing_text / "DefaultEditorKit$UnselectAction";
namespace javax::swing::text { class DefaultEditorKit$VerticalPageAction; }
template<> constexpr auto signature<::javax::swing::text::DefaultEditorKit$VerticalPageAction> = ::javax_swing_text / "DefaultEditorKit$VerticalPageAction";
namespace javax::swing::text { class DefaultEditorKit$WritableAction; }
template<> constexpr auto signature<::javax::swing::text::DefaultEditorKit$WritableAction> = ::javax_swing_text / "DefaultEditorKit$WritableAction";
namespace javax::swing::text { class DefaultFormatter; }
template<> constexpr auto signature<::javax::swing::text::DefaultFormatter> = ::javax_swing_text / "DefaultFormatter";
namespace javax::swing::text { class DefaultFormatter$1; }
template<> constexpr auto signature<::javax::swing::text::DefaultFormatter$1> = ::javax_swing_text / "DefaultFormatter$1";
namespace javax::swing::text { class DefaultFormatter$DefaultDocumentFilter; }
template<> constexpr auto signature<::javax::swing::text::DefaultFormatter$DefaultDocumentFilter> = ::javax_swing_text / "DefaultFormatter$DefaultDocumentFilter";
namespace javax::swing::text { class DefaultFormatter$DefaultNavigationFilter; }
template<> constexpr auto signature<::javax::swing::text::DefaultFormatter$DefaultNavigationFilter> = ::javax_swing_text / "DefaultFormatter$DefaultNavigationFilter";
namespace javax::swing::text { class DefaultFormatter$ReplaceHolder; }
template<> constexpr auto signature<::javax::swing::text::DefaultFormatter$ReplaceHolder> = ::javax_swing_text / "DefaultFormatter$ReplaceHolder";
namespace javax::swing::text { class DefaultFormatterFactory; }
template<> constexpr auto signature<::javax::swing::text::DefaultFormatterFactory> = ::javax_swing_text / "DefaultFormatterFactory";
namespace javax::swing::text { class DefaultHighlighter; }
template<> constexpr auto signature<::javax::swing::text::DefaultHighlighter> = ::javax_swing_text / "DefaultHighlighter";
namespace javax::swing::text { class DefaultHighlighter$DefaultHighlightPainter; }
template<> constexpr auto signature<::javax::swing::text::DefaultHighlighter$DefaultHighlightPainter> = ::javax_swing_text / "DefaultHighlighter$DefaultHighlightPainter";
namespace javax::swing::text { class DefaultHighlighter$HighlightInfo; }
template<> constexpr auto signature<::javax::swing::text::DefaultHighlighter$HighlightInfo> = ::javax_swing_text / "DefaultHighlighter$HighlightInfo";
namespace javax::swing::text { class DefaultHighlighter$LayeredHighlightInfo; }
template<> constexpr auto signature<::javax::swing::text::DefaultHighlighter$LayeredHighlightInfo> = ::javax_swing_text / "DefaultHighlighter$LayeredHighlightInfo";
namespace javax::swing::text { class DefaultHighlighter$SafeDamager; }
template<> constexpr auto signature<::javax::swing::text::DefaultHighlighter$SafeDamager> = ::javax_swing_text / "DefaultHighlighter$SafeDamager";
namespace javax::swing::text { class DefaultStyledDocument; }
template<> constexpr auto signature<::javax::swing::text::DefaultStyledDocument> = ::javax_swing_text / "DefaultStyledDocument";
namespace javax::swing::text { class DefaultStyledDocument$AbstractChangeHandler; }
template<> constexpr auto signature<::javax::swing::text::DefaultStyledDocument$AbstractChangeHandler> = ::javax_swing_text / "DefaultStyledDocument$AbstractChangeHandler";
namespace javax::swing::text { class DefaultStyledDocument$AbstractChangeHandler$DocReference; }
template<> constexpr auto signature<::javax::swing::text::DefaultStyledDocument$AbstractChangeHandler$DocReference> = ::javax_swing_text / "DefaultStyledDocument$AbstractChangeHandler$DocReference";
namespace javax::swing::text { class DefaultStyledDocument$AttributeUndoableEdit; }
template<> constexpr auto signature<::javax::swing::text::DefaultStyledDocument$AttributeUndoableEdit> = ::javax_swing_text / "DefaultStyledDocument$AttributeUndoableEdit";
namespace javax::swing::text { class DefaultStyledDocument$ChangeUpdateRunnable; }
template<> constexpr auto signature<::javax::swing::text::DefaultStyledDocument$ChangeUpdateRunnable> = ::javax_swing_text / "DefaultStyledDocument$ChangeUpdateRunnable";
namespace javax::swing::text { class DefaultStyledDocument$ElementBuffer; }
template<> constexpr auto signature<::javax::swing::text::DefaultStyledDocument$ElementBuffer> = ::javax_swing_text / "DefaultStyledDocument$ElementBuffer";
namespace javax::swing::text { class DefaultStyledDocument$ElementBuffer$ElemChanges; }
template<> constexpr auto signature<::javax::swing::text::DefaultStyledDocument$ElementBuffer$ElemChanges> = ::javax_swing_text / "DefaultStyledDocument$ElementBuffer$ElemChanges";
namespace javax::swing::text { class DefaultStyledDocument$ElementSpec; }
template<> constexpr auto signature<::javax::swing::text::DefaultStyledDocument$ElementSpec> = ::javax_swing_text / "DefaultStyledDocument$ElementSpec";
namespace javax::swing::text { class DefaultStyledDocument$SectionElement; }
template<> constexpr auto signature<::javax::swing::text::DefaultStyledDocument$SectionElement> = ::javax_swing_text / "DefaultStyledDocument$SectionElement";
namespace javax::swing::text { class DefaultStyledDocument$StyleChangeHandler; }
template<> constexpr auto signature<::javax::swing::text::DefaultStyledDocument$StyleChangeHandler> = ::javax_swing_text / "DefaultStyledDocument$StyleChangeHandler";
namespace javax::swing::text { class DefaultStyledDocument$StyleChangeUndoableEdit; }
template<> constexpr auto signature<::javax::swing::text::DefaultStyledDocument$StyleChangeUndoableEdit> = ::javax_swing_text / "DefaultStyledDocument$StyleChangeUndoableEdit";
namespace javax::swing::text { class DefaultStyledDocument$StyleContextChangeHandler; }
template<> constexpr auto signature<::javax::swing::text::DefaultStyledDocument$StyleContextChangeHandler> = ::javax_swing_text / "DefaultStyledDocument$StyleContextChangeHandler";
namespace javax::swing::text { class DefaultTextUI; }
template<> constexpr auto signature<::javax::swing::text::DefaultTextUI> = ::javax_swing_text / "DefaultTextUI";
namespace javax::swing::text { class Document; }
template<> constexpr auto signature<::javax::swing::text::Document> = ::javax_swing_text / "Document";
namespace javax::swing::text { class DocumentFilter; }
template<> constexpr auto signature<::javax::swing::text::DocumentFilter> = ::javax_swing_text / "DocumentFilter";
namespace javax::swing::text { class DocumentFilter$FilterBypass; }
template<> constexpr auto signature<::javax::swing::text::DocumentFilter$FilterBypass> = ::javax_swing_text / "DocumentFilter$FilterBypass";
namespace javax::swing::text { class EditorKit; }
template<> constexpr auto signature<::javax::swing::text::EditorKit> = ::javax_swing_text / "EditorKit";
namespace javax::swing::text { class Element; }
template<> constexpr auto signature<::javax::swing::text::Element> = ::javax_swing_text / "Element";
namespace javax::swing::text { class ElementIterator; }
template<> constexpr auto signature<::javax::swing::text::ElementIterator> = ::javax_swing_text / "ElementIterator";
namespace javax::swing::text { class ElementIterator$1; }
template<> constexpr auto signature<::javax::swing::text::ElementIterator$1> = ::javax_swing_text / "ElementIterator$1";
namespace javax::swing::text { class ElementIterator$StackItem; }
template<> constexpr auto signature<::javax::swing::text::ElementIterator$StackItem> = ::javax_swing_text / "ElementIterator$StackItem";
namespace javax::swing::text { class FieldView; }
template<> constexpr auto signature<::javax::swing::text::FieldView> = ::javax_swing_text / "FieldView";
namespace javax::swing::text { class FlowView; }
template<> constexpr auto signature<::javax::swing::text::FlowView> = ::javax_swing_text / "FlowView";
namespace javax::swing::text { class FlowView$FlowStrategy; }
template<> constexpr auto signature<::javax::swing::text::FlowView$FlowStrategy> = ::javax_swing_text / "FlowView$FlowStrategy";
namespace javax::swing::text { class FlowView$LogicalView; }
template<> constexpr auto signature<::javax::swing::text::FlowView$LogicalView> = ::javax_swing_text / "FlowView$LogicalView";
namespace javax::swing::text { class GapContent; }
template<> constexpr auto signature<::javax::swing::text::GapContent> = ::javax_swing_text / "GapContent";
namespace javax::swing::text { class GapContent$InsertUndo; }
template<> constexpr auto signature<::javax::swing::text::GapContent$InsertUndo> = ::javax_swing_text / "GapContent$InsertUndo";
namespace javax::swing::text { class GapContent$MarkData; }
template<> constexpr auto signature<::javax::swing::text::GapContent$MarkData> = ::javax_swing_text / "GapContent$MarkData";
namespace javax::swing::text { class GapContent$MarkVector; }
template<> constexpr auto signature<::javax::swing::text::GapContent$MarkVector> = ::javax_swing_text / "GapContent$MarkVector";
namespace javax::swing::text { class GapContent$RemoveUndo; }
template<> constexpr auto signature<::javax::swing::text::GapContent$RemoveUndo> = ::javax_swing_text / "GapContent$RemoveUndo";
namespace javax::swing::text { class GapContent$StickyPosition; }
template<> constexpr auto signature<::javax::swing::text::GapContent$StickyPosition> = ::javax_swing_text / "GapContent$StickyPosition";
namespace javax::swing::text { class GapContent$UndoPosRef; }
template<> constexpr auto signature<::javax::swing::text::GapContent$UndoPosRef> = ::javax_swing_text / "GapContent$UndoPosRef";
namespace javax::swing::text { class GapVector; }
template<> constexpr auto signature<::javax::swing::text::GapVector> = ::javax_swing_text / "GapVector";
namespace javax::swing::text { class GlyphPainter1; }
template<> constexpr auto signature<::javax::swing::text::GlyphPainter1> = ::javax_swing_text / "GlyphPainter1";
namespace javax::swing::text { class GlyphPainter2; }
template<> constexpr auto signature<::javax::swing::text::GlyphPainter2> = ::javax_swing_text / "GlyphPainter2";
namespace javax::swing::text { class GlyphView; }
template<> constexpr auto signature<::javax::swing::text::GlyphView> = ::javax_swing_text / "GlyphView";
namespace javax::swing::text { class GlyphView$GlyphPainter; }
template<> constexpr auto signature<::javax::swing::text::GlyphView$GlyphPainter> = ::javax_swing_text / "GlyphView$GlyphPainter";
namespace javax::swing::text { class GlyphView$JustificationInfo; }
template<> constexpr auto signature<::javax::swing::text::GlyphView$JustificationInfo> = ::javax_swing_text / "GlyphView$JustificationInfo";
namespace javax::swing::text { class Highlighter; }
template<> constexpr auto signature<::javax::swing::text::Highlighter> = ::javax_swing_text / "Highlighter";
namespace javax::swing::text { class Highlighter$Highlight; }
template<> constexpr auto signature<::javax::swing::text::Highlighter$Highlight> = ::javax_swing_text / "Highlighter$Highlight";
namespace javax::swing::text { class Highlighter$HighlightPainter; }
template<> constexpr auto signature<::javax::swing::text::Highlighter$HighlightPainter> = ::javax_swing_text / "Highlighter$HighlightPainter";
namespace javax::swing::text { class IconView; }
template<> constexpr auto signature<::javax::swing::text::IconView> = ::javax_swing_text / "IconView";
namespace javax::swing::text { class InternationalFormatter; }
template<> constexpr auto signature<::javax::swing::text::InternationalFormatter> = ::javax_swing_text / "InternationalFormatter";
namespace javax::swing::text { class InternationalFormatter$ExtendedReplaceHolder; }
template<> constexpr auto signature<::javax::swing::text::InternationalFormatter$ExtendedReplaceHolder> = ::javax_swing_text / "InternationalFormatter$ExtendedReplaceHolder";
namespace javax::swing::text { class InternationalFormatter$IncrementAction; }
template<> constexpr auto signature<::javax::swing::text::InternationalFormatter$IncrementAction> = ::javax_swing_text / "InternationalFormatter$IncrementAction";
namespace javax::swing::text { class JTextComponent; }
template<> constexpr auto signature<::javax::swing::text::JTextComponent> = ::javax_swing_text / "JTextComponent";
namespace javax::swing::text { class JTextComponent$1; }
template<> constexpr auto signature<::javax::swing::text::JTextComponent$1> = ::javax_swing_text / "JTextComponent$1";
namespace javax::swing::text { class JTextComponent$2; }
template<> constexpr auto signature<::javax::swing::text::JTextComponent$2> = ::javax_swing_text / "JTextComponent$2";
namespace javax::swing::text { class JTextComponent$3; }
template<> constexpr auto signature<::javax::swing::text::JTextComponent$3> = ::javax_swing_text / "JTextComponent$3";
namespace javax::swing::text { class JTextComponent$3$1; }
template<> constexpr auto signature<::javax::swing::text::JTextComponent$3$1> = ::javax_swing_text / "JTextComponent$3$1";
namespace javax::swing::text { class JTextComponent$3$2; }
template<> constexpr auto signature<::javax::swing::text::JTextComponent$3$2> = ::javax_swing_text / "JTextComponent$3$2";
namespace javax::swing::text { class JTextComponent$4; }
template<> constexpr auto signature<::javax::swing::text::JTextComponent$4> = ::javax_swing_text / "JTextComponent$4";
namespace javax::swing::text { class JTextComponent$4$1; }
template<> constexpr auto signature<::javax::swing::text::JTextComponent$4$1> = ::javax_swing_text / "JTextComponent$4$1";
namespace javax::swing::text { class JTextComponent$5; }
template<> constexpr auto signature<::javax::swing::text::JTextComponent$5> = ::javax_swing_text / "JTextComponent$5";
namespace javax::swing::text { class JTextComponent$AccessibleJTextComponent; }
template<> constexpr auto signature<::javax::swing::text::JTextComponent$AccessibleJTextComponent> = ::javax_swing_text / "JTextComponent$AccessibleJTextComponent";
namespace javax::swing::text { class JTextComponent$AccessibleJTextComponent$1; }
template<> constexpr auto signature<::javax::swing::text::JTextComponent$AccessibleJTextComponent$1> = ::javax_swing_text / "JTextComponent$AccessibleJTextComponent$1";
namespace javax::swing::text { class JTextComponent$AccessibleJTextComponent$2; }
template<> constexpr auto signature<::javax::swing::text::JTextComponent$AccessibleJTextComponent$2> = ::javax_swing_text / "JTextComponent$AccessibleJTextComponent$2";
namespace javax::swing::text { class JTextComponent$AccessibleJTextComponent$3; }
template<> constexpr auto signature<::javax::swing::text::JTextComponent$AccessibleJTextComponent$3> = ::javax_swing_text / "JTextComponent$AccessibleJTextComponent$3";
namespace javax::swing::text { class JTextComponent$AccessibleJTextComponent$4; }
template<> constexpr auto signature<::javax::swing::text::JTextComponent$AccessibleJTextComponent$4> = ::javax_swing_text / "JTextComponent$AccessibleJTextComponent$4";
namespace javax::swing::text { class JTextComponent$AccessibleJTextComponent$IndexedSegment; }
template<> constexpr auto signature<::javax::swing::text::JTextComponent$AccessibleJTextComponent$IndexedSegment> = ::javax_swing_text / "JTextComponent$AccessibleJTextComponent$IndexedSegment";
namespace javax::swing::text { class JTextComponent$ComposedTextCaret; }
template<> constexpr auto signature<::javax::swing::text::JTextComponent$ComposedTextCaret> = ::javax_swing_text / "JTextComponent$ComposedTextCaret";
namespace javax::swing::text { class JTextComponent$DefaultKeymap; }
template<> constexpr auto signature<::javax::swing::text::JTextComponent$DefaultKeymap> = ::javax_swing_text / "JTextComponent$DefaultKeymap";
namespace javax::swing::text { class JTextComponent$DefaultTransferHandler; }
template<> constexpr auto signature<::javax::swing::text::JTextComponent$DefaultTransferHandler> = ::javax_swing_text / "JTextComponent$DefaultTransferHandler";
namespace javax::swing::text { class JTextComponent$DoSetCaretPosition; }
template<> constexpr auto signature<::javax::swing::text::JTextComponent$DoSetCaretPosition> = ::javax_swing_text / "JTextComponent$DoSetCaretPosition";
namespace javax::swing::text { class JTextComponent$DropLocation; }
template<> constexpr auto signature<::javax::swing::text::JTextComponent$DropLocation> = ::javax_swing_text / "JTextComponent$DropLocation";
namespace javax::swing::text { class JTextComponent$InputMethodRequestsHandler; }
template<> constexpr auto signature<::javax::swing::text::JTextComponent$InputMethodRequestsHandler> = ::javax_swing_text / "JTextComponent$InputMethodRequestsHandler";
namespace javax::swing::text { class JTextComponent$KeyBinding; }
template<> constexpr auto signature<::javax::swing::text::JTextComponent$KeyBinding> = ::javax_swing_text / "JTextComponent$KeyBinding";
namespace javax::swing::text { class JTextComponent$KeymapActionMap; }
template<> constexpr auto signature<::javax::swing::text::JTextComponent$KeymapActionMap> = ::javax_swing_text / "JTextComponent$KeymapActionMap";
namespace javax::swing::text { class JTextComponent$KeymapWrapper; }
template<> constexpr auto signature<::javax::swing::text::JTextComponent$KeymapWrapper> = ::javax_swing_text / "JTextComponent$KeymapWrapper";
namespace javax::swing::text { class JTextComponent$MutableCaretEvent; }
template<> constexpr auto signature<::javax::swing::text::JTextComponent$MutableCaretEvent> = ::javax_swing_text / "JTextComponent$MutableCaretEvent";
namespace javax::swing::text { class Keymap; }
template<> constexpr auto signature<::javax::swing::text::Keymap> = ::javax_swing_text / "Keymap";
namespace javax::swing::text { class LabelView; }
template<> constexpr auto signature<::javax::swing::text::LabelView> = ::javax_swing_text / "LabelView";
namespace javax::swing::text { class LayeredHighlighter; }
template<> constexpr auto signature<::javax::swing::text::LayeredHighlighter> = ::javax_swing_text / "LayeredHighlighter";
namespace javax::swing::text { class LayeredHighlighter$LayerPainter; }
template<> constexpr auto signature<::javax::swing::text::LayeredHighlighter$LayerPainter> = ::javax_swing_text / "LayeredHighlighter$LayerPainter";
namespace javax::swing::text { class LayoutQueue; }
template<> constexpr auto signature<::javax::swing::text::LayoutQueue> = ::javax_swing_text / "LayoutQueue";
namespace javax::swing::text { class LayoutQueue$LayoutThread; }
template<> constexpr auto signature<::javax::swing::text::LayoutQueue$LayoutThread> = ::javax_swing_text / "LayoutQueue$LayoutThread";
namespace javax::swing::text { class MaskFormatter; }
template<> constexpr auto signature<::javax::swing::text::MaskFormatter> = ::javax_swing_text / "MaskFormatter";
namespace javax::swing::text { class MaskFormatter$1; }
template<> constexpr auto signature<::javax::swing::text::MaskFormatter$1> = ::javax_swing_text / "MaskFormatter$1";
namespace javax::swing::text { class MaskFormatter$AlphaNumericCharacter; }
template<> constexpr auto signature<::javax::swing::text::MaskFormatter$AlphaNumericCharacter> = ::javax_swing_text / "MaskFormatter$AlphaNumericCharacter";
namespace javax::swing::text { class MaskFormatter$CharCharacter; }
template<> constexpr auto signature<::javax::swing::text::MaskFormatter$CharCharacter> = ::javax_swing_text / "MaskFormatter$CharCharacter";
namespace javax::swing::text { class MaskFormatter$DigitMaskCharacter; }
template<> constexpr auto signature<::javax::swing::text::MaskFormatter$DigitMaskCharacter> = ::javax_swing_text / "MaskFormatter$DigitMaskCharacter";
namespace javax::swing::text { class MaskFormatter$HexCharacter; }
template<> constexpr auto signature<::javax::swing::text::MaskFormatter$HexCharacter> = ::javax_swing_text / "MaskFormatter$HexCharacter";
namespace javax::swing::text { class MaskFormatter$LiteralCharacter; }
template<> constexpr auto signature<::javax::swing::text::MaskFormatter$LiteralCharacter> = ::javax_swing_text / "MaskFormatter$LiteralCharacter";
namespace javax::swing::text { class MaskFormatter$LowerCaseCharacter; }
template<> constexpr auto signature<::javax::swing::text::MaskFormatter$LowerCaseCharacter> = ::javax_swing_text / "MaskFormatter$LowerCaseCharacter";
namespace javax::swing::text { class MaskFormatter$MaskCharacter; }
template<> constexpr auto signature<::javax::swing::text::MaskFormatter$MaskCharacter> = ::javax_swing_text / "MaskFormatter$MaskCharacter";
namespace javax::swing::text { class MaskFormatter$UpperCaseCharacter; }
template<> constexpr auto signature<::javax::swing::text::MaskFormatter$UpperCaseCharacter> = ::javax_swing_text / "MaskFormatter$UpperCaseCharacter";
namespace javax::swing::text { class MutableAttributeSet; }
template<> constexpr auto signature<::javax::swing::text::MutableAttributeSet> = ::javax_swing_text / "MutableAttributeSet";
namespace javax::swing::text { class NavigationFilter; }
template<> constexpr auto signature<::javax::swing::text::NavigationFilter> = ::javax_swing_text / "NavigationFilter";
namespace javax::swing::text { class NavigationFilter$FilterBypass; }
template<> constexpr auto signature<::javax::swing::text::NavigationFilter$FilterBypass> = ::javax_swing_text / "NavigationFilter$FilterBypass";
namespace javax::swing::text { class NumberFormatter; }
template<> constexpr auto signature<::javax::swing::text::NumberFormatter> = ::javax_swing_text / "NumberFormatter";
namespace javax::swing::text { class ParagraphView; }
template<> constexpr auto signature<::javax::swing::text::ParagraphView> = ::javax_swing_text / "ParagraphView";
namespace javax::swing::text { class ParagraphView$Row; }
template<> constexpr auto signature<::javax::swing::text::ParagraphView$Row> = ::javax_swing_text / "ParagraphView$Row";
namespace javax::swing::text { class PasswordView; }
template<> constexpr auto signature<::javax::swing::text::PasswordView> = ::javax_swing_text / "PasswordView";
namespace javax::swing::text { class PlainDocument; }
template<> constexpr auto signature<::javax::swing::text::PlainDocument> = ::javax_swing_text / "PlainDocument";
namespace javax::swing::text { class PlainView; }
template<> constexpr auto signature<::javax::swing::text::PlainView> = ::javax_swing_text / "PlainView";
namespace javax::swing::text { class Position; }
template<> constexpr auto signature<::javax::swing::text::Position> = ::javax_swing_text / "Position";
namespace javax::swing::text { class Position$Bias; }
template<> constexpr auto signature<::javax::swing::text::Position$Bias> = ::javax_swing_text / "Position$Bias";
namespace javax::swing::text { class Segment; }
template<> constexpr auto signature<::javax::swing::text::Segment> = ::javax_swing_text / "Segment";
namespace javax::swing::text { class SegmentCache; }
template<> constexpr auto signature<::javax::swing::text::SegmentCache> = ::javax_swing_text / "SegmentCache";
namespace javax::swing::text { class SegmentCache$1; }
template<> constexpr auto signature<::javax::swing::text::SegmentCache$1> = ::javax_swing_text / "SegmentCache$1";
namespace javax::swing::text { class SegmentCache$CachedSegment; }
template<> constexpr auto signature<::javax::swing::text::SegmentCache$CachedSegment> = ::javax_swing_text / "SegmentCache$CachedSegment";
namespace javax::swing::text { class SimpleAttributeSet; }
template<> constexpr auto signature<::javax::swing::text::SimpleAttributeSet> = ::javax_swing_text / "SimpleAttributeSet";
namespace javax::swing::text { class SimpleAttributeSet$EmptyAttributeSet; }
template<> constexpr auto signature<::javax::swing::text::SimpleAttributeSet$EmptyAttributeSet> = ::javax_swing_text / "SimpleAttributeSet$EmptyAttributeSet";
namespace javax::swing::text { class StateInvariantError; }
template<> constexpr auto signature<::javax::swing::text::StateInvariantError> = ::javax_swing_text / "StateInvariantError";
namespace javax::swing::text { class StringContent; }
template<> constexpr auto signature<::javax::swing::text::StringContent> = ::javax_swing_text / "StringContent";
namespace javax::swing::text { class StringContent$InsertUndo; }
template<> constexpr auto signature<::javax::swing::text::StringContent$InsertUndo> = ::javax_swing_text / "StringContent$InsertUndo";
namespace javax::swing::text { class StringContent$PosRec; }
template<> constexpr auto signature<::javax::swing::text::StringContent$PosRec> = ::javax_swing_text / "StringContent$PosRec";
namespace javax::swing::text { class StringContent$RemoveUndo; }
template<> constexpr auto signature<::javax::swing::text::StringContent$RemoveUndo> = ::javax_swing_text / "StringContent$RemoveUndo";
namespace javax::swing::text { class StringContent$StickyPosition; }
template<> constexpr auto signature<::javax::swing::text::StringContent$StickyPosition> = ::javax_swing_text / "StringContent$StickyPosition";
namespace javax::swing::text { class StringContent$UndoPosRef; }
template<> constexpr auto signature<::javax::swing::text::StringContent$UndoPosRef> = ::javax_swing_text / "StringContent$UndoPosRef";
namespace javax::swing::text { class Style; }
template<> constexpr auto signature<::javax::swing::text::Style> = ::javax_swing_text / "Style";
namespace javax::swing::text { class StyleConstants; }
template<> constexpr auto signature<::javax::swing::text::StyleConstants> = ::javax_swing_text / "StyleConstants";
namespace javax::swing::text { class StyleConstants$1; }
template<> constexpr auto signature<::javax::swing::text::StyleConstants$1> = ::javax_swing_text / "StyleConstants$1";
namespace javax::swing::text { class StyleConstants$CharacterConstants; }
template<> constexpr auto signature<::javax::swing::text::StyleConstants$CharacterConstants> = ::javax_swing_text / "StyleConstants$CharacterConstants";
namespace javax::swing::text { class StyleConstants$ColorConstants; }
template<> constexpr auto signature<::javax::swing::text::StyleConstants$ColorConstants> = ::javax_swing_text / "StyleConstants$ColorConstants";
namespace javax::swing::text { class StyleConstants$FontConstants; }
template<> constexpr auto signature<::javax::swing::text::StyleConstants$FontConstants> = ::javax_swing_text / "StyleConstants$FontConstants";
namespace javax::swing::text { class StyleConstants$ParagraphConstants; }
template<> constexpr auto signature<::javax::swing::text::StyleConstants$ParagraphConstants> = ::javax_swing_text / "StyleConstants$ParagraphConstants";
namespace javax::swing::text { class StyleContext; }
template<> constexpr auto signature<::javax::swing::text::StyleContext> = ::javax_swing_text / "StyleContext";
namespace javax::swing::text { class StyleContext$FontKey; }
template<> constexpr auto signature<::javax::swing::text::StyleContext$FontKey> = ::javax_swing_text / "StyleContext$FontKey";
namespace javax::swing::text { class StyleContext$KeyBuilder; }
template<> constexpr auto signature<::javax::swing::text::StyleContext$KeyBuilder> = ::javax_swing_text / "StyleContext$KeyBuilder";
namespace javax::swing::text { class StyleContext$KeyEnumeration; }
template<> constexpr auto signature<::javax::swing::text::StyleContext$KeyEnumeration> = ::javax_swing_text / "StyleContext$KeyEnumeration";
namespace javax::swing::text { class StyleContext$NamedStyle; }
template<> constexpr auto signature<::javax::swing::text::StyleContext$NamedStyle> = ::javax_swing_text / "StyleContext$NamedStyle";
namespace javax::swing::text { class StyleContext$SmallAttributeSet; }
template<> constexpr auto signature<::javax::swing::text::StyleContext$SmallAttributeSet> = ::javax_swing_text / "StyleContext$SmallAttributeSet";
namespace javax::swing::text { class StyledDocument; }
template<> constexpr auto signature<::javax::swing::text::StyledDocument> = ::javax_swing_text / "StyledDocument";
namespace javax::swing::text { class StyledEditorKit; }
template<> constexpr auto signature<::javax::swing::text::StyledEditorKit> = ::javax_swing_text / "StyledEditorKit";
namespace javax::swing::text { class StyledEditorKit$1; }
template<> constexpr auto signature<::javax::swing::text::StyledEditorKit$1> = ::javax_swing_text / "StyledEditorKit$1";
namespace javax::swing::text { class StyledEditorKit$AlignmentAction; }
template<> constexpr auto signature<::javax::swing::text::StyledEditorKit$AlignmentAction> = ::javax_swing_text / "StyledEditorKit$AlignmentAction";
namespace javax::swing::text { class StyledEditorKit$AttributeTracker; }
template<> constexpr auto signature<::javax::swing::text::StyledEditorKit$AttributeTracker> = ::javax_swing_text / "StyledEditorKit$AttributeTracker";
namespace javax::swing::text { class StyledEditorKit$BoldAction; }
template<> constexpr auto signature<::javax::swing::text::StyledEditorKit$BoldAction> = ::javax_swing_text / "StyledEditorKit$BoldAction";
namespace javax::swing::text { class StyledEditorKit$FontFamilyAction; }
template<> constexpr auto signature<::javax::swing::text::StyledEditorKit$FontFamilyAction> = ::javax_swing_text / "StyledEditorKit$FontFamilyAction";
namespace javax::swing::text { class StyledEditorKit$FontSizeAction; }
template<> constexpr auto signature<::javax::swing::text::StyledEditorKit$FontSizeAction> = ::javax_swing_text / "StyledEditorKit$FontSizeAction";
namespace javax::swing::text { class StyledEditorKit$ForegroundAction; }
template<> constexpr auto signature<::javax::swing::text::StyledEditorKit$ForegroundAction> = ::javax_swing_text / "StyledEditorKit$ForegroundAction";
namespace javax::swing::text { class StyledEditorKit$ItalicAction; }
template<> constexpr auto signature<::javax::swing::text::StyledEditorKit$ItalicAction> = ::javax_swing_text / "StyledEditorKit$ItalicAction";
namespace javax::swing::text { class StyledEditorKit$StyledInsertBreakAction; }
template<> constexpr auto signature<::javax::swing::text::StyledEditorKit$StyledInsertBreakAction> = ::javax_swing_text / "StyledEditorKit$StyledInsertBreakAction";
namespace javax::swing::text { class StyledEditorKit$StyledTextAction; }
template<> constexpr auto signature<::javax::swing::text::StyledEditorKit$StyledTextAction> = ::javax_swing_text / "StyledEditorKit$StyledTextAction";
namespace javax::swing::text { class StyledEditorKit$StyledViewFactory; }
template<> constexpr auto signature<::javax::swing::text::StyledEditorKit$StyledViewFactory> = ::javax_swing_text / "StyledEditorKit$StyledViewFactory";
namespace javax::swing::text { class StyledEditorKit$UnderlineAction; }
template<> constexpr auto signature<::javax::swing::text::StyledEditorKit$UnderlineAction> = ::javax_swing_text / "StyledEditorKit$UnderlineAction";
namespace javax::swing::text { class TabExpander; }
template<> constexpr auto signature<::javax::swing::text::TabExpander> = ::javax_swing_text / "TabExpander";
namespace javax::swing::text { class TabSet; }
template<> constexpr auto signature<::javax::swing::text::TabSet> = ::javax_swing_text / "TabSet";
namespace javax::swing::text { class TabStop; }
template<> constexpr auto signature<::javax::swing::text::TabStop> = ::javax_swing_text / "TabStop";
namespace javax::swing::text { class TabableView; }
template<> constexpr auto signature<::javax::swing::text::TabableView> = ::javax_swing_text / "TabableView";
namespace javax::swing::text { class TableView; }
template<> constexpr auto signature<::javax::swing::text::TableView> = ::javax_swing_text / "TableView";
namespace javax::swing::text { class TableView$GridCell; }
template<> constexpr auto signature<::javax::swing::text::TableView$GridCell> = ::javax_swing_text / "TableView$GridCell";
namespace javax::swing::text { class TableView$TableCell; }
template<> constexpr auto signature<::javax::swing::text::TableView$TableCell> = ::javax_swing_text / "TableView$TableCell";
namespace javax::swing::text { class TableView$TableRow; }
template<> constexpr auto signature<::javax::swing::text::TableView$TableRow> = ::javax_swing_text / "TableView$TableRow";
namespace javax::swing::text { class TextAction; }
template<> constexpr auto signature<::javax::swing::text::TextAction> = ::javax_swing_text / "TextAction";
namespace javax::swing::text { class TextLayoutStrategy; }
template<> constexpr auto signature<::javax::swing::text::TextLayoutStrategy> = ::javax_swing_text / "TextLayoutStrategy";
namespace javax::swing::text { class TextLayoutStrategy$AttributedSegment; }
template<> constexpr auto signature<::javax::swing::text::TextLayoutStrategy$AttributedSegment> = ::javax_swing_text / "TextLayoutStrategy$AttributedSegment";
namespace javax::swing::text { class Utilities; }
template<> constexpr auto signature<::javax::swing::text::Utilities> = ::javax_swing_text / "Utilities";
namespace javax::swing::text { class View; }
template<> constexpr auto signature<::javax::swing::text::View> = ::javax_swing_text / "View";
namespace javax::swing::text { class ViewFactory; }
template<> constexpr auto signature<::javax::swing::text::ViewFactory> = ::javax_swing_text / "ViewFactory";
namespace javax::swing::text { class WhitespaceBasedBreakIterator; }
template<> constexpr auto signature<::javax::swing::text::WhitespaceBasedBreakIterator> = ::javax_swing_text / "WhitespaceBasedBreakIterator";
namespace javax::swing::text { class WrappedPlainView; }
template<> constexpr auto signature<::javax::swing::text::WrappedPlainView> = ::javax_swing_text / "WrappedPlainView";
namespace javax::swing::text { class WrappedPlainView$WrappedLine; }
template<> constexpr auto signature<::javax::swing::text::WrappedPlainView$WrappedLine> = ::javax_swing_text / "WrappedPlainView$WrappedLine";
namespace javax::swing::text { class ZoneView; }
template<> constexpr auto signature<::javax::swing::text::ZoneView> = ::javax_swing_text / "ZoneView";
namespace javax::swing::text { class ZoneView$Zone; }
template<> constexpr auto signature<::javax::swing::text::ZoneView$Zone> = ::javax_swing_text / "ZoneView$Zone";
namespace javax::swing::text::html { class AccessibleHTML; }
template<> constexpr auto signature<::javax::swing::text::html::AccessibleHTML> = ::javax_swing_text_html / "AccessibleHTML";
namespace javax::swing::text::html { class AccessibleHTML$1; }
template<> constexpr auto signature<::javax::swing::text::html::AccessibleHTML$1> = ::javax_swing_text_html / "AccessibleHTML$1";
namespace javax::swing::text::html { class AccessibleHTML$DocumentHandler; }
template<> constexpr auto signature<::javax::swing::text::html::AccessibleHTML$DocumentHandler> = ::javax_swing_text_html / "AccessibleHTML$DocumentHandler";
namespace javax::swing::text::html { class AccessibleHTML$ElementInfo; }
template<> constexpr auto signature<::javax::swing::text::html::AccessibleHTML$ElementInfo> = ::javax_swing_text_html / "AccessibleHTML$ElementInfo";
namespace javax::swing::text::html { class AccessibleHTML$HTMLAccessibleContext; }
template<> constexpr auto signature<::javax::swing::text::html::AccessibleHTML$HTMLAccessibleContext> = ::javax_swing_text_html / "AccessibleHTML$HTMLAccessibleContext";
namespace javax::swing::text::html { class AccessibleHTML$IconElementInfo; }
template<> constexpr auto signature<::javax::swing::text::html::AccessibleHTML$IconElementInfo> = ::javax_swing_text_html / "AccessibleHTML$IconElementInfo";
namespace javax::swing::text::html { class AccessibleHTML$IconElementInfo$IconAccessibleContext; }
template<> constexpr auto signature<::javax::swing::text::html::AccessibleHTML$IconElementInfo$IconAccessibleContext> = ::javax_swing_text_html / "AccessibleHTML$IconElementInfo$IconAccessibleContext";
namespace javax::swing::text::html { class AccessibleHTML$PropertyChangeHandler; }
template<> constexpr auto signature<::javax::swing::text::html::AccessibleHTML$PropertyChangeHandler> = ::javax_swing_text_html / "AccessibleHTML$PropertyChangeHandler";
namespace javax::swing::text::html { class AccessibleHTML$RootHTMLAccessibleContext; }
template<> constexpr auto signature<::javax::swing::text::html::AccessibleHTML$RootHTMLAccessibleContext> = ::javax_swing_text_html / "AccessibleHTML$RootHTMLAccessibleContext";
namespace javax::swing::text::html { class AccessibleHTML$TableElementInfo; }
template<> constexpr auto signature<::javax::swing::text::html::AccessibleHTML$TableElementInfo> = ::javax_swing_text_html / "AccessibleHTML$TableElementInfo";
namespace javax::swing::text::html { class AccessibleHTML$TableElementInfo$TableAccessibleContext; }
template<> constexpr auto signature<::javax::swing::text::html::AccessibleHTML$TableElementInfo$TableAccessibleContext> = ::javax_swing_text_html / "AccessibleHTML$TableElementInfo$TableAccessibleContext";
namespace javax::swing::text::html { class AccessibleHTML$TableElementInfo$TableAccessibleContext$AccessibleHeadersTable; }
template<> constexpr auto signature<::javax::swing::text::html::AccessibleHTML$TableElementInfo$TableAccessibleContext$AccessibleHeadersTable> = ::javax_swing_text_html / "AccessibleHTML$TableElementInfo$TableAccessibleContext$AccessibleHeadersTable";
namespace javax::swing::text::html { class AccessibleHTML$TableElementInfo$TableCellElementInfo; }
template<> constexpr auto signature<::javax::swing::text::html::AccessibleHTML$TableElementInfo$TableCellElementInfo> = ::javax_swing_text_html / "AccessibleHTML$TableElementInfo$TableCellElementInfo";
namespace javax::swing::text::html { class AccessibleHTML$TableElementInfo$TableRowElementInfo; }
template<> constexpr auto signature<::javax::swing::text::html::AccessibleHTML$TableElementInfo$TableRowElementInfo> = ::javax_swing_text_html / "AccessibleHTML$TableElementInfo$TableRowElementInfo";
namespace javax::swing::text::html { class AccessibleHTML$TextElementInfo; }
template<> constexpr auto signature<::javax::swing::text::html::AccessibleHTML$TextElementInfo> = ::javax_swing_text_html / "AccessibleHTML$TextElementInfo";
namespace javax::swing::text::html { class AccessibleHTML$TextElementInfo$TextAccessibleContext; }
template<> constexpr auto signature<::javax::swing::text::html::AccessibleHTML$TextElementInfo$TextAccessibleContext> = ::javax_swing_text_html / "AccessibleHTML$TextElementInfo$TextAccessibleContext";
namespace javax::swing::text::html { class AccessibleHTML$TextElementInfo$TextAccessibleContext$IndexedSegment; }
template<> constexpr auto signature<::javax::swing::text::html::AccessibleHTML$TextElementInfo$TextAccessibleContext$IndexedSegment> = ::javax_swing_text_html / "AccessibleHTML$TextElementInfo$TextAccessibleContext$IndexedSegment";
namespace javax::swing::text::html { class BRView; }
template<> constexpr auto signature<::javax::swing::text::html::BRView> = ::javax_swing_text_html / "BRView";
namespace javax::swing::text::html { class BlockView; }
template<> constexpr auto signature<::javax::swing::text::html::BlockView> = ::javax_swing_text_html / "BlockView";
namespace javax::swing::text::html { class CSS; }
template<> constexpr auto signature<::javax::swing::text::html::CSS> = ::javax_swing_text_html / "CSS";
namespace javax::swing::text::html { class CSS$Attribute; }
template<> constexpr auto signature<::javax::swing::text::html::CSS$Attribute> = ::javax_swing_text_html / "CSS$Attribute";
namespace javax::swing::text::html { class CSS$BackgroundImage; }
template<> constexpr auto signature<::javax::swing::text::html::CSS$BackgroundImage> = ::javax_swing_text_html / "CSS$BackgroundImage";
namespace javax::swing::text::html { class CSS$BackgroundPosition; }
template<> constexpr auto signature<::javax::swing::text::html::CSS$BackgroundPosition> = ::javax_swing_text_html / "CSS$BackgroundPosition";
namespace javax::swing::text::html { class CSS$BorderStyle; }
template<> constexpr auto signature<::javax::swing::text::html::CSS$BorderStyle> = ::javax_swing_text_html / "CSS$BorderStyle";
namespace javax::swing::text::html { class CSS$BorderWidthValue; }
template<> constexpr auto signature<::javax::swing::text::html::CSS$BorderWidthValue> = ::javax_swing_text_html / "CSS$BorderWidthValue";
namespace javax::swing::text::html { class CSS$ColorValue; }
template<> constexpr auto signature<::javax::swing::text::html::CSS$ColorValue> = ::javax_swing_text_html / "CSS$ColorValue";
namespace javax::swing::text::html { class CSS$CssValue; }
template<> constexpr auto signature<::javax::swing::text::html::CSS$CssValue> = ::javax_swing_text_html / "CSS$CssValue";
namespace javax::swing::text::html { class CSS$CssValueMapper; }
template<> constexpr auto signature<::javax::swing::text::html::CSS$CssValueMapper> = ::javax_swing_text_html / "CSS$CssValueMapper";
namespace javax::swing::text::html { class CSS$FontFamily; }
template<> constexpr auto signature<::javax::swing::text::html::CSS$FontFamily> = ::javax_swing_text_html / "CSS$FontFamily";
namespace javax::swing::text::html { class CSS$FontSize; }
template<> constexpr auto signature<::javax::swing::text::html::CSS$FontSize> = ::javax_swing_text_html / "CSS$FontSize";
namespace javax::swing::text::html { class CSS$FontWeight; }
template<> constexpr auto signature<::javax::swing::text::html::CSS$FontWeight> = ::javax_swing_text_html / "CSS$FontWeight";
namespace javax::swing::text::html { class CSS$LayoutIterator; }
template<> constexpr auto signature<::javax::swing::text::html::CSS$LayoutIterator> = ::javax_swing_text_html / "CSS$LayoutIterator";
namespace javax::swing::text::html { class CSS$LengthUnit; }
template<> constexpr auto signature<::javax::swing::text::html::CSS$LengthUnit> = ::javax_swing_text_html / "CSS$LengthUnit";
namespace javax::swing::text::html { class CSS$LengthValue; }
template<> constexpr auto signature<::javax::swing::text::html::CSS$LengthValue> = ::javax_swing_text_html / "CSS$LengthValue";
namespace javax::swing::text::html { class CSS$ShorthandBackgroundParser; }
template<> constexpr auto signature<::javax::swing::text::html::CSS$ShorthandBackgroundParser> = ::javax_swing_text_html / "CSS$ShorthandBackgroundParser";
namespace javax::swing::text::html { class CSS$ShorthandBorderParser; }
template<> constexpr auto signature<::javax::swing::text::html::CSS$ShorthandBorderParser> = ::javax_swing_text_html / "CSS$ShorthandBorderParser";
namespace javax::swing::text::html { class CSS$ShorthandFontParser; }
template<> constexpr auto signature<::javax::swing::text::html::CSS$ShorthandFontParser> = ::javax_swing_text_html / "CSS$ShorthandFontParser";
namespace javax::swing::text::html { class CSS$ShorthandMarginParser; }
template<> constexpr auto signature<::javax::swing::text::html::CSS$ShorthandMarginParser> = ::javax_swing_text_html / "CSS$ShorthandMarginParser";
namespace javax::swing::text::html { class CSS$StringValue; }
template<> constexpr auto signature<::javax::swing::text::html::CSS$StringValue> = ::javax_swing_text_html / "CSS$StringValue";
namespace javax::swing::text::html { class CSS$Value; }
template<> constexpr auto signature<::javax::swing::text::html::CSS$Value> = ::javax_swing_text_html / "CSS$Value";
namespace javax::swing::text::html { class CSSBorder; }
template<> constexpr auto signature<::javax::swing::text::html::CSSBorder> = ::javax_swing_text_html / "CSSBorder";
namespace javax::swing::text::html { class CSSBorder$BorderPainter; }
template<> constexpr auto signature<::javax::swing::text::html::CSSBorder$BorderPainter> = ::javax_swing_text_html / "CSSBorder$BorderPainter";
namespace javax::swing::text::html { class CSSBorder$DottedDashedPainter; }
template<> constexpr auto signature<::javax::swing::text::html::CSSBorder$DottedDashedPainter> = ::javax_swing_text_html / "CSSBorder$DottedDashedPainter";
namespace javax::swing::text::html { class CSSBorder$DoublePainter; }
template<> constexpr auto signature<::javax::swing::text::html::CSSBorder$DoublePainter> = ::javax_swing_text_html / "CSSBorder$DoublePainter";
namespace javax::swing::text::html { class CSSBorder$GrooveRidgePainter; }
template<> constexpr auto signature<::javax::swing::text::html::CSSBorder$GrooveRidgePainter> = ::javax_swing_text_html / "CSSBorder$GrooveRidgePainter";
namespace javax::swing::text::html { class CSSBorder$InsetOutsetPainter; }
template<> constexpr auto signature<::javax::swing::text::html::CSSBorder$InsetOutsetPainter> = ::javax_swing_text_html / "CSSBorder$InsetOutsetPainter";
namespace javax::swing::text::html { class CSSBorder$NullPainter; }
template<> constexpr auto signature<::javax::swing::text::html::CSSBorder$NullPainter> = ::javax_swing_text_html / "CSSBorder$NullPainter";
namespace javax::swing::text::html { class CSSBorder$ShadowLightPainter; }
template<> constexpr auto signature<::javax::swing::text::html::CSSBorder$ShadowLightPainter> = ::javax_swing_text_html / "CSSBorder$ShadowLightPainter";
namespace javax::swing::text::html { class CSSBorder$SolidPainter; }
template<> constexpr auto signature<::javax::swing::text::html::CSSBorder$SolidPainter> = ::javax_swing_text_html / "CSSBorder$SolidPainter";
namespace javax::swing::text::html { class CSSBorder$StrokePainter; }
template<> constexpr auto signature<::javax::swing::text::html::CSSBorder$StrokePainter> = ::javax_swing_text_html / "CSSBorder$StrokePainter";
namespace javax::swing::text::html { class CSSParser; }
template<> constexpr auto signature<::javax::swing::text::html::CSSParser> = ::javax_swing_text_html / "CSSParser";
namespace javax::swing::text::html { class CSSParser$CSSParserCallback; }
template<> constexpr auto signature<::javax::swing::text::html::CSSParser$CSSParserCallback> = ::javax_swing_text_html / "CSSParser$CSSParserCallback";
namespace javax::swing::text::html { class CommentView; }
template<> constexpr auto signature<::javax::swing::text::html::CommentView> = ::javax_swing_text_html / "CommentView";
namespace javax::swing::text::html { class CommentView$CommentBorder; }
template<> constexpr auto signature<::javax::swing::text::html::CommentView$CommentBorder> = ::javax_swing_text_html / "CommentView$CommentBorder";
namespace javax::swing::text::html { class EditableView; }
template<> constexpr auto signature<::javax::swing::text::html::EditableView> = ::javax_swing_text_html / "EditableView";
namespace javax::swing::text::html { class FormSubmitEvent; }
template<> constexpr auto signature<::javax::swing::text::html::FormSubmitEvent> = ::javax_swing_text_html / "FormSubmitEvent";
namespace javax::swing::text::html { class FormSubmitEvent$MethodType; }
template<> constexpr auto signature<::javax::swing::text::html::FormSubmitEvent$MethodType> = ::javax_swing_text_html / "FormSubmitEvent$MethodType";
namespace javax::swing::text::html { class FormView; }
template<> constexpr auto signature<::javax::swing::text::html::FormView> = ::javax_swing_text_html / "FormView";
namespace javax::swing::text::html { class FormView$1; }
template<> constexpr auto signature<::javax::swing::text::html::FormView$1> = ::javax_swing_text_html / "FormView$1";
namespace javax::swing::text::html { class FormView$BrowseFileAction; }
template<> constexpr auto signature<::javax::swing::text::html::FormView$BrowseFileAction> = ::javax_swing_text_html / "FormView$BrowseFileAction";
namespace javax::swing::text::html { class FormView$MouseEventListener; }
template<> constexpr auto signature<::javax::swing::text::html::FormView$MouseEventListener> = ::javax_swing_text_html / "FormView$MouseEventListener";
namespace javax::swing::text::html { class FrameSetView; }
template<> constexpr auto signature<::javax::swing::text::html::FrameSetView> = ::javax_swing_text_html / "FrameSetView";
namespace javax::swing::text::html { class FrameView; }
template<> constexpr auto signature<::javax::swing::text::html::FrameView> = ::javax_swing_text_html / "FrameView";
namespace javax::swing::text::html { class FrameView$FrameEditorPane; }
template<> constexpr auto signature<::javax::swing::text::html::FrameView$FrameEditorPane> = ::javax_swing_text_html / "FrameView$FrameEditorPane";
namespace javax::swing::text::html { class HRuleView; }
template<> constexpr auto signature<::javax::swing::text::html::HRuleView> = ::javax_swing_text_html / "HRuleView";
namespace javax::swing::text::html { class HTML; }
template<> constexpr auto signature<::javax::swing::text::html::HTML> = ::javax_swing_text_html / "HTML";
namespace javax::swing::text::html { class HTML$Attribute; }
template<> constexpr auto signature<::javax::swing::text::html::HTML$Attribute> = ::javax_swing_text_html / "HTML$Attribute";
namespace javax::swing::text::html { class HTML$Tag; }
template<> constexpr auto signature<::javax::swing::text::html::HTML$Tag> = ::javax_swing_text_html / "HTML$Tag";
namespace javax::swing::text::html { class HTML$UnknownTag; }
template<> constexpr auto signature<::javax::swing::text::html::HTML$UnknownTag> = ::javax_swing_text_html / "HTML$UnknownTag";
namespace javax::swing::text::html { class HTMLDocument; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLDocument> = ::javax_swing_text_html / "HTMLDocument";
namespace javax::swing::text::html { class HTMLDocument$1; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLDocument$1> = ::javax_swing_text_html / "HTMLDocument$1";
namespace javax::swing::text::html { class HTMLDocument$BlockElement; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLDocument$BlockElement> = ::javax_swing_text_html / "HTMLDocument$BlockElement";
namespace javax::swing::text::html { class HTMLDocument$FixedLengthDocument; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLDocument$FixedLengthDocument> = ::javax_swing_text_html / "HTMLDocument$FixedLengthDocument";
namespace javax::swing::text::html { class HTMLDocument$HTMLReader; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLDocument$HTMLReader> = ::javax_swing_text_html / "HTMLDocument$HTMLReader";
namespace javax::swing::text::html { class HTMLDocument$HTMLReader$AnchorAction; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLDocument$HTMLReader$AnchorAction> = ::javax_swing_text_html / "HTMLDocument$HTMLReader$AnchorAction";
namespace javax::swing::text::html { class HTMLDocument$HTMLReader$AreaAction; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLDocument$HTMLReader$AreaAction> = ::javax_swing_text_html / "HTMLDocument$HTMLReader$AreaAction";
namespace javax::swing::text::html { class HTMLDocument$HTMLReader$BaseAction; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLDocument$HTMLReader$BaseAction> = ::javax_swing_text_html / "HTMLDocument$HTMLReader$BaseAction";
namespace javax::swing::text::html { class HTMLDocument$HTMLReader$BlockAction; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLDocument$HTMLReader$BlockAction> = ::javax_swing_text_html / "HTMLDocument$HTMLReader$BlockAction";
namespace javax::swing::text::html { class HTMLDocument$HTMLReader$CharacterAction; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLDocument$HTMLReader$CharacterAction> = ::javax_swing_text_html / "HTMLDocument$HTMLReader$CharacterAction";
namespace javax::swing::text::html { class HTMLDocument$HTMLReader$ConvertAction; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLDocument$HTMLReader$ConvertAction> = ::javax_swing_text_html / "HTMLDocument$HTMLReader$ConvertAction";
namespace javax::swing::text::html { class HTMLDocument$HTMLReader$FormAction; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLDocument$HTMLReader$FormAction> = ::javax_swing_text_html / "HTMLDocument$HTMLReader$FormAction";
namespace javax::swing::text::html { class HTMLDocument$HTMLReader$FormTagAction; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLDocument$HTMLReader$FormTagAction> = ::javax_swing_text_html / "HTMLDocument$HTMLReader$FormTagAction";
namespace javax::swing::text::html { class HTMLDocument$HTMLReader$HeadAction; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLDocument$HTMLReader$HeadAction> = ::javax_swing_text_html / "HTMLDocument$HTMLReader$HeadAction";
namespace javax::swing::text::html { class HTMLDocument$HTMLReader$HiddenAction; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLDocument$HTMLReader$HiddenAction> = ::javax_swing_text_html / "HTMLDocument$HTMLReader$HiddenAction";
namespace javax::swing::text::html { class HTMLDocument$HTMLReader$IsindexAction; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLDocument$HTMLReader$IsindexAction> = ::javax_swing_text_html / "HTMLDocument$HTMLReader$IsindexAction";
namespace javax::swing::text::html { class HTMLDocument$HTMLReader$LinkAction; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLDocument$HTMLReader$LinkAction> = ::javax_swing_text_html / "HTMLDocument$HTMLReader$LinkAction";
namespace javax::swing::text::html { class HTMLDocument$HTMLReader$MapAction; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLDocument$HTMLReader$MapAction> = ::javax_swing_text_html / "HTMLDocument$HTMLReader$MapAction";
namespace javax::swing::text::html { class HTMLDocument$HTMLReader$MetaAction; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLDocument$HTMLReader$MetaAction> = ::javax_swing_text_html / "HTMLDocument$HTMLReader$MetaAction";
namespace javax::swing::text::html { class HTMLDocument$HTMLReader$ObjectAction; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLDocument$HTMLReader$ObjectAction> = ::javax_swing_text_html / "HTMLDocument$HTMLReader$ObjectAction";
namespace javax::swing::text::html { class HTMLDocument$HTMLReader$ParagraphAction; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLDocument$HTMLReader$ParagraphAction> = ::javax_swing_text_html / "HTMLDocument$HTMLReader$ParagraphAction";
namespace javax::swing::text::html { class HTMLDocument$HTMLReader$PreAction; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLDocument$HTMLReader$PreAction> = ::javax_swing_text_html / "HTMLDocument$HTMLReader$PreAction";
namespace javax::swing::text::html { class HTMLDocument$HTMLReader$SpecialAction; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLDocument$HTMLReader$SpecialAction> = ::javax_swing_text_html / "HTMLDocument$HTMLReader$SpecialAction";
namespace javax::swing::text::html { class HTMLDocument$HTMLReader$StyleAction; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLDocument$HTMLReader$StyleAction> = ::javax_swing_text_html / "HTMLDocument$HTMLReader$StyleAction";
namespace javax::swing::text::html { class HTMLDocument$HTMLReader$TagAction; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLDocument$HTMLReader$TagAction> = ::javax_swing_text_html / "HTMLDocument$HTMLReader$TagAction";
namespace javax::swing::text::html { class HTMLDocument$HTMLReader$TitleAction; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLDocument$HTMLReader$TitleAction> = ::javax_swing_text_html / "HTMLDocument$HTMLReader$TitleAction";
namespace javax::swing::text::html { class HTMLDocument$Iterator; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLDocument$Iterator> = ::javax_swing_text_html / "HTMLDocument$Iterator";
namespace javax::swing::text::html { class HTMLDocument$LeafIterator; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLDocument$LeafIterator> = ::javax_swing_text_html / "HTMLDocument$LeafIterator";
namespace javax::swing::text::html { class HTMLDocument$RunElement; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLDocument$RunElement> = ::javax_swing_text_html / "HTMLDocument$RunElement";
namespace javax::swing::text::html { class HTMLDocument$TaggedAttributeSet; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLDocument$TaggedAttributeSet> = ::javax_swing_text_html / "HTMLDocument$TaggedAttributeSet";
namespace javax::swing::text::html { class HTMLEditorKit; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLEditorKit> = ::javax_swing_text_html / "HTMLEditorKit";
namespace javax::swing::text::html { class HTMLEditorKit$1; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLEditorKit$1> = ::javax_swing_text_html / "HTMLEditorKit$1";
namespace javax::swing::text::html { class HTMLEditorKit$ActivateLinkAction; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLEditorKit$ActivateLinkAction> = ::javax_swing_text_html / "HTMLEditorKit$ActivateLinkAction";
namespace javax::swing::text::html { class HTMLEditorKit$BeginAction; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLEditorKit$BeginAction> = ::javax_swing_text_html / "HTMLEditorKit$BeginAction";
namespace javax::swing::text::html { class HTMLEditorKit$HTMLFactory; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLEditorKit$HTMLFactory> = ::javax_swing_text_html / "HTMLEditorKit$HTMLFactory";
namespace javax::swing::text::html { class HTMLEditorKit$HTMLFactory$1; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLEditorKit$HTMLFactory$1> = ::javax_swing_text_html / "HTMLEditorKit$HTMLFactory$1";
namespace javax::swing::text::html { class HTMLEditorKit$HTMLFactory$BodyBlockView; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLEditorKit$HTMLFactory$BodyBlockView> = ::javax_swing_text_html / "HTMLEditorKit$HTMLFactory$BodyBlockView";
namespace javax::swing::text::html { class HTMLEditorKit$HTMLTextAction; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLEditorKit$HTMLTextAction> = ::javax_swing_text_html / "HTMLEditorKit$HTMLTextAction";
namespace javax::swing::text::html { class HTMLEditorKit$InsertHRAction; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLEditorKit$InsertHRAction> = ::javax_swing_text_html / "HTMLEditorKit$InsertHRAction";
namespace javax::swing::text::html { class HTMLEditorKit$InsertHTMLTextAction; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLEditorKit$InsertHTMLTextAction> = ::javax_swing_text_html / "HTMLEditorKit$InsertHTMLTextAction";
namespace javax::swing::text::html { class HTMLEditorKit$LinkController; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLEditorKit$LinkController> = ::javax_swing_text_html / "HTMLEditorKit$LinkController";
namespace javax::swing::text::html { class HTMLEditorKit$NavigateLinkAction; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLEditorKit$NavigateLinkAction> = ::javax_swing_text_html / "HTMLEditorKit$NavigateLinkAction";
namespace javax::swing::text::html { class HTMLEditorKit$NavigateLinkAction$FocusHighlightPainter; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLEditorKit$NavigateLinkAction$FocusHighlightPainter> = ::javax_swing_text_html / "HTMLEditorKit$NavigateLinkAction$FocusHighlightPainter";
namespace javax::swing::text::html { class HTMLEditorKit$Parser; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLEditorKit$Parser> = ::javax_swing_text_html / "HTMLEditorKit$Parser";
namespace javax::swing::text::html { class HTMLEditorKit$ParserCallback; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLEditorKit$ParserCallback> = ::javax_swing_text_html / "HTMLEditorKit$ParserCallback";
namespace javax::swing::text::html { class HTMLFrameHyperlinkEvent; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLFrameHyperlinkEvent> = ::javax_swing_text_html / "HTMLFrameHyperlinkEvent";
namespace javax::swing::text::html { class HTMLWriter; }
template<> constexpr auto signature<::javax::swing::text::html::HTMLWriter> = ::javax_swing_text_html / "HTMLWriter";
namespace javax::swing::text::html { class HiddenTagView; }
template<> constexpr auto signature<::javax::swing::text::html::HiddenTagView> = ::javax_swing_text_html / "HiddenTagView";
namespace javax::swing::text::html { class HiddenTagView$1; }
template<> constexpr auto signature<::javax::swing::text::html::HiddenTagView$1> = ::javax_swing_text_html / "HiddenTagView$1";
namespace javax::swing::text::html { class HiddenTagView$2; }
template<> constexpr auto signature<::javax::swing::text::html::HiddenTagView$2> = ::javax_swing_text_html / "HiddenTagView$2";
namespace javax::swing::text::html { class HiddenTagView$EndTagBorder; }
template<> constexpr auto signature<::javax::swing::text::html::HiddenTagView$EndTagBorder> = ::javax_swing_text_html / "HiddenTagView$EndTagBorder";
namespace javax::swing::text::html { class HiddenTagView$StartTagBorder; }
template<> constexpr auto signature<::javax::swing::text::html::HiddenTagView$StartTagBorder> = ::javax_swing_text_html / "HiddenTagView$StartTagBorder";
namespace javax::swing::text::html { class ImageView; }
template<> constexpr auto signature<::javax::swing::text::html::ImageView> = ::javax_swing_text_html / "ImageView";
namespace javax::swing::text::html { class ImageView$1; }
template<> constexpr auto signature<::javax::swing::text::html::ImageView$1> = ::javax_swing_text_html / "ImageView$1";
namespace javax::swing::text::html { class ImageView$ImageHandler; }
template<> constexpr auto signature<::javax::swing::text::html::ImageView$ImageHandler> = ::javax_swing_text_html / "ImageView$ImageHandler";
namespace javax::swing::text::html { class ImageView$ImageLabelView; }
template<> constexpr auto signature<::javax::swing::text::html::ImageView$ImageLabelView> = ::javax_swing_text_html / "ImageView$ImageLabelView";
namespace javax::swing::text::html { class InlineView; }
template<> constexpr auto signature<::javax::swing::text::html::InlineView> = ::javax_swing_text_html / "InlineView";
namespace javax::swing::text::html { class IsindexView; }
template<> constexpr auto signature<::javax::swing::text::html::IsindexView> = ::javax_swing_text_html / "IsindexView";
namespace javax::swing::text::html { class LineView; }
template<> constexpr auto signature<::javax::swing::text::html::LineView> = ::javax_swing_text_html / "LineView";
namespace javax::swing::text::html { class ListView; }
template<> constexpr auto signature<::javax::swing::text::html::ListView> = ::javax_swing_text_html / "ListView";
namespace javax::swing::text::html { class Map; }
template<> constexpr auto signature<::javax::swing::text::html::Map> = ::javax_swing_text_html / "Map";
namespace javax::swing::text::html { class Map$CircleRegionContainment; }
template<> constexpr auto signature<::javax::swing::text::html::Map$CircleRegionContainment> = ::javax_swing_text_html / "Map$CircleRegionContainment";
namespace javax::swing::text::html { class Map$DefaultRegionContainment; }
template<> constexpr auto signature<::javax::swing::text::html::Map$DefaultRegionContainment> = ::javax_swing_text_html / "Map$DefaultRegionContainment";
namespace javax::swing::text::html { class Map$PolygonRegionContainment; }
template<> constexpr auto signature<::javax::swing::text::html::Map$PolygonRegionContainment> = ::javax_swing_text_html / "Map$PolygonRegionContainment";
namespace javax::swing::text::html { class Map$RectangleRegionContainment; }
template<> constexpr auto signature<::javax::swing::text::html::Map$RectangleRegionContainment> = ::javax_swing_text_html / "Map$RectangleRegionContainment";
namespace javax::swing::text::html { class Map$RegionContainment; }
template<> constexpr auto signature<::javax::swing::text::html::Map$RegionContainment> = ::javax_swing_text_html / "Map$RegionContainment";
namespace javax::swing::text::html { class MinimalHTMLWriter; }
template<> constexpr auto signature<::javax::swing::text::html::MinimalHTMLWriter> = ::javax_swing_text_html / "MinimalHTMLWriter";
namespace javax::swing::text::html { class MuxingAttributeSet; }
template<> constexpr auto signature<::javax::swing::text::html::MuxingAttributeSet> = ::javax_swing_text_html / "MuxingAttributeSet";
namespace javax::swing::text::html { class MuxingAttributeSet$MuxingAttributeNameEnumeration; }
template<> constexpr auto signature<::javax::swing::text::html::MuxingAttributeSet$MuxingAttributeNameEnumeration> = ::javax_swing_text_html / "MuxingAttributeSet$MuxingAttributeNameEnumeration";
namespace javax::swing::text::html { class NoFramesView; }
template<> constexpr auto signature<::javax::swing::text::html::NoFramesView> = ::javax_swing_text_html / "NoFramesView";
namespace javax::swing::text::html { class ObjectView; }
template<> constexpr auto signature<::javax::swing::text::html::ObjectView> = ::javax_swing_text_html / "ObjectView";
namespace javax::swing::text::html { class Option; }
template<> constexpr auto signature<::javax::swing::text::html::Option> = ::javax_swing_text_html / "Option";
namespace javax::swing::text::html { class OptionComboBoxModel; }
template<> constexpr auto signature<::javax::swing::text::html::OptionComboBoxModel> = ::javax_swing_text_html / "OptionComboBoxModel";
namespace javax::swing::text::html { class OptionListModel; }
template<> constexpr auto signature<::javax::swing::text::html::OptionListModel> = ::javax_swing_text_html / "OptionListModel";
namespace javax::swing::text::html { class ParagraphView; }
template<> constexpr auto signature<::javax::swing::text::html::ParagraphView> = ::javax_swing_text_html / "ParagraphView";
namespace javax::swing::text::html { class StyleSheet; }
template<> constexpr auto signature<::javax::swing::text::html::StyleSheet> = ::javax_swing_text_html / "StyleSheet";
namespace javax::swing::text::html { class StyleSheet$1; }
template<> constexpr auto signature<::javax::swing::text::html::StyleSheet$1> = ::javax_swing_text_html / "StyleSheet$1";
namespace javax::swing::text::html { class StyleSheet$BackgroundImagePainter; }
template<> constexpr auto signature<::javax::swing::text::html::StyleSheet$BackgroundImagePainter> = ::javax_swing_text_html / "StyleSheet$BackgroundImagePainter";
namespace javax::swing::text::html { class StyleSheet$BoxPainter; }
template<> constexpr auto signature<::javax::swing::text::html::StyleSheet$BoxPainter> = ::javax_swing_text_html / "StyleSheet$BoxPainter";
namespace javax::swing::text::html { class StyleSheet$BoxPainter$HorizontalMargin; }
template<> constexpr auto signature<::javax::swing::text::html::StyleSheet$BoxPainter$HorizontalMargin> = ::javax_swing_text_html / "StyleSheet$BoxPainter$HorizontalMargin";
namespace javax::swing::text::html { class StyleSheet$CssParser; }
template<> constexpr auto signature<::javax::swing::text::html::StyleSheet$CssParser> = ::javax_swing_text_html / "StyleSheet$CssParser";
namespace javax::swing::text::html { class StyleSheet$LargeConversionSet; }
template<> constexpr auto signature<::javax::swing::text::html::StyleSheet$LargeConversionSet> = ::javax_swing_text_html / "StyleSheet$LargeConversionSet";
namespace javax::swing::text::html { class StyleSheet$ListPainter; }
template<> constexpr auto signature<::javax::swing::text::html::StyleSheet$ListPainter> = ::javax_swing_text_html / "StyleSheet$ListPainter";
namespace javax::swing::text::html { class StyleSheet$ResolvedStyle; }
template<> constexpr auto signature<::javax::swing::text::html::StyleSheet$ResolvedStyle> = ::javax_swing_text_html / "StyleSheet$ResolvedStyle";
namespace javax::swing::text::html { class StyleSheet$SearchBuffer; }
template<> constexpr auto signature<::javax::swing::text::html::StyleSheet$SearchBuffer> = ::javax_swing_text_html / "StyleSheet$SearchBuffer";
namespace javax::swing::text::html { class StyleSheet$SelectorMapping; }
template<> constexpr auto signature<::javax::swing::text::html::StyleSheet$SelectorMapping> = ::javax_swing_text_html / "StyleSheet$SelectorMapping";
namespace javax::swing::text::html { class StyleSheet$SmallConversionSet; }
template<> constexpr auto signature<::javax::swing::text::html::StyleSheet$SmallConversionSet> = ::javax_swing_text_html / "StyleSheet$SmallConversionSet";
namespace javax::swing::text::html { class StyleSheet$ViewAttributeSet; }
template<> constexpr auto signature<::javax::swing::text::html::StyleSheet$ViewAttributeSet> = ::javax_swing_text_html / "StyleSheet$ViewAttributeSet";
namespace javax::swing::text::html { class TableView; }
template<> constexpr auto signature<::javax::swing::text::html::TableView> = ::javax_swing_text_html / "TableView";
namespace javax::swing::text::html { class TableView$CellView; }
template<> constexpr auto signature<::javax::swing::text::html::TableView$CellView> = ::javax_swing_text_html / "TableView$CellView";
namespace javax::swing::text::html { class TableView$ColumnIterator; }
template<> constexpr auto signature<::javax::swing::text::html::TableView$ColumnIterator> = ::javax_swing_text_html / "TableView$ColumnIterator";
namespace javax::swing::text::html { class TableView$RowIterator; }
template<> constexpr auto signature<::javax::swing::text::html::TableView$RowIterator> = ::javax_swing_text_html / "TableView$RowIterator";
namespace javax::swing::text::html { class TableView$RowView; }
template<> constexpr auto signature<::javax::swing::text::html::TableView$RowView> = ::javax_swing_text_html / "TableView$RowView";
namespace javax::swing::text::html { class TextAreaDocument; }
template<> constexpr auto signature<::javax::swing::text::html::TextAreaDocument> = ::javax_swing_text_html / "TextAreaDocument";
namespace javax::swing::text::html::parser { class AttributeList; }
template<> constexpr auto signature<::javax::swing::text::html::parser::AttributeList> = ::javax_swing_text_html_parser / "AttributeList";
namespace javax::swing::text::html::parser { class ContentModel; }
template<> constexpr auto signature<::javax::swing::text::html::parser::ContentModel> = ::javax_swing_text_html_parser / "ContentModel";
namespace javax::swing::text::html::parser { class ContentModelState; }
template<> constexpr auto signature<::javax::swing::text::html::parser::ContentModelState> = ::javax_swing_text_html_parser / "ContentModelState";
namespace javax::swing::text::html::parser { class DTD; }
template<> constexpr auto signature<::javax::swing::text::html::parser::DTD> = ::javax_swing_text_html_parser / "DTD";
namespace javax::swing::text::html::parser { class DTDConstants; }
template<> constexpr auto signature<::javax::swing::text::html::parser::DTDConstants> = ::javax_swing_text_html_parser / "DTDConstants";
namespace javax::swing::text::html::parser { class DocumentParser; }
template<> constexpr auto signature<::javax::swing::text::html::parser::DocumentParser> = ::javax_swing_text_html_parser / "DocumentParser";
namespace javax::swing::text::html::parser { class Element; }
template<> constexpr auto signature<::javax::swing::text::html::parser::Element> = ::javax_swing_text_html_parser / "Element";
namespace javax::swing::text::html::parser { class Entity; }
template<> constexpr auto signature<::javax::swing::text::html::parser::Entity> = ::javax_swing_text_html_parser / "Entity";
namespace javax::swing::text::html::parser { class NPrintWriter; }
template<> constexpr auto signature<::javax::swing::text::html::parser::NPrintWriter> = ::javax_swing_text_html_parser / "NPrintWriter";
namespace javax::swing::text::html::parser { class Parser; }
template<> constexpr auto signature<::javax::swing::text::html::parser::Parser> = ::javax_swing_text_html_parser / "Parser";
namespace javax::swing::text::html::parser { class ParserDelegator; }
template<> constexpr auto signature<::javax::swing::text::html::parser::ParserDelegator> = ::javax_swing_text_html_parser / "ParserDelegator";
namespace javax::swing::text::html::parser { class ParserDelegator$1; }
template<> constexpr auto signature<::javax::swing::text::html::parser::ParserDelegator$1> = ::javax_swing_text_html_parser / "ParserDelegator$1";
namespace javax::swing::text::html::parser { class TagElement; }
template<> constexpr auto signature<::javax::swing::text::html::parser::TagElement> = ::javax_swing_text_html_parser / "TagElement";
namespace javax::swing::text::html::parser { class TagStack; }
template<> constexpr auto signature<::javax::swing::text::html::parser::TagStack> = ::javax_swing_text_html_parser / "TagStack";
namespace javax::swing::text::rtf { class AbstractFilter; }
template<> constexpr auto signature<::javax::swing::text::rtf::AbstractFilter> = ::javax_swing_text_rtf / "AbstractFilter";
namespace javax::swing::text::rtf { class Constants; }
template<> constexpr auto signature<::javax::swing::text::rtf::Constants> = ::javax_swing_text_rtf / "Constants";
namespace javax::swing::text::rtf { class MockAttributeSet; }
template<> constexpr auto signature<::javax::swing::text::rtf::MockAttributeSet> = ::javax_swing_text_rtf / "MockAttributeSet";
namespace javax::swing::text::rtf { class RTFAttribute; }
template<> constexpr auto signature<::javax::swing::text::rtf::RTFAttribute> = ::javax_swing_text_rtf / "RTFAttribute";
namespace javax::swing::text::rtf { class RTFAttributes; }
template<> constexpr auto signature<::javax::swing::text::rtf::RTFAttributes> = ::javax_swing_text_rtf / "RTFAttributes";
namespace javax::swing::text::rtf { class RTFAttributes$AssertiveAttribute; }
template<> constexpr auto signature<::javax::swing::text::rtf::RTFAttributes$AssertiveAttribute> = ::javax_swing_text_rtf / "RTFAttributes$AssertiveAttribute";
namespace javax::swing::text::rtf { class RTFAttributes$BooleanAttribute; }
template<> constexpr auto signature<::javax::swing::text::rtf::RTFAttributes$BooleanAttribute> = ::javax_swing_text_rtf / "RTFAttributes$BooleanAttribute";
namespace javax::swing::text::rtf { class RTFAttributes$GenericAttribute; }
template<> constexpr auto signature<::javax::swing::text::rtf::RTFAttributes$GenericAttribute> = ::javax_swing_text_rtf / "RTFAttributes$GenericAttribute";
namespace javax::swing::text::rtf { class RTFAttributes$NumericAttribute; }
template<> constexpr auto signature<::javax::swing::text::rtf::RTFAttributes$NumericAttribute> = ::javax_swing_text_rtf / "RTFAttributes$NumericAttribute";
namespace javax::swing::text::rtf { class RTFEditorKit; }
template<> constexpr auto signature<::javax::swing::text::rtf::RTFEditorKit> = ::javax_swing_text_rtf / "RTFEditorKit";
namespace javax::swing::text::rtf { class RTFGenerator; }
template<> constexpr auto signature<::javax::swing::text::rtf::RTFGenerator> = ::javax_swing_text_rtf / "RTFGenerator";
namespace javax::swing::text::rtf { class RTFGenerator$CharacterKeywordPair; }
template<> constexpr auto signature<::javax::swing::text::rtf::RTFGenerator$CharacterKeywordPair> = ::javax_swing_text_rtf / "RTFGenerator$CharacterKeywordPair";
namespace javax::swing::text::rtf { class RTFParser; }
template<> constexpr auto signature<::javax::swing::text::rtf::RTFParser> = ::javax_swing_text_rtf / "RTFParser";
namespace javax::swing::text::rtf { class RTFReader; }
template<> constexpr auto signature<::javax::swing::text::rtf::RTFReader> = ::javax_swing_text_rtf / "RTFReader";
namespace javax::swing::text::rtf { class RTFReader$1; }
template<> constexpr auto signature<::javax::swing::text::rtf::RTFReader$1> = ::javax_swing_text_rtf / "RTFReader$1";
namespace javax::swing::text::rtf { class RTFReader$AttributeTrackingDestination; }
template<> constexpr auto signature<::javax::swing::text::rtf::RTFReader$AttributeTrackingDestination> = ::javax_swing_text_rtf / "RTFReader$AttributeTrackingDestination";
namespace javax::swing::text::rtf { class RTFReader$ColortblDestination; }
template<> constexpr auto signature<::javax::swing::text::rtf::RTFReader$ColortblDestination> = ::javax_swing_text_rtf / "RTFReader$ColortblDestination";
namespace javax::swing::text::rtf { class RTFReader$Destination; }
template<> constexpr auto signature<::javax::swing::text::rtf::RTFReader$Destination> = ::javax_swing_text_rtf / "RTFReader$Destination";
namespace javax::swing::text::rtf { class RTFReader$DiscardingDestination; }
template<> constexpr auto signature<::javax::swing::text::rtf::RTFReader$DiscardingDestination> = ::javax_swing_text_rtf / "RTFReader$DiscardingDestination";
namespace javax::swing::text::rtf { class RTFReader$DocumentDestination; }
template<> constexpr auto signature<::javax::swing::text::rtf::RTFReader$DocumentDestination> = ::javax_swing_text_rtf / "RTFReader$DocumentDestination";
namespace javax::swing::text::rtf { class RTFReader$FonttblDestination; }
template<> constexpr auto signature<::javax::swing::text::rtf::RTFReader$FonttblDestination> = ::javax_swing_text_rtf / "RTFReader$FonttblDestination";
namespace javax::swing::text::rtf { class RTFReader$InfoDestination; }
template<> constexpr auto signature<::javax::swing::text::rtf::RTFReader$InfoDestination> = ::javax_swing_text_rtf / "RTFReader$InfoDestination";
namespace javax::swing::text::rtf { class RTFReader$StylesheetDestination; }
template<> constexpr auto signature<::javax::swing::text::rtf::RTFReader$StylesheetDestination> = ::javax_swing_text_rtf / "RTFReader$StylesheetDestination";
namespace javax::swing::text::rtf { class RTFReader$StylesheetDestination$StyleDefiningDestination; }
template<> constexpr auto signature<::javax::swing::text::rtf::RTFReader$StylesheetDestination$StyleDefiningDestination> = ::javax_swing_text_rtf / "RTFReader$StylesheetDestination$StyleDefiningDestination";
namespace javax::swing::text::rtf { class RTFReader$TextHandlingDestination; }
template<> constexpr auto signature<::javax::swing::text::rtf::RTFReader$TextHandlingDestination> = ::javax_swing_text_rtf / "RTFReader$TextHandlingDestination";
namespace javax::swing::tree { class AbstractLayoutCache; }
template<> constexpr auto signature<::javax::swing::tree::AbstractLayoutCache> = ::javax_swing_tree / "AbstractLayoutCache";
namespace javax::swing::tree { class AbstractLayoutCache$NodeDimensions; }
template<> constexpr auto signature<::javax::swing::tree::AbstractLayoutCache$NodeDimensions> = ::javax_swing_tree / "AbstractLayoutCache$NodeDimensions";
namespace javax::swing::tree { class DefaultMutableTreeNode; }
template<> constexpr auto signature<::javax::swing::tree::DefaultMutableTreeNode> = ::javax_swing_tree / "DefaultMutableTreeNode";
namespace javax::swing::tree { class DefaultMutableTreeNode$BreadthFirstEnumeration; }
template<> constexpr auto signature<::javax::swing::tree::DefaultMutableTreeNode$BreadthFirstEnumeration> = ::javax_swing_tree / "DefaultMutableTreeNode$BreadthFirstEnumeration";
namespace javax::swing::tree { class DefaultMutableTreeNode$BreadthFirstEnumeration$Queue; }
template<> constexpr auto signature<::javax::swing::tree::DefaultMutableTreeNode$BreadthFirstEnumeration$Queue> = ::javax_swing_tree / "DefaultMutableTreeNode$BreadthFirstEnumeration$Queue";
namespace javax::swing::tree { class DefaultMutableTreeNode$BreadthFirstEnumeration$Queue$QNode; }
template<> constexpr auto signature<::javax::swing::tree::DefaultMutableTreeNode$BreadthFirstEnumeration$Queue$QNode> = ::javax_swing_tree / "DefaultMutableTreeNode$BreadthFirstEnumeration$Queue$QNode";
namespace javax::swing::tree { class DefaultMutableTreeNode$PathBetweenNodesEnumeration; }
template<> constexpr auto signature<::javax::swing::tree::DefaultMutableTreeNode$PathBetweenNodesEnumeration> = ::javax_swing_tree / "DefaultMutableTreeNode$PathBetweenNodesEnumeration";
namespace javax::swing::tree { class DefaultMutableTreeNode$PostorderEnumeration; }
template<> constexpr auto signature<::javax::swing::tree::DefaultMutableTreeNode$PostorderEnumeration> = ::javax_swing_tree / "DefaultMutableTreeNode$PostorderEnumeration";
namespace javax::swing::tree { class DefaultMutableTreeNode$PreorderEnumeration; }
template<> constexpr auto signature<::javax::swing::tree::DefaultMutableTreeNode$PreorderEnumeration> = ::javax_swing_tree / "DefaultMutableTreeNode$PreorderEnumeration";
namespace javax::swing::tree { class DefaultTreeCellEditor; }
template<> constexpr auto signature<::javax::swing::tree::DefaultTreeCellEditor> = ::javax_swing_tree / "DefaultTreeCellEditor";
namespace javax::swing::tree { class DefaultTreeCellEditor$1; }
template<> constexpr auto signature<::javax::swing::tree::DefaultTreeCellEditor$1> = ::javax_swing_tree / "DefaultTreeCellEditor$1";
namespace javax::swing::tree { class DefaultTreeCellEditor$DefaultTextField; }
template<> constexpr auto signature<::javax::swing::tree::DefaultTreeCellEditor$DefaultTextField> = ::javax_swing_tree / "DefaultTreeCellEditor$DefaultTextField";
namespace javax::swing::tree { class DefaultTreeCellEditor$EditorContainer; }
template<> constexpr auto signature<::javax::swing::tree::DefaultTreeCellEditor$EditorContainer> = ::javax_swing_tree / "DefaultTreeCellEditor$EditorContainer";
namespace javax::swing::tree { class DefaultTreeCellRenderer; }
template<> constexpr auto signature<::javax::swing::tree::DefaultTreeCellRenderer> = ::javax_swing_tree / "DefaultTreeCellRenderer";
namespace javax::swing::tree { class DefaultTreeModel; }
template<> constexpr auto signature<::javax::swing::tree::DefaultTreeModel> = ::javax_swing_tree / "DefaultTreeModel";
namespace javax::swing::tree { class DefaultTreeSelectionModel; }
template<> constexpr auto signature<::javax::swing::tree::DefaultTreeSelectionModel> = ::javax_swing_tree / "DefaultTreeSelectionModel";
namespace javax::swing::tree { class ExpandVetoException; }
template<> constexpr auto signature<::javax::swing::tree::ExpandVetoException> = ::javax_swing_tree / "ExpandVetoException";
namespace javax::swing::tree { class FixedHeightLayoutCache; }
template<> constexpr auto signature<::javax::swing::tree::FixedHeightLayoutCache> = ::javax_swing_tree / "FixedHeightLayoutCache";
namespace javax::swing::tree { class FixedHeightLayoutCache$1; }
template<> constexpr auto signature<::javax::swing::tree::FixedHeightLayoutCache$1> = ::javax_swing_tree / "FixedHeightLayoutCache$1";
namespace javax::swing::tree { class FixedHeightLayoutCache$FHTreeStateNode; }
template<> constexpr auto signature<::javax::swing::tree::FixedHeightLayoutCache$FHTreeStateNode> = ::javax_swing_tree / "FixedHeightLayoutCache$FHTreeStateNode";
namespace javax::swing::tree { class FixedHeightLayoutCache$SearchInfo; }
template<> constexpr auto signature<::javax::swing::tree::FixedHeightLayoutCache$SearchInfo> = ::javax_swing_tree / "FixedHeightLayoutCache$SearchInfo";
namespace javax::swing::tree { class FixedHeightLayoutCache$VisibleFHTreeStateNodeEnumeration; }
template<> constexpr auto signature<::javax::swing::tree::FixedHeightLayoutCache$VisibleFHTreeStateNodeEnumeration> = ::javax_swing_tree / "FixedHeightLayoutCache$VisibleFHTreeStateNodeEnumeration";
namespace javax::swing::tree { class MutableTreeNode; }
template<> constexpr auto signature<::javax::swing::tree::MutableTreeNode> = ::javax_swing_tree / "MutableTreeNode";
namespace javax::swing::tree { class PathPlaceHolder; }
template<> constexpr auto signature<::javax::swing::tree::PathPlaceHolder> = ::javax_swing_tree / "PathPlaceHolder";
namespace javax::swing::tree { class RowMapper; }
template<> constexpr auto signature<::javax::swing::tree::RowMapper> = ::javax_swing_tree / "RowMapper";
namespace javax::swing::tree { class TreeCellEditor; }
template<> constexpr auto signature<::javax::swing::tree::TreeCellEditor> = ::javax_swing_tree / "TreeCellEditor";
namespace javax::swing::tree { class TreeCellRenderer; }
template<> constexpr auto signature<::javax::swing::tree::TreeCellRenderer> = ::javax_swing_tree / "TreeCellRenderer";
namespace javax::swing::tree { class TreeModel; }
template<> constexpr auto signature<::javax::swing::tree::TreeModel> = ::javax_swing_tree / "TreeModel";
namespace javax::swing::tree { class TreeNode; }
template<> constexpr auto signature<::javax::swing::tree::TreeNode> = ::javax_swing_tree / "TreeNode";
namespace javax::swing::tree { class TreePath; }
template<> constexpr auto signature<::javax::swing::tree::TreePath> = ::javax_swing_tree / "TreePath";
namespace javax::swing::tree { class TreeSelectionModel; }
template<> constexpr auto signature<::javax::swing::tree::TreeSelectionModel> = ::javax_swing_tree / "TreeSelectionModel";
namespace javax::swing::tree { class VariableHeightLayoutCache; }
template<> constexpr auto signature<::javax::swing::tree::VariableHeightLayoutCache> = ::javax_swing_tree / "VariableHeightLayoutCache";
namespace javax::swing::tree { class VariableHeightLayoutCache$TreeStateNode; }
template<> constexpr auto signature<::javax::swing::tree::VariableHeightLayoutCache$TreeStateNode> = ::javax_swing_tree / "VariableHeightLayoutCache$TreeStateNode";
namespace javax::swing::tree { class VariableHeightLayoutCache$VisibleTreeStateNodeEnumeration; }
template<> constexpr auto signature<::javax::swing::tree::VariableHeightLayoutCache$VisibleTreeStateNodeEnumeration> = ::javax_swing_tree / "VariableHeightLayoutCache$VisibleTreeStateNodeEnumeration";
namespace javax::swing::undo { class AbstractUndoableEdit; }
template<> constexpr auto signature<::javax::swing::undo::AbstractUndoableEdit> = ::javax_swing_undo / "AbstractUndoableEdit";
namespace javax::swing::undo { class CannotRedoException; }
template<> constexpr auto signature<::javax::swing::undo::CannotRedoException> = ::javax_swing_undo / "CannotRedoException";
namespace javax::swing::undo { class CannotUndoException; }
template<> constexpr auto signature<::javax::swing::undo::CannotUndoException> = ::javax_swing_undo / "CannotUndoException";
namespace javax::swing::undo { class CompoundEdit; }
template<> constexpr auto signature<::javax::swing::undo::CompoundEdit> = ::javax_swing_undo / "CompoundEdit";
namespace javax::swing::undo { class StateEdit; }
template<> constexpr auto signature<::javax::swing::undo::StateEdit> = ::javax_swing_undo / "StateEdit";
namespace javax::swing::undo { class StateEditable; }
template<> constexpr auto signature<::javax::swing::undo::StateEditable> = ::javax_swing_undo / "StateEditable";
namespace javax::swing::undo { class UndoManager; }
template<> constexpr auto signature<::javax::swing::undo::UndoManager> = ::javax_swing_undo / "UndoManager";
namespace javax::swing::undo { class UndoableEdit; }
template<> constexpr auto signature<::javax::swing::undo::UndoableEdit> = ::javax_swing_undo / "UndoableEdit";
namespace javax::swing::undo { class UndoableEditSupport; }
template<> constexpr auto signature<::javax::swing::undo::UndoableEditSupport> = ::javax_swing_undo / "UndoableEditSupport";
namespace javax::tools { class Diagnostic; }
template<> constexpr auto signature<::javax::tools::Diagnostic> = ::javax_tools / "Diagnostic";
namespace javax::tools { class Diagnostic$Kind; }
template<> constexpr auto signature<::javax::tools::Diagnostic$Kind> = ::javax_tools / "Diagnostic$Kind";
namespace javax::tools { class DiagnosticCollector; }
template<> constexpr auto signature<::javax::tools::DiagnosticCollector> = ::javax_tools / "DiagnosticCollector";
namespace javax::tools { class DiagnosticListener; }
template<> constexpr auto signature<::javax::tools::DiagnosticListener> = ::javax_tools / "DiagnosticListener";
namespace javax::tools { class DocumentationTool; }
template<> constexpr auto signature<::javax::tools::DocumentationTool> = ::javax_tools / "DocumentationTool";
namespace javax::tools { class DocumentationTool$1; }
template<> constexpr auto signature<::javax::tools::DocumentationTool$1> = ::javax_tools / "DocumentationTool$1";
namespace javax::tools { class DocumentationTool$DocumentationTask; }
template<> constexpr auto signature<::javax::tools::DocumentationTool$DocumentationTask> = ::javax_tools / "DocumentationTool$DocumentationTask";
namespace javax::tools { class DocumentationTool$Location; }
template<> constexpr auto signature<::javax::tools::DocumentationTool$Location> = ::javax_tools / "DocumentationTool$Location";
namespace javax::tools { class FileObject; }
template<> constexpr auto signature<::javax::tools::FileObject> = ::javax_tools / "FileObject";
namespace javax::tools { class ForwardingFileObject; }
template<> constexpr auto signature<::javax::tools::ForwardingFileObject> = ::javax_tools / "ForwardingFileObject";
namespace javax::tools { class ForwardingJavaFileManager; }
template<> constexpr auto signature<::javax::tools::ForwardingJavaFileManager> = ::javax_tools / "ForwardingJavaFileManager";
namespace javax::tools { class ForwardingJavaFileObject; }
template<> constexpr auto signature<::javax::tools::ForwardingJavaFileObject> = ::javax_tools / "ForwardingJavaFileObject";
namespace javax::tools { class JavaCompiler; }
template<> constexpr auto signature<::javax::tools::JavaCompiler> = ::javax_tools / "JavaCompiler";
namespace javax::tools { class JavaCompiler$CompilationTask; }
template<> constexpr auto signature<::javax::tools::JavaCompiler$CompilationTask> = ::javax_tools / "JavaCompiler$CompilationTask";
namespace javax::tools { class JavaFileManager; }
template<> constexpr auto signature<::javax::tools::JavaFileManager> = ::javax_tools / "JavaFileManager";
namespace javax::tools { class JavaFileManager$Location; }
template<> constexpr auto signature<::javax::tools::JavaFileManager$Location> = ::javax_tools / "JavaFileManager$Location";
namespace javax::tools { class JavaFileObject; }
template<> constexpr auto signature<::javax::tools::JavaFileObject> = ::javax_tools / "JavaFileObject";
namespace javax::tools { class JavaFileObject$Kind; }
template<> constexpr auto signature<::javax::tools::JavaFileObject$Kind> = ::javax_tools / "JavaFileObject$Kind";
namespace javax::tools { class OptionChecker; }
template<> constexpr auto signature<::javax::tools::OptionChecker> = ::javax_tools / "OptionChecker";
namespace javax::tools { class SimpleJavaFileObject; }
template<> constexpr auto signature<::javax::tools::SimpleJavaFileObject> = ::javax_tools / "SimpleJavaFileObject";
namespace javax::tools { class StandardJavaFileManager; }
template<> constexpr auto signature<::javax::tools::StandardJavaFileManager> = ::javax_tools / "StandardJavaFileManager";
namespace javax::tools { class StandardLocation; }
template<> constexpr auto signature<::javax::tools::StandardLocation> = ::javax_tools / "StandardLocation";
namespace javax::tools { class StandardLocation$1; }
template<> constexpr auto signature<::javax::tools::StandardLocation$1> = ::javax_tools / "StandardLocation$1";
namespace javax::tools { class StandardLocation$2; }
template<> constexpr auto signature<::javax::tools::StandardLocation$2> = ::javax_tools / "StandardLocation$2";
namespace javax::tools { class Tool; }
template<> constexpr auto signature<::javax::tools::Tool> = ::javax_tools / "Tool";
namespace javax::tools { class ToolProvider; }
template<> constexpr auto signature<::javax::tools::ToolProvider> = ::javax_tools / "ToolProvider";
namespace javax::transaction { class InvalidTransactionException; }
template<> constexpr auto signature<::javax::transaction::InvalidTransactionException> = ::javax_transaction / "InvalidTransactionException";
namespace javax::transaction { class TransactionRequiredException; }
template<> constexpr auto signature<::javax::transaction::TransactionRequiredException> = ::javax_transaction / "TransactionRequiredException";
namespace javax::transaction { class TransactionRolledbackException; }
template<> constexpr auto signature<::javax::transaction::TransactionRolledbackException> = ::javax_transaction / "TransactionRolledbackException";
namespace javax::transaction::xa { class XAException; }
template<> constexpr auto signature<::javax::transaction::xa::XAException> = ::javax_transaction_xa / "XAException";
namespace javax::transaction::xa { class XAResource; }
template<> constexpr auto signature<::javax::transaction::xa::XAResource> = ::javax_transaction_xa / "XAResource";
namespace javax::transaction::xa { class Xid; }
template<> constexpr auto signature<::javax::transaction::xa::Xid> = ::javax_transaction_xa / "Xid";
namespace javax::xml { class XMLConstants; }
template<> constexpr auto signature<::javax::xml::XMLConstants> = ::javax_xml / "XMLConstants";
namespace javax::xml::bind { class Binder; }
template<> constexpr auto signature<::javax::xml::bind::Binder> = ::javax_xml_bind / "Binder";
namespace javax::xml::bind { class ContextFinder; }
template<> constexpr auto signature<::javax::xml::bind::ContextFinder> = ::javax_xml_bind / "ContextFinder";
namespace javax::xml::bind { class ContextFinder$1; }
template<> constexpr auto signature<::javax::xml::bind::ContextFinder$1> = ::javax_xml_bind / "ContextFinder$1";
namespace javax::xml::bind { class ContextFinder$2; }
template<> constexpr auto signature<::javax::xml::bind::ContextFinder$2> = ::javax_xml_bind / "ContextFinder$2";
namespace javax::xml::bind { class ContextFinder$3; }
template<> constexpr auto signature<::javax::xml::bind::ContextFinder$3> = ::javax_xml_bind / "ContextFinder$3";
namespace javax::xml::bind { class DataBindingException; }
template<> constexpr auto signature<::javax::xml::bind::DataBindingException> = ::javax_xml_bind / "DataBindingException";
namespace javax::xml::bind { class DatatypeConverter; }
template<> constexpr auto signature<::javax::xml::bind::DatatypeConverter> = ::javax_xml_bind / "DatatypeConverter";
namespace javax::xml::bind { class DatatypeConverterImpl; }
template<> constexpr auto signature<::javax::xml::bind::DatatypeConverterImpl> = ::javax_xml_bind / "DatatypeConverterImpl";
namespace javax::xml::bind { class DatatypeConverterImpl$CalendarFormatter; }
template<> constexpr auto signature<::javax::xml::bind::DatatypeConverterImpl$CalendarFormatter> = ::javax_xml_bind / "DatatypeConverterImpl$CalendarFormatter";
namespace javax::xml::bind { class DatatypeConverterInterface; }
template<> constexpr auto signature<::javax::xml::bind::DatatypeConverterInterface> = ::javax_xml_bind / "DatatypeConverterInterface";
namespace javax::xml::bind { class Element; }
template<> constexpr auto signature<::javax::xml::bind::Element> = ::javax_xml_bind / "Element";
namespace javax::xml::bind { class GetPropertyAction; }
template<> constexpr auto signature<::javax::xml::bind::GetPropertyAction> = ::javax_xml_bind / "GetPropertyAction";
namespace javax::xml::bind { class JAXB; }
template<> constexpr auto signature<::javax::xml::bind::JAXB> = ::javax_xml_bind / "JAXB";
namespace javax::xml::bind { class JAXB$Cache; }
template<> constexpr auto signature<::javax::xml::bind::JAXB$Cache> = ::javax_xml_bind / "JAXB$Cache";
namespace javax::xml::bind { class JAXBContext; }
template<> constexpr auto signature<::javax::xml::bind::JAXBContext> = ::javax_xml_bind / "JAXBContext";
namespace javax::xml::bind { class JAXBContext$1; }
template<> constexpr auto signature<::javax::xml::bind::JAXBContext$1> = ::javax_xml_bind / "JAXBContext$1";
namespace javax::xml::bind { class JAXBElement; }
template<> constexpr auto signature<::javax::xml::bind::JAXBElement> = ::javax_xml_bind / "JAXBElement";
namespace javax::xml::bind { class JAXBElement$GlobalScope; }
template<> constexpr auto signature<::javax::xml::bind::JAXBElement$GlobalScope> = ::javax_xml_bind / "JAXBElement$GlobalScope";
namespace javax::xml::bind { class JAXBException; }
template<> constexpr auto signature<::javax::xml::bind::JAXBException> = ::javax_xml_bind / "JAXBException";
namespace javax::xml::bind { class JAXBIntrospector; }
template<> constexpr auto signature<::javax::xml::bind::JAXBIntrospector> = ::javax_xml_bind / "JAXBIntrospector";
namespace javax::xml::bind { class JAXBPermission; }
template<> constexpr auto signature<::javax::xml::bind::JAXBPermission> = ::javax_xml_bind / "JAXBPermission";
namespace javax::xml::bind { class MarshalException; }
template<> constexpr auto signature<::javax::xml::bind::MarshalException> = ::javax_xml_bind / "MarshalException";
namespace javax::xml::bind { class Marshaller; }
template<> constexpr auto signature<::javax::xml::bind::Marshaller> = ::javax_xml_bind / "Marshaller";
namespace javax::xml::bind { class Marshaller$Listener; }
template<> constexpr auto signature<::javax::xml::bind::Marshaller$Listener> = ::javax_xml_bind / "Marshaller$Listener";
namespace javax::xml::bind { class Messages; }
template<> constexpr auto signature<::javax::xml::bind::Messages> = ::javax_xml_bind / "Messages";
namespace javax::xml::bind { class NotIdentifiableEvent; }
template<> constexpr auto signature<::javax::xml::bind::NotIdentifiableEvent> = ::javax_xml_bind / "NotIdentifiableEvent";
namespace javax::xml::bind { class ParseConversionEvent; }
template<> constexpr auto signature<::javax::xml::bind::ParseConversionEvent> = ::javax_xml_bind / "ParseConversionEvent";
namespace javax::xml::bind { class PrintConversionEvent; }
template<> constexpr auto signature<::javax::xml::bind::PrintConversionEvent> = ::javax_xml_bind / "PrintConversionEvent";
namespace javax::xml::bind { class PropertyException; }
template<> constexpr auto signature<::javax::xml::bind::PropertyException> = ::javax_xml_bind / "PropertyException";
namespace javax::xml::bind { class SchemaOutputResolver; }
template<> constexpr auto signature<::javax::xml::bind::SchemaOutputResolver> = ::javax_xml_bind / "SchemaOutputResolver";
namespace javax::xml::bind { class TypeConstraintException; }
template<> constexpr auto signature<::javax::xml::bind::TypeConstraintException> = ::javax_xml_bind / "TypeConstraintException";
namespace javax::xml::bind { class UnmarshalException; }
template<> constexpr auto signature<::javax::xml::bind::UnmarshalException> = ::javax_xml_bind / "UnmarshalException";
namespace javax::xml::bind { class Unmarshaller; }
template<> constexpr auto signature<::javax::xml::bind::Unmarshaller> = ::javax_xml_bind / "Unmarshaller";
namespace javax::xml::bind { class Unmarshaller$Listener; }
template<> constexpr auto signature<::javax::xml::bind::Unmarshaller$Listener> = ::javax_xml_bind / "Unmarshaller$Listener";
namespace javax::xml::bind { class UnmarshallerHandler; }
template<> constexpr auto signature<::javax::xml::bind::UnmarshallerHandler> = ::javax_xml_bind / "UnmarshallerHandler";
namespace javax::xml::bind { class ValidationEvent; }
template<> constexpr auto signature<::javax::xml::bind::ValidationEvent> = ::javax_xml_bind / "ValidationEvent";
namespace javax::xml::bind { class ValidationEventHandler; }
template<> constexpr auto signature<::javax::xml::bind::ValidationEventHandler> = ::javax_xml_bind / "ValidationEventHandler";
namespace javax::xml::bind { class ValidationEventLocator; }
template<> constexpr auto signature<::javax::xml::bind::ValidationEventLocator> = ::javax_xml_bind / "ValidationEventLocator";
namespace javax::xml::bind { class ValidationException; }
template<> constexpr auto signature<::javax::xml::bind::ValidationException> = ::javax_xml_bind / "ValidationException";
namespace javax::xml::bind { class Validator; }
template<> constexpr auto signature<::javax::xml::bind::Validator> = ::javax_xml_bind / "Validator";
namespace javax::xml::bind { class WhiteSpaceProcessor; }
template<> constexpr auto signature<::javax::xml::bind::WhiteSpaceProcessor> = ::javax_xml_bind / "WhiteSpaceProcessor";
namespace javax::xml::bind::annotation { class DomHandler; }
template<> constexpr auto signature<::javax::xml::bind::annotation::DomHandler> = ::javax_xml_bind_annotation / "DomHandler";
namespace javax::xml::bind::annotation { class W3CDomHandler; }
template<> constexpr auto signature<::javax::xml::bind::annotation::W3CDomHandler> = ::javax_xml_bind_annotation / "W3CDomHandler";
namespace javax::xml::bind::annotation { class XmlAccessOrder; }
template<> constexpr auto signature<::javax::xml::bind::annotation::XmlAccessOrder> = ::javax_xml_bind_annotation / "XmlAccessOrder";
namespace javax::xml::bind::annotation { class XmlAccessType; }
template<> constexpr auto signature<::javax::xml::bind::annotation::XmlAccessType> = ::javax_xml_bind_annotation / "XmlAccessType";
namespace javax::xml::bind::annotation { class XmlAccessorOrder; }
template<> constexpr auto signature<::javax::xml::bind::annotation::XmlAccessorOrder> = ::javax_xml_bind_annotation / "XmlAccessorOrder";
namespace javax::xml::bind::annotation { class XmlAccessorType; }
template<> constexpr auto signature<::javax::xml::bind::annotation::XmlAccessorType> = ::javax_xml_bind_annotation / "XmlAccessorType";
namespace javax::xml::bind::annotation { class XmlAnyAttribute; }
template<> constexpr auto signature<::javax::xml::bind::annotation::XmlAnyAttribute> = ::javax_xml_bind_annotation / "XmlAnyAttribute";
namespace javax::xml::bind::annotation { class XmlAnyElement; }
template<> constexpr auto signature<::javax::xml::bind::annotation::XmlAnyElement> = ::javax_xml_bind_annotation / "XmlAnyElement";
namespace javax::xml::bind::annotation { class XmlAttachmentRef; }
template<> constexpr auto signature<::javax::xml::bind::annotation::XmlAttachmentRef> = ::javax_xml_bind_annotation / "XmlAttachmentRef";
namespace javax::xml::bind::annotation { class XmlAttribute; }
template<> constexpr auto signature<::javax::xml::bind::annotation::XmlAttribute> = ::javax_xml_bind_annotation / "XmlAttribute";
namespace javax::xml::bind::annotation { class XmlElement; }
template<> constexpr auto signature<::javax::xml::bind::annotation::XmlElement> = ::javax_xml_bind_annotation / "XmlElement";
namespace javax::xml::bind::annotation { class XmlElement$DEFAULT; }
template<> constexpr auto signature<::javax::xml::bind::annotation::XmlElement$DEFAULT> = ::javax_xml_bind_annotation / "XmlElement$DEFAULT";
namespace javax::xml::bind::annotation { class XmlElementDecl; }
template<> constexpr auto signature<::javax::xml::bind::annotation::XmlElementDecl> = ::javax_xml_bind_annotation / "XmlElementDecl";
namespace javax::xml::bind::annotation { class XmlElementDecl$GLOBAL; }
template<> constexpr auto signature<::javax::xml::bind::annotation::XmlElementDecl$GLOBAL> = ::javax_xml_bind_annotation / "XmlElementDecl$GLOBAL";
namespace javax::xml::bind::annotation { class XmlElementRef; }
template<> constexpr auto signature<::javax::xml::bind::annotation::XmlElementRef> = ::javax_xml_bind_annotation / "XmlElementRef";
namespace javax::xml::bind::annotation { class XmlElementRef$DEFAULT; }
template<> constexpr auto signature<::javax::xml::bind::annotation::XmlElementRef$DEFAULT> = ::javax_xml_bind_annotation / "XmlElementRef$DEFAULT";
namespace javax::xml::bind::annotation { class XmlElementRefs; }
template<> constexpr auto signature<::javax::xml::bind::annotation::XmlElementRefs> = ::javax_xml_bind_annotation / "XmlElementRefs";
namespace javax::xml::bind::annotation { class XmlElementWrapper; }
template<> constexpr auto signature<::javax::xml::bind::annotation::XmlElementWrapper> = ::javax_xml_bind_annotation / "XmlElementWrapper";
namespace javax::xml::bind::annotation { class XmlElements; }
template<> constexpr auto signature<::javax::xml::bind::annotation::XmlElements> = ::javax_xml_bind_annotation / "XmlElements";
namespace javax::xml::bind::annotation { class XmlEnum; }
template<> constexpr auto signature<::javax::xml::bind::annotation::XmlEnum> = ::javax_xml_bind_annotation / "XmlEnum";
namespace javax::xml::bind::annotation { class XmlEnumValue; }
template<> constexpr auto signature<::javax::xml::bind::annotation::XmlEnumValue> = ::javax_xml_bind_annotation / "XmlEnumValue";
namespace javax::xml::bind::annotation { class XmlID; }
template<> constexpr auto signature<::javax::xml::bind::annotation::XmlID> = ::javax_xml_bind_annotation / "XmlID";
namespace javax::xml::bind::annotation { class XmlIDREF; }
template<> constexpr auto signature<::javax::xml::bind::annotation::XmlIDREF> = ::javax_xml_bind_annotation / "XmlIDREF";
namespace javax::xml::bind::annotation { class XmlInlineBinaryData; }
template<> constexpr auto signature<::javax::xml::bind::annotation::XmlInlineBinaryData> = ::javax_xml_bind_annotation / "XmlInlineBinaryData";
namespace javax::xml::bind::annotation { class XmlList; }
template<> constexpr auto signature<::javax::xml::bind::annotation::XmlList> = ::javax_xml_bind_annotation / "XmlList";
namespace javax::xml::bind::annotation { class XmlMimeType; }
template<> constexpr auto signature<::javax::xml::bind::annotation::XmlMimeType> = ::javax_xml_bind_annotation / "XmlMimeType";
namespace javax::xml::bind::annotation { class XmlMixed; }
template<> constexpr auto signature<::javax::xml::bind::annotation::XmlMixed> = ::javax_xml_bind_annotation / "XmlMixed";
namespace javax::xml::bind::annotation { class XmlNs; }
template<> constexpr auto signature<::javax::xml::bind::annotation::XmlNs> = ::javax_xml_bind_annotation / "XmlNs";
namespace javax::xml::bind::annotation { class XmlNsForm; }
template<> constexpr auto signature<::javax::xml::bind::annotation::XmlNsForm> = ::javax_xml_bind_annotation / "XmlNsForm";
namespace javax::xml::bind::annotation { class XmlRegistry; }
template<> constexpr auto signature<::javax::xml::bind::annotation::XmlRegistry> = ::javax_xml_bind_annotation / "XmlRegistry";
namespace javax::xml::bind::annotation { class XmlRootElement; }
template<> constexpr auto signature<::javax::xml::bind::annotation::XmlRootElement> = ::javax_xml_bind_annotation / "XmlRootElement";
namespace javax::xml::bind::annotation { class XmlSchema; }
template<> constexpr auto signature<::javax::xml::bind::annotation::XmlSchema> = ::javax_xml_bind_annotation / "XmlSchema";
namespace javax::xml::bind::annotation { class XmlSchemaType; }
template<> constexpr auto signature<::javax::xml::bind::annotation::XmlSchemaType> = ::javax_xml_bind_annotation / "XmlSchemaType";
namespace javax::xml::bind::annotation { class XmlSchemaType$DEFAULT; }
template<> constexpr auto signature<::javax::xml::bind::annotation::XmlSchemaType$DEFAULT> = ::javax_xml_bind_annotation / "XmlSchemaType$DEFAULT";
namespace javax::xml::bind::annotation { class XmlSchemaTypes; }
template<> constexpr auto signature<::javax::xml::bind::annotation::XmlSchemaTypes> = ::javax_xml_bind_annotation / "XmlSchemaTypes";
namespace javax::xml::bind::annotation { class XmlSeeAlso; }
template<> constexpr auto signature<::javax::xml::bind::annotation::XmlSeeAlso> = ::javax_xml_bind_annotation / "XmlSeeAlso";
namespace javax::xml::bind::annotation { class XmlTransient; }
template<> constexpr auto signature<::javax::xml::bind::annotation::XmlTransient> = ::javax_xml_bind_annotation / "XmlTransient";
namespace javax::xml::bind::annotation { class XmlType; }
template<> constexpr auto signature<::javax::xml::bind::annotation::XmlType> = ::javax_xml_bind_annotation / "XmlType";
namespace javax::xml::bind::annotation { class XmlType$DEFAULT; }
template<> constexpr auto signature<::javax::xml::bind::annotation::XmlType$DEFAULT> = ::javax_xml_bind_annotation / "XmlType$DEFAULT";
namespace javax::xml::bind::annotation { class XmlValue; }
template<> constexpr auto signature<::javax::xml::bind::annotation::XmlValue> = ::javax_xml_bind_annotation / "XmlValue";
namespace javax::xml::bind::annotation::adapters { class CollapsedStringAdapter; }
template<> constexpr auto signature<::javax::xml::bind::annotation::adapters::CollapsedStringAdapter> = ::javax_xml_bind_annotation_adapters / "CollapsedStringAdapter";
namespace javax::xml::bind::annotation::adapters { class HexBinaryAdapter; }
template<> constexpr auto signature<::javax::xml::bind::annotation::adapters::HexBinaryAdapter> = ::javax_xml_bind_annotation_adapters / "HexBinaryAdapter";
namespace javax::xml::bind::annotation::adapters { class NormalizedStringAdapter; }
template<> constexpr auto signature<::javax::xml::bind::annotation::adapters::NormalizedStringAdapter> = ::javax_xml_bind_annotation_adapters / "NormalizedStringAdapter";
namespace javax::xml::bind::annotation::adapters { class XmlAdapter; }
template<> constexpr auto signature<::javax::xml::bind::annotation::adapters::XmlAdapter> = ::javax_xml_bind_annotation_adapters / "XmlAdapter";
namespace javax::xml::bind::annotation::adapters { class XmlJavaTypeAdapter; }
template<> constexpr auto signature<::javax::xml::bind::annotation::adapters::XmlJavaTypeAdapter> = ::javax_xml_bind_annotation_adapters / "XmlJavaTypeAdapter";
namespace javax::xml::bind::annotation::adapters { class XmlJavaTypeAdapter$DEFAULT; }
template<> constexpr auto signature<::javax::xml::bind::annotation::adapters::XmlJavaTypeAdapter$DEFAULT> = ::javax_xml_bind_annotation_adapters / "XmlJavaTypeAdapter$DEFAULT";
namespace javax::xml::bind::annotation::adapters { class XmlJavaTypeAdapters; }
template<> constexpr auto signature<::javax::xml::bind::annotation::adapters::XmlJavaTypeAdapters> = ::javax_xml_bind_annotation_adapters / "XmlJavaTypeAdapters";
namespace javax::xml::bind::attachment { class AttachmentMarshaller; }
template<> constexpr auto signature<::javax::xml::bind::attachment::AttachmentMarshaller> = ::javax_xml_bind_attachment / "AttachmentMarshaller";
namespace javax::xml::bind::attachment { class AttachmentUnmarshaller; }
template<> constexpr auto signature<::javax::xml::bind::attachment::AttachmentUnmarshaller> = ::javax_xml_bind_attachment / "AttachmentUnmarshaller";
namespace javax::xml::bind::helpers { class AbstractMarshallerImpl; }
template<> constexpr auto signature<::javax::xml::bind::helpers::AbstractMarshallerImpl> = ::javax_xml_bind_helpers / "AbstractMarshallerImpl";
namespace javax::xml::bind::helpers { class AbstractUnmarshallerImpl; }
template<> constexpr auto signature<::javax::xml::bind::helpers::AbstractUnmarshallerImpl> = ::javax_xml_bind_helpers / "AbstractUnmarshallerImpl";
namespace javax::xml::bind::helpers { class DefaultValidationEventHandler; }
template<> constexpr auto signature<::javax::xml::bind::helpers::DefaultValidationEventHandler> = ::javax_xml_bind_helpers / "DefaultValidationEventHandler";
namespace javax::xml::bind::helpers { class Messages; }
template<> constexpr auto signature<::javax::xml::bind::helpers::Messages> = ::javax_xml_bind_helpers / "Messages";
namespace javax::xml::bind::helpers { class NotIdentifiableEventImpl; }
template<> constexpr auto signature<::javax::xml::bind::helpers::NotIdentifiableEventImpl> = ::javax_xml_bind_helpers / "NotIdentifiableEventImpl";
namespace javax::xml::bind::helpers { class ParseConversionEventImpl; }
template<> constexpr auto signature<::javax::xml::bind::helpers::ParseConversionEventImpl> = ::javax_xml_bind_helpers / "ParseConversionEventImpl";
namespace javax::xml::bind::helpers { class PrintConversionEventImpl; }
template<> constexpr auto signature<::javax::xml::bind::helpers::PrintConversionEventImpl> = ::javax_xml_bind_helpers / "PrintConversionEventImpl";
namespace javax::xml::bind::helpers { class ValidationEventImpl; }
template<> constexpr auto signature<::javax::xml::bind::helpers::ValidationEventImpl> = ::javax_xml_bind_helpers / "ValidationEventImpl";
namespace javax::xml::bind::helpers { class ValidationEventLocatorImpl; }
template<> constexpr auto signature<::javax::xml::bind::helpers::ValidationEventLocatorImpl> = ::javax_xml_bind_helpers / "ValidationEventLocatorImpl";
namespace javax::xml::bind::util { class JAXBResult; }
template<> constexpr auto signature<::javax::xml::bind::util::JAXBResult> = ::javax_xml_bind_util / "JAXBResult";
namespace javax::xml::bind::util { class JAXBSource; }
template<> constexpr auto signature<::javax::xml::bind::util::JAXBSource> = ::javax_xml_bind_util / "JAXBSource";
namespace javax::xml::bind::util { class JAXBSource$1; }
template<> constexpr auto signature<::javax::xml::bind::util::JAXBSource$1> = ::javax_xml_bind_util / "JAXBSource$1";
namespace javax::xml::bind::util { class Messages; }
template<> constexpr auto signature<::javax::xml::bind::util::Messages> = ::javax_xml_bind_util / "Messages";
namespace javax::xml::bind::util { class ValidationEventCollector; }
template<> constexpr auto signature<::javax::xml::bind::util::ValidationEventCollector> = ::javax_xml_bind_util / "ValidationEventCollector";
namespace javax::xml::crypto { class AlgorithmMethod; }
template<> constexpr auto signature<::javax::xml::crypto::AlgorithmMethod> = ::javax_xml_crypto / "AlgorithmMethod";
namespace javax::xml::crypto { class Data; }
template<> constexpr auto signature<::javax::xml::crypto::Data> = ::javax_xml_crypto / "Data";
namespace javax::xml::crypto { class KeySelector; }
template<> constexpr auto signature<::javax::xml::crypto::KeySelector> = ::javax_xml_crypto / "KeySelector";
namespace javax::xml::crypto { class KeySelector$Purpose; }
template<> constexpr auto signature<::javax::xml::crypto::KeySelector$Purpose> = ::javax_xml_crypto / "KeySelector$Purpose";
namespace javax::xml::crypto { class KeySelector$SingletonKeySelector; }
template<> constexpr auto signature<::javax::xml::crypto::KeySelector$SingletonKeySelector> = ::javax_xml_crypto / "KeySelector$SingletonKeySelector";
namespace javax::xml::crypto { class KeySelector$SingletonKeySelector$1; }
template<> constexpr auto signature<::javax::xml::crypto::KeySelector$SingletonKeySelector$1> = ::javax_xml_crypto / "KeySelector$SingletonKeySelector$1";
namespace javax::xml::crypto { class KeySelectorException; }
template<> constexpr auto signature<::javax::xml::crypto::KeySelectorException> = ::javax_xml_crypto / "KeySelectorException";
namespace javax::xml::crypto { class KeySelectorResult; }
template<> constexpr auto signature<::javax::xml::crypto::KeySelectorResult> = ::javax_xml_crypto / "KeySelectorResult";
namespace javax::xml::crypto { class MarshalException; }
template<> constexpr auto signature<::javax::xml::crypto::MarshalException> = ::javax_xml_crypto / "MarshalException";
namespace javax::xml::crypto { class NoSuchMechanismException; }
template<> constexpr auto signature<::javax::xml::crypto::NoSuchMechanismException> = ::javax_xml_crypto / "NoSuchMechanismException";
namespace javax::xml::crypto { class NodeSetData; }
template<> constexpr auto signature<::javax::xml::crypto::NodeSetData> = ::javax_xml_crypto / "NodeSetData";
namespace javax::xml::crypto { class OctetStreamData; }
template<> constexpr auto signature<::javax::xml::crypto::OctetStreamData> = ::javax_xml_crypto / "OctetStreamData";
namespace javax::xml::crypto { class URIDereferencer; }
template<> constexpr auto signature<::javax::xml::crypto::URIDereferencer> = ::javax_xml_crypto / "URIDereferencer";
namespace javax::xml::crypto { class URIReference; }
template<> constexpr auto signature<::javax::xml::crypto::URIReference> = ::javax_xml_crypto / "URIReference";
namespace javax::xml::crypto { class URIReferenceException; }
template<> constexpr auto signature<::javax::xml::crypto::URIReferenceException> = ::javax_xml_crypto / "URIReferenceException";
namespace javax::xml::crypto { class XMLCryptoContext; }
template<> constexpr auto signature<::javax::xml::crypto::XMLCryptoContext> = ::javax_xml_crypto / "XMLCryptoContext";
namespace javax::xml::crypto { class XMLStructure; }
template<> constexpr auto signature<::javax::xml::crypto::XMLStructure> = ::javax_xml_crypto / "XMLStructure";
namespace javax::xml::crypto::dom { class DOMCryptoContext; }
template<> constexpr auto signature<::javax::xml::crypto::dom::DOMCryptoContext> = ::javax_xml_crypto_dom / "DOMCryptoContext";
namespace javax::xml::crypto::dom { class DOMStructure; }
template<> constexpr auto signature<::javax::xml::crypto::dom::DOMStructure> = ::javax_xml_crypto_dom / "DOMStructure";
namespace javax::xml::crypto::dom { class DOMURIReference; }
template<> constexpr auto signature<::javax::xml::crypto::dom::DOMURIReference> = ::javax_xml_crypto_dom / "DOMURIReference";
namespace javax::xml::crypto::dsig { class CanonicalizationMethod; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::CanonicalizationMethod> = ::javax_xml_crypto_dsig / "CanonicalizationMethod";
namespace javax::xml::crypto::dsig { class DigestMethod; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::DigestMethod> = ::javax_xml_crypto_dsig / "DigestMethod";
namespace javax::xml::crypto::dsig { class Manifest; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::Manifest> = ::javax_xml_crypto_dsig / "Manifest";
namespace javax::xml::crypto::dsig { class Reference; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::Reference> = ::javax_xml_crypto_dsig / "Reference";
namespace javax::xml::crypto::dsig { class SignatureMethod; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::SignatureMethod> = ::javax_xml_crypto_dsig / "SignatureMethod";
namespace javax::xml::crypto::dsig { class SignatureProperties; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::SignatureProperties> = ::javax_xml_crypto_dsig / "SignatureProperties";
namespace javax::xml::crypto::dsig { class SignatureProperty; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::SignatureProperty> = ::javax_xml_crypto_dsig / "SignatureProperty";
namespace javax::xml::crypto::dsig { class SignedInfo; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::SignedInfo> = ::javax_xml_crypto_dsig / "SignedInfo";
namespace javax::xml::crypto::dsig { class Transform; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::Transform> = ::javax_xml_crypto_dsig / "Transform";
namespace javax::xml::crypto::dsig { class TransformException; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::TransformException> = ::javax_xml_crypto_dsig / "TransformException";
namespace javax::xml::crypto::dsig { class TransformService; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::TransformService> = ::javax_xml_crypto_dsig / "TransformService";
namespace javax::xml::crypto::dsig { class TransformService$MechanismMapEntry; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::TransformService$MechanismMapEntry> = ::javax_xml_crypto_dsig / "TransformService$MechanismMapEntry";
namespace javax::xml::crypto::dsig { class XMLObject; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::XMLObject> = ::javax_xml_crypto_dsig / "XMLObject";
namespace javax::xml::crypto::dsig { class XMLSignContext; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::XMLSignContext> = ::javax_xml_crypto_dsig / "XMLSignContext";
namespace javax::xml::crypto::dsig { class XMLSignature; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::XMLSignature> = ::javax_xml_crypto_dsig / "XMLSignature";
namespace javax::xml::crypto::dsig { class XMLSignature$SignatureValue; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::XMLSignature$SignatureValue> = ::javax_xml_crypto_dsig / "XMLSignature$SignatureValue";
namespace javax::xml::crypto::dsig { class XMLSignatureException; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::XMLSignatureException> = ::javax_xml_crypto_dsig / "XMLSignatureException";
namespace javax::xml::crypto::dsig { class XMLSignatureFactory; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::XMLSignatureFactory> = ::javax_xml_crypto_dsig / "XMLSignatureFactory";
namespace javax::xml::crypto::dsig { class XMLValidateContext; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::XMLValidateContext> = ::javax_xml_crypto_dsig / "XMLValidateContext";
namespace javax::xml::crypto::dsig::dom { class DOMSignContext; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::dom::DOMSignContext> = ::javax_xml_crypto_dsig_dom / "DOMSignContext";
namespace javax::xml::crypto::dsig::dom { class DOMValidateContext; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::dom::DOMValidateContext> = ::javax_xml_crypto_dsig_dom / "DOMValidateContext";
namespace javax::xml::crypto::dsig::keyinfo { class KeyInfo; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::keyinfo::KeyInfo> = ::javax_xml_crypto_dsig_keyinfo / "KeyInfo";
namespace javax::xml::crypto::dsig::keyinfo { class KeyInfoFactory; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::keyinfo::KeyInfoFactory> = ::javax_xml_crypto_dsig_keyinfo / "KeyInfoFactory";
namespace javax::xml::crypto::dsig::keyinfo { class KeyName; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::keyinfo::KeyName> = ::javax_xml_crypto_dsig_keyinfo / "KeyName";
namespace javax::xml::crypto::dsig::keyinfo { class KeyValue; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::keyinfo::KeyValue> = ::javax_xml_crypto_dsig_keyinfo / "KeyValue";
namespace javax::xml::crypto::dsig::keyinfo { class PGPData; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::keyinfo::PGPData> = ::javax_xml_crypto_dsig_keyinfo / "PGPData";
namespace javax::xml::crypto::dsig::keyinfo { class RetrievalMethod; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::keyinfo::RetrievalMethod> = ::javax_xml_crypto_dsig_keyinfo / "RetrievalMethod";
namespace javax::xml::crypto::dsig::keyinfo { class X509Data; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::keyinfo::X509Data> = ::javax_xml_crypto_dsig_keyinfo / "X509Data";
namespace javax::xml::crypto::dsig::keyinfo { class X509IssuerSerial; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::keyinfo::X509IssuerSerial> = ::javax_xml_crypto_dsig_keyinfo / "X509IssuerSerial";
namespace javax::xml::crypto::dsig::spec { class C14NMethodParameterSpec; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::spec::C14NMethodParameterSpec> = ::javax_xml_crypto_dsig_spec / "C14NMethodParameterSpec";
namespace javax::xml::crypto::dsig::spec { class DigestMethodParameterSpec; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::spec::DigestMethodParameterSpec> = ::javax_xml_crypto_dsig_spec / "DigestMethodParameterSpec";
namespace javax::xml::crypto::dsig::spec { class ExcC14NParameterSpec; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::spec::ExcC14NParameterSpec> = ::javax_xml_crypto_dsig_spec / "ExcC14NParameterSpec";
namespace javax::xml::crypto::dsig::spec { class HMACParameterSpec; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::spec::HMACParameterSpec> = ::javax_xml_crypto_dsig_spec / "HMACParameterSpec";
namespace javax::xml::crypto::dsig::spec { class SignatureMethodParameterSpec; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::spec::SignatureMethodParameterSpec> = ::javax_xml_crypto_dsig_spec / "SignatureMethodParameterSpec";
namespace javax::xml::crypto::dsig::spec { class TransformParameterSpec; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::spec::TransformParameterSpec> = ::javax_xml_crypto_dsig_spec / "TransformParameterSpec";
namespace javax::xml::crypto::dsig::spec { class XPathFilter2ParameterSpec; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::spec::XPathFilter2ParameterSpec> = ::javax_xml_crypto_dsig_spec / "XPathFilter2ParameterSpec";
namespace javax::xml::crypto::dsig::spec { class XPathFilterParameterSpec; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::spec::XPathFilterParameterSpec> = ::javax_xml_crypto_dsig_spec / "XPathFilterParameterSpec";
namespace javax::xml::crypto::dsig::spec { class XPathType; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::spec::XPathType> = ::javax_xml_crypto_dsig_spec / "XPathType";
namespace javax::xml::crypto::dsig::spec { class XPathType$Filter; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::spec::XPathType$Filter> = ::javax_xml_crypto_dsig_spec / "XPathType$Filter";
namespace javax::xml::crypto::dsig::spec { class XSLTTransformParameterSpec; }
template<> constexpr auto signature<::javax::xml::crypto::dsig::spec::XSLTTransformParameterSpec> = ::javax_xml_crypto_dsig_spec / "XSLTTransformParameterSpec";
namespace javax::xml::datatype { class DatatypeConfigurationException; }
template<> constexpr auto signature<::javax::xml::datatype::DatatypeConfigurationException> = ::javax_xml_datatype / "DatatypeConfigurationException";
namespace javax::xml::datatype { class DatatypeConstants; }
template<> constexpr auto signature<::javax::xml::datatype::DatatypeConstants> = ::javax_xml_datatype / "DatatypeConstants";
namespace javax::xml::datatype { class DatatypeConstants$1; }
template<> constexpr auto signature<::javax::xml::datatype::DatatypeConstants$1> = ::javax_xml_datatype / "DatatypeConstants$1";
namespace javax::xml::datatype { class DatatypeConstants$Field; }
template<> constexpr auto signature<::javax::xml::datatype::DatatypeConstants$Field> = ::javax_xml_datatype / "DatatypeConstants$Field";
namespace javax::xml::datatype { class DatatypeFactory; }
template<> constexpr auto signature<::javax::xml::datatype::DatatypeFactory> = ::javax_xml_datatype / "DatatypeFactory";
namespace javax::xml::datatype { class Duration; }
template<> constexpr auto signature<::javax::xml::datatype::Duration> = ::javax_xml_datatype / "Duration";
namespace javax::xml::datatype { class FactoryFinder; }
template<> constexpr auto signature<::javax::xml::datatype::FactoryFinder> = ::javax_xml_datatype / "FactoryFinder";
namespace javax::xml::datatype { class FactoryFinder$1; }
template<> constexpr auto signature<::javax::xml::datatype::FactoryFinder$1> = ::javax_xml_datatype / "FactoryFinder$1";
namespace javax::xml::datatype { class SecuritySupport; }
template<> constexpr auto signature<::javax::xml::datatype::SecuritySupport> = ::javax_xml_datatype / "SecuritySupport";
namespace javax::xml::datatype { class SecuritySupport$1; }
template<> constexpr auto signature<::javax::xml::datatype::SecuritySupport$1> = ::javax_xml_datatype / "SecuritySupport$1";
namespace javax::xml::datatype { class SecuritySupport$2; }
template<> constexpr auto signature<::javax::xml::datatype::SecuritySupport$2> = ::javax_xml_datatype / "SecuritySupport$2";
namespace javax::xml::datatype { class SecuritySupport$3; }
template<> constexpr auto signature<::javax::xml::datatype::SecuritySupport$3> = ::javax_xml_datatype / "SecuritySupport$3";
namespace javax::xml::datatype { class SecuritySupport$4; }
template<> constexpr auto signature<::javax::xml::datatype::SecuritySupport$4> = ::javax_xml_datatype / "SecuritySupport$4";
namespace javax::xml::datatype { class SecuritySupport$5; }
template<> constexpr auto signature<::javax::xml::datatype::SecuritySupport$5> = ::javax_xml_datatype / "SecuritySupport$5";
namespace javax::xml::datatype { class XMLGregorianCalendar; }
template<> constexpr auto signature<::javax::xml::datatype::XMLGregorianCalendar> = ::javax_xml_datatype / "XMLGregorianCalendar";
namespace javax::xml::namespace_ { class NamespaceContext; }
template<> constexpr auto signature<::javax::xml::namespace_::NamespaceContext> = ::javax_xml_namespace_ / "NamespaceContext";
namespace javax::xml::namespace_ { class QName; }
template<> constexpr auto signature<::javax::xml::namespace_::QName> = ::javax_xml_namespace_ / "QName";
namespace javax::xml::namespace_ { class QName$1; }
template<> constexpr auto signature<::javax::xml::namespace_::QName$1> = ::javax_xml_namespace_ / "QName$1";
namespace javax::xml::parsers { class DocumentBuilder; }
template<> constexpr auto signature<::javax::xml::parsers::DocumentBuilder> = ::javax_xml_parsers / "DocumentBuilder";
namespace javax::xml::parsers { class DocumentBuilderFactory; }
template<> constexpr auto signature<::javax::xml::parsers::DocumentBuilderFactory> = ::javax_xml_parsers / "DocumentBuilderFactory";
namespace javax::xml::parsers { class FactoryConfigurationError; }
template<> constexpr auto signature<::javax::xml::parsers::FactoryConfigurationError> = ::javax_xml_parsers / "FactoryConfigurationError";
namespace javax::xml::parsers { class FactoryFinder; }
template<> constexpr auto signature<::javax::xml::parsers::FactoryFinder> = ::javax_xml_parsers / "FactoryFinder";
namespace javax::xml::parsers { class FactoryFinder$1; }
template<> constexpr auto signature<::javax::xml::parsers::FactoryFinder$1> = ::javax_xml_parsers / "FactoryFinder$1";
namespace javax::xml::parsers { class ParserConfigurationException; }
template<> constexpr auto signature<::javax::xml::parsers::ParserConfigurationException> = ::javax_xml_parsers / "ParserConfigurationException";
namespace javax::xml::parsers { class SAXParser; }
template<> constexpr auto signature<::javax::xml::parsers::SAXParser> = ::javax_xml_parsers / "SAXParser";
namespace javax::xml::parsers { class SAXParserFactory; }
template<> constexpr auto signature<::javax::xml::parsers::SAXParserFactory> = ::javax_xml_parsers / "SAXParserFactory";
namespace javax::xml::parsers { class SecuritySupport; }
template<> constexpr auto signature<::javax::xml::parsers::SecuritySupport> = ::javax_xml_parsers / "SecuritySupport";
namespace javax::xml::parsers { class SecuritySupport$1; }
template<> constexpr auto signature<::javax::xml::parsers::SecuritySupport$1> = ::javax_xml_parsers / "SecuritySupport$1";
namespace javax::xml::parsers { class SecuritySupport$2; }
template<> constexpr auto signature<::javax::xml::parsers::SecuritySupport$2> = ::javax_xml_parsers / "SecuritySupport$2";
namespace javax::xml::parsers { class SecuritySupport$3; }
template<> constexpr auto signature<::javax::xml::parsers::SecuritySupport$3> = ::javax_xml_parsers / "SecuritySupport$3";
namespace javax::xml::parsers { class SecuritySupport$4; }
template<> constexpr auto signature<::javax::xml::parsers::SecuritySupport$4> = ::javax_xml_parsers / "SecuritySupport$4";
namespace javax::xml::parsers { class SecuritySupport$5; }
template<> constexpr auto signature<::javax::xml::parsers::SecuritySupport$5> = ::javax_xml_parsers / "SecuritySupport$5";
namespace javax::xml::soap { class AttachmentPart; }
template<> constexpr auto signature<::javax::xml::soap::AttachmentPart> = ::javax_xml_soap / "AttachmentPart";
namespace javax::xml::soap { class Detail; }
template<> constexpr auto signature<::javax::xml::soap::Detail> = ::javax_xml_soap / "Detail";
namespace javax::xml::soap { class DetailEntry; }
template<> constexpr auto signature<::javax::xml::soap::DetailEntry> = ::javax_xml_soap / "DetailEntry";
namespace javax::xml::soap { class FactoryFinder; }
template<> constexpr auto signature<::javax::xml::soap::FactoryFinder> = ::javax_xml_soap / "FactoryFinder";
namespace javax::xml::soap { class MessageFactory; }
template<> constexpr auto signature<::javax::xml::soap::MessageFactory> = ::javax_xml_soap / "MessageFactory";
namespace javax::xml::soap { class MimeHeader; }
template<> constexpr auto signature<::javax::xml::soap::MimeHeader> = ::javax_xml_soap / "MimeHeader";
namespace javax::xml::soap { class MimeHeaders; }
template<> constexpr auto signature<::javax::xml::soap::MimeHeaders> = ::javax_xml_soap / "MimeHeaders";
namespace javax::xml::soap { class MimeHeaders$MatchingIterator; }
template<> constexpr auto signature<::javax::xml::soap::MimeHeaders$MatchingIterator> = ::javax_xml_soap / "MimeHeaders$MatchingIterator";
namespace javax::xml::soap { class Name; }
template<> constexpr auto signature<::javax::xml::soap::Name> = ::javax_xml_soap / "Name";
namespace javax::xml::soap { class Node; }
template<> constexpr auto signature<::javax::xml::soap::Node> = ::javax_xml_soap / "Node";
namespace javax::xml::soap { class SAAJMetaFactory; }
template<> constexpr auto signature<::javax::xml::soap::SAAJMetaFactory> = ::javax_xml_soap / "SAAJMetaFactory";
namespace javax::xml::soap { class SAAJResult; }
template<> constexpr auto signature<::javax::xml::soap::SAAJResult> = ::javax_xml_soap / "SAAJResult";
namespace javax::xml::soap { class SOAPBody; }
template<> constexpr auto signature<::javax::xml::soap::SOAPBody> = ::javax_xml_soap / "SOAPBody";
namespace javax::xml::soap { class SOAPBodyElement; }
template<> constexpr auto signature<::javax::xml::soap::SOAPBodyElement> = ::javax_xml_soap / "SOAPBodyElement";
namespace javax::xml::soap { class SOAPConnection; }
template<> constexpr auto signature<::javax::xml::soap::SOAPConnection> = ::javax_xml_soap / "SOAPConnection";
namespace javax::xml::soap { class SOAPConnectionFactory; }
template<> constexpr auto signature<::javax::xml::soap::SOAPConnectionFactory> = ::javax_xml_soap / "SOAPConnectionFactory";
namespace javax::xml::soap { class SOAPConstants; }
template<> constexpr auto signature<::javax::xml::soap::SOAPConstants> = ::javax_xml_soap / "SOAPConstants";
namespace javax::xml::soap { class SOAPElement; }
template<> constexpr auto signature<::javax::xml::soap::SOAPElement> = ::javax_xml_soap / "SOAPElement";
namespace javax::xml::soap { class SOAPElementFactory; }
template<> constexpr auto signature<::javax::xml::soap::SOAPElementFactory> = ::javax_xml_soap / "SOAPElementFactory";
namespace javax::xml::soap { class SOAPEnvelope; }
template<> constexpr auto signature<::javax::xml::soap::SOAPEnvelope> = ::javax_xml_soap / "SOAPEnvelope";
namespace javax::xml::soap { class SOAPException; }
template<> constexpr auto signature<::javax::xml::soap::SOAPException> = ::javax_xml_soap / "SOAPException";
namespace javax::xml::soap { class SOAPFactory; }
template<> constexpr auto signature<::javax::xml::soap::SOAPFactory> = ::javax_xml_soap / "SOAPFactory";
namespace javax::xml::soap { class SOAPFault; }
template<> constexpr auto signature<::javax::xml::soap::SOAPFault> = ::javax_xml_soap / "SOAPFault";
namespace javax::xml::soap { class SOAPFaultElement; }
template<> constexpr auto signature<::javax::xml::soap::SOAPFaultElement> = ::javax_xml_soap / "SOAPFaultElement";
namespace javax::xml::soap { class SOAPHeader; }
template<> constexpr auto signature<::javax::xml::soap::SOAPHeader> = ::javax_xml_soap / "SOAPHeader";
namespace javax::xml::soap { class SOAPHeaderElement; }
template<> constexpr auto signature<::javax::xml::soap::SOAPHeaderElement> = ::javax_xml_soap / "SOAPHeaderElement";
namespace javax::xml::soap { class SOAPMessage; }
template<> constexpr auto signature<::javax::xml::soap::SOAPMessage> = ::javax_xml_soap / "SOAPMessage";
namespace javax::xml::soap { class SOAPPart; }
template<> constexpr auto signature<::javax::xml::soap::SOAPPart> = ::javax_xml_soap / "SOAPPart";
namespace javax::xml::soap { class Text; }
template<> constexpr auto signature<::javax::xml::soap::Text> = ::javax_xml_soap / "Text";
namespace javax::xml::stream { class EventFilter; }
template<> constexpr auto signature<::javax::xml::stream::EventFilter> = ::javax_xml_stream / "EventFilter";
namespace javax::xml::stream { class FactoryConfigurationError; }
template<> constexpr auto signature<::javax::xml::stream::FactoryConfigurationError> = ::javax_xml_stream / "FactoryConfigurationError";
namespace javax::xml::stream { class FactoryFinder; }
template<> constexpr auto signature<::javax::xml::stream::FactoryFinder> = ::javax_xml_stream / "FactoryFinder";
namespace javax::xml::stream { class FactoryFinder$1; }
template<> constexpr auto signature<::javax::xml::stream::FactoryFinder$1> = ::javax_xml_stream / "FactoryFinder$1";
namespace javax::xml::stream { class Location; }
template<> constexpr auto signature<::javax::xml::stream::Location> = ::javax_xml_stream / "Location";
namespace javax::xml::stream { class SecuritySupport; }
template<> constexpr auto signature<::javax::xml::stream::SecuritySupport> = ::javax_xml_stream / "SecuritySupport";
namespace javax::xml::stream { class SecuritySupport$1; }
template<> constexpr auto signature<::javax::xml::stream::SecuritySupport$1> = ::javax_xml_stream / "SecuritySupport$1";
namespace javax::xml::stream { class SecuritySupport$2; }
template<> constexpr auto signature<::javax::xml::stream::SecuritySupport$2> = ::javax_xml_stream / "SecuritySupport$2";
namespace javax::xml::stream { class SecuritySupport$3; }
template<> constexpr auto signature<::javax::xml::stream::SecuritySupport$3> = ::javax_xml_stream / "SecuritySupport$3";
namespace javax::xml::stream { class SecuritySupport$4; }
template<> constexpr auto signature<::javax::xml::stream::SecuritySupport$4> = ::javax_xml_stream / "SecuritySupport$4";
namespace javax::xml::stream { class SecuritySupport$5; }
template<> constexpr auto signature<::javax::xml::stream::SecuritySupport$5> = ::javax_xml_stream / "SecuritySupport$5";
namespace javax::xml::stream { class StreamFilter; }
template<> constexpr auto signature<::javax::xml::stream::StreamFilter> = ::javax_xml_stream / "StreamFilter";
namespace javax::xml::stream { class XMLEventFactory; }
template<> constexpr auto signature<::javax::xml::stream::XMLEventFactory> = ::javax_xml_stream / "XMLEventFactory";
namespace javax::xml::stream { class XMLEventReader; }
template<> constexpr auto signature<::javax::xml::stream::XMLEventReader> = ::javax_xml_stream / "XMLEventReader";
namespace javax::xml::stream { class XMLEventWriter; }
template<> constexpr auto signature<::javax::xml::stream::XMLEventWriter> = ::javax_xml_stream / "XMLEventWriter";
namespace javax::xml::stream { class XMLInputFactory; }
template<> constexpr auto signature<::javax::xml::stream::XMLInputFactory> = ::javax_xml_stream / "XMLInputFactory";
namespace javax::xml::stream { class XMLOutputFactory; }
template<> constexpr auto signature<::javax::xml::stream::XMLOutputFactory> = ::javax_xml_stream / "XMLOutputFactory";
namespace javax::xml::stream { class XMLReporter; }
template<> constexpr auto signature<::javax::xml::stream::XMLReporter> = ::javax_xml_stream / "XMLReporter";
namespace javax::xml::stream { class XMLResolver; }
template<> constexpr auto signature<::javax::xml::stream::XMLResolver> = ::javax_xml_stream / "XMLResolver";
namespace javax::xml::stream { class XMLStreamConstants; }
template<> constexpr auto signature<::javax::xml::stream::XMLStreamConstants> = ::javax_xml_stream / "XMLStreamConstants";
namespace javax::xml::stream { class XMLStreamException; }
template<> constexpr auto signature<::javax::xml::stream::XMLStreamException> = ::javax_xml_stream / "XMLStreamException";
namespace javax::xml::stream { class XMLStreamReader; }
template<> constexpr auto signature<::javax::xml::stream::XMLStreamReader> = ::javax_xml_stream / "XMLStreamReader";
namespace javax::xml::stream { class XMLStreamWriter; }
template<> constexpr auto signature<::javax::xml::stream::XMLStreamWriter> = ::javax_xml_stream / "XMLStreamWriter";
namespace javax::xml::stream::events { class Attribute; }
template<> constexpr auto signature<::javax::xml::stream::events::Attribute> = ::javax_xml_stream_events / "Attribute";
namespace javax::xml::stream::events { class Characters; }
template<> constexpr auto signature<::javax::xml::stream::events::Characters> = ::javax_xml_stream_events / "Characters";
namespace javax::xml::stream::events { class Comment; }
template<> constexpr auto signature<::javax::xml::stream::events::Comment> = ::javax_xml_stream_events / "Comment";
namespace javax::xml::stream::events { class DTD; }
template<> constexpr auto signature<::javax::xml::stream::events::DTD> = ::javax_xml_stream_events / "DTD";
namespace javax::xml::stream::events { class EndDocument; }
template<> constexpr auto signature<::javax::xml::stream::events::EndDocument> = ::javax_xml_stream_events / "EndDocument";
namespace javax::xml::stream::events { class EndElement; }
template<> constexpr auto signature<::javax::xml::stream::events::EndElement> = ::javax_xml_stream_events / "EndElement";
namespace javax::xml::stream::events { class EntityDeclaration; }
template<> constexpr auto signature<::javax::xml::stream::events::EntityDeclaration> = ::javax_xml_stream_events / "EntityDeclaration";
namespace javax::xml::stream::events { class EntityReference; }
template<> constexpr auto signature<::javax::xml::stream::events::EntityReference> = ::javax_xml_stream_events / "EntityReference";
namespace javax::xml::stream::events { class Namespace; }
template<> constexpr auto signature<::javax::xml::stream::events::Namespace> = ::javax_xml_stream_events / "Namespace";
namespace javax::xml::stream::events { class NotationDeclaration; }
template<> constexpr auto signature<::javax::xml::stream::events::NotationDeclaration> = ::javax_xml_stream_events / "NotationDeclaration";
namespace javax::xml::stream::events { class ProcessingInstruction; }
template<> constexpr auto signature<::javax::xml::stream::events::ProcessingInstruction> = ::javax_xml_stream_events / "ProcessingInstruction";
namespace javax::xml::stream::events { class StartDocument; }
template<> constexpr auto signature<::javax::xml::stream::events::StartDocument> = ::javax_xml_stream_events / "StartDocument";
namespace javax::xml::stream::events { class StartElement; }
template<> constexpr auto signature<::javax::xml::stream::events::StartElement> = ::javax_xml_stream_events / "StartElement";
namespace javax::xml::stream::events { class XMLEvent; }
template<> constexpr auto signature<::javax::xml::stream::events::XMLEvent> = ::javax_xml_stream_events / "XMLEvent";
namespace javax::xml::stream::util { class EventReaderDelegate; }
template<> constexpr auto signature<::javax::xml::stream::util::EventReaderDelegate> = ::javax_xml_stream_util / "EventReaderDelegate";
namespace javax::xml::stream::util { class StreamReaderDelegate; }
template<> constexpr auto signature<::javax::xml::stream::util::StreamReaderDelegate> = ::javax_xml_stream_util / "StreamReaderDelegate";
namespace javax::xml::stream::util { class XMLEventAllocator; }
template<> constexpr auto signature<::javax::xml::stream::util::XMLEventAllocator> = ::javax_xml_stream_util / "XMLEventAllocator";
namespace javax::xml::stream::util { class XMLEventConsumer; }
template<> constexpr auto signature<::javax::xml::stream::util::XMLEventConsumer> = ::javax_xml_stream_util / "XMLEventConsumer";
namespace javax::xml::transform { class ErrorListener; }
template<> constexpr auto signature<::javax::xml::transform::ErrorListener> = ::javax_xml_transform / "ErrorListener";
namespace javax::xml::transform { class FactoryFinder; }
template<> constexpr auto signature<::javax::xml::transform::FactoryFinder> = ::javax_xml_transform / "FactoryFinder";
namespace javax::xml::transform { class FactoryFinder$1; }
template<> constexpr auto signature<::javax::xml::transform::FactoryFinder$1> = ::javax_xml_transform / "FactoryFinder$1";
namespace javax::xml::transform { class OutputKeys; }
template<> constexpr auto signature<::javax::xml::transform::OutputKeys> = ::javax_xml_transform / "OutputKeys";
namespace javax::xml::transform { class Result; }
template<> constexpr auto signature<::javax::xml::transform::Result> = ::javax_xml_transform / "Result";
namespace javax::xml::transform { class SecuritySupport; }
template<> constexpr auto signature<::javax::xml::transform::SecuritySupport> = ::javax_xml_transform / "SecuritySupport";
namespace javax::xml::transform { class SecuritySupport$1; }
template<> constexpr auto signature<::javax::xml::transform::SecuritySupport$1> = ::javax_xml_transform / "SecuritySupport$1";
namespace javax::xml::transform { class SecuritySupport$2; }
template<> constexpr auto signature<::javax::xml::transform::SecuritySupport$2> = ::javax_xml_transform / "SecuritySupport$2";
namespace javax::xml::transform { class SecuritySupport$3; }
template<> constexpr auto signature<::javax::xml::transform::SecuritySupport$3> = ::javax_xml_transform / "SecuritySupport$3";
namespace javax::xml::transform { class SecuritySupport$4; }
template<> constexpr auto signature<::javax::xml::transform::SecuritySupport$4> = ::javax_xml_transform / "SecuritySupport$4";
namespace javax::xml::transform { class SecuritySupport$5; }
template<> constexpr auto signature<::javax::xml::transform::SecuritySupport$5> = ::javax_xml_transform / "SecuritySupport$5";
namespace javax::xml::transform { class Source; }
template<> constexpr auto signature<::javax::xml::transform::Source> = ::javax_xml_transform / "Source";
namespace javax::xml::transform { class SourceLocator; }
template<> constexpr auto signature<::javax::xml::transform::SourceLocator> = ::javax_xml_transform / "SourceLocator";
namespace javax::xml::transform { class Templates; }
template<> constexpr auto signature<::javax::xml::transform::Templates> = ::javax_xml_transform / "Templates";
namespace javax::xml::transform { class Transformer; }
template<> constexpr auto signature<::javax::xml::transform::Transformer> = ::javax_xml_transform / "Transformer";
namespace javax::xml::transform { class TransformerConfigurationException; }
template<> constexpr auto signature<::javax::xml::transform::TransformerConfigurationException> = ::javax_xml_transform / "TransformerConfigurationException";
namespace javax::xml::transform { class TransformerException; }
template<> constexpr auto signature<::javax::xml::transform::TransformerException> = ::javax_xml_transform / "TransformerException";
namespace javax::xml::transform { class TransformerException$1; }
template<> constexpr auto signature<::javax::xml::transform::TransformerException$1> = ::javax_xml_transform / "TransformerException$1";
namespace javax::xml::transform { class TransformerFactory; }
template<> constexpr auto signature<::javax::xml::transform::TransformerFactory> = ::javax_xml_transform / "TransformerFactory";
namespace javax::xml::transform { class TransformerFactoryConfigurationError; }
template<> constexpr auto signature<::javax::xml::transform::TransformerFactoryConfigurationError> = ::javax_xml_transform / "TransformerFactoryConfigurationError";
namespace javax::xml::transform { class URIResolver; }
template<> constexpr auto signature<::javax::xml::transform::URIResolver> = ::javax_xml_transform / "URIResolver";
namespace javax::xml::transform::dom { class DOMLocator; }
template<> constexpr auto signature<::javax::xml::transform::dom::DOMLocator> = ::javax_xml_transform_dom / "DOMLocator";
namespace javax::xml::transform::dom { class DOMResult; }
template<> constexpr auto signature<::javax::xml::transform::dom::DOMResult> = ::javax_xml_transform_dom / "DOMResult";
namespace javax::xml::transform::dom { class DOMSource; }
template<> constexpr auto signature<::javax::xml::transform::dom::DOMSource> = ::javax_xml_transform_dom / "DOMSource";
namespace javax::xml::transform::sax { class SAXResult; }
template<> constexpr auto signature<::javax::xml::transform::sax::SAXResult> = ::javax_xml_transform_sax / "SAXResult";
namespace javax::xml::transform::sax { class SAXSource; }
template<> constexpr auto signature<::javax::xml::transform::sax::SAXSource> = ::javax_xml_transform_sax / "SAXSource";
namespace javax::xml::transform::sax { class SAXTransformerFactory; }
template<> constexpr auto signature<::javax::xml::transform::sax::SAXTransformerFactory> = ::javax_xml_transform_sax / "SAXTransformerFactory";
namespace javax::xml::transform::sax { class TemplatesHandler; }
template<> constexpr auto signature<::javax::xml::transform::sax::TemplatesHandler> = ::javax_xml_transform_sax / "TemplatesHandler";
namespace javax::xml::transform::sax { class TransformerHandler; }
template<> constexpr auto signature<::javax::xml::transform::sax::TransformerHandler> = ::javax_xml_transform_sax / "TransformerHandler";
namespace javax::xml::transform::stax { class StAXResult; }
template<> constexpr auto signature<::javax::xml::transform::stax::StAXResult> = ::javax_xml_transform_stax / "StAXResult";
namespace javax::xml::transform::stax { class StAXSource; }
template<> constexpr auto signature<::javax::xml::transform::stax::StAXSource> = ::javax_xml_transform_stax / "StAXSource";
namespace javax::xml::transform::stream { class StreamResult; }
template<> constexpr auto signature<::javax::xml::transform::stream::StreamResult> = ::javax_xml_transform_stream / "StreamResult";
namespace javax::xml::transform::stream { class StreamSource; }
template<> constexpr auto signature<::javax::xml::transform::stream::StreamSource> = ::javax_xml_transform_stream / "StreamSource";
namespace javax::xml::validation { class Schema; }
template<> constexpr auto signature<::javax::xml::validation::Schema> = ::javax_xml_validation / "Schema";
namespace javax::xml::validation { class SchemaFactory; }
template<> constexpr auto signature<::javax::xml::validation::SchemaFactory> = ::javax_xml_validation / "SchemaFactory";
namespace javax::xml::validation { class SchemaFactoryConfigurationError; }
template<> constexpr auto signature<::javax::xml::validation::SchemaFactoryConfigurationError> = ::javax_xml_validation / "SchemaFactoryConfigurationError";
namespace javax::xml::validation { class SchemaFactoryFinder; }
template<> constexpr auto signature<::javax::xml::validation::SchemaFactoryFinder> = ::javax_xml_validation / "SchemaFactoryFinder";
namespace javax::xml::validation { class SchemaFactoryFinder$1; }
template<> constexpr auto signature<::javax::xml::validation::SchemaFactoryFinder$1> = ::javax_xml_validation / "SchemaFactoryFinder$1";
namespace javax::xml::validation { class SchemaFactoryFinder$2; }
template<> constexpr auto signature<::javax::xml::validation::SchemaFactoryFinder$2> = ::javax_xml_validation / "SchemaFactoryFinder$2";
namespace javax::xml::validation { class SchemaFactoryLoader; }
template<> constexpr auto signature<::javax::xml::validation::SchemaFactoryLoader> = ::javax_xml_validation / "SchemaFactoryLoader";
namespace javax::xml::validation { class SecuritySupport; }
template<> constexpr auto signature<::javax::xml::validation::SecuritySupport> = ::javax_xml_validation / "SecuritySupport";
namespace javax::xml::validation { class SecuritySupport$1; }
template<> constexpr auto signature<::javax::xml::validation::SecuritySupport$1> = ::javax_xml_validation / "SecuritySupport$1";
namespace javax::xml::validation { class SecuritySupport$2; }
template<> constexpr auto signature<::javax::xml::validation::SecuritySupport$2> = ::javax_xml_validation / "SecuritySupport$2";
namespace javax::xml::validation { class SecuritySupport$3; }
template<> constexpr auto signature<::javax::xml::validation::SecuritySupport$3> = ::javax_xml_validation / "SecuritySupport$3";
namespace javax::xml::validation { class SecuritySupport$4; }
template<> constexpr auto signature<::javax::xml::validation::SecuritySupport$4> = ::javax_xml_validation / "SecuritySupport$4";
namespace javax::xml::validation { class SecuritySupport$5; }
template<> constexpr auto signature<::javax::xml::validation::SecuritySupport$5> = ::javax_xml_validation / "SecuritySupport$5";
namespace javax::xml::validation { class SecuritySupport$6; }
template<> constexpr auto signature<::javax::xml::validation::SecuritySupport$6> = ::javax_xml_validation / "SecuritySupport$6";
namespace javax::xml::validation { class SecuritySupport$7; }
template<> constexpr auto signature<::javax::xml::validation::SecuritySupport$7> = ::javax_xml_validation / "SecuritySupport$7";
namespace javax::xml::validation { class SecuritySupport$8; }
template<> constexpr auto signature<::javax::xml::validation::SecuritySupport$8> = ::javax_xml_validation / "SecuritySupport$8";
namespace javax::xml::validation { class TypeInfoProvider; }
template<> constexpr auto signature<::javax::xml::validation::TypeInfoProvider> = ::javax_xml_validation / "TypeInfoProvider";
namespace javax::xml::validation { class Validator; }
template<> constexpr auto signature<::javax::xml::validation::Validator> = ::javax_xml_validation / "Validator";
namespace javax::xml::validation { class ValidatorHandler; }
template<> constexpr auto signature<::javax::xml::validation::ValidatorHandler> = ::javax_xml_validation / "ValidatorHandler";
namespace javax::xml::ws { class Action; }
template<> constexpr auto signature<::javax::xml::ws::Action> = ::javax_xml_ws / "Action";
namespace javax::xml::ws { class AsyncHandler; }
template<> constexpr auto signature<::javax::xml::ws::AsyncHandler> = ::javax_xml_ws / "AsyncHandler";
namespace javax::xml::ws { class Binding; }
template<> constexpr auto signature<::javax::xml::ws::Binding> = ::javax_xml_ws / "Binding";
namespace javax::xml::ws { class BindingProvider; }
template<> constexpr auto signature<::javax::xml::ws::BindingProvider> = ::javax_xml_ws / "BindingProvider";
namespace javax::xml::ws { class BindingType; }
template<> constexpr auto signature<::javax::xml::ws::BindingType> = ::javax_xml_ws / "BindingType";
namespace javax::xml::ws { class Dispatch; }
template<> constexpr auto signature<::javax::xml::ws::Dispatch> = ::javax_xml_ws / "Dispatch";
namespace javax::xml::ws { class Endpoint; }
template<> constexpr auto signature<::javax::xml::ws::Endpoint> = ::javax_xml_ws / "Endpoint";
namespace javax::xml::ws { class EndpointContext; }
template<> constexpr auto signature<::javax::xml::ws::EndpointContext> = ::javax_xml_ws / "EndpointContext";
namespace javax::xml::ws { class EndpointReference; }
template<> constexpr auto signature<::javax::xml::ws::EndpointReference> = ::javax_xml_ws / "EndpointReference";
namespace javax::xml::ws { class FaultAction; }
template<> constexpr auto signature<::javax::xml::ws::FaultAction> = ::javax_xml_ws / "FaultAction";
namespace javax::xml::ws { class Holder; }
template<> constexpr auto signature<::javax::xml::ws::Holder> = ::javax_xml_ws / "Holder";
namespace javax::xml::ws { class LogicalMessage; }
template<> constexpr auto signature<::javax::xml::ws::LogicalMessage> = ::javax_xml_ws / "LogicalMessage";
namespace javax::xml::ws { class ProtocolException; }
template<> constexpr auto signature<::javax::xml::ws::ProtocolException> = ::javax_xml_ws / "ProtocolException";
namespace javax::xml::ws { class Provider; }
template<> constexpr auto signature<::javax::xml::ws::Provider> = ::javax_xml_ws / "Provider";
namespace javax::xml::ws { class RequestWrapper; }
template<> constexpr auto signature<::javax::xml::ws::RequestWrapper> = ::javax_xml_ws / "RequestWrapper";
namespace javax::xml::ws { class RespectBinding; }
template<> constexpr auto signature<::javax::xml::ws::RespectBinding> = ::javax_xml_ws / "RespectBinding";
namespace javax::xml::ws { class RespectBindingFeature; }
template<> constexpr auto signature<::javax::xml::ws::RespectBindingFeature> = ::javax_xml_ws / "RespectBindingFeature";
namespace javax::xml::ws { class Response; }
template<> constexpr auto signature<::javax::xml::ws::Response> = ::javax_xml_ws / "Response";
namespace javax::xml::ws { class ResponseWrapper; }
template<> constexpr auto signature<::javax::xml::ws::ResponseWrapper> = ::javax_xml_ws / "ResponseWrapper";
namespace javax::xml::ws { class Service; }
template<> constexpr auto signature<::javax::xml::ws::Service> = ::javax_xml_ws / "Service";
namespace javax::xml::ws { class Service$Mode; }
template<> constexpr auto signature<::javax::xml::ws::Service$Mode> = ::javax_xml_ws / "Service$Mode";
namespace javax::xml::ws { class ServiceMode; }
template<> constexpr auto signature<::javax::xml::ws::ServiceMode> = ::javax_xml_ws / "ServiceMode";
namespace javax::xml::ws { class WebEndpoint; }
template<> constexpr auto signature<::javax::xml::ws::WebEndpoint> = ::javax_xml_ws / "WebEndpoint";
namespace javax::xml::ws { class WebFault; }
template<> constexpr auto signature<::javax::xml::ws::WebFault> = ::javax_xml_ws / "WebFault";
namespace javax::xml::ws { class WebServiceClient; }
template<> constexpr auto signature<::javax::xml::ws::WebServiceClient> = ::javax_xml_ws / "WebServiceClient";
namespace javax::xml::ws { class WebServiceContext; }
template<> constexpr auto signature<::javax::xml::ws::WebServiceContext> = ::javax_xml_ws / "WebServiceContext";
namespace javax::xml::ws { class WebServiceException; }
template<> constexpr auto signature<::javax::xml::ws::WebServiceException> = ::javax_xml_ws / "WebServiceException";
namespace javax::xml::ws { class WebServiceFeature; }
template<> constexpr auto signature<::javax::xml::ws::WebServiceFeature> = ::javax_xml_ws / "WebServiceFeature";
namespace javax::xml::ws { class WebServicePermission; }
template<> constexpr auto signature<::javax::xml::ws::WebServicePermission> = ::javax_xml_ws / "WebServicePermission";
namespace javax::xml::ws { class WebServiceProvider; }
template<> constexpr auto signature<::javax::xml::ws::WebServiceProvider> = ::javax_xml_ws / "WebServiceProvider";
namespace javax::xml::ws { class WebServiceRef; }
template<> constexpr auto signature<::javax::xml::ws::WebServiceRef> = ::javax_xml_ws / "WebServiceRef";
namespace javax::xml::ws { class WebServiceRefs; }
template<> constexpr auto signature<::javax::xml::ws::WebServiceRefs> = ::javax_xml_ws / "WebServiceRefs";
namespace javax::xml::ws::handler { class Handler; }
template<> constexpr auto signature<::javax::xml::ws::handler::Handler> = ::javax_xml_ws_handler / "Handler";
namespace javax::xml::ws::handler { class HandlerResolver; }
template<> constexpr auto signature<::javax::xml::ws::handler::HandlerResolver> = ::javax_xml_ws_handler / "HandlerResolver";
namespace javax::xml::ws::handler { class LogicalHandler; }
template<> constexpr auto signature<::javax::xml::ws::handler::LogicalHandler> = ::javax_xml_ws_handler / "LogicalHandler";
namespace javax::xml::ws::handler { class LogicalMessageContext; }
template<> constexpr auto signature<::javax::xml::ws::handler::LogicalMessageContext> = ::javax_xml_ws_handler / "LogicalMessageContext";
namespace javax::xml::ws::handler { class MessageContext; }
template<> constexpr auto signature<::javax::xml::ws::handler::MessageContext> = ::javax_xml_ws_handler / "MessageContext";
namespace javax::xml::ws::handler { class MessageContext$Scope; }
template<> constexpr auto signature<::javax::xml::ws::handler::MessageContext$Scope> = ::javax_xml_ws_handler / "MessageContext$Scope";
namespace javax::xml::ws::handler { class PortInfo; }
template<> constexpr auto signature<::javax::xml::ws::handler::PortInfo> = ::javax_xml_ws_handler / "PortInfo";
namespace javax::xml::ws::handler::soap { class SOAPHandler; }
template<> constexpr auto signature<::javax::xml::ws::handler::soap::SOAPHandler> = ::javax_xml_ws_handler_soap / "SOAPHandler";
namespace javax::xml::ws::handler::soap { class SOAPMessageContext; }
template<> constexpr auto signature<::javax::xml::ws::handler::soap::SOAPMessageContext> = ::javax_xml_ws_handler_soap / "SOAPMessageContext";
namespace javax::xml::ws::http { class HTTPBinding; }
template<> constexpr auto signature<::javax::xml::ws::http::HTTPBinding> = ::javax_xml_ws_http / "HTTPBinding";
namespace javax::xml::ws::http { class HTTPException; }
template<> constexpr auto signature<::javax::xml::ws::http::HTTPException> = ::javax_xml_ws_http / "HTTPException";
namespace javax::xml::ws::soap { class Addressing; }
template<> constexpr auto signature<::javax::xml::ws::soap::Addressing> = ::javax_xml_ws_soap / "Addressing";
namespace javax::xml::ws::soap { class AddressingFeature; }
template<> constexpr auto signature<::javax::xml::ws::soap::AddressingFeature> = ::javax_xml_ws_soap / "AddressingFeature";
namespace javax::xml::ws::soap { class AddressingFeature$Responses; }
template<> constexpr auto signature<::javax::xml::ws::soap::AddressingFeature$Responses> = ::javax_xml_ws_soap / "AddressingFeature$Responses";
namespace javax::xml::ws::soap { class MTOM; }
template<> constexpr auto signature<::javax::xml::ws::soap::MTOM> = ::javax_xml_ws_soap / "MTOM";
namespace javax::xml::ws::soap { class MTOMFeature; }
template<> constexpr auto signature<::javax::xml::ws::soap::MTOMFeature> = ::javax_xml_ws_soap / "MTOMFeature";
namespace javax::xml::ws::soap { class SOAPBinding; }
template<> constexpr auto signature<::javax::xml::ws::soap::SOAPBinding> = ::javax_xml_ws_soap / "SOAPBinding";
namespace javax::xml::ws::soap { class SOAPFaultException; }
template<> constexpr auto signature<::javax::xml::ws::soap::SOAPFaultException> = ::javax_xml_ws_soap / "SOAPFaultException";
namespace javax::xml::ws::spi { class FactoryFinder; }
template<> constexpr auto signature<::javax::xml::ws::spi::FactoryFinder> = ::javax_xml_ws_spi / "FactoryFinder";
namespace javax::xml::ws::spi { class Invoker; }
template<> constexpr auto signature<::javax::xml::ws::spi::Invoker> = ::javax_xml_ws_spi / "Invoker";
namespace javax::xml::ws::spi { class Provider; }
template<> constexpr auto signature<::javax::xml::ws::spi::Provider> = ::javax_xml_ws_spi / "Provider";
namespace javax::xml::ws::spi { class ServiceDelegate; }
template<> constexpr auto signature<::javax::xml::ws::spi::ServiceDelegate> = ::javax_xml_ws_spi / "ServiceDelegate";
namespace javax::xml::ws::spi { class WebServiceFeatureAnnotation; }
template<> constexpr auto signature<::javax::xml::ws::spi::WebServiceFeatureAnnotation> = ::javax_xml_ws_spi / "WebServiceFeatureAnnotation";
namespace javax::xml::ws::spi::http { class HttpContext; }
template<> constexpr auto signature<::javax::xml::ws::spi::http::HttpContext> = ::javax_xml_ws_spi_http / "HttpContext";
namespace javax::xml::ws::spi::http { class HttpExchange; }
template<> constexpr auto signature<::javax::xml::ws::spi::http::HttpExchange> = ::javax_xml_ws_spi_http / "HttpExchange";
namespace javax::xml::ws::spi::http { class HttpHandler; }
template<> constexpr auto signature<::javax::xml::ws::spi::http::HttpHandler> = ::javax_xml_ws_spi_http / "HttpHandler";
namespace javax::xml::ws::wsaddressing { class W3CEndpointReference; }
template<> constexpr auto signature<::javax::xml::ws::wsaddressing::W3CEndpointReference> = ::javax_xml_ws_wsaddressing / "W3CEndpointReference";
namespace javax::xml::ws::wsaddressing { class W3CEndpointReference$Address; }
template<> constexpr auto signature<::javax::xml::ws::wsaddressing::W3CEndpointReference$Address> = ::javax_xml_ws_wsaddressing / "W3CEndpointReference$Address";
namespace javax::xml::ws::wsaddressing { class W3CEndpointReference$Elements; }
template<> constexpr auto signature<::javax::xml::ws::wsaddressing::W3CEndpointReference$Elements> = ::javax_xml_ws_wsaddressing / "W3CEndpointReference$Elements";
namespace javax::xml::ws::wsaddressing { class W3CEndpointReferenceBuilder; }
template<> constexpr auto signature<::javax::xml::ws::wsaddressing::W3CEndpointReferenceBuilder> = ::javax_xml_ws_wsaddressing / "W3CEndpointReferenceBuilder";
namespace javax::xml::xpath { class SecuritySupport; }
template<> constexpr auto signature<::javax::xml::xpath::SecuritySupport> = ::javax_xml_xpath / "SecuritySupport";
namespace javax::xml::xpath { class SecuritySupport$1; }
template<> constexpr auto signature<::javax::xml::xpath::SecuritySupport$1> = ::javax_xml_xpath / "SecuritySupport$1";
namespace javax::xml::xpath { class SecuritySupport$2; }
template<> constexpr auto signature<::javax::xml::xpath::SecuritySupport$2> = ::javax_xml_xpath / "SecuritySupport$2";
namespace javax::xml::xpath { class SecuritySupport$3; }
template<> constexpr auto signature<::javax::xml::xpath::SecuritySupport$3> = ::javax_xml_xpath / "SecuritySupport$3";
namespace javax::xml::xpath { class SecuritySupport$4; }
template<> constexpr auto signature<::javax::xml::xpath::SecuritySupport$4> = ::javax_xml_xpath / "SecuritySupport$4";
namespace javax::xml::xpath { class SecuritySupport$5; }
template<> constexpr auto signature<::javax::xml::xpath::SecuritySupport$5> = ::javax_xml_xpath / "SecuritySupport$5";
namespace javax::xml::xpath { class SecuritySupport$6; }
template<> constexpr auto signature<::javax::xml::xpath::SecuritySupport$6> = ::javax_xml_xpath / "SecuritySupport$6";
namespace javax::xml::xpath { class SecuritySupport$7; }
template<> constexpr auto signature<::javax::xml::xpath::SecuritySupport$7> = ::javax_xml_xpath / "SecuritySupport$7";
namespace javax::xml::xpath { class SecuritySupport$8; }
template<> constexpr auto signature<::javax::xml::xpath::SecuritySupport$8> = ::javax_xml_xpath / "SecuritySupport$8";
namespace javax::xml::xpath { class XPath; }
template<> constexpr auto signature<::javax::xml::xpath::XPath> = ::javax_xml_xpath / "XPath";
namespace javax::xml::xpath { class XPathConstants; }
template<> constexpr auto signature<::javax::xml::xpath::XPathConstants> = ::javax_xml_xpath / "XPathConstants";
namespace javax::xml::xpath { class XPathException; }
template<> constexpr auto signature<::javax::xml::xpath::XPathException> = ::javax_xml_xpath / "XPathException";
namespace javax::xml::xpath { class XPathExpression; }
template<> constexpr auto signature<::javax::xml::xpath::XPathExpression> = ::javax_xml_xpath / "XPathExpression";
namespace javax::xml::xpath { class XPathExpressionException; }
template<> constexpr auto signature<::javax::xml::xpath::XPathExpressionException> = ::javax_xml_xpath / "XPathExpressionException";
namespace javax::xml::xpath { class XPathFactory; }
template<> constexpr auto signature<::javax::xml::xpath::XPathFactory> = ::javax_xml_xpath / "XPathFactory";
namespace javax::xml::xpath { class XPathFactoryConfigurationException; }
template<> constexpr auto signature<::javax::xml::xpath::XPathFactoryConfigurationException> = ::javax_xml_xpath / "XPathFactoryConfigurationException";
namespace javax::xml::xpath { class XPathFactoryFinder; }
template<> constexpr auto signature<::javax::xml::xpath::XPathFactoryFinder> = ::javax_xml_xpath / "XPathFactoryFinder";
namespace javax::xml::xpath { class XPathFactoryFinder$1; }
template<> constexpr auto signature<::javax::xml::xpath::XPathFactoryFinder$1> = ::javax_xml_xpath / "XPathFactoryFinder$1";
namespace javax::xml::xpath { class XPathFactoryFinder$2; }
template<> constexpr auto signature<::javax::xml::xpath::XPathFactoryFinder$2> = ::javax_xml_xpath / "XPathFactoryFinder$2";
namespace javax::xml::xpath { class XPathFunction; }
template<> constexpr auto signature<::javax::xml::xpath::XPathFunction> = ::javax_xml_xpath / "XPathFunction";
namespace javax::xml::xpath { class XPathFunctionException; }
template<> constexpr auto signature<::javax::xml::xpath::XPathFunctionException> = ::javax_xml_xpath / "XPathFunctionException";
namespace javax::xml::xpath { class XPathFunctionResolver; }
template<> constexpr auto signature<::javax::xml::xpath::XPathFunctionResolver> = ::javax_xml_xpath / "XPathFunctionResolver";
namespace javax::xml::xpath { class XPathVariableResolver; }
template<> constexpr auto signature<::javax::xml::xpath::XPathVariableResolver> = ::javax_xml_xpath / "XPathVariableResolver";
namespace org::eclipse::swt { class SWT; }
template<> constexpr auto signature<::org::eclipse::swt::SWT> = ::org_eclipse_swt / "SWT";
namespace org::eclipse::swt { class SWTError; }
template<> constexpr auto signature<::org::eclipse::swt::SWTError> = ::org_eclipse_swt / "SWTError";
namespace org::eclipse::swt { class SWTException; }
template<> constexpr auto signature<::org::eclipse::swt::SWTException> = ::org_eclipse_swt / "SWTException";
namespace org::eclipse::swt::accessibility { class ACC; }
template<> constexpr auto signature<::org::eclipse::swt::accessibility::ACC> = ::org_eclipse_swt_accessibility / "ACC";
namespace org::eclipse::swt::accessibility { class Accessible; }
template<> constexpr auto signature<::org::eclipse::swt::accessibility::Accessible> = ::org_eclipse_swt_accessibility / "Accessible";
namespace org::eclipse::swt::accessibility { class Accessible$Relation; }
template<> constexpr auto signature<::org::eclipse::swt::accessibility::Accessible$Relation> = ::org_eclipse_swt_accessibility / "Accessible$Relation";
namespace org::eclipse::swt::accessibility { class AccessibleActionAdapter; }
template<> constexpr auto signature<::org::eclipse::swt::accessibility::AccessibleActionAdapter> = ::org_eclipse_swt_accessibility / "AccessibleActionAdapter";
namespace org::eclipse::swt::accessibility { class AccessibleActionEvent; }
template<> constexpr auto signature<::org::eclipse::swt::accessibility::AccessibleActionEvent> = ::org_eclipse_swt_accessibility / "AccessibleActionEvent";
namespace org::eclipse::swt::accessibility { class AccessibleActionListener; }
template<> constexpr auto signature<::org::eclipse::swt::accessibility::AccessibleActionListener> = ::org_eclipse_swt_accessibility / "AccessibleActionListener";
namespace org::eclipse::swt::accessibility { class AccessibleAdapter; }
template<> constexpr auto signature<::org::eclipse::swt::accessibility::AccessibleAdapter> = ::org_eclipse_swt_accessibility / "AccessibleAdapter";
namespace org::eclipse::swt::accessibility { class AccessibleAttributeAdapter; }
template<> constexpr auto signature<::org::eclipse::swt::accessibility::AccessibleAttributeAdapter> = ::org_eclipse_swt_accessibility / "AccessibleAttributeAdapter";
namespace org::eclipse::swt::accessibility { class AccessibleAttributeEvent; }
template<> constexpr auto signature<::org::eclipse::swt::accessibility::AccessibleAttributeEvent> = ::org_eclipse_swt_accessibility / "AccessibleAttributeEvent";
namespace org::eclipse::swt::accessibility { class AccessibleAttributeListener; }
template<> constexpr auto signature<::org::eclipse::swt::accessibility::AccessibleAttributeListener> = ::org_eclipse_swt_accessibility / "AccessibleAttributeListener";
namespace org::eclipse::swt::accessibility { class AccessibleControlAdapter; }
template<> constexpr auto signature<::org::eclipse::swt::accessibility::AccessibleControlAdapter> = ::org_eclipse_swt_accessibility / "AccessibleControlAdapter";
namespace org::eclipse::swt::accessibility { class AccessibleControlEvent; }
template<> constexpr auto signature<::org::eclipse::swt::accessibility::AccessibleControlEvent> = ::org_eclipse_swt_accessibility / "AccessibleControlEvent";
namespace org::eclipse::swt::accessibility { class AccessibleControlListener; }
template<> constexpr auto signature<::org::eclipse::swt::accessibility::AccessibleControlListener> = ::org_eclipse_swt_accessibility / "AccessibleControlListener";
namespace org::eclipse::swt::accessibility { class AccessibleEditableTextAdapter; }
template<> constexpr auto signature<::org::eclipse::swt::accessibility::AccessibleEditableTextAdapter> = ::org_eclipse_swt_accessibility / "AccessibleEditableTextAdapter";
namespace org::eclipse::swt::accessibility { class AccessibleEditableTextEvent; }
template<> constexpr auto signature<::org::eclipse::swt::accessibility::AccessibleEditableTextEvent> = ::org_eclipse_swt_accessibility / "AccessibleEditableTextEvent";
namespace org::eclipse::swt::accessibility { class AccessibleEditableTextListener; }
template<> constexpr auto signature<::org::eclipse::swt::accessibility::AccessibleEditableTextListener> = ::org_eclipse_swt_accessibility / "AccessibleEditableTextListener";
namespace org::eclipse::swt::accessibility { class AccessibleEvent; }
template<> constexpr auto signature<::org::eclipse::swt::accessibility::AccessibleEvent> = ::org_eclipse_swt_accessibility / "AccessibleEvent";
namespace org::eclipse::swt::accessibility { class AccessibleFactory; }
template<> constexpr auto signature<::org::eclipse::swt::accessibility::AccessibleFactory> = ::org_eclipse_swt_accessibility / "AccessibleFactory";
namespace org::eclipse::swt::accessibility { class AccessibleHyperlinkAdapter; }
template<> constexpr auto signature<::org::eclipse::swt::accessibility::AccessibleHyperlinkAdapter> = ::org_eclipse_swt_accessibility / "AccessibleHyperlinkAdapter";
namespace org::eclipse::swt::accessibility { class AccessibleHyperlinkEvent; }
template<> constexpr auto signature<::org::eclipse::swt::accessibility::AccessibleHyperlinkEvent> = ::org_eclipse_swt_accessibility / "AccessibleHyperlinkEvent";
namespace org::eclipse::swt::accessibility { class AccessibleHyperlinkListener; }
template<> constexpr auto signature<::org::eclipse::swt::accessibility::AccessibleHyperlinkListener> = ::org_eclipse_swt_accessibility / "AccessibleHyperlinkListener";
namespace org::eclipse::swt::accessibility { class AccessibleListener; }
template<> constexpr auto signature<::org::eclipse::swt::accessibility::AccessibleListener> = ::org_eclipse_swt_accessibility / "AccessibleListener";
namespace org::eclipse::swt::accessibility { class AccessibleObject; }
template<> constexpr auto signature<::org::eclipse::swt::accessibility::AccessibleObject> = ::org_eclipse_swt_accessibility / "AccessibleObject";
namespace org::eclipse::swt::accessibility { class AccessibleTableAdapter; }
template<> constexpr auto signature<::org::eclipse::swt::accessibility::AccessibleTableAdapter> = ::org_eclipse_swt_accessibility / "AccessibleTableAdapter";
namespace org::eclipse::swt::accessibility { class AccessibleTableCellAdapter; }
template<> constexpr auto signature<::org::eclipse::swt::accessibility::AccessibleTableCellAdapter> = ::org_eclipse_swt_accessibility / "AccessibleTableCellAdapter";
namespace org::eclipse::swt::accessibility { class AccessibleTableCellEvent; }
template<> constexpr auto signature<::org::eclipse::swt::accessibility::AccessibleTableCellEvent> = ::org_eclipse_swt_accessibility / "AccessibleTableCellEvent";
namespace org::eclipse::swt::accessibility { class AccessibleTableCellListener; }
template<> constexpr auto signature<::org::eclipse::swt::accessibility::AccessibleTableCellListener> = ::org_eclipse_swt_accessibility / "AccessibleTableCellListener";
namespace org::eclipse::swt::accessibility { class AccessibleTableEvent; }
template<> constexpr auto signature<::org::eclipse::swt::accessibility::AccessibleTableEvent> = ::org_eclipse_swt_accessibility / "AccessibleTableEvent";
namespace org::eclipse::swt::accessibility { class AccessibleTableListener; }
template<> constexpr auto signature<::org::eclipse::swt::accessibility::AccessibleTableListener> = ::org_eclipse_swt_accessibility / "AccessibleTableListener";
namespace org::eclipse::swt::accessibility { class AccessibleTextAdapter; }
template<> constexpr auto signature<::org::eclipse::swt::accessibility::AccessibleTextAdapter> = ::org_eclipse_swt_accessibility / "AccessibleTextAdapter";
namespace org::eclipse::swt::accessibility { class AccessibleTextAttributeEvent; }
template<> constexpr auto signature<::org::eclipse::swt::accessibility::AccessibleTextAttributeEvent> = ::org_eclipse_swt_accessibility / "AccessibleTextAttributeEvent";
namespace org::eclipse::swt::accessibility { class AccessibleTextEvent; }
template<> constexpr auto signature<::org::eclipse::swt::accessibility::AccessibleTextEvent> = ::org_eclipse_swt_accessibility / "AccessibleTextEvent";
namespace org::eclipse::swt::accessibility { class AccessibleTextExtendedAdapter; }
template<> constexpr auto signature<::org::eclipse::swt::accessibility::AccessibleTextExtendedAdapter> = ::org_eclipse_swt_accessibility / "AccessibleTextExtendedAdapter";
namespace org::eclipse::swt::accessibility { class AccessibleTextExtendedListener; }
template<> constexpr auto signature<::org::eclipse::swt::accessibility::AccessibleTextExtendedListener> = ::org_eclipse_swt_accessibility / "AccessibleTextExtendedListener";
namespace org::eclipse::swt::accessibility { class AccessibleTextListener; }
template<> constexpr auto signature<::org::eclipse::swt::accessibility::AccessibleTextListener> = ::org_eclipse_swt_accessibility / "AccessibleTextListener";
namespace org::eclipse::swt::accessibility { class AccessibleValueAdapter; }
template<> constexpr auto signature<::org::eclipse::swt::accessibility::AccessibleValueAdapter> = ::org_eclipse_swt_accessibility / "AccessibleValueAdapter";
namespace org::eclipse::swt::accessibility { class AccessibleValueEvent; }
template<> constexpr auto signature<::org::eclipse::swt::accessibility::AccessibleValueEvent> = ::org_eclipse_swt_accessibility / "AccessibleValueEvent";
namespace org::eclipse::swt::accessibility { class AccessibleValueListener; }
template<> constexpr auto signature<::org::eclipse::swt::accessibility::AccessibleValueListener> = ::org_eclipse_swt_accessibility / "AccessibleValueListener";
namespace org::eclipse::swt::awt { class SWT_AWT; }
template<> constexpr auto signature<::org::eclipse::swt::awt::SWT_AWT> = ::org_eclipse_swt_awt / "SWT_AWT";
namespace org::eclipse::swt::awt { class SWT_AWT$1; }
template<> constexpr auto signature<::org::eclipse::swt::awt::SWT_AWT$1> = ::org_eclipse_swt_awt / "SWT_AWT$1";
namespace org::eclipse::swt::awt { class SWT_AWT$1$1; }
template<> constexpr auto signature<::org::eclipse::swt::awt::SWT_AWT$1$1> = ::org_eclipse_swt_awt / "SWT_AWT$1$1";
namespace org::eclipse::swt::awt { class SWT_AWT$2; }
template<> constexpr auto signature<::org::eclipse::swt::awt::SWT_AWT$2> = ::org_eclipse_swt_awt / "SWT_AWT$2";
namespace org::eclipse::swt::awt { class SWT_AWT$2$1; }
template<> constexpr auto signature<::org::eclipse::swt::awt::SWT_AWT$2$1> = ::org_eclipse_swt_awt / "SWT_AWT$2$1";
namespace org::eclipse::swt::awt { class SWT_AWT$2$2; }
template<> constexpr auto signature<::org::eclipse::swt::awt::SWT_AWT$2$2> = ::org_eclipse_swt_awt / "SWT_AWT$2$2";
namespace org::eclipse::swt::awt { class SWT_AWT$3; }
template<> constexpr auto signature<::org::eclipse::swt::awt::SWT_AWT$3> = ::org_eclipse_swt_awt / "SWT_AWT$3";
namespace org::eclipse::swt::awt { class SWT_AWT$3$1; }
template<> constexpr auto signature<::org::eclipse::swt::awt::SWT_AWT$3$1> = ::org_eclipse_swt_awt / "SWT_AWT$3$1";
namespace org::eclipse::swt::awt { class SWT_AWT$3$2; }
template<> constexpr auto signature<::org::eclipse::swt::awt::SWT_AWT$3$2> = ::org_eclipse_swt_awt / "SWT_AWT$3$2";
namespace org::eclipse::swt::awt { class SWT_AWT$4; }
template<> constexpr auto signature<::org::eclipse::swt::awt::SWT_AWT$4> = ::org_eclipse_swt_awt / "SWT_AWT$4";
namespace org::eclipse::swt::awt { class SWT_AWT$4$1; }
template<> constexpr auto signature<::org::eclipse::swt::awt::SWT_AWT$4$1> = ::org_eclipse_swt_awt / "SWT_AWT$4$1";
namespace org::eclipse::swt::awt { class SWT_AWT$5; }
template<> constexpr auto signature<::org::eclipse::swt::awt::SWT_AWT$5> = ::org_eclipse_swt_awt / "SWT_AWT$5";
namespace org::eclipse::swt::awt { class SWT_AWT$5$1; }
template<> constexpr auto signature<::org::eclipse::swt::awt::SWT_AWT$5$1> = ::org_eclipse_swt_awt / "SWT_AWT$5$1";
namespace org::eclipse::swt::awt { class SWT_AWT$6; }
template<> constexpr auto signature<::org::eclipse::swt::awt::SWT_AWT$6> = ::org_eclipse_swt_awt / "SWT_AWT$6";
namespace org::eclipse::swt::browser { class AppFileLocProvider; }
template<> constexpr auto signature<::org::eclipse::swt::browser::AppFileLocProvider> = ::org_eclipse_swt_browser / "AppFileLocProvider";
namespace org::eclipse::swt::browser { class AppFileLocProvider$1; }
template<> constexpr auto signature<::org::eclipse::swt::browser::AppFileLocProvider$1> = ::org_eclipse_swt_browser / "AppFileLocProvider$1";
namespace org::eclipse::swt::browser { class AppFileLocProvider$2; }
template<> constexpr auto signature<::org::eclipse::swt::browser::AppFileLocProvider$2> = ::org_eclipse_swt_browser / "AppFileLocProvider$2";
namespace org::eclipse::swt::browser { class AppFileLocProvider$3; }
template<> constexpr auto signature<::org::eclipse::swt::browser::AppFileLocProvider$3> = ::org_eclipse_swt_browser / "AppFileLocProvider$3";
namespace org::eclipse::swt::browser { class AuthenticationEvent; }
template<> constexpr auto signature<::org::eclipse::swt::browser::AuthenticationEvent> = ::org_eclipse_swt_browser / "AuthenticationEvent";
namespace org::eclipse::swt::browser { class AuthenticationListener; }
template<> constexpr auto signature<::org::eclipse::swt::browser::AuthenticationListener> = ::org_eclipse_swt_browser / "AuthenticationListener";
namespace org::eclipse::swt::browser { class Browser; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Browser> = ::org_eclipse_swt_browser / "Browser";
namespace org::eclipse::swt::browser { class BrowserFactory; }
template<> constexpr auto signature<::org::eclipse::swt::browser::BrowserFactory> = ::org_eclipse_swt_browser / "BrowserFactory";
namespace org::eclipse::swt::browser { class BrowserFunction; }
template<> constexpr auto signature<::org::eclipse::swt::browser::BrowserFunction> = ::org_eclipse_swt_browser / "BrowserFunction";
namespace org::eclipse::swt::browser { class CloseWindowListener; }
template<> constexpr auto signature<::org::eclipse::swt::browser::CloseWindowListener> = ::org_eclipse_swt_browser / "CloseWindowListener";
namespace org::eclipse::swt::browser { class Download; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Download> = ::org_eclipse_swt_browser / "Download";
namespace org::eclipse::swt::browser { class Download$1; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Download$1> = ::org_eclipse_swt_browser / "Download$1";
namespace org::eclipse::swt::browser { class Download$2; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Download$2> = ::org_eclipse_swt_browser / "Download$2";
namespace org::eclipse::swt::browser { class Download$3; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Download$3> = ::org_eclipse_swt_browser / "Download$3";
namespace org::eclipse::swt::browser { class Download$4; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Download$4> = ::org_eclipse_swt_browser / "Download$4";
namespace org::eclipse::swt::browser { class Download$5; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Download$5> = ::org_eclipse_swt_browser / "Download$5";
namespace org::eclipse::swt::browser { class DownloadFactory; }
template<> constexpr auto signature<::org::eclipse::swt::browser::DownloadFactory> = ::org_eclipse_swt_browser / "DownloadFactory";
namespace org::eclipse::swt::browser { class DownloadFactory$1; }
template<> constexpr auto signature<::org::eclipse::swt::browser::DownloadFactory$1> = ::org_eclipse_swt_browser / "DownloadFactory$1";
namespace org::eclipse::swt::browser { class DownloadFactory$2; }
template<> constexpr auto signature<::org::eclipse::swt::browser::DownloadFactory$2> = ::org_eclipse_swt_browser / "DownloadFactory$2";
namespace org::eclipse::swt::browser { class DownloadFactory_1_8; }
template<> constexpr auto signature<::org::eclipse::swt::browser::DownloadFactory_1_8> = ::org_eclipse_swt_browser / "DownloadFactory_1_8";
namespace org::eclipse::swt::browser { class DownloadFactory_1_8$1; }
template<> constexpr auto signature<::org::eclipse::swt::browser::DownloadFactory_1_8$1> = ::org_eclipse_swt_browser / "DownloadFactory_1_8$1";
namespace org::eclipse::swt::browser { class DownloadFactory_1_8$2; }
template<> constexpr auto signature<::org::eclipse::swt::browser::DownloadFactory_1_8$2> = ::org_eclipse_swt_browser / "DownloadFactory_1_8$2";
namespace org::eclipse::swt::browser { class Download_1_8; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Download_1_8> = ::org_eclipse_swt_browser / "Download_1_8";
namespace org::eclipse::swt::browser { class Download_1_8$1; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Download_1_8$1> = ::org_eclipse_swt_browser / "Download_1_8$1";
namespace org::eclipse::swt::browser { class Download_1_8$2; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Download_1_8$2> = ::org_eclipse_swt_browser / "Download_1_8$2";
namespace org::eclipse::swt::browser { class Download_1_8$3; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Download_1_8$3> = ::org_eclipse_swt_browser / "Download_1_8$3";
namespace org::eclipse::swt::browser { class Download_1_8$4; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Download_1_8$4> = ::org_eclipse_swt_browser / "Download_1_8$4";
namespace org::eclipse::swt::browser { class Download_1_8$5; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Download_1_8$5> = ::org_eclipse_swt_browser / "Download_1_8$5";
namespace org::eclipse::swt::browser { class External; }
template<> constexpr auto signature<::org::eclipse::swt::browser::External> = ::org_eclipse_swt_browser / "External";
namespace org::eclipse::swt::browser { class External$1; }
template<> constexpr auto signature<::org::eclipse::swt::browser::External$1> = ::org_eclipse_swt_browser / "External$1";
namespace org::eclipse::swt::browser { class External$2; }
template<> constexpr auto signature<::org::eclipse::swt::browser::External$2> = ::org_eclipse_swt_browser / "External$2";
namespace org::eclipse::swt::browser { class External$3; }
template<> constexpr auto signature<::org::eclipse::swt::browser::External$3> = ::org_eclipse_swt_browser / "External$3";
namespace org::eclipse::swt::browser { class External$4; }
template<> constexpr auto signature<::org::eclipse::swt::browser::External$4> = ::org_eclipse_swt_browser / "External$4";
namespace org::eclipse::swt::browser { class External$5; }
template<> constexpr auto signature<::org::eclipse::swt::browser::External$5> = ::org_eclipse_swt_browser / "External$5";
namespace org::eclipse::swt::browser { class ExternalFactory; }
template<> constexpr auto signature<::org::eclipse::swt::browser::ExternalFactory> = ::org_eclipse_swt_browser / "ExternalFactory";
namespace org::eclipse::swt::browser { class ExternalFactory$1; }
template<> constexpr auto signature<::org::eclipse::swt::browser::ExternalFactory$1> = ::org_eclipse_swt_browser / "ExternalFactory$1";
namespace org::eclipse::swt::browser { class ExternalFactory$2; }
template<> constexpr auto signature<::org::eclipse::swt::browser::ExternalFactory$2> = ::org_eclipse_swt_browser / "ExternalFactory$2";
namespace org::eclipse::swt::browser { class FilePicker; }
template<> constexpr auto signature<::org::eclipse::swt::browser::FilePicker> = ::org_eclipse_swt_browser / "FilePicker";
namespace org::eclipse::swt::browser { class FilePicker$1; }
template<> constexpr auto signature<::org::eclipse::swt::browser::FilePicker$1> = ::org_eclipse_swt_browser / "FilePicker$1";
namespace org::eclipse::swt::browser { class FilePicker$2; }
template<> constexpr auto signature<::org::eclipse::swt::browser::FilePicker$2> = ::org_eclipse_swt_browser / "FilePicker$2";
namespace org::eclipse::swt::browser { class FilePickerFactory; }
template<> constexpr auto signature<::org::eclipse::swt::browser::FilePickerFactory> = ::org_eclipse_swt_browser / "FilePickerFactory";
namespace org::eclipse::swt::browser { class FilePickerFactory$1; }
template<> constexpr auto signature<::org::eclipse::swt::browser::FilePickerFactory$1> = ::org_eclipse_swt_browser / "FilePickerFactory$1";
namespace org::eclipse::swt::browser { class FilePickerFactory$2; }
template<> constexpr auto signature<::org::eclipse::swt::browser::FilePickerFactory$2> = ::org_eclipse_swt_browser / "FilePickerFactory$2";
namespace org::eclipse::swt::browser { class FilePicker_10; }
template<> constexpr auto signature<::org::eclipse::swt::browser::FilePicker_10> = ::org_eclipse_swt_browser / "FilePicker_10";
namespace org::eclipse::swt::browser { class FilePicker_10$1; }
template<> constexpr auto signature<::org::eclipse::swt::browser::FilePicker_10$1> = ::org_eclipse_swt_browser / "FilePicker_10$1";
namespace org::eclipse::swt::browser { class FilePicker_10$2; }
template<> constexpr auto signature<::org::eclipse::swt::browser::FilePicker_10$2> = ::org_eclipse_swt_browser / "FilePicker_10$2";
namespace org::eclipse::swt::browser { class FilePicker_1_8; }
template<> constexpr auto signature<::org::eclipse::swt::browser::FilePicker_1_8> = ::org_eclipse_swt_browser / "FilePicker_1_8";
namespace org::eclipse::swt::browser { class FilePicker_1_8$1; }
template<> constexpr auto signature<::org::eclipse::swt::browser::FilePicker_1_8$1> = ::org_eclipse_swt_browser / "FilePicker_1_8$1";
namespace org::eclipse::swt::browser { class FilePicker_1_8$2; }
template<> constexpr auto signature<::org::eclipse::swt::browser::FilePicker_1_8$2> = ::org_eclipse_swt_browser / "FilePicker_1_8$2";
namespace org::eclipse::swt::browser { class HelperAppLauncherDialog; }
template<> constexpr auto signature<::org::eclipse::swt::browser::HelperAppLauncherDialog> = ::org_eclipse_swt_browser / "HelperAppLauncherDialog";
namespace org::eclipse::swt::browser { class HelperAppLauncherDialog$1; }
template<> constexpr auto signature<::org::eclipse::swt::browser::HelperAppLauncherDialog$1> = ::org_eclipse_swt_browser / "HelperAppLauncherDialog$1";
namespace org::eclipse::swt::browser { class HelperAppLauncherDialog$2; }
template<> constexpr auto signature<::org::eclipse::swt::browser::HelperAppLauncherDialog$2> = ::org_eclipse_swt_browser / "HelperAppLauncherDialog$2";
namespace org::eclipse::swt::browser { class HelperAppLauncherDialogFactory; }
template<> constexpr auto signature<::org::eclipse::swt::browser::HelperAppLauncherDialogFactory> = ::org_eclipse_swt_browser / "HelperAppLauncherDialogFactory";
namespace org::eclipse::swt::browser { class HelperAppLauncherDialogFactory$1; }
template<> constexpr auto signature<::org::eclipse::swt::browser::HelperAppLauncherDialogFactory$1> = ::org_eclipse_swt_browser / "HelperAppLauncherDialogFactory$1";
namespace org::eclipse::swt::browser { class HelperAppLauncherDialogFactory$2; }
template<> constexpr auto signature<::org::eclipse::swt::browser::HelperAppLauncherDialogFactory$2> = ::org_eclipse_swt_browser / "HelperAppLauncherDialogFactory$2";
namespace org::eclipse::swt::browser { class HelperAppLauncherDialog_10; }
template<> constexpr auto signature<::org::eclipse::swt::browser::HelperAppLauncherDialog_10> = ::org_eclipse_swt_browser / "HelperAppLauncherDialog_10";
namespace org::eclipse::swt::browser { class HelperAppLauncherDialog_1_9; }
template<> constexpr auto signature<::org::eclipse::swt::browser::HelperAppLauncherDialog_1_9> = ::org_eclipse_swt_browser / "HelperAppLauncherDialog_1_9";
namespace org::eclipse::swt::browser { class HelperAppLauncherDialog_1_9$1; }
template<> constexpr auto signature<::org::eclipse::swt::browser::HelperAppLauncherDialog_1_9$1> = ::org_eclipse_swt_browser / "HelperAppLauncherDialog_1_9$1";
namespace org::eclipse::swt::browser { class HelperAppLauncherDialog_1_9$2; }
template<> constexpr auto signature<::org::eclipse::swt::browser::HelperAppLauncherDialog_1_9$2> = ::org_eclipse_swt_browser / "HelperAppLauncherDialog_1_9$2";
namespace org::eclipse::swt::browser { class InputStream; }
template<> constexpr auto signature<::org::eclipse::swt::browser::InputStream> = ::org_eclipse_swt_browser / "InputStream";
namespace org::eclipse::swt::browser { class InputStream$1; }
template<> constexpr auto signature<::org::eclipse::swt::browser::InputStream$1> = ::org_eclipse_swt_browser / "InputStream$1";
namespace org::eclipse::swt::browser { class LocationAdapter; }
template<> constexpr auto signature<::org::eclipse::swt::browser::LocationAdapter> = ::org_eclipse_swt_browser / "LocationAdapter";
namespace org::eclipse::swt::browser { class LocationEvent; }
template<> constexpr auto signature<::org::eclipse::swt::browser::LocationEvent> = ::org_eclipse_swt_browser / "LocationEvent";
namespace org::eclipse::swt::browser { class LocationListener; }
template<> constexpr auto signature<::org::eclipse::swt::browser::LocationListener> = ::org_eclipse_swt_browser / "LocationListener";
namespace org::eclipse::swt::browser { class Mozilla; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Mozilla> = ::org_eclipse_swt_browser / "Mozilla";
namespace org::eclipse::swt::browser { class Mozilla$1; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Mozilla$1> = ::org_eclipse_swt_browser / "Mozilla$1";
namespace org::eclipse::swt::browser { class Mozilla$10; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Mozilla$10> = ::org_eclipse_swt_browser / "Mozilla$10";
namespace org::eclipse::swt::browser { class Mozilla$11; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Mozilla$11> = ::org_eclipse_swt_browser / "Mozilla$11";
namespace org::eclipse::swt::browser { class Mozilla$12; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Mozilla$12> = ::org_eclipse_swt_browser / "Mozilla$12";
namespace org::eclipse::swt::browser { class Mozilla$13; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Mozilla$13> = ::org_eclipse_swt_browser / "Mozilla$13";
namespace org::eclipse::swt::browser { class Mozilla$14; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Mozilla$14> = ::org_eclipse_swt_browser / "Mozilla$14";
namespace org::eclipse::swt::browser { class Mozilla$15; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Mozilla$15> = ::org_eclipse_swt_browser / "Mozilla$15";
namespace org::eclipse::swt::browser { class Mozilla$16; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Mozilla$16> = ::org_eclipse_swt_browser / "Mozilla$16";
namespace org::eclipse::swt::browser { class Mozilla$17; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Mozilla$17> = ::org_eclipse_swt_browser / "Mozilla$17";
namespace org::eclipse::swt::browser { class Mozilla$18; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Mozilla$18> = ::org_eclipse_swt_browser / "Mozilla$18";
namespace org::eclipse::swt::browser { class Mozilla$19; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Mozilla$19> = ::org_eclipse_swt_browser / "Mozilla$19";
namespace org::eclipse::swt::browser { class Mozilla$2; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Mozilla$2> = ::org_eclipse_swt_browser / "Mozilla$2";
namespace org::eclipse::swt::browser { class Mozilla$20; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Mozilla$20> = ::org_eclipse_swt_browser / "Mozilla$20";
namespace org::eclipse::swt::browser { class Mozilla$21; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Mozilla$21> = ::org_eclipse_swt_browser / "Mozilla$21";
namespace org::eclipse::swt::browser { class Mozilla$22; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Mozilla$22> = ::org_eclipse_swt_browser / "Mozilla$22";
namespace org::eclipse::swt::browser { class Mozilla$23; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Mozilla$23> = ::org_eclipse_swt_browser / "Mozilla$23";
namespace org::eclipse::swt::browser { class Mozilla$24; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Mozilla$24> = ::org_eclipse_swt_browser / "Mozilla$24";
namespace org::eclipse::swt::browser { class Mozilla$25; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Mozilla$25> = ::org_eclipse_swt_browser / "Mozilla$25";
namespace org::eclipse::swt::browser { class Mozilla$26; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Mozilla$26> = ::org_eclipse_swt_browser / "Mozilla$26";
namespace org::eclipse::swt::browser { class Mozilla$3; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Mozilla$3> = ::org_eclipse_swt_browser / "Mozilla$3";
namespace org::eclipse::swt::browser { class Mozilla$4; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Mozilla$4> = ::org_eclipse_swt_browser / "Mozilla$4";
namespace org::eclipse::swt::browser { class Mozilla$5; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Mozilla$5> = ::org_eclipse_swt_browser / "Mozilla$5";
namespace org::eclipse::swt::browser { class Mozilla$5$1; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Mozilla$5$1> = ::org_eclipse_swt_browser / "Mozilla$5$1";
namespace org::eclipse::swt::browser { class Mozilla$6; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Mozilla$6> = ::org_eclipse_swt_browser / "Mozilla$6";
namespace org::eclipse::swt::browser { class Mozilla$7; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Mozilla$7> = ::org_eclipse_swt_browser / "Mozilla$7";
namespace org::eclipse::swt::browser { class Mozilla$8; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Mozilla$8> = ::org_eclipse_swt_browser / "Mozilla$8";
namespace org::eclipse::swt::browser { class Mozilla$9; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Mozilla$9> = ::org_eclipse_swt_browser / "Mozilla$9";
namespace org::eclipse::swt::browser { class MozillaDelegate; }
template<> constexpr auto signature<::org::eclipse::swt::browser::MozillaDelegate> = ::org_eclipse_swt_browser / "MozillaDelegate";
namespace org::eclipse::swt::browser { class MozillaDelegate$1; }
template<> constexpr auto signature<::org::eclipse::swt::browser::MozillaDelegate$1> = ::org_eclipse_swt_browser / "MozillaDelegate$1";
namespace org::eclipse::swt::browser { class MozillaDelegate$2; }
template<> constexpr auto signature<::org::eclipse::swt::browser::MozillaDelegate$2> = ::org_eclipse_swt_browser / "MozillaDelegate$2";
namespace org::eclipse::swt::browser { class OpenWindowListener; }
template<> constexpr auto signature<::org::eclipse::swt::browser::OpenWindowListener> = ::org_eclipse_swt_browser / "OpenWindowListener";
namespace org::eclipse::swt::browser { class ProgressAdapter; }
template<> constexpr auto signature<::org::eclipse::swt::browser::ProgressAdapter> = ::org_eclipse_swt_browser / "ProgressAdapter";
namespace org::eclipse::swt::browser { class ProgressEvent; }
template<> constexpr auto signature<::org::eclipse::swt::browser::ProgressEvent> = ::org_eclipse_swt_browser / "ProgressEvent";
namespace org::eclipse::swt::browser { class ProgressListener; }
template<> constexpr auto signature<::org::eclipse::swt::browser::ProgressListener> = ::org_eclipse_swt_browser / "ProgressListener";
namespace org::eclipse::swt::browser { class PromptAuth2; }
template<> constexpr auto signature<::org::eclipse::swt::browser::PromptAuth2> = ::org_eclipse_swt_browser / "PromptAuth2";
namespace org::eclipse::swt::browser { class PromptAuth2$1; }
template<> constexpr auto signature<::org::eclipse::swt::browser::PromptAuth2$1> = ::org_eclipse_swt_browser / "PromptAuth2$1";
namespace org::eclipse::swt::browser { class PromptAuth2$2; }
template<> constexpr auto signature<::org::eclipse::swt::browser::PromptAuth2$2> = ::org_eclipse_swt_browser / "PromptAuth2$2";
namespace org::eclipse::swt::browser { class PromptDialog; }
template<> constexpr auto signature<::org::eclipse::swt::browser::PromptDialog> = ::org_eclipse_swt_browser / "PromptDialog";
namespace org::eclipse::swt::browser { class PromptDialog$1; }
template<> constexpr auto signature<::org::eclipse::swt::browser::PromptDialog$1> = ::org_eclipse_swt_browser / "PromptDialog$1";
namespace org::eclipse::swt::browser { class PromptDialog$2; }
template<> constexpr auto signature<::org::eclipse::swt::browser::PromptDialog$2> = ::org_eclipse_swt_browser / "PromptDialog$2";
namespace org::eclipse::swt::browser { class PromptDialog$2$1; }
template<> constexpr auto signature<::org::eclipse::swt::browser::PromptDialog$2$1> = ::org_eclipse_swt_browser / "PromptDialog$2$1";
namespace org::eclipse::swt::browser { class PromptDialog$3; }
template<> constexpr auto signature<::org::eclipse::swt::browser::PromptDialog$3> = ::org_eclipse_swt_browser / "PromptDialog$3";
namespace org::eclipse::swt::browser { class PromptDialog$4; }
template<> constexpr auto signature<::org::eclipse::swt::browser::PromptDialog$4> = ::org_eclipse_swt_browser / "PromptDialog$4";
namespace org::eclipse::swt::browser { class PromptDialog$5; }
template<> constexpr auto signature<::org::eclipse::swt::browser::PromptDialog$5> = ::org_eclipse_swt_browser / "PromptDialog$5";
namespace org::eclipse::swt::browser { class PromptDialog$6; }
template<> constexpr auto signature<::org::eclipse::swt::browser::PromptDialog$6> = ::org_eclipse_swt_browser / "PromptDialog$6";
namespace org::eclipse::swt::browser { class PromptFactory; }
template<> constexpr auto signature<::org::eclipse::swt::browser::PromptFactory> = ::org_eclipse_swt_browser / "PromptFactory";
namespace org::eclipse::swt::browser { class PromptFactory$1; }
template<> constexpr auto signature<::org::eclipse::swt::browser::PromptFactory$1> = ::org_eclipse_swt_browser / "PromptFactory$1";
namespace org::eclipse::swt::browser { class PromptFactory$2; }
template<> constexpr auto signature<::org::eclipse::swt::browser::PromptFactory$2> = ::org_eclipse_swt_browser / "PromptFactory$2";
namespace org::eclipse::swt::browser { class PromptService2; }
template<> constexpr auto signature<::org::eclipse::swt::browser::PromptService2> = ::org_eclipse_swt_browser / "PromptService2";
namespace org::eclipse::swt::browser { class PromptService2$1; }
template<> constexpr auto signature<::org::eclipse::swt::browser::PromptService2$1> = ::org_eclipse_swt_browser / "PromptService2$1";
namespace org::eclipse::swt::browser { class PromptService2$2; }
template<> constexpr auto signature<::org::eclipse::swt::browser::PromptService2$2> = ::org_eclipse_swt_browser / "PromptService2$2";
namespace org::eclipse::swt::browser { class PromptService2$3; }
template<> constexpr auto signature<::org::eclipse::swt::browser::PromptService2$3> = ::org_eclipse_swt_browser / "PromptService2$3";
namespace org::eclipse::swt::browser { class PromptService2Factory; }
template<> constexpr auto signature<::org::eclipse::swt::browser::PromptService2Factory> = ::org_eclipse_swt_browser / "PromptService2Factory";
namespace org::eclipse::swt::browser { class PromptService2Factory$1; }
template<> constexpr auto signature<::org::eclipse::swt::browser::PromptService2Factory$1> = ::org_eclipse_swt_browser / "PromptService2Factory$1";
namespace org::eclipse::swt::browser { class PromptService2Factory$2; }
template<> constexpr auto signature<::org::eclipse::swt::browser::PromptService2Factory$2> = ::org_eclipse_swt_browser / "PromptService2Factory$2";
namespace org::eclipse::swt::browser { class Prompter; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Prompter> = ::org_eclipse_swt_browser / "Prompter";
namespace org::eclipse::swt::browser { class Prompter$1; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Prompter$1> = ::org_eclipse_swt_browser / "Prompter$1";
namespace org::eclipse::swt::browser { class Prompter$2; }
template<> constexpr auto signature<::org::eclipse::swt::browser::Prompter$2> = ::org_eclipse_swt_browser / "Prompter$2";
namespace org::eclipse::swt::browser { class SimpleEnumerator; }
template<> constexpr auto signature<::org::eclipse::swt::browser::SimpleEnumerator> = ::org_eclipse_swt_browser / "SimpleEnumerator";
namespace org::eclipse::swt::browser { class SimpleEnumerator$1; }
template<> constexpr auto signature<::org::eclipse::swt::browser::SimpleEnumerator$1> = ::org_eclipse_swt_browser / "SimpleEnumerator$1";
namespace org::eclipse::swt::browser { class SimpleEnumerator$2; }
template<> constexpr auto signature<::org::eclipse::swt::browser::SimpleEnumerator$2> = ::org_eclipse_swt_browser / "SimpleEnumerator$2";
namespace org::eclipse::swt::browser { class StatusTextEvent; }
template<> constexpr auto signature<::org::eclipse::swt::browser::StatusTextEvent> = ::org_eclipse_swt_browser / "StatusTextEvent";
namespace org::eclipse::swt::browser { class StatusTextListener; }
template<> constexpr auto signature<::org::eclipse::swt::browser::StatusTextListener> = ::org_eclipse_swt_browser / "StatusTextListener";
namespace org::eclipse::swt::browser { class TitleEvent; }
template<> constexpr auto signature<::org::eclipse::swt::browser::TitleEvent> = ::org_eclipse_swt_browser / "TitleEvent";
namespace org::eclipse::swt::browser { class TitleListener; }
template<> constexpr auto signature<::org::eclipse::swt::browser::TitleListener> = ::org_eclipse_swt_browser / "TitleListener";
namespace org::eclipse::swt::browser { class VisibilityWindowAdapter; }
template<> constexpr auto signature<::org::eclipse::swt::browser::VisibilityWindowAdapter> = ::org_eclipse_swt_browser / "VisibilityWindowAdapter";
namespace org::eclipse::swt::browser { class VisibilityWindowListener; }
template<> constexpr auto signature<::org::eclipse::swt::browser::VisibilityWindowListener> = ::org_eclipse_swt_browser / "VisibilityWindowListener";
namespace org::eclipse::swt::browser { class WebBrowser; }
template<> constexpr auto signature<::org::eclipse::swt::browser::WebBrowser> = ::org_eclipse_swt_browser / "WebBrowser";
namespace org::eclipse::swt::browser { class WebBrowser$EvaluateFunction; }
template<> constexpr auto signature<::org::eclipse::swt::browser::WebBrowser$EvaluateFunction> = ::org_eclipse_swt_browser / "WebBrowser$EvaluateFunction";
namespace org::eclipse::swt::browser { class WebKit; }
template<> constexpr auto signature<::org::eclipse::swt::browser::WebKit> = ::org_eclipse_swt_browser / "WebKit";
namespace org::eclipse::swt::browser { class WebKit$1; }
template<> constexpr auto signature<::org::eclipse::swt::browser::WebKit$1> = ::org_eclipse_swt_browser / "WebKit$1";
namespace org::eclipse::swt::browser { class WebKit$10; }
template<> constexpr auto signature<::org::eclipse::swt::browser::WebKit$10> = ::org_eclipse_swt_browser / "WebKit$10";
namespace org::eclipse::swt::browser { class WebKit$2; }
template<> constexpr auto signature<::org::eclipse::swt::browser::WebKit$2> = ::org_eclipse_swt_browser / "WebKit$2";
namespace org::eclipse::swt::browser { class WebKit$3; }
template<> constexpr auto signature<::org::eclipse::swt::browser::WebKit$3> = ::org_eclipse_swt_browser / "WebKit$3";
namespace org::eclipse::swt::browser { class WebKit$4; }
template<> constexpr auto signature<::org::eclipse::swt::browser::WebKit$4> = ::org_eclipse_swt_browser / "WebKit$4";
namespace org::eclipse::swt::browser { class WebKit$5; }
template<> constexpr auto signature<::org::eclipse::swt::browser::WebKit$5> = ::org_eclipse_swt_browser / "WebKit$5";
namespace org::eclipse::swt::browser { class WebKit$6; }
template<> constexpr auto signature<::org::eclipse::swt::browser::WebKit$6> = ::org_eclipse_swt_browser / "WebKit$6";
namespace org::eclipse::swt::browser { class WebKit$7; }
template<> constexpr auto signature<::org::eclipse::swt::browser::WebKit$7> = ::org_eclipse_swt_browser / "WebKit$7";
namespace org::eclipse::swt::browser { class WebKit$8; }
template<> constexpr auto signature<::org::eclipse::swt::browser::WebKit$8> = ::org_eclipse_swt_browser / "WebKit$8";
namespace org::eclipse::swt::browser { class WebKit$9; }
template<> constexpr auto signature<::org::eclipse::swt::browser::WebKit$9> = ::org_eclipse_swt_browser / "WebKit$9";
namespace org::eclipse::swt::browser { class WebKit$9$1; }
template<> constexpr auto signature<::org::eclipse::swt::browser::WebKit$9$1> = ::org_eclipse_swt_browser / "WebKit$9$1";
namespace org::eclipse::swt::browser { class WindowCreator2; }
template<> constexpr auto signature<::org::eclipse::swt::browser::WindowCreator2> = ::org_eclipse_swt_browser / "WindowCreator2";
namespace org::eclipse::swt::browser { class WindowCreator2$1; }
template<> constexpr auto signature<::org::eclipse::swt::browser::WindowCreator2$1> = ::org_eclipse_swt_browser / "WindowCreator2$1";
namespace org::eclipse::swt::browser { class WindowCreator2$2; }
template<> constexpr auto signature<::org::eclipse::swt::browser::WindowCreator2$2> = ::org_eclipse_swt_browser / "WindowCreator2$2";
namespace org::eclipse::swt::browser { class WindowCreator2$3; }
template<> constexpr auto signature<::org::eclipse::swt::browser::WindowCreator2$3> = ::org_eclipse_swt_browser / "WindowCreator2$3";
namespace org::eclipse::swt::browser { class WindowCreator2$4; }
template<> constexpr auto signature<::org::eclipse::swt::browser::WindowCreator2$4> = ::org_eclipse_swt_browser / "WindowCreator2$4";
namespace org::eclipse::swt::browser { class WindowCreator2$5; }
template<> constexpr auto signature<::org::eclipse::swt::browser::WindowCreator2$5> = ::org_eclipse_swt_browser / "WindowCreator2$5";
namespace org::eclipse::swt::browser { class WindowEvent; }
template<> constexpr auto signature<::org::eclipse::swt::browser::WindowEvent> = ::org_eclipse_swt_browser / "WindowEvent";
namespace org::eclipse::swt::custom { class AnimatedProgress; }
template<> constexpr auto signature<::org::eclipse::swt::custom::AnimatedProgress> = ::org_eclipse_swt_custom / "AnimatedProgress";
namespace org::eclipse::swt::custom { class AnimatedProgress$1; }
template<> constexpr auto signature<::org::eclipse::swt::custom::AnimatedProgress$1> = ::org_eclipse_swt_custom / "AnimatedProgress$1";
namespace org::eclipse::swt::custom { class AnimatedProgress$2; }
template<> constexpr auto signature<::org::eclipse::swt::custom::AnimatedProgress$2> = ::org_eclipse_swt_custom / "AnimatedProgress$2";
namespace org::eclipse::swt::custom { class AnimatedProgress$3; }
template<> constexpr auto signature<::org::eclipse::swt::custom::AnimatedProgress$3> = ::org_eclipse_swt_custom / "AnimatedProgress$3";
namespace org::eclipse::swt::custom { class AnimatedProgress$4; }
template<> constexpr auto signature<::org::eclipse::swt::custom::AnimatedProgress$4> = ::org_eclipse_swt_custom / "AnimatedProgress$4";
namespace org::eclipse::swt::custom { class BidiSegmentEvent; }
template<> constexpr auto signature<::org::eclipse::swt::custom::BidiSegmentEvent> = ::org_eclipse_swt_custom / "BidiSegmentEvent";
namespace org::eclipse::swt::custom { class BidiSegmentListener; }
template<> constexpr auto signature<::org::eclipse::swt::custom::BidiSegmentListener> = ::org_eclipse_swt_custom / "BidiSegmentListener";
namespace org::eclipse::swt::custom { class Bullet; }
template<> constexpr auto signature<::org::eclipse::swt::custom::Bullet> = ::org_eclipse_swt_custom / "Bullet";
namespace org::eclipse::swt::custom { class BusyIndicator; }
template<> constexpr auto signature<::org::eclipse::swt::custom::BusyIndicator> = ::org_eclipse_swt_custom / "BusyIndicator";
namespace org::eclipse::swt::custom { class CBanner; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CBanner> = ::org_eclipse_swt_custom / "CBanner";
namespace org::eclipse::swt::custom { class CBanner$1; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CBanner$1> = ::org_eclipse_swt_custom / "CBanner$1";
namespace org::eclipse::swt::custom { class CBannerLayout; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CBannerLayout> = ::org_eclipse_swt_custom / "CBannerLayout";
namespace org::eclipse::swt::custom { class CCombo; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CCombo> = ::org_eclipse_swt_custom / "CCombo";
namespace org::eclipse::swt::custom { class CCombo$1; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CCombo$1> = ::org_eclipse_swt_custom / "CCombo$1";
namespace org::eclipse::swt::custom { class CCombo$1$1; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CCombo$1$1> = ::org_eclipse_swt_custom / "CCombo$1$1";
namespace org::eclipse::swt::custom { class CCombo$2; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CCombo$2> = ::org_eclipse_swt_custom / "CCombo$2";
namespace org::eclipse::swt::custom { class CCombo$3; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CCombo$3> = ::org_eclipse_swt_custom / "CCombo$3";
namespace org::eclipse::swt::custom { class CCombo$4; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CCombo$4> = ::org_eclipse_swt_custom / "CCombo$4";
namespace org::eclipse::swt::custom { class CCombo$5; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CCombo$5> = ::org_eclipse_swt_custom / "CCombo$5";
namespace org::eclipse::swt::custom { class CCombo$6; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CCombo$6> = ::org_eclipse_swt_custom / "CCombo$6";
namespace org::eclipse::swt::custom { class CCombo$7; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CCombo$7> = ::org_eclipse_swt_custom / "CCombo$7";
namespace org::eclipse::swt::custom { class CCombo$8; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CCombo$8> = ::org_eclipse_swt_custom / "CCombo$8";
namespace org::eclipse::swt::custom { class CLabel; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CLabel> = ::org_eclipse_swt_custom / "CLabel";
namespace org::eclipse::swt::custom { class CLabel$1; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CLabel$1> = ::org_eclipse_swt_custom / "CLabel$1";
namespace org::eclipse::swt::custom { class CLabel$2; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CLabel$2> = ::org_eclipse_swt_custom / "CLabel$2";
namespace org::eclipse::swt::custom { class CLabel$3; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CLabel$3> = ::org_eclipse_swt_custom / "CLabel$3";
namespace org::eclipse::swt::custom { class CLabel$4; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CLabel$4> = ::org_eclipse_swt_custom / "CLabel$4";
namespace org::eclipse::swt::custom { class CLabel$5; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CLabel$5> = ::org_eclipse_swt_custom / "CLabel$5";
namespace org::eclipse::swt::custom { class CLayoutData; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CLayoutData> = ::org_eclipse_swt_custom / "CLayoutData";
namespace org::eclipse::swt::custom { class CTabFolder; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CTabFolder> = ::org_eclipse_swt_custom / "CTabFolder";
namespace org::eclipse::swt::custom { class CTabFolder$1; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CTabFolder$1> = ::org_eclipse_swt_custom / "CTabFolder$1";
namespace org::eclipse::swt::custom { class CTabFolder$10; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CTabFolder$10> = ::org_eclipse_swt_custom / "CTabFolder$10";
namespace org::eclipse::swt::custom { class CTabFolder$2; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CTabFolder$2> = ::org_eclipse_swt_custom / "CTabFolder$2";
namespace org::eclipse::swt::custom { class CTabFolder$3; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CTabFolder$3> = ::org_eclipse_swt_custom / "CTabFolder$3";
namespace org::eclipse::swt::custom { class CTabFolder$4; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CTabFolder$4> = ::org_eclipse_swt_custom / "CTabFolder$4";
namespace org::eclipse::swt::custom { class CTabFolder$5; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CTabFolder$5> = ::org_eclipse_swt_custom / "CTabFolder$5";
namespace org::eclipse::swt::custom { class CTabFolder$6; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CTabFolder$6> = ::org_eclipse_swt_custom / "CTabFolder$6";
namespace org::eclipse::swt::custom { class CTabFolder$7; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CTabFolder$7> = ::org_eclipse_swt_custom / "CTabFolder$7";
namespace org::eclipse::swt::custom { class CTabFolder$8; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CTabFolder$8> = ::org_eclipse_swt_custom / "CTabFolder$8";
namespace org::eclipse::swt::custom { class CTabFolder$9; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CTabFolder$9> = ::org_eclipse_swt_custom / "CTabFolder$9";
namespace org::eclipse::swt::custom { class CTabFolder2Adapter; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CTabFolder2Adapter> = ::org_eclipse_swt_custom / "CTabFolder2Adapter";
namespace org::eclipse::swt::custom { class CTabFolder2Listener; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CTabFolder2Listener> = ::org_eclipse_swt_custom / "CTabFolder2Listener";
namespace org::eclipse::swt::custom { class CTabFolderAdapter; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CTabFolderAdapter> = ::org_eclipse_swt_custom / "CTabFolderAdapter";
namespace org::eclipse::swt::custom { class CTabFolderEvent; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CTabFolderEvent> = ::org_eclipse_swt_custom / "CTabFolderEvent";
namespace org::eclipse::swt::custom { class CTabFolderLayout; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CTabFolderLayout> = ::org_eclipse_swt_custom / "CTabFolderLayout";
namespace org::eclipse::swt::custom { class CTabFolderListener; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CTabFolderListener> = ::org_eclipse_swt_custom / "CTabFolderListener";
namespace org::eclipse::swt::custom { class CTabFolderRenderer; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CTabFolderRenderer> = ::org_eclipse_swt_custom / "CTabFolderRenderer";
namespace org::eclipse::swt::custom { class CTabItem; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CTabItem> = ::org_eclipse_swt_custom / "CTabItem";
namespace org::eclipse::swt::custom { class CaretEvent; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CaretEvent> = ::org_eclipse_swt_custom / "CaretEvent";
namespace org::eclipse::swt::custom { class CaretListener; }
template<> constexpr auto signature<::org::eclipse::swt::custom::CaretListener> = ::org_eclipse_swt_custom / "CaretListener";
namespace org::eclipse::swt::custom { class ControlEditor; }
template<> constexpr auto signature<::org::eclipse::swt::custom::ControlEditor> = ::org_eclipse_swt_custom / "ControlEditor";
namespace org::eclipse::swt::custom { class ControlEditor$1; }
template<> constexpr auto signature<::org::eclipse::swt::custom::ControlEditor$1> = ::org_eclipse_swt_custom / "ControlEditor$1";
namespace org::eclipse::swt::custom { class ControlEditor$2; }
template<> constexpr auto signature<::org::eclipse::swt::custom::ControlEditor$2> = ::org_eclipse_swt_custom / "ControlEditor$2";
namespace org::eclipse::swt::custom { class DefaultContent; }
template<> constexpr auto signature<::org::eclipse::swt::custom::DefaultContent> = ::org_eclipse_swt_custom / "DefaultContent";
namespace org::eclipse::swt::custom { class ExtendedModifyEvent; }
template<> constexpr auto signature<::org::eclipse::swt::custom::ExtendedModifyEvent> = ::org_eclipse_swt_custom / "ExtendedModifyEvent";
namespace org::eclipse::swt::custom { class ExtendedModifyListener; }
template<> constexpr auto signature<::org::eclipse::swt::custom::ExtendedModifyListener> = ::org_eclipse_swt_custom / "ExtendedModifyListener";
namespace org::eclipse::swt::custom { class LineBackgroundEvent; }
template<> constexpr auto signature<::org::eclipse::swt::custom::LineBackgroundEvent> = ::org_eclipse_swt_custom / "LineBackgroundEvent";
namespace org::eclipse::swt::custom { class LineBackgroundListener; }
template<> constexpr auto signature<::org::eclipse::swt::custom::LineBackgroundListener> = ::org_eclipse_swt_custom / "LineBackgroundListener";
namespace org::eclipse::swt::custom { class LineStyleEvent; }
template<> constexpr auto signature<::org::eclipse::swt::custom::LineStyleEvent> = ::org_eclipse_swt_custom / "LineStyleEvent";
namespace org::eclipse::swt::custom { class LineStyleListener; }
template<> constexpr auto signature<::org::eclipse::swt::custom::LineStyleListener> = ::org_eclipse_swt_custom / "LineStyleListener";
namespace org::eclipse::swt::custom { class MovementEvent; }
template<> constexpr auto signature<::org::eclipse::swt::custom::MovementEvent> = ::org_eclipse_swt_custom / "MovementEvent";
namespace org::eclipse::swt::custom { class MovementListener; }
template<> constexpr auto signature<::org::eclipse::swt::custom::MovementListener> = ::org_eclipse_swt_custom / "MovementListener";
namespace org::eclipse::swt::custom { class PaintObjectEvent; }
template<> constexpr auto signature<::org::eclipse::swt::custom::PaintObjectEvent> = ::org_eclipse_swt_custom / "PaintObjectEvent";
namespace org::eclipse::swt::custom { class PaintObjectListener; }
template<> constexpr auto signature<::org::eclipse::swt::custom::PaintObjectListener> = ::org_eclipse_swt_custom / "PaintObjectListener";
namespace org::eclipse::swt::custom { class PopupList; }
template<> constexpr auto signature<::org::eclipse::swt::custom::PopupList> = ::org_eclipse_swt_custom / "PopupList";
namespace org::eclipse::swt::custom { class PopupList$1; }
template<> constexpr auto signature<::org::eclipse::swt::custom::PopupList$1> = ::org_eclipse_swt_custom / "PopupList$1";
namespace org::eclipse::swt::custom { class PopupList$2; }
template<> constexpr auto signature<::org::eclipse::swt::custom::PopupList$2> = ::org_eclipse_swt_custom / "PopupList$2";
namespace org::eclipse::swt::custom { class PopupList$3; }
template<> constexpr auto signature<::org::eclipse::swt::custom::PopupList$3> = ::org_eclipse_swt_custom / "PopupList$3";
namespace org::eclipse::swt::custom { class PopupList$4; }
template<> constexpr auto signature<::org::eclipse::swt::custom::PopupList$4> = ::org_eclipse_swt_custom / "PopupList$4";
namespace org::eclipse::swt::custom { class ST; }
template<> constexpr auto signature<::org::eclipse::swt::custom::ST> = ::org_eclipse_swt_custom / "ST";
namespace org::eclipse::swt::custom { class SashForm; }
template<> constexpr auto signature<::org::eclipse::swt::custom::SashForm> = ::org_eclipse_swt_custom / "SashForm";
namespace org::eclipse::swt::custom { class SashForm$1; }
template<> constexpr auto signature<::org::eclipse::swt::custom::SashForm$1> = ::org_eclipse_swt_custom / "SashForm$1";
namespace org::eclipse::swt::custom { class SashFormData; }
template<> constexpr auto signature<::org::eclipse::swt::custom::SashFormData> = ::org_eclipse_swt_custom / "SashFormData";
namespace org::eclipse::swt::custom { class SashFormLayout; }
template<> constexpr auto signature<::org::eclipse::swt::custom::SashFormLayout> = ::org_eclipse_swt_custom / "SashFormLayout";
namespace org::eclipse::swt::custom { class ScrolledComposite; }
template<> constexpr auto signature<::org::eclipse::swt::custom::ScrolledComposite> = ::org_eclipse_swt_custom / "ScrolledComposite";
namespace org::eclipse::swt::custom { class ScrolledComposite$1; }
template<> constexpr auto signature<::org::eclipse::swt::custom::ScrolledComposite$1> = ::org_eclipse_swt_custom / "ScrolledComposite$1";
namespace org::eclipse::swt::custom { class ScrolledComposite$2; }
template<> constexpr auto signature<::org::eclipse::swt::custom::ScrolledComposite$2> = ::org_eclipse_swt_custom / "ScrolledComposite$2";
namespace org::eclipse::swt::custom { class ScrolledComposite$3; }
template<> constexpr auto signature<::org::eclipse::swt::custom::ScrolledComposite$3> = ::org_eclipse_swt_custom / "ScrolledComposite$3";
namespace org::eclipse::swt::custom { class ScrolledComposite$4; }
template<> constexpr auto signature<::org::eclipse::swt::custom::ScrolledComposite$4> = ::org_eclipse_swt_custom / "ScrolledComposite$4";
namespace org::eclipse::swt::custom { class ScrolledComposite$5; }
template<> constexpr auto signature<::org::eclipse::swt::custom::ScrolledComposite$5> = ::org_eclipse_swt_custom / "ScrolledComposite$5";
namespace org::eclipse::swt::custom { class ScrolledCompositeLayout; }
template<> constexpr auto signature<::org::eclipse::swt::custom::ScrolledCompositeLayout> = ::org_eclipse_swt_custom / "ScrolledCompositeLayout";
namespace org::eclipse::swt::custom { class StackLayout; }
template<> constexpr auto signature<::org::eclipse::swt::custom::StackLayout> = ::org_eclipse_swt_custom / "StackLayout";
namespace org::eclipse::swt::custom { class StyleRange; }
template<> constexpr auto signature<::org::eclipse::swt::custom::StyleRange> = ::org_eclipse_swt_custom / "StyleRange";
namespace org::eclipse::swt::custom { class StyledText; }
template<> constexpr auto signature<::org::eclipse::swt::custom::StyledText> = ::org_eclipse_swt_custom / "StyledText";
namespace org::eclipse::swt::custom { class StyledText$1; }
template<> constexpr auto signature<::org::eclipse::swt::custom::StyledText$1> = ::org_eclipse_swt_custom / "StyledText$1";
namespace org::eclipse::swt::custom { class StyledText$10; }
template<> constexpr auto signature<::org::eclipse::swt::custom::StyledText$10> = ::org_eclipse_swt_custom / "StyledText$10";
namespace org::eclipse::swt::custom { class StyledText$11; }
template<> constexpr auto signature<::org::eclipse::swt::custom::StyledText$11> = ::org_eclipse_swt_custom / "StyledText$11";
namespace org::eclipse::swt::custom { class StyledText$12; }
template<> constexpr auto signature<::org::eclipse::swt::custom::StyledText$12> = ::org_eclipse_swt_custom / "StyledText$12";
namespace org::eclipse::swt::custom { class StyledText$13; }
template<> constexpr auto signature<::org::eclipse::swt::custom::StyledText$13> = ::org_eclipse_swt_custom / "StyledText$13";
namespace org::eclipse::swt::custom { class StyledText$14; }
template<> constexpr auto signature<::org::eclipse::swt::custom::StyledText$14> = ::org_eclipse_swt_custom / "StyledText$14";
namespace org::eclipse::swt::custom { class StyledText$15; }
template<> constexpr auto signature<::org::eclipse::swt::custom::StyledText$15> = ::org_eclipse_swt_custom / "StyledText$15";
namespace org::eclipse::swt::custom { class StyledText$16; }
template<> constexpr auto signature<::org::eclipse::swt::custom::StyledText$16> = ::org_eclipse_swt_custom / "StyledText$16";
namespace org::eclipse::swt::custom { class StyledText$2; }
template<> constexpr auto signature<::org::eclipse::swt::custom::StyledText$2> = ::org_eclipse_swt_custom / "StyledText$2";
namespace org::eclipse::swt::custom { class StyledText$3; }
template<> constexpr auto signature<::org::eclipse::swt::custom::StyledText$3> = ::org_eclipse_swt_custom / "StyledText$3";
namespace org::eclipse::swt::custom { class StyledText$4; }
template<> constexpr auto signature<::org::eclipse::swt::custom::StyledText$4> = ::org_eclipse_swt_custom / "StyledText$4";
namespace org::eclipse::swt::custom { class StyledText$5; }
template<> constexpr auto signature<::org::eclipse::swt::custom::StyledText$5> = ::org_eclipse_swt_custom / "StyledText$5";
namespace org::eclipse::swt::custom { class StyledText$6; }
template<> constexpr auto signature<::org::eclipse::swt::custom::StyledText$6> = ::org_eclipse_swt_custom / "StyledText$6";
namespace org::eclipse::swt::custom { class StyledText$7; }
template<> constexpr auto signature<::org::eclipse::swt::custom::StyledText$7> = ::org_eclipse_swt_custom / "StyledText$7";
namespace org::eclipse::swt::custom { class StyledText$8; }
template<> constexpr auto signature<::org::eclipse::swt::custom::StyledText$8> = ::org_eclipse_swt_custom / "StyledText$8";
namespace org::eclipse::swt::custom { class StyledText$9; }
template<> constexpr auto signature<::org::eclipse::swt::custom::StyledText$9> = ::org_eclipse_swt_custom / "StyledText$9";
namespace org::eclipse::swt::custom { class StyledText$Printing; }
template<> constexpr auto signature<::org::eclipse::swt::custom::StyledText$Printing> = ::org_eclipse_swt_custom / "StyledText$Printing";
namespace org::eclipse::swt::custom { class StyledText$RTFWriter; }
template<> constexpr auto signature<::org::eclipse::swt::custom::StyledText$RTFWriter> = ::org_eclipse_swt_custom / "StyledText$RTFWriter";
namespace org::eclipse::swt::custom { class StyledText$TextWriter; }
template<> constexpr auto signature<::org::eclipse::swt::custom::StyledText$TextWriter> = ::org_eclipse_swt_custom / "StyledText$TextWriter";
namespace org::eclipse::swt::custom { class StyledTextContent; }
template<> constexpr auto signature<::org::eclipse::swt::custom::StyledTextContent> = ::org_eclipse_swt_custom / "StyledTextContent";
namespace org::eclipse::swt::custom { class StyledTextDropTargetEffect; }
template<> constexpr auto signature<::org::eclipse::swt::custom::StyledTextDropTargetEffect> = ::org_eclipse_swt_custom / "StyledTextDropTargetEffect";
namespace org::eclipse::swt::custom { class StyledTextDropTargetEffect$1; }
template<> constexpr auto signature<::org::eclipse::swt::custom::StyledTextDropTargetEffect$1> = ::org_eclipse_swt_custom / "StyledTextDropTargetEffect$1";
namespace org::eclipse::swt::custom { class StyledTextEvent; }
template<> constexpr auto signature<::org::eclipse::swt::custom::StyledTextEvent> = ::org_eclipse_swt_custom / "StyledTextEvent";
namespace org::eclipse::swt::custom { class StyledTextListener; }
template<> constexpr auto signature<::org::eclipse::swt::custom::StyledTextListener> = ::org_eclipse_swt_custom / "StyledTextListener";
namespace org::eclipse::swt::custom { class StyledTextPrintOptions; }
template<> constexpr auto signature<::org::eclipse::swt::custom::StyledTextPrintOptions> = ::org_eclipse_swt_custom / "StyledTextPrintOptions";
namespace org::eclipse::swt::custom { class StyledTextRenderer; }
template<> constexpr auto signature<::org::eclipse::swt::custom::StyledTextRenderer> = ::org_eclipse_swt_custom / "StyledTextRenderer";
namespace org::eclipse::swt::custom { class StyledTextRenderer$1; }
template<> constexpr auto signature<::org::eclipse::swt::custom::StyledTextRenderer$1> = ::org_eclipse_swt_custom / "StyledTextRenderer$1";
namespace org::eclipse::swt::custom { class StyledTextRenderer$LineInfo; }
template<> constexpr auto signature<::org::eclipse::swt::custom::StyledTextRenderer$LineInfo> = ::org_eclipse_swt_custom / "StyledTextRenderer$LineInfo";
namespace org::eclipse::swt::custom { class TableCursor; }
template<> constexpr auto signature<::org::eclipse::swt::custom::TableCursor> = ::org_eclipse_swt_custom / "TableCursor";
namespace org::eclipse::swt::custom { class TableCursor$1; }
template<> constexpr auto signature<::org::eclipse::swt::custom::TableCursor$1> = ::org_eclipse_swt_custom / "TableCursor$1";
namespace org::eclipse::swt::custom { class TableCursor$2; }
template<> constexpr auto signature<::org::eclipse::swt::custom::TableCursor$2> = ::org_eclipse_swt_custom / "TableCursor$2";
namespace org::eclipse::swt::custom { class TableCursor$3; }
template<> constexpr auto signature<::org::eclipse::swt::custom::TableCursor$3> = ::org_eclipse_swt_custom / "TableCursor$3";
namespace org::eclipse::swt::custom { class TableCursor$4; }
template<> constexpr auto signature<::org::eclipse::swt::custom::TableCursor$4> = ::org_eclipse_swt_custom / "TableCursor$4";
namespace org::eclipse::swt::custom { class TableCursor$5; }
template<> constexpr auto signature<::org::eclipse::swt::custom::TableCursor$5> = ::org_eclipse_swt_custom / "TableCursor$5";
namespace org::eclipse::swt::custom { class TableCursor$6; }
template<> constexpr auto signature<::org::eclipse::swt::custom::TableCursor$6> = ::org_eclipse_swt_custom / "TableCursor$6";
namespace org::eclipse::swt::custom { class TableCursor$7; }
template<> constexpr auto signature<::org::eclipse::swt::custom::TableCursor$7> = ::org_eclipse_swt_custom / "TableCursor$7";
namespace org::eclipse::swt::custom { class TableEditor; }
template<> constexpr auto signature<::org::eclipse::swt::custom::TableEditor> = ::org_eclipse_swt_custom / "TableEditor";
namespace org::eclipse::swt::custom { class TableEditor$1; }
template<> constexpr auto signature<::org::eclipse::swt::custom::TableEditor$1> = ::org_eclipse_swt_custom / "TableEditor$1";
namespace org::eclipse::swt::custom { class TableEditor$2; }
template<> constexpr auto signature<::org::eclipse::swt::custom::TableEditor$2> = ::org_eclipse_swt_custom / "TableEditor$2";
namespace org::eclipse::swt::custom { class TableTree; }
template<> constexpr auto signature<::org::eclipse::swt::custom::TableTree> = ::org_eclipse_swt_custom / "TableTree";
namespace org::eclipse::swt::custom { class TableTree$1; }
template<> constexpr auto signature<::org::eclipse::swt::custom::TableTree$1> = ::org_eclipse_swt_custom / "TableTree$1";
namespace org::eclipse::swt::custom { class TableTree$2; }
template<> constexpr auto signature<::org::eclipse::swt::custom::TableTree$2> = ::org_eclipse_swt_custom / "TableTree$2";
namespace org::eclipse::swt::custom { class TableTreeEditor; }
template<> constexpr auto signature<::org::eclipse::swt::custom::TableTreeEditor> = ::org_eclipse_swt_custom / "TableTreeEditor";
namespace org::eclipse::swt::custom { class TableTreeEditor$1; }
template<> constexpr auto signature<::org::eclipse::swt::custom::TableTreeEditor$1> = ::org_eclipse_swt_custom / "TableTreeEditor$1";
namespace org::eclipse::swt::custom { class TableTreeEditor$1$1; }
template<> constexpr auto signature<::org::eclipse::swt::custom::TableTreeEditor$1$1> = ::org_eclipse_swt_custom / "TableTreeEditor$1$1";
namespace org::eclipse::swt::custom { class TableTreeEditor$2; }
template<> constexpr auto signature<::org::eclipse::swt::custom::TableTreeEditor$2> = ::org_eclipse_swt_custom / "TableTreeEditor$2";
namespace org::eclipse::swt::custom { class TableTreeItem; }
template<> constexpr auto signature<::org::eclipse::swt::custom::TableTreeItem> = ::org_eclipse_swt_custom / "TableTreeItem";
namespace org::eclipse::swt::custom { class TextChangeListener; }
template<> constexpr auto signature<::org::eclipse::swt::custom::TextChangeListener> = ::org_eclipse_swt_custom / "TextChangeListener";
namespace org::eclipse::swt::custom { class TextChangedEvent; }
template<> constexpr auto signature<::org::eclipse::swt::custom::TextChangedEvent> = ::org_eclipse_swt_custom / "TextChangedEvent";
namespace org::eclipse::swt::custom { class TextChangingEvent; }
template<> constexpr auto signature<::org::eclipse::swt::custom::TextChangingEvent> = ::org_eclipse_swt_custom / "TextChangingEvent";
namespace org::eclipse::swt::custom { class TreeCursor; }
template<> constexpr auto signature<::org::eclipse::swt::custom::TreeCursor> = ::org_eclipse_swt_custom / "TreeCursor";
namespace org::eclipse::swt::custom { class TreeCursor$1; }
template<> constexpr auto signature<::org::eclipse::swt::custom::TreeCursor$1> = ::org_eclipse_swt_custom / "TreeCursor$1";
namespace org::eclipse::swt::custom { class TreeCursor$2; }
template<> constexpr auto signature<::org::eclipse::swt::custom::TreeCursor$2> = ::org_eclipse_swt_custom / "TreeCursor$2";
namespace org::eclipse::swt::custom { class TreeCursor$3; }
template<> constexpr auto signature<::org::eclipse::swt::custom::TreeCursor$3> = ::org_eclipse_swt_custom / "TreeCursor$3";
namespace org::eclipse::swt::custom { class TreeCursor$4; }
template<> constexpr auto signature<::org::eclipse::swt::custom::TreeCursor$4> = ::org_eclipse_swt_custom / "TreeCursor$4";
namespace org::eclipse::swt::custom { class TreeCursor$5; }
template<> constexpr auto signature<::org::eclipse::swt::custom::TreeCursor$5> = ::org_eclipse_swt_custom / "TreeCursor$5";
namespace org::eclipse::swt::custom { class TreeCursor$6; }
template<> constexpr auto signature<::org::eclipse::swt::custom::TreeCursor$6> = ::org_eclipse_swt_custom / "TreeCursor$6";
namespace org::eclipse::swt::custom { class TreeCursor$7; }
template<> constexpr auto signature<::org::eclipse::swt::custom::TreeCursor$7> = ::org_eclipse_swt_custom / "TreeCursor$7";
namespace org::eclipse::swt::custom { class TreeCursor$8; }
template<> constexpr auto signature<::org::eclipse::swt::custom::TreeCursor$8> = ::org_eclipse_swt_custom / "TreeCursor$8";
namespace org::eclipse::swt::custom { class TreeCursor$9; }
template<> constexpr auto signature<::org::eclipse::swt::custom::TreeCursor$9> = ::org_eclipse_swt_custom / "TreeCursor$9";
namespace org::eclipse::swt::custom { class TreeEditor; }
template<> constexpr auto signature<::org::eclipse::swt::custom::TreeEditor> = ::org_eclipse_swt_custom / "TreeEditor";
namespace org::eclipse::swt::custom { class TreeEditor$1; }
template<> constexpr auto signature<::org::eclipse::swt::custom::TreeEditor$1> = ::org_eclipse_swt_custom / "TreeEditor$1";
namespace org::eclipse::swt::custom { class TreeEditor$2; }
template<> constexpr auto signature<::org::eclipse::swt::custom::TreeEditor$2> = ::org_eclipse_swt_custom / "TreeEditor$2";
namespace org::eclipse::swt::custom { class TreeEditor$3; }
template<> constexpr auto signature<::org::eclipse::swt::custom::TreeEditor$3> = ::org_eclipse_swt_custom / "TreeEditor$3";
namespace org::eclipse::swt::custom { class TreeEditor$3$1; }
template<> constexpr auto signature<::org::eclipse::swt::custom::TreeEditor$3$1> = ::org_eclipse_swt_custom / "TreeEditor$3$1";
namespace org::eclipse::swt::custom { class VerifyKeyListener; }
template<> constexpr auto signature<::org::eclipse::swt::custom::VerifyKeyListener> = ::org_eclipse_swt_custom / "VerifyKeyListener";
namespace org::eclipse::swt::custom { class ViewForm; }
template<> constexpr auto signature<::org::eclipse::swt::custom::ViewForm> = ::org_eclipse_swt_custom / "ViewForm";
namespace org::eclipse::swt::custom { class ViewForm$1; }
template<> constexpr auto signature<::org::eclipse::swt::custom::ViewForm$1> = ::org_eclipse_swt_custom / "ViewForm$1";
namespace org::eclipse::swt::custom { class ViewFormLayout; }
template<> constexpr auto signature<::org::eclipse::swt::custom::ViewFormLayout> = ::org_eclipse_swt_custom / "ViewFormLayout";
namespace org::eclipse::swt::dnd { class ByteArrayTransfer; }
template<> constexpr auto signature<::org::eclipse::swt::dnd::ByteArrayTransfer> = ::org_eclipse_swt_dnd / "ByteArrayTransfer";
namespace org::eclipse::swt::dnd { class Clipboard; }
template<> constexpr auto signature<::org::eclipse::swt::dnd::Clipboard> = ::org_eclipse_swt_dnd / "Clipboard";
namespace org::eclipse::swt::dnd { class ClipboardProxy; }
template<> constexpr auto signature<::org::eclipse::swt::dnd::ClipboardProxy> = ::org_eclipse_swt_dnd / "ClipboardProxy";
namespace org::eclipse::swt::dnd { class ClipboardProxy$1; }
template<> constexpr auto signature<::org::eclipse::swt::dnd::ClipboardProxy$1> = ::org_eclipse_swt_dnd / "ClipboardProxy$1";
namespace org::eclipse::swt::dnd { class DND; }
template<> constexpr auto signature<::org::eclipse::swt::dnd::DND> = ::org_eclipse_swt_dnd / "DND";
namespace org::eclipse::swt::dnd { class DNDEvent; }
template<> constexpr auto signature<::org::eclipse::swt::dnd::DNDEvent> = ::org_eclipse_swt_dnd / "DNDEvent";
namespace org::eclipse::swt::dnd { class DNDListener; }
template<> constexpr auto signature<::org::eclipse::swt::dnd::DNDListener> = ::org_eclipse_swt_dnd / "DNDListener";
namespace org::eclipse::swt::dnd { class DragSource; }
template<> constexpr auto signature<::org::eclipse::swt::dnd::DragSource> = ::org_eclipse_swt_dnd / "DragSource";
namespace org::eclipse::swt::dnd { class DragSource$1; }
template<> constexpr auto signature<::org::eclipse::swt::dnd::DragSource$1> = ::org_eclipse_swt_dnd / "DragSource$1";
namespace org::eclipse::swt::dnd { class DragSource$2; }
template<> constexpr auto signature<::org::eclipse::swt::dnd::DragSource$2> = ::org_eclipse_swt_dnd / "DragSource$2";
namespace org::eclipse::swt::dnd { class DragSourceAdapter; }
template<> constexpr auto signature<::org::eclipse::swt::dnd::DragSourceAdapter> = ::org_eclipse_swt_dnd / "DragSourceAdapter";
namespace org::eclipse::swt::dnd { class DragSourceEffect; }
template<> constexpr auto signature<::org::eclipse::swt::dnd::DragSourceEffect> = ::org_eclipse_swt_dnd / "DragSourceEffect";
namespace org::eclipse::swt::dnd { class DragSourceEvent; }
template<> constexpr auto signature<::org::eclipse::swt::dnd::DragSourceEvent> = ::org_eclipse_swt_dnd / "DragSourceEvent";
namespace org::eclipse::swt::dnd { class DragSourceListener; }
template<> constexpr auto signature<::org::eclipse::swt::dnd::DragSourceListener> = ::org_eclipse_swt_dnd / "DragSourceListener";
namespace org::eclipse::swt::dnd { class DropTarget; }
template<> constexpr auto signature<::org::eclipse::swt::dnd::DropTarget> = ::org_eclipse_swt_dnd / "DropTarget";
namespace org::eclipse::swt::dnd { class DropTarget$1; }
template<> constexpr auto signature<::org::eclipse::swt::dnd::DropTarget$1> = ::org_eclipse_swt_dnd / "DropTarget$1";
namespace org::eclipse::swt::dnd { class DropTarget$2; }
template<> constexpr auto signature<::org::eclipse::swt::dnd::DropTarget$2> = ::org_eclipse_swt_dnd / "DropTarget$2";
namespace org::eclipse::swt::dnd { class DropTarget$3; }
template<> constexpr auto signature<::org::eclipse::swt::dnd::DropTarget$3> = ::org_eclipse_swt_dnd / "DropTarget$3";
namespace org::eclipse::swt::dnd { class DropTargetAdapter; }
template<> constexpr auto signature<::org::eclipse::swt::dnd::DropTargetAdapter> = ::org_eclipse_swt_dnd / "DropTargetAdapter";
namespace org::eclipse::swt::dnd { class DropTargetEffect; }
template<> constexpr auto signature<::org::eclipse::swt::dnd::DropTargetEffect> = ::org_eclipse_swt_dnd / "DropTargetEffect";
namespace org::eclipse::swt::dnd { class DropTargetEvent; }
template<> constexpr auto signature<::org::eclipse::swt::dnd::DropTargetEvent> = ::org_eclipse_swt_dnd / "DropTargetEvent";
namespace org::eclipse::swt::dnd { class DropTargetListener; }
template<> constexpr auto signature<::org::eclipse::swt::dnd::DropTargetListener> = ::org_eclipse_swt_dnd / "DropTargetListener";
namespace org::eclipse::swt::dnd { class FileTransfer; }
template<> constexpr auto signature<::org::eclipse::swt::dnd::FileTransfer> = ::org_eclipse_swt_dnd / "FileTransfer";
namespace org::eclipse::swt::dnd { class HTMLTransfer; }
template<> constexpr auto signature<::org::eclipse::swt::dnd::HTMLTransfer> = ::org_eclipse_swt_dnd / "HTMLTransfer";
namespace org::eclipse::swt::dnd { class ImageTransfer; }
template<> constexpr auto signature<::org::eclipse::swt::dnd::ImageTransfer> = ::org_eclipse_swt_dnd / "ImageTransfer";
namespace org::eclipse::swt::dnd { class RTFTransfer; }
template<> constexpr auto signature<::org::eclipse::swt::dnd::RTFTransfer> = ::org_eclipse_swt_dnd / "RTFTransfer";
namespace org::eclipse::swt::dnd { class TableDragSourceEffect; }
template<> constexpr auto signature<::org::eclipse::swt::dnd::TableDragSourceEffect> = ::org_eclipse_swt_dnd / "TableDragSourceEffect";
namespace org::eclipse::swt::dnd { class TableDropTargetEffect; }
template<> constexpr auto signature<::org::eclipse::swt::dnd::TableDropTargetEffect> = ::org_eclipse_swt_dnd / "TableDropTargetEffect";
namespace org::eclipse::swt::dnd { class TextTransfer; }
template<> constexpr auto signature<::org::eclipse::swt::dnd::TextTransfer> = ::org_eclipse_swt_dnd / "TextTransfer";
namespace org::eclipse::swt::dnd { class Transfer; }
template<> constexpr auto signature<::org::eclipse::swt::dnd::Transfer> = ::org_eclipse_swt_dnd / "Transfer";
namespace org::eclipse::swt::dnd { class TransferData; }
template<> constexpr auto signature<::org::eclipse::swt::dnd::TransferData> = ::org_eclipse_swt_dnd / "TransferData";
namespace org::eclipse::swt::dnd { class TreeDragSourceEffect; }
template<> constexpr auto signature<::org::eclipse::swt::dnd::TreeDragSourceEffect> = ::org_eclipse_swt_dnd / "TreeDragSourceEffect";
namespace org::eclipse::swt::dnd { class TreeDropTargetEffect; }
template<> constexpr auto signature<::org::eclipse::swt::dnd::TreeDropTargetEffect> = ::org_eclipse_swt_dnd / "TreeDropTargetEffect";
namespace org::eclipse::swt::dnd { class URLTransfer; }
template<> constexpr auto signature<::org::eclipse::swt::dnd::URLTransfer> = ::org_eclipse_swt_dnd / "URLTransfer";
namespace org::eclipse::swt::events { class ArmEvent; }
template<> constexpr auto signature<::org::eclipse::swt::events::ArmEvent> = ::org_eclipse_swt_events / "ArmEvent";
namespace org::eclipse::swt::events { class ArmListener; }
template<> constexpr auto signature<::org::eclipse::swt::events::ArmListener> = ::org_eclipse_swt_events / "ArmListener";
namespace org::eclipse::swt::events { class ControlAdapter; }
template<> constexpr auto signature<::org::eclipse::swt::events::ControlAdapter> = ::org_eclipse_swt_events / "ControlAdapter";
namespace org::eclipse::swt::events { class ControlEvent; }
template<> constexpr auto signature<::org::eclipse::swt::events::ControlEvent> = ::org_eclipse_swt_events / "ControlEvent";
namespace org::eclipse::swt::events { class ControlListener; }
template<> constexpr auto signature<::org::eclipse::swt::events::ControlListener> = ::org_eclipse_swt_events / "ControlListener";
namespace org::eclipse::swt::events { class DisposeEvent; }
template<> constexpr auto signature<::org::eclipse::swt::events::DisposeEvent> = ::org_eclipse_swt_events / "DisposeEvent";
namespace org::eclipse::swt::events { class DisposeListener; }
template<> constexpr auto signature<::org::eclipse::swt::events::DisposeListener> = ::org_eclipse_swt_events / "DisposeListener";
namespace org::eclipse::swt::events { class DragDetectEvent; }
template<> constexpr auto signature<::org::eclipse::swt::events::DragDetectEvent> = ::org_eclipse_swt_events / "DragDetectEvent";
namespace org::eclipse::swt::events { class DragDetectListener; }
template<> constexpr auto signature<::org::eclipse::swt::events::DragDetectListener> = ::org_eclipse_swt_events / "DragDetectListener";
namespace org::eclipse::swt::events { class ExpandAdapter; }
template<> constexpr auto signature<::org::eclipse::swt::events::ExpandAdapter> = ::org_eclipse_swt_events / "ExpandAdapter";
namespace org::eclipse::swt::events { class ExpandEvent; }
template<> constexpr auto signature<::org::eclipse::swt::events::ExpandEvent> = ::org_eclipse_swt_events / "ExpandEvent";
namespace org::eclipse::swt::events { class ExpandListener; }
template<> constexpr auto signature<::org::eclipse::swt::events::ExpandListener> = ::org_eclipse_swt_events / "ExpandListener";
namespace org::eclipse::swt::events { class FocusAdapter; }
template<> constexpr auto signature<::org::eclipse::swt::events::FocusAdapter> = ::org_eclipse_swt_events / "FocusAdapter";
namespace org::eclipse::swt::events { class FocusEvent; }
template<> constexpr auto signature<::org::eclipse::swt::events::FocusEvent> = ::org_eclipse_swt_events / "FocusEvent";
namespace org::eclipse::swt::events { class FocusListener; }
template<> constexpr auto signature<::org::eclipse::swt::events::FocusListener> = ::org_eclipse_swt_events / "FocusListener";
namespace org::eclipse::swt::events { class GestureEvent; }
template<> constexpr auto signature<::org::eclipse::swt::events::GestureEvent> = ::org_eclipse_swt_events / "GestureEvent";
namespace org::eclipse::swt::events { class GestureListener; }
template<> constexpr auto signature<::org::eclipse::swt::events::GestureListener> = ::org_eclipse_swt_events / "GestureListener";
namespace org::eclipse::swt::events { class HelpEvent; }
template<> constexpr auto signature<::org::eclipse::swt::events::HelpEvent> = ::org_eclipse_swt_events / "HelpEvent";
namespace org::eclipse::swt::events { class HelpListener; }
template<> constexpr auto signature<::org::eclipse::swt::events::HelpListener> = ::org_eclipse_swt_events / "HelpListener";
namespace org::eclipse::swt::events { class KeyAdapter; }
template<> constexpr auto signature<::org::eclipse::swt::events::KeyAdapter> = ::org_eclipse_swt_events / "KeyAdapter";
namespace org::eclipse::swt::events { class KeyEvent; }
template<> constexpr auto signature<::org::eclipse::swt::events::KeyEvent> = ::org_eclipse_swt_events / "KeyEvent";
namespace org::eclipse::swt::events { class KeyListener; }
template<> constexpr auto signature<::org::eclipse::swt::events::KeyListener> = ::org_eclipse_swt_events / "KeyListener";
namespace org::eclipse::swt::events { class MenuAdapter; }
template<> constexpr auto signature<::org::eclipse::swt::events::MenuAdapter> = ::org_eclipse_swt_events / "MenuAdapter";
namespace org::eclipse::swt::events { class MenuDetectEvent; }
template<> constexpr auto signature<::org::eclipse::swt::events::MenuDetectEvent> = ::org_eclipse_swt_events / "MenuDetectEvent";
namespace org::eclipse::swt::events { class MenuDetectListener; }
template<> constexpr auto signature<::org::eclipse::swt::events::MenuDetectListener> = ::org_eclipse_swt_events / "MenuDetectListener";
namespace org::eclipse::swt::events { class MenuEvent; }
template<> constexpr auto signature<::org::eclipse::swt::events::MenuEvent> = ::org_eclipse_swt_events / "MenuEvent";
namespace org::eclipse::swt::events { class MenuListener; }
template<> constexpr auto signature<::org::eclipse::swt::events::MenuListener> = ::org_eclipse_swt_events / "MenuListener";
namespace org::eclipse::swt::events { class ModifyEvent; }
template<> constexpr auto signature<::org::eclipse::swt::events::ModifyEvent> = ::org_eclipse_swt_events / "ModifyEvent";
namespace org::eclipse::swt::events { class ModifyListener; }
template<> constexpr auto signature<::org::eclipse::swt::events::ModifyListener> = ::org_eclipse_swt_events / "ModifyListener";
namespace org::eclipse::swt::events { class MouseAdapter; }
template<> constexpr auto signature<::org::eclipse::swt::events::MouseAdapter> = ::org_eclipse_swt_events / "MouseAdapter";
namespace org::eclipse::swt::events { class MouseEvent; }
template<> constexpr auto signature<::org::eclipse::swt::events::MouseEvent> = ::org_eclipse_swt_events / "MouseEvent";
namespace org::eclipse::swt::events { class MouseListener; }
template<> constexpr auto signature<::org::eclipse::swt::events::MouseListener> = ::org_eclipse_swt_events / "MouseListener";
namespace org::eclipse::swt::events { class MouseMoveListener; }
template<> constexpr auto signature<::org::eclipse::swt::events::MouseMoveListener> = ::org_eclipse_swt_events / "MouseMoveListener";
namespace org::eclipse::swt::events { class MouseTrackAdapter; }
template<> constexpr auto signature<::org::eclipse::swt::events::MouseTrackAdapter> = ::org_eclipse_swt_events / "MouseTrackAdapter";
namespace org::eclipse::swt::events { class MouseTrackListener; }
template<> constexpr auto signature<::org::eclipse::swt::events::MouseTrackListener> = ::org_eclipse_swt_events / "MouseTrackListener";
namespace org::eclipse::swt::events { class MouseWheelListener; }
template<> constexpr auto signature<::org::eclipse::swt::events::MouseWheelListener> = ::org_eclipse_swt_events / "MouseWheelListener";
namespace org::eclipse::swt::events { class PaintEvent; }
template<> constexpr auto signature<::org::eclipse::swt::events::PaintEvent> = ::org_eclipse_swt_events / "PaintEvent";
namespace org::eclipse::swt::events { class PaintListener; }
template<> constexpr auto signature<::org::eclipse::swt::events::PaintListener> = ::org_eclipse_swt_events / "PaintListener";
namespace org::eclipse::swt::events { class SegmentEvent; }
template<> constexpr auto signature<::org::eclipse::swt::events::SegmentEvent> = ::org_eclipse_swt_events / "SegmentEvent";
namespace org::eclipse::swt::events { class SegmentListener; }
template<> constexpr auto signature<::org::eclipse::swt::events::SegmentListener> = ::org_eclipse_swt_events / "SegmentListener";
namespace org::eclipse::swt::events { class SelectionAdapter; }
template<> constexpr auto signature<::org::eclipse::swt::events::SelectionAdapter> = ::org_eclipse_swt_events / "SelectionAdapter";
namespace org::eclipse::swt::events { class SelectionEvent; }
template<> constexpr auto signature<::org::eclipse::swt::events::SelectionEvent> = ::org_eclipse_swt_events / "SelectionEvent";
namespace org::eclipse::swt::events { class SelectionListener; }
template<> constexpr auto signature<::org::eclipse::swt::events::SelectionListener> = ::org_eclipse_swt_events / "SelectionListener";
namespace org::eclipse::swt::events { class ShellAdapter; }
template<> constexpr auto signature<::org::eclipse::swt::events::ShellAdapter> = ::org_eclipse_swt_events / "ShellAdapter";
namespace org::eclipse::swt::events { class ShellEvent; }
template<> constexpr auto signature<::org::eclipse::swt::events::ShellEvent> = ::org_eclipse_swt_events / "ShellEvent";
namespace org::eclipse::swt::events { class ShellListener; }
template<> constexpr auto signature<::org::eclipse::swt::events::ShellListener> = ::org_eclipse_swt_events / "ShellListener";
namespace org::eclipse::swt::events { class TouchEvent; }
template<> constexpr auto signature<::org::eclipse::swt::events::TouchEvent> = ::org_eclipse_swt_events / "TouchEvent";
namespace org::eclipse::swt::events { class TouchListener; }
template<> constexpr auto signature<::org::eclipse::swt::events::TouchListener> = ::org_eclipse_swt_events / "TouchListener";
namespace org::eclipse::swt::events { class TraverseEvent; }
template<> constexpr auto signature<::org::eclipse::swt::events::TraverseEvent> = ::org_eclipse_swt_events / "TraverseEvent";
namespace org::eclipse::swt::events { class TraverseListener; }
template<> constexpr auto signature<::org::eclipse::swt::events::TraverseListener> = ::org_eclipse_swt_events / "TraverseListener";
namespace org::eclipse::swt::events { class TreeAdapter; }
template<> constexpr auto signature<::org::eclipse::swt::events::TreeAdapter> = ::org_eclipse_swt_events / "TreeAdapter";
namespace org::eclipse::swt::events { class TreeEvent; }
template<> constexpr auto signature<::org::eclipse::swt::events::TreeEvent> = ::org_eclipse_swt_events / "TreeEvent";
namespace org::eclipse::swt::events { class TreeListener; }
template<> constexpr auto signature<::org::eclipse::swt::events::TreeListener> = ::org_eclipse_swt_events / "TreeListener";
namespace org::eclipse::swt::events { class TypedEvent; }
template<> constexpr auto signature<::org::eclipse::swt::events::TypedEvent> = ::org_eclipse_swt_events / "TypedEvent";
namespace org::eclipse::swt::events { class VerifyEvent; }
template<> constexpr auto signature<::org::eclipse::swt::events::VerifyEvent> = ::org_eclipse_swt_events / "VerifyEvent";
namespace org::eclipse::swt::events { class VerifyListener; }
template<> constexpr auto signature<::org::eclipse::swt::events::VerifyListener> = ::org_eclipse_swt_events / "VerifyListener";
namespace org::eclipse::swt::graphics { class Color; }
template<> constexpr auto signature<::org::eclipse::swt::graphics::Color> = ::org_eclipse_swt_graphics / "Color";
namespace org::eclipse::swt::graphics { class Cursor; }
template<> constexpr auto signature<::org::eclipse::swt::graphics::Cursor> = ::org_eclipse_swt_graphics / "Cursor";
namespace org::eclipse::swt::graphics { class DPIUtil; }
template<> constexpr auto signature<::org::eclipse::swt::graphics::DPIUtil> = ::org_eclipse_swt_graphics / "DPIUtil";
namespace org::eclipse::swt::graphics { class Device; }
template<> constexpr auto signature<::org::eclipse::swt::graphics::Device> = ::org_eclipse_swt_graphics / "Device";
namespace org::eclipse::swt::graphics { class DeviceData; }
template<> constexpr auto signature<::org::eclipse::swt::graphics::DeviceData> = ::org_eclipse_swt_graphics / "DeviceData";
namespace org::eclipse::swt::graphics { class Drawable; }
template<> constexpr auto signature<::org::eclipse::swt::graphics::Drawable> = ::org_eclipse_swt_graphics / "Drawable";
namespace org::eclipse::swt::graphics { class Font; }
template<> constexpr auto signature<::org::eclipse::swt::graphics::Font> = ::org_eclipse_swt_graphics / "Font";
namespace org::eclipse::swt::graphics { class FontData; }
template<> constexpr auto signature<::org::eclipse::swt::graphics::FontData> = ::org_eclipse_swt_graphics / "FontData";
namespace org::eclipse::swt::graphics { class FontMetrics; }
template<> constexpr auto signature<::org::eclipse::swt::graphics::FontMetrics> = ::org_eclipse_swt_graphics / "FontMetrics";
namespace org::eclipse::swt::graphics { class GC; }
template<> constexpr auto signature<::org::eclipse::swt::graphics::GC> = ::org_eclipse_swt_graphics / "GC";
namespace org::eclipse::swt::graphics { class GCData; }
template<> constexpr auto signature<::org::eclipse::swt::graphics::GCData> = ::org_eclipse_swt_graphics / "GCData";
namespace org::eclipse::swt::graphics { class GlyphMetrics; }
template<> constexpr auto signature<::org::eclipse::swt::graphics::GlyphMetrics> = ::org_eclipse_swt_graphics / "GlyphMetrics";
namespace org::eclipse::swt::graphics { class Image; }
template<> constexpr auto signature<::org::eclipse::swt::graphics::Image> = ::org_eclipse_swt_graphics / "Image";
namespace org::eclipse::swt::graphics { class ImageData; }
template<> constexpr auto signature<::org::eclipse::swt::graphics::ImageData> = ::org_eclipse_swt_graphics / "ImageData";
namespace org::eclipse::swt::graphics { class ImageDataLoader; }
template<> constexpr auto signature<::org::eclipse::swt::graphics::ImageDataLoader> = ::org_eclipse_swt_graphics / "ImageDataLoader";
namespace org::eclipse::swt::graphics { class ImageDataProvider; }
template<> constexpr auto signature<::org::eclipse::swt::graphics::ImageDataProvider> = ::org_eclipse_swt_graphics / "ImageDataProvider";
namespace org::eclipse::swt::graphics { class ImageFileNameProvider; }
template<> constexpr auto signature<::org::eclipse::swt::graphics::ImageFileNameProvider> = ::org_eclipse_swt_graphics / "ImageFileNameProvider";
namespace org::eclipse::swt::graphics { class ImageLoader; }
template<> constexpr auto signature<::org::eclipse::swt::graphics::ImageLoader> = ::org_eclipse_swt_graphics / "ImageLoader";
namespace org::eclipse::swt::graphics { class ImageLoaderEvent; }
template<> constexpr auto signature<::org::eclipse::swt::graphics::ImageLoaderEvent> = ::org_eclipse_swt_graphics / "ImageLoaderEvent";
namespace org::eclipse::swt::graphics { class ImageLoaderListener; }
template<> constexpr auto signature<::org::eclipse::swt::graphics::ImageLoaderListener> = ::org_eclipse_swt_graphics / "ImageLoaderListener";
namespace org::eclipse::swt::graphics { class LineAttributes; }
template<> constexpr auto signature<::org::eclipse::swt::graphics::LineAttributes> = ::org_eclipse_swt_graphics / "LineAttributes";
namespace org::eclipse::swt::graphics { class PaletteData; }
template<> constexpr auto signature<::org::eclipse::swt::graphics::PaletteData> = ::org_eclipse_swt_graphics / "PaletteData";
namespace org::eclipse::swt::graphics { class Path; }
template<> constexpr auto signature<::org::eclipse::swt::graphics::Path> = ::org_eclipse_swt_graphics / "Path";
namespace org::eclipse::swt::graphics { class PathData; }
template<> constexpr auto signature<::org::eclipse::swt::graphics::PathData> = ::org_eclipse_swt_graphics / "PathData";
namespace org::eclipse::swt::graphics { class Pattern; }
template<> constexpr auto signature<::org::eclipse::swt::graphics::Pattern> = ::org_eclipse_swt_graphics / "Pattern";
namespace org::eclipse::swt::graphics { class Point; }
template<> constexpr auto signature<::org::eclipse::swt::graphics::Point> = ::org_eclipse_swt_graphics / "Point";
namespace org::eclipse::swt::graphics { class RGB; }
template<> constexpr auto signature<::org::eclipse::swt::graphics::RGB> = ::org_eclipse_swt_graphics / "RGB";
namespace org::eclipse::swt::graphics { class RGBA; }
template<> constexpr auto signature<::org::eclipse::swt::graphics::RGBA> = ::org_eclipse_swt_graphics / "RGBA";
namespace org::eclipse::swt::graphics { class Rectangle; }
template<> constexpr auto signature<::org::eclipse::swt::graphics::Rectangle> = ::org_eclipse_swt_graphics / "Rectangle";
namespace org::eclipse::swt::graphics { class Region; }
template<> constexpr auto signature<::org::eclipse::swt::graphics::Region> = ::org_eclipse_swt_graphics / "Region";
namespace org::eclipse::swt::graphics { class Resource; }
template<> constexpr auto signature<::org::eclipse::swt::graphics::Resource> = ::org_eclipse_swt_graphics / "Resource";
namespace org::eclipse::swt::graphics { class TextLayout; }
template<> constexpr auto signature<::org::eclipse::swt::graphics::TextLayout> = ::org_eclipse_swt_graphics / "TextLayout";
namespace org::eclipse::swt::graphics { class TextLayout$StyleItem; }
template<> constexpr auto signature<::org::eclipse::swt::graphics::TextLayout$StyleItem> = ::org_eclipse_swt_graphics / "TextLayout$StyleItem";
namespace org::eclipse::swt::graphics { class TextStyle; }
template<> constexpr auto signature<::org::eclipse::swt::graphics::TextStyle> = ::org_eclipse_swt_graphics / "TextStyle";
namespace org::eclipse::swt::graphics { class Transform; }
template<> constexpr auto signature<::org::eclipse::swt::graphics::Transform> = ::org_eclipse_swt_graphics / "Transform";
namespace org::eclipse::swt::internal { class BidiUtil; }
template<> constexpr auto signature<::org::eclipse::swt::internal::BidiUtil> = ::org_eclipse_swt_internal / "BidiUtil";
namespace org::eclipse::swt::internal { class C; }
template<> constexpr auto signature<::org::eclipse::swt::internal::C> = ::org_eclipse_swt_internal / "C";
namespace org::eclipse::swt::internal { class Callback; }
template<> constexpr auto signature<::org::eclipse::swt::internal::Callback> = ::org_eclipse_swt_internal / "Callback";
namespace org::eclipse::swt::internal { class CloneableCompatibility; }
template<> constexpr auto signature<::org::eclipse::swt::internal::CloneableCompatibility> = ::org_eclipse_swt_internal / "CloneableCompatibility";
namespace org::eclipse::swt::internal { class Compatibility; }
template<> constexpr auto signature<::org::eclipse::swt::internal::Compatibility> = ::org_eclipse_swt_internal / "Compatibility";
namespace org::eclipse::swt::internal { class Converter; }
template<> constexpr auto signature<::org::eclipse::swt::internal::Converter> = ::org_eclipse_swt_internal / "Converter";
namespace org::eclipse::swt::internal { class ImageList; }
template<> constexpr auto signature<::org::eclipse::swt::internal::ImageList> = ::org_eclipse_swt_internal / "ImageList";
namespace org::eclipse::swt::internal { class LONG; }
template<> constexpr auto signature<::org::eclipse::swt::internal::LONG> = ::org_eclipse_swt_internal / "LONG";
namespace org::eclipse::swt::internal { class Library; }
template<> constexpr auto signature<::org::eclipse::swt::internal::Library> = ::org_eclipse_swt_internal / "Library";
namespace org::eclipse::swt::internal { class Lock; }
template<> constexpr auto signature<::org::eclipse::swt::internal::Lock> = ::org_eclipse_swt_internal / "Lock";
namespace org::eclipse::swt::internal { class Platform; }
template<> constexpr auto signature<::org::eclipse::swt::internal::Platform> = ::org_eclipse_swt_internal / "Platform";
namespace org::eclipse::swt::internal { class SWTEventListener; }
template<> constexpr auto signature<::org::eclipse::swt::internal::SWTEventListener> = ::org_eclipse_swt_internal / "SWTEventListener";
namespace org::eclipse::swt::internal { class SWTEventObject; }
template<> constexpr auto signature<::org::eclipse::swt::internal::SWTEventObject> = ::org_eclipse_swt_internal / "SWTEventObject";
namespace org::eclipse::swt::internal { class SerializableCompatibility; }
template<> constexpr auto signature<::org::eclipse::swt::internal::SerializableCompatibility> = ::org_eclipse_swt_internal / "SerializableCompatibility";
namespace org::eclipse::swt::layout { class FillData; }
template<> constexpr auto signature<::org::eclipse::swt::layout::FillData> = ::org_eclipse_swt_layout / "FillData";
namespace org::eclipse::swt::layout { class FillLayout; }
template<> constexpr auto signature<::org::eclipse::swt::layout::FillLayout> = ::org_eclipse_swt_layout / "FillLayout";
namespace org::eclipse::swt::layout { class FormAttachment; }
template<> constexpr auto signature<::org::eclipse::swt::layout::FormAttachment> = ::org_eclipse_swt_layout / "FormAttachment";
namespace org::eclipse::swt::layout { class FormData; }
template<> constexpr auto signature<::org::eclipse::swt::layout::FormData> = ::org_eclipse_swt_layout / "FormData";
namespace org::eclipse::swt::layout { class FormLayout; }
template<> constexpr auto signature<::org::eclipse::swt::layout::FormLayout> = ::org_eclipse_swt_layout / "FormLayout";
namespace org::eclipse::swt::layout { class GridData; }
template<> constexpr auto signature<::org::eclipse::swt::layout::GridData> = ::org_eclipse_swt_layout / "GridData";
namespace org::eclipse::swt::layout { class GridLayout; }
template<> constexpr auto signature<::org::eclipse::swt::layout::GridLayout> = ::org_eclipse_swt_layout / "GridLayout";
namespace org::eclipse::swt::layout { class RowData; }
template<> constexpr auto signature<::org::eclipse::swt::layout::RowData> = ::org_eclipse_swt_layout / "RowData";
namespace org::eclipse::swt::layout { class RowLayout; }
template<> constexpr auto signature<::org::eclipse::swt::layout::RowLayout> = ::org_eclipse_swt_layout / "RowLayout";
namespace org::eclipse::swt::opengl { class GLCanvas; }
template<> constexpr auto signature<::org::eclipse::swt::opengl::GLCanvas> = ::org_eclipse_swt_opengl / "GLCanvas";
namespace org::eclipse::swt::opengl { class GLCanvas$1; }
template<> constexpr auto signature<::org::eclipse::swt::opengl::GLCanvas$1> = ::org_eclipse_swt_opengl / "GLCanvas$1";
namespace org::eclipse::swt::opengl { class GLData; }
template<> constexpr auto signature<::org::eclipse::swt::opengl::GLData> = ::org_eclipse_swt_opengl / "GLData";
namespace org::eclipse::swt::printing { class PrintDialog; }
template<> constexpr auto signature<::org::eclipse::swt::printing::PrintDialog> = ::org_eclipse_swt_printing / "PrintDialog";
namespace org::eclipse::swt::printing { class Printer; }
template<> constexpr auto signature<::org::eclipse::swt::printing::Printer> = ::org_eclipse_swt_printing / "Printer";
namespace org::eclipse::swt::printing { class PrinterData; }
template<> constexpr auto signature<::org::eclipse::swt::printing::PrinterData> = ::org_eclipse_swt_printing / "PrinterData";
namespace org::eclipse::swt::program { class Program; }
template<> constexpr auto signature<::org::eclipse::swt::program::Program> = ::org_eclipse_swt_program / "Program";
namespace org::eclipse::swt::program { class Program$1; }
template<> constexpr auto signature<::org::eclipse::swt::program::Program$1> = ::org_eclipse_swt_program / "Program$1";
namespace org::eclipse::swt::widgets { class Button; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::Button> = ::org_eclipse_swt_widgets / "Button";
namespace org::eclipse::swt::widgets { class Canvas; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::Canvas> = ::org_eclipse_swt_widgets / "Canvas";
namespace org::eclipse::swt::widgets { class Caret; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::Caret> = ::org_eclipse_swt_widgets / "Caret";
namespace org::eclipse::swt::widgets { class ColorDialog; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::ColorDialog> = ::org_eclipse_swt_widgets / "ColorDialog";
namespace org::eclipse::swt::widgets { class Combo; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::Combo> = ::org_eclipse_swt_widgets / "Combo";
namespace org::eclipse::swt::widgets { class Composite; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::Composite> = ::org_eclipse_swt_widgets / "Composite";
namespace org::eclipse::swt::widgets { class Control; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::Control> = ::org_eclipse_swt_widgets / "Control";
namespace org::eclipse::swt::widgets { class CoolBar; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::CoolBar> = ::org_eclipse_swt_widgets / "CoolBar";
namespace org::eclipse::swt::widgets { class CoolBar$1; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::CoolBar$1> = ::org_eclipse_swt_widgets / "CoolBar$1";
namespace org::eclipse::swt::widgets { class CoolItem; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::CoolItem> = ::org_eclipse_swt_widgets / "CoolItem";
namespace org::eclipse::swt::widgets { class CoolItem$1; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::CoolItem$1> = ::org_eclipse_swt_widgets / "CoolItem$1";
namespace org::eclipse::swt::widgets { class DateTime; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::DateTime> = ::org_eclipse_swt_widgets / "DateTime";
namespace org::eclipse::swt::widgets { class DateTime$1; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::DateTime$1> = ::org_eclipse_swt_widgets / "DateTime$1";
namespace org::eclipse::swt::widgets { class DateTime$2; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::DateTime$2> = ::org_eclipse_swt_widgets / "DateTime$2";
namespace org::eclipse::swt::widgets { class DateTime$3; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::DateTime$3> = ::org_eclipse_swt_widgets / "DateTime$3";
namespace org::eclipse::swt::widgets { class DateTime$3$1; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::DateTime$3$1> = ::org_eclipse_swt_widgets / "DateTime$3$1";
namespace org::eclipse::swt::widgets { class DateTime$4; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::DateTime$4> = ::org_eclipse_swt_widgets / "DateTime$4";
namespace org::eclipse::swt::widgets { class DateTime$5; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::DateTime$5> = ::org_eclipse_swt_widgets / "DateTime$5";
namespace org::eclipse::swt::widgets { class DateTime$6; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::DateTime$6> = ::org_eclipse_swt_widgets / "DateTime$6";
namespace org::eclipse::swt::widgets { class DateTime$7; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::DateTime$7> = ::org_eclipse_swt_widgets / "DateTime$7";
namespace org::eclipse::swt::widgets { class DateTime$8; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::DateTime$8> = ::org_eclipse_swt_widgets / "DateTime$8";
namespace org::eclipse::swt::widgets { class Decorations; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::Decorations> = ::org_eclipse_swt_widgets / "Decorations";
namespace org::eclipse::swt::widgets { class Dialog; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::Dialog> = ::org_eclipse_swt_widgets / "Dialog";
namespace org::eclipse::swt::widgets { class DirectoryDialog; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::DirectoryDialog> = ::org_eclipse_swt_widgets / "DirectoryDialog";
namespace org::eclipse::swt::widgets { class Display; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::Display> = ::org_eclipse_swt_widgets / "Display";
namespace org::eclipse::swt::widgets { class Display$1; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::Display$1> = ::org_eclipse_swt_widgets / "Display$1";
namespace org::eclipse::swt::widgets { class Event; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::Event> = ::org_eclipse_swt_widgets / "Event";
namespace org::eclipse::swt::widgets { class EventTable; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::EventTable> = ::org_eclipse_swt_widgets / "EventTable";
namespace org::eclipse::swt::widgets { class ExpandBar; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::ExpandBar> = ::org_eclipse_swt_widgets / "ExpandBar";
namespace org::eclipse::swt::widgets { class ExpandItem; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::ExpandItem> = ::org_eclipse_swt_widgets / "ExpandItem";
namespace org::eclipse::swt::widgets { class FileDialog; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::FileDialog> = ::org_eclipse_swt_widgets / "FileDialog";
namespace org::eclipse::swt::widgets { class FontDialog; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::FontDialog> = ::org_eclipse_swt_widgets / "FontDialog";
namespace org::eclipse::swt::widgets { class Group; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::Group> = ::org_eclipse_swt_widgets / "Group";
namespace org::eclipse::swt::widgets { class IME; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::IME> = ::org_eclipse_swt_widgets / "IME";
namespace org::eclipse::swt::widgets { class Item; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::Item> = ::org_eclipse_swt_widgets / "Item";
namespace org::eclipse::swt::widgets { class Label; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::Label> = ::org_eclipse_swt_widgets / "Label";
namespace org::eclipse::swt::widgets { class Layout; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::Layout> = ::org_eclipse_swt_widgets / "Layout";
namespace org::eclipse::swt::widgets { class Link; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::Link> = ::org_eclipse_swt_widgets / "Link";
namespace org::eclipse::swt::widgets { class Link$1; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::Link$1> = ::org_eclipse_swt_widgets / "Link$1";
namespace org::eclipse::swt::widgets { class Link$2; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::Link$2> = ::org_eclipse_swt_widgets / "Link$2";
namespace org::eclipse::swt::widgets { class List; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::List> = ::org_eclipse_swt_widgets / "List";
namespace org::eclipse::swt::widgets { class Listener; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::Listener> = ::org_eclipse_swt_widgets / "Listener";
namespace org::eclipse::swt::widgets { class Menu; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::Menu> = ::org_eclipse_swt_widgets / "Menu";
namespace org::eclipse::swt::widgets { class MenuItem; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::MenuItem> = ::org_eclipse_swt_widgets / "MenuItem";
namespace org::eclipse::swt::widgets { class MenuItem$1; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::MenuItem$1> = ::org_eclipse_swt_widgets / "MenuItem$1";
namespace org::eclipse::swt::widgets { class MenuItem$MaskKeysym; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::MenuItem$MaskKeysym> = ::org_eclipse_swt_widgets / "MenuItem$MaskKeysym";
namespace org::eclipse::swt::widgets { class MessageBox; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::MessageBox> = ::org_eclipse_swt_widgets / "MessageBox";
namespace org::eclipse::swt::widgets { class Monitor; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::Monitor> = ::org_eclipse_swt_widgets / "Monitor";
namespace org::eclipse::swt::widgets { class ProgressBar; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::ProgressBar> = ::org_eclipse_swt_widgets / "ProgressBar";
namespace org::eclipse::swt::widgets { class RunnableLock; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::RunnableLock> = ::org_eclipse_swt_widgets / "RunnableLock";
namespace org::eclipse::swt::widgets { class Sash; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::Sash> = ::org_eclipse_swt_widgets / "Sash";
namespace org::eclipse::swt::widgets { class Scale; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::Scale> = ::org_eclipse_swt_widgets / "Scale";
namespace org::eclipse::swt::widgets { class ScrollBar; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::ScrollBar> = ::org_eclipse_swt_widgets / "ScrollBar";
namespace org::eclipse::swt::widgets { class Scrollable; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::Scrollable> = ::org_eclipse_swt_widgets / "Scrollable";
namespace org::eclipse::swt::widgets { class Shell; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::Shell> = ::org_eclipse_swt_widgets / "Shell";
namespace org::eclipse::swt::widgets { class Slider; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::Slider> = ::org_eclipse_swt_widgets / "Slider";
namespace org::eclipse::swt::widgets { class Spinner; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::Spinner> = ::org_eclipse_swt_widgets / "Spinner";
namespace org::eclipse::swt::widgets { class Synchronizer; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::Synchronizer> = ::org_eclipse_swt_widgets / "Synchronizer";
namespace org::eclipse::swt::widgets { class TabFolder; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::TabFolder> = ::org_eclipse_swt_widgets / "TabFolder";
namespace org::eclipse::swt::widgets { class TabItem; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::TabItem> = ::org_eclipse_swt_widgets / "TabItem";
namespace org::eclipse::swt::widgets { class Table; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::Table> = ::org_eclipse_swt_widgets / "Table";
namespace org::eclipse::swt::widgets { class TableColumn; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::TableColumn> = ::org_eclipse_swt_widgets / "TableColumn";
namespace org::eclipse::swt::widgets { class TableItem; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::TableItem> = ::org_eclipse_swt_widgets / "TableItem";
namespace org::eclipse::swt::widgets { class TaskBar; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::TaskBar> = ::org_eclipse_swt_widgets / "TaskBar";
namespace org::eclipse::swt::widgets { class TaskItem; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::TaskItem> = ::org_eclipse_swt_widgets / "TaskItem";
namespace org::eclipse::swt::widgets { class Text; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::Text> = ::org_eclipse_swt_widgets / "Text";
namespace org::eclipse::swt::widgets { class ToolBar; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::ToolBar> = ::org_eclipse_swt_widgets / "ToolBar";
namespace org::eclipse::swt::widgets { class ToolItem; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::ToolItem> = ::org_eclipse_swt_widgets / "ToolItem";
namespace org::eclipse::swt::widgets { class ToolTip; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::ToolTip> = ::org_eclipse_swt_widgets / "ToolTip";
namespace org::eclipse::swt::widgets { class Touch; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::Touch> = ::org_eclipse_swt_widgets / "Touch";
namespace org::eclipse::swt::widgets { class TouchSource; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::TouchSource> = ::org_eclipse_swt_widgets / "TouchSource";
namespace org::eclipse::swt::widgets { class Tracker; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::Tracker> = ::org_eclipse_swt_widgets / "Tracker";
namespace org::eclipse::swt::widgets { class Tray; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::Tray> = ::org_eclipse_swt_widgets / "Tray";
namespace org::eclipse::swt::widgets { class TrayItem; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::TrayItem> = ::org_eclipse_swt_widgets / "TrayItem";
namespace org::eclipse::swt::widgets { class Tree; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::Tree> = ::org_eclipse_swt_widgets / "Tree";
namespace org::eclipse::swt::widgets { class TreeColumn; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::TreeColumn> = ::org_eclipse_swt_widgets / "TreeColumn";
namespace org::eclipse::swt::widgets { class TreeItem; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::TreeItem> = ::org_eclipse_swt_widgets / "TreeItem";
namespace org::eclipse::swt::widgets { class TypedListener; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::TypedListener> = ::org_eclipse_swt_widgets / "TypedListener";
namespace org::eclipse::swt::widgets { class Widget; }
template<> constexpr auto signature<::org::eclipse::swt::widgets::Widget> = ::org_eclipse_swt_widgets / "Widget";
namespace org::ietf::jgss { class ChannelBinding; }
template<> constexpr auto signature<::org::ietf::jgss::ChannelBinding> = ::org_ietf_jgss / "ChannelBinding";
namespace org::ietf::jgss { class GSSContext; }
template<> constexpr auto signature<::org::ietf::jgss::GSSContext> = ::org_ietf_jgss / "GSSContext";
namespace org::ietf::jgss { class GSSCredential; }
template<> constexpr auto signature<::org::ietf::jgss::GSSCredential> = ::org_ietf_jgss / "GSSCredential";
namespace org::ietf::jgss { class GSSException; }
template<> constexpr auto signature<::org::ietf::jgss::GSSException> = ::org_ietf_jgss / "GSSException";
namespace org::ietf::jgss { class GSSManager; }
template<> constexpr auto signature<::org::ietf::jgss::GSSManager> = ::org_ietf_jgss / "GSSManager";
namespace org::ietf::jgss { class GSSName; }
template<> constexpr auto signature<::org::ietf::jgss::GSSName> = ::org_ietf_jgss / "GSSName";
namespace org::ietf::jgss { class MessageProp; }
template<> constexpr auto signature<::org::ietf::jgss::MessageProp> = ::org_ietf_jgss / "MessageProp";
namespace org::ietf::jgss { class Oid; }
template<> constexpr auto signature<::org::ietf::jgss::Oid> = ::org_ietf_jgss / "Oid";
namespace org::jcp::xml::dsig::internal { class DigesterOutputStream; }
template<> constexpr auto signature<::org::jcp::xml::dsig::internal::DigesterOutputStream> = ::org_jcp_xml_dsig_internal / "DigesterOutputStream";
namespace org::jcp::xml::dsig::internal { class MacOutputStream; }
template<> constexpr auto signature<::org::jcp::xml::dsig::internal::MacOutputStream> = ::org_jcp_xml_dsig_internal / "MacOutputStream";
namespace org::jcp::xml::dsig::internal { class SignerOutputStream; }
template<> constexpr auto signature<::org::jcp::xml::dsig::internal::SignerOutputStream> = ::org_jcp_xml_dsig_internal / "SignerOutputStream";
namespace org::omg::CORBA { class ACTIVITY_COMPLETED; }
template<> constexpr auto signature<::org::omg::CORBA::ACTIVITY_COMPLETED> = ::org_omg_CORBA / "ACTIVITY_COMPLETED";
namespace org::omg::CORBA { class ACTIVITY_REQUIRED; }
template<> constexpr auto signature<::org::omg::CORBA::ACTIVITY_REQUIRED> = ::org_omg_CORBA / "ACTIVITY_REQUIRED";
namespace org::omg::CORBA { class ARG_IN; }
template<> constexpr auto signature<::org::omg::CORBA::ARG_IN> = ::org_omg_CORBA / "ARG_IN";
namespace org::omg::CORBA { class ARG_INOUT; }
template<> constexpr auto signature<::org::omg::CORBA::ARG_INOUT> = ::org_omg_CORBA / "ARG_INOUT";
namespace org::omg::CORBA { class ARG_OUT; }
template<> constexpr auto signature<::org::omg::CORBA::ARG_OUT> = ::org_omg_CORBA / "ARG_OUT";
namespace org::omg::CORBA { class Any; }
template<> constexpr auto signature<::org::omg::CORBA::Any> = ::org_omg_CORBA / "Any";
namespace org::omg::CORBA { class AnyHolder; }
template<> constexpr auto signature<::org::omg::CORBA::AnyHolder> = ::org_omg_CORBA / "AnyHolder";
namespace org::omg::CORBA { class AnySeqHelper; }
template<> constexpr auto signature<::org::omg::CORBA::AnySeqHelper> = ::org_omg_CORBA / "AnySeqHelper";
namespace org::omg::CORBA { class AnySeqHolder; }
template<> constexpr auto signature<::org::omg::CORBA::AnySeqHolder> = ::org_omg_CORBA / "AnySeqHolder";
namespace org::omg::CORBA { class BAD_CONTEXT; }
template<> constexpr auto signature<::org::omg::CORBA::BAD_CONTEXT> = ::org_omg_CORBA / "BAD_CONTEXT";
namespace org::omg::CORBA { class BAD_INV_ORDER; }
template<> constexpr auto signature<::org::omg::CORBA::BAD_INV_ORDER> = ::org_omg_CORBA / "BAD_INV_ORDER";
namespace org::omg::CORBA { class BAD_OPERATION; }
template<> constexpr auto signature<::org::omg::CORBA::BAD_OPERATION> = ::org_omg_CORBA / "BAD_OPERATION";
namespace org::omg::CORBA { class BAD_PARAM; }
template<> constexpr auto signature<::org::omg::CORBA::BAD_PARAM> = ::org_omg_CORBA / "BAD_PARAM";
namespace org::omg::CORBA { class BAD_POLICY; }
template<> constexpr auto signature<::org::omg::CORBA::BAD_POLICY> = ::org_omg_CORBA / "BAD_POLICY";
namespace org::omg::CORBA { class BAD_POLICY_TYPE; }
template<> constexpr auto signature<::org::omg::CORBA::BAD_POLICY_TYPE> = ::org_omg_CORBA / "BAD_POLICY_TYPE";
namespace org::omg::CORBA { class BAD_POLICY_VALUE; }
template<> constexpr auto signature<::org::omg::CORBA::BAD_POLICY_VALUE> = ::org_omg_CORBA / "BAD_POLICY_VALUE";
namespace org::omg::CORBA { class BAD_QOS; }
template<> constexpr auto signature<::org::omg::CORBA::BAD_QOS> = ::org_omg_CORBA / "BAD_QOS";
namespace org::omg::CORBA { class BAD_TYPECODE; }
template<> constexpr auto signature<::org::omg::CORBA::BAD_TYPECODE> = ::org_omg_CORBA / "BAD_TYPECODE";
namespace org::omg::CORBA { class BooleanHolder; }
template<> constexpr auto signature<::org::omg::CORBA::BooleanHolder> = ::org_omg_CORBA / "BooleanHolder";
namespace org::omg::CORBA { class BooleanSeqHelper; }
template<> constexpr auto signature<::org::omg::CORBA::BooleanSeqHelper> = ::org_omg_CORBA / "BooleanSeqHelper";
namespace org::omg::CORBA { class BooleanSeqHolder; }
template<> constexpr auto signature<::org::omg::CORBA::BooleanSeqHolder> = ::org_omg_CORBA / "BooleanSeqHolder";
namespace org::omg::CORBA { class Bounds; }
template<> constexpr auto signature<::org::omg::CORBA::Bounds> = ::org_omg_CORBA / "Bounds";
namespace org::omg::CORBA { class ByteHolder; }
template<> constexpr auto signature<::org::omg::CORBA::ByteHolder> = ::org_omg_CORBA / "ByteHolder";
namespace org::omg::CORBA { class CODESET_INCOMPATIBLE; }
template<> constexpr auto signature<::org::omg::CORBA::CODESET_INCOMPATIBLE> = ::org_omg_CORBA / "CODESET_INCOMPATIBLE";
namespace org::omg::CORBA { class COMM_FAILURE; }
template<> constexpr auto signature<::org::omg::CORBA::COMM_FAILURE> = ::org_omg_CORBA / "COMM_FAILURE";
namespace org::omg::CORBA { class CTX_RESTRICT_SCOPE; }
template<> constexpr auto signature<::org::omg::CORBA::CTX_RESTRICT_SCOPE> = ::org_omg_CORBA / "CTX_RESTRICT_SCOPE";
namespace org::omg::CORBA { class CharHolder; }
template<> constexpr auto signature<::org::omg::CORBA::CharHolder> = ::org_omg_CORBA / "CharHolder";
namespace org::omg::CORBA { class CharSeqHelper; }
template<> constexpr auto signature<::org::omg::CORBA::CharSeqHelper> = ::org_omg_CORBA / "CharSeqHelper";
namespace org::omg::CORBA { class CharSeqHolder; }
template<> constexpr auto signature<::org::omg::CORBA::CharSeqHolder> = ::org_omg_CORBA / "CharSeqHolder";
namespace org::omg::CORBA { class CompletionStatus; }
template<> constexpr auto signature<::org::omg::CORBA::CompletionStatus> = ::org_omg_CORBA / "CompletionStatus";
namespace org::omg::CORBA { class CompletionStatusHelper; }
template<> constexpr auto signature<::org::omg::CORBA::CompletionStatusHelper> = ::org_omg_CORBA / "CompletionStatusHelper";
namespace org::omg::CORBA { class Context; }
template<> constexpr auto signature<::org::omg::CORBA::Context> = ::org_omg_CORBA / "Context";
namespace org::omg::CORBA { class ContextList; }
template<> constexpr auto signature<::org::omg::CORBA::ContextList> = ::org_omg_CORBA / "ContextList";
namespace org::omg::CORBA { class Current; }
template<> constexpr auto signature<::org::omg::CORBA::Current> = ::org_omg_CORBA / "Current";
namespace org::omg::CORBA { class CurrentHelper; }
template<> constexpr auto signature<::org::omg::CORBA::CurrentHelper> = ::org_omg_CORBA / "CurrentHelper";
namespace org::omg::CORBA { class CurrentHolder; }
template<> constexpr auto signature<::org::omg::CORBA::CurrentHolder> = ::org_omg_CORBA / "CurrentHolder";
namespace org::omg::CORBA { class CurrentOperations; }
template<> constexpr auto signature<::org::omg::CORBA::CurrentOperations> = ::org_omg_CORBA / "CurrentOperations";
namespace org::omg::CORBA { class CustomMarshal; }
template<> constexpr auto signature<::org::omg::CORBA::CustomMarshal> = ::org_omg_CORBA / "CustomMarshal";
namespace org::omg::CORBA { class DATA_CONVERSION; }
template<> constexpr auto signature<::org::omg::CORBA::DATA_CONVERSION> = ::org_omg_CORBA / "DATA_CONVERSION";
namespace org::omg::CORBA { class DataInputStream; }
template<> constexpr auto signature<::org::omg::CORBA::DataInputStream> = ::org_omg_CORBA / "DataInputStream";
namespace org::omg::CORBA { class DataOutputStream; }
template<> constexpr auto signature<::org::omg::CORBA::DataOutputStream> = ::org_omg_CORBA / "DataOutputStream";
namespace org::omg::CORBA { class DefinitionKind; }
template<> constexpr auto signature<::org::omg::CORBA::DefinitionKind> = ::org_omg_CORBA / "DefinitionKind";
namespace org::omg::CORBA { class DefinitionKindHelper; }
template<> constexpr auto signature<::org::omg::CORBA::DefinitionKindHelper> = ::org_omg_CORBA / "DefinitionKindHelper";
namespace org::omg::CORBA { class DomainManager; }
template<> constexpr auto signature<::org::omg::CORBA::DomainManager> = ::org_omg_CORBA / "DomainManager";
namespace org::omg::CORBA { class DomainManagerOperations; }
template<> constexpr auto signature<::org::omg::CORBA::DomainManagerOperations> = ::org_omg_CORBA / "DomainManagerOperations";
namespace org::omg::CORBA { class DoubleHolder; }
template<> constexpr auto signature<::org::omg::CORBA::DoubleHolder> = ::org_omg_CORBA / "DoubleHolder";
namespace org::omg::CORBA { class DoubleSeqHelper; }
template<> constexpr auto signature<::org::omg::CORBA::DoubleSeqHelper> = ::org_omg_CORBA / "DoubleSeqHelper";
namespace org::omg::CORBA { class DoubleSeqHolder; }
template<> constexpr auto signature<::org::omg::CORBA::DoubleSeqHolder> = ::org_omg_CORBA / "DoubleSeqHolder";
namespace org::omg::CORBA { class DynAny; }
template<> constexpr auto signature<::org::omg::CORBA::DynAny> = ::org_omg_CORBA / "DynAny";
namespace org::omg::CORBA::DynAnyPackage { class Invalid; }
template<> constexpr auto signature<::org::omg::CORBA::DynAnyPackage::Invalid> = ::org_omg_CORBA_DynAnyPackage / "Invalid";
namespace org::omg::CORBA::DynAnyPackage { class InvalidSeq; }
template<> constexpr auto signature<::org::omg::CORBA::DynAnyPackage::InvalidSeq> = ::org_omg_CORBA_DynAnyPackage / "InvalidSeq";
namespace org::omg::CORBA::DynAnyPackage { class InvalidValue; }
template<> constexpr auto signature<::org::omg::CORBA::DynAnyPackage::InvalidValue> = ::org_omg_CORBA_DynAnyPackage / "InvalidValue";
namespace org::omg::CORBA::DynAnyPackage { class TypeMismatch; }
template<> constexpr auto signature<::org::omg::CORBA::DynAnyPackage::TypeMismatch> = ::org_omg_CORBA_DynAnyPackage / "TypeMismatch";
namespace org::omg::CORBA { class DynArray; }
template<> constexpr auto signature<::org::omg::CORBA::DynArray> = ::org_omg_CORBA / "DynArray";
namespace org::omg::CORBA { class DynEnum; }
template<> constexpr auto signature<::org::omg::CORBA::DynEnum> = ::org_omg_CORBA / "DynEnum";
namespace org::omg::CORBA { class DynFixed; }
template<> constexpr auto signature<::org::omg::CORBA::DynFixed> = ::org_omg_CORBA / "DynFixed";
namespace org::omg::CORBA { class DynSequence; }
template<> constexpr auto signature<::org::omg::CORBA::DynSequence> = ::org_omg_CORBA / "DynSequence";
namespace org::omg::CORBA { class DynStruct; }
template<> constexpr auto signature<::org::omg::CORBA::DynStruct> = ::org_omg_CORBA / "DynStruct";
namespace org::omg::CORBA { class DynUnion; }
template<> constexpr auto signature<::org::omg::CORBA::DynUnion> = ::org_omg_CORBA / "DynUnion";
namespace org::omg::CORBA { class DynValue; }
template<> constexpr auto signature<::org::omg::CORBA::DynValue> = ::org_omg_CORBA / "DynValue";
namespace org::omg::CORBA { class DynamicImplementation; }
template<> constexpr auto signature<::org::omg::CORBA::DynamicImplementation> = ::org_omg_CORBA / "DynamicImplementation";
namespace org::omg::CORBA { class Environment; }
template<> constexpr auto signature<::org::omg::CORBA::Environment> = ::org_omg_CORBA / "Environment";
namespace org::omg::CORBA { class ExceptionList; }
template<> constexpr auto signature<::org::omg::CORBA::ExceptionList> = ::org_omg_CORBA / "ExceptionList";
namespace org::omg::CORBA { class FREE_MEM; }
template<> constexpr auto signature<::org::omg::CORBA::FREE_MEM> = ::org_omg_CORBA / "FREE_MEM";
namespace org::omg::CORBA { class FieldNameHelper; }
template<> constexpr auto signature<::org::omg::CORBA::FieldNameHelper> = ::org_omg_CORBA / "FieldNameHelper";
namespace org::omg::CORBA { class FixedHolder; }
template<> constexpr auto signature<::org::omg::CORBA::FixedHolder> = ::org_omg_CORBA / "FixedHolder";
namespace org::omg::CORBA { class FloatHolder; }
template<> constexpr auto signature<::org::omg::CORBA::FloatHolder> = ::org_omg_CORBA / "FloatHolder";
namespace org::omg::CORBA { class FloatSeqHelper; }
template<> constexpr auto signature<::org::omg::CORBA::FloatSeqHelper> = ::org_omg_CORBA / "FloatSeqHelper";
namespace org::omg::CORBA { class FloatSeqHolder; }
template<> constexpr auto signature<::org::omg::CORBA::FloatSeqHolder> = ::org_omg_CORBA / "FloatSeqHolder";
namespace org::omg::CORBA { class IDLType; }
template<> constexpr auto signature<::org::omg::CORBA::IDLType> = ::org_omg_CORBA / "IDLType";
namespace org::omg::CORBA { class IDLTypeHelper; }
template<> constexpr auto signature<::org::omg::CORBA::IDLTypeHelper> = ::org_omg_CORBA / "IDLTypeHelper";
namespace org::omg::CORBA { class IDLTypeOperations; }
template<> constexpr auto signature<::org::omg::CORBA::IDLTypeOperations> = ::org_omg_CORBA / "IDLTypeOperations";
namespace org::omg::CORBA { class IMP_LIMIT; }
template<> constexpr auto signature<::org::omg::CORBA::IMP_LIMIT> = ::org_omg_CORBA / "IMP_LIMIT";
namespace org::omg::CORBA { class INITIALIZE; }
template<> constexpr auto signature<::org::omg::CORBA::INITIALIZE> = ::org_omg_CORBA / "INITIALIZE";
namespace org::omg::CORBA { class INTERNAL; }
template<> constexpr auto signature<::org::omg::CORBA::INTERNAL> = ::org_omg_CORBA / "INTERNAL";
namespace org::omg::CORBA { class INTF_REPOS; }
template<> constexpr auto signature<::org::omg::CORBA::INTF_REPOS> = ::org_omg_CORBA / "INTF_REPOS";
namespace org::omg::CORBA { class INVALID_ACTIVITY; }
template<> constexpr auto signature<::org::omg::CORBA::INVALID_ACTIVITY> = ::org_omg_CORBA / "INVALID_ACTIVITY";
namespace org::omg::CORBA { class INVALID_TRANSACTION; }
template<> constexpr auto signature<::org::omg::CORBA::INVALID_TRANSACTION> = ::org_omg_CORBA / "INVALID_TRANSACTION";
namespace org::omg::CORBA { class INV_FLAG; }
template<> constexpr auto signature<::org::omg::CORBA::INV_FLAG> = ::org_omg_CORBA / "INV_FLAG";
namespace org::omg::CORBA { class INV_IDENT; }
template<> constexpr auto signature<::org::omg::CORBA::INV_IDENT> = ::org_omg_CORBA / "INV_IDENT";
namespace org::omg::CORBA { class INV_OBJREF; }
template<> constexpr auto signature<::org::omg::CORBA::INV_OBJREF> = ::org_omg_CORBA / "INV_OBJREF";
namespace org::omg::CORBA { class INV_POLICY; }
template<> constexpr auto signature<::org::omg::CORBA::INV_POLICY> = ::org_omg_CORBA / "INV_POLICY";
namespace org::omg::CORBA { class IRObject; }
template<> constexpr auto signature<::org::omg::CORBA::IRObject> = ::org_omg_CORBA / "IRObject";
namespace org::omg::CORBA { class IRObjectOperations; }
template<> constexpr auto signature<::org::omg::CORBA::IRObjectOperations> = ::org_omg_CORBA / "IRObjectOperations";
namespace org::omg::CORBA { class IdentifierHelper; }
template<> constexpr auto signature<::org::omg::CORBA::IdentifierHelper> = ::org_omg_CORBA / "IdentifierHelper";
namespace org::omg::CORBA { class IntHolder; }
template<> constexpr auto signature<::org::omg::CORBA::IntHolder> = ::org_omg_CORBA / "IntHolder";
namespace org::omg::CORBA { class LocalObject; }
template<> constexpr auto signature<::org::omg::CORBA::LocalObject> = ::org_omg_CORBA / "LocalObject";
namespace org::omg::CORBA { class LongHolder; }
template<> constexpr auto signature<::org::omg::CORBA::LongHolder> = ::org_omg_CORBA / "LongHolder";
namespace org::omg::CORBA { class LongLongSeqHelper; }
template<> constexpr auto signature<::org::omg::CORBA::LongLongSeqHelper> = ::org_omg_CORBA / "LongLongSeqHelper";
namespace org::omg::CORBA { class LongLongSeqHolder; }
template<> constexpr auto signature<::org::omg::CORBA::LongLongSeqHolder> = ::org_omg_CORBA / "LongLongSeqHolder";
namespace org::omg::CORBA { class LongSeqHelper; }
template<> constexpr auto signature<::org::omg::CORBA::LongSeqHelper> = ::org_omg_CORBA / "LongSeqHelper";
namespace org::omg::CORBA { class LongSeqHolder; }
template<> constexpr auto signature<::org::omg::CORBA::LongSeqHolder> = ::org_omg_CORBA / "LongSeqHolder";
namespace org::omg::CORBA { class MARSHAL; }
template<> constexpr auto signature<::org::omg::CORBA::MARSHAL> = ::org_omg_CORBA / "MARSHAL";
namespace org::omg::CORBA { class NO_IMPLEMENT; }
template<> constexpr auto signature<::org::omg::CORBA::NO_IMPLEMENT> = ::org_omg_CORBA / "NO_IMPLEMENT";
namespace org::omg::CORBA { class NO_MEMORY; }
template<> constexpr auto signature<::org::omg::CORBA::NO_MEMORY> = ::org_omg_CORBA / "NO_MEMORY";
namespace org::omg::CORBA { class NO_PERMISSION; }
template<> constexpr auto signature<::org::omg::CORBA::NO_PERMISSION> = ::org_omg_CORBA / "NO_PERMISSION";
namespace org::omg::CORBA { class NO_RESOURCES; }
template<> constexpr auto signature<::org::omg::CORBA::NO_RESOURCES> = ::org_omg_CORBA / "NO_RESOURCES";
namespace org::omg::CORBA { class NO_RESPONSE; }
template<> constexpr auto signature<::org::omg::CORBA::NO_RESPONSE> = ::org_omg_CORBA / "NO_RESPONSE";
namespace org::omg::CORBA { class NVList; }
template<> constexpr auto signature<::org::omg::CORBA::NVList> = ::org_omg_CORBA / "NVList";
namespace org::omg::CORBA { class NameValuePair; }
template<> constexpr auto signature<::org::omg::CORBA::NameValuePair> = ::org_omg_CORBA / "NameValuePair";
namespace org::omg::CORBA { class NameValuePairHelper; }
template<> constexpr auto signature<::org::omg::CORBA::NameValuePairHelper> = ::org_omg_CORBA / "NameValuePairHelper";
namespace org::omg::CORBA { class NamedValue; }
template<> constexpr auto signature<::org::omg::CORBA::NamedValue> = ::org_omg_CORBA / "NamedValue";
namespace org::omg::CORBA { class OBJECT_NOT_EXIST; }
template<> constexpr auto signature<::org::omg::CORBA::OBJECT_NOT_EXIST> = ::org_omg_CORBA / "OBJECT_NOT_EXIST";
namespace org::omg::CORBA { class OBJ_ADAPTER; }
template<> constexpr auto signature<::org::omg::CORBA::OBJ_ADAPTER> = ::org_omg_CORBA / "OBJ_ADAPTER";
namespace org::omg::CORBA { class OMGVMCID; }
template<> constexpr auto signature<::org::omg::CORBA::OMGVMCID> = ::org_omg_CORBA / "OMGVMCID";
namespace org::omg::CORBA { class ORB; }
template<> constexpr auto signature<::org::omg::CORBA::ORB> = ::org_omg_CORBA / "ORB";
namespace org::omg::CORBA { class ORB$1; }
template<> constexpr auto signature<::org::omg::CORBA::ORB$1> = ::org_omg_CORBA / "ORB$1";
namespace org::omg::CORBA { class ORB$2; }
template<> constexpr auto signature<::org::omg::CORBA::ORB$2> = ::org_omg_CORBA / "ORB$2";
namespace org::omg::CORBA::ORBPackage { class InconsistentTypeCode; }
template<> constexpr auto signature<::org::omg::CORBA::ORBPackage::InconsistentTypeCode> = ::org_omg_CORBA_ORBPackage / "InconsistentTypeCode";
namespace org::omg::CORBA::ORBPackage { class InvalidName; }
template<> constexpr auto signature<::org::omg::CORBA::ORBPackage::InvalidName> = ::org_omg_CORBA_ORBPackage / "InvalidName";
namespace org::omg::CORBA { class Object; }
template<> constexpr auto signature<::org::omg::CORBA::Object> = ::org_omg_CORBA / "Object";
namespace org::omg::CORBA { class ObjectHelper; }
template<> constexpr auto signature<::org::omg::CORBA::ObjectHelper> = ::org_omg_CORBA / "ObjectHelper";
namespace org::omg::CORBA { class ObjectHolder; }
template<> constexpr auto signature<::org::omg::CORBA::ObjectHolder> = ::org_omg_CORBA / "ObjectHolder";
namespace org::omg::CORBA { class OctetSeqHelper; }
template<> constexpr auto signature<::org::omg::CORBA::OctetSeqHelper> = ::org_omg_CORBA / "OctetSeqHelper";
namespace org::omg::CORBA { class OctetSeqHolder; }
template<> constexpr auto signature<::org::omg::CORBA::OctetSeqHolder> = ::org_omg_CORBA / "OctetSeqHolder";
namespace org::omg::CORBA { class PERSIST_STORE; }
template<> constexpr auto signature<::org::omg::CORBA::PERSIST_STORE> = ::org_omg_CORBA / "PERSIST_STORE";
namespace org::omg::CORBA { class PRIVATE_MEMBER; }
template<> constexpr auto signature<::org::omg::CORBA::PRIVATE_MEMBER> = ::org_omg_CORBA / "PRIVATE_MEMBER";
namespace org::omg::CORBA { class PUBLIC_MEMBER; }
template<> constexpr auto signature<::org::omg::CORBA::PUBLIC_MEMBER> = ::org_omg_CORBA / "PUBLIC_MEMBER";
namespace org::omg::CORBA { class ParameterMode; }
template<> constexpr auto signature<::org::omg::CORBA::ParameterMode> = ::org_omg_CORBA / "ParameterMode";
namespace org::omg::CORBA { class ParameterModeHelper; }
template<> constexpr auto signature<::org::omg::CORBA::ParameterModeHelper> = ::org_omg_CORBA / "ParameterModeHelper";
namespace org::omg::CORBA { class ParameterModeHolder; }
template<> constexpr auto signature<::org::omg::CORBA::ParameterModeHolder> = ::org_omg_CORBA / "ParameterModeHolder";
namespace org::omg::CORBA { class Policy; }
template<> constexpr auto signature<::org::omg::CORBA::Policy> = ::org_omg_CORBA / "Policy";
namespace org::omg::CORBA { class PolicyError; }
template<> constexpr auto signature<::org::omg::CORBA::PolicyError> = ::org_omg_CORBA / "PolicyError";
namespace org::omg::CORBA { class PolicyErrorCodeHelper; }
template<> constexpr auto signature<::org::omg::CORBA::PolicyErrorCodeHelper> = ::org_omg_CORBA / "PolicyErrorCodeHelper";
namespace org::omg::CORBA { class PolicyErrorHelper; }
template<> constexpr auto signature<::org::omg::CORBA::PolicyErrorHelper> = ::org_omg_CORBA / "PolicyErrorHelper";
namespace org::omg::CORBA { class PolicyErrorHolder; }
template<> constexpr auto signature<::org::omg::CORBA::PolicyErrorHolder> = ::org_omg_CORBA / "PolicyErrorHolder";
namespace org::omg::CORBA { class PolicyHelper; }
template<> constexpr auto signature<::org::omg::CORBA::PolicyHelper> = ::org_omg_CORBA / "PolicyHelper";
namespace org::omg::CORBA { class PolicyHolder; }
template<> constexpr auto signature<::org::omg::CORBA::PolicyHolder> = ::org_omg_CORBA / "PolicyHolder";
namespace org::omg::CORBA { class PolicyListHelper; }
template<> constexpr auto signature<::org::omg::CORBA::PolicyListHelper> = ::org_omg_CORBA / "PolicyListHelper";
namespace org::omg::CORBA { class PolicyListHolder; }
template<> constexpr auto signature<::org::omg::CORBA::PolicyListHolder> = ::org_omg_CORBA / "PolicyListHolder";
namespace org::omg::CORBA { class PolicyOperations; }
template<> constexpr auto signature<::org::omg::CORBA::PolicyOperations> = ::org_omg_CORBA / "PolicyOperations";
namespace org::omg::CORBA { class PolicyTypeHelper; }
template<> constexpr auto signature<::org::omg::CORBA::PolicyTypeHelper> = ::org_omg_CORBA / "PolicyTypeHelper";
namespace org::omg::CORBA { class Principal; }
template<> constexpr auto signature<::org::omg::CORBA::Principal> = ::org_omg_CORBA / "Principal";
namespace org::omg::CORBA { class PrincipalHolder; }
template<> constexpr auto signature<::org::omg::CORBA::PrincipalHolder> = ::org_omg_CORBA / "PrincipalHolder";
namespace org::omg::CORBA { class REBIND; }
template<> constexpr auto signature<::org::omg::CORBA::REBIND> = ::org_omg_CORBA / "REBIND";
namespace org::omg::CORBA { class RepositoryIdHelper; }
template<> constexpr auto signature<::org::omg::CORBA::RepositoryIdHelper> = ::org_omg_CORBA / "RepositoryIdHelper";
namespace org::omg::CORBA { class Request; }
template<> constexpr auto signature<::org::omg::CORBA::Request> = ::org_omg_CORBA / "Request";
namespace org::omg::CORBA { class ServerRequest; }
template<> constexpr auto signature<::org::omg::CORBA::ServerRequest> = ::org_omg_CORBA / "ServerRequest";
namespace org::omg::CORBA { class ServiceDetail; }
template<> constexpr auto signature<::org::omg::CORBA::ServiceDetail> = ::org_omg_CORBA / "ServiceDetail";
namespace org::omg::CORBA { class ServiceDetailHelper; }
template<> constexpr auto signature<::org::omg::CORBA::ServiceDetailHelper> = ::org_omg_CORBA / "ServiceDetailHelper";
namespace org::omg::CORBA { class ServiceInformation; }
template<> constexpr auto signature<::org::omg::CORBA::ServiceInformation> = ::org_omg_CORBA / "ServiceInformation";
namespace org::omg::CORBA { class ServiceInformationHelper; }
template<> constexpr auto signature<::org::omg::CORBA::ServiceInformationHelper> = ::org_omg_CORBA / "ServiceInformationHelper";
namespace org::omg::CORBA { class ServiceInformationHolder; }
template<> constexpr auto signature<::org::omg::CORBA::ServiceInformationHolder> = ::org_omg_CORBA / "ServiceInformationHolder";
namespace org::omg::CORBA { class SetOverrideType; }
template<> constexpr auto signature<::org::omg::CORBA::SetOverrideType> = ::org_omg_CORBA / "SetOverrideType";
namespace org::omg::CORBA { class SetOverrideTypeHelper; }
template<> constexpr auto signature<::org::omg::CORBA::SetOverrideTypeHelper> = ::org_omg_CORBA / "SetOverrideTypeHelper";
namespace org::omg::CORBA { class ShortHolder; }
template<> constexpr auto signature<::org::omg::CORBA::ShortHolder> = ::org_omg_CORBA / "ShortHolder";
namespace org::omg::CORBA { class ShortSeqHelper; }
template<> constexpr auto signature<::org::omg::CORBA::ShortSeqHelper> = ::org_omg_CORBA / "ShortSeqHelper";
namespace org::omg::CORBA { class ShortSeqHolder; }
template<> constexpr auto signature<::org::omg::CORBA::ShortSeqHolder> = ::org_omg_CORBA / "ShortSeqHolder";
namespace org::omg::CORBA { class StringHolder; }
template<> constexpr auto signature<::org::omg::CORBA::StringHolder> = ::org_omg_CORBA / "StringHolder";
namespace org::omg::CORBA { class StringSeqHelper; }
template<> constexpr auto signature<::org::omg::CORBA::StringSeqHelper> = ::org_omg_CORBA / "StringSeqHelper";
namespace org::omg::CORBA { class StringSeqHolder; }
template<> constexpr auto signature<::org::omg::CORBA::StringSeqHolder> = ::org_omg_CORBA / "StringSeqHolder";
namespace org::omg::CORBA { class StringValueHelper; }
template<> constexpr auto signature<::org::omg::CORBA::StringValueHelper> = ::org_omg_CORBA / "StringValueHelper";
namespace org::omg::CORBA { class StructMember; }
template<> constexpr auto signature<::org::omg::CORBA::StructMember> = ::org_omg_CORBA / "StructMember";
namespace org::omg::CORBA { class StructMemberHelper; }
template<> constexpr auto signature<::org::omg::CORBA::StructMemberHelper> = ::org_omg_CORBA / "StructMemberHelper";
namespace org::omg::CORBA { class SystemException; }
template<> constexpr auto signature<::org::omg::CORBA::SystemException> = ::org_omg_CORBA / "SystemException";
namespace org::omg::CORBA { class TCKind; }
template<> constexpr auto signature<::org::omg::CORBA::TCKind> = ::org_omg_CORBA / "TCKind";
namespace org::omg::CORBA { class TIMEOUT; }
template<> constexpr auto signature<::org::omg::CORBA::TIMEOUT> = ::org_omg_CORBA / "TIMEOUT";
namespace org::omg::CORBA { class TRANSACTION_MODE; }
template<> constexpr auto signature<::org::omg::CORBA::TRANSACTION_MODE> = ::org_omg_CORBA / "TRANSACTION_MODE";
namespace org::omg::CORBA { class TRANSACTION_REQUIRED; }
template<> constexpr auto signature<::org::omg::CORBA::TRANSACTION_REQUIRED> = ::org_omg_CORBA / "TRANSACTION_REQUIRED";
namespace org::omg::CORBA { class TRANSACTION_ROLLEDBACK; }
template<> constexpr auto signature<::org::omg::CORBA::TRANSACTION_ROLLEDBACK> = ::org_omg_CORBA / "TRANSACTION_ROLLEDBACK";
namespace org::omg::CORBA { class TRANSACTION_UNAVAILABLE; }
template<> constexpr auto signature<::org::omg::CORBA::TRANSACTION_UNAVAILABLE> = ::org_omg_CORBA / "TRANSACTION_UNAVAILABLE";
namespace org::omg::CORBA { class TRANSIENT; }
template<> constexpr auto signature<::org::omg::CORBA::TRANSIENT> = ::org_omg_CORBA / "TRANSIENT";
namespace org::omg::CORBA { class TypeCode; }
template<> constexpr auto signature<::org::omg::CORBA::TypeCode> = ::org_omg_CORBA / "TypeCode";
namespace org::omg::CORBA { class TypeCodeHolder; }
template<> constexpr auto signature<::org::omg::CORBA::TypeCodeHolder> = ::org_omg_CORBA / "TypeCodeHolder";
namespace org::omg::CORBA::TypeCodePackage { class BadKind; }
template<> constexpr auto signature<::org::omg::CORBA::TypeCodePackage::BadKind> = ::org_omg_CORBA_TypeCodePackage / "BadKind";
namespace org::omg::CORBA::TypeCodePackage { class Bounds; }
template<> constexpr auto signature<::org::omg::CORBA::TypeCodePackage::Bounds> = ::org_omg_CORBA_TypeCodePackage / "Bounds";
namespace org::omg::CORBA { class ULongLongSeqHelper; }
template<> constexpr auto signature<::org::omg::CORBA::ULongLongSeqHelper> = ::org_omg_CORBA / "ULongLongSeqHelper";
namespace org::omg::CORBA { class ULongLongSeqHolder; }
template<> constexpr auto signature<::org::omg::CORBA::ULongLongSeqHolder> = ::org_omg_CORBA / "ULongLongSeqHolder";
namespace org::omg::CORBA { class ULongSeqHelper; }
template<> constexpr auto signature<::org::omg::CORBA::ULongSeqHelper> = ::org_omg_CORBA / "ULongSeqHelper";
namespace org::omg::CORBA { class ULongSeqHolder; }
template<> constexpr auto signature<::org::omg::CORBA::ULongSeqHolder> = ::org_omg_CORBA / "ULongSeqHolder";
namespace org::omg::CORBA { class UNKNOWN; }
template<> constexpr auto signature<::org::omg::CORBA::UNKNOWN> = ::org_omg_CORBA / "UNKNOWN";
namespace org::omg::CORBA { class UNSUPPORTED_POLICY; }
template<> constexpr auto signature<::org::omg::CORBA::UNSUPPORTED_POLICY> = ::org_omg_CORBA / "UNSUPPORTED_POLICY";
namespace org::omg::CORBA { class UNSUPPORTED_POLICY_VALUE; }
template<> constexpr auto signature<::org::omg::CORBA::UNSUPPORTED_POLICY_VALUE> = ::org_omg_CORBA / "UNSUPPORTED_POLICY_VALUE";
namespace org::omg::CORBA { class UShortSeqHelper; }
template<> constexpr auto signature<::org::omg::CORBA::UShortSeqHelper> = ::org_omg_CORBA / "UShortSeqHelper";
namespace org::omg::CORBA { class UShortSeqHolder; }
template<> constexpr auto signature<::org::omg::CORBA::UShortSeqHolder> = ::org_omg_CORBA / "UShortSeqHolder";
namespace org::omg::CORBA { class UnionMember; }
template<> constexpr auto signature<::org::omg::CORBA::UnionMember> = ::org_omg_CORBA / "UnionMember";
namespace org::omg::CORBA { class UnionMemberHelper; }
template<> constexpr auto signature<::org::omg::CORBA::UnionMemberHelper> = ::org_omg_CORBA / "UnionMemberHelper";
namespace org::omg::CORBA { class UnknownUserException; }
template<> constexpr auto signature<::org::omg::CORBA::UnknownUserException> = ::org_omg_CORBA / "UnknownUserException";
namespace org::omg::CORBA { class UnknownUserExceptionHelper; }
template<> constexpr auto signature<::org::omg::CORBA::UnknownUserExceptionHelper> = ::org_omg_CORBA / "UnknownUserExceptionHelper";
namespace org::omg::CORBA { class UnknownUserExceptionHolder; }
template<> constexpr auto signature<::org::omg::CORBA::UnknownUserExceptionHolder> = ::org_omg_CORBA / "UnknownUserExceptionHolder";
namespace org::omg::CORBA { class UserException; }
template<> constexpr auto signature<::org::omg::CORBA::UserException> = ::org_omg_CORBA / "UserException";
namespace org::omg::CORBA { class VM_ABSTRACT; }
template<> constexpr auto signature<::org::omg::CORBA::VM_ABSTRACT> = ::org_omg_CORBA / "VM_ABSTRACT";
namespace org::omg::CORBA { class VM_CUSTOM; }
template<> constexpr auto signature<::org::omg::CORBA::VM_CUSTOM> = ::org_omg_CORBA / "VM_CUSTOM";
namespace org::omg::CORBA { class VM_NONE; }
template<> constexpr auto signature<::org::omg::CORBA::VM_NONE> = ::org_omg_CORBA / "VM_NONE";
namespace org::omg::CORBA { class VM_TRUNCATABLE; }
template<> constexpr auto signature<::org::omg::CORBA::VM_TRUNCATABLE> = ::org_omg_CORBA / "VM_TRUNCATABLE";
namespace org::omg::CORBA { class ValueBaseHelper; }
template<> constexpr auto signature<::org::omg::CORBA::ValueBaseHelper> = ::org_omg_CORBA / "ValueBaseHelper";
namespace org::omg::CORBA { class ValueBaseHolder; }
template<> constexpr auto signature<::org::omg::CORBA::ValueBaseHolder> = ::org_omg_CORBA / "ValueBaseHolder";
namespace org::omg::CORBA { class ValueMember; }
template<> constexpr auto signature<::org::omg::CORBA::ValueMember> = ::org_omg_CORBA / "ValueMember";
namespace org::omg::CORBA { class ValueMemberHelper; }
template<> constexpr auto signature<::org::omg::CORBA::ValueMemberHelper> = ::org_omg_CORBA / "ValueMemberHelper";
namespace org::omg::CORBA { class VersionSpecHelper; }
template<> constexpr auto signature<::org::omg::CORBA::VersionSpecHelper> = ::org_omg_CORBA / "VersionSpecHelper";
namespace org::omg::CORBA { class VisibilityHelper; }
template<> constexpr auto signature<::org::omg::CORBA::VisibilityHelper> = ::org_omg_CORBA / "VisibilityHelper";
namespace org::omg::CORBA { class WCharSeqHelper; }
template<> constexpr auto signature<::org::omg::CORBA::WCharSeqHelper> = ::org_omg_CORBA / "WCharSeqHelper";
namespace org::omg::CORBA { class WCharSeqHolder; }
template<> constexpr auto signature<::org::omg::CORBA::WCharSeqHolder> = ::org_omg_CORBA / "WCharSeqHolder";
namespace org::omg::CORBA { class WStringSeqHelper; }
template<> constexpr auto signature<::org::omg::CORBA::WStringSeqHelper> = ::org_omg_CORBA / "WStringSeqHelper";
namespace org::omg::CORBA { class WStringSeqHolder; }
template<> constexpr auto signature<::org::omg::CORBA::WStringSeqHolder> = ::org_omg_CORBA / "WStringSeqHolder";
namespace org::omg::CORBA { class WStringValueHelper; }
template<> constexpr auto signature<::org::omg::CORBA::WStringValueHelper> = ::org_omg_CORBA / "WStringValueHelper";
namespace org::omg::CORBA { class WrongTransaction; }
template<> constexpr auto signature<::org::omg::CORBA::WrongTransaction> = ::org_omg_CORBA / "WrongTransaction";
namespace org::omg::CORBA { class WrongTransactionHelper; }
template<> constexpr auto signature<::org::omg::CORBA::WrongTransactionHelper> = ::org_omg_CORBA / "WrongTransactionHelper";
namespace org::omg::CORBA { class WrongTransactionHolder; }
template<> constexpr auto signature<::org::omg::CORBA::WrongTransactionHolder> = ::org_omg_CORBA / "WrongTransactionHolder";
namespace org::omg::CORBA { class _IDLTypeStub; }
template<> constexpr auto signature<::org::omg::CORBA::_IDLTypeStub> = ::org_omg_CORBA / "_IDLTypeStub";
namespace org::omg::CORBA { class _PolicyStub; }
template<> constexpr auto signature<::org::omg::CORBA::_PolicyStub> = ::org_omg_CORBA / "_PolicyStub";
namespace org::omg::CORBA::portable { class ApplicationException; }
template<> constexpr auto signature<::org::omg::CORBA::portable::ApplicationException> = ::org_omg_CORBA_portable / "ApplicationException";
namespace org::omg::CORBA::portable { class BoxedValueHelper; }
template<> constexpr auto signature<::org::omg::CORBA::portable::BoxedValueHelper> = ::org_omg_CORBA_portable / "BoxedValueHelper";
namespace org::omg::CORBA::portable { class CustomValue; }
template<> constexpr auto signature<::org::omg::CORBA::portable::CustomValue> = ::org_omg_CORBA_portable / "CustomValue";
namespace org::omg::CORBA::portable { class Delegate; }
template<> constexpr auto signature<::org::omg::CORBA::portable::Delegate> = ::org_omg_CORBA_portable / "Delegate";
namespace org::omg::CORBA::portable { class IDLEntity; }
template<> constexpr auto signature<::org::omg::CORBA::portable::IDLEntity> = ::org_omg_CORBA_portable / "IDLEntity";
namespace org::omg::CORBA::portable { class IndirectionException; }
template<> constexpr auto signature<::org::omg::CORBA::portable::IndirectionException> = ::org_omg_CORBA_portable / "IndirectionException";
namespace org::omg::CORBA::portable { class InputStream; }
template<> constexpr auto signature<::org::omg::CORBA::portable::InputStream> = ::org_omg_CORBA_portable / "InputStream";
namespace org::omg::CORBA::portable { class InvokeHandler; }
template<> constexpr auto signature<::org::omg::CORBA::portable::InvokeHandler> = ::org_omg_CORBA_portable / "InvokeHandler";
namespace org::omg::CORBA::portable { class ObjectImpl; }
template<> constexpr auto signature<::org::omg::CORBA::portable::ObjectImpl> = ::org_omg_CORBA_portable / "ObjectImpl";
namespace org::omg::CORBA::portable { class OutputStream; }
template<> constexpr auto signature<::org::omg::CORBA::portable::OutputStream> = ::org_omg_CORBA_portable / "OutputStream";
namespace org::omg::CORBA::portable { class RemarshalException; }
template<> constexpr auto signature<::org::omg::CORBA::portable::RemarshalException> = ::org_omg_CORBA_portable / "RemarshalException";
namespace org::omg::CORBA::portable { class ResponseHandler; }
template<> constexpr auto signature<::org::omg::CORBA::portable::ResponseHandler> = ::org_omg_CORBA_portable / "ResponseHandler";
namespace org::omg::CORBA::portable { class ServantObject; }
template<> constexpr auto signature<::org::omg::CORBA::portable::ServantObject> = ::org_omg_CORBA_portable / "ServantObject";
namespace org::omg::CORBA::portable { class Streamable; }
template<> constexpr auto signature<::org::omg::CORBA::portable::Streamable> = ::org_omg_CORBA_portable / "Streamable";
namespace org::omg::CORBA::portable { class StreamableValue; }
template<> constexpr auto signature<::org::omg::CORBA::portable::StreamableValue> = ::org_omg_CORBA_portable / "StreamableValue";
namespace org::omg::CORBA::portable { class UnknownException; }
template<> constexpr auto signature<::org::omg::CORBA::portable::UnknownException> = ::org_omg_CORBA_portable / "UnknownException";
namespace org::omg::CORBA::portable { class ValueBase; }
template<> constexpr auto signature<::org::omg::CORBA::portable::ValueBase> = ::org_omg_CORBA_portable / "ValueBase";
namespace org::omg::CORBA::portable { class ValueFactory; }
template<> constexpr auto signature<::org::omg::CORBA::portable::ValueFactory> = ::org_omg_CORBA_portable / "ValueFactory";
namespace org::omg::CORBA::portable { class ValueInputStream; }
template<> constexpr auto signature<::org::omg::CORBA::portable::ValueInputStream> = ::org_omg_CORBA_portable / "ValueInputStream";
namespace org::omg::CORBA::portable { class ValueOutputStream; }
template<> constexpr auto signature<::org::omg::CORBA::portable::ValueOutputStream> = ::org_omg_CORBA_portable / "ValueOutputStream";
namespace org::omg::CORBA_2_3 { class ORB; }
template<> constexpr auto signature<::org::omg::CORBA_2_3::ORB> = ::org_omg_CORBA_2_3 / "ORB";
namespace org::omg::CORBA_2_3::portable { class Delegate; }
template<> constexpr auto signature<::org::omg::CORBA_2_3::portable::Delegate> = ::org_omg_CORBA_2_3_portable / "Delegate";
namespace org::omg::CORBA_2_3::portable { class InputStream; }
template<> constexpr auto signature<::org::omg::CORBA_2_3::portable::InputStream> = ::org_omg_CORBA_2_3_portable / "InputStream";
namespace org::omg::CORBA_2_3::portable { class InputStream$1; }
template<> constexpr auto signature<::org::omg::CORBA_2_3::portable::InputStream$1> = ::org_omg_CORBA_2_3_portable / "InputStream$1";
namespace org::omg::CORBA_2_3::portable { class ObjectImpl; }
template<> constexpr auto signature<::org::omg::CORBA_2_3::portable::ObjectImpl> = ::org_omg_CORBA_2_3_portable / "ObjectImpl";
namespace org::omg::CORBA_2_3::portable { class OutputStream; }
template<> constexpr auto signature<::org::omg::CORBA_2_3::portable::OutputStream> = ::org_omg_CORBA_2_3_portable / "OutputStream";
namespace org::omg::CORBA_2_3::portable { class OutputStream$1; }
template<> constexpr auto signature<::org::omg::CORBA_2_3::portable::OutputStream$1> = ::org_omg_CORBA_2_3_portable / "OutputStream$1";
namespace org::omg::CosNaming { class Binding; }
template<> constexpr auto signature<::org::omg::CosNaming::Binding> = ::org_omg_CosNaming / "Binding";
namespace org::omg::CosNaming { class BindingHelper; }
template<> constexpr auto signature<::org::omg::CosNaming::BindingHelper> = ::org_omg_CosNaming / "BindingHelper";
namespace org::omg::CosNaming { class BindingHolder; }
template<> constexpr auto signature<::org::omg::CosNaming::BindingHolder> = ::org_omg_CosNaming / "BindingHolder";
namespace org::omg::CosNaming { class BindingIterator; }
template<> constexpr auto signature<::org::omg::CosNaming::BindingIterator> = ::org_omg_CosNaming / "BindingIterator";
namespace org::omg::CosNaming { class BindingIteratorHelper; }
template<> constexpr auto signature<::org::omg::CosNaming::BindingIteratorHelper> = ::org_omg_CosNaming / "BindingIteratorHelper";
namespace org::omg::CosNaming { class BindingIteratorHolder; }
template<> constexpr auto signature<::org::omg::CosNaming::BindingIteratorHolder> = ::org_omg_CosNaming / "BindingIteratorHolder";
namespace org::omg::CosNaming { class BindingIteratorOperations; }
template<> constexpr auto signature<::org::omg::CosNaming::BindingIteratorOperations> = ::org_omg_CosNaming / "BindingIteratorOperations";
namespace org::omg::CosNaming { class BindingIteratorPOA; }
template<> constexpr auto signature<::org::omg::CosNaming::BindingIteratorPOA> = ::org_omg_CosNaming / "BindingIteratorPOA";
namespace org::omg::CosNaming { class BindingListHelper; }
template<> constexpr auto signature<::org::omg::CosNaming::BindingListHelper> = ::org_omg_CosNaming / "BindingListHelper";
namespace org::omg::CosNaming { class BindingListHolder; }
template<> constexpr auto signature<::org::omg::CosNaming::BindingListHolder> = ::org_omg_CosNaming / "BindingListHolder";
namespace org::omg::CosNaming { class BindingType; }
template<> constexpr auto signature<::org::omg::CosNaming::BindingType> = ::org_omg_CosNaming / "BindingType";
namespace org::omg::CosNaming { class BindingTypeHelper; }
template<> constexpr auto signature<::org::omg::CosNaming::BindingTypeHelper> = ::org_omg_CosNaming / "BindingTypeHelper";
namespace org::omg::CosNaming { class BindingTypeHolder; }
template<> constexpr auto signature<::org::omg::CosNaming::BindingTypeHolder> = ::org_omg_CosNaming / "BindingTypeHolder";
namespace org::omg::CosNaming { class IstringHelper; }
template<> constexpr auto signature<::org::omg::CosNaming::IstringHelper> = ::org_omg_CosNaming / "IstringHelper";
namespace org::omg::CosNaming { class NameComponent; }
template<> constexpr auto signature<::org::omg::CosNaming::NameComponent> = ::org_omg_CosNaming / "NameComponent";
namespace org::omg::CosNaming { class NameComponentHelper; }
template<> constexpr auto signature<::org::omg::CosNaming::NameComponentHelper> = ::org_omg_CosNaming / "NameComponentHelper";
namespace org::omg::CosNaming { class NameComponentHolder; }
template<> constexpr auto signature<::org::omg::CosNaming::NameComponentHolder> = ::org_omg_CosNaming / "NameComponentHolder";
namespace org::omg::CosNaming { class NameHelper; }
template<> constexpr auto signature<::org::omg::CosNaming::NameHelper> = ::org_omg_CosNaming / "NameHelper";
namespace org::omg::CosNaming { class NameHolder; }
template<> constexpr auto signature<::org::omg::CosNaming::NameHolder> = ::org_omg_CosNaming / "NameHolder";
namespace org::omg::CosNaming { class NamingContext; }
template<> constexpr auto signature<::org::omg::CosNaming::NamingContext> = ::org_omg_CosNaming / "NamingContext";
namespace org::omg::CosNaming { class NamingContextExt; }
template<> constexpr auto signature<::org::omg::CosNaming::NamingContextExt> = ::org_omg_CosNaming / "NamingContextExt";
namespace org::omg::CosNaming { class NamingContextExtHelper; }
template<> constexpr auto signature<::org::omg::CosNaming::NamingContextExtHelper> = ::org_omg_CosNaming / "NamingContextExtHelper";
namespace org::omg::CosNaming { class NamingContextExtHolder; }
template<> constexpr auto signature<::org::omg::CosNaming::NamingContextExtHolder> = ::org_omg_CosNaming / "NamingContextExtHolder";
namespace org::omg::CosNaming { class NamingContextExtOperations; }
template<> constexpr auto signature<::org::omg::CosNaming::NamingContextExtOperations> = ::org_omg_CosNaming / "NamingContextExtOperations";
namespace org::omg::CosNaming { class NamingContextExtPOA; }
template<> constexpr auto signature<::org::omg::CosNaming::NamingContextExtPOA> = ::org_omg_CosNaming / "NamingContextExtPOA";
namespace org::omg::CosNaming::NamingContextExtPackage { class AddressHelper; }
template<> constexpr auto signature<::org::omg::CosNaming::NamingContextExtPackage::AddressHelper> = ::org_omg_CosNaming_NamingContextExtPackage / "AddressHelper";
namespace org::omg::CosNaming::NamingContextExtPackage { class InvalidAddress; }
template<> constexpr auto signature<::org::omg::CosNaming::NamingContextExtPackage::InvalidAddress> = ::org_omg_CosNaming_NamingContextExtPackage / "InvalidAddress";
namespace org::omg::CosNaming::NamingContextExtPackage { class InvalidAddressHelper; }
template<> constexpr auto signature<::org::omg::CosNaming::NamingContextExtPackage::InvalidAddressHelper> = ::org_omg_CosNaming_NamingContextExtPackage / "InvalidAddressHelper";
namespace org::omg::CosNaming::NamingContextExtPackage { class InvalidAddressHolder; }
template<> constexpr auto signature<::org::omg::CosNaming::NamingContextExtPackage::InvalidAddressHolder> = ::org_omg_CosNaming_NamingContextExtPackage / "InvalidAddressHolder";
namespace org::omg::CosNaming::NamingContextExtPackage { class StringNameHelper; }
template<> constexpr auto signature<::org::omg::CosNaming::NamingContextExtPackage::StringNameHelper> = ::org_omg_CosNaming_NamingContextExtPackage / "StringNameHelper";
namespace org::omg::CosNaming::NamingContextExtPackage { class URLStringHelper; }
template<> constexpr auto signature<::org::omg::CosNaming::NamingContextExtPackage::URLStringHelper> = ::org_omg_CosNaming_NamingContextExtPackage / "URLStringHelper";
namespace org::omg::CosNaming { class NamingContextHelper; }
template<> constexpr auto signature<::org::omg::CosNaming::NamingContextHelper> = ::org_omg_CosNaming / "NamingContextHelper";
namespace org::omg::CosNaming { class NamingContextHolder; }
template<> constexpr auto signature<::org::omg::CosNaming::NamingContextHolder> = ::org_omg_CosNaming / "NamingContextHolder";
namespace org::omg::CosNaming { class NamingContextOperations; }
template<> constexpr auto signature<::org::omg::CosNaming::NamingContextOperations> = ::org_omg_CosNaming / "NamingContextOperations";
namespace org::omg::CosNaming { class NamingContextPOA; }
template<> constexpr auto signature<::org::omg::CosNaming::NamingContextPOA> = ::org_omg_CosNaming / "NamingContextPOA";
namespace org::omg::CosNaming::NamingContextPackage { class AlreadyBound; }
template<> constexpr auto signature<::org::omg::CosNaming::NamingContextPackage::AlreadyBound> = ::org_omg_CosNaming_NamingContextPackage / "AlreadyBound";
namespace org::omg::CosNaming::NamingContextPackage { class AlreadyBoundHelper; }
template<> constexpr auto signature<::org::omg::CosNaming::NamingContextPackage::AlreadyBoundHelper> = ::org_omg_CosNaming_NamingContextPackage / "AlreadyBoundHelper";
namespace org::omg::CosNaming::NamingContextPackage { class AlreadyBoundHolder; }
template<> constexpr auto signature<::org::omg::CosNaming::NamingContextPackage::AlreadyBoundHolder> = ::org_omg_CosNaming_NamingContextPackage / "AlreadyBoundHolder";
namespace org::omg::CosNaming::NamingContextPackage { class CannotProceed; }
template<> constexpr auto signature<::org::omg::CosNaming::NamingContextPackage::CannotProceed> = ::org_omg_CosNaming_NamingContextPackage / "CannotProceed";
namespace org::omg::CosNaming::NamingContextPackage { class CannotProceedHelper; }
template<> constexpr auto signature<::org::omg::CosNaming::NamingContextPackage::CannotProceedHelper> = ::org_omg_CosNaming_NamingContextPackage / "CannotProceedHelper";
namespace org::omg::CosNaming::NamingContextPackage { class CannotProceedHolder; }
template<> constexpr auto signature<::org::omg::CosNaming::NamingContextPackage::CannotProceedHolder> = ::org_omg_CosNaming_NamingContextPackage / "CannotProceedHolder";
namespace org::omg::CosNaming::NamingContextPackage { class InvalidName; }
template<> constexpr auto signature<::org::omg::CosNaming::NamingContextPackage::InvalidName> = ::org_omg_CosNaming_NamingContextPackage / "InvalidName";
namespace org::omg::CosNaming::NamingContextPackage { class InvalidNameHelper; }
template<> constexpr auto signature<::org::omg::CosNaming::NamingContextPackage::InvalidNameHelper> = ::org_omg_CosNaming_NamingContextPackage / "InvalidNameHelper";
namespace org::omg::CosNaming::NamingContextPackage { class InvalidNameHolder; }
template<> constexpr auto signature<::org::omg::CosNaming::NamingContextPackage::InvalidNameHolder> = ::org_omg_CosNaming_NamingContextPackage / "InvalidNameHolder";
namespace org::omg::CosNaming::NamingContextPackage { class NotEmpty; }
template<> constexpr auto signature<::org::omg::CosNaming::NamingContextPackage::NotEmpty> = ::org_omg_CosNaming_NamingContextPackage / "NotEmpty";
namespace org::omg::CosNaming::NamingContextPackage { class NotEmptyHelper; }
template<> constexpr auto signature<::org::omg::CosNaming::NamingContextPackage::NotEmptyHelper> = ::org_omg_CosNaming_NamingContextPackage / "NotEmptyHelper";
namespace org::omg::CosNaming::NamingContextPackage { class NotEmptyHolder; }
template<> constexpr auto signature<::org::omg::CosNaming::NamingContextPackage::NotEmptyHolder> = ::org_omg_CosNaming_NamingContextPackage / "NotEmptyHolder";
namespace org::omg::CosNaming::NamingContextPackage { class NotFound; }
template<> constexpr auto signature<::org::omg::CosNaming::NamingContextPackage::NotFound> = ::org_omg_CosNaming_NamingContextPackage / "NotFound";
namespace org::omg::CosNaming::NamingContextPackage { class NotFoundHelper; }
template<> constexpr auto signature<::org::omg::CosNaming::NamingContextPackage::NotFoundHelper> = ::org_omg_CosNaming_NamingContextPackage / "NotFoundHelper";
namespace org::omg::CosNaming::NamingContextPackage { class NotFoundHolder; }
template<> constexpr auto signature<::org::omg::CosNaming::NamingContextPackage::NotFoundHolder> = ::org_omg_CosNaming_NamingContextPackage / "NotFoundHolder";
namespace org::omg::CosNaming::NamingContextPackage { class NotFoundReason; }
template<> constexpr auto signature<::org::omg::CosNaming::NamingContextPackage::NotFoundReason> = ::org_omg_CosNaming_NamingContextPackage / "NotFoundReason";
namespace org::omg::CosNaming::NamingContextPackage { class NotFoundReasonHelper; }
template<> constexpr auto signature<::org::omg::CosNaming::NamingContextPackage::NotFoundReasonHelper> = ::org_omg_CosNaming_NamingContextPackage / "NotFoundReasonHelper";
namespace org::omg::CosNaming::NamingContextPackage { class NotFoundReasonHolder; }
template<> constexpr auto signature<::org::omg::CosNaming::NamingContextPackage::NotFoundReasonHolder> = ::org_omg_CosNaming_NamingContextPackage / "NotFoundReasonHolder";
namespace org::omg::CosNaming { class _BindingIteratorImplBase; }
template<> constexpr auto signature<::org::omg::CosNaming::_BindingIteratorImplBase> = ::org_omg_CosNaming / "_BindingIteratorImplBase";
namespace org::omg::CosNaming { class _BindingIteratorStub; }
template<> constexpr auto signature<::org::omg::CosNaming::_BindingIteratorStub> = ::org_omg_CosNaming / "_BindingIteratorStub";
namespace org::omg::CosNaming { class _NamingContextExtStub; }
template<> constexpr auto signature<::org::omg::CosNaming::_NamingContextExtStub> = ::org_omg_CosNaming / "_NamingContextExtStub";
namespace org::omg::CosNaming { class _NamingContextImplBase; }
template<> constexpr auto signature<::org::omg::CosNaming::_NamingContextImplBase> = ::org_omg_CosNaming / "_NamingContextImplBase";
namespace org::omg::CosNaming { class _NamingContextStub; }
template<> constexpr auto signature<::org::omg::CosNaming::_NamingContextStub> = ::org_omg_CosNaming / "_NamingContextStub";
namespace org::omg::Dynamic { class Parameter; }
template<> constexpr auto signature<::org::omg::Dynamic::Parameter> = ::org_omg_Dynamic / "Parameter";
namespace org::omg::DynamicAny { class AnySeqHelper; }
template<> constexpr auto signature<::org::omg::DynamicAny::AnySeqHelper> = ::org_omg_DynamicAny / "AnySeqHelper";
namespace org::omg::DynamicAny { class DynAny; }
template<> constexpr auto signature<::org::omg::DynamicAny::DynAny> = ::org_omg_DynamicAny / "DynAny";
namespace org::omg::DynamicAny { class DynAnyFactory; }
template<> constexpr auto signature<::org::omg::DynamicAny::DynAnyFactory> = ::org_omg_DynamicAny / "DynAnyFactory";
namespace org::omg::DynamicAny { class DynAnyFactoryHelper; }
template<> constexpr auto signature<::org::omg::DynamicAny::DynAnyFactoryHelper> = ::org_omg_DynamicAny / "DynAnyFactoryHelper";
namespace org::omg::DynamicAny { class DynAnyFactoryOperations; }
template<> constexpr auto signature<::org::omg::DynamicAny::DynAnyFactoryOperations> = ::org_omg_DynamicAny / "DynAnyFactoryOperations";
namespace org::omg::DynamicAny::DynAnyFactoryPackage { class InconsistentTypeCode; }
template<> constexpr auto signature<::org::omg::DynamicAny::DynAnyFactoryPackage::InconsistentTypeCode> = ::org_omg_DynamicAny_DynAnyFactoryPackage / "InconsistentTypeCode";
namespace org::omg::DynamicAny::DynAnyFactoryPackage { class InconsistentTypeCodeHelper; }
template<> constexpr auto signature<::org::omg::DynamicAny::DynAnyFactoryPackage::InconsistentTypeCodeHelper> = ::org_omg_DynamicAny_DynAnyFactoryPackage / "InconsistentTypeCodeHelper";
namespace org::omg::DynamicAny { class DynAnyHelper; }
template<> constexpr auto signature<::org::omg::DynamicAny::DynAnyHelper> = ::org_omg_DynamicAny / "DynAnyHelper";
namespace org::omg::DynamicAny { class DynAnyOperations; }
template<> constexpr auto signature<::org::omg::DynamicAny::DynAnyOperations> = ::org_omg_DynamicAny / "DynAnyOperations";
namespace org::omg::DynamicAny::DynAnyPackage { class InvalidValue; }
template<> constexpr auto signature<::org::omg::DynamicAny::DynAnyPackage::InvalidValue> = ::org_omg_DynamicAny_DynAnyPackage / "InvalidValue";
namespace org::omg::DynamicAny::DynAnyPackage { class InvalidValueHelper; }
template<> constexpr auto signature<::org::omg::DynamicAny::DynAnyPackage::InvalidValueHelper> = ::org_omg_DynamicAny_DynAnyPackage / "InvalidValueHelper";
namespace org::omg::DynamicAny::DynAnyPackage { class TypeMismatch; }
template<> constexpr auto signature<::org::omg::DynamicAny::DynAnyPackage::TypeMismatch> = ::org_omg_DynamicAny_DynAnyPackage / "TypeMismatch";
namespace org::omg::DynamicAny::DynAnyPackage { class TypeMismatchHelper; }
template<> constexpr auto signature<::org::omg::DynamicAny::DynAnyPackage::TypeMismatchHelper> = ::org_omg_DynamicAny_DynAnyPackage / "TypeMismatchHelper";
namespace org::omg::DynamicAny { class DynAnySeqHelper; }
template<> constexpr auto signature<::org::omg::DynamicAny::DynAnySeqHelper> = ::org_omg_DynamicAny / "DynAnySeqHelper";
namespace org::omg::DynamicAny { class DynArray; }
template<> constexpr auto signature<::org::omg::DynamicAny::DynArray> = ::org_omg_DynamicAny / "DynArray";
namespace org::omg::DynamicAny { class DynArrayHelper; }
template<> constexpr auto signature<::org::omg::DynamicAny::DynArrayHelper> = ::org_omg_DynamicAny / "DynArrayHelper";
namespace org::omg::DynamicAny { class DynArrayOperations; }
template<> constexpr auto signature<::org::omg::DynamicAny::DynArrayOperations> = ::org_omg_DynamicAny / "DynArrayOperations";
namespace org::omg::DynamicAny { class DynEnum; }
template<> constexpr auto signature<::org::omg::DynamicAny::DynEnum> = ::org_omg_DynamicAny / "DynEnum";
namespace org::omg::DynamicAny { class DynEnumHelper; }
template<> constexpr auto signature<::org::omg::DynamicAny::DynEnumHelper> = ::org_omg_DynamicAny / "DynEnumHelper";
namespace org::omg::DynamicAny { class DynEnumOperations; }
template<> constexpr auto signature<::org::omg::DynamicAny::DynEnumOperations> = ::org_omg_DynamicAny / "DynEnumOperations";
namespace org::omg::DynamicAny { class DynFixed; }
template<> constexpr auto signature<::org::omg::DynamicAny::DynFixed> = ::org_omg_DynamicAny / "DynFixed";
namespace org::omg::DynamicAny { class DynFixedHelper; }
template<> constexpr auto signature<::org::omg::DynamicAny::DynFixedHelper> = ::org_omg_DynamicAny / "DynFixedHelper";
namespace org::omg::DynamicAny { class DynFixedOperations; }
template<> constexpr auto signature<::org::omg::DynamicAny::DynFixedOperations> = ::org_omg_DynamicAny / "DynFixedOperations";
namespace org::omg::DynamicAny { class DynSequence; }
template<> constexpr auto signature<::org::omg::DynamicAny::DynSequence> = ::org_omg_DynamicAny / "DynSequence";
namespace org::omg::DynamicAny { class DynSequenceHelper; }
template<> constexpr auto signature<::org::omg::DynamicAny::DynSequenceHelper> = ::org_omg_DynamicAny / "DynSequenceHelper";
namespace org::omg::DynamicAny { class DynSequenceOperations; }
template<> constexpr auto signature<::org::omg::DynamicAny::DynSequenceOperations> = ::org_omg_DynamicAny / "DynSequenceOperations";
namespace org::omg::DynamicAny { class DynStruct; }
template<> constexpr auto signature<::org::omg::DynamicAny::DynStruct> = ::org_omg_DynamicAny / "DynStruct";
namespace org::omg::DynamicAny { class DynStructHelper; }
template<> constexpr auto signature<::org::omg::DynamicAny::DynStructHelper> = ::org_omg_DynamicAny / "DynStructHelper";
namespace org::omg::DynamicAny { class DynStructOperations; }
template<> constexpr auto signature<::org::omg::DynamicAny::DynStructOperations> = ::org_omg_DynamicAny / "DynStructOperations";
namespace org::omg::DynamicAny { class DynUnion; }
template<> constexpr auto signature<::org::omg::DynamicAny::DynUnion> = ::org_omg_DynamicAny / "DynUnion";
namespace org::omg::DynamicAny { class DynUnionHelper; }
template<> constexpr auto signature<::org::omg::DynamicAny::DynUnionHelper> = ::org_omg_DynamicAny / "DynUnionHelper";
namespace org::omg::DynamicAny { class DynUnionOperations; }
template<> constexpr auto signature<::org::omg::DynamicAny::DynUnionOperations> = ::org_omg_DynamicAny / "DynUnionOperations";
namespace org::omg::DynamicAny { class DynValue; }
template<> constexpr auto signature<::org::omg::DynamicAny::DynValue> = ::org_omg_DynamicAny / "DynValue";
namespace org::omg::DynamicAny { class DynValueBox; }
template<> constexpr auto signature<::org::omg::DynamicAny::DynValueBox> = ::org_omg_DynamicAny / "DynValueBox";
namespace org::omg::DynamicAny { class DynValueBoxOperations; }
template<> constexpr auto signature<::org::omg::DynamicAny::DynValueBoxOperations> = ::org_omg_DynamicAny / "DynValueBoxOperations";
namespace org::omg::DynamicAny { class DynValueCommon; }
template<> constexpr auto signature<::org::omg::DynamicAny::DynValueCommon> = ::org_omg_DynamicAny / "DynValueCommon";
namespace org::omg::DynamicAny { class DynValueCommonOperations; }
template<> constexpr auto signature<::org::omg::DynamicAny::DynValueCommonOperations> = ::org_omg_DynamicAny / "DynValueCommonOperations";
namespace org::omg::DynamicAny { class DynValueHelper; }
template<> constexpr auto signature<::org::omg::DynamicAny::DynValueHelper> = ::org_omg_DynamicAny / "DynValueHelper";
namespace org::omg::DynamicAny { class DynValueOperations; }
template<> constexpr auto signature<::org::omg::DynamicAny::DynValueOperations> = ::org_omg_DynamicAny / "DynValueOperations";
namespace org::omg::DynamicAny { class FieldNameHelper; }
template<> constexpr auto signature<::org::omg::DynamicAny::FieldNameHelper> = ::org_omg_DynamicAny / "FieldNameHelper";
namespace org::omg::DynamicAny { class NameDynAnyPair; }
template<> constexpr auto signature<::org::omg::DynamicAny::NameDynAnyPair> = ::org_omg_DynamicAny / "NameDynAnyPair";
namespace org::omg::DynamicAny { class NameDynAnyPairHelper; }
template<> constexpr auto signature<::org::omg::DynamicAny::NameDynAnyPairHelper> = ::org_omg_DynamicAny / "NameDynAnyPairHelper";
namespace org::omg::DynamicAny { class NameDynAnyPairSeqHelper; }
template<> constexpr auto signature<::org::omg::DynamicAny::NameDynAnyPairSeqHelper> = ::org_omg_DynamicAny / "NameDynAnyPairSeqHelper";
namespace org::omg::DynamicAny { class NameValuePair; }
template<> constexpr auto signature<::org::omg::DynamicAny::NameValuePair> = ::org_omg_DynamicAny / "NameValuePair";
namespace org::omg::DynamicAny { class NameValuePairHelper; }
template<> constexpr auto signature<::org::omg::DynamicAny::NameValuePairHelper> = ::org_omg_DynamicAny / "NameValuePairHelper";
namespace org::omg::DynamicAny { class NameValuePairSeqHelper; }
template<> constexpr auto signature<::org::omg::DynamicAny::NameValuePairSeqHelper> = ::org_omg_DynamicAny / "NameValuePairSeqHelper";
namespace org::omg::DynamicAny { class _DynAnyFactoryStub; }
template<> constexpr auto signature<::org::omg::DynamicAny::_DynAnyFactoryStub> = ::org_omg_DynamicAny / "_DynAnyFactoryStub";
namespace org::omg::DynamicAny { class _DynAnyStub; }
template<> constexpr auto signature<::org::omg::DynamicAny::_DynAnyStub> = ::org_omg_DynamicAny / "_DynAnyStub";
namespace org::omg::DynamicAny { class _DynArrayStub; }
template<> constexpr auto signature<::org::omg::DynamicAny::_DynArrayStub> = ::org_omg_DynamicAny / "_DynArrayStub";
namespace org::omg::DynamicAny { class _DynEnumStub; }
template<> constexpr auto signature<::org::omg::DynamicAny::_DynEnumStub> = ::org_omg_DynamicAny / "_DynEnumStub";
namespace org::omg::DynamicAny { class _DynFixedStub; }
template<> constexpr auto signature<::org::omg::DynamicAny::_DynFixedStub> = ::org_omg_DynamicAny / "_DynFixedStub";
namespace org::omg::DynamicAny { class _DynSequenceStub; }
template<> constexpr auto signature<::org::omg::DynamicAny::_DynSequenceStub> = ::org_omg_DynamicAny / "_DynSequenceStub";
namespace org::omg::DynamicAny { class _DynStructStub; }
template<> constexpr auto signature<::org::omg::DynamicAny::_DynStructStub> = ::org_omg_DynamicAny / "_DynStructStub";
namespace org::omg::DynamicAny { class _DynUnionStub; }
template<> constexpr auto signature<::org::omg::DynamicAny::_DynUnionStub> = ::org_omg_DynamicAny / "_DynUnionStub";
namespace org::omg::DynamicAny { class _DynValueStub; }
template<> constexpr auto signature<::org::omg::DynamicAny::_DynValueStub> = ::org_omg_DynamicAny / "_DynValueStub";
namespace org::omg::IOP { class CodeSets; }
template<> constexpr auto signature<::org::omg::IOP::CodeSets> = ::org_omg_IOP / "CodeSets";
namespace org::omg::IOP { class Codec; }
template<> constexpr auto signature<::org::omg::IOP::Codec> = ::org_omg_IOP / "Codec";
namespace org::omg::IOP { class CodecFactory; }
template<> constexpr auto signature<::org::omg::IOP::CodecFactory> = ::org_omg_IOP / "CodecFactory";
namespace org::omg::IOP { class CodecFactoryHelper; }
template<> constexpr auto signature<::org::omg::IOP::CodecFactoryHelper> = ::org_omg_IOP / "CodecFactoryHelper";
namespace org::omg::IOP { class CodecFactoryOperations; }
template<> constexpr auto signature<::org::omg::IOP::CodecFactoryOperations> = ::org_omg_IOP / "CodecFactoryOperations";
namespace org::omg::IOP::CodecFactoryPackage { class UnknownEncoding; }
template<> constexpr auto signature<::org::omg::IOP::CodecFactoryPackage::UnknownEncoding> = ::org_omg_IOP_CodecFactoryPackage / "UnknownEncoding";
namespace org::omg::IOP::CodecFactoryPackage { class UnknownEncodingHelper; }
template<> constexpr auto signature<::org::omg::IOP::CodecFactoryPackage::UnknownEncodingHelper> = ::org_omg_IOP_CodecFactoryPackage / "UnknownEncodingHelper";
namespace org::omg::IOP { class CodecOperations; }
template<> constexpr auto signature<::org::omg::IOP::CodecOperations> = ::org_omg_IOP / "CodecOperations";
namespace org::omg::IOP::CodecPackage { class FormatMismatch; }
template<> constexpr auto signature<::org::omg::IOP::CodecPackage::FormatMismatch> = ::org_omg_IOP_CodecPackage / "FormatMismatch";
namespace org::omg::IOP::CodecPackage { class FormatMismatchHelper; }
template<> constexpr auto signature<::org::omg::IOP::CodecPackage::FormatMismatchHelper> = ::org_omg_IOP_CodecPackage / "FormatMismatchHelper";
namespace org::omg::IOP::CodecPackage { class InvalidTypeForEncoding; }
template<> constexpr auto signature<::org::omg::IOP::CodecPackage::InvalidTypeForEncoding> = ::org_omg_IOP_CodecPackage / "InvalidTypeForEncoding";
namespace org::omg::IOP::CodecPackage { class InvalidTypeForEncodingHelper; }
template<> constexpr auto signature<::org::omg::IOP::CodecPackage::InvalidTypeForEncodingHelper> = ::org_omg_IOP_CodecPackage / "InvalidTypeForEncodingHelper";
namespace org::omg::IOP::CodecPackage { class TypeMismatch; }
template<> constexpr auto signature<::org::omg::IOP::CodecPackage::TypeMismatch> = ::org_omg_IOP_CodecPackage / "TypeMismatch";
namespace org::omg::IOP::CodecPackage { class TypeMismatchHelper; }
template<> constexpr auto signature<::org::omg::IOP::CodecPackage::TypeMismatchHelper> = ::org_omg_IOP_CodecPackage / "TypeMismatchHelper";
namespace org::omg::IOP { class ComponentIdHelper; }
template<> constexpr auto signature<::org::omg::IOP::ComponentIdHelper> = ::org_omg_IOP / "ComponentIdHelper";
namespace org::omg::IOP { class ENCODING_CDR_ENCAPS; }
template<> constexpr auto signature<::org::omg::IOP::ENCODING_CDR_ENCAPS> = ::org_omg_IOP / "ENCODING_CDR_ENCAPS";
namespace org::omg::IOP { class Encoding; }
template<> constexpr auto signature<::org::omg::IOP::Encoding> = ::org_omg_IOP / "Encoding";
namespace org::omg::IOP { class ExceptionDetailMessage; }
template<> constexpr auto signature<::org::omg::IOP::ExceptionDetailMessage> = ::org_omg_IOP / "ExceptionDetailMessage";
namespace org::omg::IOP { class IOR; }
template<> constexpr auto signature<::org::omg::IOP::IOR> = ::org_omg_IOP / "IOR";
namespace org::omg::IOP { class IORHelper; }
template<> constexpr auto signature<::org::omg::IOP::IORHelper> = ::org_omg_IOP / "IORHelper";
namespace org::omg::IOP { class IORHolder; }
template<> constexpr auto signature<::org::omg::IOP::IORHolder> = ::org_omg_IOP / "IORHolder";
namespace org::omg::IOP { class MultipleComponentProfileHelper; }
template<> constexpr auto signature<::org::omg::IOP::MultipleComponentProfileHelper> = ::org_omg_IOP / "MultipleComponentProfileHelper";
namespace org::omg::IOP { class MultipleComponentProfileHolder; }
template<> constexpr auto signature<::org::omg::IOP::MultipleComponentProfileHolder> = ::org_omg_IOP / "MultipleComponentProfileHolder";
namespace org::omg::IOP { class ProfileIdHelper; }
template<> constexpr auto signature<::org::omg::IOP::ProfileIdHelper> = ::org_omg_IOP / "ProfileIdHelper";
namespace org::omg::IOP { class RMICustomMaxStreamFormat; }
template<> constexpr auto signature<::org::omg::IOP::RMICustomMaxStreamFormat> = ::org_omg_IOP / "RMICustomMaxStreamFormat";
namespace org::omg::IOP { class ServiceContext; }
template<> constexpr auto signature<::org::omg::IOP::ServiceContext> = ::org_omg_IOP / "ServiceContext";
namespace org::omg::IOP { class ServiceContextHelper; }
template<> constexpr auto signature<::org::omg::IOP::ServiceContextHelper> = ::org_omg_IOP / "ServiceContextHelper";
namespace org::omg::IOP { class ServiceContextHolder; }
template<> constexpr auto signature<::org::omg::IOP::ServiceContextHolder> = ::org_omg_IOP / "ServiceContextHolder";
namespace org::omg::IOP { class ServiceContextListHelper; }
template<> constexpr auto signature<::org::omg::IOP::ServiceContextListHelper> = ::org_omg_IOP / "ServiceContextListHelper";
namespace org::omg::IOP { class ServiceContextListHolder; }
template<> constexpr auto signature<::org::omg::IOP::ServiceContextListHolder> = ::org_omg_IOP / "ServiceContextListHolder";
namespace org::omg::IOP { class ServiceIdHelper; }
template<> constexpr auto signature<::org::omg::IOP::ServiceIdHelper> = ::org_omg_IOP / "ServiceIdHelper";
namespace org::omg::IOP { class TAG_ALTERNATE_IIOP_ADDRESS; }
template<> constexpr auto signature<::org::omg::IOP::TAG_ALTERNATE_IIOP_ADDRESS> = ::org_omg_IOP / "TAG_ALTERNATE_IIOP_ADDRESS";
namespace org::omg::IOP { class TAG_CODE_SETS; }
template<> constexpr auto signature<::org::omg::IOP::TAG_CODE_SETS> = ::org_omg_IOP / "TAG_CODE_SETS";
namespace org::omg::IOP { class TAG_INTERNET_IOP; }
template<> constexpr auto signature<::org::omg::IOP::TAG_INTERNET_IOP> = ::org_omg_IOP / "TAG_INTERNET_IOP";
namespace org::omg::IOP { class TAG_JAVA_CODEBASE; }
template<> constexpr auto signature<::org::omg::IOP::TAG_JAVA_CODEBASE> = ::org_omg_IOP / "TAG_JAVA_CODEBASE";
namespace org::omg::IOP { class TAG_MULTIPLE_COMPONENTS; }
template<> constexpr auto signature<::org::omg::IOP::TAG_MULTIPLE_COMPONENTS> = ::org_omg_IOP / "TAG_MULTIPLE_COMPONENTS";
namespace org::omg::IOP { class TAG_ORB_TYPE; }
template<> constexpr auto signature<::org::omg::IOP::TAG_ORB_TYPE> = ::org_omg_IOP / "TAG_ORB_TYPE";
namespace org::omg::IOP { class TAG_POLICIES; }
template<> constexpr auto signature<::org::omg::IOP::TAG_POLICIES> = ::org_omg_IOP / "TAG_POLICIES";
namespace org::omg::IOP { class TAG_RMI_CUSTOM_MAX_STREAM_FORMAT; }
template<> constexpr auto signature<::org::omg::IOP::TAG_RMI_CUSTOM_MAX_STREAM_FORMAT> = ::org_omg_IOP / "TAG_RMI_CUSTOM_MAX_STREAM_FORMAT";
namespace org::omg::IOP { class TaggedComponent; }
template<> constexpr auto signature<::org::omg::IOP::TaggedComponent> = ::org_omg_IOP / "TaggedComponent";
namespace org::omg::IOP { class TaggedComponentHelper; }
template<> constexpr auto signature<::org::omg::IOP::TaggedComponentHelper> = ::org_omg_IOP / "TaggedComponentHelper";
namespace org::omg::IOP { class TaggedComponentHolder; }
template<> constexpr auto signature<::org::omg::IOP::TaggedComponentHolder> = ::org_omg_IOP / "TaggedComponentHolder";
namespace org::omg::IOP { class TaggedProfile; }
template<> constexpr auto signature<::org::omg::IOP::TaggedProfile> = ::org_omg_IOP / "TaggedProfile";
namespace org::omg::IOP { class TaggedProfileHelper; }
template<> constexpr auto signature<::org::omg::IOP::TaggedProfileHelper> = ::org_omg_IOP / "TaggedProfileHelper";
namespace org::omg::IOP { class TaggedProfileHolder; }
template<> constexpr auto signature<::org::omg::IOP::TaggedProfileHolder> = ::org_omg_IOP / "TaggedProfileHolder";
namespace org::omg::IOP { class TransactionService; }
template<> constexpr auto signature<::org::omg::IOP::TransactionService> = ::org_omg_IOP / "TransactionService";
namespace org::omg::Messaging { class SYNC_WITH_TRANSPORT; }
template<> constexpr auto signature<::org::omg::Messaging::SYNC_WITH_TRANSPORT> = ::org_omg_Messaging / "SYNC_WITH_TRANSPORT";
namespace org::omg::Messaging { class SyncScopeHelper; }
template<> constexpr auto signature<::org::omg::Messaging::SyncScopeHelper> = ::org_omg_Messaging / "SyncScopeHelper";
namespace org::omg::PortableInterceptor { class ACTIVE; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ACTIVE> = ::org_omg_PortableInterceptor / "ACTIVE";
namespace org::omg::PortableInterceptor { class AdapterManagerIdHelper; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::AdapterManagerIdHelper> = ::org_omg_PortableInterceptor / "AdapterManagerIdHelper";
namespace org::omg::PortableInterceptor { class AdapterNameHelper; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::AdapterNameHelper> = ::org_omg_PortableInterceptor / "AdapterNameHelper";
namespace org::omg::PortableInterceptor { class AdapterStateHelper; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::AdapterStateHelper> = ::org_omg_PortableInterceptor / "AdapterStateHelper";
namespace org::omg::PortableInterceptor { class ClientRequestInfo; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ClientRequestInfo> = ::org_omg_PortableInterceptor / "ClientRequestInfo";
namespace org::omg::PortableInterceptor { class ClientRequestInfoOperations; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ClientRequestInfoOperations> = ::org_omg_PortableInterceptor / "ClientRequestInfoOperations";
namespace org::omg::PortableInterceptor { class ClientRequestInterceptor; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ClientRequestInterceptor> = ::org_omg_PortableInterceptor / "ClientRequestInterceptor";
namespace org::omg::PortableInterceptor { class ClientRequestInterceptorOperations; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ClientRequestInterceptorOperations> = ::org_omg_PortableInterceptor / "ClientRequestInterceptorOperations";
namespace org::omg::PortableInterceptor { class Current; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::Current> = ::org_omg_PortableInterceptor / "Current";
namespace org::omg::PortableInterceptor { class CurrentHelper; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::CurrentHelper> = ::org_omg_PortableInterceptor / "CurrentHelper";
namespace org::omg::PortableInterceptor { class CurrentOperations; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::CurrentOperations> = ::org_omg_PortableInterceptor / "CurrentOperations";
namespace org::omg::PortableInterceptor { class DISCARDING; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::DISCARDING> = ::org_omg_PortableInterceptor / "DISCARDING";
namespace org::omg::PortableInterceptor { class ForwardRequest; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ForwardRequest> = ::org_omg_PortableInterceptor / "ForwardRequest";
namespace org::omg::PortableInterceptor { class ForwardRequestHelper; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ForwardRequestHelper> = ::org_omg_PortableInterceptor / "ForwardRequestHelper";
namespace org::omg::PortableInterceptor { class HOLDING; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::HOLDING> = ::org_omg_PortableInterceptor / "HOLDING";
namespace org::omg::PortableInterceptor { class INACTIVE; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::INACTIVE> = ::org_omg_PortableInterceptor / "INACTIVE";
namespace org::omg::PortableInterceptor { class IORInfo; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::IORInfo> = ::org_omg_PortableInterceptor / "IORInfo";
namespace org::omg::PortableInterceptor { class IORInfoOperations; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::IORInfoOperations> = ::org_omg_PortableInterceptor / "IORInfoOperations";
namespace org::omg::PortableInterceptor { class IORInterceptor; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::IORInterceptor> = ::org_omg_PortableInterceptor / "IORInterceptor";
namespace org::omg::PortableInterceptor { class IORInterceptorOperations; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::IORInterceptorOperations> = ::org_omg_PortableInterceptor / "IORInterceptorOperations";
namespace org::omg::PortableInterceptor { class IORInterceptor_3_0; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::IORInterceptor_3_0> = ::org_omg_PortableInterceptor / "IORInterceptor_3_0";
namespace org::omg::PortableInterceptor { class IORInterceptor_3_0Helper; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::IORInterceptor_3_0Helper> = ::org_omg_PortableInterceptor / "IORInterceptor_3_0Helper";
namespace org::omg::PortableInterceptor { class IORInterceptor_3_0Holder; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::IORInterceptor_3_0Holder> = ::org_omg_PortableInterceptor / "IORInterceptor_3_0Holder";
namespace org::omg::PortableInterceptor { class IORInterceptor_3_0Operations; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::IORInterceptor_3_0Operations> = ::org_omg_PortableInterceptor / "IORInterceptor_3_0Operations";
namespace org::omg::PortableInterceptor { class Interceptor; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::Interceptor> = ::org_omg_PortableInterceptor / "Interceptor";
namespace org::omg::PortableInterceptor { class InterceptorOperations; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::InterceptorOperations> = ::org_omg_PortableInterceptor / "InterceptorOperations";
namespace org::omg::PortableInterceptor { class InvalidSlot; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::InvalidSlot> = ::org_omg_PortableInterceptor / "InvalidSlot";
namespace org::omg::PortableInterceptor { class InvalidSlotHelper; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::InvalidSlotHelper> = ::org_omg_PortableInterceptor / "InvalidSlotHelper";
namespace org::omg::PortableInterceptor { class LOCATION_FORWARD; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::LOCATION_FORWARD> = ::org_omg_PortableInterceptor / "LOCATION_FORWARD";
namespace org::omg::PortableInterceptor { class NON_EXISTENT; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::NON_EXISTENT> = ::org_omg_PortableInterceptor / "NON_EXISTENT";
namespace org::omg::PortableInterceptor { class ORBIdHelper; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ORBIdHelper> = ::org_omg_PortableInterceptor / "ORBIdHelper";
namespace org::omg::PortableInterceptor { class ORBInitInfo; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ORBInitInfo> = ::org_omg_PortableInterceptor / "ORBInitInfo";
namespace org::omg::PortableInterceptor { class ORBInitInfoOperations; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ORBInitInfoOperations> = ::org_omg_PortableInterceptor / "ORBInitInfoOperations";
namespace org::omg::PortableInterceptor::ORBInitInfoPackage { class DuplicateName; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ORBInitInfoPackage::DuplicateName> = ::org_omg_PortableInterceptor_ORBInitInfoPackage / "DuplicateName";
namespace org::omg::PortableInterceptor::ORBInitInfoPackage { class DuplicateNameHelper; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ORBInitInfoPackage::DuplicateNameHelper> = ::org_omg_PortableInterceptor_ORBInitInfoPackage / "DuplicateNameHelper";
namespace org::omg::PortableInterceptor::ORBInitInfoPackage { class InvalidName; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ORBInitInfoPackage::InvalidName> = ::org_omg_PortableInterceptor_ORBInitInfoPackage / "InvalidName";
namespace org::omg::PortableInterceptor::ORBInitInfoPackage { class InvalidNameHelper; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ORBInitInfoPackage::InvalidNameHelper> = ::org_omg_PortableInterceptor_ORBInitInfoPackage / "InvalidNameHelper";
namespace org::omg::PortableInterceptor::ORBInitInfoPackage { class ObjectIdHelper; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ORBInitInfoPackage::ObjectIdHelper> = ::org_omg_PortableInterceptor_ORBInitInfoPackage / "ObjectIdHelper";
namespace org::omg::PortableInterceptor { class ORBInitializer; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ORBInitializer> = ::org_omg_PortableInterceptor / "ORBInitializer";
namespace org::omg::PortableInterceptor { class ORBInitializerOperations; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ORBInitializerOperations> = ::org_omg_PortableInterceptor / "ORBInitializerOperations";
namespace org::omg::PortableInterceptor { class ObjectIdHelper; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ObjectIdHelper> = ::org_omg_PortableInterceptor / "ObjectIdHelper";
namespace org::omg::PortableInterceptor { class ObjectReferenceFactory; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ObjectReferenceFactory> = ::org_omg_PortableInterceptor / "ObjectReferenceFactory";
namespace org::omg::PortableInterceptor { class ObjectReferenceFactoryHelper; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ObjectReferenceFactoryHelper> = ::org_omg_PortableInterceptor / "ObjectReferenceFactoryHelper";
namespace org::omg::PortableInterceptor { class ObjectReferenceFactoryHolder; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ObjectReferenceFactoryHolder> = ::org_omg_PortableInterceptor / "ObjectReferenceFactoryHolder";
namespace org::omg::PortableInterceptor { class ObjectReferenceTemplate; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ObjectReferenceTemplate> = ::org_omg_PortableInterceptor / "ObjectReferenceTemplate";
namespace org::omg::PortableInterceptor { class ObjectReferenceTemplateHelper; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ObjectReferenceTemplateHelper> = ::org_omg_PortableInterceptor / "ObjectReferenceTemplateHelper";
namespace org::omg::PortableInterceptor { class ObjectReferenceTemplateHolder; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ObjectReferenceTemplateHolder> = ::org_omg_PortableInterceptor / "ObjectReferenceTemplateHolder";
namespace org::omg::PortableInterceptor { class ObjectReferenceTemplateSeqHelper; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ObjectReferenceTemplateSeqHelper> = ::org_omg_PortableInterceptor / "ObjectReferenceTemplateSeqHelper";
namespace org::omg::PortableInterceptor { class ObjectReferenceTemplateSeqHolder; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ObjectReferenceTemplateSeqHolder> = ::org_omg_PortableInterceptor / "ObjectReferenceTemplateSeqHolder";
namespace org::omg::PortableInterceptor { class PolicyFactory; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::PolicyFactory> = ::org_omg_PortableInterceptor / "PolicyFactory";
namespace org::omg::PortableInterceptor { class PolicyFactoryOperations; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::PolicyFactoryOperations> = ::org_omg_PortableInterceptor / "PolicyFactoryOperations";
namespace org::omg::PortableInterceptor { class RequestInfo; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::RequestInfo> = ::org_omg_PortableInterceptor / "RequestInfo";
namespace org::omg::PortableInterceptor { class RequestInfoOperations; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::RequestInfoOperations> = ::org_omg_PortableInterceptor / "RequestInfoOperations";
namespace org::omg::PortableInterceptor { class SUCCESSFUL; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::SUCCESSFUL> = ::org_omg_PortableInterceptor / "SUCCESSFUL";
namespace org::omg::PortableInterceptor { class SYSTEM_EXCEPTION; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::SYSTEM_EXCEPTION> = ::org_omg_PortableInterceptor / "SYSTEM_EXCEPTION";
namespace org::omg::PortableInterceptor { class ServerIdHelper; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ServerIdHelper> = ::org_omg_PortableInterceptor / "ServerIdHelper";
namespace org::omg::PortableInterceptor { class ServerRequestInfo; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ServerRequestInfo> = ::org_omg_PortableInterceptor / "ServerRequestInfo";
namespace org::omg::PortableInterceptor { class ServerRequestInfoOperations; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ServerRequestInfoOperations> = ::org_omg_PortableInterceptor / "ServerRequestInfoOperations";
namespace org::omg::PortableInterceptor { class ServerRequestInterceptor; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ServerRequestInterceptor> = ::org_omg_PortableInterceptor / "ServerRequestInterceptor";
namespace org::omg::PortableInterceptor { class ServerRequestInterceptorOperations; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::ServerRequestInterceptorOperations> = ::org_omg_PortableInterceptor / "ServerRequestInterceptorOperations";
namespace org::omg::PortableInterceptor { class TRANSPORT_RETRY; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::TRANSPORT_RETRY> = ::org_omg_PortableInterceptor / "TRANSPORT_RETRY";
namespace org::omg::PortableInterceptor { class USER_EXCEPTION; }
template<> constexpr auto signature<::org::omg::PortableInterceptor::USER_EXCEPTION> = ::org_omg_PortableInterceptor / "USER_EXCEPTION";
namespace org::omg::PortableServer { class AdapterActivator; }
template<> constexpr auto signature<::org::omg::PortableServer::AdapterActivator> = ::org_omg_PortableServer / "AdapterActivator";
namespace org::omg::PortableServer { class AdapterActivatorOperations; }
template<> constexpr auto signature<::org::omg::PortableServer::AdapterActivatorOperations> = ::org_omg_PortableServer / "AdapterActivatorOperations";
namespace org::omg::PortableServer { class Current; }
template<> constexpr auto signature<::org::omg::PortableServer::Current> = ::org_omg_PortableServer / "Current";
namespace org::omg::PortableServer { class CurrentHelper; }
template<> constexpr auto signature<::org::omg::PortableServer::CurrentHelper> = ::org_omg_PortableServer / "CurrentHelper";
namespace org::omg::PortableServer { class CurrentOperations; }
template<> constexpr auto signature<::org::omg::PortableServer::CurrentOperations> = ::org_omg_PortableServer / "CurrentOperations";
namespace org::omg::PortableServer::CurrentPackage { class NoContext; }
template<> constexpr auto signature<::org::omg::PortableServer::CurrentPackage::NoContext> = ::org_omg_PortableServer_CurrentPackage / "NoContext";
namespace org::omg::PortableServer::CurrentPackage { class NoContextHelper; }
template<> constexpr auto signature<::org::omg::PortableServer::CurrentPackage::NoContextHelper> = ::org_omg_PortableServer_CurrentPackage / "NoContextHelper";
namespace org::omg::PortableServer { class DynamicImplementation; }
template<> constexpr auto signature<::org::omg::PortableServer::DynamicImplementation> = ::org_omg_PortableServer / "DynamicImplementation";
namespace org::omg::PortableServer { class ForwardRequest; }
template<> constexpr auto signature<::org::omg::PortableServer::ForwardRequest> = ::org_omg_PortableServer / "ForwardRequest";
namespace org::omg::PortableServer { class ForwardRequestHelper; }
template<> constexpr auto signature<::org::omg::PortableServer::ForwardRequestHelper> = ::org_omg_PortableServer / "ForwardRequestHelper";
namespace org::omg::PortableServer { class ID_ASSIGNMENT_POLICY_ID; }
template<> constexpr auto signature<::org::omg::PortableServer::ID_ASSIGNMENT_POLICY_ID> = ::org_omg_PortableServer / "ID_ASSIGNMENT_POLICY_ID";
namespace org::omg::PortableServer { class ID_UNIQUENESS_POLICY_ID; }
template<> constexpr auto signature<::org::omg::PortableServer::ID_UNIQUENESS_POLICY_ID> = ::org_omg_PortableServer / "ID_UNIQUENESS_POLICY_ID";
namespace org::omg::PortableServer { class IMPLICIT_ACTIVATION_POLICY_ID; }
template<> constexpr auto signature<::org::omg::PortableServer::IMPLICIT_ACTIVATION_POLICY_ID> = ::org_omg_PortableServer / "IMPLICIT_ACTIVATION_POLICY_ID";
namespace org::omg::PortableServer { class IdAssignmentPolicy; }
template<> constexpr auto signature<::org::omg::PortableServer::IdAssignmentPolicy> = ::org_omg_PortableServer / "IdAssignmentPolicy";
namespace org::omg::PortableServer { class IdAssignmentPolicyOperations; }
template<> constexpr auto signature<::org::omg::PortableServer::IdAssignmentPolicyOperations> = ::org_omg_PortableServer / "IdAssignmentPolicyOperations";
namespace org::omg::PortableServer { class IdAssignmentPolicyValue; }
template<> constexpr auto signature<::org::omg::PortableServer::IdAssignmentPolicyValue> = ::org_omg_PortableServer / "IdAssignmentPolicyValue";
namespace org::omg::PortableServer { class IdUniquenessPolicy; }
template<> constexpr auto signature<::org::omg::PortableServer::IdUniquenessPolicy> = ::org_omg_PortableServer / "IdUniquenessPolicy";
namespace org::omg::PortableServer { class IdUniquenessPolicyOperations; }
template<> constexpr auto signature<::org::omg::PortableServer::IdUniquenessPolicyOperations> = ::org_omg_PortableServer / "IdUniquenessPolicyOperations";
namespace org::omg::PortableServer { class IdUniquenessPolicyValue; }
template<> constexpr auto signature<::org::omg::PortableServer::IdUniquenessPolicyValue> = ::org_omg_PortableServer / "IdUniquenessPolicyValue";
namespace org::omg::PortableServer { class ImplicitActivationPolicy; }
template<> constexpr auto signature<::org::omg::PortableServer::ImplicitActivationPolicy> = ::org_omg_PortableServer / "ImplicitActivationPolicy";
namespace org::omg::PortableServer { class ImplicitActivationPolicyOperations; }
template<> constexpr auto signature<::org::omg::PortableServer::ImplicitActivationPolicyOperations> = ::org_omg_PortableServer / "ImplicitActivationPolicyOperations";
namespace org::omg::PortableServer { class ImplicitActivationPolicyValue; }
template<> constexpr auto signature<::org::omg::PortableServer::ImplicitActivationPolicyValue> = ::org_omg_PortableServer / "ImplicitActivationPolicyValue";
namespace org::omg::PortableServer { class LIFESPAN_POLICY_ID; }
template<> constexpr auto signature<::org::omg::PortableServer::LIFESPAN_POLICY_ID> = ::org_omg_PortableServer / "LIFESPAN_POLICY_ID";
namespace org::omg::PortableServer { class LifespanPolicy; }
template<> constexpr auto signature<::org::omg::PortableServer::LifespanPolicy> = ::org_omg_PortableServer / "LifespanPolicy";
namespace org::omg::PortableServer { class LifespanPolicyOperations; }
template<> constexpr auto signature<::org::omg::PortableServer::LifespanPolicyOperations> = ::org_omg_PortableServer / "LifespanPolicyOperations";
namespace org::omg::PortableServer { class LifespanPolicyValue; }
template<> constexpr auto signature<::org::omg::PortableServer::LifespanPolicyValue> = ::org_omg_PortableServer / "LifespanPolicyValue";
namespace org::omg::PortableServer { class POA; }
template<> constexpr auto signature<::org::omg::PortableServer::POA> = ::org_omg_PortableServer / "POA";
namespace org::omg::PortableServer { class POAHelper; }
template<> constexpr auto signature<::org::omg::PortableServer::POAHelper> = ::org_omg_PortableServer / "POAHelper";
namespace org::omg::PortableServer { class POAManager; }
template<> constexpr auto signature<::org::omg::PortableServer::POAManager> = ::org_omg_PortableServer / "POAManager";
namespace org::omg::PortableServer { class POAManagerOperations; }
template<> constexpr auto signature<::org::omg::PortableServer::POAManagerOperations> = ::org_omg_PortableServer / "POAManagerOperations";
namespace org::omg::PortableServer::POAManagerPackage { class AdapterInactive; }
template<> constexpr auto signature<::org::omg::PortableServer::POAManagerPackage::AdapterInactive> = ::org_omg_PortableServer_POAManagerPackage / "AdapterInactive";
namespace org::omg::PortableServer::POAManagerPackage { class AdapterInactiveHelper; }
template<> constexpr auto signature<::org::omg::PortableServer::POAManagerPackage::AdapterInactiveHelper> = ::org_omg_PortableServer_POAManagerPackage / "AdapterInactiveHelper";
namespace org::omg::PortableServer::POAManagerPackage { class State; }
template<> constexpr auto signature<::org::omg::PortableServer::POAManagerPackage::State> = ::org_omg_PortableServer_POAManagerPackage / "State";
namespace org::omg::PortableServer { class POAOperations; }
template<> constexpr auto signature<::org::omg::PortableServer::POAOperations> = ::org_omg_PortableServer / "POAOperations";
namespace org::omg::PortableServer::POAPackage { class AdapterAlreadyExists; }
template<> constexpr auto signature<::org::omg::PortableServer::POAPackage::AdapterAlreadyExists> = ::org_omg_PortableServer_POAPackage / "AdapterAlreadyExists";
namespace org::omg::PortableServer::POAPackage { class AdapterAlreadyExistsHelper; }
template<> constexpr auto signature<::org::omg::PortableServer::POAPackage::AdapterAlreadyExistsHelper> = ::org_omg_PortableServer_POAPackage / "AdapterAlreadyExistsHelper";
namespace org::omg::PortableServer::POAPackage { class AdapterNonExistent; }
template<> constexpr auto signature<::org::omg::PortableServer::POAPackage::AdapterNonExistent> = ::org_omg_PortableServer_POAPackage / "AdapterNonExistent";
namespace org::omg::PortableServer::POAPackage { class AdapterNonExistentHelper; }
template<> constexpr auto signature<::org::omg::PortableServer::POAPackage::AdapterNonExistentHelper> = ::org_omg_PortableServer_POAPackage / "AdapterNonExistentHelper";
namespace org::omg::PortableServer::POAPackage { class InvalidPolicy; }
template<> constexpr auto signature<::org::omg::PortableServer::POAPackage::InvalidPolicy> = ::org_omg_PortableServer_POAPackage / "InvalidPolicy";
namespace org::omg::PortableServer::POAPackage { class InvalidPolicyHelper; }
template<> constexpr auto signature<::org::omg::PortableServer::POAPackage::InvalidPolicyHelper> = ::org_omg_PortableServer_POAPackage / "InvalidPolicyHelper";
namespace org::omg::PortableServer::POAPackage { class NoServant; }
template<> constexpr auto signature<::org::omg::PortableServer::POAPackage::NoServant> = ::org_omg_PortableServer_POAPackage / "NoServant";
namespace org::omg::PortableServer::POAPackage { class NoServantHelper; }
template<> constexpr auto signature<::org::omg::PortableServer::POAPackage::NoServantHelper> = ::org_omg_PortableServer_POAPackage / "NoServantHelper";
namespace org::omg::PortableServer::POAPackage { class ObjectAlreadyActive; }
template<> constexpr auto signature<::org::omg::PortableServer::POAPackage::ObjectAlreadyActive> = ::org_omg_PortableServer_POAPackage / "ObjectAlreadyActive";
namespace org::omg::PortableServer::POAPackage { class ObjectAlreadyActiveHelper; }
template<> constexpr auto signature<::org::omg::PortableServer::POAPackage::ObjectAlreadyActiveHelper> = ::org_omg_PortableServer_POAPackage / "ObjectAlreadyActiveHelper";
namespace org::omg::PortableServer::POAPackage { class ObjectNotActive; }
template<> constexpr auto signature<::org::omg::PortableServer::POAPackage::ObjectNotActive> = ::org_omg_PortableServer_POAPackage / "ObjectNotActive";
namespace org::omg::PortableServer::POAPackage { class ObjectNotActiveHelper; }
template<> constexpr auto signature<::org::omg::PortableServer::POAPackage::ObjectNotActiveHelper> = ::org_omg_PortableServer_POAPackage / "ObjectNotActiveHelper";
namespace org::omg::PortableServer::POAPackage { class ServantAlreadyActive; }
template<> constexpr auto signature<::org::omg::PortableServer::POAPackage::ServantAlreadyActive> = ::org_omg_PortableServer_POAPackage / "ServantAlreadyActive";
namespace org::omg::PortableServer::POAPackage { class ServantAlreadyActiveHelper; }
template<> constexpr auto signature<::org::omg::PortableServer::POAPackage::ServantAlreadyActiveHelper> = ::org_omg_PortableServer_POAPackage / "ServantAlreadyActiveHelper";
namespace org::omg::PortableServer::POAPackage { class ServantNotActive; }
template<> constexpr auto signature<::org::omg::PortableServer::POAPackage::ServantNotActive> = ::org_omg_PortableServer_POAPackage / "ServantNotActive";
namespace org::omg::PortableServer::POAPackage { class ServantNotActiveHelper; }
template<> constexpr auto signature<::org::omg::PortableServer::POAPackage::ServantNotActiveHelper> = ::org_omg_PortableServer_POAPackage / "ServantNotActiveHelper";
namespace org::omg::PortableServer::POAPackage { class WrongAdapter; }
template<> constexpr auto signature<::org::omg::PortableServer::POAPackage::WrongAdapter> = ::org_omg_PortableServer_POAPackage / "WrongAdapter";
namespace org::omg::PortableServer::POAPackage { class WrongAdapterHelper; }
template<> constexpr auto signature<::org::omg::PortableServer::POAPackage::WrongAdapterHelper> = ::org_omg_PortableServer_POAPackage / "WrongAdapterHelper";
namespace org::omg::PortableServer::POAPackage { class WrongPolicy; }
template<> constexpr auto signature<::org::omg::PortableServer::POAPackage::WrongPolicy> = ::org_omg_PortableServer_POAPackage / "WrongPolicy";
namespace org::omg::PortableServer::POAPackage { class WrongPolicyHelper; }
template<> constexpr auto signature<::org::omg::PortableServer::POAPackage::WrongPolicyHelper> = ::org_omg_PortableServer_POAPackage / "WrongPolicyHelper";
namespace org::omg::PortableServer { class REQUEST_PROCESSING_POLICY_ID; }
template<> constexpr auto signature<::org::omg::PortableServer::REQUEST_PROCESSING_POLICY_ID> = ::org_omg_PortableServer / "REQUEST_PROCESSING_POLICY_ID";
namespace org::omg::PortableServer { class RequestProcessingPolicy; }
template<> constexpr auto signature<::org::omg::PortableServer::RequestProcessingPolicy> = ::org_omg_PortableServer / "RequestProcessingPolicy";
namespace org::omg::PortableServer { class RequestProcessingPolicyOperations; }
template<> constexpr auto signature<::org::omg::PortableServer::RequestProcessingPolicyOperations> = ::org_omg_PortableServer / "RequestProcessingPolicyOperations";
namespace org::omg::PortableServer { class RequestProcessingPolicyValue; }
template<> constexpr auto signature<::org::omg::PortableServer::RequestProcessingPolicyValue> = ::org_omg_PortableServer / "RequestProcessingPolicyValue";
namespace org::omg::PortableServer { class SERVANT_RETENTION_POLICY_ID; }
template<> constexpr auto signature<::org::omg::PortableServer::SERVANT_RETENTION_POLICY_ID> = ::org_omg_PortableServer / "SERVANT_RETENTION_POLICY_ID";
namespace org::omg::PortableServer { class Servant; }
template<> constexpr auto signature<::org::omg::PortableServer::Servant> = ::org_omg_PortableServer / "Servant";
namespace org::omg::PortableServer { class ServantActivator; }
template<> constexpr auto signature<::org::omg::PortableServer::ServantActivator> = ::org_omg_PortableServer / "ServantActivator";
namespace org::omg::PortableServer { class ServantActivatorHelper; }
template<> constexpr auto signature<::org::omg::PortableServer::ServantActivatorHelper> = ::org_omg_PortableServer / "ServantActivatorHelper";
namespace org::omg::PortableServer { class ServantActivatorOperations; }
template<> constexpr auto signature<::org::omg::PortableServer::ServantActivatorOperations> = ::org_omg_PortableServer / "ServantActivatorOperations";
namespace org::omg::PortableServer { class ServantActivatorPOA; }
template<> constexpr auto signature<::org::omg::PortableServer::ServantActivatorPOA> = ::org_omg_PortableServer / "ServantActivatorPOA";
namespace org::omg::PortableServer { class ServantLocator; }
template<> constexpr auto signature<::org::omg::PortableServer::ServantLocator> = ::org_omg_PortableServer / "ServantLocator";
namespace org::omg::PortableServer { class ServantLocatorHelper; }
template<> constexpr auto signature<::org::omg::PortableServer::ServantLocatorHelper> = ::org_omg_PortableServer / "ServantLocatorHelper";
namespace org::omg::PortableServer { class ServantLocatorOperations; }
template<> constexpr auto signature<::org::omg::PortableServer::ServantLocatorOperations> = ::org_omg_PortableServer / "ServantLocatorOperations";
namespace org::omg::PortableServer { class ServantLocatorPOA; }
template<> constexpr auto signature<::org::omg::PortableServer::ServantLocatorPOA> = ::org_omg_PortableServer / "ServantLocatorPOA";
namespace org::omg::PortableServer::ServantLocatorPackage { class CookieHolder; }
template<> constexpr auto signature<::org::omg::PortableServer::ServantLocatorPackage::CookieHolder> = ::org_omg_PortableServer_ServantLocatorPackage / "CookieHolder";
namespace org::omg::PortableServer { class ServantManager; }
template<> constexpr auto signature<::org::omg::PortableServer::ServantManager> = ::org_omg_PortableServer / "ServantManager";
namespace org::omg::PortableServer { class ServantManagerOperations; }
template<> constexpr auto signature<::org::omg::PortableServer::ServantManagerOperations> = ::org_omg_PortableServer / "ServantManagerOperations";
namespace org::omg::PortableServer { class ServantRetentionPolicy; }
template<> constexpr auto signature<::org::omg::PortableServer::ServantRetentionPolicy> = ::org_omg_PortableServer / "ServantRetentionPolicy";
namespace org::omg::PortableServer { class ServantRetentionPolicyOperations; }
template<> constexpr auto signature<::org::omg::PortableServer::ServantRetentionPolicyOperations> = ::org_omg_PortableServer / "ServantRetentionPolicyOperations";
namespace org::omg::PortableServer { class ServantRetentionPolicyValue; }
template<> constexpr auto signature<::org::omg::PortableServer::ServantRetentionPolicyValue> = ::org_omg_PortableServer / "ServantRetentionPolicyValue";
namespace org::omg::PortableServer { class THREAD_POLICY_ID; }
template<> constexpr auto signature<::org::omg::PortableServer::THREAD_POLICY_ID> = ::org_omg_PortableServer / "THREAD_POLICY_ID";
namespace org::omg::PortableServer { class ThreadPolicy; }
template<> constexpr auto signature<::org::omg::PortableServer::ThreadPolicy> = ::org_omg_PortableServer / "ThreadPolicy";
namespace org::omg::PortableServer { class ThreadPolicyOperations; }
template<> constexpr auto signature<::org::omg::PortableServer::ThreadPolicyOperations> = ::org_omg_PortableServer / "ThreadPolicyOperations";
namespace org::omg::PortableServer { class ThreadPolicyValue; }
template<> constexpr auto signature<::org::omg::PortableServer::ThreadPolicyValue> = ::org_omg_PortableServer / "ThreadPolicyValue";
namespace org::omg::PortableServer { class _ServantActivatorStub; }
template<> constexpr auto signature<::org::omg::PortableServer::_ServantActivatorStub> = ::org_omg_PortableServer / "_ServantActivatorStub";
namespace org::omg::PortableServer { class _ServantLocatorStub; }
template<> constexpr auto signature<::org::omg::PortableServer::_ServantLocatorStub> = ::org_omg_PortableServer / "_ServantLocatorStub";
namespace org::omg::PortableServer::portable { class Delegate; }
template<> constexpr auto signature<::org::omg::PortableServer::portable::Delegate> = ::org_omg_PortableServer_portable / "Delegate";
namespace org::omg::SendingContext { class RunTime; }
template<> constexpr auto signature<::org::omg::SendingContext::RunTime> = ::org_omg_SendingContext / "RunTime";
namespace org::omg::SendingContext { class RunTimeOperations; }
template<> constexpr auto signature<::org::omg::SendingContext::RunTimeOperations> = ::org_omg_SendingContext / "RunTimeOperations";
namespace org::omg::stub::java::rmi { class _Remote_Stub; }
template<> constexpr auto signature<::org::omg::stub::java::rmi::_Remote_Stub> = ::org_omg_stub_java_rmi / "_Remote_Stub";
namespace org::omg::stub::javax::management::remote::rmi { class _RMIConnectionImpl_Tie; }
template<> constexpr auto signature<::org::omg::stub::javax::management::remote::rmi::_RMIConnectionImpl_Tie> = ::org_omg_stub_javax_management_remote_rmi / "_RMIConnectionImpl_Tie";
namespace org::omg::stub::javax::management::remote::rmi { class _RMIConnection_Stub; }
template<> constexpr auto signature<::org::omg::stub::javax::management::remote::rmi::_RMIConnection_Stub> = ::org_omg_stub_javax_management_remote_rmi / "_RMIConnection_Stub";
namespace org::omg::stub::javax::management::remote::rmi { class _RMIServerImpl_Tie; }
template<> constexpr auto signature<::org::omg::stub::javax::management::remote::rmi::_RMIServerImpl_Tie> = ::org_omg_stub_javax_management_remote_rmi / "_RMIServerImpl_Tie";
namespace org::omg::stub::javax::management::remote::rmi { class _RMIServer_Stub; }
template<> constexpr auto signature<::org::omg::stub::javax::management::remote::rmi::_RMIServer_Stub> = ::org_omg_stub_javax_management_remote_rmi / "_RMIServer_Stub";
namespace org::w3c::dom { class Attr; }
template<> constexpr auto signature<::org::w3c::dom::Attr> = ::org_w3c_dom / "Attr";
namespace org::w3c::dom { class CDATASection; }
template<> constexpr auto signature<::org::w3c::dom::CDATASection> = ::org_w3c_dom / "CDATASection";
namespace org::w3c::dom { class CharacterData; }
template<> constexpr auto signature<::org::w3c::dom::CharacterData> = ::org_w3c_dom / "CharacterData";
namespace org::w3c::dom { class Comment; }
template<> constexpr auto signature<::org::w3c::dom::Comment> = ::org_w3c_dom / "Comment";
namespace org::w3c::dom { class DOMConfiguration; }
template<> constexpr auto signature<::org::w3c::dom::DOMConfiguration> = ::org_w3c_dom / "DOMConfiguration";
namespace org::w3c::dom { class DOMError; }
template<> constexpr auto signature<::org::w3c::dom::DOMError> = ::org_w3c_dom / "DOMError";
namespace org::w3c::dom { class DOMErrorHandler; }
template<> constexpr auto signature<::org::w3c::dom::DOMErrorHandler> = ::org_w3c_dom / "DOMErrorHandler";
namespace org::w3c::dom { class DOMException; }
template<> constexpr auto signature<::org::w3c::dom::DOMException> = ::org_w3c_dom / "DOMException";
namespace org::w3c::dom { class DOMImplementation; }
template<> constexpr auto signature<::org::w3c::dom::DOMImplementation> = ::org_w3c_dom / "DOMImplementation";
namespace org::w3c::dom { class DOMImplementationList; }
template<> constexpr auto signature<::org::w3c::dom::DOMImplementationList> = ::org_w3c_dom / "DOMImplementationList";
namespace org::w3c::dom { class DOMImplementationSource; }
template<> constexpr auto signature<::org::w3c::dom::DOMImplementationSource> = ::org_w3c_dom / "DOMImplementationSource";
namespace org::w3c::dom { class DOMLocator; }
template<> constexpr auto signature<::org::w3c::dom::DOMLocator> = ::org_w3c_dom / "DOMLocator";
namespace org::w3c::dom { class DOMStringList; }
template<> constexpr auto signature<::org::w3c::dom::DOMStringList> = ::org_w3c_dom / "DOMStringList";
namespace org::w3c::dom { class Document; }
template<> constexpr auto signature<::org::w3c::dom::Document> = ::org_w3c_dom / "Document";
namespace org::w3c::dom { class DocumentFragment; }
template<> constexpr auto signature<::org::w3c::dom::DocumentFragment> = ::org_w3c_dom / "DocumentFragment";
namespace org::w3c::dom { class DocumentType; }
template<> constexpr auto signature<::org::w3c::dom::DocumentType> = ::org_w3c_dom / "DocumentType";
namespace org::w3c::dom { class Element; }
template<> constexpr auto signature<::org::w3c::dom::Element> = ::org_w3c_dom / "Element";
namespace org::w3c::dom { class Entity; }
template<> constexpr auto signature<::org::w3c::dom::Entity> = ::org_w3c_dom / "Entity";
namespace org::w3c::dom { class EntityReference; }
template<> constexpr auto signature<::org::w3c::dom::EntityReference> = ::org_w3c_dom / "EntityReference";
namespace org::w3c::dom { class NameList; }
template<> constexpr auto signature<::org::w3c::dom::NameList> = ::org_w3c_dom / "NameList";
namespace org::w3c::dom { class NamedNodeMap; }
template<> constexpr auto signature<::org::w3c::dom::NamedNodeMap> = ::org_w3c_dom / "NamedNodeMap";
namespace org::w3c::dom { class Node; }
template<> constexpr auto signature<::org::w3c::dom::Node> = ::org_w3c_dom / "Node";
namespace org::w3c::dom { class NodeList; }
template<> constexpr auto signature<::org::w3c::dom::NodeList> = ::org_w3c_dom / "NodeList";
namespace org::w3c::dom { class Notation; }
template<> constexpr auto signature<::org::w3c::dom::Notation> = ::org_w3c_dom / "Notation";
namespace org::w3c::dom { class ProcessingInstruction; }
template<> constexpr auto signature<::org::w3c::dom::ProcessingInstruction> = ::org_w3c_dom / "ProcessingInstruction";
namespace org::w3c::dom { class Text; }
template<> constexpr auto signature<::org::w3c::dom::Text> = ::org_w3c_dom / "Text";
namespace org::w3c::dom { class TypeInfo; }
template<> constexpr auto signature<::org::w3c::dom::TypeInfo> = ::org_w3c_dom / "TypeInfo";
namespace org::w3c::dom { class UserDataHandler; }
template<> constexpr auto signature<::org::w3c::dom::UserDataHandler> = ::org_w3c_dom / "UserDataHandler";
namespace org::w3c::dom::bootstrap { class DOMImplementationRegistry; }
template<> constexpr auto signature<::org::w3c::dom::bootstrap::DOMImplementationRegistry> = ::org_w3c_dom_bootstrap / "DOMImplementationRegistry";
namespace org::w3c::dom::bootstrap { class DOMImplementationRegistry$1; }
template<> constexpr auto signature<::org::w3c::dom::bootstrap::DOMImplementationRegistry$1> = ::org_w3c_dom_bootstrap / "DOMImplementationRegistry$1";
namespace org::w3c::dom::bootstrap { class DOMImplementationRegistry$2; }
template<> constexpr auto signature<::org::w3c::dom::bootstrap::DOMImplementationRegistry$2> = ::org_w3c_dom_bootstrap / "DOMImplementationRegistry$2";
namespace org::w3c::dom::bootstrap { class DOMImplementationRegistry$3; }
template<> constexpr auto signature<::org::w3c::dom::bootstrap::DOMImplementationRegistry$3> = ::org_w3c_dom_bootstrap / "DOMImplementationRegistry$3";
namespace org::w3c::dom::bootstrap { class DOMImplementationRegistry$4; }
template<> constexpr auto signature<::org::w3c::dom::bootstrap::DOMImplementationRegistry$4> = ::org_w3c_dom_bootstrap / "DOMImplementationRegistry$4";
namespace org::w3c::dom::css { class CSS2Properties; }
template<> constexpr auto signature<::org::w3c::dom::css::CSS2Properties> = ::org_w3c_dom_css / "CSS2Properties";
namespace org::w3c::dom::css { class CSSCharsetRule; }
template<> constexpr auto signature<::org::w3c::dom::css::CSSCharsetRule> = ::org_w3c_dom_css / "CSSCharsetRule";
namespace org::w3c::dom::css { class CSSFontFaceRule; }
template<> constexpr auto signature<::org::w3c::dom::css::CSSFontFaceRule> = ::org_w3c_dom_css / "CSSFontFaceRule";
namespace org::w3c::dom::css { class CSSImportRule; }
template<> constexpr auto signature<::org::w3c::dom::css::CSSImportRule> = ::org_w3c_dom_css / "CSSImportRule";
namespace org::w3c::dom::css { class CSSMediaRule; }
template<> constexpr auto signature<::org::w3c::dom::css::CSSMediaRule> = ::org_w3c_dom_css / "CSSMediaRule";
namespace org::w3c::dom::css { class CSSPageRule; }
template<> constexpr auto signature<::org::w3c::dom::css::CSSPageRule> = ::org_w3c_dom_css / "CSSPageRule";
namespace org::w3c::dom::css { class CSSPrimitiveValue; }
template<> constexpr auto signature<::org::w3c::dom::css::CSSPrimitiveValue> = ::org_w3c_dom_css / "CSSPrimitiveValue";
namespace org::w3c::dom::css { class CSSRule; }
template<> constexpr auto signature<::org::w3c::dom::css::CSSRule> = ::org_w3c_dom_css / "CSSRule";
namespace org::w3c::dom::css { class CSSRuleList; }
template<> constexpr auto signature<::org::w3c::dom::css::CSSRuleList> = ::org_w3c_dom_css / "CSSRuleList";
namespace org::w3c::dom::css { class CSSStyleDeclaration; }
template<> constexpr auto signature<::org::w3c::dom::css::CSSStyleDeclaration> = ::org_w3c_dom_css / "CSSStyleDeclaration";
namespace org::w3c::dom::css { class CSSStyleRule; }
template<> constexpr auto signature<::org::w3c::dom::css::CSSStyleRule> = ::org_w3c_dom_css / "CSSStyleRule";
namespace org::w3c::dom::css { class CSSStyleSheet; }
template<> constexpr auto signature<::org::w3c::dom::css::CSSStyleSheet> = ::org_w3c_dom_css / "CSSStyleSheet";
namespace org::w3c::dom::css { class CSSUnknownRule; }
template<> constexpr auto signature<::org::w3c::dom::css::CSSUnknownRule> = ::org_w3c_dom_css / "CSSUnknownRule";
namespace org::w3c::dom::css { class CSSValue; }
template<> constexpr auto signature<::org::w3c::dom::css::CSSValue> = ::org_w3c_dom_css / "CSSValue";
namespace org::w3c::dom::css { class CSSValueList; }
template<> constexpr auto signature<::org::w3c::dom::css::CSSValueList> = ::org_w3c_dom_css / "CSSValueList";
namespace org::w3c::dom::css { class Counter; }
template<> constexpr auto signature<::org::w3c::dom::css::Counter> = ::org_w3c_dom_css / "Counter";
namespace org::w3c::dom::css { class DOMImplementationCSS; }
template<> constexpr auto signature<::org::w3c::dom::css::DOMImplementationCSS> = ::org_w3c_dom_css / "DOMImplementationCSS";
namespace org::w3c::dom::css { class DocumentCSS; }
template<> constexpr auto signature<::org::w3c::dom::css::DocumentCSS> = ::org_w3c_dom_css / "DocumentCSS";
namespace org::w3c::dom::css { class ElementCSSInlineStyle; }
template<> constexpr auto signature<::org::w3c::dom::css::ElementCSSInlineStyle> = ::org_w3c_dom_css / "ElementCSSInlineStyle";
namespace org::w3c::dom::css { class RGBColor; }
template<> constexpr auto signature<::org::w3c::dom::css::RGBColor> = ::org_w3c_dom_css / "RGBColor";
namespace org::w3c::dom::css { class Rect; }
template<> constexpr auto signature<::org::w3c::dom::css::Rect> = ::org_w3c_dom_css / "Rect";
namespace org::w3c::dom::css { class ViewCSS; }
template<> constexpr auto signature<::org::w3c::dom::css::ViewCSS> = ::org_w3c_dom_css / "ViewCSS";
namespace org::w3c::dom::events { class DocumentEvent; }
template<> constexpr auto signature<::org::w3c::dom::events::DocumentEvent> = ::org_w3c_dom_events / "DocumentEvent";
namespace org::w3c::dom::events { class Event; }
template<> constexpr auto signature<::org::w3c::dom::events::Event> = ::org_w3c_dom_events / "Event";
namespace org::w3c::dom::events { class EventException; }
template<> constexpr auto signature<::org::w3c::dom::events::EventException> = ::org_w3c_dom_events / "EventException";
namespace org::w3c::dom::events { class EventListener; }
template<> constexpr auto signature<::org::w3c::dom::events::EventListener> = ::org_w3c_dom_events / "EventListener";
namespace org::w3c::dom::events { class EventTarget; }
template<> constexpr auto signature<::org::w3c::dom::events::EventTarget> = ::org_w3c_dom_events / "EventTarget";
namespace org::w3c::dom::events { class MouseEvent; }
template<> constexpr auto signature<::org::w3c::dom::events::MouseEvent> = ::org_w3c_dom_events / "MouseEvent";
namespace org::w3c::dom::events { class MutationEvent; }
template<> constexpr auto signature<::org::w3c::dom::events::MutationEvent> = ::org_w3c_dom_events / "MutationEvent";
namespace org::w3c::dom::events { class UIEvent; }
template<> constexpr auto signature<::org::w3c::dom::events::UIEvent> = ::org_w3c_dom_events / "UIEvent";
namespace org::w3c::dom::html { class HTMLAnchorElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLAnchorElement> = ::org_w3c_dom_html / "HTMLAnchorElement";
namespace org::w3c::dom::html { class HTMLAppletElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLAppletElement> = ::org_w3c_dom_html / "HTMLAppletElement";
namespace org::w3c::dom::html { class HTMLAreaElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLAreaElement> = ::org_w3c_dom_html / "HTMLAreaElement";
namespace org::w3c::dom::html { class HTMLBRElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLBRElement> = ::org_w3c_dom_html / "HTMLBRElement";
namespace org::w3c::dom::html { class HTMLBaseElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLBaseElement> = ::org_w3c_dom_html / "HTMLBaseElement";
namespace org::w3c::dom::html { class HTMLBaseFontElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLBaseFontElement> = ::org_w3c_dom_html / "HTMLBaseFontElement";
namespace org::w3c::dom::html { class HTMLBodyElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLBodyElement> = ::org_w3c_dom_html / "HTMLBodyElement";
namespace org::w3c::dom::html { class HTMLButtonElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLButtonElement> = ::org_w3c_dom_html / "HTMLButtonElement";
namespace org::w3c::dom::html { class HTMLCollection; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLCollection> = ::org_w3c_dom_html / "HTMLCollection";
namespace org::w3c::dom::html { class HTMLDListElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLDListElement> = ::org_w3c_dom_html / "HTMLDListElement";
namespace org::w3c::dom::html { class HTMLDOMImplementation; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLDOMImplementation> = ::org_w3c_dom_html / "HTMLDOMImplementation";
namespace org::w3c::dom::html { class HTMLDirectoryElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLDirectoryElement> = ::org_w3c_dom_html / "HTMLDirectoryElement";
namespace org::w3c::dom::html { class HTMLDivElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLDivElement> = ::org_w3c_dom_html / "HTMLDivElement";
namespace org::w3c::dom::html { class HTMLDocument; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLDocument> = ::org_w3c_dom_html / "HTMLDocument";
namespace org::w3c::dom::html { class HTMLElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLElement> = ::org_w3c_dom_html / "HTMLElement";
namespace org::w3c::dom::html { class HTMLFieldSetElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLFieldSetElement> = ::org_w3c_dom_html / "HTMLFieldSetElement";
namespace org::w3c::dom::html { class HTMLFontElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLFontElement> = ::org_w3c_dom_html / "HTMLFontElement";
namespace org::w3c::dom::html { class HTMLFormElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLFormElement> = ::org_w3c_dom_html / "HTMLFormElement";
namespace org::w3c::dom::html { class HTMLFrameElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLFrameElement> = ::org_w3c_dom_html / "HTMLFrameElement";
namespace org::w3c::dom::html { class HTMLFrameSetElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLFrameSetElement> = ::org_w3c_dom_html / "HTMLFrameSetElement";
namespace org::w3c::dom::html { class HTMLHRElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLHRElement> = ::org_w3c_dom_html / "HTMLHRElement";
namespace org::w3c::dom::html { class HTMLHeadElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLHeadElement> = ::org_w3c_dom_html / "HTMLHeadElement";
namespace org::w3c::dom::html { class HTMLHeadingElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLHeadingElement> = ::org_w3c_dom_html / "HTMLHeadingElement";
namespace org::w3c::dom::html { class HTMLHtmlElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLHtmlElement> = ::org_w3c_dom_html / "HTMLHtmlElement";
namespace org::w3c::dom::html { class HTMLIFrameElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLIFrameElement> = ::org_w3c_dom_html / "HTMLIFrameElement";
namespace org::w3c::dom::html { class HTMLImageElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLImageElement> = ::org_w3c_dom_html / "HTMLImageElement";
namespace org::w3c::dom::html { class HTMLInputElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLInputElement> = ::org_w3c_dom_html / "HTMLInputElement";
namespace org::w3c::dom::html { class HTMLIsIndexElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLIsIndexElement> = ::org_w3c_dom_html / "HTMLIsIndexElement";
namespace org::w3c::dom::html { class HTMLLIElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLLIElement> = ::org_w3c_dom_html / "HTMLLIElement";
namespace org::w3c::dom::html { class HTMLLabelElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLLabelElement> = ::org_w3c_dom_html / "HTMLLabelElement";
namespace org::w3c::dom::html { class HTMLLegendElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLLegendElement> = ::org_w3c_dom_html / "HTMLLegendElement";
namespace org::w3c::dom::html { class HTMLLinkElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLLinkElement> = ::org_w3c_dom_html / "HTMLLinkElement";
namespace org::w3c::dom::html { class HTMLMapElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLMapElement> = ::org_w3c_dom_html / "HTMLMapElement";
namespace org::w3c::dom::html { class HTMLMenuElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLMenuElement> = ::org_w3c_dom_html / "HTMLMenuElement";
namespace org::w3c::dom::html { class HTMLMetaElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLMetaElement> = ::org_w3c_dom_html / "HTMLMetaElement";
namespace org::w3c::dom::html { class HTMLModElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLModElement> = ::org_w3c_dom_html / "HTMLModElement";
namespace org::w3c::dom::html { class HTMLOListElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLOListElement> = ::org_w3c_dom_html / "HTMLOListElement";
namespace org::w3c::dom::html { class HTMLObjectElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLObjectElement> = ::org_w3c_dom_html / "HTMLObjectElement";
namespace org::w3c::dom::html { class HTMLOptGroupElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLOptGroupElement> = ::org_w3c_dom_html / "HTMLOptGroupElement";
namespace org::w3c::dom::html { class HTMLOptionElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLOptionElement> = ::org_w3c_dom_html / "HTMLOptionElement";
namespace org::w3c::dom::html { class HTMLParagraphElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLParagraphElement> = ::org_w3c_dom_html / "HTMLParagraphElement";
namespace org::w3c::dom::html { class HTMLParamElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLParamElement> = ::org_w3c_dom_html / "HTMLParamElement";
namespace org::w3c::dom::html { class HTMLPreElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLPreElement> = ::org_w3c_dom_html / "HTMLPreElement";
namespace org::w3c::dom::html { class HTMLQuoteElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLQuoteElement> = ::org_w3c_dom_html / "HTMLQuoteElement";
namespace org::w3c::dom::html { class HTMLScriptElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLScriptElement> = ::org_w3c_dom_html / "HTMLScriptElement";
namespace org::w3c::dom::html { class HTMLSelectElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLSelectElement> = ::org_w3c_dom_html / "HTMLSelectElement";
namespace org::w3c::dom::html { class HTMLStyleElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLStyleElement> = ::org_w3c_dom_html / "HTMLStyleElement";
namespace org::w3c::dom::html { class HTMLTableCaptionElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLTableCaptionElement> = ::org_w3c_dom_html / "HTMLTableCaptionElement";
namespace org::w3c::dom::html { class HTMLTableCellElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLTableCellElement> = ::org_w3c_dom_html / "HTMLTableCellElement";
namespace org::w3c::dom::html { class HTMLTableColElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLTableColElement> = ::org_w3c_dom_html / "HTMLTableColElement";
namespace org::w3c::dom::html { class HTMLTableElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLTableElement> = ::org_w3c_dom_html / "HTMLTableElement";
namespace org::w3c::dom::html { class HTMLTableRowElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLTableRowElement> = ::org_w3c_dom_html / "HTMLTableRowElement";
namespace org::w3c::dom::html { class HTMLTableSectionElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLTableSectionElement> = ::org_w3c_dom_html / "HTMLTableSectionElement";
namespace org::w3c::dom::html { class HTMLTextAreaElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLTextAreaElement> = ::org_w3c_dom_html / "HTMLTextAreaElement";
namespace org::w3c::dom::html { class HTMLTitleElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLTitleElement> = ::org_w3c_dom_html / "HTMLTitleElement";
namespace org::w3c::dom::html { class HTMLUListElement; }
template<> constexpr auto signature<::org::w3c::dom::html::HTMLUListElement> = ::org_w3c_dom_html / "HTMLUListElement";
namespace org::w3c::dom::ls { class DOMImplementationLS; }
template<> constexpr auto signature<::org::w3c::dom::ls::DOMImplementationLS> = ::org_w3c_dom_ls / "DOMImplementationLS";
namespace org::w3c::dom::ls { class LSException; }
template<> constexpr auto signature<::org::w3c::dom::ls::LSException> = ::org_w3c_dom_ls / "LSException";
namespace org::w3c::dom::ls { class LSInput; }
template<> constexpr auto signature<::org::w3c::dom::ls::LSInput> = ::org_w3c_dom_ls / "LSInput";
namespace org::w3c::dom::ls { class LSLoadEvent; }
template<> constexpr auto signature<::org::w3c::dom::ls::LSLoadEvent> = ::org_w3c_dom_ls / "LSLoadEvent";
namespace org::w3c::dom::ls { class LSOutput; }
template<> constexpr auto signature<::org::w3c::dom::ls::LSOutput> = ::org_w3c_dom_ls / "LSOutput";
namespace org::w3c::dom::ls { class LSParser; }
template<> constexpr auto signature<::org::w3c::dom::ls::LSParser> = ::org_w3c_dom_ls / "LSParser";
namespace org::w3c::dom::ls { class LSParserFilter; }
template<> constexpr auto signature<::org::w3c::dom::ls::LSParserFilter> = ::org_w3c_dom_ls / "LSParserFilter";
namespace org::w3c::dom::ls { class LSProgressEvent; }
template<> constexpr auto signature<::org::w3c::dom::ls::LSProgressEvent> = ::org_w3c_dom_ls / "LSProgressEvent";
namespace org::w3c::dom::ls { class LSResourceResolver; }
template<> constexpr auto signature<::org::w3c::dom::ls::LSResourceResolver> = ::org_w3c_dom_ls / "LSResourceResolver";
namespace org::w3c::dom::ls { class LSSerializer; }
template<> constexpr auto signature<::org::w3c::dom::ls::LSSerializer> = ::org_w3c_dom_ls / "LSSerializer";
namespace org::w3c::dom::ls { class LSSerializerFilter; }
template<> constexpr auto signature<::org::w3c::dom::ls::LSSerializerFilter> = ::org_w3c_dom_ls / "LSSerializerFilter";
namespace org::w3c::dom::ranges { class DocumentRange; }
template<> constexpr auto signature<::org::w3c::dom::ranges::DocumentRange> = ::org_w3c_dom_ranges / "DocumentRange";
namespace org::w3c::dom::ranges { class Range; }
template<> constexpr auto signature<::org::w3c::dom::ranges::Range> = ::org_w3c_dom_ranges / "Range";
namespace org::w3c::dom::ranges { class RangeException; }
template<> constexpr auto signature<::org::w3c::dom::ranges::RangeException> = ::org_w3c_dom_ranges / "RangeException";
namespace org::w3c::dom::stylesheets { class DocumentStyle; }
template<> constexpr auto signature<::org::w3c::dom::stylesheets::DocumentStyle> = ::org_w3c_dom_stylesheets / "DocumentStyle";
namespace org::w3c::dom::stylesheets { class LinkStyle; }
template<> constexpr auto signature<::org::w3c::dom::stylesheets::LinkStyle> = ::org_w3c_dom_stylesheets / "LinkStyle";
namespace org::w3c::dom::stylesheets { class MediaList; }
template<> constexpr auto signature<::org::w3c::dom::stylesheets::MediaList> = ::org_w3c_dom_stylesheets / "MediaList";
namespace org::w3c::dom::stylesheets { class StyleSheet; }
template<> constexpr auto signature<::org::w3c::dom::stylesheets::StyleSheet> = ::org_w3c_dom_stylesheets / "StyleSheet";
namespace org::w3c::dom::stylesheets { class StyleSheetList; }
template<> constexpr auto signature<::org::w3c::dom::stylesheets::StyleSheetList> = ::org_w3c_dom_stylesheets / "StyleSheetList";
namespace org::w3c::dom::traversal { class DocumentTraversal; }
template<> constexpr auto signature<::org::w3c::dom::traversal::DocumentTraversal> = ::org_w3c_dom_traversal / "DocumentTraversal";
namespace org::w3c::dom::traversal { class NodeFilter; }
template<> constexpr auto signature<::org::w3c::dom::traversal::NodeFilter> = ::org_w3c_dom_traversal / "NodeFilter";
namespace org::w3c::dom::traversal { class NodeIterator; }
template<> constexpr auto signature<::org::w3c::dom::traversal::NodeIterator> = ::org_w3c_dom_traversal / "NodeIterator";
namespace org::w3c::dom::traversal { class TreeWalker; }
template<> constexpr auto signature<::org::w3c::dom::traversal::TreeWalker> = ::org_w3c_dom_traversal / "TreeWalker";
namespace org::w3c::dom::views { class AbstractView; }
template<> constexpr auto signature<::org::w3c::dom::views::AbstractView> = ::org_w3c_dom_views / "AbstractView";
namespace org::w3c::dom::views { class DocumentView; }
template<> constexpr auto signature<::org::w3c::dom::views::DocumentView> = ::org_w3c_dom_views / "DocumentView";
namespace org::w3c::dom::xpath { class XPathEvaluator; }
template<> constexpr auto signature<::org::w3c::dom::xpath::XPathEvaluator> = ::org_w3c_dom_xpath / "XPathEvaluator";
namespace org::w3c::dom::xpath { class XPathException; }
template<> constexpr auto signature<::org::w3c::dom::xpath::XPathException> = ::org_w3c_dom_xpath / "XPathException";
namespace org::w3c::dom::xpath { class XPathExpression; }
template<> constexpr auto signature<::org::w3c::dom::xpath::XPathExpression> = ::org_w3c_dom_xpath / "XPathExpression";
namespace org::w3c::dom::xpath { class XPathNSResolver; }
template<> constexpr auto signature<::org::w3c::dom::xpath::XPathNSResolver> = ::org_w3c_dom_xpath / "XPathNSResolver";
namespace org::w3c::dom::xpath { class XPathNamespace; }
template<> constexpr auto signature<::org::w3c::dom::xpath::XPathNamespace> = ::org_w3c_dom_xpath / "XPathNamespace";
namespace org::w3c::dom::xpath { class XPathResult; }
template<> constexpr auto signature<::org::w3c::dom::xpath::XPathResult> = ::org_w3c_dom_xpath / "XPathResult";
namespace org::xml::sax { class AttributeList; }
template<> constexpr auto signature<::org::xml::sax::AttributeList> = ::org_xml_sax / "AttributeList";
namespace org::xml::sax { class Attributes; }
template<> constexpr auto signature<::org::xml::sax::Attributes> = ::org_xml_sax / "Attributes";
namespace org::xml::sax { class ContentHandler; }
template<> constexpr auto signature<::org::xml::sax::ContentHandler> = ::org_xml_sax / "ContentHandler";
namespace org::xml::sax { class DTDHandler; }
template<> constexpr auto signature<::org::xml::sax::DTDHandler> = ::org_xml_sax / "DTDHandler";
namespace org::xml::sax { class DocumentHandler; }
template<> constexpr auto signature<::org::xml::sax::DocumentHandler> = ::org_xml_sax / "DocumentHandler";
namespace org::xml::sax { class EntityResolver; }
template<> constexpr auto signature<::org::xml::sax::EntityResolver> = ::org_xml_sax / "EntityResolver";
namespace org::xml::sax { class ErrorHandler; }
template<> constexpr auto signature<::org::xml::sax::ErrorHandler> = ::org_xml_sax / "ErrorHandler";
namespace org::xml::sax { class HandlerBase; }
template<> constexpr auto signature<::org::xml::sax::HandlerBase> = ::org_xml_sax / "HandlerBase";
namespace org::xml::sax { class InputSource; }
template<> constexpr auto signature<::org::xml::sax::InputSource> = ::org_xml_sax / "InputSource";
namespace org::xml::sax { class Locator; }
template<> constexpr auto signature<::org::xml::sax::Locator> = ::org_xml_sax / "Locator";
namespace org::xml::sax { class Parser; }
template<> constexpr auto signature<::org::xml::sax::Parser> = ::org_xml_sax / "Parser";
namespace org::xml::sax { class SAXException; }
template<> constexpr auto signature<::org::xml::sax::SAXException> = ::org_xml_sax / "SAXException";
namespace org::xml::sax { class SAXNotRecognizedException; }
template<> constexpr auto signature<::org::xml::sax::SAXNotRecognizedException> = ::org_xml_sax / "SAXNotRecognizedException";
namespace org::xml::sax { class SAXNotSupportedException; }
template<> constexpr auto signature<::org::xml::sax::SAXNotSupportedException> = ::org_xml_sax / "SAXNotSupportedException";
namespace org::xml::sax { class SAXParseException; }
template<> constexpr auto signature<::org::xml::sax::SAXParseException> = ::org_xml_sax / "SAXParseException";
namespace org::xml::sax { class XMLFilter; }
template<> constexpr auto signature<::org::xml::sax::XMLFilter> = ::org_xml_sax / "XMLFilter";
namespace org::xml::sax { class XMLReader; }
template<> constexpr auto signature<::org::xml::sax::XMLReader> = ::org_xml_sax / "XMLReader";
namespace org::xml::sax::ext { class Attributes2; }
template<> constexpr auto signature<::org::xml::sax::ext::Attributes2> = ::org_xml_sax_ext / "Attributes2";
namespace org::xml::sax::ext { class Attributes2Impl; }
template<> constexpr auto signature<::org::xml::sax::ext::Attributes2Impl> = ::org_xml_sax_ext / "Attributes2Impl";
namespace org::xml::sax::ext { class DeclHandler; }
template<> constexpr auto signature<::org::xml::sax::ext::DeclHandler> = ::org_xml_sax_ext / "DeclHandler";
namespace org::xml::sax::ext { class DefaultHandler2; }
template<> constexpr auto signature<::org::xml::sax::ext::DefaultHandler2> = ::org_xml_sax_ext / "DefaultHandler2";
namespace org::xml::sax::ext { class EntityResolver2; }
template<> constexpr auto signature<::org::xml::sax::ext::EntityResolver2> = ::org_xml_sax_ext / "EntityResolver2";
namespace org::xml::sax::ext { class LexicalHandler; }
template<> constexpr auto signature<::org::xml::sax::ext::LexicalHandler> = ::org_xml_sax_ext / "LexicalHandler";
namespace org::xml::sax::ext { class Locator2; }
template<> constexpr auto signature<::org::xml::sax::ext::Locator2> = ::org_xml_sax_ext / "Locator2";
namespace org::xml::sax::ext { class Locator2Impl; }
template<> constexpr auto signature<::org::xml::sax::ext::Locator2Impl> = ::org_xml_sax_ext / "Locator2Impl";
namespace org::xml::sax::helpers { class AttributeListImpl; }
template<> constexpr auto signature<::org::xml::sax::helpers::AttributeListImpl> = ::org_xml_sax_helpers / "AttributeListImpl";
namespace org::xml::sax::helpers { class AttributesImpl; }
template<> constexpr auto signature<::org::xml::sax::helpers::AttributesImpl> = ::org_xml_sax_helpers / "AttributesImpl";
namespace org::xml::sax::helpers { class DefaultHandler; }
template<> constexpr auto signature<::org::xml::sax::helpers::DefaultHandler> = ::org_xml_sax_helpers / "DefaultHandler";
namespace org::xml::sax::helpers { class LocatorImpl; }
template<> constexpr auto signature<::org::xml::sax::helpers::LocatorImpl> = ::org_xml_sax_helpers / "LocatorImpl";
namespace org::xml::sax::helpers { class NamespaceSupport; }
template<> constexpr auto signature<::org::xml::sax::helpers::NamespaceSupport> = ::org_xml_sax_helpers / "NamespaceSupport";
namespace org::xml::sax::helpers { class NamespaceSupport$Context; }
template<> constexpr auto signature<::org::xml::sax::helpers::NamespaceSupport$Context> = ::org_xml_sax_helpers / "NamespaceSupport$Context";
namespace org::xml::sax::helpers { class NewInstance; }
template<> constexpr auto signature<::org::xml::sax::helpers::NewInstance> = ::org_xml_sax_helpers / "NewInstance";
namespace org::xml::sax::helpers { class ParserAdapter; }
template<> constexpr auto signature<::org::xml::sax::helpers::ParserAdapter> = ::org_xml_sax_helpers / "ParserAdapter";
namespace org::xml::sax::helpers { class ParserAdapter$AttributeListAdapter; }
template<> constexpr auto signature<::org::xml::sax::helpers::ParserAdapter$AttributeListAdapter> = ::org_xml_sax_helpers / "ParserAdapter$AttributeListAdapter";
namespace org::xml::sax::helpers { class ParserFactory; }
template<> constexpr auto signature<::org::xml::sax::helpers::ParserFactory> = ::org_xml_sax_helpers / "ParserFactory";
namespace org::xml::sax::helpers { class SecuritySupport; }
template<> constexpr auto signature<::org::xml::sax::helpers::SecuritySupport> = ::org_xml_sax_helpers / "SecuritySupport";
namespace org::xml::sax::helpers { class SecuritySupport$1; }
template<> constexpr auto signature<::org::xml::sax::helpers::SecuritySupport$1> = ::org_xml_sax_helpers / "SecuritySupport$1";
namespace org::xml::sax::helpers { class SecuritySupport$2; }
template<> constexpr auto signature<::org::xml::sax::helpers::SecuritySupport$2> = ::org_xml_sax_helpers / "SecuritySupport$2";
namespace org::xml::sax::helpers { class SecuritySupport$3; }
template<> constexpr auto signature<::org::xml::sax::helpers::SecuritySupport$3> = ::org_xml_sax_helpers / "SecuritySupport$3";
namespace org::xml::sax::helpers { class SecuritySupport$4; }
template<> constexpr auto signature<::org::xml::sax::helpers::SecuritySupport$4> = ::org_xml_sax_helpers / "SecuritySupport$4";
namespace org::xml::sax::helpers { class SecuritySupport$5; }
template<> constexpr auto signature<::org::xml::sax::helpers::SecuritySupport$5> = ::org_xml_sax_helpers / "SecuritySupport$5";
namespace org::xml::sax::helpers { class XMLFilterImpl; }
template<> constexpr auto signature<::org::xml::sax::helpers::XMLFilterImpl> = ::org_xml_sax_helpers / "XMLFilterImpl";
namespace org::xml::sax::helpers { class XMLReaderAdapter; }
template<> constexpr auto signature<::org::xml::sax::helpers::XMLReaderAdapter> = ::org_xml_sax_helpers / "XMLReaderAdapter";
namespace org::xml::sax::helpers { class XMLReaderAdapter$AttributesAdapter; }
template<> constexpr auto signature<::org::xml::sax::helpers::XMLReaderAdapter$AttributesAdapter> = ::org_xml_sax_helpers / "XMLReaderAdapter$AttributesAdapter";
namespace org::xml::sax::helpers { class XMLReaderFactory; }
template<> constexpr auto signature<::org::xml::sax::helpers::XMLReaderFactory> = ::org_xml_sax_helpers / "XMLReaderFactory";


#endif
