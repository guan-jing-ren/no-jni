#ifndef javax_imageio_spi_ServiceRegistry_HPP
#define javax_imageio_spi_ServiceRegistry_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::imageio::spi::ServiceRegistry : public jObject<::javax::imageio::spi::ServiceRegistry, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_imageio_spi / "ServiceRegistry";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::util::Iterator)>(), //
		jMethod<::jboolean(::java::lang::Object)>("contains"), //
		jMethod<::jvoid()>("deregisterAll"), //
		jMethod<::jvoid(::java::lang::Class)>("deregisterAll"), //
		jMethod<::jvoid(::java::lang::Object)>("deregisterServiceProvider"), //
		jMethod<::jboolean(::java::lang::Object, ::java::lang::Class)>("deregisterServiceProvider"), //
		jMethod<::jvoid()>("finalize"), //
		jMethod<::java::util::Iterator()>("getCategories"), //
		jMethod<::java::lang::Object(::java::lang::Class)>("getServiceProviderByClass"), //
		jMethod<::java::util::Iterator(::java::lang::Class, ::javax::imageio::spi::ServiceRegistry$Filter, ::jboolean)>("getServiceProviders"), //
		jMethod<::java::util::Iterator(::java::lang::Class, ::jboolean)>("getServiceProviders"), //
		jMethod<::java::util::Iterator(::java::lang::Class)>("lookupProviders"), //
		jMethod<::java::util::Iterator(::java::lang::Class, ::java::lang::ClassLoader)>("lookupProviders"), //
		jMethod<::jvoid(::java::lang::Object)>("registerServiceProvider"), //
		jMethod<::jboolean(::java::lang::Object, ::java::lang::Class)>("registerServiceProvider"), //
		jMethod<::jvoid(::java::util::Iterator)>("registerServiceProviders"), //
		jMethod<::jboolean(::java::lang::Class, ::java::lang::Object, ::java::lang::Object)>("setOrdering"), //
		jMethod<::jboolean(::java::lang::Class, ::java::lang::Object, ::java::lang::Object)>("unsetOrdering"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto contains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("contains")] != -1);
		return call<R>("contains", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deregisterAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("deregisterAll")] != -1);
		return call<R>("deregisterAll", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deregisterServiceProvider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("deregisterServiceProvider")] != -1);
		return call<R>("deregisterServiceProvider", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto finalize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("finalize")] != -1);
		return call<R>("finalize", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto getCategories(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCategories")] != -1);
		return call<R>("getCategories", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getServiceProviderByClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getServiceProviderByClass")] != -1);
		return call<R>("getServiceProviderByClass", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto getServiceProviders(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getServiceProviders")] != -1);
		return call<R>("getServiceProviders", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	static auto lookupProviders(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("lookupProviders")] != -1);
		return scall<R>("lookupProviders", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto registerServiceProvider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("registerServiceProvider")] != -1);
		return call<R>("registerServiceProvider", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto registerServiceProviders(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("registerServiceProviders")] != -1);
		return call<R>("registerServiceProviders", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto setOrdering(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setOrdering")] != -1);
		return call<R>("setOrdering", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto unsetOrdering(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("unsetOrdering")] != -1);
		return call<R>("unsetOrdering", forward<Args>(args)...);
	}

};

#endif
