#ifndef javax_imageio_spi_ImageReaderWriterSpi_HPP
#define javax_imageio_spi_ImageReaderWriterSpi_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::imageio::spi::ImageReaderWriterSpi : public jObject<::javax::imageio::spi::ImageReaderWriterSpi, ::javax::imageio::spi::IIOServiceProvider> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_imageio_spi / "ImageReaderWriterSpi";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String *, ::java::lang::String *, ::java::lang::String *, ::java::lang::String, ::jboolean, ::java::lang::String, ::java::lang::String, ::java::lang::String *, ::java::lang::String *, ::jboolean, ::java::lang::String, ::java::lang::String, ::java::lang::String *, ::java::lang::String *)>(), //
		jMethod<::java::lang::String *()>("getExtraImageMetadataFormatNames"), //
		jMethod<::java::lang::String *()>("getExtraStreamMetadataFormatNames"), //
		jMethod<::java::lang::String *()>("getFileSuffixes"), //
		jMethod<::java::lang::String *()>("getFormatNames"), //
		jMethod<::javax::imageio::metadata::IIOMetadataFormat(::java::lang::String)>("getImageMetadataFormat"), //
		jMethod<::java::lang::String *()>("getMIMETypes"), //
		jMethod<::java::lang::String()>("getNativeImageMetadataFormatName"), //
		jMethod<::java::lang::String()>("getNativeStreamMetadataFormatName"), //
		jMethod<::java::lang::String()>("getPluginClassName"), //
		jMethod<::javax::imageio::metadata::IIOMetadataFormat(::java::lang::String)>("getStreamMetadataFormat"), //
		jMethod<::jboolean()>("isStandardImageMetadataFormatSupported"), //
		jMethod<::jboolean()>("isStandardStreamMetadataFormatSupported"), //
	};

	template<typename R = ::java::lang::String *, typename... Args>
	auto getExtraImageMetadataFormatNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExtraImageMetadataFormatNames")] != -1);
		return call<R>("getExtraImageMetadataFormatNames", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getExtraStreamMetadataFormatNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExtraStreamMetadataFormatNames")] != -1);
		return call<R>("getExtraStreamMetadataFormatNames", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getFileSuffixes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFileSuffixes")] != -1);
		return call<R>("getFileSuffixes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getFormatNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFormatNames")] != -1);
		return call<R>("getFormatNames", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::metadata::IIOMetadataFormat, typename... Args>
	auto getImageMetadataFormat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getImageMetadataFormat")] != -1);
		return call<R>("getImageMetadataFormat", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getMIMETypes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMIMETypes")] != -1);
		return call<R>("getMIMETypes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNativeImageMetadataFormatName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNativeImageMetadataFormatName")] != -1);
		return call<R>("getNativeImageMetadataFormatName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNativeStreamMetadataFormatName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNativeStreamMetadataFormatName")] != -1);
		return call<R>("getNativeStreamMetadataFormatName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPluginClassName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPluginClassName")] != -1);
		return call<R>("getPluginClassName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::metadata::IIOMetadataFormat, typename... Args>
	auto getStreamMetadataFormat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStreamMetadataFormat")] != -1);
		return call<R>("getStreamMetadataFormat", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isStandardImageMetadataFormatSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isStandardImageMetadataFormatSupported")] != -1);
		return call<R>("isStandardImageMetadataFormatSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isStandardStreamMetadataFormatSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isStandardStreamMetadataFormatSupported")] != -1);
		return call<R>("isStandardStreamMetadataFormatSupported", std::forward<Args>(args)...);
	}

};

#endif
