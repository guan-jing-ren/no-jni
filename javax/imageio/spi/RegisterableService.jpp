#ifndef javax_imageio_spi_RegisterableService_HPP
#define javax_imageio_spi_RegisterableService_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::imageio::spi::RegisterableService : public jObject<::javax::imageio::spi::RegisterableService, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_imageio_spi / "RegisterableService";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::javax::imageio::spi::ServiceRegistry, ::java::lang::Class)>("onDeregistration"), //
		jMethod<::jvoid(::javax::imageio::spi::ServiceRegistry, ::java::lang::Class)>("onRegistration"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto onDeregistration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("onDeregistration")] != -1);
		return call<R>("onDeregistration", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto onRegistration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("onRegistration")] != -1);
		return call<R>("onRegistration", std::forward<Args>(args)...);
	}

};

#endif
