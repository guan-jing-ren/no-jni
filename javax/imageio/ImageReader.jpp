#ifndef javax_imageio_ImageReader_HPP
#define javax_imageio_ImageReader_HPP

#include "../../jfwd_decl.hpp"

class ::javax::imageio::ImageReader : public jObject<::javax::imageio::ImageReader, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_imageio / "ImageReader";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("abort"), //
		jMethod<::jvoid(::javax::imageio::event::IIOReadProgressListener)>("addIIOReadProgressListener"), //
		jMethod<::jvoid(::javax::imageio::event::IIOReadUpdateListener)>("addIIOReadUpdateListener"), //
		jMethod<::jvoid(::javax::imageio::event::IIOReadWarningListener)>("addIIOReadWarningListener"), //
		jMethod<::jboolean()>("canReadRaster"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jfloat(::jint)>("getAspectRatio"), //
		jMethod<::java::util::Locale *()>("getAvailableLocales"), //
		jMethod<::javax::imageio::ImageReadParam()>("getDefaultReadParam"), //
		jMethod<::java::lang::String()>("getFormatName"), //
		jMethod<::jint(::jint)>("getHeight"), //
		jMethod<::javax::imageio::metadata::IIOMetadata(::jint)>("getImageMetadata"), //
		jMethod<::javax::imageio::metadata::IIOMetadata(::jint, ::java::lang::String, ::java::util::Set)>("getImageMetadata"), //
		jMethod<::java::util::Iterator(::jint)>("getImageTypes"), //
		jMethod<::java::lang::Object()>("getInput"), //
		jMethod<::java::util::Locale()>("getLocale"), //
		jMethod<::jint()>("getMinIndex"), //
		jMethod<::jint(::jboolean)>("getNumImages"), //
		jMethod<::jint(::jint)>("getNumThumbnails"), //
		jMethod<::javax::imageio::spi::ImageReaderSpi()>("getOriginatingProvider"), //
		jMethod<::javax::imageio::ImageTypeSpecifier(::jint)>("getRawImageType"), //
		jMethod<::javax::imageio::metadata::IIOMetadata()>("getStreamMetadata"), //
		jMethod<::javax::imageio::metadata::IIOMetadata(::java::lang::String, ::java::util::Set)>("getStreamMetadata"), //
		jMethod<::jint(::jint, ::jint)>("getThumbnailHeight"), //
		jMethod<::jint(::jint, ::jint)>("getThumbnailWidth"), //
		jMethod<::jint(::jint)>("getTileGridXOffset"), //
		jMethod<::jint(::jint)>("getTileGridYOffset"), //
		jMethod<::jint(::jint)>("getTileHeight"), //
		jMethod<::jint(::jint)>("getTileWidth"), //
		jMethod<::jint(::jint)>("getWidth"), //
		jMethod<::jboolean(::jint)>("hasThumbnails"), //
		jMethod<::jboolean()>("isIgnoringMetadata"), //
		jMethod<::jboolean(::jint)>("isImageTiled"), //
		jMethod<::jboolean(::jint)>("isRandomAccessEasy"), //
		jMethod<::jboolean()>("isSeekForwardOnly"), //
		jMethod<::java::awt::image::BufferedImage(::jint)>("read"), //
		jMethod<::java::awt::image::BufferedImage(::jint, ::javax::imageio::ImageReadParam)>("read"), //
		jMethod<::javax::imageio::IIOImage(::jint, ::javax::imageio::ImageReadParam)>("readAll"), //
		jMethod<::java::util::Iterator(::java::util::Iterator)>("readAll"), //
		jMethod<::java::awt::image::RenderedImage(::jint, ::javax::imageio::ImageReadParam)>("readAsRenderedImage"), //
		jMethod<::java::awt::image::Raster(::jint, ::javax::imageio::ImageReadParam)>("readRaster"), //
		jMethod<::java::awt::image::BufferedImage(::jint, ::jint)>("readThumbnail"), //
		jMethod<::java::awt::image::BufferedImage(::jint, ::jint, ::jint)>("readTile"), //
		jMethod<::java::awt::image::Raster(::jint, ::jint, ::jint)>("readTileRaster"), //
		jMethod<::jboolean()>("readerSupportsThumbnails"), //
		jMethod<::jvoid()>("removeAllIIOReadProgressListeners"), //
		jMethod<::jvoid()>("removeAllIIOReadUpdateListeners"), //
		jMethod<::jvoid()>("removeAllIIOReadWarningListeners"), //
		jMethod<::jvoid(::javax::imageio::event::IIOReadProgressListener)>("removeIIOReadProgressListener"), //
		jMethod<::jvoid(::javax::imageio::event::IIOReadUpdateListener)>("removeIIOReadUpdateListener"), //
		jMethod<::jvoid(::javax::imageio::event::IIOReadWarningListener)>("removeIIOReadWarningListener"), //
		jMethod<::jvoid()>("reset"), //
		jMethod<::jvoid(::java::lang::Object)>("setInput"), //
		jMethod<::jvoid(::java::lang::Object, ::jboolean)>("setInput"), //
		jMethod<::jvoid(::java::lang::Object, ::jboolean, ::jboolean)>("setInput"), //
		jMethod<::jvoid(::java::util::Locale)>("setLocale"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto abort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("abort")] != -1);
		return call<R>("abort", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addIIOReadProgressListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addIIOReadProgressListener")] != -1);
		return call<R>("addIIOReadProgressListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addIIOReadUpdateListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addIIOReadUpdateListener")] != -1);
		return call<R>("addIIOReadUpdateListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addIIOReadWarningListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addIIOReadWarningListener")] != -1);
		return call<R>("addIIOReadWarningListener", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto canReadRaster(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("canReadRaster")] != -1);
		return call<R>("canReadRaster", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getAspectRatio(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAspectRatio")] != -1);
		return call<R>("getAspectRatio", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale *, typename... Args>
	auto getAvailableLocales(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAvailableLocales")] != -1);
		return call<R>("getAvailableLocales", forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::ImageReadParam, typename... Args>
	auto getDefaultReadParam(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDefaultReadParam")] != -1);
		return call<R>("getDefaultReadParam", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFormatName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFormatName")] != -1);
		return call<R>("getFormatName", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHeight")] != -1);
		return call<R>("getHeight", forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::metadata::IIOMetadata, typename... Args>
	auto getImageMetadata(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getImageMetadata")] != -1);
		return call<R>("getImageMetadata", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto getImageTypes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getImageTypes")] != -1);
		return call<R>("getImageTypes", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getInput(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInput")] != -1);
		return call<R>("getInput", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale, typename... Args>
	auto getLocale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLocale")] != -1);
		return call<R>("getLocale", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinIndex")] != -1);
		return call<R>("getMinIndex", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumImages(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNumImages")] != -1);
		return call<R>("getNumImages", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumThumbnails(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNumThumbnails")] != -1);
		return call<R>("getNumThumbnails", forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::spi::ImageReaderSpi, typename... Args>
	auto getOriginatingProvider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getOriginatingProvider")] != -1);
		return call<R>("getOriginatingProvider", forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::ImageTypeSpecifier, typename... Args>
	auto getRawImageType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRawImageType")] != -1);
		return call<R>("getRawImageType", forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::metadata::IIOMetadata, typename... Args>
	auto getStreamMetadata(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getStreamMetadata")] != -1);
		return call<R>("getStreamMetadata", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getThumbnailHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getThumbnailHeight")] != -1);
		return call<R>("getThumbnailHeight", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getThumbnailWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getThumbnailWidth")] != -1);
		return call<R>("getThumbnailWidth", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTileGridXOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTileGridXOffset")] != -1);
		return call<R>("getTileGridXOffset", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTileGridYOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTileGridYOffset")] != -1);
		return call<R>("getTileGridYOffset", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTileHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTileHeight")] != -1);
		return call<R>("getTileHeight", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTileWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTileWidth")] != -1);
		return call<R>("getTileWidth", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasThumbnails(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hasThumbnails")] != -1);
		return call<R>("hasThumbnails", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isIgnoringMetadata(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isIgnoringMetadata")] != -1);
		return call<R>("isIgnoringMetadata", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isImageTiled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isImageTiled")] != -1);
		return call<R>("isImageTiled", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRandomAccessEasy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isRandomAccessEasy")] != -1);
		return call<R>("isRandomAccessEasy", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSeekForwardOnly(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isSeekForwardOnly")] != -1);
		return call<R>("isSeekForwardOnly", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::BufferedImage, typename... Args>
	auto read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read")] != -1);
		return call<R>("read", forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::IIOImage, typename... Args>
	auto readAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("readAll")] != -1);
		return call<R>("readAll", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::RenderedImage, typename... Args>
	auto readAsRenderedImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("readAsRenderedImage")] != -1);
		return call<R>("readAsRenderedImage", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::Raster, typename... Args>
	auto readRaster(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("readRaster")] != -1);
		return call<R>("readRaster", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::BufferedImage, typename... Args>
	auto readThumbnail(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("readThumbnail")] != -1);
		return call<R>("readThumbnail", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::BufferedImage, typename... Args>
	auto readTile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("readTile")] != -1);
		return call<R>("readTile", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::Raster, typename... Args>
	auto readTileRaster(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("readTileRaster")] != -1);
		return call<R>("readTileRaster", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto readerSupportsThumbnails(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("readerSupportsThumbnails")] != -1);
		return call<R>("readerSupportsThumbnails", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAllIIOReadProgressListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeAllIIOReadProgressListeners")] != -1);
		return call<R>("removeAllIIOReadProgressListeners", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAllIIOReadUpdateListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeAllIIOReadUpdateListeners")] != -1);
		return call<R>("removeAllIIOReadUpdateListeners", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAllIIOReadWarningListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeAllIIOReadWarningListeners")] != -1);
		return call<R>("removeAllIIOReadWarningListeners", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeIIOReadProgressListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeIIOReadProgressListener")] != -1);
		return call<R>("removeIIOReadProgressListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeIIOReadUpdateListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeIIOReadUpdateListener")] != -1);
		return call<R>("removeIIOReadUpdateListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeIIOReadWarningListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeIIOReadWarningListener")] != -1);
		return call<R>("removeIIOReadWarningListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInput(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setInput")] != -1);
		return call<R>("setInput", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLocale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLocale")] != -1);
		return call<R>("setLocale", forward<Args>(args)...);
	}

};

#endif
