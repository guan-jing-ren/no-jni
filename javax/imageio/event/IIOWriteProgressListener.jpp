#ifndef javax_imageio_event_IIOWriteProgressListener_HPP
#define javax_imageio_event_IIOWriteProgressListener_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::imageio::event::IIOWriteProgressListener : public jObject<::javax::imageio::event::IIOWriteProgressListener, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_imageio_event / "IIOWriteProgressListener";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::javax::imageio::ImageWriter)>("imageComplete"), //
		jMethod<::jvoid(::javax::imageio::ImageWriter, ::jfloat)>("imageProgress"), //
		jMethod<::jvoid(::javax::imageio::ImageWriter, ::jint)>("imageStarted"), //
		jMethod<::jvoid(::javax::imageio::ImageWriter)>("thumbnailComplete"), //
		jMethod<::jvoid(::javax::imageio::ImageWriter, ::jfloat)>("thumbnailProgress"), //
		jMethod<::jvoid(::javax::imageio::ImageWriter, ::jint, ::jint)>("thumbnailStarted"), //
		jMethod<::jvoid(::javax::imageio::ImageWriter)>("writeAborted"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto imageComplete(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("imageComplete")] != -1);
		return call<R>("imageComplete", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto imageProgress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("imageProgress")] != -1);
		return call<R>("imageProgress", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto imageStarted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("imageStarted")] != -1);
		return call<R>("imageStarted", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto thumbnailComplete(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("thumbnailComplete")] != -1);
		return call<R>("thumbnailComplete", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto thumbnailProgress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("thumbnailProgress")] != -1);
		return call<R>("thumbnailProgress", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto thumbnailStarted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("thumbnailStarted")] != -1);
		return call<R>("thumbnailStarted", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeAborted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeAborted")] != -1);
		return call<R>("writeAborted", forward<Args>(args)...);
	}

};

#endif
