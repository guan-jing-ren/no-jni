#ifndef javax_imageio_event_IIOReadProgressListener_HPP
#define javax_imageio_event_IIOReadProgressListener_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::imageio::event::IIOReadProgressListener : public jObject<::javax::imageio::event::IIOReadProgressListener, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_imageio_event / "IIOReadProgressListener";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::javax::imageio::ImageReader)>("imageComplete"), //
		jMethod<::jvoid(::javax::imageio::ImageReader, ::jfloat)>("imageProgress"), //
		jMethod<::jvoid(::javax::imageio::ImageReader, ::jint)>("imageStarted"), //
		jMethod<::jvoid(::javax::imageio::ImageReader)>("readAborted"), //
		jMethod<::jvoid(::javax::imageio::ImageReader)>("sequenceComplete"), //
		jMethod<::jvoid(::javax::imageio::ImageReader, ::jint)>("sequenceStarted"), //
		jMethod<::jvoid(::javax::imageio::ImageReader)>("thumbnailComplete"), //
		jMethod<::jvoid(::javax::imageio::ImageReader, ::jfloat)>("thumbnailProgress"), //
		jMethod<::jvoid(::javax::imageio::ImageReader, ::jint, ::jint)>("thumbnailStarted"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto imageComplete(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("imageComplete")] != -1);
		return call<R>("imageComplete", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto imageProgress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("imageProgress")] != -1);
		return call<R>("imageProgress", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto imageStarted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("imageStarted")] != -1);
		return call<R>("imageStarted", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto readAborted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readAborted")] != -1);
		return call<R>("readAborted", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto sequenceComplete(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sequenceComplete")] != -1);
		return call<R>("sequenceComplete", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto sequenceStarted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sequenceStarted")] != -1);
		return call<R>("sequenceStarted", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto thumbnailComplete(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("thumbnailComplete")] != -1);
		return call<R>("thumbnailComplete", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto thumbnailProgress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("thumbnailProgress")] != -1);
		return call<R>("thumbnailProgress", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto thumbnailStarted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("thumbnailStarted")] != -1);
		return call<R>("thumbnailStarted", std::forward<Args>(args)...);
	}

};

#endif
