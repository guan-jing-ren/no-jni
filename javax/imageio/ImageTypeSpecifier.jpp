#ifndef javax_imageio_ImageTypeSpecifier_HPP
#define javax_imageio_ImageTypeSpecifier_HPP

#include "../../jfwd_decl.hpp"

class ::javax::imageio::ImageTypeSpecifier : public jObject<::javax::imageio::ImageTypeSpecifier, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_imageio / "ImageTypeSpecifier";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::image::ColorModel, ::java::awt::image::SampleModel)>(), //
		jConstructor<::jvoid(::java::awt::image::RenderedImage)>(), //
		jMethod<::javax::imageio::ImageTypeSpecifier(::java::awt::color::ColorSpace, ::jint *, ::jint *, ::jint, ::jboolean, ::jboolean)>("createBanded"), //
		jMethod<::java::awt::image::BufferedImage(::jint, ::jint)>("createBufferedImage"), //
		jMethod<::javax::imageio::ImageTypeSpecifier(::jint)>("createFromBufferedImageType"), //
		jMethod<::javax::imageio::ImageTypeSpecifier(::java::awt::image::RenderedImage)>("createFromRenderedImage"), //
		jMethod<::javax::imageio::ImageTypeSpecifier(::jint, ::jint, ::jboolean)>("createGrayscale"), //
		jMethod<::javax::imageio::ImageTypeSpecifier(::jint, ::jint, ::jboolean, ::jboolean)>("createGrayscale"), //
		jMethod<::javax::imageio::ImageTypeSpecifier(::jbyte *, ::jbyte *, ::jbyte *, ::jbyte *, ::jint, ::jint)>("createIndexed"), //
		jMethod<::javax::imageio::ImageTypeSpecifier(::java::awt::color::ColorSpace, ::jint *, ::jint, ::jboolean, ::jboolean)>("createInterleaved"), //
		jMethod<::javax::imageio::ImageTypeSpecifier(::java::awt::color::ColorSpace, ::jint, ::jint, ::jint, ::jint, ::jint, ::jboolean)>("createPacked"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint(::jint)>("getBitsPerBand"), //
		jMethod<::jint()>("getBufferedImageType"), //
		jMethod<::java::awt::image::ColorModel()>("getColorModel"), //
		jMethod<::jint()>("getNumBands"), //
		jMethod<::jint()>("getNumComponents"), //
		jMethod<::java::awt::image::SampleModel()>("getSampleModel"), //
		jMethod<::java::awt::image::SampleModel(::jint, ::jint)>("getSampleModel"), //
		jMethod<::jint()>("hashCode"), //
	};

	template<typename R = ::javax::imageio::ImageTypeSpecifier, typename... Args>
	static auto createBanded(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createBanded")] != -1);
		return scall<R>("createBanded", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::BufferedImage, typename... Args>
	auto createBufferedImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createBufferedImage")] != -1);
		return call<R>("createBufferedImage", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::ImageTypeSpecifier, typename... Args>
	static auto createFromBufferedImageType(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createFromBufferedImageType")] != -1);
		return scall<R>("createFromBufferedImageType", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::ImageTypeSpecifier, typename... Args>
	static auto createFromRenderedImage(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createFromRenderedImage")] != -1);
		return scall<R>("createFromRenderedImage", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::ImageTypeSpecifier, typename... Args>
	static auto createGrayscale(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createGrayscale")] != -1);
		return scall<R>("createGrayscale", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::ImageTypeSpecifier, typename... Args>
	static auto createIndexed(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createIndexed")] != -1);
		return scall<R>("createIndexed", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::ImageTypeSpecifier, typename... Args>
	static auto createInterleaved(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createInterleaved")] != -1);
		return scall<R>("createInterleaved", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::ImageTypeSpecifier, typename... Args>
	static auto createPacked(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createPacked")] != -1);
		return scall<R>("createPacked", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBitsPerBand(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBitsPerBand")] != -1);
		return call<R>("getBitsPerBand", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBufferedImageType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBufferedImageType")] != -1);
		return call<R>("getBufferedImageType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::ColorModel, typename... Args>
	auto getColorModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColorModel")] != -1);
		return call<R>("getColorModel", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumBands(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNumBands")] != -1);
		return call<R>("getNumBands", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumComponents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNumComponents")] != -1);
		return call<R>("getNumComponents", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::SampleModel, typename... Args>
	auto getSampleModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSampleModel")] != -1);
		return call<R>("getSampleModel", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

};

#endif
