#ifndef javax_imageio_ImageIO_HPP
#define javax_imageio_ImageIO_HPP

#include "../../jfwd_decl.hpp"

class ::javax::imageio::ImageIO : public jObject<::javax::imageio::ImageIO, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_imageio / "ImageIO";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::javax::imageio::stream::ImageInputStream(::java::lang::Object)>("createImageInputStream"), //
		jMethod<::javax::imageio::stream::ImageOutputStream(::java::lang::Object)>("createImageOutputStream"), //
		jMethod<::java::io::File()>("getCacheDirectory"), //
		jMethod<::javax::imageio::ImageReader(::javax::imageio::ImageWriter)>("getImageReader"), //
		jMethod<::java::util::Iterator(::java::lang::Object)>("getImageReaders"), //
		jMethod<::java::util::Iterator(::java::lang::String)>("getImageReadersByFormatName"), //
		jMethod<::java::util::Iterator(::java::lang::String)>("getImageReadersByMIMEType"), //
		jMethod<::java::util::Iterator(::java::lang::String)>("getImageReadersBySuffix"), //
		jMethod<::java::util::Iterator(::javax::imageio::ImageReader, ::javax::imageio::ImageWriter)>("getImageTranscoders"), //
		jMethod<::javax::imageio::ImageWriter(::javax::imageio::ImageReader)>("getImageWriter"), //
		jMethod<::java::util::Iterator(::javax::imageio::ImageTypeSpecifier, ::java::lang::String)>("getImageWriters"), //
		jMethod<::java::util::Iterator(::java::lang::String)>("getImageWritersByFormatName"), //
		jMethod<::java::util::Iterator(::java::lang::String)>("getImageWritersByMIMEType"), //
		jMethod<::java::util::Iterator(::java::lang::String)>("getImageWritersBySuffix"), //
		jMethod<::java::lang::String *()>("getReaderFileSuffixes"), //
		jMethod<::java::lang::String *()>("getReaderFormatNames"), //
		jMethod<::java::lang::String *()>("getReaderMIMETypes"), //
		jMethod<::jboolean()>("getUseCache"), //
		jMethod<::java::lang::String *()>("getWriterFileSuffixes"), //
		jMethod<::java::lang::String *()>("getWriterFormatNames"), //
		jMethod<::java::lang::String *()>("getWriterMIMETypes"), //
		jMethod<::java::awt::image::BufferedImage(::java::io::File)>("read"), //
		jMethod<::java::awt::image::BufferedImage(::java::io::InputStream)>("read"), //
		jMethod<::java::awt::image::BufferedImage(::java::net::URL)>("read"), //
		jMethod<::java::awt::image::BufferedImage(::javax::imageio::stream::ImageInputStream)>("read"), //
		jMethod<::jvoid()>("scanForPlugins"), //
		jMethod<::jvoid(::java::io::File)>("setCacheDirectory"), //
		jMethod<::jvoid(::jboolean)>("setUseCache"), //
		jMethod<::jboolean(::java::awt::image::RenderedImage, ::java::lang::String, ::java::io::File)>("write"), //
		jMethod<::jboolean(::java::awt::image::RenderedImage, ::java::lang::String, ::java::io::OutputStream)>("write"), //
		jMethod<::jboolean(::java::awt::image::RenderedImage, ::java::lang::String, ::javax::imageio::stream::ImageOutputStream)>("write"), //
	};

	template<typename R = ::javax::imageio::stream::ImageInputStream, typename... Args>
	static auto createImageInputStream(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createImageInputStream")] != -1);
		return scall<R>("createImageInputStream", forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::stream::ImageOutputStream, typename... Args>
	static auto createImageOutputStream(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createImageOutputStream")] != -1);
		return scall<R>("createImageOutputStream", forward<Args>(args)...);
	}

	template<typename R = ::java::io::File, typename... Args>
	static auto getCacheDirectory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCacheDirectory")] != -1);
		return scall<R>("getCacheDirectory", forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::ImageReader, typename... Args>
	static auto getImageReader(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getImageReader")] != -1);
		return scall<R>("getImageReader", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	static auto getImageReaders(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getImageReaders")] != -1);
		return scall<R>("getImageReaders", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	static auto getImageReadersByFormatName(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getImageReadersByFormatName")] != -1);
		return scall<R>("getImageReadersByFormatName", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	static auto getImageReadersByMIMEType(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getImageReadersByMIMEType")] != -1);
		return scall<R>("getImageReadersByMIMEType", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	static auto getImageReadersBySuffix(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getImageReadersBySuffix")] != -1);
		return scall<R>("getImageReadersBySuffix", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	static auto getImageTranscoders(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getImageTranscoders")] != -1);
		return scall<R>("getImageTranscoders", forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::ImageWriter, typename... Args>
	static auto getImageWriter(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getImageWriter")] != -1);
		return scall<R>("getImageWriter", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	static auto getImageWriters(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getImageWriters")] != -1);
		return scall<R>("getImageWriters", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	static auto getImageWritersByFormatName(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getImageWritersByFormatName")] != -1);
		return scall<R>("getImageWritersByFormatName", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	static auto getImageWritersByMIMEType(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getImageWritersByMIMEType")] != -1);
		return scall<R>("getImageWritersByMIMEType", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	static auto getImageWritersBySuffix(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getImageWritersBySuffix")] != -1);
		return scall<R>("getImageWritersBySuffix", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	static auto getReaderFileSuffixes(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getReaderFileSuffixes")] != -1);
		return scall<R>("getReaderFileSuffixes", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	static auto getReaderFormatNames(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getReaderFormatNames")] != -1);
		return scall<R>("getReaderFormatNames", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	static auto getReaderMIMETypes(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getReaderMIMETypes")] != -1);
		return scall<R>("getReaderMIMETypes", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto getUseCache(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUseCache")] != -1);
		return scall<R>("getUseCache", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	static auto getWriterFileSuffixes(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getWriterFileSuffixes")] != -1);
		return scall<R>("getWriterFileSuffixes", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	static auto getWriterFormatNames(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getWriterFormatNames")] != -1);
		return scall<R>("getWriterFormatNames", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	static auto getWriterMIMETypes(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getWriterMIMETypes")] != -1);
		return scall<R>("getWriterMIMETypes", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::BufferedImage, typename... Args>
	static auto read(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read")] != -1);
		return scall<R>("read", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto scanForPlugins(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("scanForPlugins")] != -1);
		return scall<R>("scanForPlugins", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setCacheDirectory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCacheDirectory")] != -1);
		return scall<R>("setCacheDirectory", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setUseCache(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setUseCache")] != -1);
		return scall<R>("setUseCache", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto write(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write")] != -1);
		return scall<R>("write", forward<Args>(args)...);
	}

};

#endif
