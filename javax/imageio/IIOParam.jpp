#ifndef javax_imageio_IIOParam_HPP
#define javax_imageio_IIOParam_HPP

#include "../../jfwd_decl.hpp"

class ::javax::imageio::IIOParam : public jObject<::javax::imageio::IIOParam, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_imageio / "IIOParam";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean()>("activateController"), //
		jMethod<::javax::imageio::IIOParamController()>("getController"), //
		jMethod<::javax::imageio::IIOParamController()>("getDefaultController"), //
		jMethod<::java::awt::Point()>("getDestinationOffset"), //
		jMethod<::javax::imageio::ImageTypeSpecifier()>("getDestinationType"), //
		jMethod<::jint *()>("getSourceBands"), //
		jMethod<::java::awt::Rectangle()>("getSourceRegion"), //
		jMethod<::jint()>("getSourceXSubsampling"), //
		jMethod<::jint()>("getSourceYSubsampling"), //
		jMethod<::jint()>("getSubsamplingXOffset"), //
		jMethod<::jint()>("getSubsamplingYOffset"), //
		jMethod<::jboolean()>("hasController"), //
		jMethod<::jvoid(::javax::imageio::IIOParamController)>("setController"), //
		jMethod<::jvoid(::java::awt::Point)>("setDestinationOffset"), //
		jMethod<::jvoid(::javax::imageio::ImageTypeSpecifier)>("setDestinationType"), //
		jMethod<::jvoid(::jint *)>("setSourceBands"), //
		jMethod<::jvoid(::java::awt::Rectangle)>("setSourceRegion"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("setSourceSubsampling"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto activateController(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("activateController")] != -1);
		return call<R>("activateController", forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::IIOParamController, typename... Args>
	auto getController(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getController")] != -1);
		return call<R>("getController", forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::IIOParamController, typename... Args>
	auto getDefaultController(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDefaultController")] != -1);
		return call<R>("getDefaultController", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Point, typename... Args>
	auto getDestinationOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDestinationOffset")] != -1);
		return call<R>("getDestinationOffset", forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::ImageTypeSpecifier, typename... Args>
	auto getDestinationType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDestinationType")] != -1);
		return call<R>("getDestinationType", forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getSourceBands(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSourceBands")] != -1);
		return call<R>("getSourceBands", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getSourceRegion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSourceRegion")] != -1);
		return call<R>("getSourceRegion", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSourceXSubsampling(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSourceXSubsampling")] != -1);
		return call<R>("getSourceXSubsampling", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSourceYSubsampling(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSourceYSubsampling")] != -1);
		return call<R>("getSourceYSubsampling", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSubsamplingXOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSubsamplingXOffset")] != -1);
		return call<R>("getSubsamplingXOffset", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSubsamplingYOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSubsamplingYOffset")] != -1);
		return call<R>("getSubsamplingYOffset", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasController(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hasController")] != -1);
		return call<R>("hasController", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setController(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setController")] != -1);
		return call<R>("setController", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDestinationOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDestinationOffset")] != -1);
		return call<R>("setDestinationOffset", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDestinationType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDestinationType")] != -1);
		return call<R>("setDestinationType", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSourceBands(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSourceBands")] != -1);
		return call<R>("setSourceBands", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSourceRegion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSourceRegion")] != -1);
		return call<R>("setSourceRegion", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSourceSubsampling(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSourceSubsampling")] != -1);
		return call<R>("setSourceSubsampling", forward<Args>(args)...);
	}

};

#endif
