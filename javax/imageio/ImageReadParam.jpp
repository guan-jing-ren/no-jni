#ifndef javax_imageio_ImageReadParam_HPP
#define javax_imageio_ImageReadParam_HPP

#include "../../jfwd_decl.hpp"

class ::javax::imageio::ImageReadParam : public jObject<::javax::imageio::ImageReadParam, ::javax::imageio::IIOParam> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_imageio / "ImageReadParam";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jboolean()>("canSetSourceRenderSize"), //
		jMethod<::java::awt::image::BufferedImage()>("getDestination"), //
		jMethod<::jint *()>("getDestinationBands"), //
		jMethod<::jint()>("getSourceMaxProgressivePass"), //
		jMethod<::jint()>("getSourceMinProgressivePass"), //
		jMethod<::jint()>("getSourceNumProgressivePasses"), //
		jMethod<::java::awt::Dimension()>("getSourceRenderSize"), //
		jMethod<::jvoid(::java::awt::image::BufferedImage)>("setDestination"), //
		jMethod<::jvoid(::jint *)>("setDestinationBands"), //
		jMethod<::jvoid(::javax::imageio::ImageTypeSpecifier)>("setDestinationType"), //
		jMethod<::jvoid(::jint, ::jint)>("setSourceProgressivePasses"), //
		jMethod<::jvoid(::java::awt::Dimension)>("setSourceRenderSize"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto canSetSourceRenderSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canSetSourceRenderSize")] != -1);
		return call<R>("canSetSourceRenderSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::BufferedImage, typename... Args>
	auto getDestination(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDestination")] != -1);
		return call<R>("getDestination", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getDestinationBands(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDestinationBands")] != -1);
		return call<R>("getDestinationBands", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSourceMaxProgressivePass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSourceMaxProgressivePass")] != -1);
		return call<R>("getSourceMaxProgressivePass", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSourceMinProgressivePass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSourceMinProgressivePass")] != -1);
		return call<R>("getSourceMinProgressivePass", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSourceNumProgressivePasses(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSourceNumProgressivePasses")] != -1);
		return call<R>("getSourceNumProgressivePasses", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getSourceRenderSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSourceRenderSize")] != -1);
		return call<R>("getSourceRenderSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDestination(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDestination")] != -1);
		return call<R>("setDestination", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDestinationBands(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDestinationBands")] != -1);
		return call<R>("setDestinationBands", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDestinationType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDestinationType")] != -1);
		return call<R>("setDestinationType", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSourceProgressivePasses(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSourceProgressivePasses")] != -1);
		return call<R>("setSourceProgressivePasses", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSourceRenderSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSourceRenderSize")] != -1);
		return call<R>("setSourceRenderSize", std::forward<Args>(args)...);
	}

};

#endif
