#ifndef javax_imageio_metadata_IIOMetadata_HPP
#define javax_imageio_metadata_IIOMetadata_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::imageio::metadata::IIOMetadata : public jObject<::javax::imageio::metadata::IIOMetadata, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_imageio_metadata / "IIOMetadata";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean()>("activateController"), //
		jMethod<::org::w3c::dom::Node(::java::lang::String)>("getAsTree"), //
		jMethod<::javax::imageio::metadata::IIOMetadataController()>("getController"), //
		jMethod<::javax::imageio::metadata::IIOMetadataController()>("getDefaultController"), //
		jMethod<::java::lang::String *()>("getExtraMetadataFormatNames"), //
		jMethod<::javax::imageio::metadata::IIOMetadataFormat(::java::lang::String)>("getMetadataFormat"), //
		jMethod<::java::lang::String *()>("getMetadataFormatNames"), //
		jMethod<::java::lang::String()>("getNativeMetadataFormatName"), //
		jMethod<::jboolean()>("hasController"), //
		jMethod<::jboolean()>("isReadOnly"), //
		jMethod<::jboolean()>("isStandardMetadataFormatSupported"), //
		jMethod<::jvoid(::java::lang::String, ::org::w3c::dom::Node)>("mergeTree"), //
		jMethod<::jvoid()>("reset"), //
		jMethod<::jvoid(::javax::imageio::metadata::IIOMetadataController)>("setController"), //
		jMethod<::jvoid(::java::lang::String, ::org::w3c::dom::Node)>("setFromTree"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto activateController(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("activateController")] != -1);
		return call<R>("activateController", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto getAsTree(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAsTree")] != -1);
		return call<R>("getAsTree", forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::metadata::IIOMetadataController, typename... Args>
	auto getController(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getController")] != -1);
		return call<R>("getController", forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::metadata::IIOMetadataController, typename... Args>
	auto getDefaultController(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDefaultController")] != -1);
		return call<R>("getDefaultController", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getExtraMetadataFormatNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getExtraMetadataFormatNames")] != -1);
		return call<R>("getExtraMetadataFormatNames", forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::metadata::IIOMetadataFormat, typename... Args>
	auto getMetadataFormat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMetadataFormat")] != -1);
		return call<R>("getMetadataFormat", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getMetadataFormatNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMetadataFormatNames")] != -1);
		return call<R>("getMetadataFormatNames", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNativeMetadataFormatName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNativeMetadataFormatName")] != -1);
		return call<R>("getNativeMetadataFormatName", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasController(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hasController")] != -1);
		return call<R>("hasController", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isReadOnly(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isReadOnly")] != -1);
		return call<R>("isReadOnly", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isStandardMetadataFormatSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isStandardMetadataFormatSupported")] != -1);
		return call<R>("isStandardMetadataFormatSupported", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mergeTree(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("mergeTree")] != -1);
		return call<R>("mergeTree", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setController(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setController")] != -1);
		return call<R>("setController", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFromTree(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFromTree")] != -1);
		return call<R>("setFromTree", forward<Args>(args)...);
	}

};

#endif
