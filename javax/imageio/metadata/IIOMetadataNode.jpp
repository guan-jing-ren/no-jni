#ifndef javax_imageio_metadata_IIOMetadataNode_HPP
#define javax_imageio_metadata_IIOMetadataNode_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::imageio::metadata::IIOMetadataNode : public jObject<::javax::imageio::metadata::IIOMetadataNode, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_imageio_metadata / "IIOMetadataNode";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jMethod<::org::w3c::dom::Node(::org::w3c::dom::Node)>("appendChild"), //
		jMethod<::org::w3c::dom::Node(::jboolean)>("cloneNode"), //
		jMethod<::jshort(::org::w3c::dom::Node)>("compareDocumentPosition"), //
		jMethod<::java::lang::String(::java::lang::String)>("getAttribute"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::lang::String)>("getAttributeNS"), //
		jMethod<::org::w3c::dom::Attr(::java::lang::String)>("getAttributeNode"), //
		jMethod<::org::w3c::dom::Attr(::java::lang::String, ::java::lang::String)>("getAttributeNodeNS"), //
		jMethod<::org::w3c::dom::NamedNodeMap()>("getAttributes"), //
		jMethod<::java::lang::String()>("getBaseURI"), //
		jMethod<::org::w3c::dom::NodeList()>("getChildNodes"), //
		jMethod<::org::w3c::dom::NodeList(::java::lang::String)>("getElementsByTagName"), //
		jMethod<::org::w3c::dom::NodeList(::java::lang::String, ::java::lang::String)>("getElementsByTagNameNS"), //
		jMethod<::java::lang::Object(::java::lang::String, ::java::lang::String)>("getFeature"), //
		jMethod<::org::w3c::dom::Node()>("getFirstChild"), //
		jMethod<::org::w3c::dom::Node()>("getLastChild"), //
		jMethod<::jint()>("getLength"), //
		jMethod<::java::lang::String()>("getLocalName"), //
		jMethod<::java::lang::String()>("getNamespaceURI"), //
		jMethod<::org::w3c::dom::Node()>("getNextSibling"), //
		jMethod<::java::lang::String()>("getNodeName"), //
		jMethod<::jshort()>("getNodeType"), //
		jMethod<::java::lang::String()>("getNodeValue"), //
		jMethod<::org::w3c::dom::Document()>("getOwnerDocument"), //
		jMethod<::org::w3c::dom::Node()>("getParentNode"), //
		jMethod<::java::lang::String()>("getPrefix"), //
		jMethod<::org::w3c::dom::Node()>("getPreviousSibling"), //
		jMethod<::org::w3c::dom::TypeInfo()>("getSchemaTypeInfo"), //
		jMethod<::java::lang::String()>("getTagName"), //
		jMethod<::java::lang::String()>("getTextContent"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getUserData"), //
		jMethod<::java::lang::Object()>("getUserObject"), //
		jMethod<::jboolean(::java::lang::String)>("hasAttribute"), //
		jMethod<::jboolean(::java::lang::String, ::java::lang::String)>("hasAttributeNS"), //
		jMethod<::jboolean()>("hasAttributes"), //
		jMethod<::jboolean()>("hasChildNodes"), //
		jMethod<::org::w3c::dom::Node(::org::w3c::dom::Node, ::org::w3c::dom::Node)>("insertBefore"), //
		jMethod<::jboolean(::java::lang::String)>("isDefaultNamespace"), //
		jMethod<::jboolean(::org::w3c::dom::Node)>("isEqualNode"), //
		jMethod<::jboolean(::org::w3c::dom::Node)>("isSameNode"), //
		jMethod<::jboolean(::java::lang::String, ::java::lang::String)>("isSupported"), //
		jMethod<::org::w3c::dom::Node(::jint)>("item"), //
		jMethod<::java::lang::String(::java::lang::String)>("lookupNamespaceURI"), //
		jMethod<::java::lang::String(::java::lang::String)>("lookupPrefix"), //
		jMethod<::jvoid()>("normalize"), //
		jMethod<::jvoid(::java::lang::String)>("removeAttribute"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("removeAttributeNS"), //
		jMethod<::org::w3c::dom::Attr(::org::w3c::dom::Attr)>("removeAttributeNode"), //
		jMethod<::org::w3c::dom::Node(::org::w3c::dom::Node)>("removeChild"), //
		jMethod<::org::w3c::dom::Node(::org::w3c::dom::Node, ::org::w3c::dom::Node)>("replaceChild"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("setAttribute"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String)>("setAttributeNS"), //
		jMethod<::org::w3c::dom::Attr(::org::w3c::dom::Attr)>("setAttributeNode"), //
		jMethod<::org::w3c::dom::Attr(::org::w3c::dom::Attr)>("setAttributeNodeNS"), //
		jMethod<::jvoid(::java::lang::String, ::jboolean)>("setIdAttribute"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::jboolean)>("setIdAttributeNS"), //
		jMethod<::jvoid(::org::w3c::dom::Attr, ::jboolean)>("setIdAttributeNode"), //
		jMethod<::jvoid(::java::lang::String)>("setNodeValue"), //
		jMethod<::jvoid(::java::lang::String)>("setPrefix"), //
		jMethod<::jvoid(::java::lang::String)>("setTextContent"), //
		jMethod<::java::lang::Object(::java::lang::String, ::java::lang::Object, ::org::w3c::dom::UserDataHandler)>("setUserData"), //
		jMethod<::jvoid(::java::lang::Object)>("setUserObject"), //
	};

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto appendChild(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("appendChild")] != -1);
		return call<R>("appendChild", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto cloneNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("cloneNode")] != -1);
		return call<R>("cloneNode", forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto compareDocumentPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("compareDocumentPosition")] != -1);
		return call<R>("compareDocumentPosition", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttribute")] != -1);
		return call<R>("getAttribute", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAttributeNS(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttributeNS")] != -1);
		return call<R>("getAttributeNS", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Attr, typename... Args>
	auto getAttributeNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttributeNode")] != -1);
		return call<R>("getAttributeNode", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Attr, typename... Args>
	auto getAttributeNodeNS(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttributeNodeNS")] != -1);
		return call<R>("getAttributeNodeNS", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::NamedNodeMap, typename... Args>
	auto getAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttributes")] != -1);
		return call<R>("getAttributes", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBaseURI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBaseURI")] != -1);
		return call<R>("getBaseURI", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::NodeList, typename... Args>
	auto getChildNodes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getChildNodes")] != -1);
		return call<R>("getChildNodes", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::NodeList, typename... Args>
	auto getElementsByTagName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getElementsByTagName")] != -1);
		return call<R>("getElementsByTagName", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::NodeList, typename... Args>
	auto getElementsByTagNameNS(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getElementsByTagNameNS")] != -1);
		return call<R>("getElementsByTagNameNS", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getFeature(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFeature")] != -1);
		return call<R>("getFeature", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto getFirstChild(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFirstChild")] != -1);
		return call<R>("getFirstChild", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto getLastChild(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLastChild")] != -1);
		return call<R>("getLastChild", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLength")] != -1);
		return call<R>("getLength", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLocalName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLocalName")] != -1);
		return call<R>("getLocalName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNamespaceURI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNamespaceURI")] != -1);
		return call<R>("getNamespaceURI", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto getNextSibling(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNextSibling")] != -1);
		return call<R>("getNextSibling", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNodeName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNodeName")] != -1);
		return call<R>("getNodeName", forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto getNodeType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNodeType")] != -1);
		return call<R>("getNodeType", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNodeValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNodeValue")] != -1);
		return call<R>("getNodeValue", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Document, typename... Args>
	auto getOwnerDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getOwnerDocument")] != -1);
		return call<R>("getOwnerDocument", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto getParentNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getParentNode")] != -1);
		return call<R>("getParentNode", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPrefix(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPrefix")] != -1);
		return call<R>("getPrefix", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto getPreviousSibling(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreviousSibling")] != -1);
		return call<R>("getPreviousSibling", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::TypeInfo, typename... Args>
	auto getSchemaTypeInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSchemaTypeInfo")] != -1);
		return call<R>("getSchemaTypeInfo", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTagName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTagName")] != -1);
		return call<R>("getTagName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTextContent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTextContent")] != -1);
		return call<R>("getTextContent", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getUserData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUserData")] != -1);
		return call<R>("getUserData", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getUserObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUserObject")] != -1);
		return call<R>("getUserObject", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hasAttribute")] != -1);
		return call<R>("hasAttribute", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasAttributeNS(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hasAttributeNS")] != -1);
		return call<R>("hasAttributeNS", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hasAttributes")] != -1);
		return call<R>("hasAttributes", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasChildNodes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hasChildNodes")] != -1);
		return call<R>("hasChildNodes", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto insertBefore(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("insertBefore")] != -1);
		return call<R>("insertBefore", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDefaultNamespace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isDefaultNamespace")] != -1);
		return call<R>("isDefaultNamespace", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEqualNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isEqualNode")] != -1);
		return call<R>("isEqualNode", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSameNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isSameNode")] != -1);
		return call<R>("isSameNode", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isSupported")] != -1);
		return call<R>("isSupported", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto item(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("item")] != -1);
		return call<R>("item", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto lookupNamespaceURI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("lookupNamespaceURI")] != -1);
		return call<R>("lookupNamespaceURI", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto lookupPrefix(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("lookupPrefix")] != -1);
		return call<R>("lookupPrefix", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto normalize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("normalize")] != -1);
		return call<R>("normalize", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeAttribute")] != -1);
		return call<R>("removeAttribute", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAttributeNS(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeAttributeNS")] != -1);
		return call<R>("removeAttributeNS", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Attr, typename... Args>
	auto removeAttributeNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeAttributeNode")] != -1);
		return call<R>("removeAttributeNode", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto removeChild(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeChild")] != -1);
		return call<R>("removeChild", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto replaceChild(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("replaceChild")] != -1);
		return call<R>("replaceChild", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setAttribute")] != -1);
		return call<R>("setAttribute", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAttributeNS(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setAttributeNS")] != -1);
		return call<R>("setAttributeNS", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Attr, typename... Args>
	auto setAttributeNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setAttributeNode")] != -1);
		return call<R>("setAttributeNode", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Attr, typename... Args>
	auto setAttributeNodeNS(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setAttributeNodeNS")] != -1);
		return call<R>("setAttributeNodeNS", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIdAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setIdAttribute")] != -1);
		return call<R>("setIdAttribute", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIdAttributeNS(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setIdAttributeNS")] != -1);
		return call<R>("setIdAttributeNS", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIdAttributeNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setIdAttributeNode")] != -1);
		return call<R>("setIdAttributeNode", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNodeValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setNodeValue")] != -1);
		return call<R>("setNodeValue", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPrefix(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPrefix")] != -1);
		return call<R>("setPrefix", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTextContent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setTextContent")] != -1);
		return call<R>("setTextContent", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto setUserData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setUserData")] != -1);
		return call<R>("setUserData", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUserObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setUserObject")] != -1);
		return call<R>("setUserObject", forward<Args>(args)...);
	}

};

#endif
