#ifndef javax_imageio_metadata_IIOMetadataFormat_HPP
#define javax_imageio_metadata_IIOMetadataFormat_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::imageio::metadata::IIOMetadataFormat : public jObject<::javax::imageio::metadata::IIOMetadataFormat, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_imageio_metadata / "IIOMetadataFormat";

	constexpr static Enume field_signatures{
		jField<::jint>("CHILD_POLICY_ALL"), //
		jField<::jint>("CHILD_POLICY_CHOICE"), //
		jField<::jint>("CHILD_POLICY_EMPTY"), //
		jField<::jint>("CHILD_POLICY_MAX"), //
		jField<::jint>("CHILD_POLICY_REPEAT"), //
		jField<::jint>("CHILD_POLICY_SEQUENCE"), //
		jField<::jint>("CHILD_POLICY_SOME"), //
		jField<::jint>("DATATYPE_BOOLEAN"), //
		jField<::jint>("DATATYPE_DOUBLE"), //
		jField<::jint>("DATATYPE_FLOAT"), //
		jField<::jint>("DATATYPE_INTEGER"), //
		jField<::jint>("DATATYPE_STRING"), //
		jField<::jint>("VALUE_ARBITRARY"), //
		jField<::jint>("VALUE_ENUMERATION"), //
		jField<::jint>("VALUE_LIST"), //
		jField<::jint>("VALUE_NONE"), //
		jField<::jint>("VALUE_RANGE"), //
		jField<::jint>("VALUE_RANGE_MAX_INCLUSIVE"), //
		jField<::jint>("VALUE_RANGE_MAX_INCLUSIVE_MASK"), //
		jField<::jint>("VALUE_RANGE_MIN_INCLUSIVE"), //
		jField<::jint>("VALUE_RANGE_MIN_INCLUSIVE_MASK"), //
		jField<::jint>("VALUE_RANGE_MIN_MAX_INCLUSIVE"), //
	};

	template<typename F = ::jint>
	static auto CHILD_POLICY_ALL() {
		static_assert(field_signatures[jField<F>("CHILD_POLICY_ALL")] != -1);
		return sat<F>("CHILD_POLICY_ALL");
	}

	template<typename F = ::jint>
	static auto CHILD_POLICY_CHOICE() {
		static_assert(field_signatures[jField<F>("CHILD_POLICY_CHOICE")] != -1);
		return sat<F>("CHILD_POLICY_CHOICE");
	}

	template<typename F = ::jint>
	static auto CHILD_POLICY_EMPTY() {
		static_assert(field_signatures[jField<F>("CHILD_POLICY_EMPTY")] != -1);
		return sat<F>("CHILD_POLICY_EMPTY");
	}

	template<typename F = ::jint>
	static auto CHILD_POLICY_MAX() {
		static_assert(field_signatures[jField<F>("CHILD_POLICY_MAX")] != -1);
		return sat<F>("CHILD_POLICY_MAX");
	}

	template<typename F = ::jint>
	static auto CHILD_POLICY_REPEAT() {
		static_assert(field_signatures[jField<F>("CHILD_POLICY_REPEAT")] != -1);
		return sat<F>("CHILD_POLICY_REPEAT");
	}

	template<typename F = ::jint>
	static auto CHILD_POLICY_SEQUENCE() {
		static_assert(field_signatures[jField<F>("CHILD_POLICY_SEQUENCE")] != -1);
		return sat<F>("CHILD_POLICY_SEQUENCE");
	}

	template<typename F = ::jint>
	static auto CHILD_POLICY_SOME() {
		static_assert(field_signatures[jField<F>("CHILD_POLICY_SOME")] != -1);
		return sat<F>("CHILD_POLICY_SOME");
	}

	template<typename F = ::jint>
	static auto DATATYPE_BOOLEAN() {
		static_assert(field_signatures[jField<F>("DATATYPE_BOOLEAN")] != -1);
		return sat<F>("DATATYPE_BOOLEAN");
	}

	template<typename F = ::jint>
	static auto DATATYPE_DOUBLE() {
		static_assert(field_signatures[jField<F>("DATATYPE_DOUBLE")] != -1);
		return sat<F>("DATATYPE_DOUBLE");
	}

	template<typename F = ::jint>
	static auto DATATYPE_FLOAT() {
		static_assert(field_signatures[jField<F>("DATATYPE_FLOAT")] != -1);
		return sat<F>("DATATYPE_FLOAT");
	}

	template<typename F = ::jint>
	static auto DATATYPE_INTEGER() {
		static_assert(field_signatures[jField<F>("DATATYPE_INTEGER")] != -1);
		return sat<F>("DATATYPE_INTEGER");
	}

	template<typename F = ::jint>
	static auto DATATYPE_STRING() {
		static_assert(field_signatures[jField<F>("DATATYPE_STRING")] != -1);
		return sat<F>("DATATYPE_STRING");
	}

	template<typename F = ::jint>
	static auto VALUE_ARBITRARY() {
		static_assert(field_signatures[jField<F>("VALUE_ARBITRARY")] != -1);
		return sat<F>("VALUE_ARBITRARY");
	}

	template<typename F = ::jint>
	static auto VALUE_ENUMERATION() {
		static_assert(field_signatures[jField<F>("VALUE_ENUMERATION")] != -1);
		return sat<F>("VALUE_ENUMERATION");
	}

	template<typename F = ::jint>
	static auto VALUE_LIST() {
		static_assert(field_signatures[jField<F>("VALUE_LIST")] != -1);
		return sat<F>("VALUE_LIST");
	}

	template<typename F = ::jint>
	static auto VALUE_NONE() {
		static_assert(field_signatures[jField<F>("VALUE_NONE")] != -1);
		return sat<F>("VALUE_NONE");
	}

	template<typename F = ::jint>
	static auto VALUE_RANGE() {
		static_assert(field_signatures[jField<F>("VALUE_RANGE")] != -1);
		return sat<F>("VALUE_RANGE");
	}

	template<typename F = ::jint>
	static auto VALUE_RANGE_MAX_INCLUSIVE() {
		static_assert(field_signatures[jField<F>("VALUE_RANGE_MAX_INCLUSIVE")] != -1);
		return sat<F>("VALUE_RANGE_MAX_INCLUSIVE");
	}

	template<typename F = ::jint>
	static auto VALUE_RANGE_MAX_INCLUSIVE_MASK() {
		static_assert(field_signatures[jField<F>("VALUE_RANGE_MAX_INCLUSIVE_MASK")] != -1);
		return sat<F>("VALUE_RANGE_MAX_INCLUSIVE_MASK");
	}

	template<typename F = ::jint>
	static auto VALUE_RANGE_MIN_INCLUSIVE() {
		static_assert(field_signatures[jField<F>("VALUE_RANGE_MIN_INCLUSIVE")] != -1);
		return sat<F>("VALUE_RANGE_MIN_INCLUSIVE");
	}

	template<typename F = ::jint>
	static auto VALUE_RANGE_MIN_INCLUSIVE_MASK() {
		static_assert(field_signatures[jField<F>("VALUE_RANGE_MIN_INCLUSIVE_MASK")] != -1);
		return sat<F>("VALUE_RANGE_MIN_INCLUSIVE_MASK");
	}

	template<typename F = ::jint>
	static auto VALUE_RANGE_MIN_MAX_INCLUSIVE() {
		static_assert(field_signatures[jField<F>("VALUE_RANGE_MIN_MAX_INCLUSIVE")] != -1);
		return sat<F>("VALUE_RANGE_MIN_MAX_INCLUSIVE");
	}

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::String, ::javax::imageio::ImageTypeSpecifier)>("canNodeAppear"), //
		jMethod<::jint(::java::lang::String, ::java::lang::String)>("getAttributeDataType"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::lang::String)>("getAttributeDefaultValue"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::lang::String, ::java::util::Locale)>("getAttributeDescription"), //
		jMethod<::java::lang::String *(::java::lang::String, ::java::lang::String)>("getAttributeEnumerations"), //
		jMethod<::jint(::java::lang::String, ::java::lang::String)>("getAttributeListMaxLength"), //
		jMethod<::jint(::java::lang::String, ::java::lang::String)>("getAttributeListMinLength"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::lang::String)>("getAttributeMaxValue"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::lang::String)>("getAttributeMinValue"), //
		jMethod<::java::lang::String *(::java::lang::String)>("getAttributeNames"), //
		jMethod<::jint(::java::lang::String, ::java::lang::String)>("getAttributeValueType"), //
		jMethod<::java::lang::String *(::java::lang::String)>("getChildNames"), //
		jMethod<::jint(::java::lang::String)>("getChildPolicy"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::util::Locale)>("getElementDescription"), //
		jMethod<::jint(::java::lang::String)>("getElementMaxChildren"), //
		jMethod<::jint(::java::lang::String)>("getElementMinChildren"), //
		jMethod<::jint(::java::lang::String)>("getObjectArrayMaxLength"), //
		jMethod<::jint(::java::lang::String)>("getObjectArrayMinLength"), //
		jMethod<::java::lang::Class(::java::lang::String)>("getObjectClass"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getObjectDefaultValue"), //
		jMethod<::java::lang::Object *(::java::lang::String)>("getObjectEnumerations"), //
		jMethod<::java::lang::Comparable(::java::lang::String)>("getObjectMaxValue"), //
		jMethod<::java::lang::Comparable(::java::lang::String)>("getObjectMinValue"), //
		jMethod<::jint(::java::lang::String)>("getObjectValueType"), //
		jMethod<::java::lang::String()>("getRootName"), //
		jMethod<::jboolean(::java::lang::String, ::java::lang::String)>("isAttributeRequired"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto canNodeAppear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("canNodeAppear")] != -1);
		return call<R>("canNodeAppear", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAttributeDataType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttributeDataType")] != -1);
		return call<R>("getAttributeDataType", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAttributeDefaultValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttributeDefaultValue")] != -1);
		return call<R>("getAttributeDefaultValue", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAttributeDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttributeDescription")] != -1);
		return call<R>("getAttributeDescription", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getAttributeEnumerations(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttributeEnumerations")] != -1);
		return call<R>("getAttributeEnumerations", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAttributeListMaxLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttributeListMaxLength")] != -1);
		return call<R>("getAttributeListMaxLength", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAttributeListMinLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttributeListMinLength")] != -1);
		return call<R>("getAttributeListMinLength", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAttributeMaxValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttributeMaxValue")] != -1);
		return call<R>("getAttributeMaxValue", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAttributeMinValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttributeMinValue")] != -1);
		return call<R>("getAttributeMinValue", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getAttributeNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttributeNames")] != -1);
		return call<R>("getAttributeNames", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAttributeValueType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttributeValueType")] != -1);
		return call<R>("getAttributeValueType", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getChildNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getChildNames")] != -1);
		return call<R>("getChildNames", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getChildPolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getChildPolicy")] != -1);
		return call<R>("getChildPolicy", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getElementDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getElementDescription")] != -1);
		return call<R>("getElementDescription", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getElementMaxChildren(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getElementMaxChildren")] != -1);
		return call<R>("getElementMaxChildren", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getElementMinChildren(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getElementMinChildren")] != -1);
		return call<R>("getElementMinChildren", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getObjectArrayMaxLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getObjectArrayMaxLength")] != -1);
		return call<R>("getObjectArrayMaxLength", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getObjectArrayMinLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getObjectArrayMinLength")] != -1);
		return call<R>("getObjectArrayMinLength", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto getObjectClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getObjectClass")] != -1);
		return call<R>("getObjectClass", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getObjectDefaultValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getObjectDefaultValue")] != -1);
		return call<R>("getObjectDefaultValue", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object *, typename... Args>
	auto getObjectEnumerations(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getObjectEnumerations")] != -1);
		return call<R>("getObjectEnumerations", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Comparable, typename... Args>
	auto getObjectMaxValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getObjectMaxValue")] != -1);
		return call<R>("getObjectMaxValue", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Comparable, typename... Args>
	auto getObjectMinValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getObjectMinValue")] != -1);
		return call<R>("getObjectMinValue", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getObjectValueType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getObjectValueType")] != -1);
		return call<R>("getObjectValueType", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRootName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRootName")] != -1);
		return call<R>("getRootName", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAttributeRequired(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isAttributeRequired")] != -1);
		return call<R>("isAttributeRequired", forward<Args>(args)...);
	}

};

#endif
