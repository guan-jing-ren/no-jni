#ifndef javax_imageio_metadata_IIOMetadataFormatImpl_HPP
#define javax_imageio_metadata_IIOMetadataFormatImpl_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::imageio::metadata::IIOMetadataFormatImpl : public jObject<::javax::imageio::metadata::IIOMetadataFormatImpl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_imageio_metadata / "IIOMetadataFormatImpl";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("standardMetadataFormatName"), //
	};

	template<typename F = ::java::lang::String>
	static auto standardMetadataFormatName() {
		static_assert(field_signatures[jField<F>("standardMetadataFormatName")] != -1);
		return sat<F>("standardMetadataFormatName");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::jint)>(), //
		jConstructor<::jvoid(::java::lang::String, ::jint, ::jint)>(), //
		jMethod<::jboolean(::java::lang::String, ::javax::imageio::ImageTypeSpecifier)>("canNodeAppear"), //
		jMethod<::jint(::java::lang::String, ::java::lang::String)>("getAttributeDataType"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::lang::String)>("getAttributeDefaultValue"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::lang::String, ::java::util::Locale)>("getAttributeDescription"), //
		jMethod<::java::lang::String *(::java::lang::String, ::java::lang::String)>("getAttributeEnumerations"), //
		jMethod<::jint(::java::lang::String, ::java::lang::String)>("getAttributeListMaxLength"), //
		jMethod<::jint(::java::lang::String, ::java::lang::String)>("getAttributeListMinLength"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::lang::String)>("getAttributeMaxValue"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::lang::String)>("getAttributeMinValue"), //
		jMethod<::java::lang::String *(::java::lang::String)>("getAttributeNames"), //
		jMethod<::jint(::java::lang::String, ::java::lang::String)>("getAttributeValueType"), //
		jMethod<::java::lang::String *(::java::lang::String)>("getChildNames"), //
		jMethod<::jint(::java::lang::String)>("getChildPolicy"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::util::Locale)>("getElementDescription"), //
		jMethod<::jint(::java::lang::String)>("getElementMaxChildren"), //
		jMethod<::jint(::java::lang::String)>("getElementMinChildren"), //
		jMethod<::jint(::java::lang::String)>("getObjectArrayMaxLength"), //
		jMethod<::jint(::java::lang::String)>("getObjectArrayMinLength"), //
		jMethod<::java::lang::Class(::java::lang::String)>("getObjectClass"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getObjectDefaultValue"), //
		jMethod<::java::lang::Object *(::java::lang::String)>("getObjectEnumerations"), //
		jMethod<::java::lang::Comparable(::java::lang::String)>("getObjectMaxValue"), //
		jMethod<::java::lang::Comparable(::java::lang::String)>("getObjectMinValue"), //
		jMethod<::jint(::java::lang::String)>("getObjectValueType"), //
		jMethod<::java::lang::String()>("getRootName"), //
		jMethod<::javax::imageio::metadata::IIOMetadataFormat()>("getStandardFormatInstance"), //
		jMethod<::jboolean(::java::lang::String, ::java::lang::String)>("isAttributeRequired"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto canNodeAppear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canNodeAppear")] != -1);
		return call<R>("canNodeAppear", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAttributeDataType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributeDataType")] != -1);
		return call<R>("getAttributeDataType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAttributeDefaultValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributeDefaultValue")] != -1);
		return call<R>("getAttributeDefaultValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAttributeDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributeDescription")] != -1);
		return call<R>("getAttributeDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getAttributeEnumerations(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributeEnumerations")] != -1);
		return call<R>("getAttributeEnumerations", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAttributeListMaxLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributeListMaxLength")] != -1);
		return call<R>("getAttributeListMaxLength", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAttributeListMinLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributeListMinLength")] != -1);
		return call<R>("getAttributeListMinLength", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAttributeMaxValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributeMaxValue")] != -1);
		return call<R>("getAttributeMaxValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAttributeMinValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributeMinValue")] != -1);
		return call<R>("getAttributeMinValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getAttributeNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributeNames")] != -1);
		return call<R>("getAttributeNames", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAttributeValueType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributeValueType")] != -1);
		return call<R>("getAttributeValueType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getChildNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChildNames")] != -1);
		return call<R>("getChildNames", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getChildPolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChildPolicy")] != -1);
		return call<R>("getChildPolicy", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getElementDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getElementDescription")] != -1);
		return call<R>("getElementDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getElementMaxChildren(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getElementMaxChildren")] != -1);
		return call<R>("getElementMaxChildren", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getElementMinChildren(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getElementMinChildren")] != -1);
		return call<R>("getElementMinChildren", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getObjectArrayMaxLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectArrayMaxLength")] != -1);
		return call<R>("getObjectArrayMaxLength", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getObjectArrayMinLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectArrayMinLength")] != -1);
		return call<R>("getObjectArrayMinLength", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto getObjectClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectClass")] != -1);
		return call<R>("getObjectClass", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getObjectDefaultValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectDefaultValue")] != -1);
		return call<R>("getObjectDefaultValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object *, typename... Args>
	auto getObjectEnumerations(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectEnumerations")] != -1);
		return call<R>("getObjectEnumerations", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Comparable, typename... Args>
	auto getObjectMaxValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectMaxValue")] != -1);
		return call<R>("getObjectMaxValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Comparable, typename... Args>
	auto getObjectMinValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectMinValue")] != -1);
		return call<R>("getObjectMinValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getObjectValueType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectValueType")] != -1);
		return call<R>("getObjectValueType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRootName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRootName")] != -1);
		return call<R>("getRootName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::metadata::IIOMetadataFormat, typename... Args>
	static auto getStandardFormatInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStandardFormatInstance")] != -1);
		return scall<R>("getStandardFormatInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAttributeRequired(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAttributeRequired")] != -1);
		return call<R>("isAttributeRequired", std::forward<Args>(args)...);
	}

};

#endif
