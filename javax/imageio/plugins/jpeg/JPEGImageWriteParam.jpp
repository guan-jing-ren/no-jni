#ifndef javax_imageio_plugins_jpeg_JPEGImageWriteParam_HPP
#define javax_imageio_plugins_jpeg_JPEGImageWriteParam_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::imageio::plugins::jpeg::JPEGImageWriteParam : public jObject<::javax::imageio::plugins::jpeg::JPEGImageWriteParam, ::javax::imageio::ImageWriteParam> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_imageio_plugins_jpeg / "JPEGImageWriteParam";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::util::Locale)>(), //
		jMethod<::jboolean()>("areTablesSet"), //
		jMethod<::javax::imageio::plugins::jpeg::JPEGHuffmanTable *()>("getACHuffmanTables"), //
		jMethod<::java::lang::String *()>("getCompressionQualityDescriptions"), //
		jMethod<::jfloat *()>("getCompressionQualityValues"), //
		jMethod<::javax::imageio::plugins::jpeg::JPEGHuffmanTable *()>("getDCHuffmanTables"), //
		jMethod<::jboolean()>("getOptimizeHuffmanTables"), //
		jMethod<::javax::imageio::plugins::jpeg::JPEGQTable *()>("getQTables"), //
		jMethod<::jboolean()>("isCompressionLossless"), //
		jMethod<::jvoid(::javax::imageio::plugins::jpeg::JPEGQTable *, ::javax::imageio::plugins::jpeg::JPEGHuffmanTable *, ::javax::imageio::plugins::jpeg::JPEGHuffmanTable *)>("setEncodeTables"), //
		jMethod<::jvoid(::jboolean)>("setOptimizeHuffmanTables"), //
		jMethod<::jvoid()>("unsetCompression"), //
		jMethod<::jvoid()>("unsetEncodeTables"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto areTablesSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("areTablesSet")] != -1);
		return call<R>("areTablesSet", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::plugins::jpeg::JPEGHuffmanTable *, typename... Args>
	auto getACHuffmanTables(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getACHuffmanTables")] != -1);
		return call<R>("getACHuffmanTables", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getCompressionQualityDescriptions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCompressionQualityDescriptions")] != -1);
		return call<R>("getCompressionQualityDescriptions", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat *, typename... Args>
	auto getCompressionQualityValues(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCompressionQualityValues")] != -1);
		return call<R>("getCompressionQualityValues", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::plugins::jpeg::JPEGHuffmanTable *, typename... Args>
	auto getDCHuffmanTables(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDCHuffmanTables")] != -1);
		return call<R>("getDCHuffmanTables", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getOptimizeHuffmanTables(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOptimizeHuffmanTables")] != -1);
		return call<R>("getOptimizeHuffmanTables", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::plugins::jpeg::JPEGQTable *, typename... Args>
	auto getQTables(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getQTables")] != -1);
		return call<R>("getQTables", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCompressionLossless(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCompressionLossless")] != -1);
		return call<R>("isCompressionLossless", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEncodeTables(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEncodeTables")] != -1);
		return call<R>("setEncodeTables", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOptimizeHuffmanTables(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOptimizeHuffmanTables")] != -1);
		return call<R>("setOptimizeHuffmanTables", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unsetCompression(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unsetCompression")] != -1);
		return call<R>("unsetCompression", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unsetEncodeTables(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unsetEncodeTables")] != -1);
		return call<R>("unsetEncodeTables", std::forward<Args>(args)...);
	}

};

#endif
