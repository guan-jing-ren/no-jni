#ifndef javax_imageio_plugins_jpeg_JPEGImageReadParam_HPP
#define javax_imageio_plugins_jpeg_JPEGImageReadParam_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::imageio::plugins::jpeg::JPEGImageReadParam : public jObject<::javax::imageio::plugins::jpeg::JPEGImageReadParam, ::javax::imageio::ImageReadParam> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_imageio_plugins_jpeg / "JPEGImageReadParam";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jboolean()>("areTablesSet"), //
		jMethod<::javax::imageio::plugins::jpeg::JPEGHuffmanTable *()>("getACHuffmanTables"), //
		jMethod<::javax::imageio::plugins::jpeg::JPEGHuffmanTable *()>("getDCHuffmanTables"), //
		jMethod<::javax::imageio::plugins::jpeg::JPEGQTable *()>("getQTables"), //
		jMethod<::jvoid(::javax::imageio::plugins::jpeg::JPEGQTable *, ::javax::imageio::plugins::jpeg::JPEGHuffmanTable *, ::javax::imageio::plugins::jpeg::JPEGHuffmanTable *)>("setDecodeTables"), //
		jMethod<::jvoid()>("unsetDecodeTables"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto areTablesSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("areTablesSet")] != -1);
		return call<R>("areTablesSet", forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::plugins::jpeg::JPEGHuffmanTable *, typename... Args>
	auto getACHuffmanTables(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getACHuffmanTables")] != -1);
		return call<R>("getACHuffmanTables", forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::plugins::jpeg::JPEGHuffmanTable *, typename... Args>
	auto getDCHuffmanTables(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDCHuffmanTables")] != -1);
		return call<R>("getDCHuffmanTables", forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::plugins::jpeg::JPEGQTable *, typename... Args>
	auto getQTables(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getQTables")] != -1);
		return call<R>("getQTables", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDecodeTables(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDecodeTables")] != -1);
		return call<R>("setDecodeTables", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unsetDecodeTables(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("unsetDecodeTables")] != -1);
		return call<R>("unsetDecodeTables", forward<Args>(args)...);
	}

};

#endif
