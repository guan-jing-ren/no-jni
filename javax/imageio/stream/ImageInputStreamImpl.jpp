#ifndef javax_imageio_stream_ImageInputStreamImpl_HPP
#define javax_imageio_stream_ImageInputStreamImpl_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::imageio::stream::ImageInputStreamImpl : public jObject<::javax::imageio::stream::ImageInputStreamImpl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_imageio_stream / "ImageInputStreamImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid()>("close"), //
		jMethod<::jvoid()>("flush"), //
		jMethod<::jvoid(::jlong)>("flushBefore"), //
		jMethod<::jint()>("getBitOffset"), //
		jMethod<::java::nio::ByteOrder()>("getByteOrder"), //
		jMethod<::jlong()>("getFlushedPosition"), //
		jMethod<::jlong()>("getStreamPosition"), //
		jMethod<::jboolean()>("isCached"), //
		jMethod<::jboolean()>("isCachedFile"), //
		jMethod<::jboolean()>("isCachedMemory"), //
		jMethod<::jlong()>("length"), //
		jMethod<::jvoid()>("mark"), //
		jMethod<::jint()>("read"), //
		jMethod<::jint(::jbyte *)>("read"), //
		jMethod<::jint(::jbyte *, ::jint, ::jint)>("read"), //
		jMethod<::jint()>("readBit"), //
		jMethod<::jlong(::jint)>("readBits"), //
		jMethod<::jboolean()>("readBoolean"), //
		jMethod<::jbyte()>("readByte"), //
		jMethod<::jvoid(::javax::imageio::stream::IIOByteBuffer, ::jint)>("readBytes"), //
		jMethod<::jchar()>("readChar"), //
		jMethod<::jdouble()>("readDouble"), //
		jMethod<::jfloat()>("readFloat"), //
		jMethod<::jvoid(::jbyte *)>("readFully"), //
		jMethod<::jvoid(::jbyte *, ::jint, ::jint)>("readFully"), //
		jMethod<::jvoid(::jchar *, ::jint, ::jint)>("readFully"), //
		jMethod<::jvoid(::jdouble *, ::jint, ::jint)>("readFully"), //
		jMethod<::jvoid(::jfloat *, ::jint, ::jint)>("readFully"), //
		jMethod<::jvoid(::jint *, ::jint, ::jint)>("readFully"), //
		jMethod<::jvoid(::jlong *, ::jint, ::jint)>("readFully"), //
		jMethod<::jvoid(::jshort *, ::jint, ::jint)>("readFully"), //
		jMethod<::jint()>("readInt"), //
		jMethod<::java::lang::String()>("readLine"), //
		jMethod<::jlong()>("readLong"), //
		jMethod<::jshort()>("readShort"), //
		jMethod<::java::lang::String()>("readUTF"), //
		jMethod<::jint()>("readUnsignedByte"), //
		jMethod<::jlong()>("readUnsignedInt"), //
		jMethod<::jint()>("readUnsignedShort"), //
		jMethod<::jvoid()>("reset"), //
		jMethod<::jvoid(::jlong)>("seek"), //
		jMethod<::jvoid(::jint)>("setBitOffset"), //
		jMethod<::jvoid(::java::nio::ByteOrder)>("setByteOrder"), //
		jMethod<::jint(::jint)>("skipBytes"), //
		jMethod<::jlong(::jlong)>("skipBytes"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto flush(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("flush")] != -1);
		return call<R>("flush", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto flushBefore(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("flushBefore")] != -1);
		return call<R>("flushBefore", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBitOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBitOffset")] != -1);
		return call<R>("getBitOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::ByteOrder, typename... Args>
	auto getByteOrder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getByteOrder")] != -1);
		return call<R>("getByteOrder", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getFlushedPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFlushedPosition")] != -1);
		return call<R>("getFlushedPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getStreamPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStreamPosition")] != -1);
		return call<R>("getStreamPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCached(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCached")] != -1);
		return call<R>("isCached", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCachedFile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCachedFile")] != -1);
		return call<R>("isCachedFile", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCachedMemory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCachedMemory")] != -1);
		return call<R>("isCachedMemory", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto length(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("length")] != -1);
		return call<R>("length", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mark(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mark")] != -1);
		return call<R>("mark", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("read")] != -1);
		return call<R>("read", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto readBit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readBit")] != -1);
		return call<R>("readBit", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto readBits(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readBits")] != -1);
		return call<R>("readBits", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto readBoolean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readBoolean")] != -1);
		return call<R>("readBoolean", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto readByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readByte")] != -1);
		return call<R>("readByte", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto readBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readBytes")] != -1);
		return call<R>("readBytes", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto readChar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readChar")] != -1);
		return call<R>("readChar", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto readDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readDouble")] != -1);
		return call<R>("readDouble", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto readFloat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readFloat")] != -1);
		return call<R>("readFloat", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto readFully(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readFully")] != -1);
		return call<R>("readFully", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto readInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readInt")] != -1);
		return call<R>("readInt", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto readLine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readLine")] != -1);
		return call<R>("readLine", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto readLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readLong")] != -1);
		return call<R>("readLong", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto readShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readShort")] != -1);
		return call<R>("readShort", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto readUTF(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readUTF")] != -1);
		return call<R>("readUTF", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto readUnsignedByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readUnsignedByte")] != -1);
		return call<R>("readUnsignedByte", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto readUnsignedInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readUnsignedInt")] != -1);
		return call<R>("readUnsignedInt", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto readUnsignedShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readUnsignedShort")] != -1);
		return call<R>("readUnsignedShort", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto seek(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("seek")] != -1);
		return call<R>("seek", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBitOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBitOffset")] != -1);
		return call<R>("setBitOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setByteOrder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setByteOrder")] != -1);
		return call<R>("setByteOrder", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto skipBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("skipBytes")] != -1);
		return call<R>("skipBytes", std::forward<Args>(args)...);
	}

};

#endif
