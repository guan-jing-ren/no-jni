#ifndef javax_imageio_IIOImage_HPP
#define javax_imageio_IIOImage_HPP

#include "../../jfwd_decl.hpp"

class ::javax::imageio::IIOImage : public jObject<::javax::imageio::IIOImage, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_imageio / "IIOImage";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::image::Raster, ::java::util::List, ::javax::imageio::metadata::IIOMetadata)>(), //
		jConstructor<::jvoid(::java::awt::image::RenderedImage, ::java::util::List, ::javax::imageio::metadata::IIOMetadata)>(), //
		jMethod<::javax::imageio::metadata::IIOMetadata()>("getMetadata"), //
		jMethod<::jint()>("getNumThumbnails"), //
		jMethod<::java::awt::image::Raster()>("getRaster"), //
		jMethod<::java::awt::image::RenderedImage()>("getRenderedImage"), //
		jMethod<::java::awt::image::BufferedImage(::jint)>("getThumbnail"), //
		jMethod<::java::util::List()>("getThumbnails"), //
		jMethod<::jboolean()>("hasRaster"), //
		jMethod<::jvoid(::javax::imageio::metadata::IIOMetadata)>("setMetadata"), //
		jMethod<::jvoid(::java::awt::image::Raster)>("setRaster"), //
		jMethod<::jvoid(::java::awt::image::RenderedImage)>("setRenderedImage"), //
		jMethod<::jvoid(::java::util::List)>("setThumbnails"), //
	};

	template<typename R = ::javax::imageio::metadata::IIOMetadata, typename... Args>
	auto getMetadata(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMetadata")] != -1);
		return call<R>("getMetadata", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumThumbnails(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNumThumbnails")] != -1);
		return call<R>("getNumThumbnails", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::Raster, typename... Args>
	auto getRaster(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRaster")] != -1);
		return call<R>("getRaster", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::RenderedImage, typename... Args>
	auto getRenderedImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRenderedImage")] != -1);
		return call<R>("getRenderedImage", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::BufferedImage, typename... Args>
	auto getThumbnail(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getThumbnail")] != -1);
		return call<R>("getThumbnail", forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getThumbnails(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getThumbnails")] != -1);
		return call<R>("getThumbnails", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasRaster(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hasRaster")] != -1);
		return call<R>("hasRaster", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMetadata(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMetadata")] != -1);
		return call<R>("setMetadata", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRaster(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setRaster")] != -1);
		return call<R>("setRaster", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRenderedImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setRenderedImage")] != -1);
		return call<R>("setRenderedImage", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setThumbnails(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setThumbnails")] != -1);
		return call<R>("setThumbnails", forward<Args>(args)...);
	}

};

#endif
