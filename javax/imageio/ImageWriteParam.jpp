#ifndef javax_imageio_ImageWriteParam_HPP
#define javax_imageio_ImageWriteParam_HPP

#include "../../jfwd_decl.hpp"

class ::javax::imageio::ImageWriteParam : public jObject<::javax::imageio::ImageWriteParam, ::javax::imageio::IIOParam> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_imageio / "ImageWriteParam";

	constexpr static Enume field_signatures{
		jField<::jint>("MODE_COPY_FROM_METADATA"), //
		jField<::jint>("MODE_DEFAULT"), //
		jField<::jint>("MODE_DISABLED"), //
		jField<::jint>("MODE_EXPLICIT"), //
	};

	template<typename F = ::jint>
	static auto MODE_COPY_FROM_METADATA() {
		static_assert(field_signatures[jField<F>("MODE_COPY_FROM_METADATA")] != -1);
		return sat<F>("MODE_COPY_FROM_METADATA");
	}

	template<typename F = ::jint>
	static auto MODE_DEFAULT() {
		static_assert(field_signatures[jField<F>("MODE_DEFAULT")] != -1);
		return sat<F>("MODE_DEFAULT");
	}

	template<typename F = ::jint>
	static auto MODE_DISABLED() {
		static_assert(field_signatures[jField<F>("MODE_DISABLED")] != -1);
		return sat<F>("MODE_DISABLED");
	}

	template<typename F = ::jint>
	static auto MODE_EXPLICIT() {
		static_assert(field_signatures[jField<F>("MODE_EXPLICIT")] != -1);
		return sat<F>("MODE_EXPLICIT");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::util::Locale)>(), //
		jMethod<::jboolean()>("canOffsetTiles"), //
		jMethod<::jboolean()>("canWriteCompressed"), //
		jMethod<::jboolean()>("canWriteProgressive"), //
		jMethod<::jboolean()>("canWriteTiles"), //
		jMethod<::jfloat(::jfloat)>("getBitRate"), //
		jMethod<::jint()>("getCompressionMode"), //
		jMethod<::jfloat()>("getCompressionQuality"), //
		jMethod<::java::lang::String *()>("getCompressionQualityDescriptions"), //
		jMethod<::jfloat *()>("getCompressionQualityValues"), //
		jMethod<::java::lang::String()>("getCompressionType"), //
		jMethod<::java::lang::String *()>("getCompressionTypes"), //
		jMethod<::java::util::Locale()>("getLocale"), //
		jMethod<::java::lang::String()>("getLocalizedCompressionTypeName"), //
		jMethod<::java::awt::Dimension *()>("getPreferredTileSizes"), //
		jMethod<::jint()>("getProgressiveMode"), //
		jMethod<::jint()>("getTileGridXOffset"), //
		jMethod<::jint()>("getTileGridYOffset"), //
		jMethod<::jint()>("getTileHeight"), //
		jMethod<::jint()>("getTileWidth"), //
		jMethod<::jint()>("getTilingMode"), //
		jMethod<::jboolean()>("isCompressionLossless"), //
		jMethod<::jvoid(::jint)>("setCompressionMode"), //
		jMethod<::jvoid(::jfloat)>("setCompressionQuality"), //
		jMethod<::jvoid(::java::lang::String)>("setCompressionType"), //
		jMethod<::jvoid(::jint)>("setProgressiveMode"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("setTiling"), //
		jMethod<::jvoid(::jint)>("setTilingMode"), //
		jMethod<::jvoid()>("unsetCompression"), //
		jMethod<::jvoid()>("unsetTiling"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto canOffsetTiles(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canOffsetTiles")] != -1);
		return call<R>("canOffsetTiles", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto canWriteCompressed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canWriteCompressed")] != -1);
		return call<R>("canWriteCompressed", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto canWriteProgressive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canWriteProgressive")] != -1);
		return call<R>("canWriteProgressive", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto canWriteTiles(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canWriteTiles")] != -1);
		return call<R>("canWriteTiles", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getBitRate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBitRate")] != -1);
		return call<R>("getBitRate", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCompressionMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCompressionMode")] != -1);
		return call<R>("getCompressionMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getCompressionQuality(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCompressionQuality")] != -1);
		return call<R>("getCompressionQuality", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getCompressionQualityDescriptions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCompressionQualityDescriptions")] != -1);
		return call<R>("getCompressionQualityDescriptions", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat *, typename... Args>
	auto getCompressionQualityValues(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCompressionQualityValues")] != -1);
		return call<R>("getCompressionQualityValues", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCompressionType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCompressionType")] != -1);
		return call<R>("getCompressionType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getCompressionTypes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCompressionTypes")] != -1);
		return call<R>("getCompressionTypes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale, typename... Args>
	auto getLocale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocale")] != -1);
		return call<R>("getLocale", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLocalizedCompressionTypeName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalizedCompressionTypeName")] != -1);
		return call<R>("getLocalizedCompressionTypeName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension *, typename... Args>
	auto getPreferredTileSizes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreferredTileSizes")] != -1);
		return call<R>("getPreferredTileSizes", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getProgressiveMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProgressiveMode")] != -1);
		return call<R>("getProgressiveMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTileGridXOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTileGridXOffset")] != -1);
		return call<R>("getTileGridXOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTileGridYOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTileGridYOffset")] != -1);
		return call<R>("getTileGridYOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTileHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTileHeight")] != -1);
		return call<R>("getTileHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTileWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTileWidth")] != -1);
		return call<R>("getTileWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTilingMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTilingMode")] != -1);
		return call<R>("getTilingMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCompressionLossless(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCompressionLossless")] != -1);
		return call<R>("isCompressionLossless", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCompressionMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCompressionMode")] != -1);
		return call<R>("setCompressionMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCompressionQuality(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCompressionQuality")] != -1);
		return call<R>("setCompressionQuality", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCompressionType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCompressionType")] != -1);
		return call<R>("setCompressionType", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setProgressiveMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setProgressiveMode")] != -1);
		return call<R>("setProgressiveMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTiling(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTiling")] != -1);
		return call<R>("setTiling", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTilingMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTilingMode")] != -1);
		return call<R>("setTilingMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unsetCompression(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unsetCompression")] != -1);
		return call<R>("unsetCompression", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unsetTiling(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unsetTiling")] != -1);
		return call<R>("unsetTiling", std::forward<Args>(args)...);
	}

};

#endif
