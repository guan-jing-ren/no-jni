#ifndef javax_imageio_ImageTranscoder_HPP
#define javax_imageio_ImageTranscoder_HPP

#include "../../jfwd_decl.hpp"

class ::javax::imageio::ImageTranscoder : public jObject<::javax::imageio::ImageTranscoder, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_imageio / "ImageTranscoder";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::javax::imageio::metadata::IIOMetadata(::javax::imageio::metadata::IIOMetadata, ::javax::imageio::ImageTypeSpecifier, ::javax::imageio::ImageWriteParam)>("convertImageMetadata"), //
		jMethod<::javax::imageio::metadata::IIOMetadata(::javax::imageio::metadata::IIOMetadata, ::javax::imageio::ImageWriteParam)>("convertStreamMetadata"), //
	};

	template<typename R = ::javax::imageio::metadata::IIOMetadata, typename... Args>
	auto convertImageMetadata(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("convertImageMetadata")] != -1);
		return call<R>("convertImageMetadata", forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::metadata::IIOMetadata, typename... Args>
	auto convertStreamMetadata(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("convertStreamMetadata")] != -1);
		return call<R>("convertStreamMetadata", forward<Args>(args)...);
	}

};

#endif
