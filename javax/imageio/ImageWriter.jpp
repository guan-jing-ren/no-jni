#ifndef javax_imageio_ImageWriter_HPP
#define javax_imageio_ImageWriter_HPP

#include "../../jfwd_decl.hpp"

class ::javax::imageio::ImageWriter : public jObject<::javax::imageio::ImageWriter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_imageio / "ImageWriter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("abort"), //
		jMethod<::jvoid(::javax::imageio::event::IIOWriteProgressListener)>("addIIOWriteProgressListener"), //
		jMethod<::jvoid(::javax::imageio::event::IIOWriteWarningListener)>("addIIOWriteWarningListener"), //
		jMethod<::jboolean(::jint)>("canInsertEmpty"), //
		jMethod<::jboolean(::jint)>("canInsertImage"), //
		jMethod<::jboolean(::jint)>("canRemoveImage"), //
		jMethod<::jboolean(::jint)>("canReplaceImageMetadata"), //
		jMethod<::jboolean(::jint)>("canReplacePixels"), //
		jMethod<::jboolean()>("canReplaceStreamMetadata"), //
		jMethod<::jboolean()>("canWriteEmpty"), //
		jMethod<::jboolean()>("canWriteRasters"), //
		jMethod<::jboolean()>("canWriteSequence"), //
		jMethod<::javax::imageio::metadata::IIOMetadata(::javax::imageio::metadata::IIOMetadata, ::javax::imageio::ImageTypeSpecifier, ::javax::imageio::ImageWriteParam)>("convertImageMetadata"), //
		jMethod<::javax::imageio::metadata::IIOMetadata(::javax::imageio::metadata::IIOMetadata, ::javax::imageio::ImageWriteParam)>("convertStreamMetadata"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jvoid()>("endInsertEmpty"), //
		jMethod<::jvoid()>("endReplacePixels"), //
		jMethod<::jvoid()>("endWriteEmpty"), //
		jMethod<::jvoid()>("endWriteSequence"), //
		jMethod<::java::util::Locale *()>("getAvailableLocales"), //
		jMethod<::javax::imageio::metadata::IIOMetadata(::javax::imageio::ImageTypeSpecifier, ::javax::imageio::ImageWriteParam)>("getDefaultImageMetadata"), //
		jMethod<::javax::imageio::metadata::IIOMetadata(::javax::imageio::ImageWriteParam)>("getDefaultStreamMetadata"), //
		jMethod<::javax::imageio::ImageWriteParam()>("getDefaultWriteParam"), //
		jMethod<::java::util::Locale()>("getLocale"), //
		jMethod<::jint(::javax::imageio::ImageTypeSpecifier, ::javax::imageio::ImageWriteParam, ::javax::imageio::metadata::IIOMetadata, ::javax::imageio::metadata::IIOMetadata)>("getNumThumbnailsSupported"), //
		jMethod<::javax::imageio::spi::ImageWriterSpi()>("getOriginatingProvider"), //
		jMethod<::java::lang::Object()>("getOutput"), //
		jMethod<::java::awt::Dimension *(::javax::imageio::ImageTypeSpecifier, ::javax::imageio::ImageWriteParam, ::javax::imageio::metadata::IIOMetadata, ::javax::imageio::metadata::IIOMetadata)>("getPreferredThumbnailSizes"), //
		jMethod<::jvoid(::jint, ::javax::imageio::ImageTypeSpecifier, ::jint, ::jint, ::javax::imageio::metadata::IIOMetadata, ::java::util::List, ::javax::imageio::ImageWriteParam)>("prepareInsertEmpty"), //
		jMethod<::jvoid(::jint, ::java::awt::Rectangle)>("prepareReplacePixels"), //
		jMethod<::jvoid(::javax::imageio::metadata::IIOMetadata, ::javax::imageio::ImageTypeSpecifier, ::jint, ::jint, ::javax::imageio::metadata::IIOMetadata, ::java::util::List, ::javax::imageio::ImageWriteParam)>("prepareWriteEmpty"), //
		jMethod<::jvoid(::javax::imageio::metadata::IIOMetadata)>("prepareWriteSequence"), //
		jMethod<::jvoid()>("removeAllIIOWriteProgressListeners"), //
		jMethod<::jvoid()>("removeAllIIOWriteWarningListeners"), //
		jMethod<::jvoid(::javax::imageio::event::IIOWriteProgressListener)>("removeIIOWriteProgressListener"), //
		jMethod<::jvoid(::javax::imageio::event::IIOWriteWarningListener)>("removeIIOWriteWarningListener"), //
		jMethod<::jvoid(::jint)>("removeImage"), //
		jMethod<::jvoid(::jint, ::javax::imageio::metadata::IIOMetadata)>("replaceImageMetadata"), //
		jMethod<::jvoid(::java::awt::image::Raster, ::javax::imageio::ImageWriteParam)>("replacePixels"), //
		jMethod<::jvoid(::java::awt::image::RenderedImage, ::javax::imageio::ImageWriteParam)>("replacePixels"), //
		jMethod<::jvoid(::javax::imageio::metadata::IIOMetadata)>("replaceStreamMetadata"), //
		jMethod<::jvoid()>("reset"), //
		jMethod<::jvoid(::java::util::Locale)>("setLocale"), //
		jMethod<::jvoid(::java::lang::Object)>("setOutput"), //
		jMethod<::jvoid(::java::awt::image::RenderedImage)>("write"), //
		jMethod<::jvoid(::javax::imageio::IIOImage)>("write"), //
		jMethod<::jvoid(::javax::imageio::metadata::IIOMetadata, ::javax::imageio::IIOImage, ::javax::imageio::ImageWriteParam)>("write"), //
		jMethod<::jvoid(::jint, ::javax::imageio::IIOImage, ::javax::imageio::ImageWriteParam)>("writeInsert"), //
		jMethod<::jvoid(::javax::imageio::IIOImage, ::javax::imageio::ImageWriteParam)>("writeToSequence"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto abort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("abort")] != -1);
		return call<R>("abort", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addIIOWriteProgressListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addIIOWriteProgressListener")] != -1);
		return call<R>("addIIOWriteProgressListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addIIOWriteWarningListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addIIOWriteWarningListener")] != -1);
		return call<R>("addIIOWriteWarningListener", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto canInsertEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("canInsertEmpty")] != -1);
		return call<R>("canInsertEmpty", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto canInsertImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("canInsertImage")] != -1);
		return call<R>("canInsertImage", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto canRemoveImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("canRemoveImage")] != -1);
		return call<R>("canRemoveImage", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto canReplaceImageMetadata(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("canReplaceImageMetadata")] != -1);
		return call<R>("canReplaceImageMetadata", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto canReplacePixels(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("canReplacePixels")] != -1);
		return call<R>("canReplacePixels", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto canReplaceStreamMetadata(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("canReplaceStreamMetadata")] != -1);
		return call<R>("canReplaceStreamMetadata", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto canWriteEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("canWriteEmpty")] != -1);
		return call<R>("canWriteEmpty", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto canWriteRasters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("canWriteRasters")] != -1);
		return call<R>("canWriteRasters", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto canWriteSequence(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("canWriteSequence")] != -1);
		return call<R>("canWriteSequence", forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::metadata::IIOMetadata, typename... Args>
	auto convertImageMetadata(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("convertImageMetadata")] != -1);
		return call<R>("convertImageMetadata", forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::metadata::IIOMetadata, typename... Args>
	auto convertStreamMetadata(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("convertStreamMetadata")] != -1);
		return call<R>("convertStreamMetadata", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endInsertEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("endInsertEmpty")] != -1);
		return call<R>("endInsertEmpty", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endReplacePixels(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("endReplacePixels")] != -1);
		return call<R>("endReplacePixels", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endWriteEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("endWriteEmpty")] != -1);
		return call<R>("endWriteEmpty", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endWriteSequence(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("endWriteSequence")] != -1);
		return call<R>("endWriteSequence", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale *, typename... Args>
	auto getAvailableLocales(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAvailableLocales")] != -1);
		return call<R>("getAvailableLocales", forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::metadata::IIOMetadata, typename... Args>
	auto getDefaultImageMetadata(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDefaultImageMetadata")] != -1);
		return call<R>("getDefaultImageMetadata", forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::metadata::IIOMetadata, typename... Args>
	auto getDefaultStreamMetadata(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDefaultStreamMetadata")] != -1);
		return call<R>("getDefaultStreamMetadata", forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::ImageWriteParam, typename... Args>
	auto getDefaultWriteParam(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDefaultWriteParam")] != -1);
		return call<R>("getDefaultWriteParam", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale, typename... Args>
	auto getLocale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLocale")] != -1);
		return call<R>("getLocale", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumThumbnailsSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNumThumbnailsSupported")] != -1);
		return call<R>("getNumThumbnailsSupported", forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::spi::ImageWriterSpi, typename... Args>
	auto getOriginatingProvider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getOriginatingProvider")] != -1);
		return call<R>("getOriginatingProvider", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getOutput(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getOutput")] != -1);
		return call<R>("getOutput", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension *, typename... Args>
	auto getPreferredThumbnailSizes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreferredThumbnailSizes")] != -1);
		return call<R>("getPreferredThumbnailSizes", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto prepareInsertEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("prepareInsertEmpty")] != -1);
		return call<R>("prepareInsertEmpty", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto prepareReplacePixels(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("prepareReplacePixels")] != -1);
		return call<R>("prepareReplacePixels", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto prepareWriteEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("prepareWriteEmpty")] != -1);
		return call<R>("prepareWriteEmpty", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto prepareWriteSequence(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("prepareWriteSequence")] != -1);
		return call<R>("prepareWriteSequence", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAllIIOWriteProgressListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeAllIIOWriteProgressListeners")] != -1);
		return call<R>("removeAllIIOWriteProgressListeners", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAllIIOWriteWarningListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeAllIIOWriteWarningListeners")] != -1);
		return call<R>("removeAllIIOWriteWarningListeners", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeIIOWriteProgressListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeIIOWriteProgressListener")] != -1);
		return call<R>("removeIIOWriteProgressListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeIIOWriteWarningListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeIIOWriteWarningListener")] != -1);
		return call<R>("removeIIOWriteWarningListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeImage")] != -1);
		return call<R>("removeImage", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto replaceImageMetadata(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("replaceImageMetadata")] != -1);
		return call<R>("replaceImageMetadata", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto replacePixels(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("replacePixels")] != -1);
		return call<R>("replacePixels", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto replaceStreamMetadata(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("replaceStreamMetadata")] != -1);
		return call<R>("replaceStreamMetadata", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLocale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLocale")] != -1);
		return call<R>("setLocale", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOutput(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setOutput")] != -1);
		return call<R>("setOutput", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write")] != -1);
		return call<R>("write", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeInsert(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeInsert")] != -1);
		return call<R>("writeInsert", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeToSequence(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeToSequence")] != -1);
		return call<R>("writeToSequence", forward<Args>(args)...);
	}

};

#endif
