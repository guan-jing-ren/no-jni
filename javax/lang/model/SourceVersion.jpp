#ifndef javax_lang_model_SourceVersion_HPP
#define javax_lang_model_SourceVersion_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::lang::model::SourceVersion : public jObject<::javax::lang::model::SourceVersion, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_lang_model / "SourceVersion";

	constexpr static Enume field_signatures{
		jField<::javax::lang::model::SourceVersion>("RELEASE_0"), //
		jField<::javax::lang::model::SourceVersion>("RELEASE_1"), //
		jField<::javax::lang::model::SourceVersion>("RELEASE_2"), //
		jField<::javax::lang::model::SourceVersion>("RELEASE_3"), //
		jField<::javax::lang::model::SourceVersion>("RELEASE_4"), //
		jField<::javax::lang::model::SourceVersion>("RELEASE_5"), //
		jField<::javax::lang::model::SourceVersion>("RELEASE_6"), //
		jField<::javax::lang::model::SourceVersion>("RELEASE_7"), //
		jField<::javax::lang::model::SourceVersion>("RELEASE_8"), //
	};

	template<typename F = ::javax::lang::model::SourceVersion>
	static auto RELEASE_0() {
		static_assert(field_signatures[jField<F>("RELEASE_0")] != -1);
		return sat<F>("RELEASE_0");
	}

	template<typename F = ::javax::lang::model::SourceVersion>
	static auto RELEASE_1() {
		static_assert(field_signatures[jField<F>("RELEASE_1")] != -1);
		return sat<F>("RELEASE_1");
	}

	template<typename F = ::javax::lang::model::SourceVersion>
	static auto RELEASE_2() {
		static_assert(field_signatures[jField<F>("RELEASE_2")] != -1);
		return sat<F>("RELEASE_2");
	}

	template<typename F = ::javax::lang::model::SourceVersion>
	static auto RELEASE_3() {
		static_assert(field_signatures[jField<F>("RELEASE_3")] != -1);
		return sat<F>("RELEASE_3");
	}

	template<typename F = ::javax::lang::model::SourceVersion>
	static auto RELEASE_4() {
		static_assert(field_signatures[jField<F>("RELEASE_4")] != -1);
		return sat<F>("RELEASE_4");
	}

	template<typename F = ::javax::lang::model::SourceVersion>
	static auto RELEASE_5() {
		static_assert(field_signatures[jField<F>("RELEASE_5")] != -1);
		return sat<F>("RELEASE_5");
	}

	template<typename F = ::javax::lang::model::SourceVersion>
	static auto RELEASE_6() {
		static_assert(field_signatures[jField<F>("RELEASE_6")] != -1);
		return sat<F>("RELEASE_6");
	}

	template<typename F = ::javax::lang::model::SourceVersion>
	static auto RELEASE_7() {
		static_assert(field_signatures[jField<F>("RELEASE_7")] != -1);
		return sat<F>("RELEASE_7");
	}

	template<typename F = ::javax::lang::model::SourceVersion>
	static auto RELEASE_8() {
		static_assert(field_signatures[jField<F>("RELEASE_8")] != -1);
		return sat<F>("RELEASE_8");
	}

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::CharSequence)>("isIdentifier"), //
		jMethod<::jboolean(::java::lang::CharSequence)>("isKeyword"), //
		jMethod<::jboolean(::java::lang::CharSequence)>("isName"), //
		jMethod<::javax::lang::model::SourceVersion()>("latest"), //
		jMethod<::javax::lang::model::SourceVersion()>("latestSupported"), //
		jMethod<::javax::lang::model::SourceVersion(::java::lang::String)>("valueOf"), //
		jMethod<::javax::lang::model::SourceVersion *()>("values"), //
	};

	template<typename R = ::jboolean, typename... Args>
	static auto isIdentifier(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isIdentifier")] != -1);
		return scall<R>("isIdentifier", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isKeyword(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isKeyword")] != -1);
		return scall<R>("isKeyword", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isName(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isName")] != -1);
		return scall<R>("isName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::SourceVersion, typename... Args>
	static auto latest(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("latest")] != -1);
		return scall<R>("latest", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::SourceVersion, typename... Args>
	static auto latestSupported(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("latestSupported")] != -1);
		return scall<R>("latestSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::SourceVersion, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::SourceVersion *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
