#ifndef javax_lang_model_element_ExecutableElement_HPP
#define javax_lang_model_element_ExecutableElement_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::lang::model::element::ExecutableElement : public jObject<::javax::lang::model::element::ExecutableElement, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_lang_model_element / "ExecutableElement";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Object(::javax::lang::model::element::ElementVisitor, ::java::lang::Object)>("accept"), //
		jMethod<::javax::lang::model::type::TypeMirror()>("asType"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::annotation::Annotation(::java::lang::Class)>("getAnnotation"), //
		jMethod<::java::util::List()>("getAnnotationMirrors"), //
		jMethod<::javax::lang::model::element::AnnotationValue()>("getDefaultValue"), //
		jMethod<::java::util::List()>("getEnclosedElements"), //
		jMethod<::javax::lang::model::element::Element()>("getEnclosingElement"), //
		jMethod<::javax::lang::model::element::ElementKind()>("getKind"), //
		jMethod<::java::util::Set()>("getModifiers"), //
		jMethod<::java::util::List()>("getParameters"), //
		jMethod<::javax::lang::model::type::TypeMirror()>("getReceiverType"), //
		jMethod<::javax::lang::model::type::TypeMirror()>("getReturnType"), //
		jMethod<::javax::lang::model::element::Name()>("getSimpleName"), //
		jMethod<::java::util::List()>("getThrownTypes"), //
		jMethod<::java::util::List()>("getTypeParameters"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isDefault"), //
		jMethod<::jboolean()>("isVarArgs"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto accept(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("accept")] != -1);
		return call<R>("accept", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::type::TypeMirror, typename... Args>
	auto asType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("asType")] != -1);
		return call<R>("asType", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::annotation::Annotation, typename... Args>
	auto getAnnotation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAnnotation")] != -1);
		return call<R>("getAnnotation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getAnnotationMirrors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAnnotationMirrors")] != -1);
		return call<R>("getAnnotationMirrors", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::element::AnnotationValue, typename... Args>
	auto getDefaultValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultValue")] != -1);
		return call<R>("getDefaultValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getEnclosedElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEnclosedElements")] != -1);
		return call<R>("getEnclosedElements", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::element::Element, typename... Args>
	auto getEnclosingElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEnclosingElement")] != -1);
		return call<R>("getEnclosingElement", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::element::ElementKind, typename... Args>
	auto getKind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKind")] != -1);
		return call<R>("getKind", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto getModifiers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getModifiers")] != -1);
		return call<R>("getModifiers", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getParameters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParameters")] != -1);
		return call<R>("getParameters", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::type::TypeMirror, typename... Args>
	auto getReceiverType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReceiverType")] != -1);
		return call<R>("getReceiverType", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::type::TypeMirror, typename... Args>
	auto getReturnType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReturnType")] != -1);
		return call<R>("getReturnType", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::element::Name, typename... Args>
	auto getSimpleName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSimpleName")] != -1);
		return call<R>("getSimpleName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getThrownTypes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getThrownTypes")] != -1);
		return call<R>("getThrownTypes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getTypeParameters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTypeParameters")] != -1);
		return call<R>("getTypeParameters", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDefault(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDefault")] != -1);
		return call<R>("isDefault", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isVarArgs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isVarArgs")] != -1);
		return call<R>("isVarArgs", std::forward<Args>(args)...);
	}

};

#endif
