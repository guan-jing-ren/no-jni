#ifndef javax_lang_model_element_ExecutableElement_HPP
#define javax_lang_model_element_ExecutableElement_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::lang::model::element::ExecutableElement : public jObject<::javax::lang::model::element::ExecutableElement, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_lang_model_element / "ExecutableElement";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::javax::lang::model::element::AnnotationValue()>("getDefaultValue"), //
		jMethod<::java::util::List()>("getParameters"), //
		jMethod<::javax::lang::model::type::TypeMirror()>("getReceiverType"), //
		jMethod<::javax::lang::model::type::TypeMirror()>("getReturnType"), //
		jMethod<::javax::lang::model::element::Name()>("getSimpleName"), //
		jMethod<::java::util::List()>("getThrownTypes"), //
		jMethod<::java::util::List()>("getTypeParameters"), //
		jMethod<::jboolean()>("isDefault"), //
		jMethod<::jboolean()>("isVarArgs"), //
	};

	template<typename R = ::javax::lang::model::element::AnnotationValue, typename... Args>
	auto getDefaultValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDefaultValue")] != -1);
		return call<R>("getDefaultValue", forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getParameters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getParameters")] != -1);
		return call<R>("getParameters", forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::type::TypeMirror, typename... Args>
	auto getReceiverType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getReceiverType")] != -1);
		return call<R>("getReceiverType", forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::type::TypeMirror, typename... Args>
	auto getReturnType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getReturnType")] != -1);
		return call<R>("getReturnType", forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::element::Name, typename... Args>
	auto getSimpleName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSimpleName")] != -1);
		return call<R>("getSimpleName", forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getThrownTypes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getThrownTypes")] != -1);
		return call<R>("getThrownTypes", forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getTypeParameters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTypeParameters")] != -1);
		return call<R>("getTypeParameters", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDefault(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isDefault")] != -1);
		return call<R>("isDefault", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isVarArgs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isVarArgs")] != -1);
		return call<R>("isVarArgs", forward<Args>(args)...);
	}

};

#endif
