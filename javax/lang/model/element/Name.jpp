#ifndef javax_lang_model_element_Name_HPP
#define javax_lang_model_element_Name_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::lang::model::element::Name : public jObject<::javax::lang::model::element::Name, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_lang_model_element / "Name";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jchar(::jint)>("charAt"), //
		jMethod<::java::util::stream::IntStream()>("chars"), //
		jMethod<::java::util::stream::IntStream()>("codePoints"), //
		jMethod<::jboolean(::java::lang::CharSequence)>("contentEquals"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jint()>("length"), //
		jMethod<::java::lang::CharSequence(::jint, ::jint)>("subSequence"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jchar, typename... Args>
	auto charAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("charAt")] != -1);
		return call<R>("charAt", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::IntStream, typename... Args>
	auto chars(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("chars")] != -1);
		return call<R>("chars", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::IntStream, typename... Args>
	auto codePoints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("codePoints")] != -1);
		return call<R>("codePoints", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto contentEquals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("contentEquals")] != -1);
		return call<R>("contentEquals", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto length(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("length")] != -1);
		return call<R>("length", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::CharSequence, typename... Args>
	auto subSequence(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("subSequence")] != -1);
		return call<R>("subSequence", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
