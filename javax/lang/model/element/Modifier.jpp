#ifndef javax_lang_model_element_Modifier_HPP
#define javax_lang_model_element_Modifier_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::lang::model::element::Modifier : public jObject<::javax::lang::model::element::Modifier, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_lang_model_element / "Modifier";

	constexpr static Enume field_signatures{
		jField<::javax::lang::model::element::Modifier>("ABSTRACT"), //
		jField<::javax::lang::model::element::Modifier>("DEFAULT"), //
		jField<::javax::lang::model::element::Modifier>("FINAL"), //
		jField<::javax::lang::model::element::Modifier>("NATIVE"), //
		jField<::javax::lang::model::element::Modifier>("PRIVATE"), //
		jField<::javax::lang::model::element::Modifier>("PROTECTED"), //
		jField<::javax::lang::model::element::Modifier>("PUBLIC"), //
		jField<::javax::lang::model::element::Modifier>("STATIC"), //
		jField<::javax::lang::model::element::Modifier>("STRICTFP"), //
		jField<::javax::lang::model::element::Modifier>("SYNCHRONIZED"), //
		jField<::javax::lang::model::element::Modifier>("TRANSIENT"), //
		jField<::javax::lang::model::element::Modifier>("VOLATILE"), //
	};

	template<typename F = ::javax::lang::model::element::Modifier>
	static auto ABSTRACT() {
		static_assert(field_signatures[jField<F>("ABSTRACT")] != -1);
		return sat<F>("ABSTRACT");
	}

	template<typename F = ::javax::lang::model::element::Modifier>
	static auto DEFAULT() {
		static_assert(field_signatures[jField<F>("DEFAULT")] != -1);
		return sat<F>("DEFAULT");
	}

	template<typename F = ::javax::lang::model::element::Modifier>
	static auto FINAL() {
		static_assert(field_signatures[jField<F>("FINAL")] != -1);
		return sat<F>("FINAL");
	}

	template<typename F = ::javax::lang::model::element::Modifier>
	static auto NATIVE() {
		static_assert(field_signatures[jField<F>("NATIVE")] != -1);
		return sat<F>("NATIVE");
	}

	template<typename F = ::javax::lang::model::element::Modifier>
	static auto PRIVATE() {
		static_assert(field_signatures[jField<F>("PRIVATE")] != -1);
		return sat<F>("PRIVATE");
	}

	template<typename F = ::javax::lang::model::element::Modifier>
	static auto PROTECTED() {
		static_assert(field_signatures[jField<F>("PROTECTED")] != -1);
		return sat<F>("PROTECTED");
	}

	template<typename F = ::javax::lang::model::element::Modifier>
	static auto PUBLIC() {
		static_assert(field_signatures[jField<F>("PUBLIC")] != -1);
		return sat<F>("PUBLIC");
	}

	template<typename F = ::javax::lang::model::element::Modifier>
	static auto STATIC() {
		static_assert(field_signatures[jField<F>("STATIC")] != -1);
		return sat<F>("STATIC");
	}

	template<typename F = ::javax::lang::model::element::Modifier>
	static auto STRICTFP() {
		static_assert(field_signatures[jField<F>("STRICTFP")] != -1);
		return sat<F>("STRICTFP");
	}

	template<typename F = ::javax::lang::model::element::Modifier>
	static auto SYNCHRONIZED() {
		static_assert(field_signatures[jField<F>("SYNCHRONIZED")] != -1);
		return sat<F>("SYNCHRONIZED");
	}

	template<typename F = ::javax::lang::model::element::Modifier>
	static auto TRANSIENT() {
		static_assert(field_signatures[jField<F>("TRANSIENT")] != -1);
		return sat<F>("TRANSIENT");
	}

	template<typename F = ::javax::lang::model::element::Modifier>
	static auto VOLATILE() {
		static_assert(field_signatures[jField<F>("VOLATILE")] != -1);
		return sat<F>("VOLATILE");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::javax::lang::model::element::Modifier(::java::lang::String)>("valueOf"), //
		jMethod<::javax::lang::model::element::Modifier *()>("values"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::element::Modifier, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::element::Modifier *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
