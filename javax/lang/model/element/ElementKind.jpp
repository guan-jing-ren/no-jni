#ifndef javax_lang_model_element_ElementKind_HPP
#define javax_lang_model_element_ElementKind_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::lang::model::element::ElementKind : public jObject<::javax::lang::model::element::ElementKind, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_lang_model_element / "ElementKind";

	constexpr static Enume field_signatures{
		jField<::javax::lang::model::element::ElementKind>("ANNOTATION_TYPE"), //
		jField<::javax::lang::model::element::ElementKind>("CLASS"), //
		jField<::javax::lang::model::element::ElementKind>("CONSTRUCTOR"), //
		jField<::javax::lang::model::element::ElementKind>("ENUM"), //
		jField<::javax::lang::model::element::ElementKind>("ENUM_CONSTANT"), //
		jField<::javax::lang::model::element::ElementKind>("EXCEPTION_PARAMETER"), //
		jField<::javax::lang::model::element::ElementKind>("FIELD"), //
		jField<::javax::lang::model::element::ElementKind>("INSTANCE_INIT"), //
		jField<::javax::lang::model::element::ElementKind>("INTERFACE"), //
		jField<::javax::lang::model::element::ElementKind>("LOCAL_VARIABLE"), //
		jField<::javax::lang::model::element::ElementKind>("METHOD"), //
		jField<::javax::lang::model::element::ElementKind>("OTHER"), //
		jField<::javax::lang::model::element::ElementKind>("PACKAGE"), //
		jField<::javax::lang::model::element::ElementKind>("PARAMETER"), //
		jField<::javax::lang::model::element::ElementKind>("RESOURCE_VARIABLE"), //
		jField<::javax::lang::model::element::ElementKind>("STATIC_INIT"), //
		jField<::javax::lang::model::element::ElementKind>("TYPE_PARAMETER"), //
	};

	template<typename F = ::javax::lang::model::element::ElementKind>
	static auto ANNOTATION_TYPE() {
		static_assert(field_signatures[jField<F>("ANNOTATION_TYPE")] != -1);
		return sat<F>("ANNOTATION_TYPE");
	}

	template<typename F = ::javax::lang::model::element::ElementKind>
	static auto CLASS() {
		static_assert(field_signatures[jField<F>("CLASS")] != -1);
		return sat<F>("CLASS");
	}

	template<typename F = ::javax::lang::model::element::ElementKind>
	static auto CONSTRUCTOR() {
		static_assert(field_signatures[jField<F>("CONSTRUCTOR")] != -1);
		return sat<F>("CONSTRUCTOR");
	}

	template<typename F = ::javax::lang::model::element::ElementKind>
	static auto ENUM() {
		static_assert(field_signatures[jField<F>("ENUM")] != -1);
		return sat<F>("ENUM");
	}

	template<typename F = ::javax::lang::model::element::ElementKind>
	static auto ENUM_CONSTANT() {
		static_assert(field_signatures[jField<F>("ENUM_CONSTANT")] != -1);
		return sat<F>("ENUM_CONSTANT");
	}

	template<typename F = ::javax::lang::model::element::ElementKind>
	static auto EXCEPTION_PARAMETER() {
		static_assert(field_signatures[jField<F>("EXCEPTION_PARAMETER")] != -1);
		return sat<F>("EXCEPTION_PARAMETER");
	}

	template<typename F = ::javax::lang::model::element::ElementKind>
	static auto FIELD() {
		static_assert(field_signatures[jField<F>("FIELD")] != -1);
		return sat<F>("FIELD");
	}

	template<typename F = ::javax::lang::model::element::ElementKind>
	static auto INSTANCE_INIT() {
		static_assert(field_signatures[jField<F>("INSTANCE_INIT")] != -1);
		return sat<F>("INSTANCE_INIT");
	}

	template<typename F = ::javax::lang::model::element::ElementKind>
	static auto INTERFACE() {
		static_assert(field_signatures[jField<F>("INTERFACE")] != -1);
		return sat<F>("INTERFACE");
	}

	template<typename F = ::javax::lang::model::element::ElementKind>
	static auto LOCAL_VARIABLE() {
		static_assert(field_signatures[jField<F>("LOCAL_VARIABLE")] != -1);
		return sat<F>("LOCAL_VARIABLE");
	}

	template<typename F = ::javax::lang::model::element::ElementKind>
	static auto METHOD() {
		static_assert(field_signatures[jField<F>("METHOD")] != -1);
		return sat<F>("METHOD");
	}

	template<typename F = ::javax::lang::model::element::ElementKind>
	static auto OTHER() {
		static_assert(field_signatures[jField<F>("OTHER")] != -1);
		return sat<F>("OTHER");
	}

	template<typename F = ::javax::lang::model::element::ElementKind>
	static auto PACKAGE() {
		static_assert(field_signatures[jField<F>("PACKAGE")] != -1);
		return sat<F>("PACKAGE");
	}

	template<typename F = ::javax::lang::model::element::ElementKind>
	static auto PARAMETER() {
		static_assert(field_signatures[jField<F>("PARAMETER")] != -1);
		return sat<F>("PARAMETER");
	}

	template<typename F = ::javax::lang::model::element::ElementKind>
	static auto RESOURCE_VARIABLE() {
		static_assert(field_signatures[jField<F>("RESOURCE_VARIABLE")] != -1);
		return sat<F>("RESOURCE_VARIABLE");
	}

	template<typename F = ::javax::lang::model::element::ElementKind>
	static auto STATIC_INIT() {
		static_assert(field_signatures[jField<F>("STATIC_INIT")] != -1);
		return sat<F>("STATIC_INIT");
	}

	template<typename F = ::javax::lang::model::element::ElementKind>
	static auto TYPE_PARAMETER() {
		static_assert(field_signatures[jField<F>("TYPE_PARAMETER")] != -1);
		return sat<F>("TYPE_PARAMETER");
	}

	constexpr static Enume method_signatures{
		jMethod<::jboolean()>("isClass"), //
		jMethod<::jboolean()>("isField"), //
		jMethod<::jboolean()>("isInterface"), //
		jMethod<::javax::lang::model::element::ElementKind(::java::lang::String)>("valueOf"), //
		jMethod<::javax::lang::model::element::ElementKind *()>("values"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto isClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isClass")] != -1);
		return call<R>("isClass", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isField(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isField")] != -1);
		return call<R>("isField", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isInterface(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isInterface")] != -1);
		return call<R>("isInterface", forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::element::ElementKind, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::element::ElementKind *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", forward<Args>(args)...);
	}

};

#endif
