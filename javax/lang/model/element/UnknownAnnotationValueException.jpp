#ifndef javax_lang_model_element_UnknownAnnotationValueException_HPP
#define javax_lang_model_element_UnknownAnnotationValueException_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::lang::model::element::UnknownAnnotationValueException : public jObject<::javax::lang::model::element::UnknownAnnotationValueException, ::javax::lang::model::UnknownEntityException> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_lang_model_element / "UnknownAnnotationValueException";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::lang::model::element::AnnotationValue, ::java::lang::Object)>(), //
		jMethod<::java::lang::Object()>("getArgument"), //
		jMethod<::javax::lang::model::element::AnnotationValue()>("getUnknownAnnotationValue"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto getArgument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getArgument")] != -1);
		return call<R>("getArgument", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::element::AnnotationValue, typename... Args>
	auto getUnknownAnnotationValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUnknownAnnotationValue")] != -1);
		return call<R>("getUnknownAnnotationValue", std::forward<Args>(args)...);
	}

};

#endif
