#ifndef javax_lang_model_element_AnnotationValue_HPP
#define javax_lang_model_element_AnnotationValue_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::lang::model::element::AnnotationValue : public jObject<::javax::lang::model::element::AnnotationValue, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_lang_model_element / "AnnotationValue";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Object(::javax::lang::model::element::AnnotationValueVisitor, ::java::lang::Object)>("accept"), //
		jMethod<::java::lang::Object()>("getValue"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto accept(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("accept")] != -1);
		return call<R>("accept", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
