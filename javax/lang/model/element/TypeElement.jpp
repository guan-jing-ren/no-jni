#ifndef javax_lang_model_element_TypeElement_HPP
#define javax_lang_model_element_TypeElement_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::lang::model::element::TypeElement : public jObject<::javax::lang::model::element::TypeElement, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_lang_model_element / "TypeElement";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::util::List()>("getEnclosedElements"), //
		jMethod<::javax::lang::model::element::Element()>("getEnclosingElement"), //
		jMethod<::java::util::List()>("getInterfaces"), //
		jMethod<::javax::lang::model::element::NestingKind()>("getNestingKind"), //
		jMethod<::javax::lang::model::element::Name()>("getQualifiedName"), //
		jMethod<::javax::lang::model::element::Name()>("getSimpleName"), //
		jMethod<::javax::lang::model::type::TypeMirror()>("getSuperclass"), //
		jMethod<::java::util::List()>("getTypeParameters"), //
	};

	template<typename R = ::java::util::List, typename... Args>
	auto getEnclosedElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEnclosedElements")] != -1);
		return call<R>("getEnclosedElements", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::element::Element, typename... Args>
	auto getEnclosingElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEnclosingElement")] != -1);
		return call<R>("getEnclosingElement", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getInterfaces(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInterfaces")] != -1);
		return call<R>("getInterfaces", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::element::NestingKind, typename... Args>
	auto getNestingKind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNestingKind")] != -1);
		return call<R>("getNestingKind", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::element::Name, typename... Args>
	auto getQualifiedName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getQualifiedName")] != -1);
		return call<R>("getQualifiedName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::element::Name, typename... Args>
	auto getSimpleName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSimpleName")] != -1);
		return call<R>("getSimpleName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::type::TypeMirror, typename... Args>
	auto getSuperclass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSuperclass")] != -1);
		return call<R>("getSuperclass", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getTypeParameters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTypeParameters")] != -1);
		return call<R>("getTypeParameters", std::forward<Args>(args)...);
	}

};

#endif
