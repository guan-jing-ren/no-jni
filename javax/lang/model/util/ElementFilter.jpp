#ifndef javax_lang_model_util_ElementFilter_HPP
#define javax_lang_model_util_ElementFilter_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::lang::model::util::ElementFilter : public jObject<::javax::lang::model::util::ElementFilter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_lang_model_util / "ElementFilter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::util::List(::java::lang::Iterable)>("constructorsIn"), //
		jMethod<::java::util::Set(::java::util::Set)>("constructorsIn"), //
		jMethod<::java::util::List(::java::lang::Iterable)>("fieldsIn"), //
		jMethod<::java::util::Set(::java::util::Set)>("fieldsIn"), //
		jMethod<::java::util::List(::java::lang::Iterable)>("methodsIn"), //
		jMethod<::java::util::Set(::java::util::Set)>("methodsIn"), //
		jMethod<::java::util::List(::java::lang::Iterable)>("packagesIn"), //
		jMethod<::java::util::Set(::java::util::Set)>("packagesIn"), //
		jMethod<::java::util::List(::java::lang::Iterable)>("typesIn"), //
		jMethod<::java::util::Set(::java::util::Set)>("typesIn"), //
	};

	template<typename R = ::java::util::List, typename... Args>
	static auto constructorsIn(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("constructorsIn")] != -1);
		return scall<R>("constructorsIn", forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	static auto fieldsIn(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("fieldsIn")] != -1);
		return scall<R>("fieldsIn", forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	static auto methodsIn(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("methodsIn")] != -1);
		return scall<R>("methodsIn", forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	static auto packagesIn(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("packagesIn")] != -1);
		return scall<R>("packagesIn", forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	static auto typesIn(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("typesIn")] != -1);
		return scall<R>("typesIn", forward<Args>(args)...);
	}

};

#endif
