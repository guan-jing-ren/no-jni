#ifndef javax_lang_model_util_ElementScanner6_HPP
#define javax_lang_model_util_ElementScanner6_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::lang::model::util::ElementScanner6 : public jObject<::javax::lang::model::util::ElementScanner6, ::javax::lang::model::util::AbstractElementVisitor6> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_lang_model_util / "ElementScanner6";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Object(::java::lang::Iterable, ::java::lang::Object)>("scan"), //
		jMethod<::java::lang::Object(::javax::lang::model::element::Element)>("scan"), //
		jMethod<::java::lang::Object(::javax::lang::model::element::Element, ::java::lang::Object)>("scan"), //
		jMethod<::java::lang::Object(::javax::lang::model::element::ExecutableElement, ::java::lang::Object)>("visitExecutable"), //
		jMethod<::java::lang::Object(::javax::lang::model::element::PackageElement, ::java::lang::Object)>("visitPackage"), //
		jMethod<::java::lang::Object(::javax::lang::model::element::TypeElement, ::java::lang::Object)>("visitType"), //
		jMethod<::java::lang::Object(::javax::lang::model::element::TypeParameterElement, ::java::lang::Object)>("visitTypeParameter"), //
		jMethod<::java::lang::Object(::javax::lang::model::element::VariableElement, ::java::lang::Object)>("visitVariable"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto scan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("scan")] != -1);
		return call<R>("scan", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitExecutable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("visitExecutable")] != -1);
		return call<R>("visitExecutable", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitPackage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("visitPackage")] != -1);
		return call<R>("visitPackage", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("visitType")] != -1);
		return call<R>("visitType", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitTypeParameter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("visitTypeParameter")] != -1);
		return call<R>("visitTypeParameter", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitVariable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("visitVariable")] != -1);
		return call<R>("visitVariable", forward<Args>(args)...);
	}

};

#endif
