#ifndef javax_lang_model_util_SimpleAnnotationValueVisitor6_HPP
#define javax_lang_model_util_SimpleAnnotationValueVisitor6_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::lang::model::util::SimpleAnnotationValueVisitor6 : public jObject<::javax::lang::model::util::SimpleAnnotationValueVisitor6, ::javax::lang::model::util::AbstractAnnotationValueVisitor6> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_lang_model_util / "SimpleAnnotationValueVisitor6";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Object(::javax::lang::model::element::AnnotationMirror, ::java::lang::Object)>("visitAnnotation"), //
		jMethod<::java::lang::Object(::java::util::List, ::java::lang::Object)>("visitArray"), //
		jMethod<::java::lang::Object(::jboolean, ::java::lang::Object)>("visitBoolean"), //
		jMethod<::java::lang::Object(::jbyte, ::java::lang::Object)>("visitByte"), //
		jMethod<::java::lang::Object(::jchar, ::java::lang::Object)>("visitChar"), //
		jMethod<::java::lang::Object(::jdouble, ::java::lang::Object)>("visitDouble"), //
		jMethod<::java::lang::Object(::javax::lang::model::element::VariableElement, ::java::lang::Object)>("visitEnumConstant"), //
		jMethod<::java::lang::Object(::jfloat, ::java::lang::Object)>("visitFloat"), //
		jMethod<::java::lang::Object(::jint, ::java::lang::Object)>("visitInt"), //
		jMethod<::java::lang::Object(::jlong, ::java::lang::Object)>("visitLong"), //
		jMethod<::java::lang::Object(::jshort, ::java::lang::Object)>("visitShort"), //
		jMethod<::java::lang::Object(::java::lang::String, ::java::lang::Object)>("visitString"), //
		jMethod<::java::lang::Object(::javax::lang::model::type::TypeMirror, ::java::lang::Object)>("visitType"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitAnnotation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitAnnotation")] != -1);
		return call<R>("visitAnnotation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitArray")] != -1);
		return call<R>("visitArray", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitBoolean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitBoolean")] != -1);
		return call<R>("visitBoolean", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitByte")] != -1);
		return call<R>("visitByte", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitChar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitChar")] != -1);
		return call<R>("visitChar", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitDouble")] != -1);
		return call<R>("visitDouble", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitEnumConstant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitEnumConstant")] != -1);
		return call<R>("visitEnumConstant", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitFloat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitFloat")] != -1);
		return call<R>("visitFloat", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitInt")] != -1);
		return call<R>("visitInt", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitLong")] != -1);
		return call<R>("visitLong", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitShort")] != -1);
		return call<R>("visitShort", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitString")] != -1);
		return call<R>("visitString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitType")] != -1);
		return call<R>("visitType", std::forward<Args>(args)...);
	}

};

#endif
