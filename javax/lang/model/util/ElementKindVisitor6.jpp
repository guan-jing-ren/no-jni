#ifndef javax_lang_model_util_ElementKindVisitor6_HPP
#define javax_lang_model_util_ElementKindVisitor6_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::lang::model::util::ElementKindVisitor6 : public jObject<::javax::lang::model::util::ElementKindVisitor6, ::javax::lang::model::util::SimpleElementVisitor6> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_lang_model_util / "ElementKindVisitor6";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Object(::javax::lang::model::element::ExecutableElement, ::java::lang::Object)>("visitExecutable"), //
		jMethod<::java::lang::Object(::javax::lang::model::element::ExecutableElement, ::java::lang::Object)>("visitExecutableAsConstructor"), //
		jMethod<::java::lang::Object(::javax::lang::model::element::ExecutableElement, ::java::lang::Object)>("visitExecutableAsInstanceInit"), //
		jMethod<::java::lang::Object(::javax::lang::model::element::ExecutableElement, ::java::lang::Object)>("visitExecutableAsMethod"), //
		jMethod<::java::lang::Object(::javax::lang::model::element::ExecutableElement, ::java::lang::Object)>("visitExecutableAsStaticInit"), //
		jMethod<::java::lang::Object(::javax::lang::model::element::PackageElement, ::java::lang::Object)>("visitPackage"), //
		jMethod<::java::lang::Object(::javax::lang::model::element::TypeElement, ::java::lang::Object)>("visitType"), //
		jMethod<::java::lang::Object(::javax::lang::model::element::TypeElement, ::java::lang::Object)>("visitTypeAsAnnotationType"), //
		jMethod<::java::lang::Object(::javax::lang::model::element::TypeElement, ::java::lang::Object)>("visitTypeAsClass"), //
		jMethod<::java::lang::Object(::javax::lang::model::element::TypeElement, ::java::lang::Object)>("visitTypeAsEnum"), //
		jMethod<::java::lang::Object(::javax::lang::model::element::TypeElement, ::java::lang::Object)>("visitTypeAsInterface"), //
		jMethod<::java::lang::Object(::javax::lang::model::element::TypeParameterElement, ::java::lang::Object)>("visitTypeParameter"), //
		jMethod<::java::lang::Object(::javax::lang::model::element::VariableElement, ::java::lang::Object)>("visitVariable"), //
		jMethod<::java::lang::Object(::javax::lang::model::element::VariableElement, ::java::lang::Object)>("visitVariableAsEnumConstant"), //
		jMethod<::java::lang::Object(::javax::lang::model::element::VariableElement, ::java::lang::Object)>("visitVariableAsExceptionParameter"), //
		jMethod<::java::lang::Object(::javax::lang::model::element::VariableElement, ::java::lang::Object)>("visitVariableAsField"), //
		jMethod<::java::lang::Object(::javax::lang::model::element::VariableElement, ::java::lang::Object)>("visitVariableAsLocalVariable"), //
		jMethod<::java::lang::Object(::javax::lang::model::element::VariableElement, ::java::lang::Object)>("visitVariableAsParameter"), //
		jMethod<::java::lang::Object(::javax::lang::model::element::VariableElement, ::java::lang::Object)>("visitVariableAsResourceVariable"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitExecutable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitExecutable")] != -1);
		return call<R>("visitExecutable", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitExecutableAsConstructor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitExecutableAsConstructor")] != -1);
		return call<R>("visitExecutableAsConstructor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitExecutableAsInstanceInit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitExecutableAsInstanceInit")] != -1);
		return call<R>("visitExecutableAsInstanceInit", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitExecutableAsMethod(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitExecutableAsMethod")] != -1);
		return call<R>("visitExecutableAsMethod", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitExecutableAsStaticInit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitExecutableAsStaticInit")] != -1);
		return call<R>("visitExecutableAsStaticInit", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitPackage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitPackage")] != -1);
		return call<R>("visitPackage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitType")] != -1);
		return call<R>("visitType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitTypeAsAnnotationType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitTypeAsAnnotationType")] != -1);
		return call<R>("visitTypeAsAnnotationType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitTypeAsClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitTypeAsClass")] != -1);
		return call<R>("visitTypeAsClass", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitTypeAsEnum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitTypeAsEnum")] != -1);
		return call<R>("visitTypeAsEnum", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitTypeAsInterface(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitTypeAsInterface")] != -1);
		return call<R>("visitTypeAsInterface", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitTypeParameter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitTypeParameter")] != -1);
		return call<R>("visitTypeParameter", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitVariable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitVariable")] != -1);
		return call<R>("visitVariable", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitVariableAsEnumConstant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitVariableAsEnumConstant")] != -1);
		return call<R>("visitVariableAsEnumConstant", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitVariableAsExceptionParameter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitVariableAsExceptionParameter")] != -1);
		return call<R>("visitVariableAsExceptionParameter", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitVariableAsField(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitVariableAsField")] != -1);
		return call<R>("visitVariableAsField", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitVariableAsLocalVariable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitVariableAsLocalVariable")] != -1);
		return call<R>("visitVariableAsLocalVariable", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitVariableAsParameter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitVariableAsParameter")] != -1);
		return call<R>("visitVariableAsParameter", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitVariableAsResourceVariable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("visitVariableAsResourceVariable")] != -1);
		return call<R>("visitVariableAsResourceVariable", std::forward<Args>(args)...);
	}

};

#endif
