#ifndef javax_lang_model_util_TypeKindVisitor6_HPP
#define javax_lang_model_util_TypeKindVisitor6_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::lang::model::util::TypeKindVisitor6 : public jObject<::javax::lang::model::util::TypeKindVisitor6, ::javax::lang::model::util::SimpleTypeVisitor6> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_lang_model_util / "TypeKindVisitor6";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Object(::javax::lang::model::type::NoType, ::java::lang::Object)>("visitNoType"), //
		jMethod<::java::lang::Object(::javax::lang::model::type::NoType, ::java::lang::Object)>("visitNoTypeAsNone"), //
		jMethod<::java::lang::Object(::javax::lang::model::type::NoType, ::java::lang::Object)>("visitNoTypeAsPackage"), //
		jMethod<::java::lang::Object(::javax::lang::model::type::NoType, ::java::lang::Object)>("visitNoTypeAsVoid"), //
		jMethod<::java::lang::Object(::javax::lang::model::type::PrimitiveType, ::java::lang::Object)>("visitPrimitive"), //
		jMethod<::java::lang::Object(::javax::lang::model::type::PrimitiveType, ::java::lang::Object)>("visitPrimitiveAsBoolean"), //
		jMethod<::java::lang::Object(::javax::lang::model::type::PrimitiveType, ::java::lang::Object)>("visitPrimitiveAsByte"), //
		jMethod<::java::lang::Object(::javax::lang::model::type::PrimitiveType, ::java::lang::Object)>("visitPrimitiveAsChar"), //
		jMethod<::java::lang::Object(::javax::lang::model::type::PrimitiveType, ::java::lang::Object)>("visitPrimitiveAsDouble"), //
		jMethod<::java::lang::Object(::javax::lang::model::type::PrimitiveType, ::java::lang::Object)>("visitPrimitiveAsFloat"), //
		jMethod<::java::lang::Object(::javax::lang::model::type::PrimitiveType, ::java::lang::Object)>("visitPrimitiveAsInt"), //
		jMethod<::java::lang::Object(::javax::lang::model::type::PrimitiveType, ::java::lang::Object)>("visitPrimitiveAsLong"), //
		jMethod<::java::lang::Object(::javax::lang::model::type::PrimitiveType, ::java::lang::Object)>("visitPrimitiveAsShort"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitNoType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("visitNoType")] != -1);
		return call<R>("visitNoType", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitNoTypeAsNone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("visitNoTypeAsNone")] != -1);
		return call<R>("visitNoTypeAsNone", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitNoTypeAsPackage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("visitNoTypeAsPackage")] != -1);
		return call<R>("visitNoTypeAsPackage", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitNoTypeAsVoid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("visitNoTypeAsVoid")] != -1);
		return call<R>("visitNoTypeAsVoid", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitPrimitive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("visitPrimitive")] != -1);
		return call<R>("visitPrimitive", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitPrimitiveAsBoolean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("visitPrimitiveAsBoolean")] != -1);
		return call<R>("visitPrimitiveAsBoolean", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitPrimitiveAsByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("visitPrimitiveAsByte")] != -1);
		return call<R>("visitPrimitiveAsByte", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitPrimitiveAsChar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("visitPrimitiveAsChar")] != -1);
		return call<R>("visitPrimitiveAsChar", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitPrimitiveAsDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("visitPrimitiveAsDouble")] != -1);
		return call<R>("visitPrimitiveAsDouble", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitPrimitiveAsFloat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("visitPrimitiveAsFloat")] != -1);
		return call<R>("visitPrimitiveAsFloat", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitPrimitiveAsInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("visitPrimitiveAsInt")] != -1);
		return call<R>("visitPrimitiveAsInt", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitPrimitiveAsLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("visitPrimitiveAsLong")] != -1);
		return call<R>("visitPrimitiveAsLong", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto visitPrimitiveAsShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("visitPrimitiveAsShort")] != -1);
		return call<R>("visitPrimitiveAsShort", forward<Args>(args)...);
	}

};

#endif
