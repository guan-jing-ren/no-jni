#ifndef javax_lang_model_util_Elements_HPP
#define javax_lang_model_util_Elements_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::lang::model::util::Elements : public jObject<::javax::lang::model::util::Elements, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_lang_model_util / "Elements";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::util::List(::javax::lang::model::element::Element)>("getAllAnnotationMirrors"), //
		jMethod<::java::util::List(::javax::lang::model::element::TypeElement)>("getAllMembers"), //
		jMethod<::javax::lang::model::element::Name(::javax::lang::model::element::TypeElement)>("getBinaryName"), //
		jMethod<::java::lang::String(::java::lang::Object)>("getConstantExpression"), //
		jMethod<::java::lang::String(::javax::lang::model::element::Element)>("getDocComment"), //
		jMethod<::java::util::Map(::javax::lang::model::element::AnnotationMirror)>("getElementValuesWithDefaults"), //
		jMethod<::javax::lang::model::element::Name(::java::lang::CharSequence)>("getName"), //
		jMethod<::javax::lang::model::element::PackageElement(::java::lang::CharSequence)>("getPackageElement"), //
		jMethod<::javax::lang::model::element::PackageElement(::javax::lang::model::element::Element)>("getPackageOf"), //
		jMethod<::javax::lang::model::element::TypeElement(::java::lang::CharSequence)>("getTypeElement"), //
		jMethod<::jboolean(::javax::lang::model::element::Element, ::javax::lang::model::element::Element)>("hides"), //
		jMethod<::jboolean(::javax::lang::model::element::Element)>("isDeprecated"), //
		jMethod<::jboolean(::javax::lang::model::element::TypeElement)>("isFunctionalInterface"), //
		jMethod<::jboolean(::javax::lang::model::element::ExecutableElement, ::javax::lang::model::element::ExecutableElement, ::javax::lang::model::element::TypeElement)>("overrides"), //
		jMethod<::jvoid(::java::io::Writer, ::javax::lang::model::element::Element *)>("printElements"), //
	};

	template<typename R = ::java::util::List, typename... Args>
	auto getAllAnnotationMirrors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAllAnnotationMirrors")] != -1);
		return call<R>("getAllAnnotationMirrors", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getAllMembers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAllMembers")] != -1);
		return call<R>("getAllMembers", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::element::Name, typename... Args>
	auto getBinaryName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBinaryName")] != -1);
		return call<R>("getBinaryName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getConstantExpression(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConstantExpression")] != -1);
		return call<R>("getConstantExpression", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDocComment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDocComment")] != -1);
		return call<R>("getDocComment", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getElementValuesWithDefaults(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getElementValuesWithDefaults")] != -1);
		return call<R>("getElementValuesWithDefaults", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::element::Name, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::element::PackageElement, typename... Args>
	auto getPackageElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPackageElement")] != -1);
		return call<R>("getPackageElement", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::element::PackageElement, typename... Args>
	auto getPackageOf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPackageOf")] != -1);
		return call<R>("getPackageOf", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::element::TypeElement, typename... Args>
	auto getTypeElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTypeElement")] != -1);
		return call<R>("getTypeElement", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hides(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hides")] != -1);
		return call<R>("hides", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDeprecated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDeprecated")] != -1);
		return call<R>("isDeprecated", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFunctionalInterface(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFunctionalInterface")] != -1);
		return call<R>("isFunctionalInterface", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto overrides(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("overrides")] != -1);
		return call<R>("overrides", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto printElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("printElements")] != -1);
		return call<R>("printElements", std::forward<Args>(args)...);
	}

};

#endif
