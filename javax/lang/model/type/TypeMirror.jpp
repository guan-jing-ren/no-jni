#ifndef javax_lang_model_type_TypeMirror_HPP
#define javax_lang_model_type_TypeMirror_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::lang::model::type::TypeMirror : public jObject<::javax::lang::model::type::TypeMirror, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_lang_model_type / "TypeMirror";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Object(::javax::lang::model::type::TypeVisitor, ::java::lang::Object)>("accept"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::annotation::Annotation(::java::lang::Class)>("getAnnotation"), //
		jMethod<::java::util::List()>("getAnnotationMirrors"), //
		jMethod<::java::lang::annotation::Annotation *(::java::lang::Class)>("getAnnotationsByType"), //
		jMethod<::javax::lang::model::type::TypeKind()>("getKind"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto accept(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("accept")] != -1);
		return call<R>("accept", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::annotation::Annotation, typename... Args>
	auto getAnnotation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAnnotation")] != -1);
		return call<R>("getAnnotation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getAnnotationMirrors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAnnotationMirrors")] != -1);
		return call<R>("getAnnotationMirrors", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::annotation::Annotation *, typename... Args>
	auto getAnnotationsByType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAnnotationsByType")] != -1);
		return call<R>("getAnnotationsByType", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::type::TypeKind, typename... Args>
	auto getKind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKind")] != -1);
		return call<R>("getKind", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
