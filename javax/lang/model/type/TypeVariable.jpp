#ifndef javax_lang_model_type_TypeVariable_HPP
#define javax_lang_model_type_TypeVariable_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::lang::model::type::TypeVariable : public jObject<::javax::lang::model::type::TypeVariable, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_lang_model_type / "TypeVariable";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::javax::lang::model::element::Element()>("asElement"), //
		jMethod<::javax::lang::model::type::TypeMirror()>("getLowerBound"), //
		jMethod<::javax::lang::model::type::TypeMirror()>("getUpperBound"), //
	};

	template<typename R = ::javax::lang::model::element::Element, typename... Args>
	auto asElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("asElement")] != -1);
		return call<R>("asElement", forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::type::TypeMirror, typename... Args>
	auto getLowerBound(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLowerBound")] != -1);
		return call<R>("getLowerBound", forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::type::TypeMirror, typename... Args>
	auto getUpperBound(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUpperBound")] != -1);
		return call<R>("getUpperBound", forward<Args>(args)...);
	}

};

#endif
