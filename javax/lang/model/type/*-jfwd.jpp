#ifndef javax_lang_model_type_JPP
#define javax_lang_model_type_JPP

namespace javax::lang::model::type { class ArrayType; }
template<> constexpr auto signature<::javax::lang::model::type::ArrayType> = ::javax_lang_model_type / "ArrayType";
namespace javax::lang::model::type { class DeclaredType; }
template<> constexpr auto signature<::javax::lang::model::type::DeclaredType> = ::javax_lang_model_type / "DeclaredType";
namespace javax::lang::model::type { class ErrorType; }
template<> constexpr auto signature<::javax::lang::model::type::ErrorType> = ::javax_lang_model_type / "ErrorType";
namespace javax::lang::model::type { class ExecutableType; }
template<> constexpr auto signature<::javax::lang::model::type::ExecutableType> = ::javax_lang_model_type / "ExecutableType";
namespace javax::lang::model::type { class IntersectionType; }
template<> constexpr auto signature<::javax::lang::model::type::IntersectionType> = ::javax_lang_model_type / "IntersectionType";
namespace javax::lang::model::type { class MirroredTypeException; }
template<> constexpr auto signature<::javax::lang::model::type::MirroredTypeException> = ::javax_lang_model_type / "MirroredTypeException";
namespace javax::lang::model::type { class MirroredTypesException; }
template<> constexpr auto signature<::javax::lang::model::type::MirroredTypesException> = ::javax_lang_model_type / "MirroredTypesException";
namespace javax::lang::model::type { class NoType; }
template<> constexpr auto signature<::javax::lang::model::type::NoType> = ::javax_lang_model_type / "NoType";
namespace javax::lang::model::type { class NullType; }
template<> constexpr auto signature<::javax::lang::model::type::NullType> = ::javax_lang_model_type / "NullType";
namespace javax::lang::model::type { class PrimitiveType; }
template<> constexpr auto signature<::javax::lang::model::type::PrimitiveType> = ::javax_lang_model_type / "PrimitiveType";
namespace javax::lang::model::type { class ReferenceType; }
template<> constexpr auto signature<::javax::lang::model::type::ReferenceType> = ::javax_lang_model_type / "ReferenceType";
namespace javax::lang::model::type { class TypeKind; }
template<> constexpr auto signature<::javax::lang::model::type::TypeKind> = ::javax_lang_model_type / "TypeKind";
namespace javax::lang::model::type { class TypeKind$1; }
template<> constexpr auto signature<::javax::lang::model::type::TypeKind$1> = ::javax_lang_model_type / "TypeKind$1";
namespace javax::lang::model::type { class TypeMirror; }
template<> constexpr auto signature<::javax::lang::model::type::TypeMirror> = ::javax_lang_model_type / "TypeMirror";
namespace javax::lang::model::type { class TypeVariable; }
template<> constexpr auto signature<::javax::lang::model::type::TypeVariable> = ::javax_lang_model_type / "TypeVariable";
namespace javax::lang::model::type { class TypeVisitor; }
template<> constexpr auto signature<::javax::lang::model::type::TypeVisitor> = ::javax_lang_model_type / "TypeVisitor";
namespace javax::lang::model::type { class UnionType; }
template<> constexpr auto signature<::javax::lang::model::type::UnionType> = ::javax_lang_model_type / "UnionType";
namespace javax::lang::model::type { class UnknownTypeException; }
template<> constexpr auto signature<::javax::lang::model::type::UnknownTypeException> = ::javax_lang_model_type / "UnknownTypeException";
namespace javax::lang::model::type { class WildcardType; }
template<> constexpr auto signature<::javax::lang::model::type::WildcardType> = ::javax_lang_model_type / "WildcardType";

#endif
