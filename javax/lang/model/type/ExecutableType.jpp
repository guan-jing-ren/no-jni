#ifndef javax_lang_model_type_ExecutableType_HPP
#define javax_lang_model_type_ExecutableType_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::lang::model::type::ExecutableType : public jObject<::javax::lang::model::type::ExecutableType, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_lang_model_type / "ExecutableType";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Object(::javax::lang::model::type::TypeVisitor, ::java::lang::Object)>("accept"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::javax::lang::model::type::TypeKind()>("getKind"), //
		jMethod<::java::util::List()>("getParameterTypes"), //
		jMethod<::javax::lang::model::type::TypeMirror()>("getReceiverType"), //
		jMethod<::javax::lang::model::type::TypeMirror()>("getReturnType"), //
		jMethod<::java::util::List()>("getThrownTypes"), //
		jMethod<::java::util::List()>("getTypeVariables"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto accept(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("accept")] != -1);
		return call<R>("accept", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::type::TypeKind, typename... Args>
	auto getKind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKind")] != -1);
		return call<R>("getKind", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getParameterTypes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParameterTypes")] != -1);
		return call<R>("getParameterTypes", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::type::TypeMirror, typename... Args>
	auto getReceiverType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReceiverType")] != -1);
		return call<R>("getReceiverType", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::type::TypeMirror, typename... Args>
	auto getReturnType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReturnType")] != -1);
		return call<R>("getReturnType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getThrownTypes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getThrownTypes")] != -1);
		return call<R>("getThrownTypes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getTypeVariables(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTypeVariables")] != -1);
		return call<R>("getTypeVariables", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
