#ifndef javax_swing_filechooser_FileSystemView_HPP
#define javax_swing_filechooser_FileSystemView_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::filechooser::FileSystemView : public jObject<::javax::swing::filechooser::FileSystemView, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_filechooser / "FileSystemView";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::io::File(::java::io::File, ::java::lang::String)>("createFileObject"), //
		jMethod<::java::io::File(::java::lang::String)>("createFileObject"), //
		jMethod<::java::io::File(::java::io::File)>("createNewFolder"), //
		jMethod<::java::io::File(::java::io::File, ::java::lang::String)>("getChild"), //
		jMethod<::java::io::File()>("getDefaultDirectory"), //
		jMethod<::javax::swing::filechooser::FileSystemView()>("getFileSystemView"), //
		jMethod<::java::io::File *(::java::io::File, ::jboolean)>("getFiles"), //
		jMethod<::java::io::File()>("getHomeDirectory"), //
		jMethod<::java::io::File(::java::io::File)>("getParentDirectory"), //
		jMethod<::java::io::File *()>("getRoots"), //
		jMethod<::java::lang::String(::java::io::File)>("getSystemDisplayName"), //
		jMethod<::javax::swing::Icon(::java::io::File)>("getSystemIcon"), //
		jMethod<::java::lang::String(::java::io::File)>("getSystemTypeDescription"), //
		jMethod<::jboolean(::java::io::File)>("isComputerNode"), //
		jMethod<::jboolean(::java::io::File)>("isDrive"), //
		jMethod<::jboolean(::java::io::File)>("isFileSystem"), //
		jMethod<::jboolean(::java::io::File)>("isFileSystemRoot"), //
		jMethod<::jboolean(::java::io::File)>("isFloppyDrive"), //
		jMethod<::jboolean(::java::io::File)>("isHiddenFile"), //
		jMethod<::jboolean(::java::io::File, ::java::io::File)>("isParent"), //
		jMethod<::jboolean(::java::io::File)>("isRoot"), //
		jMethod<::java::lang::Boolean(::java::io::File)>("isTraversable"), //
	};

	template<typename R = ::java::io::File, typename... Args>
	auto createFileObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createFileObject")] != -1);
		return call<R>("createFileObject", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::File, typename... Args>
	auto createNewFolder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createNewFolder")] != -1);
		return call<R>("createNewFolder", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::File, typename... Args>
	auto getChild(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChild")] != -1);
		return call<R>("getChild", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::File, typename... Args>
	auto getDefaultDirectory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultDirectory")] != -1);
		return call<R>("getDefaultDirectory", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::filechooser::FileSystemView, typename... Args>
	static auto getFileSystemView(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFileSystemView")] != -1);
		return scall<R>("getFileSystemView", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::File *, typename... Args>
	auto getFiles(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFiles")] != -1);
		return call<R>("getFiles", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::File, typename... Args>
	auto getHomeDirectory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHomeDirectory")] != -1);
		return call<R>("getHomeDirectory", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::File, typename... Args>
	auto getParentDirectory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParentDirectory")] != -1);
		return call<R>("getParentDirectory", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::File *, typename... Args>
	auto getRoots(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRoots")] != -1);
		return call<R>("getRoots", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSystemDisplayName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSystemDisplayName")] != -1);
		return call<R>("getSystemDisplayName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getSystemIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSystemIcon")] != -1);
		return call<R>("getSystemIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSystemTypeDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSystemTypeDescription")] != -1);
		return call<R>("getSystemTypeDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isComputerNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isComputerNode")] != -1);
		return call<R>("isComputerNode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDrive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDrive")] != -1);
		return call<R>("isDrive", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFileSystem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFileSystem")] != -1);
		return call<R>("isFileSystem", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFileSystemRoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFileSystemRoot")] != -1);
		return call<R>("isFileSystemRoot", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFloppyDrive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFloppyDrive")] != -1);
		return call<R>("isFloppyDrive", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isHiddenFile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isHiddenFile")] != -1);
		return call<R>("isHiddenFile", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isParent")] != -1);
		return call<R>("isParent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isRoot")] != -1);
		return call<R>("isRoot", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Boolean, typename... Args>
	auto isTraversable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isTraversable")] != -1);
		return call<R>("isTraversable", std::forward<Args>(args)...);
	}

};

#endif
