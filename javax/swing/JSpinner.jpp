#ifndef javax_swing_JSpinner_HPP
#define javax_swing_JSpinner_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JSpinner : public jObject<::javax::swing::JSpinner, ::javax::swing::JComponent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JSpinner";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::javax::swing::SpinnerModel)>(), //
		jMethod<::jvoid(::javax::swing::event::ChangeListener)>("addChangeListener"), //
		jMethod<::jvoid()>("commitEdit"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::javax::swing::event::ChangeListener *()>("getChangeListeners"), //
		jMethod<::javax::swing::JComponent()>("getEditor"), //
		jMethod<::javax::swing::SpinnerModel()>("getModel"), //
		jMethod<::java::lang::Object()>("getNextValue"), //
		jMethod<::java::lang::Object()>("getPreviousValue"), //
		jMethod<::javax::swing::plaf::SpinnerUI()>("getUI"), //
		jMethod<::java::lang::String()>("getUIClassID"), //
		jMethod<::java::lang::Object()>("getValue"), //
		jMethod<::jvoid(::javax::swing::event::ChangeListener)>("removeChangeListener"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("setEditor"), //
		jMethod<::jvoid(::javax::swing::SpinnerModel)>("setModel"), //
		jMethod<::jvoid(::javax::swing::plaf::SpinnerUI)>("setUI"), //
		jMethod<::jvoid(::java::lang::Object)>("setValue"), //
		jMethod<::jvoid()>("updateUI"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addChangeListener")] != -1);
		return call<R>("addChangeListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto commitEdit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("commitEdit")] != -1);
		return call<R>("commitEdit", forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::event::ChangeListener *, typename... Args>
	auto getChangeListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getChangeListeners")] != -1);
		return call<R>("getChangeListeners", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JComponent, typename... Args>
	auto getEditor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getEditor")] != -1);
		return call<R>("getEditor", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::SpinnerModel, typename... Args>
	auto getModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getModel")] != -1);
		return call<R>("getModel", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getNextValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNextValue")] != -1);
		return call<R>("getNextValue", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getPreviousValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreviousValue")] != -1);
		return call<R>("getPreviousValue", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::SpinnerUI, typename... Args>
	auto getUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUI")] != -1);
		return call<R>("getUI", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUIClassID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUIClassID")] != -1);
		return call<R>("getUIClassID", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeChangeListener")] != -1);
		return call<R>("removeChangeListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEditor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setEditor")] != -1);
		return call<R>("setEditor", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setModel")] != -1);
		return call<R>("setModel", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setUI")] != -1);
		return call<R>("setUI", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setValue")] != -1);
		return call<R>("setValue", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("updateUI")] != -1);
		return call<R>("updateUI", forward<Args>(args)...);
	}

};

#endif
