#ifndef javax_swing_TransferHandler$TransferSupport_HPP
#define javax_swing_TransferHandler$TransferSupport_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::TransferHandler$TransferSupport : public jObject<::javax::swing::TransferHandler$TransferSupport, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "TransferHandler$TransferSupport";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::Component, ::java::awt::datatransfer::Transferable)>(), //
		jMethod<::java::awt::Component()>("getComponent"), //
		jMethod<::java::awt::datatransfer::DataFlavor *()>("getDataFlavors"), //
		jMethod<::jint()>("getDropAction"), //
		jMethod<::javax::swing::TransferHandler$DropLocation()>("getDropLocation"), //
		jMethod<::jint()>("getSourceDropActions"), //
		jMethod<::java::awt::datatransfer::Transferable()>("getTransferable"), //
		jMethod<::jint()>("getUserDropAction"), //
		jMethod<::jboolean(::java::awt::datatransfer::DataFlavor)>("isDataFlavorSupported"), //
		jMethod<::jboolean()>("isDrop"), //
		jMethod<::jvoid(::jint)>("setDropAction"), //
		jMethod<::jvoid(::jboolean)>("setShowDropLocation"), //
	};

	template<typename R = ::java::awt::Component, typename... Args>
	auto getComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getComponent")] != -1);
		return call<R>("getComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::datatransfer::DataFlavor *, typename... Args>
	auto getDataFlavors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDataFlavors")] != -1);
		return call<R>("getDataFlavors", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDropAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDropAction")] != -1);
		return call<R>("getDropAction", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::TransferHandler$DropLocation, typename... Args>
	auto getDropLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDropLocation")] != -1);
		return call<R>("getDropLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSourceDropActions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSourceDropActions")] != -1);
		return call<R>("getSourceDropActions", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::datatransfer::Transferable, typename... Args>
	auto getTransferable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransferable")] != -1);
		return call<R>("getTransferable", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getUserDropAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUserDropAction")] != -1);
		return call<R>("getUserDropAction", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDataFlavorSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDataFlavorSupported")] != -1);
		return call<R>("isDataFlavorSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDrop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDrop")] != -1);
		return call<R>("isDrop", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDropAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDropAction")] != -1);
		return call<R>("setDropAction", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setShowDropLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setShowDropLocation")] != -1);
		return call<R>("setShowDropLocation", std::forward<Args>(args)...);
	}

};

#endif
