#ifndef javax_swing_SpinnerNumberModel_HPP
#define javax_swing_SpinnerNumberModel_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::SpinnerNumberModel : public jObject<::javax::swing::SpinnerNumberModel, ::javax::swing::AbstractSpinnerModel> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "SpinnerNumberModel";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jdouble, ::jdouble, ::jdouble, ::jdouble)>(), //
		jConstructor<::jvoid(::jint, ::jint, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::java::lang::Number, ::java::lang::Comparable, ::java::lang::Comparable, ::java::lang::Number)>(), //
		jMethod<::java::lang::Comparable()>("getMaximum"), //
		jMethod<::java::lang::Comparable()>("getMinimum"), //
		jMethod<::java::lang::Object()>("getNextValue"), //
		jMethod<::java::lang::Number()>("getNumber"), //
		jMethod<::java::lang::Object()>("getPreviousValue"), //
		jMethod<::java::lang::Number()>("getStepSize"), //
		jMethod<::java::lang::Object()>("getValue"), //
		jMethod<::jvoid(::java::lang::Comparable)>("setMaximum"), //
		jMethod<::jvoid(::java::lang::Comparable)>("setMinimum"), //
		jMethod<::jvoid(::java::lang::Number)>("setStepSize"), //
		jMethod<::jvoid(::java::lang::Object)>("setValue"), //
	};

	template<typename R = ::java::lang::Comparable, typename... Args>
	auto getMaximum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaximum")] != -1);
		return call<R>("getMaximum", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Comparable, typename... Args>
	auto getMinimum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinimum")] != -1);
		return call<R>("getMinimum", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getNextValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNextValue")] != -1);
		return call<R>("getNextValue", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Number, typename... Args>
	auto getNumber(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNumber")] != -1);
		return call<R>("getNumber", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getPreviousValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreviousValue")] != -1);
		return call<R>("getPreviousValue", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Number, typename... Args>
	auto getStepSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getStepSize")] != -1);
		return call<R>("getStepSize", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaximum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMaximum")] != -1);
		return call<R>("setMaximum", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMinimum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMinimum")] != -1);
		return call<R>("setMinimum", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setStepSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setStepSize")] != -1);
		return call<R>("setStepSize", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setValue")] != -1);
		return call<R>("setValue", forward<Args>(args)...);
	}

};

#endif
