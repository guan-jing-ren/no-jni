#ifndef javax_swing_plaf_multi_MultiTabbedPaneUI_HPP
#define javax_swing_plaf_multi_MultiTabbedPaneUI_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::multi::MultiTabbedPaneUI : public jObject<::javax::swing::plaf::multi::MultiTabbedPaneUI, ::javax::swing::plaf::TabbedPaneUI> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_multi / "MultiTabbedPaneUI";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jboolean(::javax::swing::JComponent, ::jint, ::jint)>("contains"), //
		jMethod<::javax::swing::plaf::ComponentUI(::javax::swing::JComponent)>("createUI"), //
		jMethod<::javax::accessibility::Accessible(::javax::swing::JComponent, ::jint)>("getAccessibleChild"), //
		jMethod<::jint(::javax::swing::JComponent)>("getAccessibleChildrenCount"), //
		jMethod<::java::awt::Dimension(::javax::swing::JComponent)>("getMaximumSize"), //
		jMethod<::java::awt::Dimension(::javax::swing::JComponent)>("getMinimumSize"), //
		jMethod<::java::awt::Dimension(::javax::swing::JComponent)>("getPreferredSize"), //
		jMethod<::java::awt::Rectangle(::javax::swing::JTabbedPane, ::jint)>("getTabBounds"), //
		jMethod<::jint(::javax::swing::JTabbedPane)>("getTabRunCount"), //
		jMethod<::javax::swing::plaf::ComponentUI *()>("getUIs"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("installUI"), //
		jMethod<::jvoid(::java::awt::Graphics, ::javax::swing::JComponent)>("paint"), //
		jMethod<::jint(::javax::swing::JTabbedPane, ::jint, ::jint)>("tabForCoordinate"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("uninstallUI"), //
		jMethod<::jvoid(::java::awt::Graphics, ::javax::swing::JComponent)>("update"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto contains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("contains")] != -1);
		return call<R>("contains", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ComponentUI, typename... Args>
	static auto createUI(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createUI")] != -1);
		return scall<R>("createUI", forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::Accessible, typename... Args>
	auto getAccessibleChild(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessibleChild")] != -1);
		return call<R>("getAccessibleChild", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAccessibleChildrenCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessibleChildrenCount")] != -1);
		return call<R>("getAccessibleChildrenCount", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMaximumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaximumSize")] != -1);
		return call<R>("getMaximumSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinimumSize")] != -1);
		return call<R>("getMinimumSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreferredSize")] != -1);
		return call<R>("getPreferredSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getTabBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTabBounds")] != -1);
		return call<R>("getTabBounds", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTabRunCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTabRunCount")] != -1);
		return call<R>("getTabRunCount", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ComponentUI *, typename... Args>
	auto getUIs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUIs")] != -1);
		return call<R>("getUIs", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto installUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("installUI")] != -1);
		return call<R>("installUI", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto tabForCoordinate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("tabForCoordinate")] != -1);
		return call<R>("tabForCoordinate", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto uninstallUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("uninstallUI")] != -1);
		return call<R>("uninstallUI", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto update(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("update")] != -1);
		return call<R>("update", forward<Args>(args)...);
	}

};

#endif
