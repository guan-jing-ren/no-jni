#ifndef javax_swing_plaf_multi_MultiTreeUI_HPP
#define javax_swing_plaf_multi_MultiTreeUI_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::multi::MultiTreeUI : public jObject<::javax::swing::plaf::multi::MultiTreeUI, ::javax::swing::plaf::TreeUI> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_multi / "MultiTreeUI";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::javax::swing::JTree)>("cancelEditing"), //
		jMethod<::jboolean(::javax::swing::JComponent, ::jint, ::jint)>("contains"), //
		jMethod<::javax::swing::plaf::ComponentUI(::javax::swing::JComponent)>("createUI"), //
		jMethod<::javax::accessibility::Accessible(::javax::swing::JComponent, ::jint)>("getAccessibleChild"), //
		jMethod<::jint(::javax::swing::JComponent)>("getAccessibleChildrenCount"), //
		jMethod<::javax::swing::tree::TreePath(::javax::swing::JTree, ::jint, ::jint)>("getClosestPathForLocation"), //
		jMethod<::javax::swing::tree::TreePath(::javax::swing::JTree)>("getEditingPath"), //
		jMethod<::java::awt::Dimension(::javax::swing::JComponent)>("getMaximumSize"), //
		jMethod<::java::awt::Dimension(::javax::swing::JComponent)>("getMinimumSize"), //
		jMethod<::java::awt::Rectangle(::javax::swing::JTree, ::javax::swing::tree::TreePath)>("getPathBounds"), //
		jMethod<::javax::swing::tree::TreePath(::javax::swing::JTree, ::jint)>("getPathForRow"), //
		jMethod<::java::awt::Dimension(::javax::swing::JComponent)>("getPreferredSize"), //
		jMethod<::jint(::javax::swing::JTree)>("getRowCount"), //
		jMethod<::jint(::javax::swing::JTree, ::javax::swing::tree::TreePath)>("getRowForPath"), //
		jMethod<::javax::swing::plaf::ComponentUI *()>("getUIs"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("installUI"), //
		jMethod<::jboolean(::javax::swing::JTree)>("isEditing"), //
		jMethod<::jvoid(::java::awt::Graphics, ::javax::swing::JComponent)>("paint"), //
		jMethod<::jvoid(::javax::swing::JTree, ::javax::swing::tree::TreePath)>("startEditingAtPath"), //
		jMethod<::jboolean(::javax::swing::JTree)>("stopEditing"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("uninstallUI"), //
		jMethod<::jvoid(::java::awt::Graphics, ::javax::swing::JComponent)>("update"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto cancelEditing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("cancelEditing")] != -1);
		return call<R>("cancelEditing", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto contains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("contains")] != -1);
		return call<R>("contains", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ComponentUI, typename... Args>
	static auto createUI(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createUI")] != -1);
		return scall<R>("createUI", forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::Accessible, typename... Args>
	auto getAccessibleChild(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessibleChild")] != -1);
		return call<R>("getAccessibleChild", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAccessibleChildrenCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessibleChildrenCount")] != -1);
		return call<R>("getAccessibleChildrenCount", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreePath, typename... Args>
	auto getClosestPathForLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getClosestPathForLocation")] != -1);
		return call<R>("getClosestPathForLocation", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreePath, typename... Args>
	auto getEditingPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getEditingPath")] != -1);
		return call<R>("getEditingPath", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMaximumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaximumSize")] != -1);
		return call<R>("getMaximumSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinimumSize")] != -1);
		return call<R>("getMinimumSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getPathBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPathBounds")] != -1);
		return call<R>("getPathBounds", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreePath, typename... Args>
	auto getPathForRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPathForRow")] != -1);
		return call<R>("getPathForRow", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreferredSize")] != -1);
		return call<R>("getPreferredSize", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRowCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRowCount")] != -1);
		return call<R>("getRowCount", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRowForPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRowForPath")] != -1);
		return call<R>("getRowForPath", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ComponentUI *, typename... Args>
	auto getUIs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUIs")] != -1);
		return call<R>("getUIs", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto installUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("installUI")] != -1);
		return call<R>("installUI", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEditing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isEditing")] != -1);
		return call<R>("isEditing", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto startEditingAtPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("startEditingAtPath")] != -1);
		return call<R>("startEditingAtPath", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto stopEditing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("stopEditing")] != -1);
		return call<R>("stopEditing", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto uninstallUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("uninstallUI")] != -1);
		return call<R>("uninstallUI", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto update(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("update")] != -1);
		return call<R>("update", forward<Args>(args)...);
	}

};

#endif
