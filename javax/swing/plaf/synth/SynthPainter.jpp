#ifndef javax_swing_plaf_synth_SynthPainter_HPP
#define javax_swing_plaf_synth_SynthPainter_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::synth::SynthPainter : public jObject<::javax::swing::plaf::synth::SynthPainter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_synth / "SynthPainter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintArrowButtonBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintArrowButtonBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::jint)>("paintArrowButtonForeground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintButtonBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintButtonBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintCheckBoxBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintCheckBoxBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintCheckBoxMenuItemBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintCheckBoxMenuItemBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintColorChooserBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintColorChooserBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintComboBoxBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintComboBoxBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintDesktopIconBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintDesktopIconBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintDesktopPaneBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintDesktopPaneBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintEditorPaneBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintEditorPaneBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintFileChooserBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintFileChooserBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintFormattedTextFieldBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintFormattedTextFieldBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintInternalFrameBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintInternalFrameBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintInternalFrameTitlePaneBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintInternalFrameTitlePaneBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintLabelBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintLabelBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintListBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintListBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintMenuBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintMenuBarBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintMenuBarBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintMenuBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintMenuItemBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintMenuItemBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintOptionPaneBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintOptionPaneBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintPanelBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintPanelBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintPasswordFieldBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintPasswordFieldBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintPopupMenuBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintPopupMenuBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintProgressBarBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::jint)>("paintProgressBarBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintProgressBarBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::jint)>("paintProgressBarBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::jint)>("paintProgressBarForeground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintRadioButtonBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintRadioButtonBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintRadioButtonMenuItemBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintRadioButtonMenuItemBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintRootPaneBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintRootPaneBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintScrollBarBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::jint)>("paintScrollBarBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintScrollBarBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::jint)>("paintScrollBarBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::jint)>("paintScrollBarThumbBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::jint)>("paintScrollBarThumbBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintScrollBarTrackBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::jint)>("paintScrollBarTrackBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintScrollBarTrackBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::jint)>("paintScrollBarTrackBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintScrollPaneBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintScrollPaneBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintSeparatorBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::jint)>("paintSeparatorBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintSeparatorBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::jint)>("paintSeparatorBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::jint)>("paintSeparatorForeground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintSliderBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::jint)>("paintSliderBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintSliderBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::jint)>("paintSliderBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::jint)>("paintSliderThumbBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::jint)>("paintSliderThumbBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintSliderTrackBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::jint)>("paintSliderTrackBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintSliderTrackBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::jint)>("paintSliderTrackBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintSpinnerBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintSpinnerBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintSplitPaneBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintSplitPaneBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintSplitPaneDividerBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::jint)>("paintSplitPaneDividerBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::jint)>("paintSplitPaneDividerForeground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::jint)>("paintSplitPaneDragDivider"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintTabbedPaneBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintTabbedPaneBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintTabbedPaneContentBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintTabbedPaneContentBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintTabbedPaneTabAreaBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::jint)>("paintTabbedPaneTabAreaBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintTabbedPaneTabAreaBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::jint)>("paintTabbedPaneTabAreaBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::jint)>("paintTabbedPaneTabBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("paintTabbedPaneTabBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::jint)>("paintTabbedPaneTabBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("paintTabbedPaneTabBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintTableBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintTableBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintTableHeaderBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintTableHeaderBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintTextAreaBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintTextAreaBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintTextFieldBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintTextFieldBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintTextPaneBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintTextPaneBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintToggleButtonBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintToggleButtonBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintToolBarBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::jint)>("paintToolBarBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintToolBarBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::jint)>("paintToolBarBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintToolBarContentBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::jint)>("paintToolBarContentBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintToolBarContentBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::jint)>("paintToolBarContentBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintToolBarDragWindowBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::jint)>("paintToolBarDragWindowBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintToolBarDragWindowBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::jint)>("paintToolBarDragWindowBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintToolTipBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintToolTipBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintTreeBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintTreeBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintTreeCellBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintTreeCellBorder"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintTreeCellFocus"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintViewportBackground"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintViewportBorder"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto paintArrowButtonBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintArrowButtonBackground")] != -1);
		return call<R>("paintArrowButtonBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintArrowButtonBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintArrowButtonBorder")] != -1);
		return call<R>("paintArrowButtonBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintArrowButtonForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintArrowButtonForeground")] != -1);
		return call<R>("paintArrowButtonForeground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintButtonBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintButtonBackground")] != -1);
		return call<R>("paintButtonBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintButtonBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintButtonBorder")] != -1);
		return call<R>("paintButtonBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintCheckBoxBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintCheckBoxBackground")] != -1);
		return call<R>("paintCheckBoxBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintCheckBoxBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintCheckBoxBorder")] != -1);
		return call<R>("paintCheckBoxBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintCheckBoxMenuItemBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintCheckBoxMenuItemBackground")] != -1);
		return call<R>("paintCheckBoxMenuItemBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintCheckBoxMenuItemBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintCheckBoxMenuItemBorder")] != -1);
		return call<R>("paintCheckBoxMenuItemBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintColorChooserBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintColorChooserBackground")] != -1);
		return call<R>("paintColorChooserBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintColorChooserBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintColorChooserBorder")] != -1);
		return call<R>("paintColorChooserBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintComboBoxBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintComboBoxBackground")] != -1);
		return call<R>("paintComboBoxBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintComboBoxBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintComboBoxBorder")] != -1);
		return call<R>("paintComboBoxBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintDesktopIconBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintDesktopIconBackground")] != -1);
		return call<R>("paintDesktopIconBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintDesktopIconBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintDesktopIconBorder")] != -1);
		return call<R>("paintDesktopIconBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintDesktopPaneBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintDesktopPaneBackground")] != -1);
		return call<R>("paintDesktopPaneBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintDesktopPaneBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintDesktopPaneBorder")] != -1);
		return call<R>("paintDesktopPaneBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintEditorPaneBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintEditorPaneBackground")] != -1);
		return call<R>("paintEditorPaneBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintEditorPaneBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintEditorPaneBorder")] != -1);
		return call<R>("paintEditorPaneBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintFileChooserBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintFileChooserBackground")] != -1);
		return call<R>("paintFileChooserBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintFileChooserBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintFileChooserBorder")] != -1);
		return call<R>("paintFileChooserBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintFormattedTextFieldBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintFormattedTextFieldBackground")] != -1);
		return call<R>("paintFormattedTextFieldBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintFormattedTextFieldBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintFormattedTextFieldBorder")] != -1);
		return call<R>("paintFormattedTextFieldBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintInternalFrameBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintInternalFrameBackground")] != -1);
		return call<R>("paintInternalFrameBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintInternalFrameBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintInternalFrameBorder")] != -1);
		return call<R>("paintInternalFrameBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintInternalFrameTitlePaneBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintInternalFrameTitlePaneBackground")] != -1);
		return call<R>("paintInternalFrameTitlePaneBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintInternalFrameTitlePaneBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintInternalFrameTitlePaneBorder")] != -1);
		return call<R>("paintInternalFrameTitlePaneBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintLabelBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintLabelBackground")] != -1);
		return call<R>("paintLabelBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintLabelBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintLabelBorder")] != -1);
		return call<R>("paintLabelBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintListBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintListBackground")] != -1);
		return call<R>("paintListBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintListBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintListBorder")] != -1);
		return call<R>("paintListBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintMenuBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintMenuBackground")] != -1);
		return call<R>("paintMenuBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintMenuBarBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintMenuBarBackground")] != -1);
		return call<R>("paintMenuBarBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintMenuBarBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintMenuBarBorder")] != -1);
		return call<R>("paintMenuBarBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintMenuBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintMenuBorder")] != -1);
		return call<R>("paintMenuBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintMenuItemBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintMenuItemBackground")] != -1);
		return call<R>("paintMenuItemBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintMenuItemBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintMenuItemBorder")] != -1);
		return call<R>("paintMenuItemBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintOptionPaneBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintOptionPaneBackground")] != -1);
		return call<R>("paintOptionPaneBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintOptionPaneBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintOptionPaneBorder")] != -1);
		return call<R>("paintOptionPaneBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintPanelBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintPanelBackground")] != -1);
		return call<R>("paintPanelBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintPanelBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintPanelBorder")] != -1);
		return call<R>("paintPanelBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintPasswordFieldBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintPasswordFieldBackground")] != -1);
		return call<R>("paintPasswordFieldBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintPasswordFieldBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintPasswordFieldBorder")] != -1);
		return call<R>("paintPasswordFieldBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintPopupMenuBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintPopupMenuBackground")] != -1);
		return call<R>("paintPopupMenuBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintPopupMenuBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintPopupMenuBorder")] != -1);
		return call<R>("paintPopupMenuBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintProgressBarBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintProgressBarBackground")] != -1);
		return call<R>("paintProgressBarBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintProgressBarBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintProgressBarBorder")] != -1);
		return call<R>("paintProgressBarBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintProgressBarForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintProgressBarForeground")] != -1);
		return call<R>("paintProgressBarForeground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintRadioButtonBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintRadioButtonBackground")] != -1);
		return call<R>("paintRadioButtonBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintRadioButtonBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintRadioButtonBorder")] != -1);
		return call<R>("paintRadioButtonBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintRadioButtonMenuItemBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintRadioButtonMenuItemBackground")] != -1);
		return call<R>("paintRadioButtonMenuItemBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintRadioButtonMenuItemBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintRadioButtonMenuItemBorder")] != -1);
		return call<R>("paintRadioButtonMenuItemBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintRootPaneBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintRootPaneBackground")] != -1);
		return call<R>("paintRootPaneBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintRootPaneBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintRootPaneBorder")] != -1);
		return call<R>("paintRootPaneBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintScrollBarBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintScrollBarBackground")] != -1);
		return call<R>("paintScrollBarBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintScrollBarBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintScrollBarBorder")] != -1);
		return call<R>("paintScrollBarBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintScrollBarThumbBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintScrollBarThumbBackground")] != -1);
		return call<R>("paintScrollBarThumbBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintScrollBarThumbBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintScrollBarThumbBorder")] != -1);
		return call<R>("paintScrollBarThumbBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintScrollBarTrackBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintScrollBarTrackBackground")] != -1);
		return call<R>("paintScrollBarTrackBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintScrollBarTrackBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintScrollBarTrackBorder")] != -1);
		return call<R>("paintScrollBarTrackBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintScrollPaneBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintScrollPaneBackground")] != -1);
		return call<R>("paintScrollPaneBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintScrollPaneBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintScrollPaneBorder")] != -1);
		return call<R>("paintScrollPaneBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintSeparatorBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintSeparatorBackground")] != -1);
		return call<R>("paintSeparatorBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintSeparatorBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintSeparatorBorder")] != -1);
		return call<R>("paintSeparatorBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintSeparatorForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintSeparatorForeground")] != -1);
		return call<R>("paintSeparatorForeground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintSliderBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintSliderBackground")] != -1);
		return call<R>("paintSliderBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintSliderBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintSliderBorder")] != -1);
		return call<R>("paintSliderBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintSliderThumbBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintSliderThumbBackground")] != -1);
		return call<R>("paintSliderThumbBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintSliderThumbBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintSliderThumbBorder")] != -1);
		return call<R>("paintSliderThumbBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintSliderTrackBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintSliderTrackBackground")] != -1);
		return call<R>("paintSliderTrackBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintSliderTrackBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintSliderTrackBorder")] != -1);
		return call<R>("paintSliderTrackBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintSpinnerBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintSpinnerBackground")] != -1);
		return call<R>("paintSpinnerBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintSpinnerBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintSpinnerBorder")] != -1);
		return call<R>("paintSpinnerBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintSplitPaneBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintSplitPaneBackground")] != -1);
		return call<R>("paintSplitPaneBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintSplitPaneBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintSplitPaneBorder")] != -1);
		return call<R>("paintSplitPaneBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintSplitPaneDividerBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintSplitPaneDividerBackground")] != -1);
		return call<R>("paintSplitPaneDividerBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintSplitPaneDividerForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintSplitPaneDividerForeground")] != -1);
		return call<R>("paintSplitPaneDividerForeground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintSplitPaneDragDivider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintSplitPaneDragDivider")] != -1);
		return call<R>("paintSplitPaneDragDivider", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintTabbedPaneBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintTabbedPaneBackground")] != -1);
		return call<R>("paintTabbedPaneBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintTabbedPaneBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintTabbedPaneBorder")] != -1);
		return call<R>("paintTabbedPaneBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintTabbedPaneContentBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintTabbedPaneContentBackground")] != -1);
		return call<R>("paintTabbedPaneContentBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintTabbedPaneContentBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintTabbedPaneContentBorder")] != -1);
		return call<R>("paintTabbedPaneContentBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintTabbedPaneTabAreaBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintTabbedPaneTabAreaBackground")] != -1);
		return call<R>("paintTabbedPaneTabAreaBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintTabbedPaneTabAreaBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintTabbedPaneTabAreaBorder")] != -1);
		return call<R>("paintTabbedPaneTabAreaBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintTabbedPaneTabBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintTabbedPaneTabBackground")] != -1);
		return call<R>("paintTabbedPaneTabBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintTabbedPaneTabBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintTabbedPaneTabBorder")] != -1);
		return call<R>("paintTabbedPaneTabBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintTableBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintTableBackground")] != -1);
		return call<R>("paintTableBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintTableBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintTableBorder")] != -1);
		return call<R>("paintTableBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintTableHeaderBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintTableHeaderBackground")] != -1);
		return call<R>("paintTableHeaderBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintTableHeaderBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintTableHeaderBorder")] != -1);
		return call<R>("paintTableHeaderBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintTextAreaBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintTextAreaBackground")] != -1);
		return call<R>("paintTextAreaBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintTextAreaBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintTextAreaBorder")] != -1);
		return call<R>("paintTextAreaBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintTextFieldBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintTextFieldBackground")] != -1);
		return call<R>("paintTextFieldBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintTextFieldBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintTextFieldBorder")] != -1);
		return call<R>("paintTextFieldBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintTextPaneBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintTextPaneBackground")] != -1);
		return call<R>("paintTextPaneBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintTextPaneBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintTextPaneBorder")] != -1);
		return call<R>("paintTextPaneBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintToggleButtonBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintToggleButtonBackground")] != -1);
		return call<R>("paintToggleButtonBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintToggleButtonBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintToggleButtonBorder")] != -1);
		return call<R>("paintToggleButtonBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintToolBarBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintToolBarBackground")] != -1);
		return call<R>("paintToolBarBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintToolBarBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintToolBarBorder")] != -1);
		return call<R>("paintToolBarBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintToolBarContentBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintToolBarContentBackground")] != -1);
		return call<R>("paintToolBarContentBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintToolBarContentBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintToolBarContentBorder")] != -1);
		return call<R>("paintToolBarContentBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintToolBarDragWindowBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintToolBarDragWindowBackground")] != -1);
		return call<R>("paintToolBarDragWindowBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintToolBarDragWindowBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintToolBarDragWindowBorder")] != -1);
		return call<R>("paintToolBarDragWindowBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintToolTipBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintToolTipBackground")] != -1);
		return call<R>("paintToolTipBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintToolTipBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintToolTipBorder")] != -1);
		return call<R>("paintToolTipBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintTreeBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintTreeBackground")] != -1);
		return call<R>("paintTreeBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintTreeBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintTreeBorder")] != -1);
		return call<R>("paintTreeBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintTreeCellBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintTreeCellBackground")] != -1);
		return call<R>("paintTreeCellBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintTreeCellBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintTreeCellBorder")] != -1);
		return call<R>("paintTreeCellBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintTreeCellFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintTreeCellFocus")] != -1);
		return call<R>("paintTreeCellFocus", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintViewportBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintViewportBackground")] != -1);
		return call<R>("paintViewportBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintViewportBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintViewportBorder")] != -1);
		return call<R>("paintViewportBorder", forward<Args>(args)...);
	}

};

#endif
