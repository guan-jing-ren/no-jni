#ifndef javax_swing_plaf_synth_Region_HPP
#define javax_swing_plaf_synth_Region_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::synth::Region : public jObject<::javax::swing::plaf::synth::Region, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_synth / "Region";

	constexpr static Enume field_signatures{
		jField<::javax::swing::plaf::synth::Region>("ARROW_BUTTON"), //
		jField<::javax::swing::plaf::synth::Region>("BUTTON"), //
		jField<::javax::swing::plaf::synth::Region>("CHECK_BOX"), //
		jField<::javax::swing::plaf::synth::Region>("CHECK_BOX_MENU_ITEM"), //
		jField<::javax::swing::plaf::synth::Region>("COLOR_CHOOSER"), //
		jField<::javax::swing::plaf::synth::Region>("COMBO_BOX"), //
		jField<::javax::swing::plaf::synth::Region>("DESKTOP_ICON"), //
		jField<::javax::swing::plaf::synth::Region>("DESKTOP_PANE"), //
		jField<::javax::swing::plaf::synth::Region>("EDITOR_PANE"), //
		jField<::javax::swing::plaf::synth::Region>("FILE_CHOOSER"), //
		jField<::javax::swing::plaf::synth::Region>("FORMATTED_TEXT_FIELD"), //
		jField<::javax::swing::plaf::synth::Region>("INTERNAL_FRAME"), //
		jField<::javax::swing::plaf::synth::Region>("INTERNAL_FRAME_TITLE_PANE"), //
		jField<::javax::swing::plaf::synth::Region>("LABEL"), //
		jField<::javax::swing::plaf::synth::Region>("LIST"), //
		jField<::javax::swing::plaf::synth::Region>("MENU"), //
		jField<::javax::swing::plaf::synth::Region>("MENU_BAR"), //
		jField<::javax::swing::plaf::synth::Region>("MENU_ITEM"), //
		jField<::javax::swing::plaf::synth::Region>("MENU_ITEM_ACCELERATOR"), //
		jField<::javax::swing::plaf::synth::Region>("OPTION_PANE"), //
		jField<::javax::swing::plaf::synth::Region>("PANEL"), //
		jField<::javax::swing::plaf::synth::Region>("PASSWORD_FIELD"), //
		jField<::javax::swing::plaf::synth::Region>("POPUP_MENU"), //
		jField<::javax::swing::plaf::synth::Region>("POPUP_MENU_SEPARATOR"), //
		jField<::javax::swing::plaf::synth::Region>("PROGRESS_BAR"), //
		jField<::javax::swing::plaf::synth::Region>("RADIO_BUTTON"), //
		jField<::javax::swing::plaf::synth::Region>("RADIO_BUTTON_MENU_ITEM"), //
		jField<::javax::swing::plaf::synth::Region>("ROOT_PANE"), //
		jField<::javax::swing::plaf::synth::Region>("SCROLL_BAR"), //
		jField<::javax::swing::plaf::synth::Region>("SCROLL_BAR_THUMB"), //
		jField<::javax::swing::plaf::synth::Region>("SCROLL_BAR_TRACK"), //
		jField<::javax::swing::plaf::synth::Region>("SCROLL_PANE"), //
		jField<::javax::swing::plaf::synth::Region>("SEPARATOR"), //
		jField<::javax::swing::plaf::synth::Region>("SLIDER"), //
		jField<::javax::swing::plaf::synth::Region>("SLIDER_THUMB"), //
		jField<::javax::swing::plaf::synth::Region>("SLIDER_TRACK"), //
		jField<::javax::swing::plaf::synth::Region>("SPINNER"), //
		jField<::javax::swing::plaf::synth::Region>("SPLIT_PANE"), //
		jField<::javax::swing::plaf::synth::Region>("SPLIT_PANE_DIVIDER"), //
		jField<::javax::swing::plaf::synth::Region>("TABBED_PANE"), //
		jField<::javax::swing::plaf::synth::Region>("TABBED_PANE_CONTENT"), //
		jField<::javax::swing::plaf::synth::Region>("TABBED_PANE_TAB"), //
		jField<::javax::swing::plaf::synth::Region>("TABBED_PANE_TAB_AREA"), //
		jField<::javax::swing::plaf::synth::Region>("TABLE"), //
		jField<::javax::swing::plaf::synth::Region>("TABLE_HEADER"), //
		jField<::javax::swing::plaf::synth::Region>("TEXT_AREA"), //
		jField<::javax::swing::plaf::synth::Region>("TEXT_FIELD"), //
		jField<::javax::swing::plaf::synth::Region>("TEXT_PANE"), //
		jField<::javax::swing::plaf::synth::Region>("TOGGLE_BUTTON"), //
		jField<::javax::swing::plaf::synth::Region>("TOOL_BAR"), //
		jField<::javax::swing::plaf::synth::Region>("TOOL_BAR_CONTENT"), //
		jField<::javax::swing::plaf::synth::Region>("TOOL_BAR_DRAG_WINDOW"), //
		jField<::javax::swing::plaf::synth::Region>("TOOL_BAR_SEPARATOR"), //
		jField<::javax::swing::plaf::synth::Region>("TOOL_TIP"), //
		jField<::javax::swing::plaf::synth::Region>("TREE"), //
		jField<::javax::swing::plaf::synth::Region>("TREE_CELL"), //
		jField<::javax::swing::plaf::synth::Region>("VIEWPORT"), //
	};

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto ARROW_BUTTON() {
		static_assert(field_signatures[jField<F>("ARROW_BUTTON")] != -1);
		return sat<F>("ARROW_BUTTON");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto BUTTON() {
		static_assert(field_signatures[jField<F>("BUTTON")] != -1);
		return sat<F>("BUTTON");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto CHECK_BOX() {
		static_assert(field_signatures[jField<F>("CHECK_BOX")] != -1);
		return sat<F>("CHECK_BOX");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto CHECK_BOX_MENU_ITEM() {
		static_assert(field_signatures[jField<F>("CHECK_BOX_MENU_ITEM")] != -1);
		return sat<F>("CHECK_BOX_MENU_ITEM");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto COLOR_CHOOSER() {
		static_assert(field_signatures[jField<F>("COLOR_CHOOSER")] != -1);
		return sat<F>("COLOR_CHOOSER");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto COMBO_BOX() {
		static_assert(field_signatures[jField<F>("COMBO_BOX")] != -1);
		return sat<F>("COMBO_BOX");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto DESKTOP_ICON() {
		static_assert(field_signatures[jField<F>("DESKTOP_ICON")] != -1);
		return sat<F>("DESKTOP_ICON");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto DESKTOP_PANE() {
		static_assert(field_signatures[jField<F>("DESKTOP_PANE")] != -1);
		return sat<F>("DESKTOP_PANE");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto EDITOR_PANE() {
		static_assert(field_signatures[jField<F>("EDITOR_PANE")] != -1);
		return sat<F>("EDITOR_PANE");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto FILE_CHOOSER() {
		static_assert(field_signatures[jField<F>("FILE_CHOOSER")] != -1);
		return sat<F>("FILE_CHOOSER");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto FORMATTED_TEXT_FIELD() {
		static_assert(field_signatures[jField<F>("FORMATTED_TEXT_FIELD")] != -1);
		return sat<F>("FORMATTED_TEXT_FIELD");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto INTERNAL_FRAME() {
		static_assert(field_signatures[jField<F>("INTERNAL_FRAME")] != -1);
		return sat<F>("INTERNAL_FRAME");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto INTERNAL_FRAME_TITLE_PANE() {
		static_assert(field_signatures[jField<F>("INTERNAL_FRAME_TITLE_PANE")] != -1);
		return sat<F>("INTERNAL_FRAME_TITLE_PANE");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto LABEL() {
		static_assert(field_signatures[jField<F>("LABEL")] != -1);
		return sat<F>("LABEL");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto LIST() {
		static_assert(field_signatures[jField<F>("LIST")] != -1);
		return sat<F>("LIST");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto MENU() {
		static_assert(field_signatures[jField<F>("MENU")] != -1);
		return sat<F>("MENU");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto MENU_BAR() {
		static_assert(field_signatures[jField<F>("MENU_BAR")] != -1);
		return sat<F>("MENU_BAR");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto MENU_ITEM() {
		static_assert(field_signatures[jField<F>("MENU_ITEM")] != -1);
		return sat<F>("MENU_ITEM");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto MENU_ITEM_ACCELERATOR() {
		static_assert(field_signatures[jField<F>("MENU_ITEM_ACCELERATOR")] != -1);
		return sat<F>("MENU_ITEM_ACCELERATOR");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto OPTION_PANE() {
		static_assert(field_signatures[jField<F>("OPTION_PANE")] != -1);
		return sat<F>("OPTION_PANE");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto PANEL() {
		static_assert(field_signatures[jField<F>("PANEL")] != -1);
		return sat<F>("PANEL");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto PASSWORD_FIELD() {
		static_assert(field_signatures[jField<F>("PASSWORD_FIELD")] != -1);
		return sat<F>("PASSWORD_FIELD");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto POPUP_MENU() {
		static_assert(field_signatures[jField<F>("POPUP_MENU")] != -1);
		return sat<F>("POPUP_MENU");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto POPUP_MENU_SEPARATOR() {
		static_assert(field_signatures[jField<F>("POPUP_MENU_SEPARATOR")] != -1);
		return sat<F>("POPUP_MENU_SEPARATOR");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto PROGRESS_BAR() {
		static_assert(field_signatures[jField<F>("PROGRESS_BAR")] != -1);
		return sat<F>("PROGRESS_BAR");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto RADIO_BUTTON() {
		static_assert(field_signatures[jField<F>("RADIO_BUTTON")] != -1);
		return sat<F>("RADIO_BUTTON");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto RADIO_BUTTON_MENU_ITEM() {
		static_assert(field_signatures[jField<F>("RADIO_BUTTON_MENU_ITEM")] != -1);
		return sat<F>("RADIO_BUTTON_MENU_ITEM");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto ROOT_PANE() {
		static_assert(field_signatures[jField<F>("ROOT_PANE")] != -1);
		return sat<F>("ROOT_PANE");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto SCROLL_BAR() {
		static_assert(field_signatures[jField<F>("SCROLL_BAR")] != -1);
		return sat<F>("SCROLL_BAR");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto SCROLL_BAR_THUMB() {
		static_assert(field_signatures[jField<F>("SCROLL_BAR_THUMB")] != -1);
		return sat<F>("SCROLL_BAR_THUMB");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto SCROLL_BAR_TRACK() {
		static_assert(field_signatures[jField<F>("SCROLL_BAR_TRACK")] != -1);
		return sat<F>("SCROLL_BAR_TRACK");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto SCROLL_PANE() {
		static_assert(field_signatures[jField<F>("SCROLL_PANE")] != -1);
		return sat<F>("SCROLL_PANE");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto SEPARATOR() {
		static_assert(field_signatures[jField<F>("SEPARATOR")] != -1);
		return sat<F>("SEPARATOR");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto SLIDER() {
		static_assert(field_signatures[jField<F>("SLIDER")] != -1);
		return sat<F>("SLIDER");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto SLIDER_THUMB() {
		static_assert(field_signatures[jField<F>("SLIDER_THUMB")] != -1);
		return sat<F>("SLIDER_THUMB");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto SLIDER_TRACK() {
		static_assert(field_signatures[jField<F>("SLIDER_TRACK")] != -1);
		return sat<F>("SLIDER_TRACK");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto SPINNER() {
		static_assert(field_signatures[jField<F>("SPINNER")] != -1);
		return sat<F>("SPINNER");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto SPLIT_PANE() {
		static_assert(field_signatures[jField<F>("SPLIT_PANE")] != -1);
		return sat<F>("SPLIT_PANE");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto SPLIT_PANE_DIVIDER() {
		static_assert(field_signatures[jField<F>("SPLIT_PANE_DIVIDER")] != -1);
		return sat<F>("SPLIT_PANE_DIVIDER");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto TABBED_PANE() {
		static_assert(field_signatures[jField<F>("TABBED_PANE")] != -1);
		return sat<F>("TABBED_PANE");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto TABBED_PANE_CONTENT() {
		static_assert(field_signatures[jField<F>("TABBED_PANE_CONTENT")] != -1);
		return sat<F>("TABBED_PANE_CONTENT");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto TABBED_PANE_TAB() {
		static_assert(field_signatures[jField<F>("TABBED_PANE_TAB")] != -1);
		return sat<F>("TABBED_PANE_TAB");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto TABBED_PANE_TAB_AREA() {
		static_assert(field_signatures[jField<F>("TABBED_PANE_TAB_AREA")] != -1);
		return sat<F>("TABBED_PANE_TAB_AREA");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto TABLE() {
		static_assert(field_signatures[jField<F>("TABLE")] != -1);
		return sat<F>("TABLE");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto TABLE_HEADER() {
		static_assert(field_signatures[jField<F>("TABLE_HEADER")] != -1);
		return sat<F>("TABLE_HEADER");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto TEXT_AREA() {
		static_assert(field_signatures[jField<F>("TEXT_AREA")] != -1);
		return sat<F>("TEXT_AREA");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto TEXT_FIELD() {
		static_assert(field_signatures[jField<F>("TEXT_FIELD")] != -1);
		return sat<F>("TEXT_FIELD");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto TEXT_PANE() {
		static_assert(field_signatures[jField<F>("TEXT_PANE")] != -1);
		return sat<F>("TEXT_PANE");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto TOGGLE_BUTTON() {
		static_assert(field_signatures[jField<F>("TOGGLE_BUTTON")] != -1);
		return sat<F>("TOGGLE_BUTTON");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto TOOL_BAR() {
		static_assert(field_signatures[jField<F>("TOOL_BAR")] != -1);
		return sat<F>("TOOL_BAR");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto TOOL_BAR_CONTENT() {
		static_assert(field_signatures[jField<F>("TOOL_BAR_CONTENT")] != -1);
		return sat<F>("TOOL_BAR_CONTENT");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto TOOL_BAR_DRAG_WINDOW() {
		static_assert(field_signatures[jField<F>("TOOL_BAR_DRAG_WINDOW")] != -1);
		return sat<F>("TOOL_BAR_DRAG_WINDOW");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto TOOL_BAR_SEPARATOR() {
		static_assert(field_signatures[jField<F>("TOOL_BAR_SEPARATOR")] != -1);
		return sat<F>("TOOL_BAR_SEPARATOR");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto TOOL_TIP() {
		static_assert(field_signatures[jField<F>("TOOL_TIP")] != -1);
		return sat<F>("TOOL_TIP");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto TREE() {
		static_assert(field_signatures[jField<F>("TREE")] != -1);
		return sat<F>("TREE");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto TREE_CELL() {
		static_assert(field_signatures[jField<F>("TREE_CELL")] != -1);
		return sat<F>("TREE_CELL");
	}

	template<typename F = ::javax::swing::plaf::synth::Region>
	static auto VIEWPORT() {
		static_assert(field_signatures[jField<F>("VIEWPORT")] != -1);
		return sat<F>("VIEWPORT");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jboolean()>("isSubregion"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSubregion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isSubregion")] != -1);
		return call<R>("isSubregion", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
