#ifndef javax_swing_plaf_synth_SynthGraphicsUtils_HPP
#define javax_swing_plaf_synth_SynthGraphicsUtils_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::synth::SynthGraphicsUtils : public jObject<::javax::swing::plaf::synth::SynthGraphicsUtils, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_synth / "SynthGraphicsUtils";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jint(::javax::swing::plaf::synth::SynthContext, ::java::awt::Font, ::java::awt::FontMetrics, ::java::lang::String)>("computeStringWidth"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::lang::Object, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("drawLine"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::lang::Object, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::java::lang::Object)>("drawLine"), //
		jMethod<::jint(::javax::swing::plaf::synth::SynthContext)>("getMaximumCharHeight"), //
		jMethod<::java::awt::Dimension(::javax::swing::plaf::synth::SynthContext, ::java::awt::Font, ::java::lang::String, ::javax::swing::Icon, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("getMaximumSize"), //
		jMethod<::java::awt::Dimension(::javax::swing::plaf::synth::SynthContext, ::java::awt::Font, ::java::lang::String, ::javax::swing::Icon, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("getMinimumSize"), //
		jMethod<::java::awt::Dimension(::javax::swing::plaf::synth::SynthContext, ::java::awt::Font, ::java::lang::String, ::javax::swing::Icon, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("getPreferredSize"), //
		jMethod<::java::lang::String(::javax::swing::plaf::synth::SynthContext, ::java::awt::FontMetrics, ::java::lang::String, ::javax::swing::Icon, ::jint, ::jint, ::jint, ::jint, ::java::awt::Rectangle, ::java::awt::Rectangle, ::java::awt::Rectangle, ::jint)>("layoutText"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::java::lang::String, ::jint, ::jint, ::jint)>("paintText"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::java::lang::String, ::java::awt::Rectangle, ::jint)>("paintText"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::java::lang::String, ::javax::swing::Icon, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("paintText"), //
	};

	template<typename R = ::jint, typename... Args>
	auto computeStringWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("computeStringWidth")] != -1);
		return call<R>("computeStringWidth", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawLine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("drawLine")] != -1);
		return call<R>("drawLine", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaximumCharHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaximumCharHeight")] != -1);
		return call<R>("getMaximumCharHeight", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMaximumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaximumSize")] != -1);
		return call<R>("getMaximumSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinimumSize")] != -1);
		return call<R>("getMinimumSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreferredSize")] != -1);
		return call<R>("getPreferredSize", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto layoutText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("layoutText")] != -1);
		return call<R>("layoutText", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintText")] != -1);
		return call<R>("paintText", forward<Args>(args)...);
	}

};

#endif
