#ifndef javax_swing_plaf_synth_ColorType_HPP
#define javax_swing_plaf_synth_ColorType_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::synth::ColorType : public jObject<::javax::swing::plaf::synth::ColorType, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_synth / "ColorType";

	constexpr static Enume field_signatures{
		jField<::javax::swing::plaf::synth::ColorType>("BACKGROUND"), //
		jField<::javax::swing::plaf::synth::ColorType>("FOCUS"), //
		jField<::javax::swing::plaf::synth::ColorType>("FOREGROUND"), //
		jField<::jint>("MAX_COUNT"), //
		jField<::javax::swing::plaf::synth::ColorType>("TEXT_BACKGROUND"), //
		jField<::javax::swing::plaf::synth::ColorType>("TEXT_FOREGROUND"), //
	};

	template<typename F = ::javax::swing::plaf::synth::ColorType>
	static auto BACKGROUND() {
		static_assert(field_signatures[jField<F>("BACKGROUND")] != -1);
		return sat<F>("BACKGROUND");
	}

	template<typename F = ::javax::swing::plaf::synth::ColorType>
	static auto FOCUS() {
		static_assert(field_signatures[jField<F>("FOCUS")] != -1);
		return sat<F>("FOCUS");
	}

	template<typename F = ::javax::swing::plaf::synth::ColorType>
	static auto FOREGROUND() {
		static_assert(field_signatures[jField<F>("FOREGROUND")] != -1);
		return sat<F>("FOREGROUND");
	}

	template<typename F = ::jint>
	static auto MAX_COUNT() {
		static_assert(field_signatures[jField<F>("MAX_COUNT")] != -1);
		return sat<F>("MAX_COUNT");
	}

	template<typename F = ::javax::swing::plaf::synth::ColorType>
	static auto TEXT_BACKGROUND() {
		static_assert(field_signatures[jField<F>("TEXT_BACKGROUND")] != -1);
		return sat<F>("TEXT_BACKGROUND");
	}

	template<typename F = ::javax::swing::plaf::synth::ColorType>
	static auto TEXT_FOREGROUND() {
		static_assert(field_signatures[jField<F>("TEXT_FOREGROUND")] != -1);
		return sat<F>("TEXT_FOREGROUND");
	}

	constexpr static Enume method_signatures{
		jMethod<::jint()>("getID"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getID")] != -1);
		return call<R>("getID", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
