#ifndef javax_swing_plaf_synth_SynthLookAndFeel_HPP
#define javax_swing_plaf_synth_SynthLookAndFeel_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::synth::SynthLookAndFeel : public jObject<::javax::swing::plaf::synth::SynthLookAndFeel, ::javax::swing::plaf::basic::BasicLookAndFeel> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_synth / "SynthLookAndFeel";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::swing::plaf::ComponentUI(::javax::swing::JComponent)>("createUI"), //
		jMethod<::javax::swing::UIDefaults()>("getDefaults"), //
		jMethod<::java::lang::String()>("getDescription"), //
		jMethod<::java::lang::String()>("getID"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::javax::swing::plaf::synth::Region(::javax::swing::JComponent)>("getRegion"), //
		jMethod<::javax::swing::plaf::synth::SynthStyle(::javax::swing::JComponent, ::javax::swing::plaf::synth::Region)>("getStyle"), //
		jMethod<::javax::swing::plaf::synth::SynthStyleFactory()>("getStyleFactory"), //
		jMethod<::jvoid()>("initialize"), //
		jMethod<::jboolean()>("isNativeLookAndFeel"), //
		jMethod<::jboolean()>("isSupportedLookAndFeel"), //
		jMethod<::jvoid(::java::io::InputStream, ::java::lang::Class)>("load"), //
		jMethod<::jvoid(::java::net::URL)>("load"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthStyleFactory)>("setStyleFactory"), //
		jMethod<::jboolean()>("shouldUpdateStyleOnAncestorChanged"), //
		jMethod<::jvoid()>("uninitialize"), //
		jMethod<::jvoid(::java::awt::Component)>("updateStyles"), //
	};

	template<typename R = ::javax::swing::plaf::ComponentUI, typename... Args>
	static auto createUI(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createUI")] != -1);
		return scall<R>("createUI", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::UIDefaults, typename... Args>
	auto getDefaults(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaults")] != -1);
		return call<R>("getDefaults", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDescription")] != -1);
		return call<R>("getDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getID")] != -1);
		return call<R>("getID", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::synth::Region, typename... Args>
	static auto getRegion(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRegion")] != -1);
		return scall<R>("getRegion", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::synth::SynthStyle, typename... Args>
	static auto getStyle(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStyle")] != -1);
		return scall<R>("getStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::synth::SynthStyleFactory, typename... Args>
	static auto getStyleFactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStyleFactory")] != -1);
		return scall<R>("getStyleFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto initialize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initialize")] != -1);
		return call<R>("initialize", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isNativeLookAndFeel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isNativeLookAndFeel")] != -1);
		return call<R>("isNativeLookAndFeel", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSupportedLookAndFeel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSupportedLookAndFeel")] != -1);
		return call<R>("isSupportedLookAndFeel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto load(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("load")] != -1);
		return call<R>("load", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setStyleFactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setStyleFactory")] != -1);
		return scall<R>("setStyleFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto shouldUpdateStyleOnAncestorChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shouldUpdateStyleOnAncestorChanged")] != -1);
		return call<R>("shouldUpdateStyleOnAncestorChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto uninitialize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("uninitialize")] != -1);
		return call<R>("uninitialize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto updateStyles(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateStyles")] != -1);
		return scall<R>("updateStyles", std::forward<Args>(args)...);
	}

};

#endif
