#ifndef javax_swing_plaf_synth_SynthStyle_HPP
#define javax_swing_plaf_synth_SynthStyle_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::synth::SynthStyle : public jObject<::javax::swing::plaf::synth::SynthStyle, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_synth / "SynthStyle";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::Object(::javax::swing::plaf::synth::SynthContext, ::java::lang::Object)>("get"), //
		jMethod<::jboolean(::javax::swing::plaf::synth::SynthContext, ::java::lang::Object, ::jboolean)>("getBoolean"), //
		jMethod<::java::awt::Color(::javax::swing::plaf::synth::SynthContext, ::javax::swing::plaf::synth::ColorType)>("getColor"), //
		jMethod<::java::awt::Font(::javax::swing::plaf::synth::SynthContext)>("getFont"), //
		jMethod<::javax::swing::plaf::synth::SynthGraphicsUtils(::javax::swing::plaf::synth::SynthContext)>("getGraphicsUtils"), //
		jMethod<::javax::swing::Icon(::javax::swing::plaf::synth::SynthContext, ::java::lang::Object)>("getIcon"), //
		jMethod<::java::awt::Insets(::javax::swing::plaf::synth::SynthContext, ::java::awt::Insets)>("getInsets"), //
		jMethod<::jint(::javax::swing::plaf::synth::SynthContext, ::java::lang::Object, ::jint)>("getInt"), //
		jMethod<::javax::swing::plaf::synth::SynthPainter(::javax::swing::plaf::synth::SynthContext)>("getPainter"), //
		jMethod<::java::lang::String(::javax::swing::plaf::synth::SynthContext, ::java::lang::Object, ::java::lang::String)>("getString"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext)>("installDefaults"), //
		jMethod<::jboolean(::javax::swing::plaf::synth::SynthContext)>("isOpaque"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext)>("uninstallDefaults"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("get")] != -1);
		return call<R>("get", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getBoolean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBoolean")] != -1);
		return call<R>("getBoolean", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColor")] != -1);
		return call<R>("getColor", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Font, typename... Args>
	auto getFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFont")] != -1);
		return call<R>("getFont", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::synth::SynthGraphicsUtils, typename... Args>
	auto getGraphicsUtils(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getGraphicsUtils")] != -1);
		return call<R>("getGraphicsUtils", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getIcon")] != -1);
		return call<R>("getIcon", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Insets, typename... Args>
	auto getInsets(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInsets")] != -1);
		return call<R>("getInsets", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInt")] != -1);
		return call<R>("getInt", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::synth::SynthPainter, typename... Args>
	auto getPainter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPainter")] != -1);
		return call<R>("getPainter", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getString")] != -1);
		return call<R>("getString", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto installDefaults(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("installDefaults")] != -1);
		return call<R>("installDefaults", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isOpaque(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isOpaque")] != -1);
		return call<R>("isOpaque", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto uninstallDefaults(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("uninstallDefaults")] != -1);
		return call<R>("uninstallDefaults", forward<Args>(args)...);
	}

};

#endif
