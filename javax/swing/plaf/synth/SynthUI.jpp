#ifndef javax_swing_plaf_synth_SynthUI_HPP
#define javax_swing_plaf_synth_SynthUI_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::synth::SynthUI : public jObject<::javax::swing::plaf::synth::SynthUI, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_synth / "SynthUI";

	constexpr static Enume field_signatures{
		jField<::jint>("DEFAULT"), //
		jField<::jint>("DISABLED"), //
		jField<::jint>("ENABLED"), //
		jField<::jint>("FOCUSED"), //
		jField<::jint>("MOUSE_OVER"), //
		jField<::jint>("PRESSED"), //
		jField<::jint>("SELECTED"), //
	};

	template<typename F = ::jint>
	static auto DEFAULT() {
		static_assert(field_signatures[jField<F>("DEFAULT")] != -1);
		return sat<F>("DEFAULT");
	}

	template<typename F = ::jint>
	static auto DISABLED() {
		static_assert(field_signatures[jField<F>("DISABLED")] != -1);
		return sat<F>("DISABLED");
	}

	template<typename F = ::jint>
	static auto ENABLED() {
		static_assert(field_signatures[jField<F>("ENABLED")] != -1);
		return sat<F>("ENABLED");
	}

	template<typename F = ::jint>
	static auto FOCUSED() {
		static_assert(field_signatures[jField<F>("FOCUSED")] != -1);
		return sat<F>("FOCUSED");
	}

	template<typename F = ::jint>
	static auto MOUSE_OVER() {
		static_assert(field_signatures[jField<F>("MOUSE_OVER")] != -1);
		return sat<F>("MOUSE_OVER");
	}

	template<typename F = ::jint>
	static auto PRESSED() {
		static_assert(field_signatures[jField<F>("PRESSED")] != -1);
		return sat<F>("PRESSED");
	}

	template<typename F = ::jint>
	static auto SELECTED() {
		static_assert(field_signatures[jField<F>("SELECTED")] != -1);
		return sat<F>("SELECTED");
	}

	constexpr static Enume method_signatures{
		jMethod<::javax::swing::plaf::synth::SynthContext(::javax::swing::JComponent)>("getContext"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintBorder"), //
	};

	template<typename R = ::javax::swing::plaf::synth::SynthContext, typename... Args>
	auto getContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContext")] != -1);
		return call<R>("getContext", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paintBorder")] != -1);
		return call<R>("paintBorder", std::forward<Args>(args)...);
	}

};

#endif
