#ifndef javax_swing_plaf_basic_BasicScrollBarUI_HPP
#define javax_swing_plaf_basic_BasicScrollBarUI_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::basic::BasicScrollBarUI : public jObject<::javax::swing::plaf::basic::BasicScrollBarUI, ::javax::swing::plaf::ScrollBarUI> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_basic / "BasicScrollBarUI";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::lang::String, ::java::awt::Component)>("addLayoutComponent"), //
		jMethod<::javax::swing::plaf::ComponentUI(::javax::swing::JComponent)>("createUI"), //
		jMethod<::java::awt::Dimension(::javax::swing::JComponent)>("getMaximumSize"), //
		jMethod<::java::awt::Dimension(::javax::swing::JComponent)>("getPreferredSize"), //
		jMethod<::jboolean()>("getSupportsAbsolutePositioning"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("installUI"), //
		jMethod<::jboolean()>("isThumbRollover"), //
		jMethod<::jvoid(::java::awt::Container)>("layoutContainer"), //
		jMethod<::java::awt::Dimension(::java::awt::Container)>("minimumLayoutSize"), //
		jMethod<::jvoid(::java::awt::Graphics, ::javax::swing::JComponent)>("paint"), //
		jMethod<::java::awt::Dimension(::java::awt::Container)>("preferredLayoutSize"), //
		jMethod<::jvoid(::java::awt::Component)>("removeLayoutComponent"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("uninstallUI"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addLayoutComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addLayoutComponent")] != -1);
		return call<R>("addLayoutComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ComponentUI, typename... Args>
	static auto createUI(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createUI")] != -1);
		return scall<R>("createUI", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMaximumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaximumSize")] != -1);
		return call<R>("getMaximumSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreferredSize")] != -1);
		return call<R>("getPreferredSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getSupportsAbsolutePositioning(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSupportsAbsolutePositioning")] != -1);
		return call<R>("getSupportsAbsolutePositioning", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto installUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("installUI")] != -1);
		return call<R>("installUI", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isThumbRollover(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isThumbRollover")] != -1);
		return call<R>("isThumbRollover", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto layoutContainer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("layoutContainer")] != -1);
		return call<R>("layoutContainer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto minimumLayoutSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("minimumLayoutSize")] != -1);
		return call<R>("minimumLayoutSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto preferredLayoutSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("preferredLayoutSize")] != -1);
		return call<R>("preferredLayoutSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeLayoutComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeLayoutComponent")] != -1);
		return call<R>("removeLayoutComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto uninstallUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("uninstallUI")] != -1);
		return call<R>("uninstallUI", std::forward<Args>(args)...);
	}

};

#endif
