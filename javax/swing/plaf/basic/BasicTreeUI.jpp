#ifndef javax_swing_plaf_basic_BasicTreeUI_HPP
#define javax_swing_plaf_basic_BasicTreeUI_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::basic::BasicTreeUI : public jObject<::javax::swing::plaf::basic::BasicTreeUI, ::javax::swing::plaf::TreeUI> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_basic / "BasicTreeUI";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::javax::swing::JTree)>("cancelEditing"), //
		jMethod<::javax::swing::plaf::ComponentUI(::javax::swing::JComponent)>("createUI"), //
		jMethod<::jint(::javax::swing::JComponent, ::jint, ::jint)>("getBaseline"), //
		jMethod<::java::awt::Component$BaselineResizeBehavior(::javax::swing::JComponent)>("getBaselineResizeBehavior"), //
		jMethod<::javax::swing::tree::TreePath(::javax::swing::JTree, ::jint, ::jint)>("getClosestPathForLocation"), //
		jMethod<::javax::swing::Icon()>("getCollapsedIcon"), //
		jMethod<::javax::swing::tree::TreePath(::javax::swing::JTree)>("getEditingPath"), //
		jMethod<::javax::swing::Icon()>("getExpandedIcon"), //
		jMethod<::jint()>("getLeftChildIndent"), //
		jMethod<::java::awt::Dimension(::javax::swing::JComponent)>("getMaximumSize"), //
		jMethod<::java::awt::Dimension(::javax::swing::JComponent)>("getMinimumSize"), //
		jMethod<::java::awt::Rectangle(::javax::swing::JTree, ::javax::swing::tree::TreePath)>("getPathBounds"), //
		jMethod<::javax::swing::tree::TreePath(::javax::swing::JTree, ::jint)>("getPathForRow"), //
		jMethod<::java::awt::Dimension()>("getPreferredMinSize"), //
		jMethod<::java::awt::Dimension(::javax::swing::JComponent)>("getPreferredSize"), //
		jMethod<::java::awt::Dimension(::javax::swing::JComponent, ::jboolean)>("getPreferredSize"), //
		jMethod<::jint()>("getRightChildIndent"), //
		jMethod<::jint(::javax::swing::JTree)>("getRowCount"), //
		jMethod<::jint(::javax::swing::JTree, ::javax::swing::tree::TreePath)>("getRowForPath"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("installUI"), //
		jMethod<::jboolean(::javax::swing::JTree)>("isEditing"), //
		jMethod<::jvoid(::java::awt::Graphics, ::javax::swing::JComponent)>("paint"), //
		jMethod<::jvoid(::javax::swing::Icon)>("setCollapsedIcon"), //
		jMethod<::jvoid(::javax::swing::Icon)>("setExpandedIcon"), //
		jMethod<::jvoid(::jint)>("setLeftChildIndent"), //
		jMethod<::jvoid(::java::awt::Dimension)>("setPreferredMinSize"), //
		jMethod<::jvoid(::jint)>("setRightChildIndent"), //
		jMethod<::jvoid(::javax::swing::JTree, ::javax::swing::tree::TreePath)>("startEditingAtPath"), //
		jMethod<::jboolean(::javax::swing::JTree)>("stopEditing"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("uninstallUI"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto cancelEditing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cancelEditing")] != -1);
		return call<R>("cancelEditing", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ComponentUI, typename... Args>
	static auto createUI(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createUI")] != -1);
		return scall<R>("createUI", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBaseline(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBaseline")] != -1);
		return call<R>("getBaseline", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component$BaselineResizeBehavior, typename... Args>
	auto getBaselineResizeBehavior(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBaselineResizeBehavior")] != -1);
		return call<R>("getBaselineResizeBehavior", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreePath, typename... Args>
	auto getClosestPathForLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClosestPathForLocation")] != -1);
		return call<R>("getClosestPathForLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getCollapsedIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCollapsedIcon")] != -1);
		return call<R>("getCollapsedIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreePath, typename... Args>
	auto getEditingPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEditingPath")] != -1);
		return call<R>("getEditingPath", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getExpandedIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExpandedIcon")] != -1);
		return call<R>("getExpandedIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLeftChildIndent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLeftChildIndent")] != -1);
		return call<R>("getLeftChildIndent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMaximumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaximumSize")] != -1);
		return call<R>("getMaximumSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinimumSize")] != -1);
		return call<R>("getMinimumSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getPathBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPathBounds")] != -1);
		return call<R>("getPathBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreePath, typename... Args>
	auto getPathForRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPathForRow")] != -1);
		return call<R>("getPathForRow", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredMinSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreferredMinSize")] != -1);
		return call<R>("getPreferredMinSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreferredSize")] != -1);
		return call<R>("getPreferredSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRightChildIndent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRightChildIndent")] != -1);
		return call<R>("getRightChildIndent", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRowCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRowCount")] != -1);
		return call<R>("getRowCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRowForPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRowForPath")] != -1);
		return call<R>("getRowForPath", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto installUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("installUI")] != -1);
		return call<R>("installUI", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEditing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEditing")] != -1);
		return call<R>("isEditing", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCollapsedIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCollapsedIcon")] != -1);
		return call<R>("setCollapsedIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setExpandedIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setExpandedIcon")] != -1);
		return call<R>("setExpandedIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLeftChildIndent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLeftChildIndent")] != -1);
		return call<R>("setLeftChildIndent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPreferredMinSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPreferredMinSize")] != -1);
		return call<R>("setPreferredMinSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRightChildIndent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRightChildIndent")] != -1);
		return call<R>("setRightChildIndent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto startEditingAtPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("startEditingAtPath")] != -1);
		return call<R>("startEditingAtPath", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto stopEditing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stopEditing")] != -1);
		return call<R>("stopEditing", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto uninstallUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("uninstallUI")] != -1);
		return call<R>("uninstallUI", std::forward<Args>(args)...);
	}

};

#endif
