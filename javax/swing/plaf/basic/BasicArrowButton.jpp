#ifndef javax_swing_plaf_basic_BasicArrowButton_HPP
#define javax_swing_plaf_basic_BasicArrowButton_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::basic::BasicArrowButton : public jObject<::javax::swing::plaf::basic::BasicArrowButton, ::javax::swing::JButton> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_basic / "BasicArrowButton";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint)>(), //
		jConstructor<::jvoid(::jint, ::java::awt::Color, ::java::awt::Color, ::java::awt::Color, ::java::awt::Color)>(), //
		jMethod<::jint()>("getDirection"), //
		jMethod<::java::awt::Dimension()>("getMaximumSize"), //
		jMethod<::java::awt::Dimension()>("getMinimumSize"), //
		jMethod<::java::awt::Dimension()>("getPreferredSize"), //
		jMethod<::jboolean()>("isFocusTraversable"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paint"), //
		jMethod<::jvoid(::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::jboolean)>("paintTriangle"), //
		jMethod<::jvoid(::jint)>("setDirection"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getDirection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDirection")] != -1);
		return call<R>("getDirection", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMaximumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaximumSize")] != -1);
		return call<R>("getMaximumSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinimumSize")] != -1);
		return call<R>("getMinimumSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreferredSize")] != -1);
		return call<R>("getPreferredSize", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFocusTraversable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isFocusTraversable")] != -1);
		return call<R>("isFocusTraversable", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintTriangle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintTriangle")] != -1);
		return call<R>("paintTriangle", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDirection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDirection")] != -1);
		return call<R>("setDirection", forward<Args>(args)...);
	}

};

#endif
