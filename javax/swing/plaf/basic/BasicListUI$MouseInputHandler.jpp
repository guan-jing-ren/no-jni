#ifndef javax_swing_plaf_basic_BasicListUI$MouseInputHandler_HPP
#define javax_swing_plaf_basic_BasicListUI$MouseInputHandler_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::basic::BasicListUI$MouseInputHandler : public jObject<::javax::swing::plaf::basic::BasicListUI$MouseInputHandler, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_basic / "BasicListUI$MouseInputHandler";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::plaf::basic::BasicListUI)>(), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mouseClicked"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mouseDragged"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mouseEntered"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mouseExited"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mouseMoved"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mousePressed"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mouseReleased"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto mouseClicked(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mouseClicked")] != -1);
		return call<R>("mouseClicked", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mouseDragged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mouseDragged")] != -1);
		return call<R>("mouseDragged", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mouseEntered(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mouseEntered")] != -1);
		return call<R>("mouseEntered", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mouseExited(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mouseExited")] != -1);
		return call<R>("mouseExited", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mouseMoved(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mouseMoved")] != -1);
		return call<R>("mouseMoved", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mousePressed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mousePressed")] != -1);
		return call<R>("mousePressed", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mouseReleased(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mouseReleased")] != -1);
		return call<R>("mouseReleased", std::forward<Args>(args)...);
	}

};

#endif
