#ifndef javax_swing_plaf_basic_BasicSplitPaneDivider_HPP
#define javax_swing_plaf_basic_BasicSplitPaneDivider_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::basic::BasicSplitPaneDivider : public jObject<::javax::swing::plaf::basic::BasicSplitPaneDivider, ::java::awt::Container> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_basic / "BasicSplitPaneDivider";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::plaf::basic::BasicSplitPaneUI)>(), //
		jMethod<::javax::swing::plaf::basic::BasicSplitPaneUI()>("getBasicSplitPaneUI"), //
		jMethod<::javax::swing::border::Border()>("getBorder"), //
		jMethod<::jint()>("getDividerSize"), //
		jMethod<::java::awt::Insets()>("getInsets"), //
		jMethod<::java::awt::Dimension()>("getMinimumSize"), //
		jMethod<::java::awt::Dimension()>("getPreferredSize"), //
		jMethod<::jboolean()>("isMouseOver"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paint"), //
		jMethod<::jvoid(::java::beans::PropertyChangeEvent)>("propertyChange"), //
		jMethod<::jvoid(::javax::swing::plaf::basic::BasicSplitPaneUI)>("setBasicSplitPaneUI"), //
		jMethod<::jvoid(::javax::swing::border::Border)>("setBorder"), //
		jMethod<::jvoid(::jint)>("setDividerSize"), //
	};

	template<typename R = ::javax::swing::plaf::basic::BasicSplitPaneUI, typename... Args>
	auto getBasicSplitPaneUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBasicSplitPaneUI")] != -1);
		return call<R>("getBasicSplitPaneUI", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::border::Border, typename... Args>
	auto getBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBorder")] != -1);
		return call<R>("getBorder", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDividerSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDividerSize")] != -1);
		return call<R>("getDividerSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Insets, typename... Args>
	auto getInsets(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInsets")] != -1);
		return call<R>("getInsets", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinimumSize")] != -1);
		return call<R>("getMinimumSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreferredSize")] != -1);
		return call<R>("getPreferredSize", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isMouseOver(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isMouseOver")] != -1);
		return call<R>("isMouseOver", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto propertyChange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("propertyChange")] != -1);
		return call<R>("propertyChange", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBasicSplitPaneUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBasicSplitPaneUI")] != -1);
		return call<R>("setBasicSplitPaneUI", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBorder")] != -1);
		return call<R>("setBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDividerSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDividerSize")] != -1);
		return call<R>("setDividerSize", forward<Args>(args)...);
	}

};

#endif
