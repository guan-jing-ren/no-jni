#ifndef javax_swing_plaf_basic_BasicToolBarUI_HPP
#define javax_swing_plaf_basic_BasicToolBarUI_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::basic::BasicToolBarUI : public jObject<::javax::swing::plaf::basic::BasicToolBarUI, ::javax::swing::plaf::ToolBarUI> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_basic / "BasicToolBarUI";

	constexpr static Enume field_signatures{
		jField<::jint>("BOTTOM"), //
		jField<::jint>("CENTER"), //
		jField<::jint>("EAST"), //
		jField<::jint>("HORIZONTAL"), //
		jField<::jint>("LEADING"), //
		jField<::jint>("LEFT"), //
		jField<::jint>("NEXT"), //
		jField<::jint>("NORTH"), //
		jField<::jint>("NORTH_EAST"), //
		jField<::jint>("NORTH_WEST"), //
		jField<::jint>("PREVIOUS"), //
		jField<::jint>("RIGHT"), //
		jField<::jint>("SOUTH"), //
		jField<::jint>("SOUTH_EAST"), //
		jField<::jint>("SOUTH_WEST"), //
		jField<::jint>("TOP"), //
		jField<::jint>("TRAILING"), //
		jField<::jint>("VERTICAL"), //
		jField<::jint>("WEST"), //
	};

	template<typename F = ::jint>
	static auto BOTTOM() {
		static_assert(field_signatures[jField<F>("BOTTOM")] != -1);
		return sat<F>("BOTTOM");
	}

	template<typename F = ::jint>
	static auto CENTER() {
		static_assert(field_signatures[jField<F>("CENTER")] != -1);
		return sat<F>("CENTER");
	}

	template<typename F = ::jint>
	static auto EAST() {
		static_assert(field_signatures[jField<F>("EAST")] != -1);
		return sat<F>("EAST");
	}

	template<typename F = ::jint>
	static auto HORIZONTAL() {
		static_assert(field_signatures[jField<F>("HORIZONTAL")] != -1);
		return sat<F>("HORIZONTAL");
	}

	template<typename F = ::jint>
	static auto LEADING() {
		static_assert(field_signatures[jField<F>("LEADING")] != -1);
		return sat<F>("LEADING");
	}

	template<typename F = ::jint>
	static auto LEFT() {
		static_assert(field_signatures[jField<F>("LEFT")] != -1);
		return sat<F>("LEFT");
	}

	template<typename F = ::jint>
	static auto NEXT() {
		static_assert(field_signatures[jField<F>("NEXT")] != -1);
		return sat<F>("NEXT");
	}

	template<typename F = ::jint>
	static auto NORTH() {
		static_assert(field_signatures[jField<F>("NORTH")] != -1);
		return sat<F>("NORTH");
	}

	template<typename F = ::jint>
	static auto NORTH_EAST() {
		static_assert(field_signatures[jField<F>("NORTH_EAST")] != -1);
		return sat<F>("NORTH_EAST");
	}

	template<typename F = ::jint>
	static auto NORTH_WEST() {
		static_assert(field_signatures[jField<F>("NORTH_WEST")] != -1);
		return sat<F>("NORTH_WEST");
	}

	template<typename F = ::jint>
	static auto PREVIOUS() {
		static_assert(field_signatures[jField<F>("PREVIOUS")] != -1);
		return sat<F>("PREVIOUS");
	}

	template<typename F = ::jint>
	static auto RIGHT() {
		static_assert(field_signatures[jField<F>("RIGHT")] != -1);
		return sat<F>("RIGHT");
	}

	template<typename F = ::jint>
	static auto SOUTH() {
		static_assert(field_signatures[jField<F>("SOUTH")] != -1);
		return sat<F>("SOUTH");
	}

	template<typename F = ::jint>
	static auto SOUTH_EAST() {
		static_assert(field_signatures[jField<F>("SOUTH_EAST")] != -1);
		return sat<F>("SOUTH_EAST");
	}

	template<typename F = ::jint>
	static auto SOUTH_WEST() {
		static_assert(field_signatures[jField<F>("SOUTH_WEST")] != -1);
		return sat<F>("SOUTH_WEST");
	}

	template<typename F = ::jint>
	static auto TOP() {
		static_assert(field_signatures[jField<F>("TOP")] != -1);
		return sat<F>("TOP");
	}

	template<typename F = ::jint>
	static auto TRAILING() {
		static_assert(field_signatures[jField<F>("TRAILING")] != -1);
		return sat<F>("TRAILING");
	}

	template<typename F = ::jint>
	static auto VERTICAL() {
		static_assert(field_signatures[jField<F>("VERTICAL")] != -1);
		return sat<F>("VERTICAL");
	}

	template<typename F = ::jint>
	static auto WEST() {
		static_assert(field_signatures[jField<F>("WEST")] != -1);
		return sat<F>("WEST");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jboolean(::java::awt::Component, ::java::awt::Point)>("canDock"), //
		jMethod<::javax::swing::plaf::ComponentUI(::javax::swing::JComponent)>("createUI"), //
		jMethod<::java::awt::Color()>("getDockingColor"), //
		jMethod<::java::awt::Color()>("getFloatingColor"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("installUI"), //
		jMethod<::jboolean()>("isFloating"), //
		jMethod<::jboolean()>("isRolloverBorders"), //
		jMethod<::jvoid(::java::awt::Color)>("setDockingColor"), //
		jMethod<::jvoid(::jboolean, ::java::awt::Point)>("setFloating"), //
		jMethod<::jvoid(::java::awt::Color)>("setFloatingColor"), //
		jMethod<::jvoid(::jint, ::jint)>("setFloatingLocation"), //
		jMethod<::jvoid(::jint)>("setOrientation"), //
		jMethod<::jvoid(::jboolean)>("setRolloverBorders"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("uninstallUI"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto canDock(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canDock")] != -1);
		return call<R>("canDock", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ComponentUI, typename... Args>
	static auto createUI(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createUI")] != -1);
		return scall<R>("createUI", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getDockingColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDockingColor")] != -1);
		return call<R>("getDockingColor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getFloatingColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFloatingColor")] != -1);
		return call<R>("getFloatingColor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto installUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("installUI")] != -1);
		return call<R>("installUI", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFloating(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFloating")] != -1);
		return call<R>("isFloating", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRolloverBorders(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isRolloverBorders")] != -1);
		return call<R>("isRolloverBorders", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDockingColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDockingColor")] != -1);
		return call<R>("setDockingColor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFloating(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFloating")] != -1);
		return call<R>("setFloating", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFloatingColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFloatingColor")] != -1);
		return call<R>("setFloatingColor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFloatingLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFloatingLocation")] != -1);
		return call<R>("setFloatingLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOrientation")] != -1);
		return call<R>("setOrientation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRolloverBorders(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRolloverBorders")] != -1);
		return call<R>("setRolloverBorders", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto uninstallUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("uninstallUI")] != -1);
		return call<R>("uninstallUI", std::forward<Args>(args)...);
	}

};

#endif
