#ifndef javax_swing_plaf_basic_BasicToolBarUI_HPP
#define javax_swing_plaf_basic_BasicToolBarUI_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::basic::BasicToolBarUI : public jObject<::javax::swing::plaf::basic::BasicToolBarUI, ::javax::swing::plaf::ToolBarUI> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_basic / "BasicToolBarUI";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jboolean(::java::awt::Component, ::java::awt::Point)>("canDock"), //
		jMethod<::javax::swing::plaf::ComponentUI(::javax::swing::JComponent)>("createUI"), //
		jMethod<::java::awt::Color()>("getDockingColor"), //
		jMethod<::java::awt::Color()>("getFloatingColor"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("installUI"), //
		jMethod<::jboolean()>("isFloating"), //
		jMethod<::jboolean()>("isRolloverBorders"), //
		jMethod<::jvoid(::java::awt::Color)>("setDockingColor"), //
		jMethod<::jvoid(::jboolean, ::java::awt::Point)>("setFloating"), //
		jMethod<::jvoid(::java::awt::Color)>("setFloatingColor"), //
		jMethod<::jvoid(::jint, ::jint)>("setFloatingLocation"), //
		jMethod<::jvoid(::jint)>("setOrientation"), //
		jMethod<::jvoid(::jboolean)>("setRolloverBorders"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("uninstallUI"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto canDock(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("canDock")] != -1);
		return call<R>("canDock", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ComponentUI, typename... Args>
	static auto createUI(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createUI")] != -1);
		return scall<R>("createUI", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getDockingColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDockingColor")] != -1);
		return call<R>("getDockingColor", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getFloatingColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFloatingColor")] != -1);
		return call<R>("getFloatingColor", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto installUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("installUI")] != -1);
		return call<R>("installUI", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFloating(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isFloating")] != -1);
		return call<R>("isFloating", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRolloverBorders(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isRolloverBorders")] != -1);
		return call<R>("isRolloverBorders", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDockingColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDockingColor")] != -1);
		return call<R>("setDockingColor", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFloating(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFloating")] != -1);
		return call<R>("setFloating", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFloatingColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFloatingColor")] != -1);
		return call<R>("setFloatingColor", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFloatingLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFloatingLocation")] != -1);
		return call<R>("setFloatingLocation", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setOrientation")] != -1);
		return call<R>("setOrientation", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRolloverBorders(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setRolloverBorders")] != -1);
		return call<R>("setRolloverBorders", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto uninstallUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("uninstallUI")] != -1);
		return call<R>("uninstallUI", forward<Args>(args)...);
	}

};

#endif
