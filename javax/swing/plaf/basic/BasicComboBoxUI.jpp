#ifndef javax_swing_plaf_basic_BasicComboBoxUI_HPP
#define javax_swing_plaf_basic_BasicComboBoxUI_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::basic::BasicComboBoxUI : public jObject<::javax::swing::plaf::basic::BasicComboBoxUI, ::javax::swing::plaf::ComboBoxUI> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_basic / "BasicComboBoxUI";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid()>("addEditor"), //
		jMethod<::jvoid()>("configureArrowButton"), //
		jMethod<::javax::swing::plaf::ComponentUI(::javax::swing::JComponent)>("createUI"), //
		jMethod<::javax::accessibility::Accessible(::javax::swing::JComponent, ::jint)>("getAccessibleChild"), //
		jMethod<::jint(::javax::swing::JComponent)>("getAccessibleChildrenCount"), //
		jMethod<::jint(::javax::swing::JComponent, ::jint, ::jint)>("getBaseline"), //
		jMethod<::java::awt::Component$BaselineResizeBehavior(::javax::swing::JComponent)>("getBaselineResizeBehavior"), //
		jMethod<::java::awt::Dimension(::javax::swing::JComponent)>("getMaximumSize"), //
		jMethod<::java::awt::Dimension(::javax::swing::JComponent)>("getMinimumSize"), //
		jMethod<::java::awt::Dimension(::javax::swing::JComponent)>("getPreferredSize"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("installUI"), //
		jMethod<::jboolean(::javax::swing::JComboBox)>("isFocusTraversable"), //
		jMethod<::jboolean(::javax::swing::JComboBox)>("isPopupVisible"), //
		jMethod<::jvoid(::java::awt::Graphics, ::javax::swing::JComponent)>("paint"), //
		jMethod<::jvoid(::java::awt::Graphics, ::java::awt::Rectangle, ::jboolean)>("paintCurrentValue"), //
		jMethod<::jvoid(::java::awt::Graphics, ::java::awt::Rectangle, ::jboolean)>("paintCurrentValueBackground"), //
		jMethod<::jvoid()>("removeEditor"), //
		jMethod<::jvoid(::javax::swing::JComboBox, ::jboolean)>("setPopupVisible"), //
		jMethod<::jvoid()>("unconfigureArrowButton"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("uninstallUI"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addEditor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addEditor")] != -1);
		return call<R>("addEditor", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto configureArrowButton(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("configureArrowButton")] != -1);
		return call<R>("configureArrowButton", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ComponentUI, typename... Args>
	static auto createUI(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createUI")] != -1);
		return scall<R>("createUI", forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::Accessible, typename... Args>
	auto getAccessibleChild(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessibleChild")] != -1);
		return call<R>("getAccessibleChild", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAccessibleChildrenCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessibleChildrenCount")] != -1);
		return call<R>("getAccessibleChildrenCount", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBaseline(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBaseline")] != -1);
		return call<R>("getBaseline", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component$BaselineResizeBehavior, typename... Args>
	auto getBaselineResizeBehavior(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBaselineResizeBehavior")] != -1);
		return call<R>("getBaselineResizeBehavior", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMaximumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaximumSize")] != -1);
		return call<R>("getMaximumSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinimumSize")] != -1);
		return call<R>("getMinimumSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreferredSize")] != -1);
		return call<R>("getPreferredSize", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto installUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("installUI")] != -1);
		return call<R>("installUI", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFocusTraversable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isFocusTraversable")] != -1);
		return call<R>("isFocusTraversable", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPopupVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isPopupVisible")] != -1);
		return call<R>("isPopupVisible", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintCurrentValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintCurrentValue")] != -1);
		return call<R>("paintCurrentValue", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintCurrentValueBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintCurrentValueBackground")] != -1);
		return call<R>("paintCurrentValueBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeEditor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeEditor")] != -1);
		return call<R>("removeEditor", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPopupVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPopupVisible")] != -1);
		return call<R>("setPopupVisible", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unconfigureArrowButton(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("unconfigureArrowButton")] != -1);
		return call<R>("unconfigureArrowButton", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto uninstallUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("uninstallUI")] != -1);
		return call<R>("uninstallUI", forward<Args>(args)...);
	}

};

#endif
