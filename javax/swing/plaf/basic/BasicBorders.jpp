#ifndef javax_swing_plaf_basic_BasicBorders_HPP
#define javax_swing_plaf_basic_BasicBorders_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::basic::BasicBorders : public jObject<::javax::swing::plaf::basic::BasicBorders, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_basic / "BasicBorders";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::swing::border::Border()>("getButtonBorder"), //
		jMethod<::javax::swing::border::Border()>("getInternalFrameBorder"), //
		jMethod<::javax::swing::border::Border()>("getMenuBarBorder"), //
		jMethod<::javax::swing::border::Border()>("getProgressBarBorder"), //
		jMethod<::javax::swing::border::Border()>("getRadioButtonBorder"), //
		jMethod<::javax::swing::border::Border()>("getSplitPaneBorder"), //
		jMethod<::javax::swing::border::Border()>("getSplitPaneDividerBorder"), //
		jMethod<::javax::swing::border::Border()>("getTextFieldBorder"), //
		jMethod<::javax::swing::border::Border()>("getToggleButtonBorder"), //
	};

	template<typename R = ::javax::swing::border::Border, typename... Args>
	static auto getButtonBorder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getButtonBorder")] != -1);
		return scall<R>("getButtonBorder", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::border::Border, typename... Args>
	static auto getInternalFrameBorder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInternalFrameBorder")] != -1);
		return scall<R>("getInternalFrameBorder", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::border::Border, typename... Args>
	static auto getMenuBarBorder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMenuBarBorder")] != -1);
		return scall<R>("getMenuBarBorder", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::border::Border, typename... Args>
	static auto getProgressBarBorder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProgressBarBorder")] != -1);
		return scall<R>("getProgressBarBorder", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::border::Border, typename... Args>
	static auto getRadioButtonBorder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRadioButtonBorder")] != -1);
		return scall<R>("getRadioButtonBorder", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::border::Border, typename... Args>
	static auto getSplitPaneBorder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSplitPaneBorder")] != -1);
		return scall<R>("getSplitPaneBorder", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::border::Border, typename... Args>
	static auto getSplitPaneDividerBorder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSplitPaneDividerBorder")] != -1);
		return scall<R>("getSplitPaneDividerBorder", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::border::Border, typename... Args>
	static auto getTextFieldBorder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextFieldBorder")] != -1);
		return scall<R>("getTextFieldBorder", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::border::Border, typename... Args>
	static auto getToggleButtonBorder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getToggleButtonBorder")] != -1);
		return scall<R>("getToggleButtonBorder", std::forward<Args>(args)...);
	}

};

#endif
