#ifndef javax_swing_plaf_basic_BasicTextUI_HPP
#define javax_swing_plaf_basic_BasicTextUI_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::basic::BasicTextUI : public jObject<::javax::swing::plaf::basic::BasicTextUI, ::javax::swing::plaf::TextUI> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_basic / "BasicTextUI";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::swing::text::View(::javax::swing::text::Element)>("create"), //
		jMethod<::javax::swing::text::View(::javax::swing::text::Element, ::jint, ::jint)>("create"), //
		jMethod<::jvoid(::javax::swing::text::JTextComponent, ::jint, ::jint)>("damageRange"), //
		jMethod<::jvoid(::javax::swing::text::JTextComponent, ::jint, ::jint, ::javax::swing::text::Position$Bias, ::javax::swing::text::Position$Bias)>("damageRange"), //
		jMethod<::javax::swing::text::EditorKit(::javax::swing::text::JTextComponent)>("getEditorKit"), //
		jMethod<::java::awt::Dimension(::javax::swing::JComponent)>("getMaximumSize"), //
		jMethod<::java::awt::Dimension(::javax::swing::JComponent)>("getMinimumSize"), //
		jMethod<::jint(::javax::swing::text::JTextComponent, ::jint, ::javax::swing::text::Position$Bias, ::jint, ::javax::swing::text::Position$Bias *)>("getNextVisualPositionFrom"), //
		jMethod<::java::awt::Dimension(::javax::swing::JComponent)>("getPreferredSize"), //
		jMethod<::javax::swing::text::View(::javax::swing::text::JTextComponent)>("getRootView"), //
		jMethod<::java::lang::String(::javax::swing::text::JTextComponent, ::java::awt::Point)>("getToolTipText"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("installUI"), //
		jMethod<::java::awt::Rectangle(::javax::swing::text::JTextComponent, ::jint)>("modelToView"), //
		jMethod<::java::awt::Rectangle(::javax::swing::text::JTextComponent, ::jint, ::javax::swing::text::Position$Bias)>("modelToView"), //
		jMethod<::jvoid(::java::awt::Graphics, ::javax::swing::JComponent)>("paint"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("uninstallUI"), //
		jMethod<::jvoid(::java::awt::Graphics, ::javax::swing::JComponent)>("update"), //
		jMethod<::jint(::javax::swing::text::JTextComponent, ::java::awt::Point)>("viewToModel"), //
		jMethod<::jint(::javax::swing::text::JTextComponent, ::java::awt::Point, ::javax::swing::text::Position$Bias *)>("viewToModel"), //
	};

	template<typename R = ::javax::swing::text::View, typename... Args>
	auto create(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("create")] != -1);
		return call<R>("create", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto damageRange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("damageRange")] != -1);
		return call<R>("damageRange", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::EditorKit, typename... Args>
	auto getEditorKit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getEditorKit")] != -1);
		return call<R>("getEditorKit", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMaximumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaximumSize")] != -1);
		return call<R>("getMaximumSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinimumSize")] != -1);
		return call<R>("getMinimumSize", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNextVisualPositionFrom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNextVisualPositionFrom")] != -1);
		return call<R>("getNextVisualPositionFrom", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreferredSize")] != -1);
		return call<R>("getPreferredSize", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::View, typename... Args>
	auto getRootView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRootView")] != -1);
		return call<R>("getRootView", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getToolTipText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getToolTipText")] != -1);
		return call<R>("getToolTipText", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto installUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("installUI")] != -1);
		return call<R>("installUI", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto modelToView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("modelToView")] != -1);
		return call<R>("modelToView", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto uninstallUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("uninstallUI")] != -1);
		return call<R>("uninstallUI", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto update(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("update")] != -1);
		return call<R>("update", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto viewToModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("viewToModel")] != -1);
		return call<R>("viewToModel", forward<Args>(args)...);
	}

};

#endif
