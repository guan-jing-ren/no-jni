#ifndef javax_swing_plaf_basic_BasicSliderUI$ScrollListener_HPP
#define javax_swing_plaf_basic_BasicSliderUI$ScrollListener_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::basic::BasicSliderUI$ScrollListener : public jObject<::javax::swing::plaf::basic::BasicSliderUI$ScrollListener, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_basic / "BasicSliderUI$ScrollListener";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::plaf::basic::BasicSliderUI)>(), //
		jConstructor<::jvoid(::javax::swing::plaf::basic::BasicSliderUI, ::jint, ::jboolean)>(), //
		jMethod<::jvoid(::java::awt::event::ActionEvent)>("actionPerformed"), //
		jMethod<::jvoid(::jint)>("setDirection"), //
		jMethod<::jvoid(::jboolean)>("setScrollByBlock"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto actionPerformed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("actionPerformed")] != -1);
		return call<R>("actionPerformed", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDirection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDirection")] != -1);
		return call<R>("setDirection", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setScrollByBlock(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setScrollByBlock")] != -1);
		return call<R>("setScrollByBlock", forward<Args>(args)...);
	}

};

#endif
