#ifndef javax_swing_plaf_basic_BasicDirectoryModel_HPP
#define javax_swing_plaf_basic_BasicDirectoryModel_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::basic::BasicDirectoryModel : public jObject<::javax::swing::plaf::basic::BasicDirectoryModel, ::javax::swing::AbstractListModel> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_basic / "BasicDirectoryModel";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::JFileChooser)>(), //
		jMethod<::jvoid(::java::beans::PropertyChangeListener)>("addPropertyChangeListener"), //
		jMethod<::jboolean(::java::lang::Object)>("contains"), //
		jMethod<::jvoid()>("fireContentsChanged"), //
		jMethod<::java::util::Vector()>("getDirectories"), //
		jMethod<::java::lang::Object(::jint)>("getElementAt"), //
		jMethod<::java::util::Vector()>("getFiles"), //
		jMethod<::java::beans::PropertyChangeListener *()>("getPropertyChangeListeners"), //
		jMethod<::jint()>("getSize"), //
		jMethod<::jint(::java::lang::Object)>("indexOf"), //
		jMethod<::jvoid(::javax::swing::event::ListDataEvent)>("intervalAdded"), //
		jMethod<::jvoid(::javax::swing::event::ListDataEvent)>("intervalRemoved"), //
		jMethod<::jvoid()>("invalidateFileCache"), //
		jMethod<::jvoid(::java::beans::PropertyChangeEvent)>("propertyChange"), //
		jMethod<::jvoid(::java::beans::PropertyChangeListener)>("removePropertyChangeListener"), //
		jMethod<::jboolean(::java::io::File, ::java::io::File)>("renameFile"), //
		jMethod<::jvoid()>("validateFileCache"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addPropertyChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addPropertyChangeListener")] != -1);
		return call<R>("addPropertyChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto contains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("contains")] != -1);
		return call<R>("contains", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fireContentsChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fireContentsChanged")] != -1);
		return call<R>("fireContentsChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Vector, typename... Args>
	auto getDirectories(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDirectories")] != -1);
		return call<R>("getDirectories", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getElementAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getElementAt")] != -1);
		return call<R>("getElementAt", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Vector, typename... Args>
	auto getFiles(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFiles")] != -1);
		return call<R>("getFiles", std::forward<Args>(args)...);
	}

	template<typename R = ::java::beans::PropertyChangeListener *, typename... Args>
	auto getPropertyChangeListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPropertyChangeListeners")] != -1);
		return call<R>("getPropertyChangeListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return call<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto indexOf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("indexOf")] != -1);
		return call<R>("indexOf", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto intervalAdded(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("intervalAdded")] != -1);
		return call<R>("intervalAdded", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto intervalRemoved(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("intervalRemoved")] != -1);
		return call<R>("intervalRemoved", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto invalidateFileCache(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidateFileCache")] != -1);
		return call<R>("invalidateFileCache", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto propertyChange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("propertyChange")] != -1);
		return call<R>("propertyChange", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removePropertyChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removePropertyChangeListener")] != -1);
		return call<R>("removePropertyChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto renameFile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("renameFile")] != -1);
		return call<R>("renameFile", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto validateFileCache(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("validateFileCache")] != -1);
		return call<R>("validateFileCache", std::forward<Args>(args)...);
	}

};

#endif
