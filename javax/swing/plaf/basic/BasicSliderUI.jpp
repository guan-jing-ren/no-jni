#ifndef javax_swing_plaf_basic_BasicSliderUI_HPP
#define javax_swing_plaf_basic_BasicSliderUI_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::basic::BasicSliderUI : public jObject<::javax::swing::plaf::basic::BasicSliderUI, ::javax::swing::plaf::SliderUI> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_basic / "BasicSliderUI";

	constexpr static Enume field_signatures{
		jField<::jint>("MAX_SCROLL"), //
		jField<::jint>("MIN_SCROLL"), //
		jField<::jint>("NEGATIVE_SCROLL"), //
		jField<::jint>("POSITIVE_SCROLL"), //
	};

	template<typename F = ::jint>
	static auto MAX_SCROLL() {
		static_assert(field_signatures[jField<F>("MAX_SCROLL")] != -1);
		return sat<F>("MAX_SCROLL");
	}

	template<typename F = ::jint>
	static auto MIN_SCROLL() {
		static_assert(field_signatures[jField<F>("MIN_SCROLL")] != -1);
		return sat<F>("MIN_SCROLL");
	}

	template<typename F = ::jint>
	static auto NEGATIVE_SCROLL() {
		static_assert(field_signatures[jField<F>("NEGATIVE_SCROLL")] != -1);
		return sat<F>("NEGATIVE_SCROLL");
	}

	template<typename F = ::jint>
	static auto POSITIVE_SCROLL() {
		static_assert(field_signatures[jField<F>("POSITIVE_SCROLL")] != -1);
		return sat<F>("POSITIVE_SCROLL");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::JSlider)>(), //
		jMethod<::javax::swing::plaf::ComponentUI(::javax::swing::JComponent)>("createUI"), //
		jMethod<::jint(::javax::swing::JComponent, ::jint, ::jint)>("getBaseline"), //
		jMethod<::java::awt::Component$BaselineResizeBehavior(::javax::swing::JComponent)>("getBaselineResizeBehavior"), //
		jMethod<::java::awt::Dimension(::javax::swing::JComponent)>("getMaximumSize"), //
		jMethod<::java::awt::Dimension()>("getMinimumHorizontalSize"), //
		jMethod<::java::awt::Dimension(::javax::swing::JComponent)>("getMinimumSize"), //
		jMethod<::java::awt::Dimension()>("getMinimumVerticalSize"), //
		jMethod<::java::awt::Dimension()>("getPreferredHorizontalSize"), //
		jMethod<::java::awt::Dimension(::javax::swing::JComponent)>("getPreferredSize"), //
		jMethod<::java::awt::Dimension()>("getPreferredVerticalSize"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("installUI"), //
		jMethod<::jvoid(::java::awt::Graphics, ::javax::swing::JComponent)>("paint"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paintFocus"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paintLabels"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paintThumb"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paintTicks"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paintTrack"), //
		jMethod<::jvoid(::jint)>("scrollByBlock"), //
		jMethod<::jvoid(::jint)>("scrollByUnit"), //
		jMethod<::jvoid(::jint, ::jint)>("setThumbLocation"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("uninstallUI"), //
		jMethod<::jint(::jint)>("valueForXPosition"), //
		jMethod<::jint(::jint)>("valueForYPosition"), //
	};

	template<typename R = ::javax::swing::plaf::ComponentUI, typename... Args>
	static auto createUI(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createUI")] != -1);
		return scall<R>("createUI", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBaseline(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBaseline")] != -1);
		return call<R>("getBaseline", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component$BaselineResizeBehavior, typename... Args>
	auto getBaselineResizeBehavior(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBaselineResizeBehavior")] != -1);
		return call<R>("getBaselineResizeBehavior", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMaximumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaximumSize")] != -1);
		return call<R>("getMaximumSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMinimumHorizontalSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinimumHorizontalSize")] != -1);
		return call<R>("getMinimumHorizontalSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinimumSize")] != -1);
		return call<R>("getMinimumSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMinimumVerticalSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinimumVerticalSize")] != -1);
		return call<R>("getMinimumVerticalSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredHorizontalSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreferredHorizontalSize")] != -1);
		return call<R>("getPreferredHorizontalSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreferredSize")] != -1);
		return call<R>("getPreferredSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredVerticalSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreferredVerticalSize")] != -1);
		return call<R>("getPreferredVerticalSize", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto installUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("installUI")] != -1);
		return call<R>("installUI", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintFocus")] != -1);
		return call<R>("paintFocus", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintLabels(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintLabels")] != -1);
		return call<R>("paintLabels", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintThumb(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintThumb")] != -1);
		return call<R>("paintThumb", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintTicks(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintTicks")] != -1);
		return call<R>("paintTicks", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintTrack(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintTrack")] != -1);
		return call<R>("paintTrack", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto scrollByBlock(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("scrollByBlock")] != -1);
		return call<R>("scrollByBlock", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto scrollByUnit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("scrollByUnit")] != -1);
		return call<R>("scrollByUnit", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setThumbLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setThumbLocation")] != -1);
		return call<R>("setThumbLocation", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto uninstallUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("uninstallUI")] != -1);
		return call<R>("uninstallUI", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto valueForXPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("valueForXPosition")] != -1);
		return call<R>("valueForXPosition", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto valueForYPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("valueForYPosition")] != -1);
		return call<R>("valueForYPosition", forward<Args>(args)...);
	}

};

#endif
