#ifndef javax_swing_plaf_basic_BasicMenuUI$ChangeHandler_HPP
#define javax_swing_plaf_basic_BasicMenuUI$ChangeHandler_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::basic::BasicMenuUI$ChangeHandler : public jObject<::javax::swing::plaf::basic::BasicMenuUI$ChangeHandler, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_basic / "BasicMenuUI$ChangeHandler";

	constexpr static Enume field_signatures{
		jField<::jboolean>("isSelected"), //
		jField<::javax::swing::JMenu>("menu"), //
		jField<::javax::swing::plaf::basic::BasicMenuUI>("ui"), //
		jField<::java::awt::Component>("wasFocused"), //
	};

	template<typename F = ::jboolean>
	auto isSelected() const {
		static_assert(field_signatures[jField<F>("isSelected")] != -1);
		return at<F>("isSelected");
	}

	template<typename F = ::javax::swing::JMenu>
	auto menu() const {
		static_assert(field_signatures[jField<F>("menu")] != -1);
		return at<F>("menu");
	}

	template<typename F = ::javax::swing::plaf::basic::BasicMenuUI>
	auto ui() const {
		static_assert(field_signatures[jField<F>("ui")] != -1);
		return at<F>("ui");
	}

	template<typename F = ::java::awt::Component>
	auto wasFocused() const {
		static_assert(field_signatures[jField<F>("wasFocused")] != -1);
		return at<F>("wasFocused");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::plaf::basic::BasicMenuUI, ::javax::swing::JMenu, ::javax::swing::plaf::basic::BasicMenuUI)>(), //
		jMethod<::jvoid(::javax::swing::event::ChangeEvent)>("stateChanged"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto stateChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stateChanged")] != -1);
		return call<R>("stateChanged", std::forward<Args>(args)...);
	}

};

#endif
