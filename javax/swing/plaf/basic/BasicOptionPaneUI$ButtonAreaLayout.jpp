#ifndef javax_swing_plaf_basic_BasicOptionPaneUI$ButtonAreaLayout_HPP
#define javax_swing_plaf_basic_BasicOptionPaneUI$ButtonAreaLayout_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::basic::BasicOptionPaneUI$ButtonAreaLayout : public jObject<::javax::swing::plaf::basic::BasicOptionPaneUI$ButtonAreaLayout, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_basic / "BasicOptionPaneUI$ButtonAreaLayout";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jboolean, ::jint)>(), //
		jMethod<::jvoid(::java::lang::String, ::java::awt::Component)>("addLayoutComponent"), //
		jMethod<::jboolean()>("getCentersChildren"), //
		jMethod<::jint()>("getPadding"), //
		jMethod<::jboolean()>("getSyncAllWidths"), //
		jMethod<::jvoid(::java::awt::Container)>("layoutContainer"), //
		jMethod<::java::awt::Dimension(::java::awt::Container)>("minimumLayoutSize"), //
		jMethod<::java::awt::Dimension(::java::awt::Container)>("preferredLayoutSize"), //
		jMethod<::jvoid(::java::awt::Component)>("removeLayoutComponent"), //
		jMethod<::jvoid(::jboolean)>("setCentersChildren"), //
		jMethod<::jvoid(::jint)>("setPadding"), //
		jMethod<::jvoid(::jboolean)>("setSyncAllWidths"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addLayoutComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addLayoutComponent")] != -1);
		return call<R>("addLayoutComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getCentersChildren(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCentersChildren")] != -1);
		return call<R>("getCentersChildren", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPadding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPadding")] != -1);
		return call<R>("getPadding", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getSyncAllWidths(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSyncAllWidths")] != -1);
		return call<R>("getSyncAllWidths", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto layoutContainer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("layoutContainer")] != -1);
		return call<R>("layoutContainer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto minimumLayoutSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("minimumLayoutSize")] != -1);
		return call<R>("minimumLayoutSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto preferredLayoutSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("preferredLayoutSize")] != -1);
		return call<R>("preferredLayoutSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeLayoutComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeLayoutComponent")] != -1);
		return call<R>("removeLayoutComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCentersChildren(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCentersChildren")] != -1);
		return call<R>("setCentersChildren", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPadding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPadding")] != -1);
		return call<R>("setPadding", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSyncAllWidths(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSyncAllWidths")] != -1);
		return call<R>("setSyncAllWidths", std::forward<Args>(args)...);
	}

};

#endif
