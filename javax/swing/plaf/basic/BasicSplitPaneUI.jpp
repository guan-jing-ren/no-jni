#ifndef javax_swing_plaf_basic_BasicSplitPaneUI_HPP
#define javax_swing_plaf_basic_BasicSplitPaneUI_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::basic::BasicSplitPaneUI : public jObject<::javax::swing::plaf::basic::BasicSplitPaneUI, ::javax::swing::plaf::SplitPaneUI> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_basic / "BasicSplitPaneUI";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::swing::plaf::basic::BasicSplitPaneDivider()>("createDefaultDivider"), //
		jMethod<::javax::swing::plaf::ComponentUI(::javax::swing::JComponent)>("createUI"), //
		jMethod<::jvoid(::javax::swing::JSplitPane, ::java::awt::Graphics)>("finishedPaintingChildren"), //
		jMethod<::javax::swing::plaf::basic::BasicSplitPaneDivider()>("getDivider"), //
		jMethod<::jint(::javax::swing::JSplitPane)>("getDividerLocation"), //
		jMethod<::java::awt::Insets(::javax::swing::JComponent)>("getInsets"), //
		jMethod<::jint()>("getLastDragLocation"), //
		jMethod<::jint(::javax::swing::JSplitPane)>("getMaximumDividerLocation"), //
		jMethod<::java::awt::Dimension(::javax::swing::JComponent)>("getMaximumSize"), //
		jMethod<::jint(::javax::swing::JSplitPane)>("getMinimumDividerLocation"), //
		jMethod<::java::awt::Dimension(::javax::swing::JComponent)>("getMinimumSize"), //
		jMethod<::java::awt::Component()>("getNonContinuousLayoutDivider"), //
		jMethod<::jint()>("getOrientation"), //
		jMethod<::java::awt::Dimension(::javax::swing::JComponent)>("getPreferredSize"), //
		jMethod<::javax::swing::JSplitPane()>("getSplitPane"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("installUI"), //
		jMethod<::jboolean()>("isContinuousLayout"), //
		jMethod<::jvoid(::java::awt::Graphics, ::javax::swing::JComponent)>("paint"), //
		jMethod<::jvoid(::javax::swing::JSplitPane)>("resetToPreferredSizes"), //
		jMethod<::jvoid(::jboolean)>("setContinuousLayout"), //
		jMethod<::jvoid(::javax::swing::JSplitPane, ::jint)>("setDividerLocation"), //
		jMethod<::jvoid(::jint)>("setLastDragLocation"), //
		jMethod<::jvoid(::jint)>("setOrientation"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("uninstallUI"), //
	};

	template<typename R = ::javax::swing::plaf::basic::BasicSplitPaneDivider, typename... Args>
	auto createDefaultDivider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createDefaultDivider")] != -1);
		return call<R>("createDefaultDivider", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ComponentUI, typename... Args>
	static auto createUI(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createUI")] != -1);
		return scall<R>("createUI", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto finishedPaintingChildren(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("finishedPaintingChildren")] != -1);
		return call<R>("finishedPaintingChildren", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::basic::BasicSplitPaneDivider, typename... Args>
	auto getDivider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDivider")] != -1);
		return call<R>("getDivider", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDividerLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDividerLocation")] != -1);
		return call<R>("getDividerLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Insets, typename... Args>
	auto getInsets(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInsets")] != -1);
		return call<R>("getInsets", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLastDragLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLastDragLocation")] != -1);
		return call<R>("getLastDragLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaximumDividerLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaximumDividerLocation")] != -1);
		return call<R>("getMaximumDividerLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMaximumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaximumSize")] != -1);
		return call<R>("getMaximumSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinimumDividerLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinimumDividerLocation")] != -1);
		return call<R>("getMinimumDividerLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinimumSize")] != -1);
		return call<R>("getMinimumSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getNonContinuousLayoutDivider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNonContinuousLayoutDivider")] != -1);
		return call<R>("getNonContinuousLayoutDivider", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOrientation")] != -1);
		return call<R>("getOrientation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreferredSize")] != -1);
		return call<R>("getPreferredSize", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JSplitPane, typename... Args>
	auto getSplitPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSplitPane")] != -1);
		return call<R>("getSplitPane", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto installUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("installUI")] != -1);
		return call<R>("installUI", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isContinuousLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isContinuousLayout")] != -1);
		return call<R>("isContinuousLayout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto resetToPreferredSizes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("resetToPreferredSizes")] != -1);
		return call<R>("resetToPreferredSizes", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setContinuousLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setContinuousLayout")] != -1);
		return call<R>("setContinuousLayout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDividerLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDividerLocation")] != -1);
		return call<R>("setDividerLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLastDragLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLastDragLocation")] != -1);
		return call<R>("setLastDragLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOrientation")] != -1);
		return call<R>("setOrientation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto uninstallUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("uninstallUI")] != -1);
		return call<R>("uninstallUI", std::forward<Args>(args)...);
	}

};

#endif
