#ifndef javax_swing_plaf_basic_BasicInternalFrameTitlePane$SystemMenuBar_HPP
#define javax_swing_plaf_basic_BasicInternalFrameTitlePane$SystemMenuBar_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::basic::BasicInternalFrameTitlePane$SystemMenuBar : public jObject<::javax::swing::plaf::basic::BasicInternalFrameTitlePane$SystemMenuBar, ::javax::swing::JMenuBar> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_basic / "BasicInternalFrameTitlePane$SystemMenuBar";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::plaf::basic::BasicInternalFrameTitlePane)>(), //
		jMethod<::jboolean()>("isFocusTraversable"), //
		jMethod<::jboolean()>("isOpaque"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paint"), //
		jMethod<::jvoid()>("requestFocus"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto isFocusTraversable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isFocusTraversable")] != -1);
		return call<R>("isFocusTraversable", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isOpaque(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isOpaque")] != -1);
		return call<R>("isOpaque", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto requestFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("requestFocus")] != -1);
		return call<R>("requestFocus", forward<Args>(args)...);
	}

};

#endif
