#ifndef javax_swing_plaf_basic_BasicComboPopup_HPP
#define javax_swing_plaf_basic_BasicComboPopup_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::basic::BasicComboPopup : public jObject<::javax::swing::plaf::basic::BasicComboPopup, ::javax::swing::JPopupMenu> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_basic / "BasicComboPopup";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::JComboBox)>(), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::java::awt::event::KeyListener()>("getKeyListener"), //
		jMethod<::javax::swing::JList()>("getList"), //
		jMethod<::java::awt::event::MouseListener()>("getMouseListener"), //
		jMethod<::java::awt::event::MouseMotionListener()>("getMouseMotionListener"), //
		jMethod<::jvoid()>("hide"), //
		jMethod<::jboolean()>("isFocusTraversable"), //
		jMethod<::jboolean()>("isVisible"), //
		jMethod<::jvoid()>("show"), //
		jMethod<::jvoid()>("uninstallingUI"), //
	};

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::KeyListener, typename... Args>
	auto getKeyListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeyListener")] != -1);
		return call<R>("getKeyListener", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JList, typename... Args>
	auto getList(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getList")] != -1);
		return call<R>("getList", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::MouseListener, typename... Args>
	auto getMouseListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMouseListener")] != -1);
		return call<R>("getMouseListener", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::MouseMotionListener, typename... Args>
	auto getMouseMotionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMouseMotionListener")] != -1);
		return call<R>("getMouseMotionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto hide(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hide")] != -1);
		return call<R>("hide", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFocusTraversable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFocusTraversable")] != -1);
		return call<R>("isFocusTraversable", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isVisible")] != -1);
		return call<R>("isVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto show(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("show")] != -1);
		return call<R>("show", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto uninstallingUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("uninstallingUI")] != -1);
		return call<R>("uninstallingUI", std::forward<Args>(args)...);
	}

};

#endif
