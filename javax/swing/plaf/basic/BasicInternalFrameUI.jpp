#ifndef javax_swing_plaf_basic_BasicInternalFrameUI_HPP
#define javax_swing_plaf_basic_BasicInternalFrameUI_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::basic::BasicInternalFrameUI : public jObject<::javax::swing::plaf::basic::BasicInternalFrameUI, ::javax::swing::plaf::InternalFrameUI> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_basic / "BasicInternalFrameUI";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::JInternalFrame)>(), //
		jMethod<::javax::swing::plaf::ComponentUI(::javax::swing::JComponent)>("createUI"), //
		jMethod<::javax::swing::JComponent()>("getEastPane"), //
		jMethod<::java::awt::Dimension(::javax::swing::JComponent)>("getMaximumSize"), //
		jMethod<::java::awt::Dimension(::javax::swing::JComponent)>("getMinimumSize"), //
		jMethod<::javax::swing::JComponent()>("getNorthPane"), //
		jMethod<::java::awt::Dimension(::javax::swing::JComponent)>("getPreferredSize"), //
		jMethod<::javax::swing::JComponent()>("getSouthPane"), //
		jMethod<::javax::swing::JComponent()>("getWestPane"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("installUI"), //
		jMethod<::jboolean()>("isKeyBindingActive"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("setEastPane"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("setNorthPane"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("setSouthPane"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("setWestPane"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("uninstallUI"), //
	};

	template<typename R = ::javax::swing::plaf::ComponentUI, typename... Args>
	static auto createUI(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createUI")] != -1);
		return scall<R>("createUI", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JComponent, typename... Args>
	auto getEastPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getEastPane")] != -1);
		return call<R>("getEastPane", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMaximumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaximumSize")] != -1);
		return call<R>("getMaximumSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinimumSize")] != -1);
		return call<R>("getMinimumSize", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JComponent, typename... Args>
	auto getNorthPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNorthPane")] != -1);
		return call<R>("getNorthPane", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreferredSize")] != -1);
		return call<R>("getPreferredSize", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JComponent, typename... Args>
	auto getSouthPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSouthPane")] != -1);
		return call<R>("getSouthPane", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JComponent, typename... Args>
	auto getWestPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getWestPane")] != -1);
		return call<R>("getWestPane", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto installUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("installUI")] != -1);
		return call<R>("installUI", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isKeyBindingActive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isKeyBindingActive")] != -1);
		return call<R>("isKeyBindingActive", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEastPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setEastPane")] != -1);
		return call<R>("setEastPane", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNorthPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setNorthPane")] != -1);
		return call<R>("setNorthPane", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSouthPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSouthPane")] != -1);
		return call<R>("setSouthPane", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWestPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setWestPane")] != -1);
		return call<R>("setWestPane", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto uninstallUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("uninstallUI")] != -1);
		return call<R>("uninstallUI", forward<Args>(args)...);
	}

};

#endif
