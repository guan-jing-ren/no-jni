#ifndef javax_swing_plaf_basic_BasicGraphicsUtils_HPP
#define javax_swing_plaf_basic_BasicGraphicsUtils_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::basic::BasicGraphicsUtils : public jObject<::javax::swing::plaf::basic::BasicGraphicsUtils, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_basic / "BasicGraphicsUtils";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::jboolean, ::jboolean, ::java::awt::Color, ::java::awt::Color, ::java::awt::Color, ::java::awt::Color)>("drawBezel"), //
		jMethod<::jvoid(::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("drawDashedRect"), //
		jMethod<::jvoid(::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::java::awt::Color, ::java::awt::Color, ::java::awt::Color, ::java::awt::Color)>("drawEtchedRect"), //
		jMethod<::jvoid(::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::java::awt::Color, ::java::awt::Color)>("drawGroove"), //
		jMethod<::jvoid(::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::java::awt::Color, ::java::awt::Color, ::java::awt::Color, ::java::awt::Color)>("drawLoweredBezel"), //
		jMethod<::jvoid(::java::awt::Graphics, ::java::lang::String, ::jint, ::jint, ::jint)>("drawString"), //
		jMethod<::jvoid(::java::awt::Graphics, ::java::lang::String, ::jint, ::jint, ::jint)>("drawStringUnderlineCharAt"), //
		jMethod<::java::awt::Insets()>("getEtchedInsets"), //
		jMethod<::java::awt::Insets()>("getGrooveInsets"), //
		jMethod<::java::awt::Dimension(::javax::swing::AbstractButton, ::jint)>("getPreferredButtonSize"), //
	};

	template<typename R = ::jvoid, typename... Args>
	static auto drawBezel(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("drawBezel")] != -1);
		return scall<R>("drawBezel", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto drawDashedRect(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("drawDashedRect")] != -1);
		return scall<R>("drawDashedRect", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto drawEtchedRect(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("drawEtchedRect")] != -1);
		return scall<R>("drawEtchedRect", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto drawGroove(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("drawGroove")] != -1);
		return scall<R>("drawGroove", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto drawLoweredBezel(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("drawLoweredBezel")] != -1);
		return scall<R>("drawLoweredBezel", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto drawString(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("drawString")] != -1);
		return scall<R>("drawString", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto drawStringUnderlineCharAt(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("drawStringUnderlineCharAt")] != -1);
		return scall<R>("drawStringUnderlineCharAt", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Insets, typename... Args>
	static auto getEtchedInsets(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getEtchedInsets")] != -1);
		return scall<R>("getEtchedInsets", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Insets, typename... Args>
	static auto getGrooveInsets(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getGrooveInsets")] != -1);
		return scall<R>("getGrooveInsets", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	static auto getPreferredButtonSize(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreferredButtonSize")] != -1);
		return scall<R>("getPreferredButtonSize", forward<Args>(args)...);
	}

};

#endif
