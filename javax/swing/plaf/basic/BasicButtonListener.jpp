#ifndef javax_swing_plaf_basic_BasicButtonListener_HPP
#define javax_swing_plaf_basic_BasicButtonListener_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::basic::BasicButtonListener : public jObject<::javax::swing::plaf::basic::BasicButtonListener, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_basic / "BasicButtonListener";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::AbstractButton)>(), //
		jMethod<::jvoid(::java::awt::event::FocusEvent)>("focusGained"), //
		jMethod<::jvoid(::java::awt::event::FocusEvent)>("focusLost"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("installKeyboardActions"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mouseClicked"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mouseDragged"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mouseEntered"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mouseExited"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mouseMoved"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mousePressed"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mouseReleased"), //
		jMethod<::jvoid(::java::beans::PropertyChangeEvent)>("propertyChange"), //
		jMethod<::jvoid(::javax::swing::event::ChangeEvent)>("stateChanged"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("uninstallKeyboardActions"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto focusGained(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("focusGained")] != -1);
		return call<R>("focusGained", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto focusLost(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("focusLost")] != -1);
		return call<R>("focusLost", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto installKeyboardActions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("installKeyboardActions")] != -1);
		return call<R>("installKeyboardActions", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mouseClicked(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("mouseClicked")] != -1);
		return call<R>("mouseClicked", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mouseDragged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("mouseDragged")] != -1);
		return call<R>("mouseDragged", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mouseEntered(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("mouseEntered")] != -1);
		return call<R>("mouseEntered", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mouseExited(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("mouseExited")] != -1);
		return call<R>("mouseExited", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mouseMoved(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("mouseMoved")] != -1);
		return call<R>("mouseMoved", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mousePressed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("mousePressed")] != -1);
		return call<R>("mousePressed", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mouseReleased(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("mouseReleased")] != -1);
		return call<R>("mouseReleased", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto propertyChange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("propertyChange")] != -1);
		return call<R>("propertyChange", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto stateChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("stateChanged")] != -1);
		return call<R>("stateChanged", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto uninstallKeyboardActions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("uninstallKeyboardActions")] != -1);
		return call<R>("uninstallKeyboardActions", forward<Args>(args)...);
	}

};

#endif
