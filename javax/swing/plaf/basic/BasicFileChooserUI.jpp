#ifndef javax_swing_plaf_basic_BasicFileChooserUI_HPP
#define javax_swing_plaf_basic_BasicFileChooserUI_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::basic::BasicFileChooserUI : public jObject<::javax::swing::plaf::basic::BasicFileChooserUI, ::javax::swing::plaf::FileChooserUI> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_basic / "BasicFileChooserUI";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::JFileChooser)>(), //
		jMethod<::jvoid()>("clearIconCache"), //
		jMethod<::javax::swing::event::ListSelectionListener(::javax::swing::JFileChooser)>("createListSelectionListener"), //
		jMethod<::java::beans::PropertyChangeListener(::javax::swing::JFileChooser)>("createPropertyChangeListener"), //
		jMethod<::javax::swing::plaf::ComponentUI(::javax::swing::JComponent)>("createUI"), //
		jMethod<::jvoid(::javax::swing::JFileChooser, ::java::io::File)>("ensureFileIsVisible"), //
		jMethod<::javax::swing::filechooser::FileFilter(::javax::swing::JFileChooser)>("getAcceptAllFileFilter"), //
		jMethod<::javax::swing::JPanel()>("getAccessoryPanel"), //
		jMethod<::jint(::javax::swing::JFileChooser)>("getApproveButtonMnemonic"), //
		jMethod<::java::lang::String(::javax::swing::JFileChooser)>("getApproveButtonText"), //
		jMethod<::java::lang::String(::javax::swing::JFileChooser)>("getApproveButtonToolTipText"), //
		jMethod<::javax::swing::Action()>("getApproveSelectionAction"), //
		jMethod<::javax::swing::Action()>("getCancelSelectionAction"), //
		jMethod<::javax::swing::Action()>("getChangeToParentDirectoryAction"), //
		jMethod<::javax::swing::JButton(::javax::swing::JFileChooser)>("getDefaultButton"), //
		jMethod<::java::lang::String(::javax::swing::JFileChooser)>("getDialogTitle"), //
		jMethod<::java::lang::String()>("getDirectoryName"), //
		jMethod<::javax::swing::JFileChooser()>("getFileChooser"), //
		jMethod<::java::lang::String()>("getFileName"), //
		jMethod<::javax::swing::filechooser::FileView(::javax::swing::JFileChooser)>("getFileView"), //
		jMethod<::javax::swing::Action()>("getGoHomeAction"), //
		jMethod<::javax::swing::plaf::basic::BasicDirectoryModel()>("getModel"), //
		jMethod<::javax::swing::Action()>("getNewFolderAction"), //
		jMethod<::javax::swing::Action()>("getUpdateAction"), //
		jMethod<::jvoid(::javax::swing::JFileChooser)>("installComponents"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("installUI"), //
		jMethod<::jvoid(::javax::swing::JFileChooser)>("rescanCurrentDirectory"), //
		jMethod<::jvoid(::java::lang::String)>("setDirectoryName"), //
		jMethod<::jvoid(::java::lang::String)>("setFileName"), //
		jMethod<::jvoid(::javax::swing::JFileChooser)>("uninstallComponents"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("uninstallUI"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto clearIconCache(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clearIconCache")] != -1);
		return call<R>("clearIconCache", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::event::ListSelectionListener, typename... Args>
	auto createListSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createListSelectionListener")] != -1);
		return call<R>("createListSelectionListener", forward<Args>(args)...);
	}

	template<typename R = ::java::beans::PropertyChangeListener, typename... Args>
	auto createPropertyChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createPropertyChangeListener")] != -1);
		return call<R>("createPropertyChangeListener", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ComponentUI, typename... Args>
	static auto createUI(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createUI")] != -1);
		return scall<R>("createUI", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto ensureFileIsVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("ensureFileIsVisible")] != -1);
		return call<R>("ensureFileIsVisible", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::filechooser::FileFilter, typename... Args>
	auto getAcceptAllFileFilter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAcceptAllFileFilter")] != -1);
		return call<R>("getAcceptAllFileFilter", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JPanel, typename... Args>
	auto getAccessoryPanel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessoryPanel")] != -1);
		return call<R>("getAccessoryPanel", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getApproveButtonMnemonic(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getApproveButtonMnemonic")] != -1);
		return call<R>("getApproveButtonMnemonic", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getApproveButtonText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getApproveButtonText")] != -1);
		return call<R>("getApproveButtonText", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getApproveButtonToolTipText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getApproveButtonToolTipText")] != -1);
		return call<R>("getApproveButtonToolTipText", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Action, typename... Args>
	auto getApproveSelectionAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getApproveSelectionAction")] != -1);
		return call<R>("getApproveSelectionAction", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Action, typename... Args>
	auto getCancelSelectionAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCancelSelectionAction")] != -1);
		return call<R>("getCancelSelectionAction", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Action, typename... Args>
	auto getChangeToParentDirectoryAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getChangeToParentDirectoryAction")] != -1);
		return call<R>("getChangeToParentDirectoryAction", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JButton, typename... Args>
	auto getDefaultButton(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDefaultButton")] != -1);
		return call<R>("getDefaultButton", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDialogTitle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDialogTitle")] != -1);
		return call<R>("getDialogTitle", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDirectoryName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDirectoryName")] != -1);
		return call<R>("getDirectoryName", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JFileChooser, typename... Args>
	auto getFileChooser(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFileChooser")] != -1);
		return call<R>("getFileChooser", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFileName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFileName")] != -1);
		return call<R>("getFileName", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::filechooser::FileView, typename... Args>
	auto getFileView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFileView")] != -1);
		return call<R>("getFileView", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Action, typename... Args>
	auto getGoHomeAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getGoHomeAction")] != -1);
		return call<R>("getGoHomeAction", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::basic::BasicDirectoryModel, typename... Args>
	auto getModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getModel")] != -1);
		return call<R>("getModel", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Action, typename... Args>
	auto getNewFolderAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNewFolderAction")] != -1);
		return call<R>("getNewFolderAction", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Action, typename... Args>
	auto getUpdateAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUpdateAction")] != -1);
		return call<R>("getUpdateAction", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto installComponents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("installComponents")] != -1);
		return call<R>("installComponents", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto installUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("installUI")] != -1);
		return call<R>("installUI", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto rescanCurrentDirectory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("rescanCurrentDirectory")] != -1);
		return call<R>("rescanCurrentDirectory", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDirectoryName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDirectoryName")] != -1);
		return call<R>("setDirectoryName", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFileName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFileName")] != -1);
		return call<R>("setFileName", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto uninstallComponents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("uninstallComponents")] != -1);
		return call<R>("uninstallComponents", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto uninstallUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("uninstallUI")] != -1);
		return call<R>("uninstallUI", forward<Args>(args)...);
	}

};

#endif
