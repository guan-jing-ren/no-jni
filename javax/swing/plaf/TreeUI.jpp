#ifndef javax_swing_plaf_TreeUI_HPP
#define javax_swing_plaf_TreeUI_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::plaf::TreeUI : public jObject<::javax::swing::plaf::TreeUI, ::javax::swing::plaf::ComponentUI> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf / "TreeUI";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::javax::swing::JTree)>("cancelEditing"), //
		jMethod<::javax::swing::tree::TreePath(::javax::swing::JTree, ::jint, ::jint)>("getClosestPathForLocation"), //
		jMethod<::javax::swing::tree::TreePath(::javax::swing::JTree)>("getEditingPath"), //
		jMethod<::java::awt::Rectangle(::javax::swing::JTree, ::javax::swing::tree::TreePath)>("getPathBounds"), //
		jMethod<::javax::swing::tree::TreePath(::javax::swing::JTree, ::jint)>("getPathForRow"), //
		jMethod<::jint(::javax::swing::JTree)>("getRowCount"), //
		jMethod<::jint(::javax::swing::JTree, ::javax::swing::tree::TreePath)>("getRowForPath"), //
		jMethod<::jboolean(::javax::swing::JTree)>("isEditing"), //
		jMethod<::jvoid(::javax::swing::JTree, ::javax::swing::tree::TreePath)>("startEditingAtPath"), //
		jMethod<::jboolean(::javax::swing::JTree)>("stopEditing"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto cancelEditing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("cancelEditing")] != -1);
		return call<R>("cancelEditing", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreePath, typename... Args>
	auto getClosestPathForLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getClosestPathForLocation")] != -1);
		return call<R>("getClosestPathForLocation", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreePath, typename... Args>
	auto getEditingPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getEditingPath")] != -1);
		return call<R>("getEditingPath", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getPathBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPathBounds")] != -1);
		return call<R>("getPathBounds", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreePath, typename... Args>
	auto getPathForRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPathForRow")] != -1);
		return call<R>("getPathForRow", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRowCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRowCount")] != -1);
		return call<R>("getRowCount", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRowForPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRowForPath")] != -1);
		return call<R>("getRowForPath", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEditing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isEditing")] != -1);
		return call<R>("isEditing", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto startEditingAtPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("startEditingAtPath")] != -1);
		return call<R>("startEditingAtPath", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto stopEditing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("stopEditing")] != -1);
		return call<R>("stopEditing", forward<Args>(args)...);
	}

};

#endif
