#ifndef javax_swing_plaf_ComboBoxUI_HPP
#define javax_swing_plaf_ComboBoxUI_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::plaf::ComboBoxUI : public jObject<::javax::swing::plaf::ComboBoxUI, ::javax::swing::plaf::ComponentUI> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf / "ComboBoxUI";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jboolean(::javax::swing::JComboBox)>("isFocusTraversable"), //
		jMethod<::jboolean(::javax::swing::JComboBox)>("isPopupVisible"), //
		jMethod<::jvoid(::javax::swing::JComboBox, ::jboolean)>("setPopupVisible"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto isFocusTraversable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isFocusTraversable")] != -1);
		return call<R>("isFocusTraversable", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPopupVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isPopupVisible")] != -1);
		return call<R>("isPopupVisible", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPopupVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPopupVisible")] != -1);
		return call<R>("setPopupVisible", forward<Args>(args)...);
	}

};

#endif
