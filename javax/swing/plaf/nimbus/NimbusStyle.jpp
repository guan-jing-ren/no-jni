#ifndef javax_swing_plaf_nimbus_NimbusStyle_HPP
#define javax_swing_plaf_nimbus_NimbusStyle_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::nimbus::NimbusStyle : public jObject<::javax::swing::plaf::nimbus::NimbusStyle, ::javax::swing::plaf::synth::SynthStyle> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_nimbus / "NimbusStyle";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("LARGE_KEY"), //
		jField<::jdouble>("LARGE_SCALE"), //
		jField<::java::lang::String>("MINI_KEY"), //
		jField<::jdouble>("MINI_SCALE"), //
		jField<::java::lang::String>("SMALL_KEY"), //
		jField<::jdouble>("SMALL_SCALE"), //
	};

	template<typename F = ::java::lang::String>
	static auto LARGE_KEY() {
		static_assert(field_signatures[jField<F>("LARGE_KEY")] != -1);
		return sat<F>("LARGE_KEY");
	}

	template<typename F = ::jdouble>
	static auto LARGE_SCALE() {
		static_assert(field_signatures[jField<F>("LARGE_SCALE")] != -1);
		return sat<F>("LARGE_SCALE");
	}

	template<typename F = ::java::lang::String>
	static auto MINI_KEY() {
		static_assert(field_signatures[jField<F>("MINI_KEY")] != -1);
		return sat<F>("MINI_KEY");
	}

	template<typename F = ::jdouble>
	static auto MINI_SCALE() {
		static_assert(field_signatures[jField<F>("MINI_SCALE")] != -1);
		return sat<F>("MINI_SCALE");
	}

	template<typename F = ::java::lang::String>
	static auto SMALL_KEY() {
		static_assert(field_signatures[jField<F>("SMALL_KEY")] != -1);
		return sat<F>("SMALL_KEY");
	}

	template<typename F = ::jdouble>
	static auto SMALL_SCALE() {
		static_assert(field_signatures[jField<F>("SMALL_SCALE")] != -1);
		return sat<F>("SMALL_SCALE");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Object(::javax::swing::plaf::synth::SynthContext, ::java::lang::Object)>("get"), //
		jMethod<::javax::swing::Painter(::javax::swing::plaf::synth::SynthContext)>("getBackgroundPainter"), //
		jMethod<::javax::swing::Painter(::javax::swing::plaf::synth::SynthContext)>("getBorderPainter"), //
		jMethod<::javax::swing::Painter(::javax::swing::plaf::synth::SynthContext)>("getForegroundPainter"), //
		jMethod<::java::awt::Insets(::javax::swing::plaf::synth::SynthContext, ::java::awt::Insets)>("getInsets"), //
		jMethod<::javax::swing::plaf::synth::SynthPainter(::javax::swing::plaf::synth::SynthContext)>("getPainter"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::SynthContext)>("installDefaults"), //
		jMethod<::jboolean(::javax::swing::plaf::synth::SynthContext)>("isOpaque"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Painter, typename... Args>
	auto getBackgroundPainter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBackgroundPainter")] != -1);
		return call<R>("getBackgroundPainter", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Painter, typename... Args>
	auto getBorderPainter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorderPainter")] != -1);
		return call<R>("getBorderPainter", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Painter, typename... Args>
	auto getForegroundPainter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getForegroundPainter")] != -1);
		return call<R>("getForegroundPainter", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Insets, typename... Args>
	auto getInsets(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInsets")] != -1);
		return call<R>("getInsets", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::synth::SynthPainter, typename... Args>
	auto getPainter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPainter")] != -1);
		return call<R>("getPainter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto installDefaults(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("installDefaults")] != -1);
		return call<R>("installDefaults", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isOpaque(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isOpaque")] != -1);
		return call<R>("isOpaque", std::forward<Args>(args)...);
	}

};

#endif
