#ifndef javax_swing_plaf_nimbus_NimbusLookAndFeel_HPP
#define javax_swing_plaf_nimbus_NimbusLookAndFeel_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::nimbus::NimbusLookAndFeel : public jObject<::javax::swing::plaf::nimbus::NimbusLookAndFeel, ::javax::swing::plaf::synth::SynthLookAndFeel> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_nimbus / "NimbusLookAndFeel";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::swing::UIDefaults()>("getDefaults"), //
		jMethod<::java::awt::Color(::java::lang::String, ::jfloat, ::jfloat, ::jfloat, ::jint, ::jboolean)>("getDerivedColor"), //
		jMethod<::java::lang::String()>("getDescription"), //
		jMethod<::javax::swing::Icon(::javax::swing::JComponent, ::javax::swing::Icon)>("getDisabledIcon"), //
		jMethod<::java::lang::String()>("getID"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::javax::swing::plaf::nimbus::NimbusStyle(::javax::swing::JComponent, ::javax::swing::plaf::synth::Region)>("getStyle"), //
		jMethod<::jvoid()>("initialize"), //
		jMethod<::jvoid(::javax::swing::plaf::synth::Region, ::java::lang::String)>("register"), //
		jMethod<::jboolean()>("shouldUpdateStyleOnAncestorChanged"), //
		jMethod<::jvoid()>("uninitialize"), //
	};

	template<typename R = ::javax::swing::UIDefaults, typename... Args>
	auto getDefaults(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDefaults")] != -1);
		return call<R>("getDefaults", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getDerivedColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDerivedColor")] != -1);
		return call<R>("getDerivedColor", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDescription")] != -1);
		return call<R>("getDescription", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getDisabledIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDisabledIcon")] != -1);
		return call<R>("getDisabledIcon", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getID")] != -1);
		return call<R>("getID", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::nimbus::NimbusStyle, typename... Args>
	static auto getStyle(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getStyle")] != -1);
		return scall<R>("getStyle", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto initialize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("initialize")] != -1);
		return call<R>("initialize", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto register_(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("register")] != -1);
		return call<R>("register", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto shouldUpdateStyleOnAncestorChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("shouldUpdateStyleOnAncestorChanged")] != -1);
		return call<R>("shouldUpdateStyleOnAncestorChanged", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto uninitialize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("uninitialize")] != -1);
		return call<R>("uninitialize", forward<Args>(args)...);
	}

};

#endif
