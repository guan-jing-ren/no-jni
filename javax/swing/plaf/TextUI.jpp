#ifndef javax_swing_plaf_TextUI_HPP
#define javax_swing_plaf_TextUI_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::plaf::TextUI : public jObject<::javax::swing::plaf::TextUI, ::javax::swing::plaf::ComponentUI> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf / "TextUI";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::javax::swing::text::JTextComponent, ::jint, ::jint)>("damageRange"), //
		jMethod<::jvoid(::javax::swing::text::JTextComponent, ::jint, ::jint, ::javax::swing::text::Position$Bias, ::javax::swing::text::Position$Bias)>("damageRange"), //
		jMethod<::javax::swing::text::EditorKit(::javax::swing::text::JTextComponent)>("getEditorKit"), //
		jMethod<::jint(::javax::swing::text::JTextComponent, ::jint, ::javax::swing::text::Position$Bias, ::jint, ::javax::swing::text::Position$Bias *)>("getNextVisualPositionFrom"), //
		jMethod<::javax::swing::text::View(::javax::swing::text::JTextComponent)>("getRootView"), //
		jMethod<::java::lang::String(::javax::swing::text::JTextComponent, ::java::awt::Point)>("getToolTipText"), //
		jMethod<::java::awt::Rectangle(::javax::swing::text::JTextComponent, ::jint)>("modelToView"), //
		jMethod<::java::awt::Rectangle(::javax::swing::text::JTextComponent, ::jint, ::javax::swing::text::Position$Bias)>("modelToView"), //
		jMethod<::jint(::javax::swing::text::JTextComponent, ::java::awt::Point)>("viewToModel"), //
		jMethod<::jint(::javax::swing::text::JTextComponent, ::java::awt::Point, ::javax::swing::text::Position$Bias *)>("viewToModel"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto damageRange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("damageRange")] != -1);
		return call<R>("damageRange", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::EditorKit, typename... Args>
	auto getEditorKit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEditorKit")] != -1);
		return call<R>("getEditorKit", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNextVisualPositionFrom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNextVisualPositionFrom")] != -1);
		return call<R>("getNextVisualPositionFrom", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::View, typename... Args>
	auto getRootView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRootView")] != -1);
		return call<R>("getRootView", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getToolTipText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getToolTipText")] != -1);
		return call<R>("getToolTipText", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto modelToView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("modelToView")] != -1);
		return call<R>("modelToView", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto viewToModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("viewToModel")] != -1);
		return call<R>("viewToModel", std::forward<Args>(args)...);
	}

};

#endif
