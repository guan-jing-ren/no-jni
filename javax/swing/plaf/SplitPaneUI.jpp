#ifndef javax_swing_plaf_SplitPaneUI_HPP
#define javax_swing_plaf_SplitPaneUI_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::plaf::SplitPaneUI : public jObject<::javax::swing::plaf::SplitPaneUI, ::javax::swing::plaf::ComponentUI> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf / "SplitPaneUI";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::javax::swing::JSplitPane, ::java::awt::Graphics)>("finishedPaintingChildren"), //
		jMethod<::jint(::javax::swing::JSplitPane)>("getDividerLocation"), //
		jMethod<::jint(::javax::swing::JSplitPane)>("getMaximumDividerLocation"), //
		jMethod<::jint(::javax::swing::JSplitPane)>("getMinimumDividerLocation"), //
		jMethod<::jvoid(::javax::swing::JSplitPane)>("resetToPreferredSizes"), //
		jMethod<::jvoid(::javax::swing::JSplitPane, ::jint)>("setDividerLocation"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto finishedPaintingChildren(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("finishedPaintingChildren")] != -1);
		return call<R>("finishedPaintingChildren", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDividerLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDividerLocation")] != -1);
		return call<R>("getDividerLocation", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaximumDividerLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaximumDividerLocation")] != -1);
		return call<R>("getMaximumDividerLocation", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinimumDividerLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinimumDividerLocation")] != -1);
		return call<R>("getMinimumDividerLocation", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto resetToPreferredSizes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("resetToPreferredSizes")] != -1);
		return call<R>("resetToPreferredSizes", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDividerLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDividerLocation")] != -1);
		return call<R>("setDividerLocation", forward<Args>(args)...);
	}

};

#endif
