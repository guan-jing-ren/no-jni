#ifndef javax_swing_plaf_metal_MetalLookAndFeel_HPP
#define javax_swing_plaf_metal_MetalLookAndFeel_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::metal::MetalLookAndFeel : public jObject<::javax::swing::plaf::metal::MetalLookAndFeel, ::javax::swing::plaf::basic::BasicLookAndFeel> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_metal / "MetalLookAndFeel";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getAcceleratorForeground"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getAcceleratorSelectedForeground"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getBlack"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getControl"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getControlDarkShadow"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getControlDisabled"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getControlHighlight"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getControlInfo"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getControlShadow"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getControlTextColor"), //
		jMethod<::javax::swing::plaf::FontUIResource()>("getControlTextFont"), //
		jMethod<::javax::swing::plaf::metal::MetalTheme()>("getCurrentTheme"), //
		jMethod<::javax::swing::UIDefaults()>("getDefaults"), //
		jMethod<::java::lang::String()>("getDescription"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getDesktopColor"), //
		jMethod<::javax::swing::Icon(::javax::swing::JComponent, ::javax::swing::Icon)>("getDisabledIcon"), //
		jMethod<::javax::swing::Icon(::javax::swing::JComponent, ::javax::swing::Icon)>("getDisabledSelectedIcon"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getFocusColor"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getHighlightedTextColor"), //
		jMethod<::java::lang::String()>("getID"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getInactiveControlTextColor"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getInactiveSystemTextColor"), //
		jMethod<::javax::swing::LayoutStyle()>("getLayoutStyle"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getMenuBackground"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getMenuDisabledForeground"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getMenuForeground"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getMenuSelectedBackground"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getMenuSelectedForeground"), //
		jMethod<::javax::swing::plaf::FontUIResource()>("getMenuTextFont"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getPrimaryControl"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getPrimaryControlDarkShadow"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getPrimaryControlHighlight"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getPrimaryControlInfo"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getPrimaryControlShadow"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getSeparatorBackground"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getSeparatorForeground"), //
		jMethod<::javax::swing::plaf::FontUIResource()>("getSubTextFont"), //
		jMethod<::jboolean()>("getSupportsWindowDecorations"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getSystemTextColor"), //
		jMethod<::javax::swing::plaf::FontUIResource()>("getSystemTextFont"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getTextHighlightColor"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getUserTextColor"), //
		jMethod<::javax::swing::plaf::FontUIResource()>("getUserTextFont"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getWhite"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getWindowBackground"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getWindowTitleBackground"), //
		jMethod<::javax::swing::plaf::FontUIResource()>("getWindowTitleFont"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getWindowTitleForeground"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getWindowTitleInactiveBackground"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getWindowTitleInactiveForeground"), //
		jMethod<::jboolean()>("isNativeLookAndFeel"), //
		jMethod<::jboolean()>("isSupportedLookAndFeel"), //
		jMethod<::jvoid(::java::awt::Component)>("provideErrorFeedback"), //
		jMethod<::jvoid(::javax::swing::plaf::metal::MetalTheme)>("setCurrentTheme"), //
	};

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	static auto getAcceleratorForeground(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAcceleratorForeground")] != -1);
		return scall<R>("getAcceleratorForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	static auto getAcceleratorSelectedForeground(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAcceleratorSelectedForeground")] != -1);
		return scall<R>("getAcceleratorSelectedForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	static auto getBlack(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBlack")] != -1);
		return scall<R>("getBlack", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	static auto getControl(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getControl")] != -1);
		return scall<R>("getControl", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	static auto getControlDarkShadow(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getControlDarkShadow")] != -1);
		return scall<R>("getControlDarkShadow", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	static auto getControlDisabled(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getControlDisabled")] != -1);
		return scall<R>("getControlDisabled", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	static auto getControlHighlight(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getControlHighlight")] != -1);
		return scall<R>("getControlHighlight", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	static auto getControlInfo(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getControlInfo")] != -1);
		return scall<R>("getControlInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	static auto getControlShadow(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getControlShadow")] != -1);
		return scall<R>("getControlShadow", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	static auto getControlTextColor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getControlTextColor")] != -1);
		return scall<R>("getControlTextColor", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::FontUIResource, typename... Args>
	static auto getControlTextFont(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getControlTextFont")] != -1);
		return scall<R>("getControlTextFont", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::metal::MetalTheme, typename... Args>
	static auto getCurrentTheme(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCurrentTheme")] != -1);
		return scall<R>("getCurrentTheme", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::UIDefaults, typename... Args>
	auto getDefaults(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaults")] != -1);
		return call<R>("getDefaults", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDescription")] != -1);
		return call<R>("getDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	static auto getDesktopColor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDesktopColor")] != -1);
		return scall<R>("getDesktopColor", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getDisabledIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisabledIcon")] != -1);
		return call<R>("getDisabledIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getDisabledSelectedIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisabledSelectedIcon")] != -1);
		return call<R>("getDisabledSelectedIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	static auto getFocusColor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFocusColor")] != -1);
		return scall<R>("getFocusColor", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	static auto getHighlightedTextColor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHighlightedTextColor")] != -1);
		return scall<R>("getHighlightedTextColor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getID")] != -1);
		return call<R>("getID", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	static auto getInactiveControlTextColor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInactiveControlTextColor")] != -1);
		return scall<R>("getInactiveControlTextColor", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	static auto getInactiveSystemTextColor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInactiveSystemTextColor")] != -1);
		return scall<R>("getInactiveSystemTextColor", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::LayoutStyle, typename... Args>
	auto getLayoutStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLayoutStyle")] != -1);
		return call<R>("getLayoutStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	static auto getMenuBackground(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMenuBackground")] != -1);
		return scall<R>("getMenuBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	static auto getMenuDisabledForeground(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMenuDisabledForeground")] != -1);
		return scall<R>("getMenuDisabledForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	static auto getMenuForeground(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMenuForeground")] != -1);
		return scall<R>("getMenuForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	static auto getMenuSelectedBackground(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMenuSelectedBackground")] != -1);
		return scall<R>("getMenuSelectedBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	static auto getMenuSelectedForeground(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMenuSelectedForeground")] != -1);
		return scall<R>("getMenuSelectedForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::FontUIResource, typename... Args>
	static auto getMenuTextFont(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMenuTextFont")] != -1);
		return scall<R>("getMenuTextFont", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	static auto getPrimaryControl(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrimaryControl")] != -1);
		return scall<R>("getPrimaryControl", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	static auto getPrimaryControlDarkShadow(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrimaryControlDarkShadow")] != -1);
		return scall<R>("getPrimaryControlDarkShadow", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	static auto getPrimaryControlHighlight(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrimaryControlHighlight")] != -1);
		return scall<R>("getPrimaryControlHighlight", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	static auto getPrimaryControlInfo(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrimaryControlInfo")] != -1);
		return scall<R>("getPrimaryControlInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	static auto getPrimaryControlShadow(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrimaryControlShadow")] != -1);
		return scall<R>("getPrimaryControlShadow", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	static auto getSeparatorBackground(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSeparatorBackground")] != -1);
		return scall<R>("getSeparatorBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	static auto getSeparatorForeground(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSeparatorForeground")] != -1);
		return scall<R>("getSeparatorForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::FontUIResource, typename... Args>
	static auto getSubTextFont(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSubTextFont")] != -1);
		return scall<R>("getSubTextFont", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getSupportsWindowDecorations(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSupportsWindowDecorations")] != -1);
		return call<R>("getSupportsWindowDecorations", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	static auto getSystemTextColor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSystemTextColor")] != -1);
		return scall<R>("getSystemTextColor", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::FontUIResource, typename... Args>
	static auto getSystemTextFont(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSystemTextFont")] != -1);
		return scall<R>("getSystemTextFont", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	static auto getTextHighlightColor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextHighlightColor")] != -1);
		return scall<R>("getTextHighlightColor", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	static auto getUserTextColor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUserTextColor")] != -1);
		return scall<R>("getUserTextColor", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::FontUIResource, typename... Args>
	static auto getUserTextFont(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUserTextFont")] != -1);
		return scall<R>("getUserTextFont", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	static auto getWhite(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWhite")] != -1);
		return scall<R>("getWhite", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	static auto getWindowBackground(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWindowBackground")] != -1);
		return scall<R>("getWindowBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	static auto getWindowTitleBackground(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWindowTitleBackground")] != -1);
		return scall<R>("getWindowTitleBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::FontUIResource, typename... Args>
	static auto getWindowTitleFont(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWindowTitleFont")] != -1);
		return scall<R>("getWindowTitleFont", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	static auto getWindowTitleForeground(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWindowTitleForeground")] != -1);
		return scall<R>("getWindowTitleForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	static auto getWindowTitleInactiveBackground(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWindowTitleInactiveBackground")] != -1);
		return scall<R>("getWindowTitleInactiveBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	static auto getWindowTitleInactiveForeground(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWindowTitleInactiveForeground")] != -1);
		return scall<R>("getWindowTitleInactiveForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isNativeLookAndFeel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isNativeLookAndFeel")] != -1);
		return call<R>("isNativeLookAndFeel", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSupportedLookAndFeel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSupportedLookAndFeel")] != -1);
		return call<R>("isSupportedLookAndFeel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto provideErrorFeedback(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("provideErrorFeedback")] != -1);
		return call<R>("provideErrorFeedback", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setCurrentTheme(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCurrentTheme")] != -1);
		return scall<R>("setCurrentTheme", std::forward<Args>(args)...);
	}

};

#endif
