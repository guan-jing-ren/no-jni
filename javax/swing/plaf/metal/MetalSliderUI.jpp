#ifndef javax_swing_plaf_metal_MetalSliderUI_HPP
#define javax_swing_plaf_metal_MetalSliderUI_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::metal::MetalSliderUI : public jObject<::javax::swing::plaf::metal::MetalSliderUI, ::javax::swing::plaf::basic::BasicSliderUI> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_metal / "MetalSliderUI";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::swing::plaf::ComponentUI(::javax::swing::JComponent)>("createUI"), //
		jMethod<::jint()>("getTickLength"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("installUI"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paintFocus"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paintThumb"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paintTrack"), //
	};

	template<typename R = ::javax::swing::plaf::ComponentUI, typename... Args>
	static auto createUI(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createUI")] != -1);
		return scall<R>("createUI", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTickLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTickLength")] != -1);
		return call<R>("getTickLength", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto installUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("installUI")] != -1);
		return call<R>("installUI", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintFocus")] != -1);
		return call<R>("paintFocus", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintThumb(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintThumb")] != -1);
		return call<R>("paintThumb", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintTrack(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintTrack")] != -1);
		return call<R>("paintTrack", forward<Args>(args)...);
	}

};

#endif
