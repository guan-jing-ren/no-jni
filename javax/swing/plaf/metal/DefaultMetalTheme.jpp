#ifndef javax_swing_plaf_metal_DefaultMetalTheme_HPP
#define javax_swing_plaf_metal_DefaultMetalTheme_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::metal::DefaultMetalTheme : public jObject<::javax::swing::plaf::metal::DefaultMetalTheme, ::javax::swing::plaf::metal::MetalTheme> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_metal / "DefaultMetalTheme";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::swing::plaf::FontUIResource()>("getControlTextFont"), //
		jMethod<::javax::swing::plaf::FontUIResource()>("getMenuTextFont"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::javax::swing::plaf::FontUIResource()>("getSubTextFont"), //
		jMethod<::javax::swing::plaf::FontUIResource()>("getSystemTextFont"), //
		jMethod<::javax::swing::plaf::FontUIResource()>("getUserTextFont"), //
		jMethod<::javax::swing::plaf::FontUIResource()>("getWindowTitleFont"), //
	};

	template<typename R = ::javax::swing::plaf::FontUIResource, typename... Args>
	auto getControlTextFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getControlTextFont")] != -1);
		return call<R>("getControlTextFont", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::FontUIResource, typename... Args>
	auto getMenuTextFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMenuTextFont")] != -1);
		return call<R>("getMenuTextFont", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::FontUIResource, typename... Args>
	auto getSubTextFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSubTextFont")] != -1);
		return call<R>("getSubTextFont", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::FontUIResource, typename... Args>
	auto getSystemTextFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSystemTextFont")] != -1);
		return call<R>("getSystemTextFont", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::FontUIResource, typename... Args>
	auto getUserTextFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUserTextFont")] != -1);
		return call<R>("getUserTextFont", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::FontUIResource, typename... Args>
	auto getWindowTitleFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWindowTitleFont")] != -1);
		return call<R>("getWindowTitleFont", std::forward<Args>(args)...);
	}

};

#endif
