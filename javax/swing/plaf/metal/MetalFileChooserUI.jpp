#ifndef javax_swing_plaf_metal_MetalFileChooserUI_HPP
#define javax_swing_plaf_metal_MetalFileChooserUI_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::metal::MetalFileChooserUI : public jObject<::javax::swing::plaf::metal::MetalFileChooserUI, ::javax::swing::plaf::basic::BasicFileChooserUI> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_metal / "MetalFileChooserUI";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::JFileChooser)>(), //
		jMethod<::javax::swing::event::ListSelectionListener(::javax::swing::JFileChooser)>("createListSelectionListener"), //
		jMethod<::java::beans::PropertyChangeListener(::javax::swing::JFileChooser)>("createPropertyChangeListener"), //
		jMethod<::javax::swing::plaf::ComponentUI(::javax::swing::JComponent)>("createUI"), //
		jMethod<::jvoid(::javax::swing::JFileChooser, ::java::io::File)>("ensureFileIsVisible"), //
		jMethod<::java::lang::String()>("getDirectoryName"), //
		jMethod<::java::lang::String()>("getFileName"), //
		jMethod<::java::awt::Dimension(::javax::swing::JComponent)>("getMaximumSize"), //
		jMethod<::java::awt::Dimension(::javax::swing::JComponent)>("getMinimumSize"), //
		jMethod<::java::awt::Dimension(::javax::swing::JComponent)>("getPreferredSize"), //
		jMethod<::jvoid(::javax::swing::JFileChooser)>("installComponents"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("installUI"), //
		jMethod<::jvoid(::javax::swing::JFileChooser)>("rescanCurrentDirectory"), //
		jMethod<::jvoid(::java::lang::String)>("setDirectoryName"), //
		jMethod<::jvoid(::java::lang::String)>("setFileName"), //
		jMethod<::jvoid(::javax::swing::JFileChooser)>("uninstallComponents"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("uninstallUI"), //
		jMethod<::jvoid(::javax::swing::event::ListSelectionEvent)>("valueChanged"), //
	};

	template<typename R = ::javax::swing::event::ListSelectionListener, typename... Args>
	auto createListSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createListSelectionListener")] != -1);
		return call<R>("createListSelectionListener", forward<Args>(args)...);
	}

	template<typename R = ::java::beans::PropertyChangeListener, typename... Args>
	auto createPropertyChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createPropertyChangeListener")] != -1);
		return call<R>("createPropertyChangeListener", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ComponentUI, typename... Args>
	static auto createUI(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createUI")] != -1);
		return scall<R>("createUI", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto ensureFileIsVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("ensureFileIsVisible")] != -1);
		return call<R>("ensureFileIsVisible", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDirectoryName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDirectoryName")] != -1);
		return call<R>("getDirectoryName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFileName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFileName")] != -1);
		return call<R>("getFileName", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMaximumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaximumSize")] != -1);
		return call<R>("getMaximumSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinimumSize")] != -1);
		return call<R>("getMinimumSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreferredSize")] != -1);
		return call<R>("getPreferredSize", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto installComponents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("installComponents")] != -1);
		return call<R>("installComponents", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto installUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("installUI")] != -1);
		return call<R>("installUI", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto rescanCurrentDirectory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("rescanCurrentDirectory")] != -1);
		return call<R>("rescanCurrentDirectory", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDirectoryName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDirectoryName")] != -1);
		return call<R>("setDirectoryName", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFileName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFileName")] != -1);
		return call<R>("setFileName", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto uninstallComponents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("uninstallComponents")] != -1);
		return call<R>("uninstallComponents", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto uninstallUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("uninstallUI")] != -1);
		return call<R>("uninstallUI", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto valueChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("valueChanged")] != -1);
		return call<R>("valueChanged", forward<Args>(args)...);
	}

};

#endif
