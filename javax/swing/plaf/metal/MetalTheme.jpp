#ifndef javax_swing_plaf_metal_MetalTheme_HPP
#define javax_swing_plaf_metal_MetalTheme_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::metal::MetalTheme : public jObject<::javax::swing::plaf::metal::MetalTheme, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_metal / "MetalTheme";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::javax::swing::UIDefaults)>("addCustomEntriesToTable"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getAcceleratorForeground"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getAcceleratorSelectedForeground"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getControl"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getControlDarkShadow"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getControlDisabled"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getControlHighlight"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getControlInfo"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getControlShadow"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getControlTextColor"), //
		jMethod<::javax::swing::plaf::FontUIResource()>("getControlTextFont"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getDesktopColor"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getFocusColor"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getHighlightedTextColor"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getInactiveControlTextColor"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getInactiveSystemTextColor"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getMenuBackground"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getMenuDisabledForeground"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getMenuForeground"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getMenuSelectedBackground"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getMenuSelectedForeground"), //
		jMethod<::javax::swing::plaf::FontUIResource()>("getMenuTextFont"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getPrimaryControl"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getPrimaryControlDarkShadow"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getPrimaryControlHighlight"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getPrimaryControlInfo"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getPrimaryControlShadow"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getSeparatorBackground"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getSeparatorForeground"), //
		jMethod<::javax::swing::plaf::FontUIResource()>("getSubTextFont"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getSystemTextColor"), //
		jMethod<::javax::swing::plaf::FontUIResource()>("getSystemTextFont"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getTextHighlightColor"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getUserTextColor"), //
		jMethod<::javax::swing::plaf::FontUIResource()>("getUserTextFont"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getWindowBackground"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getWindowTitleBackground"), //
		jMethod<::javax::swing::plaf::FontUIResource()>("getWindowTitleFont"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getWindowTitleForeground"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getWindowTitleInactiveBackground"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getWindowTitleInactiveForeground"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addCustomEntriesToTable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addCustomEntriesToTable")] != -1);
		return call<R>("addCustomEntriesToTable", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	auto getAcceleratorForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAcceleratorForeground")] != -1);
		return call<R>("getAcceleratorForeground", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	auto getAcceleratorSelectedForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAcceleratorSelectedForeground")] != -1);
		return call<R>("getAcceleratorSelectedForeground", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	auto getControl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getControl")] != -1);
		return call<R>("getControl", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	auto getControlDarkShadow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getControlDarkShadow")] != -1);
		return call<R>("getControlDarkShadow", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	auto getControlDisabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getControlDisabled")] != -1);
		return call<R>("getControlDisabled", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	auto getControlHighlight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getControlHighlight")] != -1);
		return call<R>("getControlHighlight", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	auto getControlInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getControlInfo")] != -1);
		return call<R>("getControlInfo", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	auto getControlShadow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getControlShadow")] != -1);
		return call<R>("getControlShadow", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	auto getControlTextColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getControlTextColor")] != -1);
		return call<R>("getControlTextColor", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::FontUIResource, typename... Args>
	auto getControlTextFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getControlTextFont")] != -1);
		return call<R>("getControlTextFont", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	auto getDesktopColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDesktopColor")] != -1);
		return call<R>("getDesktopColor", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	auto getFocusColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFocusColor")] != -1);
		return call<R>("getFocusColor", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	auto getHighlightedTextColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHighlightedTextColor")] != -1);
		return call<R>("getHighlightedTextColor", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	auto getInactiveControlTextColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInactiveControlTextColor")] != -1);
		return call<R>("getInactiveControlTextColor", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	auto getInactiveSystemTextColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInactiveSystemTextColor")] != -1);
		return call<R>("getInactiveSystemTextColor", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	auto getMenuBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMenuBackground")] != -1);
		return call<R>("getMenuBackground", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	auto getMenuDisabledForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMenuDisabledForeground")] != -1);
		return call<R>("getMenuDisabledForeground", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	auto getMenuForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMenuForeground")] != -1);
		return call<R>("getMenuForeground", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	auto getMenuSelectedBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMenuSelectedBackground")] != -1);
		return call<R>("getMenuSelectedBackground", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	auto getMenuSelectedForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMenuSelectedForeground")] != -1);
		return call<R>("getMenuSelectedForeground", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::FontUIResource, typename... Args>
	auto getMenuTextFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMenuTextFont")] != -1);
		return call<R>("getMenuTextFont", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	auto getPrimaryControl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPrimaryControl")] != -1);
		return call<R>("getPrimaryControl", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	auto getPrimaryControlDarkShadow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPrimaryControlDarkShadow")] != -1);
		return call<R>("getPrimaryControlDarkShadow", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	auto getPrimaryControlHighlight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPrimaryControlHighlight")] != -1);
		return call<R>("getPrimaryControlHighlight", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	auto getPrimaryControlInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPrimaryControlInfo")] != -1);
		return call<R>("getPrimaryControlInfo", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	auto getPrimaryControlShadow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPrimaryControlShadow")] != -1);
		return call<R>("getPrimaryControlShadow", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	auto getSeparatorBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSeparatorBackground")] != -1);
		return call<R>("getSeparatorBackground", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	auto getSeparatorForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSeparatorForeground")] != -1);
		return call<R>("getSeparatorForeground", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::FontUIResource, typename... Args>
	auto getSubTextFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSubTextFont")] != -1);
		return call<R>("getSubTextFont", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	auto getSystemTextColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSystemTextColor")] != -1);
		return call<R>("getSystemTextColor", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::FontUIResource, typename... Args>
	auto getSystemTextFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSystemTextFont")] != -1);
		return call<R>("getSystemTextFont", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	auto getTextHighlightColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTextHighlightColor")] != -1);
		return call<R>("getTextHighlightColor", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	auto getUserTextColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUserTextColor")] != -1);
		return call<R>("getUserTextColor", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::FontUIResource, typename... Args>
	auto getUserTextFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUserTextFont")] != -1);
		return call<R>("getUserTextFont", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	auto getWindowBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getWindowBackground")] != -1);
		return call<R>("getWindowBackground", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	auto getWindowTitleBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getWindowTitleBackground")] != -1);
		return call<R>("getWindowTitleBackground", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::FontUIResource, typename... Args>
	auto getWindowTitleFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getWindowTitleFont")] != -1);
		return call<R>("getWindowTitleFont", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	auto getWindowTitleForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getWindowTitleForeground")] != -1);
		return call<R>("getWindowTitleForeground", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	auto getWindowTitleInactiveBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getWindowTitleInactiveBackground")] != -1);
		return call<R>("getWindowTitleInactiveBackground", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	auto getWindowTitleInactiveForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getWindowTitleInactiveForeground")] != -1);
		return call<R>("getWindowTitleInactiveForeground", forward<Args>(args)...);
	}

};

#endif
