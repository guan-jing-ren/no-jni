#ifndef javax_swing_plaf_metal_OceanTheme_HPP
#define javax_swing_plaf_metal_OceanTheme_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::plaf::metal::OceanTheme : public jObject<::javax::swing::plaf::metal::OceanTheme, ::javax::swing::plaf::metal::DefaultMetalTheme> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf_metal / "OceanTheme";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::javax::swing::UIDefaults)>("addCustomEntriesToTable"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getControlTextColor"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getDesktopColor"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getInactiveControlTextColor"), //
		jMethod<::javax::swing::plaf::ColorUIResource()>("getMenuDisabledForeground"), //
		jMethod<::java::lang::String()>("getName"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addCustomEntriesToTable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addCustomEntriesToTable")] != -1);
		return call<R>("addCustomEntriesToTable", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	auto getControlTextColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getControlTextColor")] != -1);
		return call<R>("getControlTextColor", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	auto getDesktopColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDesktopColor")] != -1);
		return call<R>("getDesktopColor", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	auto getInactiveControlTextColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInactiveControlTextColor")] != -1);
		return call<R>("getInactiveControlTextColor", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorUIResource, typename... Args>
	auto getMenuDisabledForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMenuDisabledForeground")] != -1);
		return call<R>("getMenuDisabledForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

};

#endif
