#ifndef javax_swing_plaf_BorderUIResource_HPP
#define javax_swing_plaf_BorderUIResource_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::plaf::BorderUIResource : public jObject<::javax::swing::plaf::BorderUIResource, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf / "BorderUIResource";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::border::Border)>(), //
		jMethod<::javax::swing::border::Border()>("getBlackLineBorderUIResource"), //
		jMethod<::java::awt::Insets(::java::awt::Component)>("getBorderInsets"), //
		jMethod<::javax::swing::border::Border()>("getEtchedBorderUIResource"), //
		jMethod<::javax::swing::border::Border()>("getLoweredBevelBorderUIResource"), //
		jMethod<::javax::swing::border::Border()>("getRaisedBevelBorderUIResource"), //
		jMethod<::jboolean()>("isBorderOpaque"), //
		jMethod<::jvoid(::java::awt::Component, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintBorder"), //
	};

	template<typename R = ::javax::swing::border::Border, typename... Args>
	static auto getBlackLineBorderUIResource(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBlackLineBorderUIResource")] != -1);
		return scall<R>("getBlackLineBorderUIResource", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Insets, typename... Args>
	auto getBorderInsets(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorderInsets")] != -1);
		return call<R>("getBorderInsets", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::border::Border, typename... Args>
	static auto getEtchedBorderUIResource(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEtchedBorderUIResource")] != -1);
		return scall<R>("getEtchedBorderUIResource", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::border::Border, typename... Args>
	static auto getLoweredBevelBorderUIResource(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLoweredBevelBorderUIResource")] != -1);
		return scall<R>("getLoweredBevelBorderUIResource", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::border::Border, typename... Args>
	static auto getRaisedBevelBorderUIResource(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRaisedBevelBorderUIResource")] != -1);
		return scall<R>("getRaisedBevelBorderUIResource", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isBorderOpaque(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isBorderOpaque")] != -1);
		return call<R>("isBorderOpaque", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paintBorder")] != -1);
		return call<R>("paintBorder", std::forward<Args>(args)...);
	}

};

#endif
