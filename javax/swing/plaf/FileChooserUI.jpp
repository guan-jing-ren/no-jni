#ifndef javax_swing_plaf_FileChooserUI_HPP
#define javax_swing_plaf_FileChooserUI_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::plaf::FileChooserUI : public jObject<::javax::swing::plaf::FileChooserUI, ::javax::swing::plaf::ComponentUI> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_plaf / "FileChooserUI";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::javax::swing::JFileChooser, ::java::io::File)>("ensureFileIsVisible"), //
		jMethod<::javax::swing::filechooser::FileFilter(::javax::swing::JFileChooser)>("getAcceptAllFileFilter"), //
		jMethod<::java::lang::String(::javax::swing::JFileChooser)>("getApproveButtonText"), //
		jMethod<::javax::swing::JButton(::javax::swing::JFileChooser)>("getDefaultButton"), //
		jMethod<::java::lang::String(::javax::swing::JFileChooser)>("getDialogTitle"), //
		jMethod<::javax::swing::filechooser::FileView(::javax::swing::JFileChooser)>("getFileView"), //
		jMethod<::jvoid(::javax::swing::JFileChooser)>("rescanCurrentDirectory"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto ensureFileIsVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ensureFileIsVisible")] != -1);
		return call<R>("ensureFileIsVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::filechooser::FileFilter, typename... Args>
	auto getAcceptAllFileFilter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAcceptAllFileFilter")] != -1);
		return call<R>("getAcceptAllFileFilter", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getApproveButtonText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getApproveButtonText")] != -1);
		return call<R>("getApproveButtonText", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JButton, typename... Args>
	auto getDefaultButton(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultButton")] != -1);
		return call<R>("getDefaultButton", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDialogTitle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDialogTitle")] != -1);
		return call<R>("getDialogTitle", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::filechooser::FileView, typename... Args>
	auto getFileView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFileView")] != -1);
		return call<R>("getFileView", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto rescanCurrentDirectory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rescanCurrentDirectory")] != -1);
		return call<R>("rescanCurrentDirectory", std::forward<Args>(args)...);
	}

};

#endif
