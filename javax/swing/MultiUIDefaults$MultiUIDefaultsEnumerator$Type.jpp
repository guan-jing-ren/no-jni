#ifndef javax_swing_MultiUIDefaults$MultiUIDefaultsEnumerator$Type_HPP
#define javax_swing_MultiUIDefaults$MultiUIDefaultsEnumerator$Type_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::MultiUIDefaults$MultiUIDefaultsEnumerator$Type : public jObject<::javax::swing::MultiUIDefaults$MultiUIDefaultsEnumerator$Type, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "MultiUIDefaults$MultiUIDefaultsEnumerator$Type";

	constexpr static Enume field_signatures{
		jField<::javax::swing::MultiUIDefaults$MultiUIDefaultsEnumerator$Type>("ELEMENTS"), //
		jField<::javax::swing::MultiUIDefaults$MultiUIDefaultsEnumerator$Type>("KEYS"), //
	};

	template<typename F = ::javax::swing::MultiUIDefaults$MultiUIDefaultsEnumerator$Type>
	static auto ELEMENTS() {
		static_assert(field_signatures[jField<F>("ELEMENTS")] != -1);
		return sat<F>("ELEMENTS");
	}

	template<typename F = ::javax::swing::MultiUIDefaults$MultiUIDefaultsEnumerator$Type>
	static auto KEYS() {
		static_assert(field_signatures[jField<F>("KEYS")] != -1);
		return sat<F>("KEYS");
	}

	constexpr static Enume method_signatures{
		jMethod<::javax::swing::MultiUIDefaults$MultiUIDefaultsEnumerator$Type(::java::lang::String)>("valueOf"), //
		jMethod<::javax::swing::MultiUIDefaults$MultiUIDefaultsEnumerator$Type *()>("values"), //
	};

	template<typename R = ::javax::swing::MultiUIDefaults$MultiUIDefaultsEnumerator$Type, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::MultiUIDefaults$MultiUIDefaultsEnumerator$Type *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", forward<Args>(args)...);
	}

};

#endif
