#ifndef javax_swing_JSplitPane_HPP
#define javax_swing_JSplitPane_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JSplitPane : public jObject<::javax::swing::JSplitPane, ::javax::swing::JComponent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JSplitPane";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("BOTTOM"), //
		jField<::java::lang::String>("CONTINUOUS_LAYOUT_PROPERTY"), //
		jField<::java::lang::String>("DIVIDER"), //
		jField<::java::lang::String>("DIVIDER_LOCATION_PROPERTY"), //
		jField<::java::lang::String>("DIVIDER_SIZE_PROPERTY"), //
		jField<::jint>("HORIZONTAL_SPLIT"), //
		jField<::java::lang::String>("LAST_DIVIDER_LOCATION_PROPERTY"), //
		jField<::java::lang::String>("LEFT"), //
		jField<::java::lang::String>("ONE_TOUCH_EXPANDABLE_PROPERTY"), //
		jField<::java::lang::String>("ORIENTATION_PROPERTY"), //
		jField<::java::lang::String>("RESIZE_WEIGHT_PROPERTY"), //
		jField<::java::lang::String>("RIGHT"), //
		jField<::java::lang::String>("TOP"), //
		jField<::jint>("VERTICAL_SPLIT"), //
	};

	template<typename F = ::java::lang::String>
	static auto BOTTOM() {
		static_assert(field_signatures[jField<F>("BOTTOM")] != -1);
		return sat<F>("BOTTOM");
	}

	template<typename F = ::java::lang::String>
	static auto CONTINUOUS_LAYOUT_PROPERTY() {
		static_assert(field_signatures[jField<F>("CONTINUOUS_LAYOUT_PROPERTY")] != -1);
		return sat<F>("CONTINUOUS_LAYOUT_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto DIVIDER() {
		static_assert(field_signatures[jField<F>("DIVIDER")] != -1);
		return sat<F>("DIVIDER");
	}

	template<typename F = ::java::lang::String>
	static auto DIVIDER_LOCATION_PROPERTY() {
		static_assert(field_signatures[jField<F>("DIVIDER_LOCATION_PROPERTY")] != -1);
		return sat<F>("DIVIDER_LOCATION_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto DIVIDER_SIZE_PROPERTY() {
		static_assert(field_signatures[jField<F>("DIVIDER_SIZE_PROPERTY")] != -1);
		return sat<F>("DIVIDER_SIZE_PROPERTY");
	}

	template<typename F = ::jint>
	static auto HORIZONTAL_SPLIT() {
		static_assert(field_signatures[jField<F>("HORIZONTAL_SPLIT")] != -1);
		return sat<F>("HORIZONTAL_SPLIT");
	}

	template<typename F = ::java::lang::String>
	static auto LAST_DIVIDER_LOCATION_PROPERTY() {
		static_assert(field_signatures[jField<F>("LAST_DIVIDER_LOCATION_PROPERTY")] != -1);
		return sat<F>("LAST_DIVIDER_LOCATION_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto LEFT() {
		static_assert(field_signatures[jField<F>("LEFT")] != -1);
		return sat<F>("LEFT");
	}

	template<typename F = ::java::lang::String>
	static auto ONE_TOUCH_EXPANDABLE_PROPERTY() {
		static_assert(field_signatures[jField<F>("ONE_TOUCH_EXPANDABLE_PROPERTY")] != -1);
		return sat<F>("ONE_TOUCH_EXPANDABLE_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto ORIENTATION_PROPERTY() {
		static_assert(field_signatures[jField<F>("ORIENTATION_PROPERTY")] != -1);
		return sat<F>("ORIENTATION_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto RESIZE_WEIGHT_PROPERTY() {
		static_assert(field_signatures[jField<F>("RESIZE_WEIGHT_PROPERTY")] != -1);
		return sat<F>("RESIZE_WEIGHT_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto RIGHT() {
		static_assert(field_signatures[jField<F>("RIGHT")] != -1);
		return sat<F>("RIGHT");
	}

	template<typename F = ::java::lang::String>
	static auto TOP() {
		static_assert(field_signatures[jField<F>("TOP")] != -1);
		return sat<F>("TOP");
	}

	template<typename F = ::jint>
	static auto VERTICAL_SPLIT() {
		static_assert(field_signatures[jField<F>("VERTICAL_SPLIT")] != -1);
		return sat<F>("VERTICAL_SPLIT");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint)>(), //
		jConstructor<::jvoid(::jint, ::java::awt::Component, ::java::awt::Component)>(), //
		jConstructor<::jvoid(::jint, ::jboolean)>(), //
		jConstructor<::jvoid(::jint, ::jboolean, ::java::awt::Component, ::java::awt::Component)>(), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::java::awt::Component()>("getBottomComponent"), //
		jMethod<::jint()>("getDividerLocation"), //
		jMethod<::jint()>("getDividerSize"), //
		jMethod<::jint()>("getLastDividerLocation"), //
		jMethod<::java::awt::Component()>("getLeftComponent"), //
		jMethod<::jint()>("getMaximumDividerLocation"), //
		jMethod<::jint()>("getMinimumDividerLocation"), //
		jMethod<::jint()>("getOrientation"), //
		jMethod<::jdouble()>("getResizeWeight"), //
		jMethod<::java::awt::Component()>("getRightComponent"), //
		jMethod<::java::awt::Component()>("getTopComponent"), //
		jMethod<::javax::swing::plaf::SplitPaneUI()>("getUI"), //
		jMethod<::java::lang::String()>("getUIClassID"), //
		jMethod<::jboolean()>("isContinuousLayout"), //
		jMethod<::jboolean()>("isOneTouchExpandable"), //
		jMethod<::jboolean()>("isValidateRoot"), //
		jMethod<::jvoid(::jint)>("remove"), //
		jMethod<::jvoid(::java::awt::Component)>("remove"), //
		jMethod<::jvoid()>("removeAll"), //
		jMethod<::jvoid()>("resetToPreferredSizes"), //
		jMethod<::jvoid(::java::awt::Component)>("setBottomComponent"), //
		jMethod<::jvoid(::jboolean)>("setContinuousLayout"), //
		jMethod<::jvoid(::jdouble)>("setDividerLocation"), //
		jMethod<::jvoid(::jint)>("setDividerLocation"), //
		jMethod<::jvoid(::jint)>("setDividerSize"), //
		jMethod<::jvoid(::jint)>("setLastDividerLocation"), //
		jMethod<::jvoid(::java::awt::Component)>("setLeftComponent"), //
		jMethod<::jvoid(::jboolean)>("setOneTouchExpandable"), //
		jMethod<::jvoid(::jint)>("setOrientation"), //
		jMethod<::jvoid(::jdouble)>("setResizeWeight"), //
		jMethod<::jvoid(::java::awt::Component)>("setRightComponent"), //
		jMethod<::jvoid(::java::awt::Component)>("setTopComponent"), //
		jMethod<::jvoid(::javax::swing::plaf::SplitPaneUI)>("setUI"), //
		jMethod<::jvoid()>("updateUI"), //
	};

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getBottomComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBottomComponent")] != -1);
		return call<R>("getBottomComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDividerLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDividerLocation")] != -1);
		return call<R>("getDividerLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDividerSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDividerSize")] != -1);
		return call<R>("getDividerSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLastDividerLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLastDividerLocation")] != -1);
		return call<R>("getLastDividerLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getLeftComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLeftComponent")] != -1);
		return call<R>("getLeftComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaximumDividerLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaximumDividerLocation")] != -1);
		return call<R>("getMaximumDividerLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinimumDividerLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinimumDividerLocation")] != -1);
		return call<R>("getMinimumDividerLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOrientation")] != -1);
		return call<R>("getOrientation", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getResizeWeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResizeWeight")] != -1);
		return call<R>("getResizeWeight", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getRightComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRightComponent")] != -1);
		return call<R>("getRightComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getTopComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTopComponent")] != -1);
		return call<R>("getTopComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::SplitPaneUI, typename... Args>
	auto getUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUI")] != -1);
		return call<R>("getUI", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUIClassID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUIClassID")] != -1);
		return call<R>("getUIClassID", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isContinuousLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isContinuousLayout")] != -1);
		return call<R>("isContinuousLayout", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isOneTouchExpandable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isOneTouchExpandable")] != -1);
		return call<R>("isOneTouchExpandable", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isValidateRoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isValidateRoot")] != -1);
		return call<R>("isValidateRoot", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAll")] != -1);
		return call<R>("removeAll", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto resetToPreferredSizes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("resetToPreferredSizes")] != -1);
		return call<R>("resetToPreferredSizes", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBottomComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBottomComponent")] != -1);
		return call<R>("setBottomComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setContinuousLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setContinuousLayout")] != -1);
		return call<R>("setContinuousLayout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDividerLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDividerLocation")] != -1);
		return call<R>("setDividerLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDividerSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDividerSize")] != -1);
		return call<R>("setDividerSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLastDividerLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLastDividerLocation")] != -1);
		return call<R>("setLastDividerLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLeftComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLeftComponent")] != -1);
		return call<R>("setLeftComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOneTouchExpandable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOneTouchExpandable")] != -1);
		return call<R>("setOneTouchExpandable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOrientation")] != -1);
		return call<R>("setOrientation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setResizeWeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setResizeWeight")] != -1);
		return call<R>("setResizeWeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRightComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRightComponent")] != -1);
		return call<R>("setRightComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTopComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTopComponent")] != -1);
		return call<R>("setTopComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUI")] != -1);
		return call<R>("setUI", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateUI")] != -1);
		return call<R>("updateUI", std::forward<Args>(args)...);
	}

};

#endif
