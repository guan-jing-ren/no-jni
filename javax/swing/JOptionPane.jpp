#ifndef javax_swing_JOptionPane_HPP
#define javax_swing_JOptionPane_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JOptionPane : public jObject<::javax::swing::JOptionPane, ::javax::swing::JComponent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JOptionPane";

	constexpr static Enume field_signatures{
		jField<::jint>("CANCEL_OPTION"), //
		jField<::jint>("CLOSED_OPTION"), //
		jField<::jint>("DEFAULT_OPTION"), //
		jField<::jint>("ERROR_MESSAGE"), //
		jField<::java::lang::String>("ICON_PROPERTY"), //
		jField<::jint>("INFORMATION_MESSAGE"), //
		jField<::java::lang::String>("INITIAL_SELECTION_VALUE_PROPERTY"), //
		jField<::java::lang::String>("INITIAL_VALUE_PROPERTY"), //
		jField<::java::lang::String>("INPUT_VALUE_PROPERTY"), //
		jField<::java::lang::String>("MESSAGE_PROPERTY"), //
		jField<::java::lang::String>("MESSAGE_TYPE_PROPERTY"), //
		jField<::jint>("NO_OPTION"), //
		jField<::jint>("OK_CANCEL_OPTION"), //
		jField<::jint>("OK_OPTION"), //
		jField<::java::lang::String>("OPTIONS_PROPERTY"), //
		jField<::java::lang::String>("OPTION_TYPE_PROPERTY"), //
		jField<::jint>("PLAIN_MESSAGE"), //
		jField<::jint>("QUESTION_MESSAGE"), //
		jField<::java::lang::String>("SELECTION_VALUES_PROPERTY"), //
		jField<::java::lang::Object>("UNINITIALIZED_VALUE"), //
		jField<::java::lang::String>("VALUE_PROPERTY"), //
		jField<::java::lang::String>("WANTS_INPUT_PROPERTY"), //
		jField<::jint>("WARNING_MESSAGE"), //
		jField<::jint>("YES_NO_CANCEL_OPTION"), //
		jField<::jint>("YES_NO_OPTION"), //
		jField<::jint>("YES_OPTION"), //
	};

	template<typename F = ::jint>
	static auto CANCEL_OPTION() {
		static_assert(field_signatures[jField<F>("CANCEL_OPTION")] != -1);
		return sat<F>("CANCEL_OPTION");
	}

	template<typename F = ::jint>
	static auto CLOSED_OPTION() {
		static_assert(field_signatures[jField<F>("CLOSED_OPTION")] != -1);
		return sat<F>("CLOSED_OPTION");
	}

	template<typename F = ::jint>
	static auto DEFAULT_OPTION() {
		static_assert(field_signatures[jField<F>("DEFAULT_OPTION")] != -1);
		return sat<F>("DEFAULT_OPTION");
	}

	template<typename F = ::jint>
	static auto ERROR_MESSAGE() {
		static_assert(field_signatures[jField<F>("ERROR_MESSAGE")] != -1);
		return sat<F>("ERROR_MESSAGE");
	}

	template<typename F = ::java::lang::String>
	static auto ICON_PROPERTY() {
		static_assert(field_signatures[jField<F>("ICON_PROPERTY")] != -1);
		return sat<F>("ICON_PROPERTY");
	}

	template<typename F = ::jint>
	static auto INFORMATION_MESSAGE() {
		static_assert(field_signatures[jField<F>("INFORMATION_MESSAGE")] != -1);
		return sat<F>("INFORMATION_MESSAGE");
	}

	template<typename F = ::java::lang::String>
	static auto INITIAL_SELECTION_VALUE_PROPERTY() {
		static_assert(field_signatures[jField<F>("INITIAL_SELECTION_VALUE_PROPERTY")] != -1);
		return sat<F>("INITIAL_SELECTION_VALUE_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto INITIAL_VALUE_PROPERTY() {
		static_assert(field_signatures[jField<F>("INITIAL_VALUE_PROPERTY")] != -1);
		return sat<F>("INITIAL_VALUE_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto INPUT_VALUE_PROPERTY() {
		static_assert(field_signatures[jField<F>("INPUT_VALUE_PROPERTY")] != -1);
		return sat<F>("INPUT_VALUE_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto MESSAGE_PROPERTY() {
		static_assert(field_signatures[jField<F>("MESSAGE_PROPERTY")] != -1);
		return sat<F>("MESSAGE_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto MESSAGE_TYPE_PROPERTY() {
		static_assert(field_signatures[jField<F>("MESSAGE_TYPE_PROPERTY")] != -1);
		return sat<F>("MESSAGE_TYPE_PROPERTY");
	}

	template<typename F = ::jint>
	static auto NO_OPTION() {
		static_assert(field_signatures[jField<F>("NO_OPTION")] != -1);
		return sat<F>("NO_OPTION");
	}

	template<typename F = ::jint>
	static auto OK_CANCEL_OPTION() {
		static_assert(field_signatures[jField<F>("OK_CANCEL_OPTION")] != -1);
		return sat<F>("OK_CANCEL_OPTION");
	}

	template<typename F = ::jint>
	static auto OK_OPTION() {
		static_assert(field_signatures[jField<F>("OK_OPTION")] != -1);
		return sat<F>("OK_OPTION");
	}

	template<typename F = ::java::lang::String>
	static auto OPTIONS_PROPERTY() {
		static_assert(field_signatures[jField<F>("OPTIONS_PROPERTY")] != -1);
		return sat<F>("OPTIONS_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto OPTION_TYPE_PROPERTY() {
		static_assert(field_signatures[jField<F>("OPTION_TYPE_PROPERTY")] != -1);
		return sat<F>("OPTION_TYPE_PROPERTY");
	}

	template<typename F = ::jint>
	static auto PLAIN_MESSAGE() {
		static_assert(field_signatures[jField<F>("PLAIN_MESSAGE")] != -1);
		return sat<F>("PLAIN_MESSAGE");
	}

	template<typename F = ::jint>
	static auto QUESTION_MESSAGE() {
		static_assert(field_signatures[jField<F>("QUESTION_MESSAGE")] != -1);
		return sat<F>("QUESTION_MESSAGE");
	}

	template<typename F = ::java::lang::String>
	static auto SELECTION_VALUES_PROPERTY() {
		static_assert(field_signatures[jField<F>("SELECTION_VALUES_PROPERTY")] != -1);
		return sat<F>("SELECTION_VALUES_PROPERTY");
	}

	template<typename F = ::java::lang::Object>
	static auto UNINITIALIZED_VALUE() {
		static_assert(field_signatures[jField<F>("UNINITIALIZED_VALUE")] != -1);
		return sat<F>("UNINITIALIZED_VALUE");
	}

	template<typename F = ::java::lang::String>
	static auto VALUE_PROPERTY() {
		static_assert(field_signatures[jField<F>("VALUE_PROPERTY")] != -1);
		return sat<F>("VALUE_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto WANTS_INPUT_PROPERTY() {
		static_assert(field_signatures[jField<F>("WANTS_INPUT_PROPERTY")] != -1);
		return sat<F>("WANTS_INPUT_PROPERTY");
	}

	template<typename F = ::jint>
	static auto WARNING_MESSAGE() {
		static_assert(field_signatures[jField<F>("WARNING_MESSAGE")] != -1);
		return sat<F>("WARNING_MESSAGE");
	}

	template<typename F = ::jint>
	static auto YES_NO_CANCEL_OPTION() {
		static_assert(field_signatures[jField<F>("YES_NO_CANCEL_OPTION")] != -1);
		return sat<F>("YES_NO_CANCEL_OPTION");
	}

	template<typename F = ::jint>
	static auto YES_NO_OPTION() {
		static_assert(field_signatures[jField<F>("YES_NO_OPTION")] != -1);
		return sat<F>("YES_NO_OPTION");
	}

	template<typename F = ::jint>
	static auto YES_OPTION() {
		static_assert(field_signatures[jField<F>("YES_OPTION")] != -1);
		return sat<F>("YES_OPTION");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::Object)>(), //
		jConstructor<::jvoid(::java::lang::Object, ::jint)>(), //
		jConstructor<::jvoid(::java::lang::Object, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::java::lang::Object, ::jint, ::jint, ::javax::swing::Icon)>(), //
		jConstructor<::jvoid(::java::lang::Object, ::jint, ::jint, ::javax::swing::Icon, ::java::lang::Object *)>(), //
		jConstructor<::jvoid(::java::lang::Object, ::jint, ::jint, ::javax::swing::Icon, ::java::lang::Object *, ::java::lang::Object)>(), //
		jMethod<::javax::swing::JDialog(::java::awt::Component, ::java::lang::String)>("createDialog"), //
		jMethod<::javax::swing::JDialog(::java::lang::String)>("createDialog"), //
		jMethod<::javax::swing::JInternalFrame(::java::awt::Component, ::java::lang::String)>("createInternalFrame"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::javax::swing::JDesktopPane(::java::awt::Component)>("getDesktopPaneForComponent"), //
		jMethod<::java::awt::Frame(::java::awt::Component)>("getFrameForComponent"), //
		jMethod<::javax::swing::Icon()>("getIcon"), //
		jMethod<::java::lang::Object()>("getInitialSelectionValue"), //
		jMethod<::java::lang::Object()>("getInitialValue"), //
		jMethod<::java::lang::Object()>("getInputValue"), //
		jMethod<::jint()>("getMaxCharactersPerLineCount"), //
		jMethod<::java::lang::Object()>("getMessage"), //
		jMethod<::jint()>("getMessageType"), //
		jMethod<::jint()>("getOptionType"), //
		jMethod<::java::lang::Object *()>("getOptions"), //
		jMethod<::java::awt::Frame()>("getRootFrame"), //
		jMethod<::java::lang::Object *()>("getSelectionValues"), //
		jMethod<::javax::swing::plaf::OptionPaneUI()>("getUI"), //
		jMethod<::java::lang::String()>("getUIClassID"), //
		jMethod<::java::lang::Object()>("getValue"), //
		jMethod<::jboolean()>("getWantsInput"), //
		jMethod<::jvoid()>("selectInitialValue"), //
		jMethod<::jvoid(::javax::swing::Icon)>("setIcon"), //
		jMethod<::jvoid(::java::lang::Object)>("setInitialSelectionValue"), //
		jMethod<::jvoid(::java::lang::Object)>("setInitialValue"), //
		jMethod<::jvoid(::java::lang::Object)>("setInputValue"), //
		jMethod<::jvoid(::java::lang::Object)>("setMessage"), //
		jMethod<::jvoid(::jint)>("setMessageType"), //
		jMethod<::jvoid(::jint)>("setOptionType"), //
		jMethod<::jvoid(::java::lang::Object *)>("setOptions"), //
		jMethod<::jvoid(::java::awt::Frame)>("setRootFrame"), //
		jMethod<::jvoid(::java::lang::Object *)>("setSelectionValues"), //
		jMethod<::jvoid(::javax::swing::plaf::OptionPaneUI)>("setUI"), //
		jMethod<::jvoid(::java::lang::Object)>("setValue"), //
		jMethod<::jvoid(::jboolean)>("setWantsInput"), //
		jMethod<::jint(::java::awt::Component, ::java::lang::Object)>("showConfirmDialog"), //
		jMethod<::jint(::java::awt::Component, ::java::lang::Object, ::java::lang::String, ::jint)>("showConfirmDialog"), //
		jMethod<::jint(::java::awt::Component, ::java::lang::Object, ::java::lang::String, ::jint, ::jint)>("showConfirmDialog"), //
		jMethod<::jint(::java::awt::Component, ::java::lang::Object, ::java::lang::String, ::jint, ::jint, ::javax::swing::Icon)>("showConfirmDialog"), //
		jMethod<::java::lang::String(::java::awt::Component, ::java::lang::Object)>("showInputDialog"), //
		jMethod<::java::lang::String(::java::awt::Component, ::java::lang::Object, ::java::lang::Object)>("showInputDialog"), //
		jMethod<::java::lang::String(::java::awt::Component, ::java::lang::Object, ::java::lang::String, ::jint)>("showInputDialog"), //
		jMethod<::java::lang::Object(::java::awt::Component, ::java::lang::Object, ::java::lang::String, ::jint, ::javax::swing::Icon, ::java::lang::Object *, ::java::lang::Object)>("showInputDialog"), //
		jMethod<::java::lang::String(::java::lang::Object)>("showInputDialog"), //
		jMethod<::java::lang::String(::java::lang::Object, ::java::lang::Object)>("showInputDialog"), //
		jMethod<::jint(::java::awt::Component, ::java::lang::Object)>("showInternalConfirmDialog"), //
		jMethod<::jint(::java::awt::Component, ::java::lang::Object, ::java::lang::String, ::jint)>("showInternalConfirmDialog"), //
		jMethod<::jint(::java::awt::Component, ::java::lang::Object, ::java::lang::String, ::jint, ::jint)>("showInternalConfirmDialog"), //
		jMethod<::jint(::java::awt::Component, ::java::lang::Object, ::java::lang::String, ::jint, ::jint, ::javax::swing::Icon)>("showInternalConfirmDialog"), //
		jMethod<::java::lang::String(::java::awt::Component, ::java::lang::Object)>("showInternalInputDialog"), //
		jMethod<::java::lang::String(::java::awt::Component, ::java::lang::Object, ::java::lang::String, ::jint)>("showInternalInputDialog"), //
		jMethod<::java::lang::Object(::java::awt::Component, ::java::lang::Object, ::java::lang::String, ::jint, ::javax::swing::Icon, ::java::lang::Object *, ::java::lang::Object)>("showInternalInputDialog"), //
		jMethod<::jvoid(::java::awt::Component, ::java::lang::Object)>("showInternalMessageDialog"), //
		jMethod<::jvoid(::java::awt::Component, ::java::lang::Object, ::java::lang::String, ::jint)>("showInternalMessageDialog"), //
		jMethod<::jvoid(::java::awt::Component, ::java::lang::Object, ::java::lang::String, ::jint, ::javax::swing::Icon)>("showInternalMessageDialog"), //
		jMethod<::jint(::java::awt::Component, ::java::lang::Object, ::java::lang::String, ::jint, ::jint, ::javax::swing::Icon, ::java::lang::Object *, ::java::lang::Object)>("showInternalOptionDialog"), //
		jMethod<::jvoid(::java::awt::Component, ::java::lang::Object)>("showMessageDialog"), //
		jMethod<::jvoid(::java::awt::Component, ::java::lang::Object, ::java::lang::String, ::jint)>("showMessageDialog"), //
		jMethod<::jvoid(::java::awt::Component, ::java::lang::Object, ::java::lang::String, ::jint, ::javax::swing::Icon)>("showMessageDialog"), //
		jMethod<::jint(::java::awt::Component, ::java::lang::Object, ::java::lang::String, ::jint, ::jint, ::javax::swing::Icon, ::java::lang::Object *, ::java::lang::Object)>("showOptionDialog"), //
		jMethod<::jvoid()>("updateUI"), //
	};

	template<typename R = ::javax::swing::JDialog, typename... Args>
	auto createDialog(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createDialog")] != -1);
		return call<R>("createDialog", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JInternalFrame, typename... Args>
	auto createInternalFrame(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createInternalFrame")] != -1);
		return call<R>("createInternalFrame", forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JDesktopPane, typename... Args>
	static auto getDesktopPaneForComponent(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDesktopPaneForComponent")] != -1);
		return scall<R>("getDesktopPaneForComponent", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Frame, typename... Args>
	static auto getFrameForComponent(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFrameForComponent")] != -1);
		return scall<R>("getFrameForComponent", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getIcon")] != -1);
		return call<R>("getIcon", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getInitialSelectionValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInitialSelectionValue")] != -1);
		return call<R>("getInitialSelectionValue", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getInitialValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInitialValue")] != -1);
		return call<R>("getInitialValue", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getInputValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInputValue")] != -1);
		return call<R>("getInputValue", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxCharactersPerLineCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaxCharactersPerLineCount")] != -1);
		return call<R>("getMaxCharactersPerLineCount", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMessage")] != -1);
		return call<R>("getMessage", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMessageType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMessageType")] != -1);
		return call<R>("getMessageType", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getOptionType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getOptionType")] != -1);
		return call<R>("getOptionType", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object *, typename... Args>
	auto getOptions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getOptions")] != -1);
		return call<R>("getOptions", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Frame, typename... Args>
	static auto getRootFrame(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRootFrame")] != -1);
		return scall<R>("getRootFrame", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object *, typename... Args>
	auto getSelectionValues(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSelectionValues")] != -1);
		return call<R>("getSelectionValues", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::OptionPaneUI, typename... Args>
	auto getUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUI")] != -1);
		return call<R>("getUI", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUIClassID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUIClassID")] != -1);
		return call<R>("getUIClassID", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getWantsInput(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getWantsInput")] != -1);
		return call<R>("getWantsInput", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto selectInitialValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("selectInitialValue")] != -1);
		return call<R>("selectInitialValue", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setIcon")] != -1);
		return call<R>("setIcon", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInitialSelectionValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setInitialSelectionValue")] != -1);
		return call<R>("setInitialSelectionValue", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInitialValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setInitialValue")] != -1);
		return call<R>("setInitialValue", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInputValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setInputValue")] != -1);
		return call<R>("setInputValue", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMessage")] != -1);
		return call<R>("setMessage", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMessageType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMessageType")] != -1);
		return call<R>("setMessageType", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOptionType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setOptionType")] != -1);
		return call<R>("setOptionType", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOptions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setOptions")] != -1);
		return call<R>("setOptions", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setRootFrame(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setRootFrame")] != -1);
		return scall<R>("setRootFrame", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionValues(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSelectionValues")] != -1);
		return call<R>("setSelectionValues", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setUI")] != -1);
		return call<R>("setUI", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setValue")] != -1);
		return call<R>("setValue", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWantsInput(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setWantsInput")] != -1);
		return call<R>("setWantsInput", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto showConfirmDialog(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("showConfirmDialog")] != -1);
		return scall<R>("showConfirmDialog", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto showInputDialog(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("showInputDialog")] != -1);
		return scall<R>("showInputDialog", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto showInternalConfirmDialog(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("showInternalConfirmDialog")] != -1);
		return scall<R>("showInternalConfirmDialog", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto showInternalInputDialog(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("showInternalInputDialog")] != -1);
		return scall<R>("showInternalInputDialog", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto showInternalMessageDialog(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("showInternalMessageDialog")] != -1);
		return scall<R>("showInternalMessageDialog", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto showInternalOptionDialog(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("showInternalOptionDialog")] != -1);
		return scall<R>("showInternalOptionDialog", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto showMessageDialog(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("showMessageDialog")] != -1);
		return scall<R>("showMessageDialog", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto showOptionDialog(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("showOptionDialog")] != -1);
		return scall<R>("showOptionDialog", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("updateUI")] != -1);
		return call<R>("updateUI", forward<Args>(args)...);
	}

};

#endif
