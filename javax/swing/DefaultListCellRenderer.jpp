#ifndef javax_swing_DefaultListCellRenderer_HPP
#define javax_swing_DefaultListCellRenderer_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::DefaultListCellRenderer : public jObject<::javax::swing::DefaultListCellRenderer, ::javax::swing::JLabel> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "DefaultListCellRenderer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::lang::String, ::jbyte, ::jbyte)>("firePropertyChange"), //
		jMethod<::jvoid(::java::lang::String, ::jchar, ::jchar)>("firePropertyChange"), //
		jMethod<::jvoid(::java::lang::String, ::jdouble, ::jdouble)>("firePropertyChange"), //
		jMethod<::jvoid(::java::lang::String, ::jfloat, ::jfloat)>("firePropertyChange"), //
		jMethod<::jvoid(::java::lang::String, ::jint, ::jint)>("firePropertyChange"), //
		jMethod<::jvoid(::java::lang::String, ::jlong, ::jlong)>("firePropertyChange"), //
		jMethod<::jvoid(::java::lang::String, ::jshort, ::jshort)>("firePropertyChange"), //
		jMethod<::jvoid(::java::lang::String, ::jboolean, ::jboolean)>("firePropertyChange"), //
		jMethod<::java::awt::Component(::javax::swing::JList, ::java::lang::Object, ::jint, ::jboolean, ::jboolean)>("getListCellRendererComponent"), //
		jMethod<::jvoid()>("invalidate"), //
		jMethod<::jboolean()>("isOpaque"), //
		jMethod<::jvoid()>("repaint"), //
		jMethod<::jvoid(::jlong, ::jint, ::jint, ::jint, ::jint)>("repaint"), //
		jMethod<::jvoid(::java::awt::Rectangle)>("repaint"), //
		jMethod<::jvoid()>("revalidate"), //
		jMethod<::jvoid()>("validate"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto firePropertyChange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("firePropertyChange")] != -1);
		return call<R>("firePropertyChange", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getListCellRendererComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getListCellRendererComponent")] != -1);
		return call<R>("getListCellRendererComponent", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto invalidate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("invalidate")] != -1);
		return call<R>("invalidate", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isOpaque(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isOpaque")] != -1);
		return call<R>("isOpaque", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto repaint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("repaint")] != -1);
		return call<R>("repaint", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto revalidate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("revalidate")] != -1);
		return call<R>("revalidate", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto validate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("validate")] != -1);
		return call<R>("validate", forward<Args>(args)...);
	}

};

#endif
