#ifndef javax_swing_JMenuItem_HPP
#define javax_swing_JMenuItem_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JMenuItem : public jObject<::javax::swing::JMenuItem, ::javax::swing::AbstractButton> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JMenuItem";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::jint)>(), //
		jConstructor<::jvoid(::java::lang::String, ::javax::swing::Icon)>(), //
		jConstructor<::jvoid(::javax::swing::Action)>(), //
		jConstructor<::jvoid(::javax::swing::Icon)>(), //
		jMethod<::jvoid(::javax::swing::event::MenuDragMouseListener)>("addMenuDragMouseListener"), //
		jMethod<::jvoid(::javax::swing::event::MenuKeyListener)>("addMenuKeyListener"), //
		jMethod<::javax::swing::KeyStroke()>("getAccelerator"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::java::awt::Component()>("getComponent"), //
		jMethod<::javax::swing::event::MenuDragMouseListener *()>("getMenuDragMouseListeners"), //
		jMethod<::javax::swing::event::MenuKeyListener *()>("getMenuKeyListeners"), //
		jMethod<::javax::swing::MenuElement *()>("getSubElements"), //
		jMethod<::java::lang::String()>("getUIClassID"), //
		jMethod<::jboolean()>("isArmed"), //
		jMethod<::jvoid(::jboolean)>("menuSelectionChanged"), //
		jMethod<::jvoid(::java::awt::event::KeyEvent, ::javax::swing::MenuElement *, ::javax::swing::MenuSelectionManager)>("processKeyEvent"), //
		jMethod<::jvoid(::javax::swing::event::MenuDragMouseEvent)>("processMenuDragMouseEvent"), //
		jMethod<::jvoid(::javax::swing::event::MenuKeyEvent)>("processMenuKeyEvent"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent, ::javax::swing::MenuElement *, ::javax::swing::MenuSelectionManager)>("processMouseEvent"), //
		jMethod<::jvoid(::javax::swing::event::MenuDragMouseListener)>("removeMenuDragMouseListener"), //
		jMethod<::jvoid(::javax::swing::event::MenuKeyListener)>("removeMenuKeyListener"), //
		jMethod<::jvoid(::javax::swing::KeyStroke)>("setAccelerator"), //
		jMethod<::jvoid(::jboolean)>("setArmed"), //
		jMethod<::jvoid(::jboolean)>("setEnabled"), //
		jMethod<::jvoid(::javax::swing::ButtonModel)>("setModel"), //
		jMethod<::jvoid(::javax::swing::plaf::MenuItemUI)>("setUI"), //
		jMethod<::jvoid()>("updateUI"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addMenuDragMouseListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addMenuDragMouseListener")] != -1);
		return call<R>("addMenuDragMouseListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addMenuKeyListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addMenuKeyListener")] != -1);
		return call<R>("addMenuKeyListener", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::KeyStroke, typename... Args>
	auto getAccelerator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccelerator")] != -1);
		return call<R>("getAccelerator", forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getComponent")] != -1);
		return call<R>("getComponent", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::event::MenuDragMouseListener *, typename... Args>
	auto getMenuDragMouseListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMenuDragMouseListeners")] != -1);
		return call<R>("getMenuDragMouseListeners", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::event::MenuKeyListener *, typename... Args>
	auto getMenuKeyListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMenuKeyListeners")] != -1);
		return call<R>("getMenuKeyListeners", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::MenuElement *, typename... Args>
	auto getSubElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSubElements")] != -1);
		return call<R>("getSubElements", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUIClassID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUIClassID")] != -1);
		return call<R>("getUIClassID", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isArmed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isArmed")] != -1);
		return call<R>("isArmed", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto menuSelectionChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("menuSelectionChanged")] != -1);
		return call<R>("menuSelectionChanged", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto processKeyEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("processKeyEvent")] != -1);
		return call<R>("processKeyEvent", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto processMenuDragMouseEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("processMenuDragMouseEvent")] != -1);
		return call<R>("processMenuDragMouseEvent", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto processMenuKeyEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("processMenuKeyEvent")] != -1);
		return call<R>("processMenuKeyEvent", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto processMouseEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("processMouseEvent")] != -1);
		return call<R>("processMouseEvent", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeMenuDragMouseListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeMenuDragMouseListener")] != -1);
		return call<R>("removeMenuDragMouseListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeMenuKeyListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeMenuKeyListener")] != -1);
		return call<R>("removeMenuKeyListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAccelerator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setAccelerator")] != -1);
		return call<R>("setAccelerator", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setArmed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setArmed")] != -1);
		return call<R>("setArmed", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setEnabled")] != -1);
		return call<R>("setEnabled", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setModel")] != -1);
		return call<R>("setModel", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setUI")] != -1);
		return call<R>("setUI", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("updateUI")] != -1);
		return call<R>("updateUI", forward<Args>(args)...);
	}

};

#endif
