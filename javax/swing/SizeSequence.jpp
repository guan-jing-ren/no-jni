#ifndef javax_swing_SizeSequence_HPP
#define javax_swing_SizeSequence_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::SizeSequence : public jObject<::javax::swing::SizeSequence, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "SizeSequence";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint)>(), //
		jConstructor<::jvoid(::jint, ::jint)>(), //
		jConstructor<::jvoid(::jint *)>(), //
		jMethod<::jint(::jint)>("getIndex"), //
		jMethod<::jint(::jint)>("getPosition"), //
		jMethod<::jint(::jint)>("getSize"), //
		jMethod<::jint *()>("getSizes"), //
		jMethod<::jvoid(::jint, ::jint, ::jint)>("insertEntries"), //
		jMethod<::jvoid(::jint, ::jint)>("removeEntries"), //
		jMethod<::jvoid(::jint, ::jint)>("setSize"), //
		jMethod<::jvoid(::jint *)>("setSizes"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getIndex")] != -1);
		return call<R>("getIndex", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPosition")] != -1);
		return call<R>("getPosition", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSize")] != -1);
		return call<R>("getSize", forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getSizes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSizes")] != -1);
		return call<R>("getSizes", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insertEntries(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("insertEntries")] != -1);
		return call<R>("insertEntries", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeEntries(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeEntries")] != -1);
		return call<R>("removeEntries", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSize")] != -1);
		return call<R>("setSize", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSizes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSizes")] != -1);
		return call<R>("setSizes", forward<Args>(args)...);
	}

};

#endif
