#ifndef javax_swing_DropMode_HPP
#define javax_swing_DropMode_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::DropMode : public jObject<::javax::swing::DropMode, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "DropMode";

	constexpr static Enume field_signatures{
		jField<::javax::swing::DropMode>("INSERT"), //
		jField<::javax::swing::DropMode>("INSERT_COLS"), //
		jField<::javax::swing::DropMode>("INSERT_ROWS"), //
		jField<::javax::swing::DropMode>("ON"), //
		jField<::javax::swing::DropMode>("ON_OR_INSERT"), //
		jField<::javax::swing::DropMode>("ON_OR_INSERT_COLS"), //
		jField<::javax::swing::DropMode>("ON_OR_INSERT_ROWS"), //
		jField<::javax::swing::DropMode>("USE_SELECTION"), //
	};

	template<typename F = ::javax::swing::DropMode>
	static auto INSERT() {
		static_assert(field_signatures[jField<F>("INSERT")] != -1);
		return sat<F>("INSERT");
	}

	template<typename F = ::javax::swing::DropMode>
	static auto INSERT_COLS() {
		static_assert(field_signatures[jField<F>("INSERT_COLS")] != -1);
		return sat<F>("INSERT_COLS");
	}

	template<typename F = ::javax::swing::DropMode>
	static auto INSERT_ROWS() {
		static_assert(field_signatures[jField<F>("INSERT_ROWS")] != -1);
		return sat<F>("INSERT_ROWS");
	}

	template<typename F = ::javax::swing::DropMode>
	static auto ON() {
		static_assert(field_signatures[jField<F>("ON")] != -1);
		return sat<F>("ON");
	}

	template<typename F = ::javax::swing::DropMode>
	static auto ON_OR_INSERT() {
		static_assert(field_signatures[jField<F>("ON_OR_INSERT")] != -1);
		return sat<F>("ON_OR_INSERT");
	}

	template<typename F = ::javax::swing::DropMode>
	static auto ON_OR_INSERT_COLS() {
		static_assert(field_signatures[jField<F>("ON_OR_INSERT_COLS")] != -1);
		return sat<F>("ON_OR_INSERT_COLS");
	}

	template<typename F = ::javax::swing::DropMode>
	static auto ON_OR_INSERT_ROWS() {
		static_assert(field_signatures[jField<F>("ON_OR_INSERT_ROWS")] != -1);
		return sat<F>("ON_OR_INSERT_ROWS");
	}

	template<typename F = ::javax::swing::DropMode>
	static auto USE_SELECTION() {
		static_assert(field_signatures[jField<F>("USE_SELECTION")] != -1);
		return sat<F>("USE_SELECTION");
	}

	constexpr static Enume method_signatures{
		jMethod<::javax::swing::DropMode(::java::lang::String)>("valueOf"), //
		jMethod<::javax::swing::DropMode *()>("values"), //
	};

	template<typename R = ::javax::swing::DropMode, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::DropMode *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
