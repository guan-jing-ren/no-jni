#ifndef javax_swing_JMenuBar_HPP
#define javax_swing_JMenuBar_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JMenuBar : public jObject<::javax::swing::JMenuBar, ::javax::swing::JComponent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JMenuBar";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::swing::JMenu(::javax::swing::JMenu)>("add"), //
		jMethod<::jvoid()>("addNotify"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::java::awt::Component()>("getComponent"), //
		jMethod<::java::awt::Component(::jint)>("getComponentAtIndex"), //
		jMethod<::jint(::java::awt::Component)>("getComponentIndex"), //
		jMethod<::javax::swing::JMenu()>("getHelpMenu"), //
		jMethod<::java::awt::Insets()>("getMargin"), //
		jMethod<::javax::swing::JMenu(::jint)>("getMenu"), //
		jMethod<::jint()>("getMenuCount"), //
		jMethod<::javax::swing::SingleSelectionModel()>("getSelectionModel"), //
		jMethod<::javax::swing::MenuElement *()>("getSubElements"), //
		jMethod<::javax::swing::plaf::MenuBarUI()>("getUI"), //
		jMethod<::java::lang::String()>("getUIClassID"), //
		jMethod<::jboolean()>("isBorderPainted"), //
		jMethod<::jboolean()>("isSelected"), //
		jMethod<::jvoid(::jboolean)>("menuSelectionChanged"), //
		jMethod<::jvoid(::java::awt::event::KeyEvent, ::javax::swing::MenuElement *, ::javax::swing::MenuSelectionManager)>("processKeyEvent"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent, ::javax::swing::MenuElement *, ::javax::swing::MenuSelectionManager)>("processMouseEvent"), //
		jMethod<::jvoid()>("removeNotify"), //
		jMethod<::jvoid(::jboolean)>("setBorderPainted"), //
		jMethod<::jvoid(::javax::swing::JMenu)>("setHelpMenu"), //
		jMethod<::jvoid(::java::awt::Insets)>("setMargin"), //
		jMethod<::jvoid(::java::awt::Component)>("setSelected"), //
		jMethod<::jvoid(::javax::swing::SingleSelectionModel)>("setSelectionModel"), //
		jMethod<::jvoid(::javax::swing::plaf::MenuBarUI)>("setUI"), //
		jMethod<::jvoid()>("updateUI"), //
	};

	template<typename R = ::javax::swing::JMenu, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addNotify")] != -1);
		return call<R>("addNotify", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getComponent")] != -1);
		return call<R>("getComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getComponentAtIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getComponentAtIndex")] != -1);
		return call<R>("getComponentAtIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getComponentIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getComponentIndex")] != -1);
		return call<R>("getComponentIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JMenu, typename... Args>
	auto getHelpMenu(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHelpMenu")] != -1);
		return call<R>("getHelpMenu", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Insets, typename... Args>
	auto getMargin(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMargin")] != -1);
		return call<R>("getMargin", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JMenu, typename... Args>
	auto getMenu(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMenu")] != -1);
		return call<R>("getMenu", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMenuCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMenuCount")] != -1);
		return call<R>("getMenuCount", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::SingleSelectionModel, typename... Args>
	auto getSelectionModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionModel")] != -1);
		return call<R>("getSelectionModel", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::MenuElement *, typename... Args>
	auto getSubElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSubElements")] != -1);
		return call<R>("getSubElements", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::MenuBarUI, typename... Args>
	auto getUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUI")] != -1);
		return call<R>("getUI", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUIClassID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUIClassID")] != -1);
		return call<R>("getUIClassID", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isBorderPainted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isBorderPainted")] != -1);
		return call<R>("isBorderPainted", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSelected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSelected")] != -1);
		return call<R>("isSelected", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto menuSelectionChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("menuSelectionChanged")] != -1);
		return call<R>("menuSelectionChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto processKeyEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("processKeyEvent")] != -1);
		return call<R>("processKeyEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto processMouseEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("processMouseEvent")] != -1);
		return call<R>("processMouseEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeNotify")] != -1);
		return call<R>("removeNotify", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBorderPainted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBorderPainted")] != -1);
		return call<R>("setBorderPainted", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHelpMenu(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHelpMenu")] != -1);
		return call<R>("setHelpMenu", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMargin(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMargin")] != -1);
		return call<R>("setMargin", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelected")] != -1);
		return call<R>("setSelected", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectionModel")] != -1);
		return call<R>("setSelectionModel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUI")] != -1);
		return call<R>("setUI", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateUI")] != -1);
		return call<R>("updateUI", std::forward<Args>(args)...);
	}

};

#endif
