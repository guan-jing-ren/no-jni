#ifndef javax_swing_ButtonModel_HPP
#define javax_swing_ButtonModel_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::ButtonModel : public jObject<::javax::swing::ButtonModel, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "ButtonModel";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::awt::event::ActionListener)>("addActionListener"), //
		jMethod<::jvoid(::javax::swing::event::ChangeListener)>("addChangeListener"), //
		jMethod<::jvoid(::java::awt::event::ItemListener)>("addItemListener"), //
		jMethod<::java::lang::String()>("getActionCommand"), //
		jMethod<::jint()>("getMnemonic"), //
		jMethod<::jboolean()>("isArmed"), //
		jMethod<::jboolean()>("isEnabled"), //
		jMethod<::jboolean()>("isPressed"), //
		jMethod<::jboolean()>("isRollover"), //
		jMethod<::jboolean()>("isSelected"), //
		jMethod<::jvoid(::java::awt::event::ActionListener)>("removeActionListener"), //
		jMethod<::jvoid(::javax::swing::event::ChangeListener)>("removeChangeListener"), //
		jMethod<::jvoid(::java::awt::event::ItemListener)>("removeItemListener"), //
		jMethod<::jvoid(::java::lang::String)>("setActionCommand"), //
		jMethod<::jvoid(::jboolean)>("setArmed"), //
		jMethod<::jvoid(::jboolean)>("setEnabled"), //
		jMethod<::jvoid(::javax::swing::ButtonGroup)>("setGroup"), //
		jMethod<::jvoid(::jint)>("setMnemonic"), //
		jMethod<::jvoid(::jboolean)>("setPressed"), //
		jMethod<::jvoid(::jboolean)>("setRollover"), //
		jMethod<::jvoid(::jboolean)>("setSelected"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addActionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addActionListener")] != -1);
		return call<R>("addActionListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addChangeListener")] != -1);
		return call<R>("addChangeListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addItemListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addItemListener")] != -1);
		return call<R>("addItemListener", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getActionCommand(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getActionCommand")] != -1);
		return call<R>("getActionCommand", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMnemonic(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMnemonic")] != -1);
		return call<R>("getMnemonic", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isArmed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isArmed")] != -1);
		return call<R>("isArmed", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isEnabled")] != -1);
		return call<R>("isEnabled", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPressed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isPressed")] != -1);
		return call<R>("isPressed", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRollover(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isRollover")] != -1);
		return call<R>("isRollover", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSelected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isSelected")] != -1);
		return call<R>("isSelected", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeActionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeActionListener")] != -1);
		return call<R>("removeActionListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeChangeListener")] != -1);
		return call<R>("removeChangeListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeItemListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeItemListener")] != -1);
		return call<R>("removeItemListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setActionCommand(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setActionCommand")] != -1);
		return call<R>("setActionCommand", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setArmed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setArmed")] != -1);
		return call<R>("setArmed", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setEnabled")] != -1);
		return call<R>("setEnabled", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGroup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setGroup")] != -1);
		return call<R>("setGroup", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMnemonic(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMnemonic")] != -1);
		return call<R>("setMnemonic", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPressed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPressed")] != -1);
		return call<R>("setPressed", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRollover(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setRollover")] != -1);
		return call<R>("setRollover", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSelected")] != -1);
		return call<R>("setSelected", forward<Args>(args)...);
	}

};

#endif
