#ifndef javax_swing_JTextArea_HPP
#define javax_swing_JTextArea_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JTextArea : public jObject<::javax::swing::JTextArea, ::javax::swing::text::JTextComponent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JTextArea";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint, ::jint)>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::javax::swing::text::Document)>(), //
		jConstructor<::jvoid(::javax::swing::text::Document, ::java::lang::String, ::jint, ::jint)>(), //
		jMethod<::jvoid(::java::lang::String)>("append"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::jint()>("getColumns"), //
		jMethod<::jint()>("getLineCount"), //
		jMethod<::jint(::jint)>("getLineEndOffset"), //
		jMethod<::jint(::jint)>("getLineOfOffset"), //
		jMethod<::jint(::jint)>("getLineStartOffset"), //
		jMethod<::jboolean()>("getLineWrap"), //
		jMethod<::java::awt::Dimension()>("getPreferredScrollableViewportSize"), //
		jMethod<::java::awt::Dimension()>("getPreferredSize"), //
		jMethod<::jint()>("getRows"), //
		jMethod<::jboolean()>("getScrollableTracksViewportWidth"), //
		jMethod<::jint(::java::awt::Rectangle, ::jint, ::jint)>("getScrollableUnitIncrement"), //
		jMethod<::jint()>("getTabSize"), //
		jMethod<::java::lang::String()>("getUIClassID"), //
		jMethod<::jboolean()>("getWrapStyleWord"), //
		jMethod<::jvoid(::java::lang::String, ::jint)>("insert"), //
		jMethod<::jvoid(::java::lang::String, ::jint, ::jint)>("replaceRange"), //
		jMethod<::jvoid(::jint)>("setColumns"), //
		jMethod<::jvoid(::java::awt::Font)>("setFont"), //
		jMethod<::jvoid(::jboolean)>("setLineWrap"), //
		jMethod<::jvoid(::jint)>("setRows"), //
		jMethod<::jvoid(::jint)>("setTabSize"), //
		jMethod<::jvoid(::jboolean)>("setWrapStyleWord"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto append(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("append")] != -1);
		return call<R>("append", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getColumns(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumns")] != -1);
		return call<R>("getColumns", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLineCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineCount")] != -1);
		return call<R>("getLineCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLineEndOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineEndOffset")] != -1);
		return call<R>("getLineEndOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLineOfOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineOfOffset")] != -1);
		return call<R>("getLineOfOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLineStartOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineStartOffset")] != -1);
		return call<R>("getLineStartOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getLineWrap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineWrap")] != -1);
		return call<R>("getLineWrap", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredScrollableViewportSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreferredScrollableViewportSize")] != -1);
		return call<R>("getPreferredScrollableViewportSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreferredSize")] != -1);
		return call<R>("getPreferredSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRows(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRows")] != -1);
		return call<R>("getRows", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getScrollableTracksViewportWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScrollableTracksViewportWidth")] != -1);
		return call<R>("getScrollableTracksViewportWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getScrollableUnitIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScrollableUnitIncrement")] != -1);
		return call<R>("getScrollableUnitIncrement", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTabSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTabSize")] != -1);
		return call<R>("getTabSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUIClassID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUIClassID")] != -1);
		return call<R>("getUIClassID", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getWrapStyleWord(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWrapStyleWord")] != -1);
		return call<R>("getWrapStyleWord", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insert(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insert")] != -1);
		return call<R>("insert", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto replaceRange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("replaceRange")] != -1);
		return call<R>("replaceRange", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColumns(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setColumns")] != -1);
		return call<R>("setColumns", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFont")] != -1);
		return call<R>("setFont", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLineWrap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLineWrap")] != -1);
		return call<R>("setLineWrap", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRows(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRows")] != -1);
		return call<R>("setRows", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTabSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTabSize")] != -1);
		return call<R>("setTabSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWrapStyleWord(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setWrapStyleWord")] != -1);
		return call<R>("setWrapStyleWord", std::forward<Args>(args)...);
	}

};

#endif
