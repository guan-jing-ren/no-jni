#ifndef javax_swing_JList_HPP
#define javax_swing_JList_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JList : public jObject<::javax::swing::JList, ::javax::swing::JComponent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JList";

	constexpr static Enume field_signatures{
		jField<::jint>("HORIZONTAL_WRAP"), //
		jField<::jint>("VERTICAL"), //
		jField<::jint>("VERTICAL_WRAP"), //
	};

	template<typename F = ::jint>
	static auto HORIZONTAL_WRAP() {
		static_assert(field_signatures[jField<F>("HORIZONTAL_WRAP")] != -1);
		return sat<F>("HORIZONTAL_WRAP");
	}

	template<typename F = ::jint>
	static auto VERTICAL() {
		static_assert(field_signatures[jField<F>("VERTICAL")] != -1);
		return sat<F>("VERTICAL");
	}

	template<typename F = ::jint>
	static auto VERTICAL_WRAP() {
		static_assert(field_signatures[jField<F>("VERTICAL_WRAP")] != -1);
		return sat<F>("VERTICAL_WRAP");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::util::Vector)>(), //
		jConstructor<::jvoid(::javax::swing::ListModel)>(), //
		jConstructor<::jvoid(::java::lang::Object *)>(), //
		jMethod<::jvoid(::javax::swing::event::ListSelectionListener)>("addListSelectionListener"), //
		jMethod<::jvoid(::jint, ::jint)>("addSelectionInterval"), //
		jMethod<::jvoid()>("clearSelection"), //
		jMethod<::jvoid(::jint)>("ensureIndexIsVisible"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::jint()>("getAnchorSelectionIndex"), //
		jMethod<::java::awt::Rectangle(::jint, ::jint)>("getCellBounds"), //
		jMethod<::javax::swing::ListCellRenderer()>("getCellRenderer"), //
		jMethod<::jboolean()>("getDragEnabled"), //
		jMethod<::javax::swing::JList$DropLocation()>("getDropLocation"), //
		jMethod<::javax::swing::DropMode()>("getDropMode"), //
		jMethod<::jint()>("getFirstVisibleIndex"), //
		jMethod<::jint()>("getFixedCellHeight"), //
		jMethod<::jint()>("getFixedCellWidth"), //
		jMethod<::jint()>("getLastVisibleIndex"), //
		jMethod<::jint()>("getLayoutOrientation"), //
		jMethod<::jint()>("getLeadSelectionIndex"), //
		jMethod<::javax::swing::event::ListSelectionListener *()>("getListSelectionListeners"), //
		jMethod<::jint()>("getMaxSelectionIndex"), //
		jMethod<::jint()>("getMinSelectionIndex"), //
		jMethod<::javax::swing::ListModel()>("getModel"), //
		jMethod<::jint(::java::lang::String, ::jint, ::javax::swing::text::Position$Bias)>("getNextMatch"), //
		jMethod<::java::awt::Dimension()>("getPreferredScrollableViewportSize"), //
		jMethod<::java::lang::Object()>("getPrototypeCellValue"), //
		jMethod<::jint(::java::awt::Rectangle, ::jint, ::jint)>("getScrollableBlockIncrement"), //
		jMethod<::jboolean()>("getScrollableTracksViewportHeight"), //
		jMethod<::jboolean()>("getScrollableTracksViewportWidth"), //
		jMethod<::jint(::java::awt::Rectangle, ::jint, ::jint)>("getScrollableUnitIncrement"), //
		jMethod<::jint()>("getSelectedIndex"), //
		jMethod<::jint *()>("getSelectedIndices"), //
		jMethod<::java::lang::Object()>("getSelectedValue"), //
		jMethod<::java::lang::Object *()>("getSelectedValues"), //
		jMethod<::java::util::List()>("getSelectedValuesList"), //
		jMethod<::java::awt::Color()>("getSelectionBackground"), //
		jMethod<::java::awt::Color()>("getSelectionForeground"), //
		jMethod<::jint()>("getSelectionMode"), //
		jMethod<::javax::swing::ListSelectionModel()>("getSelectionModel"), //
		jMethod<::java::lang::String(::java::awt::event::MouseEvent)>("getToolTipText"), //
		jMethod<::javax::swing::plaf::ListUI()>("getUI"), //
		jMethod<::java::lang::String()>("getUIClassID"), //
		jMethod<::jboolean()>("getValueIsAdjusting"), //
		jMethod<::jint()>("getVisibleRowCount"), //
		jMethod<::java::awt::Point(::jint)>("indexToLocation"), //
		jMethod<::jboolean(::jint)>("isSelectedIndex"), //
		jMethod<::jboolean()>("isSelectionEmpty"), //
		jMethod<::jint(::java::awt::Point)>("locationToIndex"), //
		jMethod<::jvoid(::javax::swing::event::ListSelectionListener)>("removeListSelectionListener"), //
		jMethod<::jvoid(::jint, ::jint)>("removeSelectionInterval"), //
		jMethod<::jvoid(::javax::swing::ListCellRenderer)>("setCellRenderer"), //
		jMethod<::jvoid(::jboolean)>("setDragEnabled"), //
		jMethod<::jvoid(::javax::swing::DropMode)>("setDropMode"), //
		jMethod<::jvoid(::jint)>("setFixedCellHeight"), //
		jMethod<::jvoid(::jint)>("setFixedCellWidth"), //
		jMethod<::jvoid(::jint)>("setLayoutOrientation"), //
		jMethod<::jvoid(::java::util::Vector)>("setListData"), //
		jMethod<::jvoid(::java::lang::Object *)>("setListData"), //
		jMethod<::jvoid(::javax::swing::ListModel)>("setModel"), //
		jMethod<::jvoid(::java::lang::Object)>("setPrototypeCellValue"), //
		jMethod<::jvoid(::jint)>("setSelectedIndex"), //
		jMethod<::jvoid(::jint *)>("setSelectedIndices"), //
		jMethod<::jvoid(::java::lang::Object, ::jboolean)>("setSelectedValue"), //
		jMethod<::jvoid(::java::awt::Color)>("setSelectionBackground"), //
		jMethod<::jvoid(::java::awt::Color)>("setSelectionForeground"), //
		jMethod<::jvoid(::jint, ::jint)>("setSelectionInterval"), //
		jMethod<::jvoid(::jint)>("setSelectionMode"), //
		jMethod<::jvoid(::javax::swing::ListSelectionModel)>("setSelectionModel"), //
		jMethod<::jvoid(::javax::swing::plaf::ListUI)>("setUI"), //
		jMethod<::jvoid(::jboolean)>("setValueIsAdjusting"), //
		jMethod<::jvoid(::jint)>("setVisibleRowCount"), //
		jMethod<::jvoid()>("updateUI"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addListSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addListSelectionListener")] != -1);
		return call<R>("addListSelectionListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addSelectionInterval(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addSelectionInterval")] != -1);
		return call<R>("addSelectionInterval", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clearSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clearSelection")] != -1);
		return call<R>("clearSelection", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto ensureIndexIsVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("ensureIndexIsVisible")] != -1);
		return call<R>("ensureIndexIsVisible", forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAnchorSelectionIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAnchorSelectionIndex")] != -1);
		return call<R>("getAnchorSelectionIndex", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getCellBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCellBounds")] != -1);
		return call<R>("getCellBounds", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::ListCellRenderer, typename... Args>
	auto getCellRenderer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCellRenderer")] != -1);
		return call<R>("getCellRenderer", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getDragEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDragEnabled")] != -1);
		return call<R>("getDragEnabled", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JList$DropLocation, typename... Args>
	auto getDropLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDropLocation")] != -1);
		return call<R>("getDropLocation", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::DropMode, typename... Args>
	auto getDropMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDropMode")] != -1);
		return call<R>("getDropMode", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getFirstVisibleIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFirstVisibleIndex")] != -1);
		return call<R>("getFirstVisibleIndex", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getFixedCellHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFixedCellHeight")] != -1);
		return call<R>("getFixedCellHeight", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getFixedCellWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFixedCellWidth")] != -1);
		return call<R>("getFixedCellWidth", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLastVisibleIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLastVisibleIndex")] != -1);
		return call<R>("getLastVisibleIndex", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLayoutOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLayoutOrientation")] != -1);
		return call<R>("getLayoutOrientation", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLeadSelectionIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLeadSelectionIndex")] != -1);
		return call<R>("getLeadSelectionIndex", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::event::ListSelectionListener *, typename... Args>
	auto getListSelectionListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getListSelectionListeners")] != -1);
		return call<R>("getListSelectionListeners", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxSelectionIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaxSelectionIndex")] != -1);
		return call<R>("getMaxSelectionIndex", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinSelectionIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinSelectionIndex")] != -1);
		return call<R>("getMinSelectionIndex", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::ListModel, typename... Args>
	auto getModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getModel")] != -1);
		return call<R>("getModel", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNextMatch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNextMatch")] != -1);
		return call<R>("getNextMatch", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredScrollableViewportSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreferredScrollableViewportSize")] != -1);
		return call<R>("getPreferredScrollableViewportSize", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getPrototypeCellValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPrototypeCellValue")] != -1);
		return call<R>("getPrototypeCellValue", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getScrollableBlockIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getScrollableBlockIncrement")] != -1);
		return call<R>("getScrollableBlockIncrement", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getScrollableTracksViewportHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getScrollableTracksViewportHeight")] != -1);
		return call<R>("getScrollableTracksViewportHeight", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getScrollableTracksViewportWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getScrollableTracksViewportWidth")] != -1);
		return call<R>("getScrollableTracksViewportWidth", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getScrollableUnitIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getScrollableUnitIncrement")] != -1);
		return call<R>("getScrollableUnitIncrement", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSelectedIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSelectedIndex")] != -1);
		return call<R>("getSelectedIndex", forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getSelectedIndices(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSelectedIndices")] != -1);
		return call<R>("getSelectedIndices", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getSelectedValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSelectedValue")] != -1);
		return call<R>("getSelectedValue", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object *, typename... Args>
	auto getSelectedValues(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSelectedValues")] != -1);
		return call<R>("getSelectedValues", forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getSelectedValuesList(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSelectedValuesList")] != -1);
		return call<R>("getSelectedValuesList", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getSelectionBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSelectionBackground")] != -1);
		return call<R>("getSelectionBackground", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getSelectionForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSelectionForeground")] != -1);
		return call<R>("getSelectionForeground", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSelectionMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSelectionMode")] != -1);
		return call<R>("getSelectionMode", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::ListSelectionModel, typename... Args>
	auto getSelectionModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSelectionModel")] != -1);
		return call<R>("getSelectionModel", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getToolTipText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getToolTipText")] != -1);
		return call<R>("getToolTipText", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ListUI, typename... Args>
	auto getUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUI")] != -1);
		return call<R>("getUI", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUIClassID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUIClassID")] != -1);
		return call<R>("getUIClassID", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getValueIsAdjusting(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getValueIsAdjusting")] != -1);
		return call<R>("getValueIsAdjusting", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getVisibleRowCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getVisibleRowCount")] != -1);
		return call<R>("getVisibleRowCount", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Point, typename... Args>
	auto indexToLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("indexToLocation")] != -1);
		return call<R>("indexToLocation", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSelectedIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isSelectedIndex")] != -1);
		return call<R>("isSelectedIndex", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSelectionEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isSelectionEmpty")] != -1);
		return call<R>("isSelectionEmpty", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto locationToIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("locationToIndex")] != -1);
		return call<R>("locationToIndex", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeListSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeListSelectionListener")] != -1);
		return call<R>("removeListSelectionListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeSelectionInterval(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeSelectionInterval")] != -1);
		return call<R>("removeSelectionInterval", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCellRenderer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCellRenderer")] != -1);
		return call<R>("setCellRenderer", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDragEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDragEnabled")] != -1);
		return call<R>("setDragEnabled", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDropMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDropMode")] != -1);
		return call<R>("setDropMode", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFixedCellHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFixedCellHeight")] != -1);
		return call<R>("setFixedCellHeight", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFixedCellWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFixedCellWidth")] != -1);
		return call<R>("setFixedCellWidth", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLayoutOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLayoutOrientation")] != -1);
		return call<R>("setLayoutOrientation", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setListData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setListData")] != -1);
		return call<R>("setListData", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setModel")] != -1);
		return call<R>("setModel", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPrototypeCellValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPrototypeCellValue")] != -1);
		return call<R>("setPrototypeCellValue", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectedIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSelectedIndex")] != -1);
		return call<R>("setSelectedIndex", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectedIndices(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSelectedIndices")] != -1);
		return call<R>("setSelectedIndices", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectedValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSelectedValue")] != -1);
		return call<R>("setSelectedValue", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSelectionBackground")] != -1);
		return call<R>("setSelectionBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSelectionForeground")] != -1);
		return call<R>("setSelectionForeground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionInterval(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSelectionInterval")] != -1);
		return call<R>("setSelectionInterval", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSelectionMode")] != -1);
		return call<R>("setSelectionMode", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSelectionModel")] != -1);
		return call<R>("setSelectionModel", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setUI")] != -1);
		return call<R>("setUI", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValueIsAdjusting(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setValueIsAdjusting")] != -1);
		return call<R>("setValueIsAdjusting", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVisibleRowCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setVisibleRowCount")] != -1);
		return call<R>("setVisibleRowCount", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("updateUI")] != -1);
		return call<R>("updateUI", forward<Args>(args)...);
	}

};

#endif
