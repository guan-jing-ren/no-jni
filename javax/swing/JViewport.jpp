#ifndef javax_swing_JViewport_HPP
#define javax_swing_JViewport_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JViewport : public jObject<::javax::swing::JViewport, ::javax::swing::JComponent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JViewport";

	constexpr static Enume field_signatures{
		jField<::jint>("BACKINGSTORE_SCROLL_MODE"), //
		jField<::jint>("BLIT_SCROLL_MODE"), //
		jField<::jint>("SIMPLE_SCROLL_MODE"), //
	};

	template<typename F = ::jint>
	static auto BACKINGSTORE_SCROLL_MODE() {
		static_assert(field_signatures[jField<F>("BACKINGSTORE_SCROLL_MODE")] != -1);
		return sat<F>("BACKINGSTORE_SCROLL_MODE");
	}

	template<typename F = ::jint>
	static auto BLIT_SCROLL_MODE() {
		static_assert(field_signatures[jField<F>("BLIT_SCROLL_MODE")] != -1);
		return sat<F>("BLIT_SCROLL_MODE");
	}

	template<typename F = ::jint>
	static auto SIMPLE_SCROLL_MODE() {
		static_assert(field_signatures[jField<F>("SIMPLE_SCROLL_MODE")] != -1);
		return sat<F>("SIMPLE_SCROLL_MODE");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::javax::swing::event::ChangeListener)>("addChangeListener"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::javax::swing::event::ChangeListener *()>("getChangeListeners"), //
		jMethod<::java::awt::Dimension()>("getExtentSize"), //
		jMethod<::java::awt::Insets()>("getInsets"), //
		jMethod<::java::awt::Insets(::java::awt::Insets)>("getInsets"), //
		jMethod<::jint()>("getScrollMode"), //
		jMethod<::javax::swing::plaf::ViewportUI()>("getUI"), //
		jMethod<::java::lang::String()>("getUIClassID"), //
		jMethod<::java::awt::Component()>("getView"), //
		jMethod<::java::awt::Point()>("getViewPosition"), //
		jMethod<::java::awt::Rectangle()>("getViewRect"), //
		jMethod<::java::awt::Dimension()>("getViewSize"), //
		jMethod<::jboolean()>("isBackingStoreEnabled"), //
		jMethod<::jboolean()>("isOptimizedDrawingEnabled"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paint"), //
		jMethod<::jvoid(::java::awt::Component)>("remove"), //
		jMethod<::jvoid(::javax::swing::event::ChangeListener)>("removeChangeListener"), //
		jMethod<::jvoid(::jlong, ::jint, ::jint, ::jint, ::jint)>("repaint"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("reshape"), //
		jMethod<::jvoid(::java::awt::Rectangle)>("scrollRectToVisible"), //
		jMethod<::jvoid(::jboolean)>("setBackingStoreEnabled"), //
		jMethod<::jvoid(::javax::swing::border::Border)>("setBorder"), //
		jMethod<::jvoid(::java::awt::Dimension)>("setExtentSize"), //
		jMethod<::jvoid(::jint)>("setScrollMode"), //
		jMethod<::jvoid(::javax::swing::plaf::ViewportUI)>("setUI"), //
		jMethod<::jvoid(::java::awt::Component)>("setView"), //
		jMethod<::jvoid(::java::awt::Point)>("setViewPosition"), //
		jMethod<::jvoid(::java::awt::Dimension)>("setViewSize"), //
		jMethod<::java::awt::Dimension(::java::awt::Dimension)>("toViewCoordinates"), //
		jMethod<::java::awt::Point(::java::awt::Point)>("toViewCoordinates"), //
		jMethod<::jvoid()>("updateUI"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addChangeListener")] != -1);
		return call<R>("addChangeListener", forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::event::ChangeListener *, typename... Args>
	auto getChangeListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getChangeListeners")] != -1);
		return call<R>("getChangeListeners", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getExtentSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getExtentSize")] != -1);
		return call<R>("getExtentSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Insets, typename... Args>
	auto getInsets(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInsets")] != -1);
		return call<R>("getInsets", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getScrollMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getScrollMode")] != -1);
		return call<R>("getScrollMode", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ViewportUI, typename... Args>
	auto getUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUI")] != -1);
		return call<R>("getUI", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUIClassID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUIClassID")] != -1);
		return call<R>("getUIClassID", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getView")] != -1);
		return call<R>("getView", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Point, typename... Args>
	auto getViewPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getViewPosition")] != -1);
		return call<R>("getViewPosition", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getViewRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getViewRect")] != -1);
		return call<R>("getViewRect", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getViewSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getViewSize")] != -1);
		return call<R>("getViewSize", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isBackingStoreEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isBackingStoreEnabled")] != -1);
		return call<R>("isBackingStoreEnabled", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isOptimizedDrawingEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isOptimizedDrawingEnabled")] != -1);
		return call<R>("isOptimizedDrawingEnabled", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeChangeListener")] != -1);
		return call<R>("removeChangeListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto repaint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("repaint")] != -1);
		return call<R>("repaint", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reshape(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reshape")] != -1);
		return call<R>("reshape", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto scrollRectToVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("scrollRectToVisible")] != -1);
		return call<R>("scrollRectToVisible", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackingStoreEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBackingStoreEnabled")] != -1);
		return call<R>("setBackingStoreEnabled", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBorder")] != -1);
		return call<R>("setBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setExtentSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setExtentSize")] != -1);
		return call<R>("setExtentSize", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setScrollMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setScrollMode")] != -1);
		return call<R>("setScrollMode", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setUI")] != -1);
		return call<R>("setUI", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setView")] != -1);
		return call<R>("setView", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setViewPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setViewPosition")] != -1);
		return call<R>("setViewPosition", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setViewSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setViewSize")] != -1);
		return call<R>("setViewSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto toViewCoordinates(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toViewCoordinates")] != -1);
		return call<R>("toViewCoordinates", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("updateUI")] != -1);
		return call<R>("updateUI", forward<Args>(args)...);
	}

};

#endif
