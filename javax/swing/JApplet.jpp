#ifndef javax_swing_JApplet_HPP
#define javax_swing_JApplet_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JApplet : public jObject<::javax::swing::JApplet, ::java::applet::Applet> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JApplet";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::java::awt::Container()>("getContentPane"), //
		jMethod<::java::awt::Component()>("getGlassPane"), //
		jMethod<::java::awt::Graphics()>("getGraphics"), //
		jMethod<::javax::swing::JMenuBar()>("getJMenuBar"), //
		jMethod<::javax::swing::JLayeredPane()>("getLayeredPane"), //
		jMethod<::javax::swing::JRootPane()>("getRootPane"), //
		jMethod<::javax::swing::TransferHandler()>("getTransferHandler"), //
		jMethod<::jvoid(::java::awt::Component)>("remove"), //
		jMethod<::jvoid(::jlong, ::jint, ::jint, ::jint, ::jint)>("repaint"), //
		jMethod<::jvoid(::java::awt::Container)>("setContentPane"), //
		jMethod<::jvoid(::java::awt::Component)>("setGlassPane"), //
		jMethod<::jvoid(::javax::swing::JMenuBar)>("setJMenuBar"), //
		jMethod<::jvoid(::javax::swing::JLayeredPane)>("setLayeredPane"), //
		jMethod<::jvoid(::java::awt::LayoutManager)>("setLayout"), //
		jMethod<::jvoid(::javax::swing::TransferHandler)>("setTransferHandler"), //
		jMethod<::jvoid(::java::awt::Graphics)>("update"), //
	};

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Container, typename... Args>
	auto getContentPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getContentPane")] != -1);
		return call<R>("getContentPane", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getGlassPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getGlassPane")] != -1);
		return call<R>("getGlassPane", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Graphics, typename... Args>
	auto getGraphics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getGraphics")] != -1);
		return call<R>("getGraphics", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JMenuBar, typename... Args>
	auto getJMenuBar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getJMenuBar")] != -1);
		return call<R>("getJMenuBar", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JLayeredPane, typename... Args>
	auto getLayeredPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLayeredPane")] != -1);
		return call<R>("getLayeredPane", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JRootPane, typename... Args>
	auto getRootPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRootPane")] != -1);
		return call<R>("getRootPane", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::TransferHandler, typename... Args>
	auto getTransferHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTransferHandler")] != -1);
		return call<R>("getTransferHandler", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto repaint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("repaint")] != -1);
		return call<R>("repaint", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setContentPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setContentPane")] != -1);
		return call<R>("setContentPane", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGlassPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setGlassPane")] != -1);
		return call<R>("setGlassPane", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setJMenuBar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setJMenuBar")] != -1);
		return call<R>("setJMenuBar", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLayeredPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLayeredPane")] != -1);
		return call<R>("setLayeredPane", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLayout")] != -1);
		return call<R>("setLayout", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTransferHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setTransferHandler")] != -1);
		return call<R>("setTransferHandler", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto update(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("update")] != -1);
		return call<R>("update", forward<Args>(args)...);
	}

};

#endif
