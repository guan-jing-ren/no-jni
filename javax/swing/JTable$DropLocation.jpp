#ifndef javax_swing_JTable$DropLocation_HPP
#define javax_swing_JTable$DropLocation_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JTable$DropLocation : public jObject<::javax::swing::JTable$DropLocation, ::javax::swing::TransferHandler$DropLocation> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JTable$DropLocation";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint()>("getColumn"), //
		jMethod<::jint()>("getRow"), //
		jMethod<::jboolean()>("isInsertColumn"), //
		jMethod<::jboolean()>("isInsertRow"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColumn")] != -1);
		return call<R>("getColumn", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRow")] != -1);
		return call<R>("getRow", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isInsertColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isInsertColumn")] != -1);
		return call<R>("isInsertColumn", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isInsertRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isInsertRow")] != -1);
		return call<R>("isInsertRow", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
