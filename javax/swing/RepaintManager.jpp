#ifndef javax_swing_RepaintManager_HPP
#define javax_swing_RepaintManager_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::RepaintManager : public jObject<::javax::swing::RepaintManager, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "RepaintManager";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::applet::Applet, ::jint, ::jint, ::jint, ::jint)>("addDirtyRegion"), //
		jMethod<::jvoid(::java::awt::Window, ::jint, ::jint, ::jint, ::jint)>("addDirtyRegion"), //
		jMethod<::jvoid(::javax::swing::JComponent, ::jint, ::jint, ::jint, ::jint)>("addDirtyRegion"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("addInvalidComponent"), //
		jMethod<::javax::swing::RepaintManager(::java::awt::Component)>("currentManager"), //
		jMethod<::javax::swing::RepaintManager(::javax::swing::JComponent)>("currentManager"), //
		jMethod<::java::awt::Rectangle(::javax::swing::JComponent)>("getDirtyRegion"), //
		jMethod<::java::awt::Dimension()>("getDoubleBufferMaximumSize"), //
		jMethod<::java::awt::Image(::java::awt::Component, ::jint, ::jint)>("getOffscreenBuffer"), //
		jMethod<::java::awt::Image(::java::awt::Component, ::jint, ::jint)>("getVolatileOffscreenBuffer"), //
		jMethod<::jboolean(::javax::swing::JComponent)>("isCompletelyDirty"), //
		jMethod<::jboolean()>("isDoubleBufferingEnabled"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("markCompletelyClean"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("markCompletelyDirty"), //
		jMethod<::jvoid()>("paintDirtyRegions"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("removeInvalidComponent"), //
		jMethod<::jvoid(::javax::swing::RepaintManager)>("setCurrentManager"), //
		jMethod<::jvoid(::java::awt::Dimension)>("setDoubleBufferMaximumSize"), //
		jMethod<::jvoid(::jboolean)>("setDoubleBufferingEnabled"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid()>("validateInvalidComponents"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addDirtyRegion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addDirtyRegion")] != -1);
		return call<R>("addDirtyRegion", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addInvalidComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addInvalidComponent")] != -1);
		return call<R>("addInvalidComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::RepaintManager, typename... Args>
	static auto currentManager(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("currentManager")] != -1);
		return scall<R>("currentManager", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getDirtyRegion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDirtyRegion")] != -1);
		return call<R>("getDirtyRegion", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getDoubleBufferMaximumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDoubleBufferMaximumSize")] != -1);
		return call<R>("getDoubleBufferMaximumSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Image, typename... Args>
	auto getOffscreenBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOffscreenBuffer")] != -1);
		return call<R>("getOffscreenBuffer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Image, typename... Args>
	auto getVolatileOffscreenBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVolatileOffscreenBuffer")] != -1);
		return call<R>("getVolatileOffscreenBuffer", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCompletelyDirty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCompletelyDirty")] != -1);
		return call<R>("isCompletelyDirty", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDoubleBufferingEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDoubleBufferingEnabled")] != -1);
		return call<R>("isDoubleBufferingEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto markCompletelyClean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("markCompletelyClean")] != -1);
		return call<R>("markCompletelyClean", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto markCompletelyDirty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("markCompletelyDirty")] != -1);
		return call<R>("markCompletelyDirty", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintDirtyRegions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paintDirtyRegions")] != -1);
		return call<R>("paintDirtyRegions", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeInvalidComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeInvalidComponent")] != -1);
		return call<R>("removeInvalidComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setCurrentManager(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCurrentManager")] != -1);
		return scall<R>("setCurrentManager", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDoubleBufferMaximumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDoubleBufferMaximumSize")] != -1);
		return call<R>("setDoubleBufferMaximumSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDoubleBufferingEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDoubleBufferingEnabled")] != -1);
		return call<R>("setDoubleBufferingEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto validateInvalidComponents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("validateInvalidComponents")] != -1);
		return call<R>("validateInvalidComponents", std::forward<Args>(args)...);
	}

};

#endif
