#ifndef javax_swing_ImageIcon_HPP
#define javax_swing_ImageIcon_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::ImageIcon : public jObject<::javax::swing::ImageIcon, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "ImageIcon";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::awt::Image)>(), //
		jConstructor<::jvoid(::java::awt::Image, ::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String)>(), //
		jConstructor<::jvoid(::java::net::URL)>(), //
		jConstructor<::jvoid(::java::net::URL, ::java::lang::String)>(), //
		jConstructor<::jvoid(::jbyte *)>(), //
		jConstructor<::jvoid(::jbyte *, ::java::lang::String)>(), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::java::lang::String()>("getDescription"), //
		jMethod<::jint()>("getIconHeight"), //
		jMethod<::jint()>("getIconWidth"), //
		jMethod<::java::awt::Image()>("getImage"), //
		jMethod<::jint()>("getImageLoadStatus"), //
		jMethod<::java::awt::image::ImageObserver()>("getImageObserver"), //
		jMethod<::jvoid(::java::awt::Component, ::java::awt::Graphics, ::jint, ::jint)>("paintIcon"), //
		jMethod<::jvoid(::java::lang::String)>("setDescription"), //
		jMethod<::jvoid(::java::awt::Image)>("setImage"), //
		jMethod<::jvoid(::java::awt::image::ImageObserver)>("setImageObserver"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDescription")] != -1);
		return call<R>("getDescription", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getIconHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getIconHeight")] != -1);
		return call<R>("getIconHeight", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getIconWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getIconWidth")] != -1);
		return call<R>("getIconWidth", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Image, typename... Args>
	auto getImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getImage")] != -1);
		return call<R>("getImage", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getImageLoadStatus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getImageLoadStatus")] != -1);
		return call<R>("getImageLoadStatus", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::ImageObserver, typename... Args>
	auto getImageObserver(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getImageObserver")] != -1);
		return call<R>("getImageObserver", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintIcon")] != -1);
		return call<R>("paintIcon", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDescription")] != -1);
		return call<R>("setDescription", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setImage")] != -1);
		return call<R>("setImage", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setImageObserver(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setImageObserver")] != -1);
		return call<R>("setImageObserver", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
