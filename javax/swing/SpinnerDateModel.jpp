#ifndef javax_swing_SpinnerDateModel_HPP
#define javax_swing_SpinnerDateModel_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::SpinnerDateModel : public jObject<::javax::swing::SpinnerDateModel, ::javax::swing::AbstractSpinnerModel> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "SpinnerDateModel";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::util::Date, ::java::lang::Comparable, ::java::lang::Comparable, ::jint)>(), //
		jMethod<::jint()>("getCalendarField"), //
		jMethod<::java::util::Date()>("getDate"), //
		jMethod<::java::lang::Comparable()>("getEnd"), //
		jMethod<::java::lang::Object()>("getNextValue"), //
		jMethod<::java::lang::Object()>("getPreviousValue"), //
		jMethod<::java::lang::Comparable()>("getStart"), //
		jMethod<::java::lang::Object()>("getValue"), //
		jMethod<::jvoid(::jint)>("setCalendarField"), //
		jMethod<::jvoid(::java::lang::Comparable)>("setEnd"), //
		jMethod<::jvoid(::java::lang::Comparable)>("setStart"), //
		jMethod<::jvoid(::java::lang::Object)>("setValue"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getCalendarField(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCalendarField")] != -1);
		return call<R>("getCalendarField", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Date, typename... Args>
	auto getDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDate")] != -1);
		return call<R>("getDate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Comparable, typename... Args>
	auto getEnd(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEnd")] != -1);
		return call<R>("getEnd", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getNextValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNextValue")] != -1);
		return call<R>("getNextValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getPreviousValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreviousValue")] != -1);
		return call<R>("getPreviousValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Comparable, typename... Args>
	auto getStart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStart")] != -1);
		return call<R>("getStart", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCalendarField(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCalendarField")] != -1);
		return call<R>("setCalendarField", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEnd(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEnd")] != -1);
		return call<R>("setEnd", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setStart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setStart")] != -1);
		return call<R>("setStart", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setValue")] != -1);
		return call<R>("setValue", std::forward<Args>(args)...);
	}

};

#endif
