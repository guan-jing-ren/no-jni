#ifndef javax_swing_AbstractButton_HPP
#define javax_swing_AbstractButton_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::AbstractButton : public jObject<::javax::swing::AbstractButton, ::javax::swing::JComponent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "AbstractButton";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("BORDER_PAINTED_CHANGED_PROPERTY"), //
		jField<::java::lang::String>("CONTENT_AREA_FILLED_CHANGED_PROPERTY"), //
		jField<::java::lang::String>("DISABLED_ICON_CHANGED_PROPERTY"), //
		jField<::java::lang::String>("DISABLED_SELECTED_ICON_CHANGED_PROPERTY"), //
		jField<::java::lang::String>("FOCUS_PAINTED_CHANGED_PROPERTY"), //
		jField<::java::lang::String>("HORIZONTAL_ALIGNMENT_CHANGED_PROPERTY"), //
		jField<::java::lang::String>("HORIZONTAL_TEXT_POSITION_CHANGED_PROPERTY"), //
		jField<::java::lang::String>("ICON_CHANGED_PROPERTY"), //
		jField<::java::lang::String>("MARGIN_CHANGED_PROPERTY"), //
		jField<::java::lang::String>("MNEMONIC_CHANGED_PROPERTY"), //
		jField<::java::lang::String>("MODEL_CHANGED_PROPERTY"), //
		jField<::java::lang::String>("PRESSED_ICON_CHANGED_PROPERTY"), //
		jField<::java::lang::String>("ROLLOVER_ENABLED_CHANGED_PROPERTY"), //
		jField<::java::lang::String>("ROLLOVER_ICON_CHANGED_PROPERTY"), //
		jField<::java::lang::String>("ROLLOVER_SELECTED_ICON_CHANGED_PROPERTY"), //
		jField<::java::lang::String>("SELECTED_ICON_CHANGED_PROPERTY"), //
		jField<::java::lang::String>("TEXT_CHANGED_PROPERTY"), //
		jField<::java::lang::String>("VERTICAL_ALIGNMENT_CHANGED_PROPERTY"), //
		jField<::java::lang::String>("VERTICAL_TEXT_POSITION_CHANGED_PROPERTY"), //
	};

	template<typename F = ::java::lang::String>
	static auto BORDER_PAINTED_CHANGED_PROPERTY() {
		static_assert(field_signatures[jField<F>("BORDER_PAINTED_CHANGED_PROPERTY")] != -1);
		return sat<F>("BORDER_PAINTED_CHANGED_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto CONTENT_AREA_FILLED_CHANGED_PROPERTY() {
		static_assert(field_signatures[jField<F>("CONTENT_AREA_FILLED_CHANGED_PROPERTY")] != -1);
		return sat<F>("CONTENT_AREA_FILLED_CHANGED_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto DISABLED_ICON_CHANGED_PROPERTY() {
		static_assert(field_signatures[jField<F>("DISABLED_ICON_CHANGED_PROPERTY")] != -1);
		return sat<F>("DISABLED_ICON_CHANGED_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto DISABLED_SELECTED_ICON_CHANGED_PROPERTY() {
		static_assert(field_signatures[jField<F>("DISABLED_SELECTED_ICON_CHANGED_PROPERTY")] != -1);
		return sat<F>("DISABLED_SELECTED_ICON_CHANGED_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto FOCUS_PAINTED_CHANGED_PROPERTY() {
		static_assert(field_signatures[jField<F>("FOCUS_PAINTED_CHANGED_PROPERTY")] != -1);
		return sat<F>("FOCUS_PAINTED_CHANGED_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto HORIZONTAL_ALIGNMENT_CHANGED_PROPERTY() {
		static_assert(field_signatures[jField<F>("HORIZONTAL_ALIGNMENT_CHANGED_PROPERTY")] != -1);
		return sat<F>("HORIZONTAL_ALIGNMENT_CHANGED_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto HORIZONTAL_TEXT_POSITION_CHANGED_PROPERTY() {
		static_assert(field_signatures[jField<F>("HORIZONTAL_TEXT_POSITION_CHANGED_PROPERTY")] != -1);
		return sat<F>("HORIZONTAL_TEXT_POSITION_CHANGED_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto ICON_CHANGED_PROPERTY() {
		static_assert(field_signatures[jField<F>("ICON_CHANGED_PROPERTY")] != -1);
		return sat<F>("ICON_CHANGED_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto MARGIN_CHANGED_PROPERTY() {
		static_assert(field_signatures[jField<F>("MARGIN_CHANGED_PROPERTY")] != -1);
		return sat<F>("MARGIN_CHANGED_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto MNEMONIC_CHANGED_PROPERTY() {
		static_assert(field_signatures[jField<F>("MNEMONIC_CHANGED_PROPERTY")] != -1);
		return sat<F>("MNEMONIC_CHANGED_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto MODEL_CHANGED_PROPERTY() {
		static_assert(field_signatures[jField<F>("MODEL_CHANGED_PROPERTY")] != -1);
		return sat<F>("MODEL_CHANGED_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto PRESSED_ICON_CHANGED_PROPERTY() {
		static_assert(field_signatures[jField<F>("PRESSED_ICON_CHANGED_PROPERTY")] != -1);
		return sat<F>("PRESSED_ICON_CHANGED_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto ROLLOVER_ENABLED_CHANGED_PROPERTY() {
		static_assert(field_signatures[jField<F>("ROLLOVER_ENABLED_CHANGED_PROPERTY")] != -1);
		return sat<F>("ROLLOVER_ENABLED_CHANGED_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto ROLLOVER_ICON_CHANGED_PROPERTY() {
		static_assert(field_signatures[jField<F>("ROLLOVER_ICON_CHANGED_PROPERTY")] != -1);
		return sat<F>("ROLLOVER_ICON_CHANGED_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto ROLLOVER_SELECTED_ICON_CHANGED_PROPERTY() {
		static_assert(field_signatures[jField<F>("ROLLOVER_SELECTED_ICON_CHANGED_PROPERTY")] != -1);
		return sat<F>("ROLLOVER_SELECTED_ICON_CHANGED_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto SELECTED_ICON_CHANGED_PROPERTY() {
		static_assert(field_signatures[jField<F>("SELECTED_ICON_CHANGED_PROPERTY")] != -1);
		return sat<F>("SELECTED_ICON_CHANGED_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto TEXT_CHANGED_PROPERTY() {
		static_assert(field_signatures[jField<F>("TEXT_CHANGED_PROPERTY")] != -1);
		return sat<F>("TEXT_CHANGED_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto VERTICAL_ALIGNMENT_CHANGED_PROPERTY() {
		static_assert(field_signatures[jField<F>("VERTICAL_ALIGNMENT_CHANGED_PROPERTY")] != -1);
		return sat<F>("VERTICAL_ALIGNMENT_CHANGED_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto VERTICAL_TEXT_POSITION_CHANGED_PROPERTY() {
		static_assert(field_signatures[jField<F>("VERTICAL_TEXT_POSITION_CHANGED_PROPERTY")] != -1);
		return sat<F>("VERTICAL_TEXT_POSITION_CHANGED_PROPERTY");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::awt::event::ActionListener)>("addActionListener"), //
		jMethod<::jvoid(::javax::swing::event::ChangeListener)>("addChangeListener"), //
		jMethod<::jvoid(::java::awt::event::ItemListener)>("addItemListener"), //
		jMethod<::jvoid()>("doClick"), //
		jMethod<::jvoid(::jint)>("doClick"), //
		jMethod<::javax::swing::Action()>("getAction"), //
		jMethod<::java::lang::String()>("getActionCommand"), //
		jMethod<::java::awt::event::ActionListener *()>("getActionListeners"), //
		jMethod<::javax::swing::event::ChangeListener *()>("getChangeListeners"), //
		jMethod<::javax::swing::Icon()>("getDisabledIcon"), //
		jMethod<::javax::swing::Icon()>("getDisabledSelectedIcon"), //
		jMethod<::jint()>("getDisplayedMnemonicIndex"), //
		jMethod<::jboolean()>("getHideActionText"), //
		jMethod<::jint()>("getHorizontalAlignment"), //
		jMethod<::jint()>("getHorizontalTextPosition"), //
		jMethod<::javax::swing::Icon()>("getIcon"), //
		jMethod<::jint()>("getIconTextGap"), //
		jMethod<::java::awt::event::ItemListener *()>("getItemListeners"), //
		jMethod<::java::lang::String()>("getLabel"), //
		jMethod<::java::awt::Insets()>("getMargin"), //
		jMethod<::jint()>("getMnemonic"), //
		jMethod<::javax::swing::ButtonModel()>("getModel"), //
		jMethod<::jlong()>("getMultiClickThreshhold"), //
		jMethod<::javax::swing::Icon()>("getPressedIcon"), //
		jMethod<::javax::swing::Icon()>("getRolloverIcon"), //
		jMethod<::javax::swing::Icon()>("getRolloverSelectedIcon"), //
		jMethod<::javax::swing::Icon()>("getSelectedIcon"), //
		jMethod<::java::lang::Object *()>("getSelectedObjects"), //
		jMethod<::java::lang::String()>("getText"), //
		jMethod<::javax::swing::plaf::ButtonUI()>("getUI"), //
		jMethod<::jint()>("getVerticalAlignment"), //
		jMethod<::jint()>("getVerticalTextPosition"), //
		jMethod<::jboolean(::java::awt::Image, ::jint, ::jint, ::jint, ::jint, ::jint)>("imageUpdate"), //
		jMethod<::jboolean()>("isBorderPainted"), //
		jMethod<::jboolean()>("isContentAreaFilled"), //
		jMethod<::jboolean()>("isFocusPainted"), //
		jMethod<::jboolean()>("isRolloverEnabled"), //
		jMethod<::jboolean()>("isSelected"), //
		jMethod<::jvoid(::java::awt::event::ActionListener)>("removeActionListener"), //
		jMethod<::jvoid(::javax::swing::event::ChangeListener)>("removeChangeListener"), //
		jMethod<::jvoid(::java::awt::event::ItemListener)>("removeItemListener"), //
		jMethod<::jvoid()>("removeNotify"), //
		jMethod<::jvoid(::javax::swing::Action)>("setAction"), //
		jMethod<::jvoid(::java::lang::String)>("setActionCommand"), //
		jMethod<::jvoid(::jboolean)>("setBorderPainted"), //
		jMethod<::jvoid(::jboolean)>("setContentAreaFilled"), //
		jMethod<::jvoid(::javax::swing::Icon)>("setDisabledIcon"), //
		jMethod<::jvoid(::javax::swing::Icon)>("setDisabledSelectedIcon"), //
		jMethod<::jvoid(::jint)>("setDisplayedMnemonicIndex"), //
		jMethod<::jvoid(::jboolean)>("setEnabled"), //
		jMethod<::jvoid(::jboolean)>("setFocusPainted"), //
		jMethod<::jvoid(::jboolean)>("setHideActionText"), //
		jMethod<::jvoid(::jint)>("setHorizontalAlignment"), //
		jMethod<::jvoid(::jint)>("setHorizontalTextPosition"), //
		jMethod<::jvoid(::javax::swing::Icon)>("setIcon"), //
		jMethod<::jvoid(::jint)>("setIconTextGap"), //
		jMethod<::jvoid(::java::lang::String)>("setLabel"), //
		jMethod<::jvoid(::java::awt::LayoutManager)>("setLayout"), //
		jMethod<::jvoid(::java::awt::Insets)>("setMargin"), //
		jMethod<::jvoid(::jchar)>("setMnemonic"), //
		jMethod<::jvoid(::jint)>("setMnemonic"), //
		jMethod<::jvoid(::javax::swing::ButtonModel)>("setModel"), //
		jMethod<::jvoid(::jlong)>("setMultiClickThreshhold"), //
		jMethod<::jvoid(::javax::swing::Icon)>("setPressedIcon"), //
		jMethod<::jvoid(::jboolean)>("setRolloverEnabled"), //
		jMethod<::jvoid(::javax::swing::Icon)>("setRolloverIcon"), //
		jMethod<::jvoid(::javax::swing::Icon)>("setRolloverSelectedIcon"), //
		jMethod<::jvoid(::jboolean)>("setSelected"), //
		jMethod<::jvoid(::javax::swing::Icon)>("setSelectedIcon"), //
		jMethod<::jvoid(::java::lang::String)>("setText"), //
		jMethod<::jvoid(::javax::swing::plaf::ButtonUI)>("setUI"), //
		jMethod<::jvoid(::jint)>("setVerticalAlignment"), //
		jMethod<::jvoid(::jint)>("setVerticalTextPosition"), //
		jMethod<::jvoid()>("updateUI"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addActionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addActionListener")] != -1);
		return call<R>("addActionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addChangeListener")] != -1);
		return call<R>("addChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addItemListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addItemListener")] != -1);
		return call<R>("addItemListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto doClick(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("doClick")] != -1);
		return call<R>("doClick", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Action, typename... Args>
	auto getAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAction")] != -1);
		return call<R>("getAction", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getActionCommand(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getActionCommand")] != -1);
		return call<R>("getActionCommand", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::ActionListener *, typename... Args>
	auto getActionListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getActionListeners")] != -1);
		return call<R>("getActionListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::event::ChangeListener *, typename... Args>
	auto getChangeListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChangeListeners")] != -1);
		return call<R>("getChangeListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getDisabledIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisabledIcon")] != -1);
		return call<R>("getDisabledIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getDisabledSelectedIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisabledSelectedIcon")] != -1);
		return call<R>("getDisabledSelectedIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDisplayedMnemonicIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisplayedMnemonicIndex")] != -1);
		return call<R>("getDisplayedMnemonicIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getHideActionText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHideActionText")] != -1);
		return call<R>("getHideActionText", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHorizontalAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHorizontalAlignment")] != -1);
		return call<R>("getHorizontalAlignment", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHorizontalTextPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHorizontalTextPosition")] != -1);
		return call<R>("getHorizontalTextPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIcon")] != -1);
		return call<R>("getIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getIconTextGap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIconTextGap")] != -1);
		return call<R>("getIconTextGap", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::ItemListener *, typename... Args>
	auto getItemListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItemListeners")] != -1);
		return call<R>("getItemListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLabel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLabel")] != -1);
		return call<R>("getLabel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Insets, typename... Args>
	auto getMargin(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMargin")] != -1);
		return call<R>("getMargin", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMnemonic(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMnemonic")] != -1);
		return call<R>("getMnemonic", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::ButtonModel, typename... Args>
	auto getModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getModel")] != -1);
		return call<R>("getModel", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getMultiClickThreshhold(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMultiClickThreshhold")] != -1);
		return call<R>("getMultiClickThreshhold", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getPressedIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPressedIcon")] != -1);
		return call<R>("getPressedIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getRolloverIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRolloverIcon")] != -1);
		return call<R>("getRolloverIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getRolloverSelectedIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRolloverSelectedIcon")] != -1);
		return call<R>("getRolloverSelectedIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getSelectedIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedIcon")] != -1);
		return call<R>("getSelectedIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object *, typename... Args>
	auto getSelectedObjects(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedObjects")] != -1);
		return call<R>("getSelectedObjects", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getText")] != -1);
		return call<R>("getText", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ButtonUI, typename... Args>
	auto getUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUI")] != -1);
		return call<R>("getUI", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getVerticalAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVerticalAlignment")] != -1);
		return call<R>("getVerticalAlignment", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getVerticalTextPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVerticalTextPosition")] != -1);
		return call<R>("getVerticalTextPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto imageUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("imageUpdate")] != -1);
		return call<R>("imageUpdate", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isBorderPainted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isBorderPainted")] != -1);
		return call<R>("isBorderPainted", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isContentAreaFilled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isContentAreaFilled")] != -1);
		return call<R>("isContentAreaFilled", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFocusPainted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFocusPainted")] != -1);
		return call<R>("isFocusPainted", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRolloverEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isRolloverEnabled")] != -1);
		return call<R>("isRolloverEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSelected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSelected")] != -1);
		return call<R>("isSelected", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeActionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeActionListener")] != -1);
		return call<R>("removeActionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeChangeListener")] != -1);
		return call<R>("removeChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeItemListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeItemListener")] != -1);
		return call<R>("removeItemListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeNotify")] != -1);
		return call<R>("removeNotify", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAction")] != -1);
		return call<R>("setAction", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setActionCommand(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setActionCommand")] != -1);
		return call<R>("setActionCommand", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBorderPainted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBorderPainted")] != -1);
		return call<R>("setBorderPainted", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setContentAreaFilled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setContentAreaFilled")] != -1);
		return call<R>("setContentAreaFilled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDisabledIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDisabledIcon")] != -1);
		return call<R>("setDisabledIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDisabledSelectedIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDisabledSelectedIcon")] != -1);
		return call<R>("setDisabledSelectedIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDisplayedMnemonicIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDisplayedMnemonicIndex")] != -1);
		return call<R>("setDisplayedMnemonicIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEnabled")] != -1);
		return call<R>("setEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFocusPainted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFocusPainted")] != -1);
		return call<R>("setFocusPainted", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHideActionText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHideActionText")] != -1);
		return call<R>("setHideActionText", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHorizontalAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHorizontalAlignment")] != -1);
		return call<R>("setHorizontalAlignment", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHorizontalTextPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHorizontalTextPosition")] != -1);
		return call<R>("setHorizontalTextPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIcon")] != -1);
		return call<R>("setIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIconTextGap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIconTextGap")] != -1);
		return call<R>("setIconTextGap", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLabel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLabel")] != -1);
		return call<R>("setLabel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLayout")] != -1);
		return call<R>("setLayout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMargin(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMargin")] != -1);
		return call<R>("setMargin", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMnemonic(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMnemonic")] != -1);
		return call<R>("setMnemonic", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setModel")] != -1);
		return call<R>("setModel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMultiClickThreshhold(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMultiClickThreshhold")] != -1);
		return call<R>("setMultiClickThreshhold", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPressedIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPressedIcon")] != -1);
		return call<R>("setPressedIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRolloverEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRolloverEnabled")] != -1);
		return call<R>("setRolloverEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRolloverIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRolloverIcon")] != -1);
		return call<R>("setRolloverIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRolloverSelectedIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRolloverSelectedIcon")] != -1);
		return call<R>("setRolloverSelectedIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelected")] != -1);
		return call<R>("setSelected", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectedIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectedIcon")] != -1);
		return call<R>("setSelectedIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setText")] != -1);
		return call<R>("setText", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUI")] != -1);
		return call<R>("setUI", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVerticalAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVerticalAlignment")] != -1);
		return call<R>("setVerticalAlignment", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVerticalTextPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVerticalTextPosition")] != -1);
		return call<R>("setVerticalTextPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateUI")] != -1);
		return call<R>("updateUI", std::forward<Args>(args)...);
	}

};

#endif
