#ifndef javax_swing_MutableComboBoxModel_HPP
#define javax_swing_MutableComboBoxModel_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::MutableComboBoxModel : public jObject<::javax::swing::MutableComboBoxModel, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "MutableComboBoxModel";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::lang::Object)>("addElement"), //
		jMethod<::jvoid(::java::lang::Object, ::jint)>("insertElementAt"), //
		jMethod<::jvoid(::java::lang::Object)>("removeElement"), //
		jMethod<::jvoid(::jint)>("removeElementAt"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addElement")] != -1);
		return call<R>("addElement", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insertElementAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("insertElementAt")] != -1);
		return call<R>("insertElementAt", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeElement")] != -1);
		return call<R>("removeElement", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeElementAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeElementAt")] != -1);
		return call<R>("removeElementAt", forward<Args>(args)...);
	}

};

#endif
