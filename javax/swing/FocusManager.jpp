#ifndef javax_swing_FocusManager_HPP
#define javax_swing_FocusManager_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::FocusManager : public jObject<::javax::swing::FocusManager, ::java::awt::DefaultKeyboardFocusManager> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "FocusManager";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("FOCUS_MANAGER_CLASS_PROPERTY"), //
	};

	template<typename F = ::java::lang::String>
	static auto FOCUS_MANAGER_CLASS_PROPERTY() {
		static_assert(field_signatures[jField<F>("FOCUS_MANAGER_CLASS_PROPERTY")] != -1);
		return sat<F>("FOCUS_MANAGER_CLASS_PROPERTY");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::swing::FocusManager()>("getCurrentManager"), //
		jMethod<::jvoid(::javax::swing::FocusManager)>("setCurrentManager"), //
	};

	template<typename R = ::javax::swing::FocusManager, typename... Args>
	static auto getCurrentManager(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCurrentManager")] != -1);
		return scall<R>("getCurrentManager", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setCurrentManager(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCurrentManager")] != -1);
		return scall<R>("setCurrentManager", std::forward<Args>(args)...);
	}

};

#endif
