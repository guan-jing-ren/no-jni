#ifndef javax_swing_colorchooser_AbstractColorChooserPanel_HPP
#define javax_swing_colorchooser_AbstractColorChooserPanel_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::colorchooser::AbstractColorChooserPanel : public jObject<::javax::swing::colorchooser::AbstractColorChooserPanel, ::javax::swing::JPanel> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_colorchooser / "AbstractColorChooserPanel";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::swing::colorchooser::ColorSelectionModel()>("getColorSelectionModel"), //
		jMethod<::java::lang::String()>("getDisplayName"), //
		jMethod<::jint()>("getDisplayedMnemonicIndex"), //
		jMethod<::javax::swing::Icon()>("getLargeDisplayIcon"), //
		jMethod<::jint()>("getMnemonic"), //
		jMethod<::javax::swing::Icon()>("getSmallDisplayIcon"), //
		jMethod<::jvoid(::javax::swing::JColorChooser)>("installChooserPanel"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paint"), //
		jMethod<::jvoid(::javax::swing::JColorChooser)>("uninstallChooserPanel"), //
		jMethod<::jvoid()>("updateChooser"), //
	};

	template<typename R = ::javax::swing::colorchooser::ColorSelectionModel, typename... Args>
	auto getColorSelectionModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColorSelectionModel")] != -1);
		return call<R>("getColorSelectionModel", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDisplayName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDisplayName")] != -1);
		return call<R>("getDisplayName", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDisplayedMnemonicIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDisplayedMnemonicIndex")] != -1);
		return call<R>("getDisplayedMnemonicIndex", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getLargeDisplayIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLargeDisplayIcon")] != -1);
		return call<R>("getLargeDisplayIcon", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMnemonic(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMnemonic")] != -1);
		return call<R>("getMnemonic", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getSmallDisplayIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSmallDisplayIcon")] != -1);
		return call<R>("getSmallDisplayIcon", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto installChooserPanel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("installChooserPanel")] != -1);
		return call<R>("installChooserPanel", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto uninstallChooserPanel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("uninstallChooserPanel")] != -1);
		return call<R>("uninstallChooserPanel", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateChooser(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("updateChooser")] != -1);
		return call<R>("updateChooser", forward<Args>(args)...);
	}

};

#endif
