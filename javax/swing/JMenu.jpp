#ifndef javax_swing_JMenu_HPP
#define javax_swing_JMenu_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JMenu : public jObject<::javax::swing::JMenu, ::javax::swing::JMenuItem> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JMenu";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::jboolean)>(), //
		jConstructor<::jvoid(::javax::swing::Action)>(), //
		jMethod<::java::awt::Component(::java::awt::Component)>("add"), //
		jMethod<::java::awt::Component(::java::awt::Component, ::jint)>("add"), //
		jMethod<::javax::swing::JMenuItem(::java::lang::String)>("add"), //
		jMethod<::javax::swing::JMenuItem(::javax::swing::Action)>("add"), //
		jMethod<::javax::swing::JMenuItem(::javax::swing::JMenuItem)>("add"), //
		jMethod<::jvoid(::javax::swing::event::MenuListener)>("addMenuListener"), //
		jMethod<::jvoid()>("addSeparator"), //
		jMethod<::jvoid(::java::awt::ComponentOrientation)>("applyComponentOrientation"), //
		jMethod<::jvoid(::jint)>("doClick"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::java::awt::Component()>("getComponent"), //
		jMethod<::jint()>("getDelay"), //
		jMethod<::javax::swing::JMenuItem(::jint)>("getItem"), //
		jMethod<::jint()>("getItemCount"), //
		jMethod<::java::awt::Component(::jint)>("getMenuComponent"), //
		jMethod<::jint()>("getMenuComponentCount"), //
		jMethod<::java::awt::Component *()>("getMenuComponents"), //
		jMethod<::javax::swing::event::MenuListener *()>("getMenuListeners"), //
		jMethod<::javax::swing::JPopupMenu()>("getPopupMenu"), //
		jMethod<::javax::swing::MenuElement *()>("getSubElements"), //
		jMethod<::java::lang::String()>("getUIClassID"), //
		jMethod<::jvoid(::java::lang::String, ::jint)>("insert"), //
		jMethod<::javax::swing::JMenuItem(::javax::swing::Action, ::jint)>("insert"), //
		jMethod<::javax::swing::JMenuItem(::javax::swing::JMenuItem, ::jint)>("insert"), //
		jMethod<::jvoid(::jint)>("insertSeparator"), //
		jMethod<::jboolean(::java::awt::Component)>("isMenuComponent"), //
		jMethod<::jboolean()>("isPopupMenuVisible"), //
		jMethod<::jboolean()>("isSelected"), //
		jMethod<::jboolean()>("isTearOff"), //
		jMethod<::jboolean()>("isTopLevelMenu"), //
		jMethod<::jvoid(::jboolean)>("menuSelectionChanged"), //
		jMethod<::jvoid(::jint)>("remove"), //
		jMethod<::jvoid(::java::awt::Component)>("remove"), //
		jMethod<::jvoid(::javax::swing::JMenuItem)>("remove"), //
		jMethod<::jvoid()>("removeAll"), //
		jMethod<::jvoid(::javax::swing::event::MenuListener)>("removeMenuListener"), //
		jMethod<::jvoid(::javax::swing::KeyStroke)>("setAccelerator"), //
		jMethod<::jvoid(::java::awt::ComponentOrientation)>("setComponentOrientation"), //
		jMethod<::jvoid(::jint)>("setDelay"), //
		jMethod<::jvoid(::jint, ::jint)>("setMenuLocation"), //
		jMethod<::jvoid(::javax::swing::ButtonModel)>("setModel"), //
		jMethod<::jvoid(::jboolean)>("setPopupMenuVisible"), //
		jMethod<::jvoid(::jboolean)>("setSelected"), //
		jMethod<::jvoid()>("updateUI"), //
	};

	template<typename R = ::java::awt::Component, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addMenuListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addMenuListener")] != -1);
		return call<R>("addMenuListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addSeparator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addSeparator")] != -1);
		return call<R>("addSeparator", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto applyComponentOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("applyComponentOrientation")] != -1);
		return call<R>("applyComponentOrientation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto doClick(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("doClick")] != -1);
		return call<R>("doClick", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getComponent")] != -1);
		return call<R>("getComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDelay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDelay")] != -1);
		return call<R>("getDelay", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JMenuItem, typename... Args>
	auto getItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItem")] != -1);
		return call<R>("getItem", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getItemCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItemCount")] != -1);
		return call<R>("getItemCount", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getMenuComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMenuComponent")] != -1);
		return call<R>("getMenuComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMenuComponentCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMenuComponentCount")] != -1);
		return call<R>("getMenuComponentCount", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component *, typename... Args>
	auto getMenuComponents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMenuComponents")] != -1);
		return call<R>("getMenuComponents", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::event::MenuListener *, typename... Args>
	auto getMenuListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMenuListeners")] != -1);
		return call<R>("getMenuListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JPopupMenu, typename... Args>
	auto getPopupMenu(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPopupMenu")] != -1);
		return call<R>("getPopupMenu", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::MenuElement *, typename... Args>
	auto getSubElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSubElements")] != -1);
		return call<R>("getSubElements", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUIClassID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUIClassID")] != -1);
		return call<R>("getUIClassID", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insert(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insert")] != -1);
		return call<R>("insert", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insertSeparator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insertSeparator")] != -1);
		return call<R>("insertSeparator", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isMenuComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isMenuComponent")] != -1);
		return call<R>("isMenuComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPopupMenuVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPopupMenuVisible")] != -1);
		return call<R>("isPopupMenuVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSelected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSelected")] != -1);
		return call<R>("isSelected", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isTearOff(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isTearOff")] != -1);
		return call<R>("isTearOff", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isTopLevelMenu(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isTopLevelMenu")] != -1);
		return call<R>("isTopLevelMenu", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto menuSelectionChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("menuSelectionChanged")] != -1);
		return call<R>("menuSelectionChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAll")] != -1);
		return call<R>("removeAll", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeMenuListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeMenuListener")] != -1);
		return call<R>("removeMenuListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAccelerator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAccelerator")] != -1);
		return call<R>("setAccelerator", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setComponentOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setComponentOrientation")] != -1);
		return call<R>("setComponentOrientation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDelay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDelay")] != -1);
		return call<R>("setDelay", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMenuLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMenuLocation")] != -1);
		return call<R>("setMenuLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setModel")] != -1);
		return call<R>("setModel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPopupMenuVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPopupMenuVisible")] != -1);
		return call<R>("setPopupMenuVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelected")] != -1);
		return call<R>("setSelected", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateUI")] != -1);
		return call<R>("updateUI", std::forward<Args>(args)...);
	}

};

#endif
