#ifndef javax_swing_DefaultBoundedRangeModel_HPP
#define javax_swing_DefaultBoundedRangeModel_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::DefaultBoundedRangeModel : public jObject<::javax::swing::DefaultBoundedRangeModel, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "DefaultBoundedRangeModel";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint, ::jint, ::jint, ::jint)>(), //
		jMethod<::jvoid(::javax::swing::event::ChangeListener)>("addChangeListener"), //
		jMethod<::javax::swing::event::ChangeListener *()>("getChangeListeners"), //
		jMethod<::jint()>("getExtent"), //
		jMethod<::java::util::EventListener *(::java::lang::Class)>("getListeners"), //
		jMethod<::jint()>("getMaximum"), //
		jMethod<::jint()>("getMinimum"), //
		jMethod<::jint()>("getValue"), //
		jMethod<::jboolean()>("getValueIsAdjusting"), //
		jMethod<::jvoid(::javax::swing::event::ChangeListener)>("removeChangeListener"), //
		jMethod<::jvoid(::jint)>("setExtent"), //
		jMethod<::jvoid(::jint)>("setMaximum"), //
		jMethod<::jvoid(::jint)>("setMinimum"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jboolean)>("setRangeProperties"), //
		jMethod<::jvoid(::jint)>("setValue"), //
		jMethod<::jvoid(::jboolean)>("setValueIsAdjusting"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addChangeListener")] != -1);
		return call<R>("addChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::event::ChangeListener *, typename... Args>
	auto getChangeListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChangeListeners")] != -1);
		return call<R>("getChangeListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getExtent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExtent")] != -1);
		return call<R>("getExtent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::EventListener *, typename... Args>
	auto getListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getListeners")] != -1);
		return call<R>("getListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaximum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaximum")] != -1);
		return call<R>("getMaximum", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinimum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinimum")] != -1);
		return call<R>("getMinimum", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getValueIsAdjusting(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValueIsAdjusting")] != -1);
		return call<R>("getValueIsAdjusting", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeChangeListener")] != -1);
		return call<R>("removeChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setExtent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setExtent")] != -1);
		return call<R>("setExtent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaximum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMaximum")] != -1);
		return call<R>("setMaximum", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMinimum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMinimum")] != -1);
		return call<R>("setMinimum", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRangeProperties(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRangeProperties")] != -1);
		return call<R>("setRangeProperties", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setValue")] != -1);
		return call<R>("setValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValueIsAdjusting(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setValueIsAdjusting")] != -1);
		return call<R>("setValueIsAdjusting", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
