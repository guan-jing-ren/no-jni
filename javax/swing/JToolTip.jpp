#ifndef javax_swing_JToolTip_HPP
#define javax_swing_JToolTip_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JToolTip : public jObject<::javax::swing::JToolTip, ::javax::swing::JComponent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JToolTip";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::javax::swing::JComponent()>("getComponent"), //
		jMethod<::java::lang::String()>("getTipText"), //
		jMethod<::javax::swing::plaf::ToolTipUI()>("getUI"), //
		jMethod<::java::lang::String()>("getUIClassID"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("setComponent"), //
		jMethod<::jvoid(::java::lang::String)>("setTipText"), //
		jMethod<::jvoid()>("updateUI"), //
	};

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JComponent, typename... Args>
	auto getComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getComponent")] != -1);
		return call<R>("getComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTipText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTipText")] != -1);
		return call<R>("getTipText", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ToolTipUI, typename... Args>
	auto getUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUI")] != -1);
		return call<R>("getUI", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUIClassID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUIClassID")] != -1);
		return call<R>("getUIClassID", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setComponent")] != -1);
		return call<R>("setComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTipText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTipText")] != -1);
		return call<R>("setTipText", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateUI")] != -1);
		return call<R>("updateUI", std::forward<Args>(args)...);
	}

};

#endif
