#ifndef javax_swing_JTextField_HPP
#define javax_swing_JTextField_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JTextField : public jObject<::javax::swing::JTextField, ::javax::swing::text::JTextComponent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JTextField";

	constexpr static Enume field_signatures{
		jField<::jint>("BOTTOM"), //
		jField<::jint>("CENTER"), //
		jField<::jint>("EAST"), //
		jField<::jint>("HORIZONTAL"), //
		jField<::jint>("LEADING"), //
		jField<::jint>("LEFT"), //
		jField<::jint>("NEXT"), //
		jField<::jint>("NORTH"), //
		jField<::jint>("NORTH_EAST"), //
		jField<::jint>("NORTH_WEST"), //
		jField<::jint>("PREVIOUS"), //
		jField<::jint>("RIGHT"), //
		jField<::jint>("SOUTH"), //
		jField<::jint>("SOUTH_EAST"), //
		jField<::jint>("SOUTH_WEST"), //
		jField<::jint>("TOP"), //
		jField<::jint>("TRAILING"), //
		jField<::jint>("VERTICAL"), //
		jField<::jint>("WEST"), //
		jField<::java::lang::String>("notifyAction"), //
	};

	template<typename F = ::jint>
	static auto BOTTOM() {
		static_assert(field_signatures[jField<F>("BOTTOM")] != -1);
		return sat<F>("BOTTOM");
	}

	template<typename F = ::jint>
	static auto CENTER() {
		static_assert(field_signatures[jField<F>("CENTER")] != -1);
		return sat<F>("CENTER");
	}

	template<typename F = ::jint>
	static auto EAST() {
		static_assert(field_signatures[jField<F>("EAST")] != -1);
		return sat<F>("EAST");
	}

	template<typename F = ::jint>
	static auto HORIZONTAL() {
		static_assert(field_signatures[jField<F>("HORIZONTAL")] != -1);
		return sat<F>("HORIZONTAL");
	}

	template<typename F = ::jint>
	static auto LEADING() {
		static_assert(field_signatures[jField<F>("LEADING")] != -1);
		return sat<F>("LEADING");
	}

	template<typename F = ::jint>
	static auto LEFT() {
		static_assert(field_signatures[jField<F>("LEFT")] != -1);
		return sat<F>("LEFT");
	}

	template<typename F = ::jint>
	static auto NEXT() {
		static_assert(field_signatures[jField<F>("NEXT")] != -1);
		return sat<F>("NEXT");
	}

	template<typename F = ::jint>
	static auto NORTH() {
		static_assert(field_signatures[jField<F>("NORTH")] != -1);
		return sat<F>("NORTH");
	}

	template<typename F = ::jint>
	static auto NORTH_EAST() {
		static_assert(field_signatures[jField<F>("NORTH_EAST")] != -1);
		return sat<F>("NORTH_EAST");
	}

	template<typename F = ::jint>
	static auto NORTH_WEST() {
		static_assert(field_signatures[jField<F>("NORTH_WEST")] != -1);
		return sat<F>("NORTH_WEST");
	}

	template<typename F = ::jint>
	static auto PREVIOUS() {
		static_assert(field_signatures[jField<F>("PREVIOUS")] != -1);
		return sat<F>("PREVIOUS");
	}

	template<typename F = ::jint>
	static auto RIGHT() {
		static_assert(field_signatures[jField<F>("RIGHT")] != -1);
		return sat<F>("RIGHT");
	}

	template<typename F = ::jint>
	static auto SOUTH() {
		static_assert(field_signatures[jField<F>("SOUTH")] != -1);
		return sat<F>("SOUTH");
	}

	template<typename F = ::jint>
	static auto SOUTH_EAST() {
		static_assert(field_signatures[jField<F>("SOUTH_EAST")] != -1);
		return sat<F>("SOUTH_EAST");
	}

	template<typename F = ::jint>
	static auto SOUTH_WEST() {
		static_assert(field_signatures[jField<F>("SOUTH_WEST")] != -1);
		return sat<F>("SOUTH_WEST");
	}

	template<typename F = ::jint>
	static auto TOP() {
		static_assert(field_signatures[jField<F>("TOP")] != -1);
		return sat<F>("TOP");
	}

	template<typename F = ::jint>
	static auto TRAILING() {
		static_assert(field_signatures[jField<F>("TRAILING")] != -1);
		return sat<F>("TRAILING");
	}

	template<typename F = ::jint>
	static auto VERTICAL() {
		static_assert(field_signatures[jField<F>("VERTICAL")] != -1);
		return sat<F>("VERTICAL");
	}

	template<typename F = ::jint>
	static auto WEST() {
		static_assert(field_signatures[jField<F>("WEST")] != -1);
		return sat<F>("WEST");
	}

	template<typename F = ::java::lang::String>
	static auto notifyAction() {
		static_assert(field_signatures[jField<F>("notifyAction")] != -1);
		return sat<F>("notifyAction");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint)>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::jint)>(), //
		jConstructor<::jvoid(::javax::swing::text::Document, ::java::lang::String, ::jint)>(), //
		jMethod<::jvoid(::java::awt::event::ActionListener)>("addActionListener"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::javax::swing::Action()>("getAction"), //
		jMethod<::java::awt::event::ActionListener *()>("getActionListeners"), //
		jMethod<::javax::swing::Action *()>("getActions"), //
		jMethod<::jint()>("getColumns"), //
		jMethod<::jint()>("getHorizontalAlignment"), //
		jMethod<::javax::swing::BoundedRangeModel()>("getHorizontalVisibility"), //
		jMethod<::java::awt::Dimension()>("getPreferredSize"), //
		jMethod<::jint()>("getScrollOffset"), //
		jMethod<::java::lang::String()>("getUIClassID"), //
		jMethod<::jboolean()>("isValidateRoot"), //
		jMethod<::jvoid()>("postActionEvent"), //
		jMethod<::jvoid(::java::awt::event::ActionListener)>("removeActionListener"), //
		jMethod<::jvoid(::java::awt::Rectangle)>("scrollRectToVisible"), //
		jMethod<::jvoid(::javax::swing::Action)>("setAction"), //
		jMethod<::jvoid(::java::lang::String)>("setActionCommand"), //
		jMethod<::jvoid(::jint)>("setColumns"), //
		jMethod<::jvoid(::javax::swing::text::Document)>("setDocument"), //
		jMethod<::jvoid(::java::awt::Font)>("setFont"), //
		jMethod<::jvoid(::jint)>("setHorizontalAlignment"), //
		jMethod<::jvoid(::jint)>("setScrollOffset"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addActionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addActionListener")] != -1);
		return call<R>("addActionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Action, typename... Args>
	auto getAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAction")] != -1);
		return call<R>("getAction", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::ActionListener *, typename... Args>
	auto getActionListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getActionListeners")] != -1);
		return call<R>("getActionListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Action *, typename... Args>
	auto getActions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getActions")] != -1);
		return call<R>("getActions", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getColumns(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumns")] != -1);
		return call<R>("getColumns", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHorizontalAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHorizontalAlignment")] != -1);
		return call<R>("getHorizontalAlignment", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::BoundedRangeModel, typename... Args>
	auto getHorizontalVisibility(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHorizontalVisibility")] != -1);
		return call<R>("getHorizontalVisibility", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreferredSize")] != -1);
		return call<R>("getPreferredSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getScrollOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScrollOffset")] != -1);
		return call<R>("getScrollOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUIClassID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUIClassID")] != -1);
		return call<R>("getUIClassID", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isValidateRoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isValidateRoot")] != -1);
		return call<R>("isValidateRoot", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto postActionEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("postActionEvent")] != -1);
		return call<R>("postActionEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeActionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeActionListener")] != -1);
		return call<R>("removeActionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto scrollRectToVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("scrollRectToVisible")] != -1);
		return call<R>("scrollRectToVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAction")] != -1);
		return call<R>("setAction", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setActionCommand(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setActionCommand")] != -1);
		return call<R>("setActionCommand", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColumns(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setColumns")] != -1);
		return call<R>("setColumns", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDocument")] != -1);
		return call<R>("setDocument", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFont")] != -1);
		return call<R>("setFont", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHorizontalAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHorizontalAlignment")] != -1);
		return call<R>("setHorizontalAlignment", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setScrollOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setScrollOffset")] != -1);
		return call<R>("setScrollOffset", std::forward<Args>(args)...);
	}

};

#endif
