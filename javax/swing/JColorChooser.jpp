#ifndef javax_swing_JColorChooser_HPP
#define javax_swing_JColorChooser_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JColorChooser : public jObject<::javax::swing::JColorChooser, ::javax::swing::JComponent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JColorChooser";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("CHOOSER_PANELS_PROPERTY"), //
		jField<::java::lang::String>("PREVIEW_PANEL_PROPERTY"), //
		jField<::java::lang::String>("SELECTION_MODEL_PROPERTY"), //
	};

	template<typename F = ::java::lang::String>
	static auto CHOOSER_PANELS_PROPERTY() {
		static_assert(field_signatures[jField<F>("CHOOSER_PANELS_PROPERTY")] != -1);
		return sat<F>("CHOOSER_PANELS_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto PREVIEW_PANEL_PROPERTY() {
		static_assert(field_signatures[jField<F>("PREVIEW_PANEL_PROPERTY")] != -1);
		return sat<F>("PREVIEW_PANEL_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto SELECTION_MODEL_PROPERTY() {
		static_assert(field_signatures[jField<F>("SELECTION_MODEL_PROPERTY")] != -1);
		return sat<F>("SELECTION_MODEL_PROPERTY");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::awt::Color)>(), //
		jConstructor<::jvoid(::javax::swing::colorchooser::ColorSelectionModel)>(), //
		jMethod<::jvoid(::javax::swing::colorchooser::AbstractColorChooserPanel)>("addChooserPanel"), //
		jMethod<::javax::swing::JDialog(::java::awt::Component, ::java::lang::String, ::jboolean, ::javax::swing::JColorChooser, ::java::awt::event::ActionListener, ::java::awt::event::ActionListener)>("createDialog"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::javax::swing::colorchooser::AbstractColorChooserPanel *()>("getChooserPanels"), //
		jMethod<::java::awt::Color()>("getColor"), //
		jMethod<::jboolean()>("getDragEnabled"), //
		jMethod<::javax::swing::JComponent()>("getPreviewPanel"), //
		jMethod<::javax::swing::colorchooser::ColorSelectionModel()>("getSelectionModel"), //
		jMethod<::javax::swing::plaf::ColorChooserUI()>("getUI"), //
		jMethod<::java::lang::String()>("getUIClassID"), //
		jMethod<::javax::swing::colorchooser::AbstractColorChooserPanel(::javax::swing::colorchooser::AbstractColorChooserPanel)>("removeChooserPanel"), //
		jMethod<::jvoid(::javax::swing::colorchooser::AbstractColorChooserPanel *)>("setChooserPanels"), //
		jMethod<::jvoid(::jint)>("setColor"), //
		jMethod<::jvoid(::jint, ::jint, ::jint)>("setColor"), //
		jMethod<::jvoid(::java::awt::Color)>("setColor"), //
		jMethod<::jvoid(::jboolean)>("setDragEnabled"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("setPreviewPanel"), //
		jMethod<::jvoid(::javax::swing::colorchooser::ColorSelectionModel)>("setSelectionModel"), //
		jMethod<::jvoid(::javax::swing::plaf::ColorChooserUI)>("setUI"), //
		jMethod<::java::awt::Color(::java::awt::Component, ::java::lang::String, ::java::awt::Color)>("showDialog"), //
		jMethod<::jvoid()>("updateUI"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addChooserPanel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addChooserPanel")] != -1);
		return call<R>("addChooserPanel", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JDialog, typename... Args>
	static auto createDialog(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createDialog")] != -1);
		return scall<R>("createDialog", forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::colorchooser::AbstractColorChooserPanel *, typename... Args>
	auto getChooserPanels(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getChooserPanels")] != -1);
		return call<R>("getChooserPanels", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColor")] != -1);
		return call<R>("getColor", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getDragEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDragEnabled")] != -1);
		return call<R>("getDragEnabled", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JComponent, typename... Args>
	auto getPreviewPanel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreviewPanel")] != -1);
		return call<R>("getPreviewPanel", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::colorchooser::ColorSelectionModel, typename... Args>
	auto getSelectionModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSelectionModel")] != -1);
		return call<R>("getSelectionModel", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ColorChooserUI, typename... Args>
	auto getUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUI")] != -1);
		return call<R>("getUI", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUIClassID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUIClassID")] != -1);
		return call<R>("getUIClassID", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::colorchooser::AbstractColorChooserPanel, typename... Args>
	auto removeChooserPanel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeChooserPanel")] != -1);
		return call<R>("removeChooserPanel", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setChooserPanels(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setChooserPanels")] != -1);
		return call<R>("setChooserPanels", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setColor")] != -1);
		return call<R>("setColor", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDragEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDragEnabled")] != -1);
		return call<R>("setDragEnabled", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPreviewPanel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPreviewPanel")] != -1);
		return call<R>("setPreviewPanel", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSelectionModel")] != -1);
		return call<R>("setSelectionModel", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setUI")] != -1);
		return call<R>("setUI", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	static auto showDialog(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("showDialog")] != -1);
		return scall<R>("showDialog", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("updateUI")] != -1);
		return call<R>("updateUI", forward<Args>(args)...);
	}

};

#endif
