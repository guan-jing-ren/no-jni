#ifndef javax_swing_BorderFactory_HPP
#define javax_swing_BorderFactory_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::BorderFactory : public jObject<::javax::swing::BorderFactory, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "BorderFactory";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::javax::swing::border::Border(::jint)>("createBevelBorder"), //
		jMethod<::javax::swing::border::Border(::jint, ::java::awt::Color, ::java::awt::Color)>("createBevelBorder"), //
		jMethod<::javax::swing::border::Border(::jint, ::java::awt::Color, ::java::awt::Color, ::java::awt::Color, ::java::awt::Color)>("createBevelBorder"), //
		jMethod<::javax::swing::border::CompoundBorder()>("createCompoundBorder"), //
		jMethod<::javax::swing::border::CompoundBorder(::javax::swing::border::Border, ::javax::swing::border::Border)>("createCompoundBorder"), //
		jMethod<::javax::swing::border::Border(::java::awt::Paint)>("createDashedBorder"), //
		jMethod<::javax::swing::border::Border(::java::awt::Paint, ::jfloat, ::jfloat)>("createDashedBorder"), //
		jMethod<::javax::swing::border::Border(::java::awt::Paint, ::jfloat, ::jfloat, ::jfloat, ::jboolean)>("createDashedBorder"), //
		jMethod<::javax::swing::border::Border()>("createEmptyBorder"), //
		jMethod<::javax::swing::border::Border(::jint, ::jint, ::jint, ::jint)>("createEmptyBorder"), //
		jMethod<::javax::swing::border::Border()>("createEtchedBorder"), //
		jMethod<::javax::swing::border::Border(::jint)>("createEtchedBorder"), //
		jMethod<::javax::swing::border::Border(::jint, ::java::awt::Color, ::java::awt::Color)>("createEtchedBorder"), //
		jMethod<::javax::swing::border::Border(::java::awt::Color, ::java::awt::Color)>("createEtchedBorder"), //
		jMethod<::javax::swing::border::Border(::java::awt::Color)>("createLineBorder"), //
		jMethod<::javax::swing::border::Border(::java::awt::Color, ::jint)>("createLineBorder"), //
		jMethod<::javax::swing::border::Border(::java::awt::Color, ::jint, ::jboolean)>("createLineBorder"), //
		jMethod<::javax::swing::border::Border()>("createLoweredBevelBorder"), //
		jMethod<::javax::swing::border::Border()>("createLoweredSoftBevelBorder"), //
		jMethod<::javax::swing::border::MatteBorder(::jint, ::jint, ::jint, ::jint, ::java::awt::Color)>("createMatteBorder"), //
		jMethod<::javax::swing::border::MatteBorder(::jint, ::jint, ::jint, ::jint, ::javax::swing::Icon)>("createMatteBorder"), //
		jMethod<::javax::swing::border::Border()>("createRaisedBevelBorder"), //
		jMethod<::javax::swing::border::Border()>("createRaisedSoftBevelBorder"), //
		jMethod<::javax::swing::border::Border(::jint)>("createSoftBevelBorder"), //
		jMethod<::javax::swing::border::Border(::jint, ::java::awt::Color, ::java::awt::Color)>("createSoftBevelBorder"), //
		jMethod<::javax::swing::border::Border(::jint, ::java::awt::Color, ::java::awt::Color, ::java::awt::Color, ::java::awt::Color)>("createSoftBevelBorder"), //
		jMethod<::javax::swing::border::Border(::java::awt::BasicStroke)>("createStrokeBorder"), //
		jMethod<::javax::swing::border::Border(::java::awt::BasicStroke, ::java::awt::Paint)>("createStrokeBorder"), //
		jMethod<::javax::swing::border::TitledBorder(::java::lang::String)>("createTitledBorder"), //
		jMethod<::javax::swing::border::TitledBorder(::javax::swing::border::Border)>("createTitledBorder"), //
		jMethod<::javax::swing::border::TitledBorder(::javax::swing::border::Border, ::java::lang::String)>("createTitledBorder"), //
		jMethod<::javax::swing::border::TitledBorder(::javax::swing::border::Border, ::java::lang::String, ::jint, ::jint)>("createTitledBorder"), //
		jMethod<::javax::swing::border::TitledBorder(::javax::swing::border::Border, ::java::lang::String, ::jint, ::jint, ::java::awt::Font)>("createTitledBorder"), //
		jMethod<::javax::swing::border::TitledBorder(::javax::swing::border::Border, ::java::lang::String, ::jint, ::jint, ::java::awt::Font, ::java::awt::Color)>("createTitledBorder"), //
	};

	template<typename R = ::javax::swing::border::Border, typename... Args>
	static auto createBevelBorder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createBevelBorder")] != -1);
		return scall<R>("createBevelBorder", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::border::CompoundBorder, typename... Args>
	static auto createCompoundBorder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createCompoundBorder")] != -1);
		return scall<R>("createCompoundBorder", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::border::Border, typename... Args>
	static auto createDashedBorder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createDashedBorder")] != -1);
		return scall<R>("createDashedBorder", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::border::Border, typename... Args>
	static auto createEmptyBorder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createEmptyBorder")] != -1);
		return scall<R>("createEmptyBorder", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::border::Border, typename... Args>
	static auto createEtchedBorder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createEtchedBorder")] != -1);
		return scall<R>("createEtchedBorder", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::border::Border, typename... Args>
	static auto createLineBorder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createLineBorder")] != -1);
		return scall<R>("createLineBorder", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::border::Border, typename... Args>
	static auto createLoweredBevelBorder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createLoweredBevelBorder")] != -1);
		return scall<R>("createLoweredBevelBorder", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::border::Border, typename... Args>
	static auto createLoweredSoftBevelBorder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createLoweredSoftBevelBorder")] != -1);
		return scall<R>("createLoweredSoftBevelBorder", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::border::MatteBorder, typename... Args>
	static auto createMatteBorder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createMatteBorder")] != -1);
		return scall<R>("createMatteBorder", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::border::Border, typename... Args>
	static auto createRaisedBevelBorder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createRaisedBevelBorder")] != -1);
		return scall<R>("createRaisedBevelBorder", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::border::Border, typename... Args>
	static auto createRaisedSoftBevelBorder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createRaisedSoftBevelBorder")] != -1);
		return scall<R>("createRaisedSoftBevelBorder", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::border::Border, typename... Args>
	static auto createSoftBevelBorder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createSoftBevelBorder")] != -1);
		return scall<R>("createSoftBevelBorder", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::border::Border, typename... Args>
	static auto createStrokeBorder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createStrokeBorder")] != -1);
		return scall<R>("createStrokeBorder", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::border::TitledBorder, typename... Args>
	static auto createTitledBorder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createTitledBorder")] != -1);
		return scall<R>("createTitledBorder", forward<Args>(args)...);
	}

};

#endif
