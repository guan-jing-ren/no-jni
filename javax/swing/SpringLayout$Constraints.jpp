#ifndef javax_swing_SpringLayout$Constraints_HPP
#define javax_swing_SpringLayout$Constraints_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::SpringLayout$Constraints : public jObject<::javax::swing::SpringLayout$Constraints, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "SpringLayout$Constraints";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::awt::Component)>(), //
		jConstructor<::jvoid(::javax::swing::Spring, ::javax::swing::Spring)>(), //
		jConstructor<::jvoid(::javax::swing::Spring, ::javax::swing::Spring, ::javax::swing::Spring, ::javax::swing::Spring)>(), //
		jMethod<::javax::swing::Spring(::java::lang::String)>("getConstraint"), //
		jMethod<::javax::swing::Spring()>("getHeight"), //
		jMethod<::javax::swing::Spring()>("getWidth"), //
		jMethod<::javax::swing::Spring()>("getX"), //
		jMethod<::javax::swing::Spring()>("getY"), //
		jMethod<::jvoid(::java::lang::String, ::javax::swing::Spring)>("setConstraint"), //
		jMethod<::jvoid(::javax::swing::Spring)>("setHeight"), //
		jMethod<::jvoid(::javax::swing::Spring)>("setWidth"), //
		jMethod<::jvoid(::javax::swing::Spring)>("setX"), //
		jMethod<::jvoid(::javax::swing::Spring)>("setY"), //
	};

	template<typename R = ::javax::swing::Spring, typename... Args>
	auto getConstraint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getConstraint")] != -1);
		return call<R>("getConstraint", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Spring, typename... Args>
	auto getHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHeight")] != -1);
		return call<R>("getHeight", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Spring, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Spring, typename... Args>
	auto getX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getX")] != -1);
		return call<R>("getX", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Spring, typename... Args>
	auto getY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getY")] != -1);
		return call<R>("getY", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setConstraint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setConstraint")] != -1);
		return call<R>("setConstraint", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setHeight")] != -1);
		return call<R>("setHeight", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setWidth")] != -1);
		return call<R>("setWidth", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setX")] != -1);
		return call<R>("setX", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setY")] != -1);
		return call<R>("setY", forward<Args>(args)...);
	}

};

#endif
