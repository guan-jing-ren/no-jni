#ifndef javax_swing_ComboBoxEditor_HPP
#define javax_swing_ComboBoxEditor_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::ComboBoxEditor : public jObject<::javax::swing::ComboBoxEditor, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "ComboBoxEditor";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::awt::event::ActionListener)>("addActionListener"), //
		jMethod<::java::awt::Component()>("getEditorComponent"), //
		jMethod<::java::lang::Object()>("getItem"), //
		jMethod<::jvoid(::java::awt::event::ActionListener)>("removeActionListener"), //
		jMethod<::jvoid()>("selectAll"), //
		jMethod<::jvoid(::java::lang::Object)>("setItem"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addActionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addActionListener")] != -1);
		return call<R>("addActionListener", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getEditorComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getEditorComponent")] != -1);
		return call<R>("getEditorComponent", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getItem")] != -1);
		return call<R>("getItem", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeActionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeActionListener")] != -1);
		return call<R>("removeActionListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto selectAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("selectAll")] != -1);
		return call<R>("selectAll", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setItem")] != -1);
		return call<R>("setItem", forward<Args>(args)...);
	}

};

#endif
