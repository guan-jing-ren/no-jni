#ifndef javax_swing_event_TreeModelListener_HPP
#define javax_swing_event_TreeModelListener_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::event::TreeModelListener : public jObject<::javax::swing::event::TreeModelListener, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_event / "TreeModelListener";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::javax::swing::event::TreeModelEvent)>("treeNodesChanged"), //
		jMethod<::jvoid(::javax::swing::event::TreeModelEvent)>("treeNodesInserted"), //
		jMethod<::jvoid(::javax::swing::event::TreeModelEvent)>("treeNodesRemoved"), //
		jMethod<::jvoid(::javax::swing::event::TreeModelEvent)>("treeStructureChanged"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto treeNodesChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("treeNodesChanged")] != -1);
		return call<R>("treeNodesChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto treeNodesInserted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("treeNodesInserted")] != -1);
		return call<R>("treeNodesInserted", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto treeNodesRemoved(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("treeNodesRemoved")] != -1);
		return call<R>("treeNodesRemoved", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto treeStructureChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("treeStructureChanged")] != -1);
		return call<R>("treeStructureChanged", std::forward<Args>(args)...);
	}

};

#endif
