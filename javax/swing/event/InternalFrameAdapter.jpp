#ifndef javax_swing_event_InternalFrameAdapter_HPP
#define javax_swing_event_InternalFrameAdapter_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::event::InternalFrameAdapter : public jObject<::javax::swing::event::InternalFrameAdapter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_event / "InternalFrameAdapter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::javax::swing::event::InternalFrameEvent)>("internalFrameActivated"), //
		jMethod<::jvoid(::javax::swing::event::InternalFrameEvent)>("internalFrameClosed"), //
		jMethod<::jvoid(::javax::swing::event::InternalFrameEvent)>("internalFrameClosing"), //
		jMethod<::jvoid(::javax::swing::event::InternalFrameEvent)>("internalFrameDeactivated"), //
		jMethod<::jvoid(::javax::swing::event::InternalFrameEvent)>("internalFrameDeiconified"), //
		jMethod<::jvoid(::javax::swing::event::InternalFrameEvent)>("internalFrameIconified"), //
		jMethod<::jvoid(::javax::swing::event::InternalFrameEvent)>("internalFrameOpened"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto internalFrameActivated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("internalFrameActivated")] != -1);
		return call<R>("internalFrameActivated", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto internalFrameClosed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("internalFrameClosed")] != -1);
		return call<R>("internalFrameClosed", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto internalFrameClosing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("internalFrameClosing")] != -1);
		return call<R>("internalFrameClosing", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto internalFrameDeactivated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("internalFrameDeactivated")] != -1);
		return call<R>("internalFrameDeactivated", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto internalFrameDeiconified(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("internalFrameDeiconified")] != -1);
		return call<R>("internalFrameDeiconified", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto internalFrameIconified(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("internalFrameIconified")] != -1);
		return call<R>("internalFrameIconified", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto internalFrameOpened(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("internalFrameOpened")] != -1);
		return call<R>("internalFrameOpened", std::forward<Args>(args)...);
	}

};

#endif
