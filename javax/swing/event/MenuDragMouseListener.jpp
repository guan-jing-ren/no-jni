#ifndef javax_swing_event_MenuDragMouseListener_HPP
#define javax_swing_event_MenuDragMouseListener_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::event::MenuDragMouseListener : public jObject<::javax::swing::event::MenuDragMouseListener, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_event / "MenuDragMouseListener";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::javax::swing::event::MenuDragMouseEvent)>("menuDragMouseDragged"), //
		jMethod<::jvoid(::javax::swing::event::MenuDragMouseEvent)>("menuDragMouseEntered"), //
		jMethod<::jvoid(::javax::swing::event::MenuDragMouseEvent)>("menuDragMouseExited"), //
		jMethod<::jvoid(::javax::swing::event::MenuDragMouseEvent)>("menuDragMouseReleased"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto menuDragMouseDragged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("menuDragMouseDragged")] != -1);
		return call<R>("menuDragMouseDragged", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto menuDragMouseEntered(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("menuDragMouseEntered")] != -1);
		return call<R>("menuDragMouseEntered", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto menuDragMouseExited(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("menuDragMouseExited")] != -1);
		return call<R>("menuDragMouseExited", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto menuDragMouseReleased(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("menuDragMouseReleased")] != -1);
		return call<R>("menuDragMouseReleased", forward<Args>(args)...);
	}

};

#endif
