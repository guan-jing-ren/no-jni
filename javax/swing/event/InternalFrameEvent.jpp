#ifndef javax_swing_event_InternalFrameEvent_HPP
#define javax_swing_event_InternalFrameEvent_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::event::InternalFrameEvent : public jObject<::javax::swing::event::InternalFrameEvent, ::java::awt::AWTEvent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_event / "InternalFrameEvent";

	constexpr static Enume field_signatures{
		jField<::jint>("INTERNAL_FRAME_ACTIVATED"), //
		jField<::jint>("INTERNAL_FRAME_CLOSED"), //
		jField<::jint>("INTERNAL_FRAME_CLOSING"), //
		jField<::jint>("INTERNAL_FRAME_DEACTIVATED"), //
		jField<::jint>("INTERNAL_FRAME_DEICONIFIED"), //
		jField<::jint>("INTERNAL_FRAME_FIRST"), //
		jField<::jint>("INTERNAL_FRAME_ICONIFIED"), //
		jField<::jint>("INTERNAL_FRAME_LAST"), //
		jField<::jint>("INTERNAL_FRAME_OPENED"), //
	};

	template<typename F = ::jint>
	static auto INTERNAL_FRAME_ACTIVATED() {
		static_assert(field_signatures[jField<F>("INTERNAL_FRAME_ACTIVATED")] != -1);
		return sat<F>("INTERNAL_FRAME_ACTIVATED");
	}

	template<typename F = ::jint>
	static auto INTERNAL_FRAME_CLOSED() {
		static_assert(field_signatures[jField<F>("INTERNAL_FRAME_CLOSED")] != -1);
		return sat<F>("INTERNAL_FRAME_CLOSED");
	}

	template<typename F = ::jint>
	static auto INTERNAL_FRAME_CLOSING() {
		static_assert(field_signatures[jField<F>("INTERNAL_FRAME_CLOSING")] != -1);
		return sat<F>("INTERNAL_FRAME_CLOSING");
	}

	template<typename F = ::jint>
	static auto INTERNAL_FRAME_DEACTIVATED() {
		static_assert(field_signatures[jField<F>("INTERNAL_FRAME_DEACTIVATED")] != -1);
		return sat<F>("INTERNAL_FRAME_DEACTIVATED");
	}

	template<typename F = ::jint>
	static auto INTERNAL_FRAME_DEICONIFIED() {
		static_assert(field_signatures[jField<F>("INTERNAL_FRAME_DEICONIFIED")] != -1);
		return sat<F>("INTERNAL_FRAME_DEICONIFIED");
	}

	template<typename F = ::jint>
	static auto INTERNAL_FRAME_FIRST() {
		static_assert(field_signatures[jField<F>("INTERNAL_FRAME_FIRST")] != -1);
		return sat<F>("INTERNAL_FRAME_FIRST");
	}

	template<typename F = ::jint>
	static auto INTERNAL_FRAME_ICONIFIED() {
		static_assert(field_signatures[jField<F>("INTERNAL_FRAME_ICONIFIED")] != -1);
		return sat<F>("INTERNAL_FRAME_ICONIFIED");
	}

	template<typename F = ::jint>
	static auto INTERNAL_FRAME_LAST() {
		static_assert(field_signatures[jField<F>("INTERNAL_FRAME_LAST")] != -1);
		return sat<F>("INTERNAL_FRAME_LAST");
	}

	template<typename F = ::jint>
	static auto INTERNAL_FRAME_OPENED() {
		static_assert(field_signatures[jField<F>("INTERNAL_FRAME_OPENED")] != -1);
		return sat<F>("INTERNAL_FRAME_OPENED");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::JInternalFrame, ::jint)>(), //
		jMethod<::javax::swing::JInternalFrame()>("getInternalFrame"), //
		jMethod<::java::lang::String()>("paramString"), //
	};

	template<typename R = ::javax::swing::JInternalFrame, typename... Args>
	auto getInternalFrame(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInternalFrame")] != -1);
		return call<R>("getInternalFrame", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto paramString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paramString")] != -1);
		return call<R>("paramString", forward<Args>(args)...);
	}

};

#endif
