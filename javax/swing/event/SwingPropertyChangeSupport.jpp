#ifndef javax_swing_event_SwingPropertyChangeSupport_HPP
#define javax_swing_event_SwingPropertyChangeSupport_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::event::SwingPropertyChangeSupport : public jObject<::javax::swing::event::SwingPropertyChangeSupport, ::java::beans::PropertyChangeSupport> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_event / "SwingPropertyChangeSupport";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::Object)>(), //
		jConstructor<::jvoid(::java::lang::Object, ::jboolean)>(), //
		jMethod<::jvoid(::java::beans::PropertyChangeEvent)>("firePropertyChange"), //
		jMethod<::jboolean()>("isNotifyOnEDT"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto firePropertyChange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("firePropertyChange")] != -1);
		return call<R>("firePropertyChange", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isNotifyOnEDT(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isNotifyOnEDT")] != -1);
		return call<R>("isNotifyOnEDT", std::forward<Args>(args)...);
	}

};

#endif
