#ifndef javax_swing_event_RowSorterEvent_HPP
#define javax_swing_event_RowSorterEvent_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::event::RowSorterEvent : public jObject<::javax::swing::event::RowSorterEvent, ::java::util::EventObject> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_event / "RowSorterEvent";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::RowSorter)>(), //
		jConstructor<::jvoid(::javax::swing::RowSorter, ::javax::swing::event::RowSorterEvent$Type, ::jint *)>(), //
		jMethod<::jint(::jint)>("convertPreviousRowIndexToModel"), //
		jMethod<::jint()>("getPreviousRowCount"), //
		jMethod<::java::lang::Object()>("getSource"), //
		jMethod<::javax::swing::RowSorter()>("getSource"), //
		jMethod<::javax::swing::event::RowSorterEvent$Type()>("getType"), //
	};

	template<typename R = ::jint, typename... Args>
	auto convertPreviousRowIndexToModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("convertPreviousRowIndexToModel")] != -1);
		return call<R>("convertPreviousRowIndexToModel", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPreviousRowCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreviousRowCount")] != -1);
		return call<R>("getPreviousRowCount", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getSource(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSource")] != -1);
		return call<R>("getSource", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::event::RowSorterEvent$Type, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

};

#endif
