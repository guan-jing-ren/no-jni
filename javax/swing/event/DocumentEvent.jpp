#ifndef javax_swing_event_DocumentEvent_HPP
#define javax_swing_event_DocumentEvent_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::event::DocumentEvent : public jObject<::javax::swing::event::DocumentEvent, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_event / "DocumentEvent";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::javax::swing::event::DocumentEvent$ElementChange(::javax::swing::text::Element)>("getChange"), //
		jMethod<::javax::swing::text::Document()>("getDocument"), //
		jMethod<::jint()>("getLength"), //
		jMethod<::jint()>("getOffset"), //
		jMethod<::javax::swing::event::DocumentEvent$EventType()>("getType"), //
	};

	template<typename R = ::javax::swing::event::DocumentEvent$ElementChange, typename... Args>
	auto getChange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getChange")] != -1);
		return call<R>("getChange", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Document, typename... Args>
	auto getDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDocument")] != -1);
		return call<R>("getDocument", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLength")] != -1);
		return call<R>("getLength", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getOffset")] != -1);
		return call<R>("getOffset", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::event::DocumentEvent$EventType, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", forward<Args>(args)...);
	}

};

#endif
