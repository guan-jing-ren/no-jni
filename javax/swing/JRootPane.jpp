#ifndef javax_swing_JRootPane_HPP
#define javax_swing_JRootPane_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JRootPane : public jObject<::javax::swing::JRootPane, ::javax::swing::JComponent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JRootPane";

	constexpr static Enume field_signatures{
		jField<::jint>("COLOR_CHOOSER_DIALOG"), //
		jField<::jint>("ERROR_DIALOG"), //
		jField<::jint>("FILE_CHOOSER_DIALOG"), //
		jField<::jint>("FRAME"), //
		jField<::jint>("INFORMATION_DIALOG"), //
		jField<::jint>("NONE"), //
		jField<::jint>("PLAIN_DIALOG"), //
		jField<::jint>("QUESTION_DIALOG"), //
		jField<::jint>("WARNING_DIALOG"), //
	};

	template<typename F = ::jint>
	static auto COLOR_CHOOSER_DIALOG() {
		static_assert(field_signatures[jField<F>("COLOR_CHOOSER_DIALOG")] != -1);
		return sat<F>("COLOR_CHOOSER_DIALOG");
	}

	template<typename F = ::jint>
	static auto ERROR_DIALOG() {
		static_assert(field_signatures[jField<F>("ERROR_DIALOG")] != -1);
		return sat<F>("ERROR_DIALOG");
	}

	template<typename F = ::jint>
	static auto FILE_CHOOSER_DIALOG() {
		static_assert(field_signatures[jField<F>("FILE_CHOOSER_DIALOG")] != -1);
		return sat<F>("FILE_CHOOSER_DIALOG");
	}

	template<typename F = ::jint>
	static auto FRAME() {
		static_assert(field_signatures[jField<F>("FRAME")] != -1);
		return sat<F>("FRAME");
	}

	template<typename F = ::jint>
	static auto INFORMATION_DIALOG() {
		static_assert(field_signatures[jField<F>("INFORMATION_DIALOG")] != -1);
		return sat<F>("INFORMATION_DIALOG");
	}

	template<typename F = ::jint>
	static auto NONE() {
		static_assert(field_signatures[jField<F>("NONE")] != -1);
		return sat<F>("NONE");
	}

	template<typename F = ::jint>
	static auto PLAIN_DIALOG() {
		static_assert(field_signatures[jField<F>("PLAIN_DIALOG")] != -1);
		return sat<F>("PLAIN_DIALOG");
	}

	template<typename F = ::jint>
	static auto QUESTION_DIALOG() {
		static_assert(field_signatures[jField<F>("QUESTION_DIALOG")] != -1);
		return sat<F>("QUESTION_DIALOG");
	}

	template<typename F = ::jint>
	static auto WARNING_DIALOG() {
		static_assert(field_signatures[jField<F>("WARNING_DIALOG")] != -1);
		return sat<F>("WARNING_DIALOG");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid()>("addNotify"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::java::awt::Container()>("getContentPane"), //
		jMethod<::javax::swing::JButton()>("getDefaultButton"), //
		jMethod<::java::awt::Component()>("getGlassPane"), //
		jMethod<::javax::swing::JMenuBar()>("getJMenuBar"), //
		jMethod<::javax::swing::JLayeredPane()>("getLayeredPane"), //
		jMethod<::javax::swing::JMenuBar()>("getMenuBar"), //
		jMethod<::javax::swing::plaf::RootPaneUI()>("getUI"), //
		jMethod<::java::lang::String()>("getUIClassID"), //
		jMethod<::jint()>("getWindowDecorationStyle"), //
		jMethod<::jboolean()>("isOptimizedDrawingEnabled"), //
		jMethod<::jboolean()>("isValidateRoot"), //
		jMethod<::jvoid()>("removeNotify"), //
		jMethod<::jvoid(::java::awt::Container)>("setContentPane"), //
		jMethod<::jvoid(::javax::swing::JButton)>("setDefaultButton"), //
		jMethod<::jvoid(::jboolean)>("setDoubleBuffered"), //
		jMethod<::jvoid(::java::awt::Component)>("setGlassPane"), //
		jMethod<::jvoid(::javax::swing::JMenuBar)>("setJMenuBar"), //
		jMethod<::jvoid(::javax::swing::JLayeredPane)>("setLayeredPane"), //
		jMethod<::jvoid(::javax::swing::JMenuBar)>("setMenuBar"), //
		jMethod<::jvoid(::javax::swing::plaf::RootPaneUI)>("setUI"), //
		jMethod<::jvoid(::jint)>("setWindowDecorationStyle"), //
		jMethod<::jvoid()>("updateUI"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addNotify")] != -1);
		return call<R>("addNotify", forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Container, typename... Args>
	auto getContentPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getContentPane")] != -1);
		return call<R>("getContentPane", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JButton, typename... Args>
	auto getDefaultButton(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDefaultButton")] != -1);
		return call<R>("getDefaultButton", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getGlassPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getGlassPane")] != -1);
		return call<R>("getGlassPane", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JMenuBar, typename... Args>
	auto getJMenuBar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getJMenuBar")] != -1);
		return call<R>("getJMenuBar", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JLayeredPane, typename... Args>
	auto getLayeredPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLayeredPane")] != -1);
		return call<R>("getLayeredPane", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JMenuBar, typename... Args>
	auto getMenuBar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMenuBar")] != -1);
		return call<R>("getMenuBar", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::RootPaneUI, typename... Args>
	auto getUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUI")] != -1);
		return call<R>("getUI", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUIClassID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUIClassID")] != -1);
		return call<R>("getUIClassID", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWindowDecorationStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getWindowDecorationStyle")] != -1);
		return call<R>("getWindowDecorationStyle", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isOptimizedDrawingEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isOptimizedDrawingEnabled")] != -1);
		return call<R>("isOptimizedDrawingEnabled", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isValidateRoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isValidateRoot")] != -1);
		return call<R>("isValidateRoot", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeNotify")] != -1);
		return call<R>("removeNotify", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setContentPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setContentPane")] != -1);
		return call<R>("setContentPane", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDefaultButton(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDefaultButton")] != -1);
		return call<R>("setDefaultButton", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDoubleBuffered(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDoubleBuffered")] != -1);
		return call<R>("setDoubleBuffered", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGlassPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setGlassPane")] != -1);
		return call<R>("setGlassPane", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setJMenuBar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setJMenuBar")] != -1);
		return call<R>("setJMenuBar", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLayeredPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLayeredPane")] != -1);
		return call<R>("setLayeredPane", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMenuBar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMenuBar")] != -1);
		return call<R>("setMenuBar", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setUI")] != -1);
		return call<R>("setUI", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWindowDecorationStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setWindowDecorationStyle")] != -1);
		return call<R>("setWindowDecorationStyle", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("updateUI")] != -1);
		return call<R>("updateUI", forward<Args>(args)...);
	}

};

#endif
