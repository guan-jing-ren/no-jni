#ifndef javax_swing_JEditorPane_HPP
#define javax_swing_JEditorPane_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JEditorPane : public jObject<::javax::swing::JEditorPane, ::javax::swing::text::JTextComponent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JEditorPane";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("HONOR_DISPLAY_PROPERTIES"), //
		jField<::java::lang::String>("W3C_LENGTH_UNITS"), //
	};

	template<typename F = ::java::lang::String>
	static auto HONOR_DISPLAY_PROPERTIES() {
		static_assert(field_signatures[jField<F>("HONOR_DISPLAY_PROPERTIES")] != -1);
		return sat<F>("HONOR_DISPLAY_PROPERTIES");
	}

	template<typename F = ::java::lang::String>
	static auto W3C_LENGTH_UNITS() {
		static_assert(field_signatures[jField<F>("W3C_LENGTH_UNITS")] != -1);
		return sat<F>("W3C_LENGTH_UNITS");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String)>(), //
		jConstructor<::jvoid(::java::net::URL)>(), //
		jMethod<::jvoid(::javax::swing::event::HyperlinkListener)>("addHyperlinkListener"), //
		jMethod<::javax::swing::text::EditorKit(::java::lang::String)>("createEditorKitForContentType"), //
		jMethod<::jvoid(::javax::swing::event::HyperlinkEvent)>("fireHyperlinkUpdate"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::java::lang::String()>("getContentType"), //
		jMethod<::javax::swing::text::EditorKit()>("getEditorKit"), //
		jMethod<::java::lang::String(::java::lang::String)>("getEditorKitClassNameForContentType"), //
		jMethod<::javax::swing::text::EditorKit(::java::lang::String)>("getEditorKitForContentType"), //
		jMethod<::javax::swing::event::HyperlinkListener *()>("getHyperlinkListeners"), //
		jMethod<::java::net::URL()>("getPage"), //
		jMethod<::java::awt::Dimension()>("getPreferredSize"), //
		jMethod<::jboolean()>("getScrollableTracksViewportHeight"), //
		jMethod<::jboolean()>("getScrollableTracksViewportWidth"), //
		jMethod<::java::lang::String()>("getText"), //
		jMethod<::java::lang::String()>("getUIClassID"), //
		jMethod<::jvoid(::java::io::InputStream, ::java::lang::Object)>("read"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("registerEditorKitForContentType"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::ClassLoader)>("registerEditorKitForContentType"), //
		jMethod<::jvoid(::javax::swing::event::HyperlinkListener)>("removeHyperlinkListener"), //
		jMethod<::jvoid(::java::lang::String)>("replaceSelection"), //
		jMethod<::jvoid(::java::lang::String)>("scrollToReference"), //
		jMethod<::jvoid(::java::lang::String)>("setContentType"), //
		jMethod<::jvoid(::javax::swing::text::EditorKit)>("setEditorKit"), //
		jMethod<::jvoid(::java::lang::String, ::javax::swing::text::EditorKit)>("setEditorKitForContentType"), //
		jMethod<::jvoid(::java::lang::String)>("setPage"), //
		jMethod<::jvoid(::java::net::URL)>("setPage"), //
		jMethod<::jvoid(::java::lang::String)>("setText"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addHyperlinkListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addHyperlinkListener")] != -1);
		return call<R>("addHyperlinkListener", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::EditorKit, typename... Args>
	static auto createEditorKitForContentType(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createEditorKitForContentType")] != -1);
		return scall<R>("createEditorKitForContentType", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fireHyperlinkUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("fireHyperlinkUpdate")] != -1);
		return call<R>("fireHyperlinkUpdate", forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getContentType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getContentType")] != -1);
		return call<R>("getContentType", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::EditorKit, typename... Args>
	auto getEditorKit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getEditorKit")] != -1);
		return call<R>("getEditorKit", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getEditorKitClassNameForContentType(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getEditorKitClassNameForContentType")] != -1);
		return scall<R>("getEditorKitClassNameForContentType", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::EditorKit, typename... Args>
	auto getEditorKitForContentType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getEditorKitForContentType")] != -1);
		return call<R>("getEditorKitForContentType", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::event::HyperlinkListener *, typename... Args>
	auto getHyperlinkListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHyperlinkListeners")] != -1);
		return call<R>("getHyperlinkListeners", forward<Args>(args)...);
	}

	template<typename R = ::java::net::URL, typename... Args>
	auto getPage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPage")] != -1);
		return call<R>("getPage", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreferredSize")] != -1);
		return call<R>("getPreferredSize", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getScrollableTracksViewportHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getScrollableTracksViewportHeight")] != -1);
		return call<R>("getScrollableTracksViewportHeight", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getScrollableTracksViewportWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getScrollableTracksViewportWidth")] != -1);
		return call<R>("getScrollableTracksViewportWidth", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getText")] != -1);
		return call<R>("getText", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUIClassID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUIClassID")] != -1);
		return call<R>("getUIClassID", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read")] != -1);
		return call<R>("read", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto registerEditorKitForContentType(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("registerEditorKitForContentType")] != -1);
		return scall<R>("registerEditorKitForContentType", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeHyperlinkListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeHyperlinkListener")] != -1);
		return call<R>("removeHyperlinkListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto replaceSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("replaceSelection")] != -1);
		return call<R>("replaceSelection", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto scrollToReference(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("scrollToReference")] != -1);
		return call<R>("scrollToReference", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setContentType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setContentType")] != -1);
		return call<R>("setContentType", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEditorKit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setEditorKit")] != -1);
		return call<R>("setEditorKit", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEditorKitForContentType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setEditorKitForContentType")] != -1);
		return call<R>("setEditorKitForContentType", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPage")] != -1);
		return call<R>("setPage", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setText")] != -1);
		return call<R>("setText", forward<Args>(args)...);
	}

};

#endif
