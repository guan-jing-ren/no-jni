#ifndef javax_swing_JScrollBar_HPP
#define javax_swing_JScrollBar_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JScrollBar : public jObject<::javax::swing::JScrollBar, ::javax::swing::JComponent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JScrollBar";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint)>(), //
		jConstructor<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint)>(), //
		jMethod<::jvoid(::java::awt::event::AdjustmentListener)>("addAdjustmentListener"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::java::awt::event::AdjustmentListener *()>("getAdjustmentListeners"), //
		jMethod<::jint()>("getBlockIncrement"), //
		jMethod<::jint(::jint)>("getBlockIncrement"), //
		jMethod<::jint()>("getMaximum"), //
		jMethod<::java::awt::Dimension()>("getMaximumSize"), //
		jMethod<::jint()>("getMinimum"), //
		jMethod<::java::awt::Dimension()>("getMinimumSize"), //
		jMethod<::javax::swing::BoundedRangeModel()>("getModel"), //
		jMethod<::jint()>("getOrientation"), //
		jMethod<::javax::swing::plaf::ScrollBarUI()>("getUI"), //
		jMethod<::java::lang::String()>("getUIClassID"), //
		jMethod<::jint()>("getUnitIncrement"), //
		jMethod<::jint(::jint)>("getUnitIncrement"), //
		jMethod<::jint()>("getValue"), //
		jMethod<::jboolean()>("getValueIsAdjusting"), //
		jMethod<::jint()>("getVisibleAmount"), //
		jMethod<::jvoid(::java::awt::event::AdjustmentListener)>("removeAdjustmentListener"), //
		jMethod<::jvoid(::jint)>("setBlockIncrement"), //
		jMethod<::jvoid(::jboolean)>("setEnabled"), //
		jMethod<::jvoid(::jint)>("setMaximum"), //
		jMethod<::jvoid(::jint)>("setMinimum"), //
		jMethod<::jvoid(::javax::swing::BoundedRangeModel)>("setModel"), //
		jMethod<::jvoid(::jint)>("setOrientation"), //
		jMethod<::jvoid(::javax::swing::plaf::ScrollBarUI)>("setUI"), //
		jMethod<::jvoid(::jint)>("setUnitIncrement"), //
		jMethod<::jvoid(::jint)>("setValue"), //
		jMethod<::jvoid(::jboolean)>("setValueIsAdjusting"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("setValues"), //
		jMethod<::jvoid(::jint)>("setVisibleAmount"), //
		jMethod<::jvoid()>("updateUI"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addAdjustmentListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addAdjustmentListener")] != -1);
		return call<R>("addAdjustmentListener", forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::AdjustmentListener *, typename... Args>
	auto getAdjustmentListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAdjustmentListeners")] != -1);
		return call<R>("getAdjustmentListeners", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBlockIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBlockIncrement")] != -1);
		return call<R>("getBlockIncrement", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaximum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaximum")] != -1);
		return call<R>("getMaximum", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMaximumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaximumSize")] != -1);
		return call<R>("getMaximumSize", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinimum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinimum")] != -1);
		return call<R>("getMinimum", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinimumSize")] != -1);
		return call<R>("getMinimumSize", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::BoundedRangeModel, typename... Args>
	auto getModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getModel")] != -1);
		return call<R>("getModel", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getOrientation")] != -1);
		return call<R>("getOrientation", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ScrollBarUI, typename... Args>
	auto getUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUI")] != -1);
		return call<R>("getUI", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUIClassID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUIClassID")] != -1);
		return call<R>("getUIClassID", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getUnitIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUnitIncrement")] != -1);
		return call<R>("getUnitIncrement", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getValueIsAdjusting(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getValueIsAdjusting")] != -1);
		return call<R>("getValueIsAdjusting", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getVisibleAmount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getVisibleAmount")] != -1);
		return call<R>("getVisibleAmount", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAdjustmentListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeAdjustmentListener")] != -1);
		return call<R>("removeAdjustmentListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBlockIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBlockIncrement")] != -1);
		return call<R>("setBlockIncrement", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setEnabled")] != -1);
		return call<R>("setEnabled", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaximum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMaximum")] != -1);
		return call<R>("setMaximum", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMinimum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMinimum")] != -1);
		return call<R>("setMinimum", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setModel")] != -1);
		return call<R>("setModel", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setOrientation")] != -1);
		return call<R>("setOrientation", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setUI")] != -1);
		return call<R>("setUI", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUnitIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setUnitIncrement")] != -1);
		return call<R>("setUnitIncrement", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setValue")] != -1);
		return call<R>("setValue", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValueIsAdjusting(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setValueIsAdjusting")] != -1);
		return call<R>("setValueIsAdjusting", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValues(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setValues")] != -1);
		return call<R>("setValues", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVisibleAmount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setVisibleAmount")] != -1);
		return call<R>("setVisibleAmount", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("updateUI")] != -1);
		return call<R>("updateUI", forward<Args>(args)...);
	}

};

#endif
