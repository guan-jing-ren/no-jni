#ifndef javax_swing_JInternalFrame_HPP
#define javax_swing_JInternalFrame_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JInternalFrame : public jObject<::javax::swing::JInternalFrame, ::javax::swing::JComponent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JInternalFrame";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("CONTENT_PANE_PROPERTY"), //
		jField<::jint>("DISPOSE_ON_CLOSE"), //
		jField<::jint>("DO_NOTHING_ON_CLOSE"), //
		jField<::jint>("EXIT_ON_CLOSE"), //
		jField<::java::lang::String>("FRAME_ICON_PROPERTY"), //
		jField<::java::lang::String>("GLASS_PANE_PROPERTY"), //
		jField<::jint>("HIDE_ON_CLOSE"), //
		jField<::java::lang::String>("IS_CLOSED_PROPERTY"), //
		jField<::java::lang::String>("IS_ICON_PROPERTY"), //
		jField<::java::lang::String>("IS_MAXIMUM_PROPERTY"), //
		jField<::java::lang::String>("IS_SELECTED_PROPERTY"), //
		jField<::java::lang::String>("LAYERED_PANE_PROPERTY"), //
		jField<::java::lang::String>("MENU_BAR_PROPERTY"), //
		jField<::java::lang::String>("ROOT_PANE_PROPERTY"), //
		jField<::java::lang::String>("TITLE_PROPERTY"), //
	};

	template<typename F = ::java::lang::String>
	static auto CONTENT_PANE_PROPERTY() {
		static_assert(field_signatures[jField<F>("CONTENT_PANE_PROPERTY")] != -1);
		return sat<F>("CONTENT_PANE_PROPERTY");
	}

	template<typename F = ::jint>
	static auto DISPOSE_ON_CLOSE() {
		static_assert(field_signatures[jField<F>("DISPOSE_ON_CLOSE")] != -1);
		return sat<F>("DISPOSE_ON_CLOSE");
	}

	template<typename F = ::jint>
	static auto DO_NOTHING_ON_CLOSE() {
		static_assert(field_signatures[jField<F>("DO_NOTHING_ON_CLOSE")] != -1);
		return sat<F>("DO_NOTHING_ON_CLOSE");
	}

	template<typename F = ::jint>
	static auto EXIT_ON_CLOSE() {
		static_assert(field_signatures[jField<F>("EXIT_ON_CLOSE")] != -1);
		return sat<F>("EXIT_ON_CLOSE");
	}

	template<typename F = ::java::lang::String>
	static auto FRAME_ICON_PROPERTY() {
		static_assert(field_signatures[jField<F>("FRAME_ICON_PROPERTY")] != -1);
		return sat<F>("FRAME_ICON_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto GLASS_PANE_PROPERTY() {
		static_assert(field_signatures[jField<F>("GLASS_PANE_PROPERTY")] != -1);
		return sat<F>("GLASS_PANE_PROPERTY");
	}

	template<typename F = ::jint>
	static auto HIDE_ON_CLOSE() {
		static_assert(field_signatures[jField<F>("HIDE_ON_CLOSE")] != -1);
		return sat<F>("HIDE_ON_CLOSE");
	}

	template<typename F = ::java::lang::String>
	static auto IS_CLOSED_PROPERTY() {
		static_assert(field_signatures[jField<F>("IS_CLOSED_PROPERTY")] != -1);
		return sat<F>("IS_CLOSED_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto IS_ICON_PROPERTY() {
		static_assert(field_signatures[jField<F>("IS_ICON_PROPERTY")] != -1);
		return sat<F>("IS_ICON_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto IS_MAXIMUM_PROPERTY() {
		static_assert(field_signatures[jField<F>("IS_MAXIMUM_PROPERTY")] != -1);
		return sat<F>("IS_MAXIMUM_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto IS_SELECTED_PROPERTY() {
		static_assert(field_signatures[jField<F>("IS_SELECTED_PROPERTY")] != -1);
		return sat<F>("IS_SELECTED_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto LAYERED_PANE_PROPERTY() {
		static_assert(field_signatures[jField<F>("LAYERED_PANE_PROPERTY")] != -1);
		return sat<F>("LAYERED_PANE_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto MENU_BAR_PROPERTY() {
		static_assert(field_signatures[jField<F>("MENU_BAR_PROPERTY")] != -1);
		return sat<F>("MENU_BAR_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto ROOT_PANE_PROPERTY() {
		static_assert(field_signatures[jField<F>("ROOT_PANE_PROPERTY")] != -1);
		return sat<F>("ROOT_PANE_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto TITLE_PROPERTY() {
		static_assert(field_signatures[jField<F>("TITLE_PROPERTY")] != -1);
		return sat<F>("TITLE_PROPERTY");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::jboolean)>(), //
		jConstructor<::jvoid(::java::lang::String, ::jboolean, ::jboolean)>(), //
		jConstructor<::jvoid(::java::lang::String, ::jboolean, ::jboolean, ::jboolean)>(), //
		jConstructor<::jvoid(::java::lang::String, ::jboolean, ::jboolean, ::jboolean, ::jboolean)>(), //
		jMethod<::jvoid(::javax::swing::event::InternalFrameListener)>("addInternalFrameListener"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jvoid()>("doDefaultCloseAction"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::java::awt::Container()>("getContentPane"), //
		jMethod<::jint()>("getDefaultCloseOperation"), //
		jMethod<::javax::swing::JInternalFrame$JDesktopIcon()>("getDesktopIcon"), //
		jMethod<::javax::swing::JDesktopPane()>("getDesktopPane"), //
		jMethod<::java::awt::Container()>("getFocusCycleRootAncestor"), //
		jMethod<::java::awt::Component()>("getFocusOwner"), //
		jMethod<::javax::swing::Icon()>("getFrameIcon"), //
		jMethod<::java::awt::Component()>("getGlassPane"), //
		jMethod<::javax::swing::event::InternalFrameListener *()>("getInternalFrameListeners"), //
		jMethod<::javax::swing::JMenuBar()>("getJMenuBar"), //
		jMethod<::java::awt::Cursor()>("getLastCursor"), //
		jMethod<::jint()>("getLayer"), //
		jMethod<::javax::swing::JLayeredPane()>("getLayeredPane"), //
		jMethod<::javax::swing::JMenuBar()>("getMenuBar"), //
		jMethod<::java::awt::Component()>("getMostRecentFocusOwner"), //
		jMethod<::java::awt::Rectangle()>("getNormalBounds"), //
		jMethod<::javax::swing::JRootPane()>("getRootPane"), //
		jMethod<::java::lang::String()>("getTitle"), //
		jMethod<::javax::swing::plaf::InternalFrameUI()>("getUI"), //
		jMethod<::java::lang::String()>("getUIClassID"), //
		jMethod<::java::lang::String()>("getWarningString"), //
		jMethod<::jvoid()>("hide"), //
		jMethod<::jboolean()>("isClosable"), //
		jMethod<::jboolean()>("isClosed"), //
		jMethod<::jboolean()>("isFocusCycleRoot"), //
		jMethod<::jboolean()>("isIcon"), //
		jMethod<::jboolean()>("isIconifiable"), //
		jMethod<::jboolean()>("isMaximizable"), //
		jMethod<::jboolean()>("isMaximum"), //
		jMethod<::jboolean()>("isResizable"), //
		jMethod<::jboolean()>("isSelected"), //
		jMethod<::jvoid()>("moveToBack"), //
		jMethod<::jvoid()>("moveToFront"), //
		jMethod<::jvoid()>("pack"), //
		jMethod<::jvoid(::java::awt::Component)>("remove"), //
		jMethod<::jvoid(::javax::swing::event::InternalFrameListener)>("removeInternalFrameListener"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("reshape"), //
		jMethod<::jvoid()>("restoreSubcomponentFocus"), //
		jMethod<::jvoid(::jboolean)>("setClosable"), //
		jMethod<::jvoid(::jboolean)>("setClosed"), //
		jMethod<::jvoid(::java::awt::Container)>("setContentPane"), //
		jMethod<::jvoid(::java::awt::Cursor)>("setCursor"), //
		jMethod<::jvoid(::jint)>("setDefaultCloseOperation"), //
		jMethod<::jvoid(::javax::swing::JInternalFrame$JDesktopIcon)>("setDesktopIcon"), //
		jMethod<::jvoid(::jboolean)>("setFocusCycleRoot"), //
		jMethod<::jvoid(::javax::swing::Icon)>("setFrameIcon"), //
		jMethod<::jvoid(::java::awt::Component)>("setGlassPane"), //
		jMethod<::jvoid(::jboolean)>("setIcon"), //
		jMethod<::jvoid(::jboolean)>("setIconifiable"), //
		jMethod<::jvoid(::javax::swing::JMenuBar)>("setJMenuBar"), //
		jMethod<::jvoid(::jint)>("setLayer"), //
		jMethod<::jvoid(::java::lang::Integer)>("setLayer"), //
		jMethod<::jvoid(::javax::swing::JLayeredPane)>("setLayeredPane"), //
		jMethod<::jvoid(::java::awt::LayoutManager)>("setLayout"), //
		jMethod<::jvoid(::jboolean)>("setMaximizable"), //
		jMethod<::jvoid(::jboolean)>("setMaximum"), //
		jMethod<::jvoid(::javax::swing::JMenuBar)>("setMenuBar"), //
		jMethod<::jvoid(::java::awt::Rectangle)>("setNormalBounds"), //
		jMethod<::jvoid(::jboolean)>("setResizable"), //
		jMethod<::jvoid(::jboolean)>("setSelected"), //
		jMethod<::jvoid(::java::lang::String)>("setTitle"), //
		jMethod<::jvoid(::javax::swing::plaf::InternalFrameUI)>("setUI"), //
		jMethod<::jvoid()>("show"), //
		jMethod<::jvoid()>("toBack"), //
		jMethod<::jvoid()>("toFront"), //
		jMethod<::jvoid()>("updateUI"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addInternalFrameListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addInternalFrameListener")] != -1);
		return call<R>("addInternalFrameListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto doDefaultCloseAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("doDefaultCloseAction")] != -1);
		return call<R>("doDefaultCloseAction", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Container, typename... Args>
	auto getContentPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContentPane")] != -1);
		return call<R>("getContentPane", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDefaultCloseOperation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultCloseOperation")] != -1);
		return call<R>("getDefaultCloseOperation", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JInternalFrame$JDesktopIcon, typename... Args>
	auto getDesktopIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDesktopIcon")] != -1);
		return call<R>("getDesktopIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JDesktopPane, typename... Args>
	auto getDesktopPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDesktopPane")] != -1);
		return call<R>("getDesktopPane", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Container, typename... Args>
	auto getFocusCycleRootAncestor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFocusCycleRootAncestor")] != -1);
		return call<R>("getFocusCycleRootAncestor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getFocusOwner(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFocusOwner")] != -1);
		return call<R>("getFocusOwner", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getFrameIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFrameIcon")] != -1);
		return call<R>("getFrameIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getGlassPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGlassPane")] != -1);
		return call<R>("getGlassPane", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::event::InternalFrameListener *, typename... Args>
	auto getInternalFrameListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInternalFrameListeners")] != -1);
		return call<R>("getInternalFrameListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JMenuBar, typename... Args>
	auto getJMenuBar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJMenuBar")] != -1);
		return call<R>("getJMenuBar", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Cursor, typename... Args>
	auto getLastCursor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLastCursor")] != -1);
		return call<R>("getLastCursor", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLayer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLayer")] != -1);
		return call<R>("getLayer", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JLayeredPane, typename... Args>
	auto getLayeredPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLayeredPane")] != -1);
		return call<R>("getLayeredPane", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JMenuBar, typename... Args>
	auto getMenuBar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMenuBar")] != -1);
		return call<R>("getMenuBar", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getMostRecentFocusOwner(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMostRecentFocusOwner")] != -1);
		return call<R>("getMostRecentFocusOwner", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getNormalBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNormalBounds")] != -1);
		return call<R>("getNormalBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JRootPane, typename... Args>
	auto getRootPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRootPane")] != -1);
		return call<R>("getRootPane", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTitle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTitle")] != -1);
		return call<R>("getTitle", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::InternalFrameUI, typename... Args>
	auto getUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUI")] != -1);
		return call<R>("getUI", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUIClassID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUIClassID")] != -1);
		return call<R>("getUIClassID", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getWarningString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWarningString")] != -1);
		return call<R>("getWarningString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto hide(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hide")] != -1);
		return call<R>("hide", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isClosable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isClosable")] != -1);
		return call<R>("isClosable", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isClosed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isClosed")] != -1);
		return call<R>("isClosed", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFocusCycleRoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFocusCycleRoot")] != -1);
		return call<R>("isFocusCycleRoot", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isIcon")] != -1);
		return call<R>("isIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isIconifiable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isIconifiable")] != -1);
		return call<R>("isIconifiable", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isMaximizable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isMaximizable")] != -1);
		return call<R>("isMaximizable", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isMaximum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isMaximum")] != -1);
		return call<R>("isMaximum", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isResizable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isResizable")] != -1);
		return call<R>("isResizable", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSelected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSelected")] != -1);
		return call<R>("isSelected", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto moveToBack(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("moveToBack")] != -1);
		return call<R>("moveToBack", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto moveToFront(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("moveToFront")] != -1);
		return call<R>("moveToFront", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto pack(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("pack")] != -1);
		return call<R>("pack", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeInternalFrameListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeInternalFrameListener")] != -1);
		return call<R>("removeInternalFrameListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reshape(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reshape")] != -1);
		return call<R>("reshape", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto restoreSubcomponentFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("restoreSubcomponentFocus")] != -1);
		return call<R>("restoreSubcomponentFocus", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setClosable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setClosable")] != -1);
		return call<R>("setClosable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setClosed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setClosed")] != -1);
		return call<R>("setClosed", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setContentPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setContentPane")] != -1);
		return call<R>("setContentPane", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCursor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCursor")] != -1);
		return call<R>("setCursor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDefaultCloseOperation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDefaultCloseOperation")] != -1);
		return call<R>("setDefaultCloseOperation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDesktopIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDesktopIcon")] != -1);
		return call<R>("setDesktopIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFocusCycleRoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFocusCycleRoot")] != -1);
		return call<R>("setFocusCycleRoot", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFrameIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFrameIcon")] != -1);
		return call<R>("setFrameIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGlassPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setGlassPane")] != -1);
		return call<R>("setGlassPane", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIcon")] != -1);
		return call<R>("setIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIconifiable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIconifiable")] != -1);
		return call<R>("setIconifiable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setJMenuBar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setJMenuBar")] != -1);
		return call<R>("setJMenuBar", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLayer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLayer")] != -1);
		return call<R>("setLayer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLayeredPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLayeredPane")] != -1);
		return call<R>("setLayeredPane", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLayout")] != -1);
		return call<R>("setLayout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaximizable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMaximizable")] != -1);
		return call<R>("setMaximizable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaximum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMaximum")] != -1);
		return call<R>("setMaximum", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMenuBar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMenuBar")] != -1);
		return call<R>("setMenuBar", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNormalBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNormalBounds")] != -1);
		return call<R>("setNormalBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setResizable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setResizable")] != -1);
		return call<R>("setResizable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelected")] != -1);
		return call<R>("setSelected", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTitle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTitle")] != -1);
		return call<R>("setTitle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUI")] != -1);
		return call<R>("setUI", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto show(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("show")] != -1);
		return call<R>("show", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto toBack(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toBack")] != -1);
		return call<R>("toBack", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto toFront(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toFront")] != -1);
		return call<R>("toFront", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateUI")] != -1);
		return call<R>("updateUI", std::forward<Args>(args)...);
	}

};

#endif
