#ifndef javax_swing_tree_DefaultTreeCellEditor$DefaultTextField_HPP
#define javax_swing_tree_DefaultTreeCellEditor$DefaultTextField_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::tree::DefaultTreeCellEditor$DefaultTextField : public jObject<::javax::swing::tree::DefaultTreeCellEditor$DefaultTextField, ::javax::swing::JTextField> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_tree / "DefaultTreeCellEditor$DefaultTextField";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::tree::DefaultTreeCellEditor, ::javax::swing::border::Border)>(), //
		jMethod<::javax::swing::border::Border()>("getBorder"), //
		jMethod<::java::awt::Font()>("getFont"), //
		jMethod<::java::awt::Dimension()>("getPreferredSize"), //
		jMethod<::jvoid(::javax::swing::border::Border)>("setBorder"), //
	};

	template<typename R = ::javax::swing::border::Border, typename... Args>
	auto getBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorder")] != -1);
		return call<R>("getBorder", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Font, typename... Args>
	auto getFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFont")] != -1);
		return call<R>("getFont", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreferredSize")] != -1);
		return call<R>("getPreferredSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBorder")] != -1);
		return call<R>("setBorder", std::forward<Args>(args)...);
	}

};

#endif
