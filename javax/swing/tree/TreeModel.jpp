#ifndef javax_swing_tree_TreeModel_HPP
#define javax_swing_tree_TreeModel_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::tree::TreeModel : public jObject<::javax::swing::tree::TreeModel, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_tree / "TreeModel";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::javax::swing::event::TreeModelListener)>("addTreeModelListener"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::jint)>("getChild"), //
		jMethod<::jint(::java::lang::Object)>("getChildCount"), //
		jMethod<::jint(::java::lang::Object, ::java::lang::Object)>("getIndexOfChild"), //
		jMethod<::java::lang::Object()>("getRoot"), //
		jMethod<::jboolean(::java::lang::Object)>("isLeaf"), //
		jMethod<::jvoid(::javax::swing::event::TreeModelListener)>("removeTreeModelListener"), //
		jMethod<::jvoid(::javax::swing::tree::TreePath, ::java::lang::Object)>("valueForPathChanged"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addTreeModelListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addTreeModelListener")] != -1);
		return call<R>("addTreeModelListener", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getChild(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getChild")] != -1);
		return call<R>("getChild", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getChildCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getChildCount")] != -1);
		return call<R>("getChildCount", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getIndexOfChild(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getIndexOfChild")] != -1);
		return call<R>("getIndexOfChild", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getRoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRoot")] != -1);
		return call<R>("getRoot", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLeaf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isLeaf")] != -1);
		return call<R>("isLeaf", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeTreeModelListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeTreeModelListener")] != -1);
		return call<R>("removeTreeModelListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto valueForPathChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("valueForPathChanged")] != -1);
		return call<R>("valueForPathChanged", forward<Args>(args)...);
	}

};

#endif
