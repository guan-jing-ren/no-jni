#ifndef javax_swing_tree_DefaultTreeCellRenderer_HPP
#define javax_swing_tree_DefaultTreeCellRenderer_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::tree::DefaultTreeCellRenderer : public jObject<::javax::swing::tree::DefaultTreeCellRenderer, ::javax::swing::JLabel> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_tree / "DefaultTreeCellRenderer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::lang::String, ::jbyte, ::jbyte)>("firePropertyChange"), //
		jMethod<::jvoid(::java::lang::String, ::jchar, ::jchar)>("firePropertyChange"), //
		jMethod<::jvoid(::java::lang::String, ::jdouble, ::jdouble)>("firePropertyChange"), //
		jMethod<::jvoid(::java::lang::String, ::jfloat, ::jfloat)>("firePropertyChange"), //
		jMethod<::jvoid(::java::lang::String, ::jint, ::jint)>("firePropertyChange"), //
		jMethod<::jvoid(::java::lang::String, ::jlong, ::jlong)>("firePropertyChange"), //
		jMethod<::jvoid(::java::lang::String, ::jshort, ::jshort)>("firePropertyChange"), //
		jMethod<::jvoid(::java::lang::String, ::jboolean, ::jboolean)>("firePropertyChange"), //
		jMethod<::java::awt::Color()>("getBackgroundNonSelectionColor"), //
		jMethod<::java::awt::Color()>("getBackgroundSelectionColor"), //
		jMethod<::java::awt::Color()>("getBorderSelectionColor"), //
		jMethod<::javax::swing::Icon()>("getClosedIcon"), //
		jMethod<::javax::swing::Icon()>("getDefaultClosedIcon"), //
		jMethod<::javax::swing::Icon()>("getDefaultLeafIcon"), //
		jMethod<::javax::swing::Icon()>("getDefaultOpenIcon"), //
		jMethod<::java::awt::Font()>("getFont"), //
		jMethod<::javax::swing::Icon()>("getLeafIcon"), //
		jMethod<::javax::swing::Icon()>("getOpenIcon"), //
		jMethod<::java::awt::Dimension()>("getPreferredSize"), //
		jMethod<::java::awt::Color()>("getTextNonSelectionColor"), //
		jMethod<::java::awt::Color()>("getTextSelectionColor"), //
		jMethod<::java::awt::Component(::javax::swing::JTree, ::java::lang::Object, ::jboolean, ::jboolean, ::jboolean, ::jint, ::jboolean)>("getTreeCellRendererComponent"), //
		jMethod<::jvoid()>("invalidate"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paint"), //
		jMethod<::jvoid()>("repaint"), //
		jMethod<::jvoid(::jlong, ::jint, ::jint, ::jint, ::jint)>("repaint"), //
		jMethod<::jvoid(::java::awt::Rectangle)>("repaint"), //
		jMethod<::jvoid()>("revalidate"), //
		jMethod<::jvoid(::java::awt::Color)>("setBackground"), //
		jMethod<::jvoid(::java::awt::Color)>("setBackgroundNonSelectionColor"), //
		jMethod<::jvoid(::java::awt::Color)>("setBackgroundSelectionColor"), //
		jMethod<::jvoid(::java::awt::Color)>("setBorderSelectionColor"), //
		jMethod<::jvoid(::javax::swing::Icon)>("setClosedIcon"), //
		jMethod<::jvoid(::java::awt::Font)>("setFont"), //
		jMethod<::jvoid(::javax::swing::Icon)>("setLeafIcon"), //
		jMethod<::jvoid(::javax::swing::Icon)>("setOpenIcon"), //
		jMethod<::jvoid(::java::awt::Color)>("setTextNonSelectionColor"), //
		jMethod<::jvoid(::java::awt::Color)>("setTextSelectionColor"), //
		jMethod<::jvoid()>("updateUI"), //
		jMethod<::jvoid()>("validate"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto firePropertyChange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("firePropertyChange")] != -1);
		return call<R>("firePropertyChange", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getBackgroundNonSelectionColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBackgroundNonSelectionColor")] != -1);
		return call<R>("getBackgroundNonSelectionColor", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getBackgroundSelectionColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBackgroundSelectionColor")] != -1);
		return call<R>("getBackgroundSelectionColor", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getBorderSelectionColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBorderSelectionColor")] != -1);
		return call<R>("getBorderSelectionColor", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getClosedIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getClosedIcon")] != -1);
		return call<R>("getClosedIcon", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getDefaultClosedIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDefaultClosedIcon")] != -1);
		return call<R>("getDefaultClosedIcon", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getDefaultLeafIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDefaultLeafIcon")] != -1);
		return call<R>("getDefaultLeafIcon", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getDefaultOpenIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDefaultOpenIcon")] != -1);
		return call<R>("getDefaultOpenIcon", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Font, typename... Args>
	auto getFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFont")] != -1);
		return call<R>("getFont", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getLeafIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLeafIcon")] != -1);
		return call<R>("getLeafIcon", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getOpenIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getOpenIcon")] != -1);
		return call<R>("getOpenIcon", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreferredSize")] != -1);
		return call<R>("getPreferredSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getTextNonSelectionColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTextNonSelectionColor")] != -1);
		return call<R>("getTextNonSelectionColor", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getTextSelectionColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTextSelectionColor")] != -1);
		return call<R>("getTextSelectionColor", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getTreeCellRendererComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTreeCellRendererComponent")] != -1);
		return call<R>("getTreeCellRendererComponent", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto invalidate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("invalidate")] != -1);
		return call<R>("invalidate", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto repaint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("repaint")] != -1);
		return call<R>("repaint", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto revalidate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("revalidate")] != -1);
		return call<R>("revalidate", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBackground")] != -1);
		return call<R>("setBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackgroundNonSelectionColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBackgroundNonSelectionColor")] != -1);
		return call<R>("setBackgroundNonSelectionColor", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackgroundSelectionColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBackgroundSelectionColor")] != -1);
		return call<R>("setBackgroundSelectionColor", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBorderSelectionColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBorderSelectionColor")] != -1);
		return call<R>("setBorderSelectionColor", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setClosedIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setClosedIcon")] != -1);
		return call<R>("setClosedIcon", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFont")] != -1);
		return call<R>("setFont", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLeafIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLeafIcon")] != -1);
		return call<R>("setLeafIcon", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOpenIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setOpenIcon")] != -1);
		return call<R>("setOpenIcon", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTextNonSelectionColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setTextNonSelectionColor")] != -1);
		return call<R>("setTextNonSelectionColor", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTextSelectionColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setTextSelectionColor")] != -1);
		return call<R>("setTextSelectionColor", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("updateUI")] != -1);
		return call<R>("updateUI", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto validate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("validate")] != -1);
		return call<R>("validate", forward<Args>(args)...);
	}

};

#endif
