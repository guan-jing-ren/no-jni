#ifndef javax_swing_tree_FixedHeightLayoutCache_HPP
#define javax_swing_tree_FixedHeightLayoutCache_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::tree::FixedHeightLayoutCache : public jObject<::javax::swing::tree::FixedHeightLayoutCache, ::javax::swing::tree::AbstractLayoutCache> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_tree / "FixedHeightLayoutCache";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::awt::Rectangle(::javax::swing::tree::TreePath, ::java::awt::Rectangle)>("getBounds"), //
		jMethod<::jboolean(::javax::swing::tree::TreePath)>("getExpandedState"), //
		jMethod<::javax::swing::tree::TreePath(::jint, ::jint)>("getPathClosestTo"), //
		jMethod<::javax::swing::tree::TreePath(::jint)>("getPathForRow"), //
		jMethod<::jint()>("getRowCount"), //
		jMethod<::jint(::javax::swing::tree::TreePath)>("getRowForPath"), //
		jMethod<::jint(::javax::swing::tree::TreePath)>("getVisibleChildCount"), //
		jMethod<::java::util::Enumeration(::javax::swing::tree::TreePath)>("getVisiblePathsFrom"), //
		jMethod<::jvoid(::javax::swing::tree::TreePath)>("invalidatePathBounds"), //
		jMethod<::jvoid()>("invalidateSizes"), //
		jMethod<::jboolean(::javax::swing::tree::TreePath)>("isExpanded"), //
		jMethod<::jvoid(::javax::swing::tree::TreePath, ::jboolean)>("setExpandedState"), //
		jMethod<::jvoid(::javax::swing::tree::TreeModel)>("setModel"), //
		jMethod<::jvoid(::jboolean)>("setRootVisible"), //
		jMethod<::jvoid(::jint)>("setRowHeight"), //
		jMethod<::jvoid(::javax::swing::event::TreeModelEvent)>("treeNodesChanged"), //
		jMethod<::jvoid(::javax::swing::event::TreeModelEvent)>("treeNodesInserted"), //
		jMethod<::jvoid(::javax::swing::event::TreeModelEvent)>("treeNodesRemoved"), //
		jMethod<::jvoid(::javax::swing::event::TreeModelEvent)>("treeStructureChanged"), //
	};

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBounds")] != -1);
		return call<R>("getBounds", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getExpandedState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getExpandedState")] != -1);
		return call<R>("getExpandedState", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreePath, typename... Args>
	auto getPathClosestTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPathClosestTo")] != -1);
		return call<R>("getPathClosestTo", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreePath, typename... Args>
	auto getPathForRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPathForRow")] != -1);
		return call<R>("getPathForRow", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRowCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRowCount")] != -1);
		return call<R>("getRowCount", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRowForPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRowForPath")] != -1);
		return call<R>("getRowForPath", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getVisibleChildCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getVisibleChildCount")] != -1);
		return call<R>("getVisibleChildCount", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto getVisiblePathsFrom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getVisiblePathsFrom")] != -1);
		return call<R>("getVisiblePathsFrom", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto invalidatePathBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("invalidatePathBounds")] != -1);
		return call<R>("invalidatePathBounds", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto invalidateSizes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("invalidateSizes")] != -1);
		return call<R>("invalidateSizes", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isExpanded(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isExpanded")] != -1);
		return call<R>("isExpanded", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setExpandedState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setExpandedState")] != -1);
		return call<R>("setExpandedState", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setModel")] != -1);
		return call<R>("setModel", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRootVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setRootVisible")] != -1);
		return call<R>("setRootVisible", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRowHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setRowHeight")] != -1);
		return call<R>("setRowHeight", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto treeNodesChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("treeNodesChanged")] != -1);
		return call<R>("treeNodesChanged", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto treeNodesInserted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("treeNodesInserted")] != -1);
		return call<R>("treeNodesInserted", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto treeNodesRemoved(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("treeNodesRemoved")] != -1);
		return call<R>("treeNodesRemoved", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto treeStructureChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("treeStructureChanged")] != -1);
		return call<R>("treeStructureChanged", forward<Args>(args)...);
	}

};

#endif
