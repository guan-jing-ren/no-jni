#ifndef javax_swing_tree_DefaultTreeModel_HPP
#define javax_swing_tree_DefaultTreeModel_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::tree::DefaultTreeModel : public jObject<::javax::swing::tree::DefaultTreeModel, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_tree / "DefaultTreeModel";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::tree::TreeNode)>(), //
		jConstructor<::jvoid(::javax::swing::tree::TreeNode, ::jboolean)>(), //
		jMethod<::jvoid(::javax::swing::event::TreeModelListener)>("addTreeModelListener"), //
		jMethod<::jboolean()>("asksAllowsChildren"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::jint)>("getChild"), //
		jMethod<::jint(::java::lang::Object)>("getChildCount"), //
		jMethod<::jint(::java::lang::Object, ::java::lang::Object)>("getIndexOfChild"), //
		jMethod<::java::util::EventListener *(::java::lang::Class)>("getListeners"), //
		jMethod<::javax::swing::tree::TreeNode *(::javax::swing::tree::TreeNode)>("getPathToRoot"), //
		jMethod<::java::lang::Object()>("getRoot"), //
		jMethod<::javax::swing::event::TreeModelListener *()>("getTreeModelListeners"), //
		jMethod<::jvoid(::javax::swing::tree::MutableTreeNode, ::javax::swing::tree::MutableTreeNode, ::jint)>("insertNodeInto"), //
		jMethod<::jboolean(::java::lang::Object)>("isLeaf"), //
		jMethod<::jvoid(::javax::swing::tree::TreeNode)>("nodeChanged"), //
		jMethod<::jvoid(::javax::swing::tree::TreeNode)>("nodeStructureChanged"), //
		jMethod<::jvoid(::javax::swing::tree::TreeNode, ::jint *)>("nodesChanged"), //
		jMethod<::jvoid(::javax::swing::tree::TreeNode, ::jint *)>("nodesWereInserted"), //
		jMethod<::jvoid(::javax::swing::tree::TreeNode, ::jint *, ::java::lang::Object *)>("nodesWereRemoved"), //
		jMethod<::jvoid()>("reload"), //
		jMethod<::jvoid(::javax::swing::tree::TreeNode)>("reload"), //
		jMethod<::jvoid(::javax::swing::tree::MutableTreeNode)>("removeNodeFromParent"), //
		jMethod<::jvoid(::javax::swing::event::TreeModelListener)>("removeTreeModelListener"), //
		jMethod<::jvoid(::jboolean)>("setAsksAllowsChildren"), //
		jMethod<::jvoid(::javax::swing::tree::TreeNode)>("setRoot"), //
		jMethod<::jvoid(::javax::swing::tree::TreePath, ::java::lang::Object)>("valueForPathChanged"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addTreeModelListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addTreeModelListener")] != -1);
		return call<R>("addTreeModelListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto asksAllowsChildren(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("asksAllowsChildren")] != -1);
		return call<R>("asksAllowsChildren", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getChild(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChild")] != -1);
		return call<R>("getChild", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getChildCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChildCount")] != -1);
		return call<R>("getChildCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getIndexOfChild(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIndexOfChild")] != -1);
		return call<R>("getIndexOfChild", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::EventListener *, typename... Args>
	auto getListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getListeners")] != -1);
		return call<R>("getListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreeNode *, typename... Args>
	auto getPathToRoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPathToRoot")] != -1);
		return call<R>("getPathToRoot", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getRoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRoot")] != -1);
		return call<R>("getRoot", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::event::TreeModelListener *, typename... Args>
	auto getTreeModelListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTreeModelListeners")] != -1);
		return call<R>("getTreeModelListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insertNodeInto(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insertNodeInto")] != -1);
		return call<R>("insertNodeInto", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLeaf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLeaf")] != -1);
		return call<R>("isLeaf", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto nodeChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nodeChanged")] != -1);
		return call<R>("nodeChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto nodeStructureChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nodeStructureChanged")] != -1);
		return call<R>("nodeStructureChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto nodesChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nodesChanged")] != -1);
		return call<R>("nodesChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto nodesWereInserted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nodesWereInserted")] != -1);
		return call<R>("nodesWereInserted", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto nodesWereRemoved(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nodesWereRemoved")] != -1);
		return call<R>("nodesWereRemoved", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reload(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reload")] != -1);
		return call<R>("reload", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeNodeFromParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeNodeFromParent")] != -1);
		return call<R>("removeNodeFromParent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeTreeModelListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeTreeModelListener")] != -1);
		return call<R>("removeTreeModelListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAsksAllowsChildren(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAsksAllowsChildren")] != -1);
		return call<R>("setAsksAllowsChildren", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRoot")] != -1);
		return call<R>("setRoot", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto valueForPathChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueForPathChanged")] != -1);
		return call<R>("valueForPathChanged", std::forward<Args>(args)...);
	}

};

#endif
