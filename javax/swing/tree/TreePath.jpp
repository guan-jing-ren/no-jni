#ifndef javax_swing_tree_TreePath_HPP
#define javax_swing_tree_TreePath_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::tree::TreePath : public jObject<::javax::swing::tree::TreePath, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_tree / "TreePath";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::Object)>(), //
		jConstructor<::jvoid(::java::lang::Object *)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::Object()>("getLastPathComponent"), //
		jMethod<::javax::swing::tree::TreePath()>("getParentPath"), //
		jMethod<::java::lang::Object *()>("getPath"), //
		jMethod<::java::lang::Object(::jint)>("getPathComponent"), //
		jMethod<::jint()>("getPathCount"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean(::javax::swing::tree::TreePath)>("isDescendant"), //
		jMethod<::javax::swing::tree::TreePath(::java::lang::Object)>("pathByAddingChild"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getLastPathComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLastPathComponent")] != -1);
		return call<R>("getLastPathComponent", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreePath, typename... Args>
	auto getParentPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getParentPath")] != -1);
		return call<R>("getParentPath", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object *, typename... Args>
	auto getPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPath")] != -1);
		return call<R>("getPath", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getPathComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPathComponent")] != -1);
		return call<R>("getPathComponent", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPathCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPathCount")] != -1);
		return call<R>("getPathCount", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDescendant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isDescendant")] != -1);
		return call<R>("isDescendant", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreePath, typename... Args>
	auto pathByAddingChild(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("pathByAddingChild")] != -1);
		return call<R>("pathByAddingChild", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
